
zmk.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00026000 <_vector_table>:
   26000:	b0 59 00 20 75 a4 02 00 89 4c 04 00 49 a4 02 00     .Y. u....L..I...
   26010:	49 a4 02 00 49 a4 02 00 49 a4 02 00 00 00 00 00     I...I...I.......
	...
   2602c:	bd a1 02 00 49 a4 02 00 00 00 00 00 75 a1 02 00     ....I.......u...
   2603c:	49 a4 02 00                                         I...

00026040 <_irq_vector_table>:
   26040:	39 a2 02 00 b5 a1 03 00 39 a2 02 00 39 a2 02 00     9.......9...9...
   26050:	39 a2 02 00 39 a2 02 00 39 a2 02 00 39 a2 02 00     9...9...9...9...
   26060:	39 a2 02 00 39 a2 02 00 39 a2 02 00 39 a2 02 00     9...9...9...9...
   26070:	39 a2 02 00 39 a2 02 00 39 a2 02 00 39 a2 02 00     9...9...9...9...
   26080:	39 a2 02 00 39 a2 02 00 39 a2 02 00 39 a2 02 00     9...9...9...9...
   26090:	39 a2 02 00 39 a2 02 00 39 a2 02 00 39 a2 02 00     9...9...9...9...
   260a0:	39 a2 02 00 39 a2 02 00 39 a2 02 00 39 a2 02 00     9...9...9...9...
   260b0:	39 a2 02 00 39 a2 02 00 39 a2 02 00 39 a2 02 00     9...9...9...9...
   260c0:	39 a2 02 00 39 a2 02 00 39 a2 02 00 39 a2 02 00     9...9...9...9...
   260d0:	39 a2 02 00 39 a2 02 00 39 a2 02 00 39 a2 02 00     9...9...9...9...
   260e0:	39 a2 02 00 39 a2 02 00 39 a2 02 00 39 a2 02 00     9...9...9...9...
   260f0:	39 a2 02 00 39 a2 02 00 39 a2 02 00 39 a2 02 00     9...9...9...9...

Disassembly of section text:

00026100 <__aeabi_uldivmod>:
   26100:	b953      	cbnz	r3, 26118 <__aeabi_uldivmod+0x18>
   26102:	b94a      	cbnz	r2, 26118 <__aeabi_uldivmod+0x18>
   26104:	2900      	cmp	r1, #0
   26106:	bf08      	it	eq
   26108:	2800      	cmpeq	r0, #0
   2610a:	bf1c      	itt	ne
   2610c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   26110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26114:	f000 b80c 	b.w	26130 <__aeabi_idiv0>
   26118:	f1ad 0c08 	sub.w	ip, sp, #8
   2611c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   26120:	f01c fa6a 	bl	425f8 <__udivmoddi4>
   26124:	f8dd e004 	ldr.w	lr, [sp, #4]
   26128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2612c:	b004      	add	sp, #16
   2612e:	4770      	bx	lr

00026130 <__aeabi_idiv0>:
   26130:	4770      	bx	lr
   26132:	bf00      	nop
   26134:	0000      	movs	r0, r0
	...

00026138 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   26138:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   2613a:	4d3f      	ldr	r5, [pc, #252]	; (26238 <bt_init+0x100>)
   2613c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   26140:	6899      	ldr	r1, [r3, #8]
   26142:	f011 0101 	ands.w	r1, r1, #1
   26146:	d120      	bne.n	2618a <bt_init+0x52>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   26148:	aa01      	add	r2, sp, #4
   2614a:	f640 4003 	movw	r0, #3075	; 0xc03
   2614e:	f004 ff6f 	bl	2b030 <bt_hci_cmd_send_sync>
		if (err) {
   26152:	4604      	mov	r4, r0
   26154:	2800      	cmp	r0, #0
   26156:	d16b      	bne.n	26230 <bt_init+0xf8>
		hci_reset_complete(rsp);
   26158:	9801      	ldr	r0, [sp, #4]
	uint8_t status = buf->data[0];
   2615a:	6883      	ldr	r3, [r0, #8]
	if (status) {
   2615c:	781b      	ldrb	r3, [r3, #0]
   2615e:	b993      	cbnz	r3, 26186 <bt_init+0x4e>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26160:	f3bf 8f5b 	dmb	ish
   26164:	462b      	mov	r3, r5
   26166:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   2616a:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   2616e:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26172:	f3bf 8f5b 	dmb	ish
   26176:	e853 1f00 	ldrex	r1, [r3]
   2617a:	e843 2400 	strex	r4, r2, [r3]
   2617e:	2c00      	cmp	r4, #0
   26180:	d1f9      	bne.n	26176 <bt_init+0x3e>
   26182:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   26186:	f016 ffd9 	bl	3d13c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   2618a:	aa01      	add	r2, sp, #4
   2618c:	2100      	movs	r1, #0
   2618e:	f241 0003 	movw	r0, #4099	; 0x1003
   26192:	f004 ff4d 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   26196:	4604      	mov	r4, r0
   26198:	2800      	cmp	r0, #0
   2619a:	d149      	bne.n	26230 <bt_init+0xf8>
	read_local_features_complete(rsp);
   2619c:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   2619e:	4827      	ldr	r0, [pc, #156]	; (2623c <bt_init+0x104>)
   261a0:	68b1      	ldr	r1, [r6, #8]
   261a2:	2208      	movs	r2, #8
   261a4:	3101      	adds	r1, #1
   261a6:	f01e fe2c 	bl	44e02 <memcpy>
	net_buf_unref(rsp);
   261aa:	4630      	mov	r0, r6
   261ac:	f016 ffc6 	bl	3d13c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   261b0:	4621      	mov	r1, r4
   261b2:	aa01      	add	r2, sp, #4
   261b4:	f241 0001 	movw	r0, #4097	; 0x1001
   261b8:	f004 ff3a 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   261bc:	4604      	mov	r4, r0
   261be:	2800      	cmp	r0, #0
   261c0:	d136      	bne.n	26230 <bt_init+0xf8>
	read_local_ver_complete(rsp);
   261c2:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   261c4:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   261c6:	785a      	ldrb	r2, [r3, #1]
   261c8:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   261cc:	78d9      	ldrb	r1, [r3, #3]
   261ce:	789a      	ldrb	r2, [r3, #2]
   261d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   261d4:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   261d8:	791a      	ldrb	r2, [r3, #4]
   261da:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   261de:	7a19      	ldrb	r1, [r3, #8]
   261e0:	79da      	ldrb	r2, [r3, #7]
   261e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   261e6:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   261ea:	795a      	ldrb	r2, [r3, #5]
   261ec:	799b      	ldrb	r3, [r3, #6]
   261ee:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   261f2:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   261f6:	f016 ffa1 	bl	3d13c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   261fa:	4621      	mov	r1, r4
   261fc:	aa01      	add	r2, sp, #4
   261fe:	f241 0002 	movw	r0, #4098	; 0x1002
   26202:	f004 ff15 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   26206:	4604      	mov	r4, r0
   26208:	b990      	cbnz	r0, 26230 <bt_init+0xf8>
	read_supported_commands_complete(rsp);
   2620a:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   2620c:	480c      	ldr	r0, [pc, #48]	; (26240 <bt_init+0x108>)
   2620e:	68b1      	ldr	r1, [r6, #8]
   26210:	2240      	movs	r2, #64	; 0x40
   26212:	3101      	adds	r1, #1
   26214:	f01e fdf5 	bl	44e02 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   26218:	4809      	ldr	r0, [pc, #36]	; (26240 <bt_init+0x108>)
   2621a:	f01e fea6 	bl	44f6a <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   2621e:	4630      	mov	r0, r6
   26220:	f016 ff8c 	bl	3d13c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   26224:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   26228:	065a      	lsls	r2, r3, #25
   2622a:	d40b      	bmi.n	26244 <bt_init+0x10c>
		return -ENODEV;
   2622c:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   26230:	4620      	mov	r0, r4
   26232:	b002      	add	sp, #8
   26234:	bd70      	pop	{r4, r5, r6, pc}
   26236:	bf00      	nop
   26238:	20000000 	.word	0x20000000
   2623c:	20000070 	.word	0x20000070
   26240:	20000078 	.word	0x20000078
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   26244:	4621      	mov	r1, r4
   26246:	aa01      	add	r2, sp, #4
   26248:	f242 0003 	movw	r0, #8195	; 0x2003
   2624c:	f004 fef0 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   26250:	4604      	mov	r4, r0
   26252:	2800      	cmp	r0, #0
   26254:	d1ec      	bne.n	26230 <bt_init+0xf8>
	read_le_features_complete(rsp);
   26256:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   26258:	48b9      	ldr	r0, [pc, #740]	; (26540 <_flash_used+0x21b>)
   2625a:	68b1      	ldr	r1, [r6, #8]
   2625c:	2208      	movs	r2, #8
   2625e:	3101      	adds	r1, #1
   26260:	f01e fdcf 	bl	44e02 <memcpy>
	net_buf_unref(rsp);
   26264:	4630      	mov	r0, r6
   26266:	f016 ff69 	bl	3d13c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   2626a:	4621      	mov	r1, r4
   2626c:	aa01      	add	r2, sp, #4
   2626e:	f242 0002 	movw	r0, #8194	; 0x2002
   26272:	f004 fedd 	bl	2b030 <bt_hci_cmd_send_sync>
		if (err) {
   26276:	4604      	mov	r4, r0
   26278:	2800      	cmp	r0, #0
   2627a:	d1d9      	bne.n	26230 <bt_init+0xf8>
		le_read_buffer_size_complete(rsp);
   2627c:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   2627e:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   26280:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   26284:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   26288:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   2628a:	b121      	cbz	r1, 26296 <bt_init+0x15e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   2628c:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   2628e:	48ad      	ldr	r0, [pc, #692]	; (26544 <_flash_used+0x21f>)
   26290:	4611      	mov	r1, r2
   26292:	f022 fc25 	bl	48ae0 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   26296:	4620      	mov	r0, r4
   26298:	f016 ff50 	bl	3d13c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   2629c:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   262a0:	f016 0620 	ands.w	r6, r6, #32
   262a4:	f000 8121 	beq.w	264ea <_flash_used+0x1c5>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   262a8:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   262ac:	071b      	lsls	r3, r3, #28
   262ae:	d512      	bpl.n	262d6 <bt_init+0x19e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   262b0:	aa01      	add	r2, sp, #4
   262b2:	2100      	movs	r1, #0
   262b4:	f242 001c 	movw	r0, #8220	; 0x201c
   262b8:	f004 feba 	bl	2b030 <bt_hci_cmd_send_sync>
		if (err) {
   262bc:	4604      	mov	r4, r0
   262be:	2800      	cmp	r0, #0
   262c0:	d1b6      	bne.n	26230 <bt_init+0xf8>
		le_read_supp_states_complete(rsp);
   262c2:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   262c4:	6883      	ldr	r3, [r0, #8]
   262c6:	f8d3 2001 	ldr.w	r2, [r3, #1]
   262ca:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   262ce:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   262d2:	f016 ff33 	bl	3d13c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   262d6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   262da:	069e      	lsls	r6, r3, #26
   262dc:	d523      	bpl.n	26326 <_flash_used+0x1>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   262de:	f10d 0102 	add.w	r1, sp, #2
   262e2:	4668      	mov	r0, sp
   262e4:	f01f f89f 	bl	45426 <hci_le_read_max_data_len>
		if (err) {
   262e8:	4604      	mov	r4, r0
   262ea:	2800      	cmp	r0, #0
   262ec:	d1a0      	bne.n	26230 <bt_init+0xf8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   262ee:	2104      	movs	r1, #4
   262f0:	f242 0024 	movw	r0, #8228	; 0x2024
   262f4:	f004 fe40 	bl	2af78 <bt_hci_cmd_create>
		if (!buf) {
   262f8:	4606      	mov	r6, r0
   262fa:	2800      	cmp	r0, #0
   262fc:	f000 80fc 	beq.w	264f8 <_flash_used+0x1d3>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   26300:	2104      	movs	r1, #4
   26302:	3008      	adds	r0, #8
   26304:	f021 fcc7 	bl	47c96 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   26308:	f8bd 3000 	ldrh.w	r3, [sp]
   2630c:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   2630e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   26312:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   26314:	4622      	mov	r2, r4
   26316:	4631      	mov	r1, r6
   26318:	f242 0024 	movw	r0, #8228	; 0x2024
   2631c:	f004 fe88 	bl	2b030 <bt_hci_cmd_send_sync>
		if (err) {
   26320:	4604      	mov	r4, r0
   26322:	2800      	cmp	r0, #0
   26324:	d184      	bne.n	26230 <bt_init+0xf8>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   26326:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   2632a:	065c      	lsls	r4, r3, #25
   2632c:	d510      	bpl.n	26350 <_flash_used+0x2b>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   2632e:	aa01      	add	r2, sp, #4
   26330:	2100      	movs	r1, #0
   26332:	f242 002a 	movw	r0, #8234	; 0x202a
   26336:	f004 fe7b 	bl	2b030 <bt_hci_cmd_send_sync>
		if (err) {
   2633a:	4604      	mov	r4, r0
   2633c:	2800      	cmp	r0, #0
   2633e:	f47f af77 	bne.w	26230 <bt_init+0xf8>
		le_read_resolving_list_size_complete(rsp);
   26342:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   26344:	6883      	ldr	r3, [r0, #8]
   26346:	785b      	ldrb	r3, [r3, #1]
   26348:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   2634c:	f016 fef6 	bl	3d13c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   26350:	2108      	movs	r1, #8
   26352:	f242 0001 	movw	r0, #8193	; 0x2001
   26356:	f004 fe0f 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   2635a:	4604      	mov	r4, r0
   2635c:	2800      	cmp	r0, #0
   2635e:	f000 80cb 	beq.w	264f8 <_flash_used+0x1d3>
   26362:	2108      	movs	r1, #8
   26364:	4408      	add	r0, r1
   26366:	f021 fc96 	bl	47c96 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   2636a:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   2636e:	f011 0f40 	tst.w	r1, #64	; 0x40
   26372:	4602      	mov	r2, r0
   26374:	f240 2302 	movw	r3, #514	; 0x202
   26378:	bf08      	it	eq
   2637a:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   2637c:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   2637e:	bf4c      	ite	mi
   26380:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   26384:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   26388:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   2638a:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   2638e:	bf48      	it	mi
   26390:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   26394:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26398:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   2639c:	bf18      	it	ne
   2639e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   263a2:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   263a6:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   263a8:	bf48      	it	mi
   263aa:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   263ae:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   263b0:	bf08      	it	eq
   263b2:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   263b6:	2100      	movs	r1, #0
   263b8:	f01e ff18 	bl	451ec <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   263bc:	4621      	mov	r1, r4
   263be:	2200      	movs	r2, #0
   263c0:	f242 0001 	movw	r0, #8193	; 0x2001
   263c4:	f004 fe34 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   263c8:	4604      	mov	r4, r0
   263ca:	2800      	cmp	r0, #0
   263cc:	f47f af30 	bne.w	26230 <bt_init+0xf8>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   263d0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   263d4:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   263d8:	0698      	lsls	r0, r3, #26
   263da:	f100 80a2 	bmi.w	26522 <_flash_used+0x1fd>
	if (bt_dev.le.acl_mtu) {
   263de:	b9d9      	cbnz	r1, 26418 <_flash_used+0xf3>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   263e0:	aa01      	add	r2, sp, #4
   263e2:	f241 0005 	movw	r0, #4101	; 0x1005
   263e6:	f004 fe23 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   263ea:	4604      	mov	r4, r0
   263ec:	2800      	cmp	r0, #0
   263ee:	f47f af1f 	bne.w	26230 <bt_init+0xf8>
	if (bt_dev.le.acl_mtu) {
   263f2:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   263f6:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
   263f8:	b95b      	cbnz	r3, 26412 <_flash_used+0xed>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   263fa:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   263fc:	785a      	ldrb	r2, [r3, #1]
   263fe:	7899      	ldrb	r1, [r3, #2]
   26400:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26404:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   26408:	889a      	ldrh	r2, [r3, #4]
   2640a:	484e      	ldr	r0, [pc, #312]	; (26544 <_flash_used+0x21f>)
   2640c:	4611      	mov	r1, r2
   2640e:	f022 fb67 	bl	48ae0 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   26412:	4620      	mov	r0, r4
   26414:	f016 fe92 	bl	3d13c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   26418:	2108      	movs	r1, #8
   2641a:	f640 4001 	movw	r0, #3073	; 0xc01
   2641e:	f004 fdab 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   26422:	4604      	mov	r4, r0
   26424:	2800      	cmp	r0, #0
   26426:	d067      	beq.n	264f8 <_flash_used+0x1d3>
   26428:	2108      	movs	r1, #8
   2642a:	4408      	add	r0, r1
   2642c:	f021 fc33 	bl	47c96 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   26430:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   26434:	07d9      	lsls	r1, r3, #31
   26436:	4602      	mov	r2, r0
   26438:	d579      	bpl.n	2652e <_flash_used+0x209>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   2643a:	a13f      	add	r1, pc, #252	; (adr r1, 26538 <_flash_used+0x213>)
   2643c:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   26440:	f01e fed4 	bl	451ec <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   26444:	4621      	mov	r1, r4
   26446:	2200      	movs	r2, #0
   26448:	f640 4001 	movw	r0, #3073	; 0xc01
   2644c:	f004 fdf0 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   26450:	4604      	mov	r4, r0
   26452:	2800      	cmp	r0, #0
   26454:	f47f aeec 	bne.w	26230 <bt_init+0xf8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   26458:	4601      	mov	r1, r0
   2645a:	aa01      	add	r2, sp, #4
   2645c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   26460:	f004 fde6 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   26464:	4604      	mov	r4, r0
   26466:	bb48      	cbnz	r0, 264bc <_flash_used+0x197>
	net_buf_unref(rsp);
   26468:	9801      	ldr	r0, [sp, #4]
   2646a:	f016 fe67 	bl	3d13c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   2646e:	4621      	mov	r1, r4
   26470:	aa01      	add	r2, sp, #4
   26472:	f64f 4002 	movw	r0, #64514	; 0xfc02
   26476:	f004 fddb 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   2647a:	4604      	mov	r4, r0
   2647c:	b9f0      	cbnz	r0, 264bc <_flash_used+0x197>
	rp.cmds = (void *)rsp->data;
   2647e:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   26480:	4831      	ldr	r0, [pc, #196]	; (26548 <_flash_used+0x223>)
   26482:	68b1      	ldr	r1, [r6, #8]
   26484:	2202      	movs	r2, #2
   26486:	3101      	adds	r1, #1
   26488:	f01e fcbb 	bl	44e02 <memcpy>
	net_buf_unref(rsp);
   2648c:	4630      	mov	r0, r6
   2648e:	f016 fe55 	bl	3d13c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   26492:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   26496:	075b      	lsls	r3, r3, #29
   26498:	d510      	bpl.n	264bc <_flash_used+0x197>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   2649a:	aa01      	add	r2, sp, #4
   2649c:	4621      	mov	r1, r4
   2649e:	f64f 4003 	movw	r0, #64515	; 0xfc03
   264a2:	f004 fdc5 	bl	2b030 <bt_hci_cmd_send_sync>
		if (err) {
   264a6:	b948      	cbnz	r0, 264bc <_flash_used+0x197>
		rp.feat = (void *)rsp->data;
   264a8:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   264aa:	4828      	ldr	r0, [pc, #160]	; (2654c <_flash_used+0x227>)
   264ac:	68a1      	ldr	r1, [r4, #8]
   264ae:	2201      	movs	r2, #1
   264b0:	4411      	add	r1, r2
   264b2:	f01e fca6 	bl	44e02 <memcpy>
		net_buf_unref(rsp);
   264b6:	4620      	mov	r0, r4
   264b8:	f016 fe40 	bl	3d13c <net_buf_unref>
	err = bt_id_init();
   264bc:	f01f fa31 	bl	45922 <bt_id_init>
	if (err) {
   264c0:	4604      	mov	r4, r0
   264c2:	2800      	cmp	r0, #0
   264c4:	f47f aeb4 	bne.w	26230 <bt_init+0xf8>
		err = bt_conn_init();
   264c8:	f006 fc0e 	bl	2cce8 <bt_conn_init>
		if (err) {
   264cc:	4604      	mov	r4, r0
   264ce:	2800      	cmp	r0, #0
   264d0:	f47f aeae 	bne.w	26230 <bt_init+0xf8>
		if (!bt_dev.id_count) {
   264d4:	79eb      	ldrb	r3, [r5, #7]
   264d6:	2b00      	cmp	r3, #0
   264d8:	f43f aeaa 	beq.w	26230 <bt_init+0xf8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   264dc:	2104      	movs	r1, #4
   264de:	481c      	ldr	r0, [pc, #112]	; (26550 <_flash_used+0x22b>)
   264e0:	f01e fe13 	bl	4510a <atomic_or>
	bt_finalize_init();
   264e4:	f005 f864 	bl	2b5b0 <bt_finalize_init>
	return 0;
   264e8:	e6a2      	b.n	26230 <bt_init+0xf8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   264ea:	2102      	movs	r1, #2
   264ec:	f640 406d 	movw	r0, #3181	; 0xc6d
   264f0:	f004 fd42 	bl	2af78 <bt_hci_cmd_create>
		if (!buf) {
   264f4:	4604      	mov	r4, r0
   264f6:	b910      	cbnz	r0, 264fe <_flash_used+0x1d9>
		return -ENOBUFS;
   264f8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   264fc:	e698      	b.n	26230 <bt_init+0xf8>
   264fe:	2102      	movs	r1, #2
   26500:	3008      	adds	r0, #8
   26502:	f021 fbc8 	bl	47c96 <net_buf_simple_add>
		cp_le->le = 0x01;
   26506:	2301      	movs	r3, #1
   26508:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   2650a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   2650c:	4621      	mov	r1, r4
   2650e:	4632      	mov	r2, r6
   26510:	f640 406d 	movw	r0, #3181	; 0xc6d
   26514:	f004 fd8c 	bl	2b030 <bt_hci_cmd_send_sync>
		if (err) {
   26518:	4604      	mov	r4, r0
   2651a:	2800      	cmp	r0, #0
   2651c:	f43f aec4 	beq.w	262a8 <bt_init+0x170>
   26520:	e686      	b.n	26230 <bt_init+0xf8>
	else if (!bt_dev.le.acl_mtu) {
   26522:	2900      	cmp	r1, #0
   26524:	f47f af78 	bne.w	26418 <_flash_used+0xf3>
		return -EIO;
   26528:	f06f 0404 	mvn.w	r4, #4
   2652c:	e680      	b.n	26230 <bt_init+0xf8>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   2652e:	4809      	ldr	r0, [pc, #36]	; (26554 <_flash_used+0x22f>)
   26530:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   26534:	e784      	b.n	26440 <_flash_used+0x11b>
   26536:	bf00      	nop
   26538:	02008890 	.word	0x02008890
   2653c:	20008000 	.word	0x20008000
   26540:	200000d0 	.word	0x200000d0
   26544:	20000100 	.word	0x20000100
   26548:	200000b9 	.word	0x200000b9
   2654c:	200000b8 	.word	0x200000b8
   26550:	200000cc 	.word	0x200000cc
   26554:	02008810 	.word	0x02008810

00026558 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
   26558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
   2655c:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
   26560:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
   26564:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
   26566:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
   26568:	45a0      	cmp	r8, r4
{
   2656a:	460f      	mov	r7, r1
   2656c:	4616      	mov	r6, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
   2656e:	d819      	bhi.n	265a4 <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   26570:	4d1d      	ldr	r5, [pc, #116]	; (265e8 <ull_drift_ticks_get+0x90>)
   26572:	fba3 0105 	umull	r0, r1, r3, r5
   26576:	a31a      	add	r3, pc, #104	; (adr r3, 265e0 <ull_drift_ticks_get+0x88>)
   26578:	e9d3 2300 	ldrd	r2, r3, [r3]
   2657c:	f7ff fdc0 	bl	26100 <__aeabi_uldivmod>
   26580:	4603      	mov	r3, r0
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   26582:	eba4 0008 	sub.w	r0, r4, r8
   26586:	fba0 0105 	umull	r0, r1, r0, r5
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   2658a:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   2658e:	a314      	add	r3, pc, #80	; (adr r3, 265e0 <ull_drift_ticks_get+0x88>)
   26590:	e9d3 2300 	ldrd	r2, r3, [r3]
   26594:	f7ff fdb4 	bl	26100 <__aeabi_uldivmod>
   26598:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   2659c:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   2659e:	6030      	str	r0, [r6, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
   265a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   265a4:	f8df 9040 	ldr.w	r9, [pc, #64]	; 265e8 <ull_drift_ticks_get+0x90>
   265a8:	a30d      	add	r3, pc, #52	; (adr r3, 265e0 <ull_drift_ticks_get+0x88>)
   265aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   265ae:	fba8 0109 	umull	r0, r1, r8, r9
   265b2:	f7ff fda5 	bl	26100 <__aeabi_uldivmod>
   265b6:	4604      	mov	r4, r0
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   265b8:	f105 0030 	add.w	r0, r5, #48	; 0x30
   265bc:	a308      	add	r3, pc, #32	; (adr r3, 265e0 <ull_drift_ticks_get+0x88>)
   265be:	e9d3 2300 	ldrd	r2, r3, [r3]
   265c2:	fba0 0109 	umull	r0, r1, r0, r9
   265c6:	f7ff fd9b 	bl	26100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   265ca:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   265ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   265d2:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   265d4:	6030      	str	r0, [r6, #0]
}
   265d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   265da:	bf00      	nop
   265dc:	f3af 8000 	nop.w
   265e0:	1afd498d 	.word	0x1afd498d
   265e4:	00000007 	.word	0x00000007
   265e8:	3b9aca00 	.word	0x3b9aca00
   265ec:	00000000 	.word	0x00000000

000265f0 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
   265f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265f4:	b08f      	sub	sp, #60	; 0x3c
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
   265f6:	2800      	cmp	r0, #0
   265f8:	f000 813c 	beq.w	26874 <ll_adv_enable+0x284>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
   265fc:	4caa      	ldr	r4, [pc, #680]	; (268a8 <ll_adv_enable+0x2b8>)
   265fe:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
   26602:	f016 0601 	ands.w	r6, r6, #1
   26606:	f040 81b9 	bne.w	2697c <ll_adv_enable+0x38c>
	ull_filter_adv_update(lll->filter_policy);
   2660a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
   2660e:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
   26610:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
   26614:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
   26618:	f013 fa72 	bl	39b00 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   2661c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   26620:	0741      	lsls	r1, r0, #29
   26622:	d42d      	bmi.n	26680 <ll_adv_enable+0x90>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   26624:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   26628:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   2662c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   26630:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   26634:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   26638:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
   2663c:	f1b8 0f00 	cmp.w	r8, #0
   26640:	d011      	beq.n	26666 <ll_adv_enable+0x76>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
   26642:	4899      	ldr	r0, [pc, #612]	; (268a8 <ll_adv_enable+0x2b8>)
   26644:	4641      	mov	r1, r8
   26646:	f00d fdd1 	bl	341ec <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
   2664a:	f898 3000 	ldrb.w	r3, [r8]
   2664e:	065a      	lsls	r2, r3, #25
   26650:	d505      	bpl.n	2665e <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
   26652:	2106      	movs	r1, #6
   26654:	f009 f982 	bl	2f95c <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
   26658:	2800      	cmp	r0, #0
   2665a:	f000 81cc 	beq.w	269f6 <ll_adv_enable+0x406>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
   2665e:	4892      	ldr	r0, [pc, #584]	; (268a8 <ll_adv_enable+0x2b8>)
   26660:	4649      	mov	r1, r9
   26662:	f00d fdc3 	bl	341ec <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   26666:	f898 3000 	ldrb.w	r3, [r8]
   2666a:	f013 0f0e 	tst.w	r3, #14
   2666e:	f040 80ee 	bne.w	2684e <ll_adv_enable+0x25e>
		if (lll->conn) {
   26672:	6a23      	ldr	r3, [r4, #32]
   26674:	b19b      	cbz	r3, 2669e <ll_adv_enable+0xae>
	return BT_HCI_ERR_CMD_DISALLOWED;
   26676:	260c      	movs	r6, #12
}
   26678:	4630      	mov	r0, r6
   2667a:	b00f      	add	sp, #60	; 0x3c
   2667c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   26680:	4632      	mov	r2, r6
   26682:	f104 016b 	add.w	r1, r4, #107	; 0x6b
   26686:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2668a:	f013 fba1 	bl	39dd0 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
   2668e:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   26690:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
   26694:	d0c6      	beq.n	26624 <ll_adv_enable+0x34>
			ull_filter_rpa_update(false);
   26696:	4630      	mov	r0, r6
   26698:	f013 fa4c 	bl	39b34 <ull_filter_rpa_update>
   2669c:	e7c2      	b.n	26624 <ll_adv_enable+0x34>
		link = ll_rx_link_alloc();
   2669e:	f00c fc57 	bl	32f50 <ll_rx_link_alloc>
		if (!link) {
   266a2:	4682      	mov	sl, r0
   266a4:	2800      	cmp	r0, #0
   266a6:	f000 81b0 	beq.w	26a0a <ll_adv_enable+0x41a>
		node_rx = ll_rx_alloc();
   266aa:	f00c fc5d 	bl	32f68 <ll_rx_alloc>
		if (!node_rx) {
   266ae:	4683      	mov	fp, r0
   266b0:	2800      	cmp	r0, #0
   266b2:	f000 81af 	beq.w	26a14 <ll_adv_enable+0x424>
		conn = ll_conn_acquire();
   266b6:	f00e fc9f 	bl	34ff8 <ll_conn_acquire>
		if (!conn) {
   266ba:	4605      	mov	r5, r0
   266bc:	2800      	cmp	r0, #0
   266be:	f000 81a6 	beq.w	26a0e <ll_adv_enable+0x41e>
		if (!conn_lll->link_tx_free) {
   266c2:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
   266c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   266c8:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
   266ca:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
   266ce:	2800      	cmp	r0, #0
   266d0:	f000 8197 	beq.w	26a02 <ll_adv_enable+0x412>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   266d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
   266d8:	f105 0164 	add.w	r1, r5, #100	; 0x64
   266dc:	930b      	str	r3, [sp, #44]	; 0x2c
   266de:	f009 f949 	bl	2f974 <memq_init>
			conn_lll->phy_tx = PHY_1M;
   266e2:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   266e6:	4b71      	ldr	r3, [pc, #452]	; (268ac <ll_adv_enable+0x2bc>)
			conn_lll->phy_tx = PHY_1M;
   266e8:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
   266ec:	f022 0207 	bic.w	r2, r2, #7
   266f0:	f442 7288 	orr.w	r2, r2, #272	; 0x110
   266f4:	f042 0201 	orr.w	r2, r2, #1
   266f8:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
   266fc:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   26700:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   26704:	f062 027f 	orn	r2, r2, #127	; 0x7f
   26708:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
   2670c:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
   26710:	f022 0207 	bic.w	r2, r2, #7
   26714:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
   26718:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
   2671c:	f022 0207 	bic.w	r2, r2, #7
   26720:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
   26724:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
   26728:	f022 0207 	bic.w	r2, r2, #7
   2672c:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26730:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
   26734:	2700      	movs	r7, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26736:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->connect_expire = 6;
   2673a:	2206      	movs	r2, #6
   2673c:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
   26740:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
   26744:	676f      	str	r7, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
   26746:	f8a5 7078 	strh.w	r7, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
   2674a:	85ef      	strh	r7, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
   2674c:	632f      	str	r7, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
   2674e:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
   26752:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
   26754:	f8a5 70c4 	strh.w	r7, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
   26758:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
   2675c:	f8a5 70d0 	strh.w	r7, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
   26760:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   26764:	f8a5 70e4 	strh.w	r7, [r5, #228]	; 0xe4
   26768:	f885 70e6 	strb.w	r7, [r5, #230]	; 0xe6
		conn->llcp_rx = NULL;
   2676c:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   26770:	f8a5 710c 	strh.w	r7, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   26774:	f8a5 7120 	strh.w	r7, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
   26778:	f00b fed2 	bl	32520 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   2677c:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
   26780:	f8a5 7138 	strh.w	r7, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26784:	f022 0203 	bic.w	r2, r2, #3
   26788:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   2678c:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
   26790:	f8a5 7140 	strh.w	r7, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26794:	f022 0218 	bic.w	r2, r2, #24
   26798:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   2679c:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
   267a0:	f885 7143 	strb.w	r7, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   267a4:	f022 0207 	bic.w	r2, r2, #7
   267a8:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
   267ac:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
   267b0:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
   267b4:	f367 1245 	bfi	r2, r7, #5, #1
   267b8:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
   267bc:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   267c0:	f8a5 7164 	strh.w	r7, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
   267c4:	f367 02c3 	bfi	r2, r7, #3, #1
		conn->llcp_feature.features_conn = ll_feat_get();
   267c8:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
   267cc:	2100      	movs	r1, #0
   267ce:	2000      	movs	r0, #0
   267d0:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn->llcp_length.disabled = 0U;
   267d4:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->periph.llcp_type = 0U;
   267d8:	f885 70d9 	strb.w	r7, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
   267dc:	f8a5 7184 	strh.w	r7, [r5, #388]	; 0x184
		conn->periph.ticks_to_offset = 0;
   267e0:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
   267e4:	f8a5 71ac 	strh.w	r7, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
   267e8:	f8a5 71b8 	strh.w	r7, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
   267ec:	f00e ff3a 	bl	35664 <ull_conn_default_tx_octets_get>
   267f0:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
   267f4:	f00e ff3c 	bl	35670 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   267f8:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
   267fc:	4a2c      	ldr	r2, [pc, #176]	; (268b0 <ll_adv_enable+0x2c0>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
   267fe:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26802:	400a      	ands	r2, r1
   26804:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   26808:	f00e ff38 	bl	3567c <ull_conn_default_phy_tx_get>
   2680c:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
   26810:	f360 0202 	bfi	r2, r0, #0, #3
   26814:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26818:	f00e ff36 	bl	35688 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
   2681c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2681e:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26820:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   26824:	f8c5 71c4 	str.w	r7, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26828:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
   2682c:	e9c4 ab18 	strd	sl, fp, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
   26830:	e9c5 7774 	strd	r7, r7, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   26834:	e9c5 7772 	strd	r7, r7, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26838:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->ref = 0U;
   2683c:	702f      	strb	r7, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
   2683e:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26840:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
   26844:	f014 fa04 	bl	3ac50 <lll_clock_wait>
		if (err) {
   26848:	2800      	cmp	r0, #0
   2684a:	f040 80d6 	bne.w	269fa <ll_adv_enable+0x40a>
	uint8_t ch_map = lll->chan_map;
   2684e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26852:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
   26854:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26858:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
   2685c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26860:	f009 fa06 	bl	2fc70 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
   26864:	bb30      	cbnz	r0, 268b4 <ll_adv_enable+0x2c4>
	if (adv->lll.conn) {
   26866:	6a23      	ldr	r3, [r4, #32]
   26868:	2b00      	cmp	r3, #0
   2686a:	f43f af04 	beq.w	26676 <ll_adv_enable+0x86>
		conn_release(adv);
   2686e:	f00d f98b 	bl	33b88 <conn_release.constprop.0>
   26872:	e700      	b.n	26676 <ll_adv_enable+0x86>
	if (!adv || !adv->is_enabled) {
   26874:	4b0c      	ldr	r3, [pc, #48]	; (268a8 <ll_adv_enable+0x2b8>)
   26876:	f893 606a 	ldrb.w	r6, [r3, #106]	; 0x6a
   2687a:	f016 0601 	ands.w	r6, r6, #1
   2687e:	f43f aefb 	beq.w	26678 <ll_adv_enable+0x88>
	if (adv->lll.conn) {
   26882:	6a1a      	ldr	r2, [r3, #32]
   26884:	b15a      	cbz	r2, 2689e <ll_adv_enable+0x2ae>
		adv->lll.conn->periph.cancelled = 1U;
   26886:	f892 1020 	ldrb.w	r1, [r2, #32]
   2688a:	f041 0102 	orr.w	r1, r1, #2
   2688e:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   26892:	6a1b      	ldr	r3, [r3, #32]
   26894:	f893 3020 	ldrb.w	r3, [r3, #32]
   26898:	07d8      	lsls	r0, r3, #31
   2689a:	f53f aeec 	bmi.w	26676 <ll_adv_enable+0x86>
}
   2689e:	b00f      	add	sp, #60	; 0x3c
   268a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   268a4:	f00d b9b2 	b.w	33c0c <disable.part.0>
   268a8:	2000259c 	.word	0x2000259c
   268ac:	01480148 	.word	0x01480148
   268b0:	f6ff0000 	.word	0xf6ff0000
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
   268b4:	f899 1001 	ldrb.w	r1, [r9, #1]
   268b8:	4602      	mov	r2, r0
   268ba:	4640      	mov	r0, r8
   268bc:	f00d fa4a 	bl	33d54 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   268c0:	4959      	ldr	r1, [pc, #356]	; (26a28 <ll_adv_enable+0x438>)
	uint16_t interval = adv->interval;
   268c2:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
	adv->ull.ticks_prepare_to_start =
   268c6:	2331      	movs	r3, #49	; 0x31
   268c8:	2500      	movs	r5, #0
   268ca:	60a3      	str	r3, [r4, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   268cc:	fba0 0101 	umull	r0, r1, r0, r1
   268d0:	a353      	add	r3, pc, #332	; (adr r3, 26a20 <ll_adv_enable+0x430>)
   268d2:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   268d6:	e9c4 5505 	strd	r5, r5, [r4, #20]
	hdr->ref = 0U;
   268da:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
   268dc:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
   268de:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   268e0:	f7ff fc0e 	bl	26100 <__aeabi_uldivmod>
   268e4:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
   268e6:	f00a fad7 	bl	30e98 <ticker_ticks_now_get>
   268ea:	4607      	mov	r7, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   268ec:	f1b9 0f00 	cmp.w	r9, #0
   268f0:	d108      	bne.n	26904 <ll_adv_enable+0x314>
   268f2:	f898 5000 	ldrb.w	r5, [r8]
   268f6:	f005 050f 	and.w	r5, r5, #15
   268fa:	f1a5 0501 	sub.w	r5, r5, #1
   268fe:	fab5 f585 	clz	r5, r5
   26902:	096d      	lsrs	r5, r5, #5
   26904:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   26908:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
   2690c:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26910:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
   26914:	d037      	beq.n	26986 <ll_adv_enable+0x396>
				   (adv->ull.ticks_slot + ticks_slot_overhead),
   26916:	6923      	ldr	r3, [r4, #16]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26918:	4a44      	ldr	r2, [pc, #272]	; (26a2c <ll_adv_enable+0x43c>)
   2691a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 26a30 <ll_adv_enable+0x440>
   2691e:	9304      	str	r3, [sp, #16]
   26920:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   26922:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26924:	f10d 0834 	add.w	r8, sp, #52	; 0x34
   26928:	9301      	str	r3, [sp, #4]
   2692a:	9205      	str	r2, [sp, #20]
   2692c:	2103      	movs	r1, #3
   2692e:	e9cd 0002 	strd	r0, r0, [sp, #8]
   26932:	9406      	str	r4, [sp, #24]
   26934:	463b      	mov	r3, r7
   26936:	9000      	str	r0, [sp, #0]
   26938:	f8cd 8020 	str.w	r8, [sp, #32]
   2693c:	f8cd 901c 	str.w	r9, [sp, #28]
   26940:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
   26942:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26944:	f00a f9da 	bl	30cfc <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
   26948:	4641      	mov	r1, r8
   2694a:	f00c fbb7 	bl	330bc <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
   2694e:	2800      	cmp	r0, #0
   26950:	d189      	bne.n	26866 <ll_adv_enable+0x276>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26952:	4a38      	ldr	r2, [pc, #224]	; (26a34 <ll_adv_enable+0x444>)
   26954:	9205      	str	r2, [sp, #20]
   26956:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
   2695a:	9200      	str	r2, [sp, #0]
   2695c:	e9cd 0003 	strd	r0, r0, [sp, #12]
   26960:	e9cd 0001 	strd	r0, r0, [sp, #4]
   26964:	f8cd 901c 	str.w	r9, [sp, #28]
   26968:	f8cd 8020 	str.w	r8, [sp, #32]
   2696c:	9406      	str	r4, [sp, #24]
   2696e:	463b      	mov	r3, r7
   26970:	2201      	movs	r2, #1
   26972:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
   26974:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26976:	f00a f9c1 	bl	30cfc <ticker_start>
   2697a:	e02f      	b.n	269dc <ll_adv_enable+0x3ec>
			return 0;
   2697c:	2600      	movs	r6, #0
}
   2697e:	4630      	mov	r0, r6
   26980:	b00f      	add	sp, #60	; 0x3c
   26982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const uint32_t ticks_slot = adv->ull.ticks_slot +
   26986:	6923      	ldr	r3, [r4, #16]
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26988:	4a2b      	ldr	r2, [pc, #172]	; (26a38 <ll_adv_enable+0x448>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   2698a:	482c      	ldr	r0, [pc, #176]	; (26a3c <ll_adv_enable+0x44c>)
		ret = ticker_start_ext(
   2698c:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
   2698e:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26992:	fba9 0100 	umull	r0, r1, r9, r0
		ret = ticker_start_ext(
   26996:	9406      	str	r4, [sp, #24]
   26998:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
   2699a:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   2699c:	2391      	movs	r3, #145	; 0x91
   2699e:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
   269a2:	4b23      	ldr	r3, [pc, #140]	; (26a30 <ll_adv_enable+0x440>)
   269a4:	9307      	str	r3, [sp, #28]
   269a6:	4b21      	ldr	r3, [pc, #132]	; (26a2c <ll_adv_enable+0x43c>)
   269a8:	9305      	str	r3, [sp, #20]
   269aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   269ae:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
   269b0:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
   269b4:	9303      	str	r3, [sp, #12]
   269b6:	f10d 0834 	add.w	r8, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   269ba:	a319      	add	r3, pc, #100	; (adr r3, 26a20 <ll_adv_enable+0x430>)
   269bc:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
   269c0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
		ret = ticker_start_ext(
   269c4:	f8cd 8020 	str.w	r8, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   269c8:	f7ff fb9a 	bl	26100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
   269cc:	463b      	mov	r3, r7
   269ce:	e9cd 5000 	strd	r5, r0, [sp]
   269d2:	464a      	mov	r2, r9
   269d4:	4628      	mov	r0, r5
   269d6:	2103      	movs	r1, #3
   269d8:	f00a f93a 	bl	30c50 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
   269dc:	4641      	mov	r1, r8
   269de:	f00c fb6d 	bl	330bc <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   269e2:	2800      	cmp	r0, #0
   269e4:	f47f af3f 	bne.w	26866 <ll_adv_enable+0x276>
	adv->is_enabled = 1;
   269e8:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   269ec:	f043 0301 	orr.w	r3, r3, #1
   269f0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	return 0;
   269f4:	e640      	b.n	26678 <ll_adv_enable+0x88>
			return BT_HCI_ERR_INVALID_PARAM;
   269f6:	2612      	movs	r6, #18
   269f8:	e63e      	b.n	26678 <ll_adv_enable+0x88>
			conn_release(adv);
   269fa:	f00d f8c5 	bl	33b88 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
   269fe:	2603      	movs	r6, #3
   26a00:	e63a      	b.n	26678 <ll_adv_enable+0x88>
			conn_lll->link_tx_free = &conn_lll->link_tx;
   26a02:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   26a06:	6768      	str	r0, [r5, #116]	; 0x74
   26a08:	e664      	b.n	266d4 <ll_adv_enable+0xe4>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26a0a:	2607      	movs	r6, #7
   26a0c:	e634      	b.n	26678 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
   26a0e:	4658      	mov	r0, fp
   26a10:	f00c fab0 	bl	32f74 <ll_rx_release>
			ll_rx_link_release(link);
   26a14:	4650      	mov	r0, sl
   26a16:	f00c faa1 	bl	32f5c <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26a1a:	2607      	movs	r6, #7
   26a1c:	e62c      	b.n	26678 <ll_adv_enable+0x88>
   26a1e:	bf00      	nop
   26a20:	1afd498d 	.word	0x1afd498d
   26a24:	00000007 	.word	0x00000007
   26a28:	3b9aca00 	.word	0x3b9aca00
   26a2c:	00033dcd 	.word	0x00033dcd
   26a30:	000325c1 	.word	0x000325c1
   26a34:	00033911 	.word	0x00033911
   26a38:	20002610 	.word	0x20002610
   26a3c:	84e72a00 	.word	0x84e72a00

00026a40 <ull_adv_time_update>:
{
   26a40:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
   26a42:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
   26a46:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
   26a48:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
   26a4c:	460d      	mov	r5, r1
   26a4e:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26a50:	2101      	movs	r1, #1
   26a52:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
   26a56:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
   26a58:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26a5c:	f009 f908 	bl	2fc70 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26a60:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26a62:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26a64:	4628      	mov	r0, r5
   26a66:	f00d f975 	bl	33d54 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26a6a:	491d      	ldr	r1, [pc, #116]	; (26ae0 <ull_adv_time_update+0xa0>)
   26a6c:	a31a      	add	r3, pc, #104	; (adr r3, 26ad8 <ull_adv_time_update+0x98>)
   26a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   26a72:	fba0 0101 	umull	r0, r1, r0, r1
   26a76:	f7ff fb43 	bl	26100 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
   26a7a:	6923      	ldr	r3, [r4, #16]
   26a7c:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26a7e:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
   26a80:	d220      	bcs.n	26ac4 <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
   26a82:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
   26a84:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26a86:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26a88:	4a16      	ldr	r2, [pc, #88]	; (26ae4 <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26a8a:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26a8c:	4b16      	ldr	r3, [pc, #88]	; (26ae8 <ull_adv_time_update+0xa8>)
   26a8e:	1aa2      	subs	r2, r4, r2
   26a90:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
   26a94:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26a96:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26a98:	2300      	movs	r3, #0
   26a9a:	440a      	add	r2, r1
   26a9c:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
   26a9e:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26aa0:	4912      	ldr	r1, [pc, #72]	; (26aec <ull_adv_time_update+0xac>)
   26aa2:	9105      	str	r1, [sp, #20]
   26aa4:	e9cd 3303 	strd	r3, r3, [sp, #12]
   26aa8:	2103      	movs	r1, #3
   26aaa:	b2d2      	uxtb	r2, r2
   26aac:	9606      	str	r6, [sp, #24]
   26aae:	9300      	str	r3, [sp, #0]
   26ab0:	4618      	mov	r0, r3
   26ab2:	f00a f997 	bl	30de4 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26ab6:	4631      	mov	r1, r6
   26ab8:	f00c fb00 	bl	330bc <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26abc:	b948      	cbnz	r0, 26ad2 <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
   26abe:	6125      	str	r5, [r4, #16]
}
   26ac0:	b00a      	add	sp, #40	; 0x28
   26ac2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
   26ac4:	d902      	bls.n	26acc <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
   26ac6:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
   26ac8:	2300      	movs	r3, #0
   26aca:	e7dc      	b.n	26a86 <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
   26acc:	2000      	movs	r0, #0
}
   26ace:	b00a      	add	sp, #40	; 0x28
   26ad0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26ad2:	200c      	movs	r0, #12
}
   26ad4:	b00a      	add	sp, #40	; 0x28
   26ad6:	bd70      	pop	{r4, r5, r6, pc}
   26ad8:	1afd498d 	.word	0x1afd498d
   26adc:	00000007 	.word	0x00000007
   26ae0:	3b9aca00 	.word	0x3b9aca00
   26ae4:	2000259c 	.word	0x2000259c
   26ae8:	8d3dcb09 	.word	0x8d3dcb09
   26aec:	000325c1 	.word	0x000325c1

00026af0 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
   26af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26af4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   26af6:	8e46      	ldrh	r6, [r0, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   26af8:	f8b0 70e8 	ldrh.w	r7, [r0, #232]	; 0xe8
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26afc:	441e      	add	r6, r3
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26afe:	f890 310e 	ldrb.w	r3, [r0, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26b02:	b2b6      	uxth	r6, r6
   26b04:	4431      	add	r1, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26b06:	f013 0307 	ands.w	r3, r3, #7
{
   26b0a:	b08b      	sub	sp, #44	; 0x2c
   26b0c:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26b0e:	fa1f f981 	uxth.w	r9, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26b12:	f040 8191 	bne.w	26e38 <event_conn_upd_prep+0x348>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   26b16:	eba9 0107 	sub.w	r1, r9, r7
   26b1a:	fa1f f981 	uxth.w	r9, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
   26b1e:	0409      	lsls	r1, r1, #16
   26b20:	f100 81f2 	bmi.w	26f08 <event_conn_upd_prep+0x418>
   26b24:	4690      	mov	r8, r2
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   26b26:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   26b2a:	2a00      	cmp	r2, #0
   26b2c:	f2c0 8130 	blt.w	26d90 <event_conn_upd_prep+0x2a0>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
   26b30:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   26b34:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26b38:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   26b3c:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
   26b40:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
   26b44:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26b48:	4293      	cmp	r3, r2
   26b4a:	d006      	beq.n	26b5a <event_conn_upd_prep+0x6a>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   26b4c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26b50:	f003 030f 	and.w	r3, r3, #15
   26b54:	2b06      	cmp	r3, #6
   26b56:	f000 824c 	beq.w	26ff2 <event_conn_upd_prep+0x502>
	if (conn == conn_upd_curr) {
   26b5a:	4ba9      	ldr	r3, [pc, #676]	; (26e00 <event_conn_upd_prep+0x310>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
   26b5c:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
	if (conn == conn_upd_curr) {
   26b60:	681a      	ldr	r2, [r3, #0]
   26b62:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   26b64:	bf04      	itt	eq
   26b66:	2200      	moveq	r2, #0
   26b68:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
   26b6a:	2d00      	cmp	r5, #0
   26b6c:	f000 8134 	beq.w	26dd8 <event_conn_upd_prep+0x2e8>
   26b70:	6828      	ldr	r0, [r5, #0]
   26b72:	2800      	cmp	r0, #0
   26b74:	f000 8130 	beq.w	26dd8 <event_conn_upd_prep+0x2e8>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
   26b78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   26b7a:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
		conn->llcp_rx = rx->hdr.link->mem;
   26b7e:	6841      	ldr	r1, [r0, #4]
   26b80:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
   26b84:	4293      	cmp	r3, r2
		    (conn->llcp_cu.latency != lll->latency) ||
   26b86:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		if ((conn->llcp_cu.interval != lll->interval) ||
   26b8a:	f000 8109 	beq.w	26da0 <event_conn_upd_prep+0x2b0>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   26b8e:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
   26b92:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
   26b96:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   26b98:	2318      	movs	r3, #24
   26b9a:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
   26b9c:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
   26b9e:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
   26ba2:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
   26ba4:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
   26ba6:	772b      	strb	r3, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
   26ba8:	4629      	mov	r1, r5
   26baa:	f00c f9e9 	bl	32f80 <ll_rx_put>
		ll_rx_sched();
   26bae:	f00c f9f1 	bl	32f94 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   26bb2:	68a3      	ldr	r3, [r4, #8]
   26bb4:	2b00      	cmp	r3, #0
   26bb6:	da0a      	bge.n	26bce <event_conn_upd_prep+0xde>
			uint32_t ticks_prepare_to_start =
   26bb8:	68e1      	ldr	r1, [r4, #12]
   26bba:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
   26bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   26bc0:	4291      	cmp	r1, r2
   26bc2:	bf2c      	ite	cs
   26bc4:	4488      	addcs	r8, r1
   26bc6:	4490      	addcc	r8, r2
   26bc8:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
   26bca:	eba8 0803 	sub.w	r8, r8, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
   26bce:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
   26bd2:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
   26bd6:	fb1c fc09 	smulbb	ip, ip, r9
   26bda:	fa1f fc8c 	uxth.w	ip, ip
		latency = conn_interval_old / conn->llcp_cu.interval;
   26bde:	fbbc f3f5 	udiv	r3, ip, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
   26be2:	fb15 f003 	smulbb	r0, r5, r3
   26be6:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   26be8:	4584      	cmp	ip, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
   26bea:	fa1f fa83 	uxth.w	sl, r3
		if (conn_interval_new > conn_interval_old) {
   26bee:	f080 819d 	bcs.w	26f2c <event_conn_upd_prep+0x43c>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   26bf2:	eba0 000c 	sub.w	r0, r0, ip
   26bf6:	f240 42e2 	movw	r2, #1250	; 0x4e2
   26bfa:	4982      	ldr	r1, [pc, #520]	; (26e04 <event_conn_upd_prep+0x314>)
   26bfc:	fb02 f000 	mul.w	r0, r2, r0
   26c00:	fba0 0101 	umull	r0, r1, r0, r1
   26c04:	a37c      	add	r3, pc, #496	; (adr r3, 26df8 <event_conn_upd_prep+0x308>)
   26c06:	e9d3 2300 	ldrd	r2, r3, [r3]
   26c0a:	f7ff fa79 	bl	26100 <__aeabi_uldivmod>
   26c0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   26c12:	4480      	add	r8, r0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
   26c14:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   26c16:	441f      	add	r7, r3
   26c18:	1bbf      	subs	r7, r7, r6
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
   26c1a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
   26c1e:	4457      	add	r7, sl
   26c20:	85e7      	strh	r7, [r4, #46]	; 0x2e
		} else if (lll->role) {
   26c22:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
   26c24:	f240 47e2 	movw	r7, #1250	; 0x4e2
   26c28:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
   26c2c:	f2c0 8190 	blt.w	26f50 <event_conn_upd_prep+0x460>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
   26c30:	4a75      	ldr	r2, [pc, #468]	; (26e08 <event_conn_upd_prep+0x318>)
   26c32:	4976      	ldr	r1, [pc, #472]	; (26e0c <event_conn_upd_prep+0x31c>)
   26c34:	4876      	ldr	r0, [pc, #472]	; (26e10 <event_conn_upd_prep+0x320>)
   26c36:	f640 439c 	movw	r3, #3228	; 0xc9c
   26c3a:	f01c f807 	bl	42c4c <printk>
   26c3e:	4040      	eors	r0, r0
   26c40:	f380 8811 	msr	BASEPRI, r0
   26c44:	f04f 0003 	mov.w	r0, #3
   26c48:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
   26c4a:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
   26c4c:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   26c4e:	4a71      	ldr	r2, [pc, #452]	; (26e14 <event_conn_upd_prep+0x324>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26c50:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
		lll->latency = conn->llcp_cu.latency;
   26c54:	f8b4 0112 	ldrh.w	r0, [r4, #274]	; 0x112

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26c58:	496f      	ldr	r1, [pc, #444]	; (26e18 <event_conn_upd_prep+0x328>)
		lll->latency = conn->llcp_cu.latency;
   26c5a:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   26c5c:	4432      	add	r2, r6
   26c5e:	fbb2 f2f6 	udiv	r2, r2, r6
   26c62:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26c66:	f242 7210 	movw	r2, #10000	; 0x2710
   26c6a:	fb02 6303 	mla	r3, r2, r3, r6
   26c6e:	3b01      	subs	r3, #1
   26c70:	fbb3 f3f6 	udiv	r3, r3, r6
   26c74:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
		lll->interval = conn->llcp_cu.interval;
   26c78:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
   26c7c:	8563      	strh	r3, [r4, #42]	; 0x2a
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26c7e:	4431      	add	r1, r6
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26c80:	1d83      	adds	r3, r0, #6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26c82:	fbb1 f1f6 	udiv	r1, r1, r6
   26c86:	b28a      	uxth	r2, r1
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26c88:	429a      	cmp	r2, r3
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26c8a:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26c8e:	dd04      	ble.n	26c9a <event_conn_upd_prep+0x1aa>
   26c90:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   26c94:	33fa      	adds	r3, #250	; 0xfa
   26c96:	441a      	add	r2, r3
   26c98:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
   26c9a:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26c9e:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
   26ca2:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
   26ca4:	bf44      	itt	mi
   26ca6:	2300      	movmi	r3, #0
   26ca8:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   26cac:	2102      	movs	r1, #2
   26cae:	2001      	movs	r0, #1
   26cb0:	f015 ff88 	bl	3cbc4 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   26cb4:	2200      	movs	r2, #0
   26cb6:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   26cb8:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   26cba:	2001      	movs	r0, #1
   26cbc:	f008 feaa 	bl	2fa14 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   26cc0:	4956      	ldr	r1, [pc, #344]	; (26e1c <event_conn_upd_prep+0x32c>)
   26cc2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   26cc6:	4620      	mov	r0, r4
   26cc8:	f008 fe34 	bl	2f934 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   26ccc:	f100 0a03 	add.w	sl, r0, #3
   26cd0:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
   26cd4:	4b52      	ldr	r3, [pc, #328]	; (26e20 <event_conn_upd_prep+0x330>)
   26cd6:	9400      	str	r4, [sp, #0]
   26cd8:	4652      	mov	r2, sl
   26cda:	2101      	movs	r1, #1
   26cdc:	2000      	movs	r0, #0
   26cde:	f00a f899 	bl	30e14 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   26ce2:	f030 0302 	bics.w	r3, r0, #2
   26ce6:	d00c      	beq.n	26d02 <event_conn_upd_prep+0x212>
   26ce8:	4a47      	ldr	r2, [pc, #284]	; (26e08 <event_conn_upd_prep+0x318>)
   26cea:	494e      	ldr	r1, [pc, #312]	; (26e24 <event_conn_upd_prep+0x334>)
   26cec:	4848      	ldr	r0, [pc, #288]	; (26e10 <event_conn_upd_prep+0x320>)
   26cee:	f640 43cb 	movw	r3, #3275	; 0xccb
   26cf2:	f01b ffab 	bl	42c4c <printk>
   26cf6:	4040      	eors	r0, r0
   26cf8:	f380 8811 	msr	BASEPRI, r0
   26cfc:	f04f 0003 	mov.w	r0, #3
   26d00:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   26d02:	4e40      	ldr	r6, [pc, #256]	; (26e04 <event_conn_upd_prep+0x314>)
   26d04:	fbab 6b06 	umull	r6, fp, fp, r6
   26d08:	a33b      	add	r3, pc, #236	; (adr r3, 26df8 <event_conn_upd_prep+0x308>)
   26d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   26d0e:	4630      	mov	r0, r6
   26d10:	4659      	mov	r1, fp
   26d12:	f7ff f9f5 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26d16:	9408      	str	r4, [sp, #32]
   26d18:	9406      	str	r4, [sp, #24]
   26d1a:	6923      	ldr	r3, [r4, #16]
   26d1c:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
   26d1e:	4b42      	ldr	r3, [pc, #264]	; (26e28 <event_conn_upd_prep+0x338>)
   26d20:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
   26d24:	fba5 3103 	umull	r3, r1, r5, r3
   26d28:	1af0      	subs	r0, r6, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26d2a:	4b40      	ldr	r3, [pc, #256]	; (26e2c <event_conn_upd_prep+0x33c>)
   26d2c:	9307      	str	r3, [sp, #28]
				     HAL_TICKER_REMAINDER(periodic_us),
   26d2e:	f04f 0207 	mov.w	r2, #7
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26d32:	4b3f      	ldr	r3, [pc, #252]	; (26e30 <event_conn_upd_prep+0x340>)
   26d34:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
   26d36:	fb02 1105 	mla	r1, r2, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26d3a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
   26d3e:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26d42:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
   26d44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26d48:	2300      	movs	r3, #0
   26d4a:	f7ff f9d9 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26d4e:	4643      	mov	r3, r8
   26d50:	e9cd 5001 	strd	r5, r0, [sp, #4]
   26d54:	9700      	str	r7, [sp, #0]
   26d56:	4652      	mov	r2, sl
   26d58:	2101      	movs	r1, #1
   26d5a:	2000      	movs	r0, #0
   26d5c:	f009 ffce 	bl	30cfc <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   26d60:	f030 0302 	bics.w	r3, r0, #2
   26d64:	d00c      	beq.n	26d80 <event_conn_upd_prep+0x290>
   26d66:	4a28      	ldr	r2, [pc, #160]	; (26e08 <event_conn_upd_prep+0x318>)
   26d68:	492e      	ldr	r1, [pc, #184]	; (26e24 <event_conn_upd_prep+0x334>)
   26d6a:	4829      	ldr	r0, [pc, #164]	; (26e10 <event_conn_upd_prep+0x320>)
   26d6c:	f640 43e5 	movw	r3, #3301	; 0xce5
   26d70:	f01b ff6c 	bl	42c4c <printk>
   26d74:	4040      	eors	r0, r0
   26d76:	f380 8811 	msr	BASEPRI, r0
   26d7a:	f04f 0003 	mov.w	r0, #3
   26d7e:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
   26d80:	f1b9 0f00 	cmp.w	r9, #0
   26d84:	f040 812f 	bne.w	26fe6 <event_conn_upd_prep+0x4f6>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
   26d88:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
   26d8a:	b00b      	add	sp, #44	; 0x2c
   26d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   26d90:	f890 20d9 	ldrb.w	r2, [r0, #217]	; 0xd9
   26d94:	2a00      	cmp	r2, #0
   26d96:	f43f aecb 	beq.w	26b30 <event_conn_upd_prep+0x40>
			conn->periph.llcp_type = LLCP_NONE;
   26d9a:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
   26d9e:	e6cb      	b.n	26b38 <event_conn_upd_prep+0x48>
		if ((conn->llcp_cu.interval != lll->interval) ||
   26da0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   26da2:	4291      	cmp	r1, r2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   26da4:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
   26da8:	f47f aef3 	bne.w	26b92 <event_conn_upd_prep+0xa2>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   26dac:	f240 4ee2 	movw	lr, #1250	; 0x4e2
   26db0:	fb0e fe03 	mul.w	lr, lr, r3
   26db4:	f242 7c10 	movw	ip, #10000	; 0x2710
   26db8:	fb0c ec01 	mla	ip, ip, r1, lr
   26dbc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   26dc0:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
   26dc4:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
   26dc8:	fa1f fc8c 	uxth.w	ip, ip
   26dcc:	45e6      	cmp	lr, ip
   26dce:	f47f aee0 	bne.w	26b92 <event_conn_upd_prep+0xa2>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   26dd2:	2301      	movs	r3, #1
   26dd4:	712b      	strb	r3, [r5, #4]
   26dd6:	e6e7      	b.n	26ba8 <event_conn_upd_prep+0xb8>
		LL_ASSERT(rx && rx->hdr.link);
   26dd8:	4a0b      	ldr	r2, [pc, #44]	; (26e08 <event_conn_upd_prep+0x318>)
   26dda:	4916      	ldr	r1, [pc, #88]	; (26e34 <event_conn_upd_prep+0x344>)
   26ddc:	480c      	ldr	r0, [pc, #48]	; (26e10 <event_conn_upd_prep+0x320>)
   26dde:	f44f 6342 	mov.w	r3, #3104	; 0xc20
   26de2:	f01b ff33 	bl	42c4c <printk>
   26de6:	4040      	eors	r0, r0
   26de8:	f380 8811 	msr	BASEPRI, r0
   26dec:	f04f 0003 	mov.w	r0, #3
   26df0:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   26df2:	6828      	ldr	r0, [r5, #0]
   26df4:	e6c0      	b.n	26b78 <event_conn_upd_prep+0x88>
   26df6:	bf00      	nop
   26df8:	1afd498d 	.word	0x1afd498d
   26dfc:	00000007 	.word	0x00000007
   26e00:	20002630 	.word	0x20002630
   26e04:	3b9aca00 	.word	0x3b9aca00
   26e08:	0004a498 	.word	0x0004a498
   26e0c:	0004a084 	.word	0x0004a084
   26e10:	0004a024 	.word	0x0004a024
   26e14:	026259ff 	.word	0x026259ff
   26e18:	01c9c37f 	.word	0x01c9c37f
   26e1c:	20001538 	.word	0x20001538
   26e20:	00034851 	.word	0x00034851
   26e24:	0004a578 	.word	0x0004a578
   26e28:	1afd498d 	.word	0x1afd498d
   26e2c:	000347f9 	.word	0x000347f9
   26e30:	00038efd 	.word	0x00038efd
   26e34:	0004a564 	.word	0x0004a564
		rx = ll_pdu_rx_alloc_peek(1);
   26e38:	2001      	movs	r0, #1
   26e3a:	f00c f8b1 	bl	32fa0 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   26e3e:	4606      	mov	r6, r0
   26e40:	2800      	cmp	r0, #0
   26e42:	f000 80e4 	beq.w	2700e <event_conn_upd_prep+0x51e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   26e46:	4884      	ldr	r0, [pc, #528]	; (27058 <event_conn_upd_prep+0x568>)
   26e48:	f008 fd3e 	bl	2f8c8 <mem_acquire>
		if (!tx) {
   26e4c:	4605      	mov	r5, r0
   26e4e:	2800      	cmp	r0, #0
   26e50:	f000 80dd 	beq.w	2700e <event_conn_upd_prep+0x51e>
	if (!conn_upd_curr) {
   26e54:	4b81      	ldr	r3, [pc, #516]	; (2705c <event_conn_upd_prep+0x56c>)
   26e56:	681a      	ldr	r2, [r3, #0]
   26e58:	2a00      	cmp	r2, #0
   26e5a:	f000 80d0 	beq.w	26ffe <event_conn_upd_prep+0x50e>
		(void)ll_pdu_rx_alloc();
   26e5e:	f00c f8bd 	bl	32fdc <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   26e62:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
   26e64:	6832      	ldr	r2, [r6, #0]
   26e66:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   26e6a:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   26e6c:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
   26e70:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   26e74:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   26e76:	230c      	movs	r3, #12
   26e78:	716b      	strb	r3, [r5, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   26e7a:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
   26e7e:	4978      	ldr	r1, [pc, #480]	; (27060 <event_conn_upd_prep+0x570>)
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   26e80:	2000      	movs	r0, #0
   26e82:	71e8      	strb	r0, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   26e84:	fba1 1202 	umull	r1, r2, r1, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
   26e88:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   26e8c:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   26e8e:	0a92      	lsrs	r2, r2, #10
					      conn->lll.latency + 6;
   26e90:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
   26e92:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   26e96:	f8b4 2110 	ldrh.w	r2, [r4, #272]	; 0x110
   26e9a:	f8a5 200b 	strh.w	r2, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   26e9e:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   26ea2:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   26ea6:	f8a5 200d 	strh.w	r2, [r5, #13]
					      conn->lll.latency + 6;
   26eaa:	3306      	adds	r3, #6
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   26eac:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
   26eb0:	f8a5 200f 	strh.w	r2, [r5, #15]
					      conn->lll.latency + 6;
   26eb4:	444b      	add	r3, r9
	    conn->tx_head &&
   26eb6:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
					      conn->lll.latency + 6;
   26eba:	b29b      	uxth	r3, r3
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   26ebc:	f360 0102 	bfi	r1, r0, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
   26ec0:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   26ec4:	f884 110e 	strb.w	r1, [r4, #270]	; 0x10e
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   26ec8:	f8a5 3011 	strh.w	r3, [r5, #17]
	if (
   26ecc:	b30a      	cbz	r2, 26f12 <event_conn_upd_prep+0x422>
	    !conn->llcp_enc.pause_tx &&
   26ece:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   26ed2:	079e      	lsls	r6, r3, #30
   26ed4:	d41d      	bmi.n	26f12 <event_conn_upd_prep+0x422>
	    !conn->llcp_phy.pause_tx &&
   26ed6:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   26eda:	07d8      	lsls	r0, r3, #31
   26edc:	d419      	bmi.n	26f12 <event_conn_upd_prep+0x422>
		if (conn->tx_head == conn->tx_data) {
   26ede:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   26ee2:	429a      	cmp	r2, r3
		if (!conn->tx_ctrl) {
   26ee4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   26ee8:	f000 8094 	beq.w	27014 <event_conn_upd_prep+0x524>
		} else if (!conn->tx_ctrl) {
   26eec:	2b00      	cmp	r3, #0
   26eee:	f000 809e 	beq.w	2702e <event_conn_upd_prep+0x53e>
	tx->next = conn->tx_ctrl_last->next;
   26ef2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   26ef6:	6813      	ldr	r3, [r2, #0]
   26ef8:	602b      	str	r3, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   26efa:	6015      	str	r5, [r2, #0]
	if (!tx->next) {
   26efc:	682a      	ldr	r2, [r5, #0]
	conn->tx_ctrl_last = tx;
   26efe:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   26f02:	b90a      	cbnz	r2, 26f08 <event_conn_upd_prep+0x418>
		conn->tx_data_last = tx;
   26f04:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	return -EINPROGRESS;
   26f08:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
   26f0c:	b00b      	add	sp, #44	; 0x2c
   26f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!conn->tx_ctrl) {
   26f12:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   26f16:	2b00      	cmp	r3, #0
   26f18:	d073      	beq.n	27002 <event_conn_upd_prep+0x512>
	tx->next = conn->tx_ctrl_last->next;
   26f1a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   26f1e:	681a      	ldr	r2, [r3, #0]
   26f20:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   26f22:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   26f24:	682a      	ldr	r2, [r5, #0]
	conn->tx_ctrl_last = tx;
   26f26:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   26f2a:	e7ea      	b.n	26f02 <event_conn_upd_prep+0x412>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   26f2c:	fb05 c113 	mls	r1, r5, r3, ip
   26f30:	484c      	ldr	r0, [pc, #304]	; (27064 <event_conn_upd_prep+0x574>)
   26f32:	f240 43e2 	movw	r3, #1250	; 0x4e2
   26f36:	b289      	uxth	r1, r1
   26f38:	fb03 f101 	mul.w	r1, r3, r1
   26f3c:	fba1 0100 	umull	r0, r1, r1, r0
   26f40:	a343      	add	r3, pc, #268	; (adr r3, 27050 <event_conn_upd_prep+0x560>)
   26f42:	e9d3 2300 	ldrd	r2, r3, [r3]
   26f46:	f7ff f8db 	bl	26100 <__aeabi_uldivmod>
   26f4a:	eba8 0800 	sub.w	r8, r8, r0
   26f4e:	e661      	b.n	26c14 <event_conn_upd_prep+0x124>
				lll->periph.window_widening_periodic_us *
   26f50:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
   26f52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   26f54:	fb02 3319 	mls	r3, r2, r9, r3
   26f58:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
   26f5a:	f013 fecb 	bl	3acf4 <lll_clock_ppm_local_get>
   26f5e:	4605      	mov	r5, r0
   26f60:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   26f64:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   26f68:	f013 fec6 	bl	3acf8 <lll_clock_ppm_get>
   26f6c:	4405      	add	r5, r0
   26f6e:	fb06 f505 	mul.w	r5, r6, r5
   26f72:	4b3d      	ldr	r3, [pc, #244]	; (27068 <event_conn_upd_prep+0x578>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   26f74:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				ceiling_fraction(((lll_clock_ppm_local_get() +
   26f78:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   26f7c:	f205 253f 	addw	r5, r5, #575	; 0x23f
   26f80:	fba3 3505 	umull	r3, r5, r3, r5
   26f84:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   26f86:	fb07 f202 	mul.w	r2, r7, r2
			lll->periph.window_widening_prepare_us +=
   26f8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_size_prepare_us =
   26f8c:	6522      	str	r2, [r4, #80]	; 0x50
				lll->periph.window_widening_periodic_us *
   26f8e:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
   26f92:	0872      	lsrs	r2, r6, #1
			lll->periph.window_widening_prepare_us +=
   26f94:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
   26f96:	3a96      	subs	r2, #150	; 0x96
   26f98:	4293      	cmp	r3, r2
   26f9a:	bf28      	it	cs
   26f9c:	4613      	movcs	r3, r2
			lll->periph.window_widening_periodic_us =
   26f9e:	6425      	str	r5, [r4, #64]	; 0x40
			periodic_us -= lll->periph.window_widening_periodic_us;
   26fa0:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   26fa4:	4d2f      	ldr	r5, [pc, #188]	; (27064 <event_conn_upd_prep+0x574>)
   26fa6:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
   26faa:	2300      	movs	r3, #0
   26fac:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   26fb0:	fba0 0105 	umull	r0, r1, r0, r5
   26fb4:	a326      	add	r3, pc, #152	; (adr r3, 27050 <event_conn_upd_prep+0x560>)
   26fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   26fba:	f7ff f8a1 	bl	26100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   26fbe:	4b28      	ldr	r3, [pc, #160]	; (27060 <event_conn_upd_prep+0x570>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   26fc0:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   26fc4:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   26fc8:	fba3 3000 	umull	r3, r0, r3, r0
   26fcc:	0a80      	lsrs	r0, r0, #10
   26fce:	fb07 f000 	mul.w	r0, r7, r0
   26fd2:	a31f      	add	r3, pc, #124	; (adr r3, 27050 <event_conn_upd_prep+0x560>)
   26fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   26fd8:	fba0 0105 	umull	r0, r1, r0, r5
   26fdc:	f7ff f890 	bl	26100 <__aeabi_uldivmod>
   26fe0:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
   26fe4:	e633      	b.n	26c4e <event_conn_upd_prep+0x15e>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
   26fe6:	2201      	movs	r2, #1
   26fe8:	2102      	movs	r1, #2
   26fea:	4610      	mov	r0, r2
   26fec:	f008 fd12 	bl	2fa14 <mayfly_enable>
   26ff0:	e6ca      	b.n	26d88 <event_conn_upd_prep+0x298>
			conn->procedure_expire = 0U;
   26ff2:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   26ff4:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
   26ff8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   26ffc:	e5ad      	b.n	26b5a <event_conn_upd_prep+0x6a>
		conn_upd_curr = conn;
   26ffe:	601c      	str	r4, [r3, #0]
   27000:	e72d      	b.n	26e5e <event_conn_upd_prep+0x36e>
			tx->next = conn->tx_head;
   27002:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   27004:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   27008:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   2700c:	e779      	b.n	26f02 <event_conn_upd_prep+0x412>
			return -ENOBUFS;
   2700e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27012:	e6ba      	b.n	26d8a <event_conn_upd_prep+0x29a>
			conn->tx_data = conn->tx_data->next;
   27014:	6811      	ldr	r1, [r2, #0]
   27016:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   2701a:	2b00      	cmp	r3, #0
   2701c:	f47f af69 	bne.w	26ef2 <event_conn_upd_prep+0x402>
			tx->next = conn->tx_head->next;
   27020:	6813      	ldr	r3, [r2, #0]
   27022:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   27024:	6015      	str	r5, [r2, #0]
	if (!tx->next) {
   27026:	682a      	ldr	r2, [r5, #0]
				conn->tx_ctrl_last = tx;
   27028:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   2702c:	e769      	b.n	26f02 <event_conn_upd_prep+0x412>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2702e:	7913      	ldrb	r3, [r2, #4]
   27030:	f003 0303 	and.w	r3, r3, #3
   27034:	2b03      	cmp	r3, #3
   27036:	d002      	beq.n	2703e <event_conn_upd_prep+0x54e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   27038:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
   2703c:	e75b      	b.n	26ef6 <event_conn_upd_prep+0x406>
	    ((pdu_data_tx->llctrl.opcode !=
   2703e:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   27040:	2b03      	cmp	r3, #3
   27042:	d0ed      	beq.n	27020 <event_conn_upd_prep+0x530>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   27044:	2b0a      	cmp	r3, #10
   27046:	d1f7      	bne.n	27038 <event_conn_upd_prep+0x548>
   27048:	e7ea      	b.n	27020 <event_conn_upd_prep+0x530>
   2704a:	bf00      	nop
   2704c:	f3af 8000 	nop.w
   27050:	1afd498d 	.word	0x1afd498d
   27054:	00000007 	.word	0x00000007
   27058:	200026c4 	.word	0x200026c4
   2705c:	20002630 	.word	0x20002630
   27060:	d1b71759 	.word	0xd1b71759
   27064:	3b9aca00 	.word	0x3b9aca00
   27068:	431bde83 	.word	0x431bde83
   2706c:	00000000 	.word	0x00000000

00027070 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
   27070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   27074:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
   27076:	f8d2 a000 	ldr.w	sl, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   2707a:	f8d3 b000 	ldr.w	fp, [r3]

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
   2707e:	7f03      	ldrb	r3, [r0, #28]
{
   27080:	b097      	sub	sp, #92	; 0x5c
   27082:	460c      	mov	r4, r1
	peer_addr_type = pdu_adv->tx_addr;
   27084:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   27088:	f100 011e 	add.w	r1, r0, #30
{
   2708c:	4605      	mov	r5, r0
   2708e:	4616      	mov	r6, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   27090:	a814      	add	r0, sp, #80	; 0x50
   27092:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
   27094:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   27098:	f01d feb3 	bl	44e02 <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
   2709c:	7c67      	ldrb	r7, [r4, #17]

	if (rl_idx != FILTER_IDX_NONE) {
   2709e:	2fff      	cmp	r7, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   270a0:	f10d 0948 	add.w	r9, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
   270a4:	d05c      	beq.n	27160 <ull_periph_setup+0xf0>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   270a6:	464a      	mov	r2, r9
   270a8:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   270ac:	4638      	mov	r0, r7
   270ae:	f012 fa37 	bl	39520 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
   270b2:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   270b6:	3302      	adds	r3, #2
   270b8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
   270bc:	4629      	mov	r1, r5
	conn->own_id_addr_type = own_id_addr_type;
	(void)memcpy(conn->own_id_addr, own_id_addr,
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   270be:	2203      	movs	r2, #3
	link = rx->link;
   270c0:	f851 3b2e 	ldr.w	r3, [r1], #46
   270c4:	930b      	str	r3, [sp, #44]	; 0x2c
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   270c6:	f106 0008 	add.w	r0, r6, #8
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   270ca:	f106 0804 	add.w	r8, r6, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   270ce:	f01d fe98 	bl	44e02 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   270d2:	f106 0318 	add.w	r3, r6, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   270d6:	2204      	movs	r2, #4
   270d8:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   270dc:	4640      	mov	r0, r8
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   270de:	930c      	str	r3, [sp, #48]	; 0x30
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   270e0:	f01d fe8f 	bl	44e02 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   270e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   270e6:	2205      	movs	r2, #5
   270e8:	f105 013a 	add.w	r1, r5, #58	; 0x3a
   270ec:	4618      	mov	r0, r3
   270ee:	f01d fe88 	bl	44e02 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   270f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   270f4:	2105      	movs	r1, #5
   270f6:	4618      	mov	r0, r3
   270f8:	f008 fdba 	bl	2fc70 <util_ones_count_get>
   270fc:	7f73      	ldrb	r3, [r6, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   270fe:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   27102:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   27106:	f360 0305 	bfi	r3, r0, #0, #6
   2710a:	7773      	strb	r3, [r6, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   2710c:	f3c2 0304 	ubfx	r3, r2, #0, #5
   27110:	77b3      	strb	r3, [r6, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   27112:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   27114:	81f3      	strh	r3, [r6, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   27116:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   27118:	b299      	uxth	r1, r3
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   2711a:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   2711e:	d905      	bls.n	2712c <ull_periph_setup+0xbc>
   27120:	331b      	adds	r3, #27
   27122:	f003 031f 	and.w	r3, r3, #31
   27126:	2b0b      	cmp	r3, #11
   27128:	d800      	bhi.n	2712c <ull_periph_setup+0xbc>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
   2712a:	b9f9      	cbnz	r1, 2716c <ull_periph_setup+0xfc>
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;

	/* Let the advertiser continue with connectable advertising */
	lll->periph.initiated = 0U;
   2712c:	f896 3020 	ldrb.w	r3, [r6, #32]
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
   27130:	68ec      	ldr	r4, [r5, #12]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
   27132:	980b      	ldr	r0, [sp, #44]	; 0x2c
	hdr->disabled_cb = NULL;
   27134:	2200      	movs	r2, #0
	lll->periph.initiated = 0U;
   27136:	f362 0300 	bfi	r3, r2, #0, #1
	rx->type = NODE_RX_TYPE_RELEASE;
   2713a:	2701      	movs	r7, #1
	hdr->disabled_cb = NULL;
   2713c:	f8cb 2014 	str.w	r2, [fp, #20]
		ll_rx_put(link, rx);
   27140:	4629      	mov	r1, r5
	lll->periph.initiated = 0U;
   27142:	f886 3020 	strb.w	r3, [r6, #32]
	rx->type = NODE_RX_TYPE_RELEASE;
   27146:	712f      	strb	r7, [r5, #4]
		ll_rx_put(link, rx);
   27148:	f00b ff1a 	bl	32f80 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
   2714c:	6820      	ldr	r0, [r4, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
   2714e:	7127      	strb	r7, [r4, #4]
	ll_rx_put(link, rx);
   27150:	4621      	mov	r1, r4
   27152:	f00b ff15 	bl	32f80 <ll_rx_put>
	ll_rx_sched();
   27156:	f00b ff1d 	bl	32f94 <ll_rx_sched>
}
   2715a:	b017      	add	sp, #92	; 0x5c
   2715c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
   27160:	2206      	movs	r2, #6
   27162:	a914      	add	r1, sp, #80	; 0x50
   27164:	4648      	mov	r0, r9
   27166:	f01d fe4c 	bl	44e02 <memcpy>
   2716a:	e7a7      	b.n	270bc <ull_periph_setup+0x4c>
	((struct lll_adv *)ftr->param)->conn = NULL;
   2716c:	6823      	ldr	r3, [r4, #0]
   2716e:	2000      	movs	r0, #0
   27170:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   27172:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   27176:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
   2717a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   2717e:	8233      	strh	r3, [r6, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
   27180:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
   27184:	0952      	lsrs	r2, r2, #5
   27186:	f362 03c5 	bfi	r3, r2, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   2718a:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
	conn->periph.sca = pdu_adv->connect_ind.sca;
   2718c:	f88a 30d8 	strb.w	r3, [sl, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   27190:	f240 43e2 	movw	r3, #1250	; 0x4e2
   27194:	fb03 f101 	mul.w	r1, r3, r1
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   27198:	920e      	str	r2, [sp, #56]	; 0x38
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   2719a:	910c      	str	r1, [sp, #48]	; 0x30
		ceiling_fraction(((lll_clock_ppm_local_get() +
   2719c:	f013 fdaa 	bl	3acf4 <lll_clock_ppm_local_get>
   271a0:	900d      	str	r0, [sp, #52]	; 0x34
   271a2:	f89a 00d8 	ldrb.w	r0, [sl, #216]	; 0xd8
   271a6:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   271aa:	f013 fda5 	bl	3acf8 <lll_clock_ppm_get>
   271ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   271b0:	990c      	ldr	r1, [sp, #48]	; 0x30
   271b2:	4410      	add	r0, r2
   271b4:	fb01 f000 	mul.w	r0, r1, r0
   271b8:	4ac1      	ldr	r2, [pc, #772]	; (274c0 <ull_periph_setup+0x450>)
   271ba:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
   271be:	f200 203f 	addw	r0, r0, #575	; 0x23f
   271c2:	fba2 2000 	umull	r2, r0, r2, r0
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   271c6:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
   271ca:	f240 43e2 	movw	r3, #1250	; 0x4e2
   271ce:	fb02 f303 	mul.w	r3, r2, r3
   271d2:	63b3      	str	r3, [r6, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   271d4:	084b      	lsrs	r3, r1, #1
		ceiling_fraction(((lll_clock_ppm_local_get() +
   271d6:	0c80      	lsrs	r0, r0, #18
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   271d8:	3b96      	subs	r3, #150	; 0x96
	lll->periph.window_widening_periodic_us =
   271da:	6270      	str	r0, [r6, #36]	; 0x24
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   271dc:	62b3      	str	r3, [r6, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   271de:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   271e0:	4ab8      	ldr	r2, [pc, #736]	; (274c4 <ull_periph_setup+0x454>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   271e2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
   271e6:	4618      	mov	r0, r3
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   271e8:	4bb7      	ldr	r3, [pc, #732]	; (274c8 <ull_periph_setup+0x458>)
   271ea:	468c      	mov	ip, r1
   271ec:	440b      	add	r3, r1
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   271ee:	4462      	add	r2, ip
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   271f0:	fbb3 f3f1 	udiv	r3, r3, r1
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   271f4:	fbb2 f2fc 	udiv	r2, r2, ip
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   271f8:	8a31      	ldrh	r1, [r6, #16]
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   271fa:	f8aa 20c6 	strh.w	r2, [sl, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   271fe:	b282      	uxth	r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27200:	f242 7010 	movw	r0, #10000	; 0x2710
   27204:	fb00 c202 	mla	r2, r0, r2, ip
   27208:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2720a:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   2720c:	fbb2 f2fc 	udiv	r2, r2, ip
   27210:	f8aa 20c2 	strh.w	r2, [sl, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27214:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27216:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27218:	f8aa 20ce 	strh.w	r2, [sl, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2721c:	dd04      	ble.n	27228 <ull_periph_setup+0x1b8>
   2721e:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
   27222:	31fa      	adds	r1, #250	; 0xfa
   27224:	440a      	add	r2, r1
   27226:	b292      	uxth	r2, r2
   27228:	f8aa 20ca 	strh.w	r2, [sl, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
   2722c:	4641      	mov	r1, r8
   2722e:	2204      	movs	r2, #4
   27230:	f10a 00dc 	add.w	r0, sl, #220	; 0xdc
   27234:	f01d fde5 	bl	44e02 <memcpy>
		chan_sel = pdu_adv->chan_sel;
   27238:	462b      	mov	r3, r5
   2723a:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
   2723e:	f3c2 1240 	ubfx	r2, r2, #5, #1
   27242:	920d      	str	r2, [sp, #52]	; 0x34
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27244:	07da      	lsls	r2, r3, #31
   27246:	f100 8114 	bmi.w	27472 <ull_periph_setup+0x402>
	cc->status = 0U;
   2724a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2724e:	83ab      	strh	r3, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   27250:	f89b 0026 	ldrb.w	r0, [fp, #38]	; 0x26
   27254:	f012 fed2 	bl	39ffc <ull_filter_lll_lrpa_used>
   27258:	2800      	cmp	r0, #0
   2725a:	f000 80ea 	beq.w	27432 <ull_periph_setup+0x3c2>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   2725e:	2206      	movs	r2, #6
   27260:	f105 0124 	add.w	r1, r5, #36	; 0x24
   27264:	f105 002b 	add.w	r0, r5, #43	; 0x2b
   27268:	f01d fdcb 	bl	44e02 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   2726c:	2fff      	cmp	r7, #255	; 0xff
   2726e:	f000 80e7 	beq.w	27440 <ull_periph_setup+0x3d0>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   27272:	a914      	add	r1, sp, #80	; 0x50
   27274:	2206      	movs	r2, #6
   27276:	f105 0025 	add.w	r0, r5, #37	; 0x25
   2727a:	f01d fdc2 	bl	44e02 <memcpy>
	cc->peer_addr_type = peer_addr_type;
   2727e:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   27282:	77ab      	strb	r3, [r5, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
   27284:	4649      	mov	r1, r9
   27286:	2206      	movs	r2, #6
   27288:	f105 001f 	add.w	r0, r5, #31
   2728c:	f01d fdb9 	bl	44e02 <memcpy>
	cc->sca = conn->periph.sca;
   27290:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
	cc->interval = lll->interval;
   27294:	89f2      	ldrh	r2, [r6, #14]
   27296:	866a      	strh	r2, [r5, #50]	; 0x32
	cc->latency = lll->latency;
   27298:	8a32      	ldrh	r2, [r6, #16]
   2729a:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->periph.sca;
   2729c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
   272a0:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
	cc->sca = conn->periph.sca;
   272a4:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
   272a8:	86ea      	strh	r2, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
   272aa:	4650      	mov	r0, sl
   272ac:	f00d feb0 	bl	35010 <ll_conn_handle_get>
		ll_rx_put(link, rx);
   272b0:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
   272b2:	81b0      	strh	r0, [r6, #12]
	rx->handle = lll->handle;
   272b4:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
   272b6:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
   272b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   272ba:	f00b fe61 	bl	32f80 <ll_rx_put>
		rx->handle = lll->handle;
   272be:	89b3      	ldrh	r3, [r6, #12]
   272c0:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   272c2:	231b      	movs	r3, #27
   272c4:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
   272c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		link = rx->link;
   272c8:	682f      	ldr	r7, [r5, #0]
		if (chan_sel) {
   272ca:	2b00      	cmp	r3, #0
   272cc:	f040 80bf 	bne.w	2744e <ull_periph_setup+0x3de>
   272d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			cs->csa = 0x00;
   272d2:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
   272d4:	4629      	mov	r1, r5
   272d6:	4638      	mov	r0, r7
   272d8:	f00b fe52 	bl	32f80 <ll_rx_put>
	ll_rx_sched();
   272dc:	f00b fe5a 	bl	32f94 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   272e0:	f896 0045 	ldrb.w	r0, [r6, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
   272e4:	f8b6 7040 	ldrh.w	r7, [r6, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
   272e8:	f8b6 5042 	ldrh.w	r5, [r6, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   272ec:	2101      	movs	r1, #1
   272ee:	f000 0007 	and.w	r0, r0, #7
   272f2:	f013 fb0f 	bl	3a914 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   272f6:	443d      	add	r5, r7
   272f8:	f505 75e1 	add.w	r5, r5, #450	; 0x1c2
   272fc:	1829      	adds	r1, r5, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   272fe:	4680      	mov	r8, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27300:	4872      	ldr	r0, [pc, #456]	; (274cc <ull_periph_setup+0x45c>)
	conn->ull.ticks_active_to_start = 0U;
   27302:	2700      	movs	r7, #0
	conn->ull.ticks_prepare_to_start =
   27304:	2331      	movs	r3, #49	; 0x31
   27306:	f8ca 3008 	str.w	r3, [sl, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   2730a:	fba1 0100 	umull	r0, r1, r1, r0
   2730e:	a36a      	add	r3, pc, #424	; (adr r3, 274b8 <ull_periph_setup+0x448>)
   27310:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
   27314:	f8ca 7004 	str.w	r7, [sl, #4]
	conn->ull.ticks_preempt_to_start =
   27318:	f8ca 700c 	str.w	r7, [sl, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   2731c:	f7fe fef0 	bl	26100 <__aeabi_uldivmod>
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   27320:	6a76      	ldr	r6, [r6, #36]	; 0x24
   27322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   27324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	conn_offset_us = ftr->radio_end_us;
   27326:	68e5      	ldr	r5, [r4, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27328:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   2732c:	1b9e      	subs	r6, r3, r6
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   2732e:	f240 43e2 	movw	r3, #1250	; 0x4e2
   27332:	fb03 5502 	mla	r5, r3, r2, r5
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   27336:	2102      	movs	r1, #2
   27338:	463a      	mov	r2, r7
	conn->ull.ticks_slot =
   2733a:	f8ca 0010 	str.w	r0, [sl, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   2733e:	2001      	movs	r0, #1
   27340:	f008 fb68 	bl	2fa14 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
   27344:	4658      	mov	r0, fp
   27346:	f00c ff0d 	bl	34164 <ull_adv_handle_get>
   2734a:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   2734c:	4b60      	ldr	r3, [pc, #384]	; (274d0 <ull_periph_setup+0x460>)
   2734e:	f8cd b000 	str.w	fp, [sp]
   27352:	b2d2      	uxtb	r2, r2
   27354:	4638      	mov	r0, r7
   27356:	2101      	movs	r1, #1
   27358:	f009 fd5c 	bl	30e14 <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
   2735c:	f205 45b2 	addw	r5, r5, #1202	; 0x4b2
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27360:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
   27362:	eba5 0508 	sub.w	r5, r5, r8
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27366:	f000 8091 	beq.w	2748c <ull_periph_setup+0x41c>
	if (adv->lll.is_hdcd) {
   2736a:	f89b 3024 	ldrb.w	r3, [fp, #36]	; 0x24
   2736e:	07db      	lsls	r3, r3, #31
   27370:	d477      	bmi.n	27462 <ull_periph_setup+0x3f2>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27372:	4650      	mov	r0, sl
   27374:	f00d fe4c 	bl	35010 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27378:	f8df 9150 	ldr.w	r9, [pc, #336]	; 274cc <ull_periph_setup+0x45c>
   2737c:	fba6 8609 	umull	r8, r6, r6, r9
   27380:	a34d      	add	r3, pc, #308	; (adr r3, 274b8 <ull_periph_setup+0x448>)
   27382:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27386:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27388:	4631      	mov	r1, r6
   2738a:	4640      	mov	r0, r8
   2738c:	f7fe feb8 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27390:	68a3      	ldr	r3, [r4, #8]
   27392:	4a50      	ldr	r2, [pc, #320]	; (274d4 <ull_periph_setup+0x464>)
   27394:	9207      	str	r2, [sp, #28]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27396:	f10b 0403 	add.w	r4, fp, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2739a:	f1a3 0b3a 	sub.w	fp, r3, #58	; 0x3a
				     HAL_TICKER_REMAINDER(conn_interval_us),
   2739e:	4b4e      	ldr	r3, [pc, #312]	; (274d8 <ull_periph_setup+0x468>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   273a0:	f8cd a018 	str.w	sl, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   273a4:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
   273a8:	fba7 3103 	umull	r3, r1, r7, r3
   273ac:	ebb8 0003 	subs.w	r0, r8, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   273b0:	4b4a      	ldr	r3, [pc, #296]	; (274dc <ull_periph_setup+0x46c>)
   273b2:	9305      	str	r3, [sp, #20]
   273b4:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   273b8:	9308      	str	r3, [sp, #32]
   273ba:	f8da 3010 	ldr.w	r3, [sl, #16]
   273be:	9304      	str	r3, [sp, #16]
   273c0:	f04f 0300 	mov.w	r3, #0
   273c4:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   273c6:	f04f 0307 	mov.w	r3, #7
   273ca:	fb03 1107 	mla	r1, r3, r7, r1
   273ce:	eb66 0101 	sbc.w	r1, r6, r1
   273d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   273d6:	2300      	movs	r3, #0
   273d8:	f7fe fe92 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   273dc:	a336      	add	r3, pc, #216	; (adr r3, 274b8 <ull_periph_setup+0x448>)
   273de:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   273e2:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   273e6:	fba5 0109 	umull	r0, r1, r5, r9
   273ea:	f7fe fe89 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   273ee:	b2e4      	uxtb	r4, r4
   273f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   273f4:	9000      	str	r0, [sp, #0]
   273f6:	465b      	mov	r3, fp
   273f8:	4622      	mov	r2, r4
   273fa:	2101      	movs	r1, #1
   273fc:	2000      	movs	r0, #0
   273fe:	f009 fc7d 	bl	30cfc <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   27402:	f030 0302 	bics.w	r3, r0, #2
   27406:	d00c      	beq.n	27422 <ull_periph_setup+0x3b2>
   27408:	4a35      	ldr	r2, [pc, #212]	; (274e0 <ull_periph_setup+0x470>)
   2740a:	4936      	ldr	r1, [pc, #216]	; (274e4 <ull_periph_setup+0x474>)
   2740c:	4836      	ldr	r0, [pc, #216]	; (274e8 <ull_periph_setup+0x478>)
   2740e:	f240 13c9 	movw	r3, #457	; 0x1c9
   27412:	f01b fc1b 	bl	42c4c <printk>
   27416:	4040      	eors	r0, r0
   27418:	f380 8811 	msr	BASEPRI, r0
   2741c:	f04f 0003 	mov.w	r0, #3
   27420:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   27422:	2201      	movs	r2, #1
   27424:	2102      	movs	r1, #2
   27426:	4610      	mov	r0, r2
   27428:	f008 faf4 	bl	2fa14 <mayfly_enable>
}
   2742c:	b017      	add	sp, #92	; 0x5c
   2742e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   27432:	4601      	mov	r1, r0
   27434:	2206      	movs	r2, #6
   27436:	f105 002b 	add.w	r0, r5, #43	; 0x2b
   2743a:	f01d fced 	bl	44e18 <memset>
   2743e:	e715      	b.n	2726c <ull_periph_setup+0x1fc>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
   27440:	2206      	movs	r2, #6
   27442:	2100      	movs	r1, #0
   27444:	f105 0025 	add.w	r0, r5, #37	; 0x25
   27448:	f01d fce6 	bl	44e18 <memset>
   2744c:	e717      	b.n	2727e <ull_periph_setup+0x20e>
			lll->data_chan_sel = 1;
   2744e:	7f73      	ldrb	r3, [r6, #29]
   27450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27454:	7773      	strb	r3, [r6, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   27456:	4640      	mov	r0, r8
   27458:	f011 fe6c 	bl	39134 <lll_chan_id>
   2745c:	2301      	movs	r3, #1
   2745e:	83f0      	strh	r0, [r6, #30]
			cs->csa = 0x01;
   27460:	e737      	b.n	272d2 <ull_periph_setup+0x262>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   27462:	2300      	movs	r3, #0
   27464:	2201      	movs	r2, #1
   27466:	9300      	str	r3, [sp, #0]
   27468:	4618      	mov	r0, r3
   2746a:	4611      	mov	r1, r2
   2746c:	f009 fcd2 	bl	30e14 <ticker_stop>
   27470:	e77f      	b.n	27372 <ull_periph_setup+0x302>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27472:	4a1b      	ldr	r2, [pc, #108]	; (274e0 <ull_periph_setup+0x470>)
   27474:	491d      	ldr	r1, [pc, #116]	; (274ec <ull_periph_setup+0x47c>)
   27476:	481c      	ldr	r0, [pc, #112]	; (274e8 <ull_periph_setup+0x478>)
   27478:	23f1      	movs	r3, #241	; 0xf1
   2747a:	f01b fbe7 	bl	42c4c <printk>
   2747e:	4040      	eors	r0, r0
   27480:	f380 8811 	msr	BASEPRI, r0
   27484:	f04f 0003 	mov.w	r0, #3
   27488:	df02      	svc	2
   2748a:	e6de      	b.n	2724a <ull_periph_setup+0x1da>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   2748c:	f00b fe56 	bl	3313c <ull_disable_mark_get>
   27490:	4583      	cmp	fp, r0
   27492:	f43f af6a 	beq.w	2736a <ull_periph_setup+0x2fa>
   27496:	4a12      	ldr	r2, [pc, #72]	; (274e0 <ull_periph_setup+0x470>)
   27498:	4915      	ldr	r1, [pc, #84]	; (274f0 <ull_periph_setup+0x480>)
   2749a:	4813      	ldr	r0, [pc, #76]	; (274e8 <ull_periph_setup+0x478>)
   2749c:	f240 239f 	movw	r3, #671	; 0x29f
   274a0:	f01b fbd4 	bl	42c4c <printk>
   274a4:	4040      	eors	r0, r0
   274a6:	f380 8811 	msr	BASEPRI, r0
   274aa:	f04f 0003 	mov.w	r0, #3
   274ae:	df02      	svc	2
		  param == ull_disable_mark_get());
}
   274b0:	e75b      	b.n	2736a <ull_periph_setup+0x2fa>
   274b2:	bf00      	nop
   274b4:	f3af 8000 	nop.w
   274b8:	1afd498d 	.word	0x1afd498d
   274bc:	00000007 	.word	0x00000007
   274c0:	431bde83 	.word	0x431bde83
   274c4:	026259ff 	.word	0x026259ff
   274c8:	01c9c37f 	.word	0x01c9c37f
   274cc:	3b9aca00 	.word	0x3b9aca00
   274d0:	00038ec1 	.word	0x00038ec1
   274d4:	00038e91 	.word	0x00038e91
   274d8:	1afd498d 	.word	0x1afd498d
   274dc:	00038efd 	.word	0x00038efd
   274e0:	0004a68c 	.word	0x0004a68c
   274e4:	0004a578 	.word	0x0004a578
   274e8:	0004a024 	.word	0x0004a024
   274ec:	0004a10c 	.word	0x0004a10c
   274f0:	0004a6e8 	.word	0x0004a6e8
   274f4:	00000000 	.word	0x00000000

000274f8 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   274f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   274fc:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
   274fe:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 275d8 <nrf_flash_sync_exe+0xe0>
{
   27502:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   27504:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   27508:	f10d 0036 	add.w	r0, sp, #54	; 0x36
   2750c:	f00b fdb0 	bl	33070 <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
   27510:	4f32      	ldr	r7, [pc, #200]	; (275dc <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
   27512:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
   27516:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
   2751a:	f009 fcbd 	bl	30e98 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
   2751e:	f8d8 4000 	ldr.w	r4, [r8]
   27522:	fba4 5407 	umull	r5, r4, r4, r7
   27526:	a32a      	add	r3, pc, #168	; (adr r3, 275d0 <nrf_flash_sync_exe+0xd8>)
   27528:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
   2752c:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
   2752e:	4621      	mov	r1, r4
   27530:	4628      	mov	r0, r5
   27532:	f7fe fde5 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   27536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
   27538:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   2753a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
   2753e:	9306      	str	r3, [sp, #24]
   27540:	4b27      	ldr	r3, [pc, #156]	; (275e0 <nrf_flash_sync_exe+0xe8>)
   27542:	9305      	str	r3, [sp, #20]
   27544:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   27546:	a322      	add	r3, pc, #136	; (adr r3, 275d0 <nrf_flash_sync_exe+0xd8>)
   27548:	e9d3 2300 	ldrd	r2, r3, [r3]
   2754c:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
   27550:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   27554:	f7fe fdd4 	bl	26100 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   27558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2755a:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
   2755e:	4b21      	ldr	r3, [pc, #132]	; (275e4 <nrf_flash_sync_exe+0xec>)
	err = ticker_start(instance_index,
   27560:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   27564:	fba7 3103 	umull	r3, r1, r7, r3
   27568:	2207      	movs	r2, #7
	err = ticker_start(instance_index,
   2756a:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   2756e:	fb02 1107 	mla	r1, r2, r7, r1
   27572:	1ae8      	subs	r0, r5, r3
   27574:	eb64 0101 	sbc.w	r1, r4, r1
   27578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2757c:	2300      	movs	r3, #0
   2757e:	f7fe fdbf 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   27582:	9600      	str	r6, [sp, #0]
   27584:	e9cd 7001 	strd	r7, r0, [sp, #4]
   27588:	464b      	mov	r3, r9
   2758a:	465a      	mov	r2, fp
   2758c:	2103      	movs	r1, #3
   2758e:	4650      	mov	r0, sl
   27590:	f009 fbb4 	bl	30cfc <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   27594:	f030 0402 	bics.w	r4, r0, #2
   27598:	d116      	bne.n	275c8 <nrf_flash_sync_exe+0xd0>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   2759a:	4a13      	ldr	r2, [pc, #76]	; (275e8 <nrf_flash_sync_exe+0xf0>)
   2759c:	4813      	ldr	r0, [pc, #76]	; (275ec <nrf_flash_sync_exe+0xf4>)
   2759e:	2300      	movs	r3, #0
   275a0:	f01a f84c 	bl	4163c <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
   275a4:	b168      	cbz	r0, 275c2 <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   275a6:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   275aa:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   275ae:	9400      	str	r4, [sp, #0]
   275b0:	4623      	mov	r3, r4
   275b2:	2103      	movs	r1, #3
   275b4:	f009 fc2e 	bl	30e14 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
   275b8:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
   275bc:	b00f      	add	sp, #60	; 0x3c
   275be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
   275c2:	f8d8 000c 	ldr.w	r0, [r8, #12]
   275c6:	e7f9      	b.n	275bc <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
   275c8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
   275cc:	e7f6      	b.n	275bc <nrf_flash_sync_exe+0xc4>
   275ce:	bf00      	nop
   275d0:	1afd498d 	.word	0x1afd498d
   275d4:	00000007 	.word	0x00000007
   275d8:	200036e0 	.word	0x200036e0
   275dc:	3b9aca00 	.word	0x3b9aca00
   275e0:	0003ea41 	.word	0x0003ea41
   275e4:	1afd498d 	.word	0x1afd498d
   275e8:	000b7b44 	.word	0x000b7b44
   275ec:	200036f0 	.word	0x200036f0

000275f0 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   275f0:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   275f2:	4d0f      	ldr	r5, [pc, #60]	; (27630 <nrf_flash_sync_check_time_limit+0x40>)
{
   275f4:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   275f6:	f009 fc4f 	bl	30e98 <ticker_ticks_now_get>
   275fa:	68a9      	ldr	r1, [r5, #8]
   275fc:	f009 fc4e 	bl	30e9c <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   27600:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
   27602:	fbb0 f4f4 	udiv	r4, r0, r4
   27606:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   27608:	480a      	ldr	r0, [pc, #40]	; (27634 <nrf_flash_sync_check_time_limit+0x44>)
   2760a:	a307      	add	r3, pc, #28	; (adr r3, 27628 <nrf_flash_sync_check_time_limit+0x38>)
   2760c:	e9d3 2300 	ldrd	r2, r3, [r3]
   27610:	fba1 0100 	umull	r0, r1, r1, r0
   27614:	f7fe fd74 	bl	26100 <__aeabi_uldivmod>
   27618:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
   2761c:	4284      	cmp	r4, r0
   2761e:	bf94      	ite	ls
   27620:	2000      	movls	r0, #0
   27622:	2001      	movhi	r0, #1
   27624:	bd38      	pop	{r3, r4, r5, pc}
   27626:	bf00      	nop
   27628:	1afd498d 	.word	0x1afd498d
   2762c:	00000007 	.word	0x00000007
   27630:	200036e0 	.word	0x200036e0
   27634:	3b9aca00 	.word	0x3b9aca00

00027638 <activity_expiry_function>:
    }
}

K_WORK_DEFINE(activity_work, activity_work_handler);

void activity_expiry_function() { k_work_submit(&activity_work); }
   27638:	4801      	ldr	r0, [pc, #4]	; (27640 <activity_expiry_function+0x8>)
   2763a:	f01a b94f 	b.w	418dc <k_work_submit>
   2763e:	bf00      	nop
   27640:	20000260 	.word	0x20000260

00027644 <activity_init>:

K_TIMER_DEFINE(activity_timer, activity_expiry_function, NULL);

int activity_init() {
   27644:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_uptime_ticks();
   27646:	f021 fc91 	bl	48f6c <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   2764a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2764e:	fba0 0302 	umull	r0, r3, r0, r2
   27652:	fb02 3101 	mla	r1, r2, r1, r3
   27656:	0bc0      	lsrs	r0, r0, #15
    activity_last_uptime = k_uptime_get();
   27658:	4a07      	ldr	r2, [pc, #28]	; (27678 <activity_init+0x34>)
   2765a:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2765e:	6010      	str	r0, [r2, #0]

    k_timer_start(&activity_timer, K_SECONDS(1), K_SECONDS(1));
   27660:	2300      	movs	r3, #0
	compiler_barrier();
   27662:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	z_impl_k_timer_start(timer, duration, period);
   27666:	4805      	ldr	r0, [pc, #20]	; (2767c <activity_init+0x38>)
   27668:	e9cd 2300 	strd	r2, r3, [sp]
   2766c:	f01a fece 	bl	4240c <z_impl_k_timer_start>
    return 0;
}
   27670:	2000      	movs	r0, #0
   27672:	b003      	add	sp, #12
   27674:	f85d fb04 	ldr.w	pc, [sp], #4
   27678:	200019b8 	.word	0x200019b8
   2767c:	20000a30 	.word	0x20000a30

00027680 <raise_event>:
int raise_event() {
   27680:	b508      	push	{r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   27682:	4b04      	ldr	r3, [pc, #16]	; (27694 <raise_event+0x14>)
   27684:	7818      	ldrb	r0, [r3, #0]
   27686:	f000 f99b 	bl	279c0 <new_zmk_activity_state_changed>
}
   2768a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   2768e:	f01b b918 	b.w	428c2 <zmk_event_manager_raise>
   27692:	bf00      	nop
   27694:	20003b8c 	.word	0x20003b8c

00027698 <set_state>:
    if (activity_state == state)
   27698:	4b04      	ldr	r3, [pc, #16]	; (276ac <set_state+0x14>)
   2769a:	781a      	ldrb	r2, [r3, #0]
   2769c:	4282      	cmp	r2, r0
   2769e:	d002      	beq.n	276a6 <set_state+0xe>
    activity_state = state;
   276a0:	7018      	strb	r0, [r3, #0]
    return raise_event();
   276a2:	f7ff bfed 	b.w	27680 <raise_event>
}
   276a6:	2000      	movs	r0, #0
   276a8:	4770      	bx	lr
   276aa:	bf00      	nop
   276ac:	20003b8c 	.word	0x20003b8c

000276b0 <activity_event_listener>:
int activity_event_listener(const zmk_event_t *eh) {
   276b0:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   276b2:	f021 fc5b 	bl	48f6c <z_impl_k_uptime_ticks>
   276b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   276ba:	fba0 0302 	umull	r0, r3, r0, r2
   276be:	fb02 3101 	mla	r1, r2, r1, r3
   276c2:	0bc0      	lsrs	r0, r0, #15
    activity_last_uptime = k_uptime_get();
   276c4:	4a04      	ldr	r2, [pc, #16]	; (276d8 <activity_event_listener+0x28>)
   276c6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   276ca:	6010      	str	r0, [r2, #0]
}
   276cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return set_state(ZMK_ACTIVITY_ACTIVE);
   276d0:	2000      	movs	r0, #0
   276d2:	f7ff bfe1 	b.w	27698 <set_state>
   276d6:	bf00      	nop
   276d8:	200019b8 	.word	0x200019b8

000276dc <activity_work_handler>:
void activity_work_handler(struct k_work *work) {
   276dc:	b508      	push	{r3, lr}
   276de:	f021 fc45 	bl	48f6c <z_impl_k_uptime_ticks>
   276e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   276e6:	fba0 0302 	umull	r0, r3, r0, r2
   276ea:	fb02 3101 	mla	r1, r2, r1, r3
    int32_t inactive_time = current - activity_last_uptime;
   276ee:	4a08      	ldr	r2, [pc, #32]	; (27710 <activity_work_handler+0x34>)
   276f0:	0bc3      	lsrs	r3, r0, #15
   276f2:	6812      	ldr	r2, [r2, #0]
   276f4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   276f8:	1a9b      	subs	r3, r3, r2
        if (inactive_time > MAX_IDLE_MS) {
   276fa:	f247 5230 	movw	r2, #30000	; 0x7530
   276fe:	4293      	cmp	r3, r2
   27700:	dd04      	ble.n	2770c <activity_work_handler+0x30>
}
   27702:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_state(ZMK_ACTIVITY_IDLE);
   27706:	2001      	movs	r0, #1
   27708:	f7ff bfc6 	b.w	27698 <set_state>
}
   2770c:	bd08      	pop	{r3, pc}
   2770e:	bf00      	nop
   27710:	200019b8 	.word	0x200019b8

00027714 <zmk_kscan_process_msgq>:

    k_msgq_put(&zmk_kscan_msgq, &ev, K_NO_WAIT);
    k_work_submit(&msg_processor.work);
}

void zmk_kscan_process_msgq(struct k_work *item) {
   27714:	b530      	push	{r4, r5, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   27716:	4c18      	ldr	r4, [pc, #96]	; (27778 <zmk_kscan_process_msgq+0x64>)
   27718:	b08d      	sub	sp, #52	; 0x34
   2771a:	2200      	movs	r2, #0
   2771c:	2300      	movs	r3, #0
   2771e:	a903      	add	r1, sp, #12
   27720:	4620      	mov	r0, r4
   27722:	f019 fe1d 	bl	41360 <z_impl_k_msgq_get>
    struct zmk_kscan_event ev;

    while (k_msgq_get(&zmk_kscan_msgq, &ev, K_NO_WAIT) == 0) {
   27726:	b108      	cbz	r0, 2772c <zmk_kscan_process_msgq+0x18>
            (struct zmk_position_state_changed){.source = ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL,
                                                .state = pressed,
                                                .position = position,
                                                .timestamp = k_uptime_get()}));
    }
}
   27728:	b00d      	add	sp, #52	; 0x34
   2772a:	bd30      	pop	{r4, r5, pc}
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   2772c:	9d05      	ldr	r5, [sp, #20]
        uint32_t position = zmk_matrix_transform_row_column_to_position(ev.row, ev.column);
   2772e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   27732:	f000 f859 	bl	277e8 <zmk_matrix_transform_row_column_to_position>
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   27736:	fab5 f585 	clz	r5, r5
   2773a:	096d      	lsrs	r5, r5, #5
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(
   2773c:	23ff      	movs	r3, #255	; 0xff
   2773e:	f88d 3018 	strb.w	r3, [sp, #24]
   27742:	9007      	str	r0, [sp, #28]
   27744:	f88d 5020 	strb.w	r5, [sp, #32]
	return z_impl_k_uptime_ticks();
   27748:	f021 fc10 	bl	48f6c <z_impl_k_uptime_ticks>
   2774c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27750:	fba0 0302 	umull	r0, r3, r0, r2
   27754:	fb02 3101 	mla	r1, r2, r1, r3
   27758:	0bc0      	lsrs	r0, r0, #15
   2775a:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2775e:	0bc9      	lsrs	r1, r1, #15
   27760:	e88d 0003 	stmia.w	sp, {r0, r1}
   27764:	ab06      	add	r3, sp, #24
   27766:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   2776a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2776c:	f000 f934 	bl	279d8 <new_zmk_position_state_changed>
   27770:	f01b f8a7 	bl	428c2 <zmk_event_manager_raise>
                                                .timestamp = k_uptime_get()}));
   27774:	e7d1      	b.n	2771a <zmk_kscan_process_msgq+0x6>
   27776:	bf00      	nop
   27778:	20000b7c 	.word	0x20000b7c

0002777c <zmk_kscan_callback>:
                               bool pressed) {
   2777c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   2777e:	f083 0301 	eor.w	r3, r3, #1
    struct zmk_kscan_event ev = {
   27782:	e9cd 1201 	strd	r1, r2, [sp, #4]
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   27786:	9303      	str	r3, [sp, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
   27788:	2200      	movs	r2, #0
   2778a:	2300      	movs	r3, #0
   2778c:	a901      	add	r1, sp, #4
   2778e:	4804      	ldr	r0, [pc, #16]	; (277a0 <zmk_kscan_callback+0x24>)
   27790:	f019 fd90 	bl	412b4 <z_impl_k_msgq_put>
    k_work_submit(&msg_processor.work);
   27794:	4803      	ldr	r0, [pc, #12]	; (277a4 <zmk_kscan_callback+0x28>)
   27796:	f01a f8a1 	bl	418dc <k_work_submit>
}
   2779a:	b005      	add	sp, #20
   2779c:	f85d fb04 	ldr.w	pc, [sp], #4
   277a0:	20000b7c 	.word	0x20000b7c
   277a4:	200019bc 	.word	0x200019bc

000277a8 <zmk_kscan_init>:

int zmk_kscan_init(char *name) {
   277a8:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   277aa:	f019 fb59 	bl	40e60 <z_impl_device_get_binding>
    const struct device *dev = device_get_binding(name);
    if (dev == NULL) {
   277ae:	4604      	mov	r4, r0
   277b0:	b178      	cbz	r0, 277d2 <zmk_kscan_init+0x2a>
        LOG_ERR("Failed to get the KSCAN device");
        return -EINVAL;
    }

    k_work_init(&msg_processor.work, zmk_kscan_process_msgq);
   277b2:	490a      	ldr	r1, [pc, #40]	; (277dc <zmk_kscan_init+0x34>)
   277b4:	480a      	ldr	r0, [pc, #40]	; (277e0 <zmk_kscan_init+0x38>)
   277b6:	f021 fa13 	bl	48be0 <k_work_init>
					kscan_callback_t callback)
{
	const struct kscan_driver_api *api =
				(struct kscan_driver_api *)dev->api;

	return api->config(dev, callback);
   277ba:	68a3      	ldr	r3, [r4, #8]
   277bc:	4909      	ldr	r1, [pc, #36]	; (277e4 <zmk_kscan_init+0x3c>)
   277be:	681b      	ldr	r3, [r3, #0]
   277c0:	4620      	mov	r0, r4
   277c2:	4798      	blx	r3
static inline int z_impl_kscan_enable_callback(const struct device *dev)
{
	const struct kscan_driver_api *api =
			(const struct kscan_driver_api *)dev->api;

	if (api->enable_callback == NULL) {
   277c4:	68a3      	ldr	r3, [r4, #8]
   277c6:	689b      	ldr	r3, [r3, #8]
   277c8:	b133      	cbz	r3, 277d8 <zmk_kscan_init+0x30>
		return -ENOSYS;
	}

	return api->enable_callback(dev);
   277ca:	4620      	mov	r0, r4
   277cc:	4798      	blx	r3

    kscan_config(dev, zmk_kscan_callback);
    kscan_enable_callback(dev);

    return 0;
   277ce:	2000      	movs	r0, #0
}
   277d0:	bd10      	pop	{r4, pc}
        return -EINVAL;
   277d2:	f06f 0015 	mvn.w	r0, #21
   277d6:	e7fb      	b.n	277d0 <zmk_kscan_init+0x28>
    return 0;
   277d8:	4618      	mov	r0, r3
   277da:	e7f9      	b.n	277d0 <zmk_kscan_init+0x28>
   277dc:	00027715 	.word	0x00027715
   277e0:	200019bc 	.word	0x200019bc
   277e4:	0002777d 	.word	0x0002777d

000277e8 <zmk_matrix_transform_row_column_to_position>:
#endif

    matrix_index = (row * ZMK_MATRIX_COLS) + column;

#ifdef ZMK_KEYMAP_TRANSFORM_NODE
    return transform[matrix_index];
   277e8:	2322      	movs	r3, #34	; 0x22
   277ea:	fb03 1100 	mla	r1, r3, r0, r1
   277ee:	3112      	adds	r1, #18
#else
    return matrix_index;
#endif /* ZMK_KEYMAP_TRANSFORM_NODE */
};
   277f0:	4b01      	ldr	r3, [pc, #4]	; (277f8 <zmk_matrix_transform_row_column_to_position+0x10>)
   277f2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   277f6:	4770      	bx	lr
   277f8:	0004982c 	.word	0x0004982c

000277fc <zmk_event_manager_handle_from>:
extern struct zmk_event_type *__event_type_end[];

extern struct zmk_event_subscription __event_subscriptions_start[];
extern struct zmk_event_subscription __event_subscriptions_end[];

int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   277fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret = 0;
    uint8_t len = __event_subscriptions_end - __event_subscriptions_start;
   27800:	4b13      	ldr	r3, [pc, #76]	; (27850 <zmk_event_manager_handle_from+0x54>)
   27802:	4e14      	ldr	r6, [pc, #80]	; (27854 <zmk_event_manager_handle_from+0x58>)
   27804:	eba3 0806 	sub.w	r8, r3, r6
int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   27808:	4607      	mov	r7, r0
    for (int i = start_index; i < len; i++) {
   2780a:	460d      	mov	r5, r1
   2780c:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
   27810:	f3c8 08c7 	ubfx	r8, r8, #3, #8
   27814:	45a8      	cmp	r8, r5
   27816:	dc04      	bgt.n	27822 <zmk_event_manager_handle_from+0x26>
        switch (ret) {
        case ZMK_EV_EVENT_BUBBLE:
            continue;
        case ZMK_EV_EVENT_HANDLED:
            LOG_DBG("Listener handled the event");
            ret = 0;
   27818:	2400      	movs	r4, #0
            goto release;
        }
    }

release:
    k_free(event);
   2781a:	4638      	mov	r0, r7
   2781c:	f021 fd53 	bl	492c6 <k_free>
    return ret;
   27820:	e013      	b.n	2784a <zmk_event_manager_handle_from+0x4e>
        if (ev_sub->event_type != event->event) {
   27822:	6832      	ldr	r2, [r6, #0]
   27824:	683b      	ldr	r3, [r7, #0]
   27826:	429a      	cmp	r2, r3
   27828:	d10a      	bne.n	27840 <zmk_event_manager_handle_from+0x44>
        ret = ev_sub->listener->callback(event);
   2782a:	6873      	ldr	r3, [r6, #4]
   2782c:	4638      	mov	r0, r7
   2782e:	681b      	ldr	r3, [r3, #0]
   27830:	4798      	blx	r3
        switch (ret) {
   27832:	2801      	cmp	r0, #1
        ret = ev_sub->listener->callback(event);
   27834:	4604      	mov	r4, r0
        switch (ret) {
   27836:	d0ef      	beq.n	27818 <zmk_event_manager_handle_from+0x1c>
   27838:	2802      	cmp	r0, #2
   2783a:	d004      	beq.n	27846 <zmk_event_manager_handle_from+0x4a>
   2783c:	2800      	cmp	r0, #0
   2783e:	d1ec      	bne.n	2781a <zmk_event_manager_handle_from+0x1e>
    for (int i = start_index; i < len; i++) {
   27840:	3501      	adds	r5, #1
   27842:	3608      	adds	r6, #8
   27844:	e7e6      	b.n	27814 <zmk_event_manager_handle_from+0x18>
            event->last_listener_index = i;
   27846:	713d      	strb	r5, [r7, #4]
            return 0;
   27848:	2400      	movs	r4, #0
}
   2784a:	4620      	mov	r0, r4
   2784c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27850:	0004b584 	.word	0x0004b584
   27854:	0004b56c 	.word	0x0004b56c

00027858 <ext_power_generic_init>:

struct settings_handler ext_power_conf = {.name = "ext_power/state",
                                          .h_set = ext_power_settings_set};
#endif

static int ext_power_generic_init(const struct device *dev) {
   27858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct ext_power_generic_data *data = dev->data;
    const struct ext_power_generic_config *config = dev->config;
   2785a:	6846      	ldr	r6, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   2785c:	6907      	ldr	r7, [r0, #16]
static int ext_power_generic_init(const struct device *dev) {
   2785e:	4605      	mov	r5, r0

    data->gpio = device_get_binding(config->label);
   27860:	6830      	ldr	r0, [r6, #0]
   27862:	f019 fafd 	bl	40e60 <z_impl_device_get_binding>
   27866:	6038      	str	r0, [r7, #0]
    if (data->gpio == NULL) {
   27868:	2800      	cmp	r0, #0
   2786a:	d044      	beq.n	278f6 <ext_power_generic_init+0x9e>
        LOG_ERR("Failed to get ext-power control device");
        return -EINVAL;
    }

    if (gpio_pin_configure(data->gpio, config->pin, config->flags | GPIO_OUTPUT)) {
   2786c:	7973      	ldrb	r3, [r6, #5]
   2786e:	7931      	ldrb	r1, [r6, #4]
   27870:	f443 7200 	orr.w	r2, r3, #512	; 0x200
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   27874:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   27878:	f8d0 e008 	ldr.w	lr, [r0, #8]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2787c:	f013 0f01 	tst.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   27880:	f04f 0401 	mov.w	r4, #1
   27884:	f8dc 3000 	ldr.w	r3, [ip]
   27888:	fa04 f401 	lsl.w	r4, r4, r1
   2788c:	bf14      	ite	ne
   2788e:	4323      	orrne	r3, r4
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   27890:	43a3      	biceq	r3, r4
   27892:	f8cc 3000 	str.w	r3, [ip]
	}

	return api->pin_configure(port, pin, flags);
   27896:	f8de 3000 	ldr.w	r3, [lr]
   2789a:	4798      	blx	r3
   2789c:	bb70      	cbnz	r0, 278fc <ext_power_generic_init+0xa4>
        LOG_ERR("Failed to configure ext-power control pin");
        return -EIO;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   2789e:	f002 f873 	bl	29988 <settings_subsys_init>

    int err = settings_register(&ext_power_conf);
   278a2:	4818      	ldr	r0, [pc, #96]	; (27904 <ext_power_generic_init+0xac>)
   278a4:	f001 ffae 	bl	29804 <settings_register>
    if (err) {
   278a8:	4604      	mov	r4, r0
   278aa:	bb10      	cbnz	r0, 278f2 <ext_power_generic_init+0x9a>
        LOG_ERR("Failed to register the ext_power settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&ext_power_save_work, ext_power_save_state_work);
   278ac:	4916      	ldr	r1, [pc, #88]	; (27908 <ext_power_generic_init+0xb0>)
   278ae:	4817      	ldr	r0, [pc, #92]	; (2790c <ext_power_generic_init+0xb4>)
   278b0:	f021 f9bc 	bl	48c2c <k_work_init_delayable>

    // Set default value (on) if settings isn't set
    settings_load_subtree("ext_power");
   278b4:	4816      	ldr	r0, [pc, #88]	; (27910 <ext_power_generic_init+0xb8>)
   278b6:	f001 ff4f 	bl	29758 <settings_load_subtree>
    if (!data->settings_init) {
   278ba:	797b      	ldrb	r3, [r7, #5]
   278bc:	b95b      	cbnz	r3, 278d6 <ext_power_generic_init+0x7e>

        data->status = true;
   278be:	2301      	movs	r3, #1
   278c0:	713b      	strb	r3, [r7, #4]
        k_work_schedule(&ext_power_save_work, K_NO_WAIT);
   278c2:	2200      	movs	r2, #0
   278c4:	2300      	movs	r3, #0
   278c6:	4811      	ldr	r0, [pc, #68]	; (2790c <ext_power_generic_init+0xb4>)
   278c8:	f01a f870 	bl	419ac <k_work_schedule>
__syscall int ext_power_enable(const struct device *dev);

static inline int z_impl_ext_power_enable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->enable == NULL) {
   278cc:	68ab      	ldr	r3, [r5, #8]
   278ce:	681b      	ldr	r3, [r3, #0]
   278d0:	b10b      	cbz	r3, 278d6 <ext_power_generic_init+0x7e>
        return -ENOTSUP;
    }

    return api->enable(dev);
   278d2:	4628      	mov	r0, r5
   278d4:	4798      	blx	r3
#else
    // Default to the ext_power being open when no settings
    ext_power_enable(dev);
#endif

    if (config->init_delay_ms) {
   278d6:	88f1      	ldrh	r1, [r6, #6]
   278d8:	b159      	cbz	r1, 278f2 <ext_power_generic_init+0x9a>
   278da:	f240 30e7 	movw	r0, #999	; 0x3e7
   278de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   278e2:	2300      	movs	r3, #0
   278e4:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   278e8:	2100      	movs	r1, #0
   278ea:	f7fe fc09 	bl	26100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   278ee:	f01a fb61 	bl	41fb4 <z_impl_k_sleep>
        k_msleep(config->init_delay_ms);
    }

    return 0;
}
   278f2:	4620      	mov	r0, r4
   278f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -EINVAL;
   278f6:	f06f 0415 	mvn.w	r4, #21
   278fa:	e7fa      	b.n	278f2 <ext_power_generic_init+0x9a>
        return -EIO;
   278fc:	f06f 0404 	mvn.w	r4, #4
   27900:	e7f7      	b.n	278f2 <ext_power_generic_init+0x9a>
   27902:	bf00      	nop
   27904:	20000270 	.word	0x20000270
   27908:	00027915 	.word	0x00027915
   2790c:	20000da8 	.word	0x20000da8
   27910:	0004af34 	.word	0x0004af34

00027914 <ext_power_save_state_work>:
static void ext_power_save_state_work(struct k_work *work) {
   27914:	b530      	push	{r4, r5, lr}
   27916:	b08b      	sub	sp, #44	; 0x2c
   27918:	4c08      	ldr	r4, [pc, #32]	; (2793c <ext_power_save_state_work+0x28>)
   2791a:	4620      	mov	r0, r4
   2791c:	f019 faa0 	bl	40e60 <z_impl_device_get_binding>
    struct ext_power_generic_data *data = ext_power->data;
   27920:	6905      	ldr	r5, [r0, #16]
    snprintf(setting_path, 40, "ext_power/state/%s", DT_INST_LABEL(0));
   27922:	4a07      	ldr	r2, [pc, #28]	; (27940 <ext_power_save_state_work+0x2c>)
   27924:	4623      	mov	r3, r4
   27926:	2128      	movs	r1, #40	; 0x28
   27928:	4668      	mov	r0, sp
   2792a:	f002 fe6b 	bl	2a604 <snprintf>
    settings_save_one(setting_path, &data->status, sizeof(data->status));
   2792e:	2201      	movs	r2, #1
   27930:	1d29      	adds	r1, r5, #4
   27932:	4668      	mov	r0, sp
   27934:	f001 fed6 	bl	296e4 <settings_save_one>
}
   27938:	b00b      	add	sp, #44	; 0x2c
   2793a:	bd30      	pop	{r4, r5, pc}
   2793c:	0004af3e 	.word	0x0004af3e
   27940:	0004af48 	.word	0x0004af48

00027944 <ext_power_save_state>:
int ext_power_save_state() {
   27944:	b508      	push	{r3, lr}
    int ret = k_work_reschedule(&ext_power_save_work, K_MSEC(CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE));
   27946:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   2794a:	2300      	movs	r3, #0
   2794c:	4802      	ldr	r0, [pc, #8]	; (27958 <ext_power_save_state+0x14>)
   2794e:	f01a f861 	bl	41a14 <k_work_reschedule>
}
   27952:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   27956:	bd08      	pop	{r3, pc}
   27958:	20000da8 	.word	0x20000da8

0002795c <ext_power_settings_set>:
                                  void *cb_arg) {
   2795c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   27960:	460c      	mov	r4, r1
   27962:	4616      	mov	r6, r2
    if (settings_name_steq(name, DT_INST_LABEL(0), &next) && !next) {
   27964:	4913      	ldr	r1, [pc, #76]	; (279b4 <ext_power_settings_set+0x58>)
   27966:	aa01      	add	r2, sp, #4
                                  void *cb_arg) {
   27968:	461f      	mov	r7, r3
    if (settings_name_steq(name, DT_INST_LABEL(0), &next) && !next) {
   2796a:	f01b ff5b 	bl	43824 <settings_name_steq>
   2796e:	b1d8      	cbz	r0, 279a8 <ext_power_settings_set+0x4c>
   27970:	f8dd 8004 	ldr.w	r8, [sp, #4]
   27974:	f1b8 0f00 	cmp.w	r8, #0
   27978:	d116      	bne.n	279a8 <ext_power_settings_set+0x4c>
        if (len != sizeof(data->status)) {
   2797a:	2c01      	cmp	r4, #1
   2797c:	d117      	bne.n	279ae <ext_power_settings_set+0x52>
        rc = read_cb(cb_arg, &data->status, sizeof(data->status));
   2797e:	4d0e      	ldr	r5, [pc, #56]	; (279b8 <ext_power_settings_set+0x5c>)
   27980:	4622      	mov	r2, r4
   27982:	1d29      	adds	r1, r5, #4
   27984:	4638      	mov	r0, r7
   27986:	47b0      	blx	r6
        if (rc >= 0) {
   27988:	2800      	cmp	r0, #0
   2798a:	db06      	blt.n	2799a <ext_power_settings_set+0x3e>
            data->settings_init = true;
   2798c:	716c      	strb	r4, [r5, #5]
            if (data->status) {
   2798e:	792c      	ldrb	r4, [r5, #4]
                ext_power_generic_enable(ext_power);
   27990:	480a      	ldr	r0, [pc, #40]	; (279bc <ext_power_settings_set+0x60>)
            if (data->status) {
   27992:	b12c      	cbz	r4, 279a0 <ext_power_settings_set+0x44>
                ext_power_generic_enable(ext_power);
   27994:	f01a ffab 	bl	428ee <ext_power_generic_enable>
   27998:	4640      	mov	r0, r8
}
   2799a:	b002      	add	sp, #8
   2799c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ext_power_generic_disable(ext_power);
   279a0:	f01a ffb7 	bl	42912 <ext_power_generic_disable>
   279a4:	4620      	mov	r0, r4
   279a6:	e7f8      	b.n	2799a <ext_power_settings_set+0x3e>
    return -ENOENT;
   279a8:	f06f 0001 	mvn.w	r0, #1
   279ac:	e7f5      	b.n	2799a <ext_power_settings_set+0x3e>
            return -EINVAL;
   279ae:	f06f 0015 	mvn.w	r0, #21
   279b2:	e7f2      	b.n	2799a <ext_power_settings_set+0x3e>
   279b4:	0004af3e 	.word	0x0004af3e
   279b8:	200019cc 	.word	0x200019cc
   279bc:	0004944c 	.word	0x0004944c

000279c0 <new_zmk_activity_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/activity_state_changed.h>

   279c0:	b510      	push	{r4, lr}
   279c2:	4604      	mov	r4, r0
   279c4:	200c      	movs	r0, #12
   279c6:	f021 fc85 	bl	492d4 <k_malloc>
   279ca:	4a02      	ldr	r2, [pc, #8]	; (279d4 <new_zmk_activity_state_changed+0x14>)
   279cc:	6002      	str	r2, [r0, #0]
   279ce:	7204      	strb	r4, [r0, #8]
   279d0:	bd10      	pop	{r4, pc}
   279d2:	bf00      	nop
   279d4:	000498d0 	.word	0x000498d0

000279d8 <new_zmk_position_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/position_state_changed.h>

   279d8:	b084      	sub	sp, #16
   279da:	b570      	push	{r4, r5, r6, lr}
   279dc:	ac04      	add	r4, sp, #16
   279de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   279e2:	2020      	movs	r0, #32
   279e4:	f021 fc76 	bl	492d4 <k_malloc>
   279e8:	4604      	mov	r4, r0
   279ea:	4b08      	ldr	r3, [pc, #32]	; (27a0c <new_zmk_position_state_changed+0x34>)
   279ec:	f844 3b08 	str.w	r3, [r4], #8
   279f0:	ad04      	add	r5, sp, #16
   279f2:	4606      	mov	r6, r0
   279f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   279f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   279f8:	e895 0003 	ldmia.w	r5, {r0, r1}
   279fc:	e884 0003 	stmia.w	r4, {r0, r1}
   27a00:	4630      	mov	r0, r6
   27a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27a06:	b004      	add	sp, #16
   27a08:	4770      	bx	lr
   27a0a:	bf00      	nop
   27a0c:	000498d4 	.word	0x000498d4

00027a10 <as_zmk_position_state_changed>:
   27a10:	6802      	ldr	r2, [r0, #0]
   27a12:	4b03      	ldr	r3, [pc, #12]	; (27a20 <as_zmk_position_state_changed+0x10>)
   27a14:	429a      	cmp	r2, r3
   27a16:	bf0c      	ite	eq
   27a18:	3008      	addeq	r0, #8
   27a1a:	2000      	movne	r0, #0
   27a1c:	4770      	bx	lr
   27a1e:	bf00      	nop
   27a20:	000498d4 	.word	0x000498d4

00027a24 <new_zmk_usb_conn_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/usb_conn_state_changed.h>

   27a24:	b510      	push	{r4, lr}
   27a26:	4604      	mov	r4, r0
   27a28:	200c      	movs	r0, #12
   27a2a:	f021 fc53 	bl	492d4 <k_malloc>
   27a2e:	4a02      	ldr	r2, [pc, #8]	; (27a38 <new_zmk_usb_conn_state_changed+0x14>)
   27a30:	6002      	str	r2, [r0, #0]
   27a32:	7204      	strb	r4, [r0, #8]
   27a34:	bd10      	pop	{r4, pc}
   27a36:	bf00      	nop
   27a38:	000498dc 	.word	0x000498dc

00027a3c <on_keymap_binding_pressed>:

    return 0;
}

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   27a3c:	b082      	sub	sp, #8
   27a3e:	b538      	push	{r3, r4, r5, lr}
   27a40:	a904      	add	r1, sp, #16
   27a42:	e881 000c 	stmia.w	r1, {r2, r3}
   27a46:	4605      	mov	r5, r0
   27a48:	4811      	ldr	r0, [pc, #68]	; (27a90 <on_keymap_binding_pressed+0x54>)
   27a4a:	f019 fa09 	bl	40e60 <z_impl_device_get_binding>
   27a4e:	4604      	mov	r4, r0
    const struct device *ext_power = device_get_binding("EXT_POWER");
    if (ext_power == NULL) {
   27a50:	b1a0      	cbz	r0, 27a7c <on_keymap_binding_pressed+0x40>
        LOG_ERR("Unable to retrieve ext_power device: %d", binding->param1);
        return -EIO;
    }

    switch (binding->param1) {
   27a52:	686b      	ldr	r3, [r5, #4]
   27a54:	2b01      	cmp	r3, #1
   27a56:	d00c      	beq.n	27a72 <on_keymap_binding_pressed+0x36>
   27a58:	2b02      	cmp	r3, #2
   27a5a:	d005      	beq.n	27a68 <on_keymap_binding_pressed+0x2c>
   27a5c:	b9a3      	cbnz	r3, 27a88 <on_keymap_binding_pressed+0x4c>
    default:
        LOG_ERR("Unknown ext_power command: %d", binding->param1);
    }

    return -ENOTSUP;
}
   27a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27a62:	b002      	add	sp, #8
            return ext_power_disable(ext_power);
   27a64:	f01a bf7b 	b.w	4295e <ext_power_disable>
        if (ext_power_get(ext_power) > 0)
   27a68:	f01a ff80 	bl	4296c <ext_power_get>
   27a6c:	2800      	cmp	r0, #0
            return ext_power_disable(ext_power);
   27a6e:	4620      	mov	r0, r4
        if (ext_power_get(ext_power) > 0)
   27a70:	dcf5      	bgt.n	27a5e <on_keymap_binding_pressed+0x22>
}
   27a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27a76:	b002      	add	sp, #8
            return ext_power_enable(ext_power);
   27a78:	f01a bf6a 	b.w	42950 <ext_power_enable>
        return -EIO;
   27a7c:	f06f 0004 	mvn.w	r0, #4
}
   27a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27a84:	b002      	add	sp, #8
   27a86:	4770      	bx	lr
    switch (binding->param1) {
   27a88:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27a8c:	e7f8      	b.n	27a80 <on_keymap_binding_pressed+0x44>
   27a8e:	bf00      	nop
   27a90:	0004af3e 	.word	0x0004af3e

00027a94 <on_keymap_binding_convert_central_state_dependent_params>:
                                                         struct zmk_behavior_binding_event event) {
   27a94:	b082      	sub	sp, #8
   27a96:	b510      	push	{r4, lr}
   27a98:	a902      	add	r1, sp, #8
   27a9a:	e881 000c 	stmia.w	r1, {r2, r3}
   27a9e:	4604      	mov	r4, r0
   27aa0:	480a      	ldr	r0, [pc, #40]	; (27acc <on_keymap_binding_convert_central_state_dependent_params+0x38>)
   27aa2:	f019 f9dd 	bl	40e60 <z_impl_device_get_binding>
    if (ext_power == NULL) {
   27aa6:	b158      	cbz	r0, 27ac0 <on_keymap_binding_convert_central_state_dependent_params+0x2c>
    if (binding->param1 == EXT_POWER_TOGGLE_CMD) {
   27aa8:	6863      	ldr	r3, [r4, #4]
   27aaa:	2b02      	cmp	r3, #2
   27aac:	d106      	bne.n	27abc <on_keymap_binding_convert_central_state_dependent_params+0x28>
        binding->param1 = ext_power_get(ext_power) > 0 ? EXT_POWER_OFF_CMD : EXT_POWER_ON_CMD;
   27aae:	f01a ff5d 	bl	4296c <ext_power_get>
   27ab2:	2800      	cmp	r0, #0
   27ab4:	bfcc      	ite	gt
   27ab6:	2000      	movgt	r0, #0
   27ab8:	2001      	movle	r0, #1
   27aba:	6060      	str	r0, [r4, #4]
    return 0;
   27abc:	2000      	movs	r0, #0
   27abe:	e001      	b.n	27ac4 <on_keymap_binding_convert_central_state_dependent_params+0x30>
        return -EIO;
   27ac0:	f06f 0004 	mvn.w	r0, #4
}
   27ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27ac8:	b002      	add	sp, #8
   27aca:	4770      	bx	lr
   27acc:	0004af3e 	.word	0x0004af3e

00027ad0 <new_zmk_battery_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/battery_state_changed.h>

   27ad0:	b510      	push	{r4, lr}
   27ad2:	4604      	mov	r4, r0
   27ad4:	200c      	movs	r0, #12
   27ad6:	f021 fbfd 	bl	492d4 <k_malloc>
   27ada:	4a02      	ldr	r2, [pc, #8]	; (27ae4 <new_zmk_battery_state_changed+0x14>)
   27adc:	6002      	str	r2, [r0, #0]
   27ade:	7204      	strb	r4, [r0, #8]
   27ae0:	bd10      	pop	{r4, pc}
   27ae2:	bf00      	nop
   27ae4:	00049910 	.word	0x00049910

00027ae8 <zmk_battery_timer>:
    }
}

K_WORK_DEFINE(battery_work, zmk_battery_work);

static void zmk_battery_timer(struct k_timer *timer) { k_work_submit(&battery_work); }
   27ae8:	4801      	ldr	r0, [pc, #4]	; (27af0 <zmk_battery_timer+0x8>)
   27aea:	f019 bef7 	b.w	418dc <k_work_submit>
   27aee:	bf00      	nop
   27af0:	20000288 	.word	0x20000288

00027af4 <zmk_battery_update.constprop.0>:
static int zmk_battery_update(const struct device *battery) {
   27af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   27af6:	4c0f      	ldr	r4, [pc, #60]	; (27b34 <zmk_battery_update.constprop.0+0x40>)
   27af8:	68a5      	ldr	r5, [r4, #8]
   27afa:	212c      	movs	r1, #44	; 0x2c
   27afc:	68eb      	ldr	r3, [r5, #12]
   27afe:	4620      	mov	r0, r4
   27b00:	4798      	blx	r3
    if (rc != 0) {
   27b02:	b9a0      	cbnz	r0, 27b2e <zmk_battery_update.constprop.0+0x3a>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   27b04:	212c      	movs	r1, #44	; 0x2c
   27b06:	692b      	ldr	r3, [r5, #16]
   27b08:	466a      	mov	r2, sp
   27b0a:	4620      	mov	r0, r4
   27b0c:	4798      	blx	r3
    if (rc != 0) {
   27b0e:	b970      	cbnz	r0, 27b2e <zmk_battery_update.constprop.0+0x3a>
    if (last_state_of_charge != state_of_charge.val1) {
   27b10:	4c09      	ldr	r4, [pc, #36]	; (27b38 <zmk_battery_update.constprop.0+0x44>)
   27b12:	9b00      	ldr	r3, [sp, #0]
   27b14:	7822      	ldrb	r2, [r4, #0]
   27b16:	429a      	cmp	r2, r3
   27b18:	d009      	beq.n	27b2e <zmk_battery_update.constprop.0+0x3a>
        last_state_of_charge = state_of_charge.val1;
   27b1a:	b2d8      	uxtb	r0, r3
   27b1c:	7020      	strb	r0, [r4, #0]
        rc = bt_bas_set_battery_level(last_state_of_charge);
   27b1e:	f000 fced 	bl	284fc <bt_bas_set_battery_level>
        if (rc != 0) {
   27b22:	b920      	cbnz	r0, 27b2e <zmk_battery_update.constprop.0+0x3a>
        rc = ZMK_EVENT_RAISE(new_zmk_battery_state_changed(
   27b24:	7820      	ldrb	r0, [r4, #0]
   27b26:	f7ff ffd3 	bl	27ad0 <new_zmk_battery_state_changed>
   27b2a:	f01a feca 	bl	428c2 <zmk_event_manager_raise>
}
   27b2e:	b003      	add	sp, #12
   27b30:	bd30      	pop	{r4, r5, pc}
   27b32:	bf00      	nop
   27b34:	00049464 	.word	0x00049464
   27b38:	20003b8d 	.word	0x20003b8d

00027b3c <zmk_battery_init>:

K_TIMER_DEFINE(battery_timer, zmk_battery_timer, NULL);

static int zmk_battery_init(const struct device *_arg) {
   27b3c:	b513      	push	{r0, r1, r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   27b3e:	480b      	ldr	r0, [pc, #44]	; (27b6c <zmk_battery_init+0x30>)
   27b40:	f020 fe1f 	bl	48782 <z_device_is_ready>
    }

    LOG_WRN("Finding battery device labeled BATTERY is deprecated. Use zmk,battery chosen node.");
#endif

    if (!device_is_ready(battery)) {
   27b44:	b170      	cbz	r0, 27b64 <zmk_battery_init+0x28>
        LOG_ERR("Battery device \"%s\" is not ready", battery->name);
        return -ENODEV;
    }

    int rc = zmk_battery_update(battery);
   27b46:	f7ff ffd5 	bl	27af4 <zmk_battery_update.constprop.0>

    if (rc != 0) {
   27b4a:	4604      	mov	r4, r0
   27b4c:	b938      	cbnz	r0, 27b5e <zmk_battery_init+0x22>
        LOG_DBG("Failed to update battery value: %d.", rc);
        return rc;
    }

    k_timer_start(&battery_timer, K_MINUTES(1), K_SECONDS(CONFIG_ZMK_BATTERY_REPORT_INTERVAL));
   27b4e:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   27b52:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   27b54:	4806      	ldr	r0, [pc, #24]	; (27b70 <zmk_battery_init+0x34>)
   27b56:	e9cd 2300 	strd	r2, r3, [sp]
   27b5a:	f01a fc57 	bl	4240c <z_impl_k_timer_start>

    return 0;
}
   27b5e:	4620      	mov	r0, r4
   27b60:	b002      	add	sp, #8
   27b62:	bd10      	pop	{r4, pc}
        return -ENODEV;
   27b64:	f06f 0412 	mvn.w	r4, #18
   27b68:	e7f9      	b.n	27b5e <zmk_battery_init+0x22>
   27b6a:	bf00      	nop
   27b6c:	00049464 	.word	0x00049464
   27b70:	20000a68 	.word	0x20000a68

00027b74 <new_zmk_split_peripheral_status_changed>:
 */

#include <kernel.h>
#include <zmk/events/split_peripheral_status_changed.h>

   27b74:	b510      	push	{r4, lr}
   27b76:	4604      	mov	r4, r0
   27b78:	200c      	movs	r0, #12
   27b7a:	f021 fbab 	bl	492d4 <k_malloc>
   27b7e:	4a02      	ldr	r2, [pc, #8]	; (27b88 <new_zmk_split_peripheral_status_changed+0x14>)
   27b80:	6002      	str	r2, [r0, #0]
   27b82:	7204      	strb	r4, [r0, #8]
   27b84:	bd10      	pop	{r4, pc}
   27b86:	bf00      	nop
   27b88:	00049914 	.word	0x00049914

00027b8c <split_svc_pos_state>:
static uint8_t position_state[POS_STATE_LEN];

static struct zmk_split_run_behavior_payload behavior_run_payload;

static ssize_t split_svc_pos_state(struct bt_conn *conn, const struct bt_gatt_attr *attrs,
                                   void *buf, uint16_t len, uint16_t offset) {
   27b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attrs, buf, len, offset, &position_state,
   27b8e:	2410      	movs	r4, #16
   27b90:	9402      	str	r4, [sp, #8]
   27b92:	4c04      	ldr	r4, [pc, #16]	; (27ba4 <split_svc_pos_state+0x18>)
   27b94:	9401      	str	r4, [sp, #4]
   27b96:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   27b9a:	9400      	str	r4, [sp, #0]
   27b9c:	f01f fa87 	bl	470ae <bt_gatt_attr_read>
                             sizeof(position_state));
}
   27ba0:	b004      	add	sp, #16
   27ba2:	bd10      	pop	{r4, pc}
   27ba4:	20003ba1 	.word	0x20003ba1

00027ba8 <service_init>:
int zmk_split_bt_position_released(uint8_t position) {
    WRITE_BIT(position_state[position / 8], position % 8, false);
    return send_position_state();
}

int service_init(const struct device *_arg) {
   27ba8:	b507      	push	{r0, r1, r2, lr}
    static const struct k_work_queue_config queue_config = {
        .name = "Split Peripheral Notification Queue"};
    k_work_queue_start(&service_work_q, service_q_stack, K_THREAD_STACK_SIZEOF(service_q_stack),
   27baa:	4b06      	ldr	r3, [pc, #24]	; (27bc4 <service_init+0x1c>)
   27bac:	9300      	str	r3, [sp, #0]
   27bae:	4906      	ldr	r1, [pc, #24]	; (27bc8 <service_init+0x20>)
   27bb0:	4806      	ldr	r0, [pc, #24]	; (27bcc <service_init+0x24>)
   27bb2:	2305      	movs	r3, #5
   27bb4:	f44f 7224 	mov.w	r2, #656	; 0x290
   27bb8:	f019 fe96 	bl	418e8 <k_work_queue_start>
                       CONFIG_ZMK_SPLIT_BLE_PERIPHERAL_PRIORITY, &queue_config);

    return 0;
}
   27bbc:	2000      	movs	r0, #0
   27bbe:	b003      	add	sp, #12
   27bc0:	f85d fb04 	ldr.w	pc, [sp], #4
   27bc4:	000499a8 	.word	0x000499a8
   27bc8:	20003c88 	.word	0x20003c88
   27bcc:	20000dd8 	.word	0x20000dd8

00027bd0 <send_position_state_callback>:
void send_position_state_callback(struct k_work *work) {
   27bd0:	b570      	push	{r4, r5, r6, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   27bd2:	4d0f      	ldr	r5, [pc, #60]	; (27c10 <send_position_state_callback+0x40>)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));

	params.attr = attr;
   27bd4:	4e0f      	ldr	r6, [pc, #60]	; (27c14 <send_position_state_callback+0x44>)
   27bd6:	b08a      	sub	sp, #40	; 0x28
   27bd8:	2200      	movs	r2, #0
   27bda:	2300      	movs	r3, #0
   27bdc:	4669      	mov	r1, sp
   27bde:	4628      	mov	r0, r5
   27be0:	f019 fbbe 	bl	41360 <z_impl_k_msgq_get>
    while (k_msgq_get(&position_state_msgq, &state, K_NO_WAIT) == 0) {
   27be4:	4604      	mov	r4, r0
   27be6:	b108      	cbz	r0, 27bec <send_position_state_callback+0x1c>
};
   27be8:	b00a      	add	sp, #40	; 0x28
   27bea:	bd70      	pop	{r4, r5, r6, pc}
	memset(&params, 0, sizeof(params));
   27bec:	4621      	mov	r1, r4
   27bee:	2218      	movs	r2, #24
   27bf0:	a804      	add	r0, sp, #16
   27bf2:	f01d f911 	bl	44e18 <memset>
	params.data = data;
	params.len = len;
   27bf6:	2310      	movs	r3, #16

	return bt_gatt_notify_cb(conn, &params);
   27bf8:	eb0d 0103 	add.w	r1, sp, r3
   27bfc:	4620      	mov	r0, r4
	params.attr = attr;
   27bfe:	9605      	str	r6, [sp, #20]
	params.data = data;
   27c00:	f8cd d018 	str.w	sp, [sp, #24]
	params.len = len;
   27c04:	f8ad 301c 	strh.w	r3, [sp, #28]
	return bt_gatt_notify_cb(conn, &params);
   27c08:	f006 fbdc 	bl	2e3c4 <bt_gatt_notify_cb>
   27c0c:	e7e4      	b.n	27bd8 <send_position_state_callback+0x8>
   27c0e:	bf00      	nop
   27c10:	20000b4c 	.word	0x20000b4c
   27c14:	00049930 	.word	0x00049930

00027c18 <send_position_state>:
int send_position_state() {
   27c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return z_impl_k_msgq_put(msgq, data, timeout);
   27c1a:	490e      	ldr	r1, [pc, #56]	; (27c54 <send_position_state+0x3c>)
   27c1c:	480e      	ldr	r0, [pc, #56]	; (27c58 <send_position_state+0x40>)
   27c1e:	f640 42cd 	movw	r2, #3277	; 0xccd
   27c22:	2300      	movs	r3, #0
   27c24:	f019 fb46 	bl	412b4 <z_impl_k_msgq_put>
    if (err) {
   27c28:	4604      	mov	r4, r0
   27c2a:	b170      	cbz	r0, 27c4a <send_position_state+0x32>
        switch (err) {
   27c2c:	f110 0f0b 	cmn.w	r0, #11
   27c30:	d108      	bne.n	27c44 <send_position_state+0x2c>
	return z_impl_k_msgq_get(msgq, data, timeout);
   27c32:	2200      	movs	r2, #0
   27c34:	2300      	movs	r3, #0
   27c36:	4669      	mov	r1, sp
   27c38:	4807      	ldr	r0, [pc, #28]	; (27c58 <send_position_state+0x40>)
   27c3a:	f019 fb91 	bl	41360 <z_impl_k_msgq_get>
            return send_position_state();
   27c3e:	f7ff ffeb 	bl	27c18 <send_position_state>
   27c42:	4604      	mov	r4, r0
}
   27c44:	4620      	mov	r0, r4
   27c46:	b004      	add	sp, #16
   27c48:	bd10      	pop	{r4, pc}
    k_work_submit_to_queue(&service_work_q, &service_position_notify_work);
   27c4a:	4904      	ldr	r1, [pc, #16]	; (27c5c <send_position_state+0x44>)
   27c4c:	4804      	ldr	r0, [pc, #16]	; (27c60 <send_position_state+0x48>)
   27c4e:	f020 ffd0 	bl	48bf2 <k_work_submit_to_queue>
    return 0;
   27c52:	e7f7      	b.n	27c44 <send_position_state+0x2c>
   27c54:	20003ba1 	.word	0x20003ba1
   27c58:	20000b4c 	.word	0x20000b4c
   27c5c:	200002c0 	.word	0x200002c0
   27c60:	20000dd8 	.word	0x20000dd8

00027c64 <zmk_split_bt_position_pressed>:
    WRITE_BIT(position_state[position / 8], position % 8, true);
   27c64:	08c2      	lsrs	r2, r0, #3
   27c66:	4905      	ldr	r1, [pc, #20]	; (27c7c <zmk_split_bt_position_pressed+0x18>)
   27c68:	f000 0007 	and.w	r0, r0, #7
   27c6c:	2301      	movs	r3, #1
   27c6e:	4083      	lsls	r3, r0
   27c70:	5c88      	ldrb	r0, [r1, r2]
   27c72:	4303      	orrs	r3, r0
   27c74:	548b      	strb	r3, [r1, r2]
    return send_position_state();
   27c76:	f7ff bfcf 	b.w	27c18 <send_position_state>
   27c7a:	bf00      	nop
   27c7c:	20003ba1 	.word	0x20003ba1

00027c80 <zmk_split_bt_position_released>:
    WRITE_BIT(position_state[position / 8], position % 8, false);
   27c80:	08c1      	lsrs	r1, r0, #3
int zmk_split_bt_position_released(uint8_t position) {
   27c82:	b410      	push	{r4}
    WRITE_BIT(position_state[position / 8], position % 8, false);
   27c84:	4c05      	ldr	r4, [pc, #20]	; (27c9c <zmk_split_bt_position_released+0x1c>)
   27c86:	f000 0007 	and.w	r0, r0, #7
   27c8a:	5c63      	ldrb	r3, [r4, r1]
   27c8c:	2201      	movs	r2, #1
   27c8e:	4082      	lsls	r2, r0
   27c90:	ea23 0302 	bic.w	r3, r3, r2
   27c94:	5463      	strb	r3, [r4, r1]
}
   27c96:	bc10      	pop	{r4}
    return send_position_state();
   27c98:	f7ff bfbe 	b.w	27c18 <send_position_state>
   27c9c:	20003ba1 	.word	0x20003ba1

00027ca0 <connected>:

static int start_advertising() {
    return bt_le_adv_start(BT_LE_ADV_CONN, zmk_ble_ad, ARRAY_SIZE(zmk_ble_ad), NULL, 0);
};

static void connected(struct bt_conn *conn, uint8_t err) {
   27ca0:	b508      	push	{r3, lr}
    is_connected = (err == 0);
   27ca2:	fab1 f081 	clz	r0, r1
   27ca6:	4b04      	ldr	r3, [pc, #16]	; (27cb8 <connected+0x18>)
   27ca8:	0940      	lsrs	r0, r0, #5
   27caa:	7018      	strb	r0, [r3, #0]

    ZMK_EVENT_RAISE(new_zmk_split_peripheral_status_changed(
   27cac:	f7ff ff62 	bl	27b74 <new_zmk_split_peripheral_status_changed>
        (struct zmk_split_peripheral_status_changed){.connected = is_connected}));
}
   27cb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ZMK_EVENT_RAISE(new_zmk_split_peripheral_status_changed(
   27cb4:	f01a be05 	b.w	428c2 <zmk_event_manager_raise>
   27cb8:	20003bb1 	.word	0x20003bb1

00027cbc <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   27cbc:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   27cbe:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   27cc0:	b08a      	sub	sp, #40	; 0x28
   27cc2:	4604      	mov	r4, r0
   27cc4:	460e      	mov	r6, r1
   27cc6:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   27cc8:	2b03      	cmp	r3, #3
   27cca:	d820      	bhi.n	27d0e <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   27ccc:	e8df f003 	tbb	[pc, r3]
   27cd0:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   27cd4:	4911      	ldr	r1, [pc, #68]	; (27d1c <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   27cd6:	4628      	mov	r0, r5
   27cd8:	f01d f855 	bl	44d86 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   27cdc:	7863      	ldrb	r3, [r4, #1]
   27cde:	9304      	str	r3, [sp, #16]
   27ce0:	78a3      	ldrb	r3, [r4, #2]
   27ce2:	9303      	str	r3, [sp, #12]
   27ce4:	78e3      	ldrb	r3, [r4, #3]
   27ce6:	9302      	str	r3, [sp, #8]
   27ce8:	7923      	ldrb	r3, [r4, #4]
   27cea:	9301      	str	r3, [sp, #4]
   27cec:	7963      	ldrb	r3, [r4, #5]
   27cee:	9300      	str	r3, [sp, #0]
   27cf0:	4a0b      	ldr	r2, [pc, #44]	; (27d20 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   27cf2:	79a3      	ldrb	r3, [r4, #6]
   27cf4:	9505      	str	r5, [sp, #20]
   27cf6:	211e      	movs	r1, #30
   27cf8:	4630      	mov	r0, r6
   27cfa:	f01a ffb4 	bl	42c66 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   27cfe:	b00a      	add	sp, #40	; 0x28
   27d00:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   27d02:	4908      	ldr	r1, [pc, #32]	; (27d24 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   27d04:	e7e7      	b.n	27cd6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   27d06:	4908      	ldr	r1, [pc, #32]	; (27d28 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   27d08:	e7e5      	b.n	27cd6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   27d0a:	4908      	ldr	r1, [pc, #32]	; (27d2c <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   27d0c:	e7e3      	b.n	27cd6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   27d0e:	4a08      	ldr	r2, [pc, #32]	; (27d30 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   27d10:	210a      	movs	r1, #10
   27d12:	4628      	mov	r0, r5
   27d14:	f01a ffa7 	bl	42c66 <snprintk>
		break;
   27d18:	e7e0      	b.n	27cdc <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   27d1a:	bf00      	nop
   27d1c:	0004b04e 	.word	0x0004b04e
   27d20:	0004b077 	.word	0x0004b077
   27d24:	0004b055 	.word	0x0004b055
   27d28:	0004b05c 	.word	0x0004b05c
   27d2c:	0004b066 	.word	0x0004b066
   27d30:	0004b070 	.word	0x0004b070

00027d34 <disconnected>:

static void disconnected(struct bt_conn *conn, uint8_t reason) {
   27d34:	b500      	push	{lr}
   27d36:	b089      	sub	sp, #36	; 0x24
    char addr[BT_ADDR_LE_STR_LEN];

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   27d38:	f01e f8d0 	bl	45edc <bt_conn_get_dst>
   27d3c:	4669      	mov	r1, sp
   27d3e:	f7ff ffbd 	bl	27cbc <bt_addr_le_to_str.constprop.0.isra.0>

    LOG_DBG("Disconnected from %s (reason 0x%02x)", log_strdup(addr), reason);

    is_connected = false;
   27d42:	4b05      	ldr	r3, [pc, #20]	; (27d58 <disconnected+0x24>)
   27d44:	2000      	movs	r0, #0
   27d46:	7018      	strb	r0, [r3, #0]

    ZMK_EVENT_RAISE(new_zmk_split_peripheral_status_changed(
   27d48:	f7ff ff14 	bl	27b74 <new_zmk_split_peripheral_status_changed>
   27d4c:	f01a fdb9 	bl	428c2 <zmk_event_manager_raise>
        (struct zmk_split_peripheral_status_changed){.connected = is_connected}));
}
   27d50:	b009      	add	sp, #36	; 0x24
   27d52:	f85d fb04 	ldr.w	pc, [sp], #4
   27d56:	bf00      	nop
   27d58:	20003bb1 	.word	0x20003bb1

00027d5c <zmk_peripheral_ble_init>:
    .le_param_updated = le_param_updated,
};

bool zmk_split_bt_peripheral_is_connected() { return is_connected; }

static int zmk_peripheral_ble_init(const struct device *_arg) {
   27d5c:	b570      	push	{r4, r5, r6, lr}
    int err = bt_enable(NULL);
   27d5e:	2000      	movs	r0, #0
static int zmk_peripheral_ble_init(const struct device *_arg) {
   27d60:	b088      	sub	sp, #32
    int err = bt_enable(NULL);
   27d62:	f003 fc37 	bl	2b5d4 <bt_enable>

    if (err) {
   27d66:	4606      	mov	r6, r0
   27d68:	b9b8      	cbnz	r0, 27d9a <zmk_peripheral_ble_init+0x3e>
        LOG_ERR("BLUETOOTH FAILED (%d)", err);
        return err;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   27d6a:	f001 fe0d 	bl	29988 <settings_subsys_init>

    settings_load_subtree("ble");
   27d6e:	480c      	ldr	r0, [pc, #48]	; (27da0 <zmk_peripheral_ble_init+0x44>)
    return bt_le_adv_start(BT_LE_ADV_CONN, zmk_ble_ad, ARRAY_SIZE(zmk_ble_ad), NULL, 0);
   27d70:	4d0c      	ldr	r5, [pc, #48]	; (27da4 <zmk_peripheral_ble_init+0x48>)
    settings_load_subtree("ble");
   27d72:	f001 fcf1 	bl	29758 <settings_load_subtree>
    settings_load_subtree("bt");
   27d76:	480c      	ldr	r0, [pc, #48]	; (27da8 <zmk_peripheral_ble_init+0x4c>)
   27d78:	f001 fcee 	bl	29758 <settings_load_subtree>
    LOG_WRN("Clearing all existing BLE bond information from the keyboard");

    bt_unpair(BT_ID_DEFAULT, NULL);
#endif

    bt_conn_cb_register(&conn_callbacks);
   27d7c:	480b      	ldr	r0, [pc, #44]	; (27dac <zmk_peripheral_ble_init+0x50>)
   27d7e:	f004 fe27 	bl	2c9d0 <bt_conn_cb_register>
    return bt_le_adv_start(BT_LE_ADV_CONN, zmk_ble_ad, ARRAY_SIZE(zmk_ble_ad), NULL, 0);
   27d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27d84:	ac03      	add	r4, sp, #12
   27d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   27d88:	682b      	ldr	r3, [r5, #0]
   27d8a:	6023      	str	r3, [r4, #0]
   27d8c:	4908      	ldr	r1, [pc, #32]	; (27db0 <zmk_peripheral_ble_init+0x54>)
   27d8e:	9600      	str	r6, [sp, #0]
   27d90:	4633      	mov	r3, r6
   27d92:	2203      	movs	r2, #3
   27d94:	a803      	add	r0, sp, #12
   27d96:	f004 f92b 	bl	2bff0 <bt_le_adv_start>

    start_advertising();

    return 0;
}
   27d9a:	4630      	mov	r0, r6
   27d9c:	b008      	add	sp, #32
   27d9e:	bd70      	pop	{r4, r5, r6, pc}
   27da0:	0004b09a 	.word	0x0004b09a
   27da4:	00049780 	.word	0x00049780
   27da8:	0004b09e 	.word	0x0004b09e
   27dac:	200002d0 	.word	0x200002d0
   27db0:	000499b0 	.word	0x000499b0

00027db4 <usb_status_cb>:
        return ZMK_USB_CONN_POWERED;
    }
}

void usb_status_cb(enum usb_dc_status_code status, const uint8_t *params) {
    usb_status = status;
   27db4:	4b02      	ldr	r3, [pc, #8]	; (27dc0 <usb_status_cb+0xc>)
   27db6:	7018      	strb	r0, [r3, #0]
    k_work_submit(&usb_status_notifier_work);
   27db8:	4802      	ldr	r0, [pc, #8]	; (27dc4 <usb_status_cb+0x10>)
   27dba:	f019 bd8f 	b.w	418dc <k_work_submit>
   27dbe:	bf00      	nop
   27dc0:	200009f1 	.word	0x200009f1
   27dc4:	200002f0 	.word	0x200002f0

00027dc8 <zmk_usb_init>:
};

static int zmk_usb_init(const struct device *_arg) {
   27dc8:	b508      	push	{r3, lr}
    int usb_enable_ret;

    usb_enable_ret = usb_enable(usb_status_cb);
   27dca:	4804      	ldr	r0, [pc, #16]	; (27ddc <zmk_usb_init+0x14>)
   27dcc:	f001 f9a4 	bl	29118 <usb_enable>

    if (usb_enable_ret != 0) {
        LOG_ERR("Unable to enable USB");
        return -EINVAL;
   27dd0:	2800      	cmp	r0, #0
    }

    return 0;
}
   27dd2:	bf18      	it	ne
   27dd4:	f06f 0015 	mvnne.w	r0, #21
   27dd8:	bd08      	pop	{r3, pc}
   27dda:	bf00      	nop
   27ddc:	00027db5 	.word	0x00027db5

00027de0 <zmk_usb_get_conn_state>:
    switch (usb_status) {
   27de0:	4b08      	ldr	r3, [pc, #32]	; (27e04 <zmk_usb_get_conn_state+0x24>)
   27de2:	781b      	ldrb	r3, [r3, #0]
   27de4:	3b03      	subs	r3, #3
   27de6:	2b08      	cmp	r3, #8
   27de8:	d808      	bhi.n	27dfc <zmk_usb_get_conn_state+0x1c>
   27dea:	e8df f003 	tbb	[pc, r3]
   27dee:	0509      	.short	0x0509
   27df0:	07070709 	.word	0x07070709
   27df4:	0707      	.short	0x0707
   27df6:	05          	.byte	0x05
   27df7:	00          	.byte	0x00
   27df8:	2000      	movs	r0, #0
   27dfa:	4770      	bx	lr
        return ZMK_USB_CONN_POWERED;
   27dfc:	2001      	movs	r0, #1
   27dfe:	4770      	bx	lr
        return ZMK_USB_CONN_HID;
   27e00:	2002      	movs	r0, #2
}
   27e02:	4770      	bx	lr
   27e04:	200009f1 	.word	0x200009f1

00027e08 <main>:
#define ZMK_KSCAN_DEV DT_LABEL(ZMK_MATRIX_NODE_ID)

void main(void) {
    LOG_INF("Welcome to ZMK!\n");

    if (zmk_kscan_init(ZMK_KSCAN_DEV) != 0) {
   27e08:	4801      	ldr	r0, [pc, #4]	; (27e10 <main+0x8>)
   27e0a:	f7ff bccd 	b.w	277a8 <zmk_kscan_init>
   27e0e:	bf00      	nop
   27e10:	0004b0a1 	.word	0x0004b0a1

00027e14 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   27e14:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   27e16:	4c09      	ldr	r4, [pc, #36]	; (27e3c <crc8_ccitt+0x28>)
   27e18:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   27e1a:	4291      	cmp	r1, r2
   27e1c:	d100      	bne.n	27e20 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   27e1e:	bd10      	pop	{r4, pc}
		val ^= p[i];
   27e20:	f811 3b01 	ldrb.w	r3, [r1], #1
   27e24:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   27e26:	0903      	lsrs	r3, r0, #4
   27e28:	0100      	lsls	r0, r0, #4
   27e2a:	5ce3      	ldrb	r3, [r4, r3]
   27e2c:	b2c0      	uxtb	r0, r0
   27e2e:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   27e30:	0918      	lsrs	r0, r3, #4
   27e32:	011b      	lsls	r3, r3, #4
   27e34:	5c20      	ldrb	r0, [r4, r0]
   27e36:	b2db      	uxtb	r3, r3
   27e38:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   27e3a:	e7ee      	b.n	27e1a <crc8_ccitt+0x6>
   27e3c:	0004b0a7 	.word	0x0004b0a7

00027e40 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   27e40:	680b      	ldr	r3, [r1, #0]
   27e42:	3301      	adds	r3, #1
   27e44:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   27e46:	4b01      	ldr	r3, [pc, #4]	; (27e4c <char_out+0xc>)
   27e48:	681b      	ldr	r3, [r3, #0]
   27e4a:	4718      	bx	r3
   27e4c:	20000300 	.word	0x20000300

00027e50 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   27e50:	b507      	push	{r0, r1, r2, lr}
   27e52:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   27e54:	2100      	movs	r1, #0
{
   27e56:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   27e58:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   27e5a:	4803      	ldr	r0, [pc, #12]	; (27e68 <vprintk+0x18>)
   27e5c:	a901      	add	r1, sp, #4
   27e5e:	f000 f8f7 	bl	28050 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   27e62:	b003      	add	sp, #12
   27e64:	f85d fb04 	ldr.w	pc, [sp], #4
   27e68:	00027e41 	.word	0x00027e41

00027e6c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   27e6c:	b530      	push	{r4, r5, lr}
   27e6e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   27e70:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   27e74:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   27e76:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   27e78:	a901      	add	r1, sp, #4
   27e7a:	4805      	ldr	r0, [pc, #20]	; (27e90 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   27e7c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   27e7e:	f000 f8e7 	bl	28050 <cbvprintf>

	if (ctx.count < ctx.max) {
   27e82:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   27e86:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   27e88:	bfb8      	it	lt
   27e8a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   27e8c:	b005      	add	sp, #20
   27e8e:	bd30      	pop	{r4, r5, pc}
   27e90:	00042c27 	.word	0x00042c27

00027e94 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   27e94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27e98:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   27e9c:	f019 0808 	ands.w	r8, r9, #8
{
   27ea0:	4604      	mov	r4, r0
   27ea2:	4693      	mov	fp, r2
	if (processing) {
   27ea4:	d00d      	beq.n	27ec2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   27ea6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   27ea8:	bf0c      	ite	eq
   27eaa:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   27eae:	f049 0920 	orrne.w	r9, r9, #32
   27eb2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   27eb6:	f38b 8811 	msr	BASEPRI, fp
   27eba:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   27ebe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27ec2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   27ec6:	2902      	cmp	r1, #2
   27ec8:	d10d      	bne.n	27ee6 <process_event+0x52>
			evt = process_recheck(mgr);
   27eca:	4620      	mov	r0, r4
   27ecc:	f01a fef3 	bl	42cb6 <process_recheck>
		if (evt == EVT_NOP) {
   27ed0:	2800      	cmp	r0, #0
   27ed2:	d0f0      	beq.n	27eb6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   27ed4:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27ed6:	8b23      	ldrh	r3, [r4, #24]
   27ed8:	2804      	cmp	r0, #4
   27eda:	d869      	bhi.n	27fb0 <process_event+0x11c>
   27edc:	e8df f000 	tbb	[pc, r0]
   27ee0:	5a506803 	.word	0x5a506803
   27ee4:	61          	.byte	0x61
   27ee5:	00          	.byte	0x00
			res = mgr->last_res;
   27ee6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27ee8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   27eea:	2f00      	cmp	r7, #0
   27eec:	da15      	bge.n	27f1a <process_event+0x86>
		*clients = mgr->clients;
   27eee:	6825      	ldr	r5, [r4, #0]
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   27ef0:	e9c4 8800 	strd	r8, r8, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27ef4:	f021 0107 	bic.w	r1, r1, #7
   27ef8:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   27efc:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   27efe:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   27f00:	8b21      	ldrh	r1, [r4, #24]
   27f02:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   27f06:	45ca      	cmp	sl, r9
   27f08:	d002      	beq.n	27f10 <process_event+0x7c>
		if (do_monitors
   27f0a:	68a3      	ldr	r3, [r4, #8]
   27f0c:	2b00      	cmp	r3, #0
   27f0e:	d152      	bne.n	27fb6 <process_event+0x122>
		    || !sys_slist_is_empty(&clients)
   27f10:	b90d      	cbnz	r5, 27f16 <process_event+0x82>
		    || (transit != NULL)) {
   27f12:	2e00      	cmp	r6, #0
   27f14:	d069      	beq.n	27fea <process_event+0x156>
   27f16:	2300      	movs	r3, #0
   27f18:	e04e      	b.n	27fb8 <process_event+0x124>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27f1a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   27f1e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   27f20:	2a01      	cmp	r2, #1
   27f22:	d81c      	bhi.n	27f5e <process_event+0xca>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27f24:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   27f28:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   27f2a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27f2c:	b289      	uxth	r1, r1
   27f2e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   27f32:	d10a      	bne.n	27f4a <process_event+0xb6>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   27f34:	b13d      	cbz	r5, 27f46 <process_event+0xb2>
   27f36:	8b63      	ldrh	r3, [r4, #26]
   27f38:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   27f3a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   27f3c:	3301      	adds	r3, #1
   27f3e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   27f40:	2a00      	cmp	r2, #0
   27f42:	d1fa      	bne.n	27f3a <process_event+0xa6>
   27f44:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27f46:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   27f4a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   27f4c:	4620      	mov	r0, r4
   27f4e:	f01a feb2 	bl	42cb6 <process_recheck>
   27f52:	4606      	mov	r6, r0
   27f54:	2800      	cmp	r0, #0
   27f56:	d0d3      	beq.n	27f00 <process_event+0x6c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   27f58:	f041 0120 	orr.w	r1, r1, #32
   27f5c:	e7ce      	b.n	27efc <process_event+0x68>
	} else if (state == ONOFF_STATE_TO_OFF) {
   27f5e:	2b04      	cmp	r3, #4
   27f60:	d10b      	bne.n	27f7a <process_event+0xe6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27f62:	f021 0107 	bic.w	r1, r1, #7
   27f66:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   27f68:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   27f6a:	4620      	mov	r0, r4
   27f6c:	f01a fea3 	bl	42cb6 <process_recheck>
   27f70:	4605      	mov	r5, r0
   27f72:	b118      	cbz	r0, 27f7c <process_event+0xe8>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   27f74:	f041 0120 	orr.w	r1, r1, #32
   27f78:	8321      	strh	r1, [r4, #24]
   27f7a:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   27f7c:	462e      	mov	r6, r5
   27f7e:	e7bf      	b.n	27f00 <process_event+0x6c>
			transit = mgr->transitions->start;
   27f80:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27f82:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   27f86:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27f88:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   27f8c:	8323      	strh	r3, [r4, #24]
}
   27f8e:	2500      	movs	r5, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27f90:	462f      	mov	r7, r5
   27f92:	e7b5      	b.n	27f00 <process_event+0x6c>
			transit = mgr->transitions->stop;
   27f94:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27f96:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   27f9a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27f9c:	f043 0304 	orr.w	r3, r3, #4
   27fa0:	e7f4      	b.n	27f8c <process_event+0xf8>
			transit = mgr->transitions->reset;
   27fa2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27fa4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   27fa8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   27faa:	f043 0305 	orr.w	r3, r3, #5
   27fae:	e7ed      	b.n	27f8c <process_event+0xf8>
   27fb0:	2500      	movs	r5, #0
   27fb2:	462e      	mov	r6, r5
   27fb4:	e7ec      	b.n	27f90 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   27fb6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   27fb8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   27fbc:	8321      	strh	r1, [r4, #24]
   27fbe:	f38b 8811 	msr	BASEPRI, fp
   27fc2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   27fc6:	b9fb      	cbnz	r3, 28008 <process_event+0x174>
	while (!sys_slist_is_empty(list)) {
   27fc8:	bb85      	cbnz	r5, 2802c <process_event+0x198>
			if (transit != NULL) {
   27fca:	b116      	cbz	r6, 27fd2 <process_event+0x13e>
				transit(mgr, transition_complete);
   27fcc:	491f      	ldr	r1, [pc, #124]	; (2804c <process_event+0x1b8>)
   27fce:	4620      	mov	r0, r4
   27fd0:	47b0      	blx	r6
	__asm__ volatile(
   27fd2:	f04f 0320 	mov.w	r3, #32
   27fd6:	f3ef 8b11 	mrs	fp, BASEPRI
   27fda:	f383 8812 	msr	BASEPRI_MAX, r3
   27fde:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   27fe2:	8b23      	ldrh	r3, [r4, #24]
   27fe4:	f023 0308 	bic.w	r3, r3, #8
   27fe8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   27fea:	8b23      	ldrh	r3, [r4, #24]
   27fec:	06da      	lsls	r2, r3, #27
   27fee:	d525      	bpl.n	2803c <process_event+0x1a8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   27ff0:	f023 0310 	bic.w	r3, r3, #16
   27ff4:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   27ff6:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   27ff8:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   27ffc:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   28000:	2900      	cmp	r1, #0
   28002:	f47f af60 	bne.w	27ec6 <process_event+0x32>
out:
   28006:	e756      	b.n	27eb6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   28008:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2800a:	2900      	cmp	r1, #0
   2800c:	d0dc      	beq.n	27fc8 <process_event+0x134>
	return node->next;
   2800e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   28012:	f8d1 b004 	ldr.w	fp, [r1, #4]
   28016:	463b      	mov	r3, r7
   28018:	4652      	mov	r2, sl
   2801a:	4620      	mov	r0, r4
   2801c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2801e:	f1b9 0f00 	cmp.w	r9, #0
   28022:	d0d1      	beq.n	27fc8 <process_event+0x134>
   28024:	4649      	mov	r1, r9
   28026:	f8d9 9000 	ldr.w	r9, [r9]
   2802a:	e7f2      	b.n	28012 <process_event+0x17e>
   2802c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   2802e:	463b      	mov	r3, r7
   28030:	4652      	mov	r2, sl
   28032:	4620      	mov	r0, r4
   28034:	682d      	ldr	r5, [r5, #0]
   28036:	f01a fe5a 	bl	42cee <notify_one>
   2803a:	e7c5      	b.n	27fc8 <process_event+0x134>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   2803c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   28040:	bf1e      	ittt	ne
   28042:	f023 0320 	bicne.w	r3, r3, #32
   28046:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   28048:	2102      	movne	r1, #2
   2804a:	e7d5      	b.n	27ff8 <process_event+0x164>
   2804c:	00042d1b 	.word	0x00042d1b

00028050 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
   28050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28054:	b08d      	sub	sp, #52	; 0x34
   28056:	461d      	mov	r5, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
   28058:	1e53      	subs	r3, r2, #1
{
   2805a:	9001      	str	r0, [sp, #4]
   2805c:	468a      	mov	sl, r1
	fmt--;
   2805e:	9302      	str	r3, [sp, #8]
	size_t count = 0;
   28060:	f04f 0900 	mov.w	r9, #0

start:
	while (*++fmt != '%') {
   28064:	9b02      	ldr	r3, [sp, #8]
   28066:	7858      	ldrb	r0, [r3, #1]
   28068:	2825      	cmp	r0, #37	; 0x25
   2806a:	f103 0401 	add.w	r4, r3, #1
   2806e:	d120      	bne.n	280b2 <cbvprintf+0x62>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
   28070:	2100      	movs	r1, #0

	for (fmt++ ; ; fmt++) {
   28072:	461e      	mov	r6, r3
	precision = -1;
   28074:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	for (fmt++ ; ; fmt++) {
   28078:	3602      	adds	r6, #2
	length_mod = 0;
   2807a:	460a      	mov	r2, r1
	padding_mode = 0;
   2807c:	9103      	str	r1, [sp, #12]
	min_width = -1;
   2807e:	463c      	mov	r4, r7
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
   28080:	f04f 0c0a 	mov.w	ip, #10
		switch (*fmt) {
   28084:	7833      	ldrb	r3, [r6, #0]
   28086:	9602      	str	r6, [sp, #8]
   28088:	2b39      	cmp	r3, #57	; 0x39
   2808a:	f106 0601 	add.w	r6, r6, #1
   2808e:	d859      	bhi.n	28144 <cbvprintf+0xf4>
   28090:	2b1f      	cmp	r3, #31
   28092:	d818      	bhi.n	280c6 <cbvprintf+0x76>
   28094:	2b00      	cmp	r3, #0
   28096:	f000 81e8 	beq.w	2846a <cbvprintf+0x41a>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
   2809a:	9b01      	ldr	r3, [sp, #4]
   2809c:	4651      	mov	r1, sl
   2809e:	2025      	movs	r0, #37	; 0x25
   280a0:	4798      	blx	r3
			OUTC(*fmt);
   280a2:	9b02      	ldr	r3, [sp, #8]
   280a4:	4651      	mov	r1, sl
   280a6:	7818      	ldrb	r0, [r3, #0]
   280a8:	9b01      	ldr	r3, [sp, #4]
   280aa:	4798      	blx	r3
   280ac:	f109 0902 	add.w	r9, r9, #2
			goto start;
   280b0:	e7d8      	b.n	28064 <cbvprintf+0x14>
		if (*fmt == '\0') {
   280b2:	2800      	cmp	r0, #0
   280b4:	f000 81d9 	beq.w	2846a <cbvprintf+0x41a>
		OUTC(*fmt);
   280b8:	9b01      	ldr	r3, [sp, #4]
   280ba:	4651      	mov	r1, sl
   280bc:	4798      	blx	r3
   280be:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
   280c2:	9402      	str	r4, [sp, #8]
   280c4:	e7ce      	b.n	28064 <cbvprintf+0x14>
		switch (*fmt) {
   280c6:	f1a3 0020 	sub.w	r0, r3, #32
   280ca:	2819      	cmp	r0, #25
   280cc:	d8e5      	bhi.n	2809a <cbvprintf+0x4a>
   280ce:	f20f 0e08 	addw	lr, pc, #8
   280d2:	f85e f020 	ldr.w	pc, [lr, r0, lsl #2]
   280d6:	bf00      	nop
   280d8:	00028141 	.word	0x00028141
   280dc:	0002809b 	.word	0x0002809b
   280e0:	0002809b 	.word	0x0002809b
   280e4:	00028141 	.word	0x00028141
   280e8:	0002809b 	.word	0x0002809b
   280ec:	000281c5 	.word	0x000281c5
   280f0:	0002809b 	.word	0x0002809b
   280f4:	0002809b 	.word	0x0002809b
   280f8:	0002809b 	.word	0x0002809b
   280fc:	0002809b 	.word	0x0002809b
   28100:	00028209 	.word	0x00028209
   28104:	00028141 	.word	0x00028141
   28108:	0002809b 	.word	0x0002809b
   2810c:	0002821b 	.word	0x0002821b
   28110:	000281d3 	.word	0x000281d3
   28114:	0002809b 	.word	0x0002809b
   28118:	000281df 	.word	0x000281df
   2811c:	000281fb 	.word	0x000281fb
   28120:	000281fb 	.word	0x000281fb
   28124:	000281fb 	.word	0x000281fb
   28128:	000281fb 	.word	0x000281fb
   2812c:	000281fb 	.word	0x000281fb
   28130:	000281fb 	.word	0x000281fb
   28134:	000281fb 	.word	0x000281fb
   28138:	000281fb 	.word	0x000281fb
   2813c:	000281fb 	.word	0x000281fb
   28140:	4619      	mov	r1, r3
   28142:	e79f      	b.n	28084 <cbvprintf+0x34>
   28144:	2b58      	cmp	r3, #88	; 0x58
   28146:	f000 810d 	beq.w	28364 <cbvprintf+0x314>
   2814a:	f1a3 0063 	sub.w	r0, r3, #99	; 0x63
   2814e:	fa5f fe80 	uxtb.w	lr, r0
   28152:	f1be 0f17 	cmp.w	lr, #23
   28156:	d8a0      	bhi.n	2809a <cbvprintf+0x4a>
   28158:	2817      	cmp	r0, #23
   2815a:	d89e      	bhi.n	2809a <cbvprintf+0x4a>
   2815c:	f20f 0e04 	addw	lr, pc, #4
   28160:	f85e f020 	ldr.w	pc, [lr, r0, lsl #2]
   28164:	000283c3 	.word	0x000283c3
   28168:	00028241 	.word	0x00028241
   2816c:	0002809b 	.word	0x0002809b
   28170:	0002809b 	.word	0x0002809b
   28174:	0002809b 	.word	0x0002809b
   28178:	00028221 	.word	0x00028221
   2817c:	00028241 	.word	0x00028241
   28180:	0002809b 	.word	0x0002809b
   28184:	0002809b 	.word	0x0002809b
   28188:	00028221 	.word	0x00028221
   2818c:	0002809b 	.word	0x0002809b
   28190:	0002809b 	.word	0x0002809b
   28194:	0002809b 	.word	0x0002809b
   28198:	00028311 	.word	0x00028311
   2819c:	0002809b 	.word	0x0002809b
   281a0:	0002809b 	.word	0x0002809b
   281a4:	000283a5 	.word	0x000283a5
   281a8:	0002809b 	.word	0x0002809b
   281ac:	00028241 	.word	0x00028241
   281b0:	0002809b 	.word	0x0002809b
   281b4:	0002809b 	.word	0x0002809b
   281b8:	00028311 	.word	0x00028311
   281bc:	0002809b 	.word	0x0002809b
   281c0:	00028221 	.word	0x00028221
			OUTC('%');
   281c4:	9b01      	ldr	r3, [sp, #4]
   281c6:	4651      	mov	r1, sl
   281c8:	2025      	movs	r0, #37	; 0x25
   281ca:	4798      	blx	r3
   281cc:	f109 0901 	add.w	r9, r9, #1
			goto start;
   281d0:	e748      	b.n	28064 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
   281d2:	9b03      	ldr	r3, [sp, #12]
   281d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   281d8:	9303      	str	r3, [sp, #12]
			precision = 0;
   281da:	2700      	movs	r7, #0
			continue;
   281dc:	e752      	b.n	28084 <cbvprintf+0x34>
			if (min_width < 0 && precision < 0 && !padding_mode) {
   281de:	2c00      	cmp	r4, #0
   281e0:	da0b      	bge.n	281fa <cbvprintf+0x1aa>
   281e2:	2f00      	cmp	r7, #0
   281e4:	da0b      	bge.n	281fe <cbvprintf+0x1ae>
   281e6:	9803      	ldr	r0, [sp, #12]
   281e8:	2800      	cmp	r0, #0
   281ea:	f000 8136 	beq.w	2845a <cbvprintf+0x40a>
				min_width = 10 * min_width + *fmt - '0';
   281ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   281f2:	fb0c 3404 	mla	r4, ip, r4, r3
   281f6:	3c30      	subs	r4, #48	; 0x30
   281f8:	e744      	b.n	28084 <cbvprintf+0x34>
			if (precision >= 0) {
   281fa:	2f00      	cmp	r7, #0
   281fc:	dbf7      	blt.n	281ee <cbvprintf+0x19e>
				precision = 10 * precision + *fmt - '0';
   281fe:	fb0c 3307 	mla	r3, ip, r7, r3
   28202:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
   28206:	e73d      	b.n	28084 <cbvprintf+0x34>
			if (precision >= 0) {
   28208:	2f00      	cmp	r7, #0
				precision = va_arg(ap, int);
   2820a:	f855 3b04 	ldr.w	r3, [r5], #4
			if (precision >= 0) {
   2820e:	f280 8126 	bge.w	2845e <cbvprintf+0x40e>
				if (min_width < 0) {
   28212:	2b00      	cmp	r3, #0
   28214:	f280 8125 	bge.w	28462 <cbvprintf+0x412>
					min_width = -min_width;
   28218:	425c      	negs	r4, r3
		switch (*fmt) {
   2821a:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
   2821c:	9303      	str	r3, [sp, #12]
   2821e:	e731      	b.n	28084 <cbvprintf+0x34>
			if (*fmt == 'h' && length_mod == 'h') {
   28220:	2b68      	cmp	r3, #104	; 0x68
   28222:	d103      	bne.n	2822c <cbvprintf+0x1dc>
   28224:	2a68      	cmp	r2, #104	; 0x68
   28226:	d106      	bne.n	28236 <cbvprintf+0x1e6>
				length_mod = 'H';
   28228:	2248      	movs	r2, #72	; 0x48
   2822a:	e72b      	b.n	28084 <cbvprintf+0x34>
			} else if (*fmt == 'l' && length_mod == 'l') {
   2822c:	2b6c      	cmp	r3, #108	; 0x6c
   2822e:	d102      	bne.n	28236 <cbvprintf+0x1e6>
   28230:	2a6c      	cmp	r2, #108	; 0x6c
   28232:	f000 8118 	beq.w	28466 <cbvprintf+0x416>
			} else if (length_mod == '\0') {
   28236:	2a00      	cmp	r2, #0
   28238:	f47f af2f 	bne.w	2809a <cbvprintf+0x4a>
   2823c:	461a      	mov	r2, r3
		switch (*fmt) {
   2823e:	e721      	b.n	28084 <cbvprintf+0x34>
			if (length_mod == 'z') {
   28240:	2a7a      	cmp	r2, #122	; 0x7a
   28242:	d106      	bne.n	28252 <cbvprintf+0x202>
			} else if (*fmt == 'u') {
   28244:	2b75      	cmp	r3, #117	; 0x75
				precision = va_arg(ap, int);
   28246:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
   2824a:	d115      	bne.n	28278 <cbvprintf+0x228>
				d = va_arg(ap, unsigned int);
   2824c:	f04f 0b00 	mov.w	fp, #0
   28250:	e00c      	b.n	2826c <cbvprintf+0x21c>
			} else if (length_mod == 'l') {
   28252:	2a6c      	cmp	r2, #108	; 0x6c
   28254:	d0f6      	beq.n	28244 <cbvprintf+0x1f4>
			} else if (length_mod == 'L') {
   28256:	2a4c      	cmp	r2, #76	; 0x4c
   28258:	d1f4      	bne.n	28244 <cbvprintf+0x1f4>
					unsigned long long llu =
   2825a:	3507      	adds	r5, #7
   2825c:	f025 0207 	bic.w	r2, r5, #7
				if (*fmt == 'u') {
   28260:	2b75      	cmp	r3, #117	; 0x75
					unsigned long long llu =
   28262:	e9d2 6b00 	ldrd	r6, fp, [r2]
   28266:	f102 0508 	add.w	r5, r2, #8
				if (*fmt == 'u') {
   2826a:	d107      	bne.n	2827c <cbvprintf+0x22c>
			} else if (special == ' ') {
   2826c:	2920      	cmp	r1, #32
   2826e:	d146      	bne.n	282fe <cbvprintf+0x2ae>
				prefix = " ";
   28270:	f8df 8200 	ldr.w	r8, [pc, #512]	; 28474 <cbvprintf+0x424>
				min_width--;
   28274:	3c01      	subs	r4, #1
   28276:	e00a      	b.n	2828e <cbvprintf+0x23e>
				d = va_arg(ap, int);
   28278:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
   2827c:	f1bb 0f00 	cmp.w	fp, #0
   28280:	daf4      	bge.n	2826c <cbvprintf+0x21c>
				d = -d;
   28282:	4276      	negs	r6, r6
				prefix = "-";
   28284:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 28478 <cbvprintf+0x428>
				d = -d;
   28288:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
   2828c:	3c01      	subs	r4, #1
	int i = 0;
   2828e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   28292:	9305      	str	r3, [sp, #20]
   28294:	2300      	movs	r3, #0
   28296:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
   28298:	4630      	mov	r0, r6
   2829a:	4659      	mov	r1, fp
   2829c:	220a      	movs	r2, #10
   2829e:	2300      	movs	r3, #0
   282a0:	f7fd ff2e 	bl	26100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
   282a4:	f8dd c010 	ldr.w	ip, [sp, #16]
   282a8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   282ac:	9304      	str	r3, [sp, #16]
   282ae:	9b05      	ldr	r3, [sp, #20]
   282b0:	3230      	adds	r2, #48	; 0x30
   282b2:	f803 2d01 	strb.w	r2, [r3, #-1]!
   282b6:	4632      	mov	r2, r6
   282b8:	9305      	str	r3, [sp, #20]
	} while (num);
   282ba:	2a0a      	cmp	r2, #10
   282bc:	465b      	mov	r3, fp
   282be:	f173 0300 	sbcs.w	r3, r3, #0
		num /= base;
   282c2:	4606      	mov	r6, r0
   282c4:	468b      	mov	fp, r1
	} while (num);
   282c6:	d2e7      	bcs.n	28298 <cbvprintf+0x248>
	return -i;
   282c8:	f1cc 0301 	rsb	r3, ip, #1
			data = buf + sizeof(buf) - data_len;
   282cc:	f10c 0230 	add.w	r2, ip, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
   282d0:	eb0d 0602 	add.w	r6, sp, r2
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   282d4:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
   282d6:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   282da:	da04      	bge.n	282e6 <cbvprintf+0x296>
   282dc:	9a03      	ldr	r2, [sp, #12]
   282de:	f012 0f01 	tst.w	r2, #1
   282e2:	bf18      	it	ne
   282e4:	4627      	movne	r7, r4
		precision -= data_len;
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
   282e6:	9a03      	ldr	r2, [sp, #12]
		precision -= data_len;
   282e8:	eba7 0b03 	sub.w	fp, r7, r3
		if (precision > 0) {
   282ec:	f1bb 0f00 	cmp.w	fp, #0
		min_width -= data_len;
   282f0:	bfd4      	ite	le
   282f2:	1ae4      	suble	r4, r4, r3
			min_width -= precision;
   282f4:	1be4      	subgt	r4, r4, r7
		if (!(padding_mode & PAD_TAIL)) {
   282f6:	0792      	lsls	r2, r2, #30
   282f8:	d47a      	bmi.n	283f0 <cbvprintf+0x3a0>
   282fa:	4627      	mov	r7, r4
   282fc:	e071      	b.n	283e2 <cbvprintf+0x392>
			} else if (special == '+') {
   282fe:	292b      	cmp	r1, #43	; 0x2b
				prefix = "+";
   28300:	bf0a      	itet	eq
   28302:	f8df 8178 	ldreq.w	r8, [pc, #376]	; 2847c <cbvprintf+0x42c>
	prefix = "";
   28306:	f8df 8178 	ldrne.w	r8, [pc, #376]	; 28480 <cbvprintf+0x430>
				min_width--;
   2830a:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
   2830e:	e7be      	b.n	2828e <cbvprintf+0x23e>
			if (*fmt == 'p') {
   28310:	2b70      	cmp	r3, #112	; 0x70
   28312:	d127      	bne.n	28364 <cbvprintf+0x314>
				x = (uintptr_t)va_arg(ap, void *);
   28314:	f855 2b04 	ldr.w	r2, [r5], #4
   28318:	2000      	movs	r0, #0
				if (x == (uint_value_type)0) {
   2831a:	2a00      	cmp	r2, #0
   2831c:	d058      	beq.n	283d0 <cbvprintf+0x380>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   2831e:	f8df 8164 	ldr.w	r8, [pc, #356]	; 28484 <cbvprintf+0x434>
				min_width -= 2;
   28322:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
   28324:	f003 0360 	and.w	r3, r3, #96	; 0x60
   28328:	f1a3 0b39 	sub.w	fp, r3, #57	; 0x39
	int i = 0;
   2832c:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
   28330:	2600      	movs	r6, #0
		unsigned int c = num % base;
   28332:	f002 030f 	and.w	r3, r2, #15
		if (c >= 10) {
   28336:	2b09      	cmp	r3, #9
			c += alpha;
   28338:	bf88      	it	hi
   2833a:	445b      	addhi	r3, fp
		buftop[--i] = c + '0';
   2833c:	3330      	adds	r3, #48	; 0x30
   2833e:	f80e 3d01 	strb.w	r3, [lr, #-1]!
	} while (num);
   28342:	2a10      	cmp	r2, #16
		num /= base;
   28344:	ea4f 1312 	mov.w	r3, r2, lsr #4
   28348:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
   2834c:	ea4f 1110 	mov.w	r1, r0, lsr #4
	} while (num);
   28350:	f170 0000 	sbcs.w	r0, r0, #0
		buftop[--i] = c + '0';
   28354:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
	} while (num);
   28358:	d220      	bcs.n	2839c <cbvprintf+0x34c>
	return -i;
   2835a:	f1c6 0301 	rsb	r3, r6, #1
			data = buf + sizeof(buf) - data_len;
   2835e:	f106 0230 	add.w	r2, r6, #48	; 0x30
   28362:	e7b5      	b.n	282d0 <cbvprintf+0x280>
			} else if (length_mod == 'l') {
   28364:	2a6c      	cmp	r2, #108	; 0x6c
   28366:	d103      	bne.n	28370 <cbvprintf+0x320>
				x = va_arg(ap, unsigned int);
   28368:	f855 2b04 	ldr.w	r2, [r5], #4
   2836c:	2000      	movs	r0, #0
   2836e:	e008      	b.n	28382 <cbvprintf+0x332>
			} else if (length_mod == 'L') {
   28370:	2a4c      	cmp	r2, #76	; 0x4c
   28372:	d1f9      	bne.n	28368 <cbvprintf+0x318>
				unsigned long long llx =
   28374:	3507      	adds	r5, #7
   28376:	f025 0007 	bic.w	r0, r5, #7
   2837a:	4605      	mov	r5, r0
   2837c:	6840      	ldr	r0, [r0, #4]
   2837e:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
   28382:	2923      	cmp	r1, #35	; 0x23
   28384:	d107      	bne.n	28396 <cbvprintf+0x346>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   28386:	4e40      	ldr	r6, [pc, #256]	; (28488 <cbvprintf+0x438>)
   28388:	493e      	ldr	r1, [pc, #248]	; (28484 <cbvprintf+0x434>)
   2838a:	f013 0f20 	tst.w	r3, #32
   2838e:	bf0c      	ite	eq
   28390:	46b0      	moveq	r8, r6
   28392:	4688      	movne	r8, r1
   28394:	e7c5      	b.n	28322 <cbvprintf+0x2d2>
	prefix = "";
   28396:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 28480 <cbvprintf+0x430>
   2839a:	e7c3      	b.n	28324 <cbvprintf+0x2d4>
		buftop[--i] = c + '0';
   2839c:	4666      	mov	r6, ip
		num /= base;
   2839e:	461a      	mov	r2, r3
   283a0:	4608      	mov	r0, r1
   283a2:	e7c6      	b.n	28332 <cbvprintf+0x2e2>
			data = va_arg(ap, char *);
   283a4:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
   283a8:	4630      	mov	r0, r6
   283aa:	f01c fcf6 	bl	44d9a <strlen>
			if (precision >= 0 && data_len > precision) {
   283ae:	2f00      	cmp	r7, #0
			data_len = strlen(data);
   283b0:	4603      	mov	r3, r0
			if (precision >= 0 && data_len > precision) {
   283b2:	db02      	blt.n	283ba <cbvprintf+0x36a>
   283b4:	42b8      	cmp	r0, r7
   283b6:	bfa8      	it	ge
   283b8:	463b      	movge	r3, r7
   283ba:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 28480 <cbvprintf+0x430>
   283be:	2700      	movs	r7, #0
   283c0:	e791      	b.n	282e6 <cbvprintf+0x296>
			buf[0] = c;
   283c2:	f855 3b04 	ldr.w	r3, [r5], #4
   283c6:	f88d 3018 	strb.w	r3, [sp, #24]
			data = buf;
   283ca:	ae06      	add	r6, sp, #24
			data_len = 1;
   283cc:	2301      	movs	r3, #1
   283ce:	e7f4      	b.n	283ba <cbvprintf+0x36a>
					data = "(nil)";
   283d0:	4e2e      	ldr	r6, [pc, #184]	; (2848c <cbvprintf+0x43c>)
					data_len = 5;
   283d2:	2305      	movs	r3, #5
   283d4:	e7f1      	b.n	283ba <cbvprintf+0x36a>
   283d6:	9303      	str	r3, [sp, #12]
			while (--min_width >= 0) {
				OUTC(' ');
   283d8:	4651      	mov	r1, sl
   283da:	9b01      	ldr	r3, [sp, #4]
   283dc:	2020      	movs	r0, #32
   283de:	4798      	blx	r3
   283e0:	9b03      	ldr	r3, [sp, #12]
			while (--min_width >= 0) {
   283e2:	3f01      	subs	r7, #1
   283e4:	d5f7      	bpl.n	283d6 <cbvprintf+0x386>
   283e6:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
   283ea:	3c01      	subs	r4, #1
   283ec:	4491      	add	r9, r2
   283ee:	1aa4      	subs	r4, r4, r2
   283f0:	eba9 0708 	sub.w	r7, r9, r8
   283f4:	e004      	b.n	28400 <cbvprintf+0x3b0>
   283f6:	9303      	str	r3, [sp, #12]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
   283f8:	4651      	mov	r1, sl
   283fa:	9b01      	ldr	r3, [sp, #4]
   283fc:	4798      	blx	r3
   283fe:	9b03      	ldr	r3, [sp, #12]
   28400:	eb07 0908 	add.w	r9, r7, r8
		while (*prefix) {
   28404:	f818 0b01 	ldrb.w	r0, [r8], #1
   28408:	2800      	cmp	r0, #0
   2840a:	d1f4      	bne.n	283f6 <cbvprintf+0x3a6>
		precision -= data_len;
   2840c:	465f      	mov	r7, fp
		}
		while (--precision >= 0) {
   2840e:	3f01      	subs	r7, #1
   28410:	d50f      	bpl.n	28432 <cbvprintf+0x3e2>
   28412:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
   28416:	461f      	mov	r7, r3
			OUTC('0');
		}
		while (--data_len >= 0) {
   28418:	3f01      	subs	r7, #1
   2841a:	d511      	bpl.n	28440 <cbvprintf+0x3f0>
   2841c:	2b00      	cmp	r3, #0
   2841e:	bfa8      	it	ge
   28420:	449b      	addge	fp, r3
   28422:	4626      	mov	r6, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
   28424:	3e01      	subs	r6, #1
   28426:	d513      	bpl.n	28450 <cbvprintf+0x400>
   28428:	2c00      	cmp	r4, #0
   2842a:	bfa8      	it	ge
   2842c:	44a3      	addge	fp, r4
   2842e:	44d9      	add	r9, fp
   28430:	e618      	b.n	28064 <cbvprintf+0x14>
   28432:	9303      	str	r3, [sp, #12]
			OUTC('0');
   28434:	4651      	mov	r1, sl
   28436:	9b01      	ldr	r3, [sp, #4]
   28438:	2030      	movs	r0, #48	; 0x30
   2843a:	4798      	blx	r3
   2843c:	9b03      	ldr	r3, [sp, #12]
   2843e:	e7e6      	b.n	2840e <cbvprintf+0x3be>
   28440:	9303      	str	r3, [sp, #12]
			OUTC(*data++);
   28442:	f816 0b01 	ldrb.w	r0, [r6], #1
   28446:	9b01      	ldr	r3, [sp, #4]
   28448:	4651      	mov	r1, sl
   2844a:	4798      	blx	r3
   2844c:	9b03      	ldr	r3, [sp, #12]
   2844e:	e7e3      	b.n	28418 <cbvprintf+0x3c8>
			OUTC(' ');
   28450:	9b01      	ldr	r3, [sp, #4]
   28452:	4651      	mov	r1, sl
   28454:	2020      	movs	r0, #32
   28456:	4798      	blx	r3
   28458:	e7e4      	b.n	28424 <cbvprintf+0x3d4>
				padding_mode = PAD_ZERO;
   2845a:	2301      	movs	r3, #1
   2845c:	e6de      	b.n	2821c <cbvprintf+0x1cc>
				precision = va_arg(ap, int);
   2845e:	461f      	mov	r7, r3
   28460:	e610      	b.n	28084 <cbvprintf+0x34>
   28462:	461c      	mov	r4, r3
   28464:	e60e      	b.n	28084 <cbvprintf+0x34>
				length_mod = 'L';
   28466:	224c      	movs	r2, #76	; 0x4c
   28468:	e60c      	b.n	28084 <cbvprintf+0x34>
		}

		goto start;
	}
}
   2846a:	4648      	mov	r0, r9
   2846c:	b00d      	add	sp, #52	; 0x34
   2846e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28472:	bf00      	nop
   28474:	0004b0b9 	.word	0x0004b0b9
   28478:	0004b0b7 	.word	0x0004b0b7
   2847c:	0004b0bb 	.word	0x0004b0bb
   28480:	0004b0f1 	.word	0x0004b0f1
   28484:	0004b0bd 	.word	0x0004b0bd
   28488:	0004b0c0 	.word	0x0004b0c0
   2848c:	0004b0c3 	.word	0x0004b0c3

00028490 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   28490:	b508      	push	{r3, lr}
   28492:	f04f 0220 	mov.w	r2, #32
   28496:	f3ef 8311 	mrs	r3, BASEPRI
   2849a:	f382 8812 	msr	BASEPRI_MAX, r2
   2849e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   284a2:	f002 f8df 	bl	2a664 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   284a6:	4803      	ldr	r0, [pc, #12]	; (284b4 <sys_reboot+0x24>)
   284a8:	f01a fbd0 	bl	42c4c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   284ac:	f001 fdb2 	bl	2a014 <arch_cpu_idle>
   284b0:	e7fc      	b.n	284ac <sys_reboot+0x1c>
   284b2:	bf00      	nop
   284b4:	0004b0c9 	.word	0x0004b0c9

000284b8 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   284b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   284ba:	2407      	movs	r4, #7
   284bc:	9402      	str	r4, [sp, #8]
   284be:	4c04      	ldr	r4, [pc, #16]	; (284d0 <read_pnp_id+0x18>)
   284c0:	9401      	str	r4, [sp, #4]
   284c2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   284c6:	9400      	str	r4, [sp, #0]
   284c8:	f01e fdf1 	bl	470ae <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   284cc:	b004      	add	sp, #16
   284ce:	bd10      	pop	{r4, pc}
   284d0:	200009f2 	.word	0x200009f2

000284d4 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   284d4:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   284d6:	4c08      	ldr	r4, [pc, #32]	; (284f8 <read_blvl+0x24>)
{
   284d8:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   284da:	7824      	ldrb	r4, [r4, #0]
   284dc:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   284e0:	2401      	movs	r4, #1
   284e2:	9402      	str	r4, [sp, #8]
   284e4:	f10d 0417 	add.w	r4, sp, #23
   284e8:	9401      	str	r4, [sp, #4]
   284ea:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   284ee:	9400      	str	r4, [sp, #0]
   284f0:	f01e fddd 	bl	470ae <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   284f4:	b006      	add	sp, #24
   284f6:	bd10      	pop	{r4, pc}
   284f8:	200009f9 	.word	0x200009f9

000284fc <bt_bas_set_battery_level>:
{
	return battery_level;
}

int bt_bas_set_battery_level(uint8_t level)
{
   284fc:	b500      	push	{lr}
   284fe:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
   28500:	2864      	cmp	r0, #100	; 0x64
{
   28502:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
   28506:	d819      	bhi.n	2853c <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
   28508:	4b0e      	ldr	r3, [pc, #56]	; (28544 <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
   2850a:	2218      	movs	r2, #24
   2850c:	7018      	strb	r0, [r3, #0]
   2850e:	2100      	movs	r1, #0
   28510:	a802      	add	r0, sp, #8
   28512:	f01c fc81 	bl	44e18 <memset>
	params.attr = attr;
   28516:	4b0c      	ldr	r3, [pc, #48]	; (28548 <bt_bas_set_battery_level+0x4c>)
   28518:	9303      	str	r3, [sp, #12]
	params.data = data;
   2851a:	f10d 0307 	add.w	r3, sp, #7
   2851e:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
   28520:	a902      	add	r1, sp, #8
	params.len = len;
   28522:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   28524:	2000      	movs	r0, #0
	params.len = len;
   28526:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   2852a:	f005 ff4b 	bl	2e3c4 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   2852e:	f110 0f80 	cmn.w	r0, #128	; 0x80
   28532:	bf08      	it	eq
   28534:	2000      	moveq	r0, #0
}
   28536:	b009      	add	sp, #36	; 0x24
   28538:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2853c:	f06f 0015 	mvn.w	r0, #21
   28540:	e7f9      	b.n	28536 <bt_bas_set_battery_level+0x3a>
   28542:	bf00      	nop
   28544:	200009f9 	.word	0x200009f9
   28548:	00049a68 	.word	0x00049a68

0002854c <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   2854c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28550:	460f      	mov	r7, r1
   28552:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28554:	2108      	movs	r1, #8
   28556:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   28558:	f8df 9050 	ldr.w	r9, [pc, #80]	; 285ac <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2855c:	f01a ff10 	bl	43380 <nvs_al_size.isra.0>
	*addr -= ate_size;
   28560:	683c      	ldr	r4, [r7, #0]
   28562:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28564:	4680      	mov	r8, r0
	*addr -= ate_size;
   28566:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   28568:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   2856c:	42ac      	cmp	r4, r5
   2856e:	d803      	bhi.n	28578 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   28570:	2000      	movs	r0, #0
}
   28572:	b003      	add	sp, #12
   28574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28578:	2308      	movs	r3, #8
   2857a:	466a      	mov	r2, sp
   2857c:	4621      	mov	r1, r4
   2857e:	4630      	mov	r0, r6
   28580:	f01a fe73 	bl	4326a <nvs_flash_rd>
		if (rc) {
   28584:	2800      	cmp	r0, #0
   28586:	d1f4      	bne.n	28572 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   28588:	4669      	mov	r1, sp
   2858a:	4630      	mov	r0, r6
   2858c:	f01a ff02 	bl	43394 <nvs_ate_valid>
   28590:	b140      	cbz	r0, 285a4 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   28592:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   28596:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   2859a:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   2859c:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   285a0:	4413      	add	r3, r2
   285a2:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   285a4:	eba4 0408 	sub.w	r4, r4, r8
   285a8:	e7e0      	b.n	2856c <nvs_recover_last_ate+0x20>
   285aa:	bf00      	nop
   285ac:	ffff0000 	.word	0xffff0000

000285b0 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   285b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   285b4:	4604      	mov	r4, r0
   285b6:	b088      	sub	sp, #32
   285b8:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   285ba:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   285be:	4638      	mov	r0, r7
   285c0:	f020 f9b9 	bl	48936 <z_impl_k_mutex_init>
   285c4:	4628      	mov	r0, r5
   285c6:	f018 fc4b 	bl	40e60 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   285ca:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   285cc:	2800      	cmp	r0, #0
   285ce:	f000 8120 	beq.w	28812 <nvs_init+0x262>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   285d2:	6883      	ldr	r3, [r0, #8]
   285d4:	68db      	ldr	r3, [r3, #12]
   285d6:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   285d8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   285da:	b928      	cbnz	r0, 285e8 <nvs_init+0x38>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
   285dc:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   285e0:	4628      	mov	r0, r5
   285e2:	b008      	add	sp, #32
   285e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   285e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   285ea:	6883      	ldr	r3, [r0, #8]
   285ec:	68db      	ldr	r3, [r3, #12]
   285ee:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   285f0:	6803      	ldr	r3, [r0, #0]
   285f2:	3b01      	subs	r3, #1
   285f4:	2b1f      	cmp	r3, #31
   285f6:	d8f1      	bhi.n	285dc <nvs_init+0x2c>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   285f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   285fa:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   285fc:	aa05      	add	r2, sp, #20
   285fe:	f01f fd60 	bl	480c2 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   28602:	2800      	cmp	r0, #0
   28604:	d1ea      	bne.n	285dc <nvs_init+0x2c>
	if (!fs->sector_size || fs->sector_size % info.size) {
   28606:	89a5      	ldrh	r5, [r4, #12]
   28608:	2d00      	cmp	r5, #0
   2860a:	d0e7      	beq.n	285dc <nvs_init+0x2c>
   2860c:	9b06      	ldr	r3, [sp, #24]
   2860e:	fbb5 f2f3 	udiv	r2, r5, r3
   28612:	fb03 5512 	mls	r5, r3, r2, r5
   28616:	2d00      	cmp	r5, #0
   28618:	d1e0      	bne.n	285dc <nvs_init+0x2c>
	if (fs->sector_count < 2) {
   2861a:	89e3      	ldrh	r3, [r4, #14]
   2861c:	2b01      	cmp	r3, #1
   2861e:	d9dd      	bls.n	285dc <nvs_init+0x2c>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   28620:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   28622:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   28624:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   28628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2862c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28630:	4638      	mov	r0, r7
   28632:	f018 feef 	bl	41414 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28636:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   28638:	2108      	movs	r1, #8
   2863a:	f01a fea1 	bl	43380 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   2863e:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28640:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   28642:	89e3      	ldrh	r3, [r4, #14]
   28644:	fa1f fa85 	uxth.w	sl, r5
   28648:	4553      	cmp	r3, sl
   2864a:	d846      	bhi.n	286da <nvs_init+0x12a>
	if (closed_sectors == fs->sector_count) {
   2864c:	89e3      	ldrh	r3, [r4, #14]
   2864e:	4543      	cmp	r3, r8
   28650:	f000 80d4 	beq.w	287fc <nvs_init+0x24c>
	if (i == fs->sector_count) {
   28654:	4553      	cmp	r3, sl
   28656:	d10b      	bne.n	28670 <nvs_init+0xc0>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   28658:	9900      	ldr	r1, [sp, #0]
   2865a:	2308      	movs	r3, #8
   2865c:	464a      	mov	r2, r9
   2865e:	1b89      	subs	r1, r1, r6
   28660:	4620      	mov	r0, r4
   28662:	f01a fe3a 	bl	432da <nvs_flash_cmp_const>
		if (!rc) {
   28666:	b918      	cbnz	r0, 28670 <nvs_init+0xc0>
			nvs_sector_advance(fs, &addr);
   28668:	89e0      	ldrh	r0, [r4, #14]
   2866a:	4669      	mov	r1, sp
   2866c:	f01a fe7d 	bl	4336a <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   28670:	4669      	mov	r1, sp
   28672:	4620      	mov	r0, r4
   28674:	f7ff ff6a 	bl	2854c <nvs_recover_last_ate>
	if (rc) {
   28678:	4605      	mov	r5, r0
   2867a:	2800      	cmp	r0, #0
   2867c:	f040 80c0 	bne.w	28800 <nvs_init+0x250>
	fs->ate_wra = addr;
   28680:	9b00      	ldr	r3, [sp, #0]
   28682:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   28684:	ea4f 4813 	mov.w	r8, r3, lsr #16
   28688:	ea4f 4808 	mov.w	r8, r8, lsl #16
   2868c:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   28690:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   28694:	4299      	cmp	r1, r3
   28696:	d30e      	bcc.n	286b6 <nvs_init+0x106>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   28698:	2308      	movs	r3, #8
   2869a:	aa01      	add	r2, sp, #4
   2869c:	4620      	mov	r0, r4
   2869e:	f01a fde4 	bl	4326a <nvs_flash_rd>
		if (rc) {
   286a2:	b9c0      	cbnz	r0, 286d6 <nvs_init+0x126>
   286a4:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   286a6:	f813 2b01 	ldrb.w	r2, [r3], #1
   286aa:	4591      	cmp	r9, r2
   286ac:	f040 80c1 	bne.w	28832 <nvs_init+0x282>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   286b0:	3001      	adds	r0, #1
   286b2:	2808      	cmp	r0, #8
   286b4:	d1f7      	bne.n	286a6 <nvs_init+0xf6>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   286b6:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   286b8:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   286ba:	0c1b      	lsrs	r3, r3, #16
   286bc:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   286be:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   286c0:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   286c2:	f01a fe52 	bl	4336a <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   286c6:	89a3      	ldrh	r3, [r4, #12]
   286c8:	9900      	ldr	r1, [sp, #0]
   286ca:	464a      	mov	r2, r9
   286cc:	4620      	mov	r0, r4
   286ce:	f01a fe04 	bl	432da <nvs_flash_cmp_const>
	if (rc < 0) {
   286d2:	2800      	cmp	r0, #0
   286d4:	da25      	bge.n	28722 <nvs_init+0x172>
   286d6:	4605      	mov	r5, r0
   286d8:	e092      	b.n	28800 <nvs_init+0x250>
		       (uint16_t)(fs->sector_size - ate_size);
   286da:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   286dc:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   286de:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   286e0:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   286e4:	464a      	mov	r2, r9
   286e6:	2308      	movs	r3, #8
   286e8:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   286ea:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   286ec:	f01a fdf5 	bl	432da <nvs_flash_cmp_const>
		if (rc) {
   286f0:	b178      	cbz	r0, 28712 <nvs_init+0x162>
			nvs_sector_advance(fs, &addr);
   286f2:	89e0      	ldrh	r0, [r4, #14]
   286f4:	4669      	mov	r1, sp
   286f6:	f01a fe38 	bl	4336a <nvs_sector_advance.isra.0>
			closed_sectors++;
   286fa:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   286fe:	9900      	ldr	r1, [sp, #0]
   28700:	2308      	movs	r3, #8
   28702:	464a      	mov	r2, r9
   28704:	4620      	mov	r0, r4
			closed_sectors++;
   28706:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2870a:	f01a fde6 	bl	432da <nvs_flash_cmp_const>
			if (!rc) {
   2870e:	2800      	cmp	r0, #0
   28710:	d09c      	beq.n	2864c <nvs_init+0x9c>
	for (i = 0; i < fs->sector_count; i++) {
   28712:	3501      	adds	r5, #1
   28714:	e795      	b.n	28642 <nvs_init+0x92>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   28716:	2a00      	cmp	r2, #0
   28718:	f000 809f 	beq.w	2885a <nvs_init+0x2aa>
				rc = -ESPIPE;
   2871c:	f06f 051c 	mvn.w	r5, #28
   28720:	e06e      	b.n	28800 <nvs_init+0x250>
		addr = fs->ate_wra + ate_size;
   28722:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   28724:	d045      	beq.n	287b2 <nvs_init+0x202>
		addr = fs->ate_wra + ate_size;
   28726:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   2872a:	f64f 79ff 	movw	r9, #65535	; 0xffff
   2872e:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   28730:	f8cd 8000 	str.w	r8, [sp]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   28734:	fa1f f288 	uxth.w	r2, r8
   28738:	1b9b      	subs	r3, r3, r6
   2873a:	429a      	cmp	r2, r3
   2873c:	d315      	bcc.n	2876a <nvs_init+0x1ba>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   2873e:	6861      	ldr	r1, [r4, #4]
   28740:	4620      	mov	r0, r4
   28742:	f01a fdef 	bl	43324 <nvs_flash_erase_sector>
		if (rc) {
   28746:	2800      	cmp	r0, #0
   28748:	d1c5      	bne.n	286d6 <nvs_init+0x126>
		fs->ate_wra &= ADDR_SECT_MASK;
   2874a:	6863      	ldr	r3, [r4, #4]
   2874c:	4a45      	ldr	r2, [pc, #276]	; (28864 <nvs_init+0x2b4>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   2874e:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   28750:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   28752:	440b      	add	r3, r1
   28754:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   28758:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   2875a:	4013      	ands	r3, r2
   2875c:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   2875e:	4620      	mov	r0, r4
   28760:	f01a ff0d 	bl	4357e <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   28764:	2800      	cmp	r0, #0
   28766:	d03f      	beq.n	287e8 <nvs_init+0x238>
   28768:	e7b5      	b.n	286d6 <nvs_init+0x126>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2876a:	2308      	movs	r3, #8
   2876c:	aa03      	add	r2, sp, #12
   2876e:	4641      	mov	r1, r8
   28770:	4620      	mov	r0, r4
   28772:	f01a fd7a 	bl	4326a <nvs_flash_rd>
			if (rc) {
   28776:	2800      	cmp	r0, #0
   28778:	d1ad      	bne.n	286d6 <nvs_init+0x126>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   2877a:	a903      	add	r1, sp, #12
   2877c:	4620      	mov	r0, r4
   2877e:	f01a fe09 	bl	43394 <nvs_ate_valid>
   28782:	b138      	cbz	r0, 28794 <nvs_init+0x1e4>
   28784:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   28788:	454b      	cmp	r3, r9
   2878a:	d103      	bne.n	28794 <nvs_init+0x1e4>
			    (gc_done_ate.id == 0xffff) &&
   2878c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   28790:	2b00      	cmp	r3, #0
   28792:	d041      	beq.n	28818 <nvs_init+0x268>
			addr += ate_size;
   28794:	44b0      	add	r8, r6
   28796:	e7ca      	b.n	2872e <nvs_init+0x17e>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   28798:	1a5b      	subs	r3, r3, r1
   2879a:	464a      	mov	r2, r9
   2879c:	4620      	mov	r0, r4
   2879e:	f01a fd9c 	bl	432da <nvs_flash_cmp_const>
		if (rc < 0) {
   287a2:	2800      	cmp	r0, #0
   287a4:	db97      	blt.n	286d6 <nvs_init+0x126>
		if (!rc) {
   287a6:	d008      	beq.n	287ba <nvs_init+0x20a>
		fs->data_wra += fs->flash_parameters->write_block_size;
   287a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   287aa:	68a3      	ldr	r3, [r4, #8]
   287ac:	6812      	ldr	r2, [r2, #0]
   287ae:	4413      	add	r3, r2
   287b0:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   287b2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   287b6:	428b      	cmp	r3, r1
   287b8:	d8ee      	bhi.n	28798 <nvs_init+0x1e8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   287ba:	6861      	ldr	r1, [r4, #4]
   287bc:	89a3      	ldrh	r3, [r4, #12]
   287be:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   287c2:	429a      	cmp	r2, r3
   287c4:	d1ce      	bne.n	28764 <nvs_init+0x1b4>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   287c6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 28864 <nvs_init+0x2b4>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   287ca:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   287cc:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   287d0:	4293      	cmp	r3, r2
   287d2:	d0c7      	beq.n	28764 <nvs_init+0x1b4>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   287d4:	4620      	mov	r0, r4
   287d6:	f01a fda5 	bl	43324 <nvs_flash_erase_sector>
		if (rc) {
   287da:	2800      	cmp	r0, #0
   287dc:	f47f af7b 	bne.w	286d6 <nvs_init+0x126>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   287e0:	6863      	ldr	r3, [r4, #4]
   287e2:	ea03 0308 	and.w	r3, r3, r8
   287e6:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   287e8:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   287ea:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   287ec:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   287f0:	429a      	cmp	r2, r3
   287f2:	d105      	bne.n	28800 <nvs_init+0x250>
		rc = nvs_add_gc_done_ate(fs);
   287f4:	4620      	mov	r0, r4
   287f6:	f01a fead 	bl	43554 <nvs_add_gc_done_ate>
   287fa:	e76c      	b.n	286d6 <nvs_init+0x126>
		rc = -EDEADLK;
   287fc:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   28800:	4638      	mov	r0, r7
   28802:	f018 fe7f 	bl	41504 <z_impl_k_mutex_unlock>
	if (rc) {
   28806:	2d00      	cmp	r5, #0
   28808:	f47f aeea 	bne.w	285e0 <nvs_init+0x30>
	fs->ready = true;
   2880c:	2301      	movs	r3, #1
   2880e:	7423      	strb	r3, [r4, #16]
	return 0;
   28810:	e6e6      	b.n	285e0 <nvs_init+0x30>
		return -ENXIO;
   28812:	f06f 0505 	mvn.w	r5, #5
   28816:	e6e3      	b.n	285e0 <nvs_init+0x30>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   28818:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   2881a:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2881c:	0c1b      	lsrs	r3, r3, #16
   2881e:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   28820:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   28822:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   28824:	f01a fda1 	bl	4336a <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   28828:	9900      	ldr	r1, [sp, #0]
   2882a:	4620      	mov	r0, r4
   2882c:	f01a fd7a 	bl	43324 <nvs_flash_erase_sector>
			goto end;
   28830:	e798      	b.n	28764 <nvs_init+0x1b4>
		if (nvs_ate_valid(fs, &last_ate)) {
   28832:	a901      	add	r1, sp, #4
   28834:	4620      	mov	r0, r4
   28836:	f01a fdad 	bl	43394 <nvs_ate_valid>
   2883a:	f8d4 a004 	ldr.w	sl, [r4, #4]
   2883e:	b160      	cbz	r0, 2885a <nvs_init+0x2aa>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   28840:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   28844:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   28848:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2884a:	4411      	add	r1, r2
   2884c:	f01a fd98 	bl	43380 <nvs_al_size.isra.0>
   28850:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   28852:	4550      	cmp	r0, sl
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   28854:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   28856:	f43f af5e 	beq.w	28716 <nvs_init+0x166>
		fs->ate_wra -= ate_size;
   2885a:	ebaa 0306 	sub.w	r3, sl, r6
   2885e:	6063      	str	r3, [r4, #4]
   28860:	e716      	b.n	28690 <nvs_init+0xe0>
   28862:	bf00      	nop
   28864:	ffff0000 	.word	0xffff0000

00028868 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   28868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2886c:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   2886e:	7c03      	ldrb	r3, [r0, #16]
{
   28870:	b089      	sub	sp, #36	; 0x24
   28872:	4604      	mov	r4, r0
   28874:	4689      	mov	r9, r1
   28876:	4690      	mov	r8, r2
	if (!fs->ready) {
   28878:	2b00      	cmp	r3, #0
   2887a:	f000 80b2 	beq.w	289e2 <nvs_write+0x17a>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2887e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   28880:	2108      	movs	r1, #8
   28882:	4610      	mov	r0, r2
   28884:	f01a fd7c 	bl	43380 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   28888:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2888a:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   2888c:	4610      	mov	r0, r2
   2888e:	f01a fd77 	bl	43380 <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   28892:	89a3      	ldrh	r3, [r4, #12]
   28894:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   28898:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   2889a:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   2889c:	f200 80a4 	bhi.w	289e8 <nvs_write+0x180>
   288a0:	b11e      	cbz	r6, 288aa <nvs_write+0x42>
	    ((len > 0) && (data == NULL))) {
   288a2:	f1b8 0f00 	cmp.w	r8, #0
   288a6:	f000 809f 	beq.w	289e8 <nvs_write+0x180>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   288aa:	6863      	ldr	r3, [r4, #4]
   288ac:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   288ae:	aa04      	add	r2, sp, #16
   288b0:	a903      	add	r1, sp, #12
   288b2:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   288b4:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   288b8:	f01a fda4 	bl	43404 <nvs_prev_ate>
		if (rc) {
   288bc:	4605      	mov	r5, r0
   288be:	2800      	cmp	r0, #0
   288c0:	d15a      	bne.n	28978 <nvs_write+0x110>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   288c2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   288c6:	454b      	cmp	r3, r9
   288c8:	d005      	beq.n	288d6 <nvs_write+0x6e>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   288ca:	6862      	ldr	r2, [r4, #4]
   288cc:	9b03      	ldr	r3, [sp, #12]
   288ce:	429a      	cmp	r2, r3
   288d0:	d1ed      	bne.n	288ae <nvs_write+0x46>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   288d2:	b9de      	cbnz	r6, 2890c <nvs_write+0xa4>
   288d4:	e050      	b.n	28978 <nvs_write+0x110>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   288d6:	a904      	add	r1, sp, #16
   288d8:	4620      	mov	r0, r4
   288da:	f01a fd5b 	bl	43394 <nvs_ate_valid>
   288de:	2800      	cmp	r0, #0
   288e0:	d0f3      	beq.n	288ca <nvs_write+0x62>
		rd_addr += wlk_ate.offset;
   288e2:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
   288e6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   288ea:	b176      	cbz	r6, 2890a <nvs_write+0xa2>
		} else if (len == wlk_ate.len) {
   288ec:	429e      	cmp	r6, r3
   288ee:	d10d      	bne.n	2890c <nvs_write+0xa4>
		rd_addr &= ADDR_SECT_MASK;
   288f0:	ea4f 411b 	mov.w	r1, fp, lsr #16
   288f4:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   288f6:	4401      	add	r1, r0
   288f8:	4633      	mov	r3, r6
   288fa:	4642      	mov	r2, r8
   288fc:	4620      	mov	r0, r4
   288fe:	f01a fcc2 	bl	43286 <nvs_flash_block_cmp>
			if (rc <= 0) {
   28902:	2800      	cmp	r0, #0
   28904:	dc02      	bgt.n	2890c <nvs_write+0xa4>
   28906:	4605      	mov	r5, r0
   28908:	e036      	b.n	28978 <nvs_write+0x110>
			if (wlk_ate.len == 0U) {
   2890a:	b3ab      	cbz	r3, 28978 <nvs_write+0x110>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   2890c:	2f00      	cmp	r7, #0
   2890e:	d137      	bne.n	28980 <nvs_write+0x118>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   28910:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   28914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2891c:	4650      	mov	r0, sl
   2891e:	f018 fd79 	bl	41414 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   28922:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 289f0 <nvs_write+0x188>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   28926:	89e3      	ldrh	r3, [r4, #14]
   28928:	429d      	cmp	r5, r3
   2892a:	d057      	beq.n	289dc <nvs_write+0x174>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   2892c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   28930:	18f9      	adds	r1, r7, r3
   28932:	428a      	cmp	r2, r1
   28934:	d327      	bcc.n	28986 <nvs_write+0x11e>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   28936:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   2893a:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   2893c:	23ff      	movs	r3, #255	; 0xff
   2893e:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   28942:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   28946:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
   2894a:	f01a fd05 	bl	43358 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   2894e:	4632      	mov	r2, r6
   28950:	4641      	mov	r1, r8
   28952:	4620      	mov	r0, r4
   28954:	f01a fdda 	bl	4350c <nvs_flash_data_wrt>
	if (rc) {
   28958:	4603      	mov	r3, r0
   2895a:	b938      	cbnz	r0, 2896c <nvs_write+0x104>
	rc = nvs_flash_ate_wrt(fs, &entry);
   2895c:	a906      	add	r1, sp, #24
   2895e:	4620      	mov	r0, r4
   28960:	f01a fde7 	bl	43532 <nvs_flash_ate_wrt>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   28964:	2800      	cmp	r0, #0
   28966:	bf14      	ite	ne
   28968:	4603      	movne	r3, r0
   2896a:	4633      	moveq	r3, r6
   2896c:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   2896e:	4650      	mov	r0, sl
   28970:	f018 fdc8 	bl	41504 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
   28974:	9b01      	ldr	r3, [sp, #4]
   28976:	461d      	mov	r5, r3
}
   28978:	4628      	mov	r0, r5
   2897a:	b009      	add	sp, #36	; 0x24
   2897c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
   28980:	4457      	add	r7, sl
   28982:	b2bf      	uxth	r7, r7
   28984:	e7c4      	b.n	28910 <nvs_write+0xa8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   28986:	2108      	movs	r1, #8
   28988:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2898a:	f01a fcf9 	bl	43380 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   2898e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28992:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   28996:	2300      	movs	r3, #0
   28998:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   2899c:	1813      	adds	r3, r2, r0
   2899e:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   289a2:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   289a4:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   289a8:	441a      	add	r2, r3
   289aa:	1a10      	subs	r0, r2, r0
   289ac:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   289ae:	a806      	add	r0, sp, #24
   289b0:	f01a fcd2 	bl	43358 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   289b4:	a906      	add	r1, sp, #24
   289b6:	4620      	mov	r0, r4
   289b8:	f01a fdbb 	bl	43532 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   289bc:	89e0      	ldrh	r0, [r4, #14]
   289be:	1d21      	adds	r1, r4, #4
   289c0:	f01a fcd3 	bl	4336a <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   289c4:	6863      	ldr	r3, [r4, #4]
   289c6:	ea03 030b 	and.w	r3, r3, fp
   289ca:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   289cc:	4620      	mov	r0, r4
   289ce:	f01a fdd6 	bl	4357e <nvs_gc>
		if (rc) {
   289d2:	4603      	mov	r3, r0
   289d4:	2800      	cmp	r0, #0
   289d6:	d1c9      	bne.n	2896c <nvs_write+0x104>
		gc_count++;
   289d8:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   289da:	e7a4      	b.n	28926 <nvs_write+0xbe>
			rc = -ENOSPC;
   289dc:	f06f 031b 	mvn.w	r3, #27
   289e0:	e7c4      	b.n	2896c <nvs_write+0x104>
		return -EACCES;
   289e2:	f06f 050c 	mvn.w	r5, #12
   289e6:	e7c7      	b.n	28978 <nvs_write+0x110>
		return -EINVAL;
   289e8:	f06f 0515 	mvn.w	r5, #21
   289ec:	e7c4      	b.n	28978 <nvs_write+0x110>
   289ee:	bf00      	nop
   289f0:	ffff0000 	.word	0xffff0000

000289f4 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   289f4:	4b0c      	ldr	r3, [pc, #48]	; (28a28 <class_handler+0x34>)
{
   289f6:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   289f8:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   289fa:	4e0c      	ldr	r6, [pc, #48]	; (28a2c <class_handler+0x38>)
   289fc:	4b0c      	ldr	r3, [pc, #48]	; (28a30 <class_handler+0x3c>)
   289fe:	42b3      	cmp	r3, r6
   28a00:	d303      	bcc.n	28a0a <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   28a02:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28a06:	bcf0      	pop	{r4, r5, r6, r7}
   28a08:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   28a0a:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28a0c:	42bd      	cmp	r5, r7
   28a0e:	d309      	bcc.n	28a24 <class_handler+0x30>
		if (iface->class_handler &&
   28a10:	691c      	ldr	r4, [r3, #16]
   28a12:	b13c      	cbz	r4, 28a24 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   28a14:	f895 c002 	ldrb.w	ip, [r5, #2]
   28a18:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   28a1a:	45ac      	cmp	ip, r5
   28a1c:	d102      	bne.n	28a24 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   28a1e:	4623      	mov	r3, r4
}
   28a20:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   28a22:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28a24:	3324      	adds	r3, #36	; 0x24
   28a26:	e7ea      	b.n	289fe <class_handler+0xa>
   28a28:	200019d4 	.word	0x200019d4
   28a2c:	20000da1 	.word	0x20000da1
   28a30:	20000da1 	.word	0x20000da1

00028a34 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   28a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28a38:	4c13      	ldr	r4, [pc, #76]	; (28a88 <custom_handler+0x54>)
   28a3a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 28a8c <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28a3e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 28a90 <custom_handler+0x5c>
{
   28a42:	4605      	mov	r5, r0
   28a44:	460e      	mov	r6, r1
   28a46:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28a48:	4544      	cmp	r4, r8
   28a4a:	d303      	bcc.n	28a54 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   28a4c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   28a54:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   28a56:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   28a5a:	429a      	cmp	r2, r3
   28a5c:	d312      	bcc.n	28a84 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   28a5e:	69a3      	ldr	r3, [r4, #24]
   28a60:	b183      	cbz	r3, 28a84 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   28a62:	7890      	ldrb	r0, [r2, #2]
   28a64:	7929      	ldrb	r1, [r5, #4]
   28a66:	4288      	cmp	r0, r1
   28a68:	d105      	bne.n	28a76 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   28a6a:	463a      	mov	r2, r7
   28a6c:	4631      	mov	r1, r6
   28a6e:	4628      	mov	r0, r5
}
   28a70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   28a74:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   28a76:	7952      	ldrb	r2, [r2, #5]
   28a78:	2a01      	cmp	r2, #1
   28a7a:	d103      	bne.n	28a84 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   28a7c:	463a      	mov	r2, r7
   28a7e:	4631      	mov	r1, r6
   28a80:	4628      	mov	r0, r5
   28a82:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28a84:	3424      	adds	r4, #36	; 0x24
   28a86:	e7df      	b.n	28a48 <custom_handler+0x14>
   28a88:	20000da1 	.word	0x20000da1
   28a8c:	20000da1 	.word	0x20000da1
   28a90:	200019d4 	.word	0x200019d4

00028a94 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   28a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28a98:	4c0b      	ldr	r4, [pc, #44]	; (28ac8 <vendor_handler+0x34>)
   28a9a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 28acc <vendor_handler+0x38>
{
   28a9e:	4605      	mov	r5, r0
   28aa0:	460e      	mov	r6, r1
   28aa2:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28aa4:	4544      	cmp	r4, r8
   28aa6:	d302      	bcc.n	28aae <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   28aa8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28aac:	e009      	b.n	28ac2 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
   28aae:	6963      	ldr	r3, [r4, #20]
   28ab0:	b90b      	cbnz	r3, 28ab6 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28ab2:	3424      	adds	r4, #36	; 0x24
   28ab4:	e7f6      	b.n	28aa4 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
   28ab6:	463a      	mov	r2, r7
   28ab8:	4631      	mov	r1, r6
   28aba:	4628      	mov	r0, r5
   28abc:	4798      	blx	r3
   28abe:	2800      	cmp	r0, #0
   28ac0:	d1f7      	bne.n	28ab2 <vendor_handler+0x1e>
}
   28ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28ac6:	bf00      	nop
   28ac8:	20000da1 	.word	0x20000da1
   28acc:	20000da1 	.word	0x20000da1

00028ad0 <set_endpoint>:
{
   28ad0:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   28ad2:	7883      	ldrb	r3, [r0, #2]
   28ad4:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   28ad8:	7903      	ldrb	r3, [r0, #4]
   28ada:	7942      	ldrb	r2, [r0, #5]
   28adc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   28ae0:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   28ae4:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
   28ae6:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   28ae8:	f003 0303 	and.w	r3, r3, #3
   28aec:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
   28af0:	f014 fefe 	bl	3d8f0 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   28af4:	f110 0f78 	cmn.w	r0, #120	; 0x78
   28af8:	d004      	beq.n	28b04 <set_endpoint+0x34>
	} else if (ret) {
   28afa:	b118      	cbz	r0, 28b04 <set_endpoint+0x34>
		return false;
   28afc:	2000      	movs	r0, #0
}
   28afe:	b003      	add	sp, #12
   28b00:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   28b04:	f89d 0000 	ldrb.w	r0, [sp]
   28b08:	f014 ff78 	bl	3d9fc <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   28b0c:	f110 0f78 	cmn.w	r0, #120	; 0x78
   28b10:	d001      	beq.n	28b16 <set_endpoint+0x46>
	} else if (ret) {
   28b12:	2800      	cmp	r0, #0
   28b14:	d1f2      	bne.n	28afc <set_endpoint+0x2c>
	usb_dev.configured = true;
   28b16:	4b02      	ldr	r3, [pc, #8]	; (28b20 <set_endpoint+0x50>)
   28b18:	2001      	movs	r0, #1
   28b1a:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
   28b1e:	e7ee      	b.n	28afe <set_endpoint+0x2e>
   28b20:	200019d4 	.word	0x200019d4

00028b24 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   28b24:	4802      	ldr	r0, [pc, #8]	; (28b30 <usb_reset_alt_setting+0xc>)
   28b26:	2208      	movs	r2, #8
   28b28:	2100      	movs	r1, #0
   28b2a:	f01c b975 	b.w	44e18 <memset>
   28b2e:	bf00      	nop
   28b30:	20001a8f 	.word	0x20001a8f

00028b34 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
   28b34:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28b36:	4b0b      	ldr	r3, [pc, #44]	; (28b64 <is_ep_valid.part.0+0x30>)
   28b38:	4c0b      	ldr	r4, [pc, #44]	; (28b68 <is_ep_valid.part.0+0x34>)
   28b3a:	42a3      	cmp	r3, r4
   28b3c:	d301      	bcc.n	28b42 <is_ep_valid.part.0+0xe>
	return false;
   28b3e:	2000      	movs	r0, #0
}
   28b40:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   28b42:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28b44:	7f1e      	ldrb	r6, [r3, #28]
   28b46:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   28b48:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28b4a:	b2d5      	uxtb	r5, r2
   28b4c:	42ae      	cmp	r6, r5
   28b4e:	d801      	bhi.n	28b54 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28b50:	3324      	adds	r3, #36	; 0x24
   28b52:	e7f2      	b.n	28b3a <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
   28b54:	3201      	adds	r2, #1
   28b56:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   28b5a:	4285      	cmp	r5, r0
   28b5c:	d1f5      	bne.n	28b4a <is_ep_valid.part.0+0x16>
				return true;
   28b5e:	2001      	movs	r0, #1
   28b60:	e7ee      	b.n	28b40 <is_ep_valid.part.0+0xc>
   28b62:	bf00      	nop
   28b64:	20000da1 	.word	0x20000da1
   28b68:	20000da1 	.word	0x20000da1

00028b6c <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
   28b6c:	4809      	ldr	r0, [pc, #36]	; (28b94 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
   28b6e:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
   28b70:	7803      	ldrb	r3, [r0, #0]
   28b72:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   28b76:	330a      	adds	r3, #10
   28b78:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
   28b7c:	b13b      	cbz	r3, 28b8e <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
   28b7e:	f100 0208 	add.w	r2, r0, #8
   28b82:	f100 0110 	add.w	r1, r0, #16
   28b86:	4798      	blx	r3
   28b88:	43c0      	mvns	r0, r0
   28b8a:	0fc0      	lsrs	r0, r0, #31
}
   28b8c:	bd08      	pop	{r3, pc}
		return false;
   28b8e:	4618      	mov	r0, r3
   28b90:	e7fc      	b.n	28b8c <usb_handle_request.constprop.0+0x20>
   28b92:	bf00      	nop
   28b94:	200019d4 	.word	0x200019d4

00028b98 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   28b98:	2804      	cmp	r0, #4
{
   28b9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28b9e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 28c28 <forward_status_cb+0x90>
   28ba2:	4604      	mov	r4, r0
   28ba4:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
   28ba6:	d10e      	bne.n	28bc6 <forward_status_cb+0x2e>
		usb_reset_alt_setting();
   28ba8:	f7ff ffbc 	bl	28b24 <usb_reset_alt_setting>
		if (usb_dev.configured) {
   28bac:	f8df 907c 	ldr.w	r9, [pc, #124]	; 28c2c <forward_status_cb+0x94>
   28bb0:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
   28bb4:	b15b      	cbz	r3, 28bce <forward_status_cb+0x36>
			usb_cancel_transfers();
   28bb6:	f000 fd01 	bl	295bc <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   28bba:	2c04      	cmp	r4, #4
   28bbc:	d001      	beq.n	28bc2 <forward_status_cb+0x2a>
   28bbe:	2c01      	cmp	r4, #1
   28bc0:	d105      	bne.n	28bce <forward_status_cb+0x36>
   28bc2:	4d1b      	ldr	r5, [pc, #108]	; (28c30 <forward_status_cb+0x98>)
   28bc4:	e016      	b.n	28bf4 <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   28bc6:	2805      	cmp	r0, #5
   28bc8:	d0f0      	beq.n	28bac <forward_status_cb+0x14>
   28bca:	2801      	cmp	r0, #1
   28bcc:	d0ee      	beq.n	28bac <forward_status_cb+0x14>
   28bce:	4d18      	ldr	r5, [pc, #96]	; (28c30 <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28bd0:	4545      	cmp	r5, r8
   28bd2:	d31e      	bcc.n	28c12 <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
   28bd4:	4b15      	ldr	r3, [pc, #84]	; (28c2c <forward_status_cb+0x94>)
   28bd6:	6a1b      	ldr	r3, [r3, #32]
   28bd8:	b31b      	cbz	r3, 28c22 <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
   28bda:	4631      	mov	r1, r6
   28bdc:	4620      	mov	r0, r4
}
   28bde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
   28be2:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
   28be4:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   28be8:	2700      	movs	r7, #0
   28bea:	7f2a      	ldrb	r2, [r5, #28]
   28bec:	b2fb      	uxtb	r3, r7
   28bee:	429a      	cmp	r2, r3
   28bf0:	d803      	bhi.n	28bfa <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28bf2:	3524      	adds	r5, #36	; 0x24
   28bf4:	4545      	cmp	r5, r8
   28bf6:	d3f5      	bcc.n	28be4 <forward_status_cb+0x4c>
   28bf8:	e007      	b.n	28c0a <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
   28bfa:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
   28bfe:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
   28c00:	7918      	ldrb	r0, [r3, #4]
   28c02:	f014 ff25 	bl	3da50 <usb_dc_ep_disable>
			if (ret < 0) {
   28c06:	2800      	cmp	r0, #0
   28c08:	daef      	bge.n	28bea <forward_status_cb+0x52>
				usb_dev.configured = false;
   28c0a:	2300      	movs	r3, #0
   28c0c:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
   28c10:	e7dd      	b.n	28bce <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
   28c12:	68eb      	ldr	r3, [r5, #12]
   28c14:	b11b      	cbz	r3, 28c1e <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
   28c16:	4632      	mov	r2, r6
   28c18:	4621      	mov	r1, r4
   28c1a:	4628      	mov	r0, r5
   28c1c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   28c1e:	3524      	adds	r5, #36	; 0x24
   28c20:	e7d6      	b.n	28bd0 <forward_status_cb+0x38>
}
   28c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28c26:	bf00      	nop
   28c28:	20000da1 	.word	0x20000da1
   28c2c:	200019d4 	.word	0x200019d4
   28c30:	20000da1 	.word	0x20000da1

00028c34 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   28c34:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   28c36:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   28c38:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   28c3a:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   28c3c:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   28c40:	d007      	beq.n	28c52 <usb_halt_endpoint_req.isra.0+0x1e>
   28c42:	4620      	mov	r0, r4
   28c44:	f7ff ff76 	bl	28b34 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   28c48:	b188      	cbz	r0, 28c6e <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
   28c4a:	4b0f      	ldr	r3, [pc, #60]	; (28c88 <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   28c4c:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   28c50:	b168      	cbz	r0, 28c6e <usb_halt_endpoint_req.isra.0+0x3a>
		if (halt) {
   28c52:	4e0d      	ldr	r6, [pc, #52]	; (28c88 <usb_halt_endpoint_req.isra.0+0x54>)
			usb_dc_ep_set_stall(ep);
   28c54:	4620      	mov	r0, r4
		if (halt) {
   28c56:	b165      	cbz	r5, 28c72 <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
   28c58:	f014 fe6c 	bl	3d934 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   28c5c:	69f3      	ldr	r3, [r6, #28]
   28c5e:	b90b      	cbnz	r3, 28c64 <usb_halt_endpoint_req.isra.0+0x30>
		return true;
   28c60:	2001      	movs	r0, #1
   28c62:	e004      	b.n	28c6e <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   28c64:	2008      	movs	r0, #8
   28c66:	f10d 0107 	add.w	r1, sp, #7
   28c6a:	4798      	blx	r3
		return true;
   28c6c:	4628      	mov	r0, r5
}
   28c6e:	b002      	add	sp, #8
   28c70:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   28c72:	f014 fe87 	bl	3d984 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   28c76:	69f3      	ldr	r3, [r6, #28]
   28c78:	2b00      	cmp	r3, #0
   28c7a:	d0f1      	beq.n	28c60 <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   28c7c:	f10d 0107 	add.w	r1, sp, #7
   28c80:	2009      	movs	r0, #9
   28c82:	4798      	blx	r3
   28c84:	e7ec      	b.n	28c60 <usb_halt_endpoint_req.isra.0+0x2c>
   28c86:	bf00      	nop
   28c88:	200019d4 	.word	0x200019d4

00028c8c <usb_handle_standard_request>:
{
   28c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   28c90:	4ea4      	ldr	r6, [pc, #656]	; (28f24 <usb_handle_standard_request+0x298>)
   28c92:	69b3      	ldr	r3, [r6, #24]
{
   28c94:	4605      	mov	r5, r0
   28c96:	460c      	mov	r4, r1
   28c98:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
   28c9a:	b963      	cbnz	r3, 28cb6 <usb_handle_standard_request+0x2a>
	switch (setup->RequestType.recipient) {
   28c9c:	7828      	ldrb	r0, [r5, #0]
   28c9e:	f000 001f 	and.w	r0, r0, #31
   28ca2:	2801      	cmp	r0, #1
   28ca4:	f000 80a6 	beq.w	28df4 <usb_handle_standard_request+0x168>
   28ca8:	2802      	cmp	r0, #2
   28caa:	f000 8110 	beq.w	28ece <usb_handle_standard_request+0x242>
   28cae:	b138      	cbz	r0, 28cc0 <usb_handle_standard_request+0x34>
		switch (setup->bRequest) {
   28cb0:	f06f 0015 	mvn.w	r0, #21
   28cb4:	e095      	b.n	28de2 <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   28cb6:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   28cb8:	2800      	cmp	r0, #0
   28cba:	d1ef      	bne.n	28c9c <usb_handle_standard_request+0x10>
	int rc = 0;
   28cbc:	2000      	movs	r0, #0
   28cbe:	e090      	b.n	28de2 <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
   28cc0:	f995 2000 	ldrsb.w	r2, [r5]
	uint8_t *data = *data_buf;
   28cc4:	6839      	ldr	r1, [r7, #0]
		switch (setup->bRequest) {
   28cc6:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   28cc8:	2a00      	cmp	r2, #0
   28cca:	da2e      	bge.n	28d2a <usb_handle_standard_request+0x9e>
		switch (setup->bRequest) {
   28ccc:	2b06      	cmp	r3, #6
   28cce:	d00f      	beq.n	28cf0 <usb_handle_standard_request+0x64>
   28cd0:	2b08      	cmp	r3, #8
   28cd2:	d024      	beq.n	28d1e <usb_handle_standard_request+0x92>
   28cd4:	2b00      	cmp	r3, #0
   28cd6:	d1eb      	bne.n	28cb0 <usb_handle_standard_request+0x24>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   28cd8:	2201      	movs	r2, #1
   28cda:	700a      	strb	r2, [r1, #0]
	data[1] = 0U;
   28cdc:	704b      	strb	r3, [r1, #1]
		data[0] |= (usb_dev.remote_wakeup ?
   28cde:	f896 20c3 	ldrb.w	r2, [r6, #195]	; 0xc3
   28ce2:	0052      	lsls	r2, r2, #1
   28ce4:	f042 0201 	orr.w	r2, r2, #1
   28ce8:	700a      	strb	r2, [r1, #0]
	*len = 2;
   28cea:	2202      	movs	r2, #2
   28cec:	6022      	str	r2, [r4, #0]
	return true;
   28cee:	e7e5      	b.n	28cbc <usb_handle_standard_request+0x30>
			return usb_get_descriptor(setup, len, data_buf);
   28cf0:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   28cf2:	0a19      	lsrs	r1, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   28cf4:	1f0a      	subs	r2, r1, #4
   28cf6:	2a01      	cmp	r2, #1
   28cf8:	d9da      	bls.n	28cb0 <usb_handle_standard_request+0x24>
   28cfa:	2907      	cmp	r1, #7
   28cfc:	d8d8      	bhi.n	28cb0 <usb_handle_standard_request+0x24>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
   28cfe:	b2da      	uxtb	r2, r3
	p = (uint8_t *)usb_dev.descriptors;
   28d00:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
   28d02:	781d      	ldrb	r5, [r3, #0]
   28d04:	2d00      	cmp	r5, #0
   28d06:	d0d3      	beq.n	28cb0 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == type) {
   28d08:	785e      	ldrb	r6, [r3, #1]
   28d0a:	428e      	cmp	r6, r1
   28d0c:	d103      	bne.n	28d16 <usb_handle_standard_request+0x8a>
			if (cur_index == index) {
   28d0e:	4282      	cmp	r2, r0
   28d10:	f000 8117 	beq.w	28f42 <usb_handle_standard_request+0x2b6>
			cur_index++;
   28d14:	3001      	adds	r0, #1
		p += p[DESC_bLength];
   28d16:	442b      	add	r3, r5
   28d18:	e7f3      	b.n	28d02 <usb_handle_standard_request+0x76>
			*len = p[DESC_bLength];
   28d1a:	781b      	ldrb	r3, [r3, #0]
   28d1c:	e116      	b.n	28f4c <usb_handle_standard_request+0x2c0>
			data[0] = usb_dev.configuration;
   28d1e:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   28d22:	700b      	strb	r3, [r1, #0]
			*len = 1;
   28d24:	2301      	movs	r3, #1
		*len = 2;
   28d26:	6023      	str	r3, [r4, #0]
		return true;
   28d28:	e05b      	b.n	28de2 <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
   28d2a:	3b01      	subs	r3, #1
   28d2c:	2b08      	cmp	r3, #8
   28d2e:	d8bf      	bhi.n	28cb0 <usb_handle_standard_request+0x24>
   28d30:	a201      	add	r2, pc, #4	; (adr r2, 28d38 <usb_handle_standard_request+0xac>)
   28d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   28d36:	bf00      	nop
   28d38:	00028dd5 	.word	0x00028dd5
   28d3c:	00028cb1 	.word	0x00028cb1
   28d40:	00028de7 	.word	0x00028de7
   28d44:	00028cb1 	.word	0x00028cb1
   28d48:	00028d5d 	.word	0x00028d5d
   28d4c:	00028cb1 	.word	0x00028cb1
   28d50:	00028cb1 	.word	0x00028cb1
   28d54:	00028cb1 	.word	0x00028cb1
   28d58:	00028d69 	.word	0x00028d69
			return !usb_dc_set_address(setup->wValue);
   28d5c:	78a8      	ldrb	r0, [r5, #2]
   28d5e:	f014 fdb5 	bl	3d8cc <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   28d62:	2800      	cmp	r0, #0
   28d64:	d0aa      	beq.n	28cbc <usb_handle_standard_request+0x30>
   28d66:	e7a3      	b.n	28cb0 <usb_handle_standard_request+0x24>
	if (setup->wValue == 0U) {
   28d68:	886c      	ldrh	r4, [r5, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   28d6a:	6a77      	ldr	r7, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
   28d6c:	bb6c      	cbnz	r4, 28dca <usb_handle_standard_request+0x13e>
		usb_reset_alt_setting();
   28d6e:	f7ff fed9 	bl	28b24 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   28d72:	886b      	ldrh	r3, [r5, #2]
   28d74:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
   28d78:	69f3      	ldr	r3, [r6, #28]
   28d7a:	2b00      	cmp	r3, #0
   28d7c:	d09e      	beq.n	28cbc <usb_handle_standard_request+0x30>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   28d7e:	496a      	ldr	r1, [pc, #424]	; (28f28 <usb_handle_standard_request+0x29c>)
   28d80:	2003      	movs	r0, #3
   28d82:	4798      	blx	r3
   28d84:	e79a      	b.n	28cbc <usb_handle_standard_request+0x30>
		switch (p[DESC_bDescriptorType]) {
   28d86:	787b      	ldrb	r3, [r7, #1]
   28d88:	2b04      	cmp	r3, #4
   28d8a:	d011      	beq.n	28db0 <usb_handle_standard_request+0x124>
   28d8c:	2b05      	cmp	r3, #5
   28d8e:	d012      	beq.n	28db6 <usb_handle_standard_request+0x12a>
   28d90:	2b02      	cmp	r3, #2
   28d92:	d105      	bne.n	28da0 <usb_handle_standard_request+0x114>
			cur_config = p[CONF_DESC_bConfigurationValue];
   28d94:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
   28d98:	886a      	ldrh	r2, [r5, #2]
				found = true;
   28d9a:	4542      	cmp	r2, r8
   28d9c:	bf08      	it	eq
   28d9e:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   28da0:	783b      	ldrb	r3, [r7, #0]
   28da2:	441f      	add	r7, r3
	while (p[DESC_bLength] != 0U) {
   28da4:	783c      	ldrb	r4, [r7, #0]
   28da6:	2c00      	cmp	r4, #0
   28da8:	d1ed      	bne.n	28d86 <usb_handle_standard_request+0xfa>
	if (found) {
   28daa:	2800      	cmp	r0, #0
   28dac:	d080      	beq.n	28cb0 <usb_handle_standard_request+0x24>
   28dae:	e7de      	b.n	28d6e <usb_handle_standard_request+0xe2>
			cur_alt_setting =
   28db0:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
   28db4:	e7f4      	b.n	28da0 <usb_handle_standard_request+0x114>
			if ((cur_config != setup->wValue) ||
   28db6:	886b      	ldrh	r3, [r5, #2]
   28db8:	4543      	cmp	r3, r8
   28dba:	d1f1      	bne.n	28da0 <usb_handle_standard_request+0x114>
   28dbc:	f1b9 0f00 	cmp.w	r9, #0
   28dc0:	d1ee      	bne.n	28da0 <usb_handle_standard_request+0x114>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   28dc2:	4638      	mov	r0, r7
   28dc4:	f7ff fe84 	bl	28ad0 <set_endpoint>
			break;
   28dc8:	e7ea      	b.n	28da0 <usb_handle_standard_request+0x114>
	uint8_t cur_config = 0xFF;
   28dca:	f04f 08ff 	mov.w	r8, #255	; 0xff
	bool found = false;
   28dce:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
   28dd0:	46c1      	mov	r9, r8
   28dd2:	e7e7      	b.n	28da4 <usb_handle_standard_request+0x118>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   28dd4:	886b      	ldrh	r3, [r5, #2]
   28dd6:	2b01      	cmp	r3, #1
   28dd8:	f47f af6a 	bne.w	28cb0 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = false;
   28ddc:	2000      	movs	r0, #0
   28dde:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
   28de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   28de6:	886b      	ldrh	r3, [r5, #2]
   28de8:	2b01      	cmp	r3, #1
   28dea:	f47f af61 	bne.w	28cb0 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = true;
   28dee:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
   28df2:	e763      	b.n	28cbc <usb_handle_standard_request+0x30>
	if (!is_device_configured() ||
   28df4:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   28df8:	683a      	ldr	r2, [r7, #0]
   28dfa:	2b00      	cmp	r3, #0
   28dfc:	f43f af58 	beq.w	28cb0 <usb_handle_standard_request+0x24>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   28e00:	6a77      	ldr	r7, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   28e02:	f8b5 c004 	ldrh.w	ip, [r5, #4]
   28e06:	f895 e004 	ldrb.w	lr, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   28e0a:	463b      	mov	r3, r7
	while (p[DESC_bLength] != 0U) {
   28e0c:	7818      	ldrb	r0, [r3, #0]
   28e0e:	2800      	cmp	r0, #0
   28e10:	f43f af4e 	beq.w	28cb0 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   28e14:	7859      	ldrb	r1, [r3, #1]
   28e16:	2902      	cmp	r1, #2
   28e18:	d104      	bne.n	28e24 <usb_handle_standard_request+0x198>
			if (interface < cfg_descr->bNumInterfaces) {
   28e1a:	f893 8004 	ldrb.w	r8, [r3, #4]
   28e1e:	45f0      	cmp	r8, lr
   28e20:	f200 8096 	bhi.w	28f50 <usb_handle_standard_request+0x2c4>
		p += p[DESC_bLength];
   28e24:	4403      	add	r3, r0
   28e26:	e7f1      	b.n	28e0c <usb_handle_standard_request+0x180>
			data[0] = 0U;
   28e28:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
   28e2a:	7050      	strb	r0, [r2, #1]
			*len = 2;
   28e2c:	6021      	str	r1, [r4, #0]
			return true;
   28e2e:	e7d8      	b.n	28de2 <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
   28e30:	440f      	add	r7, r1
   28e32:	e099      	b.n	28f68 <usb_handle_standard_request+0x2dc>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   28e34:	280b      	cmp	r0, #11
   28e36:	f47f af3b 	bne.w	28cb0 <usb_handle_standard_request+0x24>
	bool ret = false;
   28e3a:	2400      	movs	r4, #0
	uint8_t cur_iface = 0xFF;
   28e3c:	f04f 0aff 	mov.w	sl, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   28e40:	46d0      	mov	r8, sl
	const uint8_t *if_desc = NULL;
   28e42:	46a1      	mov	r9, r4
   28e44:	e006      	b.n	28e54 <usb_handle_standard_request+0x1c8>
		switch (p[DESC_bDescriptorType]) {
   28e46:	787b      	ldrb	r3, [r7, #1]
   28e48:	2b04      	cmp	r3, #4
   28e4a:	d00f      	beq.n	28e6c <usb_handle_standard_request+0x1e0>
   28e4c:	2b05      	cmp	r3, #5
   28e4e:	d022      	beq.n	28e96 <usb_handle_standard_request+0x20a>
		p += p[DESC_bLength];
   28e50:	783b      	ldrb	r3, [r7, #0]
   28e52:	441f      	add	r7, r3
	while (p[DESC_bLength] != 0U) {
   28e54:	783b      	ldrb	r3, [r7, #0]
   28e56:	2b00      	cmp	r3, #0
   28e58:	d1f5      	bne.n	28e46 <usb_handle_standard_request+0x1ba>
	if (usb_dev.status_callback) {
   28e5a:	69f3      	ldr	r3, [r6, #28]
   28e5c:	b113      	cbz	r3, 28e64 <usb_handle_standard_request+0x1d8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   28e5e:	4649      	mov	r1, r9
   28e60:	2007      	movs	r0, #7
   28e62:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   28e64:	2c00      	cmp	r4, #0
   28e66:	f47f af29 	bne.w	28cbc <usb_handle_standard_request+0x30>
   28e6a:	e721      	b.n	28cb0 <usb_handle_standard_request+0x24>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   28e6c:	f897 a002 	ldrb.w	sl, [r7, #2]
			if (cur_iface == setup->wIndex &&
   28e70:	88aa      	ldrh	r2, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   28e72:	f897 8003 	ldrb.w	r8, [r7, #3]
			if (cur_iface == setup->wIndex &&
   28e76:	4592      	cmp	sl, r2
   28e78:	4653      	mov	r3, sl
   28e7a:	d1e9      	bne.n	28e50 <usb_handle_standard_request+0x1c4>
			    cur_alt_setting == setup->wValue) {
   28e7c:	8869      	ldrh	r1, [r5, #2]
			if (cur_iface == setup->wIndex &&
   28e7e:	4588      	cmp	r8, r1
   28e80:	fa1f f288 	uxth.w	r2, r8
   28e84:	d1e4      	bne.n	28e50 <usb_handle_standard_request+0x1c4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   28e86:	2b07      	cmp	r3, #7
   28e88:	d81e      	bhi.n	28ec8 <usb_handle_standard_request+0x23c>
		usb_dev.alt_setting[iface] = alt_setting;
   28e8a:	4433      	add	r3, r6
		return true;
   28e8c:	46b9      	mov	r9, r7
				ret = usb_set_alt_setting(setup->wIndex,
   28e8e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
   28e92:	2401      	movs	r4, #1
   28e94:	e7dc      	b.n	28e50 <usb_handle_standard_request+0x1c4>
			if (cur_iface == setup->wIndex) {
   28e96:	88ab      	ldrh	r3, [r5, #4]
   28e98:	4553      	cmp	r3, sl
   28e9a:	d1d9      	bne.n	28e50 <usb_handle_standard_request+0x1c4>
	if (cur_alt_setting != alt_setting) {
   28e9c:	78ab      	ldrb	r3, [r5, #2]
   28e9e:	4543      	cmp	r3, r8
   28ea0:	d00d      	beq.n	28ebe <usb_handle_standard_request+0x232>
		ret = reset_endpoint(ep_desc);
   28ea2:	78bc      	ldrb	r4, [r7, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   28ea4:	4620      	mov	r0, r4
   28ea6:	f000 fb6b 	bl	29580 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
   28eaa:	4620      	mov	r0, r4
   28eac:	f014 fdd0 	bl	3da50 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   28eb0:	f110 0f78 	cmn.w	r0, #120	; 0x78
   28eb4:	d0ed      	beq.n	28e92 <usb_handle_standard_request+0x206>
	} else if (ret) {
   28eb6:	fab0 f480 	clz	r4, r0
   28eba:	0964      	lsrs	r4, r4, #5
   28ebc:	e7c8      	b.n	28e50 <usb_handle_standard_request+0x1c4>
		ret = set_endpoint(ep_desc);
   28ebe:	4638      	mov	r0, r7
   28ec0:	f7ff fe06 	bl	28ad0 <set_endpoint>
   28ec4:	4604      	mov	r4, r0
   28ec6:	e7c3      	b.n	28e50 <usb_handle_standard_request+0x1c4>
   28ec8:	46b9      	mov	r9, r7
	return false;
   28eca:	2400      	movs	r4, #0
   28ecc:	e7c0      	b.n	28e50 <usb_handle_standard_request+0x1c4>
	if (usb_reqtype_is_to_host(setup)) {
   28ece:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
   28ed2:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   28ed4:	2a00      	cmp	r2, #0
   28ed6:	da19      	bge.n	28f0c <usb_handle_standard_request+0x280>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   28ed8:	2b00      	cmp	r3, #0
   28eda:	f47f aee9 	bne.w	28cb0 <usb_handle_standard_request+0x24>
	uint8_t ep = setup->wIndex;
   28ede:	792d      	ldrb	r5, [r5, #4]
   28ee0:	683f      	ldr	r7, [r7, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
   28ee2:	066b      	lsls	r3, r5, #25
   28ee4:	d00a      	beq.n	28efc <usb_handle_standard_request+0x270>
   28ee6:	4628      	mov	r0, r5
   28ee8:	f7ff fe24 	bl	28b34 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   28eec:	2800      	cmp	r0, #0
   28eee:	f43f aedf 	beq.w	28cb0 <usb_handle_standard_request+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   28ef2:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   28ef6:	2b00      	cmp	r3, #0
   28ef8:	f43f aeda 	beq.w	28cb0 <usb_handle_standard_request+0x24>
		usb_dc_ep_is_stalled(ep, &data[0]);
   28efc:	4639      	mov	r1, r7
   28efe:	4628      	mov	r0, r5
   28f00:	f014 fd60 	bl	3d9c4 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   28f04:	2000      	movs	r0, #0
   28f06:	7078      	strb	r0, [r7, #1]
		*len = 2;
   28f08:	2302      	movs	r3, #2
   28f0a:	e70c      	b.n	28d26 <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
   28f0c:	2b01      	cmp	r3, #1
   28f0e:	d00d      	beq.n	28f2c <usb_handle_standard_request+0x2a0>
   28f10:	2b03      	cmp	r3, #3
   28f12:	f47f aecd 	bne.w	28cb0 <usb_handle_standard_request+0x24>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   28f16:	886b      	ldrh	r3, [r5, #2]
   28f18:	2b00      	cmp	r3, #0
   28f1a:	f47f aec9 	bne.w	28cb0 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
   28f1e:	2101      	movs	r1, #1
   28f20:	e008      	b.n	28f34 <usb_handle_standard_request+0x2a8>
   28f22:	bf00      	nop
   28f24:	200019d4 	.word	0x200019d4
   28f28:	20001a8e 	.word	0x20001a8e
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   28f2c:	8869      	ldrh	r1, [r5, #2]
   28f2e:	2900      	cmp	r1, #0
   28f30:	f47f aebe 	bne.w	28cb0 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
   28f34:	88a8      	ldrh	r0, [r5, #4]
   28f36:	f7ff fe7d 	bl	28c34 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   28f3a:	2800      	cmp	r0, #0
   28f3c:	f47f aebe 	bne.w	28cbc <usb_handle_standard_request+0x30>
   28f40:	e6b6      	b.n	28cb0 <usb_handle_standard_request+0x24>
		if (type == USB_DESC_CONFIGURATION) {
   28f42:	2902      	cmp	r1, #2
		*data = p;
   28f44:	603b      	str	r3, [r7, #0]
		if (type == USB_DESC_CONFIGURATION) {
   28f46:	f47f aee8 	bne.w	28d1a <usb_handle_standard_request+0x8e>
			*len = (p[CONF_DESC_wTotalLength]) |
   28f4a:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
   28f4c:	6023      	str	r3, [r4, #0]
   28f4e:	e6b5      	b.n	28cbc <usb_handle_standard_request+0x30>
	if (usb_reqtype_is_to_host(setup)) {
   28f50:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
   28f54:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   28f56:	2b00      	cmp	r3, #0
   28f58:	f6bf af6c 	bge.w	28e34 <usb_handle_standard_request+0x1a8>
		switch (setup->bRequest) {
   28f5c:	2800      	cmp	r0, #0
   28f5e:	f43f af63 	beq.w	28e28 <usb_handle_standard_request+0x19c>
   28f62:	280a      	cmp	r0, #10
   28f64:	f47f aea4 	bne.w	28cb0 <usb_handle_standard_request+0x24>
	while (p[DESC_bLength] != 0U) {
   28f68:	7839      	ldrb	r1, [r7, #0]
   28f6a:	2900      	cmp	r1, #0
   28f6c:	f43f aea0 	beq.w	28cb0 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   28f70:	787b      	ldrb	r3, [r7, #1]
   28f72:	2b04      	cmp	r3, #4
   28f74:	f47f af5c 	bne.w	28e30 <usb_handle_standard_request+0x1a4>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   28f78:	78bb      	ldrb	r3, [r7, #2]
			if (cur_iface == setup->wIndex) {
   28f7a:	459c      	cmp	ip, r3
   28f7c:	f47f af58 	bne.w	28e30 <usb_handle_standard_request+0x1a4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   28f80:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
   28f82:	bf96      	itet	ls
   28f84:	199b      	addls	r3, r3, r6
	return 0;
   28f86:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   28f88:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   28f8c:	7013      	strb	r3, [r2, #0]
				*len = 1;
   28f8e:	2301      	movs	r3, #1
   28f90:	e7dc      	b.n	28f4c <usb_handle_standard_request+0x2c0>
   28f92:	bf00      	nop

00028f94 <usb_data_to_host>:
{
   28f94:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   28f96:	4c13      	ldr	r4, [pc, #76]	; (28fe4 <usb_data_to_host+0x50>)
   28f98:	7d23      	ldrb	r3, [r4, #20]
   28f9a:	b9cb      	cbnz	r3, 28fd0 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
   28f9c:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   28f9e:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   28fa0:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   28fa2:	ab01      	add	r3, sp, #4
   28fa4:	2080      	movs	r0, #128	; 0x80
   28fa6:	f01a fc02 	bl	437ae <usb_write>
		usb_dev.data_buf += chunk;
   28faa:	9a01      	ldr	r2, [sp, #4]
   28fac:	68a3      	ldr	r3, [r4, #8]
   28fae:	4413      	add	r3, r2
   28fb0:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   28fb2:	68e3      	ldr	r3, [r4, #12]
   28fb4:	1a9b      	subs	r3, r3, r2
   28fb6:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   28fb8:	b943      	cbnz	r3, 28fcc <usb_data_to_host+0x38>
   28fba:	b13a      	cbz	r2, 28fcc <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   28fbc:	6923      	ldr	r3, [r4, #16]
   28fbe:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   28fc0:	429a      	cmp	r2, r3
   28fc2:	dd03      	ble.n	28fcc <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   28fc4:	069b      	lsls	r3, r3, #26
   28fc6:	d101      	bne.n	28fcc <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
   28fc8:	2301      	movs	r3, #1
   28fca:	7523      	strb	r3, [r4, #20]
}
   28fcc:	b002      	add	sp, #8
   28fce:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   28fd0:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   28fd2:	461a      	mov	r2, r3
   28fd4:	4619      	mov	r1, r3
   28fd6:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   28fd8:	7523      	strb	r3, [r4, #20]
}
   28fda:	b002      	add	sp, #8
   28fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   28fe0:	f014 bd5c 	b.w	3da9c <usb_dc_ep_write>
   28fe4:	200019d4 	.word	0x200019d4

00028fe8 <usb_handle_control_transfer>:
{
   28fe8:	b530      	push	{r4, r5, lr}
   28fea:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   28fec:	2300      	movs	r3, #0
{
   28fee:	4602      	mov	r2, r0
   28ff0:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
   28ff2:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   28ff4:	2800      	cmp	r0, #0
   28ff6:	d158      	bne.n	290aa <usb_handle_control_transfer+0xc2>
   28ff8:	2900      	cmp	r1, #0
   28ffa:	d135      	bne.n	29068 <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   28ffc:	2208      	movs	r2, #8
   28ffe:	460b      	mov	r3, r1
   29000:	eb0d 0102 	add.w	r1, sp, r2
   29004:	f01e feb9 	bl	47d7a <usb_dc_ep_read>
   29008:	2800      	cmp	r0, #0
   2900a:	da04      	bge.n	29016 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   2900c:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2900e:	f014 fc91 	bl	3d934 <usb_dc_ep_set_stall>
}
   29012:	b005      	add	sp, #20
   29014:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   29016:	4c2a      	ldr	r4, [pc, #168]	; (290c0 <usb_handle_control_transfer+0xd8>)
   29018:	9a02      	ldr	r2, [sp, #8]
   2901a:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   2901c:	9a03      	ldr	r2, [sp, #12]
   2901e:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
   29020:	f104 0238 	add.w	r2, r4, #56	; 0x38
   29024:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
   29026:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   2902a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
   2902e:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
   29030:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
   29032:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
   29036:	db0a      	blt.n	2904e <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   29038:	2b80      	cmp	r3, #128	; 0x80
   2903a:	d904      	bls.n	29046 <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   2903c:	2080      	movs	r0, #128	; 0x80
   2903e:	f014 fc79 	bl	3d934 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   29042:	2000      	movs	r0, #0
   29044:	e7e3      	b.n	2900e <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   29046:	b113      	cbz	r3, 2904e <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
   29048:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
   2904c:	e7e1      	b.n	29012 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
   2904e:	f7ff fd8d 	bl	28b6c <usb_handle_request.constprop.0>
   29052:	2800      	cmp	r0, #0
   29054:	d0da      	beq.n	2900c <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   29056:	88e2      	ldrh	r2, [r4, #6]
   29058:	6923      	ldr	r3, [r4, #16]
   2905a:	429a      	cmp	r2, r3
   2905c:	bfd4      	ite	le
   2905e:	60e2      	strle	r2, [r4, #12]
   29060:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   29062:	f7ff ff97 	bl	28f94 <usb_data_to_host>
   29066:	e7d4      	b.n	29012 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   29068:	4c15      	ldr	r4, [pc, #84]	; (290c0 <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2906a:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
   2906e:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   29070:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   29072:	dc04      	bgt.n	2907e <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   29074:	f01e fe81 	bl	47d7a <usb_dc_ep_read>
   29078:	2800      	cmp	r0, #0
   2907a:	daca      	bge.n	29012 <usb_handle_control_transfer+0x2a>
   2907c:	e7c6      	b.n	2900c <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2907e:	462a      	mov	r2, r5
   29080:	f01e fe7b 	bl	47d7a <usb_dc_ep_read>
   29084:	2800      	cmp	r0, #0
   29086:	dbd9      	blt.n	2903c <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
   29088:	9a01      	ldr	r2, [sp, #4]
   2908a:	68a3      	ldr	r3, [r4, #8]
   2908c:	4413      	add	r3, r2
   2908e:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   29090:	68e3      	ldr	r3, [r4, #12]
   29092:	1a9b      	subs	r3, r3, r2
   29094:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   29096:	2b00      	cmp	r3, #0
   29098:	d1bb      	bne.n	29012 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   2909a:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2909e:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
   290a0:	f7ff fd64 	bl	28b6c <usb_handle_request.constprop.0>
   290a4:	2800      	cmp	r0, #0
   290a6:	d1dc      	bne.n	29062 <usb_handle_control_transfer+0x7a>
   290a8:	e7b0      	b.n	2900c <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   290aa:	2880      	cmp	r0, #128	; 0x80
   290ac:	d1b1      	bne.n	29012 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   290ae:	4b04      	ldr	r3, [pc, #16]	; (290c0 <usb_handle_control_transfer+0xd8>)
   290b0:	68da      	ldr	r2, [r3, #12]
   290b2:	2a00      	cmp	r2, #0
   290b4:	d1d5      	bne.n	29062 <usb_handle_control_transfer+0x7a>
   290b6:	7d1b      	ldrb	r3, [r3, #20]
   290b8:	2b00      	cmp	r3, #0
   290ba:	d1d2      	bne.n	29062 <usb_handle_control_transfer+0x7a>
   290bc:	e7a9      	b.n	29012 <usb_handle_control_transfer+0x2a>
   290be:	bf00      	nop
   290c0:	200019d4 	.word	0x200019d4

000290c4 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   290c4:	4b05      	ldr	r3, [pc, #20]	; (290dc <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   290c6:	4a06      	ldr	r2, [pc, #24]	; (290e0 <usb_set_config+0x1c>)
   290c8:	629a      	str	r2, [r3, #40]	; 0x28
   290ca:	4a06      	ldr	r2, [pc, #24]	; (290e4 <usb_set_config+0x20>)
   290cc:	62da      	str	r2, [r3, #44]	; 0x2c
   290ce:	4a06      	ldr	r2, [pc, #24]	; (290e8 <usb_set_config+0x24>)
   290d0:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   290d2:	4a06      	ldr	r2, [pc, #24]	; (290ec <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   290d4:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   290d6:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
   290d8:	2000      	movs	r0, #0
   290da:	4770      	bx	lr
   290dc:	200019d4 	.word	0x200019d4
   290e0:	00028c8d 	.word	0x00028c8d
   290e4:	000289f5 	.word	0x000289f5
   290e8:	00028a95 	.word	0x00028a95
   290ec:	00028a35 	.word	0x00028a35

000290f0 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   290f0:	4b08      	ldr	r3, [pc, #32]	; (29114 <usb_device_init+0x24>)
{
   290f2:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
   290f4:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   290f8:	b934      	cbnz	r4, 29108 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   290fa:	f000 f8cb 	bl	29294 <usb_get_device_descriptor>
	if (!device_descriptor) {
   290fe:	b130      	cbz	r0, 2910e <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   29100:	f7ff ffe0 	bl	290c4 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
   29104:	4620      	mov	r0, r4
}
   29106:	bd10      	pop	{r4, pc}
		return -EALREADY;
   29108:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2910c:	e7fb      	b.n	29106 <usb_device_init+0x16>
		return -1;
   2910e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29112:	e7f8      	b.n	29106 <usb_device_init+0x16>
   29114:	200019d4 	.word	0x200019d4

00029118 <usb_enable>:
{
   29118:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2911c:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
   2911e:	4d35      	ldr	r5, [pc, #212]	; (291f4 <usb_enable+0xdc>)
	return z_impl_k_mutex_lock(mutex, timeout);
   29120:	4835      	ldr	r0, [pc, #212]	; (291f8 <usb_enable+0xe0>)
   29122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2912a:	f018 f973 	bl	41414 <z_impl_k_mutex_lock>
   2912e:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   29132:	2e00      	cmp	r6, #0
   29134:	d15b      	bne.n	291ee <usb_enable+0xd6>
	usb_dev.status_callback = cb;
   29136:	4831      	ldr	r0, [pc, #196]	; (291fc <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
   29138:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   2913a:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
   2913c:	f014 fdc4 	bl	3dcc8 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
   29140:	f014 fb86 	bl	3d850 <usb_dc_attach>
	if (ret < 0) {
   29144:	1e04      	subs	r4, r0, #0
   29146:	db36      	blt.n	291b6 <usb_enable+0x9e>
	ret = usb_transfer_init();
   29148:	f000 fa60 	bl	2960c <usb_transfer_init>
	if (ret < 0) {
   2914c:	1e04      	subs	r4, r0, #0
   2914e:	db32      	blt.n	291b6 <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   29150:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
   29152:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   29154:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   29158:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   2915c:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   29160:	f014 fbc6 	bl	3d8f0 <usb_dc_ep_configure>
	if (ret < 0) {
   29164:	1e04      	subs	r4, r0, #0
   29166:	db26      	blt.n	291b6 <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   29168:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   2916a:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   2916c:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   29170:	f014 fbbe 	bl	3d8f0 <usb_dc_ep_configure>
	if (ret < 0) {
   29174:	1e04      	subs	r4, r0, #0
   29176:	db1e      	blt.n	291b6 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   29178:	4921      	ldr	r1, [pc, #132]	; (29200 <usb_enable+0xe8>)
   2917a:	4630      	mov	r0, r6
   2917c:	f014 fd90 	bl	3dca0 <usb_dc_ep_set_callback>
	if (ret < 0) {
   29180:	1e04      	subs	r4, r0, #0
   29182:	db18      	blt.n	291b6 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   29184:	491e      	ldr	r1, [pc, #120]	; (29200 <usb_enable+0xe8>)
   29186:	4638      	mov	r0, r7
   29188:	f014 fd8a 	bl	3dca0 <usb_dc_ep_set_callback>
	if (ret < 0) {
   2918c:	1e04      	subs	r4, r0, #0
   2918e:	db12      	blt.n	291b6 <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   29190:	4c1c      	ldr	r4, [pc, #112]	; (29204 <usb_enable+0xec>)
   29192:	f8df 8074 	ldr.w	r8, [pc, #116]	; 29208 <usb_enable+0xf0>
   29196:	4544      	cmp	r4, r8
   29198:	d314      	bcc.n	291c4 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   2919a:	2000      	movs	r0, #0
   2919c:	f014 fc2e 	bl	3d9fc <usb_dc_ep_enable>
	if (ret < 0) {
   291a0:	1e04      	subs	r4, r0, #0
   291a2:	db08      	blt.n	291b6 <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   291a4:	2080      	movs	r0, #128	; 0x80
   291a6:	f014 fc29 	bl	3d9fc <usb_dc_ep_enable>
	if (ret < 0) {
   291aa:	1e04      	subs	r4, r0, #0
   291ac:	db03      	blt.n	291b6 <usb_enable+0x9e>
	usb_dev.enabled = true;
   291ae:	2301      	movs	r3, #1
   291b0:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   291b4:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   291b6:	4810      	ldr	r0, [pc, #64]	; (291f8 <usb_enable+0xe0>)
   291b8:	f018 f9a4 	bl	41504 <z_impl_k_mutex_unlock>
}
   291bc:	4620      	mov	r0, r4
   291be:	b002      	add	sp, #8
   291c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
   291c4:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   291c6:	2600      	movs	r6, #0
   291c8:	7f22      	ldrb	r2, [r4, #28]
   291ca:	b2f3      	uxtb	r3, r6
   291cc:	429a      	cmp	r2, r3
   291ce:	d801      	bhi.n	291d4 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   291d0:	3424      	adds	r4, #36	; 0x24
   291d2:	e7e0      	b.n	29196 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   291d4:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   291d8:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   291dc:	7910      	ldrb	r0, [r2, #4]
   291de:	f014 fd5f 	bl	3dca0 <usb_dc_ep_set_callback>
   291e2:	3601      	adds	r6, #1
   291e4:	2800      	cmp	r0, #0
   291e6:	d0ef      	beq.n	291c8 <usb_enable+0xb0>
   291e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   291ec:	e7e3      	b.n	291b6 <usb_enable+0x9e>
		ret = -EALREADY;
   291ee:	f06f 0477 	mvn.w	r4, #119	; 0x77
   291f2:	e7e0      	b.n	291b6 <usb_enable+0x9e>
   291f4:	200019d4 	.word	0x200019d4
   291f8:	20000b38 	.word	0x20000b38
   291fc:	00028b99 	.word	0x00028b99
   29200:	00028fe9 	.word	0x00028fe9
   29204:	20000da1 	.word	0x20000da1
   29208:	20000da1 	.word	0x20000da1

0002920c <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   2920c:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   2920e:	4b1f      	ldr	r3, [pc, #124]	; (2928c <usb_update_sn_string_descriptor+0x80>)
{
   29210:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   29212:	aa05      	add	r2, sp, #20
   29214:	f103 0510 	add.w	r5, r3, #16
   29218:	6818      	ldr	r0, [r3, #0]
   2921a:	6859      	ldr	r1, [r3, #4]
   2921c:	4614      	mov	r4, r2
   2921e:	c403      	stmia	r4!, {r0, r1}
   29220:	3308      	adds	r3, #8
   29222:	42ab      	cmp	r3, r5
   29224:	4622      	mov	r2, r4
   29226:	d1f7      	bne.n	29218 <usb_update_sn_string_descriptor+0xc>
   29228:	781b      	ldrb	r3, [r3, #0]
   2922a:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   2922c:	2210      	movs	r2, #16
   2922e:	2100      	movs	r1, #0
   29230:	a801      	add	r0, sp, #4
   29232:	f01b fdf1 	bl	44e18 <memset>
	memset(sn, 0, sizeof(sn));
   29236:	2212      	movs	r2, #18
   29238:	2100      	movs	r1, #0
   2923a:	4815      	ldr	r0, [pc, #84]	; (29290 <usb_update_sn_string_descriptor+0x84>)
   2923c:	f01b fdec 	bl	44e18 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   29240:	2110      	movs	r1, #16
   29242:	a801      	add	r0, sp, #4
   29244:	f01e fea4 	bl	47f90 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   29248:	2800      	cmp	r0, #0
   2924a:	dd1b      	ble.n	29284 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   2924c:	2808      	cmp	r0, #8
   2924e:	bfb8      	it	lt
   29250:	2008      	movlt	r0, #8
   29252:	3809      	subs	r0, #9
   29254:	ab01      	add	r3, sp, #4
   29256:	490e      	ldr	r1, [pc, #56]	; (29290 <usb_update_sn_string_descriptor+0x84>)
   29258:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   2925a:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2925c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   29260:	ac0a      	add	r4, sp, #40	; 0x28
   29262:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   29266:	f003 030f 	and.w	r3, r3, #15
   2926a:	3328      	adds	r3, #40	; 0x28
   2926c:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
   2926e:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   29270:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   29274:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   29278:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
   2927a:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2927c:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
   2927e:	f101 0102 	add.w	r1, r1, #2
   29282:	d1eb      	bne.n	2925c <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   29284:	4802      	ldr	r0, [pc, #8]	; (29290 <usb_update_sn_string_descriptor+0x84>)
   29286:	b00b      	add	sp, #44	; 0x2c
   29288:	bd30      	pop	{r4, r5, pc}
   2928a:	bf00      	nop
   2928c:	0004b10d 	.word	0x0004b10d
   29290:	20003bb2 	.word	0x20003bb2

00029294 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
   29294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29298:	4c65      	ldr	r4, [pc, #404]	; (29430 <usb_get_device_descriptor+0x19c>)
   2929a:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
   2929c:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
   2929e:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   292a2:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
   292a4:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
   292a6:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
   292a8:	7823      	ldrb	r3, [r4, #0]
   292aa:	b92b      	cbnz	r3, 292b8 <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
   292ac:	4b61      	ldr	r3, [pc, #388]	; (29434 <usb_get_device_descriptor+0x1a0>)
   292ae:	3402      	adds	r4, #2
   292b0:	429c      	cmp	r4, r3
   292b2:	d1f3      	bne.n	2929c <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   292b4:	485e      	ldr	r0, [pc, #376]	; (29430 <usb_get_device_descriptor+0x19c>)
   292b6:	e01d      	b.n	292f4 <usb_get_device_descriptor+0x60>
		switch (head->bDescriptorType) {
   292b8:	7863      	ldrb	r3, [r4, #1]
   292ba:	2b05      	cmp	r3, #5
   292bc:	d805      	bhi.n	292ca <usb_get_device_descriptor+0x36>
   292be:	e8df f003 	tbb	[pc, r3]
   292c2:	0475      	.short	0x0475
   292c4:	1f077503 	.word	0x1f077503
   292c8:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   292ca:	7823      	ldrb	r3, [r4, #0]
   292cc:	441c      	add	r4, r3
   292ce:	e7eb      	b.n	292a8 <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
   292d0:	78e3      	ldrb	r3, [r4, #3]
   292d2:	2b00      	cmp	r3, #0
   292d4:	d1f9      	bne.n	292ca <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
   292d6:	78a3      	ldrb	r3, [r4, #2]
   292d8:	b17b      	cbz	r3, 292fa <usb_get_device_descriptor+0x66>
			numof_ifaces++;
   292da:	f109 0901 	add.w	r9, r9, #1
   292de:	fa5f f989 	uxtb.w	r9, r9
			break;
   292e2:	e7f2      	b.n	292ca <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
   292e4:	686a      	ldr	r2, [r5, #4]
   292e6:	4294      	cmp	r4, r2
   292e8:	f000 809a 	beq.w	29420 <usb_get_device_descriptor+0x18c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   292ec:	3524      	adds	r5, #36	; 0x24
   292ee:	429d      	cmp	r5, r3
   292f0:	d3f8      	bcc.n	292e4 <usb_get_device_descriptor+0x50>
		return NULL;
   292f2:	2000      	movs	r0, #0
}
   292f4:	b005      	add	sp, #20
   292f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   292fa:	4d4f      	ldr	r5, [pc, #316]	; (29438 <usb_get_device_descriptor+0x1a4>)
   292fc:	4b4f      	ldr	r3, [pc, #316]	; (2943c <usb_get_device_descriptor+0x1a8>)
   292fe:	e7f6      	b.n	292ee <usb_get_device_descriptor+0x5a>
			if (!cfg_data) {
   29300:	2d00      	cmp	r5, #0
   29302:	d0f6      	beq.n	292f2 <usb_get_device_descriptor+0x5e>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   29304:	2300      	movs	r3, #0
   29306:	2101      	movs	r1, #1
   29308:	7f2a      	ldrb	r2, [r5, #28]
   2930a:	4293      	cmp	r3, r2
   2930c:	d2f1      	bcs.n	292f2 <usb_get_device_descriptor+0x5e>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   2930e:	6a2a      	ldr	r2, [r5, #32]
   29310:	78a7      	ldrb	r7, [r4, #2]
   29312:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   29316:	7910      	ldrb	r0, [r2, #4]
   29318:	4287      	cmp	r7, r0
   2931a:	d001      	beq.n	29320 <usb_get_device_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2931c:	3301      	adds	r3, #1
   2931e:	e7f3      	b.n	29308 <usb_get_device_descriptor+0x74>
   29320:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   29322:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   29324:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   29328:	f000 0003 	and.w	r0, r0, #3
   2932c:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   29330:	7920      	ldrb	r0, [r4, #4]
   29332:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   29336:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2933a:	f994 0002 	ldrsb.w	r0, [r4, #2]
   2933e:	2800      	cmp	r0, #0
   29340:	fa5f f887 	uxtb.w	r8, r7
   29344:	da27      	bge.n	29396 <usb_get_device_descriptor+0x102>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   29346:	f107 0010 	add.w	r0, r7, #16
   2934a:	fa01 f000 	lsl.w	r0, r1, r0
   2934e:	ea10 0f0b 	tst.w	r0, fp
   29352:	d127      	bne.n	293a4 <usb_get_device_descriptor+0x110>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   29354:	f048 0080 	orr.w	r0, r8, #128	; 0x80
   29358:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   2935c:	a802      	add	r0, sp, #8
   2935e:	e9cd 3200 	strd	r3, r2, [sp]
   29362:	f01e fcf2 	bl	47d4a <usb_dc_ep_check_cap>
   29366:	e9dd 3200 	ldrd	r3, r2, [sp]
   2936a:	2101      	movs	r1, #1
   2936c:	b9d0      	cbnz	r0, 293a4 <usb_get_device_descriptor+0x110>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   2936e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   29372:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   29374:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
   29378:	bf18      	it	ne
   2937a:	f108 0810 	addne.w	r8, r8, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   2937e:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
   29380:	bf18      	it	ne
   29382:	fa5f f888 	uxtbne.w	r8, r8
   29386:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
   29388:	bf0c      	ite	eq
   2938a:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
   2938c:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
   29390:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
   29394:	e799      	b.n	292ca <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
   29396:	fa01 f007 	lsl.w	r0, r1, r7
   2939a:	ea10 0f0b 	tst.w	r0, fp
   2939e:	d101      	bne.n	293a4 <usb_get_device_descriptor+0x110>
   293a0:	4640      	mov	r0, r8
   293a2:	e7d9      	b.n	29358 <usb_get_device_descriptor+0xc4>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   293a4:	3701      	adds	r7, #1
   293a6:	2f10      	cmp	r7, #16
   293a8:	d1bb      	bne.n	29322 <usb_get_device_descriptor+0x8e>
   293aa:	e7b7      	b.n	2931c <usb_get_device_descriptor+0x88>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   293ac:	2e03      	cmp	r6, #3
   293ae:	d11d      	bne.n	293ec <usb_get_device_descriptor+0x158>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   293b0:	f7ff ff2c 	bl	2920c <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   293b4:	4607      	mov	r7, r0
   293b6:	b168      	cbz	r0, 293d4 <usb_get_device_descriptor+0x140>
	runtime_sn_len = strlen(runtime_sn);
   293b8:	f01b fcef 	bl	44d9a <strlen>
	if (!runtime_sn_len) {
   293bc:	4680      	mov	r8, r0
   293be:	b148      	cbz	r0, 293d4 <usb_get_device_descriptor+0x140>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   293c0:	481f      	ldr	r0, [pc, #124]	; (29440 <usb_get_device_descriptor+0x1ac>)
   293c2:	f01b fcea 	bl	44d9a <strlen>
	if (runtime_sn_len != default_sn_len) {
   293c6:	4580      	cmp	r8, r0
   293c8:	d104      	bne.n	293d4 <usb_get_device_descriptor+0x140>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   293ca:	4642      	mov	r2, r8
   293cc:	4639      	mov	r1, r7
   293ce:	1ca0      	adds	r0, r4, #2
   293d0:	f01b fd17 	bl	44e02 <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   293d4:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   293d6:	f06f 0102 	mvn.w	r1, #2
   293da:	18e2      	adds	r2, r4, r3
   293dc:	1b09      	subs	r1, r1, r4
   293de:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   293e2:	42d1      	cmn	r1, r2
   293e4:	d513      	bpl.n	2940e <usb_get_device_descriptor+0x17a>
			str_descr_idx += 1U;
   293e6:	3601      	adds	r6, #1
   293e8:	b2f6      	uxtb	r6, r6
			break;
   293ea:	e76e      	b.n	292ca <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
   293ec:	2e00      	cmp	r6, #0
   293ee:	d1f1      	bne.n	293d4 <usb_get_device_descriptor+0x140>
				if (!cfg_descr) {
   293f0:	f1ba 0f00 	cmp.w	sl, #0
   293f4:	f43f af7d 	beq.w	292f2 <usb_get_device_descriptor+0x5e>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   293f8:	eba4 030a 	sub.w	r3, r4, sl
	dst[0] = val;
   293fc:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
   29400:	f3c3 2307 	ubfx	r3, r3, #8, #8
   29404:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   29408:	f88a 9004 	strb.w	r9, [sl, #4]
   2940c:	e7eb      	b.n	293e6 <usb_get_device_descriptor+0x152>
		buf[i] = 0U;
   2940e:	f04f 0000 	mov.w	r0, #0
   29412:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   29416:	f813 0901 	ldrb.w	r0, [r3], #-1
   2941a:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
   2941e:	e7e0      	b.n	293e2 <usb_get_device_descriptor+0x14e>
				if (cfg_data->interface_config) {
   29420:	68ab      	ldr	r3, [r5, #8]
   29422:	2b00      	cmp	r3, #0
   29424:	f43f af59 	beq.w	292da <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
   29428:	4649      	mov	r1, r9
   2942a:	4620      	mov	r0, r4
   2942c:	4798      	blx	r3
   2942e:	e754      	b.n	292da <usb_get_device_descriptor+0x46>
   29430:	20000d44 	.word	0x20000d44
   29434:	20000da1 	.word	0x20000da1
   29438:	20000da1 	.word	0x20000da1
   2943c:	20000da1 	.word	0x20000da1
   29440:	0004b10d 	.word	0x0004b10d

00029444 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   29444:	b510      	push	{r4, lr}
   29446:	4b09      	ldr	r3, [pc, #36]	; (2946c <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29448:	2100      	movs	r1, #0
   2944a:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   2944c:	781c      	ldrb	r4, [r3, #0]
   2944e:	4284      	cmp	r4, r0
   29450:	d105      	bne.n	2945e <usb_ep_get_transfer+0x1a>
   29452:	685c      	ldr	r4, [r3, #4]
   29454:	b11c      	cbz	r4, 2945e <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
   29456:	2348      	movs	r3, #72	; 0x48
   29458:	fb03 2001 	mla	r0, r3, r1, r2
		}
	}

	return NULL;
}
   2945c:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2945e:	3101      	adds	r1, #1
   29460:	2904      	cmp	r1, #4
   29462:	f103 0348 	add.w	r3, r3, #72	; 0x48
   29466:	d1f1      	bne.n	2944c <usb_ep_get_transfer+0x8>
	return NULL;
   29468:	2000      	movs	r0, #0
   2946a:	e7f7      	b.n	2945c <usb_ep_get_transfer+0x18>
   2946c:	20001a98 	.word	0x20001a98

00029470 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   29470:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   29474:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
   29478:	f810 6c34 	ldrb.w	r6, [r0, #-52]
	if (trans->status != -EBUSY) {
   2947c:	3310      	adds	r3, #16
{
   2947e:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   29480:	d110      	bne.n	294a4 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   29482:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
   29484:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
   29488:	0799      	lsls	r1, r3, #30
   2948a:	d53c      	bpl.n	29506 <usb_transfer_work+0x96>
		if (!trans->bsize) {
   2948c:	bb02      	cbnz	r2, 294d0 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   2948e:	f013 0304 	ands.w	r3, r3, #4
   29492:	d104      	bne.n	2949e <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   29494:	461a      	mov	r2, r3
   29496:	4619      	mov	r1, r3
   29498:	4630      	mov	r0, r6
   2949a:	f01a f988 	bl	437ae <usb_write>
			}
			trans->status = 0;
   2949e:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   294a0:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   294a4:	f854 3c30 	ldr.w	r3, [r4, #-48]
   294a8:	3310      	adds	r3, #16
   294aa:	d00e      	beq.n	294ca <usb_transfer_work+0x5a>
   294ac:	f854 5c20 	ldr.w	r5, [r4, #-32]
   294b0:	b15d      	cbz	r5, 294ca <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   294b2:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   294b6:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   294ba:	f01f fa22 	bl	48902 <k_is_in_isr>
   294be:	2800      	cmp	r0, #0
   294c0:	d04c      	beq.n	2955c <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   294c2:	482e      	ldr	r0, [pc, #184]	; (2957c <usb_transfer_work+0x10c>)
   294c4:	4621      	mov	r1, r4
   294c6:	f01f fb94 	bl	48bf2 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
   294ca:	b002      	add	sp, #8
   294cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   294d0:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   294d4:	ab01      	add	r3, sp, #4
   294d6:	4630      	mov	r0, r6
   294d8:	f01a f969 	bl	437ae <usb_write>
		if (ret) {
   294dc:	b110      	cbz	r0, 294e4 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   294de:	f06f 0315 	mvn.w	r3, #21
   294e2:	e7dd      	b.n	294a0 <usb_transfer_work+0x30>
		trans->buffer += bytes;
   294e4:	9a01      	ldr	r2, [sp, #4]
   294e6:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   294ea:	4413      	add	r3, r2
   294ec:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   294f0:	f854 3c28 	ldr.w	r3, [r4, #-40]
   294f4:	1a9b      	subs	r3, r3, r2
   294f6:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   294fa:	f854 3c24 	ldr.w	r3, [r4, #-36]
   294fe:	4413      	add	r3, r2
   29500:	f844 3c24 	str.w	r3, [r4, #-36]
   29504:	e7ce      	b.n	294a4 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   29506:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   2950a:	ab01      	add	r3, sp, #4
   2950c:	4630      	mov	r0, r6
   2950e:	f014 fb3d 	bl	3db8c <usb_dc_ep_read_wait>
		if (ret) {
   29512:	2800      	cmp	r0, #0
   29514:	d1e3      	bne.n	294de <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   29516:	9d01      	ldr	r5, [sp, #4]
   29518:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2951c:	442b      	add	r3, r5
   2951e:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   29522:	f854 3c28 	ldr.w	r3, [r4, #-40]
   29526:	1b5b      	subs	r3, r3, r5
   29528:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   2952c:	f854 3c24 	ldr.w	r3, [r4, #-36]
   29530:	442b      	add	r3, r5
   29532:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   29536:	2d00      	cmp	r5, #0
   29538:	d0b1      	beq.n	2949e <usb_transfer_work+0x2e>
   2953a:	4630      	mov	r0, r6
   2953c:	f014 fbca 	bl	3dcd4 <usb_dc_ep_mps>
   29540:	fbb5 f3f0 	udiv	r3, r5, r0
   29544:	fb03 5510 	mls	r5, r3, r0, r5
   29548:	2d00      	cmp	r5, #0
   2954a:	d1a8      	bne.n	2949e <usb_transfer_work+0x2e>
   2954c:	f854 3c28 	ldr.w	r3, [r4, #-40]
   29550:	2b00      	cmp	r3, #0
   29552:	d0a4      	beq.n	2949e <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   29554:	4630      	mov	r0, r6
   29556:	f014 fb61 	bl	3dc1c <usb_dc_ep_read_continue>
   2955a:	e7a3      	b.n	294a4 <usb_transfer_work+0x34>
		trans->cb = NULL;
   2955c:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
   29560:	f1a4 0018 	sub.w	r0, r4, #24
   29564:	f018 f844 	bl	415f0 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
   29568:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2956c:	338c      	adds	r3, #140	; 0x8c
   2956e:	d0ac      	beq.n	294ca <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
   29570:	4642      	mov	r2, r8
   29572:	4639      	mov	r1, r7
   29574:	4630      	mov	r0, r6
   29576:	47a8      	blx	r5
   29578:	e7a7      	b.n	294ca <usb_transfer_work+0x5a>
   2957a:	bf00      	nop
   2957c:	20001910 	.word	0x20001910

00029580 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
   29580:	b510      	push	{r4, lr}
   29582:	f04f 0320 	mov.w	r3, #32
   29586:	f3ef 8411 	mrs	r4, BASEPRI
   2958a:	f383 8812 	msr	BASEPRI_MAX, r3
   2958e:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   29592:	f7ff ff57 	bl	29444 <usb_ep_get_transfer>
	if (!trans) {
   29596:	b150      	cbz	r0, 295ae <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   29598:	6843      	ldr	r3, [r0, #4]
   2959a:	3310      	adds	r3, #16
   2959c:	d107      	bne.n	295ae <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   2959e:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   295a2:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   295a4:	f100 0134 	add.w	r1, r0, #52	; 0x34
   295a8:	4803      	ldr	r0, [pc, #12]	; (295b8 <usb_cancel_transfer+0x38>)
   295aa:	f01f fb22 	bl	48bf2 <k_work_submit_to_queue>
	__asm__ volatile(
   295ae:	f384 8811 	msr	BASEPRI, r4
   295b2:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   295b6:	bd10      	pop	{r4, pc}
   295b8:	20001910 	.word	0x20001910

000295bc <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   295bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   295c0:	4c10      	ldr	r4, [pc, #64]	; (29604 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   295c2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 29608 <usb_cancel_transfers+0x4c>
{
   295c6:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
   295c8:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
   295cc:	f04f 0320 	mov.w	r3, #32
   295d0:	f3ef 8611 	mrs	r6, BASEPRI
   295d4:	f383 8812 	msr	BASEPRI_MAX, r3
   295d8:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
   295dc:	6863      	ldr	r3, [r4, #4]
   295de:	3310      	adds	r3, #16
   295e0:	d105      	bne.n	295ee <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   295e2:	f104 0134 	add.w	r1, r4, #52	; 0x34
   295e6:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
   295e8:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   295ea:	f01f fb02 	bl	48bf2 <k_work_submit_to_queue>
	__asm__ volatile(
   295ee:	f386 8811 	msr	BASEPRI, r6
   295f2:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   295f6:	3d01      	subs	r5, #1
   295f8:	f104 0448 	add.w	r4, r4, #72	; 0x48
   295fc:	d1e6      	bne.n	295cc <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   295fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29602:	bf00      	nop
   29604:	20001a98 	.word	0x20001a98
   29608:	20001910 	.word	0x20001910

0002960c <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   2960c:	b570      	push	{r4, r5, r6, lr}
   2960e:	4c0a      	ldr	r4, [pc, #40]	; (29638 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   29610:	4e0a      	ldr	r6, [pc, #40]	; (2963c <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29612:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   29614:	4631      	mov	r1, r6
   29616:	4620      	mov	r0, r4
   29618:	f01f fae2 	bl	48be0 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2961c:	2201      	movs	r2, #1
   2961e:	f1a4 0018 	sub.w	r0, r4, #24
   29622:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   29624:	3501      	adds	r5, #1
   29626:	f01f fa5b 	bl	48ae0 <z_impl_k_sem_init>
   2962a:	2d04      	cmp	r5, #4
   2962c:	f104 0448 	add.w	r4, r4, #72	; 0x48
   29630:	d1f0      	bne.n	29614 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   29632:	2000      	movs	r0, #0
   29634:	bd70      	pop	{r4, r5, r6, pc}
   29636:	bf00      	nop
   29638:	20001acc 	.word	0x20001acc
   2963c:	00029471 	.word	0x00029471

00029640 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   29640:	4b0c      	ldr	r3, [pc, #48]	; (29674 <flash_area_open+0x34>)
   29642:	681b      	ldr	r3, [r3, #0]
{
   29644:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   29646:	b173      	cbz	r3, 29666 <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   29648:	4a0b      	ldr	r2, [pc, #44]	; (29678 <flash_area_open+0x38>)
   2964a:	6815      	ldr	r5, [r2, #0]
   2964c:	2200      	movs	r2, #0
   2964e:	42aa      	cmp	r2, r5
   29650:	db02      	blt.n	29658 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   29652:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   29656:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   29658:	461c      	mov	r4, r3
   2965a:	f813 6b10 	ldrb.w	r6, [r3], #16
   2965e:	4286      	cmp	r6, r0
   29660:	d004      	beq.n	2966c <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   29662:	3201      	adds	r2, #1
   29664:	e7f3      	b.n	2964e <flash_area_open+0xe>
		return -EACCES;
   29666:	f06f 000c 	mvn.w	r0, #12
   2966a:	e7f4      	b.n	29656 <flash_area_open+0x16>
	*fap = area;
   2966c:	600c      	str	r4, [r1, #0]
	return 0;
   2966e:	2000      	movs	r0, #0
   29670:	e7f1      	b.n	29656 <flash_area_open+0x16>
   29672:	bf00      	nop
   29674:	2000033c 	.word	0x2000033c
   29678:	00049ae4 	.word	0x00049ae4

0002967c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   2967c:	b570      	push	{r4, r5, r6, lr}
   2967e:	b088      	sub	sp, #32
   29680:	4605      	mov	r5, r0
   29682:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   29684:	b2c0      	uxtb	r0, r0
   29686:	4669      	mov	r1, sp
{
   29688:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   2968a:	f7ff ffd9 	bl	29640 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   2968e:	2800      	cmp	r0, #0
   29690:	db1f      	blt.n	296d2 <flash_area_get_sectors+0x56>
   29692:	9b00      	ldr	r3, [sp, #0]
   29694:	b1eb      	cbz	r3, 296d2 <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   29696:	685a      	ldr	r2, [r3, #4]
   29698:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   2969a:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
   2969c:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   2969e:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
   296a0:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   296a2:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   296a6:	2200      	movs	r2, #0
	cb_data->status = 0;
   296a8:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   296ac:	9205      	str	r2, [sp, #20]
   296ae:	f017 fbd7 	bl	40e60 <z_impl_device_get_binding>
   296b2:	4605      	mov	r5, r0
	flash_area_close(fa);
   296b4:	9800      	ldr	r0, [sp, #0]
   296b6:	f01a f892 	bl	437de <flash_area_close>
	if (flash_dev == NULL) {
   296ba:	b16d      	cbz	r5, 296d8 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   296bc:	4628      	mov	r0, r5
   296be:	4908      	ldr	r1, [pc, #32]	; (296e0 <flash_area_get_sectors+0x64>)
   296c0:	aa01      	add	r2, sp, #4
   296c2:	f01e fd02 	bl	480ca <flash_page_foreach>
	if (cb_data->status == 0) {
   296c6:	9807      	ldr	r0, [sp, #28]
   296c8:	b908      	cbnz	r0, 296ce <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   296ca:	9b05      	ldr	r3, [sp, #20]
   296cc:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   296ce:	b008      	add	sp, #32
   296d0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   296d2:	f06f 0015 	mvn.w	r0, #21
   296d6:	e7fa      	b.n	296ce <flash_area_get_sectors+0x52>
		return -ENODEV;
   296d8:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   296dc:	e7f7      	b.n	296ce <flash_area_get_sectors+0x52>
   296de:	bf00      	nop
   296e0:	000437e1 	.word	0x000437e1

000296e4 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   296e4:	4b10      	ldr	r3, [pc, #64]	; (29728 <settings_save_one+0x44>)
{
   296e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   296ea:	681c      	ldr	r4, [r3, #0]
{
   296ec:	4605      	mov	r5, r0
   296ee:	460e      	mov	r6, r1
   296f0:	4617      	mov	r7, r2
	if (!cs) {
   296f2:	b1ac      	cbz	r4, 29720 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   296f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   296f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   296fc:	480b      	ldr	r0, [pc, #44]	; (2972c <settings_save_one+0x48>)
   296fe:	f017 fe89 	bl	41414 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   29702:	6863      	ldr	r3, [r4, #4]
   29704:	4632      	mov	r2, r6
   29706:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2970a:	4629      	mov	r1, r5
   2970c:	463b      	mov	r3, r7
   2970e:	4620      	mov	r0, r4
   29710:	47c0      	blx	r8
   29712:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   29714:	4805      	ldr	r0, [pc, #20]	; (2972c <settings_save_one+0x48>)
   29716:	f017 fef5 	bl	41504 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   2971a:	4620      	mov	r0, r4
   2971c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   29720:	f06f 0401 	mvn.w	r4, #1
   29724:	e7f9      	b.n	2971a <settings_save_one+0x36>
   29726:	bf00      	nop
   29728:	20001bc0 	.word	0x20001bc0
   2972c:	20000b24 	.word	0x20000b24

00029730 <settings_src_register>:
	parent->next = child;
   29730:	2300      	movs	r3, #0
   29732:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   29734:	4b04      	ldr	r3, [pc, #16]	; (29748 <settings_src_register+0x18>)
   29736:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   29738:	b912      	cbnz	r2, 29740 <settings_src_register+0x10>
	list->head = node;
   2973a:	e9c3 0000 	strd	r0, r0, [r3]
}
   2973e:	4770      	bx	lr
	parent->next = child;
   29740:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29742:	6058      	str	r0, [r3, #4]
}
   29744:	4770      	bx	lr
   29746:	bf00      	nop
   29748:	20001bb8 	.word	0x20001bb8

0002974c <settings_dst_register>:
	settings_save_dst = cs;
   2974c:	4b01      	ldr	r3, [pc, #4]	; (29754 <settings_dst_register+0x8>)
   2974e:	6018      	str	r0, [r3, #0]
}
   29750:	4770      	bx	lr
   29752:	bf00      	nop
   29754:	20001bc0 	.word	0x20001bc0

00029758 <settings_load_subtree>:
{
   29758:	b530      	push	{r4, r5, lr}
   2975a:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   2975c:	2300      	movs	r3, #0
{
   2975e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   29760:	e9cd 3302 	strd	r3, r3, [sp, #8]
   29764:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   29766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2976a:	480c      	ldr	r0, [pc, #48]	; (2979c <settings_load_subtree+0x44>)
   2976c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29770:	f017 fe50 	bl	41414 <z_impl_k_mutex_lock>
	return list->head;
   29774:	4b0a      	ldr	r3, [pc, #40]	; (297a0 <settings_load_subtree+0x48>)
   29776:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   29778:	b134      	cbz	r4, 29788 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   2977a:	6863      	ldr	r3, [r4, #4]
   2977c:	4620      	mov	r0, r4
   2977e:	681b      	ldr	r3, [r3, #0]
   29780:	a901      	add	r1, sp, #4
   29782:	4798      	blx	r3
	return node->next;
   29784:	6824      	ldr	r4, [r4, #0]
   29786:	e7f7      	b.n	29778 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   29788:	4628      	mov	r0, r5
   2978a:	f000 f8c5 	bl	29918 <settings_commit_subtree>
   2978e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   29790:	4802      	ldr	r0, [pc, #8]	; (2979c <settings_load_subtree+0x44>)
   29792:	f017 feb7 	bl	41504 <z_impl_k_mutex_unlock>
}
   29796:	4620      	mov	r0, r4
   29798:	b005      	add	sp, #20
   2979a:	bd30      	pop	{r4, r5, pc}
   2979c:	20000b24 	.word	0x20000b24
   297a0:	20001bb8 	.word	0x20001bb8

000297a4 <settings_load_subtree_direct>:
{
   297a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   297a6:	e9cd 0101 	strd	r0, r1, [sp, #4]
   297aa:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   297ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   297b0:	480a      	ldr	r0, [pc, #40]	; (297dc <settings_load_subtree_direct+0x38>)
   297b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   297b6:	f017 fe2d 	bl	41414 <z_impl_k_mutex_lock>
	return list->head;
   297ba:	4b09      	ldr	r3, [pc, #36]	; (297e0 <settings_load_subtree_direct+0x3c>)
   297bc:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   297be:	b134      	cbz	r4, 297ce <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   297c0:	6863      	ldr	r3, [r4, #4]
   297c2:	4620      	mov	r0, r4
   297c4:	681b      	ldr	r3, [r3, #0]
   297c6:	a901      	add	r1, sp, #4
   297c8:	4798      	blx	r3
	return node->next;
   297ca:	6824      	ldr	r4, [r4, #0]
   297cc:	e7f7      	b.n	297be <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   297ce:	4803      	ldr	r0, [pc, #12]	; (297dc <settings_load_subtree_direct+0x38>)
   297d0:	f017 fe98 	bl	41504 <z_impl_k_mutex_unlock>
}
   297d4:	2000      	movs	r0, #0
   297d6:	b004      	add	sp, #16
   297d8:	bd10      	pop	{r4, pc}
   297da:	bf00      	nop
   297dc:	20000b24 	.word	0x20000b24
   297e0:	20001bb8 	.word	0x20001bb8

000297e4 <settings_store_init>:
	list->head = NULL;
   297e4:	4b02      	ldr	r3, [pc, #8]	; (297f0 <settings_store_init+0xc>)
   297e6:	2200      	movs	r2, #0
	list->tail = NULL;
   297e8:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   297ec:	4770      	bx	lr
   297ee:	bf00      	nop
   297f0:	20001bb8 	.word	0x20001bb8

000297f4 <settings_init>:
	list->head = NULL;
   297f4:	4b02      	ldr	r3, [pc, #8]	; (29800 <settings_init+0xc>)
   297f6:	2200      	movs	r2, #0
	list->tail = NULL;
   297f8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   297fc:	f7ff bff2 	b.w	297e4 <settings_store_init>
   29800:	20001bc4 	.word	0x20001bc4

00029804 <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   29804:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29806:	4c1b      	ldr	r4, [pc, #108]	; (29874 <settings_register+0x70>)
   29808:	4e1b      	ldr	r6, [pc, #108]	; (29878 <settings_register+0x74>)
{
   2980a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2980c:	42b4      	cmp	r4, r6
   2980e:	d312      	bcc.n	29836 <settings_register+0x32>
	return list->head;
   29810:	4e1a      	ldr	r6, [pc, #104]	; (2987c <settings_register+0x78>)
	return z_impl_k_mutex_lock(mutex, timeout);
   29812:	481b      	ldr	r0, [pc, #108]	; (29880 <settings_register+0x7c>)
   29814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2981c:	f017 fdfa 	bl	41414 <z_impl_k_mutex_lock>
   29820:	6834      	ldr	r4, [r6, #0]
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   29822:	b17c      	cbz	r4, 29844 <settings_register+0x40>
		if (strcmp(handler->name, ch->name) == 0) {
   29824:	6828      	ldr	r0, [r5, #0]
   29826:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2982a:	3c14      	subs	r4, #20
		if (strcmp(handler->name, ch->name) == 0) {
   2982c:	f01b fabc 	bl	44da8 <strcmp>
   29830:	b1c8      	cbz	r0, 29866 <settings_register+0x62>
	return node->next;
   29832:	6964      	ldr	r4, [r4, #20]
   29834:	e7f5      	b.n	29822 <settings_register+0x1e>
		if (strcmp(handler->name, ch->name) == 0) {
   29836:	6821      	ldr	r1, [r4, #0]
   29838:	6828      	ldr	r0, [r5, #0]
   2983a:	f01b fab5 	bl	44da8 <strcmp>
   2983e:	b1a8      	cbz	r0, 2986c <settings_register+0x68>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29840:	3414      	adds	r4, #20
   29842:	e7e3      	b.n	2980c <settings_register+0x8>
	return list->tail;
   29844:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   29846:	2400      	movs	r4, #0
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   29848:	f105 0314 	add.w	r3, r5, #20
   2984c:	616c      	str	r4, [r5, #20]
Z_GENLIST_APPEND(slist, snode)
   2984e:	b93a      	cbnz	r2, 29860 <settings_register+0x5c>
	list->head = node;
   29850:	e9c6 3300 	strd	r3, r3, [r6]
	int rc = 0;
   29854:	4614      	mov	r4, r2
	return z_impl_k_mutex_unlock(mutex);
   29856:	480a      	ldr	r0, [pc, #40]	; (29880 <settings_register+0x7c>)
   29858:	f017 fe54 	bl	41504 <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   2985c:	4620      	mov	r0, r4
   2985e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   29860:	6013      	str	r3, [r2, #0]
	list->tail = node;
   29862:	6073      	str	r3, [r6, #4]
}
   29864:	e7f7      	b.n	29856 <settings_register+0x52>
			rc = -EEXIST;
   29866:	f06f 0410 	mvn.w	r4, #16
   2986a:	e7f4      	b.n	29856 <settings_register+0x52>
			return -EEXIST;
   2986c:	f06f 0410 	mvn.w	r4, #16
   29870:	e7f4      	b.n	2985c <settings_register+0x58>
   29872:	bf00      	nop
   29874:	000496a8 	.word	0x000496a8
   29878:	00049720 	.word	0x00049720
   2987c:	20001bc4 	.word	0x20001bc4
   29880:	20000b24 	.word	0x20000b24

00029884 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   29884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   29888:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   2988a:	460e      	mov	r6, r1
   2988c:	b109      	cbz	r1, 29892 <settings_parse_and_lookup+0xe>
		*next = NULL;
   2988e:	2300      	movs	r3, #0
   29890:	600b      	str	r3, [r1, #0]
   29892:	4d1e      	ldr	r5, [pc, #120]	; (2990c <settings_parse_and_lookup+0x88>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29894:	f8df 9078 	ldr.w	r9, [pc, #120]	; 29910 <settings_parse_and_lookup+0x8c>
   29898:	2400      	movs	r4, #0
   2989a:	454d      	cmp	r5, r9
   2989c:	d311      	bcc.n	298c2 <settings_parse_and_lookup+0x3e>
	return list->head;
   2989e:	4b1d      	ldr	r3, [pc, #116]	; (29914 <settings_parse_and_lookup+0x90>)
   298a0:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   298a2:	b375      	cbz	r5, 29902 <settings_parse_and_lookup+0x7e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   298a4:	f855 8c14 	ldr.w	r8, [r5, #-20]
   298a8:	aa01      	add	r2, sp, #4
   298aa:	4641      	mov	r1, r8
   298ac:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   298ae:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   298b0:	f019 ffb8 	bl	43824 <settings_name_steq>
   298b4:	b318      	cbz	r0, 298fe <settings_parse_and_lookup+0x7a>
			continue;
		}
		if (!bestmatch) {
   298b6:	b9dc      	cbnz	r4, 298f0 <settings_parse_and_lookup+0x6c>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   298b8:	b10e      	cbz	r6, 298be <settings_parse_and_lookup+0x3a>
				*next = tmpnext;
   298ba:	9b01      	ldr	r3, [sp, #4]
   298bc:	6033      	str	r3, [r6, #0]
   298be:	462c      	mov	r4, r5
   298c0:	e01d      	b.n	298fe <settings_parse_and_lookup+0x7a>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   298c2:	f8d5 8000 	ldr.w	r8, [r5]
   298c6:	aa01      	add	r2, sp, #4
   298c8:	4641      	mov	r1, r8
   298ca:	4638      	mov	r0, r7
   298cc:	f019 ffaa 	bl	43824 <settings_name_steq>
   298d0:	b160      	cbz	r0, 298ec <settings_parse_and_lookup+0x68>
		if (!bestmatch) {
   298d2:	b924      	cbnz	r4, 298de <settings_parse_and_lookup+0x5a>
			if (next) {
   298d4:	b10e      	cbz	r6, 298da <settings_parse_and_lookup+0x56>
				*next = tmpnext;
   298d6:	9b01      	ldr	r3, [sp, #4]
   298d8:	6033      	str	r3, [r6, #0]
   298da:	462c      	mov	r4, r5
   298dc:	e006      	b.n	298ec <settings_parse_and_lookup+0x68>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   298de:	6821      	ldr	r1, [r4, #0]
   298e0:	2200      	movs	r2, #0
   298e2:	4640      	mov	r0, r8
   298e4:	f019 ff9e 	bl	43824 <settings_name_steq>
   298e8:	2800      	cmp	r0, #0
   298ea:	d1f3      	bne.n	298d4 <settings_parse_and_lookup+0x50>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   298ec:	3514      	adds	r5, #20
   298ee:	e7d4      	b.n	2989a <settings_parse_and_lookup+0x16>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   298f0:	6821      	ldr	r1, [r4, #0]
   298f2:	2200      	movs	r2, #0
   298f4:	4640      	mov	r0, r8
   298f6:	f019 ff95 	bl	43824 <settings_name_steq>
   298fa:	2800      	cmp	r0, #0
   298fc:	d1dc      	bne.n	298b8 <settings_parse_and_lookup+0x34>
	return node->next;
   298fe:	696d      	ldr	r5, [r5, #20]
   29900:	e7cf      	b.n	298a2 <settings_parse_and_lookup+0x1e>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   29902:	4620      	mov	r0, r4
   29904:	b003      	add	sp, #12
   29906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2990a:	bf00      	nop
   2990c:	000496a8 	.word	0x000496a8
   29910:	00049720 	.word	0x00049720
   29914:	20001bc4 	.word	0x20001bc4

00029918 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   29918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2991a:	4c18      	ldr	r4, [pc, #96]	; (2997c <settings_commit_subtree+0x64>)
   2991c:	4f18      	ldr	r7, [pc, #96]	; (29980 <settings_commit_subtree+0x68>)
{
   2991e:	4606      	mov	r6, r0
	rc = 0;
   29920:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   29922:	42bc      	cmp	r4, r7
   29924:	d308      	bcc.n	29938 <settings_commit_subtree+0x20>
	return list->head;
   29926:	4b17      	ldr	r3, [pc, #92]	; (29984 <settings_commit_subtree+0x6c>)
   29928:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2992a:	b324      	cbz	r4, 29976 <settings_commit_subtree+0x5e>
   2992c:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2992e:	b9ae      	cbnz	r6, 2995c <settings_commit_subtree+0x44>
			continue;
		}
		if (ch->h_commit) {
   29930:	68e3      	ldr	r3, [r4, #12]
   29932:	b9db      	cbnz	r3, 2996c <settings_commit_subtree+0x54>
	return node->next;
   29934:	6964      	ldr	r4, [r4, #20]
   29936:	e7f8      	b.n	2992a <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   29938:	b91e      	cbnz	r6, 29942 <settings_commit_subtree+0x2a>
		if (ch->h_commit) {
   2993a:	68e3      	ldr	r3, [r4, #12]
   2993c:	b94b      	cbnz	r3, 29952 <settings_commit_subtree+0x3a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2993e:	3414      	adds	r4, #20
   29940:	e7ef      	b.n	29922 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   29942:	6820      	ldr	r0, [r4, #0]
   29944:	2200      	movs	r2, #0
   29946:	4631      	mov	r1, r6
   29948:	f019 ff6c 	bl	43824 <settings_name_steq>
   2994c:	2800      	cmp	r0, #0
   2994e:	d1f4      	bne.n	2993a <settings_commit_subtree+0x22>
   29950:	e7f5      	b.n	2993e <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   29952:	4798      	blx	r3
				rc = rc2;
   29954:	2d00      	cmp	r5, #0
   29956:	bf08      	it	eq
   29958:	4605      	moveq	r5, r0
   2995a:	e7f0      	b.n	2993e <settings_commit_subtree+0x26>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2995c:	6820      	ldr	r0, [r4, #0]
   2995e:	2200      	movs	r2, #0
   29960:	4631      	mov	r1, r6
   29962:	f019 ff5f 	bl	43824 <settings_name_steq>
   29966:	2800      	cmp	r0, #0
   29968:	d1e2      	bne.n	29930 <settings_commit_subtree+0x18>
   2996a:	e7e3      	b.n	29934 <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   2996c:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   2996e:	2d00      	cmp	r5, #0
   29970:	bf08      	it	eq
   29972:	4605      	moveq	r5, r0
   29974:	e7de      	b.n	29934 <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   29976:	4628      	mov	r0, r5
   29978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2997a:	bf00      	nop
   2997c:	000496a8 	.word	0x000496a8
   29980:	00049720 	.word	0x00049720
   29984:	20001bc4 	.word	0x20001bc4

00029988 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   29988:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   2998a:	4c06      	ldr	r4, [pc, #24]	; (299a4 <settings_subsys_init+0x1c>)
   2998c:	7823      	ldrb	r3, [r4, #0]
   2998e:	b93b      	cbnz	r3, 299a0 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   29990:	f7ff ff30 	bl	297f4 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   29994:	f000 f866 	bl	29a64 <settings_backend_init>

	if (!err) {
   29998:	b908      	cbnz	r0, 2999e <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   2999a:	2301      	movs	r3, #1
   2999c:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   2999e:	bd10      	pop	{r4, pc}
		return 0;
   299a0:	2000      	movs	r0, #0
   299a2:	e7fc      	b.n	2999e <settings_subsys_init+0x16>
   299a4:	20003bc4 	.word	0x20003bc4

000299a8 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   299a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   299ac:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   299ae:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 29a60 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   299b2:	3401      	adds	r4, #1
{
   299b4:	b098      	sub	sp, #96	; 0x60
   299b6:	4680      	mov	r8, r0
   299b8:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   299ba:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   299bc:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   299c0:	1e65      	subs	r5, r4, #1
   299c2:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   299c4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   299c8:	d047      	beq.n	29a5a <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   299ca:	234a      	movs	r3, #74	; 0x4a
   299cc:	aa05      	add	r2, sp, #20
   299ce:	4629      	mov	r1, r5
   299d0:	4630      	mov	r0, r6
   299d2:	f019 fee5 	bl	437a0 <nvs_read>
   299d6:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   299da:	343f      	adds	r4, #63	; 0x3f
   299dc:	b2a4      	uxth	r4, r4
   299de:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   299e0:	4621      	mov	r1, r4
   299e2:	2301      	movs	r3, #1
   299e4:	f10d 020b 	add.w	r2, sp, #11
   299e8:	4630      	mov	r0, r6
   299ea:	f019 fed9 	bl	437a0 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   299ee:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   299f0:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   299f2:	dc03      	bgt.n	299fc <settings_nvs_load+0x54>
   299f4:	2800      	cmp	r0, #0
   299f6:	dc03      	bgt.n	29a00 <settings_nvs_load+0x58>
{
   299f8:	462c      	mov	r4, r5
   299fa:	e7e1      	b.n	299c0 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   299fc:	2800      	cmp	r0, #0
   299fe:	dc16      	bgt.n	29a2e <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   29a00:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   29a04:	42ab      	cmp	r3, r5
   29a06:	d109      	bne.n	29a1c <settings_nvs_load+0x74>
				cf->last_name_id--;
   29a08:	4642      	mov	r2, r8
   29a0a:	1e6b      	subs	r3, r5, #1
   29a0c:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   29a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   29a14:	2302      	movs	r3, #2
   29a16:	4630      	mov	r0, r6
   29a18:	f7fe ff26 	bl	28868 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   29a1c:	4629      	mov	r1, r5
   29a1e:	4630      	mov	r0, r6
   29a20:	f019 fe63 	bl	436ea <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   29a24:	4621      	mov	r1, r4
   29a26:	4630      	mov	r0, r6
   29a28:	f019 fe5f 	bl	436ea <nvs_delete>
			continue;
   29a2c:	e7e4      	b.n	299f8 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   29a2e:	f107 0360 	add.w	r3, r7, #96	; 0x60
   29a32:	eb0d 0703 	add.w	r7, sp, r3
   29a36:	2300      	movs	r3, #0
   29a38:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   29a3c:	4652      	mov	r2, sl
   29a3e:	f8cd 9000 	str.w	r9, [sp]
   29a42:	ab03      	add	r3, sp, #12
   29a44:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   29a46:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   29a48:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   29a4c:	f019 ff23 	bl	43896 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   29a50:	2800      	cmp	r0, #0
   29a52:	d0d1      	beq.n	299f8 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   29a54:	b018      	add	sp, #96	; 0x60
   29a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29a5a:	2000      	movs	r0, #0
	return ret;
   29a5c:	e7fa      	b.n	29a54 <settings_nvs_load+0xac>
   29a5e:	bf00      	nop
   29a60:	00043901 	.word	0x00043901

00029a64 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   29a64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   29a66:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   29a68:	4669      	mov	r1, sp
   29a6a:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
   29a6c:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   29a6e:	f7ff fde7 	bl	29640 <flash_area_open>
	if (rc) {
   29a72:	4604      	mov	r4, r0
   29a74:	2800      	cmp	r0, #0
   29a76:	d136      	bne.n	29ae6 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   29a78:	aa02      	add	r2, sp, #8
   29a7a:	a901      	add	r1, sp, #4
   29a7c:	2002      	movs	r0, #2
   29a7e:	f7ff fdfd 	bl	2967c <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   29a82:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   29a86:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   29a88:	d02d      	beq.n	29ae6 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   29a8a:	b138      	cbz	r0, 29a9c <settings_backend_init+0x38>
   29a8c:	340c      	adds	r4, #12
   29a8e:	d005      	beq.n	29a9c <settings_backend_init+0x38>
		k_panic();
   29a90:	4040      	eors	r0, r0
   29a92:	f380 8811 	msr	BASEPRI, r0
   29a96:	f04f 0004 	mov.w	r0, #4
   29a9a:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   29a9c:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   29a9e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   29aa2:	d223      	bcs.n	29aec <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   29aa4:	9a00      	ldr	r2, [sp, #0]
   29aa6:	2300      	movs	r3, #0
   29aa8:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   29aaa:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   29aac:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   29aae:	4285      	cmp	r5, r0
   29ab0:	b29c      	uxth	r4, r3
   29ab2:	d303      	bcc.n	29abc <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   29ab4:	3301      	adds	r3, #1
   29ab6:	2b08      	cmp	r3, #8
   29ab8:	d1f8      	bne.n	29aac <settings_backend_init+0x48>
   29aba:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   29abc:	4d0d      	ldr	r5, [pc, #52]	; (29af4 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   29abe:	6853      	ldr	r3, [r2, #4]
   29ac0:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   29ac2:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   29ac4:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   29ac6:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   29ac8:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   29aca:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   29acc:	f019 ffb1 	bl	43a32 <settings_nvs_backend_init>
	if (rc) {
   29ad0:	4604      	mov	r4, r0
   29ad2:	b940      	cbnz	r0, 29ae6 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   29ad4:	4e08      	ldr	r6, [pc, #32]	; (29af8 <settings_backend_init+0x94>)
   29ad6:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   29ad8:	4628      	mov	r0, r5
   29ada:	f7ff fe29 	bl	29730 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   29ade:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   29ae0:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   29ae2:	f7ff fe33 	bl	2974c <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   29ae6:	4620      	mov	r0, r4
   29ae8:	b004      	add	sp, #16
   29aea:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   29aec:	f06f 0420 	mvn.w	r4, #32
   29af0:	e7f9      	b.n	29ae6 <settings_backend_init+0x82>
   29af2:	bf00      	nop
   29af4:	20001bcc 	.word	0x20001bcc
   29af8:	20000340 	.word	0x20000340

00029afc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   29afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29b00:	4605      	mov	r5, r0
	__asm__ volatile(
   29b02:	f04f 0320 	mov.w	r3, #32
   29b06:	f3ef 8611 	mrs	r6, BASEPRI
   29b0a:	f383 8812 	msr	BASEPRI_MAX, r3
   29b0e:	f3bf 8f6f 	isb	sy
	return list->head;
   29b12:	4b0e      	ldr	r3, [pc, #56]	; (29b4c <pm_state_notify+0x50>)
   29b14:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   29b16:	b19c      	cbz	r4, 29b40 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   29b18:	4f0d      	ldr	r7, [pc, #52]	; (29b50 <pm_state_notify+0x54>)
   29b1a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 29b54 <pm_state_notify+0x58>
   29b1e:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   29b22:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   29b26:	2d00      	cmp	r5, #0
   29b28:	bf08      	it	eq
   29b2a:	4613      	moveq	r3, r2
		if (callback) {
   29b2c:	b12b      	cbz	r3, 29b3a <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   29b2e:	f898 2014 	ldrb.w	r2, [r8, #20]
   29b32:	fb09 f202 	mul.w	r2, r9, r2
   29b36:	5cb8      	ldrb	r0, [r7, r2]
   29b38:	4798      	blx	r3
	return node->next;
   29b3a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   29b3c:	2c00      	cmp	r4, #0
   29b3e:	d1f0      	bne.n	29b22 <pm_state_notify+0x26>
	__asm__ volatile(
   29b40:	f386 8811 	msr	BASEPRI, r6
   29b44:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   29b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29b4c:	20001c0c 	.word	0x20001c0c
   29b50:	20001c14 	.word	0x20001c14
   29b54:	20003b04 	.word	0x20003b04

00029b58 <atomic_clear_bit.constprop.0>:
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29b58:	0941      	lsrs	r1, r0, #5
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29b5a:	4a0a      	ldr	r2, [pc, #40]	; (29b84 <atomic_clear_bit.constprop.0+0x2c>)
   29b5c:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   29b60:	f000 001f 	and.w	r0, r0, #31
   29b64:	2301      	movs	r3, #1
   29b66:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29b68:	43db      	mvns	r3, r3
   29b6a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   29b6e:	e852 0f00 	ldrex	r0, [r2]
   29b72:	4018      	ands	r0, r3
   29b74:	e842 0100 	strex	r1, r0, [r2]
   29b78:	2900      	cmp	r1, #0
   29b7a:	d1f8      	bne.n	29b6e <atomic_clear_bit.constprop.0+0x16>
   29b7c:	f3bf 8f5b 	dmb	ish
}
   29b80:	4770      	bx	lr
   29b82:	bf00      	nop
   29b84:	20001c20 	.word	0x20001c20

00029b88 <pm_system_resume>:

void pm_system_resume(void)
{
   29b88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
   29b8a:	4b1c      	ldr	r3, [pc, #112]	; (29bfc <pm_system_resume+0x74>)
   29b8c:	7d1c      	ldrb	r4, [r3, #20]
   29b8e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   29b92:	f004 031f 	and.w	r3, r4, #31
   29b96:	2201      	movs	r2, #1
   29b98:	409a      	lsls	r2, r3
   29b9a:	4b19      	ldr	r3, [pc, #100]	; (29c00 <pm_system_resume+0x78>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29b9c:	0961      	lsrs	r1, r4, #5
   29b9e:	43d0      	mvns	r0, r2
   29ba0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   29ba4:	e853 1f00 	ldrex	r1, [r3]
   29ba8:	ea01 0500 	and.w	r5, r1, r0
   29bac:	e843 5600 	strex	r6, r5, [r3]
   29bb0:	2e00      	cmp	r6, #0
   29bb2:	d1f7      	bne.n	29ba4 <pm_system_resume+0x1c>
   29bb4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   29bb8:	4211      	tst	r1, r2
   29bba:	d017      	beq.n	29bec <pm_system_resume+0x64>
		exit_pos_ops(z_cpus_pm_state[id]);
   29bbc:	4d11      	ldr	r5, [pc, #68]	; (29c04 <pm_system_resume+0x7c>)
   29bbe:	220c      	movs	r2, #12
   29bc0:	fb02 5204 	mla	r2, r2, r4, r5
   29bc4:	ca07      	ldmia	r2, {r0, r1, r2}
   29bc6:	ab01      	add	r3, sp, #4
   29bc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   29bcc:	4a0e      	ldr	r2, [pc, #56]	; (29c08 <pm_system_resume+0x80>)
   29bce:	b17a      	cbz	r2, 29bf0 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
   29bd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   29bd4:	f01b f949 	bl	44e6a <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   29bd8:	2000      	movs	r0, #0
   29bda:	f7ff ff8f 	bl	29afc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   29bde:	230c      	movs	r3, #12
   29be0:	435c      	muls	r4, r3
   29be2:	192a      	adds	r2, r5, r4
   29be4:	2300      	movs	r3, #0
   29be6:	512b      	str	r3, [r5, r4]
   29be8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   29bec:	b004      	add	sp, #16
   29bee:	bd70      	pop	{r4, r5, r6, pc}
   29bf0:	f382 8811 	msr	BASEPRI, r2
   29bf4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   29bf8:	e7ee      	b.n	29bd8 <pm_system_resume+0x50>
   29bfa:	bf00      	nop
   29bfc:	20003b04 	.word	0x20003b04
   29c00:	20001c24 	.word	0x20001c24
   29c04:	20001c14 	.word	0x20001c14
   29c08:	00044e6b 	.word	0x00044e6b

00029c0c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   29c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   29c10:	4b35      	ldr	r3, [pc, #212]	; (29ce8 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29c12:	4a36      	ldr	r2, [pc, #216]	; (29cec <pm_system_suspend+0xe0>)
   29c14:	7d1c      	ldrb	r4, [r3, #20]
   29c16:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   29c1a:	0963      	lsrs	r3, r4, #5
   29c1c:	ea4f 0983 	mov.w	r9, r3, lsl #2
   29c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   29c24:	4d32      	ldr	r5, [pc, #200]	; (29cf0 <pm_system_suspend+0xe4>)
   29c26:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29c2a:	f004 081f 	and.w	r8, r4, #31
   29c2e:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   29c32:	f013 0f01 	tst.w	r3, #1
{
   29c36:	b085      	sub	sp, #20
   29c38:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   29c3a:	d10a      	bne.n	29c52 <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   29c3c:	4601      	mov	r1, r0
   29c3e:	4620      	mov	r0, r4
   29c40:	f000 f876 	bl	29d30 <pm_policy_next_state>
		if (info != NULL) {
   29c44:	b128      	cbz	r0, 29c52 <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
   29c46:	c807      	ldmia	r0, {r0, r1, r2}
   29c48:	230c      	movs	r3, #12
   29c4a:	fb03 5304 	mla	r3, r3, r4, r5
   29c4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   29c52:	230c      	movs	r3, #12
   29c54:	4363      	muls	r3, r4
   29c56:	18ea      	adds	r2, r5, r3
   29c58:	5cee      	ldrb	r6, [r5, r3]
   29c5a:	b936      	cbnz	r6, 29c6a <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   29c5c:	4620      	mov	r0, r4
   29c5e:	f7ff ff7b 	bl	29b58 <atomic_clear_bit.constprop.0>
		ret = false;
   29c62:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   29c64:	b005      	add	sp, #20
   29c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   29c6a:	1c7b      	adds	r3, r7, #1
   29c6c:	d00f      	beq.n	29c8e <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
   29c6e:	f8d2 c008 	ldr.w	ip, [r2, #8]
   29c72:	4820      	ldr	r0, [pc, #128]	; (29cf4 <pm_system_suspend+0xe8>)
   29c74:	4a20      	ldr	r2, [pc, #128]	; (29cf8 <pm_system_suspend+0xec>)
   29c76:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   29c7a:	2100      	movs	r1, #0
   29c7c:	2300      	movs	r3, #0
   29c7e:	fbec 0106 	umlal	r0, r1, ip, r6
   29c82:	f7fc fa3d 	bl	26100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   29c86:	2101      	movs	r1, #1
   29c88:	1a38      	subs	r0, r7, r0
   29c8a:	f01f f951 	bl	48f30 <z_set_timeout_expiry>
	k_sched_lock();
   29c8e:	f017 ff1f 	bl	41ad0 <k_sched_lock>
	pm_state_notify(true);
   29c92:	2001      	movs	r0, #1
   29c94:	f7ff ff32 	bl	29afc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29c98:	f3bf 8f5b 	dmb	ish
   29c9c:	4b17      	ldr	r3, [pc, #92]	; (29cfc <pm_system_suspend+0xf0>)
	atomic_val_t mask = ATOMIC_MASK(bit);
   29c9e:	2201      	movs	r2, #1
   29ca0:	fa02 f208 	lsl.w	r2, r2, r8
   29ca4:	444b      	add	r3, r9
   29ca6:	e853 0f00 	ldrex	r0, [r3]
   29caa:	4310      	orrs	r0, r2
   29cac:	e843 0100 	strex	r1, r0, [r3]
   29cb0:	2900      	cmp	r1, #0
   29cb2:	d1f8      	bne.n	29ca6 <pm_system_suspend+0x9a>
   29cb4:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
   29cb8:	230c      	movs	r3, #12
   29cba:	fb03 5504 	mla	r5, r3, r4, r5
   29cbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   29cc2:	ab01      	add	r3, sp, #4
   29cc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   29cc8:	4a0d      	ldr	r2, [pc, #52]	; (29d00 <pm_system_suspend+0xf4>)
   29cca:	b11a      	cbz	r2, 29cd4 <pm_system_suspend+0xc8>
		pm_power_state_set(info);
   29ccc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   29cd0:	f01b f8b8 	bl	44e44 <pm_power_state_set>
	pm_system_resume();
   29cd4:	f7ff ff58 	bl	29b88 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   29cd8:	4620      	mov	r0, r4
   29cda:	f7ff ff3d 	bl	29b58 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   29cde:	f018 f8bf 	bl	41e60 <k_sched_unlock>
	bool ret = true;
   29ce2:	2001      	movs	r0, #1
   29ce4:	e7be      	b.n	29c64 <pm_system_suspend+0x58>
   29ce6:	bf00      	nop
   29ce8:	20003b04 	.word	0x20003b04
   29cec:	20001c20 	.word	0x20001c20
   29cf0:	20001c14 	.word	0x20001c14
   29cf4:	000f423f 	.word	0x000f423f
   29cf8:	000f4240 	.word	0x000f4240
   29cfc:	20001c24 	.word	0x20001c24
   29d00:	00044e45 	.word	0x00044e45

00029d04 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29d04:	4b05      	ldr	r3, [pc, #20]	; (29d1c <pm_constraint_get+0x18>)
   29d06:	f3bf 8f5b 	dmb	ish
   29d0a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   29d0e:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
   29d12:	fab0 f080 	clz	r0, r0
   29d16:	0940      	lsrs	r0, r0, #5
   29d18:	4770      	bx	lr
   29d1a:	bf00      	nop
   29d1c:	20001c28 	.word	0x20001c28

00029d20 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   29d20:	b908      	cbnz	r0, 29d26 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   29d22:	4b02      	ldr	r3, [pc, #8]	; (29d2c <pm_state_cpu_get_all+0xc>)
   29d24:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   29d26:	2000      	movs	r0, #0
   29d28:	4770      	bx	lr
   29d2a:	bf00      	nop
   29d2c:	00049ae8 	.word	0x00049ae8

00029d30 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   29d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29d34:	b085      	sub	sp, #20
   29d36:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   29d38:	a903      	add	r1, sp, #12
   29d3a:	f7ff fff1 	bl	29d20 <pm_state_cpu_get_all>
   29d3e:	f8df a074 	ldr.w	sl, [pc, #116]	; 29db4 <pm_policy_next_state+0x84>
   29d42:	f8df 8074 	ldr.w	r8, [pc, #116]	; 29db8 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   29d46:	1e44      	subs	r4, r0, #1
   29d48:	b224      	sxth	r4, r4
   29d4a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   29d4e:	f04f 0900 	mov.w	r9, #0
   29d52:	1c63      	adds	r3, r4, #1
   29d54:	d104      	bne.n	29d60 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   29d56:	2500      	movs	r5, #0
}
   29d58:	4628      	mov	r0, r5
   29d5a:	b005      	add	sp, #20
   29d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   29d60:	9a03      	ldr	r2, [sp, #12]
   29d62:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   29d66:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
   29d6a:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   29d6e:	f7ff ffc9 	bl	29d04 <pm_constraint_get>
   29d72:	b1e0      	cbz	r0, 29dae <pm_policy_next_state+0x7e>
   29d74:	6868      	ldr	r0, [r5, #4]
   29d76:	f04f 0b00 	mov.w	fp, #0
   29d7a:	46d4      	mov	ip, sl
   29d7c:	4659      	mov	r1, fp
   29d7e:	fbe0 c107 	umlal	ip, r1, r0, r7
   29d82:	4642      	mov	r2, r8
   29d84:	464b      	mov	r3, r9
   29d86:	4660      	mov	r0, ip
   29d88:	f7fc f9ba 	bl	26100 <__aeabi_uldivmod>
   29d8c:	9001      	str	r0, [sp, #4]
   29d8e:	68a8      	ldr	r0, [r5, #8]
   29d90:	46d4      	mov	ip, sl
   29d92:	4659      	mov	r1, fp
   29d94:	fbe0 c107 	umlal	ip, r1, r0, r7
   29d98:	4642      	mov	r2, r8
   29d9a:	464b      	mov	r3, r9
   29d9c:	4660      	mov	r0, ip
   29d9e:	f7fc f9af 	bl	26100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
   29da2:	1c72      	adds	r2, r6, #1
   29da4:	d0d8      	beq.n	29d58 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
   29da6:	9b01      	ldr	r3, [sp, #4]
   29da8:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   29daa:	42b0      	cmp	r0, r6
   29dac:	d9d4      	bls.n	29d58 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   29dae:	3c01      	subs	r4, #1
   29db0:	b224      	sxth	r4, r4
   29db2:	e7ce      	b.n	29d52 <pm_policy_next_state+0x22>
   29db4:	000f423f 	.word	0x000f423f
   29db8:	000f4240 	.word	0x000f4240

00029dbc <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   29dbc:	4b01      	ldr	r3, [pc, #4]	; (29dc4 <uECC_get_rng+0x8>)
   29dbe:	6818      	ldr	r0, [r3, #0]
   29dc0:	4770      	bx	lr
   29dc2:	bf00      	nop
   29dc4:	20000350 	.word	0x20000350

00029dc8 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   29dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   29dca:	2208      	movs	r2, #8
{
   29dcc:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   29dce:	f019 fffe 	bl	43dce <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   29dd2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   29dd4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   29dd6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   29dd8:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   29dda:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   29ddc:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   29dde:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   29de0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   29de2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   29de4:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   29de6:	4613      	mov	r3, r2
   29de8:	466a      	mov	r2, sp
{
   29dea:	460c      	mov	r4, r1
   29dec:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
   29dee:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   29df0:	4611      	mov	r1, r2
   29df2:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
   29df4:	e9cd 7701 	strd	r7, r7, [sp, #4]
   29df8:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   29dfa:	f019 fefa 	bl	43bf2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29dfe:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   29e00:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29e02:	4630      	mov	r0, r6
   29e04:	f019 fef5 	bl	43bf2 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   29e08:	6b21      	ldr	r1, [r4, #48]	; 0x30
   29e0a:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
   29e0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   29e0e:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
   29e10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   29e12:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
   29e14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29e16:	4405      	add	r5, r0
	tmp[7] = 0;
   29e18:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   29e1c:	4610      	mov	r0, r2
   29e1e:	4611      	mov	r1, r2
   29e20:	f019 fee7 	bl	43bf2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29e24:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   29e26:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29e28:	4630      	mov	r0, r6
   29e2a:	f019 fee2 	bl	43bf2 <uECC_vli_add>
   29e2e:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   29e30:	6a20      	ldr	r0, [r4, #32]
   29e32:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
   29e34:	6a60      	ldr	r0, [r4, #36]	; 0x24
   29e36:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
   29e38:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   29e3a:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   29e3c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   29e3e:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
   29e40:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   29e42:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29e44:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   29e46:	e9cd 7704 	strd	r7, r7, [sp, #16]
   29e4a:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29e4c:	f019 fed1 	bl	43bf2 <uECC_vli_add>
   29e50:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   29e52:	6a60      	ldr	r0, [r4, #36]	; 0x24
   29e54:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
   29e56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   29e58:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
   29e5c:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
   29e5e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   29e60:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
   29e62:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
   29e66:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
   29e68:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   29e6c:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
   29e6e:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
   29e72:	6a20      	ldr	r0, [r4, #32]
   29e74:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   29e76:	4630      	mov	r0, r6
   29e78:	f019 febb 	bl	43bf2 <uECC_vli_add>
   29e7c:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   29e7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   29e80:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
   29e82:	6b20      	ldr	r0, [r4, #48]	; 0x30
   29e84:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
   29e86:	6b60      	ldr	r0, [r4, #52]	; 0x34
   29e88:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   29e8a:	6a20      	ldr	r0, [r4, #32]
   29e8c:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
   29e8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   29e90:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29e92:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   29e94:	e9cd 7704 	strd	r7, r7, [sp, #16]
   29e98:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29e9a:	f019 ffcb 	bl	43e34 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   29e9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   29ea0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   29ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29ea4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   29ea6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   29ea8:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   29eaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   29eac:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   29eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29eb0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   29eb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29eb4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29eb6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29eb8:	2308      	movs	r3, #8
   29eba:	4630      	mov	r0, r6
   29ebc:	f019 ffba 	bl	43e34 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   29ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29ec2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   29ec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   29ec6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   29ec8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   29eca:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   29ecc:	6a23      	ldr	r3, [r4, #32]
   29ece:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   29ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29ed2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   29ed4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   29ed6:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   29eda:	6b23      	ldr	r3, [r4, #48]	; 0x30
   29edc:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29ede:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29ee0:	2308      	movs	r3, #8
   29ee2:	4630      	mov	r0, r6
   29ee4:	f019 ffa6 	bl	43e34 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   29ee8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   29eea:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   29eec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   29eee:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   29ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29ef4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   29ef6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   29ef8:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   29efa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29efc:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[13];
   29efe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29f00:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29f02:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   29f04:	2308      	movs	r3, #8
   29f06:	4630      	mov	r0, r6
   29f08:	f019 ff94 	bl	43e34 <uECC_vli_sub>

	if (carry < 0) {
   29f0c:	1a2d      	subs	r5, r5, r0
   29f0e:	d410      	bmi.n	29f32 <vli_mmod_fast_secp256r1+0x16a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   29f10:	4c0d      	ldr	r4, [pc, #52]	; (29f48 <vli_mmod_fast_secp256r1+0x180>)
		while (carry || 
   29f12:	b935      	cbnz	r5, 29f22 <vli_mmod_fast_secp256r1+0x15a>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   29f14:	2208      	movs	r2, #8
   29f16:	4631      	mov	r1, r6
   29f18:	4620      	mov	r0, r4
   29f1a:	f019 ff64 	bl	43de6 <uECC_vli_cmp_unsafe>
		while (carry || 
   29f1e:	2801      	cmp	r0, #1
   29f20:	d00f      	beq.n	29f42 <vli_mmod_fast_secp256r1+0x17a>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   29f22:	2308      	movs	r3, #8
   29f24:	4622      	mov	r2, r4
   29f26:	4631      	mov	r1, r6
   29f28:	4630      	mov	r0, r6
   29f2a:	f019 ff83 	bl	43e34 <uECC_vli_sub>
   29f2e:	1a2d      	subs	r5, r5, r0
   29f30:	e7ef      	b.n	29f12 <vli_mmod_fast_secp256r1+0x14a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   29f32:	4a05      	ldr	r2, [pc, #20]	; (29f48 <vli_mmod_fast_secp256r1+0x180>)
   29f34:	2308      	movs	r3, #8
   29f36:	4631      	mov	r1, r6
   29f38:	4630      	mov	r0, r6
   29f3a:	f019 fe5a 	bl	43bf2 <uECC_vli_add>
		while (carry < 0);
   29f3e:	182d      	adds	r5, r5, r0
   29f40:	d4f8      	bmi.n	29f34 <vli_mmod_fast_secp256r1+0x16c>
		}
	}
}
   29f42:	b009      	add	sp, #36	; 0x24
   29f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29f46:	bf00      	nop
   29f48:	00049aec 	.word	0x00049aec

00029f4c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   29f4c:	4904      	ldr	r1, [pc, #16]	; (29f60 <sub_bytes+0x14>)
   29f4e:	1e43      	subs	r3, r0, #1
   29f50:	300f      	adds	r0, #15
   29f52:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   29f56:	5c8a      	ldrb	r2, [r1, r2]
   29f58:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   29f5a:	4283      	cmp	r3, r0
   29f5c:	d1f9      	bne.n	29f52 <sub_bytes+0x6>
	}
}
   29f5e:	4770      	bx	lr
   29f60:	0004b131 	.word	0x0004b131

00029f64 <tc_aes128_set_encrypt_key>:
{
   29f64:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   29f66:	4e26      	ldr	r6, [pc, #152]	; (2a000 <tc_aes128_set_encrypt_key+0x9c>)
{
   29f68:	4607      	mov	r7, r0
   29f6a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   29f6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   29f6e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   29f70:	ad01      	add	r5, sp, #4
   29f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   29f74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   29f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   29f78:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   29f7c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   29f80:	4638      	mov	r0, r7
   29f82:	2f00      	cmp	r7, #0
   29f84:	d038      	beq.n	29ff8 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   29f86:	2c00      	cmp	r4, #0
   29f88:	d038      	beq.n	29ffc <tc_aes128_set_encrypt_key+0x98>
   29f8a:	1f38      	subs	r0, r7, #4
   29f8c:	4621      	mov	r1, r4
   29f8e:	4602      	mov	r2, r0
   29f90:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   29f92:	784b      	ldrb	r3, [r1, #1]
   29f94:	780d      	ldrb	r5, [r1, #0]
   29f96:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   29f98:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   29f9c:	78cd      	ldrb	r5, [r1, #3]
   29f9e:	432b      	orrs	r3, r5
   29fa0:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   29fa2:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   29fa4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   29fa8:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   29faa:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   29fae:	d1f0      	bne.n	29f92 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   29fb0:	4c14      	ldr	r4, [pc, #80]	; (2a004 <tc_aes128_set_encrypt_key+0xa0>)
   29fb2:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   29fb4:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   29fb6:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   29fb8:	d116      	bne.n	29fe8 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   29fba:	f3c3 4207 	ubfx	r2, r3, #16, #8
   29fbe:	5ca5      	ldrb	r5, [r4, r2]
   29fc0:	0e1a      	lsrs	r2, r3, #24
   29fc2:	5ca2      	ldrb	r2, [r4, r2]
   29fc4:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   29fc8:	f3c3 2507 	ubfx	r5, r3, #8, #8
   29fcc:	b2db      	uxtb	r3, r3
   29fce:	5d65      	ldrb	r5, [r4, r5]
   29fd0:	5ce3      	ldrb	r3, [r4, r3]
   29fd2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   29fd6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   29fda:	f021 0303 	bic.w	r3, r1, #3
   29fde:	3330      	adds	r3, #48	; 0x30
   29fe0:	446b      	add	r3, sp
   29fe2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   29fe6:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   29fe8:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   29fec:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   29fee:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   29ff0:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   29ff2:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   29ff4:	d1de      	bne.n	29fb4 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   29ff6:	2001      	movs	r0, #1
}
   29ff8:	b00d      	add	sp, #52	; 0x34
   29ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   29ffc:	4620      	mov	r0, r4
   29ffe:	e7fb      	b.n	29ff8 <tc_aes128_set_encrypt_key+0x94>
   2a000:	00049794 	.word	0x00049794
   2a004:	0004b131 	.word	0x0004b131

0002a008 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   2a008:	4901      	ldr	r1, [pc, #4]	; (2a010 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   2a00a:	2210      	movs	r2, #16
	str	r2, [r1]
   2a00c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   2a00e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   2a010:	e000ed10 	.word	0xe000ed10

0002a014 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   2a014:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   2a016:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   2a018:	f380 8811 	msr	BASEPRI, r0
	isb
   2a01c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   2a020:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   2a024:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   2a026:	b662      	cpsie	i
	isb
   2a028:	f3bf 8f6f 	isb	sy

	bx	lr
   2a02c:	4770      	bx	lr
   2a02e:	bf00      	nop

0002a030 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   2a030:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   2a032:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   2a034:	f381 8811 	msr	BASEPRI, r1

	wfe
   2a038:	bf20      	wfe

	msr	BASEPRI, r0
   2a03a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   2a03e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   2a040:	4770      	bx	lr
   2a042:	bf00      	nop

0002a044 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   2a044:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2a046:	2b00      	cmp	r3, #0
   2a048:	db07      	blt.n	2a05a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a04a:	4904      	ldr	r1, [pc, #16]	; (2a05c <arch_irq_enable+0x18>)
   2a04c:	095b      	lsrs	r3, r3, #5
   2a04e:	f000 001f 	and.w	r0, r0, #31
   2a052:	2201      	movs	r2, #1
   2a054:	4082      	lsls	r2, r0
   2a056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   2a05a:	4770      	bx	lr
   2a05c:	e000e100 	.word	0xe000e100

0002a060 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   2a060:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2a062:	2b00      	cmp	r3, #0
   2a064:	db0c      	blt.n	2a080 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a066:	095b      	lsrs	r3, r3, #5
   2a068:	4906      	ldr	r1, [pc, #24]	; (2a084 <arch_irq_disable+0x24>)
   2a06a:	f000 001f 	and.w	r0, r0, #31
   2a06e:	3320      	adds	r3, #32
   2a070:	2201      	movs	r2, #1
   2a072:	4082      	lsls	r2, r0
   2a074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2a078:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a07c:	f3bf 8f6f 	isb	sy
}
   2a080:	4770      	bx	lr
   2a082:	bf00      	nop
   2a084:	e000e100 	.word	0xe000e100

0002a088 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   2a088:	4b05      	ldr	r3, [pc, #20]	; (2a0a0 <arch_irq_is_enabled+0x18>)
   2a08a:	0942      	lsrs	r2, r0, #5
   2a08c:	f000 001f 	and.w	r0, r0, #31
   2a090:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2a094:	2301      	movs	r3, #1
   2a096:	fa03 f000 	lsl.w	r0, r3, r0
}
   2a09a:	4010      	ands	r0, r2
   2a09c:	4770      	bx	lr
   2a09e:	bf00      	nop
   2a0a0:	e000e100 	.word	0xe000e100

0002a0a4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   2a0a4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2a0a6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a0a8:	bfa8      	it	ge
   2a0aa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   2a0ae:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a0b2:	bfb8      	it	lt
   2a0b4:	4b06      	ldrlt	r3, [pc, #24]	; (2a0d0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a0b6:	ea4f 1141 	mov.w	r1, r1, lsl #5
   2a0ba:	bfac      	ite	ge
   2a0bc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a0c0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a0c4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a0c6:	bfb4      	ite	lt
   2a0c8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a0ca:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
   2a0ce:	4770      	bx	lr
   2a0d0:	e000ed14 	.word	0xe000ed14

0002a0d4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   2a0d4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2a0d6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   2a0d8:	4b04      	ldr	r3, [pc, #16]	; (2a0ec <_arch_isr_direct_pm+0x18>)
   2a0da:	699a      	ldr	r2, [r3, #24]
   2a0dc:	b11a      	cbz	r2, 2a0e6 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   2a0de:	2200      	movs	r2, #0
   2a0e0:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   2a0e2:	f01e fc19 	bl	48918 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2a0e6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   2a0e8:	bd08      	pop	{r3, pc}
   2a0ea:	bf00      	nop
   2a0ec:	20003b04 	.word	0x20003b04

0002a0f0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   2a0f0:	bf30      	wfi
    b z_SysNmiOnReset
   2a0f2:	f7ff bffd 	b.w	2a0f0 <z_SysNmiOnReset>
   2a0f6:	bf00      	nop

0002a0f8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2a0f8:	4a0f      	ldr	r2, [pc, #60]	; (2a138 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   2a0fa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2a0fc:	4b0f      	ldr	r3, [pc, #60]	; (2a13c <z_arm_prep_c+0x44>)
   2a0fe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2a102:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   2a104:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a108:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   2a10c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2a110:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   2a114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   2a118:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   2a11c:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   2a120:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   2a124:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   2a128:	f016 ff0e 	bl	40f48 <z_bss_zero>
	z_data_copy();
   2a12c:	f017 ffd6 	bl	420dc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   2a130:	f000 f994 	bl	2a45c <z_arm_interrupt_init>
	z_cstart();
   2a134:	f016 ff12 	bl	40f5c <z_cstart>
   2a138:	00026000 	.word	0x00026000
   2a13c:	e000ed00 	.word	0xe000ed00

0002a140 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   2a140:	4a09      	ldr	r2, [pc, #36]	; (2a168 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2a142:	490a      	ldr	r1, [pc, #40]	; (2a16c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   2a144:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2a146:	6809      	ldr	r1, [r1, #0]
   2a148:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2a14a:	4909      	ldr	r1, [pc, #36]	; (2a170 <arch_swap+0x30>)
	_current->arch.basepri = key;
   2a14c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2a14e:	684b      	ldr	r3, [r1, #4]
   2a150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2a154:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   2a156:	2300      	movs	r3, #0
   2a158:	f383 8811 	msr	BASEPRI, r3
   2a15c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   2a160:	6893      	ldr	r3, [r2, #8]
}
   2a162:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   2a164:	4770      	bx	lr
   2a166:	bf00      	nop
   2a168:	20003b04 	.word	0x20003b04
   2a16c:	0004af0c 	.word	0x0004af0c
   2a170:	e000ed00 	.word	0xe000ed00

0002a174 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   2a174:	490f      	ldr	r1, [pc, #60]	; (2a1b4 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2a176:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   2a178:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   2a17c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2a17e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2a182:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2a186:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   2a188:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   2a18c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   2a190:	4f09      	ldr	r7, [pc, #36]	; (2a1b8 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2a192:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2a196:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   2a198:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2a19a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   2a19c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   2a19e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   2a1a0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2a1a2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2a1a6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2a1aa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2a1ae:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   2a1b2:	4770      	bx	lr
    ldr r1, =_kernel
   2a1b4:	20003b04 	.word	0x20003b04
    ldr v4, =_SCS_ICSR
   2a1b8:	e000ed04 	.word	0xe000ed04

0002a1bc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   2a1bc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   2a1c0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2a1c2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2a1c6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2a1ca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   2a1cc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   2a1d0:	2902      	cmp	r1, #2
    beq _oops
   2a1d2:	d0ff      	beq.n	2a1d4 <_oops>

0002a1d4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   2a1d4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   2a1d6:	f01a fd4f 	bl	44c78 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   2a1da:	bd01      	pop	{r0, pc}

0002a1dc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   2a1dc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2a1e0:	9b00      	ldr	r3, [sp, #0]
   2a1e2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   2a1e6:	490a      	ldr	r1, [pc, #40]	; (2a210 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   2a1e8:	9b01      	ldr	r3, [sp, #4]
   2a1ea:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2a1ee:	9b02      	ldr	r3, [sp, #8]
   2a1f0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   2a1f4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   2a1f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2a1fc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   2a200:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   2a204:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   2a206:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   2a208:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   2a20a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2a20c:	4770      	bx	lr
   2a20e:	bf00      	nop
   2a210:	00042e93 	.word	0x00042e93

0002a214 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   2a214:	4b07      	ldr	r3, [pc, #28]	; (2a234 <arch_switch_to_main_thread+0x20>)
   2a216:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   2a218:	4610      	mov	r0, r2
   2a21a:	f381 8809 	msr	PSP, r1
   2a21e:	2100      	movs	r1, #0
   2a220:	b663      	cpsie	if
   2a222:	f381 8811 	msr	BASEPRI, r1
   2a226:	f3bf 8f6f 	isb	sy
   2a22a:	2200      	movs	r2, #0
   2a22c:	2300      	movs	r3, #0
   2a22e:	f018 fe30 	bl	42e92 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   2a232:	bf00      	nop
   2a234:	20003b04 	.word	0x20003b04

0002a238 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   2a238:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2a23a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2a23c:	4a0b      	ldr	r2, [pc, #44]	; (2a26c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2a23e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   2a240:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   2a242:	bf1e      	ittt	ne
	movne	r1, #0
   2a244:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2a246:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   2a248:	f01e fb66 	blne	48918 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2a24c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2a24e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   2a252:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2a256:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   2a25a:	4905      	ldr	r1, [pc, #20]	; (2a270 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2a25c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2a25e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   2a260:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   2a262:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   2a266:	4903      	ldr	r1, [pc, #12]	; (2a274 <_isr_wrapper+0x3c>)
	bx r1
   2a268:	4708      	bx	r1
   2a26a:	0000      	.short	0x0000
	ldr r2, =_kernel
   2a26c:	20003b04 	.word	0x20003b04
	ldr r1, =_sw_isr_table
   2a270:	000494dc 	.word	0x000494dc
	ldr r1, =z_arm_int_exit
   2a274:	0002a279 	.word	0x0002a279

0002a278 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   2a278:	4b04      	ldr	r3, [pc, #16]	; (2a28c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   2a27a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   2a27c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   2a27e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   2a280:	d003      	beq.n	2a28a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2a282:	4903      	ldr	r1, [pc, #12]	; (2a290 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   2a284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   2a288:	600a      	str	r2, [r1, #0]

0002a28a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   2a28a:	4770      	bx	lr
	ldr r3, =_kernel
   2a28c:	20003b04 	.word	0x20003b04
	ldr r1, =_SCS_ICSR
   2a290:	e000ed04 	.word	0xe000ed04

0002a294 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2a294:	4b0d      	ldr	r3, [pc, #52]	; (2a2cc <bus_fault.constprop.0+0x38>)
   2a296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   2a298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   2a29a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a29c:	0592      	lsls	r2, r2, #22
   2a29e:	d508      	bpl.n	2a2b2 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   2a2a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2a2a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a2a4:	0412      	lsls	r2, r2, #16
   2a2a6:	d504      	bpl.n	2a2b2 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   2a2a8:	b118      	cbz	r0, 2a2b2 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2a2aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a2ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   2a2b0:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2a2b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2a2b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a2b6:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2a2b8:	4a04      	ldr	r2, [pc, #16]	; (2a2cc <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2a2ba:	bf58      	it	pl
   2a2bc:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2a2be:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   2a2c0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2a2c2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   2a2c6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2a2c8:	7008      	strb	r0, [r1, #0]

	return reason;
}
   2a2ca:	4770      	bx	lr
   2a2cc:	e000ed00 	.word	0xe000ed00

0002a2d0 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2a2d0:	4b0e      	ldr	r3, [pc, #56]	; (2a30c <mem_manage_fault.constprop.0+0x3c>)
   2a2d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   2a2d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   2a2d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a2d8:	0792      	lsls	r2, r2, #30
   2a2da:	d508      	bpl.n	2a2ee <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
   2a2dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2a2de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a2e0:	0612      	lsls	r2, r2, #24
   2a2e2:	d504      	bpl.n	2a2ee <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
   2a2e4:	b118      	cbz	r0, 2a2ee <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2a2e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a2e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   2a2ec:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   2a2ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2a2f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2a2f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a2f4:	06d2      	lsls	r2, r2, #27
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2a2f6:	4a05      	ldr	r2, [pc, #20]	; (2a30c <mem_manage_fault.constprop.0+0x3c>)
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   2a2f8:	bf58      	it	pl
   2a2fa:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2a2fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2a2fe:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2a300:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   2a304:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2a306:	7008      	strb	r0, [r1, #0]
}
   2a308:	4770      	bx	lr
   2a30a:	bf00      	nop
   2a30c:	e000ed00 	.word	0xe000ed00

0002a310 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   2a310:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2a312:	4b48      	ldr	r3, [pc, #288]	; (2a434 <z_arm_fault+0x124>)
   2a314:	685b      	ldr	r3, [r3, #4]
{
   2a316:	b08a      	sub	sp, #40	; 0x28
   2a318:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2a31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2a31e:	2500      	movs	r5, #0
   2a320:	f385 8811 	msr	BASEPRI, r5
   2a324:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   2a328:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   2a32c:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   2a330:	d111      	bne.n	2a356 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   2a332:	f002 000c 	and.w	r0, r2, #12
   2a336:	2808      	cmp	r0, #8
   2a338:	d00d      	beq.n	2a356 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   2a33a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   2a33c:	bf4c      	ite	mi
   2a33e:	460e      	movmi	r6, r1
			*nested_exc = true;
   2a340:	2501      	movpl	r5, #1
	*recoverable = false;
   2a342:	2200      	movs	r2, #0
	switch (fault) {
   2a344:	3b03      	subs	r3, #3
	*recoverable = false;
   2a346:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   2a34a:	2b03      	cmp	r3, #3
   2a34c:	d86a      	bhi.n	2a424 <z_arm_fault+0x114>
   2a34e:	e8df f003 	tbb	[pc, r3]
   2a352:	5404      	.short	0x5404
   2a354:	5c58      	.short	0x5c58
		return NULL;
   2a356:	462e      	mov	r6, r5
   2a358:	e7f3      	b.n	2a342 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2a35a:	4b36      	ldr	r3, [pc, #216]	; (2a434 <z_arm_fault+0x124>)
   2a35c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2a35e:	f014 0402 	ands.w	r4, r4, #2
   2a362:	d15f      	bne.n	2a424 <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   2a364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2a366:	2a00      	cmp	r2, #0
   2a368:	db14      	blt.n	2a394 <z_arm_fault+0x84>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2a36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2a36c:	0052      	lsls	r2, r2, #1
   2a36e:	d511      	bpl.n	2a394 <z_arm_fault+0x84>
	uint16_t fault_insn = *(ret_addr - 1);
   2a370:	69b2      	ldr	r2, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   2a372:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   2a376:	f64d 7202 	movw	r2, #57090	; 0xdf02
   2a37a:	4291      	cmp	r1, r2
   2a37c:	d009      	beq.n	2a392 <z_arm_fault+0x82>
		} else if (SCB_MMFSR != 0) {
   2a37e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   2a382:	b302      	cbz	r2, 2a3c6 <z_arm_fault+0xb6>
			reason = mem_manage_fault(esf, 1, recoverable);
   2a384:	f10d 0107 	add.w	r1, sp, #7
   2a388:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   2a38a:	f7ff ffa1 	bl	2a2d0 <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
   2a38e:	4604      	mov	r4, r0
		break;
   2a390:	e000      	b.n	2a394 <z_arm_fault+0x84>
			reason = esf->basic.r0;
   2a392:	6834      	ldr	r4, [r6, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2a394:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a398:	b99b      	cbnz	r3, 2a3c2 <z_arm_fault+0xb2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2a39a:	2220      	movs	r2, #32
   2a39c:	4631      	mov	r1, r6
   2a39e:	a802      	add	r0, sp, #8
   2a3a0:	f01a fd2f 	bl	44e02 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2a3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a3a6:	2d00      	cmp	r5, #0
   2a3a8:	d03e      	beq.n	2a428 <z_arm_fault+0x118>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2a3aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2a3ae:	b922      	cbnz	r2, 2a3ba <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   2a3b0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2a3b4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2a3b8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   2a3ba:	a902      	add	r1, sp, #8
   2a3bc:	4620      	mov	r0, r4
   2a3be:	f01a fc59 	bl	44c74 <z_arm_fatal_error>
}
   2a3c2:	b00a      	add	sp, #40	; 0x28
   2a3c4:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   2a3c6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   2a3ca:	b12a      	cbz	r2, 2a3d8 <z_arm_fault+0xc8>
			reason = bus_fault(esf, 1, recoverable);
   2a3cc:	f10d 0107 	add.w	r1, sp, #7
   2a3d0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   2a3d2:	f7ff ff5f 	bl	2a294 <bus_fault.constprop.0>
   2a3d6:	e7da      	b.n	2a38e <z_arm_fault+0x7e>
		} else if (SCB_UFSR != 0) {
   2a3d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   2a3da:	b292      	uxth	r2, r2
   2a3dc:	2a00      	cmp	r2, #0
   2a3de:	d0d9      	beq.n	2a394 <z_arm_fault+0x84>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2a3e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2a3e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2a3e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2a3e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2a3e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2a3ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2a3ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a3ee:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2a3f2:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2a3f6:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
   2a3f8:	e7cc      	b.n	2a394 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
   2a3fa:	f10d 0107 	add.w	r1, sp, #7
   2a3fe:	2000      	movs	r0, #0
   2a400:	e7c3      	b.n	2a38a <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
   2a402:	f10d 0107 	add.w	r1, sp, #7
   2a406:	2000      	movs	r0, #0
   2a408:	e7e3      	b.n	2a3d2 <z_arm_fault+0xc2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2a40a:	4b0a      	ldr	r3, [pc, #40]	; (2a434 <z_arm_fault+0x124>)
   2a40c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2a40e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2a410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2a412:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2a414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2a416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2a418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2a41a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2a41e:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2a422:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2a424:	2400      	movs	r4, #0
   2a426:	e7b5      	b.n	2a394 <z_arm_fault+0x84>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2a428:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2a42c:	f023 0301 	bic.w	r3, r3, #1
   2a430:	e7c2      	b.n	2a3b8 <z_arm_fault+0xa8>
   2a432:	bf00      	nop
   2a434:	e000ed00 	.word	0xe000ed00

0002a438 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2a438:	4a02      	ldr	r2, [pc, #8]	; (2a444 <z_arm_fault_init+0xc>)
   2a43a:	6953      	ldr	r3, [r2, #20]
   2a43c:	f043 0310 	orr.w	r3, r3, #16
   2a440:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2a442:	4770      	bx	lr
   2a444:	e000ed00 	.word	0xe000ed00

0002a448 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   2a448:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2a44c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   2a450:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   2a452:	4672      	mov	r2, lr
	bl z_arm_fault
   2a454:	f7ff ff5c 	bl	2a310 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   2a458:	bd01      	pop	{r0, pc}
   2a45a:	bf00      	nop

0002a45c <z_arm_interrupt_init>:
   2a45c:	4804      	ldr	r0, [pc, #16]	; (2a470 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2a45e:	2300      	movs	r3, #0
   2a460:	2120      	movs	r1, #32
   2a462:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2a464:	3301      	adds	r3, #1
   2a466:	2b30      	cmp	r3, #48	; 0x30
   2a468:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2a46c:	d1f9      	bne.n	2a462 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2a46e:	4770      	bx	lr
   2a470:	e000e100 	.word	0xe000e100

0002a474 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   2a474:	f01e ff34 	bl	492e0 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2a478:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2a47a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2a47e:	4808      	ldr	r0, [pc, #32]	; (2a4a0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2a480:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2a484:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2a486:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2a48a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2a48e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2a490:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2a492:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   2a496:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2a49a:	f7ff fe2d 	bl	2a0f8 <z_arm_prep_c>
   2a49e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   2a4a0:	20005af0 	.word	0x20005af0

0002a4a4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   2a4a4:	4b06      	ldr	r3, [pc, #24]	; (2a4c0 <z_impl_k_thread_abort+0x1c>)
   2a4a6:	689b      	ldr	r3, [r3, #8]
   2a4a8:	4283      	cmp	r3, r0
   2a4aa:	d107      	bne.n	2a4bc <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a4ac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   2a4b0:	b123      	cbz	r3, 2a4bc <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2a4b2:	4a04      	ldr	r2, [pc, #16]	; (2a4c4 <z_impl_k_thread_abort+0x20>)
   2a4b4:	6853      	ldr	r3, [r2, #4]
   2a4b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2a4ba:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   2a4bc:	f017 bdaa 	b.w	42014 <z_thread_abort>
   2a4c0:	20003b04 	.word	0x20003b04
   2a4c4:	e000ed00 	.word	0xe000ed00

0002a4c8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2a4c8:	4b02      	ldr	r3, [pc, #8]	; (2a4d4 <z_arm_configure_static_mpu_regions+0xc>)
   2a4ca:	4a03      	ldr	r2, [pc, #12]	; (2a4d8 <z_arm_configure_static_mpu_regions+0x10>)
   2a4cc:	4803      	ldr	r0, [pc, #12]	; (2a4dc <z_arm_configure_static_mpu_regions+0x14>)
   2a4ce:	2101      	movs	r1, #1
   2a4d0:	f000 b85e 	b.w	2a590 <arm_core_mpu_configure_static_mpu_regions>
   2a4d4:	20040000 	.word	0x20040000
   2a4d8:	20000000 	.word	0x20000000
   2a4dc:	00049b98 	.word	0x00049b98

0002a4e0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   2a4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   2a4e2:	4e1f      	ldr	r6, [pc, #124]	; (2a560 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2a4e4:	2500      	movs	r5, #0
   2a4e6:	428d      	cmp	r5, r1
   2a4e8:	db01      	blt.n	2a4ee <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   2a4ea:	4610      	mov	r0, r2
   2a4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   2a4ee:	6844      	ldr	r4, [r0, #4]
   2a4f0:	b39c      	cbz	r4, 2a55a <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
   2a4f2:	b153      	cbz	r3, 2a50a <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   2a4f4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   2a4f8:	ea14 0f0c 	tst.w	r4, ip
   2a4fc:	d118      	bne.n	2a530 <mpu_configure_regions+0x50>
		&&
   2a4fe:	2c1f      	cmp	r4, #31
   2a500:	d916      	bls.n	2a530 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   2a502:	6807      	ldr	r7, [r0, #0]
		&&
   2a504:	ea1c 0f07 	tst.w	ip, r7
   2a508:	d112      	bne.n	2a530 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   2a50a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   2a50c:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2a50e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   2a512:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   2a514:	d90f      	bls.n	2a536 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
   2a516:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   2a51a:	d80e      	bhi.n	2a53a <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2a51c:	3c01      	subs	r4, #1
   2a51e:	fab4 f484 	clz	r4, r4
   2a522:	f1c4 041f 	rsb	r4, r4, #31
   2a526:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   2a528:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2a52a:	ea4c 0c04 	orr.w	ip, ip, r4
   2a52e:	d906      	bls.n	2a53e <mpu_configure_regions+0x5e>
			return -EINVAL;
   2a530:	f06f 0215 	mvn.w	r2, #21
   2a534:	e7d9      	b.n	2a4ea <mpu_configure_regions+0xa>
		return REGION_32B;
   2a536:	2408      	movs	r4, #8
   2a538:	e7f6      	b.n	2a528 <mpu_configure_regions+0x48>
		return REGION_4G;
   2a53a:	243e      	movs	r4, #62	; 0x3e
   2a53c:	e7f4      	b.n	2a528 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a53e:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   2a542:	4314      	orrs	r4, r2
   2a544:	f044 0410 	orr.w	r4, r4, #16
   2a548:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a54c:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2a550:	f04c 0401 	orr.w	r4, ip, #1
   2a554:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
   2a558:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   2a55a:	3501      	adds	r5, #1
   2a55c:	300c      	adds	r0, #12
   2a55e:	e7c2      	b.n	2a4e6 <mpu_configure_regions+0x6>
   2a560:	e000ed00 	.word	0xe000ed00

0002a564 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2a564:	4b04      	ldr	r3, [pc, #16]	; (2a578 <arm_core_mpu_enable+0x14>)
   2a566:	2205      	movs	r2, #5
   2a568:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   2a56c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a570:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   2a574:	4770      	bx	lr
   2a576:	bf00      	nop
   2a578:	e000ed00 	.word	0xe000ed00

0002a57c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   2a57c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   2a580:	4b02      	ldr	r3, [pc, #8]	; (2a58c <arm_core_mpu_disable+0x10>)
   2a582:	2200      	movs	r2, #0
   2a584:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   2a588:	4770      	bx	lr
   2a58a:	bf00      	nop
   2a58c:	e000ed00 	.word	0xe000ed00

0002a590 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   2a590:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2a592:	4c03      	ldr	r4, [pc, #12]	; (2a5a0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   2a594:	2301      	movs	r3, #1
   2a596:	7822      	ldrb	r2, [r4, #0]
   2a598:	f7ff ffa2 	bl	2a4e0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2a59c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   2a59e:	bd10      	pop	{r4, pc}
   2a5a0:	20003bc5 	.word	0x20003bc5

0002a5a4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2a5a4:	4914      	ldr	r1, [pc, #80]	; (2a5f8 <z_arm_mpu_init+0x54>)
   2a5a6:	6808      	ldr	r0, [r1, #0]
   2a5a8:	2808      	cmp	r0, #8
{
   2a5aa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   2a5ac:	d821      	bhi.n	2a5f2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   2a5ae:	f7ff ffe5 	bl	2a57c <arm_core_mpu_disable>
   2a5b2:	4c12      	ldr	r4, [pc, #72]	; (2a5fc <z_arm_mpu_init+0x58>)
   2a5b4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2a5b6:	2200      	movs	r2, #0
   2a5b8:	4290      	cmp	r0, r2
   2a5ba:	f101 010c 	add.w	r1, r1, #12
   2a5be:	d105      	bne.n	2a5cc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   2a5c0:	4b0f      	ldr	r3, [pc, #60]	; (2a600 <z_arm_mpu_init+0x5c>)
   2a5c2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   2a5c4:	f7ff ffce 	bl	2a564 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   2a5c8:	2000      	movs	r0, #0
}
   2a5ca:	bd10      	pop	{r4, pc}
   2a5cc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a5d0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   2a5d4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   2a5d8:	4313      	orrs	r3, r2
   2a5da:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2a5de:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2a5e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2a5e6:	f043 0301 	orr.w	r3, r3, #1
   2a5ea:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2a5ee:	3201      	adds	r2, #1
   2a5f0:	e7e2      	b.n	2a5b8 <z_arm_mpu_init+0x14>
		return -1;
   2a5f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a5f6:	e7e8      	b.n	2a5ca <z_arm_mpu_init+0x26>
   2a5f8:	00049ba4 	.word	0x00049ba4
   2a5fc:	e000ed00 	.word	0xe000ed00
   2a600:	20003bc5 	.word	0x20003bc5

0002a604 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   2a604:	b40c      	push	{r2, r3}
   2a606:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   2a608:	b909      	cbnz	r1, 2a60e <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   2a60a:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
   2a60e:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   2a612:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2a614:	9a06      	ldr	r2, [sp, #24]
   2a616:	4806      	ldr	r0, [pc, #24]	; (2a630 <snprintf+0x2c>)
	va_start(vargs, format);
   2a618:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2a61a:	a902      	add	r1, sp, #8
   2a61c:	f7fd fd18 	bl	28050 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   2a620:	9b02      	ldr	r3, [sp, #8]
   2a622:	2200      	movs	r2, #0
   2a624:	701a      	strb	r2, [r3, #0]
	return r;
}
   2a626:	b005      	add	sp, #20
   2a628:	f85d eb04 	ldr.w	lr, [sp], #4
   2a62c:	b002      	add	sp, #8
   2a62e:	4770      	bx	lr
   2a630:	00044e2b 	.word	0x00044e2b

0002a634 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   2a634:	f04f 0320 	mov.w	r3, #32
   2a638:	f3ef 8211 	mrs	r2, BASEPRI
   2a63c:	f383 8812 	msr	BASEPRI_MAX, r3
   2a640:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2a644:	4906      	ldr	r1, [pc, #24]	; (2a660 <nordicsemi_nrf52_init+0x2c>)
   2a646:	2301      	movs	r3, #1
   2a648:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2a64c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2a650:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   2a654:	f382 8811 	msr	BASEPRI, r2
   2a658:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2a65c:	2000      	movs	r0, #0
   2a65e:	4770      	bx	lr
   2a660:	4001e000 	.word	0x4001e000

0002a664 <sys_arch_reboot>:
    *p_gpregret = val;
   2a664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a668:	b2c0      	uxtb	r0, r0
   2a66a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   2a66e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2a672:	4905      	ldr	r1, [pc, #20]	; (2a688 <sys_arch_reboot+0x24>)
   2a674:	4b05      	ldr	r3, [pc, #20]	; (2a68c <sys_arch_reboot+0x28>)
   2a676:	68ca      	ldr	r2, [r1, #12]
   2a678:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2a67c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2a67e:	60cb      	str	r3, [r1, #12]
   2a680:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2a684:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2a686:	e7fd      	b.n	2a684 <sys_arch_reboot+0x20>
   2a688:	e000ed00 	.word	0xe000ed00
   2a68c:	05fa0004 	.word	0x05fa0004

0002a690 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   2a690:	b120      	cbz	r0, 2a69c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   2a692:	4b03      	ldr	r3, [pc, #12]	; (2a6a0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   2a694:	0180      	lsls	r0, r0, #6
   2a696:	f043 0301 	orr.w	r3, r3, #1
   2a69a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   2a69c:	4770      	bx	lr
   2a69e:	bf00      	nop
   2a6a0:	00049820 	.word	0x00049820

0002a6a4 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   2a6a4:	b570      	push	{r4, r5, r6, lr}
   2a6a6:	4c21      	ldr	r4, [pc, #132]	; (2a72c <le_gen_dhkey+0x88>)
   2a6a8:	f3bf 8f5b 	dmb	ish
   2a6ac:	6823      	ldr	r3, [r4, #0]
   2a6ae:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2a6b2:	07da      	lsls	r2, r3, #31
{
   2a6b4:	4606      	mov	r6, r0
   2a6b6:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2a6b8:	d501      	bpl.n	2a6be <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   2a6ba:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   2a6bc:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2a6be:	2901      	cmp	r1, #1
   2a6c0:	d831      	bhi.n	2a726 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a6c2:	f3bf 8f5b 	dmb	ish
   2a6c6:	e854 3f00 	ldrex	r3, [r4]
   2a6ca:	f043 0202 	orr.w	r2, r3, #2
   2a6ce:	e844 2100 	strex	r1, r2, [r4]
   2a6d2:	2900      	cmp	r1, #0
   2a6d4:	d1f7      	bne.n	2a6c6 <le_gen_dhkey+0x22>
   2a6d6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   2a6da:	079b      	lsls	r3, r3, #30
   2a6dc:	d4ed      	bmi.n	2a6ba <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   2a6de:	4814      	ldr	r0, [pc, #80]	; (2a730 <le_gen_dhkey+0x8c>)
   2a6e0:	4631      	mov	r1, r6
   2a6e2:	f01a fc38 	bl	44f56 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   2a6e6:	4813      	ldr	r0, [pc, #76]	; (2a734 <le_gen_dhkey+0x90>)
   2a6e8:	f106 0120 	add.w	r1, r6, #32
   2a6ec:	f01a fc33 	bl	44f56 <sys_memcpy_swap.constprop.0>
   2a6f0:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   2a6f4:	b175      	cbz	r5, 2a714 <le_gen_dhkey+0x70>
   2a6f6:	e854 3f00 	ldrex	r3, [r4]
   2a6fa:	f043 0304 	orr.w	r3, r3, #4
   2a6fe:	e844 3200 	strex	r2, r3, [r4]
   2a702:	2a00      	cmp	r2, #0
   2a704:	d1f7      	bne.n	2a6f6 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a706:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   2a70a:	480b      	ldr	r0, [pc, #44]	; (2a738 <le_gen_dhkey+0x94>)
   2a70c:	f016 ff70 	bl	415f0 <z_impl_k_sem_give>
   2a710:	2000      	movs	r0, #0
   2a712:	e7d3      	b.n	2a6bc <le_gen_dhkey+0x18>
   2a714:	e854 3f00 	ldrex	r3, [r4]
   2a718:	f023 0304 	bic.w	r3, r3, #4
   2a71c:	e844 3200 	strex	r2, r3, [r4]
   2a720:	2a00      	cmp	r2, #0
   2a722:	d0f0      	beq.n	2a706 <le_gen_dhkey+0x62>
   2a724:	e7f6      	b.n	2a714 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   2a726:	2012      	movs	r0, #18
   2a728:	e7c8      	b.n	2a6bc <le_gen_dhkey+0x18>
   2a72a:	bf00      	nop
   2a72c:	20001c44 	.word	0x20001c44
   2a730:	20003be6 	.word	0x20003be6
   2a734:	20003c06 	.word	0x20003c06
   2a738:	20000bac 	.word	0x20000bac

0002a73c <ecc_thread>:
{
   2a73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   2a740:	4f5f      	ldr	r7, [pc, #380]	; (2a8c0 <ecc_thread+0x184>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a742:	4d60      	ldr	r5, [pc, #384]	; (2a8c4 <ecc_thread+0x188>)
   2a744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a74c:	4638      	mov	r0, r7
   2a74e:	f016 ff75 	bl	4163c <z_impl_k_sem_take>
   2a752:	f3bf 8f5b 	dmb	ish
   2a756:	682c      	ldr	r4, [r5, #0]
   2a758:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2a75c:	f014 0401 	ands.w	r4, r4, #1
   2a760:	d055      	beq.n	2a80e <ecc_thread+0xd2>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2a762:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2a8c8 <ecc_thread+0x18c>
   2a766:	4c59      	ldr	r4, [pc, #356]	; (2a8cc <ecc_thread+0x190>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2a768:	4e59      	ldr	r6, [pc, #356]	; (2a8d0 <ecc_thread+0x194>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2a76a:	485a      	ldr	r0, [pc, #360]	; (2a8d4 <ecc_thread+0x198>)
   2a76c:	4642      	mov	r2, r8
   2a76e:	4621      	mov	r1, r4
   2a770:	f019 f993 	bl	43a9a <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   2a774:	2800      	cmp	r0, #0
   2a776:	d03e      	beq.n	2a7f6 <ecc_thread+0xba>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2a778:	2220      	movs	r2, #32
   2a77a:	4631      	mov	r1, r6
   2a77c:	4620      	mov	r0, r4
   2a77e:	f01a fb30 	bl	44de2 <memcmp>
   2a782:	2800      	cmp	r0, #0
   2a784:	d0f1      	beq.n	2a76a <ecc_thread+0x2e>
	return 0;
   2a786:	f04f 0800 	mov.w	r8, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2a78a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a78e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a792:	2001      	movs	r0, #1
   2a794:	f000 fa0e 	bl	2abb4 <bt_buf_get_rx>
   2a798:	f100 0608 	add.w	r6, r0, #8
   2a79c:	2102      	movs	r1, #2
   2a79e:	4604      	mov	r4, r0
   2a7a0:	4630      	mov	r0, r6
   2a7a2:	f01d fa78 	bl	47c96 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2a7a6:	233e      	movs	r3, #62	; 0x3e
   2a7a8:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2a7aa:	2342      	movs	r3, #66	; 0x42
   2a7ac:	7043      	strb	r3, [r0, #1]
   2a7ae:	2101      	movs	r1, #1
   2a7b0:	4630      	mov	r0, r6
   2a7b2:	f01d fa70 	bl	47c96 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   2a7b6:	2308      	movs	r3, #8
   2a7b8:	7003      	strb	r3, [r0, #0]
   2a7ba:	2141      	movs	r1, #65	; 0x41
   2a7bc:	4630      	mov	r0, r6
   2a7be:	f01d fa6a 	bl	47c96 <net_buf_simple_add>
   2a7c2:	4606      	mov	r6, r0
	evt->status = status;
   2a7c4:	f800 8b01 	strb.w	r8, [r0], #1
	if (status) {
   2a7c8:	f1b8 0f00 	cmp.w	r8, #0
   2a7cc:	d016      	beq.n	2a7fc <ecc_thread+0xc0>
		(void)memset(evt->key, 0, sizeof(evt->key));
   2a7ce:	2240      	movs	r2, #64	; 0x40
   2a7d0:	2100      	movs	r1, #0
   2a7d2:	f01a fb21 	bl	44e18 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a7d6:	f3bf 8f5b 	dmb	ish
   2a7da:	e855 3f00 	ldrex	r3, [r5]
   2a7de:	f023 0301 	bic.w	r3, r3, #1
   2a7e2:	e845 3200 	strex	r2, r3, [r5]
   2a7e6:	2a00      	cmp	r2, #0
   2a7e8:	d1f7      	bne.n	2a7da <ecc_thread+0x9e>
   2a7ea:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2a7ee:	4620      	mov	r0, r4
	bt_recv(buf);
   2a7f0:	f000 fe28 	bl	2b444 <bt_recv>
	while (true) {
   2a7f4:	e7a6      	b.n	2a744 <ecc_thread+0x8>
			return BT_HCI_ERR_UNSPECIFIED;
   2a7f6:	f04f 081f 	mov.w	r8, #31
   2a7fa:	e7c6      	b.n	2a78a <ecc_thread+0x4e>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   2a7fc:	4935      	ldr	r1, [pc, #212]	; (2a8d4 <ecc_thread+0x198>)
   2a7fe:	f01a fbaa 	bl	44f56 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   2a802:	3120      	adds	r1, #32
   2a804:	f106 0021 	add.w	r0, r6, #33	; 0x21
   2a808:	f01a fba5 	bl	44f56 <sys_memcpy_swap.constprop.0>
   2a80c:	e7e3      	b.n	2a7d6 <ecc_thread+0x9a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a80e:	f3bf 8f5b 	dmb	ish
   2a812:	682b      	ldr	r3, [r5, #0]
   2a814:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2a818:	079b      	lsls	r3, r3, #30
   2a81a:	d593      	bpl.n	2a744 <ecc_thread+0x8>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   2a81c:	492a      	ldr	r1, [pc, #168]	; (2a8c8 <ecc_thread+0x18c>)
   2a81e:	482d      	ldr	r0, [pc, #180]	; (2a8d4 <ecc_thread+0x198>)
   2a820:	f019 fff2 	bl	44808 <uECC_valid_public_key>
	if (ret < 0) {
   2a824:	2800      	cmp	r0, #0
   2a826:	db11      	blt.n	2a84c <ecc_thread+0x110>
   2a828:	f3bf 8f5b 	dmb	ish
		ret = uECC_shared_secret(ecc.public_key_be,
   2a82c:	4927      	ldr	r1, [pc, #156]	; (2a8cc <ecc_thread+0x190>)
   2a82e:	682b      	ldr	r3, [r5, #0]
   2a830:	4827      	ldr	r0, [pc, #156]	; (2a8d0 <ecc_thread+0x194>)
   2a832:	f3bf 8f5b 	dmb	ish
   2a836:	f013 0f04 	tst.w	r3, #4
   2a83a:	f101 0220 	add.w	r2, r1, #32
   2a83e:	4b22      	ldr	r3, [pc, #136]	; (2a8c8 <ecc_thread+0x18c>)
   2a840:	bf18      	it	ne
   2a842:	4601      	movne	r1, r0
   2a844:	4610      	mov	r0, r2
   2a846:	f019 f977 	bl	43b38 <uECC_shared_secret>
   2a84a:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2a84c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a854:	2001      	movs	r0, #1
   2a856:	f000 f9ad 	bl	2abb4 <bt_buf_get_rx>
   2a85a:	f100 0808 	add.w	r8, r0, #8
   2a85e:	2102      	movs	r1, #2
   2a860:	4606      	mov	r6, r0
   2a862:	4640      	mov	r0, r8
   2a864:	f01d fa17 	bl	47c96 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2a868:	233e      	movs	r3, #62	; 0x3e
   2a86a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2a86c:	2322      	movs	r3, #34	; 0x22
   2a86e:	7043      	strb	r3, [r0, #1]
   2a870:	2101      	movs	r1, #1
   2a872:	4640      	mov	r0, r8
   2a874:	f01d fa0f 	bl	47c96 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2a878:	2309      	movs	r3, #9
   2a87a:	7003      	strb	r3, [r0, #0]
   2a87c:	2121      	movs	r1, #33	; 0x21
   2a87e:	4640      	mov	r0, r8
   2a880:	f01d fa09 	bl	47c96 <net_buf_simple_add>
   2a884:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   2a886:	3001      	adds	r0, #1
   2a888:	b99c      	cbnz	r4, 2a8b2 <ecc_thread+0x176>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   2a88a:	221f      	movs	r2, #31
   2a88c:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   2a88e:	21ff      	movs	r1, #255	; 0xff
   2a890:	2220      	movs	r2, #32
   2a892:	f01a fac1 	bl	44e18 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a896:	f3bf 8f5b 	dmb	ish
   2a89a:	e855 3f00 	ldrex	r3, [r5]
   2a89e:	f023 0302 	bic.w	r3, r3, #2
   2a8a2:	e845 3200 	strex	r2, r3, [r5]
   2a8a6:	2a00      	cmp	r2, #0
   2a8a8:	d1f7      	bne.n	2a89a <ecc_thread+0x15e>
   2a8aa:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2a8ae:	4630      	mov	r0, r6
   2a8b0:	e79e      	b.n	2a7f0 <ecc_thread+0xb4>
		evt->status = 0U;
   2a8b2:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2a8b4:	4907      	ldr	r1, [pc, #28]	; (2a8d4 <ecc_thread+0x198>)
		evt->status = 0U;
   2a8b6:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2a8b8:	f01a fb4d 	bl	44f56 <sys_memcpy_swap.constprop.0>
   2a8bc:	e7eb      	b.n	2a896 <ecc_thread+0x15a>
   2a8be:	bf00      	nop
   2a8c0:	20000bac 	.word	0x20000bac
   2a8c4:	20001c44 	.word	0x20001c44
   2a8c8:	00049bc4 	.word	0x00049bc4
   2a8cc:	20003bc6 	.word	0x20003bc6
   2a8d0:	0004b247 	.word	0x0004b247
   2a8d4:	20003be6 	.word	0x20003be6

0002a8d8 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   2a8d8:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2a8da:	7d06      	ldrb	r6, [r0, #20]
   2a8dc:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   2a8de:	b976      	cbnz	r6, 2a8fe <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   2a8e0:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   2a8e2:	881d      	ldrh	r5, [r3, #0]
   2a8e4:	f242 0226 	movw	r2, #8230	; 0x2026
   2a8e8:	4295      	cmp	r5, r2
   2a8ea:	d045      	beq.n	2a978 <bt_hci_ecc_send+0xa0>
   2a8ec:	d80f      	bhi.n	2a90e <bt_hci_ecc_send+0x36>
   2a8ee:	f242 0201 	movw	r2, #8193	; 0x2001
   2a8f2:	4295      	cmp	r5, r2
   2a8f4:	d04f      	beq.n	2a996 <bt_hci_ecc_send+0xbe>
   2a8f6:	f242 0325 	movw	r3, #8229	; 0x2025
   2a8fa:	429d      	cmp	r5, r3
   2a8fc:	d013      	beq.n	2a926 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   2a8fe:	4b2a      	ldr	r3, [pc, #168]	; (2a9a8 <bt_hci_ecc_send+0xd0>)
   2a900:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   2a904:	4620      	mov	r0, r4
   2a906:	691b      	ldr	r3, [r3, #16]
}
   2a908:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   2a90c:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   2a90e:	f242 035e 	movw	r3, #8286	; 0x205e
   2a912:	429d      	cmp	r5, r3
   2a914:	d1f3      	bne.n	2a8fe <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   2a916:	2103      	movs	r1, #3
   2a918:	3008      	adds	r0, #8
   2a91a:	f01d f9db 	bl	47cd4 <net_buf_simple_pull>
	cmd = (void *)buf->data;
   2a91e:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2a920:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2a924:	e02e      	b.n	2a984 <bt_hci_ecc_send+0xac>
   2a926:	2103      	movs	r1, #3
   2a928:	3008      	adds	r0, #8
   2a92a:	f01d f9d3 	bl	47cd4 <net_buf_simple_pull>
	net_buf_unref(buf);
   2a92e:	4620      	mov	r0, r4
   2a930:	f012 fc04 	bl	3d13c <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a934:	f3bf 8f5b 	dmb	ish
   2a938:	4b1c      	ldr	r3, [pc, #112]	; (2a9ac <bt_hci_ecc_send+0xd4>)
   2a93a:	681a      	ldr	r2, [r3, #0]
   2a93c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2a940:	0792      	lsls	r2, r2, #30
   2a942:	d507      	bpl.n	2a954 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   2a944:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   2a946:	4631      	mov	r1, r6
   2a948:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   2a94c:	f01a fadf 	bl	44f0e <send_cmd_status>
}
   2a950:	2000      	movs	r0, #0
   2a952:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a954:	f3bf 8f5b 	dmb	ish
   2a958:	e853 2f00 	ldrex	r2, [r3]
   2a95c:	f042 0101 	orr.w	r1, r2, #1
   2a960:	e843 1000 	strex	r0, r1, [r3]
   2a964:	2800      	cmp	r0, #0
   2a966:	d1f7      	bne.n	2a958 <bt_hci_ecc_send+0x80>
   2a968:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   2a96c:	07d3      	lsls	r3, r2, #31
   2a96e:	d4e9      	bmi.n	2a944 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
   2a970:	480f      	ldr	r0, [pc, #60]	; (2a9b0 <bt_hci_ecc_send+0xd8>)
   2a972:	f016 fe3d 	bl	415f0 <z_impl_k_sem_give>
}
   2a976:	e7e6      	b.n	2a946 <bt_hci_ecc_send+0x6e>
   2a978:	2103      	movs	r1, #3
   2a97a:	3008      	adds	r0, #8
   2a97c:	f01d f9aa 	bl	47cd4 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   2a980:	68a0      	ldr	r0, [r4, #8]
   2a982:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2a984:	f7ff fe8e 	bl	2a6a4 <le_gen_dhkey>
   2a988:	4606      	mov	r6, r0
	net_buf_unref(buf);
   2a98a:	4620      	mov	r0, r4
   2a98c:	f012 fbd6 	bl	3d13c <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   2a990:	4631      	mov	r1, r6
   2a992:	4628      	mov	r0, r5
   2a994:	e7da      	b.n	2a94c <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   2a996:	78da      	ldrb	r2, [r3, #3]
   2a998:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2a99c:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   2a99e:	791a      	ldrb	r2, [r3, #4]
   2a9a0:	f022 0201 	bic.w	r2, r2, #1
   2a9a4:	711a      	strb	r2, [r3, #4]
}
   2a9a6:	e7aa      	b.n	2a8fe <bt_hci_ecc_send+0x26>
   2a9a8:	20000000 	.word	0x20000000
   2a9ac:	20001c44 	.word	0x20001c44
   2a9b0:	20000bac 	.word	0x20000bac

0002a9b4 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   2a9b4:	b510      	push	{r4, lr}
   2a9b6:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2a9b8:	4c0c      	ldr	r4, [pc, #48]	; (2a9ec <bt_hci_ecc_init+0x38>)
   2a9ba:	490d      	ldr	r1, [pc, #52]	; (2a9f0 <bt_hci_ecc_init+0x3c>)
   2a9bc:	2200      	movs	r2, #0
   2a9be:	2300      	movs	r3, #0
   2a9c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2a9c4:	2300      	movs	r3, #0
   2a9c6:	220a      	movs	r2, #10
   2a9c8:	e9cd 2303 	strd	r2, r3, [sp, #12]
   2a9cc:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2a9d0:	9300      	str	r3, [sp, #0]
   2a9d2:	f44f 628f 	mov.w	r2, #1144	; 0x478
   2a9d6:	4b07      	ldr	r3, [pc, #28]	; (2a9f4 <bt_hci_ecc_init+0x40>)
   2a9d8:	4620      	mov	r0, r4
   2a9da:	f016 fbc7 	bl	4116c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2a9de:	4906      	ldr	r1, [pc, #24]	; (2a9f8 <bt_hci_ecc_init+0x44>)
   2a9e0:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   2a9e2:	b008      	add	sp, #32
   2a9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a9e8:	f01d bf91 	b.w	4890e <z_impl_k_thread_name_set>
   2a9ec:	20000e78 	.word	0x20000e78
   2a9f0:	20003f18 	.word	0x20003f18
   2a9f4:	0002a73d 	.word	0x0002a73d
   2a9f8:	0004b240 	.word	0x0004b240

0002a9fc <save_id>:
static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   2a9fc:	4903      	ldr	r1, [pc, #12]	; (2aa0c <save_id+0x10>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   2a9fe:	4804      	ldr	r0, [pc, #16]	; (2aa10 <save_id+0x14>)
   2aa00:	79ca      	ldrb	r2, [r1, #7]
   2aa02:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   2aa06:	f7fe be6d 	b.w	296e4 <settings_save_one>
   2aa0a:	bf00      	nop
   2aa0c:	20000000 	.word	0x20000000
   2aa10:	0004b267 	.word	0x0004b267

0002aa14 <set>:
{
   2aa14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2aa16:	4616      	mov	r6, r2
   2aa18:	461f      	mov	r7, r3
	if (!name) {
   2aa1a:	4604      	mov	r4, r0
   2aa1c:	b920      	cbnz	r0, 2aa28 <set+0x14>
		return -ENOENT;
   2aa1e:	f06f 0401 	mvn.w	r4, #1
}
   2aa22:	4620      	mov	r0, r4
   2aa24:	b003      	add	sp, #12
   2aa26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = settings_name_next(name, &next);
   2aa28:	a901      	add	r1, sp, #4
   2aa2a:	f018 ff1e 	bl	4386a <settings_name_next>
	if (!strncmp(name, "id", len)) {
   2aa2e:	4911      	ldr	r1, [pc, #68]	; (2aa74 <set+0x60>)
	len = settings_name_next(name, &next);
   2aa30:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   2aa32:	4620      	mov	r0, r4
   2aa34:	f01a f9c4 	bl	44dc0 <strncmp>
   2aa38:	4604      	mov	r4, r0
   2aa3a:	2800      	cmp	r0, #0
   2aa3c:	d1ef      	bne.n	2aa1e <set+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aa3e:	f3bf 8f5b 	dmb	ish
   2aa42:	4d0d      	ldr	r5, [pc, #52]	; (2aa78 <set+0x64>)
   2aa44:	682b      	ldr	r3, [r5, #0]
   2aa46:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   2aa4a:	075b      	lsls	r3, r3, #29
   2aa4c:	d4e9      	bmi.n	2aa22 <set+0xe>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   2aa4e:	3dcc      	subs	r5, #204	; 0xcc
   2aa50:	2207      	movs	r2, #7
   2aa52:	4629      	mov	r1, r5
   2aa54:	4638      	mov	r0, r7
   2aa56:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   2aa58:	2806      	cmp	r0, #6
   2aa5a:	d806      	bhi.n	2aa6a <set+0x56>
			(void)memset(bt_dev.id_addr, 0,
   2aa5c:	2207      	movs	r2, #7
   2aa5e:	4621      	mov	r1, r4
   2aa60:	4628      	mov	r0, r5
   2aa62:	f01a f9d9 	bl	44e18 <memset>
			bt_dev.id_count = 0U;
   2aa66:	71ec      	strb	r4, [r5, #7]
   2aa68:	e7db      	b.n	2aa22 <set+0xe>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   2aa6a:	2307      	movs	r3, #7
   2aa6c:	fbb0 f0f3 	udiv	r0, r0, r3
   2aa70:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   2aa72:	e7d6      	b.n	2aa22 <set+0xe>
   2aa74:	0004b063 	.word	0x0004b063
   2aa78:	200000cc 	.word	0x200000cc

0002aa7c <bt_settings_encode_key>:
{
   2aa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa80:	b088      	sub	sp, #32
		snprintk(path, path_size,
   2aa82:	799c      	ldrb	r4, [r3, #6]
{
   2aa84:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   2aa88:	795d      	ldrb	r5, [r3, #5]
   2aa8a:	791e      	ldrb	r6, [r3, #4]
   2aa8c:	78df      	ldrb	r7, [r3, #3]
   2aa8e:	f893 c002 	ldrb.w	ip, [r3, #2]
   2aa92:	f893 e001 	ldrb.w	lr, [r3, #1]
   2aa96:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   2aa98:	f1b8 0f00 	cmp.w	r8, #0
   2aa9c:	d00e      	beq.n	2aabc <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   2aa9e:	e9cd 3806 	strd	r3, r8, [sp, #24]
   2aaa2:	e9cd ce04 	strd	ip, lr, [sp, #16]
   2aaa6:	4613      	mov	r3, r2
   2aaa8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   2aaac:	e9cd 4500 	strd	r4, r5, [sp]
   2aab0:	4a08      	ldr	r2, [pc, #32]	; (2aad4 <bt_settings_encode_key+0x58>)
   2aab2:	f018 f8d8 	bl	42c66 <snprintk>
}
   2aab6:	b008      	add	sp, #32
   2aab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   2aabc:	e9cd e305 	strd	lr, r3, [sp, #20]
   2aac0:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   2aac4:	4613      	mov	r3, r2
   2aac6:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2aaca:	4a03      	ldr	r2, [pc, #12]	; (2aad8 <bt_settings_encode_key+0x5c>)
   2aacc:	9400      	str	r4, [sp, #0]
   2aace:	f018 f8ca 	bl	42c66 <snprintk>
}
   2aad2:	e7f0      	b.n	2aab6 <bt_settings_encode_key+0x3a>
   2aad4:	0004b26d 	.word	0x0004b26d
   2aad8:	0004b291 	.word	0x0004b291

0002aadc <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   2aadc:	4801      	ldr	r0, [pc, #4]	; (2aae4 <bt_settings_save_id+0x8>)
   2aade:	f016 befd 	b.w	418dc <k_work_submit>
   2aae2:	bf00      	nop
   2aae4:	20000354 	.word	0x20000354

0002aae8 <commit>:
}

static int commit(void)
{
   2aae8:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   2aaea:	4c15      	ldr	r4, [pc, #84]	; (2ab40 <commit+0x58>)
   2aaec:	79e3      	ldrb	r3, [r4, #7]
   2aaee:	b1e3      	cbz	r3, 2ab2a <commit+0x42>
   2aaf0:	f3bf 8f5b 	dmb	ish
   2aaf4:	4c13      	ldr	r4, [pc, #76]	; (2ab44 <commit+0x5c>)
   2aaf6:	6823      	ldr	r3, [r4, #0]
   2aaf8:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2aafc:	079b      	lsls	r3, r3, #30
   2aafe:	d401      	bmi.n	2ab04 <commit+0x1c>
		bt_finalize_init();
   2ab00:	f000 fd56 	bl	2b5b0 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ab04:	f3bf 8f5b 	dmb	ish
   2ab08:	e854 0f00 	ldrex	r0, [r4]
   2ab0c:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   2ab10:	e844 3200 	strex	r2, r3, [r4]
   2ab14:	2a00      	cmp	r2, #0
   2ab16:	d1f7      	bne.n	2ab08 <commit+0x20>
   2ab18:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   2ab1c:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
   2ab20:	d00d      	beq.n	2ab3e <commit+0x56>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
   2ab22:	f7ff ffdb 	bl	2aadc <bt_settings_save_id>
	}

	return 0;
   2ab26:	2000      	movs	r0, #0
   2ab28:	e009      	b.n	2ab3e <commit+0x56>
		err = bt_setup_public_id_addr();
   2ab2a:	f000 ffe7 	bl	2bafc <bt_setup_public_id_addr>
		if (err) {
   2ab2e:	b930      	cbnz	r0, 2ab3e <commit+0x56>
	if (!bt_dev.id_count) {
   2ab30:	79e3      	ldrb	r3, [r4, #7]
   2ab32:	2b00      	cmp	r3, #0
   2ab34:	d1dc      	bne.n	2aaf0 <commit+0x8>
		err = bt_setup_random_id_addr();
   2ab36:	f001 f821 	bl	2bb7c <bt_setup_random_id_addr>
		if (err) {
   2ab3a:	2800      	cmp	r0, #0
   2ab3c:	d0d8      	beq.n	2aaf0 <commit+0x8>
}
   2ab3e:	bd10      	pop	{r4, pc}
   2ab40:	20000000 	.word	0x20000000
   2ab44:	200000cc 	.word	0x200000cc

0002ab48 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   2ab48:	b430      	push	{r4, r5}
   2ab4a:	4603      	mov	r3, r0
   2ab4c:	4608      	mov	r0, r1
	switch (src->type) {
   2ab4e:	781a      	ldrb	r2, [r3, #0]
   2ab50:	2a01      	cmp	r2, #1
   2ab52:	d013      	beq.n	2ab7c <uuid_to_uuid128+0x34>
   2ab54:	2a02      	cmp	r2, #2
   2ab56:	d026      	beq.n	2aba6 <uuid_to_uuid128+0x5e>
   2ab58:	b972      	cbnz	r2, 2ab78 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   2ab5a:	4a15      	ldr	r2, [pc, #84]	; (2abb0 <uuid_to_uuid128+0x68>)
   2ab5c:	f102 0410 	add.w	r4, r2, #16
   2ab60:	f852 5b04 	ldr.w	r5, [r2], #4
   2ab64:	f841 5b04 	str.w	r5, [r1], #4
   2ab68:	42a2      	cmp	r2, r4
   2ab6a:	d1f9      	bne.n	2ab60 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   2ab6c:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   2ab6e:	7812      	ldrb	r2, [r2, #0]
   2ab70:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   2ab72:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   2ab74:	0a1b      	lsrs	r3, r3, #8
   2ab76:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   2ab78:	bc30      	pop	{r4, r5}
   2ab7a:	4770      	bx	lr
		*dst = uuid128_base;
   2ab7c:	4a0c      	ldr	r2, [pc, #48]	; (2abb0 <uuid_to_uuid128+0x68>)
   2ab7e:	f102 0410 	add.w	r4, r2, #16
   2ab82:	f852 5b04 	ldr.w	r5, [r2], #4
   2ab86:	f841 5b04 	str.w	r5, [r1], #4
   2ab8a:	42a2      	cmp	r2, r4
   2ab8c:	d1f9      	bne.n	2ab82 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   2ab8e:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   2ab90:	7812      	ldrb	r2, [r2, #0]
   2ab92:	700a      	strb	r2, [r1, #0]
   2ab94:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   2ab98:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   2ab9a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   2ab9c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   2ab9e:	0a1b      	lsrs	r3, r3, #8
   2aba0:	7382      	strb	r2, [r0, #14]
   2aba2:	7403      	strb	r3, [r0, #16]
}
   2aba4:	e7e8      	b.n	2ab78 <uuid_to_uuid128+0x30>
}
   2aba6:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   2aba8:	2211      	movs	r2, #17
   2abaa:	4619      	mov	r1, r3
   2abac:	f01a b929 	b.w	44e02 <memcpy>
   2abb0:	0004b2b2 	.word	0x0004b2b2

0002abb4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   2abb4:	b538      	push	{r3, r4, r5, lr}
   2abb6:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   2abb8:	4805      	ldr	r0, [pc, #20]	; (2abd0 <bt_buf_get_rx+0x1c>)
   2abba:	f01d f80a 	bl	47bd2 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   2abbe:	4604      	mov	r4, r0
   2abc0:	b120      	cbz	r0, 2abcc <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   2abc2:	2100      	movs	r1, #0
   2abc4:	3008      	adds	r0, #8
   2abc6:	f01d f823 	bl	47c10 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2abca:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   2abcc:	4620      	mov	r0, r4
   2abce:	bd38      	pop	{r3, r4, r5, pc}
   2abd0:	20000cec 	.word	0x20000cec

0002abd4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   2abd4:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   2abd6:	490b      	ldr	r1, [pc, #44]	; (2ac04 <bt_buf_get_cmd_complete+0x30>)
{
   2abd8:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   2abda:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   2abde:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   2abe0:	b920      	cbnz	r0, 2abec <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   2abe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2abe6:	2001      	movs	r0, #1
   2abe8:	f7ff bfe4 	b.w	2abb4 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   2abec:	f01d f821 	bl	47c32 <net_buf_ref>
   2abf0:	2301      	movs	r3, #1
		buf->len = 0U;
   2abf2:	2100      	movs	r1, #0
   2abf4:	7503      	strb	r3, [r0, #20]
   2abf6:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   2abf8:	4604      	mov	r4, r0
   2abfa:	3008      	adds	r0, #8
   2abfc:	f01d f808 	bl	47c10 <net_buf_simple_reserve>
}
   2ac00:	4620      	mov	r0, r4
   2ac02:	bd10      	pop	{r4, pc}
   2ac04:	20000000 	.word	0x20000000

0002ac08 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   2ac08:	b570      	push	{r4, r5, r6, lr}
   2ac0a:	4604      	mov	r4, r0
	switch (evt) {
   2ac0c:	2c0f      	cmp	r4, #15
{
   2ac0e:	460d      	mov	r5, r1
   2ac10:	4610      	mov	r0, r2
   2ac12:	4619      	mov	r1, r3
	switch (evt) {
   2ac14:	d805      	bhi.n	2ac22 <bt_buf_get_evt+0x1a>
   2ac16:	2c0d      	cmp	r4, #13
   2ac18:	d912      	bls.n	2ac40 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   2ac1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   2ac1e:	f7ff bfd9 	b.w	2abd4 <bt_buf_get_cmd_complete>
	switch (evt) {
   2ac22:	2c13      	cmp	r4, #19
   2ac24:	d10c      	bne.n	2ac40 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   2ac26:	480b      	ldr	r0, [pc, #44]	; (2ac54 <bt_buf_get_evt+0x4c>)
   2ac28:	f01c ffd3 	bl	47bd2 <net_buf_alloc_fixed>
			if (buf) {
   2ac2c:	4604      	mov	r4, r0
   2ac2e:	b128      	cbz	r0, 2ac3c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   2ac30:	2100      	movs	r1, #0
   2ac32:	3008      	adds	r0, #8
   2ac34:	f01c ffec 	bl	47c10 <net_buf_simple_reserve>
   2ac38:	2301      	movs	r3, #1
   2ac3a:	7523      	strb	r3, [r4, #20]
}
   2ac3c:	4620      	mov	r0, r4
   2ac3e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   2ac40:	4602      	mov	r2, r0
   2ac42:	460b      	mov	r3, r1
		if (discardable) {
   2ac44:	b10d      	cbz	r5, 2ac4a <bt_buf_get_evt+0x42>
   2ac46:	4804      	ldr	r0, [pc, #16]	; (2ac58 <bt_buf_get_evt+0x50>)
   2ac48:	e7ee      	b.n	2ac28 <bt_buf_get_evt+0x20>
}
   2ac4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2ac4e:	2001      	movs	r0, #1
   2ac50:	f7ff bfb0 	b.w	2abb4 <bt_buf_get_rx>
   2ac54:	20000d18 	.word	0x20000d18
   2ac58:	20000c68 	.word	0x20000c68

0002ac5c <hci_disconn_complete_prio>:
{
   2ac5c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2ac5e:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2ac60:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   2ac64:	781b      	ldrb	r3, [r3, #0]
   2ac66:	b963      	cbnz	r3, 2ac82 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   2ac68:	4620      	mov	r0, r4
   2ac6a:	f001 fcf1 	bl	2c650 <bt_conn_lookup_handle>
	if (!conn) {
   2ac6e:	4605      	mov	r5, r0
   2ac70:	b940      	cbnz	r0, 2ac84 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   2ac72:	4b08      	ldr	r3, [pc, #32]	; (2ac94 <hci_disconn_complete_prio+0x38>)
   2ac74:	881a      	ldrh	r2, [r3, #0]
   2ac76:	b922      	cbnz	r2, 2ac82 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2ac78:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   2ac7c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   2ac80:	8018      	strh	r0, [r3, #0]
}
   2ac82:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2ac84:	2101      	movs	r1, #1
   2ac86:	f001 fceb 	bl	2c660 <bt_conn_set_state>
	bt_conn_unref(conn);
   2ac8a:	4628      	mov	r0, r5
}
   2ac8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2ac90:	f01b b862 	b.w	45d58 <bt_conn_unref>
   2ac94:	20003b44 	.word	0x20003b44

0002ac98 <hci_le_meta_event>:
{
   2ac98:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   2ac9a:	2101      	movs	r1, #1
   2ac9c:	4604      	mov	r4, r0
   2ac9e:	3008      	adds	r0, #8
   2aca0:	f01d f820 	bl	47ce4 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2aca4:	4621      	mov	r1, r4
   2aca6:	4a03      	ldr	r2, [pc, #12]	; (2acb4 <hci_le_meta_event+0x1c>)
   2aca8:	7800      	ldrb	r0, [r0, #0]
}
   2acaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2acae:	230a      	movs	r3, #10
   2acb0:	f01a b9fe 	b.w	450b0 <handle_event>
   2acb4:	00049ca4 	.word	0x00049ca4

0002acb8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2acb8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2acba:	4c0c      	ldr	r4, [pc, #48]	; (2acec <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2acbc:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2acbe:	2205      	movs	r2, #5
   2acc0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   2acc4:	f001 fec6 	bl	2ca54 <bt_conn_lookup_state_le>
		if (!conn) {
   2acc8:	b970      	cbnz	r0, 2ace8 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   2acca:	4b09      	ldr	r3, [pc, #36]	; (2acf0 <find_pending_connect.part.0+0x38>)
   2accc:	6818      	ldr	r0, [r3, #0]
   2acce:	889a      	ldrh	r2, [r3, #4]
   2acd0:	9000      	str	r0, [sp, #0]
   2acd2:	799b      	ldrb	r3, [r3, #6]
   2acd4:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2acd8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   2acdc:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2ace0:	2204      	movs	r2, #4
   2ace2:	4669      	mov	r1, sp
   2ace4:	f001 feb6 	bl	2ca54 <bt_conn_lookup_state_le>
}
   2ace8:	b002      	add	sp, #8
   2acea:	bd10      	pop	{r4, pc}
   2acec:	20000000 	.word	0x20000000
   2acf0:	000497ce 	.word	0x000497ce

0002acf4 <hci_cmd_done>:
{
   2acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2acf6:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2acf8:	7990      	ldrb	r0, [r2, #6]
{
   2acfa:	460e      	mov	r6, r1
   2acfc:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2acfe:	f012 f959 	bl	3cfb4 <net_buf_pool_get>
   2ad02:	4b2d      	ldr	r3, [pc, #180]	; (2adb8 <hci_cmd_done+0xc4>)
   2ad04:	4283      	cmp	r3, r0
   2ad06:	d155      	bne.n	2adb4 <hci_cmd_done+0xc0>
	if (cmd(buf)->opcode != opcode) {
   2ad08:	4620      	mov	r0, r4
   2ad0a:	f012 f95b 	bl	3cfc4 <net_buf_id>
   2ad0e:	4d2b      	ldr	r5, [pc, #172]	; (2adbc <hci_cmd_done+0xc8>)
   2ad10:	230c      	movs	r3, #12
   2ad12:	fb03 5000 	mla	r0, r3, r0, r5
   2ad16:	8843      	ldrh	r3, [r0, #2]
   2ad18:	42bb      	cmp	r3, r7
   2ad1a:	d14b      	bne.n	2adb4 <hci_cmd_done+0xc0>
	if (bt_dev.sent_cmd) {
   2ad1c:	4f28      	ldr	r7, [pc, #160]	; (2adc0 <hci_cmd_done+0xcc>)
   2ad1e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2ad22:	b120      	cbz	r0, 2ad2e <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   2ad24:	f012 fa0a 	bl	3d13c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2ad28:	2300      	movs	r3, #0
   2ad2a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   2ad2e:	4620      	mov	r0, r4
   2ad30:	f012 f948 	bl	3cfc4 <net_buf_id>
   2ad34:	270c      	movs	r7, #12
   2ad36:	fb07 5000 	mla	r0, r7, r0, r5
   2ad3a:	6843      	ldr	r3, [r0, #4]
   2ad3c:	b1a3      	cbz	r3, 2ad68 <hci_cmd_done+0x74>
   2ad3e:	b99e      	cbnz	r6, 2ad68 <hci_cmd_done+0x74>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   2ad40:	4620      	mov	r0, r4
   2ad42:	f012 f93f 	bl	3cfc4 <net_buf_id>
   2ad46:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2ad4a:	2301      	movs	r3, #1
   2ad4c:	6847      	ldr	r7, [r0, #4]
   2ad4e:	e9d7 2000 	ldrd	r2, r0, [r7]
   2ad52:	f000 011f 	and.w	r1, r0, #31
   2ad56:	fa03 f101 	lsl.w	r1, r3, r1
	if (val) {
   2ad5a:	7a3b      	ldrb	r3, [r7, #8]
   2ad5c:	0940      	lsrs	r0, r0, #5
   2ad5e:	b1d3      	cbz	r3, 2ad96 <hci_cmd_done+0xa2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2ad60:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   2ad64:	f01a f9d1 	bl	4510a <atomic_or>
	if (cmd(buf)->sync) {
   2ad68:	4620      	mov	r0, r4
   2ad6a:	f012 f92b 	bl	3cfc4 <net_buf_id>
   2ad6e:	270c      	movs	r7, #12
   2ad70:	fb07 5000 	mla	r0, r7, r0, r5
   2ad74:	6883      	ldr	r3, [r0, #8]
   2ad76:	b1eb      	cbz	r3, 2adb4 <hci_cmd_done+0xc0>
		cmd(buf)->status = status;
   2ad78:	4620      	mov	r0, r4
   2ad7a:	f012 f923 	bl	3cfc4 <net_buf_id>
   2ad7e:	4378      	muls	r0, r7
   2ad80:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   2ad82:	4620      	mov	r0, r4
   2ad84:	f012 f91e 	bl	3cfc4 <net_buf_id>
   2ad88:	fb07 5500 	mla	r5, r7, r0, r5
   2ad8c:	68a8      	ldr	r0, [r5, #8]
}
   2ad8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   2ad92:	f016 bc2d 	b.w	415f0 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ad96:	43cb      	mvns	r3, r1
   2ad98:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   2ad9c:	f3bf 8f5b 	dmb	ish
   2ada0:	e852 0f00 	ldrex	r0, [r2]
   2ada4:	4018      	ands	r0, r3
   2ada6:	e842 0100 	strex	r1, r0, [r2]
   2adaa:	2900      	cmp	r1, #0
   2adac:	d1f8      	bne.n	2ada0 <hci_cmd_done+0xac>
   2adae:	f3bf 8f5b 	dmb	ish
   2adb2:	e7d9      	b.n	2ad68 <hci_cmd_done+0x74>
   2adb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2adb6:	bf00      	nop
   2adb8:	20000cc0 	.word	0x20000cc0
   2adbc:	20001c4c 	.word	0x20001c4c
   2adc0:	20000000 	.word	0x20000000

0002adc4 <hci_cmd_status>:
{
   2adc4:	b538      	push	{r3, r4, r5, lr}
   2adc6:	2104      	movs	r1, #4
   2adc8:	4604      	mov	r4, r0
   2adca:	3008      	adds	r0, #8
   2adcc:	f01c ff8a 	bl	47ce4 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   2add0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   2add2:	7801      	ldrb	r1, [r0, #0]
   2add4:	8840      	ldrh	r0, [r0, #2]
   2add6:	4622      	mov	r2, r4
   2add8:	f7ff ff8c 	bl	2acf4 <hci_cmd_done>
	if (ncmd) {
   2addc:	b125      	cbz	r5, 2ade8 <hci_cmd_status+0x24>
   2adde:	4803      	ldr	r0, [pc, #12]	; (2adec <hci_cmd_status+0x28>)
}
   2ade0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2ade4:	f016 bc04 	b.w	415f0 <z_impl_k_sem_give>
   2ade8:	bd38      	pop	{r3, r4, r5, pc}
   2adea:	bf00      	nop
   2adec:	20000120 	.word	0x20000120

0002adf0 <hci_cmd_complete>:
{
   2adf0:	b538      	push	{r3, r4, r5, lr}
   2adf2:	2103      	movs	r1, #3
   2adf4:	4604      	mov	r4, r0
   2adf6:	3008      	adds	r0, #8
   2adf8:	f01c ff74 	bl	47ce4 <net_buf_simple_pull_mem>
	status = buf->data[0];
   2adfc:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   2adfe:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   2ae00:	7819      	ldrb	r1, [r3, #0]
   2ae02:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   2ae06:	4622      	mov	r2, r4
   2ae08:	f7ff ff74 	bl	2acf4 <hci_cmd_done>
	if (ncmd) {
   2ae0c:	b125      	cbz	r5, 2ae18 <hci_cmd_complete+0x28>
   2ae0e:	4803      	ldr	r0, [pc, #12]	; (2ae1c <hci_cmd_complete+0x2c>)
}
   2ae10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2ae14:	f016 bbec 	b.w	415f0 <z_impl_k_sem_give>
   2ae18:	bd38      	pop	{r3, r4, r5, pc}
   2ae1a:	bf00      	nop
   2ae1c:	20000120 	.word	0x20000120

0002ae20 <hci_tx_thread>:
{
   2ae20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   2ae24:	f8df 8108 	ldr.w	r8, [pc, #264]	; 2af30 <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
   2ae28:	f8df a108 	ldr.w	sl, [pc, #264]	; 2af34 <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
   2ae2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2ae30:	4841      	ldr	r0, [pc, #260]	; (2af38 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
   2ae32:	f36f 3352 	bfc	r3, #13, #6
   2ae36:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2ae3a:	f001 fbd5 	bl	2c5e8 <bt_conn_prepare_events>
   2ae3e:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   2ae40:	483b      	ldr	r0, [pc, #236]	; (2af30 <hci_tx_thread+0x110>)
   2ae42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ae46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ae4a:	4629      	mov	r1, r5
   2ae4c:	f017 fb2a 	bl	424a4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   2ae50:	b160      	cbz	r0, 2ae6c <hci_tx_thread+0x4c>
   2ae52:	493a      	ldr	r1, [pc, #232]	; (2af3c <hci_tx_thread+0x11c>)
   2ae54:	483a      	ldr	r0, [pc, #232]	; (2af40 <hci_tx_thread+0x120>)
   2ae56:	f640 1393 	movw	r3, #2451	; 0x993
   2ae5a:	4652      	mov	r2, sl
   2ae5c:	f017 fef6 	bl	42c4c <printk>
   2ae60:	4040      	eors	r0, r0
   2ae62:	f380 8811 	msr	BASEPRI, r0
   2ae66:	f04f 0003 	mov.w	r0, #3
   2ae6a:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2ae6c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 2af44 <hci_tx_thread+0x124>
{
   2ae70:	4e2f      	ldr	r6, [pc, #188]	; (2af30 <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
   2ae72:	f5a9 779e 	sub.w	r7, r9, #316	; 0x13c
   2ae76:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
   2ae7a:	b915      	cbnz	r5, 2ae82 <hci_tx_thread+0x62>
	z_impl_k_yield();
   2ae7c:	f017 f818 	bl	41eb0 <z_impl_k_yield>
	while (1) {
   2ae80:	e7d4      	b.n	2ae2c <hci_tx_thread+0xc>
		switch (ev->state) {
   2ae82:	68f3      	ldr	r3, [r6, #12]
   2ae84:	f3c3 3345 	ubfx	r3, r3, #13, #6
   2ae88:	2b04      	cmp	r3, #4
   2ae8a:	d147      	bne.n	2af1c <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   2ae8c:	7b33      	ldrb	r3, [r6, #12]
   2ae8e:	2b00      	cmp	r3, #0
   2ae90:	d147      	bne.n	2af22 <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2ae92:	2200      	movs	r2, #0
   2ae94:	2300      	movs	r3, #0
   2ae96:	4648      	mov	r0, r9
   2ae98:	f01c fea0 	bl	47bdc <net_buf_get>
	BT_ASSERT(buf);
   2ae9c:	4604      	mov	r4, r0
   2ae9e:	b960      	cbnz	r0, 2aeba <hci_tx_thread+0x9a>
   2aea0:	4929      	ldr	r1, [pc, #164]	; (2af48 <hci_tx_thread+0x128>)
   2aea2:	4827      	ldr	r0, [pc, #156]	; (2af40 <hci_tx_thread+0x120>)
   2aea4:	f640 132a 	movw	r3, #2346	; 0x92a
   2aea8:	4652      	mov	r2, sl
   2aeaa:	f017 fecf 	bl	42c4c <printk>
   2aeae:	4040      	eors	r0, r0
   2aeb0:	f380 8811 	msr	BASEPRI, r0
   2aeb4:	f04f 0003 	mov.w	r0, #3
   2aeb8:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   2aeba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2aebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2aec2:	4658      	mov	r0, fp
   2aec4:	f016 fbba 	bl	4163c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   2aec8:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2aecc:	b120      	cbz	r0, 2aed8 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   2aece:	f012 f935 	bl	3d13c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2aed2:	2300      	movs	r3, #0
   2aed4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   2aed8:	4620      	mov	r0, r4
   2aeda:	f01c feaa 	bl	47c32 <net_buf_ref>
   2aede:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   2aee2:	4620      	mov	r0, r4
   2aee4:	f7ff fcf8 	bl	2a8d8 <bt_hci_ecc_send>
	if (err) {
   2aee8:	b1c0      	cbz	r0, 2af1c <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   2aeea:	4818      	ldr	r0, [pc, #96]	; (2af4c <hci_tx_thread+0x12c>)
   2aeec:	f016 fb80 	bl	415f0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   2aef0:	4620      	mov	r0, r4
   2aef2:	f012 f867 	bl	3cfc4 <net_buf_id>
   2aef6:	4b16      	ldr	r3, [pc, #88]	; (2af50 <hci_tx_thread+0x130>)
   2aef8:	220c      	movs	r2, #12
   2aefa:	fb02 3000 	mla	r0, r2, r0, r3
   2aefe:	211f      	movs	r1, #31
   2af00:	8840      	ldrh	r0, [r0, #2]
   2af02:	4622      	mov	r2, r4
   2af04:	f7ff fef6 	bl	2acf4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   2af08:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2af0c:	f012 f916 	bl	3d13c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2af10:	2300      	movs	r3, #0
		net_buf_unref(buf);
   2af12:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   2af14:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		net_buf_unref(buf);
   2af18:	f012 f910 	bl	3d13c <net_buf_unref>
	for (; count; ev++, count--) {
   2af1c:	3614      	adds	r6, #20
   2af1e:	3d01      	subs	r5, #1
   2af20:	e7ab      	b.n	2ae7a <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   2af22:	2b01      	cmp	r3, #1
   2af24:	d1fa      	bne.n	2af1c <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   2af26:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   2af28:	3838      	subs	r0, #56	; 0x38
   2af2a:	f001 fe7d 	bl	2cc28 <bt_conn_process_tx>
   2af2e:	e7f5      	b.n	2af1c <hci_tx_thread+0xfc>
   2af30:	20000364 	.word	0x20000364
   2af34:	0004b2c3 	.word	0x0004b2c3
   2af38:	20000378 	.word	0x20000378
   2af3c:	0004b2f7 	.word	0x0004b2f7
   2af40:	0004b300 	.word	0x0004b300
   2af44:	2000013c 	.word	0x2000013c
   2af48:	0004b31d 	.word	0x0004b31d
   2af4c:	20000120 	.word	0x20000120
   2af50:	20001c4c 	.word	0x20001c4c

0002af54 <bt_hci_cmd_state_set_init>:
{
   2af54:	b510      	push	{r4, lr}
	state->bit = bit;
   2af56:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   2af5a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2af5e:	720b      	strb	r3, [r1, #8]
{
   2af60:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   2af62:	f012 f82f 	bl	3cfc4 <net_buf_id>
   2af66:	4b03      	ldr	r3, [pc, #12]	; (2af74 <bt_hci_cmd_state_set_init+0x20>)
   2af68:	220c      	movs	r2, #12
   2af6a:	fb02 3300 	mla	r3, r2, r0, r3
   2af6e:	605c      	str	r4, [r3, #4]
}
   2af70:	bd10      	pop	{r4, pc}
   2af72:	bf00      	nop
   2af74:	20001c4c 	.word	0x20001c4c

0002af78 <bt_hci_cmd_create>:
{
   2af78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   2af7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2af80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2af84:	4606      	mov	r6, r0
   2af86:	4817      	ldr	r0, [pc, #92]	; (2afe4 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   2af88:	4d17      	ldr	r5, [pc, #92]	; (2afe8 <bt_hci_cmd_create+0x70>)
{
   2af8a:	460f      	mov	r7, r1
   2af8c:	f01c fe21 	bl	47bd2 <net_buf_alloc_fixed>
   2af90:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   2af92:	f100 0a08 	add.w	sl, r0, #8
   2af96:	2100      	movs	r1, #0
   2af98:	f04f 0800 	mov.w	r8, #0
   2af9c:	4650      	mov	r0, sl
   2af9e:	f01c fe37 	bl	47c10 <net_buf_simple_reserve>
   2afa2:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   2afa6:	4620      	mov	r0, r4
   2afa8:	f012 f80c 	bl	3cfc4 <net_buf_id>
   2afac:	f04f 090c 	mov.w	r9, #12
   2afb0:	fb09 5000 	mla	r0, r9, r0, r5
   2afb4:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   2afb6:	4620      	mov	r0, r4
   2afb8:	f012 f804 	bl	3cfc4 <net_buf_id>
   2afbc:	fb09 5000 	mla	r0, r9, r0, r5
   2afc0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   2afc4:	4620      	mov	r0, r4
   2afc6:	f011 fffd 	bl	3cfc4 <net_buf_id>
   2afca:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   2afce:	2103      	movs	r1, #3
   2afd0:	f8c5 8004 	str.w	r8, [r5, #4]
   2afd4:	4650      	mov	r0, sl
   2afd6:	f01c fe5e 	bl	47c96 <net_buf_simple_add>
	hdr->param_len = param_len;
   2afda:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   2afdc:	8006      	strh	r6, [r0, #0]
}
   2afde:	4620      	mov	r0, r4
   2afe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2afe4:	20000cc0 	.word	0x20000cc0
   2afe8:	20001c4c 	.word	0x20001c4c

0002afec <bt_hci_cmd_send>:
{
   2afec:	b538      	push	{r3, r4, r5, lr}
   2afee:	4605      	mov	r5, r0
	if (!buf) {
   2aff0:	460c      	mov	r4, r1
   2aff2:	b919      	cbnz	r1, 2affc <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   2aff4:	f7ff ffc0 	bl	2af78 <bt_hci_cmd_create>
		if (!buf) {
   2aff8:	4604      	mov	r4, r0
   2affa:	b198      	cbz	r0, 2b024 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   2affc:	f640 4335 	movw	r3, #3125	; 0xc35
   2b000:	429d      	cmp	r5, r3
   2b002:	d109      	bne.n	2b018 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   2b004:	4620      	mov	r0, r4
   2b006:	f7ff fc67 	bl	2a8d8 <bt_hci_ecc_send>
		if (err) {
   2b00a:	4605      	mov	r5, r0
   2b00c:	b110      	cbz	r0, 2b014 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   2b00e:	4620      	mov	r0, r4
   2b010:	f012 f894 	bl	3d13c <net_buf_unref>
}
   2b014:	4628      	mov	r0, r5
   2b016:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   2b018:	4804      	ldr	r0, [pc, #16]	; (2b02c <bt_hci_cmd_send+0x40>)
   2b01a:	4621      	mov	r1, r4
   2b01c:	f01c fdfc 	bl	47c18 <net_buf_put>
	return 0;
   2b020:	2500      	movs	r5, #0
   2b022:	e7f7      	b.n	2b014 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   2b024:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2b028:	e7f4      	b.n	2b014 <bt_hci_cmd_send+0x28>
   2b02a:	bf00      	nop
   2b02c:	2000013c 	.word	0x2000013c

0002b030 <bt_hci_cmd_send_sync>:
{
   2b030:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b032:	4615      	mov	r5, r2
   2b034:	b087      	sub	sp, #28
	if (!buf) {
   2b036:	460c      	mov	r4, r1
   2b038:	b921      	cbnz	r1, 2b044 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   2b03a:	f7ff ff9d 	bl	2af78 <bt_hci_cmd_create>
		if (!buf) {
   2b03e:	4604      	mov	r4, r0
   2b040:	2800      	cmp	r0, #0
   2b042:	d048      	beq.n	2b0d6 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2b044:	2201      	movs	r2, #1
   2b046:	2100      	movs	r1, #0
   2b048:	4668      	mov	r0, sp
   2b04a:	f01d fd49 	bl	48ae0 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   2b04e:	4620      	mov	r0, r4
   2b050:	f011 ffb8 	bl	3cfc4 <net_buf_id>
   2b054:	4f21      	ldr	r7, [pc, #132]	; (2b0dc <bt_hci_cmd_send_sync+0xac>)
   2b056:	230c      	movs	r3, #12
   2b058:	fb03 7000 	mla	r0, r3, r0, r7
   2b05c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   2b060:	4620      	mov	r0, r4
   2b062:	f01c fde6 	bl	47c32 <net_buf_ref>
   2b066:	4601      	mov	r1, r0
   2b068:	481d      	ldr	r0, [pc, #116]	; (2b0e0 <bt_hci_cmd_send_sync+0xb0>)
   2b06a:	f01c fdd5 	bl	47c18 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   2b06e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2b072:	2300      	movs	r3, #0
   2b074:	4668      	mov	r0, sp
   2b076:	f016 fae1 	bl	4163c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   2b07a:	4606      	mov	r6, r0
   2b07c:	b180      	cbz	r0, 2b0a0 <bt_hci_cmd_send_sync+0x70>
   2b07e:	4a19      	ldr	r2, [pc, #100]	; (2b0e4 <bt_hci_cmd_send_sync+0xb4>)
   2b080:	4919      	ldr	r1, [pc, #100]	; (2b0e8 <bt_hci_cmd_send_sync+0xb8>)
   2b082:	481a      	ldr	r0, [pc, #104]	; (2b0ec <bt_hci_cmd_send_sync+0xbc>)
   2b084:	f240 1331 	movw	r3, #305	; 0x131
   2b088:	f017 fde0 	bl	42c4c <printk>
   2b08c:	4818      	ldr	r0, [pc, #96]	; (2b0f0 <bt_hci_cmd_send_sync+0xc0>)
   2b08e:	4631      	mov	r1, r6
   2b090:	f017 fddc 	bl	42c4c <printk>
   2b094:	4040      	eors	r0, r0
   2b096:	f380 8811 	msr	BASEPRI, r0
   2b09a:	f04f 0003 	mov.w	r0, #3
   2b09e:	df02      	svc	2
	status = cmd(buf)->status;
   2b0a0:	4620      	mov	r0, r4
   2b0a2:	f011 ff8f 	bl	3cfc4 <net_buf_id>
   2b0a6:	230c      	movs	r3, #12
   2b0a8:	4358      	muls	r0, r3
   2b0aa:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   2b0ac:	b156      	cbz	r6, 2b0c4 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   2b0ae:	4620      	mov	r0, r4
   2b0b0:	f012 f844 	bl	3d13c <net_buf_unref>
			return -EIO;
   2b0b4:	2e09      	cmp	r6, #9
   2b0b6:	bf0c      	ite	eq
   2b0b8:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   2b0bc:	f06f 0004 	mvnne.w	r0, #4
}
   2b0c0:	b007      	add	sp, #28
   2b0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   2b0c4:	b115      	cbz	r5, 2b0cc <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   2b0c6:	602c      	str	r4, [r5, #0]
	return 0;
   2b0c8:	4630      	mov	r0, r6
   2b0ca:	e7f9      	b.n	2b0c0 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   2b0cc:	4620      	mov	r0, r4
   2b0ce:	f012 f835 	bl	3d13c <net_buf_unref>
	return 0;
   2b0d2:	4628      	mov	r0, r5
   2b0d4:	e7f4      	b.n	2b0c0 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   2b0d6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b0da:	e7f1      	b.n	2b0c0 <bt_hci_cmd_send_sync+0x90>
   2b0dc:	20001c4c 	.word	0x20001c4c
   2b0e0:	2000013c 	.word	0x2000013c
   2b0e4:	0004b2c3 	.word	0x0004b2c3
   2b0e8:	0004b2f7 	.word	0x0004b2f7
   2b0ec:	0004b300 	.word	0x0004b300
   2b0f0:	0004b321 	.word	0x0004b321

0002b0f4 <bt_get_phy>:
	switch (hci_phy) {
   2b0f4:	3801      	subs	r0, #1
   2b0f6:	b2c0      	uxtb	r0, r0
   2b0f8:	2802      	cmp	r0, #2
   2b0fa:	bf9a      	itte	ls
   2b0fc:	4b01      	ldrls	r3, [pc, #4]	; (2b104 <bt_get_phy+0x10>)
   2b0fe:	5c18      	ldrbls	r0, [r3, r0]
{
   2b100:	2000      	movhi	r0, #0
}
   2b102:	4770      	bx	lr
   2b104:	0004b3ca 	.word	0x0004b3ca

0002b108 <conn_auto_initiate>:
{
   2b108:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2b10a:	7b43      	ldrb	r3, [r0, #13]
   2b10c:	2b07      	cmp	r3, #7
{
   2b10e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2b110:	d15a      	bne.n	2b1c8 <conn_auto_initiate+0xc0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b112:	f3bf 8f5b 	dmb	ish
   2b116:	6843      	ldr	r3, [r0, #4]
   2b118:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   2b11c:	049b      	lsls	r3, r3, #18
   2b11e:	f100 0604 	add.w	r6, r0, #4
   2b122:	d41b      	bmi.n	2b15c <conn_auto_initiate+0x54>
   2b124:	78c3      	ldrb	r3, [r0, #3]
   2b126:	b123      	cbz	r3, 2b132 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   2b128:	4b28      	ldr	r3, [pc, #160]	; (2b1cc <conn_auto_initiate+0xc4>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   2b12a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   2b12e:	071d      	lsls	r5, r3, #28
   2b130:	d514      	bpl.n	2b15c <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2b132:	2102      	movs	r1, #2
   2b134:	f242 0016 	movw	r0, #8214	; 0x2016
   2b138:	f7ff ff1e 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   2b13c:	4605      	mov	r5, r0
   2b13e:	b168      	cbz	r0, 2b15c <conn_auto_initiate+0x54>
   2b140:	2102      	movs	r1, #2
   2b142:	3008      	adds	r0, #8
   2b144:	f01c fda7 	bl	47c96 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2b148:	8823      	ldrh	r3, [r4, #0]
   2b14a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2b14c:	4629      	mov	r1, r5
   2b14e:	f242 0016 	movw	r0, #8214	; 0x2016
}
   2b152:	b004      	add	sp, #16
   2b154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2b158:	f7ff bf48 	b.w	2afec <bt_hci_cmd_send>
   2b15c:	f3bf 8f5b 	dmb	ish
   2b160:	6863      	ldr	r3, [r4, #4]
   2b162:	4d1a      	ldr	r5, [pc, #104]	; (2b1cc <conn_auto_initiate+0xc4>)
   2b164:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   2b168:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2b16c:	f3c3 3100 	ubfx	r1, r3, #12, #1
   2b170:	d111      	bne.n	2b196 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   2b172:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   2b176:	07d8      	lsls	r0, r3, #31
   2b178:	d50d      	bpl.n	2b196 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   2b17a:	2302      	movs	r3, #2
   2b17c:	9100      	str	r1, [sp, #0]
   2b17e:	461a      	mov	r2, r3
   2b180:	4620      	mov	r0, r4
   2b182:	f01a f9a0 	bl	454c6 <bt_le_set_phy>
		if (!err) {
   2b186:	b930      	cbnz	r0, 2b196 <conn_auto_initiate+0x8e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b188:	2180      	movs	r1, #128	; 0x80
   2b18a:	4630      	mov	r0, r6
}
   2b18c:	b004      	add	sp, #16
   2b18e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b192:	f019 bfba 	b.w	4510a <atomic_or>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   2b196:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   2b19a:	069a      	lsls	r2, r3, #26
   2b19c:	d514      	bpl.n	2b1c8 <conn_auto_initiate+0xc0>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   2b19e:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2b1a2:	689b      	ldr	r3, [r3, #8]
   2b1a4:	079b      	lsls	r3, r3, #30
   2b1a6:	d50f      	bpl.n	2b1c8 <conn_auto_initiate+0xc0>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   2b1a8:	f10d 010e 	add.w	r1, sp, #14
   2b1ac:	a803      	add	r0, sp, #12
   2b1ae:	f01a f93a 	bl	45426 <hci_le_read_max_data_len>
			if (!err) {
   2b1b2:	b948      	cbnz	r0, 2b1c8 <conn_auto_initiate+0xc0>
				err = bt_le_set_data_len(conn,
   2b1b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2b1b8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2b1bc:	4620      	mov	r0, r4
}
   2b1be:	b004      	add	sp, #16
   2b1c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				err = bt_le_set_data_len(conn,
   2b1c4:	f01a b962 	b.w	4548c <bt_le_set_data_len>
}
   2b1c8:	b004      	add	sp, #16
   2b1ca:	bd70      	pop	{r4, r5, r6, pc}
   2b1cc:	20000000 	.word	0x20000000

0002b1d0 <bt_hci_le_enh_conn_complete>:
{
   2b1d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2b1d4:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   2b1d8:	4a6b      	ldr	r2, [pc, #428]	; (2b388 <bt_hci_le_enh_conn_complete+0x1b8>)
	handle |= ~BT_ACL_HANDLE_MASK;
   2b1da:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   2b1de:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   2b1e0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   2b1e4:	b29b      	uxth	r3, r3
   2b1e6:	4299      	cmp	r1, r3
{
   2b1e8:	4605      	mov	r5, r0
   2b1ea:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   2b1ee:	bf08      	it	eq
   2b1f0:	8016      	strheq	r6, [r2, #0]
{
   2b1f2:	b085      	sub	sp, #20
			return true;
   2b1f4:	bf08      	it	eq
   2b1f6:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   2b1f8:	f000 faca 	bl	2b790 <bt_id_pending_keys_update>
	if (evt->status) {
   2b1fc:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2b1fe:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   2b202:	b304      	cbz	r4, 2b246 <bt_hci_le_enh_conn_complete+0x76>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b204:	2c3c      	cmp	r4, #60	; 0x3c
   2b206:	d159      	bne.n	2b2bc <bt_hci_le_enh_conn_complete+0xec>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b208:	f000 fdc6 	bl	2bd98 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b20c:	f3bf 8f5b 	dmb	ish
   2b210:	3010      	adds	r0, #16
   2b212:	e850 3f00 	ldrex	r3, [r0]
   2b216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   2b21a:	e840 3200 	strex	r2, r3, [r0]
   2b21e:	2a00      	cmp	r2, #0
   2b220:	d1f7      	bne.n	2b212 <bt_hci_le_enh_conn_complete+0x42>
   2b222:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2b226:	2000      	movs	r0, #0
   2b228:	f7ff fd46 	bl	2acb8 <find_pending_connect.part.0>
		if (!conn) {
   2b22c:	4605      	mov	r5, r0
   2b22e:	2800      	cmp	r0, #0
   2b230:	d044      	beq.n	2b2bc <bt_hci_le_enh_conn_complete+0xec>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   2b232:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2b234:	2100      	movs	r1, #0
   2b236:	f001 fa13 	bl	2c660 <bt_conn_set_state>
		bt_conn_unref(conn);
   2b23a:	4628      	mov	r0, r5
}
   2b23c:	b005      	add	sp, #20
   2b23e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   2b242:	f01a bd89 	b.w	45d58 <bt_conn_unref>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2b246:	792b      	ldrb	r3, [r5, #4]
   2b248:	3b02      	subs	r3, #2
   2b24a:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2b24c:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2b250:	d837      	bhi.n	2b2c2 <bt_hci_le_enh_conn_complete+0xf2>
	memcpy(dst, src, sizeof(*dst));
   2b252:	2207      	movs	r2, #7
   2b254:	4649      	mov	r1, r9
   2b256:	a802      	add	r0, sp, #8
   2b258:	f019 fdd3 	bl	44e02 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2b25c:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   2b260:	2206      	movs	r2, #6
   2b262:	3b02      	subs	r3, #2
   2b264:	f105 0111 	add.w	r1, r5, #17
   2b268:	f10d 0001 	add.w	r0, sp, #1
   2b26c:	f88d 3008 	strb.w	r3, [sp, #8]
   2b270:	f019 fdc7 	bl	44e02 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   2b274:	2301      	movs	r3, #1
   2b276:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2b27a:	78eb      	ldrb	r3, [r5, #3]
   2b27c:	2b01      	cmp	r3, #1
   2b27e:	d119      	bne.n	2b2b4 <bt_hci_le_enh_conn_complete+0xe4>
   2b280:	a802      	add	r0, sp, #8
   2b282:	f7ff fd19 	bl	2acb8 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b286:	78eb      	ldrb	r3, [r5, #3]
   2b288:	2b01      	cmp	r3, #1
   2b28a:	4604      	mov	r4, r0
   2b28c:	d111      	bne.n	2b2b2 <bt_hci_le_enh_conn_complete+0xe2>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b28e:	f000 fd83 	bl	2bd98 <bt_le_adv_lookup_legacy>
   2b292:	f3bf 8f5b 	dmb	ish
   2b296:	f100 0310 	add.w	r3, r0, #16
   2b29a:	e853 1f00 	ldrex	r1, [r3]
   2b29e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
   2b2a2:	e843 1200 	strex	r2, r1, [r3]
   2b2a6:	2a00      	cmp	r2, #0
   2b2a8:	d1f7      	bne.n	2b29a <bt_hci_le_enh_conn_complete+0xca>
   2b2aa:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   2b2ae:	f01a fc84 	bl	45bba <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   2b2b2:	b9dc      	cbnz	r4, 2b2ec <bt_hci_le_enh_conn_complete+0x11c>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   2b2b4:	211f      	movs	r1, #31
   2b2b6:	4640      	mov	r0, r8
   2b2b8:	f01a f8cd 	bl	45456 <bt_hci_disconnect>
}
   2b2bc:	b005      	add	sp, #20
   2b2be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   2b2c2:	78eb      	ldrb	r3, [r5, #3]
   2b2c4:	2b01      	cmp	r3, #1
   2b2c6:	bf04      	itt	eq
   2b2c8:	4b30      	ldreq	r3, [pc, #192]	; (2b38c <bt_hci_le_enh_conn_complete+0x1bc>)
   2b2ca:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   2b2ce:	4649      	mov	r1, r9
   2b2d0:	4620      	mov	r0, r4
   2b2d2:	f01a fafa 	bl	458ca <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   2b2d6:	2207      	movs	r2, #7
   2b2d8:	4601      	mov	r1, r0
   2b2da:	a802      	add	r0, sp, #8
   2b2dc:	f019 fd91 	bl	44e02 <memcpy>
   2b2e0:	2207      	movs	r2, #7
   2b2e2:	4649      	mov	r1, r9
   2b2e4:	4668      	mov	r0, sp
   2b2e6:	f019 fd8c 	bl	44e02 <memcpy>
}
   2b2ea:	e7c6      	b.n	2b27a <bt_hci_le_enh_conn_complete+0xaa>
	conn->handle = handle;
   2b2ec:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   2b2ee:	2207      	movs	r2, #7
   2b2f0:	f820 7b88 	strh.w	r7, [r0], #136
   2b2f4:	a902      	add	r1, sp, #8
   2b2f6:	f019 fd84 	bl	44e02 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   2b2fa:	7e2a      	ldrb	r2, [r5, #24]
   2b2fc:	7deb      	ldrb	r3, [r5, #23]
   2b2fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b302:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   2b306:	7eaa      	ldrb	r2, [r5, #26]
   2b308:	7e6b      	ldrb	r3, [r5, #25]
   2b30a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b30e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   2b312:	7f2a      	ldrb	r2, [r5, #28]
   2b314:	7eeb      	ldrb	r3, [r5, #27]
   2b316:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b31a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   2b31e:	78eb      	ldrb	r3, [r5, #3]
   2b320:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   2b322:	2200      	movs	r2, #0
   2b324:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b326:	2b01      	cmp	r3, #1
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   2b328:	f240 1201 	movw	r2, #257	; 0x101
   2b32c:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2b330:	d117      	bne.n	2b362 <bt_hci_le_enh_conn_complete+0x192>
   2b332:	2207      	movs	r2, #7
   2b334:	4669      	mov	r1, sp
   2b336:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2b33a:	f019 fd62 	bl	44e02 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2b33e:	f000 fd2b 	bl	2bd98 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   2b342:	7a21      	ldrb	r1, [r4, #8]
   2b344:	4d11      	ldr	r5, [pc, #68]	; (2b38c <bt_hci_le_enh_conn_complete+0x1bc>)
   2b346:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   2b34a:	2207      	movs	r2, #7
   2b34c:	4429      	add	r1, r5
   2b34e:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2b352:	f019 fd56 	bl	44e02 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   2b356:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   2b35a:	065b      	lsls	r3, r3, #25
   2b35c:	d501      	bpl.n	2b362 <bt_hci_le_enh_conn_complete+0x192>
			bt_le_adv_resume();
   2b35e:	f000 fec9 	bl	2c0f4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   2b362:	2107      	movs	r1, #7
   2b364:	4620      	mov	r0, r4
   2b366:	f001 f97b 	bl	2c660 <bt_conn_set_state>
	if (is_disconnected) {
   2b36a:	b11e      	cbz	r6, 2b374 <bt_hci_le_enh_conn_complete+0x1a4>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2b36c:	2101      	movs	r1, #1
   2b36e:	4620      	mov	r0, r4
   2b370:	f001 f976 	bl	2c660 <bt_conn_set_state>
	bt_conn_connected(conn);
   2b374:	4620      	mov	r0, r4
   2b376:	f01a fd2a 	bl	45dce <bt_conn_connected>
	conn_auto_initiate(conn);
   2b37a:	4620      	mov	r0, r4
   2b37c:	f7ff fec4 	bl	2b108 <conn_auto_initiate>
	bt_conn_unref(conn);
   2b380:	4620      	mov	r0, r4
   2b382:	f01a fce9 	bl	45d58 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2b386:	e799      	b.n	2b2bc <bt_hci_le_enh_conn_complete+0xec>
   2b388:	20003b44 	.word	0x20003b44
   2b38c:	20000000 	.word	0x20000000

0002b390 <bt_security_err_get>:
	switch (hci_err) {
   2b390:	2829      	cmp	r0, #41	; 0x29
   2b392:	bf9a      	itte	ls
   2b394:	4b01      	ldrls	r3, [pc, #4]	; (2b39c <bt_security_err_get+0xc>)
   2b396:	5c18      	ldrbls	r0, [r3, r0]
{
   2b398:	2009      	movhi	r0, #9
}
   2b39a:	4770      	bx	lr
   2b39c:	0004b3cd 	.word	0x0004b3cd

0002b3a0 <hci_event_prio>:
{
   2b3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b3a4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   2b3a6:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   2b3aa:	4630      	mov	r0, r6
   2b3ac:	f01c fcaa 	bl	47d04 <net_buf_simple_headroom>
	state->len = buf->len;
   2b3b0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2b3b4:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   2b3b8:	4605      	mov	r5, r0
   2b3ba:	d80c      	bhi.n	2b3d6 <hci_event_prio+0x36>
   2b3bc:	4a1c      	ldr	r2, [pc, #112]	; (2b430 <hci_event_prio+0x90>)
   2b3be:	491d      	ldr	r1, [pc, #116]	; (2b434 <hci_event_prio+0x94>)
   2b3c0:	481d      	ldr	r0, [pc, #116]	; (2b438 <hci_event_prio+0x98>)
   2b3c2:	f640 532f 	movw	r3, #3375	; 0xd2f
   2b3c6:	f017 fc41 	bl	42c4c <printk>
   2b3ca:	4040      	eors	r0, r0
   2b3cc:	f380 8811 	msr	BASEPRI, r0
   2b3d0:	f04f 0003 	mov.w	r0, #3
   2b3d4:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2b3d6:	4630      	mov	r0, r6
   2b3d8:	2102      	movs	r1, #2
   2b3da:	f01c fc83 	bl	47ce4 <net_buf_simple_pull_mem>
   2b3de:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2b3e0:	7800      	ldrb	r0, [r0, #0]
   2b3e2:	f019 fe53 	bl	4508c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2b3e6:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2b3e8:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2b3ea:	d40c      	bmi.n	2b406 <hci_event_prio+0x66>
   2b3ec:	4a10      	ldr	r2, [pc, #64]	; (2b430 <hci_event_prio+0x90>)
   2b3ee:	4913      	ldr	r1, [pc, #76]	; (2b43c <hci_event_prio+0x9c>)
   2b3f0:	4811      	ldr	r0, [pc, #68]	; (2b438 <hci_event_prio+0x98>)
   2b3f2:	f640 5333 	movw	r3, #3379	; 0xd33
   2b3f6:	f017 fc29 	bl	42c4c <printk>
   2b3fa:	4040      	eors	r0, r0
   2b3fc:	f380 8811 	msr	BASEPRI, r0
   2b400:	f04f 0003 	mov.w	r0, #3
   2b404:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   2b406:	2305      	movs	r3, #5
   2b408:	4a0d      	ldr	r2, [pc, #52]	; (2b440 <hci_event_prio+0xa0>)
   2b40a:	7838      	ldrb	r0, [r7, #0]
   2b40c:	4621      	mov	r1, r4
   2b40e:	f019 fe4f 	bl	450b0 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   2b412:	07b3      	lsls	r3, r6, #30
   2b414:	d507      	bpl.n	2b426 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   2b416:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2b418:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2b41c:	fa13 f585 	uxtah	r5, r3, r5
   2b420:	60a5      	str	r5, [r4, #8]
}
   2b422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2b426:	4620      	mov	r0, r4
}
   2b428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   2b42c:	f011 be86 	b.w	3d13c <net_buf_unref>
   2b430:	0004b2c3 	.word	0x0004b2c3
   2b434:	0004b341 	.word	0x0004b341
   2b438:	0004b300 	.word	0x0004b300
   2b43c:	0004b35a 	.word	0x0004b35a
   2b440:	00049d34 	.word	0x00049d34

0002b444 <bt_recv>:
{
   2b444:	b570      	push	{r4, r5, r6, lr}
	if (bt_recv_thread_id == NULL) {
   2b446:	4d3b      	ldr	r5, [pc, #236]	; (2b534 <bt_recv+0xf0>)
   2b448:	682b      	ldr	r3, [r5, #0]
{
   2b44a:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
   2b44c:	b913      	cbnz	r3, 2b454 <bt_recv+0x10>
	return z_impl_z_current_get();
   2b44e:	f016 fdcb 	bl	41fe8 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
   2b452:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2b454:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
   2b456:	2b01      	cmp	r3, #1
   2b458:	d036      	beq.n	2b4c8 <bt_recv+0x84>
   2b45a:	2b03      	cmp	r3, #3
   2b45c:	d163      	bne.n	2b526 <bt_recv+0xe2>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2b45e:	89a3      	ldrh	r3, [r4, #12]
   2b460:	2b03      	cmp	r3, #3
   2b462:	d80c      	bhi.n	2b47e <bt_recv+0x3a>
   2b464:	4a34      	ldr	r2, [pc, #208]	; (2b538 <bt_recv+0xf4>)
   2b466:	4935      	ldr	r1, [pc, #212]	; (2b53c <bt_recv+0xf8>)
   2b468:	4835      	ldr	r0, [pc, #212]	; (2b540 <bt_recv+0xfc>)
   2b46a:	f240 13b5 	movw	r3, #437	; 0x1b5
   2b46e:	f017 fbed 	bl	42c4c <printk>
   2b472:	4040      	eors	r0, r0
   2b474:	f380 8811 	msr	BASEPRI, r0
   2b478:	f04f 0003 	mov.w	r0, #3
   2b47c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2b47e:	2104      	movs	r1, #4
   2b480:	f104 0008 	add.w	r0, r4, #8
   2b484:	f01c fc2e 	bl	47ce4 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2b488:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   2b48a:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   2b48c:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2b48e:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   2b490:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   2b492:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   2b496:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   2b498:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   2b49a:	d003      	beq.n	2b4a4 <bt_recv+0x60>
	net_buf_unref(buf);
   2b49c:	4620      	mov	r0, r4
   2b49e:	f011 fe4d 	bl	3d13c <net_buf_unref>
   2b4a2:	e00f      	b.n	2b4c4 <bt_recv+0x80>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   2b4a4:	f001 f8d4 	bl	2c650 <bt_conn_lookup_handle>
	if (!conn) {
   2b4a8:	4605      	mov	r5, r0
   2b4aa:	2800      	cmp	r0, #0
   2b4ac:	d0f6      	beq.n	2b49c <bt_recv+0x58>
	acl(buf)->index = bt_conn_index(conn);
   2b4ae:	f001 f97f 	bl	2c7b0 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   2b4b2:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   2b4b4:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   2b4b6:	4621      	mov	r1, r4
   2b4b8:	4628      	mov	r0, r5
   2b4ba:	f01a fbe5 	bl	45c88 <bt_conn_recv>
	bt_conn_unref(conn);
   2b4be:	4628      	mov	r0, r5
   2b4c0:	f01a fc4a 	bl	45d58 <bt_conn_unref>
		return 0;
   2b4c4:	2000      	movs	r0, #0
}
   2b4c6:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2b4c8:	89a3      	ldrh	r3, [r4, #12]
   2b4ca:	2b01      	cmp	r3, #1
   2b4cc:	d80c      	bhi.n	2b4e8 <bt_recv+0xa4>
   2b4ce:	4a1a      	ldr	r2, [pc, #104]	; (2b538 <bt_recv+0xf4>)
   2b4d0:	491a      	ldr	r1, [pc, #104]	; (2b53c <bt_recv+0xf8>)
   2b4d2:	481b      	ldr	r0, [pc, #108]	; (2b540 <bt_recv+0xfc>)
   2b4d4:	f640 1317 	movw	r3, #2327	; 0x917
   2b4d8:	f017 fbb8 	bl	42c4c <printk>
   2b4dc:	4040      	eors	r0, r0
   2b4de:	f380 8811 	msr	BASEPRI, r0
   2b4e2:	f04f 0003 	mov.w	r0, #3
   2b4e6:	df02      	svc	2
   2b4e8:	2102      	movs	r1, #2
   2b4ea:	f104 0008 	add.w	r0, r4, #8
   2b4ee:	f01c fbf9 	bl	47ce4 <net_buf_simple_pull_mem>
   2b4f2:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   2b4f4:	7800      	ldrb	r0, [r0, #0]
   2b4f6:	f019 fdc9 	bl	4508c <bt_hci_evt_get_flags>
   2b4fa:	0783      	lsls	r3, r0, #30
   2b4fc:	d40c      	bmi.n	2b518 <bt_recv+0xd4>
   2b4fe:	4a0e      	ldr	r2, [pc, #56]	; (2b538 <bt_recv+0xf4>)
   2b500:	4910      	ldr	r1, [pc, #64]	; (2b544 <bt_recv+0x100>)
   2b502:	480f      	ldr	r0, [pc, #60]	; (2b540 <bt_recv+0xfc>)
   2b504:	f640 131b 	movw	r3, #2331	; 0x91b
   2b508:	f017 fba0 	bl	42c4c <printk>
   2b50c:	4040      	eors	r0, r0
   2b50e:	f380 8811 	msr	BASEPRI, r0
   2b512:	f04f 0003 	mov.w	r0, #3
   2b516:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   2b518:	4a0b      	ldr	r2, [pc, #44]	; (2b548 <bt_recv+0x104>)
   2b51a:	7828      	ldrb	r0, [r5, #0]
   2b51c:	2306      	movs	r3, #6
   2b51e:	4621      	mov	r1, r4
   2b520:	f019 fdc6 	bl	450b0 <handle_event>
   2b524:	e7ba      	b.n	2b49c <bt_recv+0x58>
		net_buf_unref(buf);
   2b526:	4620      	mov	r0, r4
   2b528:	f011 fe08 	bl	3d13c <net_buf_unref>
		return -EINVAL;
   2b52c:	f06f 0015 	mvn.w	r0, #21
   2b530:	e7c9      	b.n	2b4c6 <bt_recv+0x82>
   2b532:	bf00      	nop
   2b534:	20001c48 	.word	0x20001c48
   2b538:	0004b2c3 	.word	0x0004b2c3
   2b53c:	0004b341 	.word	0x0004b341
   2b540:	0004b300 	.word	0x0004b300
   2b544:	0004b373 	.word	0x0004b373
   2b548:	00049d04 	.word	0x00049d04

0002b54c <bt_recv_prio>:
{
   2b54c:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2b54e:	7d03      	ldrb	r3, [r0, #20]
   2b550:	2b01      	cmp	r3, #1
{
   2b552:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2b554:	d00c      	beq.n	2b570 <bt_recv_prio+0x24>
   2b556:	4a09      	ldr	r2, [pc, #36]	; (2b57c <bt_recv_prio+0x30>)
   2b558:	4909      	ldr	r1, [pc, #36]	; (2b580 <bt_recv_prio+0x34>)
   2b55a:	480a      	ldr	r0, [pc, #40]	; (2b584 <bt_recv_prio+0x38>)
   2b55c:	f640 537c 	movw	r3, #3452	; 0xd7c
   2b560:	f017 fb74 	bl	42c4c <printk>
   2b564:	4040      	eors	r0, r0
   2b566:	f380 8811 	msr	BASEPRI, r0
   2b56a:	f04f 0003 	mov.w	r0, #3
   2b56e:	df02      	svc	2
	hci_event_prio(buf);
   2b570:	4620      	mov	r0, r4
   2b572:	f7ff ff15 	bl	2b3a0 <hci_event_prio>
}
   2b576:	2000      	movs	r0, #0
   2b578:	bd10      	pop	{r4, pc}
   2b57a:	bf00      	nop
   2b57c:	0004b2c3 	.word	0x0004b2c3
   2b580:	0004b3a1 	.word	0x0004b3a1
   2b584:	0004b300 	.word	0x0004b300

0002b588 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   2b588:	4a08      	ldr	r2, [pc, #32]	; (2b5ac <bt_hci_driver_register+0x24>)
{
   2b58a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   2b58c:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   2b590:	b930      	cbnz	r0, 2b5a0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   2b592:	68d9      	ldr	r1, [r3, #12]
   2b594:	b139      	cbz	r1, 2b5a6 <bt_hci_driver_register+0x1e>
   2b596:	6919      	ldr	r1, [r3, #16]
   2b598:	b129      	cbz	r1, 2b5a6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   2b59a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   2b59e:	4770      	bx	lr
		return -EALREADY;
   2b5a0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2b5a4:	4770      	bx	lr
		return -EINVAL;
   2b5a6:	f06f 0015 	mvn.w	r0, #21
}
   2b5aa:	4770      	bx	lr
   2b5ac:	20000000 	.word	0x20000000

0002b5b0 <bt_finalize_init>:
   2b5b0:	4801      	ldr	r0, [pc, #4]	; (2b5b8 <bt_finalize_init+0x8>)
   2b5b2:	2102      	movs	r1, #2
   2b5b4:	f019 bda9 	b.w	4510a <atomic_or>
   2b5b8:	200000cc 	.word	0x200000cc

0002b5bc <init_work>:

static void init_work(struct k_work *work)
{
   2b5bc:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   2b5be:	f7fa fdbb 	bl	26138 <bt_init>
	if (ready_cb) {
   2b5c2:	4b03      	ldr	r3, [pc, #12]	; (2b5d0 <init_work+0x14>)
   2b5c4:	681b      	ldr	r3, [r3, #0]
   2b5c6:	b113      	cbz	r3, 2b5ce <init_work+0x12>
		ready_cb(err);
	}
}
   2b5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   2b5cc:	4718      	bx	r3
}
   2b5ce:	bd10      	pop	{r4, pc}
   2b5d0:	20001c64 	.word	0x20001c64

0002b5d4 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   2b5d4:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   2b5d6:	4d22      	ldr	r5, [pc, #136]	; (2b660 <bt_enable+0x8c>)
   2b5d8:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   2b5dc:	b088      	sub	sp, #32
   2b5de:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   2b5e0:	2b00      	cmp	r3, #0
   2b5e2:	d037      	beq.n	2b654 <bt_enable+0x80>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2b5e4:	2101      	movs	r1, #1
   2b5e6:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   2b5ea:	f019 fd8e 	bl	4510a <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2b5ee:	07c3      	lsls	r3, r0, #31
   2b5f0:	d433      	bmi.n	2b65a <bt_enable+0x86>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   2b5f2:	f019 fcf2 	bl	44fda <bt_settings_init>
		if (err) {
   2b5f6:	4604      	mov	r4, r0
   2b5f8:	bb48      	cbnz	r0, 2b64e <bt_enable+0x7a>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   2b5fa:	4b1a      	ldr	r3, [pc, #104]	; (2b664 <bt_enable+0x90>)
   2b5fc:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2b5fe:	2200      	movs	r2, #0
   2b600:	2300      	movs	r3, #0
   2b602:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2b606:	f06f 0308 	mvn.w	r3, #8
   2b60a:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2b60e:	e9cd 0000 	strd	r0, r0, [sp]
   2b612:	9004      	str	r0, [sp, #16]
   2b614:	4b14      	ldr	r3, [pc, #80]	; (2b668 <bt_enable+0x94>)
   2b616:	4915      	ldr	r1, [pc, #84]	; (2b66c <bt_enable+0x98>)
   2b618:	4815      	ldr	r0, [pc, #84]	; (2b670 <bt_enable+0x9c>)
   2b61a:	f44f 7220 	mov.w	r2, #640	; 0x280
   2b61e:	f015 fda5 	bl	4116c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2b622:	4914      	ldr	r1, [pc, #80]	; (2b674 <bt_enable+0xa0>)
   2b624:	4812      	ldr	r0, [pc, #72]	; (2b670 <bt_enable+0x9c>)
   2b626:	f01d f972 	bl	4890e <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
   2b62a:	f7ff f9c3 	bl	2a9b4 <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
   2b62e:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2b632:	68db      	ldr	r3, [r3, #12]
   2b634:	4798      	blx	r3
	if (err) {
   2b636:	4604      	mov	r4, r0
   2b638:	b948      	cbnz	r0, 2b64e <bt_enable+0x7a>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   2b63a:	b926      	cbnz	r6, 2b646 <bt_enable+0x72>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   2b63c:	b008      	add	sp, #32
   2b63e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   2b642:	f7fa bd79 	b.w	26138 <bt_init>
	k_work_submit(&bt_dev.init);
   2b646:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   2b64a:	f016 f947 	bl	418dc <k_work_submit>
}
   2b64e:	4620      	mov	r0, r4
   2b650:	b008      	add	sp, #32
   2b652:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2b654:	f06f 0412 	mvn.w	r4, #18
   2b658:	e7f9      	b.n	2b64e <bt_enable+0x7a>
		return -EALREADY;
   2b65a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2b65e:	e7f6      	b.n	2b64e <bt_enable+0x7a>
   2b660:	20000000 	.word	0x20000000
   2b664:	20001c64 	.word	0x20001c64
   2b668:	0002ae21 	.word	0x0002ae21
   2b66c:	20004390 	.word	0x20004390
   2b670:	20000ef8 	.word	0x20000ef8
   2b674:	0004b3c4 	.word	0x0004b3c4

0002b678 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   2b678:	4800      	ldr	r0, [pc, #0]	; (2b67c <bt_get_name+0x4>)
   2b67a:	4770      	bx	lr
   2b67c:	0004b0f1 	.word	0x0004b0f1

0002b680 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   2b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   2b682:	4f0b      	ldr	r7, [pc, #44]	; (2b6b0 <id_find+0x30>)
{
   2b684:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   2b686:	2500      	movs	r5, #0
   2b688:	79fb      	ldrb	r3, [r7, #7]
   2b68a:	b2ec      	uxtb	r4, r5
   2b68c:	42a3      	cmp	r3, r4
   2b68e:	d802      	bhi.n	2b696 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   2b690:	f06f 0401 	mvn.w	r4, #1
   2b694:	e009      	b.n	2b6aa <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   2b696:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   2b69a:	2207      	movs	r2, #7
   2b69c:	4439      	add	r1, r7
   2b69e:	4630      	mov	r0, r6
   2b6a0:	f019 fb9f 	bl	44de2 <memcmp>
   2b6a4:	3501      	adds	r5, #1
   2b6a6:	2800      	cmp	r0, #0
   2b6a8:	d1ee      	bne.n	2b688 <id_find+0x8>
}
   2b6aa:	4620      	mov	r0, r4
   2b6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b6ae:	bf00      	nop
   2b6b0:	20000000 	.word	0x20000000

0002b6b4 <set_random_address>:
{
   2b6b4:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   2b6b6:	4914      	ldr	r1, [pc, #80]	; (2b708 <set_random_address+0x54>)
   2b6b8:	2206      	movs	r2, #6
   2b6ba:	4605      	mov	r5, r0
   2b6bc:	f019 fb91 	bl	44de2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   2b6c0:	4604      	mov	r4, r0
   2b6c2:	b1e0      	cbz	r0, 2b6fe <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   2b6c4:	2106      	movs	r1, #6
   2b6c6:	f242 0005 	movw	r0, #8197	; 0x2005
   2b6ca:	f7ff fc55 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   2b6ce:	4604      	mov	r4, r0
   2b6d0:	b1b8      	cbz	r0, 2b702 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2b6d2:	2206      	movs	r2, #6
   2b6d4:	4629      	mov	r1, r5
   2b6d6:	3008      	adds	r0, #8
   2b6d8:	f01c fae3 	bl	47ca2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   2b6dc:	4621      	mov	r1, r4
   2b6de:	2200      	movs	r2, #0
   2b6e0:	f242 0005 	movw	r0, #8197	; 0x2005
   2b6e4:	f7ff fca4 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   2b6e8:	4604      	mov	r4, r0
   2b6ea:	b940      	cbnz	r0, 2b6fe <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   2b6ec:	2206      	movs	r2, #6
   2b6ee:	4806      	ldr	r0, [pc, #24]	; (2b708 <set_random_address+0x54>)
   2b6f0:	4629      	mov	r1, r5
   2b6f2:	f019 fb86 	bl	44e02 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   2b6f6:	4b05      	ldr	r3, [pc, #20]	; (2b70c <set_random_address+0x58>)
   2b6f8:	2201      	movs	r2, #1
   2b6fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   2b6fe:	4620      	mov	r0, r4
   2b700:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2b702:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2b706:	e7fa      	b.n	2b6fe <set_random_address+0x4a>
   2b708:	20000061 	.word	0x20000061
   2b70c:	20000000 	.word	0x20000000

0002b710 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   2b710:	b530      	push	{r4, r5, lr}
   2b712:	4604      	mov	r4, r0
   2b714:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2b716:	460d      	mov	r5, r1
   2b718:	b1e1      	cbz	r1, 2b754 <id_create.constprop.0+0x44>
   2b71a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2b71c:	2207      	movs	r2, #7
   2b71e:	a902      	add	r1, sp, #8
   2b720:	4628      	mov	r0, r5
   2b722:	9302      	str	r3, [sp, #8]
   2b724:	f8cd 300b 	str.w	r3, [sp, #11]
   2b728:	f019 fb5b 	bl	44de2 <memcmp>
   2b72c:	b190      	cbz	r0, 2b754 <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   2b72e:	4816      	ldr	r0, [pc, #88]	; (2b788 <id_create.constprop.0+0x78>)
   2b730:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2b734:	4629      	mov	r1, r5
   2b736:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2b738:	f01a f840 	bl	457bc <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2b73c:	4813      	ldr	r0, [pc, #76]	; (2b78c <id_create.constprop.0+0x7c>)
   2b73e:	f01a f840 	bl	457c2 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2b742:	0782      	lsls	r2, r0, #30
   2b744:	f3c0 0340 	ubfx	r3, r0, #1, #1
   2b748:	d51b      	bpl.n	2b782 <id_create.constprop.0+0x72>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   2b74a:	f7ff f9c7 	bl	2aadc <bt_settings_save_id>
	}

	return 0;
   2b74e:	2000      	movs	r0, #0
}
   2b750:	b005      	add	sp, #20
   2b752:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   2b754:	4668      	mov	r0, sp
   2b756:	f019 fc8b 	bl	45070 <bt_addr_le_create_static>
			if (err) {
   2b75a:	2800      	cmp	r0, #0
   2b75c:	d1f8      	bne.n	2b750 <id_create.constprop.0+0x40>
		} while (id_find(&new_addr) >= 0);
   2b75e:	4668      	mov	r0, sp
   2b760:	f7ff ff8e 	bl	2b680 <id_find>
   2b764:	2800      	cmp	r0, #0
   2b766:	daf5      	bge.n	2b754 <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   2b768:	4b07      	ldr	r3, [pc, #28]	; (2b788 <id_create.constprop.0+0x78>)
   2b76a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2b76e:	441c      	add	r4, r3
   2b770:	4669      	mov	r1, sp
   2b772:	4620      	mov	r0, r4
   2b774:	f01a f822 	bl	457bc <bt_addr_le_copy>
		if (addr) {
   2b778:	2d00      	cmp	r5, #0
   2b77a:	d0df      	beq.n	2b73c <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2b77c:	4621      	mov	r1, r4
   2b77e:	4628      	mov	r0, r5
   2b780:	e7da      	b.n	2b738 <id_create.constprop.0+0x28>
	return 0;
   2b782:	4618      	mov	r0, r3
   2b784:	e7e4      	b.n	2b750 <id_create.constprop.0+0x40>
   2b786:	bf00      	nop
   2b788:	20000000 	.word	0x20000000
   2b78c:	200000cc 	.word	0x200000cc

0002b790 <bt_id_pending_keys_update>:
   2b790:	4b0a      	ldr	r3, [pc, #40]	; (2b7bc <bt_id_pending_keys_update+0x2c>)
   2b792:	f3bf 8f5b 	dmb	ish
   2b796:	e853 2f00 	ldrex	r2, [r3]
   2b79a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   2b79e:	e843 1000 	strex	r0, r1, [r3]
   2b7a2:	2800      	cmp	r0, #0
   2b7a4:	d1f7      	bne.n	2b796 <bt_id_pending_keys_update+0x6>
   2b7a6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   2b7aa:	0493      	lsls	r3, r2, #18
   2b7ac:	d504      	bpl.n	2b7b8 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   2b7ae:	4904      	ldr	r1, [pc, #16]	; (2b7c0 <bt_id_pending_keys_update+0x30>)
   2b7b0:	2200      	movs	r2, #0
   2b7b2:	2002      	movs	r0, #2
   2b7b4:	f003 bf9a 	b.w	2f6ec <bt_keys_foreach>
}
   2b7b8:	4770      	bx	lr
   2b7ba:	bf00      	nop
   2b7bc:	200000cc 	.word	0x200000cc
   2b7c0:	00045903 	.word	0x00045903

0002b7c4 <bt_id_add>:
{
   2b7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2b7c6:	4c47      	ldr	r4, [pc, #284]	; (2b8e4 <bt_id_add+0x120>)
   2b7c8:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   2b7cc:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   2b7d0:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2b7d2:	b10a      	cbz	r2, 2b7d8 <bt_id_add+0x14>
   2b7d4:	429a      	cmp	r2, r3
   2b7d6:	d208      	bcs.n	2b7ea <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
   2b7d8:	3301      	adds	r3, #1
   2b7da:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2b7de:	7a2b      	ldrb	r3, [r5, #8]
   2b7e0:	f043 0304 	orr.w	r3, r3, #4
   2b7e4:	722b      	strb	r3, [r5, #8]
}
   2b7e6:	b003      	add	sp, #12
   2b7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2b7ea:	2100      	movs	r1, #0
   2b7ec:	2206      	movs	r2, #6
   2b7ee:	4608      	mov	r0, r1
   2b7f0:	f001 f930 	bl	2ca54 <bt_conn_lookup_state_le>
	if (conn) {
   2b7f4:	4606      	mov	r6, r0
   2b7f6:	b1a8      	cbz	r0, 2b824 <bt_id_add+0x60>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b7f8:	f3bf 8f5b 	dmb	ish
   2b7fc:	34cc      	adds	r4, #204	; 0xcc
   2b7fe:	e854 3f00 	ldrex	r3, [r4]
   2b802:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2b806:	e844 3200 	strex	r2, r3, [r4]
   2b80a:	2a00      	cmp	r2, #0
   2b80c:	d1f7      	bne.n	2b7fe <bt_id_add+0x3a>
   2b80e:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2b812:	7a2b      	ldrb	r3, [r5, #8]
   2b814:	f043 0301 	orr.w	r3, r3, #1
   2b818:	722b      	strb	r3, [r5, #8]
}
   2b81a:	b003      	add	sp, #12
   2b81c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   2b820:	f01a ba9a 	b.w	45d58 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2b824:	4601      	mov	r1, r0
   2b826:	4830      	ldr	r0, [pc, #192]	; (2b8e8 <bt_id_add+0x124>)
   2b828:	f000 fab0 	bl	2bd8c <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   2b82c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2b830:	b9b3      	cbnz	r3, 2b860 <bt_id_add+0x9c>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   2b832:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   2b836:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   2b83a:	429a      	cmp	r2, r3
   2b83c:	d11f      	bne.n	2b87e <bt_id_add+0xba>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   2b83e:	2200      	movs	r2, #0
   2b840:	4611      	mov	r1, r2
   2b842:	f242 0029 	movw	r0, #8233	; 0x2029
   2b846:	f7ff fbf3 	bl	2b030 <bt_hci_cmd_send_sync>
		if (err) {
   2b84a:	b970      	cbnz	r0, 2b86a <bt_id_add+0xa6>
		bt_dev.le.rl_entries++;
   2b84c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2b850:	3301      	adds	r3, #1
   2b852:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2b856:	7a2b      	ldrb	r3, [r5, #8]
   2b858:	f043 0304 	orr.w	r3, r3, #4
   2b85c:	722b      	strb	r3, [r5, #8]
		goto done;
   2b85e:	e004      	b.n	2b86a <bt_id_add+0xa6>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2b860:	4630      	mov	r0, r6
   2b862:	f019 fffe 	bl	45862 <addr_res_enable>
		if (err) {
   2b866:	2800      	cmp	r0, #0
   2b868:	d0e3      	beq.n	2b832 <bt_id_add+0x6e>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2b86a:	2001      	movs	r0, #1
   2b86c:	f019 fff9 	bl	45862 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2b870:	481e      	ldr	r0, [pc, #120]	; (2b8ec <bt_id_add+0x128>)
   2b872:	2100      	movs	r1, #0
}
   2b874:	b003      	add	sp, #12
   2b876:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2b87a:	f000 ba87 	b.w	2bd8c <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2b87e:	462a      	mov	r2, r5
   2b880:	1c6f      	adds	r7, r5, #1
   2b882:	f812 0b2a 	ldrb.w	r0, [r2], #42
   2b886:	4639      	mov	r1, r7
   2b888:	f019 ffb8 	bl	457fc <hci_id_add>
	if (err) {
   2b88c:	4606      	mov	r6, r0
   2b88e:	2800      	cmp	r0, #0
   2b890:	d1eb      	bne.n	2b86a <bt_id_add+0xa6>
	bt_dev.le.rl_entries++;
   2b892:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2b896:	3301      	adds	r3, #1
   2b898:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   2b89c:	7a2b      	ldrb	r3, [r5, #8]
   2b89e:	f043 0304 	orr.w	r3, r3, #4
   2b8a2:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   2b8a4:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   2b8a8:	075b      	lsls	r3, r3, #29
   2b8aa:	d5de      	bpl.n	2b86a <bt_id_add+0xa6>
	bt_addr_le_copy(&cp.id_addr, addr);
   2b8ac:	4639      	mov	r1, r7
   2b8ae:	4668      	mov	r0, sp
   2b8b0:	f019 ff84 	bl	457bc <bt_addr_le_copy>
	cp.mode = mode;
   2b8b4:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2b8b6:	2108      	movs	r1, #8
   2b8b8:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   2b8bc:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2b8c0:	f7ff fb5a 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   2b8c4:	4604      	mov	r4, r0
   2b8c6:	2800      	cmp	r0, #0
   2b8c8:	d0cf      	beq.n	2b86a <bt_id_add+0xa6>
   2b8ca:	2208      	movs	r2, #8
   2b8cc:	4669      	mov	r1, sp
   2b8ce:	4410      	add	r0, r2
   2b8d0:	f01c f9e7 	bl	47ca2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   2b8d4:	4632      	mov	r2, r6
   2b8d6:	4621      	mov	r1, r4
   2b8d8:	f242 004e 	movw	r0, #8270	; 0x204e
   2b8dc:	f7ff fba8 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   2b8e0:	e7c3      	b.n	2b86a <bt_id_add+0xa6>
   2b8e2:	bf00      	nop
   2b8e4:	20000000 	.word	0x20000000
   2b8e8:	00045893 	.word	0x00045893
   2b8ec:	000457cf 	.word	0x000457cf

0002b8f0 <bt_id_del>:
{
   2b8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   2b8f4:	4c3c      	ldr	r4, [pc, #240]	; (2b9e8 <bt_id_del+0xf8>)
   2b8f6:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2b8fa:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   2b8fe:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
   2b900:	b112      	cbz	r2, 2b908 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2b902:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   2b904:	4293      	cmp	r3, r2
   2b906:	dd08      	ble.n	2b91a <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   2b908:	3b01      	subs	r3, #1
   2b90a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2b90e:	7a2b      	ldrb	r3, [r5, #8]
   2b910:	f023 0304 	bic.w	r3, r3, #4
   2b914:	722b      	strb	r3, [r5, #8]
}
   2b916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2b91a:	2100      	movs	r1, #0
   2b91c:	2206      	movs	r2, #6
   2b91e:	4608      	mov	r0, r1
   2b920:	f001 f898 	bl	2ca54 <bt_conn_lookup_state_le>
	if (conn) {
   2b924:	4606      	mov	r6, r0
   2b926:	b1a0      	cbz	r0, 2b952 <bt_id_del+0x62>
   2b928:	f3bf 8f5b 	dmb	ish
   2b92c:	34cc      	adds	r4, #204	; 0xcc
   2b92e:	e854 3f00 	ldrex	r3, [r4]
   2b932:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2b936:	e844 3200 	strex	r2, r3, [r4]
   2b93a:	2a00      	cmp	r2, #0
   2b93c:	d1f7      	bne.n	2b92e <bt_id_del+0x3e>
   2b93e:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2b942:	7a2b      	ldrb	r3, [r5, #8]
   2b944:	f043 0302 	orr.w	r3, r3, #2
   2b948:	722b      	strb	r3, [r5, #8]
}
   2b94a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   2b94e:	f01a ba03 	b.w	45d58 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2b952:	4601      	mov	r1, r0
   2b954:	4825      	ldr	r0, [pc, #148]	; (2b9ec <bt_id_del+0xfc>)
   2b956:	f000 fa19 	bl	2bd8c <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2b95a:	4630      	mov	r0, r6
   2b95c:	f019 ff81 	bl	45862 <addr_res_enable>
	if (err) {
   2b960:	4607      	mov	r7, r0
   2b962:	b988      	cbnz	r0, 2b988 <bt_id_del+0x98>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2b964:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2b968:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   2b96c:	429a      	cmp	r2, r3
   2b96e:	d217      	bcs.n	2b9a0 <bt_id_del+0xb0>
		bt_dev.le.rl_entries--;
   2b970:	3b01      	subs	r3, #1
   2b972:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2b976:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2b978:	491d      	ldr	r1, [pc, #116]	; (2b9f0 <bt_id_del+0x100>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   2b97a:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2b97e:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   2b980:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2b982:	2002      	movs	r0, #2
   2b984:	f003 feb2 	bl	2f6ec <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   2b988:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2b98c:	b113      	cbz	r3, 2b994 <bt_id_del+0xa4>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2b98e:	2001      	movs	r0, #1
   2b990:	f019 ff67 	bl	45862 <addr_res_enable>
}
   2b994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2b998:	4816      	ldr	r0, [pc, #88]	; (2b9f4 <bt_id_del+0x104>)
   2b99a:	2100      	movs	r1, #0
   2b99c:	f000 b9f6 	b.w	2bd8c <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   2b9a0:	2107      	movs	r1, #7
   2b9a2:	f242 0028 	movw	r0, #8232	; 0x2028
   2b9a6:	f7ff fae7 	bl	2af78 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   2b9aa:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
   2b9ae:	4606      	mov	r6, r0
   2b9b0:	2800      	cmp	r0, #0
   2b9b2:	d0e9      	beq.n	2b988 <bt_id_del+0x98>
	return net_buf_simple_add(&buf->b, len);
   2b9b4:	2107      	movs	r1, #7
   2b9b6:	3008      	adds	r0, #8
   2b9b8:	f01c f96d 	bl	47c96 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2b9bc:	4641      	mov	r1, r8
   2b9be:	f019 fefd 	bl	457bc <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   2b9c2:	463a      	mov	r2, r7
   2b9c4:	4631      	mov	r1, r6
   2b9c6:	f242 0028 	movw	r0, #8232	; 0x2028
   2b9ca:	f7ff fb31 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   2b9ce:	2800      	cmp	r0, #0
   2b9d0:	d1da      	bne.n	2b988 <bt_id_del+0x98>
	bt_dev.le.rl_entries--;
   2b9d2:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2b9d6:	3b01      	subs	r3, #1
   2b9d8:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   2b9dc:	7a2b      	ldrb	r3, [r5, #8]
   2b9de:	f023 0304 	bic.w	r3, r3, #4
   2b9e2:	722b      	strb	r3, [r5, #8]
   2b9e4:	e7d0      	b.n	2b988 <bt_id_del+0x98>
   2b9e6:	bf00      	nop
   2b9e8:	20000000 	.word	0x20000000
   2b9ec:	00045893 	.word	0x00045893
   2b9f0:	0004584d 	.word	0x0004584d
   2b9f4:	000457cf 	.word	0x000457cf

0002b9f8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   2b9f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b9fa:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2b9fc:	4605      	mov	r5, r0
   2b9fe:	b918      	cbnz	r0, 2ba08 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   2ba00:	b1ec      	cbz	r4, 2ba3e <bt_id_create+0x46>
		return -EINVAL;
   2ba02:	f06f 0015 	mvn.w	r0, #21
   2ba06:	e018      	b.n	2ba3a <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2ba08:	2300      	movs	r3, #0
   2ba0a:	2207      	movs	r2, #7
   2ba0c:	4669      	mov	r1, sp
   2ba0e:	9300      	str	r3, [sp, #0]
   2ba10:	f8cd 3003 	str.w	r3, [sp, #3]
   2ba14:	f019 f9e5 	bl	44de2 <memcmp>
   2ba18:	2800      	cmp	r0, #0
   2ba1a:	d0f1      	beq.n	2ba00 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   2ba1c:	782b      	ldrb	r3, [r5, #0]
   2ba1e:	2b01      	cmp	r3, #1
   2ba20:	d1ef      	bne.n	2ba02 <bt_id_create+0xa>
   2ba22:	79ab      	ldrb	r3, [r5, #6]
   2ba24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2ba28:	2bc0      	cmp	r3, #192	; 0xc0
   2ba2a:	d1ea      	bne.n	2ba02 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   2ba2c:	4628      	mov	r0, r5
   2ba2e:	f7ff fe27 	bl	2b680 <id_find>
   2ba32:	2800      	cmp	r0, #0
   2ba34:	dbe4      	blt.n	2ba00 <bt_id_create+0x8>
			return -EALREADY;
   2ba36:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   2ba3a:	b002      	add	sp, #8
   2ba3c:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   2ba3e:	4e12      	ldr	r6, [pc, #72]	; (2ba88 <bt_id_create+0x90>)
   2ba40:	79f3      	ldrb	r3, [r6, #7]
   2ba42:	2b01      	cmp	r3, #1
   2ba44:	d01c      	beq.n	2ba80 <bt_id_create+0x88>
   2ba46:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   2ba4a:	f019 feba 	bl	457c2 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2ba4e:	07c3      	lsls	r3, r0, #31
   2ba50:	d40b      	bmi.n	2ba6a <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2ba52:	2d00      	cmp	r5, #0
   2ba54:	d0d5      	beq.n	2ba02 <bt_id_create+0xa>
   2ba56:	2207      	movs	r2, #7
   2ba58:	4669      	mov	r1, sp
   2ba5a:	4628      	mov	r0, r5
   2ba5c:	9400      	str	r4, [sp, #0]
   2ba5e:	f8cd 4003 	str.w	r4, [sp, #3]
   2ba62:	f019 f9be 	bl	44de2 <memcmp>
   2ba66:	2800      	cmp	r0, #0
   2ba68:	d0cb      	beq.n	2ba02 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   2ba6a:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   2ba6c:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   2ba6e:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   2ba70:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   2ba72:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   2ba74:	f7ff fe4c 	bl	2b710 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   2ba78:	2800      	cmp	r0, #0
   2ba7a:	bf08      	it	eq
   2ba7c:	4620      	moveq	r0, r4
   2ba7e:	e7dc      	b.n	2ba3a <bt_id_create+0x42>
		return -ENOMEM;
   2ba80:	f06f 000b 	mvn.w	r0, #11
   2ba84:	e7d9      	b.n	2ba3a <bt_id_create+0x42>
   2ba86:	bf00      	nop
   2ba88:	20000000 	.word	0x20000000

0002ba8c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   2ba8c:	b570      	push	{r4, r5, r6, lr}
   2ba8e:	b086      	sub	sp, #24
   2ba90:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   2ba92:	aa01      	add	r2, sp, #4
   2ba94:	2100      	movs	r1, #0
   2ba96:	f241 0009 	movw	r0, #4105	; 0x1009
   2ba9a:	f7ff fac9 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   2ba9e:	4604      	mov	r4, r0
   2baa0:	b970      	cbnz	r0, 2bac0 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   2baa2:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2baa4:	9002      	str	r0, [sp, #8]
   2baa6:	689d      	ldr	r5, [r3, #8]
   2baa8:	f8ad 000c 	strh.w	r0, [sp, #12]
   2baac:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   2baae:	2206      	movs	r2, #6
   2bab0:	a902      	add	r1, sp, #8
   2bab2:	4628      	mov	r0, r5
   2bab4:	f019 f995 	bl	44de2 <memcmp>
   2bab8:	b920      	cbnz	r0, 2bac4 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   2baba:	9801      	ldr	r0, [sp, #4]
   2babc:	f011 fb3e 	bl	3d13c <net_buf_unref>
		return 0U;
   2bac0:	2000      	movs	r0, #0
   2bac2:	e016      	b.n	2baf2 <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   2bac4:	4b0c      	ldr	r3, [pc, #48]	; (2baf8 <bt_id_read_public_addr+0x6c>)
   2bac6:	6818      	ldr	r0, [r3, #0]
   2bac8:	9004      	str	r0, [sp, #16]
   2baca:	889b      	ldrh	r3, [r3, #4]
   2bacc:	f8ad 3014 	strh.w	r3, [sp, #20]
   2bad0:	2206      	movs	r2, #6
   2bad2:	a904      	add	r1, sp, #16
   2bad4:	4628      	mov	r0, r5
   2bad6:	f019 f984 	bl	44de2 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2bada:	2800      	cmp	r0, #0
   2badc:	d0ed      	beq.n	2baba <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   2bade:	2206      	movs	r2, #6
   2bae0:	4629      	mov	r1, r5
   2bae2:	1c70      	adds	r0, r6, #1
   2bae4:	f019 f98d 	bl	44e02 <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   2bae8:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   2baea:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   2baec:	f011 fb26 	bl	3d13c <net_buf_unref>
	return 1U;
   2baf0:	2001      	movs	r0, #1
}
   2baf2:	b006      	add	sp, #24
   2baf4:	bd70      	pop	{r4, r5, r6, pc}
   2baf6:	bf00      	nop
   2baf8:	000497d5 	.word	0x000497d5

0002bafc <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   2bafc:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   2bafe:	4668      	mov	r0, sp
   2bb00:	f7ff ffc4 	bl	2ba8c <bt_id_read_public_addr>
   2bb04:	4b04      	ldr	r3, [pc, #16]	; (2bb18 <bt_setup_public_id_addr+0x1c>)
   2bb06:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   2bb08:	b118      	cbz	r0, 2bb12 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   2bb0a:	4669      	mov	r1, sp
   2bb0c:	2000      	movs	r0, #0
   2bb0e:	f7ff fdff 	bl	2b710 <id_create.constprop.0>
}
   2bb12:	b003      	add	sp, #12
   2bb14:	f85d fb04 	ldr.w	pc, [sp], #4
   2bb18:	20000000 	.word	0x20000000

0002bb1c <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   2bb1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2bb20:	4b15      	ldr	r3, [pc, #84]	; (2bb78 <bt_read_static_addr+0x5c>)
   2bb22:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   2bb26:	f014 0401 	ands.w	r4, r4, #1
{
   2bb2a:	4607      	mov	r7, r0
   2bb2c:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2bb2e:	d015      	beq.n	2bb5c <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   2bb30:	aa01      	add	r2, sp, #4
   2bb32:	2100      	movs	r1, #0
   2bb34:	f64f 4009 	movw	r0, #64521	; 0xfc09
   2bb38:	f7ff fa7a 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   2bb3c:	4605      	mov	r5, r0
   2bb3e:	b9c8      	cbnz	r0, 2bb74 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   2bb40:	9b01      	ldr	r3, [sp, #4]
   2bb42:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   2bb44:	785c      	ldrb	r4, [r3, #1]
   2bb46:	42b4      	cmp	r4, r6
   2bb48:	bf28      	it	cs
   2bb4a:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2bb4c:	f04f 0816 	mov.w	r8, #22
   2bb50:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   2bb52:	42a5      	cmp	r5, r4
   2bb54:	db06      	blt.n	2bb64 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
   2bb56:	9801      	ldr	r0, [sp, #4]
   2bb58:	f011 faf0 	bl	3d13c <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   2bb5c:	4620      	mov	r0, r4
   2bb5e:	b002      	add	sp, #8
   2bb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2bb64:	fb08 7005 	mla	r0, r8, r5, r7
   2bb68:	2216      	movs	r2, #22
   2bb6a:	4631      	mov	r1, r6
   2bb6c:	f019 f949 	bl	44e02 <memcpy>
	for (i = 0; i < cnt; i++) {
   2bb70:	3501      	adds	r5, #1
   2bb72:	e7ee      	b.n	2bb52 <bt_read_static_addr+0x36>
		return 0;
   2bb74:	2400      	movs	r4, #0
   2bb76:	e7f1      	b.n	2bb5c <bt_read_static_addr+0x40>
   2bb78:	20000000 	.word	0x20000000

0002bb7c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   2bb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   2bb7e:	4e15      	ldr	r6, [pc, #84]	; (2bbd4 <bt_setup_random_id_addr+0x58>)
   2bb80:	79f4      	ldrb	r4, [r6, #7]
{
   2bb82:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   2bb84:	b9f4      	cbnz	r4, 2bbc4 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   2bb86:	2101      	movs	r1, #1
   2bb88:	a802      	add	r0, sp, #8
   2bb8a:	f7ff ffc7 	bl	2bb1c <bt_read_static_addr>
   2bb8e:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   2bb90:	b1c0      	cbz	r0, 2bbc4 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   2bb92:	2716      	movs	r7, #22
   2bb94:	ab02      	add	r3, sp, #8
   2bb96:	b2e5      	uxtb	r5, r4
   2bb98:	fb07 3105 	mla	r1, r7, r5, r3
   2bb9c:	2206      	movs	r2, #6
   2bb9e:	f10d 0001 	add.w	r0, sp, #1
   2bba2:	f019 f92e 	bl	44e02 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   2bba6:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   2bba8:	4669      	mov	r1, sp
   2bbaa:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   2bbac:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   2bbb0:	f7ff fdae 	bl	2b710 <id_create.constprop.0>
				if (err) {
   2bbb4:	b920      	cbnz	r0, 2bbc0 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   2bbb6:	79f2      	ldrb	r2, [r6, #7]
   2bbb8:	3401      	adds	r4, #1
   2bbba:	b2e3      	uxtb	r3, r4
   2bbbc:	429a      	cmp	r2, r3
   2bbbe:	d8e9      	bhi.n	2bb94 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   2bbc0:	b009      	add	sp, #36	; 0x24
   2bbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   2bbc4:	2100      	movs	r1, #0
   2bbc6:	4608      	mov	r0, r1
}
   2bbc8:	b009      	add	sp, #36	; 0x24
   2bbca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   2bbce:	f7ff bf13 	b.w	2b9f8 <bt_id_create>
   2bbd2:	bf00      	nop
   2bbd4:	20000000 	.word	0x20000000

0002bbd8 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   2bbd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2bbdc:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   2bbe0:	7805      	ldrb	r5, [r0, #0]
{
   2bbe2:	460e      	mov	r6, r1
   2bbe4:	4690      	mov	r8, r2
   2bbe6:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2bbe8:	d027      	beq.n	2bc3a <bt_id_set_adv_own_addr+0x62>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2bbea:	4c23      	ldr	r4, [pc, #140]	; (2bc78 <bt_id_set_adv_own_addr+0xa0>)
   2bbec:	b12a      	cbz	r2, 2bbfa <bt_id_set_adv_own_addr+0x22>
   2bbee:	0688      	lsls	r0, r1, #26
   2bbf0:	d503      	bpl.n	2bbfa <bt_id_set_adv_own_addr+0x22>
   2bbf2:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   2bbf6:	0659      	lsls	r1, r3, #25
   2bbf8:	d53b      	bpl.n	2bc72 <bt_id_set_adv_own_addr+0x9a>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2bbfa:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   2bbfe:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   2bc02:	5ce3      	ldrb	r3, [r4, r3]
   2bc04:	2b01      	cmp	r3, #1
   2bc06:	d009      	beq.n	2bc1c <bt_id_set_adv_own_addr+0x44>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   2bc08:	eba9 0905 	sub.w	r9, r9, r5
   2bc0c:	f814 3009 	ldrb.w	r3, [r4, r9]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2bc10:	f1b8 0f00 	cmp.w	r8, #0
   2bc14:	d10c      	bne.n	2bc30 <bt_id_set_adv_own_addr+0x58>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2bc16:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   2bc18:	2000      	movs	r0, #0
   2bc1a:	e007      	b.n	2bc2c <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2bc1c:	2007      	movs	r0, #7
   2bc1e:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   2bc22:	4420      	add	r0, r4
   2bc24:	f7ff fd46 	bl	2b6b4 <set_random_address>
				if (err) {
   2bc28:	2800      	cmp	r0, #0
   2bc2a:	d0ed      	beq.n	2bc08 <bt_id_set_adv_own_addr+0x30>
}
   2bc2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2bc30:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2bc32:	bf48      	it	mi
   2bc34:	f043 0302 	orrmi.w	r3, r3, #2
   2bc38:	e7ed      	b.n	2bc16 <bt_id_set_adv_own_addr+0x3e>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   2bc3a:	074b      	lsls	r3, r1, #29
   2bc3c:	d515      	bpl.n	2bc6a <bt_id_set_adv_own_addr+0x92>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2bc3e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2bc78 <bt_id_set_adv_own_addr+0xa0>
   2bc42:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   2bc46:	00ee      	lsls	r6, r5, #3
   2bc48:	f818 3003 	ldrb.w	r3, [r8, r3]
   2bc4c:	2b01      	cmp	r3, #1
   2bc4e:	d10a      	bne.n	2bc66 <bt_id_set_adv_own_addr+0x8e>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2bc50:	2007      	movs	r0, #7
   2bc52:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   2bc56:	4440      	add	r0, r8
   2bc58:	f7ff fd2c 	bl	2b6b4 <set_random_address>
			*own_addr_type = id_addr->type;
   2bc5c:	1b76      	subs	r6, r6, r5
   2bc5e:	f818 3006 	ldrb.w	r3, [r8, r6]
   2bc62:	703b      	strb	r3, [r7, #0]
		if (err) {
   2bc64:	e7e2      	b.n	2bc2c <bt_id_set_adv_own_addr+0x54>
	int err = 0;
   2bc66:	4620      	mov	r0, r4
   2bc68:	e7f8      	b.n	2bc5c <bt_id_set_adv_own_addr+0x84>
			err = bt_id_set_adv_private_addr(adv);
   2bc6a:	f019 fe36 	bl	458da <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2bc6e:	2301      	movs	r3, #1
   2bc70:	e7f7      	b.n	2bc62 <bt_id_set_adv_own_addr+0x8a>
			return -ENOTSUP;
   2bc72:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2bc76:	e7d9      	b.n	2bc2c <bt_id_set_adv_own_addr+0x54>
   2bc78:	20000000 	.word	0x20000000

0002bc7c <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2bc7c:	6843      	ldr	r3, [r0, #4]
{
   2bc7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bc80:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2bc82:	0558      	lsls	r0, r3, #21
   2bc84:	d502      	bpl.n	2bc8c <valid_adv_param+0x10>
		return false;
   2bc86:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   2bc88:	b003      	add	sp, #12
   2bc8a:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2bc8c:	6922      	ldr	r2, [r4, #16]
   2bc8e:	b10a      	cbz	r2, 2bc94 <valid_adv_param+0x18>
   2bc90:	07d9      	lsls	r1, r3, #31
   2bc92:	d5f8      	bpl.n	2bc86 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   2bc94:	4d1a      	ldr	r5, [pc, #104]	; (2bd00 <valid_adv_param+0x84>)
   2bc96:	7820      	ldrb	r0, [r4, #0]
   2bc98:	79eb      	ldrb	r3, [r5, #7]
   2bc9a:	4283      	cmp	r3, r0
   2bc9c:	d9f3      	bls.n	2bc86 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   2bc9e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   2bca2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2bca4:	2207      	movs	r2, #7
   2bca6:	4669      	mov	r1, sp
   2bca8:	4428      	add	r0, r5
   2bcaa:	9300      	str	r3, [sp, #0]
   2bcac:	f8cd 3003 	str.w	r3, [sp, #3]
   2bcb0:	f019 f897 	bl	44de2 <memcmp>
	if (param->id >= bt_dev.id_count ||
   2bcb4:	2800      	cmp	r0, #0
   2bcb6:	d0e6      	beq.n	2bc86 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2bcb8:	6860      	ldr	r0, [r4, #4]
   2bcba:	07c2      	lsls	r2, r0, #31
   2bcbc:	d406      	bmi.n	2bccc <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   2bcbe:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   2bcc2:	2b08      	cmp	r3, #8
   2bcc4:	d802      	bhi.n	2bccc <valid_adv_param+0x50>
   2bcc6:	68a3      	ldr	r3, [r4, #8]
   2bcc8:	2b9f      	cmp	r3, #159	; 0x9f
   2bcca:	d9dc      	bls.n	2bc86 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   2bccc:	f010 0f30 	tst.w	r0, #48	; 0x30
   2bcd0:	d002      	beq.n	2bcd8 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   2bcd2:	6923      	ldr	r3, [r4, #16]
   2bcd4:	2b00      	cmp	r3, #0
   2bcd6:	d0d6      	beq.n	2bc86 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   2bcd8:	06c3      	lsls	r3, r0, #27
   2bcda:	d401      	bmi.n	2bce0 <valid_adv_param+0x64>
   2bcdc:	6923      	ldr	r3, [r4, #16]
   2bcde:	b943      	cbnz	r3, 2bcf2 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   2bce0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2bce4:	429a      	cmp	r2, r3
   2bce6:	d8ce      	bhi.n	2bc86 <valid_adv_param+0xa>
   2bce8:	2a1f      	cmp	r2, #31
   2bcea:	d9cc      	bls.n	2bc86 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   2bcec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2bcf0:	d8c9      	bhi.n	2bc86 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   2bcf2:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   2bcf6:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   2bcfa:	bf18      	it	ne
   2bcfc:	2001      	movne	r0, #1
   2bcfe:	e7c3      	b.n	2bc88 <valid_adv_param+0xc>
   2bd00:	20000000 	.word	0x20000000

0002bd04 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   2bd04:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   2bd06:	4606      	mov	r6, r0
   2bd08:	4b1e      	ldr	r3, [pc, #120]	; (2bd84 <le_adv_start_add_conn+0x80>)
   2bd0a:	f816 2b09 	ldrb.w	r2, [r6], #9
   2bd0e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   2bd12:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2bd14:	2300      	movs	r3, #0
{
   2bd16:	4605      	mov	r5, r0
   2bd18:	2207      	movs	r2, #7
   2bd1a:	460f      	mov	r7, r1
   2bd1c:	4630      	mov	r0, r6
   2bd1e:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2bd20:	9300      	str	r3, [sp, #0]
   2bd22:	f8cd 3003 	str.w	r3, [sp, #3]
   2bd26:	f019 f85c 	bl	44de2 <memcmp>
   2bd2a:	782a      	ldrb	r2, [r5, #0]
   2bd2c:	4604      	mov	r4, r0
   2bd2e:	b9a8      	cbnz	r0, 2bd5c <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   2bd30:	4b15      	ldr	r3, [pc, #84]	; (2bd88 <le_adv_start_add_conn+0x84>)
   2bd32:	6818      	ldr	r0, [r3, #0]
   2bd34:	8899      	ldrh	r1, [r3, #4]
   2bd36:	9002      	str	r0, [sp, #8]
   2bd38:	799b      	ldrb	r3, [r3, #6]
   2bd3a:	f8ad 100c 	strh.w	r1, [sp, #12]
   2bd3e:	4610      	mov	r0, r2
   2bd40:	a902      	add	r1, sp, #8
   2bd42:	f88d 300e 	strb.w	r3, [sp, #14]
   2bd46:	f000 fe4b 	bl	2c9e0 <bt_conn_add_le>
		if (!conn) {
   2bd4a:	4605      	mov	r5, r0
   2bd4c:	b1b8      	cbz	r0, 2bd7e <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   2bd4e:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2bd50:	f000 fc86 	bl	2c660 <bt_conn_set_state>
	*out_conn = conn;
   2bd54:	603d      	str	r5, [r7, #0]
	return 0;
}
   2bd56:	4620      	mov	r0, r4
   2bd58:	b005      	add	sp, #20
   2bd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   2bd5c:	4631      	mov	r1, r6
   2bd5e:	4610      	mov	r0, r2
   2bd60:	f01a f8b4 	bl	45ecc <bt_conn_exists_le>
   2bd64:	4604      	mov	r4, r0
   2bd66:	b938      	cbnz	r0, 2bd78 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   2bd68:	7828      	ldrb	r0, [r5, #0]
   2bd6a:	4631      	mov	r1, r6
   2bd6c:	f000 fe38 	bl	2c9e0 <bt_conn_add_le>
	if (!conn) {
   2bd70:	4605      	mov	r5, r0
   2bd72:	b120      	cbz	r0, 2bd7e <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2bd74:	2105      	movs	r1, #5
   2bd76:	e7eb      	b.n	2bd50 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   2bd78:	f06f 0415 	mvn.w	r4, #21
   2bd7c:	e7eb      	b.n	2bd56 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   2bd7e:	f06f 040b 	mvn.w	r4, #11
   2bd82:	e7e8      	b.n	2bd56 <le_adv_start_add_conn+0x52>
   2bd84:	20000000 	.word	0x20000000
   2bd88:	000497db 	.word	0x000497db

0002bd8c <bt_le_ext_adv_foreach>:
{
   2bd8c:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   2bd8e:	4801      	ldr	r0, [pc, #4]	; (2bd94 <bt_le_ext_adv_foreach+0x8>)
   2bd90:	4718      	bx	r3
   2bd92:	bf00      	nop
   2bd94:	20000018 	.word	0x20000018

0002bd98 <bt_le_adv_lookup_legacy>:
}
   2bd98:	4800      	ldr	r0, [pc, #0]	; (2bd9c <bt_le_adv_lookup_legacy+0x4>)
   2bd9a:	4770      	bx	lr
   2bd9c:	20000018 	.word	0x20000018

0002bda0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   2bda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   2bda4:	690e      	ldr	r6, [r1, #16]
{
   2bda6:	b08f      	sub	sp, #60	; 0x3c
   2bda8:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   2bdaa:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   2bdac:	ebb6 0903 	subs.w	r9, r6, r3
{
   2bdb0:	4605      	mov	r5, r0
   2bdb2:	488d      	ldr	r0, [pc, #564]	; (2bfe8 <bt_le_adv_start_legacy+0x248>)
   2bdb4:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   2bdb6:	bf18      	it	ne
   2bdb8:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
   2bdbc:	9307      	str	r3, [sp, #28]
   2bdbe:	f019 fdc1 	bl	45944 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2bdc2:	0787      	lsls	r7, r0, #30
{
   2bdc4:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2bdc6:	f140 8103 	bpl.w	2bfd0 <bt_le_adv_start_legacy+0x230>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   2bdca:	4608      	mov	r0, r1
   2bdcc:	f7ff ff56 	bl	2bc7c <valid_adv_param>
   2bdd0:	b928      	cbnz	r0, 2bdde <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   2bdd2:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   2bdd6:	4658      	mov	r0, fp
   2bdd8:	b00f      	add	sp, #60	; 0x3c
   2bdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   2bdde:	4620      	mov	r0, r4
   2bde0:	f019 fd8d 	bl	458fe <bt_id_adv_random_addr_check>
   2bde4:	4680      	mov	r8, r0
   2bde6:	2800      	cmp	r0, #0
   2bde8:	d0f3      	beq.n	2bdd2 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2bdea:	f105 0710 	add.w	r7, r5, #16
   2bdee:	4638      	mov	r0, r7
   2bdf0:	f019 fda8 	bl	45944 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2bdf4:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   2bdf8:	0640      	lsls	r0, r0, #25
   2bdfa:	f100 80ec 	bmi.w	2bfd6 <bt_le_adv_start_legacy+0x236>
	(void)memset(&set_param, 0, sizeof(set_param));
   2bdfe:	220f      	movs	r2, #15
   2be00:	4659      	mov	r1, fp
   2be02:	a80a      	add	r0, sp, #40	; 0x28
   2be04:	f019 f808 	bl	44e18 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   2be08:	68a3      	ldr	r3, [r4, #8]
   2be0a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   2be0e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   2be10:	68e3      	ldr	r3, [r4, #12]
   2be12:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   2be16:	f019 fd86 	bl	45926 <get_adv_channel_map>
	if (adv->id != param->id) {
   2be1a:	782a      	ldrb	r2, [r5, #0]
   2be1c:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   2be1e:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   2be22:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   2be24:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   2be28:	d004      	beq.n	2be34 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2be2a:	486f      	ldr	r0, [pc, #444]	; (2bfe8 <bt_le_adv_start_legacy+0x248>)
   2be2c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   2be30:	f019 fd8e 	bl	45950 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   2be34:	4a6d      	ldr	r2, [pc, #436]	; (2bfec <bt_le_adv_start_legacy+0x24c>)
	adv->id = param->id;
   2be36:	7823      	ldrb	r3, [r4, #0]
   2be38:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   2be3a:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   2be3e:	6861      	ldr	r1, [r4, #4]
   2be40:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   2be44:	464a      	mov	r2, r9
   2be46:	4628      	mov	r0, r5
   2be48:	f7ff fec6 	bl	2bbd8 <bt_id_set_adv_own_addr>
	if (err) {
   2be4c:	4683      	mov	fp, r0
   2be4e:	2800      	cmp	r0, #0
   2be50:	d1c1      	bne.n	2bdd6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   2be52:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   2be56:	2e00      	cmp	r6, #0
   2be58:	d049      	beq.n	2beee <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
   2be5a:	6921      	ldr	r1, [r4, #16]
   2be5c:	2207      	movs	r2, #7
   2be5e:	f018 ffd0 	bl	44e02 <memcpy>
	name_type = get_adv_name_type_param(param);
   2be62:	4620      	mov	r0, r4
   2be64:	f019 fe72 	bl	45b4c <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2be68:	6863      	ldr	r3, [r4, #4]
   2be6a:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   2be6c:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2be6e:	d547      	bpl.n	2bf00 <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
   2be70:	2e00      	cmp	r6, #0
   2be72:	d042      	beq.n	2befa <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   2be74:	f013 0f10 	tst.w	r3, #16
   2be78:	bf14      	ite	ne
   2be7a:	2304      	movne	r3, #4
   2be7c:	2301      	moveq	r3, #1
   2be7e:	6921      	ldr	r1, [r4, #16]
   2be80:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2be84:	2207      	movs	r2, #7
   2be86:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   2be8a:	f018 ffba 	bl	44e02 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   2be8e:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   2be92:	210f      	movs	r1, #15
   2be94:	f242 0006 	movw	r0, #8198	; 0x2006
   2be98:	f7ff f86e 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   2be9c:	4683      	mov	fp, r0
   2be9e:	2800      	cmp	r0, #0
   2bea0:	f000 809c 	beq.w	2bfdc <bt_le_adv_start_legacy+0x23c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2bea4:	220f      	movs	r2, #15
   2bea6:	a90a      	add	r1, sp, #40	; 0x28
   2bea8:	3008      	adds	r0, #8
   2beaa:	f01b fefa 	bl	47ca2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   2beae:	2200      	movs	r2, #0
   2beb0:	4659      	mov	r1, fp
   2beb2:	f242 0006 	movw	r0, #8198	; 0x2006
   2beb6:	f7ff f8bb 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   2beba:	2800      	cmp	r0, #0
   2bebc:	f040 8091 	bne.w	2bfe2 <bt_le_adv_start_legacy+0x242>
	if (!dir_adv) {
   2bec0:	b376      	cbz	r6, 2bf20 <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2bec2:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2bec4:	07db      	lsls	r3, r3, #31
   2bec6:	d439      	bmi.n	2bf3c <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2bec8:	4628      	mov	r0, r5
   2beca:	2101      	movs	r1, #1
   2becc:	f019 fe4e 	bl	45b6c <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2bed0:	9d07      	ldr	r5, [sp, #28]
	if (err) {
   2bed2:	4683      	mov	fp, r0
   2bed4:	2800      	cmp	r0, #0
   2bed6:	d074      	beq.n	2bfc2 <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2bed8:	2d00      	cmp	r5, #0
   2beda:	f43f af7c 	beq.w	2bdd6 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2bede:	4628      	mov	r0, r5
   2bee0:	2100      	movs	r1, #0
   2bee2:	f000 fbbd 	bl	2c660 <bt_conn_set_state>
			bt_conn_unref(conn);
   2bee6:	4628      	mov	r0, r5
   2bee8:	f019 ff36 	bl	45d58 <bt_conn_unref>
   2beec:	e773      	b.n	2bdd6 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   2beee:	9608      	str	r6, [sp, #32]
   2bef0:	2207      	movs	r2, #7
   2bef2:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   2bef6:	a908      	add	r1, sp, #32
   2bef8:	e7b1      	b.n	2be5e <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
   2befa:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   2befe:	e7c8      	b.n	2be92 <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   2bf00:	059a      	lsls	r2, r3, #22
   2bf02:	d403      	bmi.n	2bf0c <bt_le_adv_start_legacy+0x16c>
   2bf04:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2bf06:	b90b      	cbnz	r3, 2bf0c <bt_le_adv_start_legacy+0x16c>
   2bf08:	2802      	cmp	r0, #2
   2bf0a:	d103      	bne.n	2bf14 <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   2bf0c:	2302      	movs	r3, #2
   2bf0e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2bf12:	e7be      	b.n	2be92 <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2bf14:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   2bf16:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2bf1a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2bf1e:	e7b8      	b.n	2be92 <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   2bf20:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2bf22:	9300      	str	r3, [sp, #0]
   2bf24:	e9cd 8901 	strd	r8, r9, [sp, #4]
   2bf28:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2bf2a:	9905      	ldr	r1, [sp, #20]
   2bf2c:	4652      	mov	r2, sl
   2bf2e:	4628      	mov	r0, r5
   2bf30:	f019 fd95 	bl	45a5e <le_adv_update.constprop.0>
		if (err) {
   2bf34:	4683      	mov	fp, r0
   2bf36:	2800      	cmp	r0, #0
   2bf38:	d0c3      	beq.n	2bec2 <bt_le_adv_start_legacy+0x122>
   2bf3a:	e74c      	b.n	2bdd6 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   2bf3c:	a907      	add	r1, sp, #28
   2bf3e:	4628      	mov	r0, r5
   2bf40:	f7ff fee0 	bl	2bd04 <le_adv_start_add_conn>
		if (err) {
   2bf44:	4683      	mov	fp, r0
   2bf46:	2800      	cmp	r0, #0
   2bf48:	d0be      	beq.n	2bec8 <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
   2bf4a:	f110 0f0c 	cmn.w	r0, #12
   2bf4e:	f47f af42 	bne.w	2bdd6 <bt_le_adv_start_legacy+0x36>
   2bf52:	2e00      	cmp	r6, #0
   2bf54:	f47f af3f 	bne.w	2bdd6 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   2bf58:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   2bf5a:	0798      	lsls	r0, r3, #30
   2bf5c:	f53f af3b 	bmi.w	2bdd6 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2bf60:	6862      	ldr	r2, [r4, #4]
   2bf62:	f082 0202 	eor.w	r2, r2, #2
   2bf66:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   2bf6a:	f00b 0201 	and.w	r2, fp, #1
   2bf6e:	210d      	movs	r1, #13
   2bf70:	4638      	mov	r0, r7
   2bf72:	f019 fd5d 	bl	45a30 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   2bf76:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2bf7a:	425a      	negs	r2, r3
   2bf7c:	415a      	adcs	r2, r3
   2bf7e:	2107      	movs	r1, #7
   2bf80:	4638      	mov	r0, r7
   2bf82:	f019 fd55 	bl	45a30 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   2bf86:	f1a9 0102 	sub.w	r1, r9, #2
   2bf8a:	424a      	negs	r2, r1
   2bf8c:	414a      	adcs	r2, r1
   2bf8e:	4638      	mov	r0, r7
   2bf90:	2108      	movs	r1, #8
   2bf92:	f019 fd4d 	bl	45a30 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   2bf96:	6862      	ldr	r2, [r4, #4]
   2bf98:	2109      	movs	r1, #9
   2bf9a:	f002 0201 	and.w	r2, r2, #1
   2bf9e:	4638      	mov	r0, r7
   2bfa0:	f019 fd46 	bl	45a30 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   2bfa4:	4642      	mov	r2, r8
   2bfa6:	210a      	movs	r1, #10
   2bfa8:	4638      	mov	r0, r7
   2bfaa:	f019 fd41 	bl	45a30 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   2bfae:	6862      	ldr	r2, [r4, #4]
   2bfb0:	210c      	movs	r1, #12
   2bfb2:	f3c2 0280 	ubfx	r2, r2, #2, #1
   2bfb6:	4638      	mov	r0, r7
   2bfb8:	f019 fd3a 	bl	45a30 <atomic_set_bit_to>
	return 0;
   2bfbc:	f04f 0b00 	mov.w	fp, #0
   2bfc0:	e709      	b.n	2bdd6 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2bfc2:	b115      	cbz	r5, 2bfca <bt_le_adv_start_legacy+0x22a>
		bt_conn_unref(conn);
   2bfc4:	4628      	mov	r0, r5
   2bfc6:	f019 fec7 	bl	45d58 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2bfca:	2e00      	cmp	r6, #0
   2bfcc:	d1cd      	bne.n	2bf6a <bt_le_adv_start_legacy+0x1ca>
   2bfce:	e7c7      	b.n	2bf60 <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
   2bfd0:	f06f 0b0a 	mvn.w	fp, #10
   2bfd4:	e6ff      	b.n	2bdd6 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   2bfd6:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   2bfda:	e6fc      	b.n	2bdd6 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   2bfdc:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   2bfe0:	e6f9      	b.n	2bdd6 <bt_le_adv_start_legacy+0x36>
   2bfe2:	4683      	mov	fp, r0
   2bfe4:	e6f7      	b.n	2bdd6 <bt_le_adv_start_legacy+0x36>
   2bfe6:	bf00      	nop
   2bfe8:	200000cc 	.word	0x200000cc
   2bfec:	20000000 	.word	0x20000000

0002bff0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   2bff0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2bff2:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2bff4:	9a06      	ldr	r2, [sp, #24]
{
   2bff6:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2bff8:	e9cd 3200 	strd	r3, r2, [sp]
   2bffc:	462b      	mov	r3, r5
   2bffe:	460a      	mov	r2, r1
   2c000:	4601      	mov	r1, r0
   2c002:	4811      	ldr	r0, [pc, #68]	; (2c048 <bt_le_adv_start+0x58>)
   2c004:	f7ff fecc 	bl	2bda0 <bt_le_adv_start_legacy>
   2c008:	4621      	mov	r1, r4
   2c00a:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   2c00c:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   2c00e:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   2c012:	429d      	cmp	r5, r3
   2c014:	d102      	bne.n	2c01c <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   2c016:	4630      	mov	r0, r6
   2c018:	b002      	add	sp, #8
   2c01a:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   2c01c:	880a      	ldrh	r2, [r1, #0]
   2c01e:	4282      	cmp	r2, r0
   2c020:	d104      	bne.n	2c02c <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   2c022:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2c024:	b112      	cbz	r2, 2c02c <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2c026:	7812      	ldrb	r2, [r2, #0]
   2c028:	07d2      	lsls	r2, r2, #31
   2c02a:	d402      	bmi.n	2c032 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   2c02c:	3301      	adds	r3, #1
   2c02e:	3108      	adds	r1, #8
   2c030:	e7ef      	b.n	2c012 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   2c032:	4906      	ldr	r1, [pc, #24]	; (2c04c <bt_le_adv_start+0x5c>)
   2c034:	4806      	ldr	r0, [pc, #24]	; (2c050 <bt_le_adv_start+0x60>)
   2c036:	f01c fdf9 	bl	48c2c <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   2c03a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2c03e:	2300      	movs	r3, #0
   2c040:	4803      	ldr	r0, [pc, #12]	; (2c050 <bt_le_adv_start+0x60>)
   2c042:	f015 fce7 	bl	41a14 <k_work_reschedule>
   2c046:	e7e6      	b.n	2c016 <bt_le_adv_start+0x26>
   2c048:	20000018 	.word	0x20000018
   2c04c:	00045bc1 	.word	0x00045bc1
   2c050:	20000030 	.word	0x20000030

0002c054 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   2c054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   2c056:	4822      	ldr	r0, [pc, #136]	; (2c0e0 <bt_le_adv_stop+0x8c>)
   2c058:	f019 fdaf 	bl	45bba <bt_le_lim_adv_cancel_timeout>
   2c05c:	4821      	ldr	r0, [pc, #132]	; (2c0e4 <bt_le_adv_stop+0x90>)
   2c05e:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2c062:	f019 fc75 	bl	45950 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c066:	481f      	ldr	r0, [pc, #124]	; (2c0e4 <bt_le_adv_stop+0x90>)
   2c068:	f019 fc6c 	bl	45944 <atomic_get>
   2c06c:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2c06e:	065a      	lsls	r2, r3, #25
   2c070:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2c074:	d531      	bpl.n	2c0da <bt_le_adv_stop+0x86>
   2c076:	481b      	ldr	r0, [pc, #108]	; (2c0e4 <bt_le_adv_stop+0x90>)
   2c078:	f019 fc64 	bl	45944 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c07c:	0583      	lsls	r3, r0, #22
   2c07e:	d521      	bpl.n	2c0c4 <bt_le_adv_stop+0x70>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2c080:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2c082:	4819      	ldr	r0, [pc, #100]	; (2c0e8 <bt_le_adv_stop+0x94>)
   2c084:	9300      	str	r3, [sp, #0]
   2c086:	2207      	movs	r2, #7
   2c088:	4669      	mov	r1, sp
   2c08a:	f8cd 3003 	str.w	r3, [sp, #3]
   2c08e:	f018 fea8 	bl	44de2 <memcmp>
   2c092:	4b16      	ldr	r3, [pc, #88]	; (2c0ec <bt_le_adv_stop+0x98>)
   2c094:	b9e8      	cbnz	r0, 2c0d2 <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   2c096:	4a16      	ldr	r2, [pc, #88]	; (2c0f0 <bt_le_adv_stop+0x9c>)
   2c098:	8891      	ldrh	r1, [r2, #4]
   2c09a:	6810      	ldr	r0, [r2, #0]
   2c09c:	7992      	ldrb	r2, [r2, #6]
   2c09e:	f8ad 100c 	strh.w	r1, [sp, #12]
   2c0a2:	f88d 200e 	strb.w	r2, [sp, #14]
   2c0a6:	9002      	str	r0, [sp, #8]
   2c0a8:	2204      	movs	r2, #4
   2c0aa:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2c0ac:	7e18      	ldrb	r0, [r3, #24]
   2c0ae:	f000 fcd1 	bl	2ca54 <bt_conn_lookup_state_le>
   2c0b2:	4604      	mov	r4, r0
	if (conn) {
   2c0b4:	b130      	cbz	r0, 2c0c4 <bt_le_adv_stop+0x70>
		conn->err = status;
   2c0b6:	2100      	movs	r1, #0
   2c0b8:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c0ba:	f000 fad1 	bl	2c660 <bt_conn_set_state>
		bt_conn_unref(conn);
   2c0be:	4620      	mov	r0, r4
   2c0c0:	f019 fe4a 	bl	45d58 <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   2c0c4:	4806      	ldr	r0, [pc, #24]	; (2c0e0 <bt_le_adv_stop+0x8c>)
   2c0c6:	2100      	movs	r1, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   2c0c8:	b004      	add	sp, #16
   2c0ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   2c0ce:	f019 bd4d 	b.w	45b6c <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2c0d2:	2205      	movs	r2, #5
   2c0d4:	f103 0121 	add.w	r1, r3, #33	; 0x21
   2c0d8:	e7e8      	b.n	2c0ac <bt_le_adv_stop+0x58>
}
   2c0da:	b004      	add	sp, #16
   2c0dc:	bd10      	pop	{r4, pc}
   2c0de:	bf00      	nop
   2c0e0:	20000018 	.word	0x20000018
   2c0e4:	20000028 	.word	0x20000028
   2c0e8:	20000021 	.word	0x20000021
   2c0ec:	20000000 	.word	0x20000000
   2c0f0:	000497db 	.word	0x000497db

0002c0f4 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   2c0f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c0f6:	481e      	ldr	r0, [pc, #120]	; (2c170 <bt_le_adv_resume+0x7c>)
   2c0f8:	4c1d      	ldr	r4, [pc, #116]	; (2c170 <bt_le_adv_resume+0x7c>)
   2c0fa:	f019 fc23 	bl	45944 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2c0fe:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   2c102:	d033      	beq.n	2c16c <bt_le_adv_resume+0x78>
   2c104:	4620      	mov	r0, r4
   2c106:	f019 fc1d 	bl	45944 <atomic_get>
   2c10a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c10c:	f3c0 1580 	ubfx	r5, r0, #6, #1
   2c110:	d42c      	bmi.n	2c16c <bt_le_adv_resume+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c112:	4620      	mov	r0, r4
   2c114:	f019 fc16 	bl	45944 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2c118:	0583      	lsls	r3, r0, #22
   2c11a:	d527      	bpl.n	2c16c <bt_le_adv_resume+0x78>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   2c11c:	a901      	add	r1, sp, #4
   2c11e:	f1a4 0010 	sub.w	r0, r4, #16
   2c122:	f7ff fdef 	bl	2bd04 <le_adv_start_add_conn>
	if (err) {
   2c126:	bb08      	cbnz	r0, 2c16c <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2c128:	2101      	movs	r1, #1
   2c12a:	f1a4 0010 	sub.w	r0, r4, #16
   2c12e:	f019 fd1d 	bl	45b6c <bt_le_adv_set_enable_legacy>

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c132:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   2c134:	b150      	cbz	r0, 2c14c <bt_le_adv_resume+0x58>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2c136:	4629      	mov	r1, r5
   2c138:	4630      	mov	r0, r6
   2c13a:	f000 fa91 	bl	2c660 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c13e:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2c142:	4620      	mov	r0, r4
   2c144:	f019 fc04 	bl	45950 <atomic_and>
	return (old & mask) != 0;
   2c148:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   2c14c:	4630      	mov	r0, r6
   2c14e:	f019 fe03 	bl	45d58 <bt_conn_unref>
	if (persist_paused) {
   2c152:	b15d      	cbz	r5, 2c16c <bt_le_adv_resume+0x78>
   2c154:	f3bf 8f5b 	dmb	ish
   2c158:	e854 3f00 	ldrex	r3, [r4]
   2c15c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2c160:	e844 3200 	strex	r2, r3, [r4]
   2c164:	2a00      	cmp	r2, #0
   2c166:	d1f7      	bne.n	2c158 <bt_le_adv_resume+0x64>
   2c168:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   2c16c:	b002      	add	sp, #8
   2c16e:	bd70      	pop	{r4, r5, r6, pc}
   2c170:	20000028 	.word	0x20000028

0002c174 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   2c174:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   2c176:	4904      	ldr	r1, [pc, #16]	; (2c188 <bt_pub_key_is_debug+0x14>)
   2c178:	2240      	movs	r2, #64	; 0x40
   2c17a:	f018 fe32 	bl	44de2 <memcmp>
}
   2c17e:	fab0 f080 	clz	r0, r0
   2c182:	0940      	lsrs	r0, r0, #5
   2c184:	bd08      	pop	{r3, pc}
   2c186:	bf00      	nop
   2c188:	0004b3f7 	.word	0x0004b3f7

0002c18c <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   2c18c:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   2c18e:	4b31      	ldr	r3, [pc, #196]	; (2c254 <bt_pub_key_gen+0xc8>)
   2c190:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2c194:	f003 0306 	and.w	r3, r3, #6
   2c198:	2b06      	cmp	r3, #6
   2c19a:	d152      	bne.n	2c242 <bt_pub_key_gen+0xb6>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   2c19c:	2800      	cmp	r0, #0
   2c19e:	d053      	beq.n	2c248 <bt_pub_key_gen+0xbc>
	return list->head;
   2c1a0:	4e2d      	ldr	r6, [pc, #180]	; (2c258 <bt_pub_key_gen+0xcc>)
   2c1a2:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c1a4:	b132      	cbz	r2, 2c1b4 <bt_pub_key_gen+0x28>
   2c1a6:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   2c1a8:	4298      	cmp	r0, r3
   2c1aa:	d050      	beq.n	2c24e <bt_pub_key_gen+0xc2>
	return node->next;
   2c1ac:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c1ae:	b10b      	cbz	r3, 2c1b4 <bt_pub_key_gen+0x28>
   2c1b0:	3b04      	subs	r3, #4
   2c1b2:	e7f9      	b.n	2c1a8 <bt_pub_key_gen+0x1c>
	parent->next = child;
   2c1b4:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   2c1b6:	6872      	ldr	r2, [r6, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   2c1b8:	1d03      	adds	r3, r0, #4
	list->head = node;
   2c1ba:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2c1bc:	b902      	cbnz	r2, 2c1c0 <bt_pub_key_gen+0x34>
	list->tail = node;
   2c1be:	6073      	str	r3, [r6, #4]
   2c1c0:	4c26      	ldr	r4, [pc, #152]	; (2c25c <bt_pub_key_gen+0xd0>)
   2c1c2:	f3bf 8f5b 	dmb	ish
   2c1c6:	e854 2f00 	ldrex	r2, [r4]
   2c1ca:	f042 0310 	orr.w	r3, r2, #16
   2c1ce:	e844 3100 	strex	r1, r3, [r4]
   2c1d2:	2900      	cmp	r1, #0
   2c1d4:	d1f7      	bne.n	2c1c6 <bt_pub_key_gen+0x3a>
   2c1d6:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2c1da:	f012 0210 	ands.w	r2, r2, #16
   2c1de:	d002      	beq.n	2c1e6 <bt_pub_key_gen+0x5a>
		return 0;
   2c1e0:	2500      	movs	r5, #0
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   2c1e2:	4628      	mov	r0, r5
   2c1e4:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c1e6:	f3bf 8f5b 	dmb	ish
   2c1ea:	e854 3f00 	ldrex	r3, [r4]
   2c1ee:	f023 0308 	bic.w	r3, r3, #8
   2c1f2:	e844 3100 	strex	r1, r3, [r4]
   2c1f6:	2900      	cmp	r1, #0
   2c1f8:	d1f7      	bne.n	2c1ea <bt_pub_key_gen+0x5e>
   2c1fa:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   2c1fe:	4611      	mov	r1, r2
   2c200:	f242 0025 	movw	r0, #8229	; 0x2025
   2c204:	f7fe ff14 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   2c208:	4605      	mov	r5, r0
   2c20a:	2800      	cmp	r0, #0
   2c20c:	d0e8      	beq.n	2c1e0 <bt_pub_key_gen+0x54>
   2c20e:	f3bf 8f5b 	dmb	ish
   2c212:	e854 3f00 	ldrex	r3, [r4]
   2c216:	f023 0310 	bic.w	r3, r3, #16
   2c21a:	e844 3200 	strex	r2, r3, [r4]
   2c21e:	2a00      	cmp	r2, #0
   2c220:	d1f7      	bne.n	2c212 <bt_pub_key_gen+0x86>
   2c222:	f3bf 8f5b 	dmb	ish
	return list->head;
   2c226:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c228:	b13c      	cbz	r4, 2c23a <bt_pub_key_gen+0xae>
			if (cb->func) {
   2c22a:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c22e:	3c04      	subs	r4, #4
			if (cb->func) {
   2c230:	b10b      	cbz	r3, 2c236 <bt_pub_key_gen+0xaa>
				cb->func(NULL);
   2c232:	2000      	movs	r0, #0
   2c234:	4798      	blx	r3
	return node->next;
   2c236:	6864      	ldr	r4, [r4, #4]
   2c238:	e7f6      	b.n	2c228 <bt_pub_key_gen+0x9c>
	list->head = NULL;
   2c23a:	2300      	movs	r3, #0
	list->tail = NULL;
   2c23c:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   2c240:	e7cf      	b.n	2c1e2 <bt_pub_key_gen+0x56>
		return -ENOTSUP;
   2c242:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2c246:	e7cc      	b.n	2c1e2 <bt_pub_key_gen+0x56>
		return -EINVAL;
   2c248:	f06f 0515 	mvn.w	r5, #21
   2c24c:	e7c9      	b.n	2c1e2 <bt_pub_key_gen+0x56>
			return -EALREADY;
   2c24e:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2c252:	e7c6      	b.n	2c1e2 <bt_pub_key_gen+0x56>
   2c254:	20000000 	.word	0x20000000
   2c258:	20001c6c 	.word	0x20001c6c
   2c25c:	200000cc 	.word	0x200000cc

0002c260 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c260:	4b05      	ldr	r3, [pc, #20]	; (2c278 <bt_pub_key_get+0x18>)
   2c262:	f3bf 8f5b 	dmb	ish
   2c266:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   2c268:	4804      	ldr	r0, [pc, #16]	; (2c27c <bt_pub_key_get+0x1c>)
   2c26a:	f3bf 8f5b 	dmb	ish
		return pub_key;
   2c26e:	f013 0f08 	tst.w	r3, #8
}
   2c272:	bf08      	it	eq
   2c274:	2000      	moveq	r0, #0
   2c276:	4770      	bx	lr
   2c278:	200000cc 	.word	0x200000cc
   2c27c:	20003c26 	.word	0x20003c26

0002c280 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   2c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   2c282:	4d1f      	ldr	r5, [pc, #124]	; (2c300 <bt_dh_key_gen+0x80>)
   2c284:	682b      	ldr	r3, [r5, #0]
   2c286:	428b      	cmp	r3, r1
{
   2c288:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   2c28a:	d032      	beq.n	2c2f2 <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2c28c:	b113      	cbz	r3, 2c294 <bt_dh_key_gen+0x14>
		return -EBUSY;
   2c28e:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   2c292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c294:	4b1b      	ldr	r3, [pc, #108]	; (2c304 <bt_dh_key_gen+0x84>)
   2c296:	f3bf 8f5b 	dmb	ish
   2c29a:	681a      	ldr	r2, [r3, #0]
   2c29c:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2c2a0:	f3c2 1700 	ubfx	r7, r2, #4, #1
   2c2a4:	06d2      	lsls	r2, r2, #27
   2c2a6:	d4f2      	bmi.n	2c28e <bt_dh_key_gen+0xe>
   2c2a8:	f3bf 8f5b 	dmb	ish
   2c2ac:	681b      	ldr	r3, [r3, #0]
   2c2ae:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   2c2b2:	071b      	lsls	r3, r3, #28
   2c2b4:	d520      	bpl.n	2c2f8 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   2c2b6:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   2c2b8:	f242 0026 	movw	r0, #8230	; 0x2026
   2c2bc:	2140      	movs	r1, #64	; 0x40
   2c2be:	f7fe fe5b 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   2c2c2:	4604      	mov	r4, r0
   2c2c4:	b190      	cbz	r0, 2c2ec <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   2c2c6:	2140      	movs	r1, #64	; 0x40
   2c2c8:	3008      	adds	r0, #8
   2c2ca:	f01b fce4 	bl	47c96 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   2c2ce:	2240      	movs	r2, #64	; 0x40
   2c2d0:	4631      	mov	r1, r6
   2c2d2:	f018 fd96 	bl	44e02 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   2c2d6:	463a      	mov	r2, r7
   2c2d8:	4621      	mov	r1, r4
   2c2da:	f242 0026 	movw	r0, #8230	; 0x2026
   2c2de:	f7fe fea7 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   2c2e2:	2800      	cmp	r0, #0
   2c2e4:	d0d5      	beq.n	2c292 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   2c2e6:	2300      	movs	r3, #0
   2c2e8:	602b      	str	r3, [r5, #0]
		return err;
   2c2ea:	e7d2      	b.n	2c292 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   2c2ec:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c2f0:	e7f9      	b.n	2c2e6 <bt_dh_key_gen+0x66>
		return -EALREADY;
   2c2f2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2c2f6:	e7cc      	b.n	2c292 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   2c2f8:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   2c2fc:	e7c9      	b.n	2c292 <bt_dh_key_gen+0x12>
   2c2fe:	bf00      	nop
   2c300:	20001c68 	.word	0x20001c68
   2c304:	200000cc 	.word	0x200000cc

0002c308 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   2c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c30a:	4c1b      	ldr	r4, [pc, #108]	; (2c378 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   2c30c:	6886      	ldr	r6, [r0, #8]
   2c30e:	f3bf 8f5b 	dmb	ish
   2c312:	e854 3f00 	ldrex	r3, [r4]
   2c316:	f023 0310 	bic.w	r3, r3, #16
   2c31a:	e844 3200 	strex	r2, r3, [r4]
   2c31e:	2a00      	cmp	r2, #0
   2c320:	d1f7      	bne.n	2c312 <bt_hci_evt_le_pkey_complete+0xa>
   2c322:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   2c326:	7833      	ldrb	r3, [r6, #0]
   2c328:	b983      	cbnz	r3, 2c34c <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   2c32a:	4814      	ldr	r0, [pc, #80]	; (2c37c <bt_hci_evt_le_pkey_complete+0x74>)
   2c32c:	2240      	movs	r2, #64	; 0x40
   2c32e:	1c71      	adds	r1, r6, #1
   2c330:	f018 fd67 	bl	44e02 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c334:	f3bf 8f5b 	dmb	ish
   2c338:	e854 3f00 	ldrex	r3, [r4]
   2c33c:	f043 0308 	orr.w	r3, r3, #8
   2c340:	e844 3200 	strex	r2, r3, [r4]
   2c344:	2a00      	cmp	r2, #0
   2c346:	d1f7      	bne.n	2c338 <bt_hci_evt_le_pkey_complete+0x30>
   2c348:	f3bf 8f5b 	dmb	ish
	return list->head;
   2c34c:	4d0c      	ldr	r5, [pc, #48]	; (2c380 <bt_hci_evt_le_pkey_complete+0x78>)
   2c34e:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c350:	b16c      	cbz	r4, 2c36e <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   2c352:	4f0a      	ldr	r7, [pc, #40]	; (2c37c <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c354:	3c04      	subs	r4, #4
		if (cb->func) {
   2c356:	6823      	ldr	r3, [r4, #0]
   2c358:	b12b      	cbz	r3, 2c366 <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   2c35a:	7832      	ldrb	r2, [r6, #0]
   2c35c:	2a00      	cmp	r2, #0
   2c35e:	bf0c      	ite	eq
   2c360:	4638      	moveq	r0, r7
   2c362:	2000      	movne	r0, #0
   2c364:	4798      	blx	r3
	return node->next;
   2c366:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2c368:	b10c      	cbz	r4, 2c36e <bt_hci_evt_le_pkey_complete+0x66>
   2c36a:	3c04      	subs	r4, #4
   2c36c:	e7f3      	b.n	2c356 <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   2c36e:	2300      	movs	r3, #0
	list->tail = NULL;
   2c370:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   2c374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c376:	bf00      	nop
   2c378:	200000cc 	.word	0x200000cc
   2c37c:	20003c26 	.word	0x20003c26
   2c380:	20001c6c 	.word	0x20001c6c

0002c384 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   2c384:	4905      	ldr	r1, [pc, #20]	; (2c39c <bt_hci_evt_le_dhkey_complete+0x18>)
   2c386:	680b      	ldr	r3, [r1, #0]
   2c388:	b133      	cbz	r3, 2c398 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   2c38a:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   2c38c:	2000      	movs	r0, #0
   2c38e:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   2c390:	7811      	ldrb	r1, [r2, #0]
   2c392:	b901      	cbnz	r1, 2c396 <bt_hci_evt_le_dhkey_complete+0x12>
   2c394:	1c50      	adds	r0, r2, #1
   2c396:	4718      	bx	r3
	}
}
   2c398:	4770      	bx	lr
   2c39a:	bf00      	nop
   2c39c:	20001c68 	.word	0x20001c68

0002c3a0 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   2c3a0:	2300      	movs	r3, #0
	tx->user_data = NULL;
   2c3a2:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   2c3a6:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   2c3a8:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   2c3aa:	4801      	ldr	r0, [pc, #4]	; (2c3b0 <tx_free+0x10>)
   2c3ac:	f01c bb47 	b.w	48a3e <k_queue_append>
   2c3b0:	20000bf4 	.word	0x20000bf4

0002c3b4 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2c3b4:	4b0e      	ldr	r3, [pc, #56]	; (2c3f0 <notify_connected+0x3c>)
{
   2c3b6:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   2c3b8:	681d      	ldr	r5, [r3, #0]
{
   2c3ba:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   2c3bc:	b955      	cbnz	r5, 2c3d4 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c3be:	4d0d      	ldr	r5, [pc, #52]	; (2c3f4 <notify_connected+0x40>)
   2c3c0:	4e0d      	ldr	r6, [pc, #52]	; (2c3f8 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
   2c3c2:	7b21      	ldrb	r1, [r4, #12]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c3c4:	42b5      	cmp	r5, r6
   2c3c6:	d30c      	bcc.n	2c3e2 <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
   2c3c8:	b989      	cbnz	r1, 2c3ee <notify_connected+0x3a>
		bt_gatt_connected(conn);
   2c3ca:	4620      	mov	r0, r4
	}
}
   2c3cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
   2c3d0:	f002 b94c 	b.w	2e66c <bt_gatt_connected>
		if (cb->connected) {
   2c3d4:	682b      	ldr	r3, [r5, #0]
   2c3d6:	b113      	cbz	r3, 2c3de <notify_connected+0x2a>
			cb->connected(conn, conn->err);
   2c3d8:	7b21      	ldrb	r1, [r4, #12]
   2c3da:	4620      	mov	r0, r4
   2c3dc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2c3de:	69ed      	ldr	r5, [r5, #28]
   2c3e0:	e7ec      	b.n	2c3bc <notify_connected+0x8>
		if (cb->connected) {
   2c3e2:	682b      	ldr	r3, [r5, #0]
   2c3e4:	b10b      	cbz	r3, 2c3ea <notify_connected+0x36>
			cb->connected(conn, conn->err);
   2c3e6:	4620      	mov	r0, r4
   2c3e8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c3ea:	3520      	adds	r5, #32
   2c3ec:	e7e9      	b.n	2c3c2 <notify_connected+0xe>
}
   2c3ee:	bd70      	pop	{r4, r5, r6, pc}
   2c3f0:	20001c78 	.word	0x20001c78
   2c3f4:	00049680 	.word	0x00049680
   2c3f8:	00049680 	.word	0x00049680

0002c3fc <send_frag>:
{
   2c3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   2c400:	694d      	ldr	r5, [r1, #20]
{
   2c402:	4604      	mov	r4, r0
   2c404:	460e      	mov	r6, r1
   2c406:	4690      	mov	r8, r2
   2c408:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   2c40a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c40e:	483e      	ldr	r0, [pc, #248]	; (2c508 <send_frag+0x10c>)
   2c410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c414:	f015 f912 	bl	4163c <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   2c418:	7b63      	ldrb	r3, [r4, #13]
   2c41a:	2b07      	cmp	r3, #7
   2c41c:	d146      	bne.n	2c4ac <send_frag+0xb0>
	__asm__ volatile(
   2c41e:	f04f 0320 	mov.w	r3, #32
   2c422:	f3ef 8211 	mrs	r2, BASEPRI
   2c426:	f383 8812 	msr	BASEPRI_MAX, r3
   2c42a:	f3bf 8f6f 	isb	sy
	if (tx) {
   2c42e:	69a3      	ldr	r3, [r4, #24]
   2c430:	2d00      	cmp	r5, #0
   2c432:	d04d      	beq.n	2c4d0 <send_frag+0xd4>
	parent->next = child;
   2c434:	2100      	movs	r1, #0
   2c436:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   2c438:	2b00      	cmp	r3, #0
   2c43a:	d146      	bne.n	2c4ca <send_frag+0xce>
	list->head = node;
   2c43c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   2c440:	f382 8811 	msr	BASEPRI, r2
   2c444:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   2c448:	2104      	movs	r1, #4
   2c44a:	f106 0008 	add.w	r0, r6, #8
   2c44e:	f01b fc39 	bl	47cc4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2c452:	8823      	ldrh	r3, [r4, #0]
   2c454:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   2c458:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c45c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2c45e:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2c462:	3b04      	subs	r3, #4
   2c464:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2c466:	2302      	movs	r3, #2
   2c468:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   2c46a:	4630      	mov	r0, r6
   2c46c:	f019 f964 	bl	45738 <bt_send>
	if (err) {
   2c470:	2800      	cmp	r0, #0
   2c472:	d047      	beq.n	2c504 <send_frag+0x108>
	__asm__ volatile(
   2c474:	f04f 0320 	mov.w	r3, #32
   2c478:	f3ef 8011 	mrs	r0, BASEPRI
   2c47c:	f383 8812 	msr	BASEPRI_MAX, r3
   2c480:	f3bf 8f6f 	isb	sy
		if (tx) {
   2c484:	2d00      	cmp	r5, #0
   2c486:	d037      	beq.n	2c4f8 <send_frag+0xfc>
	return list->head;
   2c488:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c48a:	2200      	movs	r2, #0
   2c48c:	b153      	cbz	r3, 2c4a4 <send_frag+0xa8>
   2c48e:	429d      	cmp	r5, r3
   2c490:	d12f      	bne.n	2c4f2 <send_frag+0xf6>
	return node->next;
   2c492:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   2c494:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   2c496:	bb3a      	cbnz	r2, 2c4e8 <send_frag+0xec>
   2c498:	42a9      	cmp	r1, r5
	list->head = node;
   2c49a:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   2c49c:	d100      	bne.n	2c4a0 <send_frag+0xa4>
	list->tail = node;
   2c49e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   2c4a0:	2300      	movs	r3, #0
   2c4a2:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   2c4a4:	f380 8811 	msr	BASEPRI, r0
   2c4a8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2c4ac:	4816      	ldr	r0, [pc, #88]	; (2c508 <send_frag+0x10c>)
   2c4ae:	f015 f89f 	bl	415f0 <z_impl_k_sem_give>
	if (tx) {
   2c4b2:	b115      	cbz	r5, 2c4ba <send_frag+0xbe>
		tx_free(tx);
   2c4b4:	4628      	mov	r0, r5
   2c4b6:	f7ff ff73 	bl	2c3a0 <tx_free>
	if (always_consume) {
   2c4ba:	b11f      	cbz	r7, 2c4c4 <send_frag+0xc8>
		net_buf_unref(buf);
   2c4bc:	4630      	mov	r0, r6
   2c4be:	f010 fe3d 	bl	3d13c <net_buf_unref>
	return false;
   2c4c2:	2700      	movs	r7, #0
}
   2c4c4:	4638      	mov	r0, r7
   2c4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c4ca:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2c4cc:	61a5      	str	r5, [r4, #24]
}
   2c4ce:	e7b7      	b.n	2c440 <send_frag+0x44>
		if (tail_tx) {
   2c4d0:	b133      	cbz	r3, 2c4e0 <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
   2c4d2:	f103 090c 	add.w	r9, r3, #12
   2c4d6:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   2c4d8:	3301      	adds	r3, #1
   2c4da:	f8c9 3000 	str.w	r3, [r9]
   2c4de:	e7af      	b.n	2c440 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   2c4e0:	69e3      	ldr	r3, [r4, #28]
   2c4e2:	f104 091c 	add.w	r9, r4, #28
   2c4e6:	e7f7      	b.n	2c4d8 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
   2c4e8:	42a9      	cmp	r1, r5
	parent->next = child;
   2c4ea:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2c4ec:	bf08      	it	eq
   2c4ee:	61a2      	streq	r2, [r4, #24]
}
   2c4f0:	e7d6      	b.n	2c4a0 <send_frag+0xa4>
	return node->next;
   2c4f2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c4f4:	681b      	ldr	r3, [r3, #0]
   2c4f6:	e7c9      	b.n	2c48c <send_frag+0x90>
			(*pending_no_cb)--;
   2c4f8:	f8d9 3000 	ldr.w	r3, [r9]
   2c4fc:	3b01      	subs	r3, #1
   2c4fe:	f8c9 3000 	str.w	r3, [r9]
   2c502:	e7cf      	b.n	2c4a4 <send_frag+0xa8>
	return true;
   2c504:	2701      	movs	r7, #1
   2c506:	e7dd      	b.n	2c4c4 <send_frag+0xc8>
   2c508:	20000100 	.word	0x20000100

0002c50c <bt_conn_get_pkts>:
}
   2c50c:	4800      	ldr	r0, [pc, #0]	; (2c510 <bt_conn_get_pkts+0x4>)
   2c50e:	4770      	bx	lr
   2c510:	20000100 	.word	0x20000100

0002c514 <bt_conn_new>:
{
   2c514:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   2c516:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2c518:	2501      	movs	r5, #1
   2c51a:	428b      	cmp	r3, r1
   2c51c:	d102      	bne.n	2c524 <bt_conn_new+0x10>
		return NULL;
   2c51e:	2400      	movs	r4, #0
}
   2c520:	4620      	mov	r0, r4
   2c522:	bd38      	pop	{r3, r4, r5, pc}
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2c524:	4604      	mov	r4, r0
   2c526:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   2c52a:	f3bf 8f5b 	dmb	ish
   2c52e:	e852 0f00 	ldrex	r0, [r2]
   2c532:	2800      	cmp	r0, #0
   2c534:	d104      	bne.n	2c540 <bt_conn_new+0x2c>
   2c536:	e842 5c00 	strex	ip, r5, [r2]
   2c53a:	f1bc 0f00 	cmp.w	ip, #0
   2c53e:	d1f6      	bne.n	2c52e <bt_conn_new+0x1a>
   2c540:	f3bf 8f5b 	dmb	ish
   2c544:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   2c548:	d001      	beq.n	2c54e <bt_conn_new+0x3a>
	for (i = 0; i < size; i++) {
   2c54a:	3301      	adds	r3, #1
   2c54c:	e7e5      	b.n	2c51a <bt_conn_new+0x6>
	if (!conn) {
   2c54e:	2c00      	cmp	r4, #0
   2c550:	d0e6      	beq.n	2c520 <bt_conn_new+0xc>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   2c552:	22bc      	movs	r2, #188	; 0xbc
   2c554:	2100      	movs	r1, #0
   2c556:	4620      	mov	r0, r4
   2c558:	f018 fc5e 	bl	44e18 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   2c55c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2c560:	4904      	ldr	r1, [pc, #16]	; (2c574 <bt_conn_new+0x60>)
   2c562:	f01c fb63 	bl	48c2c <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   2c566:	4904      	ldr	r1, [pc, #16]	; (2c578 <bt_conn_new+0x64>)
   2c568:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2c56c:	f01c fb38 	bl	48be0 <k_work_init>
	return conn;
   2c570:	e7d6      	b.n	2c520 <bt_conn_new+0xc>
   2c572:	bf00      	nop
   2c574:	0002cb01 	.word	0x0002cb01
   2c578:	00045c35 	.word	0x00045c35

0002c57c <bt_conn_send_cb>:
{
   2c57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c57e:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   2c580:	7b43      	ldrb	r3, [r0, #13]
   2c582:	2b07      	cmp	r3, #7
{
   2c584:	4604      	mov	r4, r0
   2c586:	460e      	mov	r6, r1
   2c588:	4615      	mov	r5, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2c58a:	d114      	bne.n	2c5b6 <bt_conn_send_cb+0x3a>
	if (cb) {
   2c58c:	b312      	cbz	r2, 2c5d4 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   2c58e:	f015 fd2b 	bl	41fe8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   2c592:	4b13      	ldr	r3, [pc, #76]	; (2c5e0 <bt_conn_send_cb+0x64>)
   2c594:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   2c596:	4813      	ldr	r0, [pc, #76]	; (2c5e4 <bt_conn_send_cb+0x68>)
   2c598:	bf07      	ittee	eq
   2c59a:	2200      	moveq	r2, #0
   2c59c:	2300      	moveq	r3, #0
   2c59e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2c5a2:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2c5a6:	f014 ffef 	bl	41588 <z_impl_k_queue_get>
		if (!tx) {
   2c5aa:	b1a8      	cbz	r0, 2c5d8 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   2c5ac:	7b63      	ldrb	r3, [r4, #13]
   2c5ae:	2b07      	cmp	r3, #7
   2c5b0:	d004      	beq.n	2c5bc <bt_conn_send_cb+0x40>
			tx_free(tx);
   2c5b2:	f7ff fef5 	bl	2c3a0 <tx_free>
		return -ENOTCONN;
   2c5b6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2c5ba:	e00a      	b.n	2c5d2 <bt_conn_send_cb+0x56>
		tx->user_data = user_data;
   2c5bc:	e9c0 5701 	strd	r5, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   2c5c0:	2300      	movs	r3, #0
   2c5c2:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   2c5c4:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   2c5c6:	4631      	mov	r1, r6
   2c5c8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2c5cc:	f01b fb24 	bl	47c18 <net_buf_put>
	return 0;
   2c5d0:	2000      	movs	r0, #0
}
   2c5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c5d4:	4610      	mov	r0, r2
   2c5d6:	e7f5      	b.n	2c5c4 <bt_conn_send_cb+0x48>
			return -ENOBUFS;
   2c5d8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c5dc:	e7f9      	b.n	2c5d2 <bt_conn_send_cb+0x56>
   2c5de:	bf00      	nop
   2c5e0:	20001910 	.word	0x20001910
   2c5e4:	20000bf4 	.word	0x20000bf4

0002c5e8 <bt_conn_prepare_events>:
{
   2c5e8:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
   2c5ea:	4b16      	ldr	r3, [pc, #88]	; (2c644 <bt_conn_prepare_events+0x5c>)
	if (!atomic_get(&conn->ref)) {
   2c5ec:	4c16      	ldr	r4, [pc, #88]	; (2c648 <bt_conn_prepare_events+0x60>)
	conn_change.signaled = 0U;
   2c5ee:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2c5f0:	2101      	movs	r1, #1
{
   2c5f2:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
   2c5f4:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2c5f6:	f01c fe36 	bl	49266 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   2c5fa:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2c5fe:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
   2c602:	f019 faee 	bl	45be2 <atomic_get>
   2c606:	b908      	cbnz	r0, 2c60c <bt_conn_prepare_events+0x24>
		conn_cleanup(conn);
   2c608:	2001      	movs	r0, #1
}
   2c60a:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   2c60c:	7b63      	ldrb	r3, [r4, #13]
   2c60e:	b953      	cbnz	r3, 2c626 <bt_conn_prepare_events+0x3e>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c610:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2c614:	1d20      	adds	r0, r4, #4
   2c616:	f019 fad5 	bl	45bc4 <atomic_and>
   2c61a:	0643      	lsls	r3, r0, #25
   2c61c:	d503      	bpl.n	2c626 <bt_conn_prepare_events+0x3e>
		conn_cleanup(conn);
   2c61e:	4620      	mov	r0, r4
   2c620:	f019 fb14 	bl	45c4c <conn_cleanup>
   2c624:	e7f0      	b.n	2c608 <bt_conn_prepare_events+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
   2c626:	7b63      	ldrb	r3, [r4, #13]
   2c628:	2b07      	cmp	r3, #7
   2c62a:	d1ed      	bne.n	2c608 <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[0],
   2c62c:	4b07      	ldr	r3, [pc, #28]	; (2c64c <bt_conn_prepare_events+0x64>)
   2c62e:	4630      	mov	r0, r6
   2c630:	2200      	movs	r2, #0
   2c632:	2104      	movs	r1, #4
   2c634:	f01c fe17 	bl	49266 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2c638:	2301      	movs	r3, #1
   2c63a:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
   2c63e:	2002      	movs	r0, #2
	return ev_count;
   2c640:	e7e3      	b.n	2c60a <bt_conn_prepare_events+0x22>
   2c642:	bf00      	nop
   2c644:	200003a0 	.word	0x200003a0
   2c648:	20000f78 	.word	0x20000f78
   2c64c:	20000fb0 	.word	0x20000fb0

0002c650 <bt_conn_lookup_handle>:
{
   2c650:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   2c652:	2101      	movs	r1, #1
   2c654:	4801      	ldr	r0, [pc, #4]	; (2c65c <bt_conn_lookup_handle+0xc>)
   2c656:	f019 bb98 	b.w	45d8a <conn_lookup_handle>
   2c65a:	bf00      	nop
   2c65c:	20000f78 	.word	0x20000f78

0002c660 <bt_conn_set_state>:
{
   2c660:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   2c662:	7b45      	ldrb	r5, [r0, #13]
   2c664:	428d      	cmp	r5, r1
{
   2c666:	4604      	mov	r4, r0
	if (conn->state == state) {
   2c668:	f000 809d 	beq.w	2c7a6 <bt_conn_set_state+0x146>
	conn->state = state;
   2c66c:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   2c66e:	b925      	cbnz	r5, 2c67a <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   2c670:	7883      	ldrb	r3, [r0, #2]
   2c672:	2b08      	cmp	r3, #8
   2c674:	d001      	beq.n	2c67a <bt_conn_set_state+0x1a>
			bt_conn_ref(conn);
   2c676:	f019 fb54 	bl	45d22 <bt_conn_ref>
	switch (conn->state) {
   2c67a:	7b63      	ldrb	r3, [r4, #13]
   2c67c:	2b01      	cmp	r3, #1
   2c67e:	d116      	bne.n	2c6ae <bt_conn_set_state+0x4e>
	z_impl_k_sem_give(sem);
   2c680:	4d49      	ldr	r5, [pc, #292]	; (2c7a8 <bt_conn_set_state+0x148>)
		tx->pending_no_cb = 0U;
   2c682:	2600      	movs	r6, #0
	__asm__ volatile(
   2c684:	f04f 0320 	mov.w	r3, #32
   2c688:	f3ef 8211 	mrs	r2, BASEPRI
   2c68c:	f383 8812 	msr	BASEPRI_MAX, r3
   2c690:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2c694:	69e3      	ldr	r3, [r4, #28]
   2c696:	2b00      	cmp	r3, #0
   2c698:	d066      	beq.n	2c768 <bt_conn_set_state+0x108>
			conn->pending_no_cb--;
   2c69a:	3b01      	subs	r3, #1
   2c69c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   2c69e:	f382 8811 	msr	BASEPRI, r2
   2c6a2:	f3bf 8f6f 	isb	sy
   2c6a6:	4628      	mov	r0, r5
   2c6a8:	f014 ffa2 	bl	415f0 <z_impl_k_sem_give>
}
   2c6ac:	e7ea      	b.n	2c684 <bt_conn_set_state+0x24>
	switch (conn->state) {
   2c6ae:	2b07      	cmp	r3, #7
   2c6b0:	d009      	beq.n	2c6c6 <bt_conn_set_state+0x66>
   2c6b2:	2b00      	cmp	r3, #0
   2c6b4:	d177      	bne.n	2c7a6 <bt_conn_set_state+0x146>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2c6b6:	78a3      	ldrb	r3, [r4, #2]
   2c6b8:	2b04      	cmp	r3, #4
   2c6ba:	d11e      	bne.n	2c6fa <bt_conn_set_state+0x9a>
			bt_conn_unref(conn);
   2c6bc:	4620      	mov	r0, r4
}
   2c6be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2c6c2:	f019 bb49 	b.w	45d58 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2c6c6:	78a3      	ldrb	r3, [r4, #2]
   2c6c8:	2b04      	cmp	r3, #4
   2c6ca:	d06c      	beq.n	2c7a6 <bt_conn_set_state+0x146>
	z_impl_k_queue_init(queue);
   2c6cc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2c6d0:	f01c f9a9 	bl	48a26 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   2c6d4:	4835      	ldr	r0, [pc, #212]	; (2c7ac <bt_conn_set_state+0x14c>)
   2c6d6:	2100      	movs	r1, #0
   2c6d8:	f015 ff40 	bl	4255c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   2c6dc:	2300      	movs	r3, #0
	list->tail = NULL;
   2c6de:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2c6e2:	78e3      	ldrb	r3, [r4, #3]
   2c6e4:	2b01      	cmp	r3, #1
   2c6e6:	d15e      	bne.n	2c7a6 <bt_conn_set_state+0x146>
			k_work_schedule(&conn->deferred_work,
   2c6e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2c6ec:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   2c6f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   2c6f4:	2300      	movs	r3, #0
   2c6f6:	f015 b959 	b.w	419ac <k_work_schedule>
		switch (old_state) {
   2c6fa:	3d01      	subs	r5, #1
   2c6fc:	2d05      	cmp	r5, #5
   2c6fe:	d852      	bhi.n	2c7a6 <bt_conn_set_state+0x146>
   2c700:	a301      	add	r3, pc, #4	; (adr r3, 2c708 <bt_conn_set_state+0xa8>)
   2c702:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   2c706:	bf00      	nop
   2c708:	0002c721 	.word	0x0002c721
   2c70c:	0002c75b 	.word	0x0002c75b
   2c710:	0002c6bd 	.word	0x0002c6bd
   2c714:	0002c6bd 	.word	0x0002c6bd
   2c718:	0002c75b 	.word	0x0002c75b
   2c71c:	0002c75b 	.word	0x0002c75b
			tx_notify(conn);
   2c720:	4620      	mov	r0, r4
   2c722:	f019 fa64 	bl	45bee <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   2c726:	78a3      	ldrb	r3, [r4, #2]
   2c728:	2b01      	cmp	r3, #1
   2c72a:	d103      	bne.n	2c734 <bt_conn_set_state+0xd4>
				k_work_cancel_delayable(&conn->deferred_work);
   2c72c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2c730:	f01c fa88 	bl	48c44 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c734:	f3bf 8f5b 	dmb	ish
   2c738:	3404      	adds	r4, #4
   2c73a:	e854 3f00 	ldrex	r3, [r4]
   2c73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2c742:	e844 3200 	strex	r2, r3, [r4]
   2c746:	2a00      	cmp	r2, #0
   2c748:	d1f7      	bne.n	2c73a <bt_conn_set_state+0xda>
   2c74a:	f3bf 8f5b 	dmb	ish
   2c74e:	4817      	ldr	r0, [pc, #92]	; (2c7ac <bt_conn_set_state+0x14c>)
}
   2c750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c754:	2100      	movs	r1, #0
   2c756:	f015 bf01 	b.w	4255c <z_impl_k_poll_signal_raise>
			if (conn->err) {
   2c75a:	7b23      	ldrb	r3, [r4, #12]
   2c75c:	2b00      	cmp	r3, #0
   2c75e:	d0ad      	beq.n	2c6bc <bt_conn_set_state+0x5c>
				notify_connected(conn);
   2c760:	4620      	mov	r0, r4
   2c762:	f7ff fe27 	bl	2c3b4 <notify_connected>
   2c766:	e7a9      	b.n	2c6bc <bt_conn_set_state+0x5c>
	return list->head;
   2c768:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2c76a:	b128      	cbz	r0, 2c778 <bt_conn_set_state+0x118>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c76c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   2c76e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   2c770:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c772:	4288      	cmp	r0, r1
	list->tail = node;
   2c774:	bf08      	it	eq
   2c776:	61a3      	streq	r3, [r4, #24]
   2c778:	f382 8811 	msr	BASEPRI, r2
   2c77c:	f3bf 8f6f 	isb	sy
		if (!node) {
   2c780:	b188      	cbz	r0, 2c7a6 <bt_conn_set_state+0x146>
	__asm__ volatile(
   2c782:	f04f 0220 	mov.w	r2, #32
   2c786:	f3ef 8311 	mrs	r3, BASEPRI
   2c78a:	f382 8812 	msr	BASEPRI_MAX, r2
   2c78e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2c792:	68c2      	ldr	r2, [r0, #12]
   2c794:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2c796:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   2c798:	f383 8811 	msr	BASEPRI, r3
   2c79c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   2c7a0:	f7ff fdfe 	bl	2c3a0 <tx_free>
   2c7a4:	e77f      	b.n	2c6a6 <bt_conn_set_state+0x46>
}
   2c7a6:	bd70      	pop	{r4, r5, r6, pc}
   2c7a8:	20000100 	.word	0x20000100
   2c7ac:	200003a0 	.word	0x200003a0

0002c7b0 <bt_conn_index>:
		index = conn - acl_conns;
   2c7b0:	4b03      	ldr	r3, [pc, #12]	; (2c7c0 <bt_conn_index+0x10>)
   2c7b2:	1ac0      	subs	r0, r0, r3
   2c7b4:	4b03      	ldr	r3, [pc, #12]	; (2c7c4 <bt_conn_index+0x14>)
   2c7b6:	1180      	asrs	r0, r0, #6
   2c7b8:	4358      	muls	r0, r3
}
   2c7ba:	b2c0      	uxtb	r0, r0
   2c7bc:	4770      	bx	lr
   2c7be:	bf00      	nop
   2c7c0:	20000f78 	.word	0x20000f78
   2c7c4:	aaaaaaab 	.word	0xaaaaaaab

0002c7c8 <bt_conn_create_pdu_timeout>:
{
   2c7c8:	b538      	push	{r3, r4, r5, lr}
   2c7ca:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   2c7cc:	4906      	ldr	r1, [pc, #24]	; (2c7e8 <bt_conn_create_pdu_timeout+0x20>)
   2c7ce:	2800      	cmp	r0, #0
   2c7d0:	bf08      	it	eq
   2c7d2:	4608      	moveq	r0, r1
   2c7d4:	f01b f9fd 	bl	47bd2 <net_buf_alloc_fixed>
	if (!buf) {
   2c7d8:	4604      	mov	r4, r0
   2c7da:	b118      	cbz	r0, 2c7e4 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   2c7dc:	1d29      	adds	r1, r5, #4
   2c7de:	3008      	adds	r0, #8
   2c7e0:	f01b fa16 	bl	47c10 <net_buf_simple_reserve>
}
   2c7e4:	4620      	mov	r0, r4
   2c7e6:	bd38      	pop	{r3, r4, r5, pc}
   2c7e8:	20000c3c 	.word	0x20000c3c

0002c7ec <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   2c7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2c7ee:	1d03      	adds	r3, r0, #4
{
   2c7f0:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c7f2:	4618      	mov	r0, r3
   2c7f4:	f019 f9f5 	bl	45be2 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2c7f8:	0582      	lsls	r2, r0, #22
   2c7fa:	d512      	bpl.n	2c822 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   2c7fc:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2c800:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   2c804:	4291      	cmp	r1, r2
   2c806:	d80c      	bhi.n	2c822 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   2c808:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   2c80c:	4291      	cmp	r1, r2
   2c80e:	d308      	bcc.n	2c822 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   2c810:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   2c814:	4291      	cmp	r1, r2
   2c816:	d104      	bne.n	2c822 <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c818:	f46f 7100 	mvn.w	r1, #512	; 0x200
   2c81c:	4618      	mov	r0, r3
   2c81e:	f019 f9d1 	bl	45bc4 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2c822:	4b10      	ldr	r3, [pc, #64]	; (2c864 <notify_le_param_updated+0x78>)
   2c824:	681d      	ldr	r5, [r3, #0]
   2c826:	b925      	cbnz	r5, 2c832 <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c828:	4d0f      	ldr	r5, [pc, #60]	; (2c868 <notify_le_param_updated+0x7c>)
   2c82a:	4f10      	ldr	r7, [pc, #64]	; (2c86c <notify_le_param_updated+0x80>)
   2c82c:	42bd      	cmp	r5, r7
   2c82e:	d30c      	bcc.n	2c84a <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   2c830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   2c832:	68ee      	ldr	r6, [r5, #12]
   2c834:	b13e      	cbz	r6, 2c846 <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
   2c836:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2c83a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2c83e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2c842:	4620      	mov	r0, r4
   2c844:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   2c846:	69ed      	ldr	r5, [r5, #28]
   2c848:	e7ed      	b.n	2c826 <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
   2c84a:	68ee      	ldr	r6, [r5, #12]
   2c84c:	b13e      	cbz	r6, 2c85e <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   2c84e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2c852:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2c856:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2c85a:	4620      	mov	r0, r4
   2c85c:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c85e:	3520      	adds	r5, #32
   2c860:	e7e4      	b.n	2c82c <notify_le_param_updated+0x40>
   2c862:	bf00      	nop
   2c864:	20001c78 	.word	0x20001c78
   2c868:	00049680 	.word	0x00049680
   2c86c:	00049680 	.word	0x00049680

0002c870 <notify_le_phy_updated>:
}
#endif

#if defined(CONFIG_BT_USER_PHY_UPDATE)
void notify_le_phy_updated(struct bt_conn *conn)
{
   2c870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2c872:	4b0d      	ldr	r3, [pc, #52]	; (2c8a8 <notify_le_phy_updated+0x38>)
   2c874:	681d      	ldr	r5, [r3, #0]
{
   2c876:	4604      	mov	r4, r0
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2c878:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
	for (cb = callback_list; cb; cb = cb->_next) {
   2c87c:	b935      	cbnz	r5, 2c88c <notify_le_phy_updated+0x1c>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c87e:	4d0b      	ldr	r5, [pc, #44]	; (2c8ac <notify_le_phy_updated+0x3c>)
   2c880:	4e0b      	ldr	r6, [pc, #44]	; (2c8b0 <notify_le_phy_updated+0x40>)
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2c882:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c886:	42b5      	cmp	r5, r6
   2c888:	d307      	bcc.n	2c89a <notify_le_phy_updated+0x2a>
		}
	}
}
   2c88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_phy_updated) {
   2c88c:	69ab      	ldr	r3, [r5, #24]
   2c88e:	b113      	cbz	r3, 2c896 <notify_le_phy_updated+0x26>
			cb->le_phy_updated(conn, &conn->le.phy);
   2c890:	4631      	mov	r1, r6
   2c892:	4620      	mov	r0, r4
   2c894:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2c896:	69ed      	ldr	r5, [r5, #28]
   2c898:	e7f0      	b.n	2c87c <notify_le_phy_updated+0xc>
		if (cb->le_phy_updated) {
   2c89a:	69ab      	ldr	r3, [r5, #24]
   2c89c:	b113      	cbz	r3, 2c8a4 <notify_le_phy_updated+0x34>
			cb->le_phy_updated(conn, &conn->le.phy);
   2c89e:	4639      	mov	r1, r7
   2c8a0:	4620      	mov	r0, r4
   2c8a2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c8a4:	3520      	adds	r5, #32
   2c8a6:	e7ee      	b.n	2c886 <notify_le_phy_updated+0x16>
   2c8a8:	20001c78 	.word	0x20001c78
   2c8ac:	00049680 	.word	0x00049680
   2c8b0:	00049680 	.word	0x00049680

0002c8b4 <le_param_req>:
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   2c8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c8b8:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   2c8ba:	4608      	mov	r0, r1
{
   2c8bc:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   2c8be:	f018 feb3 	bl	45628 <bt_le_conn_params_valid>
   2c8c2:	4605      	mov	r5, r0
   2c8c4:	b918      	cbnz	r0, 2c8ce <le_param_req+0x1a>
		return false;
   2c8c6:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   2c8c8:	4628      	mov	r0, r5
   2c8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   2c8ce:	4b13      	ldr	r3, [pc, #76]	; (2c91c <le_param_req+0x68>)
   2c8d0:	681e      	ldr	r6, [r3, #0]
   2c8d2:	b946      	cbnz	r6, 2c8e6 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c8d4:	4e12      	ldr	r6, [pc, #72]	; (2c920 <le_param_req+0x6c>)
   2c8d6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 2c924 <le_param_req+0x70>
   2c8da:	4546      	cmp	r6, r8
   2c8dc:	d2f4      	bcs.n	2c8c8 <le_param_req+0x14>
		if (!cb->le_param_req) {
   2c8de:	68b3      	ldr	r3, [r6, #8]
   2c8e0:	b983      	cbnz	r3, 2c904 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c8e2:	3620      	adds	r6, #32
   2c8e4:	e7f9      	b.n	2c8da <le_param_req+0x26>
		if (!cb->le_param_req) {
   2c8e6:	68b3      	ldr	r3, [r6, #8]
   2c8e8:	b90b      	cbnz	r3, 2c8ee <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   2c8ea:	69f6      	ldr	r6, [r6, #28]
   2c8ec:	e7f1      	b.n	2c8d2 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   2c8ee:	4621      	mov	r1, r4
   2c8f0:	4638      	mov	r0, r7
   2c8f2:	4798      	blx	r3
   2c8f4:	2800      	cmp	r0, #0
   2c8f6:	d0e6      	beq.n	2c8c6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2c8f8:	4620      	mov	r0, r4
   2c8fa:	f018 fe95 	bl	45628 <bt_le_conn_params_valid>
   2c8fe:	2800      	cmp	r0, #0
   2c900:	d1f3      	bne.n	2c8ea <le_param_req+0x36>
   2c902:	e7e0      	b.n	2c8c6 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   2c904:	4621      	mov	r1, r4
   2c906:	4638      	mov	r0, r7
   2c908:	4798      	blx	r3
   2c90a:	2800      	cmp	r0, #0
   2c90c:	d0db      	beq.n	2c8c6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2c90e:	4620      	mov	r0, r4
   2c910:	f018 fe8a 	bl	45628 <bt_le_conn_params_valid>
   2c914:	2800      	cmp	r0, #0
   2c916:	d1e4      	bne.n	2c8e2 <le_param_req+0x2e>
   2c918:	e7d5      	b.n	2c8c6 <le_param_req+0x12>
   2c91a:	bf00      	nop
   2c91c:	20001c78 	.word	0x20001c78
   2c920:	00049680 	.word	0x00049680
   2c924:	00049680 	.word	0x00049680

0002c928 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   2c928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2c92c:	78c3      	ldrb	r3, [r0, #3]
{
   2c92e:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2c930:	b973      	cbnz	r3, 2c950 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   2c932:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2c936:	4b10      	ldr	r3, [pc, #64]	; (2c978 <bt_conn_identity_resolved+0x50>)
   2c938:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2c93a:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   2c93e:	b955      	cbnz	r5, 2c956 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c940:	4d0e      	ldr	r5, [pc, #56]	; (2c97c <bt_conn_identity_resolved+0x54>)
   2c942:	4f0f      	ldr	r7, [pc, #60]	; (2c980 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2c944:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c948:	42bd      	cmp	r5, r7
   2c94a:	d30c      	bcc.n	2c966 <bt_conn_identity_resolved+0x3e>
		}
	}
}
   2c94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   2c950:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   2c954:	e7ef      	b.n	2c936 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   2c956:	692b      	ldr	r3, [r5, #16]
   2c958:	b11b      	cbz	r3, 2c962 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2c95a:	463a      	mov	r2, r7
   2c95c:	4631      	mov	r1, r6
   2c95e:	4620      	mov	r0, r4
   2c960:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2c962:	69ed      	ldr	r5, [r5, #28]
   2c964:	e7eb      	b.n	2c93e <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   2c966:	692b      	ldr	r3, [r5, #16]
   2c968:	b11b      	cbz	r3, 2c972 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2c96a:	4642      	mov	r2, r8
   2c96c:	4631      	mov	r1, r6
   2c96e:	4620      	mov	r0, r4
   2c970:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c972:	3520      	adds	r5, #32
   2c974:	e7e8      	b.n	2c948 <bt_conn_identity_resolved+0x20>
   2c976:	bf00      	nop
   2c978:	20001c78 	.word	0x20001c78
   2c97c:	00049680 	.word	0x00049680
   2c980:	00049680 	.word	0x00049680

0002c984 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   2c984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   2c986:	7a43      	ldrb	r3, [r0, #9]
   2c988:	7283      	strb	r3, [r0, #10]
{
   2c98a:	4604      	mov	r4, r0
   2c98c:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   2c98e:	f019 fb3a 	bl	46006 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   2c992:	4b0c      	ldr	r3, [pc, #48]	; (2c9c4 <bt_conn_security_changed+0x40>)
   2c994:	681d      	ldr	r5, [r3, #0]
   2c996:	b925      	cbnz	r5, 2c9a2 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c998:	4d0b      	ldr	r5, [pc, #44]	; (2c9c8 <bt_conn_security_changed+0x44>)
   2c99a:	4f0c      	ldr	r7, [pc, #48]	; (2c9cc <bt_conn_security_changed+0x48>)
   2c99c:	42bd      	cmp	r5, r7
   2c99e:	d308      	bcc.n	2c9b2 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   2c9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   2c9a2:	696b      	ldr	r3, [r5, #20]
   2c9a4:	b11b      	cbz	r3, 2c9ae <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   2c9a6:	7a61      	ldrb	r1, [r4, #9]
   2c9a8:	4632      	mov	r2, r6
   2c9aa:	4620      	mov	r0, r4
   2c9ac:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2c9ae:	69ed      	ldr	r5, [r5, #28]
   2c9b0:	e7f1      	b.n	2c996 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   2c9b2:	696b      	ldr	r3, [r5, #20]
   2c9b4:	b11b      	cbz	r3, 2c9be <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   2c9b6:	7a61      	ldrb	r1, [r4, #9]
   2c9b8:	4632      	mov	r2, r6
   2c9ba:	4620      	mov	r0, r4
   2c9bc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2c9be:	3520      	adds	r5, #32
   2c9c0:	e7ec      	b.n	2c99c <bt_conn_security_changed+0x18>
   2c9c2:	bf00      	nop
   2c9c4:	20001c78 	.word	0x20001c78
   2c9c8:	00049680 	.word	0x00049680
   2c9cc:	00049680 	.word	0x00049680

0002c9d0 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   2c9d0:	4b02      	ldr	r3, [pc, #8]	; (2c9dc <bt_conn_cb_register+0xc>)
   2c9d2:	681a      	ldr	r2, [r3, #0]
   2c9d4:	61c2      	str	r2, [r0, #28]
	callback_list = cb;
   2c9d6:	6018      	str	r0, [r3, #0]
}
   2c9d8:	4770      	bx	lr
   2c9da:	bf00      	nop
   2c9dc:	20001c78 	.word	0x20001c78

0002c9e0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   2c9e0:	b570      	push	{r4, r5, r6, lr}
   2c9e2:	4606      	mov	r6, r0
   2c9e4:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   2c9e6:	480a      	ldr	r0, [pc, #40]	; (2ca10 <bt_conn_add_le+0x30>)
   2c9e8:	2101      	movs	r1, #1
   2c9ea:	f7ff fd93 	bl	2c514 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   2c9ee:	4604      	mov	r4, r0
   2c9f0:	b160      	cbz	r0, 2ca0c <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   2c9f2:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   2c9f4:	2207      	movs	r2, #7
   2c9f6:	4629      	mov	r1, r5
   2c9f8:	3088      	adds	r0, #136	; 0x88
   2c9fa:	f018 fa02 	bl	44e02 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   2c9fe:	2301      	movs	r3, #1
   2ca00:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   2ca02:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   2ca04:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2ca06:	4b03      	ldr	r3, [pc, #12]	; (2ca14 <bt_conn_add_le+0x34>)
   2ca08:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   2ca0c:	4620      	mov	r0, r4
   2ca0e:	bd70      	pop	{r4, r5, r6, pc}
   2ca10:	20000f78 	.word	0x20000f78
   2ca14:	00280018 	.word	0x00280018

0002ca18 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   2ca18:	b570      	push	{r4, r5, r6, lr}
   2ca1a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2ca1c:	480c      	ldr	r0, [pc, #48]	; (2ca50 <bt_conn_lookup_addr_le+0x38>)
{
   2ca1e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2ca20:	f019 f97f 	bl	45d22 <bt_conn_ref>
   2ca24:	4604      	mov	r4, r0

		if (!conn) {
   2ca26:	b128      	cbz	r0, 2ca34 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2ca28:	7883      	ldrb	r3, [r0, #2]
   2ca2a:	2b01      	cmp	r3, #1
   2ca2c:	d004      	beq.n	2ca38 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   2ca2e:	f019 f993 	bl	45d58 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   2ca32:	2400      	movs	r4, #0
}
   2ca34:	4620      	mov	r0, r4
   2ca36:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   2ca38:	4629      	mov	r1, r5
   2ca3a:	4632      	mov	r2, r6
   2ca3c:	f019 fa26 	bl	45e8c <bt_conn_is_peer_addr_le>
   2ca40:	4605      	mov	r5, r0
   2ca42:	2800      	cmp	r0, #0
   2ca44:	d1f6      	bne.n	2ca34 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   2ca46:	4620      	mov	r0, r4
   2ca48:	f019 f986 	bl	45d58 <bt_conn_unref>
	return NULL;
   2ca4c:	462c      	mov	r4, r5
			continue;
   2ca4e:	e7f1      	b.n	2ca34 <bt_conn_lookup_addr_le+0x1c>
   2ca50:	20000f78 	.word	0x20000f78

0002ca54 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   2ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ca56:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2ca58:	480e      	ldr	r0, [pc, #56]	; (2ca94 <bt_conn_lookup_state_le+0x40>)
{
   2ca5a:	460e      	mov	r6, r1
   2ca5c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2ca5e:	f019 f960 	bl	45d22 <bt_conn_ref>

		if (!conn) {
   2ca62:	4604      	mov	r4, r0
   2ca64:	b1a0      	cbz	r0, 2ca90 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2ca66:	7883      	ldrb	r3, [r0, #2]
   2ca68:	2b01      	cmp	r3, #1
   2ca6a:	d003      	beq.n	2ca74 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   2ca6c:	f019 f974 	bl	45d58 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   2ca70:	2400      	movs	r4, #0
			continue;
   2ca72:	e00d      	b.n	2ca90 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   2ca74:	b136      	cbz	r6, 2ca84 <bt_conn_lookup_state_le+0x30>
   2ca76:	4632      	mov	r2, r6
   2ca78:	4629      	mov	r1, r5
   2ca7a:	f019 fa07 	bl	45e8c <bt_conn_is_peer_addr_le>
   2ca7e:	b908      	cbnz	r0, 2ca84 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   2ca80:	4620      	mov	r0, r4
   2ca82:	e7f3      	b.n	2ca6c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   2ca84:	7b63      	ldrb	r3, [r4, #13]
   2ca86:	42bb      	cmp	r3, r7
   2ca88:	d1fa      	bne.n	2ca80 <bt_conn_lookup_state_le+0x2c>
   2ca8a:	7a23      	ldrb	r3, [r4, #8]
   2ca8c:	42ab      	cmp	r3, r5
   2ca8e:	d1f7      	bne.n	2ca80 <bt_conn_lookup_state_le+0x2c>
}
   2ca90:	4620      	mov	r0, r4
   2ca92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ca94:	20000f78 	.word	0x20000f78

0002ca98 <send_conn_le_param_update>:
{
   2ca98:	b538      	push	{r3, r4, r5, lr}
   2ca9a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   2ca9c:	4608      	mov	r0, r1
{
   2ca9e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   2caa0:	f018 fdc2 	bl	45628 <bt_le_conn_params_valid>
   2caa4:	b338      	cbz	r0, 2caf6 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   2caa6:	4b15      	ldr	r3, [pc, #84]	; (2cafc <send_conn_le_param_update+0x64>)
   2caa8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   2caac:	0799      	lsls	r1, r3, #30
   2caae:	d407      	bmi.n	2cac0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   2cab0:	78e3      	ldrb	r3, [r4, #3]
   2cab2:	b173      	cbz	r3, 2cad2 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   2cab4:	4629      	mov	r1, r5
   2cab6:	4620      	mov	r0, r4
}
   2cab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   2cabc:	f000 b99e 	b.w	2cdfc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   2cac0:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   2cac4:	079a      	lsls	r2, r3, #30
   2cac6:	d5f3      	bpl.n	2cab0 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2cac8:	1d20      	adds	r0, r4, #4
   2caca:	f019 f88a 	bl	45be2 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   2cace:	0543      	lsls	r3, r0, #21
   2cad0:	d4ee      	bmi.n	2cab0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   2cad2:	4629      	mov	r1, r5
   2cad4:	4620      	mov	r0, r4
   2cad6:	f019 fa03 	bl	45ee0 <bt_conn_le_conn_update>
		if (rc == 0) {
   2cada:	b958      	cbnz	r0, 2caf4 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   2cadc:	882b      	ldrh	r3, [r5, #0]
   2cade:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   2cae2:	886b      	ldrh	r3, [r5, #2]
   2cae4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   2cae8:	88ab      	ldrh	r3, [r5, #4]
   2caea:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   2caee:	88eb      	ldrh	r3, [r5, #6]
   2caf0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   2caf4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2caf6:	f06f 0015 	mvn.w	r0, #21
   2cafa:	e7fb      	b.n	2caf4 <send_conn_le_param_update+0x5c>
   2cafc:	20000000 	.word	0x20000000

0002cb00 <deferred_work>:
{
   2cb00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   2cb02:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   2cb06:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   2cb08:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   2cb0c:	b9fb      	cbnz	r3, 2cb4e <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   2cb0e:	4628      	mov	r0, r5
   2cb10:	f019 fa68 	bl	45fe4 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   2cb14:	4b22      	ldr	r3, [pc, #136]	; (2cba0 <deferred_work+0xa0>)
   2cb16:	681e      	ldr	r6, [r3, #0]
   2cb18:	b94e      	cbnz	r6, 2cb2e <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cb1a:	4e22      	ldr	r6, [pc, #136]	; (2cba4 <deferred_work+0xa4>)
   2cb1c:	4f22      	ldr	r7, [pc, #136]	; (2cba8 <deferred_work+0xa8>)
   2cb1e:	42be      	cmp	r6, r7
   2cb20:	d30d      	bcc.n	2cb3e <deferred_work+0x3e>
		bt_conn_unref(conn);
   2cb22:	4628      	mov	r0, r5
}
   2cb24:	b003      	add	sp, #12
   2cb26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   2cb2a:	f019 b915 	b.w	45d58 <bt_conn_unref>
		if (cb->disconnected) {
   2cb2e:	6873      	ldr	r3, [r6, #4]
   2cb30:	b11b      	cbz	r3, 2cb3a <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   2cb32:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   2cb36:	4628      	mov	r0, r5
   2cb38:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2cb3a:	69f6      	ldr	r6, [r6, #28]
   2cb3c:	e7ec      	b.n	2cb18 <deferred_work+0x18>
		if (cb->disconnected) {
   2cb3e:	6873      	ldr	r3, [r6, #4]
   2cb40:	b11b      	cbz	r3, 2cb4a <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   2cb42:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   2cb46:	4628      	mov	r0, r5
   2cb48:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2cb4a:	3620      	adds	r6, #32
   2cb4c:	e7e7      	b.n	2cb1e <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   2cb4e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   2cb52:	2b01      	cmp	r3, #1
   2cb54:	d11c      	bne.n	2cb90 <deferred_work+0x90>
	if (atomic_test_and_clear_bit(conn->flags,
   2cb56:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cb5a:	f46f 7100 	mvn.w	r1, #512	; 0x200
   2cb5e:	4630      	mov	r0, r6
   2cb60:	f019 f830 	bl	45bc4 <atomic_and>
   2cb64:	0583      	lsls	r3, r0, #22
   2cb66:	d515      	bpl.n	2cb94 <deferred_work+0x94>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   2cb68:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2cb6a:	9300      	str	r3, [sp, #0]
   2cb6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2cb6e:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   2cb70:	4669      	mov	r1, sp
   2cb72:	4628      	mov	r0, r5
   2cb74:	f7ff ff90 	bl	2ca98 <send_conn_le_param_update>
   2cb78:	f3bf 8f5b 	dmb	ish
   2cb7c:	e856 3f00 	ldrex	r3, [r6]
   2cb80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2cb84:	e846 3200 	strex	r2, r3, [r6]
   2cb88:	2a00      	cmp	r2, #0
   2cb8a:	d1f7      	bne.n	2cb7c <deferred_work+0x7c>
   2cb8c:	f3bf 8f5b 	dmb	ish
}
   2cb90:	b003      	add	sp, #12
   2cb92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		param = BT_LE_CONN_PARAM(
   2cb94:	4a05      	ldr	r2, [pc, #20]	; (2cbac <deferred_work+0xac>)
   2cb96:	6810      	ldr	r0, [r2, #0]
   2cb98:	6851      	ldr	r1, [r2, #4]
   2cb9a:	466b      	mov	r3, sp
   2cb9c:	c303      	stmia	r3!, {r0, r1}
   2cb9e:	e7e7      	b.n	2cb70 <deferred_work+0x70>
   2cba0:	20001c78 	.word	0x20001c78
   2cba4:	00049680 	.word	0x00049680
   2cba8:	00049680 	.word	0x00049680
   2cbac:	000497c6 	.word	0x000497c6

0002cbb0 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   2cbb0:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   2cbb2:	4801      	ldr	r0, [pc, #4]	; (2cbb8 <bt_conn_create_frag_timeout+0x8>)
   2cbb4:	f7ff be08 	b.w	2c7c8 <bt_conn_create_pdu_timeout>
   2cbb8:	20000c94 	.word	0x20000c94

0002cbbc <create_frag>:
{
   2cbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cbc0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   2cbc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cbc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cbca:	2000      	movs	r0, #0
{
   2cbcc:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   2cbce:	f7ff ffef 	bl	2cbb0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   2cbd2:	7b73      	ldrb	r3, [r6, #13]
   2cbd4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   2cbd6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2cbd8:	f04f 0600 	mov.w	r6, #0
   2cbdc:	d005      	beq.n	2cbea <create_frag+0x2e>
		net_buf_unref(frag);
   2cbde:	f010 faad 	bl	3d13c <net_buf_unref>
		return NULL;
   2cbe2:	4635      	mov	r5, r6
}
   2cbe4:	4628      	mov	r0, r5
   2cbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   2cbea:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   2cbec:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   2cbf0:	4e0c      	ldr	r6, [pc, #48]	; (2cc24 <create_frag+0x68>)
   2cbf2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   2cbf4:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   2cbf8:	f01b f888 	bl	47d0c <net_buf_simple_tailroom>
   2cbfc:	4580      	cmp	r8, r0
   2cbfe:	d20c      	bcs.n	2cc1a <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   2cc00:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2cc04:	f854 1f08 	ldr.w	r1, [r4, #8]!
   2cc08:	4632      	mov	r2, r6
   2cc0a:	4638      	mov	r0, r7
   2cc0c:	f01b f849 	bl	47ca2 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   2cc10:	4631      	mov	r1, r6
   2cc12:	4620      	mov	r0, r4
   2cc14:	f01b f85e 	bl	47cd4 <net_buf_simple_pull>
   2cc18:	e7e4      	b.n	2cbe4 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   2cc1a:	4638      	mov	r0, r7
   2cc1c:	f01b f876 	bl	47d0c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   2cc20:	b286      	uxth	r6, r0
   2cc22:	e7ef      	b.n	2cc04 <create_frag+0x48>
   2cc24:	20000000 	.word	0x20000000

0002cc28 <bt_conn_process_tx>:
{
   2cc28:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   2cc2a:	7b43      	ldrb	r3, [r0, #13]
{
   2cc2c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   2cc2e:	b95b      	cbnz	r3, 2cc48 <bt_conn_process_tx+0x20>
   2cc30:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2cc34:	3004      	adds	r0, #4
   2cc36:	f018 ffc5 	bl	45bc4 <atomic_and>
   2cc3a:	0643      	lsls	r3, r0, #25
   2cc3c:	d504      	bpl.n	2cc48 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   2cc3e:	4620      	mov	r0, r4
}
   2cc40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   2cc44:	f019 b802 	b.w	45c4c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   2cc48:	2200      	movs	r2, #0
   2cc4a:	2300      	movs	r3, #0
   2cc4c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2cc50:	f01a ffc4 	bl	47bdc <net_buf_get>
	BT_ASSERT(buf);
   2cc54:	4605      	mov	r5, r0
   2cc56:	b960      	cbnz	r0, 2cc72 <bt_conn_process_tx+0x4a>
   2cc58:	4a1f      	ldr	r2, [pc, #124]	; (2ccd8 <bt_conn_process_tx+0xb0>)
   2cc5a:	4920      	ldr	r1, [pc, #128]	; (2ccdc <bt_conn_process_tx+0xb4>)
   2cc5c:	4820      	ldr	r0, [pc, #128]	; (2cce0 <bt_conn_process_tx+0xb8>)
   2cc5e:	f240 23e7 	movw	r3, #743	; 0x2e7
   2cc62:	f015 fff3 	bl	42c4c <printk>
   2cc66:	4040      	eors	r0, r0
   2cc68:	f380 8811 	msr	BASEPRI, r0
   2cc6c:	f04f 0003 	mov.w	r0, #3
   2cc70:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   2cc72:	4e1c      	ldr	r6, [pc, #112]	; (2cce4 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   2cc74:	89aa      	ldrh	r2, [r5, #12]
   2cc76:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   2cc7a:	429a      	cmp	r2, r3
   2cc7c:	d807      	bhi.n	2cc8e <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   2cc7e:	2300      	movs	r3, #0
   2cc80:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   2cc82:	4629      	mov	r1, r5
   2cc84:	4620      	mov	r0, r4
   2cc86:	f7ff fbb9 	bl	2c3fc <send_frag>
	if (!send_buf(conn, buf)) {
   2cc8a:	b130      	cbz	r0, 2cc9a <bt_conn_process_tx+0x72>
}
   2cc8c:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   2cc8e:	4629      	mov	r1, r5
   2cc90:	4620      	mov	r0, r4
   2cc92:	f7ff ff93 	bl	2cbbc <create_frag>
	if (!frag) {
   2cc96:	4601      	mov	r1, r0
   2cc98:	b920      	cbnz	r0, 2cca4 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
   2cc9a:	4628      	mov	r0, r5
}
   2cc9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   2cca0:	f010 ba4c 	b.w	3d13c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   2cca4:	2301      	movs	r3, #1
   2cca6:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   2cca8:	4620      	mov	r0, r4
   2ccaa:	f7ff fba7 	bl	2c3fc <send_frag>
   2ccae:	2800      	cmp	r0, #0
   2ccb0:	d0f3      	beq.n	2cc9a <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   2ccb2:	89aa      	ldrh	r2, [r5, #12]
   2ccb4:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   2ccb8:	429a      	cmp	r2, r3
   2ccba:	d802      	bhi.n	2ccc2 <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
   2ccbc:	2300      	movs	r3, #0
   2ccbe:	2203      	movs	r2, #3
   2ccc0:	e7df      	b.n	2cc82 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   2ccc2:	4629      	mov	r1, r5
   2ccc4:	4620      	mov	r0, r4
   2ccc6:	f7ff ff79 	bl	2cbbc <create_frag>
		if (!frag) {
   2ccca:	4601      	mov	r1, r0
   2cccc:	2800      	cmp	r0, #0
   2ccce:	d0e4      	beq.n	2cc9a <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   2ccd0:	2301      	movs	r3, #1
   2ccd2:	461a      	mov	r2, r3
   2ccd4:	e7e8      	b.n	2cca8 <bt_conn_process_tx+0x80>
   2ccd6:	bf00      	nop
   2ccd8:	0004b437 	.word	0x0004b437
   2ccdc:	0004b31d 	.word	0x0004b31d
   2cce0:	0004b300 	.word	0x0004b300
   2cce4:	20000000 	.word	0x20000000

0002cce8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   2cce8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   2ccea:	490b      	ldr	r1, [pc, #44]	; (2cd18 <bt_conn_init+0x30>)
   2ccec:	480b      	ldr	r0, [pc, #44]	; (2cd1c <bt_conn_init+0x34>)
   2ccee:	f01b fea6 	bl	48a3e <k_queue_append>
   2ccf2:	490b      	ldr	r1, [pc, #44]	; (2cd20 <bt_conn_init+0x38>)
   2ccf4:	4809      	ldr	r0, [pc, #36]	; (2cd1c <bt_conn_init+0x34>)
   2ccf6:	f01b fea2 	bl	48a3e <k_queue_append>
   2ccfa:	490a      	ldr	r1, [pc, #40]	; (2cd24 <bt_conn_init+0x3c>)
   2ccfc:	4807      	ldr	r0, [pc, #28]	; (2cd1c <bt_conn_init+0x34>)
   2ccfe:	f01b fe9e 	bl	48a3e <k_queue_append>
	}

	bt_att_init();
   2cd02:	f019 fe46 	bl	46992 <bt_att_init>

	err = bt_smp_init();
   2cd06:	f002 fcad 	bl	2f664 <bt_smp_init>
	if (err) {
   2cd0a:	4604      	mov	r4, r0
   2cd0c:	b908      	cbnz	r0, 2cd12 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   2cd0e:	f019 fa0d 	bl	4612c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   2cd12:	4620      	mov	r0, r4
   2cd14:	bd10      	pop	{r4, pc}
   2cd16:	bf00      	nop
   2cd18:	20001c7c 	.word	0x20001c7c
   2cd1c:	20000bf4 	.word	0x20000bf4
   2cd20:	20001c8c 	.word	0x20001c8c
   2cd24:	20001c9c 	.word	0x20001c9c

0002cd28 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   2cd28:	4b04      	ldr	r3, [pc, #16]	; (2cd3c <l2cap_accept+0x14>)
   2cd2a:	6818      	ldr	r0, [r3, #0]
   2cd2c:	b918      	cbnz	r0, 2cd36 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   2cd2e:	4a04      	ldr	r2, [pc, #16]	; (2cd40 <l2cap_accept+0x18>)
   2cd30:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   2cd32:	600b      	str	r3, [r1, #0]

		return 0;
   2cd34:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   2cd36:	f06f 000b 	mvn.w	r0, #11
}
   2cd3a:	4770      	bx	lr
   2cd3c:	20001038 	.word	0x20001038
   2cd40:	00049d7c 	.word	0x00049d7c

0002cd44 <bt_l2cap_connected>:
{
   2cd44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2cd48:	4e29      	ldr	r6, [pc, #164]	; (2cdf0 <bt_l2cap_connected+0xac>)
   2cd4a:	4f2a      	ldr	r7, [pc, #168]	; (2cdf4 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   2cd4c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2cdf8 <bt_l2cap_connected+0xb4>
{
   2cd50:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2cd52:	42be      	cmp	r6, r7
   2cd54:	d302      	bcc.n	2cd5c <bt_l2cap_connected+0x18>
}
   2cd56:	b003      	add	sp, #12
   2cd58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   2cd5c:	6873      	ldr	r3, [r6, #4]
   2cd5e:	a901      	add	r1, sp, #4
   2cd60:	4620      	mov	r0, r4
   2cd62:	4798      	blx	r3
   2cd64:	2800      	cmp	r0, #0
   2cd66:	db3d      	blt.n	2cde4 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   2cd68:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   2cd6a:	8833      	ldrh	r3, [r6, #0]
   2cd6c:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   2cd70:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   2cd74:	4641      	mov	r1, r8
   2cd76:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   2cd7a:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   2cd7e:	f01b ff55 	bl	48c2c <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2cd82:	f3bf 8f5b 	dmb	ish
   2cd86:	f105 0368 	add.w	r3, r5, #104	; 0x68
   2cd8a:	2200      	movs	r2, #0
   2cd8c:	e853 1f00 	ldrex	r1, [r3]
   2cd90:	e843 2000 	strex	r0, r2, [r3]
   2cd94:	2800      	cmp	r0, #0
   2cd96:	d1f9      	bne.n	2cd8c <bt_l2cap_connected+0x48>
   2cd98:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   2cd9c:	60aa      	str	r2, [r5, #8]
	return list->tail;
   2cd9e:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   2cda0:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   2cda4:	bb02      	cbnz	r2, 2cde8 <bt_l2cap_connected+0xa4>
	list->head = node;
   2cda6:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   2cdaa:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   2cdac:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   2cdae:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   2cdb0:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   2cdb4:	681b      	ldr	r3, [r3, #0]
   2cdb6:	b103      	cbz	r3, 2cdba <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   2cdb8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cdba:	9b01      	ldr	r3, [sp, #4]
   2cdbc:	f3bf 8f5b 	dmb	ish
   2cdc0:	3368      	adds	r3, #104	; 0x68
   2cdc2:	e853 1f00 	ldrex	r1, [r3]
   2cdc6:	f041 0101 	orr.w	r1, r1, #1
   2cdca:	e843 1200 	strex	r2, r1, [r3]
   2cdce:	2a00      	cmp	r2, #0
   2cdd0:	d1f7      	bne.n	2cdc2 <bt_l2cap_connected+0x7e>
   2cdd2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   2cdd6:	9801      	ldr	r0, [sp, #4]
   2cdd8:	6843      	ldr	r3, [r0, #4]
   2cdda:	699b      	ldr	r3, [r3, #24]
   2cddc:	b113      	cbz	r3, 2cde4 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   2cdde:	f100 0168 	add.w	r1, r0, #104	; 0x68
   2cde2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2cde4:	360c      	adds	r6, #12
   2cde6:	e7b4      	b.n	2cd52 <bt_l2cap_connected+0xe>
	parent->next = child;
   2cde8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2cdea:	6563      	str	r3, [r4, #84]	; 0x54
}
   2cdec:	e7dd      	b.n	2cdaa <bt_l2cap_connected+0x66>
   2cdee:	bf00      	nop
   2cdf0:	0004965c 	.word	0x0004965c
   2cdf4:	00049680 	.word	0x00049680
   2cdf8:	00045fcb 	.word	0x00045fcb

0002cdfc <bt_l2cap_update_conn_param>:
{
   2cdfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2cdfe:	460d      	mov	r5, r1
	ident++;
   2ce00:	4916      	ldr	r1, [pc, #88]	; (2ce5c <bt_l2cap_update_conn_param+0x60>)
   2ce02:	780b      	ldrb	r3, [r1, #0]
   2ce04:	3301      	adds	r3, #1
	if (!ident) {
   2ce06:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   2ce0a:	bf08      	it	eq
   2ce0c:	2301      	moveq	r3, #1
   2ce0e:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2ce10:	7809      	ldrb	r1, [r1, #0]
{
   2ce12:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   2ce14:	2208      	movs	r2, #8
   2ce16:	2012      	movs	r0, #18
   2ce18:	f019 f88e 	bl	45f38 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2ce1c:	4604      	mov	r4, r0
   2ce1e:	b1d0      	cbz	r0, 2ce56 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   2ce20:	2108      	movs	r1, #8
   2ce22:	4408      	add	r0, r1
   2ce24:	f01a ff37 	bl	47c96 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2ce28:	882b      	ldrh	r3, [r5, #0]
   2ce2a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   2ce2c:	886b      	ldrh	r3, [r5, #2]
   2ce2e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   2ce30:	88ab      	ldrh	r3, [r5, #4]
   2ce32:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2ce34:	88eb      	ldrh	r3, [r5, #6]
   2ce36:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2ce38:	2300      	movs	r3, #0
   2ce3a:	9300      	str	r3, [sp, #0]
   2ce3c:	4622      	mov	r2, r4
   2ce3e:	2105      	movs	r1, #5
   2ce40:	4630      	mov	r0, r6
   2ce42:	f019 f8f8 	bl	46036 <bt_l2cap_send_cb>
	if (err) {
   2ce46:	4605      	mov	r5, r0
   2ce48:	b110      	cbz	r0, 2ce50 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   2ce4a:	4620      	mov	r0, r4
   2ce4c:	f010 f976 	bl	3d13c <net_buf_unref>
}
   2ce50:	4628      	mov	r0, r5
   2ce52:	b002      	add	sp, #8
   2ce54:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   2ce56:	f06f 050b 	mvn.w	r5, #11
   2ce5a:	e7f9      	b.n	2ce50 <bt_l2cap_update_conn_param+0x54>
   2ce5c:	20003c66 	.word	0x20003c66

0002ce60 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   2ce60:	4b02      	ldr	r3, [pc, #8]	; (2ce6c <att_cfm_sent+0xc>)
   2ce62:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   2ce66:	f019 b974 	b.w	46152 <att_sent>
   2ce6a:	bf00      	nop
   2ce6c:	0004665f 	.word	0x0004665f

0002ce70 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   2ce70:	4b02      	ldr	r3, [pc, #8]	; (2ce7c <att_rsp_sent+0xc>)
   2ce72:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   2ce76:	f019 b96c 	b.w	46152 <att_sent>
   2ce7a:	bf00      	nop
   2ce7c:	00046643 	.word	0x00046643

0002ce80 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   2ce80:	4b02      	ldr	r3, [pc, #8]	; (2ce8c <att_req_sent+0xc>)
   2ce82:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   2ce86:	f019 b964 	b.w	46152 <att_sent>
   2ce8a:	bf00      	nop
   2ce8c:	00046411 	.word	0x00046411

0002ce90 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   2ce90:	281d      	cmp	r0, #29
{
   2ce92:	4603      	mov	r3, r0
	switch (op) {
   2ce94:	d01e      	beq.n	2ced4 <att_op_get_type+0x44>
   2ce96:	d815      	bhi.n	2cec4 <att_op_get_type+0x34>
   2ce98:	2819      	cmp	r0, #25
   2ce9a:	d80f      	bhi.n	2cebc <att_op_get_type+0x2c>
   2ce9c:	b140      	cbz	r0, 2ceb0 <att_op_get_type+0x20>
   2ce9e:	4a10      	ldr	r2, [pc, #64]	; (2cee0 <att_op_get_type+0x50>)
   2cea0:	2001      	movs	r0, #1
   2cea2:	fa00 f103 	lsl.w	r1, r0, r3
   2cea6:	400a      	ands	r2, r1
   2cea8:	b9b2      	cbnz	r2, 2ced8 <att_op_get_type+0x48>
   2ceaa:	4a0e      	ldr	r2, [pc, #56]	; (2cee4 <att_op_get_type+0x54>)
   2ceac:	400a      	ands	r2, r1
   2ceae:	b982      	cbnz	r2, 2ced2 <att_op_get_type+0x42>
	case BT_ATT_OP_INDICATE:
		return ATT_INDICATION;
	}

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
   2ceb0:	f013 0f40 	tst.w	r3, #64	; 0x40
   2ceb4:	bf0c      	ite	eq
   2ceb6:	2006      	moveq	r0, #6
   2ceb8:	2000      	movne	r0, #0
   2ceba:	4770      	bx	lr
	switch (op) {
   2cebc:	281b      	cmp	r0, #27
   2cebe:	d1f7      	bne.n	2ceb0 <att_op_get_type+0x20>
		return ATT_NOTIFICATION;
   2cec0:	2003      	movs	r0, #3
   2cec2:	4770      	bx	lr
	switch (op) {
   2cec4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   2cec8:	2a52      	cmp	r2, #82	; 0x52
   2ceca:	d007      	beq.n	2cedc <att_op_get_type+0x4c>
   2cecc:	281e      	cmp	r0, #30
   2cece:	d1ef      	bne.n	2ceb0 <att_op_get_type+0x20>
   2ced0:	2004      	movs	r0, #4
	}

	return ATT_UNKNOWN;
}
   2ced2:	4770      	bx	lr
		return ATT_INDICATION;
   2ced4:	2005      	movs	r0, #5
   2ced6:	4770      	bx	lr
		return ATT_RESPONSE;
   2ced8:	2002      	movs	r0, #2
   2ceda:	4770      	bx	lr
		return ATT_COMMAND;
   2cedc:	2000      	movs	r0, #0
   2cede:	4770      	bx	lr
   2cee0:	028aaaaa 	.word	0x028aaaaa
   2cee4:	01455554 	.word	0x01455554

0002cee8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   2cee8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2ceea:	3808      	subs	r0, #8
   2ceec:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   2ceee:	a901      	add	r1, sp, #4
   2cef0:	4802      	ldr	r0, [pc, #8]	; (2cefc <bt_att_released+0x14>)
   2cef2:	f01b fcdd 	bl	488b0 <k_mem_slab_free>
}
   2cef6:	b003      	add	sp, #12
   2cef8:	f85d fb04 	ldr.w	pc, [sp], #4
   2cefc:	20000abc 	.word	0x20000abc

0002cf00 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   2cf00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   2cf02:	2300      	movs	r3, #0
{
   2cf04:	4607      	mov	r7, r0
   2cf06:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   2cf08:	481e      	ldr	r0, [pc, #120]	; (2cf84 <bt_att_accept+0x84>)
   2cf0a:	2200      	movs	r2, #0
   2cf0c:	4669      	mov	r1, sp
   2cf0e:	f014 f8cf 	bl	410b0 <k_mem_slab_alloc>
   2cf12:	4604      	mov	r4, r0
   2cf14:	b120      	cbz	r0, 2cf20 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   2cf16:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   2cf1a:	4620      	mov	r0, r4
   2cf1c:	b003      	add	sp, #12
   2cf1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   2cf20:	4601      	mov	r1, r0
   2cf22:	222c      	movs	r2, #44	; 0x2c
   2cf24:	9800      	ldr	r0, [sp, #0]
   2cf26:	f017 ff77 	bl	44e18 <memset>
	att->conn = conn;
   2cf2a:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   2cf2c:	4816      	ldr	r0, [pc, #88]	; (2cf88 <bt_att_accept+0x88>)
	list->tail = NULL;
   2cf2e:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   2cf30:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   2cf34:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   2cf38:	2200      	movs	r2, #0
   2cf3a:	2300      	movs	r3, #0
   2cf3c:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2cf3e:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   2cf40:	f014 f8b6 	bl	410b0 <k_mem_slab_alloc>
   2cf44:	4604      	mov	r4, r0
   2cf46:	2800      	cmp	r0, #0
   2cf48:	d1e5      	bne.n	2cf16 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   2cf4a:	4601      	mov	r1, r0
   2cf4c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2cf50:	9801      	ldr	r0, [sp, #4]
   2cf52:	f017 ff61 	bl	44e18 <memset>
	chan->chan.chan.ops = &ops;
   2cf56:	9801      	ldr	r0, [sp, #4]
   2cf58:	4b0c      	ldr	r3, [pc, #48]	; (2cf8c <bt_att_accept+0x8c>)
   2cf5a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   2cf5c:	30f8      	adds	r0, #248	; 0xf8
   2cf5e:	f01b fd62 	bl	48a26 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2cf62:	9b01      	ldr	r3, [sp, #4]
   2cf64:	f3bf 8f5b 	dmb	ish
   2cf68:	33f0      	adds	r3, #240	; 0xf0
   2cf6a:	e853 2f00 	ldrex	r2, [r3]
   2cf6e:	e843 4100 	strex	r1, r4, [r3]
   2cf72:	2900      	cmp	r1, #0
   2cf74:	d1f9      	bne.n	2cf6a <bt_att_accept+0x6a>
   2cf76:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   2cf7a:	9b01      	ldr	r3, [sp, #4]
   2cf7c:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   2cf80:	6033      	str	r3, [r6, #0]
	return 0;
   2cf82:	e7ca      	b.n	2cf1a <bt_att_accept+0x1a>
   2cf84:	20000aa0 	.word	0x20000aa0
   2cf88:	20000abc 	.word	0x20000abc
   2cf8c:	200003b0 	.word	0x200003b0

0002cf90 <read_group_cb>:
{
   2cf90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2cf94:	4605      	mov	r5, r0
   2cf96:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2cf98:	f04f 0800 	mov.w	r8, #0
   2cf9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2cfa0:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   2cfa2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2cfa4:	f88d 8008 	strb.w	r8, [sp, #8]
   2cfa8:	a902      	add	r1, sp, #8
{
   2cfaa:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2cfac:	f8ad 300a 	strh.w	r3, [sp, #10]
   2cfb0:	f018 f815 	bl	44fde <bt_uuid_cmp>
   2cfb4:	b1a0      	cbz	r0, 2cfe0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2cfb6:	f642 0301 	movw	r3, #10241	; 0x2801
   2cfba:	6828      	ldr	r0, [r5, #0]
   2cfbc:	f88d 800c 	strb.w	r8, [sp, #12]
   2cfc0:	a903      	add	r1, sp, #12
   2cfc2:	f8ad 300e 	strh.w	r3, [sp, #14]
   2cfc6:	f018 f80a 	bl	44fde <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   2cfca:	b148      	cbz	r0, 2cfe0 <read_group_cb+0x50>
		if (data->group &&
   2cfcc:	6923      	ldr	r3, [r4, #16]
   2cfce:	b11b      	cbz	r3, 2cfd8 <read_group_cb+0x48>
   2cfd0:	885a      	ldrh	r2, [r3, #2]
   2cfd2:	42b2      	cmp	r2, r6
   2cfd4:	d200      	bcs.n	2cfd8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   2cfd6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   2cfd8:	2001      	movs	r0, #1
}
   2cfda:	b004      	add	sp, #16
   2cfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2cfe0:	6861      	ldr	r1, [r4, #4]
   2cfe2:	6828      	ldr	r0, [r5, #0]
   2cfe4:	f017 fffb 	bl	44fde <bt_uuid_cmp>
   2cfe8:	b110      	cbz	r0, 2cff0 <read_group_cb+0x60>
		data->group = NULL;
   2cfea:	2300      	movs	r3, #0
   2cfec:	6123      	str	r3, [r4, #16]
   2cfee:	e7f3      	b.n	2cfd8 <read_group_cb+0x48>
	if (data->rsp->len &&
   2cff0:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   2cff2:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   2cff4:	781a      	ldrb	r2, [r3, #0]
   2cff6:	b13a      	cbz	r2, 2d008 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   2cff8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   2cffc:	8981      	ldrh	r1, [r0, #12]
   2cffe:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   2d000:	4293      	cmp	r3, r2
   2d002:	da01      	bge.n	2d008 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   2d004:	2000      	movs	r0, #0
   2d006:	e7e8      	b.n	2cfda <read_group_cb+0x4a>
   2d008:	2104      	movs	r1, #4
   2d00a:	3008      	adds	r0, #8
   2d00c:	f01a fe43 	bl	47c96 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   2d010:	4b09      	ldr	r3, [pc, #36]	; (2d038 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   2d012:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   2d014:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   2d016:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   2d018:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   2d01a:	4629      	mov	r1, r5
   2d01c:	9300      	str	r3, [sp, #0]
   2d01e:	9401      	str	r4, [sp, #4]
   2d020:	2300      	movs	r3, #0
   2d022:	4638      	mov	r0, r7
   2d024:	f019 fa32 	bl	4648c <att_chan_read>
	if (read < 0) {
   2d028:	2800      	cmp	r0, #0
   2d02a:	dbeb      	blt.n	2d004 <read_group_cb+0x74>
	if (!data->group) {
   2d02c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   2d02e:	3800      	subs	r0, #0
   2d030:	bf18      	it	ne
   2d032:	2001      	movne	r0, #1
   2d034:	e7d1      	b.n	2cfda <read_group_cb+0x4a>
   2d036:	bf00      	nop
   2d038:	000463c5 	.word	0x000463c5

0002d03c <chan_send>:
{
   2d03c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   2d040:	688b      	ldr	r3, [r1, #8]
   2d042:	781b      	ldrb	r3, [r3, #0]
   2d044:	2bd2      	cmp	r3, #210	; 0xd2
{
   2d046:	4606      	mov	r6, r0
   2d048:	460c      	mov	r4, r1
   2d04a:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   2d04c:	d10c      	bne.n	2d068 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   2d04e:	6803      	ldr	r3, [r0, #0]
   2d050:	6818      	ldr	r0, [r3, #0]
   2d052:	f01a fbbb 	bl	477cc <bt_smp_sign>
		if (err) {
   2d056:	4605      	mov	r5, r0
   2d058:	b130      	cbz	r0, 2d068 <chan_send+0x2c>
			net_buf_unref(buf);
   2d05a:	4620      	mov	r0, r4
   2d05c:	f010 f86e 	bl	3d13c <net_buf_unref>
}
   2d060:	4628      	mov	r0, r5
   2d062:	b003      	add	sp, #12
   2d064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   2d068:	f104 0008 	add.w	r0, r4, #8
   2d06c:	f01a fe4a 	bl	47d04 <net_buf_simple_headroom>
	state->len = buf->len;
   2d070:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   2d074:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   2d076:	b957      	cbnz	r7, 2d08e <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   2d078:	68a3      	ldr	r3, [r4, #8]
   2d07a:	7818      	ldrb	r0, [r3, #0]
   2d07c:	f7ff ff08 	bl	2ce90 <att_op_get_type>
   2d080:	3801      	subs	r0, #1
   2d082:	b2c0      	uxtb	r0, r0
   2d084:	2804      	cmp	r0, #4
   2d086:	bf9c      	itt	ls
   2d088:	4b13      	ldrls	r3, [pc, #76]	; (2d0d8 <chan_send+0x9c>)
   2d08a:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2d08e:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   2d090:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2d094:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   2d096:	4b11      	ldr	r3, [pc, #68]	; (2d0dc <chan_send+0xa0>)
   2d098:	429f      	cmp	r7, r3
   2d09a:	d018      	beq.n	2d0ce <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   2d09c:	4b10      	ldr	r3, [pc, #64]	; (2d0e0 <chan_send+0xa4>)
   2d09e:	429f      	cmp	r7, r3
   2d0a0:	d017      	beq.n	2d0d2 <chan_send+0x96>
		return att_sent;
   2d0a2:	4910      	ldr	r1, [pc, #64]	; (2d0e4 <chan_send+0xa8>)
   2d0a4:	4b10      	ldr	r3, [pc, #64]	; (2d0e8 <chan_send+0xac>)
   2d0a6:	4a11      	ldr	r2, [pc, #68]	; (2d0ec <chan_send+0xb0>)
   2d0a8:	428f      	cmp	r7, r1
   2d0aa:	bf18      	it	ne
   2d0ac:	4613      	movne	r3, r2
			       &chan->chan.chan);
   2d0ae:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   2d0b0:	9600      	str	r6, [sp, #0]
   2d0b2:	4622      	mov	r2, r4
   2d0b4:	2104      	movs	r1, #4
   2d0b6:	f018 ffbe 	bl	46036 <bt_l2cap_send_cb>
	if (err) {
   2d0ba:	4605      	mov	r5, r0
   2d0bc:	2800      	cmp	r0, #0
   2d0be:	d0cf      	beq.n	2d060 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   2d0c0:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2d0c2:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2d0c6:	fa13 f388 	uxtah	r3, r3, r8
   2d0ca:	60a3      	str	r3, [r4, #8]
}
   2d0cc:	e7c8      	b.n	2d060 <chan_send+0x24>
		return att_rsp_sent;
   2d0ce:	4b08      	ldr	r3, [pc, #32]	; (2d0f0 <chan_send+0xb4>)
   2d0d0:	e7ed      	b.n	2d0ae <chan_send+0x72>
		return att_cfm_sent;
   2d0d2:	4b08      	ldr	r3, [pc, #32]	; (2d0f4 <chan_send+0xb8>)
   2d0d4:	e7eb      	b.n	2d0ae <chan_send+0x72>
   2d0d6:	bf00      	nop
   2d0d8:	00049da0 	.word	0x00049da0
   2d0dc:	00046643 	.word	0x00046643
   2d0e0:	0004665f 	.word	0x0004665f
   2d0e4:	00046411 	.word	0x00046411
   2d0e8:	0002ce81 	.word	0x0002ce81
   2d0ec:	00046153 	.word	0x00046153
   2d0f0:	0002ce71 	.word	0x0002ce71
   2d0f4:	0002ce61 	.word	0x0002ce61

0002d0f8 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   2d0f8:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   2d0fa:	4a07      	ldr	r2, [pc, #28]	; (2d118 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   2d0fc:	4604      	mov	r4, r0
   2d0fe:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   2d100:	f7ff ff9c 	bl	2d03c <chan_send>
	if (err) {
   2d104:	b130      	cbz	r0, 2d114 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   2d106:	4629      	mov	r1, r5
   2d108:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   2d10c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2d110:	f01a bd82 	b.w	47c18 <net_buf_put>
}
   2d114:	bd38      	pop	{r3, r4, r5, pc}
   2d116:	bf00      	nop
   2d118:	00046643 	.word	0x00046643

0002d11c <read_type_cb>:
{
   2d11c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   2d120:	f8d2 8000 	ldr.w	r8, [r2]
{
   2d124:	4606      	mov	r6, r0
   2d126:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2d128:	6800      	ldr	r0, [r0, #0]
   2d12a:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   2d12c:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   2d130:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   2d132:	f017 ff54 	bl	44fde <bt_uuid_cmp>
   2d136:	4607      	mov	r7, r0
   2d138:	2800      	cmp	r0, #0
   2d13a:	d13e      	bne.n	2d1ba <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2d13c:	4628      	mov	r0, r5
   2d13e:	2215      	movs	r2, #21
   2d140:	4631      	mov	r1, r6
   2d142:	f01a f824 	bl	4718e <bt_gatt_check_perm>
   2d146:	4605      	mov	r5, r0
   2d148:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2d14a:	b148      	cbz	r0, 2d160 <read_type_cb+0x44>
		if (data->rsp->len) {
   2d14c:	68e3      	ldr	r3, [r4, #12]
   2d14e:	781b      	ldrb	r3, [r3, #0]
   2d150:	b923      	cbnz	r3, 2d15c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   2d152:	2500      	movs	r5, #0
}
   2d154:	4628      	mov	r0, r5
   2d156:	b003      	add	sp, #12
   2d158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   2d15c:	7527      	strb	r7, [r4, #20]
   2d15e:	e7f8      	b.n	2d152 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   2d160:	68a0      	ldr	r0, [r4, #8]
   2d162:	f01a fd6a 	bl	47c3a <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   2d166:	2102      	movs	r1, #2
   2d168:	3008      	adds	r0, #8
   2d16a:	f01a fd94 	bl	47c96 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   2d16e:	4b14      	ldr	r3, [pc, #80]	; (2d1c0 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   2d170:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   2d172:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   2d174:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   2d178:	4631      	mov	r1, r6
   2d17a:	9300      	str	r3, [sp, #0]
   2d17c:	9401      	str	r4, [sp, #4]
   2d17e:	462b      	mov	r3, r5
   2d180:	4640      	mov	r0, r8
   2d182:	f019 f983 	bl	4648c <att_chan_read>
	if (read < 0) {
   2d186:	2800      	cmp	r0, #0
   2d188:	da07      	bge.n	2d19a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   2d18a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2d18e:	bf26      	itte	cs
   2d190:	4240      	negcs	r0, r0
   2d192:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2d194:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   2d196:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2d198:	e7dc      	b.n	2d154 <read_type_cb+0x38>
	if (!data->item) {
   2d19a:	6923      	ldr	r3, [r4, #16]
   2d19c:	2b00      	cmp	r3, #0
   2d19e:	d0d8      	beq.n	2d152 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   2d1a0:	68a0      	ldr	r0, [r4, #8]
   2d1a2:	f018 ffce 	bl	46142 <net_buf_frags_len>
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2d1a6:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   2d1a8:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2d1ac:	781b      	ldrb	r3, [r3, #0]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   2d1ae:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2d1b0:	429d      	cmp	r5, r3
   2d1b2:	bf94      	ite	ls
   2d1b4:	2500      	movls	r5, #0
   2d1b6:	2501      	movhi	r5, #1
   2d1b8:	e7cc      	b.n	2d154 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   2d1ba:	2501      	movs	r5, #1
   2d1bc:	e7ca      	b.n	2d154 <read_type_cb+0x38>
   2d1be:	bf00      	nop
   2d1c0:	0004615f 	.word	0x0004615f

0002d1c4 <bt_att_connected>:
{
   2d1c4:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   2d1c6:	4606      	mov	r6, r0
{
   2d1c8:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   2d1ca:	2104      	movs	r1, #4
   2d1cc:	f856 0908 	ldr.w	r0, [r6], #-8
   2d1d0:	f018 ff7b 	bl	460ca <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   2d1d4:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   2d1d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2d1da:	b91b      	cbnz	r3, 2d1e4 <bt_att_connected+0x20>
   2d1dc:	f105 000c 	add.w	r0, r5, #12
   2d1e0:	f01b fc21 	bl	48a26 <z_impl_k_queue_init>
	parent->next = child;
   2d1e4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2d1e6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   2d1ea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   2d1ec:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   2d1f0:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   2d1f2:	b902      	cbnz	r2, 2d1f6 <bt_att_connected+0x32>
	list->tail = node;
   2d1f4:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d1f6:	f3bf 8f5b 	dmb	ish
   2d1fa:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   2d1fe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   2d202:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2d204:	bf58      	it	pl
   2d206:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   2d208:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2d20a:	bf5c      	itt	pl
   2d20c:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   2d210:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   2d214:	f019 f8a0 	bl	46358 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   2d218:	f504 7084 	add.w	r0, r4, #264	; 0x108
   2d21c:	4902      	ldr	r1, [pc, #8]	; (2d228 <bt_att_connected+0x64>)
}
   2d21e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   2d222:	f01b bd03 	b.w	48c2c <k_work_init_delayable>
   2d226:	bf00      	nop
   2d228:	00046a21 	.word	0x00046a21

0002d22c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   2d22c:	898b      	ldrh	r3, [r1, #12]
{
   2d22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d232:	4604      	mov	r4, r0
   2d234:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   2d236:	2b00      	cmp	r3, #0
   2d238:	d040      	beq.n	2d2bc <bt_att_recv+0x90>
	return net_buf_simple_pull_mem(&buf->b, len);
   2d23a:	2101      	movs	r1, #1
   2d23c:	f105 0008 	add.w	r0, r5, #8
   2d240:	f01a fd50 	bl	47ce4 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   2d244:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2d248:	4607      	mov	r7, r0
   2d24a:	b3bb      	cbz	r3, 2d2bc <bt_att_recv+0x90>
		if (hdr->code == handlers[i].op) {
   2d24c:	f890 8000 	ldrb.w	r8, [r0]
   2d250:	4a31      	ldr	r2, [pc, #196]	; (2d318 <bt_att_recv+0xec>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2d252:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2d256:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   2d258:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   2d25c:	4541      	cmp	r1, r8
   2d25e:	d11b      	bne.n	2d298 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   2d260:	00d9      	lsls	r1, r3, #3
   2d262:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2d266:	f893 8002 	ldrb.w	r8, [r3, #2]
   2d26a:	f1b8 0f01 	cmp.w	r8, #1
   2d26e:	d028      	beq.n	2d2c2 <bt_att_recv+0x96>
		} else if (handler->type == ATT_INDICATION &&
   2d270:	f1b8 0f05 	cmp.w	r8, #5
   2d274:	d136      	bne.n	2d2e4 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d276:	f3bf 8f5b 	dmb	ish
   2d27a:	34e8      	adds	r4, #232	; 0xe8
   2d27c:	e854 3f00 	ldrex	r3, [r4]
   2d280:	f043 0002 	orr.w	r0, r3, #2
   2d284:	e844 0c00 	strex	ip, r0, [r4]
   2d288:	f1bc 0f00 	cmp.w	ip, #0
   2d28c:	d1f6      	bne.n	2d27c <bt_att_recv+0x50>
   2d28e:	f3bf 8f5b 	dmb	ish
   2d292:	f013 0f02 	tst.w	r3, #2
   2d296:	e024      	b.n	2d2e2 <bt_att_recv+0xb6>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2d298:	3301      	adds	r3, #1
   2d29a:	2b0d      	cmp	r3, #13
   2d29c:	d1dc      	bne.n	2d258 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   2d29e:	4640      	mov	r0, r8
   2d2a0:	f7ff fdf6 	bl	2ce90 <att_op_get_type>
   2d2a4:	b150      	cbz	r0, 2d2bc <bt_att_recv+0x90>
   2d2a6:	2805      	cmp	r0, #5
   2d2a8:	d008      	beq.n	2d2bc <bt_att_recv+0x90>
	if (!req) {
   2d2aa:	f1b8 0f00 	cmp.w	r8, #0
   2d2ae:	d005      	beq.n	2d2bc <bt_att_recv+0x90>
   2d2b0:	2306      	movs	r3, #6
   2d2b2:	2200      	movs	r2, #0
   2d2b4:	4641      	mov	r1, r8
   2d2b6:	4630      	mov	r0, r6
   2d2b8:	f019 fab7 	bl	4682a <send_err_rsp.part.0>
}
   2d2bc:	2000      	movs	r0, #0
   2d2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d2c2:	34e8      	adds	r4, #232	; 0xe8
   2d2c4:	f3bf 8f5b 	dmb	ish
   2d2c8:	e854 3f00 	ldrex	r3, [r4]
   2d2cc:	f043 0001 	orr.w	r0, r3, #1
   2d2d0:	e844 0c00 	strex	ip, r0, [r4]
   2d2d4:	f1bc 0f00 	cmp.w	ip, #0
   2d2d8:	d1f6      	bne.n	2d2c8 <bt_att_recv+0x9c>
   2d2da:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   2d2de:	f013 0f01 	tst.w	r3, #1
   2d2e2:	d1eb      	bne.n	2d2bc <bt_att_recv+0x90>
	if (buf->len < handler->expect_len) {
   2d2e4:	440a      	add	r2, r1
   2d2e6:	89a9      	ldrh	r1, [r5, #12]
   2d2e8:	7853      	ldrb	r3, [r2, #1]
   2d2ea:	4299      	cmp	r1, r3
   2d2ec:	d30e      	bcc.n	2d30c <bt_att_recv+0xe0>
		err = handler->func(att_chan, buf);
   2d2ee:	6853      	ldr	r3, [r2, #4]
   2d2f0:	4629      	mov	r1, r5
   2d2f2:	4630      	mov	r0, r6
   2d2f4:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   2d2f6:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   2d2fa:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   2d2fc:	d1de      	bne.n	2d2bc <bt_att_recv+0x90>
   2d2fe:	2800      	cmp	r0, #0
   2d300:	d0dc      	beq.n	2d2bc <bt_att_recv+0x90>
		send_err_rsp(att_chan, hdr->code, 0, err);
   2d302:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   2d304:	2900      	cmp	r1, #0
   2d306:	d0d9      	beq.n	2d2bc <bt_att_recv+0x90>
   2d308:	2200      	movs	r2, #0
   2d30a:	e7d4      	b.n	2d2b6 <bt_att_recv+0x8a>
	if (handler->type == ATT_REQUEST && err) {
   2d30c:	f1b8 0f01 	cmp.w	r8, #1
   2d310:	d1d4      	bne.n	2d2bc <bt_att_recv+0x90>
		err = BT_ATT_ERR_INVALID_PDU;
   2d312:	2304      	movs	r3, #4
   2d314:	e7f5      	b.n	2d302 <bt_att_recv+0xd6>
   2d316:	bf00      	nop
   2d318:	00049db4 	.word	0x00049db4

0002d31c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2d31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d320:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2d322:	6803      	ldr	r3, [r0, #0]
   2d324:	460e      	mov	r6, r1
   2d326:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2d328:	b087      	sub	sp, #28
   2d32a:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2d32c:	bf18      	it	ne
   2d32e:	2101      	movne	r1, #1
   2d330:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   2d332:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   2d334:	f019 ff89 	bl	4724a <bt_gatt_change_aware>
   2d338:	2800      	cmp	r0, #0
   2d33a:	d04a      	beq.n	2d3d2 <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
   2d33c:	2f00      	cmp	r7, #0
   2d33e:	d04a      	beq.n	2d3d6 <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
   2d340:	2218      	movs	r2, #24
   2d342:	2100      	movs	r1, #0
   2d344:	4668      	mov	r0, sp
   2d346:	f017 fd67 	bl	44e18 <memset>
	if (rsp) {
   2d34a:	f1b8 0f00 	cmp.w	r8, #0
   2d34e:	d122      	bne.n	2d396 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   2d350:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2d352:	4a22      	ldr	r2, [pc, #136]	; (2d3dc <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
   2d354:	681b      	ldr	r3, [r3, #0]
   2d356:	9300      	str	r3, [sp, #0]
	data.value = value;
   2d358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d35a:	9303      	str	r3, [sp, #12]
	data.len = len;
   2d35c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   2d360:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d364:	2301      	movs	r3, #1
   2d366:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   2d36a:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2d36e:	466b      	mov	r3, sp
   2d370:	4639      	mov	r1, r7
   2d372:	4638      	mov	r0, r7
	data.req = req;
   2d374:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   2d378:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   2d37c:	f018 ff01 	bl	46182 <bt_gatt_foreach_attr>
	if (data.err) {
   2d380:	f89d 4014 	ldrb.w	r4, [sp, #20]
   2d384:	b1f4      	cbz	r4, 2d3c4 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   2d386:	f1b8 0f00 	cmp.w	r8, #0
   2d38a:	d10e      	bne.n	2d3aa <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   2d38c:	2400      	movs	r4, #0
}
   2d38e:	4620      	mov	r0, r4
   2d390:	b007      	add	sp, #28
   2d392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   2d396:	2200      	movs	r2, #0
   2d398:	4641      	mov	r1, r8
   2d39a:	4628      	mov	r0, r5
   2d39c:	f019 fa20 	bl	467e0 <bt_att_chan_create_pdu>
   2d3a0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   2d3a2:	2800      	cmp	r0, #0
   2d3a4:	d1d4      	bne.n	2d350 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   2d3a6:	240e      	movs	r4, #14
   2d3a8:	e7f1      	b.n	2d38e <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   2d3aa:	9801      	ldr	r0, [sp, #4]
   2d3ac:	f00f fec6 	bl	3d13c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   2d3b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   2d3b4:	2e00      	cmp	r6, #0
   2d3b6:	d0e9      	beq.n	2d38c <att_write_rsp.constprop.0+0x70>
   2d3b8:	463a      	mov	r2, r7
   2d3ba:	4631      	mov	r1, r6
   2d3bc:	4628      	mov	r0, r5
   2d3be:	f019 fa34 	bl	4682a <send_err_rsp.part.0>
   2d3c2:	e7e3      	b.n	2d38c <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   2d3c4:	9901      	ldr	r1, [sp, #4]
   2d3c6:	2900      	cmp	r1, #0
   2d3c8:	d0e0      	beq.n	2d38c <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d3ca:	4628      	mov	r0, r5
   2d3cc:	f7ff fe94 	bl	2d0f8 <bt_att_chan_send_rsp.constprop.0>
   2d3d0:	e7dd      	b.n	2d38e <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2d3d2:	2412      	movs	r4, #18
   2d3d4:	e7db      	b.n	2d38e <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   2d3d6:	2401      	movs	r4, #1
   2d3d8:	e7d9      	b.n	2d38e <att_write_rsp.constprop.0+0x72>
   2d3da:	bf00      	nop
   2d3dc:	00046427 	.word	0x00046427

0002d3e0 <att_read_group_req>:
{
   2d3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   2d3e4:	898c      	ldrh	r4, [r1, #12]
   2d3e6:	3c04      	subs	r4, #4
   2d3e8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2d3ea:	2c02      	cmp	r4, #2
{
   2d3ec:	4605      	mov	r5, r0
   2d3ee:	b08c      	sub	sp, #48	; 0x30
   2d3f0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   2d3f2:	d001      	beq.n	2d3f8 <att_read_group_req+0x18>
   2d3f4:	2c10      	cmp	r4, #16
   2d3f6:	d16e      	bne.n	2d4d6 <att_read_group_req+0xf6>
   2d3f8:	2104      	movs	r1, #4
   2d3fa:	3008      	adds	r0, #8
   2d3fc:	f01a fc72 	bl	47ce4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d400:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d404:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d406:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d408:	1d01      	adds	r1, r0, #4
   2d40a:	4622      	mov	r2, r4
   2d40c:	4640      	mov	r0, r8
   2d40e:	f017 fe14 	bl	4503a <bt_uuid_create>
   2d412:	2800      	cmp	r0, #0
   2d414:	d061      	beq.n	2d4da <att_read_group_req+0xfa>
	if (!start || !end) {
   2d416:	2e00      	cmp	r6, #0
   2d418:	d03a      	beq.n	2d490 <att_read_group_req+0xb0>
   2d41a:	2400      	movs	r4, #0
   2d41c:	2f00      	cmp	r7, #0
   2d41e:	d036      	beq.n	2d48e <att_read_group_req+0xae>
	if (start > end) {
   2d420:	42be      	cmp	r6, r7
   2d422:	d835      	bhi.n	2d490 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2d424:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d428:	a901      	add	r1, sp, #4
   2d42a:	4640      	mov	r0, r8
   2d42c:	f88d 4004 	strb.w	r4, [sp, #4]
   2d430:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d434:	f017 fdd3 	bl	44fde <bt_uuid_cmp>
   2d438:	2800      	cmp	r0, #0
   2d43a:	d134      	bne.n	2d4a6 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   2d43c:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   2d43e:	2214      	movs	r2, #20
   2d440:	2100      	movs	r1, #0
   2d442:	a807      	add	r0, sp, #28
   2d444:	f017 fce8 	bl	44e18 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   2d448:	2201      	movs	r2, #1
   2d44a:	2111      	movs	r1, #17
   2d44c:	4620      	mov	r0, r4
   2d44e:	f019 fa2f 	bl	468b0 <bt_att_create_pdu>
   2d452:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   2d454:	2800      	cmp	r0, #0
   2d456:	d040      	beq.n	2d4da <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   2d458:	2101      	movs	r1, #1
   2d45a:	3008      	adds	r0, #8
	data.uuid = uuid;
   2d45c:	e9cd 5807 	strd	r5, r8, [sp, #28]
   2d460:	f01a fc19 	bl	47c96 <net_buf_simple_add>
	data.rsp->len = 0U;
   2d464:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   2d468:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2d46a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   2d46c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2d470:	4a1b      	ldr	r2, [pc, #108]	; (2d4e0 <att_read_group_req+0x100>)
	data.group = NULL;
   2d472:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   2d476:	4639      	mov	r1, r7
   2d478:	4630      	mov	r0, r6
   2d47a:	f018 fe82 	bl	46182 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   2d47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d480:	781c      	ldrb	r4, [r3, #0]
   2d482:	bb1c      	cbnz	r4, 2d4cc <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   2d484:	9809      	ldr	r0, [sp, #36]	; 0x24
   2d486:	f00f fe59 	bl	3d13c <net_buf_unref>
	if (!req) {
   2d48a:	230a      	movs	r3, #10
   2d48c:	e018      	b.n	2d4c0 <att_read_group_req+0xe0>
			*err = 0U;
   2d48e:	463e      	mov	r6, r7
	if (!req) {
   2d490:	2301      	movs	r3, #1
   2d492:	4632      	mov	r2, r6
   2d494:	2110      	movs	r1, #16
   2d496:	4628      	mov	r0, r5
   2d498:	f019 f9c7 	bl	4682a <send_err_rsp.part.0>
		return 0;
   2d49c:	2400      	movs	r4, #0
}
   2d49e:	4620      	mov	r0, r4
   2d4a0:	b00c      	add	sp, #48	; 0x30
   2d4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2d4a6:	f642 0301 	movw	r3, #10241	; 0x2801
   2d4aa:	a907      	add	r1, sp, #28
   2d4ac:	4640      	mov	r0, r8
   2d4ae:	f88d 401c 	strb.w	r4, [sp, #28]
   2d4b2:	f8ad 301e 	strh.w	r3, [sp, #30]
   2d4b6:	f017 fd92 	bl	44fde <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2d4ba:	2800      	cmp	r0, #0
   2d4bc:	d0be      	beq.n	2d43c <att_read_group_req+0x5c>
	if (!req) {
   2d4be:	2310      	movs	r3, #16
   2d4c0:	4632      	mov	r2, r6
   2d4c2:	2110      	movs	r1, #16
   2d4c4:	4628      	mov	r0, r5
   2d4c6:	f019 f9b0 	bl	4682a <send_err_rsp.part.0>
		return 0;
   2d4ca:	e7e8      	b.n	2d49e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d4cc:	9909      	ldr	r1, [sp, #36]	; 0x24
   2d4ce:	4628      	mov	r0, r5
   2d4d0:	f7ff fe12 	bl	2d0f8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2d4d4:	e7e2      	b.n	2d49c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   2d4d6:	2404      	movs	r4, #4
   2d4d8:	e7e1      	b.n	2d49e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   2d4da:	240e      	movs	r4, #14
   2d4dc:	e7df      	b.n	2d49e <att_read_group_req+0xbe>
   2d4de:	bf00      	nop
   2d4e0:	0002cf91 	.word	0x0002cf91

0002d4e4 <att_read_mult_req>:
{
   2d4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   2d4e8:	6886      	ldr	r6, [r0, #8]
{
   2d4ea:	b085      	sub	sp, #20
   2d4ec:	4604      	mov	r4, r0
   2d4ee:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2d4f0:	4630      	mov	r0, r6
   2d4f2:	2101      	movs	r1, #1
   2d4f4:	f019 fea9 	bl	4724a <bt_gatt_change_aware>
   2d4f8:	b3b8      	cbz	r0, 2d56a <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   2d4fa:	2210      	movs	r2, #16
   2d4fc:	2100      	movs	r1, #0
   2d4fe:	4668      	mov	r0, sp
   2d500:	f017 fc8a 	bl	44e18 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   2d504:	2200      	movs	r2, #0
   2d506:	210f      	movs	r1, #15
   2d508:	4630      	mov	r0, r6
   2d50a:	f019 f9d1 	bl	468b0 <bt_att_create_pdu>
   2d50e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2d510:	b368      	cbz	r0, 2d56e <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d512:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2d574 <att_read_mult_req+0x90>
	data.chan = chan;
   2d516:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   2d518:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d51c:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   2d520:	89ab      	ldrh	r3, [r5, #12]
   2d522:	2b01      	cmp	r3, #1
   2d524:	d804      	bhi.n	2d530 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d526:	9902      	ldr	r1, [sp, #8]
   2d528:	4620      	mov	r0, r4
   2d52a:	f7ff fde5 	bl	2d0f8 <bt_att_chan_send_rsp.constprop.0>
   2d52e:	e018      	b.n	2d562 <att_read_mult_req+0x7e>
   2d530:	4638      	mov	r0, r7
   2d532:	f01a fbdf 	bl	47cf4 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d536:	466b      	mov	r3, sp
   2d538:	464a      	mov	r2, r9
   2d53a:	4601      	mov	r1, r0
   2d53c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d53e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d542:	f018 fe1e 	bl	46182 <bt_gatt_foreach_attr>
		if (data.err) {
   2d546:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d54a:	2b00      	cmp	r3, #0
   2d54c:	d0e8      	beq.n	2d520 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   2d54e:	9802      	ldr	r0, [sp, #8]
   2d550:	f00f fdf4 	bl	3d13c <net_buf_unref>
	if (!req) {
   2d554:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d558:	4632      	mov	r2, r6
   2d55a:	210e      	movs	r1, #14
   2d55c:	4620      	mov	r0, r4
   2d55e:	f019 f964 	bl	4682a <send_err_rsp.part.0>
	return 0;
   2d562:	2000      	movs	r0, #0
}
   2d564:	b005      	add	sp, #20
   2d566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2d56a:	2012      	movs	r0, #18
   2d56c:	e7fa      	b.n	2d564 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   2d56e:	200e      	movs	r0, #14
   2d570:	e7f8      	b.n	2d564 <att_read_mult_req+0x80>
   2d572:	bf00      	nop
   2d574:	0004667b 	.word	0x0004667b

0002d578 <att_read_rsp>:
{
   2d578:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   2d57c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   2d580:	4605      	mov	r5, r0
   2d582:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   2d584:	4640      	mov	r0, r8
   2d586:	2101      	movs	r1, #1
{
   2d588:	4614      	mov	r4, r2
   2d58a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   2d58c:	f019 fe5d 	bl	4724a <bt_gatt_change_aware>
   2d590:	b388      	cbz	r0, 2d5f6 <att_read_rsp+0x7e>
	if (!handle) {
   2d592:	b396      	cbz	r6, 2d5fa <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   2d594:	2210      	movs	r2, #16
   2d596:	2100      	movs	r1, #0
   2d598:	4668      	mov	r0, sp
   2d59a:	f017 fc3d 	bl	44e18 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   2d59e:	2200      	movs	r2, #0
   2d5a0:	4621      	mov	r1, r4
   2d5a2:	4640      	mov	r0, r8
   2d5a4:	f019 f984 	bl	468b0 <bt_att_create_pdu>
   2d5a8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2d5aa:	b340      	cbz	r0, 2d5fe <att_read_rsp+0x86>
	data.offset = offset;
   2d5ac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2d5b0:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   2d5b4:	2301      	movs	r3, #1
   2d5b6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d5ba:	4a12      	ldr	r2, [pc, #72]	; (2d604 <att_read_rsp+0x8c>)
	data.chan = chan;
   2d5bc:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   2d5be:	466b      	mov	r3, sp
   2d5c0:	4631      	mov	r1, r6
   2d5c2:	4630      	mov	r0, r6
   2d5c4:	f018 fddd 	bl	46182 <bt_gatt_foreach_attr>
	if (data.err) {
   2d5c8:	f89d 400c 	ldrb.w	r4, [sp, #12]
   2d5cc:	b174      	cbz	r4, 2d5ec <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   2d5ce:	9802      	ldr	r0, [sp, #8]
   2d5d0:	f00f fdb4 	bl	3d13c <net_buf_unref>
	if (!req) {
   2d5d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2d5d8:	4632      	mov	r2, r6
   2d5da:	4639      	mov	r1, r7
   2d5dc:	4628      	mov	r0, r5
   2d5de:	f019 f924 	bl	4682a <send_err_rsp.part.0>
		return 0;
   2d5e2:	2400      	movs	r4, #0
}
   2d5e4:	4620      	mov	r0, r4
   2d5e6:	b004      	add	sp, #16
   2d5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d5ec:	9902      	ldr	r1, [sp, #8]
   2d5ee:	4628      	mov	r0, r5
   2d5f0:	f7ff fd82 	bl	2d0f8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2d5f4:	e7f6      	b.n	2d5e4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2d5f6:	2412      	movs	r4, #18
   2d5f8:	e7f4      	b.n	2d5e4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   2d5fa:	2401      	movs	r4, #1
   2d5fc:	e7f2      	b.n	2d5e4 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   2d5fe:	240e      	movs	r4, #14
   2d600:	e7f0      	b.n	2d5e4 <att_read_rsp+0x6c>
   2d602:	bf00      	nop
   2d604:	0004667b 	.word	0x0004667b

0002d608 <att_read_type_req>:
{
   2d608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   2d60c:	898c      	ldrh	r4, [r1, #12]
   2d60e:	3c04      	subs	r4, #4
   2d610:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   2d612:	2c02      	cmp	r4, #2
{
   2d614:	4605      	mov	r5, r0
   2d616:	b08c      	sub	sp, #48	; 0x30
   2d618:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   2d61a:	d001      	beq.n	2d620 <att_read_type_req+0x18>
   2d61c:	2c10      	cmp	r4, #16
   2d61e:	d14f      	bne.n	2d6c0 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   2d620:	2104      	movs	r1, #4
   2d622:	3008      	adds	r0, #8
   2d624:	f01a fb5e 	bl	47ce4 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d628:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d62c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d62e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2d630:	1d01      	adds	r1, r0, #4
   2d632:	4622      	mov	r2, r4
   2d634:	4640      	mov	r0, r8
   2d636:	f017 fd00 	bl	4503a <bt_uuid_create>
   2d63a:	b188      	cbz	r0, 2d660 <att_read_type_req+0x58>
	if (!start || !end) {
   2d63c:	b19e      	cbz	r6, 2d666 <att_read_type_req+0x5e>
   2d63e:	b18f      	cbz	r7, 2d664 <att_read_type_req+0x5c>
	if (start > end) {
   2d640:	42b7      	cmp	r7, r6
   2d642:	d310      	bcc.n	2d666 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   2d644:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   2d646:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   2d648:	2100      	movs	r1, #0
   2d64a:	eb0d 0002 	add.w	r0, sp, r2
   2d64e:	f017 fbe3 	bl	44e18 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   2d652:	2201      	movs	r2, #1
   2d654:	2109      	movs	r1, #9
   2d656:	4620      	mov	r0, r4
   2d658:	f019 f92a 	bl	468b0 <bt_att_create_pdu>
   2d65c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   2d65e:	b968      	cbnz	r0, 2d67c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   2d660:	240e      	movs	r4, #14
   2d662:	e007      	b.n	2d674 <att_read_type_req+0x6c>
			*err = 0U;
   2d664:	463e      	mov	r6, r7
	if (!req) {
   2d666:	2301      	movs	r3, #1
   2d668:	4632      	mov	r2, r6
   2d66a:	2108      	movs	r1, #8
   2d66c:	4628      	mov	r0, r5
   2d66e:	f019 f8dc 	bl	4682a <send_err_rsp.part.0>
		return 0;
   2d672:	2400      	movs	r4, #0
}
   2d674:	4620      	mov	r0, r4
   2d676:	b00c      	add	sp, #48	; 0x30
   2d678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   2d67c:	2101      	movs	r1, #1
   2d67e:	3008      	adds	r0, #8
	data.uuid = uuid;
   2d680:	e9cd 5806 	strd	r5, r8, [sp, #24]
   2d684:	f01a fb07 	bl	47c96 <net_buf_simple_add>
	data.rsp->len = 0U;
   2d688:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   2d68c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   2d68e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   2d690:	4a0c      	ldr	r2, [pc, #48]	; (2d6c4 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   2d692:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   2d696:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   2d698:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   2d69c:	4630      	mov	r0, r6
   2d69e:	ab06      	add	r3, sp, #24
   2d6a0:	f018 fd6f 	bl	46182 <bt_gatt_foreach_attr>
	if (data.err) {
   2d6a4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   2d6a8:	b12c      	cbz	r4, 2d6b6 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   2d6aa:	9808      	ldr	r0, [sp, #32]
   2d6ac:	f00f fd46 	bl	3d13c <net_buf_unref>
	if (!req) {
   2d6b0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   2d6b4:	e7d8      	b.n	2d668 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d6b6:	9908      	ldr	r1, [sp, #32]
   2d6b8:	4628      	mov	r0, r5
   2d6ba:	f7ff fd1d 	bl	2d0f8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2d6be:	e7d9      	b.n	2d674 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   2d6c0:	2404      	movs	r4, #4
   2d6c2:	e7d7      	b.n	2d674 <att_read_type_req+0x6c>
   2d6c4:	0002d11d 	.word	0x0002d11d

0002d6c8 <att_find_type_req>:
{
   2d6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d6cc:	4688      	mov	r8, r1
   2d6ce:	b086      	sub	sp, #24
   2d6d0:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   2d6d2:	2106      	movs	r1, #6
   2d6d4:	f108 0008 	add.w	r0, r8, #8
   2d6d8:	f01a fb04 	bl	47ce4 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d6dc:	8807      	ldrh	r7, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d6de:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   2d6e2:	8883      	ldrh	r3, [r0, #4]
	value = buf->data;
   2d6e4:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (!start || !end) {
   2d6e8:	b1ef      	cbz	r7, 2d726 <att_find_type_req+0x5e>
   2d6ea:	2400      	movs	r4, #0
   2d6ec:	f1b9 0f00 	cmp.w	r9, #0
   2d6f0:	d018      	beq.n	2d724 <att_find_type_req+0x5c>
	if (start > end) {
   2d6f2:	454f      	cmp	r7, r9
   2d6f4:	d817      	bhi.n	2d726 <att_find_type_req+0x5e>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   2d6f6:	f8ad 3002 	strh.w	r3, [sp, #2]
   2d6fa:	a901      	add	r1, sp, #4
   2d6fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2d700:	4668      	mov	r0, sp
   2d702:	f88d 4000 	strb.w	r4, [sp]
   2d706:	f88d 4004 	strb.w	r4, [sp, #4]
   2d70a:	f8ad 3006 	strh.w	r3, [sp, #6]
   2d70e:	f017 fc66 	bl	44fde <bt_uuid_cmp>
   2d712:	4606      	mov	r6, r0
   2d714:	b190      	cbz	r0, 2d73c <att_find_type_req+0x74>
	if (!req) {
   2d716:	230a      	movs	r3, #10
   2d718:	463a      	mov	r2, r7
   2d71a:	2106      	movs	r1, #6
   2d71c:	4628      	mov	r0, r5
   2d71e:	f019 f884 	bl	4682a <send_err_rsp.part.0>
		return 0;
   2d722:	e007      	b.n	2d734 <att_find_type_req+0x6c>
			*err = 0U;
   2d724:	464f      	mov	r7, r9
	if (!req) {
   2d726:	2301      	movs	r3, #1
   2d728:	463a      	mov	r2, r7
   2d72a:	2106      	movs	r1, #6
   2d72c:	4628      	mov	r0, r5
   2d72e:	f019 f87c 	bl	4682a <send_err_rsp.part.0>
		return 0;
   2d732:	2400      	movs	r4, #0
}
   2d734:	4620      	mov	r0, r4
   2d736:	b006      	add	sp, #24
   2d738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2d73c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   2d740:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   2d744:	4601      	mov	r1, r0
   2d746:	2214      	movs	r2, #20
   2d748:	a801      	add	r0, sp, #4
   2d74a:	f017 fb65 	bl	44e18 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   2d74e:	4632      	mov	r2, r6
   2d750:	2107      	movs	r1, #7
   2d752:	4640      	mov	r0, r8
   2d754:	f019 f8ac 	bl	468b0 <bt_att_create_pdu>
   2d758:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   2d75a:	b1d8      	cbz	r0, 2d794 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   2d75c:	230a      	movs	r3, #10
   2d75e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2d762:	4a0d      	ldr	r2, [pc, #52]	; (2d798 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   2d764:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2d768:	ab01      	add	r3, sp, #4
   2d76a:	4649      	mov	r1, r9
   2d76c:	4638      	mov	r0, r7
	data.value = value;
   2d76e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   2d772:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   2d774:	f018 fd05 	bl	46182 <bt_gatt_foreach_attr>
	if (data.err) {
   2d778:	f89d 4015 	ldrb.w	r4, [sp, #21]
   2d77c:	b12c      	cbz	r4, 2d78a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   2d77e:	9802      	ldr	r0, [sp, #8]
   2d780:	f00f fcdc 	bl	3d13c <net_buf_unref>
	if (!req) {
   2d784:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2d788:	e7ce      	b.n	2d728 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d78a:	9902      	ldr	r1, [sp, #8]
   2d78c:	4628      	mov	r0, r5
   2d78e:	f7ff fcb3 	bl	2d0f8 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   2d792:	e7cf      	b.n	2d734 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   2d794:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   2d796:	e7cd      	b.n	2d734 <att_find_type_req+0x6c>
   2d798:	00046199 	.word	0x00046199

0002d79c <att_find_info_req>:
{
   2d79c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   2d79e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   2d7a0:	881e      	ldrh	r6, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2d7a2:	885c      	ldrh	r4, [r3, #2]
{
   2d7a4:	b085      	sub	sp, #20
   2d7a6:	4605      	mov	r5, r0
	if (!start || !end) {
   2d7a8:	b196      	cbz	r6, 2d7d0 <att_find_info_req+0x34>
   2d7aa:	b184      	cbz	r4, 2d7ce <att_find_info_req+0x32>
	if (start > end) {
   2d7ac:	42b4      	cmp	r4, r6
   2d7ae:	d30f      	bcc.n	2d7d0 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   2d7b0:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   2d7b2:	2210      	movs	r2, #16
   2d7b4:	2100      	movs	r1, #0
   2d7b6:	4668      	mov	r0, sp
   2d7b8:	f017 fb2e 	bl	44e18 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   2d7bc:	2200      	movs	r2, #0
   2d7be:	2105      	movs	r1, #5
   2d7c0:	4638      	mov	r0, r7
   2d7c2:	f019 f875 	bl	468b0 <bt_att_create_pdu>
   2d7c6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   2d7c8:	b958      	cbnz	r0, 2d7e2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   2d7ca:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   2d7cc:	e007      	b.n	2d7de <att_find_info_req+0x42>
			*err = 0U;
   2d7ce:	4626      	mov	r6, r4
	if (!req) {
   2d7d0:	2301      	movs	r3, #1
   2d7d2:	4632      	mov	r2, r6
   2d7d4:	2104      	movs	r1, #4
   2d7d6:	4628      	mov	r0, r5
   2d7d8:	f019 f827 	bl	4682a <send_err_rsp.part.0>
	return 0;
   2d7dc:	2000      	movs	r0, #0
}
   2d7de:	b005      	add	sp, #20
   2d7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   2d7e2:	4621      	mov	r1, r4
   2d7e4:	4a08      	ldr	r2, [pc, #32]	; (2d808 <att_find_info_req+0x6c>)
	data.chan = chan;
   2d7e6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   2d7e8:	466b      	mov	r3, sp
   2d7ea:	4630      	mov	r0, r6
   2d7ec:	f018 fcc9 	bl	46182 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   2d7f0:	9c02      	ldr	r4, [sp, #8]
   2d7f2:	b924      	cbnz	r4, 2d7fe <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   2d7f4:	9801      	ldr	r0, [sp, #4]
   2d7f6:	f00f fca1 	bl	3d13c <net_buf_unref>
	if (!req) {
   2d7fa:	230a      	movs	r3, #10
   2d7fc:	e7e9      	b.n	2d7d2 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   2d7fe:	9901      	ldr	r1, [sp, #4]
   2d800:	4628      	mov	r0, r5
   2d802:	f7ff fc79 	bl	2d0f8 <bt_att_chan_send_rsp.constprop.0>
   2d806:	e7e9      	b.n	2d7dc <att_find_info_req+0x40>
   2d808:	000462c1 	.word	0x000462c1

0002d80c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   2d80c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   2d80e:	2300      	movs	r3, #0
{
   2d810:	4605      	mov	r5, r0
   2d812:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   2d814:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   2d816:	f014 fbe7 	bl	41fe8 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
   2d81a:	4b0b      	ldr	r3, [pc, #44]	; (2d848 <bt_att_req_alloc+0x3c>)
   2d81c:	681b      	ldr	r3, [r3, #0]
   2d81e:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   2d820:	bf04      	itt	eq
   2d822:	2500      	moveq	r5, #0
   2d824:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   2d826:	a901      	add	r1, sp, #4
   2d828:	4808      	ldr	r0, [pc, #32]	; (2d84c <bt_att_req_alloc+0x40>)
   2d82a:	462a      	mov	r2, r5
   2d82c:	4623      	mov	r3, r4
   2d82e:	f013 fc3f 	bl	410b0 <k_mem_slab_alloc>
   2d832:	4601      	mov	r1, r0
   2d834:	b930      	cbnz	r0, 2d844 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   2d836:	9801      	ldr	r0, [sp, #4]
   2d838:	221c      	movs	r2, #28
   2d83a:	f017 faed 	bl	44e18 <memset>

	return req;
   2d83e:	9801      	ldr	r0, [sp, #4]
}
   2d840:	b003      	add	sp, #12
   2d842:	bd30      	pop	{r4, r5, pc}
		return NULL;
   2d844:	2000      	movs	r0, #0
   2d846:	e7fb      	b.n	2d840 <bt_att_req_alloc+0x34>
   2d848:	20001c48 	.word	0x20001c48
   2d84c:	20000af4 	.word	0x20000af4

0002d850 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   2d850:	b507      	push	{r0, r1, r2, lr}
   2d852:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   2d854:	6880      	ldr	r0, [r0, #8]
   2d856:	b120      	cbz	r0, 2d862 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   2d858:	f00f fc70 	bl	3d13c <net_buf_unref>
		req->buf = NULL;
   2d85c:	9b01      	ldr	r3, [sp, #4]
   2d85e:	2200      	movs	r2, #0
   2d860:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   2d862:	4803      	ldr	r0, [pc, #12]	; (2d870 <bt_att_req_free+0x20>)
   2d864:	a901      	add	r1, sp, #4
   2d866:	f01b f823 	bl	488b0 <k_mem_slab_free>
}
   2d86a:	b003      	add	sp, #12
   2d86c:	f85d fb04 	ldr.w	pc, [sp], #4
   2d870:	20000af4 	.word	0x20000af4

0002d874 <att_handle_rsp>:
{
   2d874:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2d878:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   2d87a:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   2d87e:	4688      	mov	r8, r1
   2d880:	4691      	mov	r9, r2
   2d882:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   2d884:	f01b f9de 	bl	48c44 <k_work_cancel_delayable>
	if (!chan->req) {
   2d888:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   2d88c:	2600      	movs	r6, #0
   2d88e:	b1f0      	cbz	r0, 2d8ce <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   2d890:	4b10      	ldr	r3, [pc, #64]	; (2d8d4 <att_handle_rsp+0x60>)
   2d892:	4298      	cmp	r0, r3
   2d894:	d112      	bne.n	2d8bc <att_handle_rsp+0x48>
		chan->req = NULL;
   2d896:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   2d89a:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   2d89c:	6820      	ldr	r0, [r4, #0]
   2d89e:	f018 ff53 	bl	46748 <att_req_send_process>
	if (func) {
   2d8a2:	b13d      	cbz	r5, 2d8b4 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   2d8a4:	6820      	ldr	r0, [r4, #0]
   2d8a6:	f8cd a000 	str.w	sl, [sp]
   2d8aa:	6800      	ldr	r0, [r0, #0]
   2d8ac:	464b      	mov	r3, r9
   2d8ae:	4642      	mov	r2, r8
   2d8b0:	4639      	mov	r1, r7
   2d8b2:	47a8      	blx	r5
}
   2d8b4:	2000      	movs	r0, #0
   2d8b6:	b002      	add	sp, #8
   2d8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   2d8bc:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   2d8be:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   2d8c0:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   2d8c4:	f7ff ffc4 	bl	2d850 <bt_att_req_free>
	chan->req = NULL;
   2d8c8:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
   2d8cc:	e7e6      	b.n	2d89c <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   2d8ce:	4605      	mov	r5, r0
   2d8d0:	e7e4      	b.n	2d89c <att_handle_rsp+0x28>
   2d8d2:	bf00      	nop
   2d8d4:	20001cac 	.word	0x20001cac

0002d8d8 <bt_att_disconnected>:
{
   2d8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   2d8da:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   2d8de:	b085      	sub	sp, #20
   2d8e0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   2d8e2:	2d00      	cmp	r5, #0
   2d8e4:	d04d      	beq.n	2d982 <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   2d8e6:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   2d8ea:	f105 0024 	add.w	r0, r5, #36	; 0x24
   2d8ee:	f018 fe8e 	bl	4660e <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2d8f2:	f1a4 0608 	sub.w	r6, r4, #8
   2d8f6:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   2d8fa:	2200      	movs	r2, #0
   2d8fc:	2300      	movs	r3, #0
   2d8fe:	4638      	mov	r0, r7
   2d900:	f01a f96c 	bl	47bdc <net_buf_get>
   2d904:	4602      	mov	r2, r0
   2d906:	bb18      	cbnz	r0, 2d950 <bt_att_disconnected+0x78>
	if (chan->req) {
   2d908:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   2d90c:	b123      	cbz	r3, 2d918 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2d90e:	4601      	mov	r1, r0
   2d910:	230e      	movs	r3, #14
   2d912:	4630      	mov	r0, r6
   2d914:	f7ff ffae 	bl	2d874 <att_handle_rsp>
	chan->att = NULL;
   2d918:	2300      	movs	r3, #0
   2d91a:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   2d91e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2d920:	2b00      	cmp	r3, #0
   2d922:	d12e      	bne.n	2d982 <bt_att_disconnected+0xaa>
	att_reset(att);
   2d924:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   2d926:	9803      	ldr	r0, [sp, #12]
   2d928:	2200      	movs	r2, #0
   2d92a:	2300      	movs	r3, #0
   2d92c:	300c      	adds	r0, #12
   2d92e:	f01a f955 	bl	47bdc <net_buf_get>
   2d932:	b980      	cbnz	r0, 2d956 <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
   2d934:	9803      	ldr	r0, [sp, #12]
	return list->head;
   2d936:	6845      	ldr	r5, [r0, #4]
   2d938:	b985      	cbnz	r5, 2d95c <bt_att_disconnected+0x84>
	att->conn = NULL;
   2d93a:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   2d93c:	a903      	add	r1, sp, #12
   2d93e:	4812      	ldr	r0, [pc, #72]	; (2d988 <bt_att_disconnected+0xb0>)
   2d940:	f01a ffb6 	bl	488b0 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   2d944:	6820      	ldr	r0, [r4, #0]
}
   2d946:	b005      	add	sp, #20
   2d948:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   2d94c:	f000 bf50 	b.w	2e7f0 <bt_gatt_disconnected>
		net_buf_unref(buf);
   2d950:	f00f fbf4 	bl	3d13c <net_buf_unref>
   2d954:	e7d1      	b.n	2d8fa <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   2d956:	f00f fbf1 	bl	3d13c <net_buf_unref>
   2d95a:	e7e4      	b.n	2d926 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d95c:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   2d95e:	686e      	ldr	r6, [r5, #4]
	return node->next;
   2d960:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2d962:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2d964:	4295      	cmp	r5, r2
	list->tail = node;
   2d966:	bf08      	it	eq
   2d968:	6083      	streq	r3, [r0, #8]
   2d96a:	b136      	cbz	r6, 2d97a <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   2d96c:	69ab      	ldr	r3, [r5, #24]
   2d96e:	9300      	str	r3, [sp, #0]
   2d970:	2300      	movs	r3, #0
   2d972:	6800      	ldr	r0, [r0, #0]
   2d974:	461a      	mov	r2, r3
   2d976:	210e      	movs	r1, #14
   2d978:	47b0      	blx	r6
		bt_att_req_free(req);
   2d97a:	4628      	mov	r0, r5
   2d97c:	f7ff ff68 	bl	2d850 <bt_att_req_free>
   2d980:	e7d8      	b.n	2d934 <bt_att_disconnected+0x5c>
}
   2d982:	b005      	add	sp, #20
   2d984:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d986:	bf00      	nop
   2d988:	20000aa0 	.word	0x20000aa0

0002d98c <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   2d98c:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   2d98e:	4904      	ldr	r1, [pc, #16]	; (2d9a0 <db_hash_set+0x14>)
{
   2d990:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   2d992:	4618      	mov	r0, r3
   2d994:	2210      	movs	r2, #16
   2d996:	47a0      	blx	r4

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   2d998:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2d99c:	bd10      	pop	{r4, pc}
   2d99e:	bf00      	nop
   2d9a0:	20001130 	.word	0x20001130

0002d9a4 <find_cf_cfg>:
{
   2d9a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d9a6:	4d0f      	ldr	r5, [pc, #60]	; (2d9e4 <find_cf_cfg+0x40>)
   2d9a8:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   2d9aa:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   2d9ac:	462e      	mov	r6, r5
		if (!conn) {
   2d9ae:	1c68      	adds	r0, r5, #1
   2d9b0:	b964      	cbnz	r4, 2d9cc <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
   2d9b2:	2207      	movs	r2, #7
   2d9b4:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2d9b6:	9400      	str	r4, [sp, #0]
   2d9b8:	f8cd 4003 	str.w	r4, [sp, #3]
   2d9bc:	f017 fa11 	bl	44de2 <memcmp>
   2d9c0:	b958      	cbnz	r0, 2d9da <find_cf_cfg+0x36>
}
   2d9c2:	4630      	mov	r0, r6
   2d9c4:	b003      	add	sp, #12
   2d9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d9c8:	2701      	movs	r7, #1
   2d9ca:	e7ef      	b.n	2d9ac <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2d9cc:	4602      	mov	r2, r0
   2d9ce:	7829      	ldrb	r1, [r5, #0]
   2d9d0:	4620      	mov	r0, r4
   2d9d2:	f018 fa5b 	bl	45e8c <bt_conn_is_peer_addr_le>
   2d9d6:	2800      	cmp	r0, #0
   2d9d8:	d1f3      	bne.n	2d9c2 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   2d9da:	3510      	adds	r5, #16
   2d9dc:	2f00      	cmp	r7, #0
   2d9de:	d0f3      	beq.n	2d9c8 <find_cf_cfg+0x24>
	return NULL;
   2d9e0:	2600      	movs	r6, #0
   2d9e2:	e7ee      	b.n	2d9c2 <find_cf_cfg+0x1e>
   2d9e4:	20001cd0 	.word	0x20001cd0

0002d9e8 <sc_store>:
{
   2d9e8:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   2d9ea:	4605      	mov	r5, r0
{
   2d9ec:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   2d9ee:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   2d9f2:	4604      	mov	r4, r0
	if (cfg->id) {
   2d9f4:	b19a      	cbz	r2, 2da1e <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   2d9f6:	ae02      	add	r6, sp, #8
   2d9f8:	2104      	movs	r1, #4
   2d9fa:	4630      	mov	r0, r6
   2d9fc:	f015 f873 	bl	42ae6 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   2da00:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   2da02:	462b      	mov	r3, r5
   2da04:	a803      	add	r0, sp, #12
   2da06:	4a07      	ldr	r2, [pc, #28]	; (2da24 <sc_store+0x3c>)
   2da08:	2124      	movs	r1, #36	; 0x24
   2da0a:	f7fd f837 	bl	2aa7c <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   2da0e:	2204      	movs	r2, #4
   2da10:	f104 0108 	add.w	r1, r4, #8
   2da14:	a803      	add	r0, sp, #12
   2da16:	f7fb fe65 	bl	296e4 <settings_save_one>
}
   2da1a:	b00c      	add	sp, #48	; 0x30
   2da1c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   2da1e:	9200      	str	r2, [sp, #0]
   2da20:	e7ef      	b.n	2da02 <sc_store+0x1a>
   2da22:	bf00      	nop
   2da24:	0004b47f 	.word	0x0004b47f

0002da28 <db_hash_commit>:

static int db_hash_commit(void)
{
   2da28:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2da2a:	2108      	movs	r1, #8
   2da2c:	4804      	ldr	r0, [pc, #16]	; (2da40 <db_hash_commit+0x18>)
   2da2e:	f019 f8d5 	bl	46bdc <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   2da32:	2200      	movs	r2, #0
   2da34:	2300      	movs	r3, #0
   2da36:	4803      	ldr	r0, [pc, #12]	; (2da44 <db_hash_commit+0x1c>)
   2da38:	f013 ffec 	bl	41a14 <k_work_reschedule>

	return 0;
}
   2da3c:	2000      	movs	r0, #0
   2da3e:	bd08      	pop	{r3, pc}
   2da40:	20001220 	.word	0x20001220
   2da44:	20001140 	.word	0x20001140

0002da48 <read_ppcp>:
{
   2da48:	b513      	push	{r0, r1, r4, lr}
   2da4a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2da4e:	4c0b      	ldr	r4, [pc, #44]	; (2da7c <read_ppcp+0x34>)
{
   2da50:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2da52:	4a0b      	ldr	r2, [pc, #44]	; (2da80 <read_ppcp+0x38>)
	if (offset > value_len) {
   2da54:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2da56:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   2da5a:	d80b      	bhi.n	2da74 <read_ppcp+0x2c>
	len = MIN(buf_len, value_len - offset);
   2da5c:	f1c1 0408 	rsb	r4, r1, #8
   2da60:	429c      	cmp	r4, r3
   2da62:	bfa8      	it	ge
   2da64:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2da66:	4622      	mov	r2, r4
   2da68:	4469      	add	r1, sp
   2da6a:	f017 f9ca 	bl	44e02 <memcpy>
}
   2da6e:	4620      	mov	r0, r4
   2da70:	b002      	add	sp, #8
   2da72:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2da74:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2da78:	e7f9      	b.n	2da6e <read_ppcp+0x26>
   2da7a:	bf00      	nop
   2da7c:	000c0006 	.word	0x000c0006
   2da80:	0190001e 	.word	0x0190001e

0002da84 <sc_commit>:
{
   2da84:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2da86:	4809      	ldr	r0, [pc, #36]	; (2daac <sc_commit+0x28>)
   2da88:	f06f 0102 	mvn.w	r1, #2
   2da8c:	f019 f90c 	bl	46ca8 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2da90:	4806      	ldr	r0, [pc, #24]	; (2daac <sc_commit+0x28>)
   2da92:	f019 f848 	bl	46b26 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2da96:	07c3      	lsls	r3, r0, #31
   2da98:	d505      	bpl.n	2daa6 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   2da9a:	4805      	ldr	r0, [pc, #20]	; (2dab0 <sc_commit+0x2c>)
   2da9c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2daa0:	2300      	movs	r3, #0
   2daa2:	f013 ffb7 	bl	41a14 <k_work_reschedule>
}
   2daa6:	2000      	movs	r0, #0
   2daa8:	bd08      	pop	{r3, pc}
   2daaa:	bf00      	nop
   2daac:	20001220 	.word	0x20001220
   2dab0:	200011f0 	.word	0x200011f0

0002dab4 <find_cf_cfg_by_addr>:
{
   2dab4:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   2dab6:	4c0e      	ldr	r4, [pc, #56]	; (2daf0 <find_cf_cfg_by_addr+0x3c>)
   2dab8:	7823      	ldrb	r3, [r4, #0]
   2daba:	4283      	cmp	r3, r0
{
   2dabc:	4606      	mov	r6, r0
   2dabe:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   2dac0:	d00a      	beq.n	2dad8 <find_cf_cfg_by_addr+0x24>
   2dac2:	7c23      	ldrb	r3, [r4, #16]
   2dac4:	42b3      	cmp	r3, r6
   2dac6:	d111      	bne.n	2daec <find_cf_cfg_by_addr+0x38>
   2dac8:	490a      	ldr	r1, [pc, #40]	; (2daf4 <find_cf_cfg_by_addr+0x40>)
   2daca:	2207      	movs	r2, #7
   2dacc:	4628      	mov	r0, r5
   2dace:	f017 f988 	bl	44de2 <memcmp>
   2dad2:	b958      	cbnz	r0, 2daec <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   2dad4:	2001      	movs	r0, #1
   2dad6:	e006      	b.n	2dae6 <find_cf_cfg_by_addr+0x32>
   2dad8:	2207      	movs	r2, #7
   2dada:	1c61      	adds	r1, r4, #1
   2dadc:	4628      	mov	r0, r5
   2dade:	f017 f980 	bl	44de2 <memcmp>
			if (id == cf_cfg[i].id &&
   2dae2:	2800      	cmp	r0, #0
   2dae4:	d1ed      	bne.n	2dac2 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
   2dae6:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   2daea:	e000      	b.n	2daee <find_cf_cfg_by_addr+0x3a>
	return NULL;
   2daec:	2000      	movs	r0, #0
}
   2daee:	bd70      	pop	{r4, r5, r6, pc}
   2daf0:	20001cd0 	.word	0x20001cd0
   2daf4:	20001ce1 	.word	0x20001ce1

0002daf8 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   2daf8:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dafa:	6881      	ldr	r1, [r0, #8]
{
   2dafc:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dafe:	4a07      	ldr	r2, [pc, #28]	; (2db1c <remove_peer_from_attr+0x24>)
   2db00:	4291      	cmp	r1, r2
   2db02:	d109      	bne.n	2db18 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   2db04:	791a      	ldrb	r2, [r3, #4]
   2db06:	6819      	ldr	r1, [r3, #0]
   2db08:	68c0      	ldr	r0, [r0, #12]
   2db0a:	f019 f9c1 	bl	46e90 <ccc_find_cfg>
	if (cfg) {
   2db0e:	b118      	cbz	r0, 2db18 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   2db10:	220a      	movs	r2, #10
   2db12:	2100      	movs	r1, #0
   2db14:	f017 f980 	bl	44e18 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   2db18:	2001      	movs	r0, #1
   2db1a:	bd08      	pop	{r3, pc}
   2db1c:	0002dbe5 	.word	0x0002dbe5

0002db20 <ccc_load>:
{
   2db20:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2db22:	4b21      	ldr	r3, [pc, #132]	; (2dba8 <ccc_load+0x88>)
{
   2db24:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2db26:	6882      	ldr	r2, [r0, #8]
   2db28:	429a      	cmp	r2, r3
   2db2a:	d002      	beq.n	2db32 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   2db2c:	2001      	movs	r0, #1
}
   2db2e:	b002      	add	sp, #8
   2db30:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   2db32:	68a3      	ldr	r3, [r4, #8]
   2db34:	68c6      	ldr	r6, [r0, #12]
   2db36:	b94b      	cbnz	r3, 2db4c <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   2db38:	7922      	ldrb	r2, [r4, #4]
   2db3a:	6821      	ldr	r1, [r4, #0]
   2db3c:	4630      	mov	r0, r6
   2db3e:	f019 f9a7 	bl	46e90 <ccc_find_cfg>
	if (!cfg) {
   2db42:	2800      	cmp	r0, #0
   2db44:	d0f2      	beq.n	2db2c <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   2db46:	f019 f8a1 	bl	46c8c <clear_ccc_cfg>
   2db4a:	e7ef      	b.n	2db2c <ccc_load+0xc>
	} else if (!load->count) {
   2db4c:	68e0      	ldr	r0, [r4, #12]
   2db4e:	2800      	cmp	r0, #0
   2db50:	d0ed      	beq.n	2db2e <ccc_load+0xe>
	if (load->entry->handle != handle) {
   2db52:	881b      	ldrh	r3, [r3, #0]
   2db54:	4299      	cmp	r1, r3
   2db56:	d00a      	beq.n	2db6e <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   2db58:	d9e8      	bls.n	2db2c <ccc_load+0xc>
	load->count--;
   2db5a:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   2db5c:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   2db5e:	3801      	subs	r0, #1
	load->entry++;
   2db60:	3304      	adds	r3, #4
	load->count--;
   2db62:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2db64:	3800      	subs	r0, #0
	load->entry++;
   2db66:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   2db68:	bf18      	it	ne
   2db6a:	2001      	movne	r0, #1
   2db6c:	e7df      	b.n	2db2e <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   2db6e:	7922      	ldrb	r2, [r4, #4]
   2db70:	6821      	ldr	r1, [r4, #0]
   2db72:	4630      	mov	r0, r6
   2db74:	f019 f98c 	bl	46e90 <ccc_find_cfg>
	if (!cfg) {
   2db78:	4605      	mov	r5, r0
   2db7a:	b980      	cbnz	r0, 2db9e <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   2db7c:	9000      	str	r0, [sp, #0]
   2db7e:	4602      	mov	r2, r0
   2db80:	f8cd 0003 	str.w	r0, [sp, #3]
   2db84:	4669      	mov	r1, sp
   2db86:	4630      	mov	r0, r6
   2db88:	f019 f982 	bl	46e90 <ccc_find_cfg>
		if (!cfg) {
   2db8c:	4605      	mov	r5, r0
   2db8e:	2800      	cmp	r0, #0
   2db90:	d0e3      	beq.n	2db5a <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   2db92:	6821      	ldr	r1, [r4, #0]
   2db94:	3001      	adds	r0, #1
   2db96:	f019 f830 	bl	46bfa <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   2db9a:	7923      	ldrb	r3, [r4, #4]
   2db9c:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   2db9e:	68a3      	ldr	r3, [r4, #8]
   2dba0:	885b      	ldrh	r3, [r3, #2]
   2dba2:	812b      	strh	r3, [r5, #8]
   2dba4:	e7d9      	b.n	2db5a <ccc_load+0x3a>
   2dba6:	bf00      	nop
   2dba8:	0002dbe5 	.word	0x0002dbe5

0002dbac <ccc_save>:
{
   2dbac:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dbae:	4b0c      	ldr	r3, [pc, #48]	; (2dbe0 <ccc_save+0x34>)
{
   2dbb0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dbb2:	6882      	ldr	r2, [r0, #8]
   2dbb4:	429a      	cmp	r2, r3
{
   2dbb6:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dbb8:	d10f      	bne.n	2dbda <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   2dbba:	7922      	ldrb	r2, [r4, #4]
   2dbbc:	6821      	ldr	r1, [r4, #0]
   2dbbe:	68c0      	ldr	r0, [r0, #12]
   2dbc0:	f019 f966 	bl	46e90 <ccc_find_cfg>
	if (!cfg) {
   2dbc4:	b148      	cbz	r0, 2dbda <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   2dbc6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   2dbca:	8901      	ldrh	r1, [r0, #8]
   2dbcc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   2dbd0:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   2dbd2:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   2dbd4:	8151      	strh	r1, [r2, #10]
	save->count++;
   2dbd6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   2dbda:	2001      	movs	r0, #1
   2dbdc:	bd38      	pop	{r3, r4, r5, pc}
   2dbde:	bf00      	nop
   2dbe0:	0002dbe5 	.word	0x0002dbe5

0002dbe4 <bt_gatt_attr_write_ccc>:
{
   2dbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2dbe8:	4698      	mov	r8, r3
   2dbea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   2dbee:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   2dbf2:	4606      	mov	r6, r0
   2dbf4:	4689      	mov	r9, r1
	if (offset) {
   2dbf6:	2b00      	cmp	r3, #0
   2dbf8:	d15e      	bne.n	2dcb8 <bt_gatt_attr_write_ccc+0xd4>
	if (!len || len > sizeof(uint16_t)) {
   2dbfa:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2dbfe:	2b01      	cmp	r3, #1
   2dc00:	d85d      	bhi.n	2dcbe <bt_gatt_attr_write_ccc+0xda>
		value = *(uint8_t *)buf;
   2dc02:	7817      	ldrb	r7, [r2, #0]
	if (len < sizeof(uint16_t)) {
   2dc04:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   2dc08:	4651      	mov	r1, sl
   2dc0a:	bf14      	ite	ne
   2dc0c:	8817      	ldrhne	r7, [r2, #0]
		value = *(uint8_t *)buf;
   2dc0e:	b2bf      	uxtheq	r7, r7
	cfg = find_ccc_cfg(conn, ccc);
   2dc10:	f019 f94d 	bl	46eae <find_ccc_cfg>
	if (!cfg) {
   2dc14:	4605      	mov	r5, r0
   2dc16:	b980      	cbnz	r0, 2dc3a <bt_gatt_attr_write_ccc+0x56>
		if (!value) {
   2dc18:	b917      	cbnz	r7, 2dc20 <bt_gatt_attr_write_ccc+0x3c>
			return len;
   2dc1a:	4640      	mov	r0, r8
}
   2dc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   2dc20:	4651      	mov	r1, sl
   2dc22:	f019 f944 	bl	46eae <find_ccc_cfg>
		if (!cfg) {
   2dc26:	4605      	mov	r5, r0
   2dc28:	2800      	cmp	r0, #0
   2dc2a:	d04b      	beq.n	2dcc4 <bt_gatt_attr_write_ccc+0xe0>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2dc2c:	f106 0188 	add.w	r1, r6, #136	; 0x88
   2dc30:	3001      	adds	r0, #1
   2dc32:	f018 ffe2 	bl	46bfa <bt_addr_le_copy>
		cfg->id = conn->id;
   2dc36:	7a33      	ldrb	r3, [r6, #8]
   2dc38:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   2dc3a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2dc3e:	bb7b      	cbnz	r3, 2dca0 <bt_gatt_attr_write_ccc+0xbc>
	if (cfg->value != ccc->value) {
   2dc40:	f8ba 300a 	ldrh.w	r3, [sl, #10]
	value_changed = cfg->value != value;
   2dc44:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   2dc46:	812f      	strh	r7, [r5, #8]
	if (cfg->value != ccc->value) {
   2dc48:	42bb      	cmp	r3, r7
   2dc4a:	d003      	beq.n	2dc54 <bt_gatt_attr_write_ccc+0x70>
		gatt_ccc_changed(attr, ccc);
   2dc4c:	4651      	mov	r1, sl
   2dc4e:	4648      	mov	r0, r9
   2dc50:	f018 ff46 	bl	46ae0 <gatt_ccc_changed>
	if (value_changed) {
   2dc54:	42bc      	cmp	r4, r7
   2dc56:	d01d      	beq.n	2dc94 <bt_gatt_attr_write_ccc+0xb0>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   2dc58:	4630      	mov	r0, r6
   2dc5a:	f7fe fda9 	bl	2c7b0 <bt_conn_index>
   2dc5e:	4c1b      	ldr	r4, [pc, #108]	; (2dccc <bt_gatt_attr_write_ccc+0xe8>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   2dc60:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   2dc64:	429e      	cmp	r6, r3
   2dc66:	d015      	beq.n	2dc94 <bt_gatt_attr_write_ccc+0xb0>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2dc68:	7a30      	ldrb	r0, [r6, #8]
   2dc6a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   2dc6e:	f017 fd65 	bl	4573c <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   2dc72:	b178      	cbz	r0, 2dc94 <bt_gatt_attr_write_ccc+0xb0>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   2dc74:	4630      	mov	r0, r6
   2dc76:	f7fe fd9b 	bl	2c7b0 <bt_conn_index>
   2dc7a:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   2dc7c:	4630      	mov	r0, r6
   2dc7e:	f018 f850 	bl	45d22 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   2dc82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   2dc86:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   2dc8a:	2300      	movs	r3, #0
   2dc8c:	f104 0008 	add.w	r0, r4, #8
   2dc90:	f013 fec0 	bl	41a14 <k_work_reschedule>
	if (!value) {
   2dc94:	2f00      	cmp	r7, #0
   2dc96:	d1c0      	bne.n	2dc1a <bt_gatt_attr_write_ccc+0x36>
		clear_ccc_cfg(cfg);
   2dc98:	4628      	mov	r0, r5
   2dc9a:	f018 fff7 	bl	46c8c <clear_ccc_cfg>
   2dc9e:	e7bc      	b.n	2dc1a <bt_gatt_attr_write_ccc+0x36>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   2dca0:	463a      	mov	r2, r7
   2dca2:	4649      	mov	r1, r9
   2dca4:	4630      	mov	r0, r6
   2dca6:	4798      	blx	r3
		if (write < 0) {
   2dca8:	2800      	cmp	r0, #0
   2dcaa:	dbb7      	blt.n	2dc1c <bt_gatt_attr_write_ccc+0x38>
		if (write != sizeof(value) && write != 1) {
   2dcac:	1e44      	subs	r4, r0, #1
   2dcae:	2c01      	cmp	r4, #1
   2dcb0:	d9c6      	bls.n	2dc40 <bt_gatt_attr_write_ccc+0x5c>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   2dcb2:	f06f 000d 	mvn.w	r0, #13
   2dcb6:	e7b1      	b.n	2dc1c <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2dcb8:	f06f 0006 	mvn.w	r0, #6
   2dcbc:	e7ae      	b.n	2dc1c <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2dcbe:	f06f 000c 	mvn.w	r0, #12
   2dcc2:	e7ab      	b.n	2dc1c <bt_gatt_attr_write_ccc+0x38>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2dcc4:	f06f 0010 	mvn.w	r0, #16
   2dcc8:	e7a8      	b.n	2dc1c <bt_gatt_attr_write_ccc+0x38>
   2dcca:	bf00      	nop
   2dccc:	20001198 	.word	0x20001198

0002dcd0 <find_sc_cfg>:
{
   2dcd0:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   2dcd2:	4c0e      	ldr	r4, [pc, #56]	; (2dd0c <find_sc_cfg+0x3c>)
   2dcd4:	7823      	ldrb	r3, [r4, #0]
   2dcd6:	4283      	cmp	r3, r0
{
   2dcd8:	4605      	mov	r5, r0
   2dcda:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   2dcdc:	d00a      	beq.n	2dcf4 <find_sc_cfg+0x24>
   2dcde:	7b23      	ldrb	r3, [r4, #12]
   2dce0:	42ab      	cmp	r3, r5
   2dce2:	d111      	bne.n	2dd08 <find_sc_cfg+0x38>
   2dce4:	480a      	ldr	r0, [pc, #40]	; (2dd10 <find_sc_cfg+0x40>)
   2dce6:	2207      	movs	r2, #7
   2dce8:	4631      	mov	r1, r6
   2dcea:	f017 f87a 	bl	44de2 <memcmp>
   2dcee:	b958      	cbnz	r0, 2dd08 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2dcf0:	2001      	movs	r0, #1
   2dcf2:	e005      	b.n	2dd00 <find_sc_cfg+0x30>
   2dcf4:	2207      	movs	r2, #7
   2dcf6:	1c60      	adds	r0, r4, #1
   2dcf8:	f017 f873 	bl	44de2 <memcmp>
		if (id == sc_cfg[i].id &&
   2dcfc:	2800      	cmp	r0, #0
   2dcfe:	d1ee      	bne.n	2dcde <find_sc_cfg+0xe>
			return &sc_cfg[i];
   2dd00:	230c      	movs	r3, #12
   2dd02:	fb03 4000 	mla	r0, r3, r0, r4
   2dd06:	e000      	b.n	2dd0a <find_sc_cfg+0x3a>
	return NULL;
   2dd08:	2000      	movs	r0, #0
}
   2dd0a:	bd70      	pop	{r4, r5, r6, pc}
   2dd0c:	20003b48 	.word	0x20003b48
   2dd10:	20003b55 	.word	0x20003b55

0002dd14 <bt_gatt_clear_sc>:
{
   2dd14:	b570      	push	{r4, r5, r6, lr}
   2dd16:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2dd18:	f7ff ffda 	bl	2dcd0 <find_sc_cfg>
	if (!cfg) {
   2dd1c:	4604      	mov	r4, r0
   2dd1e:	b1b8      	cbz	r0, 2dd50 <bt_gatt_clear_sc+0x3c>
		if (cfg->id) {
   2dd20:	4605      	mov	r5, r0
   2dd22:	f815 2b01 	ldrb.w	r2, [r5], #1
   2dd26:	b1b2      	cbz	r2, 2dd56 <bt_gatt_clear_sc+0x42>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   2dd28:	ae02      	add	r6, sp, #8
   2dd2a:	2104      	movs	r1, #4
   2dd2c:	4630      	mov	r0, r6
   2dd2e:	f014 feda 	bl	42ae6 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   2dd32:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   2dd34:	4a09      	ldr	r2, [pc, #36]	; (2dd5c <bt_gatt_clear_sc+0x48>)
   2dd36:	2124      	movs	r1, #36	; 0x24
   2dd38:	462b      	mov	r3, r5
   2dd3a:	a803      	add	r0, sp, #12
   2dd3c:	f7fc fe9e 	bl	2aa7c <bt_settings_encode_key>
		err = settings_delete(key);
   2dd40:	a803      	add	r0, sp, #12
   2dd42:	f015 fd6b 	bl	4381c <settings_delete>
	memset(cfg, 0, sizeof(*cfg));
   2dd46:	220c      	movs	r2, #12
   2dd48:	2100      	movs	r1, #0
   2dd4a:	4620      	mov	r0, r4
   2dd4c:	f017 f864 	bl	44e18 <memset>
}
   2dd50:	2000      	movs	r0, #0
   2dd52:	b00c      	add	sp, #48	; 0x30
   2dd54:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   2dd56:	9200      	str	r2, [sp, #0]
   2dd58:	e7ec      	b.n	2dd34 <bt_gatt_clear_sc+0x20>
   2dd5a:	bf00      	nop
   2dd5c:	0004b47f 	.word	0x0004b47f

0002dd60 <disconnected_cb>:
{
   2dd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dd64:	4b1f      	ldr	r3, [pc, #124]	; (2dde4 <disconnected_cb+0x84>)
{
   2dd66:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dd68:	6882      	ldr	r2, [r0, #8]
   2dd6a:	429a      	cmp	r2, r3
{
   2dd6c:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2dd6e:	d102      	bne.n	2dd76 <disconnected_cb+0x16>
	ccc = attr->user_data;
   2dd70:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   2dd72:	8963      	ldrh	r3, [r4, #10]
   2dd74:	b9c3      	cbnz	r3, 2dda8 <disconnected_cb+0x48>
}
   2dd76:	2001      	movs	r0, #1
   2dd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2dd7c:	f105 0888 	add.w	r8, r5, #136	; 0x88
   2dd80:	7a28      	ldrb	r0, [r5, #8]
   2dd82:	4641      	mov	r1, r8
   2dd84:	f017 fcda 	bl	4573c <bt_addr_le_is_bonded>
   2dd88:	b948      	cbnz	r0, 2dd9e <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
   2dd8a:	4b17      	ldr	r3, [pc, #92]	; (2dde8 <disconnected_cb+0x88>)
   2dd8c:	429c      	cmp	r4, r3
   2dd8e:	d102      	bne.n	2dd96 <disconnected_cb+0x36>
					sc_clear(conn);
   2dd90:	4628      	mov	r0, r5
   2dd92:	f019 f8fa 	bl	46f8a <sc_clear>
				clear_ccc_cfg(cfg);
   2dd96:	4620      	mov	r0, r4
   2dd98:	f018 ff78 	bl	46c8c <clear_ccc_cfg>
	if (!value_used) {
   2dd9c:	e019      	b.n	2ddd2 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2dd9e:	4641      	mov	r1, r8
   2dda0:	4638      	mov	r0, r7
   2dda2:	f018 ff2a 	bl	46bfa <bt_addr_le_copy>
	if (!value_used) {
   2dda6:	e014      	b.n	2ddd2 <disconnected_cb+0x72>
		if (!cfg->value) {
   2dda8:	8923      	ldrh	r3, [r4, #8]
   2ddaa:	b193      	cbz	r3, 2ddd2 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2ddac:	4627      	mov	r7, r4
   2ddae:	4628      	mov	r0, r5
   2ddb0:	f817 1b01 	ldrb.w	r1, [r7], #1
   2ddb4:	463a      	mov	r2, r7
   2ddb6:	f018 f869 	bl	45e8c <bt_conn_is_peer_addr_le>
   2ddba:	2800      	cmp	r0, #0
   2ddbc:	d1de      	bne.n	2dd7c <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2ddbe:	7820      	ldrb	r0, [r4, #0]
   2ddc0:	4639      	mov	r1, r7
   2ddc2:	f7fe fe29 	bl	2ca18 <bt_conn_lookup_addr_le>
			if (tmp) {
   2ddc6:	b120      	cbz	r0, 2ddd2 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
   2ddc8:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
   2ddca:	f017 ffc5 	bl	45d58 <bt_conn_unref>
	if (!value_used) {
   2ddce:	2d07      	cmp	r5, #7
   2ddd0:	d0d1      	beq.n	2dd76 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   2ddd2:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   2ddd4:	2100      	movs	r1, #0
   2ddd6:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   2ddd8:	2b00      	cmp	r3, #0
   2ddda:	d0cc      	beq.n	2dd76 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   2dddc:	4630      	mov	r0, r6
   2ddde:	4798      	blx	r3
   2dde0:	e7c9      	b.n	2dd76 <disconnected_cb+0x16>
   2dde2:	bf00      	nop
   2dde4:	0002dbe5 	.word	0x0002dbe5
   2dde8:	20000404 	.word	0x20000404

0002ddec <sc_indicate_rsp>:
{
   2ddec:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ddee:	f06f 0102 	mvn.w	r1, #2
   2ddf2:	4604      	mov	r4, r0
   2ddf4:	480d      	ldr	r0, [pc, #52]	; (2de2c <sc_indicate_rsp+0x40>)
   2ddf6:	f018 ff57 	bl	46ca8 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ddfa:	480c      	ldr	r0, [pc, #48]	; (2de2c <sc_indicate_rsp+0x40>)
   2ddfc:	f018 fe93 	bl	46b26 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2de00:	07c2      	lsls	r2, r0, #31
   2de02:	d504      	bpl.n	2de0e <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   2de04:	480a      	ldr	r0, [pc, #40]	; (2de30 <sc_indicate_rsp+0x44>)
   2de06:	2200      	movs	r2, #0
   2de08:	2300      	movs	r3, #0
   2de0a:	f013 fe03 	bl	41a14 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   2de0e:	4620      	mov	r0, r4
   2de10:	f7ff fdc8 	bl	2d9a4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2de14:	b140      	cbz	r0, 2de28 <sc_indicate_rsp+0x3c>
   2de16:	7a03      	ldrb	r3, [r0, #8]
   2de18:	07db      	lsls	r3, r3, #31
   2de1a:	d505      	bpl.n	2de28 <sc_indicate_rsp+0x3c>
}
   2de1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2de20:	2101      	movs	r1, #1
   2de22:	300c      	adds	r0, #12
   2de24:	f018 beda 	b.w	46bdc <atomic_or>
   2de28:	bd10      	pop	{r4, pc}
   2de2a:	bf00      	nop
   2de2c:	20001220 	.word	0x20001220
   2de30:	200011f0 	.word	0x200011f0

0002de34 <bt_gatt_init>:
{
   2de34:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2de36:	4b24      	ldr	r3, [pc, #144]	; (2dec8 <bt_gatt_init+0x94>)
   2de38:	f3bf 8f5b 	dmb	ish
   2de3c:	2201      	movs	r2, #1
   2de3e:	e853 1f00 	ldrex	r1, [r3]
   2de42:	2900      	cmp	r1, #0
   2de44:	d103      	bne.n	2de4e <bt_gatt_init+0x1a>
   2de46:	e843 2000 	strex	r0, r2, [r3]
   2de4a:	2800      	cmp	r0, #0
   2de4c:	d1f7      	bne.n	2de3e <bt_gatt_init+0xa>
   2de4e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   2de52:	d138      	bne.n	2dec6 <bt_gatt_init+0x92>
   2de54:	f3bf 8f5b 	dmb	ish
   2de58:	4b1c      	ldr	r3, [pc, #112]	; (2decc <bt_gatt_init+0x98>)
   2de5a:	e853 1f00 	ldrex	r1, [r3]
   2de5e:	2900      	cmp	r1, #0
   2de60:	d103      	bne.n	2de6a <bt_gatt_init+0x36>
   2de62:	e843 2000 	strex	r0, r2, [r3]
   2de66:	2800      	cmp	r0, #0
   2de68:	d1f7      	bne.n	2de5a <bt_gatt_init+0x26>
   2de6a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   2de6e:	d108      	bne.n	2de82 <bt_gatt_init+0x4e>
   2de70:	4917      	ldr	r1, [pc, #92]	; (2ded0 <bt_gatt_init+0x9c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2de72:	4a18      	ldr	r2, [pc, #96]	; (2ded4 <bt_gatt_init+0xa0>)
   2de74:	880b      	ldrh	r3, [r1, #0]
   2de76:	4c18      	ldr	r4, [pc, #96]	; (2ded8 <bt_gatt_init+0xa4>)
	if (!atomic_cas(&service_init, 0, 1)) {
   2de78:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2de7a:	42a2      	cmp	r2, r4
   2de7c:	d31d      	bcc.n	2deba <bt_gatt_init+0x86>
   2de7e:	b100      	cbz	r0, 2de82 <bt_gatt_init+0x4e>
   2de80:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   2de82:	4b16      	ldr	r3, [pc, #88]	; (2dedc <bt_gatt_init+0xa8>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   2de84:	4916      	ldr	r1, [pc, #88]	; (2dee0 <bt_gatt_init+0xac>)
   2de86:	4817      	ldr	r0, [pc, #92]	; (2dee4 <bt_gatt_init+0xb0>)
   2de88:	2200      	movs	r2, #0
	list->tail = NULL;
   2de8a:	e9c3 2200 	strd	r2, r2, [r3]
   2de8e:	f01a fecd 	bl	48c2c <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   2de92:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2de96:	2300      	movs	r3, #0
   2de98:	4812      	ldr	r0, [pc, #72]	; (2dee4 <bt_gatt_init+0xb0>)
   2de9a:	f013 fd87 	bl	419ac <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   2de9e:	4912      	ldr	r1, [pc, #72]	; (2dee8 <bt_gatt_init+0xb4>)
   2dea0:	4812      	ldr	r0, [pc, #72]	; (2deec <bt_gatt_init+0xb8>)
   2dea2:	f01a fec3 	bl	48c2c <k_work_init_delayable>
   2dea6:	2102      	movs	r1, #2
   2dea8:	4811      	ldr	r0, [pc, #68]	; (2def0 <bt_gatt_init+0xbc>)
   2deaa:	f018 fe97 	bl	46bdc <atomic_or>
}
   2deae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   2deb2:	4910      	ldr	r1, [pc, #64]	; (2def4 <bt_gatt_init+0xc0>)
   2deb4:	4810      	ldr	r0, [pc, #64]	; (2def8 <bt_gatt_init+0xc4>)
   2deb6:	f01a beb9 	b.w	48c2c <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   2deba:	6850      	ldr	r0, [r2, #4]
   2debc:	4403      	add	r3, r0
   2debe:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   2dec0:	3208      	adds	r2, #8
   2dec2:	2001      	movs	r0, #1
   2dec4:	e7d9      	b.n	2de7a <bt_gatt_init+0x46>
}
   2dec6:	bd10      	pop	{r4, pc}
   2dec8:	20001cf0 	.word	0x20001cf0
   2decc:	20001d0c 	.word	0x20001d0c
   2ded0:	20003b46 	.word	0x20003b46
   2ded4:	00049680 	.word	0x00049680
   2ded8:	000496a8 	.word	0x000496a8
   2dedc:	20001cc8 	.word	0x20001cc8
   2dee0:	0002e085 	.word	0x0002e085
   2dee4:	20001140 	.word	0x20001140
   2dee8:	0002e369 	.word	0x0002e369
   2deec:	200011f0 	.word	0x200011f0
   2def0:	20001220 	.word	0x20001220
   2def4:	00047299 	.word	0x00047299
   2def8:	200011a0 	.word	0x200011a0

0002defc <bt_gatt_attr_get_handle>:
{
   2defc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   2df00:	4603      	mov	r3, r0
   2df02:	b148      	cbz	r0, 2df18 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   2df04:	8a00      	ldrh	r0, [r0, #16]
   2df06:	b938      	cbnz	r0, 2df18 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2df08:	4912      	ldr	r1, [pc, #72]	; (2df54 <bt_gatt_attr_get_handle+0x58>)
   2df0a:	f8df e04c 	ldr.w	lr, [pc, #76]	; 2df58 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   2df0e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2df10:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2df14:	4571      	cmp	r1, lr
   2df16:	d301      	bcc.n	2df1c <bt_gatt_attr_get_handle+0x20>
}
   2df18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2df1c:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   2df20:	42bb      	cmp	r3, r7
   2df22:	d304      	bcc.n	2df2e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   2df24:	fb0c 7206 	mla	r2, ip, r6, r7
   2df28:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   2df2a:	4293      	cmp	r3, r2
   2df2c:	d90e      	bls.n	2df4c <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   2df2e:	4434      	add	r4, r6
   2df30:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2df32:	3108      	adds	r1, #8
   2df34:	4614      	mov	r4, r2
   2df36:	e7ed      	b.n	2df14 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   2df38:	fb0c 7805 	mla	r8, ip, r5, r7
   2df3c:	4543      	cmp	r3, r8
   2df3e:	d007      	beq.n	2df50 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   2df40:	3501      	adds	r5, #1
   2df42:	1962      	adds	r2, r4, r5
   2df44:	42b5      	cmp	r5, r6
   2df46:	b292      	uxth	r2, r2
   2df48:	d1f6      	bne.n	2df38 <bt_gatt_attr_get_handle+0x3c>
   2df4a:	e7f2      	b.n	2df32 <bt_gatt_attr_get_handle+0x36>
   2df4c:	2500      	movs	r5, #0
   2df4e:	e7f8      	b.n	2df42 <bt_gatt_attr_get_handle+0x46>
   2df50:	4610      	mov	r0, r2
   2df52:	e7e1      	b.n	2df18 <bt_gatt_attr_get_handle+0x1c>
   2df54:	00049680 	.word	0x00049680
   2df58:	000496a8 	.word	0x000496a8

0002df5c <bt_gatt_foreach_attr_type>:
{
   2df5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2df60:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   2df64:	9100      	str	r1, [sp, #0]
   2df66:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   2df68:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2df6c:	2d00      	cmp	r5, #0
   2df6e:	bf08      	it	eq
   2df70:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   2df72:	4b24      	ldr	r3, [pc, #144]	; (2e004 <bt_gatt_foreach_attr_type+0xa8>)
   2df74:	881b      	ldrh	r3, [r3, #0]
   2df76:	4283      	cmp	r3, r0
{
   2df78:	4607      	mov	r7, r0
   2df7a:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   2df7c:	d23c      	bcs.n	2dff8 <bt_gatt_foreach_attr_type+0x9c>
}
   2df7e:	b003      	add	sp, #12
   2df80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   2df84:	6873      	ldr	r3, [r6, #4]
   2df86:	4423      	add	r3, r4
   2df88:	42bb      	cmp	r3, r7
   2df8a:	d232      	bcs.n	2dff2 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   2df8c:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2df8e:	3608      	adds	r6, #8
   2df90:	4b1d      	ldr	r3, [pc, #116]	; (2e008 <bt_gatt_foreach_attr_type+0xac>)
   2df92:	429e      	cmp	r6, r3
   2df94:	d3f6      	bcc.n	2df84 <bt_gatt_foreach_attr_type+0x28>
   2df96:	e7f2      	b.n	2df7e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2df98:	5889      	ldr	r1, [r1, r2]
   2df9a:	9301      	str	r3, [sp, #4]
   2df9c:	4640      	mov	r0, r8
   2df9e:	f017 f81e 	bl	44fde <bt_uuid_cmp>
   2dfa2:	9b01      	ldr	r3, [sp, #4]
   2dfa4:	b190      	cbz	r0, 2dfcc <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   2dfa6:	3401      	adds	r4, #1
   2dfa8:	f10a 0a01 	add.w	sl, sl, #1
   2dfac:	b2a4      	uxth	r4, r4
   2dfae:	6873      	ldr	r3, [r6, #4]
   2dfb0:	4553      	cmp	r3, sl
   2dfb2:	d9ec      	bls.n	2df8e <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   2dfb4:	9b00      	ldr	r3, [sp, #0]
   2dfb6:	429c      	cmp	r4, r3
   2dfb8:	d8e1      	bhi.n	2df7e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   2dfba:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2dfbc:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   2dfbe:	d3f2      	bcc.n	2dfa6 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2dfc0:	fb0b f20a 	mul.w	r2, fp, sl
   2dfc4:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2dfc6:	f1b8 0f00 	cmp.w	r8, #0
   2dfca:	d1e5      	bne.n	2df98 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   2dfcc:	f1b9 0f00 	cmp.w	r9, #0
   2dfd0:	d10b      	bne.n	2dfea <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   2dfd2:	3d01      	subs	r5, #1
   2dfd4:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   2dfd6:	4618      	mov	r0, r3
   2dfd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2dfda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2dfdc:	4621      	mov	r1, r4
   2dfde:	4798      	blx	r3
	if (!*num_matches) {
   2dfe0:	2d00      	cmp	r5, #0
   2dfe2:	d0cc      	beq.n	2df7e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2dfe4:	2800      	cmp	r0, #0
   2dfe6:	d1de      	bne.n	2dfa6 <bt_gatt_foreach_attr_type+0x4a>
   2dfe8:	e7c9      	b.n	2df7e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   2dfea:	68da      	ldr	r2, [r3, #12]
   2dfec:	4591      	cmp	r9, r2
   2dfee:	d1da      	bne.n	2dfa6 <bt_gatt_foreach_attr_type+0x4a>
   2dff0:	e7ef      	b.n	2dfd2 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   2dff2:	f04f 0a00 	mov.w	sl, #0
   2dff6:	e7da      	b.n	2dfae <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2dff8:	4e04      	ldr	r6, [pc, #16]	; (2e00c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   2dffa:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   2dffc:	f04f 0b14 	mov.w	fp, #20
   2e000:	e7c6      	b.n	2df90 <bt_gatt_foreach_attr_type+0x34>
   2e002:	bf00      	nop
   2e004:	20003b46 	.word	0x20003b46
   2e008:	000496a8 	.word	0x000496a8
   2e00c:	00049680 	.word	0x00049680

0002e010 <db_hash_gen>:
{
   2e010:	b530      	push	{r4, r5, lr}
   2e012:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   2e014:	2300      	movs	r3, #0
{
   2e016:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   2e018:	aa1c      	add	r2, sp, #112	; 0x70
   2e01a:	4669      	mov	r1, sp
   2e01c:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   2e01e:	e9cd 3300 	strd	r3, r3, [sp]
   2e022:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   2e026:	f016 fd5a 	bl	44ade <tc_cmac_setup>
   2e02a:	b308      	cbz	r0, 2e070 <db_hash_gen+0x60>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   2e02c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e030:	2001      	movs	r0, #1
   2e032:	4a10      	ldr	r2, [pc, #64]	; (2e074 <db_hash_gen+0x64>)
   2e034:	ab04      	add	r3, sp, #16
   2e036:	f019 f89f 	bl	47178 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   2e03a:	480f      	ldr	r0, [pc, #60]	; (2e078 <db_hash_gen+0x68>)
   2e03c:	a904      	add	r1, sp, #16
   2e03e:	f016 fde4 	bl	44c0a <tc_cmac_final>
   2e042:	b1a8      	cbz	r0, 2e070 <db_hash_gen+0x60>
   2e044:	4b0c      	ldr	r3, [pc, #48]	; (2e078 <db_hash_gen+0x68>)
   2e046:	2208      	movs	r2, #8
   2e048:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   2e04c:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2e04e:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
   2e052:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   2e056:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2e058:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   2e05a:	d1f7      	bne.n	2e04c <db_hash_gen+0x3c>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   2e05c:	b124      	cbz	r4, 2e068 <db_hash_gen+0x58>
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   2e05e:	4906      	ldr	r1, [pc, #24]	; (2e078 <db_hash_gen+0x68>)
   2e060:	4806      	ldr	r0, [pc, #24]	; (2e07c <db_hash_gen+0x6c>)
   2e062:	2210      	movs	r2, #16
   2e064:	f7fb fb3e 	bl	296e4 <settings_save_one>
   2e068:	4805      	ldr	r0, [pc, #20]	; (2e080 <db_hash_gen+0x70>)
   2e06a:	2104      	movs	r1, #4
   2e06c:	f018 fdb6 	bl	46bdc <atomic_or>
}
   2e070:	b049      	add	sp, #292	; 0x124
   2e072:	bd30      	pop	{r4, r5, pc}
   2e074:	00046b33 	.word	0x00046b33
   2e078:	20001120 	.word	0x20001120
   2e07c:	0004b467 	.word	0x0004b467
   2e080:	20001220 	.word	0x20001220

0002e084 <db_hash_process>:
{
   2e084:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e086:	4829      	ldr	r0, [pc, #164]	; (2e12c <db_hash_process+0xa8>)
   2e088:	f06f 0108 	mvn.w	r1, #8
   2e08c:	f018 fe0c 	bl	46ca8 <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   2e090:	0700      	lsls	r0, r0, #28
   2e092:	d545      	bpl.n	2e120 <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e094:	4825      	ldr	r0, [pc, #148]	; (2e12c <db_hash_process+0xa8>)
   2e096:	f018 fd46 	bl	46b26 <atomic_get>
   2e09a:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   2e09c:	0759      	lsls	r1, r3, #29
   2e09e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   2e0a2:	d401      	bmi.n	2e0a8 <db_hash_process+0x24>
			db_hash_gen(false);
   2e0a4:	f7ff ffb4 	bl	2e010 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   2e0a8:	4921      	ldr	r1, [pc, #132]	; (2e130 <db_hash_process+0xac>)
   2e0aa:	2210      	movs	r2, #16
   2e0ac:	1888      	adds	r0, r1, r2
   2e0ae:	f016 fe98 	bl	44de2 <memcmp>
   2e0b2:	b948      	cbnz	r0, 2e0c8 <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   2e0b4:	481f      	ldr	r0, [pc, #124]	; (2e134 <db_hash_process+0xb0>)
   2e0b6:	f01a fdc5 	bl	48c44 <k_work_cancel_delayable>
}
   2e0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e0be:	481b      	ldr	r0, [pc, #108]	; (2e12c <db_hash_process+0xa8>)
   2e0c0:	f06f 0101 	mvn.w	r1, #1
   2e0c4:	f018 bdf0 	b.w	46ca8 <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e0c8:	4c1b      	ldr	r4, [pc, #108]	; (2e138 <db_hash_process+0xb4>)
   2e0ca:	2101      	movs	r1, #1
   2e0cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2e0d0:	f018 fd84 	bl	46bdc <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   2e0d4:	07c2      	lsls	r2, r0, #31
   2e0d6:	d413      	bmi.n	2e100 <db_hash_process+0x7c>
		gatt_sc.start = start;
   2e0d8:	4b18      	ldr	r3, [pc, #96]	; (2e13c <db_hash_process+0xb8>)
   2e0da:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e0dc:	4813      	ldr	r0, [pc, #76]	; (2e12c <db_hash_process+0xa8>)
   2e0de:	f018 fd22 	bl	46b26 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   2e0e2:	0783      	lsls	r3, r0, #30
   2e0e4:	d405      	bmi.n	2e0f2 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   2e0e6:	4813      	ldr	r0, [pc, #76]	; (2e134 <db_hash_process+0xb0>)
   2e0e8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2e0ec:	2300      	movs	r3, #0
   2e0ee:	f013 fc91 	bl	41a14 <k_work_reschedule>
}
   2e0f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   2e0f6:	490e      	ldr	r1, [pc, #56]	; (2e130 <db_hash_process+0xac>)
   2e0f8:	4811      	ldr	r0, [pc, #68]	; (2e140 <db_hash_process+0xbc>)
   2e0fa:	2210      	movs	r2, #16
   2e0fc:	f7fb baf2 	b.w	296e4 <settings_save_one>
	if (new_start >= *start && new_end <= *end) {
   2e100:	8b23      	ldrh	r3, [r4, #24]
   2e102:	8b62      	ldrh	r2, [r4, #26]
   2e104:	2b01      	cmp	r3, #1
   2e106:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2e10a:	d805      	bhi.n	2e118 <db_hash_process+0x94>
   2e10c:	429a      	cmp	r2, r3
   2e10e:	d0f0      	beq.n	2e0f2 <db_hash_process+0x6e>
		*end = new_end;
   2e110:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2e114:	8363      	strh	r3, [r4, #26]
   2e116:	e7e1      	b.n	2e0dc <db_hash_process+0x58>
	if (*end < new_end) {
   2e118:	429a      	cmp	r2, r3
		*start = new_start;
   2e11a:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   2e11c:	d0de      	beq.n	2e0dc <db_hash_process+0x58>
   2e11e:	e7f7      	b.n	2e110 <db_hash_process+0x8c>
}
   2e120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   2e124:	2001      	movs	r0, #1
   2e126:	f7ff bf73 	b.w	2e010 <db_hash_gen>
   2e12a:	bf00      	nop
   2e12c:	20001220 	.word	0x20001220
   2e130:	20001120 	.word	0x20001120
   2e134:	200011f0 	.word	0x200011f0
   2e138:	200011d0 	.word	0x200011d0
   2e13c:	ffff0001 	.word	0xffff0001
   2e140:	0004b467 	.word	0x0004b467

0002e144 <ccc_set_direct>:
{
   2e144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e148:	b0b8      	sub	sp, #224	; 0xe0
   2e14a:	460c      	mov	r4, r1
   2e14c:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   2e14e:	4921      	ldr	r1, [pc, #132]	; (2e1d4 <ccc_set_direct+0x90>)
   2e150:	983e      	ldr	r0, [sp, #248]	; 0xf8
   2e152:	466a      	mov	r2, sp
{
   2e154:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   2e156:	f015 fb65 	bl	43824 <settings_name_steq>
   2e15a:	2800      	cmp	r0, #0
   2e15c:	d037      	beq.n	2e1ce <ccc_set_direct+0x8a>
		return ccc_set(name, len, read_cb, cb_arg);
   2e15e:	9d00      	ldr	r5, [sp, #0]
		settings_name_next(name, &next);
   2e160:	a901      	add	r1, sp, #4
   2e162:	4628      	mov	r0, r5
   2e164:	f015 fb81 	bl	4386a <settings_name_next>
		if (!name) {
   2e168:	b165      	cbz	r5, 2e184 <ccc_set_direct+0x40>
		} else if (!next) {
   2e16a:	9801      	ldr	r0, [sp, #4]
   2e16c:	b970      	cbnz	r0, 2e18c <ccc_set_direct+0x48>
		err = bt_settings_decode_key(name, &addr);
   2e16e:	f10d 0808 	add.w	r8, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   2e172:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   2e174:	4628      	mov	r0, r5
   2e176:	4641      	mov	r1, r8
			load.addr_with_id.id = BT_ID_DEFAULT;
   2e178:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   2e17c:	f016 ff09 	bl	44f92 <bt_settings_decode_key>
		if (err) {
   2e180:	4605      	mov	r5, r0
   2e182:	b150      	cbz	r0, 2e19a <ccc_set_direct+0x56>
			return -EINVAL;
   2e184:	f06f 0415 	mvn.w	r4, #21
   2e188:	4625      	mov	r5, r4
   2e18a:	e01a      	b.n	2e1c2 <ccc_set_direct+0x7e>
			unsigned long next_id = strtoul(next, NULL, 10);
   2e18c:	220a      	movs	r2, #10
   2e18e:	2100      	movs	r1, #0
   2e190:	f016 fd81 	bl	44c96 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   2e194:	2800      	cmp	r0, #0
   2e196:	d0ea      	beq.n	2e16e <ccc_set_direct+0x2a>
   2e198:	e7f4      	b.n	2e184 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   2e19a:	f8cd 8010 	str.w	r8, [sp, #16]
		if (len_rd) {
   2e19e:	b1a4      	cbz	r4, 2e1ca <ccc_set_direct+0x86>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   2e1a0:	22c0      	movs	r2, #192	; 0xc0
   2e1a2:	a908      	add	r1, sp, #32
   2e1a4:	4638      	mov	r0, r7
   2e1a6:	47b0      	blx	r6
			if (len < 0) {
   2e1a8:	1e04      	subs	r4, r0, #0
   2e1aa:	dbed      	blt.n	2e188 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   2e1ac:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   2e1ae:	ab08      	add	r3, sp, #32
			load.count = len / sizeof(*ccc_store);
   2e1b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   2e1b4:	4a08      	ldr	r2, [pc, #32]	; (2e1d8 <ccc_set_direct+0x94>)
   2e1b6:	ab04      	add	r3, sp, #16
   2e1b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e1bc:	2001      	movs	r0, #1
   2e1be:	f018 ffdb 	bl	47178 <bt_gatt_foreach_attr>
}
   2e1c2:	4628      	mov	r0, r5
   2e1c4:	b038      	add	sp, #224	; 0xe0
   2e1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e1ca:	4623      	mov	r3, r4
   2e1cc:	e7f0      	b.n	2e1b0 <ccc_set_direct+0x6c>
			return -EINVAL;
   2e1ce:	f06f 0515 	mvn.w	r5, #21
   2e1d2:	e7f6      	b.n	2e1c2 <ccc_set_direct+0x7e>
   2e1d4:	0004b46f 	.word	0x0004b46f
   2e1d8:	0002db21 	.word	0x0002db21

0002e1dc <gatt_indicate>:
{
   2e1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e1e0:	4615      	mov	r5, r2
   2e1e2:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   2e1e4:	2214      	movs	r2, #20
   2e1e6:	6869      	ldr	r1, [r5, #4]
{
   2e1e8:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   2e1ea:	f018 ffd0 	bl	4718e <bt_gatt_check_perm>
   2e1ee:	4607      	mov	r7, r0
   2e1f0:	2800      	cmp	r0, #0
   2e1f2:	d13c      	bne.n	2e26e <gatt_indicate+0x92>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2e1f4:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2e1f8:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   2e1fa:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2e1fc:	f7ff fb06 	bl	2d80c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   2e200:	3602      	adds	r6, #2
	if (!req) {
   2e202:	4604      	mov	r4, r0
   2e204:	b920      	cbnz	r0, 2e210 <gatt_indicate+0x34>
		return -ENOMEM;
   2e206:	f06f 050b 	mvn.w	r5, #11
}
   2e20a:	4628      	mov	r0, r5
   2e20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   2e210:	4b18      	ldr	r3, [pc, #96]	; (2e274 <gatt_indicate+0x98>)
	req->len = len;
   2e212:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   2e214:	211d      	movs	r1, #29
   2e216:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   2e218:	60c7      	str	r7, [r0, #12]
	req->func = func;
   2e21a:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   2e21c:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   2e21e:	4632      	mov	r2, r6
   2e220:	4640      	mov	r0, r8
   2e222:	f018 fb45 	bl	468b0 <bt_att_create_pdu>
	if (!buf) {
   2e226:	4606      	mov	r6, r0
   2e228:	b918      	cbnz	r0, 2e232 <gatt_indicate+0x56>
		bt_att_req_free(req);
   2e22a:	4620      	mov	r0, r4
   2e22c:	f7ff fb10 	bl	2d850 <bt_att_req_free>
   2e230:	e7e9      	b.n	2e206 <gatt_indicate+0x2a>
	return net_buf_simple_add(&buf->b, len);
   2e232:	f100 0a08 	add.w	sl, r0, #8
   2e236:	2102      	movs	r1, #2
   2e238:	4650      	mov	r0, sl
   2e23a:	f019 fd2c 	bl	47c96 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   2e23e:	4607      	mov	r7, r0
   2e240:	8aa9      	ldrh	r1, [r5, #20]
   2e242:	f827 9b02 	strh.w	r9, [r7], #2
   2e246:	4650      	mov	r0, sl
   2e248:	f019 fd25 	bl	47c96 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   2e24c:	8aaa      	ldrh	r2, [r5, #20]
   2e24e:	6929      	ldr	r1, [r5, #16]
   2e250:	4638      	mov	r0, r7
   2e252:	f016 fdd6 	bl	44e02 <memcpy>
	req->buf = buf;
   2e256:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   2e258:	4621      	mov	r1, r4
   2e25a:	4640      	mov	r0, r8
   2e25c:	f018 fc2b 	bl	46ab6 <bt_att_req_send>
	if (err) {
   2e260:	4605      	mov	r5, r0
   2e262:	2800      	cmp	r0, #0
   2e264:	d0d1      	beq.n	2e20a <gatt_indicate+0x2e>
		bt_att_req_free(req);
   2e266:	4620      	mov	r0, r4
   2e268:	f7ff faf2 	bl	2d850 <bt_att_req_free>
   2e26c:	e7cd      	b.n	2e20a <gatt_indicate+0x2e>
		return -EPERM;
   2e26e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2e272:	e7ca      	b.n	2e20a <gatt_indicate+0x2e>
   2e274:	00046af5 	.word	0x00046af5

0002e278 <bt_gatt_indicate>:
{
   2e278:	b530      	push	{r4, r5, lr}
   2e27a:	4604      	mov	r4, r0
   2e27c:	b08b      	sub	sp, #44	; 0x2c
   2e27e:	4837      	ldr	r0, [pc, #220]	; (2e35c <bt_gatt_indicate+0xe4>)
   2e280:	f018 fc51 	bl	46b26 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e284:	0782      	lsls	r2, r0, #30
{
   2e286:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e288:	d561      	bpl.n	2e34e <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   2e28a:	b114      	cbz	r4, 2e292 <bt_gatt_indicate+0x1a>
   2e28c:	7b63      	ldrb	r3, [r4, #13]
   2e28e:	2b07      	cmp	r3, #7
   2e290:	d160      	bne.n	2e354 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   2e292:	6868      	ldr	r0, [r5, #4]
   2e294:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e296:	f7ff fe31 	bl	2defc <bt_gatt_attr_get_handle>
	if (params->uuid) {
   2e29a:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e29c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2e2a0:	b33a      	cbz	r2, 2e2f2 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e2a2:	a905      	add	r1, sp, #20
   2e2a4:	9102      	str	r1, [sp, #8]
   2e2a6:	492e      	ldr	r1, [pc, #184]	; (2e360 <bt_gatt_indicate+0xe8>)
   2e2a8:	9101      	str	r1, [sp, #4]
   2e2aa:	2101      	movs	r1, #1
	found->attr = NULL;
   2e2ac:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e2ae:	9100      	str	r1, [sp, #0]
   2e2b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   2e2b4:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e2b6:	f7ff fe51 	bl	2df5c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   2e2ba:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   2e2bc:	b91b      	cbnz	r3, 2e2c6 <bt_gatt_indicate+0x4e>
			return -ENOENT;
   2e2be:	f06f 0001 	mvn.w	r0, #1
}
   2e2c2:	b00b      	add	sp, #44	; 0x2c
   2e2c4:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   2e2c6:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2e2c8:	9b05      	ldr	r3, [sp, #20]
   2e2ca:	6818      	ldr	r0, [r3, #0]
   2e2cc:	2300      	movs	r3, #0
   2e2ce:	f88d 3010 	strb.w	r3, [sp, #16]
   2e2d2:	a904      	add	r1, sp, #16
   2e2d4:	f642 0303 	movw	r3, #10243	; 0x2803
   2e2d8:	f8ad 3012 	strh.w	r3, [sp, #18]
   2e2dc:	f016 fe7f 	bl	44fde <bt_uuid_cmp>
   2e2e0:	b970      	cbnz	r0, 2e300 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2e2e2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   2e2e4:	68c3      	ldr	r3, [r0, #12]
   2e2e6:	799b      	ldrb	r3, [r3, #6]
   2e2e8:	069b      	lsls	r3, r3, #26
   2e2ea:	d405      	bmi.n	2e2f8 <bt_gatt_indicate+0x80>
			return -EINVAL;
   2e2ec:	f06f 0015 	mvn.w	r0, #21
   2e2f0:	e7e7      	b.n	2e2c2 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   2e2f2:	2800      	cmp	r0, #0
   2e2f4:	d1e8      	bne.n	2e2c8 <bt_gatt_indicate+0x50>
   2e2f6:	e7e2      	b.n	2e2be <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   2e2f8:	f018 fef0 	bl	470dc <bt_gatt_attr_value_handle>
   2e2fc:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   2e300:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   2e304:	b13c      	cbz	r4, 2e316 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   2e306:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   2e308:	4601      	mov	r1, r0
		params->_ref = 1;
   2e30a:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   2e30c:	462a      	mov	r2, r5
   2e30e:	4620      	mov	r0, r4
   2e310:	f7ff ff64 	bl	2e1dc <gatt_indicate>
   2e314:	e7d5      	b.n	2e2c2 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   2e316:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2e31a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   2e31c:	2302      	movs	r3, #2
   2e31e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e322:	f642 1302 	movw	r3, #10498	; 0x2902
   2e326:	f8ad 3012 	strh.w	r3, [sp, #18]
   2e32a:	ab05      	add	r3, sp, #20
   2e32c:	9302      	str	r3, [sp, #8]
   2e32e:	4b0d      	ldr	r3, [pc, #52]	; (2e364 <bt_gatt_indicate+0xec>)
   2e330:	9301      	str	r3, [sp, #4]
   2e332:	2301      	movs	r3, #1
   2e334:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   2e336:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e338:	4623      	mov	r3, r4
   2e33a:	aa04      	add	r2, sp, #16
   2e33c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   2e340:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e342:	f88d 4010 	strb.w	r4, [sp, #16]
   2e346:	f7ff fe09 	bl	2df5c <bt_gatt_foreach_attr_type>
	return data.err;
   2e34a:	9807      	ldr	r0, [sp, #28]
   2e34c:	e7b9      	b.n	2e2c2 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   2e34e:	f06f 000a 	mvn.w	r0, #10
   2e352:	e7b6      	b.n	2e2c2 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   2e354:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e358:	e7b3      	b.n	2e2c2 <bt_gatt_indicate+0x4a>
   2e35a:	bf00      	nop
   2e35c:	200000cc 	.word	0x200000cc
   2e360:	00046b1b 	.word	0x00046b1b
   2e364:	0002e4ad 	.word	0x0002e4ad

0002e368 <sc_process>:
{
   2e368:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   2e36a:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   2e36e:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   2e370:	f850 3c08 	ldr.w	r3, [r0, #-8]
   2e374:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   2e376:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e37a:	f06f 0101 	mvn.w	r1, #1
   2e37e:	4628      	mov	r0, r5
   2e380:	f018 fc92 	bl	46ca8 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   2e384:	4b0d      	ldr	r3, [pc, #52]	; (2e3bc <sc_process+0x54>)
   2e386:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   2e38a:	4b0d      	ldr	r3, [pc, #52]	; (2e3c0 <sc_process+0x58>)
   2e38c:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   2e390:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   2e392:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   2e394:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   2e398:	2304      	movs	r3, #4
	sc->start = 0U;
   2e39a:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   2e39e:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   2e3a2:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   2e3a6:	4631      	mov	r1, r6
   2e3a8:	f7ff ff66 	bl	2e278 <bt_gatt_indicate>
   2e3ac:	b918      	cbnz	r0, 2e3b6 <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e3ae:	2102      	movs	r1, #2
   2e3b0:	4628      	mov	r0, r5
   2e3b2:	f018 fc13 	bl	46bdc <atomic_or>
}
   2e3b6:	b002      	add	sp, #8
   2e3b8:	bd70      	pop	{r4, r5, r6, pc}
   2e3ba:	bf00      	nop
   2e3bc:	00049e44 	.word	0x00049e44
   2e3c0:	0002dded 	.word	0x0002dded

0002e3c4 <bt_gatt_notify_cb>:
{
   2e3c4:	b530      	push	{r4, r5, lr}
   2e3c6:	4604      	mov	r4, r0
   2e3c8:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e3ca:	4835      	ldr	r0, [pc, #212]	; (2e4a0 <bt_gatt_notify_cb+0xdc>)
   2e3cc:	f018 fbab 	bl	46b26 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e3d0:	0782      	lsls	r2, r0, #30
{
   2e3d2:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e3d4:	d55d      	bpl.n	2e492 <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   2e3d6:	b114      	cbz	r4, 2e3de <bt_gatt_notify_cb+0x1a>
   2e3d8:	7b63      	ldrb	r3, [r4, #13]
   2e3da:	2b07      	cmp	r3, #7
   2e3dc:	d15c      	bne.n	2e498 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   2e3de:	6868      	ldr	r0, [r5, #4]
   2e3e0:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e3e2:	f7ff fd8b 	bl	2defc <bt_gatt_attr_get_handle>
	if (params->uuid) {
   2e3e6:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   2e3e8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2e3ec:	b33a      	cbz	r2, 2e43e <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e3ee:	a905      	add	r1, sp, #20
   2e3f0:	9102      	str	r1, [sp, #8]
   2e3f2:	492c      	ldr	r1, [pc, #176]	; (2e4a4 <bt_gatt_notify_cb+0xe0>)
   2e3f4:	9101      	str	r1, [sp, #4]
   2e3f6:	2101      	movs	r1, #1
	found->attr = NULL;
   2e3f8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e3fa:	9100      	str	r1, [sp, #0]
   2e3fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   2e400:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   2e402:	f7ff fdab 	bl	2df5c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   2e406:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   2e408:	b91b      	cbnz	r3, 2e412 <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   2e40a:	f06f 0001 	mvn.w	r0, #1
}
   2e40e:	b00b      	add	sp, #44	; 0x2c
   2e410:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   2e412:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2e414:	9b05      	ldr	r3, [sp, #20]
   2e416:	6818      	ldr	r0, [r3, #0]
   2e418:	2300      	movs	r3, #0
   2e41a:	f88d 3010 	strb.w	r3, [sp, #16]
   2e41e:	a904      	add	r1, sp, #16
   2e420:	f642 0303 	movw	r3, #10243	; 0x2803
   2e424:	f8ad 3012 	strh.w	r3, [sp, #18]
   2e428:	f016 fdd9 	bl	44fde <bt_uuid_cmp>
   2e42c:	b970      	cbnz	r0, 2e44c <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2e42e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   2e430:	68c3      	ldr	r3, [r0, #12]
   2e432:	799b      	ldrb	r3, [r3, #6]
   2e434:	06db      	lsls	r3, r3, #27
   2e436:	d405      	bmi.n	2e444 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   2e438:	f06f 0015 	mvn.w	r0, #21
   2e43c:	e7e7      	b.n	2e40e <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   2e43e:	2800      	cmp	r0, #0
   2e440:	d1e8      	bne.n	2e414 <bt_gatt_notify_cb+0x50>
   2e442:	e7e2      	b.n	2e40a <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   2e444:	f018 fe4a 	bl	470dc <bt_gatt_attr_value_handle>
   2e448:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   2e44c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   2e450:	b12c      	cbz	r4, 2e45e <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   2e452:	4601      	mov	r1, r0
   2e454:	462a      	mov	r2, r5
   2e456:	4620      	mov	r0, r4
   2e458:	f018 fec4 	bl	471e4 <gatt_notify>
   2e45c:	e7d7      	b.n	2e40e <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e45e:	f642 1202 	movw	r2, #10498	; 0x2902
   2e462:	f8ad 2012 	strh.w	r2, [sp, #18]
   2e466:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   2e468:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e46c:	9202      	str	r2, [sp, #8]
   2e46e:	4a0e      	ldr	r2, [pc, #56]	; (2e4a8 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   2e470:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   2e472:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e474:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   2e478:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e47c:	aa04      	add	r2, sp, #16
   2e47e:	4623      	mov	r3, r4
   2e480:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   2e484:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   2e486:	f88d 4010 	strb.w	r4, [sp, #16]
   2e48a:	f7ff fd67 	bl	2df5c <bt_gatt_foreach_attr_type>
	return data.err;
   2e48e:	9807      	ldr	r0, [sp, #28]
   2e490:	e7bd      	b.n	2e40e <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   2e492:	f06f 000a 	mvn.w	r0, #10
   2e496:	e7ba      	b.n	2e40e <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   2e498:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e49c:	e7b7      	b.n	2e40e <bt_gatt_notify_cb+0x4a>
   2e49e:	bf00      	nop
   2e4a0:	200000cc 	.word	0x200000cc
   2e4a4:	00046b1b 	.word	0x00046b1b
   2e4a8:	0002e4ad 	.word	0x0002e4ad

0002e4ac <notify_cb>:
{
   2e4ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e4b0:	4b37      	ldr	r3, [pc, #220]	; (2e590 <notify_cb+0xe4>)
{
   2e4b2:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e4b4:	6882      	ldr	r2, [r0, #8]
   2e4b6:	429a      	cmp	r2, r3
{
   2e4b8:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e4ba:	d113      	bne.n	2e4e4 <notify_cb+0x38>
	ccc = attr->user_data;
   2e4bc:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   2e4be:	4b35      	ldr	r3, [pc, #212]	; (2e594 <notify_cb+0xe8>)
   2e4c0:	429f      	cmp	r7, r3
   2e4c2:	d014      	beq.n	2e4ee <notify_cb+0x42>
		if (cfg->value != data->type) {
   2e4c4:	893a      	ldrh	r2, [r7, #8]
   2e4c6:	89a3      	ldrh	r3, [r4, #12]
   2e4c8:	429a      	cmp	r2, r3
   2e4ca:	d10b      	bne.n	2e4e4 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   2e4cc:	4639      	mov	r1, r7
   2e4ce:	f811 0b01 	ldrb.w	r0, [r1], #1
   2e4d2:	f7fe faa1 	bl	2ca18 <bt_conn_lookup_addr_le>
		if (!conn) {
   2e4d6:	4605      	mov	r5, r0
   2e4d8:	b120      	cbz	r0, 2e4e4 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
   2e4da:	7b43      	ldrb	r3, [r0, #13]
   2e4dc:	2b07      	cmp	r3, #7
   2e4de:	d02e      	beq.n	2e53e <notify_cb+0x92>
			bt_conn_unref(conn);
   2e4e0:	f017 fc3a 	bl	45d58 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   2e4e4:	2701      	movs	r7, #1
}
   2e4e6:	4638      	mov	r0, r7
   2e4e8:	b003      	add	sp, #12
   2e4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2e4ee:	f04f 0800 	mov.w	r8, #0
   2e4f2:	4d29      	ldr	r5, [pc, #164]	; (2e598 <notify_cb+0xec>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2e4f4:	46c1      	mov	r9, r8
   2e4f6:	2207      	movs	r2, #7
   2e4f8:	4669      	mov	r1, sp
   2e4fa:	4628      	mov	r0, r5
   2e4fc:	f8cd 9000 	str.w	r9, [sp]
   2e500:	f8cd 9003 	str.w	r9, [sp, #3]
   2e504:	f016 fc6d 	bl	44de2 <memcmp>
   2e508:	b178      	cbz	r0, 2e52a <notify_cb+0x7e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   2e50a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   2e50e:	2207      	movs	r2, #7
   2e510:	4629      	mov	r1, r5
   2e512:	f7fe fa9f 	bl	2ca54 <bt_conn_lookup_state_le>
			if (!conn) {
   2e516:	b978      	cbnz	r0, 2e538 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   2e518:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   2e51a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   2e51e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   2e520:	4629      	mov	r1, r5
   2e522:	8853      	ldrh	r3, [r2, #2]
   2e524:	8812      	ldrh	r2, [r2, #0]
   2e526:	f018 fcfc 	bl	46f22 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   2e52a:	350c      	adds	r5, #12
   2e52c:	f1b8 0f00 	cmp.w	r8, #0
   2e530:	d1c8      	bne.n	2e4c4 <notify_cb+0x18>
   2e532:	f04f 0801 	mov.w	r8, #1
   2e536:	e7de      	b.n	2e4f6 <notify_cb+0x4a>
			bt_conn_unref(conn);
   2e538:	f017 fc0e 	bl	45d58 <bt_conn_unref>
   2e53c:	e7f5      	b.n	2e52a <notify_cb+0x7e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   2e53e:	697b      	ldr	r3, [r7, #20]
   2e540:	b123      	cbz	r3, 2e54c <notify_cb+0xa0>
   2e542:	4631      	mov	r1, r6
   2e544:	4798      	blx	r3
   2e546:	b908      	cbnz	r0, 2e54c <notify_cb+0xa0>
			bt_conn_unref(conn);
   2e548:	4628      	mov	r0, r5
   2e54a:	e7c9      	b.n	2e4e0 <notify_cb+0x34>
		if (bt_gatt_check_perm(conn, attr,
   2e54c:	2214      	movs	r2, #20
   2e54e:	4631      	mov	r1, r6
   2e550:	4628      	mov	r0, r5
   2e552:	f018 fe1c 	bl	4718e <bt_gatt_check_perm>
   2e556:	4607      	mov	r7, r0
   2e558:	2800      	cmp	r0, #0
   2e55a:	d1c3      	bne.n	2e4e4 <notify_cb+0x38>
		if (data->type == BT_GATT_CCC_INDICATE) {
   2e55c:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   2e55e:	88a1      	ldrh	r1, [r4, #4]
   2e560:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   2e562:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   2e564:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   2e566:	d10f      	bne.n	2e588 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   2e568:	f7ff fe38 	bl	2e1dc <gatt_indicate>
			if (err == 0) {
   2e56c:	4606      	mov	r6, r0
   2e56e:	b918      	cbnz	r0, 2e578 <notify_cb+0xcc>
				data->ind_params->_ref++;
   2e570:	6922      	ldr	r2, [r4, #16]
   2e572:	7d93      	ldrb	r3, [r2, #22]
   2e574:	3301      	adds	r3, #1
   2e576:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   2e578:	4628      	mov	r0, r5
   2e57a:	f017 fbed 	bl	45d58 <bt_conn_unref>
		if (err < 0) {
   2e57e:	2e00      	cmp	r6, #0
   2e580:	dbb1      	blt.n	2e4e6 <notify_cb+0x3a>
		data->err = 0;
   2e582:	2300      	movs	r3, #0
   2e584:	60a3      	str	r3, [r4, #8]
   2e586:	e7ad      	b.n	2e4e4 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   2e588:	f018 fe2c 	bl	471e4 <gatt_notify>
   2e58c:	4606      	mov	r6, r0
   2e58e:	e7f3      	b.n	2e578 <notify_cb+0xcc>
   2e590:	0002dbe5 	.word	0x0002dbe5
   2e594:	20000404 	.word	0x20000404
   2e598:	20003b49 	.word	0x20003b49

0002e59c <update_ccc>:
{
   2e59c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e5a0:	4b2d      	ldr	r3, [pc, #180]	; (2e658 <update_ccc+0xbc>)
	struct bt_conn *conn = data->conn;
   2e5a2:	6814      	ldr	r4, [r2, #0]
{
   2e5a4:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e5a6:	6882      	ldr	r2, [r0, #8]
   2e5a8:	429a      	cmp	r2, r3
{
   2e5aa:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   2e5ac:	d121      	bne.n	2e5f2 <update_ccc+0x56>
	ccc = attr->user_data;
   2e5ae:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   2e5b0:	893b      	ldrh	r3, [r7, #8]
   2e5b2:	b1f3      	cbz	r3, 2e5f2 <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   2e5b4:	463a      	mov	r2, r7
   2e5b6:	4620      	mov	r0, r4
   2e5b8:	f812 1b01 	ldrb.w	r1, [r2], #1
   2e5bc:	f017 fc66 	bl	45e8c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   2e5c0:	b1b8      	cbz	r0, 2e5f2 <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   2e5c2:	222a      	movs	r2, #42	; 0x2a
   2e5c4:	4629      	mov	r1, r5
   2e5c6:	4620      	mov	r0, r4
   2e5c8:	f018 fde1 	bl	4718e <bt_gatt_check_perm>
		if (err) {
   2e5cc:	b1a8      	cbz	r0, 2e5fa <update_ccc+0x5e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   2e5ce:	2803      	cmp	r0, #3
   2e5d0:	d00f      	beq.n	2e5f2 <update_ccc+0x56>
				sec = BT_SECURITY_L3;
   2e5d2:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   2e5d4:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   2e5d6:	bf14      	ite	ne
   2e5d8:	f04f 0802 	movne.w	r8, #2
   2e5dc:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
   2e5e0:	f017 fc52 	bl	45e88 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e5e4:	4580      	cmp	r8, r0
   2e5e6:	d908      	bls.n	2e5fa <update_ccc+0x5e>
				if (data->sec < sec) {
   2e5e8:	7933      	ldrb	r3, [r6, #4]
   2e5ea:	4543      	cmp	r3, r8
   2e5ec:	d201      	bcs.n	2e5f2 <update_ccc+0x56>
					data->sec = sec;
   2e5ee:	f886 8004 	strb.w	r8, [r6, #4]
}
   2e5f2:	2001      	movs	r0, #1
   2e5f4:	b002      	add	sp, #8
   2e5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		gatt_ccc_changed(attr, ccc);
   2e5fa:	4639      	mov	r1, r7
   2e5fc:	4628      	mov	r0, r5
   2e5fe:	f018 fa6f 	bl	46ae0 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   2e602:	4b16      	ldr	r3, [pc, #88]	; (2e65c <update_ccc+0xc0>)
   2e604:	429f      	cmp	r7, r3
   2e606:	d1f4      	bne.n	2e5f2 <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2e608:	7a20      	ldrb	r0, [r4, #8]
   2e60a:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2e60e:	f7ff fb5f 	bl	2dcd0 <find_sc_cfg>
	if (!cfg) {
   2e612:	2800      	cmp	r0, #0
   2e614:	d0ed      	beq.n	2e5f2 <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
   2e616:	8902      	ldrh	r2, [r0, #8]
   2e618:	8943      	ldrh	r3, [r0, #10]
   2e61a:	ea53 0102 	orrs.w	r1, r3, r2
   2e61e:	d0e8      	beq.n	2e5f2 <update_ccc+0x56>
	index = bt_conn_index(conn);
   2e620:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   2e622:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   2e626:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   2e62a:	f7fe f8c1 	bl	2c7b0 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   2e62e:	490c      	ldr	r1, [pc, #48]	; (2e660 <update_ccc+0xc4>)
   2e630:	4a0c      	ldr	r2, [pc, #48]	; (2e664 <update_ccc+0xc8>)
   2e632:	2318      	movs	r3, #24
   2e634:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2e638:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   2e63a:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   2e63c:	4a0a      	ldr	r2, [pc, #40]	; (2e668 <update_ccc+0xcc>)
   2e63e:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   2e640:	aa01      	add	r2, sp, #4
   2e642:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2e644:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].len = sizeof(sc_range);
   2e648:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2e64a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   2e64e:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2e650:	4620      	mov	r0, r4
   2e652:	f7ff fe11 	bl	2e278 <bt_gatt_indicate>
		BT_ERR("SC restore indication failed");
   2e656:	e7cc      	b.n	2e5f2 <update_ccc+0x56>
   2e658:	0002dbe5 	.word	0x0002dbe5
   2e65c:	20000404 	.word	0x20000404
   2e660:	20001cf4 	.word	0x20001cf4
   2e664:	00049e44 	.word	0x00049e44
   2e668:	0004706f 	.word	0x0004706f

0002e66c <bt_gatt_connected>:
{
   2e66c:	b570      	push	{r4, r5, r6, lr}
   2e66e:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e670:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   2e674:	4604      	mov	r4, r0
	data.conn = conn;
   2e676:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   2e678:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e67a:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   2e67c:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e680:	4629      	mov	r1, r5
   2e682:	f017 f85b 	bl	4573c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   2e686:	b190      	cbz	r0, 2e6ae <bt_gatt_connected+0x42>
		if (conn->id) {
   2e688:	7a22      	ldrb	r2, [r4, #8]
   2e68a:	b32a      	cbz	r2, 2e6d8 <bt_gatt_connected+0x6c>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   2e68c:	ae02      	add	r6, sp, #8
   2e68e:	2104      	movs	r1, #4
   2e690:	4630      	mov	r0, r6
   2e692:	f014 fa28 	bl	42ae6 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   2e696:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   2e698:	4a10      	ldr	r2, [pc, #64]	; (2e6dc <bt_gatt_connected+0x70>)
   2e69a:	2124      	movs	r1, #36	; 0x24
   2e69c:	a805      	add	r0, sp, #20
   2e69e:	462b      	mov	r3, r5
   2e6a0:	f7fc f9ec 	bl	2aa7c <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   2e6a4:	aa05      	add	r2, sp, #20
   2e6a6:	490e      	ldr	r1, [pc, #56]	; (2e6e0 <bt_gatt_connected+0x74>)
   2e6a8:	4610      	mov	r0, r2
   2e6aa:	f7fb f87b 	bl	297a4 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e6ae:	ab03      	add	r3, sp, #12
   2e6b0:	4a0c      	ldr	r2, [pc, #48]	; (2e6e4 <bt_gatt_connected+0x78>)
   2e6b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e6b6:	2001      	movs	r0, #1
   2e6b8:	f018 fd5e 	bl	47178 <bt_gatt_foreach_attr>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e6bc:	78e3      	ldrb	r3, [r4, #3]
   2e6be:	b94b      	cbnz	r3, 2e6d4 <bt_gatt_connected+0x68>
	    bt_conn_get_security(conn) < data.sec) {
   2e6c0:	4620      	mov	r0, r4
   2e6c2:	f017 fbe1 	bl	45e88 <bt_conn_get_security>
   2e6c6:	f89d 1010 	ldrb.w	r1, [sp, #16]
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
   2e6ca:	4288      	cmp	r0, r1
   2e6cc:	d202      	bcs.n	2e6d4 <bt_gatt_connected+0x68>
		int err = bt_conn_set_security(conn, data.sec);
   2e6ce:	4620      	mov	r0, r4
   2e6d0:	f017 fbaa 	bl	45e28 <bt_conn_set_security>
}
   2e6d4:	b00e      	add	sp, #56	; 0x38
   2e6d6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   2e6d8:	9200      	str	r2, [sp, #0]
   2e6da:	e7dd      	b.n	2e698 <bt_gatt_connected+0x2c>
   2e6dc:	0004b472 	.word	0x0004b472
   2e6e0:	0002e145 	.word	0x0002e145
   2e6e4:	0002e59d 	.word	0x0002e59d

0002e6e8 <bt_gatt_att_max_mtu_changed>:
{
   2e6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   2e6ea:	4b08      	ldr	r3, [pc, #32]	; (2e70c <bt_gatt_att_max_mtu_changed+0x24>)
   2e6ec:	681c      	ldr	r4, [r3, #0]
   2e6ee:	4605      	mov	r5, r0
   2e6f0:	460e      	mov	r6, r1
   2e6f2:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2e6f4:	b14c      	cbz	r4, 2e70a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   2e6f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   2e6fa:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   2e6fc:	b11b      	cbz	r3, 2e706 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   2e6fe:	463a      	mov	r2, r7
   2e700:	4631      	mov	r1, r6
   2e702:	4628      	mov	r0, r5
   2e704:	4798      	blx	r3
	return node->next;
   2e706:	6864      	ldr	r4, [r4, #4]
   2e708:	e7f4      	b.n	2e6f4 <bt_gatt_att_max_mtu_changed+0xc>
}
   2e70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e70c:	20001cc8 	.word	0x20001cc8

0002e710 <bt_gatt_encrypt_change>:
{
   2e710:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e712:	4a06      	ldr	r2, [pc, #24]	; (2e72c <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   2e714:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e716:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   2e718:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e71a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   2e71e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   2e722:	f018 fd29 	bl	47178 <bt_gatt_foreach_attr>
}
   2e726:	b003      	add	sp, #12
   2e728:	f85d fb04 	ldr.w	pc, [sp], #4
   2e72c:	0002e59d 	.word	0x0002e59d

0002e730 <db_hash_read>:
{
   2e730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2e732:	4914      	ldr	r1, [pc, #80]	; (2e784 <db_hash_read+0x54>)
{
   2e734:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2e738:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2e73a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   2e73e:	461f      	mov	r7, r3
   2e740:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   2e742:	f01a fa93 	bl	48c6c <k_work_cancel_delayable_sync>
   2e746:	4810      	ldr	r0, [pc, #64]	; (2e788 <db_hash_read+0x58>)
   2e748:	f018 f9ed 	bl	46b26 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   2e74c:	0743      	lsls	r3, r0, #29
   2e74e:	d402      	bmi.n	2e756 <db_hash_read+0x26>
		db_hash_gen(true);
   2e750:	2001      	movs	r0, #1
   2e752:	f7ff fc5d 	bl	2e010 <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   2e756:	2101      	movs	r1, #1
   2e758:	4620      	mov	r0, r4
   2e75a:	f018 fd76 	bl	4724a <bt_gatt_change_aware>
	if (offset > value_len) {
   2e75e:	2e10      	cmp	r6, #16
   2e760:	d80c      	bhi.n	2e77c <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   2e762:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   2e766:	4909      	ldr	r1, [pc, #36]	; (2e78c <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   2e768:	42bc      	cmp	r4, r7
   2e76a:	bfa8      	it	ge
   2e76c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2e76e:	4622      	mov	r2, r4
   2e770:	4431      	add	r1, r6
   2e772:	4628      	mov	r0, r5
   2e774:	f016 fb45 	bl	44e02 <memcpy>
}
   2e778:	4620      	mov	r0, r4
   2e77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2e77c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   2e780:	e7fa      	b.n	2e778 <db_hash_read+0x48>
   2e782:	bf00      	nop
   2e784:	20001170 	.word	0x20001170
   2e788:	20001220 	.word	0x20001220
   2e78c:	20001120 	.word	0x20001120

0002e790 <bt_gatt_store_ccc>:
{
   2e790:	b570      	push	{r4, r5, r6, lr}
   2e792:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   2e794:	2300      	movs	r3, #0
{
   2e796:	4604      	mov	r4, r0
   2e798:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   2e79a:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   2e79c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   2e7a0:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   2e7a2:	4a11      	ldr	r2, [pc, #68]	; (2e7e8 <bt_gatt_store_ccc+0x58>)
   2e7a4:	ab0d      	add	r3, sp, #52	; 0x34
   2e7a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e7aa:	2001      	movs	r0, #1
   2e7ac:	f018 fce4 	bl	47178 <bt_gatt_foreach_attr>
	if (id) {
   2e7b0:	b1ac      	cbz	r4, 2e7de <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
   2e7b2:	ae03      	add	r6, sp, #12
   2e7b4:	4622      	mov	r2, r4
   2e7b6:	2104      	movs	r1, #4
   2e7b8:	4630      	mov	r0, r6
   2e7ba:	f014 f994 	bl	42ae6 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   2e7be:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   2e7c0:	4a0a      	ldr	r2, [pc, #40]	; (2e7ec <bt_gatt_store_ccc+0x5c>)
   2e7c2:	462b      	mov	r3, r5
   2e7c4:	2124      	movs	r1, #36	; 0x24
   2e7c6:	a804      	add	r0, sp, #16
   2e7c8:	f7fc f958 	bl	2aa7c <bt_settings_encode_key>
	if (save.count) {
   2e7cc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   2e7ce:	b142      	cbz	r2, 2e7e2 <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
   2e7d0:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   2e7d2:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   2e7d4:	a804      	add	r0, sp, #16
   2e7d6:	f7fa ff85 	bl	296e4 <settings_save_one>
}
   2e7da:	b040      	add	sp, #256	; 0x100
   2e7dc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   2e7de:	9400      	str	r4, [sp, #0]
   2e7e0:	e7ee      	b.n	2e7c0 <bt_gatt_store_ccc+0x30>
		str = NULL;
   2e7e2:	4611      	mov	r1, r2
   2e7e4:	e7f6      	b.n	2e7d4 <bt_gatt_store_ccc+0x44>
   2e7e6:	bf00      	nop
   2e7e8:	0002dbad 	.word	0x0002dbad
   2e7ec:	0004b472 	.word	0x0004b472

0002e7f0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   2e7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   2e7f2:	4603      	mov	r3, r0
   2e7f4:	4a3d      	ldr	r2, [pc, #244]	; (2e8ec <bt_gatt_disconnected+0xfc>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   2e7f6:	4e3e      	ldr	r6, [pc, #248]	; (2e8f0 <bt_gatt_disconnected+0x100>)
{
   2e7f8:	b08d      	sub	sp, #52	; 0x34
   2e7fa:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   2e7fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e800:	2001      	movs	r0, #1
   2e802:	f018 fcb9 	bl	47178 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   2e806:	4620      	mov	r0, r4
   2e808:	f7fd ffd2 	bl	2c7b0 <bt_conn_index>
   2e80c:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   2e80e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   2e812:	b120      	cbz	r0, 2e81e <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   2e814:	f017 faa0 	bl	45d58 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   2e818:	2300      	movs	r3, #0
   2e81a:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   2e81e:	4835      	ldr	r0, [pc, #212]	; (2e8f4 <bt_gatt_disconnected+0x104>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e820:	f104 0588 	add.w	r5, r4, #136	; 0x88
		k_work_cancel_delayable(&gatt_ccc_store.work);
   2e824:	f01a fa0e 	bl	48c44 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e828:	7a20      	ldrb	r0, [r4, #8]
   2e82a:	4629      	mov	r1, r5
   2e82c:	f016 ff86 	bl	4573c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2e830:	b348      	cbz	r0, 2e886 <bt_gatt_disconnected+0x96>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2e832:	4629      	mov	r1, r5
   2e834:	7a20      	ldrb	r0, [r4, #8]
   2e836:	f7ff ffab 	bl	2e790 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   2e83a:	4620      	mov	r0, r4
   2e83c:	f7ff f8b2 	bl	2d9a4 <find_cf_cfg>
	if (!cfg) {
   2e840:	4606      	mov	r6, r0
   2e842:	2800      	cmp	r0, #0
   2e844:	d03f      	beq.n	2e8c6 <bt_gatt_disconnected+0xd6>
		if (conn->id) {
   2e846:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   2e848:	3608      	adds	r6, #8
		if (conn->id) {
   2e84a:	2a00      	cmp	r2, #0
   2e84c:	d03d      	beq.n	2e8ca <bt_gatt_disconnected+0xda>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   2e84e:	af02      	add	r7, sp, #8
   2e850:	2104      	movs	r1, #4
   2e852:	4638      	mov	r0, r7
   2e854:	f014 f947 	bl	42ae6 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   2e858:	9700      	str	r7, [sp, #0]
   2e85a:	462b      	mov	r3, r5
   2e85c:	4a26      	ldr	r2, [pc, #152]	; (2e8f8 <bt_gatt_disconnected+0x108>)
   2e85e:	2124      	movs	r1, #36	; 0x24
   2e860:	a803      	add	r0, sp, #12
   2e862:	f7fc f90b 	bl	2aa7c <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   2e866:	7a23      	ldrb	r3, [r4, #8]
   2e868:	2701      	movs	r7, #1
   2e86a:	b93b      	cbnz	r3, 2e87c <bt_gatt_disconnected+0x8c>
		bt_settings_encode_key(key, sizeof(key), "cf",
   2e86c:	2300      	movs	r3, #0
   2e86e:	9300      	str	r3, [sp, #0]
   2e870:	4a21      	ldr	r2, [pc, #132]	; (2e8f8 <bt_gatt_disconnected+0x108>)
   2e872:	462b      	mov	r3, r5
   2e874:	2124      	movs	r1, #36	; 0x24
   2e876:	a803      	add	r0, sp, #12
   2e878:	f7fc f900 	bl	2aa7c <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   2e87c:	463a      	mov	r2, r7
   2e87e:	4631      	mov	r1, r6
   2e880:	a803      	add	r0, sp, #12
   2e882:	f7fa ff2f 	bl	296e4 <settings_save_one>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e886:	7a20      	ldrb	r0, [r4, #8]
   2e888:	4629      	mov	r1, r5
   2e88a:	f016 ff57 	bl	4573c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   2e88e:	b150      	cbz	r0, 2e8a6 <bt_gatt_disconnected+0xb6>
		struct addr_with_id addr_with_id = {
   2e890:	7a23      	ldrb	r3, [r4, #8]
   2e892:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   2e896:	4a19      	ldr	r2, [pc, #100]	; (2e8fc <bt_gatt_disconnected+0x10c>)
		struct addr_with_id addr_with_id = {
   2e898:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   2e89a:	ab03      	add	r3, sp, #12
   2e89c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e8a0:	2001      	movs	r0, #1
   2e8a2:	f018 fc69 	bl	47178 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   2e8a6:	4620      	mov	r0, r4
   2e8a8:	f7ff f87c 	bl	2d9a4 <find_cf_cfg>
	if (!cfg) {
   2e8ac:	4606      	mov	r6, r0
   2e8ae:	b1d8      	cbz	r0, 2e8e8 <bt_gatt_disconnected+0xf8>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2e8b0:	7a20      	ldrb	r0, [r4, #8]
   2e8b2:	4629      	mov	r1, r5
   2e8b4:	f016 ff42 	bl	4573c <bt_addr_le_is_bonded>
   2e8b8:	b948      	cbnz	r0, 2e8ce <bt_gatt_disconnected+0xde>
		clear_cf_cfg(cfg);
   2e8ba:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   2e8bc:	b00d      	add	sp, #52	; 0x34
   2e8be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
   2e8c2:	f018 ba00 	b.w	46cc6 <clear_cf_cfg>
		len = 0;
   2e8c6:	4607      	mov	r7, r0
   2e8c8:	e7d0      	b.n	2e86c <bt_gatt_disconnected+0x7c>
   2e8ca:	2701      	movs	r7, #1
   2e8cc:	e7ce      	b.n	2e86c <bt_gatt_disconnected+0x7c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2e8ce:	4629      	mov	r1, r5
   2e8d0:	1c70      	adds	r0, r6, #1
   2e8d2:	f018 f992 	bl	46bfa <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e8d6:	f06f 0102 	mvn.w	r1, #2
   2e8da:	f106 000c 	add.w	r0, r6, #12
}
   2e8de:	b00d      	add	sp, #52	; 0x34
   2e8e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2e8e4:	f018 b9e0 	b.w	46ca8 <atomic_and>
   2e8e8:	b00d      	add	sp, #52	; 0x34
   2e8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e8ec:	0002dd61 	.word	0x0002dd61
   2e8f0:	20001198 	.word	0x20001198
   2e8f4:	200011a0 	.word	0x200011a0
   2e8f8:	0004b479 	.word	0x0004b479
   2e8fc:	0002daf9 	.word	0x0002daf9

0002e900 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   2e900:	4b10      	ldr	r3, [pc, #64]	; (2e944 <get_io_capa+0x44>)
   2e902:	681b      	ldr	r3, [r3, #0]
   2e904:	b1bb      	cbz	r3, 2e936 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   2e906:	685a      	ldr	r2, [r3, #4]
   2e908:	b142      	cbz	r2, 2e91c <get_io_capa+0x1c>
   2e90a:	6899      	ldr	r1, [r3, #8]
   2e90c:	b131      	cbz	r1, 2e91c <get_io_capa+0x1c>
   2e90e:	68d9      	ldr	r1, [r3, #12]
   2e910:	b911      	cbnz	r1, 2e918 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   2e912:	490d      	ldr	r1, [pc, #52]	; (2e948 <get_io_capa+0x48>)
   2e914:	7809      	ldrb	r1, [r1, #0]
   2e916:	b939      	cbnz	r1, 2e928 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   2e918:	2004      	movs	r0, #4
   2e91a:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   2e91c:	490a      	ldr	r1, [pc, #40]	; (2e948 <get_io_capa+0x48>)
   2e91e:	7809      	ldrb	r1, [r1, #0]
   2e920:	b111      	cbz	r1, 2e928 <get_io_capa+0x28>
   2e922:	b10a      	cbz	r2, 2e928 <get_io_capa+0x28>
   2e924:	68d9      	ldr	r1, [r3, #12]
   2e926:	b941      	cbnz	r1, 2e93a <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   2e928:	689b      	ldr	r3, [r3, #8]
   2e92a:	b943      	cbnz	r3, 2e93e <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   2e92c:	2a00      	cmp	r2, #0
   2e92e:	bf0c      	ite	eq
   2e930:	2003      	moveq	r0, #3
   2e932:	2000      	movne	r0, #0
   2e934:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   2e936:	2003      	movs	r0, #3
   2e938:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   2e93a:	2001      	movs	r0, #1
   2e93c:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   2e93e:	2002      	movs	r0, #2
	}
}
   2e940:	4770      	bx	lr
   2e942:	bf00      	nop
   2e944:	20001c74 	.word	0x20001c74
   2e948:	20003c68 	.word	0x20003c68

0002e94c <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   2e94c:	4b06      	ldr	r3, [pc, #24]	; (2e968 <bt_smp_accept+0x1c>)
   2e94e:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   2e952:	b928      	cbnz	r0, 2e960 <bt_smp_accept+0x14>
			continue;
		}

		smp->chan.chan.ops = &ops;
   2e954:	4a05      	ldr	r2, [pc, #20]	; (2e96c <bt_smp_accept+0x20>)
   2e956:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   2e95a:	33f0      	adds	r3, #240	; 0xf0
   2e95c:	600b      	str	r3, [r1, #0]

		return 0;
   2e95e:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   2e960:	f06f 000b 	mvn.w	r0, #11
}
   2e964:	4770      	bx	lr
   2e966:	bf00      	nop
   2e968:	20001228 	.word	0x20001228
   2e96c:	00049fc0 	.word	0x00049fc0

0002e970 <get_auth.constprop.0>:
	if (sc_supported) {
   2e970:	4b0c      	ldr	r3, [pc, #48]	; (2e9a4 <get_auth.constprop.0+0x34>)
   2e972:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   2e974:	b510      	push	{r4, lr}
	if (sc_supported) {
   2e976:	b17b      	cbz	r3, 2e998 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   2e978:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   2e97c:	f7ff ffc0 	bl	2e900 <get_io_capa>
	if (bondable) {
   2e980:	4b09      	ldr	r3, [pc, #36]	; (2e9a8 <get_auth.constprop.0+0x38>)
   2e982:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   2e984:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   2e986:	bf0c      	ite	eq
   2e988:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   2e98c:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   2e990:	b12b      	cbz	r3, 2e99e <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   2e992:	f044 0001 	orr.w	r0, r4, #1
}
   2e996:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   2e998:	f000 0407 	and.w	r4, r0, #7
   2e99c:	e7ee      	b.n	2e97c <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   2e99e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   2e9a2:	e7f8      	b.n	2e996 <get_auth.constprop.0+0x26>
   2e9a4:	20003c68 	.word	0x20003c68
   2e9a8:	200009fa 	.word	0x200009fa

0002e9ac <smp_init>:
{
   2e9ac:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   2e9ae:	22f0      	movs	r2, #240	; 0xf0
{
   2e9b0:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   2e9b2:	2100      	movs	r1, #0
   2e9b4:	f016 fa30 	bl	44e18 <memset>
	if (bt_rand(smp->prnd, 16)) {
   2e9b8:	2110      	movs	r1, #16
   2e9ba:	f105 0027 	add.w	r0, r5, #39	; 0x27
   2e9be:	f003 fda7 	bl	32510 <bt_rand>
   2e9c2:	4604      	mov	r4, r0
   2e9c4:	b948      	cbnz	r0, 2e9da <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   2e9c6:	2105      	movs	r1, #5
   2e9c8:	4628      	mov	r0, r5
   2e9ca:	f018 fd59 	bl	47480 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   2e9ce:	f7fd fc47 	bl	2c260 <bt_pub_key_get>
   2e9d2:	4b03      	ldr	r3, [pc, #12]	; (2e9e0 <smp_init+0x34>)
   2e9d4:	6018      	str	r0, [r3, #0]
}
   2e9d6:	4620      	mov	r0, r4
   2e9d8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2e9da:	2408      	movs	r4, #8
   2e9dc:	e7fb      	b.n	2e9d6 <smp_init+0x2a>
   2e9de:	bf00      	nop
   2e9e0:	20001d10 	.word	0x20001d10

0002e9e4 <smp_dhkey_generate>:
{
   2e9e4:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2e9e6:	1d05      	adds	r5, r0, #4
{
   2e9e8:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2e9ea:	2108      	movs	r1, #8
   2e9ec:	4628      	mov	r0, r5
   2e9ee:	f018 fd47 	bl	47480 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   2e9f2:	4906      	ldr	r1, [pc, #24]	; (2ea0c <smp_dhkey_generate+0x28>)
   2e9f4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   2e9f8:	f7fd fc42 	bl	2c280 <bt_dh_key_gen>
	if (err) {
   2e9fc:	b120      	cbz	r0, 2ea08 <smp_dhkey_generate+0x24>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2e9fe:	4628      	mov	r0, r5
   2ea00:	2108      	movs	r1, #8
   2ea02:	f018 fc75 	bl	472f0 <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
   2ea06:	2008      	movs	r0, #8
}
   2ea08:	bd38      	pop	{r3, r4, r5, pc}
   2ea0a:	bf00      	nop
   2ea0c:	00047843 	.word	0x00047843

0002ea10 <smp_find>:
{
   2ea10:	4601      	mov	r1, r0
   2ea12:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   2ea14:	4803      	ldr	r0, [pc, #12]	; (2ea24 <smp_find+0x14>)
   2ea16:	f018 fd4d 	bl	474b4 <atomic_test_bit>
	return NULL;
   2ea1a:	2800      	cmp	r0, #0
}
   2ea1c:	4802      	ldr	r0, [pc, #8]	; (2ea28 <smp_find+0x18>)
   2ea1e:	bf08      	it	eq
   2ea20:	2000      	moveq	r0, #0
   2ea22:	bd08      	pop	{r3, pc}
   2ea24:	2000122c 	.word	0x2000122c
   2ea28:	20001228 	.word	0x20001228

0002ea2c <smp_pairing_random>:
{
   2ea2c:	b570      	push	{r4, r5, r6, lr}
   2ea2e:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   2ea30:	f100 0537 	add.w	r5, r0, #55	; 0x37
   2ea34:	6889      	ldr	r1, [r1, #8]
{
   2ea36:	b09c      	sub	sp, #112	; 0x70
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   2ea38:	2210      	movs	r2, #16
   2ea3a:	4628      	mov	r0, r5
   2ea3c:	f016 f9e1 	bl	44e02 <memcpy>
	switch (smp->method) {
   2ea40:	7a23      	ldrb	r3, [r4, #8]
   2ea42:	2b05      	cmp	r3, #5
   2ea44:	f200 80b9 	bhi.w	2ebba <smp_pairing_random+0x18e>
   2ea48:	e8df f003 	tbb	[pc, r3]
   2ea4c:	034b4b3e 	.word	0x034b4b3e
   2ea50:	8eb7      	.short	0x8eb7
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   2ea52:	4b5d      	ldr	r3, [pc, #372]	; (2ebc8 <smp_pairing_random+0x19c>)
	sys_memcpy_swap(m, u, 32);
   2ea54:	2220      	movs	r2, #32
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   2ea56:	681e      	ldr	r6, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   2ea58:	eb0d 0002 	add.w	r0, sp, r2
   2ea5c:	f104 0157 	add.w	r1, r4, #87	; 0x57
   2ea60:	f018 fc33 	bl	472ca <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2ea64:	2220      	movs	r2, #32
   2ea66:	4631      	mov	r1, r6
   2ea68:	a810      	add	r0, sp, #64	; 0x40
   2ea6a:	f018 fc2e 	bl	472ca <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   2ea6e:	2210      	movs	r2, #16
   2ea70:	f104 0127 	add.w	r1, r4, #39	; 0x27
   2ea74:	a818      	add	r0, sp, #96	; 0x60
   2ea76:	f018 fc28 	bl	472ca <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2ea7a:	2210      	movs	r2, #16
   2ea7c:	eb0d 0002 	add.w	r0, sp, r2
   2ea80:	4629      	mov	r1, r5
   2ea82:	f018 fc22 	bl	472ca <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   2ea86:	ab04      	add	r3, sp, #16
   2ea88:	2250      	movs	r2, #80	; 0x50
   2ea8a:	a908      	add	r1, sp, #32
   2ea8c:	4618      	mov	r0, r3
   2ea8e:	f018 fc3e 	bl	4730e <bt_smp_aes_cmac>
	if (err) {
   2ea92:	2800      	cmp	r0, #0
   2ea94:	f040 8091 	bne.w	2ebba <smp_pairing_random+0x18e>
	memcpy(passkey, xs + 12, 4);
   2ea98:	2204      	movs	r2, #4
   2ea9a:	a907      	add	r1, sp, #28
   2ea9c:	a803      	add	r0, sp, #12
   2ea9e:	f016 f9b0 	bl	44e02 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   2eaa2:	9b03      	ldr	r3, [sp, #12]
   2eaa4:	4a49      	ldr	r2, [pc, #292]	; (2ebcc <smp_pairing_random+0x1a0>)
   2eaa6:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2eaa8:	1d20      	adds	r0, r4, #4
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   2eaaa:	fbb3 f1f2 	udiv	r1, r3, r2
   2eaae:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2eab2:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   2eab4:	9303      	str	r3, [sp, #12]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2eab6:	f018 fce3 	bl	47480 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   2eaba:	4b45      	ldr	r3, [pc, #276]	; (2ebd0 <smp_pairing_random+0x1a4>)
   2eabc:	9903      	ldr	r1, [sp, #12]
   2eabe:	681b      	ldr	r3, [r3, #0]
   2eac0:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2eac4:	68db      	ldr	r3, [r3, #12]
   2eac6:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   2eac8:	210d      	movs	r1, #13
   2eaca:	4620      	mov	r0, r4
   2eacc:	f018 fcd8 	bl	47480 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2ead0:	2110      	movs	r1, #16
   2ead2:	1d20      	adds	r0, r4, #4
   2ead4:	f018 fcd4 	bl	47480 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   2ead8:	4620      	mov	r0, r4
   2eada:	f018 fd53 	bl	47584 <smp_send_pairing_random>
   2eade:	4605      	mov	r5, r0
   2eae0:	e01b      	b.n	2eb1a <smp_pairing_random+0xee>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2eae2:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   2eae6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   2eaea:	4937      	ldr	r1, [pc, #220]	; (2ebc8 <smp_pairing_random+0x19c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2eaec:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   2eaee:	ae08      	add	r6, sp, #32
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2eaf0:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   2eaf4:	9600      	str	r6, [sp, #0]
   2eaf6:	6809      	ldr	r1, [r1, #0]
   2eaf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2eafc:	462a      	mov	r2, r5
   2eafe:	f104 0057 	add.w	r0, r4, #87	; 0x57
   2eb02:	f018 fc98 	bl	47436 <smp_f4>
   2eb06:	2800      	cmp	r0, #0
   2eb08:	d157      	bne.n	2ebba <smp_pairing_random+0x18e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   2eb0a:	2210      	movs	r2, #16
   2eb0c:	4631      	mov	r1, r6
   2eb0e:	f104 0017 	add.w	r0, r4, #23
   2eb12:	f016 f966 	bl	44de2 <memcmp>
   2eb16:	b118      	cbz	r0, 2eb20 <smp_pairing_random+0xf4>
		return BT_SMP_ERR_CONFIRM_FAILED;
   2eb18:	2504      	movs	r5, #4
}
   2eb1a:	4628      	mov	r0, r5
   2eb1c:	b01c      	add	sp, #112	; 0x70
   2eb1e:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->allowed_cmds,
   2eb20:	2103      	movs	r1, #3
   2eb22:	4620      	mov	r0, r4
   2eb24:	f018 fcac 	bl	47480 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   2eb28:	f018 fd2c 	bl	47584 <smp_send_pairing_random>
		if (err) {
   2eb2c:	4605      	mov	r5, r0
   2eb2e:	2800      	cmp	r0, #0
   2eb30:	d1f3      	bne.n	2eb1a <smp_pairing_random+0xee>
		smp->passkey_round++;
   2eb32:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   2eb36:	3301      	adds	r3, #1
   2eb38:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   2eb3a:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   2eb3c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   2eb40:	d108      	bne.n	2eb54 <smp_pairing_random+0x128>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   2eb42:	4620      	mov	r0, r4
   2eb44:	210d      	movs	r1, #13
   2eb46:	f018 fc9b 	bl	47480 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2eb4a:	2110      	movs	r1, #16
   2eb4c:	1d20      	adds	r0, r4, #4
   2eb4e:	f018 fc97 	bl	47480 <atomic_set_bit>
			return 0;
   2eb52:	e7e2      	b.n	2eb1a <smp_pairing_random+0xee>
		if (bt_rand(smp->prnd, 16)) {
   2eb54:	2110      	movs	r1, #16
   2eb56:	f104 0027 	add.w	r0, r4, #39	; 0x27
   2eb5a:	f003 fcd9 	bl	32510 <bt_rand>
   2eb5e:	3800      	subs	r0, #0
   2eb60:	bf18      	it	ne
   2eb62:	2001      	movne	r0, #1
   2eb64:	00c5      	lsls	r5, r0, #3
   2eb66:	e7d8      	b.n	2eb1a <smp_pairing_random+0xee>
		if (bt_rand(smp->prnd, 16)) {
   2eb68:	2110      	movs	r1, #16
   2eb6a:	f104 0027 	add.w	r0, r4, #39	; 0x27
   2eb6e:	f003 fccf 	bl	32510 <bt_rand>
   2eb72:	bb10      	cbnz	r0, 2ebba <smp_pairing_random+0x18e>
		if (bt_auth && bt_auth->oob_data_request) {
   2eb74:	4e16      	ldr	r6, [pc, #88]	; (2ebd0 <smp_pairing_random+0x1a4>)
   2eb76:	6833      	ldr	r3, [r6, #0]
   2eb78:	b30b      	cbz	r3, 2ebbe <smp_pairing_random+0x192>
   2eb7a:	691b      	ldr	r3, [r3, #16]
   2eb7c:	b1fb      	cbz	r3, 2ebbe <smp_pairing_random+0x192>
			struct bt_conn_oob_info info = {
   2eb7e:	4b15      	ldr	r3, [pc, #84]	; (2ebd4 <smp_pairing_random+0x1a8>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2eb80:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   2eb82:	881b      	ldrh	r3, [r3, #0]
   2eb84:	f8ad 3020 	strh.w	r3, [sp, #32]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2eb88:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2eb8a:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2eb8c:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2eb90:	d417      	bmi.n	2ebc2 <smp_pairing_random+0x196>
   2eb92:	2b00      	cmp	r3, #0
   2eb94:	bf14      	ite	ne
   2eb96:	2301      	movne	r3, #1
   2eb98:	2303      	moveq	r3, #3
			smp->oobd_local = NULL;
   2eb9a:	2500      	movs	r5, #0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   2eb9c:	1d20      	adds	r0, r4, #4
			smp->oobd_remote = NULL;
   2eb9e:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   2eba2:	210c      	movs	r1, #12
	info->lesc.oob_config = oob_config;
   2eba4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   2eba8:	f018 fc6a 	bl	47480 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   2ebac:	6833      	ldr	r3, [r6, #0]
   2ebae:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2ebb2:	691b      	ldr	r3, [r3, #16]
   2ebb4:	a908      	add	r1, sp, #32
   2ebb6:	4798      	blx	r3
			return 0;
   2ebb8:	e7af      	b.n	2eb1a <smp_pairing_random+0xee>
			return BT_SMP_ERR_UNSPECIFIED;
   2ebba:	2508      	movs	r5, #8
   2ebbc:	e7ad      	b.n	2eb1a <smp_pairing_random+0xee>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   2ebbe:	2502      	movs	r5, #2
   2ebc0:	e7ab      	b.n	2eb1a <smp_pairing_random+0xee>
		if (rsp_oob_present) {
   2ebc2:	005b      	lsls	r3, r3, #1
   2ebc4:	e7e9      	b.n	2eb9a <smp_pairing_random+0x16e>
   2ebc6:	bf00      	nop
   2ebc8:	20001d10 	.word	0x20001d10
   2ebcc:	000f4240 	.word	0x000f4240
   2ebd0:	20001c74 	.word	0x20001c74
   2ebd4:	000497e2 	.word	0x000497e2

0002ebd8 <compute_and_check_and_send_periph_dhcheck>:
{
   2ebd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   2ebdc:	2210      	movs	r2, #16
{
   2ebde:	b0a3      	sub	sp, #140	; 0x8c
   2ebe0:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   2ebe2:	2100      	movs	r1, #0
   2ebe4:	eb0d 0002 	add.w	r0, sp, r2
   2ebe8:	f016 f916 	bl	44e18 <memset>
	switch (smp->method) {
   2ebec:	7a23      	ldrb	r3, [r4, #8]
   2ebee:	2b05      	cmp	r3, #5
   2ebf0:	d87f      	bhi.n	2ecf2 <compute_and_check_and_send_periph_dhcheck+0x11a>
   2ebf2:	e8df f003 	tbb	[pc, r3]
   2ebf6:	0309      	.short	0x0309
   2ebf8:	807e0903 	.word	0x807e0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   2ebfc:	2204      	movs	r2, #4
   2ebfe:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   2ec02:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   2ec04:	f016 f8fd 	bl	44e02 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   2ec08:	4b62      	ldr	r3, [pc, #392]	; (2ed94 <compute_and_check_and_send_periph_dhcheck+0x1bc>)
		   &smp->chan.chan.conn->le.init_addr,
   2ec0a:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   2ec0e:	aa14      	add	r2, sp, #80	; 0x50
   2ec10:	f103 0630 	add.w	r6, r3, #48	; 0x30
   2ec14:	6818      	ldr	r0, [r3, #0]
   2ec16:	6859      	ldr	r1, [r3, #4]
   2ec18:	4615      	mov	r5, r2
   2ec1a:	c503      	stmia	r5!, {r0, r1}
   2ec1c:	3308      	adds	r3, #8
   2ec1e:	42b3      	cmp	r3, r6
   2ec20:	462a      	mov	r2, r5
   2ec22:	d1f7      	bne.n	2ec14 <compute_and_check_and_send_periph_dhcheck+0x3c>
   2ec24:	6818      	ldr	r0, [r3, #0]
   2ec26:	791b      	ldrb	r3, [r3, #4]
   2ec28:	6028      	str	r0, [r5, #0]
   2ec2a:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   2ec2c:	ad0c      	add	r5, sp, #48	; 0x30
   2ec2e:	2220      	movs	r2, #32
   2ec30:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2ec34:	4628      	mov	r0, r5
   2ec36:	f018 fb48 	bl	472ca <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   2ec3a:	4857      	ldr	r0, [pc, #348]	; (2ed98 <compute_and_check_and_send_periph_dhcheck+0x1c0>)
   2ec3c:	ab08      	add	r3, sp, #32
   2ec3e:	2220      	movs	r2, #32
   2ec40:	4629      	mov	r1, r5
   2ec42:	f018 fb64 	bl	4730e <bt_smp_aes_cmac>
	if (err) {
   2ec46:	2800      	cmp	r0, #0
   2ec48:	d153      	bne.n	2ecf2 <compute_and_check_and_send_periph_dhcheck+0x11a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   2ec4a:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   2ec4e:	2210      	movs	r2, #16
   2ec50:	4639      	mov	r1, r7
   2ec52:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   2ec56:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   2ec5a:	f018 fb36 	bl	472ca <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   2ec5e:	2210      	movs	r2, #16
   2ec60:	4641      	mov	r1, r8
   2ec62:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   2ec66:	f018 fb30 	bl	472ca <sys_memcpy_swap>
	m[37] = a1->type;
   2ec6a:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   2ec6e:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   2ec72:	2206      	movs	r2, #6
   2ec74:	f109 0190 	add.w	r1, r9, #144	; 0x90
   2ec78:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   2ec7c:	f018 fb25 	bl	472ca <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   2ec80:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   2ec84:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   2ec88:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   2ec8c:	2206      	movs	r2, #6
   2ec8e:	f109 0197 	add.w	r1, r9, #151	; 0x97
   2ec92:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   2ec96:	f018 fb18 	bl	472ca <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   2ec9a:	4633      	mov	r3, r6
   2ec9c:	2235      	movs	r2, #53	; 0x35
   2ec9e:	a914      	add	r1, sp, #80	; 0x50
   2eca0:	a808      	add	r0, sp, #32
   2eca2:	f018 fb34 	bl	4730e <bt_smp_aes_cmac>
	if (err) {
   2eca6:	bb20      	cbnz	r0, 2ecf2 <compute_and_check_and_send_periph_dhcheck+0x11a>
	sys_mem_swap(mackey, 16);
   2eca8:	4630      	mov	r0, r6
   2ecaa:	f018 fb6a 	bl	47382 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   2ecae:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   2ecb2:	2301      	movs	r3, #1
   2ecb4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   2ecb8:	2235      	movs	r2, #53	; 0x35
   2ecba:	464b      	mov	r3, r9
   2ecbc:	a914      	add	r1, sp, #80	; 0x50
   2ecbe:	a808      	add	r0, sp, #32
   2ecc0:	f018 fb25 	bl	4730e <bt_smp_aes_cmac>
	if (err) {
   2ecc4:	b9a8      	cbnz	r0, 2ecf2 <compute_and_check_and_send_periph_dhcheck+0x11a>
	sys_mem_swap(ltk, 16);
   2ecc6:	4648      	mov	r0, r9
   2ecc8:	f018 fb5b 	bl	47382 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   2eccc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   2ecd0:	aa14      	add	r2, sp, #80	; 0x50
   2ecd2:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   2ecd4:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   2ecd8:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   2ecda:	9301      	str	r3, [sp, #4]
   2ecdc:	f104 0311 	add.w	r3, r4, #17
   2ece0:	9202      	str	r2, [sp, #8]
   2ece2:	9300      	str	r3, [sp, #0]
   2ece4:	463a      	mov	r2, r7
   2ece6:	ab04      	add	r3, sp, #16
   2ece8:	4641      	mov	r1, r8
   2ecea:	4630      	mov	r0, r6
   2ecec:	f018 fb57 	bl	4739e <smp_f6>
   2ecf0:	b148      	cbz	r0, 2ed06 <compute_and_check_and_send_periph_dhcheck+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
   2ecf2:	2008      	movs	r0, #8
   2ecf4:	e046      	b.n	2ed84 <compute_and_check_and_send_periph_dhcheck+0x1ac>
		if (smp->oobd_remote) {
   2ecf6:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   2ecfa:	2900      	cmp	r1, #0
   2ecfc:	d084      	beq.n	2ec08 <compute_and_check_and_send_periph_dhcheck+0x30>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   2ecfe:	2210      	movs	r2, #16
   2ed00:	eb0d 0002 	add.w	r0, sp, r2
   2ed04:	e77e      	b.n	2ec04 <compute_and_check_and_send_periph_dhcheck+0x2c>
	if (smp->method == LE_SC_OOB) {
   2ed06:	7a23      	ldrb	r3, [r4, #8]
   2ed08:	2b05      	cmp	r3, #5
   2ed0a:	d108      	bne.n	2ed1e <compute_and_check_and_send_periph_dhcheck+0x146>
		if (smp->oobd_local) {
   2ed0c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   2ed10:	2210      	movs	r2, #16
   2ed12:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   2ed16:	2900      	cmp	r1, #0
   2ed18:	d037      	beq.n	2ed8a <compute_and_check_and_send_periph_dhcheck+0x1b2>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   2ed1a:	f016 f872 	bl	44e02 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   2ed1e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   2ed22:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   2ed24:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   2ed28:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   2ed2a:	9301      	str	r3, [sp, #4]
   2ed2c:	f104 030a 	add.w	r3, r4, #10
   2ed30:	9202      	str	r2, [sp, #8]
   2ed32:	9300      	str	r3, [sp, #0]
   2ed34:	4642      	mov	r2, r8
   2ed36:	ab04      	add	r3, sp, #16
   2ed38:	4639      	mov	r1, r7
   2ed3a:	4630      	mov	r0, r6
   2ed3c:	f018 fb2f 	bl	4739e <smp_f6>
   2ed40:	2800      	cmp	r0, #0
   2ed42:	d1d6      	bne.n	2ecf2 <compute_and_check_and_send_periph_dhcheck+0x11a>
	if (memcmp(smp->e, re, 16)) {
   2ed44:	4629      	mov	r1, r5
   2ed46:	2210      	movs	r2, #16
   2ed48:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   2ed4c:	f016 f849 	bl	44de2 <memcmp>
   2ed50:	4605      	mov	r5, r0
   2ed52:	b9e8      	cbnz	r0, 2ed90 <compute_and_check_and_send_periph_dhcheck+0x1b8>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   2ed54:	210d      	movs	r1, #13
   2ed56:	4620      	mov	r0, r4
   2ed58:	f018 fbf5 	bl	47546 <smp_create_pdu.constprop.0>
	if (!buf) {
   2ed5c:	4606      	mov	r6, r0
   2ed5e:	2800      	cmp	r0, #0
   2ed60:	d0c7      	beq.n	2ecf2 <compute_and_check_and_send_periph_dhcheck+0x11a>
   2ed62:	2110      	movs	r1, #16
   2ed64:	3008      	adds	r0, #8
   2ed66:	f018 ff96 	bl	47c96 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   2ed6a:	2210      	movs	r2, #16
   2ed6c:	a914      	add	r1, sp, #80	; 0x50
   2ed6e:	f016 f848 	bl	44e02 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   2ed72:	4631      	mov	r1, r6
   2ed74:	4620      	mov	r0, r4
   2ed76:	f018 fae8 	bl	4734a <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2ed7a:	1d20      	adds	r0, r4, #4
   2ed7c:	2101      	movs	r1, #1
   2ed7e:	f018 fb7f 	bl	47480 <atomic_set_bit>
	return 0;
   2ed82:	4628      	mov	r0, r5
}
   2ed84:	b023      	add	sp, #140	; 0x8c
   2ed86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   2ed8a:	f016 f845 	bl	44e18 <memset>
   2ed8e:	e7c6      	b.n	2ed1e <compute_and_check_and_send_periph_dhcheck+0x146>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2ed90:	200b      	movs	r0, #11
   2ed92:	e7f7      	b.n	2ed84 <compute_and_check_and_send_periph_dhcheck+0x1ac>
   2ed94:	000497e4 	.word	0x000497e4
   2ed98:	0004b4bb 	.word	0x0004b4bb

0002ed9c <smp_send_pairing_confirm>:
{
   2ed9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   2ed9e:	7a04      	ldrb	r4, [r0, #8]
   2eda0:	2c02      	cmp	r4, #2
{
   2eda2:	4605      	mov	r5, r0
	switch (smp->method) {
   2eda4:	d823      	bhi.n	2edee <smp_send_pairing_confirm+0x52>
   2eda6:	b144      	cbz	r4, 2edba <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2eda8:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   2edac:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   2edb0:	40dc      	lsrs	r4, r3
   2edb2:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   2edb6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2edba:	2103      	movs	r1, #3
   2edbc:	4628      	mov	r0, r5
   2edbe:	f018 fbc2 	bl	47546 <smp_create_pdu.constprop.0>
	if (!buf) {
   2edc2:	4606      	mov	r6, r0
   2edc4:	b1a8      	cbz	r0, 2edf2 <smp_send_pairing_confirm+0x56>
   2edc6:	2110      	movs	r1, #16
   2edc8:	3008      	adds	r0, #8
   2edca:	f018 ff64 	bl	47c96 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   2edce:	9000      	str	r0, [sp, #0]
   2edd0:	480f      	ldr	r0, [pc, #60]	; (2ee10 <smp_send_pairing_confirm+0x74>)
   2edd2:	4623      	mov	r3, r4
   2edd4:	6800      	ldr	r0, [r0, #0]
   2edd6:	f105 0227 	add.w	r2, r5, #39	; 0x27
   2edda:	f105 0157 	add.w	r1, r5, #87	; 0x57
   2edde:	f018 fb2a 	bl	47436 <smp_f4>
   2ede2:	4604      	mov	r4, r0
   2ede4:	b148      	cbz	r0, 2edfa <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
   2ede6:	4630      	mov	r0, r6
   2ede8:	f00e f9a8 	bl	3d13c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2edec:	e001      	b.n	2edf2 <smp_send_pairing_confirm+0x56>
	switch (smp->method) {
   2edee:	2c03      	cmp	r4, #3
   2edf0:	d001      	beq.n	2edf6 <smp_send_pairing_confirm+0x5a>
		return BT_SMP_ERR_UNSPECIFIED;
   2edf2:	2008      	movs	r0, #8
   2edf4:	e00a      	b.n	2ee0c <smp_send_pairing_confirm+0x70>
	switch (smp->method) {
   2edf6:	2400      	movs	r4, #0
   2edf8:	e7df      	b.n	2edba <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   2edfa:	4631      	mov	r1, r6
   2edfc:	4628      	mov	r0, r5
   2edfe:	f018 faa4 	bl	4734a <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2ee02:	1d28      	adds	r0, r5, #4
   2ee04:	4621      	mov	r1, r4
   2ee06:	f018 fa73 	bl	472f0 <atomic_clear_bit>
	return 0;
   2ee0a:	4620      	mov	r0, r4
}
   2ee0c:	b002      	add	sp, #8
   2ee0e:	bd70      	pop	{r4, r5, r6, pc}
   2ee10:	20001d10 	.word	0x20001d10

0002ee14 <smp_public_key_periph>:
{
   2ee14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2ee18:	1d06      	adds	r6, r0, #4
{
   2ee1a:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2ee1c:	210e      	movs	r1, #14
   2ee1e:	4630      	mov	r0, r6
   2ee20:	f018 fb48 	bl	474b4 <atomic_test_bit>
   2ee24:	b138      	cbz	r0, 2ee36 <smp_public_key_periph+0x22>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   2ee26:	210c      	movs	r1, #12
   2ee28:	4620      	mov	r0, r4
   2ee2a:	f018 fb8c 	bl	47546 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   2ee2e:	4605      	mov	r5, r0
   2ee30:	b958      	cbnz	r0, 2ee4a <smp_public_key_periph+0x36>
	switch (smp->method) {
   2ee32:	2008      	movs	r0, #8
   2ee34:	e03a      	b.n	2eeac <smp_public_key_periph+0x98>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   2ee36:	4b45      	ldr	r3, [pc, #276]	; (2ef4c <smp_public_key_periph+0x138>)
   2ee38:	2220      	movs	r2, #32
   2ee3a:	6819      	ldr	r1, [r3, #0]
   2ee3c:	f104 0057 	add.w	r0, r4, #87	; 0x57
   2ee40:	f015 ffcf 	bl	44de2 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   2ee44:	2800      	cmp	r0, #0
   2ee46:	d1ee      	bne.n	2ee26 <smp_public_key_periph+0x12>
   2ee48:	e7f3      	b.n	2ee32 <smp_public_key_periph+0x1e>
   2ee4a:	2140      	movs	r1, #64	; 0x40
   2ee4c:	3008      	adds	r0, #8
   2ee4e:	f018 ff22 	bl	47c96 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   2ee52:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 2ef4c <smp_public_key_periph+0x138>
   2ee56:	2220      	movs	r2, #32
   2ee58:	f8d8 1000 	ldr.w	r1, [r8]
   2ee5c:	4607      	mov	r7, r0
   2ee5e:	f015 ffd0 	bl	44e02 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   2ee62:	f8d8 1000 	ldr.w	r1, [r8]
   2ee66:	2220      	movs	r2, #32
   2ee68:	4411      	add	r1, r2
   2ee6a:	18b8      	adds	r0, r7, r2
   2ee6c:	f015 ffc9 	bl	44e02 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   2ee70:	4629      	mov	r1, r5
   2ee72:	4620      	mov	r0, r4
   2ee74:	f018 fa69 	bl	4734a <smp_send.constprop.0>
	switch (smp->method) {
   2ee78:	7a23      	ldrb	r3, [r4, #8]
   2ee7a:	2b05      	cmp	r3, #5
   2ee7c:	d8d9      	bhi.n	2ee32 <smp_public_key_periph+0x1e>
   2ee7e:	a201      	add	r2, pc, #4	; (adr r2, 2ee84 <smp_public_key_periph+0x70>)
   2ee80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2ee84:	0002ee9d 	.word	0x0002ee9d
   2ee88:	0002ef05 	.word	0x0002ef05
   2ee8c:	0002eeb1 	.word	0x0002eeb1
   2ee90:	0002ee9d 	.word	0x0002ee9d
   2ee94:	0002ee33 	.word	0x0002ee33
   2ee98:	0002ef41 	.word	0x0002ef41
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2ee9c:	2104      	movs	r1, #4
   2ee9e:	4620      	mov	r0, r4
   2eea0:	f018 faee 	bl	47480 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   2eea4:	f7ff ff7a 	bl	2ed9c <smp_send_pairing_confirm>
		if (err) {
   2eea8:	2800      	cmp	r0, #0
   2eeaa:	d03c      	beq.n	2ef26 <smp_public_key_periph+0x112>
}
   2eeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   2eeb0:	2104      	movs	r1, #4
   2eeb2:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   2eeb6:	f003 fb2b 	bl	32510 <bt_rand>
   2eeba:	2800      	cmp	r0, #0
   2eebc:	d1b9      	bne.n	2ee32 <smp_public_key_periph+0x1e>
		smp->passkey %= 1000000;
   2eebe:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   2eec2:	4a23      	ldr	r2, [pc, #140]	; (2ef50 <smp_public_key_periph+0x13c>)
	if (bt_auth && bt_auth->passkey_display) {
   2eec4:	4d23      	ldr	r5, [pc, #140]	; (2ef54 <smp_public_key_periph+0x140>)
		smp->passkey %= 1000000;
   2eec6:	fbb3 f1f2 	udiv	r1, r3, r2
   2eeca:	fb02 3311 	mls	r3, r2, r1, r3
   2eece:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   2eed2:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   2eed4:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   2eed8:	b163      	cbz	r3, 2eef4 <smp_public_key_periph+0xe0>
   2eeda:	685b      	ldr	r3, [r3, #4]
   2eedc:	b153      	cbz	r3, 2eef4 <smp_public_key_periph+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   2eede:	210b      	movs	r1, #11
   2eee0:	4630      	mov	r0, r6
   2eee2:	f018 facd 	bl	47480 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   2eee6:	682b      	ldr	r3, [r5, #0]
   2eee8:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   2eeec:	685b      	ldr	r3, [r3, #4]
   2eeee:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2eef2:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   2eef4:	2103      	movs	r1, #3
   2eef6:	4620      	mov	r0, r4
   2eef8:	f018 fac2 	bl	47480 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2eefc:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2eefe:	f018 fabf 	bl	47480 <atomic_set_bit>
		break;
   2ef02:	e010      	b.n	2ef26 <smp_public_key_periph+0x112>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   2ef04:	4620      	mov	r0, r4
   2ef06:	2103      	movs	r1, #3
   2ef08:	f018 faba 	bl	47480 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2ef0c:	210e      	movs	r1, #14
   2ef0e:	f018 fab7 	bl	47480 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2ef12:	4630      	mov	r0, r6
   2ef14:	210a      	movs	r1, #10
   2ef16:	f018 fab3 	bl	47480 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   2ef1a:	4b0e      	ldr	r3, [pc, #56]	; (2ef54 <smp_public_key_periph+0x140>)
   2ef1c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   2ef20:	681b      	ldr	r3, [r3, #0]
   2ef22:	689b      	ldr	r3, [r3, #8]
   2ef24:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2ef26:	4630      	mov	r0, r6
   2ef28:	2107      	movs	r1, #7
   2ef2a:	f018 faa9 	bl	47480 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   2ef2e:	2008      	movs	r0, #8
   2ef30:	f7ff fd6e 	bl	2ea10 <smp_find>
   2ef34:	b938      	cbnz	r0, 2ef46 <smp_public_key_periph+0x132>
		return smp_dhkey_generate(smp);
   2ef36:	4620      	mov	r0, r4
}
   2ef38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   2ef3c:	f7ff bd52 	b.w	2e9e4 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2ef40:	2104      	movs	r1, #4
   2ef42:	4620      	mov	r0, r4
   2ef44:	e7db      	b.n	2eefe <smp_public_key_periph+0xea>
	return 0;
   2ef46:	2000      	movs	r0, #0
   2ef48:	e7b0      	b.n	2eeac <smp_public_key_periph+0x98>
   2ef4a:	bf00      	nop
   2ef4c:	20001d10 	.word	0x20001d10
   2ef50:	000f4240 	.word	0x000f4240
   2ef54:	20001c74 	.word	0x20001c74

0002ef58 <smp_public_key>:
{
   2ef58:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   2ef5a:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   2ef5c:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
   2ef60:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   2ef62:	2220      	movs	r2, #32
   2ef64:	4631      	mov	r1, r6
   2ef66:	4628      	mov	r0, r5
   2ef68:	f015 ff4b 	bl	44e02 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   2ef6c:	2220      	movs	r2, #32
   2ef6e:	18b1      	adds	r1, r6, r2
   2ef70:	f104 0077 	add.w	r0, r4, #119	; 0x77
   2ef74:	f015 ff45 	bl	44e02 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   2ef78:	4628      	mov	r0, r5
   2ef7a:	f7fd f8fb 	bl	2c174 <bt_pub_key_is_debug>
   2ef7e:	b940      	cbnz	r0, 2ef92 <smp_public_key+0x3a>
	if (!sc_public_key) {
   2ef80:	4b15      	ldr	r3, [pc, #84]	; (2efd8 <smp_public_key+0x80>)
   2ef82:	681d      	ldr	r5, [r3, #0]
   2ef84:	bb1d      	cbnz	r5, 2efce <smp_public_key+0x76>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   2ef86:	1d20      	adds	r0, r4, #4
   2ef88:	2106      	movs	r1, #6
   2ef8a:	f018 fa79 	bl	47480 <atomic_set_bit>
		return 0;
   2ef8e:	4628      	mov	r0, r5
   2ef90:	e01c      	b.n	2efcc <smp_public_key+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   2ef92:	210e      	movs	r1, #14
   2ef94:	1d20      	adds	r0, r4, #4
   2ef96:	f018 fa73 	bl	47480 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   2ef9a:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   2ef9e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2efa2:	b933      	cbnz	r3, 2efb2 <smp_public_key+0x5a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2efa4:	7a28      	ldrb	r0, [r5, #8]
   2efa6:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2efaa:	f000 fb77 	bl	2f69c <bt_keys_get_addr>
   2efae:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   2efb2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2efb6:	2b00      	cmp	r3, #0
   2efb8:	d0e2      	beq.n	2ef80 <smp_public_key+0x28>
   2efba:	89da      	ldrh	r2, [r3, #14]
   2efbc:	f002 0224 	and.w	r2, r2, #36	; 0x24
   2efc0:	2a00      	cmp	r2, #0
   2efc2:	d0dd      	beq.n	2ef80 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   2efc4:	7b5b      	ldrb	r3, [r3, #13]
   2efc6:	079b      	lsls	r3, r3, #30
   2efc8:	d4da      	bmi.n	2ef80 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2efca:	2003      	movs	r0, #3
}
   2efcc:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   2efce:	4620      	mov	r0, r4
}
   2efd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   2efd4:	f7ff bf1e 	b.w	2ee14 <smp_public_key_periph>
   2efd8:	20001d10 	.word	0x20001d10

0002efdc <bt_smp_connected>:
{
   2efdc:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   2efde:	4905      	ldr	r1, [pc, #20]	; (2eff4 <bt_smp_connected+0x18>)
   2efe0:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   2efe4:	30e8      	adds	r0, #232	; 0xe8
   2efe6:	f019 fe21 	bl	48c2c <k_work_init_delayable>
	smp_reset(smp);
   2efea:	4620      	mov	r0, r4
}
   2efec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   2eff0:	f018 bb48 	b.w	47684 <smp_reset>
   2eff4:	00047a1b 	.word	0x00047a1b

0002eff8 <smp_pairing_req>:
{
   2eff8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   2effc:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   2effe:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   2f002:	78eb      	ldrb	r3, [r5, #3]
   2f004:	3b07      	subs	r3, #7
   2f006:	2b09      	cmp	r3, #9
{
   2f008:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   2f00a:	d904      	bls.n	2f016 <smp_pairing_req+0x1e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   2f00c:	2506      	movs	r5, #6
}
   2f00e:	4628      	mov	r0, r5
   2f010:	b002      	add	sp, #8
   2f012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2f016:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   2f01a:	b15b      	cbz	r3, 2f034 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2f01c:	1d26      	adds	r6, r4, #4
   2f01e:	210f      	movs	r1, #15
   2f020:	4630      	mov	r0, r6
   2f022:	f018 fa47 	bl	474b4 <atomic_test_bit>
   2f026:	b980      	cbnz	r0, 2f04a <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   2f028:	4620      	mov	r0, r4
   2f02a:	f7ff fcbf 	bl	2e9ac <smp_init>
		if (ret) {
   2f02e:	b160      	cbz	r0, 2f04a <smp_pairing_req+0x52>
			return ret;
   2f030:	b2c5      	uxtb	r5, r0
   2f032:	e7ec      	b.n	2f00e <smp_pairing_req+0x16>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2f034:	7a38      	ldrb	r0, [r7, #8]
   2f036:	f107 0188 	add.w	r1, r7, #136	; 0x88
   2f03a:	f000 fb2f 	bl	2f69c <bt_keys_get_addr>
   2f03e:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
   2f042:	2800      	cmp	r0, #0
   2f044:	d1ea      	bne.n	2f01c <smp_pairing_req+0x24>
	switch (sec) {
   2f046:	2508      	movs	r5, #8
   2f048:	e7e1      	b.n	2f00e <smp_pairing_req+0x16>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   2f04a:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   2f04c:	2206      	movs	r2, #6
   2f04e:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   2f050:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   2f052:	f104 000a 	add.w	r0, r4, #10
   2f056:	f015 fed4 	bl	44e02 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   2f05a:	2302      	movs	r3, #2
   2f05c:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   2f05e:	78a8      	ldrb	r0, [r5, #2]
   2f060:	f7ff fc86 	bl	2e970 <get_auth.constprop.0>
   2f064:	74e0      	strb	r0, [r4, #19]
   2f066:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   2f068:	f7ff fc4a 	bl	2e900 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   2f06c:	4b6e      	ldr	r3, [pc, #440]	; (2f228 <smp_pairing_req+0x230>)
	rsp->io_capability = get_io_capa();
   2f06e:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   2f070:	781b      	ldrb	r3, [r3, #0]
   2f072:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   2f074:	2310      	movs	r3, #16
   2f076:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   2f078:	792b      	ldrb	r3, [r5, #4]
   2f07a:	f003 0303 	and.w	r3, r3, #3
   2f07e:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   2f080:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   2f082:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   2f086:	f003 0301 	and.w	r3, r3, #1
   2f08a:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   2f08c:	d00c      	beq.n	2f0a8 <smp_pairing_req+0xb0>
   2f08e:	78ab      	ldrb	r3, [r5, #2]
   2f090:	071b      	lsls	r3, r3, #28
   2f092:	d509      	bpl.n	2f0a8 <smp_pairing_req+0xb0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   2f094:	2105      	movs	r1, #5
   2f096:	4630      	mov	r0, r6
   2f098:	f018 f9f2 	bl	47480 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   2f09c:	7d63      	ldrb	r3, [r4, #21]
   2f09e:	f003 0302 	and.w	r3, r3, #2
   2f0a2:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   2f0a4:	2300      	movs	r3, #0
   2f0a6:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   2f0a8:	7ce3      	ldrb	r3, [r4, #19]
   2f0aa:	0698      	lsls	r0, r3, #26
   2f0ac:	d506      	bpl.n	2f0bc <smp_pairing_req+0xc4>
   2f0ae:	78ab      	ldrb	r3, [r5, #2]
   2f0b0:	0699      	lsls	r1, r3, #26
   2f0b2:	d503      	bpl.n	2f0bc <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   2f0b4:	2114      	movs	r1, #20
   2f0b6:	4630      	mov	r0, r6
   2f0b8:	f018 f9e2 	bl	47480 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   2f0bc:	7da3      	ldrb	r3, [r4, #22]
   2f0be:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   2f0c2:	7d63      	ldrb	r3, [r4, #21]
   2f0c4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   2f0c8:	7ce3      	ldrb	r3, [r4, #19]
   2f0ca:	07da      	lsls	r2, r3, #31
   2f0cc:	d506      	bpl.n	2f0dc <smp_pairing_req+0xe4>
   2f0ce:	78ab      	ldrb	r3, [r5, #2]
   2f0d0:	07db      	lsls	r3, r3, #31
   2f0d2:	d503      	bpl.n	2f0dc <smp_pairing_req+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   2f0d4:	210d      	movs	r1, #13
   2f0d6:	4630      	mov	r0, r6
   2f0d8:	f018 f9d2 	bl	47480 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   2f0dc:	2103      	movs	r1, #3
   2f0de:	4630      	mov	r0, r6
   2f0e0:	f018 f9ce 	bl	47480 <atomic_set_bit>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   2f0e4:	7b23      	ldrb	r3, [r4, #12]
   2f0e6:	7ce1      	ldrb	r1, [r4, #19]
	smp->method = get_pair_method(smp, req->io_capability);
   2f0e8:	f895 8000 	ldrb.w	r8, [r5]
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   2f0ec:	ea03 0201 	and.w	r2, r3, r1
   2f0f0:	0710      	lsls	r0, r2, #28
   2f0f2:	d504      	bpl.n	2f0fe <smp_pairing_req+0x106>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   2f0f4:	7ae2      	ldrb	r2, [r4, #11]
   2f0f6:	7ca0      	ldrb	r0, [r4, #18]
   2f0f8:	4302      	orrs	r2, r0
   2f0fa:	07d2      	lsls	r2, r2, #31
   2f0fc:	d416      	bmi.n	2f12c <smp_pairing_req+0x134>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   2f0fe:	f1b8 0f04 	cmp.w	r8, #4
   2f102:	d815      	bhi.n	2f130 <smp_pairing_req+0x138>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   2f104:	430b      	orrs	r3, r1
   2f106:	f013 0304 	ands.w	r3, r3, #4
   2f10a:	d006      	beq.n	2f11a <smp_pairing_req+0x122>
	return gen_method_sc[remote_io][get_io_capa()];
   2f10c:	f7ff fbf8 	bl	2e900 <get_io_capa>
   2f110:	4b46      	ldr	r3, [pc, #280]	; (2f22c <smp_pairing_req+0x234>)
   2f112:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   2f116:	4443      	add	r3, r8
   2f118:	5c1b      	ldrb	r3, [r3, r0]
	smp->method = get_pair_method(smp, req->io_capability);
   2f11a:	7223      	strb	r3, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   2f11c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   2f120:	4620      	mov	r0, r4
   2f122:	f018 f9d0 	bl	474c6 <update_keys_check>
   2f126:	b928      	cbnz	r0, 2f134 <smp_pairing_req+0x13c>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2f128:	2503      	movs	r5, #3
   2f12a:	e770      	b.n	2f00e <smp_pairing_req+0x16>
			return LE_SC_OOB;
   2f12c:	2305      	movs	r3, #5
   2f12e:	e7f4      	b.n	2f11a <smp_pairing_req+0x122>
		return JUST_WORKS;
   2f130:	2300      	movs	r3, #0
   2f132:	e7f2      	b.n	2f11a <smp_pairing_req+0x122>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   2f134:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2f138:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   2f13a:	2b03      	cmp	r3, #3
   2f13c:	d056      	beq.n	2f1ec <smp_pairing_req+0x1f4>
   2f13e:	d844      	bhi.n	2f1ca <smp_pairing_req+0x1d2>
   2f140:	3b01      	subs	r3, #1
   2f142:	2b01      	cmp	r3, #1
   2f144:	f63f af7f 	bhi.w	2f046 <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2f148:	2105      	movs	r1, #5
   2f14a:	4630      	mov	r0, r6
   2f14c:	f018 f9b2 	bl	474b4 <atomic_test_bit>
   2f150:	2800      	cmp	r0, #0
   2f152:	d0e9      	beq.n	2f128 <smp_pairing_req+0x130>
	if (bt_auth && bt_auth->pairing_accept) {
   2f154:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2f230 <smp_pairing_req+0x238>
   2f158:	f8d8 3000 	ldr.w	r3, [r8]
   2f15c:	b1fb      	cbz	r3, 2f19e <smp_pairing_req+0x1a6>
   2f15e:	681b      	ldr	r3, [r3, #0]
   2f160:	b1eb      	cbz	r3, 2f19e <smp_pairing_req+0x1a6>
		const struct bt_conn_pairing_feat feat = {
   2f162:	782a      	ldrb	r2, [r5, #0]
   2f164:	f88d 2000 	strb.w	r2, [sp]
   2f168:	786a      	ldrb	r2, [r5, #1]
   2f16a:	f88d 2001 	strb.w	r2, [sp, #1]
   2f16e:	78aa      	ldrb	r2, [r5, #2]
   2f170:	f88d 2002 	strb.w	r2, [sp, #2]
   2f174:	78ea      	ldrb	r2, [r5, #3]
   2f176:	f88d 2003 	strb.w	r2, [sp, #3]
   2f17a:	792a      	ldrb	r2, [r5, #4]
   2f17c:	f88d 2004 	strb.w	r2, [sp, #4]
   2f180:	796a      	ldrb	r2, [r5, #5]
   2f182:	f88d 2005 	strb.w	r2, [sp, #5]
		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
   2f186:	4669      	mov	r1, sp
   2f188:	4638      	mov	r0, r7
   2f18a:	4798      	blx	r3
	switch (auth_err) {
   2f18c:	3801      	subs	r0, #1
   2f18e:	b2c0      	uxtb	r0, r0
   2f190:	2808      	cmp	r0, #8
   2f192:	d804      	bhi.n	2f19e <smp_pairing_req+0x1a6>
   2f194:	4b27      	ldr	r3, [pc, #156]	; (2f234 <smp_pairing_req+0x23c>)
   2f196:	5c1d      	ldrb	r5, [r3, r0]
		if (err) {
   2f198:	2d00      	cmp	r5, #0
   2f19a:	f47f af38 	bne.w	2f00e <smp_pairing_req+0x16>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2f19e:	7a25      	ldrb	r5, [r4, #8]
   2f1a0:	bb45      	cbnz	r5, 2f1f4 <smp_pairing_req+0x1fc>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2f1a2:	210f      	movs	r1, #15
   2f1a4:	4630      	mov	r0, r6
   2f1a6:	f018 f985 	bl	474b4 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   2f1aa:	bb18      	cbnz	r0, 2f1f4 <smp_pairing_req+0x1fc>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2f1ac:	f8d8 3000 	ldr.w	r3, [r8]
   2f1b0:	b303      	cbz	r3, 2f1f4 <smp_pairing_req+0x1fc>
	    bt_auth && bt_auth->pairing_confirm) {
   2f1b2:	699b      	ldr	r3, [r3, #24]
   2f1b4:	b1f3      	cbz	r3, 2f1f4 <smp_pairing_req+0x1fc>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2f1b6:	4630      	mov	r0, r6
   2f1b8:	210a      	movs	r1, #10
   2f1ba:	f018 f961 	bl	47480 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   2f1be:	f8d8 3000 	ldr.w	r3, [r8]
   2f1c2:	4638      	mov	r0, r7
   2f1c4:	699b      	ldr	r3, [r3, #24]
   2f1c6:	4798      	blx	r3
		return 0;
   2f1c8:	e721      	b.n	2f00e <smp_pairing_req+0x16>
	switch (sec) {
   2f1ca:	2b04      	cmp	r3, #4
   2f1cc:	f47f af3b 	bne.w	2f046 <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2f1d0:	7d23      	ldrb	r3, [r4, #20]
   2f1d2:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   2f1d4:	4293      	cmp	r3, r2
   2f1d6:	bf28      	it	cs
   2f1d8:	4613      	movcs	r3, r2
   2f1da:	2b10      	cmp	r3, #16
   2f1dc:	f47f af16 	bne.w	2f00c <smp_pairing_req+0x14>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2f1e0:	2105      	movs	r1, #5
   2f1e2:	4630      	mov	r0, r6
   2f1e4:	f018 f966 	bl	474b4 <atomic_test_bit>
   2f1e8:	2800      	cmp	r0, #0
   2f1ea:	d09d      	beq.n	2f128 <smp_pairing_req+0x130>
		if (smp->method == JUST_WORKS) {
   2f1ec:	7a23      	ldrb	r3, [r4, #8]
   2f1ee:	2b00      	cmp	r3, #0
   2f1f0:	d1aa      	bne.n	2f148 <smp_pairing_req+0x150>
   2f1f2:	e799      	b.n	2f128 <smp_pairing_req+0x130>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   2f1f4:	210c      	movs	r1, #12
   2f1f6:	4620      	mov	r0, r4
   2f1f8:	f018 f942 	bl	47480 <atomic_set_bit>
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2f1fc:	2102      	movs	r1, #2
   2f1fe:	f018 f9a2 	bl	47546 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2f202:	4605      	mov	r5, r0
   2f204:	2800      	cmp	r0, #0
   2f206:	f43f af1e 	beq.w	2f046 <smp_pairing_req+0x4e>
   2f20a:	2106      	movs	r1, #6
   2f20c:	3008      	adds	r0, #8
   2f20e:	f018 fd42 	bl	47c96 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2f212:	2206      	movs	r2, #6
   2f214:	f104 0111 	add.w	r1, r4, #17
   2f218:	f015 fdf3 	bl	44e02 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2f21c:	4629      	mov	r1, r5
   2f21e:	4620      	mov	r0, r4
   2f220:	f018 f893 	bl	4734a <smp_send.constprop.0>
	return 0;
   2f224:	2500      	movs	r5, #0
   2f226:	e6f2      	b.n	2f00e <smp_pairing_req+0x16>
   2f228:	20003c67 	.word	0x20003c67
   2f22c:	0004b4a2 	.word	0x0004b4a2
   2f230:	20001c74 	.word	0x20001c74
   2f234:	0004b491 	.word	0x0004b491

0002f238 <bt_smp_start_security>:
{
   2f238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   2f23c:	78c4      	ldrb	r4, [r0, #3]
   2f23e:	2c01      	cmp	r4, #1
{
   2f240:	4605      	mov	r5, r0
	switch (conn->role) {
   2f242:	d005      	beq.n	2f250 <bt_smp_start_security+0x18>
		return -EINVAL;
   2f244:	f06f 0415 	mvn.w	r4, #21
}
   2f248:	4620      	mov	r0, r4
   2f24a:	b003      	add	sp, #12
   2f24c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   2f250:	f018 f847 	bl	472e2 <smp_chan_get>
	if (!smp) {
   2f254:	4606      	mov	r6, r0
   2f256:	2800      	cmp	r0, #0
   2f258:	f000 80a4 	beq.w	2f3a4 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2f25c:	1d07      	adds	r7, r0, #4
   2f25e:	2104      	movs	r1, #4
   2f260:	4638      	mov	r0, r7
   2f262:	f018 f927 	bl	474b4 <atomic_test_bit>
   2f266:	2800      	cmp	r0, #0
   2f268:	f040 809f 	bne.w	2f3aa <bt_smp_start_security+0x172>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2f26c:	2103      	movs	r1, #3
   2f26e:	4638      	mov	r0, r7
   2f270:	f018 f920 	bl	474b4 <atomic_test_bit>
   2f274:	b110      	cbz	r0, 2f27c <bt_smp_start_security+0x44>
		return -EBUSY;
   2f276:	f06f 040f 	mvn.w	r4, #15
   2f27a:	e7e5      	b.n	2f248 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f27c:	4621      	mov	r1, r4
   2f27e:	4638      	mov	r0, r7
   2f280:	f018 f918 	bl	474b4 <atomic_test_bit>
   2f284:	2800      	cmp	r0, #0
   2f286:	d1f6      	bne.n	2f276 <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2f288:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   2f28a:	2b03      	cmp	r3, #3
   2f28c:	d03d      	beq.n	2f30a <bt_smp_start_security+0xd2>
   2f28e:	d82c      	bhi.n	2f2ea <bt_smp_start_security+0xb2>
   2f290:	3b01      	subs	r3, #1
   2f292:	2b01      	cmp	r3, #1
   2f294:	d946      	bls.n	2f324 <bt_smp_start_security+0xec>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2f296:	210b      	movs	r1, #11
   2f298:	1d28      	adds	r0, r5, #4
   2f29a:	f018 f90b 	bl	474b4 <atomic_test_bit>
   2f29e:	2800      	cmp	r0, #0
   2f2a0:	d1d0      	bne.n	2f244 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   2f2a2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2f2a6:	b983      	cbnz	r3, 2f2ca <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
   2f2a8:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2f2ac:	7a29      	ldrb	r1, [r5, #8]
   2f2ae:	4622      	mov	r2, r4
   2f2b0:	2020      	movs	r0, #32
   2f2b2:	f000 fa33 	bl	2f71c <bt_keys_find>
   2f2b6:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   2f2ba:	b930      	cbnz	r0, 2f2ca <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2f2bc:	7a29      	ldrb	r1, [r5, #8]
   2f2be:	4622      	mov	r2, r4
   2f2c0:	2004      	movs	r0, #4
   2f2c2:	f000 fa2b 	bl	2f71c <bt_keys_find>
   2f2c6:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   2f2ca:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2f2ce:	2b00      	cmp	r3, #0
   2f2d0:	d0b8      	beq.n	2f244 <bt_smp_start_security+0xc>
   2f2d2:	89da      	ldrh	r2, [r3, #14]
   2f2d4:	f002 0224 	and.w	r2, r2, #36	; 0x24
   2f2d8:	2a00      	cmp	r2, #0
   2f2da:	d0b3      	beq.n	2f244 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   2f2dc:	7aaa      	ldrb	r2, [r5, #10]
   2f2de:	2a02      	cmp	r2, #2
   2f2e0:	d920      	bls.n	2f324 <bt_smp_start_security+0xec>
   2f2e2:	7b5b      	ldrb	r3, [r3, #13]
   2f2e4:	07db      	lsls	r3, r3, #31
   2f2e6:	d5ad      	bpl.n	2f244 <bt_smp_start_security+0xc>
   2f2e8:	e01c      	b.n	2f324 <bt_smp_start_security+0xec>
	switch (conn->required_sec_level) {
   2f2ea:	2b04      	cmp	r3, #4
   2f2ec:	d1d3      	bne.n	2f296 <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f2ee:	f7ff fb07 	bl	2e900 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   2f2f2:	2803      	cmp	r0, #3
   2f2f4:	d104      	bne.n	2f300 <bt_smp_start_security+0xc8>
   2f2f6:	4b2e      	ldr	r3, [pc, #184]	; (2f3b0 <bt_smp_start_security+0x178>)
   2f2f8:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f2fa:	b1f3      	cbz	r3, 2f33a <bt_smp_start_security+0x102>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   2f2fc:	691c      	ldr	r4, [r3, #16]
   2f2fe:	b10c      	cbz	r4, 2f304 <bt_smp_start_security+0xcc>
   2f300:	4b2c      	ldr	r3, [pc, #176]	; (2f3b4 <bt_smp_start_security+0x17c>)
   2f302:	781c      	ldrb	r4, [r3, #0]
   2f304:	f004 0401 	and.w	r4, r4, #1
   2f308:	e00a      	b.n	2f320 <bt_smp_start_security+0xe8>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f30a:	f7ff faf9 	bl	2e900 <get_io_capa>
   2f30e:	2803      	cmp	r0, #3
   2f310:	d106      	bne.n	2f320 <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
   2f312:	4b27      	ldr	r3, [pc, #156]	; (2f3b0 <bt_smp_start_security+0x178>)
   2f314:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2f316:	b11c      	cbz	r4, 2f320 <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
   2f318:	6924      	ldr	r4, [r4, #16]
   2f31a:	3c00      	subs	r4, #0
   2f31c:	bf18      	it	ne
   2f31e:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2f320:	2c00      	cmp	r4, #0
   2f322:	d0b8      	beq.n	2f296 <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
   2f324:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2f328:	b14b      	cbz	r3, 2f33e <bt_smp_start_security+0x106>
	if (smp_init(smp) != 0) {
   2f32a:	4630      	mov	r0, r6
   2f32c:	f7ff fb3e 	bl	2e9ac <smp_init>
   2f330:	4604      	mov	r4, r0
   2f332:	b180      	cbz	r0, 2f356 <bt_smp_start_security+0x11e>
		return -ENOBUFS;
   2f334:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2f338:	e786      	b.n	2f248 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   2f33a:	2400      	movs	r4, #0
   2f33c:	e7e2      	b.n	2f304 <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2f33e:	7a28      	ldrb	r0, [r5, #8]
   2f340:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2f344:	f000 f9aa 	bl	2f69c <bt_keys_get_addr>
   2f348:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   2f34c:	2800      	cmp	r0, #0
   2f34e:	d1ec      	bne.n	2f32a <bt_smp_start_security+0xf2>
			return -ENOMEM;
   2f350:	f06f 040b 	mvn.w	r4, #11
   2f354:	e778      	b.n	2f248 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   2f356:	210b      	movs	r1, #11
   2f358:	4630      	mov	r0, r6
   2f35a:	f018 f8f4 	bl	47546 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   2f35e:	4680      	mov	r8, r0
   2f360:	2800      	cmp	r0, #0
   2f362:	d0e7      	beq.n	2f334 <bt_smp_start_security+0xfc>
   2f364:	2101      	movs	r1, #1
   2f366:	3008      	adds	r0, #8
   2f368:	f018 fc95 	bl	47c96 <net_buf_simple_add>
   2f36c:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   2f36e:	2009      	movs	r0, #9
   2f370:	f7ff fafe 	bl	2e970 <get_auth.constprop.0>
   2f374:	4623      	mov	r3, r4
   2f376:	f889 0000 	strb.w	r0, [r9]
   2f37a:	4642      	mov	r2, r8
   2f37c:	9400      	str	r4, [sp, #0]
   2f37e:	2106      	movs	r1, #6
   2f380:	4628      	mov	r0, r5
   2f382:	f016 fe58 	bl	46036 <bt_l2cap_send_cb>
	if (err) {
   2f386:	4604      	mov	r4, r0
   2f388:	b118      	cbz	r0, 2f392 <bt_smp_start_security+0x15a>
		net_buf_unref(req_buf);
   2f38a:	4640      	mov	r0, r8
   2f38c:	f00d fed6 	bl	3d13c <net_buf_unref>
		return err;
   2f390:	e75a      	b.n	2f248 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   2f392:	4638      	mov	r0, r7
   2f394:	210f      	movs	r1, #15
   2f396:	f018 f873 	bl	47480 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2f39a:	2101      	movs	r1, #1
   2f39c:	4630      	mov	r0, r6
   2f39e:	f018 f86f 	bl	47480 <atomic_set_bit>
	return 0;
   2f3a2:	e751      	b.n	2f248 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   2f3a4:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2f3a8:	e74e      	b.n	2f248 <bt_smp_start_security+0x10>
		return -EIO;
   2f3aa:	f06f 0404 	mvn.w	r4, #4
   2f3ae:	e74b      	b.n	2f248 <bt_smp_start_security+0x10>
   2f3b0:	20001c74 	.word	0x20001c74
   2f3b4:	20003c68 	.word	0x20003c68

0002f3b8 <smp_pairing_complete>:
{
   2f3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   2f3ba:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   2f3be:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   2f3c0:	1d07      	adds	r7, r0, #4
	if (!status) {
   2f3c2:	b9e9      	cbnz	r1, 2f400 <smp_pairing_complete+0x48>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   2f3c4:	210d      	movs	r1, #13
   2f3c6:	4638      	mov	r0, r7
   2f3c8:	f018 f874 	bl	474b4 <atomic_test_bit>
		if (bond_flag) {
   2f3cc:	4606      	mov	r6, r0
   2f3ce:	b118      	cbz	r0, 2f3d8 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   2f3d0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2f3d4:	f000 fa28 	bl	2f828 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   2f3d8:	4b24      	ldr	r3, [pc, #144]	; (2f46c <smp_pairing_complete+0xb4>)
   2f3da:	681b      	ldr	r3, [r3, #0]
   2f3dc:	b123      	cbz	r3, 2f3e8 <smp_pairing_complete+0x30>
   2f3de:	69db      	ldr	r3, [r3, #28]
		    bt_auth && bt_auth->pairing_failed) {
   2f3e0:	b113      	cbz	r3, 2f3e8 <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(conn, security_err);
   2f3e2:	4631      	mov	r1, r6
   2f3e4:	4620      	mov	r0, r4
   2f3e6:	4798      	blx	r3
	smp_reset(smp);
   2f3e8:	4628      	mov	r0, r5
   2f3ea:	f018 f94b 	bl	47684 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   2f3ee:	7a62      	ldrb	r2, [r4, #9]
   2f3f0:	7aa3      	ldrb	r3, [r4, #10]
   2f3f2:	429a      	cmp	r2, r3
   2f3f4:	d039      	beq.n	2f46a <smp_pairing_complete+0xb2>
		bt_smp_start_security(conn);
   2f3f6:	4620      	mov	r0, r4
}
   2f3f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   2f3fc:	f7ff bf1c 	b.w	2f238 <bt_smp_start_security>
	switch (smp_err) {
   2f400:	3901      	subs	r1, #1
   2f402:	b2c9      	uxtb	r1, r1
   2f404:	290e      	cmp	r1, #14
   2f406:	bf9c      	itt	ls
   2f408:	4b19      	ldrls	r3, [pc, #100]	; (2f470 <smp_pairing_complete+0xb8>)
   2f40a:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   2f40c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   2f410:	bf88      	it	hi
   2f412:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   2f414:	b143      	cbz	r3, 2f428 <smp_pairing_complete+0x70>
   2f416:	7b1b      	ldrb	r3, [r3, #12]
   2f418:	bb03      	cbnz	r3, 2f45c <smp_pairing_complete+0xa4>
			bt_keys_clear(conn->le.keys);
   2f41a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2f41e:	f000 f9db 	bl	2f7d8 <bt_keys_clear>
			conn->le.keys = NULL;
   2f422:	2300      	movs	r3, #0
   2f424:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   2f428:	2102      	movs	r1, #2
   2f42a:	4638      	mov	r0, r7
   2f42c:	f018 f842 	bl	474b4 <atomic_test_bit>
   2f430:	b940      	cbnz	r0, 2f444 <smp_pairing_complete+0x8c>
	switch (err) {
   2f432:	2e07      	cmp	r6, #7
   2f434:	bf96      	itet	ls
   2f436:	4b0f      	ldrls	r3, [pc, #60]	; (2f474 <smp_pairing_complete+0xbc>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   2f438:	211f      	movhi	r1, #31
   2f43a:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   2f43c:	4632      	mov	r2, r6
   2f43e:	4620      	mov	r0, r4
   2f440:	f7fd faa0 	bl	2c984 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2f444:	2103      	movs	r1, #3
   2f446:	4638      	mov	r0, r7
   2f448:	f018 f834 	bl	474b4 <atomic_test_bit>
   2f44c:	2800      	cmp	r0, #0
   2f44e:	d0cb      	beq.n	2f3e8 <smp_pairing_complete+0x30>
   2f450:	4b06      	ldr	r3, [pc, #24]	; (2f46c <smp_pairing_complete+0xb4>)
   2f452:	681b      	ldr	r3, [r3, #0]
   2f454:	2b00      	cmp	r3, #0
   2f456:	d0c7      	beq.n	2f3e8 <smp_pairing_complete+0x30>
		    bt_auth && bt_auth->pairing_failed) {
   2f458:	6a1b      	ldr	r3, [r3, #32]
   2f45a:	e7c1      	b.n	2f3e0 <smp_pairing_complete+0x28>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   2f45c:	2102      	movs	r1, #2
   2f45e:	4638      	mov	r0, r7
   2f460:	f018 f828 	bl	474b4 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   2f464:	2800      	cmp	r0, #0
   2f466:	d1d8      	bne.n	2f41a <smp_pairing_complete+0x62>
   2f468:	e7de      	b.n	2f428 <smp_pairing_complete+0x70>
}
   2f46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f46c:	20001c74 	.word	0x20001c74
   2f470:	0004b482 	.word	0x0004b482
   2f474:	0004b49a 	.word	0x0004b49a

0002f478 <bt_smp_recv>:
{
   2f478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   2f47a:	898b      	ldrh	r3, [r1, #12]
{
   2f47c:	4607      	mov	r7, r0
   2f47e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   2f480:	b393      	cbz	r3, 2f4e8 <bt_smp_recv+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
   2f482:	2101      	movs	r1, #1
   2f484:	f105 0008 	add.w	r0, r5, #8
   2f488:	f018 fc2c 	bl	47ce4 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2f48c:	2104      	movs	r1, #4
   2f48e:	4606      	mov	r6, r0
   2f490:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   2f494:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   2f498:	f018 f80c 	bl	474b4 <atomic_test_bit>
   2f49c:	bb20      	cbnz	r0, 2f4e8 <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   2f49e:	7831      	ldrb	r1, [r6, #0]
   2f4a0:	290e      	cmp	r1, #14
   2f4a2:	d821      	bhi.n	2f4e8 <bt_smp_recv+0x70>
	if (!handlers[hdr->code].func) {
   2f4a4:	4f11      	ldr	r7, [pc, #68]	; (2f4ec <bt_smp_recv+0x74>)
   2f4a6:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   2f4aa:	b923      	cbnz	r3, 2f4b6 <bt_smp_recv+0x3e>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   2f4ac:	2107      	movs	r1, #7
		smp_error(smp, err);
   2f4ae:	4620      	mov	r0, r4
   2f4b0:	f018 f98f 	bl	477d2 <smp_error>
   2f4b4:	e018      	b.n	2f4e8 <bt_smp_recv+0x70>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   2f4b6:	4620      	mov	r0, r4
   2f4b8:	f018 f8ce 	bl	47658 <atomic_test_and_clear_bit>
   2f4bc:	7833      	ldrb	r3, [r6, #0]
   2f4be:	b918      	cbnz	r0, 2f4c8 <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   2f4c0:	2b05      	cmp	r3, #5
   2f4c2:	d011      	beq.n	2f4e8 <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   2f4c4:	2108      	movs	r1, #8
   2f4c6:	e7f2      	b.n	2f4ae <bt_smp_recv+0x36>
	if (buf->len != handlers[hdr->code].expect_len) {
   2f4c8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   2f4cc:	89a9      	ldrh	r1, [r5, #12]
   2f4ce:	7912      	ldrb	r2, [r2, #4]
   2f4d0:	4291      	cmp	r1, r2
   2f4d2:	d001      	beq.n	2f4d8 <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   2f4d4:	210a      	movs	r1, #10
   2f4d6:	e7ea      	b.n	2f4ae <bt_smp_recv+0x36>
	err = handlers[hdr->code].func(smp, buf);
   2f4d8:	4629      	mov	r1, r5
   2f4da:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   2f4de:	4620      	mov	r0, r4
   2f4e0:	4798      	blx	r3
	if (err) {
   2f4e2:	4601      	mov	r1, r0
   2f4e4:	2800      	cmp	r0, #0
   2f4e6:	d1e2      	bne.n	2f4ae <bt_smp_recv+0x36>
}
   2f4e8:	2000      	movs	r0, #0
   2f4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f4ec:	00049f48 	.word	0x00049f48

0002f4f0 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   2f4f0:	4b0c      	ldr	r3, [pc, #48]	; (2f524 <bt_smp_pkey_ready+0x34>)
{
   2f4f2:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   2f4f4:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   2f4f6:	b1a0      	cbz	r0, 2f522 <bt_smp_pkey_ready+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f4f8:	4c0b      	ldr	r4, [pc, #44]	; (2f528 <bt_smp_pkey_ready+0x38>)
	z_impl_k_sem_give(sem);
   2f4fa:	480c      	ldr	r0, [pc, #48]	; (2f52c <bt_smp_pkey_ready+0x3c>)
   2f4fc:	f012 f878 	bl	415f0 <z_impl_k_sem_give>
   2f500:	f3bf 8f5b 	dmb	ish
   2f504:	6863      	ldr	r3, [r4, #4]
   2f506:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   2f50a:	065b      	lsls	r3, r3, #25
   2f50c:	d509      	bpl.n	2f522 <bt_smp_pkey_ready+0x32>
		err = smp_public_key_periph(smp);
   2f50e:	4620      	mov	r0, r4
   2f510:	f7ff fc80 	bl	2ee14 <smp_public_key_periph>
		if (err) {
   2f514:	4601      	mov	r1, r0
   2f516:	b120      	cbz	r0, 2f522 <bt_smp_pkey_ready+0x32>
			smp_error(smp, err);
   2f518:	4620      	mov	r0, r4
}
   2f51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   2f51e:	f018 b958 	b.w	477d2 <smp_error>
}
   2f522:	bd10      	pop	{r4, pc}
   2f524:	20001d10 	.word	0x20001d10
   2f528:	20001228 	.word	0x20001228
   2f52c:	20000bc4 	.word	0x20000bc4

0002f530 <smp_pairing_failed>:
{
   2f530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   2f532:	1d05      	adds	r5, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   2f534:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   2f538:	688e      	ldr	r6, [r1, #8]
{
   2f53a:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   2f53c:	210a      	movs	r1, #10
   2f53e:	4628      	mov	r0, r5
   2f540:	f018 f88a 	bl	47658 <atomic_test_and_clear_bit>
   2f544:	b140      	cbz	r0, 2f558 <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
   2f546:	4b0b      	ldr	r3, [pc, #44]	; (2f574 <smp_pairing_failed+0x44>)
   2f548:	681b      	ldr	r3, [r3, #0]
   2f54a:	b963      	cbnz	r3, 2f566 <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
   2f54c:	4620      	mov	r0, r4
   2f54e:	7831      	ldrb	r1, [r6, #0]
   2f550:	f7ff ff32 	bl	2f3b8 <smp_pairing_complete>
}
   2f554:	2000      	movs	r0, #0
   2f556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   2f558:	210b      	movs	r1, #11
   2f55a:	4628      	mov	r0, r5
   2f55c:	f018 f87c 	bl	47658 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   2f560:	2800      	cmp	r0, #0
   2f562:	d1f0      	bne.n	2f546 <smp_pairing_failed+0x16>
   2f564:	e7f2      	b.n	2f54c <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
   2f566:	695b      	ldr	r3, [r3, #20]
   2f568:	2b00      	cmp	r3, #0
   2f56a:	d0ef      	beq.n	2f54c <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
   2f56c:	4638      	mov	r0, r7
   2f56e:	4798      	blx	r3
   2f570:	e7ec      	b.n	2f54c <smp_pairing_failed+0x1c>
   2f572:	bf00      	nop
   2f574:	20001c74 	.word	0x20001c74

0002f578 <bt_smp_encrypt_change>:
{
   2f578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   2f57c:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f57e:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   2f582:	4604      	mov	r4, r0
   2f584:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f586:	4630      	mov	r0, r6
   2f588:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   2f58a:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2f58e:	f018 f863 	bl	47658 <atomic_test_and_clear_bit>
   2f592:	2800      	cmp	r0, #0
   2f594:	d059      	beq.n	2f64a <bt_smp_encrypt_change+0xd2>
	if (hci_status) {
   2f596:	b1cf      	cbz	r7, 2f5cc <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2f598:	2103      	movs	r1, #3
   2f59a:	4630      	mov	r0, r6
   2f59c:	f017 ff8a 	bl	474b4 <atomic_test_bit>
   2f5a0:	2800      	cmp	r0, #0
   2f5a2:	d052      	beq.n	2f64a <bt_smp_encrypt_change+0xd2>
			uint8_t smp_err = smp_err_get(
   2f5a4:	4638      	mov	r0, r7
   2f5a6:	f7fb fef3 	bl	2b390 <bt_security_err_get>
	switch (auth_err) {
   2f5aa:	3801      	subs	r0, #1
   2f5ac:	b2c0      	uxtb	r0, r0
   2f5ae:	2808      	cmp	r0, #8
   2f5b0:	bf9a      	itte	ls
   2f5b2:	4b2b      	ldrls	r3, [pc, #172]	; (2f660 <bt_smp_encrypt_change+0xe8>)
   2f5b4:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   2f5b6:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   2f5b8:	2102      	movs	r1, #2
   2f5ba:	4630      	mov	r0, r6
   2f5bc:	f017 ff60 	bl	47480 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   2f5c0:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   2f5c2:	4628      	mov	r0, r5
}
   2f5c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   2f5c8:	f7ff bef6 	b.w	2f3b8 <smp_pairing_complete>
	if (!conn->encrypt) {
   2f5cc:	f898 300b 	ldrb.w	r3, [r8, #11]
   2f5d0:	2b00      	cmp	r3, #0
   2f5d2:	d03a      	beq.n	2f64a <bt_smp_encrypt_change+0xd2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2f5d4:	2103      	movs	r1, #3
   2f5d6:	4630      	mov	r0, r6
   2f5d8:	f017 ff6c 	bl	474b4 <atomic_test_bit>
   2f5dc:	b920      	cbnz	r0, 2f5e8 <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   2f5de:	4628      	mov	r0, r5
}
   2f5e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   2f5e4:	f018 b84e 	b.w	47684 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2f5e8:	2105      	movs	r1, #5
   2f5ea:	4630      	mov	r0, r6
   2f5ec:	f017 ff62 	bl	474b4 <atomic_test_bit>
   2f5f0:	b1b8      	cbz	r0, 2f622 <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   2f5f2:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   2f5f6:	071f      	lsls	r7, r3, #28
   2f5f8:	d507      	bpl.n	2f60a <bt_smp_encrypt_change+0x92>
   2f5fa:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2f5fe:	0718      	lsls	r0, r3, #28
   2f600:	d503      	bpl.n	2f60a <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   2f602:	2111      	movs	r1, #17
   2f604:	4630      	mov	r0, r6
   2f606:	f017 ff3b 	bl	47480 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   2f60a:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   2f60e:	f023 0308 	bic.w	r3, r3, #8
   2f612:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   2f616:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2f61a:	f023 0308 	bic.w	r3, r3, #8
   2f61e:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   2f622:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2f626:	07d9      	lsls	r1, r3, #31
   2f628:	d511      	bpl.n	2f64e <bt_smp_encrypt_change+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   2f62a:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2f62c:	4628      	mov	r0, r5
   2f62e:	f017 ff27 	bl	47480 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   2f632:	2102      	movs	r1, #2
   2f634:	4630      	mov	r0, r6
   2f636:	f017 ff23 	bl	47480 <atomic_set_bit>
	struct bt_keys *keys = conn->le.keys;
   2f63a:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   2f63c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   2f640:	b11b      	cbz	r3, 2f64a <bt_smp_encrypt_change+0xd2>
	if (!smp->local_dist && !smp->remote_dist) {
   2f642:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   2f646:	2900      	cmp	r1, #0
   2f648:	d0bb      	beq.n	2f5c2 <bt_smp_encrypt_change+0x4a>
}
   2f64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   2f64e:	079a      	lsls	r2, r3, #30
   2f650:	d501      	bpl.n	2f656 <bt_smp_encrypt_change+0xde>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   2f652:	2108      	movs	r1, #8
   2f654:	e7ea      	b.n	2f62c <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2f656:	075b      	lsls	r3, r3, #29
   2f658:	d5eb      	bpl.n	2f632 <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2f65a:	210a      	movs	r1, #10
   2f65c:	e7e6      	b.n	2f62c <bt_smp_encrypt_change+0xb4>
   2f65e:	bf00      	nop
   2f660:	0004b491 	.word	0x0004b491

0002f664 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   2f664:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   2f666:	4b0a      	ldr	r3, [pc, #40]	; (2f690 <bt_smp_init+0x2c>)
   2f668:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2f66c:	f003 0306 	and.w	r3, r3, #6
   2f670:	2b06      	cmp	r3, #6
   2f672:	4b08      	ldr	r3, [pc, #32]	; (2f694 <bt_smp_init+0x30>)
   2f674:	bf0c      	ite	eq
   2f676:	2201      	moveq	r2, #1
   2f678:	2200      	movne	r2, #0
   2f67a:	701a      	strb	r2, [r3, #0]
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
   2f67c:	d104      	bne.n	2f688 <bt_smp_init+0x24>
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   2f67e:	4806      	ldr	r0, [pc, #24]	; (2f698 <bt_smp_init+0x34>)
   2f680:	f7fc fd84 	bl	2c18c <bt_pub_key_gen>
	}

	return smp_self_test();
   2f684:	2000      	movs	r0, #0
}
   2f686:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2f688:	f06f 0001 	mvn.w	r0, #1
   2f68c:	e7fb      	b.n	2f686 <bt_smp_init+0x22>
   2f68e:	bf00      	nop
   2f690:	20000000 	.word	0x20000000
   2f694:	20003c68 	.word	0x20003c68
   2f698:	2000041c 	.word	0x2000041c

0002f69c <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   2f69c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2f69e:	4d11      	ldr	r5, [pc, #68]	; (2f6e4 <bt_keys_get_addr+0x48>)
   2f6a0:	782b      	ldrb	r3, [r5, #0]
   2f6a2:	4283      	cmp	r3, r0
{
   2f6a4:	4606      	mov	r6, r0
   2f6a6:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2f6a8:	d00b      	beq.n	2f6c2 <bt_keys_get_addr+0x26>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   2f6aa:	2400      	movs	r4, #0
   2f6ac:	480e      	ldr	r0, [pc, #56]	; (2f6e8 <bt_keys_get_addr+0x4c>)
   2f6ae:	9400      	str	r4, [sp, #0]
   2f6b0:	2207      	movs	r2, #7
   2f6b2:	4669      	mov	r1, sp
   2f6b4:	f8cd 4003 	str.w	r4, [sp, #3]
   2f6b8:	f015 fb93 	bl	44de2 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   2f6bc:	b150      	cbz	r0, 2f6d4 <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   2f6be:	4620      	mov	r0, r4
   2f6c0:	e006      	b.n	2f6d0 <bt_keys_get_addr+0x34>
   2f6c2:	2207      	movs	r2, #7
   2f6c4:	1c68      	adds	r0, r5, #1
   2f6c6:	f015 fb8c 	bl	44de2 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   2f6ca:	2800      	cmp	r0, #0
   2f6cc:	d1ed      	bne.n	2f6aa <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
   2f6ce:	4628      	mov	r0, r5
}
   2f6d0:	b003      	add	sp, #12
   2f6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
   2f6d4:	4804      	ldr	r0, [pc, #16]	; (2f6e8 <bt_keys_get_addr+0x4c>)
		keys->id = id;
   2f6d6:	702e      	strb	r6, [r5, #0]
   2f6d8:	2207      	movs	r2, #7
   2f6da:	4639      	mov	r1, r7
   2f6dc:	f015 fb91 	bl	44e02 <memcpy>
		return keys;
   2f6e0:	4800      	ldr	r0, [pc, #0]	; (2f6e4 <bt_keys_get_addr+0x48>)
}
   2f6e2:	e7f5      	b.n	2f6d0 <bt_keys_get_addr+0x34>
   2f6e4:	20001d14 	.word	0x20001d14
   2f6e8:	20001d15 	.word	0x20001d15

0002f6ec <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   2f6ec:	460b      	mov	r3, r1
   2f6ee:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   2f6f0:	4a04      	ldr	r2, [pc, #16]	; (2f704 <bt_keys_foreach+0x18>)
{
   2f6f2:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   2f6f4:	89d4      	ldrh	r4, [r2, #14]
   2f6f6:	4204      	tst	r4, r0
   2f6f8:	d002      	beq.n	2f700 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   2f6fa:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   2f6fc:	4610      	mov	r0, r2
   2f6fe:	4718      	bx	r3
}
   2f700:	bc10      	pop	{r4}
   2f702:	4770      	bx	lr
   2f704:	20001d14 	.word	0x20001d14

0002f708 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   2f708:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   2f70a:	4903      	ldr	r1, [pc, #12]	; (2f718 <keys_commit+0x10>)
   2f70c:	2200      	movs	r2, #0
   2f70e:	2002      	movs	r0, #2
   2f710:	f7ff ffec 	bl	2f6ec <bt_keys_foreach>
	}

	return 0;
}
   2f714:	2000      	movs	r0, #0
   2f716:	bd08      	pop	{r3, pc}
   2f718:	00047b1d 	.word	0x00047b1d

0002f71c <bt_keys_find>:
{
   2f71c:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2f71e:	4c09      	ldr	r4, [pc, #36]	; (2f744 <bt_keys_find+0x28>)
{
   2f720:	460b      	mov	r3, r1
   2f722:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   2f724:	89e2      	ldrh	r2, [r4, #14]
   2f726:	4202      	tst	r2, r0
   2f728:	d007      	beq.n	2f73a <bt_keys_find+0x1e>
   2f72a:	7822      	ldrb	r2, [r4, #0]
   2f72c:	429a      	cmp	r2, r3
   2f72e:	d104      	bne.n	2f73a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   2f730:	2207      	movs	r2, #7
   2f732:	1c60      	adds	r0, r4, #1
   2f734:	f015 fb55 	bl	44de2 <memcmp>
   2f738:	b108      	cbz	r0, 2f73e <bt_keys_find+0x22>
	return NULL;
   2f73a:	2000      	movs	r0, #0
}
   2f73c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   2f73e:	4620      	mov	r0, r4
   2f740:	e7fc      	b.n	2f73c <bt_keys_find+0x20>
   2f742:	bf00      	nop
   2f744:	20001d14 	.word	0x20001d14

0002f748 <bt_keys_find_irk>:
{
   2f748:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   2f74a:	780b      	ldrb	r3, [r1, #0]
   2f74c:	2b01      	cmp	r3, #1
   2f74e:	4606      	mov	r6, r0
   2f750:	460d      	mov	r5, r1
   2f752:	d001      	beq.n	2f758 <bt_keys_find_irk+0x10>
		return NULL;
   2f754:	2000      	movs	r0, #0
}
   2f756:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   2f758:	798b      	ldrb	r3, [r1, #6]
   2f75a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2f75e:	2b40      	cmp	r3, #64	; 0x40
   2f760:	d1f8      	bne.n	2f754 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2f762:	4c12      	ldr	r4, [pc, #72]	; (2f7ac <bt_keys_find_irk+0x64>)
   2f764:	89e3      	ldrh	r3, [r4, #14]
   2f766:	079b      	lsls	r3, r3, #30
   2f768:	d5f4      	bpl.n	2f754 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   2f76a:	7823      	ldrb	r3, [r4, #0]
   2f76c:	42b3      	cmp	r3, r6
   2f76e:	d10b      	bne.n	2f788 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   2f770:	2206      	movs	r2, #6
   2f772:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   2f776:	1c68      	adds	r0, r5, #1
   2f778:	f015 fb33 	bl	44de2 <memcmp>
   2f77c:	b908      	cbnz	r0, 2f782 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   2f77e:	4620      	mov	r0, r4
   2f780:	e7e9      	b.n	2f756 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   2f782:	89e3      	ldrh	r3, [r4, #14]
   2f784:	079a      	lsls	r2, r3, #30
   2f786:	d5e5      	bpl.n	2f754 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   2f788:	7823      	ldrb	r3, [r4, #0]
   2f78a:	42b3      	cmp	r3, r6
   2f78c:	d1e2      	bne.n	2f754 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   2f78e:	3501      	adds	r5, #1
   2f790:	4807      	ldr	r0, [pc, #28]	; (2f7b0 <bt_keys_find_irk+0x68>)
   2f792:	4629      	mov	r1, r5
   2f794:	f015 fb91 	bl	44eba <bt_rpa_irk_matches>
   2f798:	2800      	cmp	r0, #0
   2f79a:	d0db      	beq.n	2f754 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   2f79c:	4805      	ldr	r0, [pc, #20]	; (2f7b4 <bt_keys_find_irk+0x6c>)
   2f79e:	2206      	movs	r2, #6
   2f7a0:	4629      	mov	r1, r5
   2f7a2:	f015 fb2e 	bl	44e02 <memcpy>
			return &key_pool[i];
   2f7a6:	4801      	ldr	r0, [pc, #4]	; (2f7ac <bt_keys_find_irk+0x64>)
}
   2f7a8:	e7d5      	b.n	2f756 <bt_keys_find_irk+0xe>
   2f7aa:	bf00      	nop
   2f7ac:	20001d14 	.word	0x20001d14
   2f7b0:	20001d3e 	.word	0x20001d3e
   2f7b4:	20001d4e 	.word	0x20001d4e

0002f7b8 <bt_keys_find_addr>:
{
   2f7b8:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   2f7ba:	4c06      	ldr	r4, [pc, #24]	; (2f7d4 <bt_keys_find_addr+0x1c>)
   2f7bc:	7823      	ldrb	r3, [r4, #0]
   2f7be:	4283      	cmp	r3, r0
   2f7c0:	d104      	bne.n	2f7cc <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   2f7c2:	2207      	movs	r2, #7
   2f7c4:	1c60      	adds	r0, r4, #1
   2f7c6:	f015 fb0c 	bl	44de2 <memcmp>
   2f7ca:	b108      	cbz	r0, 2f7d0 <bt_keys_find_addr+0x18>
	return NULL;
   2f7cc:	2000      	movs	r0, #0
}
   2f7ce:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   2f7d0:	4620      	mov	r0, r4
   2f7d2:	e7fc      	b.n	2f7ce <bt_keys_find_addr+0x16>
   2f7d4:	20001d14 	.word	0x20001d14

0002f7d8 <bt_keys_clear>:
{
   2f7d8:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   2f7da:	7a03      	ldrb	r3, [r0, #8]
   2f7dc:	075b      	lsls	r3, r3, #29
{
   2f7de:	b08c      	sub	sp, #48	; 0x30
   2f7e0:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2f7e2:	d501      	bpl.n	2f7e8 <bt_keys_clear+0x10>
		bt_id_del(keys);
   2f7e4:	f7fc f884 	bl	2b8f0 <bt_id_del>
		if (keys->id) {
   2f7e8:	4625      	mov	r5, r4
   2f7ea:	f815 2b01 	ldrb.w	r2, [r5], #1
   2f7ee:	b1b2      	cbz	r2, 2f81e <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   2f7f0:	ae02      	add	r6, sp, #8
   2f7f2:	2104      	movs	r1, #4
   2f7f4:	4630      	mov	r0, r6
   2f7f6:	f013 f976 	bl	42ae6 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   2f7fa:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   2f7fc:	4a09      	ldr	r2, [pc, #36]	; (2f824 <bt_keys_clear+0x4c>)
   2f7fe:	462b      	mov	r3, r5
   2f800:	2124      	movs	r1, #36	; 0x24
   2f802:	a803      	add	r0, sp, #12
   2f804:	f7fb f93a 	bl	2aa7c <bt_settings_encode_key>
		settings_delete(key);
   2f808:	a803      	add	r0, sp, #12
   2f80a:	f014 f807 	bl	4381c <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   2f80e:	2240      	movs	r2, #64	; 0x40
   2f810:	2100      	movs	r1, #0
   2f812:	4620      	mov	r0, r4
}
   2f814:	b00c      	add	sp, #48	; 0x30
   2f816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   2f81a:	f015 bafd 	b.w	44e18 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   2f81e:	9200      	str	r2, [sp, #0]
   2f820:	e7ec      	b.n	2f7fc <bt_keys_clear+0x24>
   2f822:	bf00      	nop
   2f824:	0004b4ce 	.word	0x0004b4ce

0002f828 <bt_keys_store>:
{
   2f828:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   2f82a:	4605      	mov	r5, r0
{
   2f82c:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   2f82e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   2f832:	4604      	mov	r4, r0
	if (keys->id) {
   2f834:	b19a      	cbz	r2, 2f85e <bt_keys_store+0x36>
		u8_to_dec(id, sizeof(id), keys->id);
   2f836:	ae02      	add	r6, sp, #8
   2f838:	2104      	movs	r1, #4
   2f83a:	4630      	mov	r0, r6
   2f83c:	f013 f953 	bl	42ae6 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   2f840:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   2f842:	462b      	mov	r3, r5
   2f844:	a803      	add	r0, sp, #12
   2f846:	4a07      	ldr	r2, [pc, #28]	; (2f864 <bt_keys_store+0x3c>)
   2f848:	2124      	movs	r1, #36	; 0x24
   2f84a:	f7fb f917 	bl	2aa7c <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   2f84e:	2234      	movs	r2, #52	; 0x34
   2f850:	f104 010c 	add.w	r1, r4, #12
   2f854:	a803      	add	r0, sp, #12
   2f856:	f7f9 ff45 	bl	296e4 <settings_save_one>
}
   2f85a:	b00c      	add	sp, #48	; 0x30
   2f85c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   2f85e:	9200      	str	r2, [sp, #0]
   2f860:	e7ef      	b.n	2f842 <bt_keys_store+0x1a>
   2f862:	bf00      	nop
   2f864:	0004b4ce 	.word	0x0004b4ce

0002f868 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   2f868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f86c:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2f86e:	1dc2      	adds	r2, r0, #7
   2f870:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2f874:	1e75      	subs	r5, r6, #1
{
   2f876:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2f878:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   2f87a:	6018      	str	r0, [r3, #0]
{
   2f87c:	b082      	sub	sp, #8
   2f87e:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   2f880:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   2f882:	2100      	movs	r1, #0
   2f884:	2204      	movs	r2, #4
   2f886:	fb07 0005 	mla	r0, r7, r5, r0
   2f88a:	f015 fac5 	bl	44e18 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   2f88e:	b1bd      	cbz	r5, 2f8c0 <mem_init+0x58>
   2f890:	3e02      	subs	r6, #2
   2f892:	b2b6      	uxth	r6, r6
   2f894:	fb06 7307 	mla	r3, r6, r7, r7
   2f898:	fb06 f807 	mul.w	r8, r6, r7
   2f89c:	441c      	add	r4, r3
   2f89e:	eba8 0803 	sub.w	r8, r8, r3
   2f8a2:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   2f8a4:	2204      	movs	r2, #4
   2f8a6:	eb04 0008 	add.w	r0, r4, r8
   2f8aa:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   2f8ae:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   2f8b0:	f015 faa7 	bl	44e02 <memcpy>
	while (mem_count--) {
   2f8b4:	42b5      	cmp	r5, r6
   2f8b6:	eba4 0407 	sub.w	r4, r4, r7
   2f8ba:	f105 0501 	add.w	r5, r5, #1
   2f8be:	d1f1      	bne.n	2f8a4 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   2f8c0:	b002      	add	sp, #8
   2f8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f8c6:	bf00      	nop

0002f8c8 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   2f8c8:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   2f8ca:	6805      	ldr	r5, [r0, #0]
{
   2f8cc:	b082      	sub	sp, #8
	if (*mem_head) {
   2f8ce:	b195      	cbz	r5, 2f8f6 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   2f8d0:	1deb      	adds	r3, r5, #7
   2f8d2:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   2f8d6:	2204      	movs	r2, #4
   2f8d8:	4604      	mov	r4, r0
   2f8da:	4629      	mov	r1, r5
   2f8dc:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   2f8e0:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   2f8e2:	f015 fa8e 	bl	44e02 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   2f8e6:	9b01      	ldr	r3, [sp, #4]
   2f8e8:	b123      	cbz	r3, 2f8f4 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   2f8ea:	1dda      	adds	r2, r3, #7
   2f8ec:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   2f8f0:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   2f8f2:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   2f8f4:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   2f8f6:	4628      	mov	r0, r5
   2f8f8:	b002      	add	sp, #8
   2f8fa:	bd70      	pop	{r4, r5, r6, pc}

0002f8fc <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   2f8fc:	680b      	ldr	r3, [r1, #0]
{
   2f8fe:	b570      	push	{r4, r5, r6, lr}
   2f900:	460c      	mov	r4, r1
   2f902:	4605      	mov	r5, r0
	if (*mem_head) {
   2f904:	b183      	cbz	r3, 2f928 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   2f906:	3307      	adds	r3, #7
   2f908:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   2f90c:	881e      	ldrh	r6, [r3, #0]
   2f90e:	3601      	adds	r6, #1
   2f910:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   2f912:	2204      	movs	r2, #4
   2f914:	4621      	mov	r1, r4
   2f916:	4628      	mov	r0, r5
   2f918:	f015 fa73 	bl	44e02 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   2f91c:	1deb      	adds	r3, r5, #7
   2f91e:	f023 0303 	bic.w	r3, r3, #3
   2f922:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   2f924:	6025      	str	r5, [r4, #0]
}
   2f926:	bd70      	pop	{r4, r5, r6, pc}
   2f928:	2601      	movs	r6, #1
   2f92a:	e7f2      	b.n	2f912 <mem_release+0x16>

0002f92c <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   2f92c:	fb02 0001 	mla	r0, r2, r1, r0
   2f930:	4770      	bx	lr
   2f932:	bf00      	nop

0002f934 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   2f934:	1a40      	subs	r0, r0, r1
   2f936:	b280      	uxth	r0, r0
}
   2f938:	fbb0 f0f2 	udiv	r0, r0, r2
   2f93c:	4770      	bx	lr
   2f93e:	bf00      	nop

0002f940 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   2f940:	1e53      	subs	r3, r2, #1
	src += len;
   2f942:	4411      	add	r1, r2
	while (len--) {
   2f944:	b29b      	uxth	r3, r3
   2f946:	b142      	cbz	r2, 2f95a <mem_rcopy+0x1a>
   2f948:	43db      	mvns	r3, r3
   2f94a:	3801      	subs	r0, #1
   2f94c:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   2f94e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   2f952:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   2f956:	4291      	cmp	r1, r2
   2f958:	d1f9      	bne.n	2f94e <mem_rcopy+0xe>
	}
}
   2f95a:	4770      	bx	lr

0002f95c <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   2f95c:	4401      	add	r1, r0
   2f95e:	e002      	b.n	2f966 <mem_nz+0xa>
		if (*src++) {
   2f960:	f810 3b01 	ldrb.w	r3, [r0], #1
   2f964:	b91b      	cbnz	r3, 2f96e <mem_nz+0x12>
	while (len--) {
   2f966:	4288      	cmp	r0, r1
   2f968:	d1fa      	bne.n	2f960 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   2f96a:	2000      	movs	r0, #0
   2f96c:	4770      	bx	lr
			return 1;
   2f96e:	2001      	movs	r0, #1
}
   2f970:	4770      	bx	lr
   2f972:	bf00      	nop

0002f974 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   2f974:	6010      	str	r0, [r2, #0]
   2f976:	6008      	str	r0, [r1, #0]

	return link;
}
   2f978:	4770      	bx	lr
   2f97a:	bf00      	nop

0002f97c <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   2f97c:	680a      	ldr	r2, [r1, #0]
{
   2f97e:	4603      	mov	r3, r0
	if (*head != *tail) {
   2f980:	6800      	ldr	r0, [r0, #0]
   2f982:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   2f984:	bf05      	ittet	eq
   2f986:	2200      	moveq	r2, #0
   2f988:	600a      	streq	r2, [r1, #0]
		return NULL;
   2f98a:	2000      	movne	r0, #0
	*head = *tail = NULL;
   2f98c:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   2f98e:	4770      	bx	lr

0002f990 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   2f990:	f8d2 c000 	ldr.w	ip, [r2]
   2f994:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   2f998:	f8d2 c000 	ldr.w	ip, [r2]
   2f99c:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   2f9a0:	6010      	str	r0, [r2, #0]

	return link;
}
   2f9a2:	4770      	bx	lr

0002f9a4 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   2f9a4:	4288      	cmp	r0, r1
   2f9a6:	d003      	beq.n	2f9b0 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   2f9a8:	b11a      	cbz	r2, 2f9b2 <memq_peek+0xe>
		*mem = head->mem;
   2f9aa:	6843      	ldr	r3, [r0, #4]
   2f9ac:	6013      	str	r3, [r2, #0]
   2f9ae:	4770      	bx	lr
		return NULL;
   2f9b0:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   2f9b2:	4770      	bx	lr

0002f9b4 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   2f9b4:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   2f9b6:	4283      	cmp	r3, r0
   2f9b8:	d009      	beq.n	2f9ce <memq_dequeue+0x1a>
	if (mem) {
   2f9ba:	b12a      	cbz	r2, 2f9c8 <memq_dequeue+0x14>
		*mem = head->mem;
   2f9bc:	6858      	ldr	r0, [r3, #4]
   2f9be:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   2f9c0:	681a      	ldr	r2, [r3, #0]
   2f9c2:	600a      	str	r2, [r1, #0]

	return old_head;
}
   2f9c4:	4618      	mov	r0, r3
   2f9c6:	4770      	bx	lr
	if (old_head == NULL) {
   2f9c8:	2b00      	cmp	r3, #0
   2f9ca:	d1f9      	bne.n	2f9c0 <memq_dequeue+0xc>
   2f9cc:	e7fa      	b.n	2f9c4 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   2f9ce:	2300      	movs	r3, #0
   2f9d0:	e7f8      	b.n	2f9c4 <memq_dequeue+0x10>
   2f9d2:	bf00      	nop

0002f9d4 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   2f9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f9d8:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2fa0c <mayfly_init+0x38>
   2f9dc:	4e0c      	ldr	r6, [pc, #48]	; (2fa10 <mayfly_init+0x3c>)
   2f9de:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   2f9e0:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   2f9e4:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   2f9e6:	1d22      	adds	r2, r4, #4
   2f9e8:	4621      	mov	r1, r4
   2f9ea:	4628      	mov	r0, r5
		while (caller_id--) {
   2f9ec:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   2f9ee:	f7ff ffc1 	bl	2f974 <memq_init>
		while (caller_id--) {
   2f9f2:	42b4      	cmp	r4, r6
   2f9f4:	f1a5 0508 	sub.w	r5, r5, #8
   2f9f8:	d1f5      	bne.n	2f9e6 <mayfly_init+0x12>
	while (callee_id--) {
   2f9fa:	3f04      	subs	r7, #4
   2f9fc:	1d3b      	adds	r3, r7, #4
   2f9fe:	f1a8 0820 	sub.w	r8, r8, #32
   2fa02:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2fa06:	d1eb      	bne.n	2f9e0 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   2fa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2fa0c:	20001dcc 	.word	0x20001dcc
   2fa10:	20001e5c 	.word	0x20001e5c

0002fa14 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   2fa14:	b410      	push	{r4}
   2fa16:	4603      	mov	r3, r0
   2fa18:	468c      	mov	ip, r1
	if (enable) {
   2fa1a:	b19a      	cbz	r2, 2fa44 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   2fa1c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2fa20:	4814      	ldr	r0, [pc, #80]	; (2fa74 <mayfly_enable+0x60>)
   2fa22:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   2fa26:	0109      	lsls	r1, r1, #4
   2fa28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   2fa2c:	4401      	add	r1, r0
   2fa2e:	7a48      	ldrb	r0, [r1, #9]
   2fa30:	7a0c      	ldrb	r4, [r1, #8]
   2fa32:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   2fa34:	bf04      	itt	eq
   2fa36:	3001      	addeq	r0, #1
   2fa38:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   2fa3a:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   2fa3c:	4661      	mov	r1, ip
   2fa3e:	4618      	mov	r0, r3
   2fa40:	f00d b8a0 	b.w	3cb84 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   2fa44:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   2fa48:	4c0a      	ldr	r4, [pc, #40]	; (2fa74 <mayfly_enable+0x60>)
   2fa4a:	0112      	lsls	r2, r2, #4
   2fa4c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2fa50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2fa54:	4423      	add	r3, r4
   2fa56:	7a9c      	ldrb	r4, [r3, #10]
   2fa58:	7ada      	ldrb	r2, [r3, #11]
   2fa5a:	42a2      	cmp	r2, r4
   2fa5c:	d001      	beq.n	2fa62 <mayfly_enable+0x4e>
}
   2fa5e:	bc10      	pop	{r4}
   2fa60:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   2fa62:	3201      	adds	r2, #1
   2fa64:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   2fa66:	4b04      	ldr	r3, [pc, #16]	; (2fa78 <mayfly_enable+0x64>)
   2fa68:	2201      	movs	r2, #1
   2fa6a:	545a      	strb	r2, [r3, r1]
}
   2fa6c:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   2fa6e:	f00d b8df 	b.w	3cc30 <mayfly_pend>
   2fa72:	bf00      	nop
   2fa74:	20001dd8 	.word	0x20001dd8
   2fa78:	20001dd4 	.word	0x20001dd4

0002fa7c <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   2fa7c:	b570      	push	{r4, r5, r6, lr}
   2fa7e:	4606      	mov	r6, r0
   2fa80:	461c      	mov	r4, r3
   2fa82:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   2fa84:	b322      	cbz	r2, 2fad0 <mayfly_enqueue+0x54>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   2fa86:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   2fa88:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   2fa8a:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   2fa8c:	f012 0203 	ands.w	r2, r2, #3
   2fa90:	d005      	beq.n	2fa9e <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
   2fa92:	2a01      	cmp	r2, #1
   2fa94:	d040      	beq.n	2fb18 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
   2fa96:	3301      	adds	r3, #1
   2fa98:	b2db      	uxtb	r3, r3
   2fa9a:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   2fa9c:	e00f      	b.n	2fabe <mayfly_enqueue+0x42>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   2fa9e:	3301      	adds	r3, #1
   2faa0:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   2faa2:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   2faa4:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   2faa6:	2304      	movs	r3, #4
   2faa8:	fb11 3105 	smlabb	r1, r1, r5, r3
   2faac:	4a1b      	ldr	r2, [pc, #108]	; (2fb1c <mayfly_enqueue+0xa0>)
   2faae:	6860      	ldr	r0, [r4, #4]
   2fab0:	230c      	movs	r3, #12
   2fab2:	fb13 1306 	smlabb	r3, r3, r6, r1
   2fab6:	441a      	add	r2, r3
   2fab8:	4621      	mov	r1, r4
   2faba:	f7ff ff69 	bl	2f990 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   2fabe:	4b18      	ldr	r3, [pc, #96]	; (2fb20 <mayfly_enqueue+0xa4>)
   2fac0:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   2fac2:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   2fac4:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   2fac6:	4629      	mov	r1, r5
   2fac8:	f00d f8b2 	bl	3cc30 <mayfly_pend>

	return 0;
   2facc:	2000      	movs	r0, #0
}
   2face:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   2fad0:	f00d f898 	bl	3cc04 <mayfly_prio_is_equal>
   2fad4:	2800      	cmp	r0, #0
   2fad6:	d0d6      	beq.n	2fa86 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   2fad8:	4629      	mov	r1, r5
   2fada:	4630      	mov	r0, r6
   2fadc:	f00d f872 	bl	3cbc4 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   2fae0:	2800      	cmp	r0, #0
   2fae2:	d0d0      	beq.n	2fa86 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   2fae4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   2fae8:	4a0c      	ldr	r2, [pc, #48]	; (2fb1c <mayfly_enqueue+0xa0>)
   2faea:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   2faee:	011b      	lsls	r3, r3, #4
   2faf0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   2faf4:	4413      	add	r3, r2
		!mayfly_is_enabled(caller_id, callee_id) ||
   2faf6:	7a9a      	ldrb	r2, [r3, #10]
   2faf8:	7adb      	ldrb	r3, [r3, #11]
   2fafa:	429a      	cmp	r2, r3
   2fafc:	d1c3      	bne.n	2fa86 <mayfly_enqueue+0xa>
	state = (m->_req - ack) & 0x03;
   2fafe:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   2fb00:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   2fb02:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   2fb04:	0792      	lsls	r2, r2, #30
   2fb06:	d002      	beq.n	2fb0e <mayfly_enqueue+0x92>
		m->_req = ack + 2;
   2fb08:	3302      	adds	r3, #2
   2fb0a:	b2db      	uxtb	r3, r3
   2fb0c:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   2fb0e:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   2fb12:	4798      	blx	r3
		return 0;
   2fb14:	2000      	movs	r0, #0
}
   2fb16:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   2fb18:	4610      	mov	r0, r2
}
   2fb1a:	bd70      	pop	{r4, r5, r6, pc}
   2fb1c:	20001dd8 	.word	0x20001dd8
   2fb20:	20001dd4 	.word	0x20001dd4

0002fb24 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   2fb24:	4a50      	ldr	r2, [pc, #320]	; (2fc68 <mayfly_run+0x144>)
   2fb26:	5c13      	ldrb	r3, [r2, r0]
   2fb28:	2b00      	cmp	r3, #0
   2fb2a:	f000 8093 	beq.w	2fc54 <mayfly_run+0x130>
{
   2fb2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   2fb32:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fb34:	4f4d      	ldr	r7, [pc, #308]	; (2fc6c <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
   2fb36:	5413      	strb	r3, [r2, r0]
{
   2fb38:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   2fb3a:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fb3c:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   2fb40:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fb44:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   2fb48:	9303      	str	r3, [sp, #12]
   2fb4a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fb4e:	f10b 0804 	add.w	r8, fp, #4
   2fb52:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   2fb56:	f04f 0903 	mov.w	r9, #3

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   2fb5a:	463e      	mov	r6, r7
		struct mayfly *m = 0;
   2fb5c:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   2fb5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2fb60:	f856 0f24 	ldr.w	r0, [r6, #36]!
		struct mayfly *m = 0;
   2fb64:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   2fb66:	aa05      	add	r2, sp, #20
   2fb68:	f7ff ff1c 	bl	2f9a4 <memq_peek>
   2fb6c:	4683      	mov	fp, r0
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   2fb6e:	f1bb 0f00 	cmp.w	fp, #0
   2fb72:	d035      	beq.n	2fbe0 <mayfly_run+0xbc>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   2fb74:	9c05      	ldr	r4, [sp, #20]
   2fb76:	7863      	ldrb	r3, [r4, #1]
   2fb78:	7825      	ldrb	r5, [r4, #0]
   2fb7a:	1aed      	subs	r5, r5, r3
   2fb7c:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   2fb80:	2d01      	cmp	r5, #1
   2fb82:	d106      	bne.n	2fb92 <mayfly_run+0x6e>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   2fb84:	3b01      	subs	r3, #1
   2fb86:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   2fb88:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   2fb8c:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   2fb8e:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   2fb90:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   2fb92:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   2fb94:	1ac3      	subs	r3, r0, r3
   2fb96:	f003 0303 	and.w	r3, r3, #3
   2fb9a:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   2fb9c:	f04f 0200 	mov.w	r2, #0
   2fba0:	4631      	mov	r1, r6
	req = m->_req;
   2fba2:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   2fba6:	d00f      	beq.n	2fbc8 <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
   2fba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2fbaa:	f7ff ff03 	bl	2f9b4 <memq_dequeue>
		ack = m->_ack;
   2fbae:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   2fbb2:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   2fbb4:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   2fbb8:	eba3 030c 	sub.w	r3, r3, ip
   2fbbc:	f003 0303 	and.w	r3, r3, #3
   2fbc0:	2b01      	cmp	r3, #1
		m->_ack = req;
   2fbc2:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   2fbc6:	d030      	beq.n	2fc2a <mayfly_run+0x106>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   2fbc8:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   2fbcc:	aa05      	add	r2, sp, #20
   2fbce:	f7ff fee9 	bl	2f9a4 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   2fbd2:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   2fbd4:	4683      	mov	fp, r0
			if (state == 1U) {
   2fbd6:	d1ca      	bne.n	2fb6e <mayfly_run+0x4a>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
   2fbd8:	f1b9 0f00 	cmp.w	r9, #0
   2fbdc:	d12d      	bne.n	2fc3a <mayfly_run+0x116>
   2fbde:	bb60      	cbnz	r0, 2fc3a <mayfly_run+0x116>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   2fbe0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   2fbe4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   2fbe8:	429a      	cmp	r2, r3
   2fbea:	d003      	beq.n	2fbf4 <mayfly_run+0xd0>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   2fbec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   2fbf0:	2301      	movs	r3, #1
   2fbf2:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   2fbf4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   2fbf8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   2fbfc:	429a      	cmp	r2, r3
   2fbfe:	d003      	beq.n	2fc08 <mayfly_run+0xe4>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   2fc00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   2fc04:	2301      	movs	r3, #1
   2fc06:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   2fc08:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   2fc0c:	fa5f f989 	uxtb.w	r9, r9
   2fc10:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   2fc14:	f1a7 070c 	sub.w	r7, r7, #12
   2fc18:	d19f      	bne.n	2fb5a <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   2fc1a:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   2fc1e:	b10b      	cbz	r3, 2fc24 <mayfly_run+0x100>
   2fc20:	9b03      	ldr	r3, [sp, #12]
   2fc22:	b1c3      	cbz	r3, 2fc56 <mayfly_run+0x132>
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
   2fc24:	b007      	add	sp, #28
   2fc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fc2a:	4642      	mov	r2, r8
   2fc2c:	4621      	mov	r1, r4
   2fc2e:	4658      	mov	r0, fp
			m->_ack = ack;
   2fc30:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   2fc34:	f7ff feac 	bl	2f990 <memq_enqueue>
   2fc38:	e7c6      	b.n	2fbc8 <mayfly_run+0xa4>
					mfp[callee_id] = 1U;
   2fc3a:	f8dd a008 	ldr.w	sl, [sp, #8]
   2fc3e:	4a0a      	ldr	r2, [pc, #40]	; (2fc68 <mayfly_run+0x144>)
   2fc40:	2301      	movs	r3, #1
   2fc42:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   2fc46:	4651      	mov	r1, sl
   2fc48:	4650      	mov	r0, sl
   2fc4a:	f00c fff1 	bl	3cc30 <mayfly_pend>
}
   2fc4e:	b007      	add	sp, #28
   2fc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fc54:	4770      	bx	lr
		mayfly_enable_cb(callee_id, callee_id, 0);
   2fc56:	461a      	mov	r2, r3
   2fc58:	4651      	mov	r1, sl
   2fc5a:	4650      	mov	r0, sl
}
   2fc5c:	b007      	add	sp, #28
   2fc5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   2fc62:	f00c bf8f 	b.w	3cb84 <mayfly_enable_cb>
   2fc66:	bf00      	nop
   2fc68:	20001dd4 	.word	0x20001dd4
   2fc6c:	20001dd8 	.word	0x20001dd8

0002fc70 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   2fc70:	1e4b      	subs	r3, r1, #1
   2fc72:	b2db      	uxtb	r3, r3
   2fc74:	b171      	cbz	r1, 2fc94 <util_ones_count_get+0x24>
   2fc76:	1e41      	subs	r1, r0, #1
   2fc78:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   2fc7c:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   2fc7e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   2fc82:	b123      	cbz	r3, 2fc8e <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   2fc84:	1e5a      	subs	r2, r3, #1
			one_count++;
   2fc86:	3001      	adds	r0, #1
		while (bite) {
   2fc88:	4013      	ands	r3, r2
			one_count++;
   2fc8a:	b2c0      	uxtb	r0, r0
		while (bite) {
   2fc8c:	d1fa      	bne.n	2fc84 <util_ones_count_get+0x14>
	while (octets_len--) {
   2fc8e:	4561      	cmp	r1, ip
   2fc90:	d1f5      	bne.n	2fc7e <util_ones_count_get+0xe>
   2fc92:	4770      	bx	lr
	uint8_t one_count = 0U;
   2fc94:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   2fc96:	4770      	bx	lr

0002fc98 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   2fc98:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   2fc9a:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   2fc9c:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   2fc9e:	2bff      	cmp	r3, #255	; 0xff
   2fca0:	d014      	beq.n	2fccc <ticker_dequeue+0x34>
		ticker_current = &node[current];
   2fca2:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   2fca6:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   2fca8:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   2fcac:	d028      	beq.n	2fd00 <ticker_dequeue+0x68>
	total = 0U;
   2fcae:	f04f 0c00 	mov.w	ip, #0
   2fcb2:	e001      	b.n	2fcb8 <ticker_dequeue+0x20>
		if (current == id) {
   2fcb4:	4299      	cmp	r1, r3
   2fcb6:	d00b      	beq.n	2fcd0 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   2fcb8:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   2fcba:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   2fcbc:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   2fcbe:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   2fcc0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   2fcc4:	44a4      	add	ip, r4
		ticker_current = &node[current];
   2fcc6:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   2fcca:	d1f3      	bne.n	2fcb4 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   2fccc:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   2fcce:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   2fcd0:	4571      	cmp	r1, lr
   2fcd2:	d018      	beq.n	2fd06 <ticker_dequeue+0x6e>
		instance->ticker_id_head = ticker_current->next;
   2fcd4:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   2fcd6:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   2fcd8:	fa0f fe8e 	sxth.w	lr, lr
   2fcdc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   2fce0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   2fce4:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   2fce8:	7813      	ldrb	r3, [r2, #0]
   2fcea:	2bff      	cmp	r3, #255	; 0xff
   2fcec:	d006      	beq.n	2fcfc <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
   2fcee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2fcf2:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   2fcf6:	689a      	ldr	r2, [r3, #8]
   2fcf8:	4402      	add	r2, r0
   2fcfa:	609a      	str	r2, [r3, #8]
	return (total + timeout);
   2fcfc:	4460      	add	r0, ip
}
   2fcfe:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
   2fd00:	469e      	mov	lr, r3
	total = 0U;
   2fd02:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   2fd06:	7813      	ldrb	r3, [r2, #0]
   2fd08:	7743      	strb	r3, [r0, #29]
   2fd0a:	e7e4      	b.n	2fcd6 <ticker_dequeue+0x3e>

0002fd0c <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   2fd0c:	eba2 0c01 	sub.w	ip, r2, r1
   2fd10:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   2fd14:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   2fd16:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   2fd18:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   2fd1a:	d10a      	bne.n	2fd32 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2fd1c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   2fd20:	4463      	add	r3, ip
	if (ticks_to_expire > ticks_to_expire_minus) {
   2fd22:	42a3      	cmp	r3, r4
   2fd24:	d914      	bls.n	2fd50 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   2fd26:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   2fd28:	2400      	movs	r4, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   2fd2a:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   2fd2c:	6083      	str	r3, [r0, #8]
}
   2fd2e:	bc10      	pop	{r4}
   2fd30:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2fd32:	1a89      	subs	r1, r1, r2
   2fd34:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   2fd38:	428b      	cmp	r3, r1
   2fd3a:	d806      	bhi.n	2fd4a <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   2fd3c:	440c      	add	r4, r1
   2fd3e:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
   2fd40:	2300      	movs	r3, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   2fd42:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   2fd44:	6083      	str	r3, [r0, #8]
}
   2fd46:	bc10      	pop	{r4}
   2fd48:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   2fd4a:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   2fd4c:	42a3      	cmp	r3, r4
   2fd4e:	d8ea      	bhi.n	2fd26 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   2fd50:	1ae4      	subs	r4, r4, r3
   2fd52:	e7f5      	b.n	2fd40 <ticks_to_expire_prep+0x34>

0002fd54 <ticker_job_list_insert>:
{
   2fd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fd58:	b087      	sub	sp, #28
   2fd5a:	4603      	mov	r3, r0
	count_user = instance->count_user;
   2fd5c:	7a42      	ldrb	r2, [r0, #9]
{
   2fd5e:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   2fd60:	6800      	ldr	r0, [r0, #0]
   2fd62:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   2fd64:	6858      	ldr	r0, [r3, #4]
   2fd66:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   2fd68:	2a00      	cmp	r2, #0
   2fd6a:	f000 80f7 	beq.w	2ff5c <ticker_job_list_insert+0x208>
   2fd6e:	1e53      	subs	r3, r2, #1
   2fd70:	b2db      	uxtb	r3, r3
   2fd72:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   2fd76:	4688      	mov	r8, r1
   2fd78:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   2fd7a:	9b03      	ldr	r3, [sp, #12]
   2fd7c:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   2fd7e:	785f      	ldrb	r7, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   2fd80:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   2fd82:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   2fd86:	d05e      	beq.n	2fe46 <ticker_job_list_insert+0xf2>
				ticker = &node[id_insert];
   2fd88:	9b02      	ldr	r3, [sp, #8]
   2fd8a:	eb08 0448 	add.w	r4, r8, r8, lsl #1
   2fd8e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   2fd92:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   2fd96:	4646      	mov	r6, r8
	ticker->req = ticker->ack + 1;
   2fd98:	78a2      	ldrb	r2, [r4, #2]
				insert_head = ticker->next;
   2fd9a:	f813 800a 	ldrb.w	r8, [r3, sl]
	ticker->req = ticker->ack + 1;
   2fd9e:	9200      	str	r2, [sp, #0]
				user_op = NULL;
   2fda0:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   2fda2:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   2fda4:	f04f 09ff 	mov.w	r9, #255	; 0xff
   2fda8:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   2fdac:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   2fdb0:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   2fdb2:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2fdb6:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   2fdb8:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2fdbc:	d10f      	bne.n	2fdde <ticker_job_list_insert+0x8a>
   2fdbe:	e0c9      	b.n	2ff54 <ticker_job_list_insert+0x200>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   2fdc0:	1a09      	subs	r1, r1, r0
   2fdc2:	d106      	bne.n	2fdd2 <ticker_job_list_insert+0x7e>
   2fdc4:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   2fdc8:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   2fdcc:	45e2      	cmp	sl, ip
   2fdce:	f200 8084 	bhi.w	2feda <ticker_job_list_insert+0x186>
		current = ticker_current->next;
   2fdd2:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2fdd6:	2bff      	cmp	r3, #255	; 0xff
   2fdd8:	4691      	mov	r9, r2
   2fdda:	d070      	beq.n	2febe <ticker_job_list_insert+0x16a>
   2fddc:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   2fdde:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   2fde2:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   2fde6:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   2fde8:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   2fdec:	4281      	cmp	r1, r0
   2fdee:	d2e7      	bcs.n	2fdc0 <ticker_job_list_insert+0x6c>
	if (previous == TICKER_NULL) {
   2fdf0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   2fdf4:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   2fdf8:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   2fdfc:	d164      	bne.n	2fec8 <ticker_job_list_insert+0x174>
		instance->ticker_id_head = id;
   2fdfe:	9b01      	ldr	r3, [sp, #4]
   2fe00:	775e      	strb	r6, [r3, #29]
	if (current != TICKER_NULL) {
   2fe02:	2aff      	cmp	r2, #255	; 0xff
   2fe04:	d006      	beq.n	2fe14 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   2fe06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2fe0a:	eb0e 1202 	add.w	r2, lr, r2, lsl #4
   2fe0e:	6893      	ldr	r3, [r2, #8]
   2fe10:	1a5b      	subs	r3, r3, r1
   2fe12:	6093      	str	r3, [r2, #8]
	ticker->req = ticker->ack + 1;
   2fe14:	9b00      	ldr	r3, [sp, #0]
   2fe16:	3301      	adds	r3, #1
   2fe18:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   2fe1a:	2d00      	cmp	r5, #0
   2fe1c:	d0b1      	beq.n	2fd82 <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   2fe1e:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   2fe22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   2fe24:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   2fe26:	2200      	movs	r2, #0
   2fe28:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   2fe2a:	b113      	cbz	r3, 2fe32 <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   2fe2c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2fe2e:	4610      	mov	r0, r2
   2fe30:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   2fe32:	6863      	ldr	r3, [r4, #4]
   2fe34:	2b00      	cmp	r3, #0
   2fe36:	d1a4      	bne.n	2fd82 <ticker_job_list_insert+0x2e>
					ticker->op_context =
   2fe38:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   2fe3c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
					ticker->op_context =
   2fe40:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   2fe44:	d1a0      	bne.n	2fd88 <ticker_job_list_insert+0x34>
   2fe46:	9b03      	ldr	r3, [sp, #12]
   2fe48:	7898      	ldrb	r0, [r3, #2]
   2fe4a:	42b8      	cmp	r0, r7
   2fe4c:	d02f      	beq.n	2feae <ticker_job_list_insert+0x15a>
   2fe4e:	e9dd b903 	ldrd	fp, r9, [sp, #12]
   2fe52:	9c02      	ldr	r4, [sp, #8]
				if (first == user->count_user_op) {
   2fe54:	f89b 2000 	ldrb.w	r2, [fp]
				user_op = &user_ops[user_ops_first];
   2fe58:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   2fe5c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   2fe60:	eb09 0583 	add.w	r5, r9, r3, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   2fe64:	f819 c023 	ldrb.w	ip, [r9, r3, lsl #2]
				id_insert = user_op->id;
   2fe68:	786e      	ldrb	r6, [r5, #1]
				first = user_ops_first + 1;
   2fe6a:	3701      	adds	r7, #1
   2fe6c:	b2ff      	uxtb	r7, r7
					first = 0U;
   2fe6e:	42ba      	cmp	r2, r7
   2fe70:	bf08      	it	eq
   2fe72:	2700      	moveq	r7, #0
				ticker = &node[id_insert];
   2fe74:	eb06 0246 	add.w	r2, r6, r6, lsl #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   2fe78:	f1bc 0f04 	cmp.w	ip, #4
				ticker = &node[id_insert];
   2fe7c:	eb04 1102 	add.w	r1, r4, r2, lsl #4
   2fe80:	ea4f 1a02 	mov.w	sl, r2, lsl #4
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   2fe84:	d111      	bne.n	2feaa <ticker_job_list_insert+0x156>
				      ticker->ack) & 0xff) != 0U) {
   2fe86:	7888      	ldrb	r0, [r1, #2]
				if (((ticker->req -
   2fe88:	784a      	ldrb	r2, [r1, #1]
   2fe8a:	1a12      	subs	r2, r2, r0
   2fe8c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   2fe90:	d025      	beq.n	2fede <ticker_job_list_insert+0x18a>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   2fe92:	f04f 0200 	mov.w	r2, #0
   2fe96:	f809 2023 	strb.w	r2, [r9, r3, lsl #2]
	if (user_op->fp_op_func) {
   2fe9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   2fe9c:	2001      	movs	r0, #1
	user_op->status = status;
   2fe9e:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   2fea0:	b10b      	cbz	r3, 2fea6 <ticker_job_list_insert+0x152>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   2fea2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2fea4:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   2fea6:	f89b 0002 	ldrb.w	r0, [fp, #2]
   2feaa:	42b8      	cmp	r0, r7
   2feac:	d1d2      	bne.n	2fe54 <ticker_job_list_insert+0x100>
	while (count_user--) {
   2feae:	9a03      	ldr	r2, [sp, #12]
   2feb0:	9905      	ldr	r1, [sp, #20]
   2feb2:	4291      	cmp	r1, r2
   2feb4:	f1a2 0308 	sub.w	r3, r2, #8
   2feb8:	d050      	beq.n	2ff5c <ticker_job_list_insert+0x208>
   2feba:	9303      	str	r3, [sp, #12]
   2febc:	e75d      	b.n	2fd7a <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   2febe:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   2fec2:	f88b 3000 	strb.w	r3, [fp]
   2fec6:	461a      	mov	r2, r3
		node[previous].next = id;
   2fec8:	fa0f f989 	sxth.w	r9, r9
   2fecc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   2fed0:	ea4f 1909 	mov.w	r9, r9, lsl #4
   2fed4:	f80e 6009 	strb.w	r6, [lr, r9]
   2fed8:	e793      	b.n	2fe02 <ticker_job_list_insert+0xae>
   2feda:	4601      	mov	r1, r0
   2fedc:	e788      	b.n	2fdf0 <ticker_job_list_insert+0x9c>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   2fede:	8aab      	ldrh	r3, [r5, #20]
   2fee0:	9000      	str	r0, [sp, #0]
   2fee2:	460c      	mov	r4, r1
   2fee4:	f64f 70fe 	movw	r0, #65534	; 0xfffe
				ticker_job_op_start(ticker, user_op,
   2fee8:	9901      	ldr	r1, [sp, #4]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   2feea:	4283      	cmp	r3, r0
				ticker_job_op_start(ticker, user_op,
   2feec:	6949      	ldr	r1, [r1, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   2feee:	d02a      	beq.n	2ff46 <ticker_job_list_insert+0x1f2>
		ticker->must_expire =
   2fef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2fef4:	1a9a      	subs	r2, r3, r2
   2fef6:	fab2 f282 	clz	r2, r2
   2fefa:	0952      	lsrs	r2, r2, #5
   2fefc:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   2ff00:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2ff02:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   2ff04:	68ea      	ldr	r2, [r5, #12]
   2ff06:	6062      	str	r2, [r4, #4]
	ticker->lazy_periodic =
   2ff08:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   2ff0c:	4293      	cmp	r3, r2
   2ff0e:	bf88      	it	hi
   2ff10:	2300      	movhi	r3, #0
	ticker->remainder_periodic = start->remainder_periodic;
   2ff12:	692a      	ldr	r2, [r5, #16]
	ticker->lazy_periodic =
   2ff14:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   2ff16:	69ab      	ldr	r3, [r5, #24]
   2ff18:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   2ff1a:	69eb      	ldr	r3, [r5, #28]
   2ff1c:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   2ff1e:	6a2b      	ldr	r3, [r5, #32]
   2ff20:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   2ff22:	68ab      	ldr	r3, [r5, #8]
   2ff24:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   2ff26:	2300      	movs	r3, #0
	ticker->remainder_periodic = start->remainder_periodic;
   2ff28:	6222      	str	r2, [r4, #32]
	ticker->ticks_to_expire_minus = 0U;
   2ff2a:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   2ff2c:	686a      	ldr	r2, [r5, #4]
   2ff2e:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   2ff30:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   2ff32:	f7ff feeb 	bl	2fd0c <ticks_to_expire_prep>
	ticker->force = 1U;
   2ff36:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   2ff3a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   2ff3e:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   2ff42:	70e3      	strb	r3, [r4, #3]
}
   2ff44:	e72d      	b.n	2fda2 <ticker_job_list_insert+0x4e>
	ticker->lazy_periodic =
   2ff46:	4613      	mov	r3, r2
	ticker->ext_data = start->ext_data;
   2ff48:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2ff4a:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   2ff4c:	68ea      	ldr	r2, [r5, #12]
   2ff4e:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   2ff50:	692a      	ldr	r2, [r5, #16]
	ticker->lazy_periodic =
   2ff52:	e7df      	b.n	2ff14 <ticker_job_list_insert+0x1c0>
	ticker_new->next = current;
   2ff54:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   2ff58:	775e      	strb	r6, [r3, #29]
	if (current != TICKER_NULL) {
   2ff5a:	e75b      	b.n	2fe14 <ticker_job_list_insert+0xc0>
}
   2ff5c:	b007      	add	sp, #28
   2ff5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ff62:	bf00      	nop

0002ff64 <ticker_worker>:
{
   2ff64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   2ff68:	7f82      	ldrb	r2, [r0, #30]
{
   2ff6a:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
   2ff6c:	2301      	movs	r3, #1
	if (instance->job_guard) {
   2ff6e:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   2ff70:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   2ff72:	2a00      	cmp	r2, #0
   2ff74:	d15a      	bne.n	3002c <ticker_worker+0xc8>
	if (instance->ticker_id_head == TICKER_NULL) {
   2ff76:	7f43      	ldrb	r3, [r0, #29]
   2ff78:	2bff      	cmp	r3, #255	; 0xff
   2ff7a:	4682      	mov	sl, r0
   2ff7c:	d055      	beq.n	3002a <ticker_worker+0xc6>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   2ff7e:	f00c f951 	bl	3c224 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2ff82:	f8da 2014 	ldr.w	r2, [sl, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   2ff86:	f89a 301c 	ldrb.w	r3, [sl, #28]
	ticker_id_head = instance->ticker_id_head;
   2ff8a:	f89a 701d 	ldrb.w	r7, [sl, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2ff8e:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   2ff90:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   2ff92:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   2ff96:	f000 8123 	beq.w	301e0 <ticker_worker+0x27c>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   2ff9a:	f8da 3018 	ldr.w	r3, [sl, #24]
	uint8_t slot_reserved = 0;
   2ff9e:	4543      	cmp	r3, r8
   2ffa0:	bf94      	ite	ls
   2ffa2:	2300      	movls	r3, #0
   2ffa4:	2301      	movhi	r3, #1
   2ffa6:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   2ffa8:	2fff      	cmp	r7, #255	; 0xff
	node = &instance->nodes[0];
   2ffaa:	f8da b000 	ldr.w	fp, [sl]
	ticks_expired = 0U;
   2ffae:	f04f 0900 	mov.w	r9, #0
	while (ticker_id_head != TICKER_NULL) {
   2ffb2:	d044      	beq.n	3003e <ticker_worker+0xda>
			must_expire_skip = 1U;
   2ffb4:	f8cd a010 	str.w	sl, [sp, #16]
		ticker = &node[ticker_id_head];
   2ffb8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   2ffbc:	eb0b 1407 	add.w	r4, fp, r7, lsl #4
   2ffc0:	013f      	lsls	r7, r7, #4
		ticks_to_expire = ticker->ticks_to_expire;
   2ffc2:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   2ffc4:	4543      	cmp	r3, r8
   2ffc6:	d838      	bhi.n	3003a <ticker_worker+0xd6>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   2ffc8:	78a2      	ldrb	r2, [r4, #2]
		ticker_id_head = ticker->next;
   2ffca:	f81b 7007 	ldrb.w	r7, [fp, r7]
		ticks_elapsed -= ticks_to_expire;
   2ffce:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
   2ffd2:	4499      	add	r9, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   2ffd4:	7863      	ldrb	r3, [r4, #1]
   2ffd6:	1a9b      	subs	r3, r3, r2
   2ffd8:	b2db      	uxtb	r3, r3
   2ffda:	2b01      	cmp	r3, #1
   2ffdc:	d12b      	bne.n	30036 <ticker_worker+0xd2>
		if (ticker->ticks_slot != 0U &&
   2ffde:	f8d4 a018 	ldr.w	sl, [r4, #24]
   2ffe2:	f1ba 0f00 	cmp.w	sl, #0
   2ffe6:	d052      	beq.n	3008e <ticker_worker+0x12a>
   2ffe8:	9b03      	ldr	r3, [sp, #12]
   2ffea:	2b00      	cmp	r3, #0
   2ffec:	d04a      	beq.n	30084 <ticker_worker+0x120>
		int32_t lazy_current = ticker->lazy_current;
   2ffee:	8be3      	ldrh	r3, [r4, #30]
   2fff0:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   2fff2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   2fff4:	b13b      	cbz	r3, 30006 <ticker_worker+0xa2>
   2fff6:	6819      	ldr	r1, [r3, #0]
   2fff8:	b119      	cbz	r1, 30002 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   2fffa:	7a19      	ldrb	r1, [r3, #8]
   2fffc:	2900      	cmp	r1, #0
   2fffe:	f000 80d9 	beq.w	301b4 <ticker_worker+0x250>
				ext_data->reschedule_state =
   30002:	2100      	movs	r1, #0
   30004:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
   30006:	9905      	ldr	r1, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   30008:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   3000c:	3101      	adds	r1, #1
   3000e:	b289      	uxth	r1, r1
   30010:	83e1      	strh	r1, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   30012:	b170      	cbz	r0, 30032 <ticker_worker+0xce>
   30014:	8ba0      	ldrh	r0, [r4, #28]
   30016:	4288      	cmp	r0, r1
   30018:	d20b      	bcs.n	30032 <ticker_worker+0xce>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   3001a:	2b00      	cmp	r3, #0
   3001c:	f000 80e3 	beq.w	301e6 <ticker_worker+0x282>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   30020:	7a19      	ldrb	r1, [r3, #8]
   30022:	2901      	cmp	r1, #1
   30024:	d005      	beq.n	30032 <ticker_worker+0xce>
			must_expire_skip = 1U;
   30026:	2601      	movs	r6, #1
   30028:	e034      	b.n	30094 <ticker_worker+0x130>
		instance->worker_trigger = 0U;
   3002a:	77c2      	strb	r2, [r0, #31]
}
   3002c:	b00d      	add	sp, #52	; 0x34
   3002e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   30032:	3a01      	subs	r2, #1
   30034:	70a2      	strb	r2, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   30036:	2fff      	cmp	r7, #255	; 0xff
   30038:	d1be      	bne.n	2ffb8 <ticker_worker+0x54>
   3003a:	f8dd a010 	ldr.w	sl, [sp, #16]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   3003e:	f89a 300b 	ldrb.w	r3, [sl, #11]
   30042:	f89a 200a 	ldrb.w	r2, [sl, #10]
   30046:	429a      	cmp	r2, r3
   30048:	d10a      	bne.n	30060 <ticker_worker+0xfc>
	uint8_t idx = *ticks_elapsed_index + 1;
   3004a:	3201      	adds	r2, #1
   3004c:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   3004e:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   30050:	bf1c      	itt	ne
   30052:	4613      	movne	r3, r2
   30054:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
   30056:	9a06      	ldr	r2, [sp, #24]
   30058:	f88a 200b 	strb.w	r2, [sl, #11]
   3005c:	bf08      	it	eq
   3005e:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   30060:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   30064:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   30068:	f8c3 900c 	str.w	r9, [r3, #12]
	instance->worker_trigger = 0U;
   3006c:	2200      	movs	r2, #0
   3006e:	f88a 201f 	strb.w	r2, [sl, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   30072:	4653      	mov	r3, sl
   30074:	2201      	movs	r2, #1
   30076:	2104      	movs	r1, #4
   30078:	2003      	movs	r0, #3
   3007a:	46a4      	mov	ip, r4
}
   3007c:	b00d      	add	sp, #52	; 0x34
   3007e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   30082:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   30084:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   30088:	9307      	str	r3, [sp, #28]
   3008a:	3380      	adds	r3, #128	; 0x80
   3008c:	d13c      	bne.n	30108 <ticker_worker+0x1a4>
		if (ticker->ext_data) {
   3008e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   30090:	b1db      	cbz	r3, 300ca <ticker_worker+0x166>
   30092:	2600      	movs	r6, #0
			ticker->ext_data->ticks_drift = 0U;
   30094:	2000      	movs	r0, #0
			ticker->ext_data->reschedule_state =
   30096:	7218      	strb	r0, [r3, #8]
		if (ticker->timeout_func) {
   30098:	68e5      	ldr	r5, [r4, #12]
			ticks_drift = ticker->ext_data->ticks_drift;
   3009a:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   3009c:	6058      	str	r0, [r3, #4]
		ticker->ack--;
   3009e:	3a01      	subs	r2, #1
   300a0:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   300a2:	2d00      	cmp	r5, #0
   300a4:	d0c7      	beq.n	30036 <ticker_worker+0xd2>
					   ticks_expired -
   300a6:	9b04      	ldr	r3, [sp, #16]
   300a8:	6960      	ldr	r0, [r4, #20]
   300aa:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   300ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
					   ticks_expired -
   300ae:	eba9 0000 	sub.w	r0, r9, r0
   300b2:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   300b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   300b8:	b1b6      	cbz	r6, 300e8 <ticker_worker+0x184>
   300ba:	6923      	ldr	r3, [r4, #16]
   300bc:	9301      	str	r3, [sp, #4]
   300be:	78e3      	ldrb	r3, [r4, #3]
   300c0:	9300      	str	r3, [sp, #0]
   300c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   300c6:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   300c8:	e7b5      	b.n	30036 <ticker_worker+0xd2>
		if (ticker->timeout_func) {
   300ca:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   300cc:	3a01      	subs	r2, #1
   300ce:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   300d0:	2d00      	cmp	r5, #0
   300d2:	d0b0      	beq.n	30036 <ticker_worker+0xd2>
			ticks_drift = 0U;
   300d4:	4619      	mov	r1, r3
					   ticks_expired -
   300d6:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   300d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
					   ticks_expired -
   300da:	eba9 0003 	sub.w	r0, r9, r3
   300de:	9b04      	ldr	r3, [sp, #16]
   300e0:	695b      	ldr	r3, [r3, #20]
   300e2:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   300e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   300e8:	6926      	ldr	r6, [r4, #16]
   300ea:	8be3      	ldrh	r3, [r4, #30]
   300ec:	9601      	str	r6, [sp, #4]
   300ee:	78e6      	ldrb	r6, [r4, #3]
   300f0:	9600      	str	r6, [sp, #0]
   300f2:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   300f4:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   300f6:	2b00      	cmp	r3, #0
   300f8:	9b03      	ldr	r3, [sp, #12]
   300fa:	bf18      	it	ne
   300fc:	2301      	movne	r3, #1
   300fe:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
   30100:	2300      	movs	r3, #0
   30102:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   30104:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   30106:	e796      	b.n	30036 <ticker_worker+0xd2>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   30108:	2fff      	cmp	r7, #255	; 0xff
   3010a:	d0c0      	beq.n	3008e <ticker_worker+0x12a>
		int32_t lazy_current = ticker->lazy_current;
   3010c:	8be1      	ldrh	r1, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   3010e:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   30110:	6865      	ldr	r5, [r4, #4]
				(lazy_current - ticker->priority);
   30112:	9807      	ldr	r0, [sp, #28]
		int32_t lazy_current = ticker->lazy_current;
   30114:	9105      	str	r1, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   30116:	4299      	cmp	r1, r3
			lazy_current -= ticker->lazy_periodic;
   30118:	bf28      	it	cs
   3011a:	1ac9      	subcs	r1, r1, r3
		uint32_t current_age = ticker->ticks_periodic +
   3011c:	fb01 5e05 	mla	lr, r1, r5, r5
				(lazy_current - ticker->priority);
   30120:	1a09      	subs	r1, r1, r0
		uint32_t acc_ticks_to_expire = 0U;
   30122:	e9cd 8909 	strd	r8, r9, [sp, #36]	; 0x24
		uint32_t current_age = ticker->ticks_periodic +
   30126:	463b      	mov	r3, r7
		uint32_t acc_ticks_to_expire = 0U;
   30128:	970b      	str	r7, [sp, #44]	; 0x2c
   3012a:	46f1      	mov	r9, lr
   3012c:	2600      	movs	r6, #0
   3012e:	9208      	str	r2, [sp, #32]
   30130:	46a4      	mov	ip, r4
   30132:	462f      	mov	r7, r5
   30134:	468e      	mov	lr, r1
			struct ticker_node *ticker_next = &nodes[id_head];
   30136:	b21b      	sxth	r3, r3
   30138:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   3013c:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
   30140:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   30142:	6891      	ldr	r1, [r2, #8]
   30144:	440e      	add	r6, r1
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   30146:	45b2      	cmp	sl, r6
   30148:	d32e      	bcc.n	301a8 <ticker_worker+0x244>
			if (ticker_next->ticks_slot == 0U) {
   3014a:	6990      	ldr	r0, [r2, #24]
   3014c:	b340      	cbz	r0, 301a0 <ticker_worker+0x23c>
			int32_t lazy_next = ticker_next->lazy_current;
   3014e:	8bd0      	ldrh	r0, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   30150:	8b95      	ldrh	r5, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   30152:	6854      	ldr	r4, [r2, #4]
			if (!lazy_next_periodic_skip) {
   30154:	42a8      	cmp	r0, r5
			int32_t lazy_next = ticker_next->lazy_current;
   30156:	4680      	mov	r8, r0
				lazy_next -= ticker_next->lazy_periodic;
   30158:	bf28      	it	cs
   3015a:	eba0 0805 	subcs.w	r8, r0, r5
					  0U :
   3015e:	2c00      	cmp	r4, #0
   30160:	d034      	beq.n	301cc <ticker_worker+0x268>
   30162:	1a61      	subs	r1, r4, r1
				(ticker->ticks_periodic == 0U) ||
   30164:	b37f      	cbz	r7, 301c6 <ticker_worker+0x262>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   30166:	fb04 1108 	mla	r1, r4, r8, r1
				(ticker->ticks_periodic == 0U) ||
   3016a:	4589      	cmp	r9, r1
   3016c:	bf8c      	ite	hi
   3016e:	2101      	movhi	r1, #1
   30170:	2100      	movls	r1, #0
					(ticker->ticks_periodic != 0U) &&
   30172:	bf34      	ite	cc
   30174:	2401      	movcc	r4, #1
   30176:	2400      	movcs	r4, #0
			if (!lazy_next_periodic_skip &&
   30178:	42a8      	cmp	r0, r5
   3017a:	d311      	bcc.n	301a0 <ticker_worker+0x23c>
   3017c:	78d5      	ldrb	r5, [r2, #3]
   3017e:	f89c 0003 	ldrb.w	r0, [ip, #3]
   30182:	4285      	cmp	r5, r0
   30184:	d826      	bhi.n	301d4 <ticker_worker+0x270>
				ticker_next->priority;
   30186:	f992 202d 	ldrsb.w	r2, [r2, #45]	; 0x2d
			    (next_force ||
   3018a:	f112 0f80 	cmn.w	r2, #128	; 0x80
   3018e:	d021      	beq.n	301d4 <ticker_worker+0x270>
				(lazy_next - ticker_next->priority) >
   30190:	eba8 0802 	sub.w	r8, r8, r2
			     next_is_critical ||
   30194:	45f0      	cmp	r8, lr
   30196:	dd00      	ble.n	3019a <ticker_worker+0x236>
			     (next_has_priority && !current_is_older) ||
   30198:	b1e1      	cbz	r1, 301d4 <ticker_worker+0x270>
   3019a:	9907      	ldr	r1, [sp, #28]
   3019c:	4291      	cmp	r1, r2
   3019e:	d017      	beq.n	301d0 <ticker_worker+0x26c>
			id_head = ticker_next->next;
   301a0:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
   301a4:	2bff      	cmp	r3, #255	; 0xff
   301a6:	d1c6      	bne.n	30136 <ticker_worker+0x1d2>
   301a8:	e9dd 8909 	ldrd	r8, r9, [sp, #36]	; 0x24
   301ac:	9a08      	ldr	r2, [sp, #32]
   301ae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   301b0:	4664      	mov	r4, ip
   301b2:	e76c      	b.n	3008e <ticker_worker+0x12a>
			    TICKER_RESCHEDULE_STATE_NONE &&
   301b4:	8ba1      	ldrh	r1, [r4, #28]
   301b6:	9805      	ldr	r0, [sp, #20]
   301b8:	4281      	cmp	r1, r0
   301ba:	f63f af22 	bhi.w	30002 <ticker_worker+0x9e>
				ext_data->reschedule_state =
   301be:	f04f 0101 	mov.w	r1, #1
   301c2:	7219      	strb	r1, [r3, #8]
   301c4:	e71f      	b.n	30006 <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
   301c6:	2101      	movs	r1, #1
					(ticker->ticks_periodic != 0U) &&
   301c8:	463c      	mov	r4, r7
   301ca:	e7d5      	b.n	30178 <ticker_worker+0x214>
					  0U :
   301cc:	4621      	mov	r1, r4
   301ce:	e7c9      	b.n	30164 <ticker_worker+0x200>
			     (equal_priority && next_is_older))) {
   301d0:	2c00      	cmp	r4, #0
   301d2:	d0e5      	beq.n	301a0 <ticker_worker+0x23c>
   301d4:	e9dd 8909 	ldrd	r8, r9, [sp, #36]	; 0x24
   301d8:	9a08      	ldr	r2, [sp, #32]
   301da:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   301dc:	4664      	mov	r4, ip
   301de:	e708      	b.n	2fff2 <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
   301e0:	9b06      	ldr	r3, [sp, #24]
   301e2:	9303      	str	r3, [sp, #12]
   301e4:	e6e0      	b.n	2ffa8 <ticker_worker+0x44>
		if (ticker->timeout_func) {
   301e6:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   301e8:	3a01      	subs	r2, #1
   301ea:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   301ec:	2d00      	cmp	r5, #0
   301ee:	f43f af22 	beq.w	30036 <ticker_worker+0xd2>
			ticks_drift = 0U;
   301f2:	4619      	mov	r1, r3
					   ticks_expired -
   301f4:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   301f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
					   ticks_expired -
   301f8:	eba9 0003 	sub.w	r0, r9, r3
   301fc:	9b04      	ldr	r3, [sp, #16]
   301fe:	695b      	ldr	r3, [r3, #20]
   30200:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   30202:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   30206:	e758      	b.n	300ba <ticker_worker+0x156>

00030208 <ticker_job>:
	if (instance->worker_trigger) {
   30208:	7fc3      	ldrb	r3, [r0, #31]
   3020a:	2b00      	cmp	r3, #0
   3020c:	f040 843f 	bne.w	30a8e <ticker_job+0x886>
{
   30210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   30214:	7f82      	ldrb	r2, [r0, #30]
{
   30216:	b08d      	sub	sp, #52	; 0x34
   30218:	4683      	mov	fp, r0
	if (instance->job_guard) {
   3021a:	2a00      	cmp	r2, #0
   3021c:	f040 808b 	bne.w	30336 <ticker_job+0x12e>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   30220:	7a83      	ldrb	r3, [r0, #10]
   30222:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
   30224:	2001      	movs	r0, #1
   30226:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   3022a:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   3022c:	f8db 0014 	ldr.w	r0, [fp, #20]
   30230:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   30232:	f000 8451 	beq.w	30ad8 <ticker_job+0x8d0>
	uint8_t idx = *ticks_elapsed_index + 1;
   30236:	3301      	adds	r3, #1
   30238:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   3023a:	2b02      	cmp	r3, #2
		idx = 0U;
   3023c:	bf08      	it	eq
   3023e:	4613      	moveq	r3, r2
		ticks_elapsed =
   30240:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   30244:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   30248:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   3024c:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   3024e:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
   30250:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
   30252:	9202      	str	r2, [sp, #8]
		instance->ticks_current += ticks_elapsed;
   30254:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   30256:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   3025a:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   3025e:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   30262:	f8db 3000 	ldr.w	r3, [fp]
   30266:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   30268:	f8db 3004 	ldr.w	r3, [fp, #4]
   3026c:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   3026e:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   30270:	9206      	str	r2, [sp, #24]
	while (count_user--) {
   30272:	b2db      	uxtb	r3, r3
   30274:	2a00      	cmp	r2, #0
   30276:	f000 81d7 	beq.w	30628 <ticker_job+0x420>
		flag_elapsed = 1U;
   3027a:	2201      	movs	r2, #1
   3027c:	920b      	str	r2, [sp, #44]	; 0x2c
   3027e:	9a05      	ldr	r2, [sp, #20]
   30280:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
	pending = 0U;
   30284:	2300      	movs	r3, #0
   30286:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   30288:	23ff      	movs	r3, #255	; 0xff
   3028a:	9301      	str	r3, [sp, #4]
   3028c:	465b      	mov	r3, fp
   3028e:	46d3      	mov	fp, sl
   30290:	469a      	mov	sl, r3
		user_ops = &user->user_op[0];
   30292:	f8db 9004 	ldr.w	r9, [fp, #4]
		while (user->middle != user->last) {
   30296:	f89b c003 	ldrb.w	ip, [fp, #3]
   3029a:	f89b 7002 	ldrb.w	r7, [fp, #2]
   3029e:	4567      	cmp	r7, ip
   302a0:	d041      	beq.n	30326 <ticker_job+0x11e>
			if (middle == user->count_user_op) {
   302a2:	f89b 1000 	ldrb.w	r1, [fp]
			middle = user->middle + 1;
   302a6:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   302a8:	b23a      	sxth	r2, r7
			middle = user->middle + 1;
   302aa:	b2db      	uxtb	r3, r3
				middle = 0U;
   302ac:	4299      	cmp	r1, r3
   302ae:	bf08      	it	eq
   302b0:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   302b2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   302b6:	eb02 0881 	add.w	r8, r2, r1, lsl #2
			user->middle = middle;
   302ba:	f88b 3002 	strb.w	r3, [fp, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   302be:	f819 6028 	ldrb.w	r6, [r9, r8, lsl #2]
			user_op = &user_ops[user->middle];
   302c2:	eb09 0588 	add.w	r5, r9, r8, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   302c6:	2e04      	cmp	r6, #4
			ticker = &node[user_op->id];
   302c8:	7869      	ldrb	r1, [r5, #1]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   302ca:	d93e      	bls.n	3034a <ticker_job+0x142>
			ticker = &node[user_op->id];
   302cc:	9a00      	ldr	r2, [sp, #0]
   302ce:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   302d2:	eb02 1404 	add.w	r4, r2, r4, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   302d6:	2e08      	cmp	r6, #8
			state = (ticker->req - ticker->ack) & 0xff;
   302d8:	7862      	ldrb	r2, [r4, #1]
   302da:	78a0      	ldrb	r0, [r4, #2]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   302dc:	d837      	bhi.n	3034e <ticker_job+0x146>
			state = (ticker->req - ticker->ack) & 0xff;
   302de:	1a12      	subs	r2, r2, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   302e0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   302e4:	d033      	beq.n	3034e <ticker_job+0x146>
			    (state == 0U) ||
   302e6:	2e05      	cmp	r6, #5
   302e8:	d059      	beq.n	3039e <ticker_job+0x196>
			if (state == 1U) {
   302ea:	2a01      	cmp	r2, #1
   302ec:	f040 8119 	bne.w	30522 <ticker_job+0x31a>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   302f0:	2e06      	cmp	r6, #6
   302f2:	d03b      	beq.n	3036c <ticker_job+0x164>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   302f4:	4650      	mov	r0, sl
   302f6:	f7ff fccf 	bl	2fc98 <ticker_dequeue>
			ticker->req = ticker->ack;
   302fa:	78a3      	ldrb	r3, [r4, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   302fc:	60a0      	str	r0, [r4, #8]
			ticker->req = ticker->ack;
   302fe:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   30300:	f89a 301c 	ldrb.w	r3, [sl, #28]
   30304:	428b      	cmp	r3, r1
   30306:	f000 80ee 	beq.w	304e6 <ticker_job+0x2de>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   3030a:	2000      	movs	r0, #0
   3030c:	f809 0028 	strb.w	r0, [r9, r8, lsl #2]
	if (user_op->fp_op_func) {
   30310:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   30312:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   30314:	b10b      	cbz	r3, 3031a <ticker_job+0x112>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   30316:	6b29      	ldr	r1, [r5, #48]	; 0x30
   30318:	4798      	blx	r3
		while (user->middle != user->last) {
   3031a:	f89b c003 	ldrb.w	ip, [fp, #3]
   3031e:	f89b 7002 	ldrb.w	r7, [fp, #2]
   30322:	4567      	cmp	r7, ip
   30324:	d1bd      	bne.n	302a2 <ticker_job+0x9a>
	while (count_user--) {
   30326:	9a05      	ldr	r2, [sp, #20]
   30328:	455a      	cmp	r2, fp
   3032a:	f1ab 0308 	sub.w	r3, fp, #8
   3032e:	f000 8109 	beq.w	30544 <ticker_job+0x33c>
   30332:	469b      	mov	fp, r3
   30334:	e7ad      	b.n	30292 <ticker_job+0x8a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   30336:	6a44      	ldr	r4, [r0, #36]	; 0x24
   30338:	2104      	movs	r1, #4
   3033a:	4603      	mov	r3, r0
   3033c:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   3033e:	2004      	movs	r0, #4
   30340:	46a4      	mov	ip, r4
}
   30342:	b00d      	add	sp, #52	; 0x34
   30344:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   30348:	4760      	bx	ip
   3034a:	461f      	mov	r7, r3
   3034c:	e7a7      	b.n	3029e <ticker_job+0x96>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   3034e:	2200      	movs	r2, #0
   30350:	f809 2028 	strb.w	r2, [r9, r8, lsl #2]
	if (user_op->fp_op_func) {
   30354:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->status = status;
   30356:	2001      	movs	r0, #1
   30358:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   3035a:	2a00      	cmp	r2, #0
   3035c:	d0f5      	beq.n	3034a <ticker_job+0x142>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   3035e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   30360:	4790      	blx	r2
		while (user->middle != user->last) {
   30362:	f89b c003 	ldrb.w	ip, [fp, #3]
   30366:	f89b 7002 	ldrb.w	r7, [fp, #2]
   3036a:	e798      	b.n	3029e <ticker_job+0x96>
		if (instance->ticker_id_slot_previous == user_op->id) {
   3036c:	f89a 301c 	ldrb.w	r3, [sl, #28]
   30370:	428b      	cmp	r3, r1
   30372:	d1ca      	bne.n	3030a <ticker_job+0x102>
			instance->ticker_id_slot_previous = TICKER_NULL;
   30374:	23ff      	movs	r3, #255	; 0xff
   30376:	f88a 301c 	strb.w	r3, [sl, #28]
				ticks_at_yield =
   3037a:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
   3037c:	f8da 2014 	ldr.w	r2, [sl, #20]
			if (!((ticks_at_yield - ticks_current) &
   30380:	1a83      	subs	r3, r0, r2
   30382:	021c      	lsls	r4, r3, #8
   30384:	f100 80bd 	bmi.w	30502 <ticker_job+0x2fa>
				ticks_used = ticks_elapsed +
   30388:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3038a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   3038e:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   30390:	f8da 2018 	ldr.w	r2, [sl, #24]
   30394:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   30396:	bf88      	it	hi
   30398:	f8ca 3018 	strhi.w	r3, [sl, #24]
   3039c:	e7b5      	b.n	3030a <ticker_job+0x102>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   3039e:	6868      	ldr	r0, [r5, #4]
   303a0:	b948      	cbnz	r0, 303b6 <ticker_job+0x1ae>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   303a2:	68a8      	ldr	r0, [r5, #8]
   303a4:	b938      	cbnz	r0, 303b6 <ticker_job+0x1ae>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   303a6:	68e8      	ldr	r0, [r5, #12]
   303a8:	b928      	cbnz	r0, 303b6 <ticker_job+0x1ae>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   303aa:	6928      	ldr	r0, [r5, #16]
   303ac:	b918      	cbnz	r0, 303b6 <ticker_job+0x1ae>
			     (user_op->params.update.lazy == 0U) &&
   303ae:	6968      	ldr	r0, [r5, #20]
   303b0:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   303b4:	d0cb      	beq.n	3034e <ticker_job+0x146>
			if (state == 1U) {
   303b6:	2a01      	cmp	r2, #1
   303b8:	f040 80b3 	bne.w	30522 <ticker_job+0x31a>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   303bc:	4650      	mov	r0, sl
   303be:	f7ff fc6b 	bl	2fc98 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   303c2:	f8da 7014 	ldr.w	r7, [sl, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   303c6:	60a0      	str	r0, [r4, #8]
   303c8:	4606      	mov	r6, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   303ca:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   303cc:	f00b ff2a 	bl	3c224 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   303d0:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   303d2:	1bc2      	subs	r2, r0, r7
   303d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   303d8:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   303da:	4296      	cmp	r6, r2
	ticks_now = cntr_cnt_get();
   303dc:	4686      	mov	lr, r0
	if (ticks_to_expire > ticks_elapsed) {
   303de:	f240 8099 	bls.w	30514 <ticker_job+0x30c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   303e2:	6963      	ldr	r3, [r4, #20]
   303e4:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
   303e6:	1ab0      	subs	r0, r6, r2
	if ((ticker->ticks_periodic != 0U) &&
   303e8:	6867      	ldr	r7, [r4, #4]
   303ea:	2f00      	cmp	r7, #0
   303ec:	d050      	beq.n	30490 <ticker_job+0x288>
	    (user_op->params.update.lazy != 0U)) {
   303ee:	8aab      	ldrh	r3, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   303f0:	2b00      	cmp	r3, #0
   303f2:	d04d      	beq.n	30490 <ticker_job+0x288>
		user_op->params.update.lazy--;
   303f4:	3b01      	subs	r3, #1
   303f6:	b29e      	uxth	r6, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   303f8:	4287      	cmp	r7, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   303fa:	8be3      	ldrh	r3, [r4, #30]
		user_op->params.update.lazy--;
   303fc:	82ae      	strh	r6, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   303fe:	d223      	bcs.n	30448 <ticker_job+0x240>
			ticks_to_expire += ticker->ticks_periodic +
   30400:	1c7a      	adds	r2, r7, #1
   30402:	f8cd 9018 	str.w	r9, [sp, #24]
   30406:	950a      	str	r5, [sp, #40]	; 0x28
   30408:	4694      	mov	ip, r2
   3040a:	e018      	b.n	3043e <ticker_job+0x236>
	if ((ticker->remainder_current >= BIT(31)) ||
   3040c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3040e:	f8df 9204 	ldr.w	r9, [pc, #516]	; 30614 <ticker_job+0x40c>
   30412:	4d81      	ldr	r5, [pc, #516]	; (30618 <ticker_job+0x410>)
   30414:	4491      	add	r9, r2
   30416:	45a9      	cmp	r9, r5
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   30418:	bf84      	itt	hi
   3041a:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
   3041e:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
   30422:	4661      	mov	r1, ip
	ticker->remainder_current -= ticker->remainder_periodic;
   30424:	6a25      	ldr	r5, [r4, #32]
   30426:	bf94      	ite	ls
   30428:	4639      	movls	r1, r7
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   3042a:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
			ticker->lazy_current--;
   3042e:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   30430:	1a40      	subs	r0, r0, r1
	ticker->remainder_current -= ticker->remainder_periodic;
   30432:	1b52      	subs	r2, r2, r5
			ticker->lazy_current--;
   30434:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   30436:	4287      	cmp	r7, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   30438:	6262      	str	r2, [r4, #36]	; 0x24
			ticker->lazy_current--;
   3043a:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   3043c:	d201      	bcs.n	30442 <ticker_job+0x23a>
   3043e:	429e      	cmp	r6, r3
   30440:	d3e4      	bcc.n	3040c <ticker_job+0x204>
   30442:	f8dd 9018 	ldr.w	r9, [sp, #24]
   30446:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30448:	429e      	cmp	r6, r3
   3044a:	d920      	bls.n	3048e <ticker_job+0x286>
			ticks_to_expire += ticker->ticks_periodic +
   3044c:	1c79      	adds	r1, r7, #1
	ticker->remainder_current += ticker->remainder_periodic;
   3044e:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
			ticks_to_expire += ticker->ticks_periodic +
   30452:	9106      	str	r1, [sp, #24]
   30454:	940a      	str	r4, [sp, #40]	; 0x28
   30456:	e005      	b.n	30464 <ticker_job+0x25c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30458:	3301      	adds	r3, #1
   3045a:	b29b      	uxth	r3, r3
   3045c:	4639      	mov	r1, r7
   3045e:	429e      	cmp	r6, r3
			ticks_to_expire += ticker->ticks_periodic +
   30460:	4408      	add	r0, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30462:	d011      	beq.n	30488 <ticker_job+0x280>
	if ((ticker->remainder_current < BIT(31)) &&
   30464:	496b      	ldr	r1, [pc, #428]	; (30614 <ticker_job+0x40c>)
   30466:	4c6c      	ldr	r4, [pc, #432]	; (30618 <ticker_job+0x410>)
	ticker->remainder_current += ticker->remainder_periodic;
   30468:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   3046a:	1851      	adds	r1, r2, r1
   3046c:	42a1      	cmp	r1, r4
   3046e:	d8f3      	bhi.n	30458 <ticker_job+0x250>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30470:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   30472:	9906      	ldr	r1, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30474:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30478:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   3047a:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   3047e:	429e      	cmp	r6, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30480:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   30484:	4408      	add	r0, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
   30486:	d1ed      	bne.n	30464 <ticker_job+0x25c>
   30488:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   3048a:	6262      	str	r2, [r4, #36]	; 0x24
   3048c:	83e6      	strh	r6, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   3048e:	83a6      	strh	r6, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   30490:	686a      	ldr	r2, [r5, #4]
	ticker->ticks_to_expire_minus +=
   30492:	9b04      	ldr	r3, [sp, #16]
	struct ticker_ext *ext_data = ticker->ext_data;
   30494:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   30496:	4410      	add	r0, r2
   30498:	60a0      	str	r0, [r4, #8]
				user_op->params.update.ticks_drift_minus;
   3049a:	68a8      	ldr	r0, [r5, #8]
	ticker->ticks_to_expire_minus +=
   3049c:	4403      	add	r3, r0
   3049e:	6163      	str	r3, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   304a0:	b119      	cbz	r1, 304aa <ticker_job+0x2a2>
   304a2:	680b      	ldr	r3, [r1, #0]
   304a4:	b10b      	cbz	r3, 304aa <ticker_job+0x2a2>
			user_op->params.update.ticks_drift_plus -
   304a6:	1a12      	subs	r2, r2, r0
		ext_data->ticks_drift =
   304a8:	604a      	str	r2, [r1, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   304aa:	4672      	mov	r2, lr
   304ac:	9903      	ldr	r1, [sp, #12]
   304ae:	4620      	mov	r0, r4
   304b0:	f7ff fc2c 	bl	2fd0c <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   304b4:	68ea      	ldr	r2, [r5, #12]
   304b6:	69a3      	ldr	r3, [r4, #24]
   304b8:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   304ba:	692a      	ldr	r2, [r5, #16]
   304bc:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   304be:	bf8c      	ite	hi
   304c0:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   304c2:	2300      	movls	r3, #0
   304c4:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   304c6:	7dab      	ldrb	r3, [r5, #22]
   304c8:	b103      	cbz	r3, 304cc <ticker_job+0x2c4>
		ticker->force = user_op->params.update.force;
   304ca:	70e3      	strb	r3, [r4, #3]
	if (user_op->params.update.must_expire) {
   304cc:	7deb      	ldrb	r3, [r5, #23]
   304ce:	b113      	cbz	r3, 304d6 <ticker_job+0x2ce>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   304d0:	3b01      	subs	r3, #1
   304d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
   304d6:	9b01      	ldr	r3, [sp, #4]
   304d8:	7023      	strb	r3, [r4, #0]
		ticker->req++;
   304da:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   304dc:	786a      	ldrb	r2, [r5, #1]
   304de:	9201      	str	r2, [sp, #4]
		ticker->req++;
   304e0:	3301      	adds	r3, #1
   304e2:	7063      	strb	r3, [r4, #1]
   304e4:	e711      	b.n	3030a <ticker_job+0x102>
			instance->ticker_id_slot_previous = TICKER_NULL;
   304e6:	23ff      	movs	r3, #255	; 0xff
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   304e8:	2e08      	cmp	r6, #8
			instance->ticker_id_slot_previous = TICKER_NULL;
   304ea:	f88a 301c 	strb.w	r3, [sl, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   304ee:	f43f af44 	beq.w	3037a <ticker_job+0x172>
				ticks_at_yield = cntr_cnt_get();
   304f2:	f00b fe97 	bl	3c224 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
   304f6:	f8da 2014 	ldr.w	r2, [sl, #20]
			if (!((ticks_at_yield - ticks_current) &
   304fa:	1a83      	subs	r3, r0, r2
   304fc:	021c      	lsls	r4, r3, #8
   304fe:	f57f af43 	bpl.w	30388 <ticker_job+0x180>
				if (ticks_elapsed > ticks_used) {
   30502:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30504:	1a12      	subs	r2, r2, r0
   30506:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   3050a:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
   3050c:	bf34      	ite	cc
   3050e:	1a9b      	subcc	r3, r3, r2
					ticks_used = 0;
   30510:	2300      	movcs	r3, #0
   30512:	e73d      	b.n	30390 <ticker_job+0x188>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   30514:	6963      	ldr	r3, [r4, #20]
   30516:	1b9b      	subs	r3, r3, r6
   30518:	4413      	add	r3, r2
   3051a:	9304      	str	r3, [sp, #16]
   3051c:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
   3051e:	2000      	movs	r0, #0
   30520:	e762      	b.n	303e8 <ticker_job+0x1e0>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   30522:	2104      	movs	r1, #4
   30524:	4653      	mov	r3, sl
   30526:	2201      	movs	r2, #1
   30528:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
   3052c:	4608      	mov	r0, r1
   3052e:	47a0      	blx	r4
	while (count_user--) {
   30530:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
   30532:	f88b 7002 	strb.w	r7, [fp, #2]
				pending = 1U;
   30536:	2301      	movs	r3, #1
	while (count_user--) {
   30538:	455a      	cmp	r2, fp
				pending = 1U;
   3053a:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   3053c:	f1ab 0308 	sub.w	r3, fp, #8
   30540:	f47f aef7 	bne.w	30332 <ticker_job+0x12a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   30544:	f89a 301d 	ldrb.w	r3, [sl, #29]
	flag_compare_update = 0U;
   30548:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3054a:	1a9b      	subs	r3, r3, r2
   3054c:	bf18      	it	ne
   3054e:	2301      	movne	r3, #1
   30550:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
   30552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (instance->ticker_id_head != ticker_id_old_head) {
   30554:	46d3      	mov	fp, sl
	if (flag_elapsed) {
   30556:	2b00      	cmp	r3, #0
   30558:	d16a      	bne.n	30630 <ticker_job+0x428>
		ticker_job_list_insert(instance, insert_head);
   3055a:	9901      	ldr	r1, [sp, #4]
   3055c:	4658      	mov	r0, fp
   3055e:	f7ff fbf9 	bl	2fd54 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   30562:	f89b 301d 	ldrb.w	r3, [fp, #29]
   30566:	9300      	str	r3, [sp, #0]
   30568:	9b00      	ldr	r3, [sp, #0]
   3056a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3056c:	4293      	cmp	r3, r2
   3056e:	f000 8278 	beq.w	30a62 <ticker_job+0x85a>
	if (!pending) {
   30572:	9b08      	ldr	r3, [sp, #32]
   30574:	2b00      	cmp	r3, #0
   30576:	f000 81e4 	beq.w	30942 <ticker_job+0x73a>
	if (instance->ticker_id_head == TICKER_NULL) {
   3057a:	f89b 301d 	ldrb.w	r3, [fp, #29]
   3057e:	9300      	str	r3, [sp, #0]
   30580:	9b00      	ldr	r3, [sp, #0]
   30582:	2bff      	cmp	r3, #255	; 0xff
   30584:	f000 82d3 	beq.w	30b2e <ticker_job+0x926>
	if (ticker_id_old_head == TICKER_NULL) {
   30588:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3058a:	2bff      	cmp	r3, #255	; 0xff
   3058c:	f000 82e6 	beq.w	30b5c <ticker_job+0x954>
	ticker = &instance->nodes[instance->ticker_id_head];
   30590:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   30592:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   30596:	f8df 9084 	ldr.w	r9, [pc, #132]	; 3061c <ticker_job+0x414>
   3059a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 30620 <ticker_job+0x418>
   3059e:	4f21      	ldr	r7, [pc, #132]	; (30624 <ticker_job+0x41c>)
	ticker = &instance->nodes[instance->ticker_id_head];
   305a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   305a4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   305a8:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   305aa:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   305ac:	f00b fe3a 	bl	3c224 <cntr_cnt_get>
		cc = instance->ticks_current;
   305b0:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   305b4:	1b03      	subs	r3, r0, r4
   305b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   305ba:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   305bc:	42b3      	cmp	r3, r6
   305be:	bf2c      	ite	cs
   305c0:	18e4      	addcs	r4, r4, r3
   305c2:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   305c4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   305c8:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   305cc:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   305ce:	4620      	mov	r0, r4
   305d0:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   305d2:	f00b fe27 	bl	3c224 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   305d6:	eba0 030a 	sub.w	r3, r0, sl
   305da:	eba4 040a 	sub.w	r4, r4, sl
   305de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   305e2:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   305e4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   305e8:	42a3      	cmp	r3, r4
		i--;
   305ea:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   305ee:	f240 823f 	bls.w	30a70 <ticker_job+0x868>
		LL_ASSERT(i);
   305f2:	2d00      	cmp	r5, #0
   305f4:	d1da      	bne.n	305ac <ticker_job+0x3a4>
   305f6:	f640 133e 	movw	r3, #2366	; 0x93e
   305fa:	464a      	mov	r2, r9
   305fc:	4641      	mov	r1, r8
   305fe:	4638      	mov	r0, r7
   30600:	f012 fb24 	bl	42c4c <printk>
   30604:	4040      	eors	r0, r0
   30606:	f380 8811 	msr	BASEPRI, r0
   3060a:	f04f 0003 	mov.w	r0, #3
   3060e:	df02      	svc	2
   30610:	e7cc      	b.n	305ac <ticker_job+0x3a4>
   30612:	bf00      	nop
   30614:	ff172b5a 	.word	0xff172b5a
   30618:	7f172b59 	.word	0x7f172b59
   3061c:	00049fe4 	.word	0x00049fe4
   30620:	0004a090 	.word	0x0004a090
   30624:	0004a024 	.word	0x0004a024
	pending = 0U;
   30628:	9b06      	ldr	r3, [sp, #24]
   3062a:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   3062c:	23ff      	movs	r3, #255	; 0xff
   3062e:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   30630:	f00b fdf8 	bl	3c224 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30634:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   30636:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3063a:	1ac3      	subs	r3, r0, r3
   3063c:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   30640:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   30642:	f8db 3000 	ldr.w	r3, [fp]
   30646:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   30648:	d052      	beq.n	306f0 <ticker_job+0x4e8>
	ticks_expired = 0U;
   3064a:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   3064c:	f8df 8288 	ldr.w	r8, [pc, #648]	; 308d8 <ticker_job+0x6d0>
   30650:	f8df 9288 	ldr.w	r9, [pc, #648]	; 308dc <ticker_job+0x6d4>
	while (instance->ticker_id_head != TICKER_NULL) {
   30654:	9f02      	ldr	r7, [sp, #8]
	ticks_expired = 0U;
   30656:	9303      	str	r3, [sp, #12]
		ticker = &node[id_expired];
   30658:	9a00      	ldr	r2, [sp, #0]
   3065a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   3065e:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   30662:	011b      	lsls	r3, r3, #4
   30664:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
   30666:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   30668:	429f      	cmp	r7, r3
   3066a:	f0c0 8253 	bcc.w	30b14 <ticker_job+0x90c>
		ticks_expired += ticks_to_expire;
   3066e:	9a03      	ldr	r2, [sp, #12]
		skip_collision = (ticker->lazy_current != 0U);
   30670:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		ticks_expired += ticks_to_expire;
   30674:	441a      	add	r2, r3
   30676:	9203      	str	r2, [sp, #12]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   30678:	f8db 2018 	ldr.w	r2, [fp, #24]
   3067c:	4293      	cmp	r3, r2
			instance->ticks_slot_previous -= ticks_to_expire;
   3067e:	bf38      	it	cc
   30680:	1ad2      	subcc	r2, r2, r3
		ticks_elapsed -= ticks_to_expire;
   30682:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
   30686:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   3068a:	bf22      	ittt	cs
   3068c:	2200      	movcs	r2, #0
   3068e:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   30692:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   30696:	f8cb 2018 	str.w	r2, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   3069a:	78a3      	ldrb	r3, [r4, #2]
   3069c:	7861      	ldrb	r1, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   3069e:	69a2      	ldr	r2, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   306a0:	1ac9      	subs	r1, r1, r3
   306a2:	b2c9      	uxtb	r1, r1
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   306a4:	b112      	cbz	r2, 306ac <ticker_job+0x4a4>
   306a6:	2902      	cmp	r1, #2
   306a8:	f000 8139 	beq.w	3091e <ticker_job+0x716>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   306ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		instance->ticker_id_head = ticker->next;
   306ae:	9d04      	ldr	r5, [sp, #16]
		ticker->ticks_to_expire = 0U;
   306b0:	2200      	movs	r2, #0
   306b2:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
   306b4:	9a00      	ldr	r2, [sp, #0]
   306b6:	5d52      	ldrb	r2, [r2, r5]
   306b8:	f88b 201d 	strb.w	r2, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   306bc:	6865      	ldr	r5, [r4, #4]
   306be:	2d00      	cmp	r5, #0
   306c0:	d153      	bne.n	3076a <ticker_job+0x562>
   306c2:	b110      	cbz	r0, 306ca <ticker_job+0x4c2>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   306c4:	7a02      	ldrb	r2, [r0, #8]
   306c6:	2a01      	cmp	r2, #1
   306c8:	d056      	beq.n	30778 <ticker_job+0x570>
			if (state && ((state == 1U) || skip_collision) &&
   306ca:	2900      	cmp	r1, #0
   306cc:	d066      	beq.n	3079c <ticker_job+0x594>
   306ce:	2901      	cmp	r1, #1
   306d0:	d002      	beq.n	306d8 <ticker_job+0x4d0>
   306d2:	f1be 0f00 	cmp.w	lr, #0
   306d6:	d061      	beq.n	3079c <ticker_job+0x594>
			    ticker->fp_op_func) {
   306d8:	6a22      	ldr	r2, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   306da:	2a00      	cmp	r2, #0
   306dc:	d05e      	beq.n	3079c <ticker_job+0x594>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   306de:	6a61      	ldr	r1, [r4, #36]	; 0x24
   306e0:	2001      	movs	r0, #1
   306e2:	4790      	blx	r2
			ticker->req = ticker->ack;
   306e4:	78a3      	ldrb	r3, [r4, #2]
   306e6:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   306e8:	f89b 601d 	ldrb.w	r6, [fp, #29]
   306ec:	2eff      	cmp	r6, #255	; 0xff
   306ee:	d1b3      	bne.n	30658 <ticker_job+0x450>
			flag_compare_update = 1U;
   306f0:	9b06      	ldr	r3, [sp, #24]
   306f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   306f4:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
   306f6:	4296      	cmp	r6, r2
   306f8:	bf18      	it	ne
   306fa:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   306fc:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   306fe:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
   30700:	f7ff fb28 	bl	2fd54 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   30704:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   30708:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
   3070c:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
   30710:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   30712:	9b00      	ldr	r3, [sp, #0]
   30714:	2bff      	cmp	r3, #255	; 0xff
   30716:	d00f      	beq.n	30738 <ticker_job+0x530>
   30718:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
   3071a:	b233      	sxth	r3, r6
   3071c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   30720:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
   30724:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   30726:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   30728:	b117      	cbz	r7, 30730 <ticker_job+0x528>
   3072a:	7a39      	ldrb	r1, [r7, #8]
   3072c:	2901      	cmp	r1, #1
   3072e:	d03c      	beq.n	307aa <ticker_job+0x5a2>
			ticker_id_head = ticker->next;
   30730:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
   30734:	2eff      	cmp	r6, #255	; 0xff
   30736:	d1f0      	bne.n	3071a <ticker_job+0x512>
	return rescheduled;
   30738:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   3073c:	2a00      	cmp	r2, #0
   3073e:	f43f af13 	beq.w	30568 <ticker_job+0x360>
	if (instance->ticker_id_head != ticker_id_old_head) {
   30742:	9b00      	ldr	r3, [sp, #0]
   30744:	9909      	ldr	r1, [sp, #36]	; 0x24
   30746:	428b      	cmp	r3, r1
   30748:	f47f af13 	bne.w	30572 <ticker_job+0x36a>
	if (!pending) {
   3074c:	9b08      	ldr	r3, [sp, #32]
   3074e:	2b00      	cmp	r3, #0
   30750:	f47f af16 	bne.w	30580 <ticker_job+0x378>
	count_user = instance->count_user;
   30754:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   30758:	f8db 5004 	ldr.w	r5, [fp, #4]
	while (count_user--) {
   3075c:	1e5f      	subs	r7, r3, #1
   3075e:	b2ff      	uxtb	r7, r7
   30760:	2b00      	cmp	r3, #0
   30762:	f43f af0d 	beq.w	30580 <ticker_job+0x378>
			flag_compare_update = 1U;
   30766:	9206      	str	r2, [sp, #24]
   30768:	e0f6      	b.n	30958 <ticker_job+0x750>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   3076a:	2800      	cmp	r0, #0
   3076c:	f000 80a7 	beq.w	308be <ticker_job+0x6b6>
   30770:	7a02      	ldrb	r2, [r0, #8]
   30772:	2a01      	cmp	r2, #1
   30774:	f040 80a3 	bne.w	308be <ticker_job+0x6b6>
				ticker->req = ticker->ack;
   30778:	7063      	strb	r3, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   3077a:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   3077c:	9b07      	ldr	r3, [sp, #28]
   3077e:	9a03      	ldr	r2, [sp, #12]
   30780:	f8db 1014 	ldr.w	r1, [fp, #20]
   30784:	189a      	adds	r2, r3, r2
   30786:	4620      	mov	r0, r4
   30788:	f7ff fac0 	bl	2fd0c <ticks_to_expire_prep>
			ticker->next = *insert_head;
   3078c:	9a00      	ldr	r2, [sp, #0]
   3078e:	9904      	ldr	r1, [sp, #16]
   30790:	9b01      	ldr	r3, [sp, #4]
   30792:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   30794:	7863      	ldrb	r3, [r4, #1]
   30796:	9601      	str	r6, [sp, #4]
   30798:	3301      	adds	r3, #1
   3079a:	b2db      	uxtb	r3, r3
			ticker->req = ticker->ack;
   3079c:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   3079e:	f89b 601d 	ldrb.w	r6, [fp, #29]
   307a2:	2eff      	cmp	r6, #255	; 0xff
   307a4:	f47f af58 	bne.w	30658 <ticker_job+0x450>
   307a8:	e7a2      	b.n	306f0 <ticker_job+0x4e8>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   307aa:	9b01      	ldr	r3, [sp, #4]
   307ac:	7f1b      	ldrb	r3, [r3, #28]
   307ae:	2bff      	cmp	r3, #255	; 0xff
   307b0:	d044      	beq.n	3083c <ticker_job+0x634>
			instance->ticks_slot_previous > ticks_elapsed) {
   307b2:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   307b4:	9a02      	ldr	r2, [sp, #8]
			instance->ticks_slot_previous > ticks_elapsed) {
   307b6:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   307b8:	4293      	cmp	r3, r2
   307ba:	d93f      	bls.n	3083c <ticker_job+0x634>
			window_start_ticks = instance->ticks_slot_previous -
   307bc:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   307c0:	e9d7 3b00 	ldrd	r3, fp, [r7]
		ticker_id_iter = nodes[ticker_id_head].next;
   307c4:	782a      	ldrb	r2, [r5, #0]
   307c6:	9203      	str	r2, [sp, #12]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   307c8:	459b      	cmp	fp, r3
   307ca:	d23f      	bcs.n	3084c <ticker_job+0x644>
		while (ticker_id_iter != TICKER_NULL &&
   307cc:	2aff      	cmp	r2, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   307ce:	eba3 080b 	sub.w	r8, r3, fp
		while (ticker_id_iter != TICKER_NULL &&
   307d2:	d03b      	beq.n	3084c <ticker_job+0x644>
		       ticks_start_offset + ticker->ticks_slot <=
   307d4:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
   307d8:	45f0      	cmp	r8, lr
   307da:	f04f 0300 	mov.w	r3, #0
   307de:	d33c      	bcc.n	3085a <ticker_job+0x652>
   307e0:	46f1      	mov	r9, lr
   307e2:	461c      	mov	r4, r3
   307e4:	e01c      	b.n	30820 <ticker_job+0x618>
			if (node->ticks_to_expire >
   307e6:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
   307e8:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   307ea:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   307ec:	4423      	add	r3, r4
			if (node->ticks_to_expire >
   307ee:	d909      	bls.n	30804 <ticker_job+0x5fc>
				window_end_ticks =
   307f0:	4543      	cmp	r3, r8
   307f2:	bf28      	it	cs
   307f4:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   307f6:	454b      	cmp	r3, r9
   307f8:	d904      	bls.n	30804 <ticker_job+0x5fc>
			if (ticks_to_expire != 0U &&
   307fa:	ebb3 030e 	subs.w	r3, r3, lr
   307fe:	d001      	beq.n	30804 <ticker_job+0x5fc>
   30800:	459c      	cmp	ip, r3
   30802:	d92a      	bls.n	3085a <ticker_job+0x652>
			window_start_ticks  = node->ticks_to_expire +
   30804:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
   30806:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
   3080a:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   3080e:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
   30810:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   30814:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   30816:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
   3081a:	d01e      	beq.n	3085a <ticker_job+0x652>
   3081c:	45c8      	cmp	r8, r9
   3081e:	d31c      	bcc.n	3085a <ticker_job+0x652>
			node = &nodes[ticker_id_iter];
   30820:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   30824:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
   30828:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   3082a:	6a81      	ldr	r1, [r0, #40]	; 0x28
   3082c:	2900      	cmp	r1, #0
   3082e:	d0da      	beq.n	307e6 <ticker_job+0x5de>
   30830:	7a09      	ldrb	r1, [r1, #8]
   30832:	2901      	cmp	r1, #1
   30834:	d1d7      	bne.n	307e6 <ticker_job+0x5de>
				ticker_id_iter = node->next;
   30836:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
   3083a:	e7eb      	b.n	30814 <ticker_job+0x60c>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   3083c:	e9d7 3b00 	ldrd	r3, fp, [r7]
		ticker_id_iter = nodes[ticker_id_head].next;
   30840:	782a      	ldrb	r2, [r5, #0]
   30842:	9203      	str	r2, [sp, #12]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   30844:	459b      	cmp	fp, r3
		window_start_ticks = 0U;
   30846:	f04f 0c00 	mov.w	ip, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   3084a:	d3bf      	bcc.n	307cc <ticker_job+0x5c4>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   3084c:	68ab      	ldr	r3, [r5, #8]
   3084e:	ebab 0303 	sub.w	r3, fp, r3
   30852:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   30854:	2300      	movs	r3, #0
   30856:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   30858:	e029      	b.n	308ae <ticker_job+0x6a6>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   3085a:	68aa      	ldr	r2, [r5, #8]
		ticker->ticks_to_expire = ticks_to_expire;
   3085c:	9c03      	ldr	r4, [sp, #12]
		ticker->ext_data->ticks_drift += ticks_to_expire -
   3085e:	ebab 0b02 	sub.w	fp, fp, r2
   30862:	eb0b 0203 	add.w	r2, fp, r3
   30866:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   30868:	f04f 0eff 	mov.w	lr, #255	; 0xff
   3086c:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   3086e:	e000      	b.n	30872 <ticker_job+0x66a>
   30870:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
   30872:	b221      	sxth	r1, r4
   30874:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   30878:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
   3087c:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   3087e:	f8dc 0008 	ldr.w	r0, [ip, #8]
   30882:	4298      	cmp	r0, r3
   30884:	f080 813c 	bcs.w	30b00 <ticker_job+0x8f8>
				ticker->ticks_to_expire -=
   30888:	1a1b      	subs	r3, r3, r0
   3088a:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
   3088c:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
   30890:	2aff      	cmp	r2, #255	; 0xff
   30892:	46a6      	mov	lr, r4
   30894:	d1ec      	bne.n	30870 <ticker_job+0x668>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   30896:	9a01      	ldr	r2, [sp, #4]
   30898:	9b03      	ldr	r3, [sp, #12]
   3089a:	7753      	strb	r3, [r2, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   3089c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   308a0:	0109      	lsls	r1, r1, #4
			nodes[ticker_id_prev].next = ticker_id_head;
   308a2:	9300      	str	r3, [sp, #0]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   308a4:	f81a 3001 	ldrb.w	r3, [sl, r1]
   308a8:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   308aa:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
   308ae:	8beb      	ldrh	r3, [r5, #30]
   308b0:	3b01      	subs	r3, #1
   308b2:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   308b4:	f04f 0302 	mov.w	r3, #2
   308b8:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   308ba:	2201      	movs	r2, #1
   308bc:	e729      	b.n	30712 <ticker_job+0x50a>
				if (!ticker->lazy_current) {
   308be:	f1be 0f00 	cmp.w	lr, #0
   308c2:	d13b      	bne.n	3093c <ticker_job+0x734>
					lazy_periodic = ticker->lazy_periodic;
   308c4:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
   308c8:	4672      	mov	r2, lr
				while (count--) {
   308ca:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   308cc:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   308d0:	2100      	movs	r1, #0
   308d2:	9005      	str	r0, [sp, #20]
   308d4:	e009      	b.n	308ea <ticker_job+0x6e2>
   308d6:	bf00      	nop
   308d8:	ff172b5a 	.word	0xff172b5a
   308dc:	7f172b59 	.word	0x7f172b59
   308e0:	4628      	mov	r0, r5
				while (count--) {
   308e2:	3a01      	subs	r2, #1
					ticks_to_expire +=
   308e4:	4401      	add	r1, r0
				while (count--) {
   308e6:	1c50      	adds	r0, r2, #1
   308e8:	d00f      	beq.n	3090a <ticker_job+0x702>
	ticker->remainder_current += ticker->remainder_periodic;
   308ea:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   308ec:	eb03 0008 	add.w	r0, r3, r8
   308f0:	4548      	cmp	r0, r9
   308f2:	d8f5      	bhi.n	308e0 <ticker_job+0x6d8>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   308f4:	9805      	ldr	r0, [sp, #20]
   308f6:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   308fa:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   308fc:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   30900:	4401      	add	r1, r0
				while (count--) {
   30902:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30904:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   30908:	d1ef      	bne.n	308ea <ticker_job+0x6e2>
				} else if (!ticker->must_expire) {
   3090a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   3090e:	6263      	str	r3, [r4, #36]	; 0x24
   30910:	2a00      	cmp	r2, #0
   30912:	f000 80bd 	beq.w	30a90 <ticker_job+0x888>
				ticker->ticks_to_expire = ticks_to_expire;
   30916:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   30918:	f8a4 e01e 	strh.w	lr, [r4, #30]
   3091c:	e72e      	b.n	3077c <ticker_job+0x574>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   3091e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   30920:	f1be 0f00 	cmp.w	lr, #0
   30924:	f47f aec3 	bne.w	306ae <ticker_job+0x4a6>
   30928:	b118      	cbz	r0, 30932 <ticker_job+0x72a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   3092a:	7a05      	ldrb	r5, [r0, #8]
   3092c:	2d01      	cmp	r5, #1
   3092e:	f000 8109 	beq.w	30b44 <ticker_job+0x93c>
			instance->ticks_slot_previous = ticker->ticks_slot;
   30932:	f8cb 2018 	str.w	r2, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   30936:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   3093a:	e6b8      	b.n	306ae <ticker_job+0x4a6>
					ticker->req = ticker->ack;
   3093c:	7063      	strb	r3, [r4, #1]
   3093e:	2200      	movs	r2, #0
   30940:	e7c3      	b.n	308ca <ticker_job+0x6c2>
	count_user = instance->count_user;
   30942:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   30946:	f8db 5004 	ldr.w	r5, [fp, #4]
	while (count_user--) {
   3094a:	1e5f      	subs	r7, r3, #1
   3094c:	b2ff      	uxtb	r7, r7
   3094e:	2b00      	cmp	r3, #0
   30950:	f43f ae13 	beq.w	3057a <ticker_job+0x372>
		flag_compare_update = 1U;
   30954:	2301      	movs	r3, #1
   30956:	9306      	str	r3, [sp, #24]
   30958:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   3095c:	2600      	movs	r6, #0
		while (user->first != user->last) {
   3095e:	787b      	ldrb	r3, [r7, #1]
   30960:	78f9      	ldrb	r1, [r7, #3]
		user_op = &user->user_op[0];
   30962:	687c      	ldr	r4, [r7, #4]
		while (user->first != user->last) {
   30964:	4299      	cmp	r1, r3
   30966:	d10c      	bne.n	30982 <ticker_job+0x77a>
   30968:	e06f      	b.n	30a4a <ticker_job+0x842>
	switch (uop->op) {
   3096a:	2b01      	cmp	r3, #1
   3096c:	d03a      	beq.n	309e4 <ticker_job+0x7dc>
			first = user->first + 1;
   3096e:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   30970:	783a      	ldrb	r2, [r7, #0]
			first = user->first + 1;
   30972:	3301      	adds	r3, #1
   30974:	b2db      	uxtb	r3, r3
				first = 0U;
   30976:	429a      	cmp	r2, r3
   30978:	bf08      	it	eq
   3097a:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   3097c:	4299      	cmp	r1, r3
			user->first = first;
   3097e:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   30980:	d063      	beq.n	30a4a <ticker_job+0x842>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   30982:	b21b      	sxth	r3, r3
   30984:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   30988:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   3098c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
	switch (uop->op) {
   30990:	f814 3023 	ldrb.w	r3, [r4, r3, lsl #2]
   30994:	2b02      	cmp	r3, #2
   30996:	d02a      	beq.n	309ee <ticker_job+0x7e6>
   30998:	2b03      	cmp	r3, #3
   3099a:	d1e6      	bne.n	3096a <ticker_job+0x762>
		if (uop->id < instance->count_node) {
   3099c:	f89c 3001 	ldrb.w	r3, [ip, #1]
   309a0:	f89b 2008 	ldrb.w	r2, [fp, #8]
   309a4:	429a      	cmp	r2, r3
   309a6:	d94e      	bls.n	30a46 <ticker_job+0x83e>
			node[uop->id].priority =
   309a8:	f8db 2000 	ldr.w	r2, [fp]
   309ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   309b0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   309b4:	f89c 3004 	ldrb.w	r3, [ip, #4]
   309b8:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   309bc:	2200      	movs	r2, #0
		fp_op_func = uop->fp_op_func;
   309be:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
			uop->status = TICKER_STATUS_SUCCESS;
   309c2:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	if (fp_op_func) {
   309c6:	b123      	cbz	r3, 309d2 <ticker_job+0x7ca>
		fp_op_func(uop->status, uop->op_context);
   309c8:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
   309cc:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
   309d0:	4798      	blx	r3
   309d2:	78f9      	ldrb	r1, [r7, #3]
   309d4:	e7cb      	b.n	3096e <ticker_job+0x766>
		_ticks_to_expire += ticker->ticks_to_expire;
   309d6:	f8da 3008 	ldr.w	r3, [sl, #8]
	*ticker_id_head = _ticker_id_head;
   309da:	f888 2000 	strb.w	r2, [r8]
		_ticks_to_expire += ticker->ticks_to_expire;
   309de:	4419      	add	r1, r3
	*ticks_to_expire = _ticks_to_expire;
   309e0:	f8c9 1000 	str.w	r1, [r9]
		fp_op_func = uop->fp_op_func;
   309e4:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   309e8:	f8cc 6028 	str.w	r6, [ip, #40]	; 0x28
		break;
   309ec:	e7eb      	b.n	309c6 <ticker_job+0x7be>
		ticker_by_next_slot_get(instance,
   309ee:	e9dc 8001 	ldrd	r8, r0, [ip, #4]
	_ticker_id_head = *ticker_id_head;
   309f2:	f898 2000 	ldrb.w	r2, [r8]
		ticker_by_next_slot_get(instance,
   309f6:	f8dc 900c 	ldr.w	r9, [ip, #12]
	node = instance->nodes;
   309fa:	f8db e000 	ldr.w	lr, [fp]
	_ticks_to_expire = *ticks_to_expire;
   309fe:	f8d9 1000 	ldr.w	r1, [r9]
	    (*ticks_current != instance->ticks_current)) {
   30a02:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   30a06:	2aff      	cmp	r2, #255	; 0xff
   30a08:	d003      	beq.n	30a12 <ticker_job+0x80a>
   30a0a:	f8d0 a000 	ldr.w	sl, [r0]
   30a0e:	459a      	cmp	sl, r3
   30a10:	d021      	beq.n	30a56 <ticker_job+0x84e>
		_ticker_id_head = instance->ticker_id_head;
   30a12:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   30a16:	6003      	str	r3, [r0, #0]
		_ticks_to_expire = 0U;
   30a18:	2100      	movs	r1, #0
   30a1a:	e00d      	b.n	30a38 <ticker_job+0x830>
		ticker = &node[_ticker_id_head];
   30a1c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   30a20:	eb0e 1a03 	add.w	sl, lr, r3, lsl #4
   30a24:	011b      	lsls	r3, r3, #4
			if (ticker->ticks_slot) {
   30a26:	f8da 0018 	ldr.w	r0, [sl, #24]
   30a2a:	2800      	cmp	r0, #0
   30a2c:	d1d3      	bne.n	309d6 <ticker_job+0x7ce>
		_ticks_to_expire += ticker->ticks_to_expire;
   30a2e:	f8da 0008 	ldr.w	r0, [sl, #8]
		_ticker_id_head = ticker->next;
   30a32:	f81e 2003 	ldrb.w	r2, [lr, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
   30a36:	4401      	add	r1, r0
	while (_ticker_id_head != TICKER_NULL) {
   30a38:	2aff      	cmp	r2, #255	; 0xff
   30a3a:	d1ef      	bne.n	30a1c <ticker_job+0x814>
	*ticker_id_head = _ticker_id_head;
   30a3c:	f888 2000 	strb.w	r2, [r8]
	*ticks_to_expire = _ticks_to_expire;
   30a40:	f8c9 1000 	str.w	r1, [r9]
   30a44:	e7ce      	b.n	309e4 <ticker_job+0x7dc>
   30a46:	2201      	movs	r2, #1
   30a48:	e7b9      	b.n	309be <ticker_job+0x7b6>
	while (count_user--) {
   30a4a:	42bd      	cmp	r5, r7
   30a4c:	f1a7 0308 	sub.w	r3, r7, #8
   30a50:	d00a      	beq.n	30a68 <ticker_job+0x860>
   30a52:	461f      	mov	r7, r3
   30a54:	e783      	b.n	3095e <ticker_job+0x756>
		ticker = &node[_ticker_id_head];
   30a56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   30a5a:	0113      	lsls	r3, r2, #4
		_ticker_id_head = ticker->next;
   30a5c:	f81e 2003 	ldrb.w	r2, [lr, r3]
	while (_ticker_id_head != TICKER_NULL) {
   30a60:	e7ea      	b.n	30a38 <ticker_job+0x830>
	if (!pending) {
   30a62:	9b08      	ldr	r3, [sp, #32]
   30a64:	2b00      	cmp	r3, #0
   30a66:	d058      	beq.n	30b1a <ticker_job+0x912>
	if (flag_compare_update) {
   30a68:	9b06      	ldr	r3, [sp, #24]
   30a6a:	2b00      	cmp	r3, #0
   30a6c:	f47f ad85 	bne.w	3057a <ticker_job+0x372>
	if (instance->worker_trigger) {
   30a70:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
   30a74:	2200      	movs	r2, #0
   30a76:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
   30a7a:	b12b      	cbz	r3, 30a88 <ticker_job+0x880>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   30a7c:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   30a80:	465b      	mov	r3, fp
   30a82:	2201      	movs	r2, #1
   30a84:	2103      	movs	r1, #3
   30a86:	e45a      	b.n	3033e <ticker_job+0x136>
}
   30a88:	b00d      	add	sp, #52	; 0x34
   30a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30a8e:	4770      	bx	lr
					while (ticks_to_expire <
   30a90:	458a      	cmp	sl, r1
   30a92:	f67f af40 	bls.w	30916 <ticker_job+0x70e>
   30a96:	1c68      	adds	r0, r5, #1
   30a98:	9405      	str	r4, [sp, #20]
   30a9a:	4604      	mov	r4, r0
   30a9c:	e005      	b.n	30aaa <ticker_job+0x8a2>
   30a9e:	4628      	mov	r0, r5
						ticks_to_expire +=
   30aa0:	4401      	add	r1, r0
						lazy++;
   30aa2:	3201      	adds	r2, #1
					while (ticks_to_expire <
   30aa4:	458a      	cmp	sl, r1
						lazy++;
   30aa6:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   30aa8:	d910      	bls.n	30acc <ticker_job+0x8c4>
	ticker->remainder_current += ticker->remainder_periodic;
   30aaa:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   30aac:	eb03 0008 	add.w	r0, r3, r8
   30ab0:	4548      	cmp	r0, r9
   30ab2:	d8f4      	bhi.n	30a9e <ticker_job+0x896>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30ab4:	4620      	mov	r0, r4
   30ab6:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   30aba:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30abc:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   30ac0:	3201      	adds	r2, #1
					while (ticks_to_expire <
   30ac2:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   30ac4:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   30ac8:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   30aca:	d8ee      	bhi.n	30aaa <ticker_job+0x8a2>
				ticker->lazy_current += (lazy_periodic + lazy);
   30acc:	9c05      	ldr	r4, [sp, #20]
   30ace:	4472      	add	r2, lr
   30ad0:	6263      	str	r3, [r4, #36]	; 0x24
   30ad2:	fa1f fe82 	uxth.w	lr, r2
   30ad6:	e71e      	b.n	30916 <ticker_job+0x70e>
	ticker_id_old_head = instance->ticker_id_head;
   30ad8:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   30adc:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   30ae0:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
   30ae2:	f8db 3000 	ldr.w	r3, [fp]
   30ae6:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   30ae8:	f8db 3004 	ldr.w	r3, [fp, #4]
   30aec:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   30aee:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   30af0:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   30af2:	b2db      	uxtb	r3, r3
   30af4:	2900      	cmp	r1, #0
   30af6:	d03f      	beq.n	30b78 <ticker_job+0x970>
		flag_elapsed = 0U;
   30af8:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
   30afa:	9202      	str	r2, [sp, #8]
   30afc:	f7ff bbbf 	b.w	3027e <ticker_job+0x76>
				node->ticks_to_expire -=
   30b00:	1ac0      	subs	r0, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
   30b02:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   30b06:	f8cc 0008 	str.w	r0, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   30b0a:	f43f aed0 	beq.w	308ae <ticker_job+0x6a6>
   30b0e:	fa0f f18e 	sxth.w	r1, lr
   30b12:	e6c0      	b.n	30896 <ticker_job+0x68e>
			ticker->ticks_to_expire -= ticks_elapsed;
   30b14:	1bdb      	subs	r3, r3, r7
   30b16:	60a3      	str	r3, [r4, #8]
			break;
   30b18:	e5ea      	b.n	306f0 <ticker_job+0x4e8>
	count_user = instance->count_user;
   30b1a:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   30b1e:	f8db 5004 	ldr.w	r5, [fp, #4]
	while (count_user--) {
   30b22:	1e5f      	subs	r7, r3, #1
   30b24:	b2ff      	uxtb	r7, r7
   30b26:	2b00      	cmp	r3, #0
   30b28:	f47f af16 	bne.w	30958 <ticker_job+0x750>
   30b2c:	e79c      	b.n	30a68 <ticker_job+0x860>
		if (cntr_stop() == 0) {
   30b2e:	f00b fb53 	bl	3c1d8 <cntr_stop>
   30b32:	2800      	cmp	r0, #0
   30b34:	d19c      	bne.n	30a70 <ticker_job+0x868>
			instance->ticks_slot_previous = 0U;
   30b36:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   30b3a:	f00b fb73 	bl	3c224 <cntr_cnt_get>
   30b3e:	f8cb 0014 	str.w	r0, [fp, #20]
   30b42:	e795      	b.n	30a70 <ticker_job+0x868>
		instance->ticker_id_head = ticker->next;
   30b44:	9a00      	ldr	r2, [sp, #0]
   30b46:	9d04      	ldr	r5, [sp, #16]
		ticker->ticks_to_expire = 0U;
   30b48:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   30b4c:	5d52      	ldrb	r2, [r2, r5]
   30b4e:	f88b 201d 	strb.w	r2, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   30b52:	6862      	ldr	r2, [r4, #4]
   30b54:	2a00      	cmp	r2, #0
   30b56:	f43f adb5 	beq.w	306c4 <ticker_job+0x4bc>
   30b5a:	e60d      	b.n	30778 <ticker_job+0x570>
		ticks_current = cntr_cnt_get();
   30b5c:	f00b fb62 	bl	3c224 <cntr_cnt_get>
   30b60:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   30b62:	f00b fb29 	bl	3c1b8 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   30b66:	f89b 301d 	ldrb.w	r3, [fp, #29]
   30b6a:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   30b6c:	2800      	cmp	r0, #0
   30b6e:	f47f ad0f 	bne.w	30590 <ticker_job+0x388>
			instance->ticks_current = ticks_current;
   30b72:	f8cb 4014 	str.w	r4, [fp, #20]
   30b76:	e50b      	b.n	30590 <ticker_job+0x388>
	insert_head = TICKER_NULL;
   30b78:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   30b7a:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
   30b7c:	9301      	str	r3, [sp, #4]
   30b7e:	e4ec      	b.n	3055a <ticker_job+0x352>

00030b80 <ticker_init>:
{
   30b80:	b4f0      	push	{r4, r5, r6, r7}
   30b82:	9d04      	ldr	r5, [sp, #16]
   30b84:	f89d 7014 	ldrb.w	r7, [sp, #20]
   30b88:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   30b8a:	2800      	cmp	r0, #0
   30b8c:	d137      	bne.n	30bfe <ticker_init+0x7e>
	instance->count_node = count_node;
   30b8e:	4e1d      	ldr	r6, [pc, #116]	; (30c04 <ticker_init+0x84>)
	while (count_node--) {
   30b90:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   30b94:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   30b96:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   30b98:	fa5f fc8c 	uxtb.w	ip, ip
   30b9c:	b149      	cbz	r1, 30bb2 <ticker_init+0x32>
   30b9e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   30ba2:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   30ba6:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   30ba8:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   30bac:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   30bb0:	d1f9      	bne.n	30ba6 <ticker_init+0x26>
	while (count_user--) {
   30bb2:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   30bb4:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   30bb6:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   30bb8:	b2d2      	uxtb	r2, r2
   30bba:	b183      	cbz	r3, 30bde <ticker_init+0x5e>
   30bbc:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   30bc0:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   30bc2:	4610      	mov	r0, r2
   30bc4:	f812 3908 	ldrb.w	r3, [r2], #-8
   30bc8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   30bcc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   30bd0:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   30bd2:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   30bd6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   30bda:	b2df      	uxtb	r7, r3
	while (count_user--) {
   30bdc:	d1f0      	bne.n	30bc0 <ticker_init+0x40>
	if (count_op) {
   30bde:	b977      	cbnz	r7, 30bfe <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   30be0:	9a07      	ldr	r2, [sp, #28]
   30be2:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   30be4:	9a08      	ldr	r2, [sp, #32]
   30be6:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   30be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   30bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   30bee:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   30bf0:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   30bf2:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   30bf6:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   30bf8:	8177      	strh	r7, [r6, #10]
}
   30bfa:	bcf0      	pop	{r4, r5, r6, r7}
   30bfc:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   30bfe:	2001      	movs	r0, #1
}
   30c00:	bcf0      	pop	{r4, r5, r6, r7}
   30c02:	4770      	bx	lr
   30c04:	20001e98 	.word	0x20001e98

00030c08 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   30c08:	4b04      	ldr	r3, [pc, #16]	; (30c1c <ticker_is_initialized+0x14>)
   30c0a:	222c      	movs	r2, #44	; 0x2c
   30c0c:	fb02 3300 	mla	r3, r2, r0, r3
   30c10:	7a18      	ldrb	r0, [r3, #8]
}
   30c12:	3800      	subs	r0, #0
   30c14:	bf18      	it	ne
   30c16:	2001      	movne	r0, #1
   30c18:	4770      	bx	lr
   30c1a:	bf00      	nop
   30c1c:	20001e98 	.word	0x20001e98

00030c20 <ticker_trigger>:
	if (instance->sched_cb) {
   30c20:	4b0a      	ldr	r3, [pc, #40]	; (30c4c <ticker_trigger+0x2c>)
   30c22:	222c      	movs	r2, #44	; 0x2c
   30c24:	fb02 3200 	mla	r2, r2, r0, r3
{
   30c28:	b410      	push	{r4}
	if (instance->sched_cb) {
   30c2a:	6a54      	ldr	r4, [r2, #36]	; 0x24
   30c2c:	b15c      	cbz	r4, 30c46 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   30c2e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   30c32:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   30c36:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   30c3a:	46a4      	mov	ip, r4
   30c3c:	2201      	movs	r2, #1
}
   30c3e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   30c40:	2103      	movs	r1, #3
   30c42:	2002      	movs	r0, #2
   30c44:	4760      	bx	ip
}
   30c46:	bc10      	pop	{r4}
   30c48:	4770      	bx	lr
   30c4a:	bf00      	nop
   30c4c:	20001e98 	.word	0x20001e98

00030c50 <ticker_start_ext>:
{
   30c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   30c54:	4e28      	ldr	r6, [pc, #160]	; (30cf8 <ticker_start_ext+0xa8>)
{
   30c56:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   30c5a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   30c5c:	252c      	movs	r5, #44	; 0x2c
   30c5e:	fb05 6504 	mla	r5, r5, r4, r6
{
   30c62:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   30c64:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   30c68:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   30c6c:	6869      	ldr	r1, [r5, #4]
   30c6e:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   30c72:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   30c76:	78fc      	ldrb	r4, [r7, #3]
	if (last >= user->count_user_op) {
   30c78:	f811 e030 	ldrb.w	lr, [r1, r0, lsl #3]
	if (last == user->first) {
   30c7c:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   30c7e:	f104 0c01 	add.w	ip, r4, #1
   30c82:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   30c86:	45e6      	cmp	lr, ip
   30c88:	bf98      	it	ls
   30c8a:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   30c8e:	4561      	cmp	r1, ip
   30c90:	d02e      	beq.n	30cf0 <ticker_start_ext+0xa0>
	user_op = &user->user_op[user->last];
   30c92:	6879      	ldr	r1, [r7, #4]
   30c94:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
   30c98:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
   30c9c:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   30ca0:	f04f 0904 	mov.w	r9, #4
   30ca4:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   30ca8:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   30caa:	9b08      	ldr	r3, [sp, #32]
   30cac:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   30cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   30cb0:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   30cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30cb4:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   30cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   30cb8:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   30cba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   30cbc:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   30cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   30cc0:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   30cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   30cc4:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   30cc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   30cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   30cca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   30ccc:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   30cce:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   30cd0:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   30cd2:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   30cd4:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   30cd8:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   30cdc:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   30ce0:	4798      	blx	r3
   30ce2:	4633      	mov	r3, r6
   30ce4:	4649      	mov	r1, r9
   30ce6:	2200      	movs	r2, #0
   30ce8:	47a8      	blx	r5
	return user_op->status;
   30cea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   30cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   30cf0:	2001      	movs	r0, #1
}
   30cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   30cf6:	bf00      	nop
   30cf8:	20001e98 	.word	0x20001e98

00030cfc <ticker_start>:
{
   30cfc:	b510      	push	{r4, lr}
   30cfe:	b08a      	sub	sp, #40	; 0x28
   30d00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30d02:	9400      	str	r4, [sp, #0]
{
   30d04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30d06:	9401      	str	r4, [sp, #4]
{
   30d08:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30d0a:	9402      	str	r4, [sp, #8]
{
   30d0c:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30d10:	9403      	str	r4, [sp, #12]
{
   30d12:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30d14:	9404      	str	r4, [sp, #16]
{
   30d16:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30d18:	9405      	str	r4, [sp, #20]
{
   30d1a:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30d1c:	9406      	str	r4, [sp, #24]
{
   30d1e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30d20:	9407      	str	r4, [sp, #28]
{
   30d22:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   30d24:	9408      	str	r4, [sp, #32]
   30d26:	2400      	movs	r4, #0
   30d28:	9409      	str	r4, [sp, #36]	; 0x24
   30d2a:	f7ff ff91 	bl	30c50 <ticker_start_ext>
}
   30d2e:	b00a      	add	sp, #40	; 0x28
   30d30:	bd10      	pop	{r4, pc}
   30d32:	bf00      	nop

00030d34 <ticker_update_ext>:
{
   30d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   30d38:	4d29      	ldr	r5, [pc, #164]	; (30de0 <ticker_update_ext+0xac>)
{
   30d3a:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   30d3e:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   30d42:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   30d44:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
   30d48:	fb0e 5e04 	mla	lr, lr, r4, r5
{
   30d4c:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   30d4e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   30d52:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   30d56:	f8de 1004 	ldr.w	r1, [lr, #4]
   30d5a:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   30d5e:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	last = user->last + 1;
   30d62:	78f4      	ldrb	r4, [r6, #3]
	if (last >= user->count_user_op) {
   30d64:	f811 9030 	ldrb.w	r9, [r1, r0, lsl #3]
	if (last == user->first) {
   30d68:	7871      	ldrb	r1, [r6, #1]
	last = user->last + 1;
   30d6a:	f104 0c01 	add.w	ip, r4, #1
   30d6e:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   30d72:	45e1      	cmp	r9, ip
   30d74:	bf98      	it	ls
   30d76:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   30d7a:	4561      	cmp	r1, ip
{
   30d7c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   30d80:	d02a      	beq.n	30dd8 <ticker_update_ext+0xa4>
	user_op = &user->user_op[user->last];
   30d82:	f8d6 a004 	ldr.w	sl, [r6, #4]
   30d86:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   30d8a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   30d8e:	eb0a 0481 	add.w	r4, sl, r1, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   30d92:	f04f 0b05 	mov.w	fp, #5
   30d96:	f80a b021 	strb.w	fp, [sl, r1, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   30d9a:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   30d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30d9e:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   30da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   30da2:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   30da4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   30da6:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   30da8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   30daa:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   30dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   30dae:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   30db0:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   30db2:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   30db4:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   30db6:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   30db8:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   30dbc:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   30dc0:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   30dc4:	e9de 3608 	ldrd	r3, r6, [lr, #32]
   30dc8:	4798      	blx	r3
   30dca:	462b      	mov	r3, r5
   30dcc:	2200      	movs	r2, #0
   30dce:	2104      	movs	r1, #4
   30dd0:	47b0      	blx	r6
	return user_op->status;
   30dd2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   30dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   30dd8:	2001      	movs	r0, #1
}
   30dda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30dde:	bf00      	nop
   30de0:	20001e98 	.word	0x20001e98

00030de4 <ticker_update>:
{
   30de4:	b510      	push	{r4, lr}
   30de6:	b088      	sub	sp, #32
   30de8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30dea:	9400      	str	r4, [sp, #0]
{
   30dec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30dee:	9401      	str	r4, [sp, #4]
{
   30df0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30df2:	9402      	str	r4, [sp, #8]
{
   30df4:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30df8:	9403      	str	r4, [sp, #12]
{
   30dfa:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30dfe:	9404      	str	r4, [sp, #16]
{
   30e00:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30e02:	9405      	str	r4, [sp, #20]
{
   30e04:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   30e06:	9406      	str	r4, [sp, #24]
   30e08:	2400      	movs	r4, #0
   30e0a:	9407      	str	r4, [sp, #28]
   30e0c:	f7ff ff92 	bl	30d34 <ticker_update_ext>
}
   30e10:	b008      	add	sp, #32
   30e12:	bd10      	pop	{r4, pc}

00030e14 <ticker_stop>:
{
   30e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   30e18:	4c1e      	ldr	r4, [pc, #120]	; (30e94 <ticker_stop+0x80>)
{
   30e1a:	4684      	mov	ip, r0
   30e1c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   30e1e:	212c      	movs	r1, #44	; 0x2c
   30e20:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   30e24:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   30e28:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   30e2c:	684d      	ldr	r5, [r1, #4]
   30e2e:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   30e32:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   30e36:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   30e3a:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   30e3c:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   30e40:	f10e 0c01 	add.w	ip, lr, #1
   30e44:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   30e48:	4567      	cmp	r7, ip
   30e4a:	bf98      	it	ls
   30e4c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   30e50:	4565      	cmp	r5, ip
   30e52:	d01c      	beq.n	30e8e <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   30e54:	6877      	ldr	r7, [r6, #4]
   30e56:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   30e5a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   30e5e:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   30e62:	f04f 0807 	mov.w	r8, #7
   30e66:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   30e6a:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   30e6c:	9b06      	ldr	r3, [sp, #24]
   30e6e:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   30e70:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   30e72:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   30e74:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   30e76:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   30e7a:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   30e7e:	4798      	blx	r3
   30e80:	4623      	mov	r3, r4
   30e82:	2200      	movs	r2, #0
   30e84:	2104      	movs	r1, #4
   30e86:	47b0      	blx	r6
	return user_op->status;
   30e88:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   30e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   30e8e:	2001      	movs	r0, #1
}
   30e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30e94:	20001e98 	.word	0x20001e98

00030e98 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   30e98:	f00b b9c4 	b.w	3c224 <cntr_cnt_get>

00030e9c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   30e9c:	1a40      	subs	r0, r0, r1
}
   30e9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   30ea2:	4770      	bx	lr

00030ea4 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   30ea4:	b570      	push	{r4, r5, r6, lr}
   30ea6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   30ea8:	2000      	movs	r0, #0
{
   30eaa:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
   30eac:	f003 f982 	bl	341b4 <ull_adv_is_enabled>
   30eb0:	b978      	cbnz	r0, 30ed2 <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   30eb2:	b13c      	cbz	r4, 30ec4 <ll_addr_set+0x20>
   30eb4:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   30eb6:	2206      	movs	r2, #6
   30eb8:	4631      	mov	r1, r6
   30eba:	4807      	ldr	r0, [pc, #28]	; (30ed8 <ll_addr_set+0x34>)
   30ebc:	f013 ffa1 	bl	44e02 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   30ec0:	4628      	mov	r0, r5
}
   30ec2:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   30ec4:	2206      	movs	r2, #6
   30ec6:	4631      	mov	r1, r6
   30ec8:	4804      	ldr	r0, [pc, #16]	; (30edc <ll_addr_set+0x38>)
   30eca:	f013 ff9a 	bl	44e02 <memcpy>
	return 0;
   30ece:	4620      	mov	r0, r4
}
   30ed0:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   30ed2:	200c      	movs	r0, #12
}
   30ed4:	bd70      	pop	{r4, r5, r6, pc}
   30ed6:	bf00      	nop
   30ed8:	20001ecc 	.word	0x20001ecc
   30edc:	20001ec4 	.word	0x20001ec4

00030ee0 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   30ee0:	2801      	cmp	r0, #1
{
   30ee2:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   30ee4:	d805      	bhi.n	30ef2 <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   30ee6:	4a04      	ldr	r2, [pc, #16]	; (30ef8 <ll_addr_get+0x18>)
   30ee8:	4804      	ldr	r0, [pc, #16]	; (30efc <ll_addr_get+0x1c>)
   30eea:	2b00      	cmp	r3, #0
   30eec:	bf18      	it	ne
   30eee:	4610      	movne	r0, r2
   30ef0:	4770      	bx	lr
		return NULL;
   30ef2:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   30ef4:	4770      	bx	lr
   30ef6:	bf00      	nop
   30ef8:	20001ecc 	.word	0x20001ecc
   30efc:	20001ec4 	.word	0x20001ec4

00030f00 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   30f00:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   30f02:	b510      	push	{r4, lr}
   30f04:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   30f06:	d80b      	bhi.n	30f20 <ll_addr_read+0x20>
	if (addr_type) {
   30f08:	4608      	mov	r0, r1
		return rnd_addr;
   30f0a:	4c07      	ldr	r4, [pc, #28]	; (30f28 <ll_addr_read+0x28>)
   30f0c:	4907      	ldr	r1, [pc, #28]	; (30f2c <ll_addr_read+0x2c>)
   30f0e:	2b00      	cmp	r3, #0
   30f10:	bf18      	it	ne
   30f12:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   30f14:	2206      	movs	r2, #6
   30f16:	4621      	mov	r1, r4
   30f18:	f013 ff73 	bl	44e02 <memcpy>
	}

	return addr;
}
   30f1c:	4620      	mov	r0, r4
   30f1e:	bd10      	pop	{r4, pc}
		return NULL;
   30f20:	2400      	movs	r4, #0
}
   30f22:	4620      	mov	r0, r4
   30f24:	bd10      	pop	{r4, pc}
   30f26:	bf00      	nop
   30f28:	20001ec4 	.word	0x20001ec4
   30f2c:	20001ecc 	.word	0x20001ecc

00030f30 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   30f30:	2802      	cmp	r0, #2
   30f32:	d001      	beq.n	30f38 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   30f34:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   30f36:	4770      	bx	lr
{
   30f38:	b538      	push	{r3, r4, r5, lr}
   30f3a:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   30f3c:	4608      	mov	r0, r1
   30f3e:	461d      	mov	r5, r3
   30f40:	f004 f876 	bl	35030 <ll_connected_get>
			if (!conn) {
   30f44:	b110      	cbz	r0, 30f4c <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   30f46:	2000      	movs	r0, #0
   30f48:	7028      	strb	r0, [r5, #0]
}
   30f4a:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   30f4c:	4620      	mov	r0, r4
}
   30f4e:	bd38      	pop	{r3, r4, r5, pc}

00030f50 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   30f50:	2300      	movs	r3, #0
   30f52:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   30f54:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   30f56:	4770      	bx	lr

00030f58 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   30f58:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   30f5a:	4802      	ldr	r0, [pc, #8]	; (30f64 <hci_driver_init+0xc>)
   30f5c:	f7fa fb14 	bl	2b588 <bt_hci_driver_register>

	return 0;
}
   30f60:	2000      	movs	r0, #0
   30f62:	bd08      	pop	{r3, pc}
   30f64:	0004a0a8 	.word	0x0004a0a8

00030f68 <hci_driver_send>:
{
   30f68:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   30f6a:	8983      	ldrh	r3, [r0, #12]
{
   30f6c:	b083      	sub	sp, #12
	if (!buf->len) {
   30f6e:	b123      	cbz	r3, 30f7a <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   30f70:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   30f72:	4604      	mov	r4, r0
   30f74:	b1c3      	cbz	r3, 30fa8 <hci_driver_send+0x40>
   30f76:	2b02      	cmp	r3, #2
   30f78:	d004      	beq.n	30f84 <hci_driver_send+0x1c>
   30f7a:	f06f 0515 	mvn.w	r5, #21
}
   30f7e:	4628      	mov	r0, r5
   30f80:	b003      	add	sp, #12
   30f82:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   30f84:	a901      	add	r1, sp, #4
   30f86:	f000 fecf 	bl	31d28 <hci_acl_handle>
	if (evt) {
   30f8a:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   30f8c:	4605      	mov	r5, r0
	if (evt) {
   30f8e:	b113      	cbz	r3, 30f96 <hci_driver_send+0x2e>
		bt_recv_prio(evt);
   30f90:	4618      	mov	r0, r3
   30f92:	f7fa fadb 	bl	2b54c <bt_recv_prio>
	if (!err) {
   30f96:	2d00      	cmp	r5, #0
   30f98:	d1f1      	bne.n	30f7e <hci_driver_send+0x16>
		net_buf_unref(buf);
   30f9a:	4620      	mov	r0, r4
   30f9c:	f00c f8ce 	bl	3d13c <net_buf_unref>
   30fa0:	2500      	movs	r5, #0
}
   30fa2:	4628      	mov	r0, r5
   30fa4:	b003      	add	sp, #12
   30fa6:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   30fa8:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   30faa:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   30fac:	f000 fa40 	bl	31430 <hci_cmd_handle>
	if (evt) {
   30fb0:	2800      	cmp	r0, #0
   30fb2:	d0f2      	beq.n	30f9a <hci_driver_send+0x32>
		bt_recv_prio(evt);
   30fb4:	f7fa faca 	bl	2b54c <bt_recv_prio>
		if (node_rx) {
   30fb8:	9d01      	ldr	r5, [sp, #4]
   30fba:	2d00      	cmp	r5, #0
   30fbc:	d0ed      	beq.n	30f9a <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   30fbe:	4628      	mov	r0, r5
   30fc0:	f001 fa70 	bl	324a4 <hci_get_class>
   30fc4:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   30fc6:	9901      	ldr	r1, [sp, #4]
   30fc8:	4801      	ldr	r0, [pc, #4]	; (30fd0 <hci_driver_send+0x68>)
   30fca:	f017 fd38 	bl	48a3e <k_queue_append>
	if (!err) {
   30fce:	e7e4      	b.n	30f9a <hci_driver_send+0x32>
   30fd0:	20000c0c 	.word	0x20000c0c

00030fd4 <recv_thread>:
{
   30fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   30fd6:	4e41      	ldr	r6, [pc, #260]	; (310dc <recv_thread+0x108>)
		LL_ASSERT(0);
   30fd8:	4f41      	ldr	r7, [pc, #260]	; (310e0 <recv_thread+0x10c>)
{
   30fda:	b083      	sub	sp, #12
   30fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   30fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30fe4:	4630      	mov	r0, r6
   30fe6:	f010 facf 	bl	41588 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   30fea:	2800      	cmp	r0, #0
   30fec:	d0f6      	beq.n	30fdc <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   30fee:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   30ff0:	9001      	str	r0, [sp, #4]
	switch (class) {
   30ff2:	2b04      	cmp	r3, #4
   30ff4:	d821      	bhi.n	3103a <recv_thread+0x66>
   30ff6:	2b00      	cmp	r3, #0
   30ff8:	d14b      	bne.n	31092 <recv_thread+0xbe>
		LL_ASSERT(0);
   30ffa:	493a      	ldr	r1, [pc, #232]	; (310e4 <recv_thread+0x110>)
   30ffc:	483a      	ldr	r0, [pc, #232]	; (310e8 <recv_thread+0x114>)
   30ffe:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   31002:	463a      	mov	r2, r7
   31004:	f011 fe22 	bl	42c4c <printk>
   31008:	4040      	eors	r0, r0
   3100a:	f380 8811 	msr	BASEPRI, r0
   3100e:	f04f 0003 	mov.w	r0, #3
   31012:	df02      	svc	2
	node_rx->hdr.next = NULL;
   31014:	9b01      	ldr	r3, [sp, #4]
   31016:	2200      	movs	r2, #0
   31018:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   3101a:	a801      	add	r0, sp, #4
   3101c:	f001 fed2 	bl	32dc4 <ll_rx_mem_release>
   31020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31028:	4630      	mov	r0, r6
   3102a:	f010 faad 	bl	41588 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   3102e:	2800      	cmp	r0, #0
   31030:	d0d4      	beq.n	30fdc <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   31032:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   31034:	9001      	str	r0, [sp, #4]
	switch (class) {
   31036:	2b04      	cmp	r3, #4
   31038:	d9dd      	bls.n	30ff6 <recv_thread+0x22>
   3103a:	2b05      	cmp	r3, #5
   3103c:	d1dd      	bne.n	30ffa <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   3103e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31046:	2003      	movs	r0, #3
   31048:	f7f9 fdb4 	bl	2abb4 <bt_buf_get_rx>
   3104c:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   3104e:	4621      	mov	r1, r4
   31050:	9801      	ldr	r0, [sp, #4]
   31052:	f000 fef5 	bl	31e40 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   31056:	9b01      	ldr	r3, [sp, #4]
   31058:	2200      	movs	r2, #0
   3105a:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   3105c:	a801      	add	r0, sp, #4
   3105e:	f001 feb1 	bl	32dc4 <ll_rx_mem_release>
		while (buf) {
   31062:	2c00      	cmp	r4, #0
   31064:	d0ba      	beq.n	30fdc <recv_thread+0x8>
			frag = net_buf_ref(buf);
   31066:	4620      	mov	r0, r4
   31068:	f016 fde3 	bl	47c32 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   3106c:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   3106e:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   31070:	2000      	movs	r0, #0
   31072:	f016 fe04 	bl	47c7e <net_buf_frag_del>
			if (frag->len) {
   31076:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   31078:	4604      	mov	r4, r0
				bt_recv(frag);
   3107a:	4628      	mov	r0, r5
			if (frag->len) {
   3107c:	b133      	cbz	r3, 3108c <recv_thread+0xb8>
				bt_recv(frag);
   3107e:	f7fa f9e1 	bl	2b444 <bt_recv>
	z_impl_k_yield();
   31082:	f010 ff15 	bl	41eb0 <z_impl_k_yield>
		while (buf) {
   31086:	2c00      	cmp	r4, #0
   31088:	d1ed      	bne.n	31066 <recv_thread+0x92>
   3108a:	e7a7      	b.n	30fdc <recv_thread+0x8>
				net_buf_unref(frag);
   3108c:	f00c f856 	bl	3d13c <net_buf_unref>
   31090:	e7f7      	b.n	31082 <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   31092:	2b02      	cmp	r3, #2
   31094:	d013      	beq.n	310be <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   31096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3109a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3109e:	2001      	movs	r0, #1
   310a0:	f7f9 fd88 	bl	2abb4 <bt_buf_get_rx>
   310a4:	4604      	mov	r4, r0
		if (buf) {
   310a6:	b19c      	cbz	r4, 310d0 <recv_thread+0xfc>
			hci_evt_encode(node_rx, buf);
   310a8:	9801      	ldr	r0, [sp, #4]
   310aa:	4621      	mov	r1, r4
   310ac:	f000 ff02 	bl	31eb4 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   310b0:	9b01      	ldr	r3, [sp, #4]
   310b2:	2200      	movs	r2, #0
   310b4:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   310b6:	a801      	add	r0, sp, #4
   310b8:	f001 fe84 	bl	32dc4 <ll_rx_mem_release>
		while (buf) {
   310bc:	e7d3      	b.n	31066 <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   310be:	2200      	movs	r2, #0
   310c0:	2300      	movs	r3, #0
   310c2:	2101      	movs	r1, #1
   310c4:	2000      	movs	r0, #0
   310c6:	f7f9 fd9f 	bl	2ac08 <bt_buf_get_evt>
   310ca:	4604      	mov	r4, r0
		if (buf) {
   310cc:	2c00      	cmp	r4, #0
   310ce:	d1eb      	bne.n	310a8 <recv_thread+0xd4>
	node_rx->hdr.next = NULL;
   310d0:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   310d2:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   310d4:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   310d6:	f001 fe75 	bl	32dc4 <ll_rx_mem_release>
		while (buf) {
   310da:	e77f      	b.n	30fdc <recv_thread+0x8>
   310dc:	20000c0c 	.word	0x20000c0c
   310e0:	0004a044 	.word	0x0004a044
   310e4:	0004a084 	.word	0x0004a084
   310e8:	0004a024 	.word	0x0004a024

000310ec <prio_recv_thread>:
{
   310ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   310f0:	4f2e      	ldr	r7, [pc, #184]	; (311ac <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   310f2:	4e2f      	ldr	r6, [pc, #188]	; (311b0 <prio_recv_thread+0xc4>)
{
   310f4:	b082      	sub	sp, #8
   310f6:	e00c      	b.n	31112 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   310f8:	f7f9 fd86 	bl	2ac08 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   310fc:	4622      	mov	r2, r4
   310fe:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   31102:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   31104:	f001 f9b6 	bl	32474 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   31108:	4620      	mov	r0, r4
   3110a:	f7fa fa1f 	bl	2b54c <bt_recv_prio>
	z_impl_k_yield();
   3110e:	f010 fecf 	bl	41eb0 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   31112:	f10d 0102 	add.w	r1, sp, #2
   31116:	a801      	add	r0, sp, #4
   31118:	f001 fca2 	bl	32a60 <ll_rx_get>
   3111c:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   3111e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31126:	2100      	movs	r1, #0
   31128:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   3112a:	2c00      	cmp	r4, #0
   3112c:	d1e4      	bne.n	310f8 <prio_recv_thread+0xc>
		if (node_rx) {
   3112e:	9b01      	ldr	r3, [sp, #4]
   31130:	b1b3      	cbz	r3, 31160 <prio_recv_thread+0x74>
			ll_rx_dequeue();
   31132:	f001 fd77 	bl	32c24 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   31136:	f8dd 8004 	ldr.w	r8, [sp, #4]
   3113a:	4640      	mov	r0, r8
   3113c:	f001 f9b2 	bl	324a4 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   31140:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   31142:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   31146:	796b      	ldrb	r3, [r5, #5]
   31148:	2b03      	cmp	r3, #3
   3114a:	d102      	bne.n	31152 <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   3114c:	792b      	ldrb	r3, [r5, #4]
   3114e:	2b17      	cmp	r3, #23
   31150:	d00e      	beq.n	31170 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   31152:	4629      	mov	r1, r5
   31154:	4630      	mov	r0, r6
   31156:	f017 fc72 	bl	48a3e <k_queue_append>
		if (iso_received || node_rx) {
   3115a:	9b01      	ldr	r3, [sp, #4]
   3115c:	2b00      	cmp	r3, #0
   3115e:	d1d8      	bne.n	31112 <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   31160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31168:	4638      	mov	r0, r7
   3116a:	f010 fa67 	bl	4163c <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   3116e:	e7d0      	b.n	31112 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   31170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31174:	4621      	mov	r1, r4
   31176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3117a:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   3117c:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   31180:	f7f9 fd42 	bl	2ac08 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   31184:	4641      	mov	r1, r8
   31186:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   31188:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   3118a:	f105 001c 	add.w	r0, r5, #28
   3118e:	f000 fe2f 	bl	31df0 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   31192:	4640      	mov	r0, r8
   31194:	f000 fe4c 	bl	31e30 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   31198:	4620      	mov	r0, r4
			if (buf) {
   3119a:	b124      	cbz	r4, 311a6 <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   3119c:	f7fa f9d6 	bl	2b54c <bt_recv_prio>
					net_buf_unref(buf);
   311a0:	4620      	mov	r0, r4
   311a2:	f00b ffcb 	bl	3d13c <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   311a6:	9d01      	ldr	r5, [sp, #4]
   311a8:	e7d3      	b.n	31152 <prio_recv_thread+0x66>
   311aa:	bf00      	nop
   311ac:	20000bdc 	.word	0x20000bdc
   311b0:	20000c0c 	.word	0x20000c0c

000311b4 <hci_driver_open>:
{
   311b4:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   311b6:	481a      	ldr	r0, [pc, #104]	; (31220 <hci_driver_open+0x6c>)
{
   311b8:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   311ba:	f002 fa79 	bl	336b0 <ll_init>
	if (err) {
   311be:	4604      	mov	r4, r0
   311c0:	bb58      	cbnz	r0, 3121a <hci_driver_open+0x66>
	hci_init(NULL);
   311c2:	f001 f985 	bl	324d0 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   311c6:	2600      	movs	r6, #0
   311c8:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   311ca:	f06f 0209 	mvn.w	r2, #9
   311ce:	e9cd 2403 	strd	r2, r4, [sp, #12]
   311d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   311d6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   311da:	4b12      	ldr	r3, [pc, #72]	; (31224 <hci_driver_open+0x70>)
   311dc:	4912      	ldr	r1, [pc, #72]	; (31228 <hci_driver_open+0x74>)
   311de:	9400      	str	r4, [sp, #0]
   311e0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   311e4:	4811      	ldr	r0, [pc, #68]	; (3122c <hci_driver_open+0x78>)
   311e6:	f00f ffc1 	bl	4116c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   311ea:	4911      	ldr	r1, [pc, #68]	; (31230 <hci_driver_open+0x7c>)
   311ec:	480f      	ldr	r0, [pc, #60]	; (3122c <hci_driver_open+0x78>)
   311ee:	f017 fb8e 	bl	4890e <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   311f2:	f06f 0207 	mvn.w	r2, #7
   311f6:	e9cd 2403 	strd	r2, r4, [sp, #12]
   311fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
   311fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
   31202:	4b0c      	ldr	r3, [pc, #48]	; (31234 <hci_driver_open+0x80>)
   31204:	490c      	ldr	r1, [pc, #48]	; (31238 <hci_driver_open+0x84>)
   31206:	9400      	str	r4, [sp, #0]
   31208:	f640 0298 	movw	r2, #2200	; 0x898
   3120c:	480b      	ldr	r0, [pc, #44]	; (3123c <hci_driver_open+0x88>)
   3120e:	f00f ffad 	bl	4116c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   31212:	490b      	ldr	r1, [pc, #44]	; (31240 <hci_driver_open+0x8c>)
   31214:	4809      	ldr	r0, [pc, #36]	; (3123c <hci_driver_open+0x88>)
   31216:	f017 fb7a 	bl	4890e <z_impl_k_thread_name_set>
}
   3121a:	4620      	mov	r0, r4
   3121c:	b008      	add	sp, #32
   3121e:	bdd0      	pop	{r4, r6, r7, pc}
   31220:	20000bdc 	.word	0x20000bdc
   31224:	000310ed 	.word	0x000310ed
   31228:	20004758 	.word	0x20004758
   3122c:	20001430 	.word	0x20001430
   31230:	0004a088 	.word	0x0004a088
   31234:	00030fd5 	.word	0x00030fd5
   31238:	20004918 	.word	0x20004918
   3123c:	200014b0 	.word	0x200014b0
   31240:	0004a094 	.word	0x0004a094

00031244 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   31244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   31246:	4c19      	ldr	r4, [pc, #100]	; (312ac <le_remote_feat_complete+0x68>)
   31248:	6864      	ldr	r4, [r4, #4]
   3124a:	00a4      	lsls	r4, r4, #2
   3124c:	d504      	bpl.n	31258 <le_remote_feat_complete+0x14>
   3124e:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   31250:	4a17      	ldr	r2, [pc, #92]	; (312b0 <le_remote_feat_complete+0x6c>)
   31252:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   31254:	0712      	lsls	r2, r2, #28
   31256:	d400      	bmi.n	3125a <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   31258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   3125a:	f103 0408 	add.w	r4, r3, #8
   3125e:	4607      	mov	r7, r0
   31260:	460e      	mov	r6, r1
   31262:	4620      	mov	r0, r4
   31264:	2102      	movs	r1, #2
   31266:	f016 fd16 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   3126a:	233e      	movs	r3, #62	; 0x3e
   3126c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   3126e:	230c      	movs	r3, #12
   31270:	7043      	strb	r3, [r0, #1]
   31272:	2101      	movs	r1, #1
   31274:	4620      	mov	r0, r4
   31276:	f016 fd0e 	bl	47c96 <net_buf_simple_add>
   3127a:	4603      	mov	r3, r0
	me->subevent = subevt;
   3127c:	2204      	movs	r2, #4
   3127e:	701a      	strb	r2, [r3, #0]
   31280:	4620      	mov	r0, r4
   31282:	210b      	movs	r1, #11
   31284:	f016 fd07 	bl	47c96 <net_buf_simple_add>
		memcpy(&sep->features[0],
   31288:	2208      	movs	r2, #8
	sep->status = status;
   3128a:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   3128c:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   31290:	b92f      	cbnz	r7, 3129e <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   31292:	1d31      	adds	r1, r6, #4
   31294:	3003      	adds	r0, #3
}
   31296:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   3129a:	f013 bdb2 	b.w	44e02 <memcpy>
}
   3129e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   312a2:	2100      	movs	r1, #0
   312a4:	3003      	adds	r0, #3
   312a6:	f013 bdb7 	b.w	44e18 <memset>
   312aa:	bf00      	nop
   312ac:	20000158 	.word	0x20000158
   312b0:	20000160 	.word	0x20000160

000312b4 <hci_vendor_cmd_handle_common>:
{
   312b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   312b6:	3801      	subs	r0, #1
{
   312b8:	b087      	sub	sp, #28
   312ba:	4615      	mov	r5, r2
	switch (ocf) {
   312bc:	2809      	cmp	r0, #9
   312be:	d806      	bhi.n	312ce <hci_vendor_cmd_handle_common+0x1a>
   312c0:	e8df f000 	tbb	[pc, r0]
   312c4:	05432609 	.word	0x05432609
   312c8:	6b055705 	.word	0x6b055705
   312cc:	9d88      	.short	0x9d88
   312ce:	f06f 0015 	mvn.w	r0, #21
}
   312d2:	b007      	add	sp, #28
   312d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   312d6:	4b54      	ldr	r3, [pc, #336]	; (31428 <hci_vendor_cmd_handle_common+0x174>)
   312d8:	210d      	movs	r1, #13
   312da:	8818      	ldrh	r0, [r3, #0]
   312dc:	f014 fa4a 	bl	45774 <bt_hci_cmd_complete_create>
   312e0:	210d      	movs	r1, #13
   312e2:	6028      	str	r0, [r5, #0]
   312e4:	3008      	adds	r0, #8
   312e6:	f016 fcd6 	bl	47c96 <net_buf_simple_add>
   312ea:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   312ec:	2202      	movs	r2, #2
	rp->status = 0x00;
   312ee:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   312f0:	2103      	movs	r1, #3
	rp->status = 0x00;
   312f2:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   312f4:	705a      	strb	r2, [r3, #1]
   312f6:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   312f8:	70da      	strb	r2, [r3, #3]
   312fa:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   312fc:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   312fe:	7199      	strb	r1, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   31300:	71d8      	strb	r0, [r3, #7]
   31302:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   31304:	7258      	strb	r0, [r3, #9]
   31306:	7298      	strb	r0, [r3, #10]
   31308:	72d8      	strb	r0, [r3, #11]
   3130a:	7318      	strb	r0, [r3, #12]
}
   3130c:	b007      	add	sp, #28
   3130e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31310:	4b45      	ldr	r3, [pc, #276]	; (31428 <hci_vendor_cmd_handle_common+0x174>)
   31312:	2141      	movs	r1, #65	; 0x41
   31314:	8818      	ldrh	r0, [r3, #0]
   31316:	f014 fa2d 	bl	45774 <bt_hci_cmd_complete_create>
   3131a:	2141      	movs	r1, #65	; 0x41
   3131c:	6028      	str	r0, [r5, #0]
   3131e:	3008      	adds	r0, #8
   31320:	f016 fcb9 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   31324:	2400      	movs	r4, #0
   31326:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   31328:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   3132a:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   3132e:	4621      	mov	r1, r4
   31330:	f013 fd72 	bl	44e18 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   31334:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   31336:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   31338:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   3133c:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   31340:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   31342:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   31344:	70ab      	strb	r3, [r5, #2]
}
   31346:	b007      	add	sp, #28
   31348:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3134a:	4b37      	ldr	r3, [pc, #220]	; (31428 <hci_vendor_cmd_handle_common+0x174>)
   3134c:	2109      	movs	r1, #9
   3134e:	8818      	ldrh	r0, [r3, #0]
   31350:	f014 fa10 	bl	45774 <bt_hci_cmd_complete_create>
   31354:	2109      	movs	r1, #9
   31356:	6028      	str	r0, [r5, #0]
   31358:	3008      	adds	r0, #8
   3135a:	f016 fc9c 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   3135e:	2400      	movs	r4, #0
   31360:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   31364:	2208      	movs	r2, #8
   31366:	4621      	mov	r1, r4
   31368:	f013 fd56 	bl	44e18 <memset>
	return 0;
   3136c:	4620      	mov	r0, r4
}
   3136e:	b007      	add	sp, #28
   31370:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   31372:	6889      	ldr	r1, [r1, #8]
   31374:	2000      	movs	r0, #0
   31376:	f7ff fd95 	bl	30ea4 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   3137a:	4b2b      	ldr	r3, [pc, #172]	; (31428 <hci_vendor_cmd_handle_common+0x174>)
   3137c:	2101      	movs	r1, #1
   3137e:	8818      	ldrh	r0, [r3, #0]
   31380:	f014 f9f8 	bl	45774 <bt_hci_cmd_complete_create>
   31384:	2101      	movs	r1, #1
   31386:	4604      	mov	r4, r0
   31388:	3008      	adds	r0, #8
   3138a:	f016 fc84 	bl	47c96 <net_buf_simple_add>
	ccst->status = status;
   3138e:	2100      	movs	r1, #0
   31390:	7001      	strb	r1, [r0, #0]
	return 0;
   31392:	4608      	mov	r0, r1
	*evt = cmd_complete_status(0x00);
   31394:	602c      	str	r4, [r5, #0]
}
   31396:	b007      	add	sp, #28
   31398:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   3139a:	4e24      	ldr	r6, [pc, #144]	; (3142c <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3139c:	4f22      	ldr	r7, [pc, #136]	; (31428 <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   3139e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   313a0:	f10d 0c04 	add.w	ip, sp, #4
   313a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   313a8:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   313aa:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   313ac:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   313b0:	2112      	movs	r1, #18
   313b2:	f014 f9df 	bl	45774 <bt_hci_cmd_complete_create>
   313b6:	2112      	movs	r1, #18
   313b8:	6028      	str	r0, [r5, #0]
   313ba:	3008      	adds	r0, #8
   313bc:	f016 fc6b 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   313c0:	2400      	movs	r4, #0
   313c2:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   313c6:	2211      	movs	r2, #17
   313c8:	a901      	add	r1, sp, #4
   313ca:	f013 fd1a 	bl	44e02 <memcpy>
	return 0;
   313ce:	4620      	mov	r0, r4
}
   313d0:	b007      	add	sp, #28
   313d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   313d4:	4b14      	ldr	r3, [pc, #80]	; (31428 <hci_vendor_cmd_handle_common+0x174>)
   313d6:	2118      	movs	r1, #24
   313d8:	8818      	ldrh	r0, [r3, #0]
   313da:	f014 f9cb 	bl	45774 <bt_hci_cmd_complete_create>
   313de:	2118      	movs	r1, #24
   313e0:	6028      	str	r0, [r5, #0]
   313e2:	3008      	adds	r0, #8
   313e4:	f016 fc57 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   313e8:	2400      	movs	r4, #0
   313ea:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   313ec:	2101      	movs	r1, #1
	rp->status = 0x00;
   313ee:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   313f2:	f00b fd23 	bl	3ce3c <hci_vendor_read_static_addr>
   313f6:	7068      	strb	r0, [r5, #1]
	return 0;
   313f8:	4620      	mov	r0, r4
}
   313fa:	b007      	add	sp, #28
   313fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   313fe:	4b0a      	ldr	r3, [pc, #40]	; (31428 <hci_vendor_cmd_handle_common+0x174>)
   31400:	2121      	movs	r1, #33	; 0x21
   31402:	8818      	ldrh	r0, [r3, #0]
   31404:	f014 f9b6 	bl	45774 <bt_hci_cmd_complete_create>
   31408:	2121      	movs	r1, #33	; 0x21
   3140a:	6028      	str	r0, [r5, #0]
   3140c:	3008      	adds	r0, #8
   3140e:	f016 fc42 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   31412:	4601      	mov	r1, r0
   31414:	2400      	movs	r4, #0
   31416:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   3141a:	3001      	adds	r0, #1
   3141c:	f00b fd82 	bl	3cf24 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   31420:	4620      	mov	r0, r4
}
   31422:	b007      	add	sp, #28
   31424:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31426:	bf00      	nop
   31428:	20003b60 	.word	0x20003b60
   3142c:	0004a0bc 	.word	0x0004a0bc

00031430 <hci_cmd_handle>:
{
   31430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (cmd->len < sizeof(*chdr)) {
   31434:	8983      	ldrh	r3, [r0, #12]
{
   31436:	b08c      	sub	sp, #48	; 0x30
	struct net_buf *evt = NULL;
   31438:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
   3143a:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   3143c:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   3143e:	d92e      	bls.n	3149e <hci_cmd_handle+0x6e>
	return net_buf_simple_pull_mem(&buf->b, len);
   31440:	4604      	mov	r4, r0
   31442:	2103      	movs	r1, #3
   31444:	3008      	adds	r0, #8
   31446:	f016 fc4d 	bl	47ce4 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   3144a:	89a2      	ldrh	r2, [r4, #12]
   3144c:	7883      	ldrb	r3, [r0, #2]
   3144e:	429a      	cmp	r2, r3
   31450:	d325      	bcc.n	3149e <hci_cmd_handle+0x6e>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   31452:	8802      	ldrh	r2, [r0, #0]
   31454:	4eb1      	ldr	r6, [pc, #708]	; (3171c <hci_cmd_handle+0x2ec>)
	switch (BT_OGF(_opcode)) {
   31456:	f3c2 2385 	ubfx	r3, r2, #10, #6
   3145a:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   3145c:	8032      	strh	r2, [r6, #0]
   3145e:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
   31460:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   31464:	d809      	bhi.n	3147a <hci_cmd_handle+0x4a>
   31466:	b1a3      	cbz	r3, 31492 <hci_cmd_handle+0x62>
   31468:	3b01      	subs	r3, #1
   3146a:	2b07      	cmp	r3, #7
   3146c:	d811      	bhi.n	31492 <hci_cmd_handle+0x62>
   3146e:	e8df f003 	tbb	[pc, r3]
   31472:	101b      	.short	0x101b
   31474:	10104a27 	.word	0x10104a27
   31478:	6310      	.short	0x6310
   3147a:	2b3f      	cmp	r3, #63	; 0x3f
   3147c:	d109      	bne.n	31492 <hci_cmd_handle+0x62>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   3147e:	4621      	mov	r1, r4
   31480:	aa07      	add	r2, sp, #28
   31482:	4628      	mov	r0, r5
   31484:	f7ff ff16 	bl	312b4 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   31488:	3016      	adds	r0, #22
	return evt;
   3148a:	bf18      	it	ne
   3148c:	9c07      	ldrne	r4, [sp, #28]
	if (err == -EINVAL) {
   3148e:	d107      	bne.n	314a0 <hci_cmd_handle+0x70>
	return bt_hci_cmd_status_create(_opcode, status);
   31490:	8830      	ldrh	r0, [r6, #0]
   31492:	2101      	movs	r1, #1
}
   31494:	b00c      	add	sp, #48	; 0x30
   31496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_status_create(_opcode, status);
   3149a:	f014 b97d 	b.w	45798 <bt_hci_cmd_status_create>
		return NULL;
   3149e:	2400      	movs	r4, #0
}
   314a0:	4620      	mov	r0, r4
   314a2:	b00c      	add	sp, #48	; 0x30
   314a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (ocf) {
   314a8:	2d06      	cmp	r5, #6
   314aa:	f000 83e8 	beq.w	31c7e <hci_cmd_handle+0x84e>
   314ae:	2d1d      	cmp	r5, #29
   314b0:	d1ef      	bne.n	31492 <hci_cmd_handle+0x62>
	handle = sys_le16_to_cpu(cmd->handle);
   314b2:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   314b4:	8818      	ldrh	r0, [r3, #0]
   314b6:	f003 ff39 	bl	3532c <ll_version_ind_send>
   314ba:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   314bc:	8830      	ldrh	r0, [r6, #0]
   314be:	e7e9      	b.n	31494 <hci_cmd_handle+0x64>
	switch (ocf) {
   314c0:	2d63      	cmp	r5, #99	; 0x63
   314c2:	f000 841f 	beq.w	31d04 <hci_cmd_handle+0x8d4>
   314c6:	f200 80ed 	bhi.w	316a4 <hci_cmd_handle+0x274>
   314ca:	2d03      	cmp	r5, #3
   314cc:	f000 83f8 	beq.w	31cc0 <hci_cmd_handle+0x890>
   314d0:	2d2d      	cmp	r5, #45	; 0x2d
   314d2:	f040 80d3 	bne.w	3167c <hci_cmd_handle+0x24c>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   314d6:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   314d8:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   314da:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   314dc:	f893 8002 	ldrb.w	r8, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   314e0:	f014 f948 	bl	45774 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   314e4:	2104      	movs	r1, #4
   314e6:	4604      	mov	r4, r0
   314e8:	3008      	adds	r0, #8
   314ea:	f016 fbd4 	bl	47c96 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   314ee:	b2b7      	uxth	r7, r6
   314f0:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   314f2:	1cc3      	adds	r3, r0, #3
   314f4:	4642      	mov	r2, r8
   314f6:	4639      	mov	r1, r7
   314f8:	2002      	movs	r0, #2
   314fa:	f7ff fd19 	bl	30f30 <ll_tx_pwr_lvl_get>
	rp->handle = sys_cpu_to_le16(handle);
   314fe:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
   31502:	7028      	strb	r0, [r5, #0]
}
   31504:	e7cc      	b.n	314a0 <hci_cmd_handle+0x70>
	switch (ocf) {
   31506:	1e6a      	subs	r2, r5, #1
   31508:	2a08      	cmp	r2, #8
   3150a:	d8c2      	bhi.n	31492 <hci_cmd_handle+0x62>
   3150c:	a301      	add	r3, pc, #4	; (adr r3, 31514 <hci_cmd_handle+0xe4>)
   3150e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   31512:	bf00      	nop
   31514:	000317dd 	.word	0x000317dd
   31518:	00031725 	.word	0x00031725
   3151c:	000316f7 	.word	0x000316f7
   31520:	00031493 	.word	0x00031493
   31524:	00031493 	.word	0x00031493
   31528:	00031493 	.word	0x00031493
   3152c:	00031493 	.word	0x00031493
   31530:	00031493 	.word	0x00031493
   31534:	000316d9 	.word	0x000316d9
	switch (ocf) {
   31538:	1e6a      	subs	r2, r5, #1
   3153a:	2a4d      	cmp	r2, #77	; 0x4d
   3153c:	d8a9      	bhi.n	31492 <hci_cmd_handle+0x62>
   3153e:	a301      	add	r3, pc, #4	; (adr r3, 31544 <hci_cmd_handle+0x114>)
   31540:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   31544:	0003182f 	.word	0x0003182f
   31548:	0003180f 	.word	0x0003180f
   3154c:	000318cf 	.word	0x000318cf
   31550:	00031493 	.word	0x00031493
   31554:	000318c5 	.word	0x000318c5
   31558:	000318a9 	.word	0x000318a9
   3155c:	00031891 	.word	0x00031891
   31560:	00031885 	.word	0x00031885
   31564:	00031879 	.word	0x00031879
   31568:	00031859 	.word	0x00031859
   3156c:	00031493 	.word	0x00031493
   31570:	00031493 	.word	0x00031493
   31574:	00031493 	.word	0x00031493
   31578:	00031493 	.word	0x00031493
   3157c:	0003183b 	.word	0x0003183b
   31580:	00031c79 	.word	0x00031c79
   31584:	00031c71 	.word	0x00031c71
   31588:	00031c69 	.word	0x00031c69
   3158c:	00031c49 	.word	0x00031c49
   31590:	00031493 	.word	0x00031493
   31594:	00031c23 	.word	0x00031c23
   31598:	00031c15 	.word	0x00031c15
   3159c:	00031be5 	.word	0x00031be5
   315a0:	00031bc7 	.word	0x00031bc7
   315a4:	00031493 	.word	0x00031493
   315a8:	00031bbd 	.word	0x00031bbd
   315ac:	00031bad 	.word	0x00031bad
   315b0:	00031b7b 	.word	0x00031b7b
   315b4:	00031493 	.word	0x00031493
   315b8:	00031493 	.word	0x00031493
   315bc:	00031493 	.word	0x00031493
   315c0:	00031b5d 	.word	0x00031b5d
   315c4:	00031b41 	.word	0x00031b41
   315c8:	00031b31 	.word	0x00031b31
   315cc:	00031aff 	.word	0x00031aff
   315d0:	00031af3 	.word	0x00031af3
   315d4:	00031493 	.word	0x00031493
   315d8:	00031493 	.word	0x00031493
   315dc:	00031ae5 	.word	0x00031ae5
   315e0:	00031add 	.word	0x00031add
   315e4:	00031ad7 	.word	0x00031ad7
   315e8:	00031ab9 	.word	0x00031ab9
   315ec:	00031a8f 	.word	0x00031a8f
   315f0:	00031a65 	.word	0x00031a65
   315f4:	00031a5b 	.word	0x00031a5b
   315f8:	00031a4d 	.word	0x00031a4d
   315fc:	00031a05 	.word	0x00031a05
   31600:	000319b1 	.word	0x000319b1
   31604:	00031993 	.word	0x00031993
   31608:	0003193d 	.word	0x0003193d
   3160c:	00031493 	.word	0x00031493
   31610:	00031493 	.word	0x00031493
   31614:	00031493 	.word	0x00031493
   31618:	00031493 	.word	0x00031493
   3161c:	00031493 	.word	0x00031493
   31620:	00031493 	.word	0x00031493
   31624:	00031493 	.word	0x00031493
   31628:	00031493 	.word	0x00031493
   3162c:	00031493 	.word	0x00031493
   31630:	00031493 	.word	0x00031493
   31634:	00031493 	.word	0x00031493
   31638:	00031493 	.word	0x00031493
   3163c:	00031493 	.word	0x00031493
   31640:	00031493 	.word	0x00031493
   31644:	00031493 	.word	0x00031493
   31648:	00031493 	.word	0x00031493
   3164c:	00031493 	.word	0x00031493
   31650:	00031493 	.word	0x00031493
   31654:	00031493 	.word	0x00031493
   31658:	00031493 	.word	0x00031493
   3165c:	00031493 	.word	0x00031493
   31660:	00031493 	.word	0x00031493
   31664:	00031493 	.word	0x00031493
   31668:	00031493 	.word	0x00031493
   3166c:	0003191d 	.word	0x0003191d
   31670:	00031493 	.word	0x00031493
   31674:	00031493 	.word	0x00031493
   31678:	00031913 	.word	0x00031913
	switch (ocf) {
   3167c:	2d01      	cmp	r5, #1
   3167e:	f47f af08 	bne.w	31492 <hci_cmd_handle+0x62>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   31682:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   31684:	4b26      	ldr	r3, [pc, #152]	; (31720 <hci_cmd_handle+0x2f0>)
   31686:	6811      	ldr	r1, [r2, #0]
   31688:	6852      	ldr	r2, [r2, #4]
   3168a:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   3168c:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   3168e:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31690:	f014 f870 	bl	45774 <bt_hci_cmd_complete_create>
   31694:	2101      	movs	r1, #1
   31696:	4604      	mov	r4, r0
   31698:	3008      	adds	r0, #8
   3169a:	f016 fafc 	bl	47c96 <net_buf_simple_add>
	ccst->status = status;
   3169e:	2300      	movs	r3, #0
   316a0:	7003      	strb	r3, [r0, #0]
}
   316a2:	e6fd      	b.n	314a0 <hci_cmd_handle+0x70>
	switch (ocf) {
   316a4:	2d7b      	cmp	r5, #123	; 0x7b
   316a6:	f000 82f2 	beq.w	31c8e <hci_cmd_handle+0x85e>
   316aa:	2d7c      	cmp	r5, #124	; 0x7c
   316ac:	f47f aef1 	bne.w	31492 <hci_cmd_handle+0x62>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   316b0:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   316b2:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   316b4:	8859      	ldrh	r1, [r3, #2]
   316b6:	b2b8      	uxth	r0, r7
   316b8:	f003 ff72 	bl	355a0 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   316bc:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   316be:	2103      	movs	r1, #3
   316c0:	8830      	ldrh	r0, [r6, #0]
   316c2:	f014 f857 	bl	45774 <bt_hci_cmd_complete_create>
   316c6:	2103      	movs	r1, #3
   316c8:	4604      	mov	r4, r0
   316ca:	3008      	adds	r0, #8
   316cc:	f016 fae3 	bl	47c96 <net_buf_simple_add>
	rp->status = status;
   316d0:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   316d2:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (err == -EINVAL) {
   316d6:	e6e3      	b.n	314a0 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   316d8:	2107      	movs	r1, #7
   316da:	f014 f84b 	bl	45774 <bt_hci_cmd_complete_create>
   316de:	2107      	movs	r1, #7
   316e0:	4604      	mov	r4, r0
   316e2:	3008      	adds	r0, #8
   316e4:	f016 fad7 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   316e8:	4601      	mov	r1, r0
   316ea:	2000      	movs	r0, #0
   316ec:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   316f0:	f7ff fc06 	bl	30f00 <ll_addr_read>
	if (err == -EINVAL) {
   316f4:	e6d4      	b.n	314a0 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   316f6:	2109      	movs	r1, #9
   316f8:	f014 f83c 	bl	45774 <bt_hci_cmd_complete_create>
   316fc:	2109      	movs	r1, #9
   316fe:	4604      	mov	r4, r0
   31700:	3008      	adds	r0, #8
   31702:	f016 fac8 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   31706:	2100      	movs	r1, #0
   31708:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   3170a:	2208      	movs	r2, #8
	rp->status = 0x00;
   3170c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   31710:	f013 fb82 	bl	44e18 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   31714:	2360      	movs	r3, #96	; 0x60
   31716:	716b      	strb	r3, [r5, #5]
	if (err == -EINVAL) {
   31718:	e6c2      	b.n	314a0 <hci_cmd_handle+0x70>
   3171a:	bf00      	nop
   3171c:	20003b60 	.word	0x20003b60
   31720:	20000158 	.word	0x20000158
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31724:	2141      	movs	r1, #65	; 0x41
   31726:	f014 f825 	bl	45774 <bt_hci_cmd_complete_create>
   3172a:	2141      	movs	r1, #65	; 0x41
   3172c:	4604      	mov	r4, r0
   3172e:	3008      	adds	r0, #8
   31730:	f016 fab1 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   31734:	2100      	movs	r1, #0
   31736:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   31738:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   3173a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   3173e:	f013 fb6b 	bl	44e18 <memset>
	rp->commands[10] |= BIT(2);
   31742:	7aeb      	ldrb	r3, [r5, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
   31744:	79aa      	ldrb	r2, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   31746:	7be9      	ldrb	r1, [r5, #15]
	rp->commands[10] |= BIT(2);
   31748:	f043 0304 	orr.w	r3, r3, #4
   3174c:	72eb      	strb	r3, [r5, #11]
	rp->commands[15] |= BIT(1);
   3174e:	7c2b      	ldrb	r3, [r5, #16]
   31750:	f043 0302 	orr.w	r3, r3, #2
   31754:	742b      	strb	r3, [r5, #16]
	rp->commands[27] |= BIT(0) | BIT(1);
   31756:	7f2b      	ldrb	r3, [r5, #28]
	rp->commands[5] |= BIT(6) | BIT(7);
   31758:	f062 023f 	orn	r2, r2, #63	; 0x3f
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   3175c:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
   31760:	71aa      	strb	r2, [r5, #6]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   31762:	772b      	strb	r3, [r5, #28]
	rp->commands[22] |= BIT(2);
   31764:	7dea      	ldrb	r2, [r5, #23]
	rp->commands[33] |= BIT(4) | BIT(5);
   31766:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
   3176a:	f041 0128 	orr.w	r1, r1, #40	; 0x28
	rp->commands[22] |= BIT(2);
   3176e:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[33] |= BIT(6) | BIT(7);
   31772:	f063 030f 	orn	r3, r3, #15
	rp->commands[14] |= BIT(3) | BIT(5);
   31776:	73e9      	strb	r1, [r5, #15]
	rp->commands[22] |= BIT(2);
   31778:	75ea      	strb	r2, [r5, #23]
	rp->commands[26] |= BIT(6) | BIT(7);
   3177a:	7ee9      	ldrb	r1, [r5, #27]
	rp->commands[35] |= BIT(3);
   3177c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	rp->commands[33] |= BIT(6) | BIT(7);
   31780:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	rp->commands[38] |= BIT(7);
   31784:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	rp->commands[26] |= BIT(0) | BIT(1);
   31788:	f061 013c 	orn	r1, r1, #60	; 0x3c
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   3178c:	f042 027f 	orr.w	r2, r2, #127	; 0x7f
	rp->commands[38] |= BIT(7);
   31790:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(0) | BIT(1);
   31794:	76e9      	strb	r1, [r5, #27]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   31796:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   3179a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
	rp->commands[39] |= BIT(2);
   3179e:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   317a2:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	rp->commands[28] |= BIT(3);
   317a6:	7f6b      	ldrb	r3, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   317a8:	f041 0130 	orr.w	r1, r1, #48	; 0x30
	rp->commands[39] |= BIT(2);
   317ac:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[28] |= BIT(1) | BIT(2);
   317b0:	f043 030e 	orr.w	r3, r3, #14
	rp->commands[32] |= BIT(4) | BIT(5);
   317b4:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	rp->commands[39] |= BIT(2);
   317b8:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   317bc:	f895 1023 	ldrb.w	r1, [r5, #35]	; 0x23
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   317c0:	7eaa      	ldrb	r2, [r5, #26]
	rp->commands[28] |= BIT(1) | BIT(2);
   317c2:	776b      	strb	r3, [r5, #29]
	rp->commands[0] |= BIT(5);
   317c4:	786b      	ldrb	r3, [r5, #1]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   317c6:	f061 0106 	orn	r1, r1, #6
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   317ca:	f062 0208 	orn	r2, r2, #8
	rp->commands[0] |= BIT(5);
   317ce:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   317d2:	f885 1023 	strb.w	r1, [r5, #35]	; 0x23
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   317d6:	76aa      	strb	r2, [r5, #26]
	rp->commands[0] |= BIT(5);
   317d8:	706b      	strb	r3, [r5, #1]
	if (err == -EINVAL) {
   317da:	e661      	b.n	314a0 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   317dc:	2109      	movs	r1, #9
   317de:	f013 ffc9 	bl	45774 <bt_hci_cmd_complete_create>
   317e2:	2109      	movs	r1, #9
   317e4:	4604      	mov	r4, r0
   317e6:	3008      	adds	r0, #8
   317e8:	f016 fa55 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   317ec:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   317ee:	220c      	movs	r2, #12
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   317f0:	f06f 010e 	mvn.w	r1, #14
	rp->status = 0x00;
   317f4:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   317f6:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
   317f8:	7083      	strb	r3, [r0, #2]
   317fa:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = LL_VERSION_NUMBER;
   317fc:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   317fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   31802:	2205      	movs	r2, #5
   31804:	7141      	strb	r1, [r0, #5]
   31806:	7182      	strb	r2, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   31808:	71c3      	strb	r3, [r0, #7]
   3180a:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   3180c:	e648      	b.n	314a0 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3180e:	2104      	movs	r1, #4
   31810:	f013 ffb0 	bl	45774 <bt_hci_cmd_complete_create>
   31814:	2104      	movs	r1, #4
   31816:	4604      	mov	r4, r0
   31818:	3008      	adds	r0, #8
   3181a:	f016 fa3c 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   3181e:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   31820:	211b      	movs	r1, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   31822:	2203      	movs	r2, #3
	rp->status = 0x00;
   31824:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   31826:	7041      	strb	r1, [r0, #1]
   31828:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   3182a:	70c2      	strb	r2, [r0, #3]
	if (err == -EINVAL) {
   3182c:	e638      	b.n	314a0 <hci_cmd_handle+0x70>
   3182e:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   31830:	4bc9      	ldr	r3, [pc, #804]	; (31b58 <hci_cmd_handle+0x728>)
   31832:	6811      	ldr	r1, [r2, #0]
   31834:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   31836:	6019      	str	r1, [r3, #0]
   31838:	e728      	b.n	3168c <hci_cmd_handle+0x25c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3183a:	2102      	movs	r1, #2
   3183c:	f013 ff9a 	bl	45774 <bt_hci_cmd_complete_create>
   31840:	2102      	movs	r1, #2
   31842:	4604      	mov	r4, r0
   31844:	3008      	adds	r0, #8
   31846:	f016 fa26 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   3184a:	2300      	movs	r3, #0
   3184c:	7003      	strb	r3, [r0, #0]
   3184e:	4605      	mov	r5, r0
	rp->fal_size = ll_fal_size_get();
   31850:	f007 fd60 	bl	39314 <ll_fal_size_get>
   31854:	7068      	strb	r0, [r5, #1]
	if (err == -EINVAL) {
   31856:	e623      	b.n	314a0 <hci_cmd_handle+0x70>
	status = ll_adv_enable(cmd->enable);
   31858:	68a3      	ldr	r3, [r4, #8]
   3185a:	7818      	ldrb	r0, [r3, #0]
   3185c:	f7f4 fec8 	bl	265f0 <ll_adv_enable>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   31860:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31862:	2101      	movs	r1, #1
   31864:	8830      	ldrh	r0, [r6, #0]
   31866:	f013 ff85 	bl	45774 <bt_hci_cmd_complete_create>
   3186a:	2101      	movs	r1, #1
   3186c:	4604      	mov	r4, r0
   3186e:	3008      	adds	r0, #8
   31870:	f016 fa11 	bl	47c96 <net_buf_simple_add>
	ccst->status = status;
   31874:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
   31876:	e613      	b.n	314a0 <hci_cmd_handle+0x70>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   31878:	68a1      	ldr	r1, [r4, #8]
   3187a:	f811 0b01 	ldrb.w	r0, [r1], #1
   3187e:	f002 fd8b 	bl	34398 <ll_adv_scan_rsp_set>
   31882:	e7ed      	b.n	31860 <hci_cmd_handle+0x430>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   31884:	68a1      	ldr	r1, [r4, #8]
   31886:	f811 0b01 	ldrb.w	r0, [r1], #1
   3188a:	f002 fd39 	bl	34300 <ll_adv_data_set>
   3188e:	e7e7      	b.n	31860 <hci_cmd_handle+0x430>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31890:	2102      	movs	r1, #2
   31892:	f013 ff6f 	bl	45774 <bt_hci_cmd_complete_create>
   31896:	2102      	movs	r1, #2
   31898:	4604      	mov	r4, r0
   3189a:	3008      	adds	r0, #8
   3189c:	f016 f9fb 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   318a0:	2300      	movs	r3, #0
   318a2:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   318a4:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   318a6:	e5fb      	b.n	314a0 <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   318a8:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   318aa:	7ba5      	ldrb	r5, [r4, #14]
   318ac:	79a3      	ldrb	r3, [r4, #6]
   318ae:	7962      	ldrb	r2, [r4, #5]
   318b0:	7921      	ldrb	r1, [r4, #4]
   318b2:	8820      	ldrh	r0, [r4, #0]
   318b4:	9502      	str	r5, [sp, #8]
   318b6:	7b65      	ldrb	r5, [r4, #13]
   318b8:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   318ba:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   318bc:	9400      	str	r4, [sp, #0]
   318be:	f002 fb1f 	bl	33f00 <ll_adv_params_set>
   318c2:	e7cd      	b.n	31860 <hci_cmd_handle+0x430>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   318c4:	68a1      	ldr	r1, [r4, #8]
   318c6:	2001      	movs	r0, #1
   318c8:	f7ff faec 	bl	30ea4 <ll_addr_set>
   318cc:	e7c8      	b.n	31860 <hci_cmd_handle+0x430>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   318ce:	2109      	movs	r1, #9
   318d0:	f013 ff50 	bl	45774 <bt_hci_cmd_complete_create>
   318d4:	2109      	movs	r1, #9
   318d6:	4604      	mov	r4, r0
   318d8:	3008      	adds	r0, #8
   318da:	f016 f9dc 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   318de:	2100      	movs	r1, #0
   318e0:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   318e2:	2208      	movs	r2, #8
	rp->status = 0x00;
   318e4:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   318e8:	f013 fa96 	bl	44e18 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   318ec:	f000 fe18 	bl	32520 <ll_feat_get>
	dst[1] = val >> 8;
   318f0:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   318f4:	7068      	strb	r0, [r5, #1]
	sys_put_le16(val >> 16, &dst[2]);
   318f6:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
   318f8:	70ab      	strb	r3, [r5, #2]
   318fa:	0a03      	lsrs	r3, r0, #8
   318fc:	712b      	strb	r3, [r5, #4]
	sys_put_le16(val >> 16, &dst[2]);
   318fe:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   31900:	70e8      	strb	r0, [r5, #3]
	dst[1] = val >> 8;
   31902:	0a1a      	lsrs	r2, r3, #8
   31904:	f3c1 2007 	ubfx	r0, r1, #8, #8
	dst[0] = val;
   31908:	7169      	strb	r1, [r5, #5]
	dst[1] = val >> 8;
   3190a:	71a8      	strb	r0, [r5, #6]
	dst[0] = val;
   3190c:	71eb      	strb	r3, [r5, #7]
	dst[1] = val >> 8;
   3190e:	722a      	strb	r2, [r5, #8]
	if (err == -EINVAL) {
   31910:	e5c6      	b.n	314a0 <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   31912:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   31914:	79c1      	ldrb	r1, [r0, #7]
   31916:	f008 f80f 	bl	39938 <ll_priv_mode_set>
   3191a:	e7a1      	b.n	31860 <hci_cmd_handle+0x430>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3191c:	2103      	movs	r1, #3
   3191e:	f013 ff29 	bl	45774 <bt_hci_cmd_complete_create>
   31922:	2103      	movs	r1, #3
   31924:	4604      	mov	r4, r0
   31926:	3008      	adds	r0, #8
   31928:	f016 f9b5 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   3192c:	4601      	mov	r1, r0
   3192e:	2300      	movs	r3, #0
   31930:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   31934:	3001      	adds	r0, #1
   31936:	f7ff fb0b 	bl	30f50 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   3193a:	e5b1      	b.n	314a0 <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   3193c:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   3193e:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
   31940:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   31942:	8815      	ldrh	r5, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   31944:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   31948:	07df      	lsls	r7, r3, #31
		cmd->tx_phys |= mask_phys;
   3194a:	bf44      	itt	mi
   3194c:	f041 0103 	orrmi.w	r1, r1, #3
   31950:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   31952:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
   31956:	7913      	ldrb	r3, [r2, #4]
   31958:	bf1c      	itt	ne
   3195a:	f043 0303 	orrne.w	r3, r3, #3
   3195e:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   31960:	ea43 0201 	orr.w	r2, r3, r1
   31964:	f012 0ffc 	tst.w	r2, #252	; 0xfc
   31968:	f040 81d2 	bne.w	31d10 <hci_cmd_handle+0x8e0>
	if (!(cmd->tx_phys & 0x07) ||
   3196c:	074f      	lsls	r7, r1, #29
   3196e:	f000 81cc 	beq.w	31d0a <hci_cmd_handle+0x8da>
   31972:	075a      	lsls	r2, r3, #29
   31974:	f000 81c9 	beq.w	31d0a <hci_cmd_handle+0x8da>
	if (phy_opts & 0x03) {
   31978:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   3197c:	bf1c      	itt	ne
   3197e:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   31982:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   31986:	4628      	mov	r0, r5
   31988:	f003 fd94 	bl	354b4 <ll_phy_req_send>
   3198c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   3198e:	8830      	ldrh	r0, [r6, #0]
   31990:	e580      	b.n	31494 <hci_cmd_handle+0x64>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   31992:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   31994:	781a      	ldrb	r2, [r3, #0]
   31996:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   31998:	bf4a      	itet	mi
   3199a:	2007      	movmi	r0, #7
	return ((uint16_t)src[1] << 8) | src[0];
   3199c:	7858      	ldrbpl	r0, [r3, #1]
   3199e:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   319a0:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   319a2:	bf4a      	itet	mi
   319a4:	2107      	movmi	r1, #7
	status = ll_terminate_ind_send(handle, cmd->reason);
   319a6:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   319a8:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   319aa:	f003 fd79 	bl	354a0 <ll_phy_default_set>
   319ae:	e757      	b.n	31860 <hci_cmd_handle+0x430>
	handle = sys_le16_to_cpu(cmd->handle);
   319b0:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   319b2:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   319b4:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   319b6:	f013 fedd 	bl	45774 <bt_hci_cmd_complete_create>
   319ba:	2105      	movs	r1, #5
   319bc:	4604      	mov	r4, r0
   319be:	3008      	adds	r0, #8
   319c0:	f016 f969 	bl	47c96 <net_buf_simple_add>
   319c4:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   319c6:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
   319c8:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   319ca:	1ce9      	adds	r1, r5, #3
   319cc:	f003 fd4a 	bl	35464 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   319d0:	78eb      	ldrb	r3, [r5, #3]
   319d2:	792a      	ldrb	r2, [r5, #4]
	rp->status = status;
   319d4:	7028      	strb	r0, [r5, #0]
   319d6:	2b00      	cmp	r3, #0
   319d8:	fa93 f3a3 	rbit	r3, r3
   319dc:	fab3 f383 	clz	r3, r3
   319e0:	bf08      	it	eq
   319e2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   319e6:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   319e8:	70eb      	strb	r3, [r5, #3]
   319ea:	2a00      	cmp	r2, #0
   319ec:	fa92 f3a2 	rbit	r3, r2
   319f0:	fab3 f383 	clz	r3, r3
   319f4:	bf08      	it	eq
   319f6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   319fa:	3301      	adds	r3, #1
	rp->handle = sys_cpu_to_le16(handle);
   319fc:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   31a00:	712b      	strb	r3, [r5, #4]
	if (err == -EINVAL) {
   31a02:	e54d      	b.n	314a0 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31a04:	2109      	movs	r1, #9
   31a06:	f013 feb5 	bl	45774 <bt_hci_cmd_complete_create>
   31a0a:	2109      	movs	r1, #9
   31a0c:	4604      	mov	r4, r0
   31a0e:	3008      	adds	r0, #8
   31a10:	f016 f941 	bl	47c96 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   31a14:	ab08      	add	r3, sp, #32
   31a16:	4605      	mov	r5, r0
   31a18:	f10d 021a 	add.w	r2, sp, #26
   31a1c:	a906      	add	r1, sp, #24
   31a1e:	f10d 0016 	add.w	r0, sp, #22
   31a22:	f003 fd13 	bl	3544c <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   31a26:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   31a2a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   31a2e:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   31a32:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   31a36:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   31a3a:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   31a3e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   31a42:	f8a5 2007 	strh.w	r2, [r5, #7]
	rp->status = 0x00;
   31a46:	2300      	movs	r3, #0
   31a48:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   31a4a:	e529      	b.n	314a0 <hci_cmd_handle+0x70>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   31a4c:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   31a4e:	8818      	ldrh	r0, [r3, #0]
   31a50:	f007 ff68 	bl	39924 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31a54:	8830      	ldrh	r0, [r6, #0]
   31a56:	2101      	movs	r1, #1
   31a58:	e61a      	b.n	31690 <hci_cmd_handle+0x260>
	status = ll_rl_enable(cmd->enable);
   31a5a:	68a3      	ldr	r3, [r4, #8]
   31a5c:	7818      	ldrb	r0, [r3, #0]
   31a5e:	f007 ff4b 	bl	398f8 <ll_rl_enable>
   31a62:	e6fd      	b.n	31860 <hci_cmd_handle+0x430>
	memcpy(dst, src, sizeof(*dst));
   31a64:	2207      	movs	r2, #7
   31a66:	68a1      	ldr	r1, [r4, #8]
   31a68:	a808      	add	r0, sp, #32
   31a6a:	f013 f9ca 	bl	44e02 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31a6e:	2107      	movs	r1, #7
   31a70:	8830      	ldrh	r0, [r6, #0]
   31a72:	f013 fe7f 	bl	45774 <bt_hci_cmd_complete_create>
   31a76:	2107      	movs	r1, #7
   31a78:	4604      	mov	r4, r0
   31a7a:	3008      	adds	r0, #8
   31a7c:	f016 f90b 	bl	47c96 <net_buf_simple_add>
   31a80:	4605      	mov	r5, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   31a82:	1c41      	adds	r1, r0, #1
   31a84:	a808      	add	r0, sp, #32
   31a86:	f007 ff05 	bl	39894 <ll_rl_lrpa_get>
   31a8a:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   31a8c:	e508      	b.n	314a0 <hci_cmd_handle+0x70>
   31a8e:	2207      	movs	r2, #7
   31a90:	68a1      	ldr	r1, [r4, #8]
   31a92:	a808      	add	r0, sp, #32
   31a94:	f013 f9b5 	bl	44e02 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31a98:	2107      	movs	r1, #7
   31a9a:	8830      	ldrh	r0, [r6, #0]
   31a9c:	f013 fe6a 	bl	45774 <bt_hci_cmd_complete_create>
   31aa0:	2107      	movs	r1, #7
   31aa2:	4604      	mov	r4, r0
   31aa4:	3008      	adds	r0, #8
   31aa6:	f016 f8f6 	bl	47c96 <net_buf_simple_add>
   31aaa:	4605      	mov	r5, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   31aac:	1c41      	adds	r1, r0, #1
   31aae:	a808      	add	r0, sp, #32
   31ab0:	f007 feb6 	bl	39820 <ll_rl_crpa_get>
   31ab4:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   31ab6:	e4f3      	b.n	314a0 <hci_cmd_handle+0x70>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31ab8:	2102      	movs	r1, #2
   31aba:	f013 fe5b 	bl	45774 <bt_hci_cmd_complete_create>
   31abe:	2102      	movs	r1, #2
   31ac0:	4604      	mov	r4, r0
   31ac2:	3008      	adds	r0, #8
   31ac4:	f016 f8e7 	bl	47c96 <net_buf_simple_add>
   31ac8:	4605      	mov	r5, r0
	rp->rl_size = ll_rl_size_get();
   31aca:	f007 fd6f 	bl	395ac <ll_rl_size_get>
	rp->status = 0x00;
   31ace:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   31ad0:	7068      	strb	r0, [r5, #1]
	rp->status = 0x00;
   31ad2:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   31ad4:	e4e4      	b.n	314a0 <hci_cmd_handle+0x70>
	status = ll_rl_clear();
   31ad6:	f007 fd6b 	bl	395b0 <ll_rl_clear>
   31ada:	e6c1      	b.n	31860 <hci_cmd_handle+0x430>
	status = ll_rl_remove(&cmd->peer_id_addr);
   31adc:	68a0      	ldr	r0, [r4, #8]
   31ade:	f007 fda5 	bl	3962c <ll_rl_remove>
   31ae2:	e6bd      	b.n	31860 <hci_cmd_handle+0x430>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   31ae4:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   31ae6:	f100 0217 	add.w	r2, r0, #23
   31aea:	1dc1      	adds	r1, r0, #7
   31aec:	f008 f9b0 	bl	39e50 <ll_rl_add>
   31af0:	e6b6      	b.n	31860 <hci_cmd_handle+0x430>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   31af2:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   31af4:	8859      	ldrh	r1, [r3, #2]
   31af6:	8818      	ldrh	r0, [r3, #0]
   31af8:	f003 fc9e 	bl	35438 <ll_length_default_set>
   31afc:	e6b0      	b.n	31860 <hci_cmd_handle+0x430>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31afe:	2105      	movs	r1, #5
   31b00:	f013 fe38 	bl	45774 <bt_hci_cmd_complete_create>
   31b04:	2105      	movs	r1, #5
   31b06:	4604      	mov	r4, r0
   31b08:	3008      	adds	r0, #8
   31b0a:	f016 f8c4 	bl	47c96 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   31b0e:	a908      	add	r1, sp, #32
   31b10:	4605      	mov	r5, r0
   31b12:	f10d 001a 	add.w	r0, sp, #26
   31b16:	f003 fc83 	bl	35420 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   31b1a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   31b1e:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   31b22:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   31b26:	f8a5 2003 	strh.w	r2, [r5, #3]
	rp->status = 0x00;
   31b2a:	2300      	movs	r3, #0
   31b2c:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   31b2e:	e4b7      	b.n	314a0 <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   31b30:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   31b32:	881f      	ldrh	r7, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   31b34:	889a      	ldrh	r2, [r3, #4]
   31b36:	8859      	ldrh	r1, [r3, #2]
   31b38:	b2b8      	uxth	r0, r7
   31b3a:	f003 fc1d 	bl	35378 <ll_length_req_send>
   31b3e:	e5bd      	b.n	316bc <hci_cmd_handle+0x28c>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   31b40:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   31b42:	8817      	ldrh	r7, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   31b44:	7892      	ldrb	r2, [r2, #2]
   31b46:	2300      	movs	r3, #0
   31b48:	e9cd 3301 	strd	r3, r3, [sp, #4]
   31b4c:	9300      	str	r3, [sp, #0]
   31b4e:	2102      	movs	r1, #2
   31b50:	b2b8      	uxth	r0, r7
   31b52:	f003 fad5 	bl	35100 <ll_conn_update>
   31b56:	e5b1      	b.n	316bc <hci_cmd_handle+0x28c>
   31b58:	20000160 	.word	0x20000160
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   31b5c:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   31b5e:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   31b60:	8817      	ldrh	r7, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   31b62:	8853      	ldrh	r3, [r2, #2]
   31b64:	9102      	str	r1, [sp, #8]
   31b66:	88d1      	ldrh	r1, [r2, #6]
   31b68:	9101      	str	r1, [sp, #4]
   31b6a:	8891      	ldrh	r1, [r2, #4]
   31b6c:	9100      	str	r1, [sp, #0]
   31b6e:	2200      	movs	r2, #0
   31b70:	2102      	movs	r1, #2
   31b72:	b2b8      	uxth	r0, r7
   31b74:	f003 fac4 	bl	35100 <ll_conn_update>
   31b78:	e5a0      	b.n	316bc <hci_cmd_handle+0x28c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31b7a:	2109      	movs	r1, #9
   31b7c:	f013 fdfa 	bl	45774 <bt_hci_cmd_complete_create>
   31b80:	2109      	movs	r1, #9
   31b82:	4604      	mov	r4, r0
   31b84:	3008      	adds	r0, #8
   31b86:	f016 f886 	bl	47c96 <net_buf_simple_add>
	dst[0] = val;
   31b8a:	218f      	movs	r1, #143	; 0x8f
	dst[1] = val >> 8;
   31b8c:	22cc      	movs	r2, #204	; 0xcc
	dst[0] = val;
   31b8e:	7041      	strb	r1, [r0, #1]
	dst[1] = val >> 8;
   31b90:	7082      	strb	r2, [r0, #2]
	dst[0] = val;
   31b92:	2130      	movs	r1, #48	; 0x30
	dst[1] = val >> 8;
   31b94:	22ec      	movs	r2, #236	; 0xec
	rp->status = 0x00;
   31b96:	2300      	movs	r3, #0
	dst[0] = val;
   31b98:	70c1      	strb	r1, [r0, #3]
	dst[1] = val >> 8;
   31b9a:	7102      	strb	r2, [r0, #4]
	dst[0] = val;
   31b9c:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   31b9e:	2201      	movs	r2, #1
   31ba0:	7003      	strb	r3, [r0, #0]
	dst[0] = val;
   31ba2:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   31ba4:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   31ba6:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   31ba8:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   31baa:	e479      	b.n	314a0 <hci_cmd_handle+0x70>
	handle = sys_le16_to_cpu(cmd->handle);
   31bac:	68a3      	ldr	r3, [r4, #8]
   31bae:	881f      	ldrh	r7, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   31bb0:	2200      	movs	r2, #0
   31bb2:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   31bb4:	b2b8      	uxth	r0, r7
   31bb6:	f007 fa35 	bl	39024 <ll_start_enc_req_send>
   31bba:	e57f      	b.n	316bc <hci_cmd_handle+0x28c>
	handle = sys_le16_to_cpu(cmd->handle);
   31bbc:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   31bbe:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   31bc0:	f832 7b02 	ldrh.w	r7, [r2], #2
   31bc4:	e7f6      	b.n	31bb4 <hci_cmd_handle+0x784>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31bc6:	2109      	movs	r1, #9
   31bc8:	f013 fdd4 	bl	45774 <bt_hci_cmd_complete_create>
   31bcc:	2109      	movs	r1, #9
   31bce:	4604      	mov	r4, r0
   31bd0:	3008      	adds	r0, #8
   31bd2:	f016 f860 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   31bd6:	2300      	movs	r3, #0
   31bd8:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   31bdc:	2108      	movs	r1, #8
   31bde:	f008 fd55 	bl	3a68c <lll_csrand_get>
	if (err == -EINVAL) {
   31be2:	e45d      	b.n	314a0 <hci_cmd_handle+0x70>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   31be4:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   31be6:	aa08      	add	r2, sp, #32
   31be8:	2300      	movs	r3, #0
   31bea:	f100 0110 	add.w	r1, r0, #16
   31bee:	f00a fb4f 	bl	3c290 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31bf2:	8830      	ldrh	r0, [r6, #0]
   31bf4:	2111      	movs	r1, #17
   31bf6:	f013 fdbd 	bl	45774 <bt_hci_cmd_complete_create>
   31bfa:	2111      	movs	r1, #17
   31bfc:	4604      	mov	r4, r0
   31bfe:	3008      	adds	r0, #8
   31c00:	f016 f849 	bl	47c96 <net_buf_simple_add>
	rp->status = 0x00;
   31c04:	2300      	movs	r3, #0
   31c06:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   31c0a:	2210      	movs	r2, #16
   31c0c:	a908      	add	r1, sp, #32
   31c0e:	f013 f8f8 	bl	44e02 <memcpy>
	if (err == -EINVAL) {
   31c12:	e445      	b.n	314a0 <hci_cmd_handle+0x70>
	handle = sys_le16_to_cpu(cmd->handle);
   31c14:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   31c16:	8818      	ldrh	r0, [r3, #0]
   31c18:	f003 fb62 	bl	352e0 <ll_feature_req_send>
   31c1c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31c1e:	8830      	ldrh	r0, [r6, #0]
   31c20:	e438      	b.n	31494 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
   31c22:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31c24:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   31c26:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31c28:	f013 fda4 	bl	45774 <bt_hci_cmd_complete_create>
   31c2c:	2108      	movs	r1, #8
   31c2e:	4604      	mov	r4, r0
   31c30:	4408      	add	r0, r1
   31c32:	f016 f830 	bl	47c96 <net_buf_simple_add>
   31c36:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
   31c38:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
   31c3a:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   31c3c:	f003 faf4 	bl	35228 <ll_chm_get>
	rp->handle = sys_le16_to_cpu(handle);
   31c40:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
   31c44:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   31c46:	e42b      	b.n	314a0 <hci_cmd_handle+0x70>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   31c48:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   31c4a:	8911      	ldrh	r1, [r2, #8]
   31c4c:	8853      	ldrh	r3, [r2, #2]
   31c4e:	8810      	ldrh	r0, [r2, #0]
   31c50:	9102      	str	r1, [sp, #8]
   31c52:	88d1      	ldrh	r1, [r2, #6]
   31c54:	9101      	str	r1, [sp, #4]
   31c56:	8891      	ldrh	r1, [r2, #4]
   31c58:	9100      	str	r1, [sp, #0]
   31c5a:	2200      	movs	r2, #0
   31c5c:	4611      	mov	r1, r2
   31c5e:	f003 fa4f 	bl	35100 <ll_conn_update>
   31c62:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31c64:	8830      	ldrh	r0, [r6, #0]
   31c66:	e415      	b.n	31494 <hci_cmd_handle+0x64>
	status = ll_fal_remove(&cmd->addr);
   31c68:	68a0      	ldr	r0, [r4, #8]
   31c6a:	f007 fc13 	bl	39494 <ll_fal_remove>
   31c6e:	e5f7      	b.n	31860 <hci_cmd_handle+0x430>
	status = ll_fal_add(&cmd->addr);
   31c70:	68a0      	ldr	r0, [r4, #8]
   31c72:	f007 fb77 	bl	39364 <ll_fal_add>
   31c76:	e5f3      	b.n	31860 <hci_cmd_handle+0x430>
	status = ll_fal_clear();
   31c78:	f007 fb4e 	bl	39318 <ll_fal_clear>
   31c7c:	e5f0      	b.n	31860 <hci_cmd_handle+0x430>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   31c7e:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   31c80:	7899      	ldrb	r1, [r3, #2]
   31c82:	8818      	ldrh	r0, [r3, #0]
   31c84:	f003 faf0 	bl	35268 <ll_terminate_ind_send>
   31c88:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   31c8a:	8830      	ldrh	r0, [r6, #0]
   31c8c:	e402      	b.n	31494 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
   31c8e:	68a3      	ldr	r3, [r4, #8]
   31c90:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   31c92:	a908      	add	r1, sp, #32
   31c94:	b2b8      	uxth	r0, r7
   31c96:	f003 fc5f 	bl	35558 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31c9a:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   31c9c:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   31c9e:	8830      	ldrh	r0, [r6, #0]
   31ca0:	f013 fd68 	bl	45774 <bt_hci_cmd_complete_create>
   31ca4:	2105      	movs	r1, #5
   31ca6:	4604      	mov	r4, r0
   31ca8:	3008      	adds	r0, #8
   31caa:	f015 fff4 	bl	47c96 <net_buf_simple_add>
	rp->status = status;
   31cae:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   31cb0:	f8a0 7001 	strh.w	r7, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   31cb4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   31cb8:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   31cbc:	f7ff bbf0 	b.w	314a0 <hci_cmd_handle+0x70>
	event_mask = DEFAULT_EVENT_MASK;
   31cc0:	4b15      	ldr	r3, [pc, #84]	; (31d18 <hci_cmd_handle+0x8e8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   31cc2:	4a16      	ldr	r2, [pc, #88]	; (31d1c <hci_cmd_handle+0x8ec>)
	event_mask = DEFAULT_EVENT_MASK;
   31cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31cc8:	f641 71ff 	movw	r1, #8191	; 0x1fff
   31ccc:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   31cd0:	4b13      	ldr	r3, [pc, #76]	; (31d20 <hci_cmd_handle+0x8f0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   31cd2:	2000      	movs	r0, #0
   31cd4:	2100      	movs	r1, #0
   31cd6:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   31cda:	201f      	movs	r0, #31
   31cdc:	2100      	movs	r1, #0
   31cde:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   31ce2:	f001 fd55 	bl	33790 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   31ce6:	2101      	movs	r1, #1
   31ce8:	8830      	ldrh	r0, [r6, #0]
   31cea:	f013 fd43 	bl	45774 <bt_hci_cmd_complete_create>
   31cee:	2101      	movs	r1, #1
   31cf0:	4604      	mov	r4, r0
   31cf2:	3008      	adds	r0, #8
   31cf4:	f015 ffcf 	bl	47c96 <net_buf_simple_add>
	conn_count = 0U;
   31cf8:	4a0a      	ldr	r2, [pc, #40]	; (31d24 <hci_cmd_handle+0x8f4>)
	ccst->status = status;
   31cfa:	2300      	movs	r3, #0
   31cfc:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   31cfe:	6013      	str	r3, [r2, #0]
}
   31d00:	f7ff bbce 	b.w	314a0 <hci_cmd_handle+0x70>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   31d04:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   31d06:	4b05      	ldr	r3, [pc, #20]	; (31d1c <hci_cmd_handle+0x8ec>)
   31d08:	e593      	b.n	31832 <hci_cmd_handle+0x402>
	return bt_hci_cmd_status_create(_opcode, status);
   31d0a:	2112      	movs	r1, #18
   31d0c:	f7ff bbc2 	b.w	31494 <hci_cmd_handle+0x64>
   31d10:	2111      	movs	r1, #17
   31d12:	f7ff bbbf 	b.w	31494 <hci_cmd_handle+0x64>
   31d16:	bf00      	nop
   31d18:	20000158 	.word	0x20000158
   31d1c:	20001530 	.word	0x20001530
   31d20:	20000160 	.word	0x20000160
   31d24:	20001ed4 	.word	0x20001ed4

00031d28 <hci_acl_handle>:
{
   31d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   31d2c:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   31d2e:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   31d30:	2b03      	cmp	r3, #3
	*evt = NULL;
   31d32:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   31d34:	d92a      	bls.n	31d8c <hci_acl_handle+0x64>
	return net_buf_simple_pull_mem(&buf->b, len);
   31d36:	4605      	mov	r5, r0
   31d38:	4688      	mov	r8, r1
   31d3a:	3008      	adds	r0, #8
   31d3c:	2104      	movs	r1, #4
   31d3e:	f015 ffd1 	bl	47ce4 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   31d42:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   31d44:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   31d46:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   31d4a:	42bb      	cmp	r3, r7
   31d4c:	d31e      	bcc.n	31d8c <hci_acl_handle+0x64>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   31d4e:	2f1b      	cmp	r7, #27
   31d50:	d81c      	bhi.n	31d8c <hci_acl_handle+0x64>
	node_tx = ll_tx_mem_acquire();
   31d52:	f003 f97f 	bl	35054 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   31d56:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if (!node_tx) {
   31d5a:	4604      	mov	r4, r0
   31d5c:	b310      	cbz	r0, 31da4 <hci_acl_handle+0x7c>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   31d5e:	08b3      	lsrs	r3, r6, #2
   31d60:	d114      	bne.n	31d8c <hci_acl_handle+0x64>
	switch (bt_acl_flags_pb(flags)) {
   31d62:	b1be      	cbz	r6, 31d94 <hci_acl_handle+0x6c>
   31d64:	2e01      	cmp	r6, #1
   31d66:	d111      	bne.n	31d8c <hci_acl_handle+0x64>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   31d68:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
   31d6a:	7167      	strb	r7, [r4, #5]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   31d6c:	f366 0301 	bfi	r3, r6, #0, #2
	memcpy(&pdu_data->lldata[0], buf->data, len);
   31d70:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   31d72:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   31d74:	463a      	mov	r2, r7
   31d76:	1de0      	adds	r0, r4, #7
   31d78:	f013 f843 	bl	44e02 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   31d7c:	4621      	mov	r1, r4
   31d7e:	f3c9 000b 	ubfx	r0, r9, #0, #12
   31d82:	f003 f973 	bl	3506c <ll_tx_mem_enqueue>
   31d86:	b938      	cbnz	r0, 31d98 <hci_acl_handle+0x70>
}
   31d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (bt_acl_flags_pb(flags)) {
   31d8c:	f06f 0015 	mvn.w	r0, #21
}
   31d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (bt_acl_flags_pb(flags)) {
   31d94:	2602      	movs	r6, #2
   31d96:	e7e7      	b.n	31d68 <hci_acl_handle+0x40>
		ll_tx_mem_release(node_tx);
   31d98:	4620      	mov	r0, r4
   31d9a:	f003 f961 	bl	35060 <ll_tx_mem_release>
		return -EINVAL;
   31d9e:	f06f 0015 	mvn.w	r0, #21
   31da2:	e7f1      	b.n	31d88 <hci_acl_handle+0x60>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   31da4:	4b11      	ldr	r3, [pc, #68]	; (31dec <hci_acl_handle+0xc4>)
   31da6:	681b      	ldr	r3, [r3, #0]
   31da8:	019b      	lsls	r3, r3, #6
   31daa:	d402      	bmi.n	31db2 <hci_acl_handle+0x8a>
		return -ENOBUFS;
   31dac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   31db0:	e7ea      	b.n	31d88 <hci_acl_handle+0x60>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   31db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31dba:	2001      	movs	r0, #1
   31dbc:	f7f8 fefa 	bl	2abb4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   31dc0:	2102      	movs	r1, #2
   31dc2:	f8c8 0000 	str.w	r0, [r8]
   31dc6:	3008      	adds	r0, #8
   31dc8:	f015 ff65 	bl	47c96 <net_buf_simple_add>
	hdr->len = len;
   31dcc:	2401      	movs	r4, #1
	hdr->evt = evt;
   31dce:	221a      	movs	r2, #26
   31dd0:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   31dd2:	7044      	strb	r4, [r0, #1]
   31dd4:	f8d8 0000 	ldr.w	r0, [r8]
   31dd8:	4621      	mov	r1, r4
   31dda:	3008      	adds	r0, #8
   31ddc:	f015 ff5b 	bl	47c96 <net_buf_simple_add>
   31de0:	4603      	mov	r3, r0
		return -ENOBUFS;
   31de2:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   31de6:	701c      	strb	r4, [r3, #0]
   31de8:	e7ce      	b.n	31d88 <hci_acl_handle+0x60>
   31dea:	bf00      	nop
   31dec:	20000158 	.word	0x20000158

00031df0 <hci_disconn_complete_encode>:
{
   31df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   31df2:	4b0e      	ldr	r3, [pc, #56]	; (31e2c <hci_disconn_complete_encode+0x3c>)
   31df4:	681b      	ldr	r3, [r3, #0]
   31df6:	06db      	lsls	r3, r3, #27
   31df8:	d400      	bmi.n	31dfc <hci_disconn_complete_encode+0xc>
}
   31dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31dfc:	f102 0408 	add.w	r4, r2, #8
   31e00:	4605      	mov	r5, r0
   31e02:	460e      	mov	r6, r1
   31e04:	4620      	mov	r0, r4
   31e06:	2102      	movs	r1, #2
   31e08:	f015 ff45 	bl	47c96 <net_buf_simple_add>
   31e0c:	4603      	mov	r3, r0
	hdr->len = len;
   31e0e:	2104      	movs	r1, #4
	hdr->evt = evt;
   31e10:	2205      	movs	r2, #5
	hdr->len = len;
   31e12:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   31e14:	701a      	strb	r2, [r3, #0]
   31e16:	4620      	mov	r0, r4
   31e18:	f015 ff3d 	bl	47c96 <net_buf_simple_add>
   31e1c:	2700      	movs	r7, #0
	ep->status = 0x00;
   31e1e:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   31e20:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   31e24:	782b      	ldrb	r3, [r5, #0]
   31e26:	70c3      	strb	r3, [r0, #3]
}
   31e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31e2a:	bf00      	nop
   31e2c:	20000158 	.word	0x20000158

00031e30 <hci_disconn_complete_process>:
	conn_count--;
   31e30:	4a02      	ldr	r2, [pc, #8]	; (31e3c <hci_disconn_complete_process+0xc>)
   31e32:	6813      	ldr	r3, [r2, #0]
   31e34:	3b01      	subs	r3, #1
   31e36:	6013      	str	r3, [r2, #0]
}
   31e38:	4770      	bx	lr
   31e3a:	bf00      	nop
   31e3c:	20001ed4 	.word	0x20001ed4

00031e40 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   31e40:	7f03      	ldrb	r3, [r0, #28]
   31e42:	f003 0303 	and.w	r3, r3, #3
   31e46:	3b01      	subs	r3, #1
   31e48:	2b01      	cmp	r3, #1
{
   31e4a:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
   31e4c:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
   31e4e:	d90d      	bls.n	31e6c <hci_acl_encode+0x2c>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   31e50:	4a15      	ldr	r2, [pc, #84]	; (31ea8 <hci_acl_encode+0x68>)
   31e52:	4916      	ldr	r1, [pc, #88]	; (31eac <hci_acl_encode+0x6c>)
   31e54:	4816      	ldr	r0, [pc, #88]	; (31eb0 <hci_acl_encode+0x70>)
   31e56:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   31e5a:	f010 fef7 	bl	42c4c <printk>
   31e5e:	4040      	eors	r0, r0
   31e60:	f380 8811 	msr	BASEPRI, r0
   31e64:	f04f 0003 	mov.w	r0, #3
   31e68:	df02      	svc	2
		break;
	}
}
   31e6a:	bd70      	pop	{r4, r5, r6, pc}
   31e6c:	4604      	mov	r4, r0
   31e6e:	f101 0508 	add.w	r5, r1, #8
   31e72:	4628      	mov	r0, r5
   31e74:	2104      	movs	r1, #4
   31e76:	f015 ff0e 	bl	47c96 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   31e7a:	7f23      	ldrb	r3, [r4, #28]
   31e7c:	f003 0303 	and.w	r3, r3, #3
   31e80:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   31e82:	bf0c      	ite	eq
   31e84:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   31e88:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   31e8c:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   31e8e:	7f61      	ldrb	r1, [r4, #29]
   31e90:	8041      	strh	r1, [r0, #2]
   31e92:	4628      	mov	r0, r5
   31e94:	f015 feff 	bl	47c96 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   31e98:	7f62      	ldrb	r2, [r4, #29]
   31e9a:	f104 011f 	add.w	r1, r4, #31
}
   31e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   31ea2:	f012 bfae 	b.w	44e02 <memcpy>
   31ea6:	bf00      	nop
   31ea8:	0004a0d0 	.word	0x0004a0d0
   31eac:	0004a084 	.word	0x0004a084
   31eb0:	0004a024 	.word	0x0004a024

00031eb4 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   31eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   31eb8:	f890 c004 	ldrb.w	ip, [r0, #4]
   31ebc:	f1bc 0f03 	cmp.w	ip, #3
{
   31ec0:	b084      	sub	sp, #16
   31ec2:	4604      	mov	r4, r0
   31ec4:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   31ec6:	f100 061c 	add.w	r6, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   31eca:	d00f      	beq.n	31eec <hci_evt_encode+0x38>
	switch (node_rx->hdr.type) {
   31ecc:	f1ac 0c16 	sub.w	ip, ip, #22
   31ed0:	88c7      	ldrh	r7, [r0, #6]
   31ed2:	f1bc 0f06 	cmp.w	ip, #6
   31ed6:	f200 82b0 	bhi.w	3243a <hci_evt_encode+0x586>
   31eda:	e8df f01c 	tbh	[pc, ip, lsl #1]
   31ede:	002c      	.short	0x002c
   31ee0:	008f0087 	.word	0x008f0087
   31ee4:	00bd0022 	.word	0x00bd0022
   31ee8:	00f100d0 	.word	0x00f100d0
	switch (pdu_data->llctrl.opcode) {
   31eec:	7fc3      	ldrb	r3, [r0, #31]
   31eee:	88c7      	ldrh	r7, [r0, #6]
   31ef0:	3b03      	subs	r3, #3
   31ef2:	2b12      	cmp	r3, #18
   31ef4:	f200 811c 	bhi.w	32130 <hci_evt_encode+0x27c>
   31ef8:	e8df f013 	tbh	[pc, r3, lsl #1]
   31efc:	011a015f 	.word	0x011a015f
   31f00:	019c011a 	.word	0x019c011a
   31f04:	011a01b5 	.word	0x011a01b5
   31f08:	011a01e8 	.word	0x011a01e8
   31f0c:	011a011a 	.word	0x011a011a
   31f10:	011a01ed 	.word	0x011a01ed
   31f14:	011a01c3 	.word	0x011a01c3
   31f18:	011a001a 	.word	0x011a001a
   31f1c:	0128011a 	.word	0x0128011a
   31f20:	0128      	.short	0x0128
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   31f22:	4bbd      	ldr	r3, [pc, #756]	; (32218 <hci_evt_encode+0x364>)
   31f24:	685b      	ldr	r3, [r3, #4]
   31f26:	0418      	lsls	r0, r3, #16
   31f28:	f04f 0400 	mov.w	r4, #0
   31f2c:	f100 8135 	bmi.w	3219a <hci_evt_encode+0x2e6>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   31f30:	b004      	add	sp, #16
   31f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   31f36:	07f0      	lsls	r0, r6, #31
   31f38:	f100 81f1 	bmi.w	3231e <hci_evt_encode+0x46a>
	status = cc->status;
   31f3c:	7f26      	ldrb	r6, [r4, #28]
	if (!status) {
   31f3e:	2e00      	cmp	r6, #0
   31f40:	f000 81e4 	beq.w	3230c <hci_evt_encode+0x458>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   31f44:	4bb4      	ldr	r3, [pc, #720]	; (32218 <hci_evt_encode+0x364>)
   31f46:	685b      	ldr	r3, [r3, #4]
   31f48:	0099      	lsls	r1, r3, #2
   31f4a:	d5f1      	bpl.n	31f30 <hci_evt_encode+0x7c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   31f4c:	4bb3      	ldr	r3, [pc, #716]	; (3221c <hci_evt_encode+0x368>)
   31f4e:	681b      	ldr	r3, [r3, #0]
   31f50:	f240 2201 	movw	r2, #513	; 0x201
   31f54:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   31f56:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   31f5a:	d0e9      	beq.n	31f30 <hci_evt_encode+0x7c>
	if (!status) {
   31f5c:	2e00      	cmp	r6, #0
   31f5e:	f040 81f6 	bne.w	3234e <hci_evt_encode+0x49a>
		conn_count++;
   31f62:	4aaf      	ldr	r2, [pc, #700]	; (32220 <hci_evt_encode+0x36c>)
   31f64:	6813      	ldr	r3, [r2, #0]
   31f66:	3301      	adds	r3, #1
   31f68:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   31f6a:	f1b8 0f00 	cmp.w	r8, #0
   31f6e:	f000 820b 	beq.w	32388 <hci_evt_encode+0x4d4>
   31f72:	3508      	adds	r5, #8
   31f74:	2102      	movs	r1, #2
   31f76:	4628      	mov	r0, r5
   31f78:	f015 fe8d 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   31f7c:	233e      	movs	r3, #62	; 0x3e
   31f7e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   31f80:	231f      	movs	r3, #31
   31f82:	7043      	strb	r3, [r0, #1]
   31f84:	2101      	movs	r1, #1
   31f86:	4628      	mov	r0, r5
   31f88:	f015 fe85 	bl	47c96 <net_buf_simple_add>
   31f8c:	4603      	mov	r3, r0
	me->subevent = subevt;
   31f8e:	220a      	movs	r2, #10
   31f90:	701a      	strb	r2, [r3, #0]
   31f92:	4628      	mov	r0, r5
   31f94:	211e      	movs	r1, #30
   31f96:	f015 fe7e 	bl	47c96 <net_buf_simple_add>
		leecc->status = 0x00;
   31f9a:	7006      	strb	r6, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   31f9c:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = cc->role;
   31fa0:	7f63      	ldrb	r3, [r4, #29]
   31fa2:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   31fa4:	7fa3      	ldrb	r3, [r4, #30]
   31fa6:	7103      	strb	r3, [r0, #4]
   31fa8:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   31faa:	2206      	movs	r2, #6
   31fac:	f104 011f 	add.w	r1, r4, #31
   31fb0:	3005      	adds	r0, #5
   31fb2:	f012 ff26 	bl	44e02 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   31fb6:	2206      	movs	r2, #6
   31fb8:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   31fbc:	f105 000b 	add.w	r0, r5, #11
   31fc0:	f012 ff1f 	bl	44e02 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   31fc4:	2206      	movs	r2, #6
   31fc6:	f104 0125 	add.w	r1, r4, #37	; 0x25
   31fca:	f105 0011 	add.w	r0, r5, #17
   31fce:	f012 ff18 	bl	44e02 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   31fd2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   31fd4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   31fd6:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   31fd8:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   31fdc:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   31fe0:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   31fe4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   31fe8:	776b      	strb	r3, [r5, #29]
		return;
   31fea:	e7a1      	b.n	31f30 <hci_evt_encode+0x7c>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   31fec:	460a      	mov	r2, r1
   31fee:	4630      	mov	r0, r6
   31ff0:	4639      	mov	r1, r7
}
   31ff2:	b004      	add	sp, #16
   31ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   31ff8:	f7ff befa 	b.w	31df0 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   31ffc:	4b86      	ldr	r3, [pc, #536]	; (32218 <hci_evt_encode+0x364>)
   31ffe:	685b      	ldr	r3, [r3, #4]
   32000:	009a      	lsls	r2, r3, #2
   32002:	d595      	bpl.n	31f30 <hci_evt_encode+0x7c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   32004:	4b85      	ldr	r3, [pc, #532]	; (3221c <hci_evt_encode+0x368>)
   32006:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32008:	075b      	lsls	r3, r3, #29
   3200a:	d591      	bpl.n	31f30 <hci_evt_encode+0x7c>
   3200c:	3508      	adds	r5, #8
   3200e:	2102      	movs	r1, #2
   32010:	4628      	mov	r0, r5
   32012:	f015 fe40 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   32016:	233e      	movs	r3, #62	; 0x3e
   32018:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   3201a:	230a      	movs	r3, #10
   3201c:	7043      	strb	r3, [r0, #1]
   3201e:	2101      	movs	r1, #1
   32020:	4628      	mov	r0, r5
   32022:	f015 fe38 	bl	47c96 <net_buf_simple_add>
   32026:	4603      	mov	r3, r0
	me->subevent = subevt;
   32028:	2203      	movs	r2, #3
   3202a:	4628      	mov	r0, r5
   3202c:	701a      	strb	r2, [r3, #0]
   3202e:	2109      	movs	r1, #9
   32030:	f015 fe31 	bl	47c96 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   32034:	07f6      	lsls	r6, r6, #31
   32036:	4605      	mov	r5, r0
   32038:	f100 81f1 	bmi.w	3241e <hci_evt_encode+0x56a>
	sep->status = cu->status;
   3203c:	7f23      	ldrb	r3, [r4, #28]
   3203e:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   32040:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   32042:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   32044:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   32046:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   3204a:	f8a5 7001 	strh.w	r7, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   3204e:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   32052:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   32056:	e76b      	b.n	31f30 <hci_evt_encode+0x7c>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   32058:	4b72      	ldr	r3, [pc, #456]	; (32224 <hci_evt_encode+0x370>)
   3205a:	681b      	ldr	r3, [r3, #0]
   3205c:	0219      	lsls	r1, r3, #8
   3205e:	f57f af67 	bpl.w	31f30 <hci_evt_encode+0x7c>
   32062:	3508      	adds	r5, #8
   32064:	2102      	movs	r1, #2
   32066:	4628      	mov	r0, r5
   32068:	f015 fe15 	bl	47c96 <net_buf_simple_add>
	hdr->len = len;
   3206c:	2102      	movs	r1, #2
	hdr->evt = evt;
   3206e:	2357      	movs	r3, #87	; 0x57
   32070:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   32072:	7041      	strb	r1, [r0, #1]
   32074:	4628      	mov	r0, r5
   32076:	f015 fe0e 	bl	47c96 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   3207a:	8007      	strh	r7, [r0, #0]
   3207c:	e758      	b.n	31f30 <hci_evt_encode+0x7c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3207e:	4b66      	ldr	r3, [pc, #408]	; (32218 <hci_evt_encode+0x364>)
   32080:	685b      	ldr	r3, [r3, #4]
   32082:	009a      	lsls	r2, r3, #2
   32084:	f57f af54 	bpl.w	31f30 <hci_evt_encode+0x7c>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   32088:	4b64      	ldr	r3, [pc, #400]	; (3221c <hci_evt_encode+0x368>)
   3208a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3208c:	031b      	lsls	r3, r3, #12
   3208e:	f57f af4f 	bpl.w	31f30 <hci_evt_encode+0x7c>
   32092:	3508      	adds	r5, #8
   32094:	2102      	movs	r1, #2
   32096:	4628      	mov	r0, r5
   32098:	f015 fdfd 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   3209c:	233e      	movs	r3, #62	; 0x3e
   3209e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   320a0:	2304      	movs	r3, #4
   320a2:	7043      	strb	r3, [r0, #1]
   320a4:	2101      	movs	r1, #1
   320a6:	4628      	mov	r0, r5
   320a8:	f015 fdf5 	bl	47c96 <net_buf_simple_add>
	me->subevent = subevt;
   320ac:	2314      	movs	r3, #20
   320ae:	7003      	strb	r3, [r0, #0]
   320b0:	2103      	movs	r1, #3
   320b2:	4628      	mov	r0, r5
   320b4:	f015 fdef 	bl	47c96 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   320b8:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   320ba:	7f23      	ldrb	r3, [r4, #28]
   320bc:	7083      	strb	r3, [r0, #2]
   320be:	e737      	b.n	31f30 <hci_evt_encode+0x7c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   320c0:	4b55      	ldr	r3, [pc, #340]	; (32218 <hci_evt_encode+0x364>)
   320c2:	685b      	ldr	r3, [r3, #4]
   320c4:	009e      	lsls	r6, r3, #2
   320c6:	f57f af33 	bpl.w	31f30 <hci_evt_encode+0x7c>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   320ca:	4b54      	ldr	r3, [pc, #336]	; (3221c <hci_evt_encode+0x368>)
   320cc:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   320ce:	0518      	lsls	r0, r3, #20
   320d0:	f57f af2e 	bpl.w	31f30 <hci_evt_encode+0x7c>
   320d4:	3508      	adds	r5, #8
   320d6:	2102      	movs	r1, #2
   320d8:	4628      	mov	r0, r5
   320da:	f015 fddc 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   320de:	233e      	movs	r3, #62	; 0x3e
   320e0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   320e2:	2306      	movs	r3, #6
   320e4:	7043      	strb	r3, [r0, #1]
   320e6:	2101      	movs	r1, #1
   320e8:	4628      	mov	r0, r5
   320ea:	f015 fdd4 	bl	47c96 <net_buf_simple_add>
	me->subevent = subevt;
   320ee:	230c      	movs	r3, #12
   320f0:	7003      	strb	r3, [r0, #0]
   320f2:	2105      	movs	r1, #5
   320f4:	4628      	mov	r0, r5
   320f6:	f015 fdce 	bl	47c96 <net_buf_simple_add>
	sep->status = pu->status;
   320fa:	7f23      	ldrb	r3, [r4, #28]
   320fc:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   320fe:	f8a0 7001 	strh.w	r7, [r0, #1]
   32102:	7f62      	ldrb	r2, [r4, #29]
   32104:	2a00      	cmp	r2, #0
   32106:	fa92 f3a2 	rbit	r3, r2
   3210a:	fab3 f383 	clz	r3, r3
   3210e:	bf08      	it	eq
   32110:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   32114:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   32116:	70c3      	strb	r3, [r0, #3]
   32118:	7fa2      	ldrb	r2, [r4, #30]
   3211a:	fa92 f3a2 	rbit	r3, r2
   3211e:	2a00      	cmp	r2, #0
   32120:	fab3 f383 	clz	r3, r3
   32124:	bf08      	it	eq
   32126:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   3212a:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   3212c:	7103      	strb	r3, [r0, #4]
   3212e:	e6ff      	b.n	31f30 <hci_evt_encode+0x7c>
		LL_ASSERT(0);
   32130:	4a3d      	ldr	r2, [pc, #244]	; (32228 <hci_evt_encode+0x374>)
   32132:	493e      	ldr	r1, [pc, #248]	; (3222c <hci_evt_encode+0x378>)
   32134:	483e      	ldr	r0, [pc, #248]	; (32230 <hci_evt_encode+0x37c>)
   32136:	f641 538f 	movw	r3, #7567	; 0x1d8f
   3213a:	f010 fd87 	bl	42c4c <printk>
   3213e:	4040      	eors	r0, r0
   32140:	f380 8811 	msr	BASEPRI, r0
   32144:	f04f 0003 	mov.w	r0, #3
   32148:	df02      	svc	2
}
   3214a:	e6f1      	b.n	31f30 <hci_evt_encode+0x7c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3214c:	4b32      	ldr	r3, [pc, #200]	; (32218 <hci_evt_encode+0x364>)
   3214e:	685b      	ldr	r3, [r3, #4]
   32150:	009a      	lsls	r2, r3, #2
   32152:	f57f aeed 	bpl.w	31f30 <hci_evt_encode+0x7c>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   32156:	4b31      	ldr	r3, [pc, #196]	; (3221c <hci_evt_encode+0x368>)
   32158:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3215a:	065b      	lsls	r3, r3, #25
   3215c:	f57f aee8 	bpl.w	31f30 <hci_evt_encode+0x7c>
   32160:	3508      	adds	r5, #8
   32162:	2102      	movs	r1, #2
   32164:	4628      	mov	r0, r5
   32166:	f015 fd96 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   3216a:	233e      	movs	r3, #62	; 0x3e
   3216c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   3216e:	230b      	movs	r3, #11
   32170:	7043      	strb	r3, [r0, #1]
   32172:	2101      	movs	r1, #1
   32174:	4628      	mov	r0, r5
   32176:	f015 fd8e 	bl	47c96 <net_buf_simple_add>
	me->subevent = subevt;
   3217a:	2307      	movs	r3, #7
   3217c:	7003      	strb	r3, [r0, #0]
   3217e:	210a      	movs	r1, #10
   32180:	4628      	mov	r0, r5
   32182:	f015 fd88 	bl	47c96 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   32186:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   32188:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   3218a:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   3218c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   3218e:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   32190:	8c23      	ldrh	r3, [r4, #32]
   32192:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   32194:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   32196:	8103      	strh	r3, [r0, #8]
   32198:	e6ca      	b.n	31f30 <hci_evt_encode+0x7c>
   3219a:	3508      	adds	r5, #8
   3219c:	2102      	movs	r1, #2
   3219e:	4628      	mov	r0, r5
   321a0:	f015 fd79 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   321a4:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
   321a6:	2103      	movs	r1, #3
	hdr->evt = evt;
   321a8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   321aa:	7041      	strb	r1, [r0, #1]
   321ac:	4628      	mov	r0, r5
   321ae:	f015 fd72 	bl	47c96 <net_buf_simple_add>
	ep->status = 0x00;
   321b2:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   321b4:	f8a0 7001 	strh.w	r7, [r0, #1]
   321b8:	e6ba      	b.n	31f30 <hci_evt_encode+0x7c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   321ba:	4b17      	ldr	r3, [pc, #92]	; (32218 <hci_evt_encode+0x364>)
   321bc:	685b      	ldr	r3, [r3, #4]
   321be:	0099      	lsls	r1, r3, #2
   321c0:	f57f aeb6 	bpl.w	31f30 <hci_evt_encode+0x7c>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   321c4:	4b15      	ldr	r3, [pc, #84]	; (3221c <hci_evt_encode+0x368>)
   321c6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   321c8:	06da      	lsls	r2, r3, #27
   321ca:	f57f aeb1 	bpl.w	31f30 <hci_evt_encode+0x7c>
   321ce:	3508      	adds	r5, #8
   321d0:	2102      	movs	r1, #2
   321d2:	4628      	mov	r0, r5
   321d4:	f015 fd5f 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   321d8:	233e      	movs	r3, #62	; 0x3e
   321da:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   321dc:	230d      	movs	r3, #13
   321de:	7043      	strb	r3, [r0, #1]
   321e0:	2101      	movs	r1, #1
   321e2:	4628      	mov	r0, r5
   321e4:	f015 fd57 	bl	47c96 <net_buf_simple_add>
	me->subevent = subevt;
   321e8:	2305      	movs	r3, #5
   321ea:	7003      	strb	r3, [r0, #0]
   321ec:	210c      	movs	r1, #12
   321ee:	4628      	mov	r0, r5
   321f0:	f015 fd51 	bl	47c96 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   321f4:	f104 0120 	add.w	r1, r4, #32
   321f8:	4605      	mov	r5, r0
   321fa:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   321fc:	f820 7b02 	strh.w	r7, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   32200:	f012 fdff 	bl	44e02 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   32204:	2202      	movs	r2, #2
   32206:	f104 0128 	add.w	r1, r4, #40	; 0x28
   3220a:	f105 000a 	add.w	r0, r5, #10
}
   3220e:	b004      	add	sp, #16
   32210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   32214:	f012 bdf5 	b.w	44e02 <memcpy>
   32218:	20000158 	.word	0x20000158
   3221c:	20000160 	.word	0x20000160
   32220:	20001ed4 	.word	0x20001ed4
   32224:	20001530 	.word	0x20001530
   32228:	0004a0d0 	.word	0x0004a0d0
   3222c:	0004a084 	.word	0x0004a084
   32230:	0004a024 	.word	0x0004a024
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   32234:	4b88      	ldr	r3, [pc, #544]	; (32458 <hci_evt_encode+0x5a4>)
   32236:	681b      	ldr	r3, [r3, #0]
   32238:	061b      	lsls	r3, r3, #24
   3223a:	f04f 0400 	mov.w	r4, #0
   3223e:	f57f ae77 	bpl.w	31f30 <hci_evt_encode+0x7c>
   32242:	3508      	adds	r5, #8
   32244:	2102      	movs	r1, #2
   32246:	4628      	mov	r0, r5
   32248:	f015 fd25 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   3224c:	2308      	movs	r3, #8
	hdr->len = len;
   3224e:	2104      	movs	r1, #4
	hdr->evt = evt;
   32250:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   32252:	7041      	strb	r1, [r0, #1]
   32254:	4628      	mov	r0, r5
   32256:	f015 fd1e 	bl	47c96 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   3225a:	2301      	movs	r3, #1
	ep->status = err;
   3225c:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   3225e:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   32262:	70c3      	strb	r3, [r0, #3]
   32264:	e664      	b.n	31f30 <hci_evt_encode+0x7c>
	switch (pdu_data->llctrl.unknown_rsp.type) {
   32266:	f890 3020 	ldrb.w	r3, [r0, #32]
   3226a:	2b0e      	cmp	r3, #14
   3226c:	f47f ae60 	bne.w	31f30 <hci_evt_encode+0x7c>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   32270:	460b      	mov	r3, r1
   32272:	463a      	mov	r2, r7
   32274:	2100      	movs	r1, #0
   32276:	201a      	movs	r0, #26
}
   32278:	b004      	add	sp, #16
   3227a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   3227e:	f7fe bfe1 	b.w	31244 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   32282:	4b75      	ldr	r3, [pc, #468]	; (32458 <hci_evt_encode+0x5a4>)
   32284:	685b      	ldr	r3, [r3, #4]
   32286:	0098      	lsls	r0, r3, #2
   32288:	d557      	bpl.n	3233a <hci_evt_encode+0x486>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   3228a:	4b74      	ldr	r3, [pc, #464]	; (3245c <hci_evt_encode+0x5a8>)
   3228c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3228e:	0699      	lsls	r1, r3, #26
   32290:	d553      	bpl.n	3233a <hci_evt_encode+0x486>
   32292:	3508      	adds	r5, #8
   32294:	2102      	movs	r1, #2
   32296:	4628      	mov	r0, r5
   32298:	f015 fcfd 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   3229c:	233e      	movs	r3, #62	; 0x3e
   3229e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   322a0:	230b      	movs	r3, #11
   322a2:	7043      	strb	r3, [r0, #1]
   322a4:	2101      	movs	r1, #1
   322a6:	4628      	mov	r0, r5
   322a8:	f015 fcf5 	bl	47c96 <net_buf_simple_add>
	me->subevent = subevt;
   322ac:	2306      	movs	r3, #6
   322ae:	7003      	strb	r3, [r0, #0]
   322b0:	210a      	movs	r1, #10
   322b2:	4628      	mov	r0, r5
   322b4:	f015 fcef 	bl	47c96 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   322b8:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   322ba:	8c23      	ldrh	r3, [r4, #32]
   322bc:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   322be:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   322c0:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   322c2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   322c4:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   322c6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   322c8:	8103      	strh	r3, [r0, #8]
   322ca:	e631      	b.n	31f30 <hci_evt_encode+0x7c>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   322cc:	460b      	mov	r3, r1
   322ce:	463a      	mov	r2, r7
   322d0:	4631      	mov	r1, r6
   322d2:	2000      	movs	r0, #0
   322d4:	e7d0      	b.n	32278 <hci_evt_encode+0x3c4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   322d6:	4b60      	ldr	r3, [pc, #384]	; (32458 <hci_evt_encode+0x5a4>)
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   322d8:	f890 4020 	ldrb.w	r4, [r0, #32]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   322dc:	681b      	ldr	r3, [r3, #0]
   322de:	061e      	lsls	r6, r3, #24
   322e0:	f57f ae26 	bpl.w	31f30 <hci_evt_encode+0x7c>
   322e4:	3508      	adds	r5, #8
   322e6:	2102      	movs	r1, #2
   322e8:	4628      	mov	r0, r5
   322ea:	f015 fcd4 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   322ee:	2308      	movs	r3, #8
	hdr->len = len;
   322f0:	2104      	movs	r1, #4
	hdr->evt = evt;
   322f2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   322f4:	7041      	strb	r1, [r0, #1]
   322f6:	4628      	mov	r0, r5
   322f8:	f015 fccd 	bl	47c96 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   322fc:	fab4 f384 	clz	r3, r4
   32300:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   32302:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   32304:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   32308:	70c3      	strb	r3, [r0, #3]
   3230a:	e611      	b.n	31f30 <hci_evt_encode+0x7c>
		ll_rl_crpa_set(cc->peer_addr_type,
   3230c:	7fa0      	ldrb	r0, [r4, #30]
   3230e:	f104 0325 	add.w	r3, r4, #37	; 0x25
   32312:	22ff      	movs	r2, #255	; 0xff
   32314:	f104 011f 	add.w	r1, r4, #31
   32318:	f007 fa3c 	bl	39794 <ll_rl_crpa_set>
   3231c:	e612      	b.n	31f44 <hci_evt_encode+0x90>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   3231e:	4a50      	ldr	r2, [pc, #320]	; (32460 <hci_evt_encode+0x5ac>)
   32320:	4950      	ldr	r1, [pc, #320]	; (32464 <hci_evt_encode+0x5b0>)
   32322:	4851      	ldr	r0, [pc, #324]	; (32468 <hci_evt_encode+0x5b4>)
   32324:	f641 23f5 	movw	r3, #6901	; 0x1af5
   32328:	f010 fc90 	bl	42c4c <printk>
   3232c:	4040      	eors	r0, r0
   3232e:	f380 8811 	msr	BASEPRI, r0
   32332:	f04f 0003 	mov.w	r0, #3
   32336:	df02      	svc	2
   32338:	e600      	b.n	31f3c <hci_evt_encode+0x88>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   3233a:	2300      	movs	r3, #0
   3233c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   32340:	9300      	str	r3, [sp, #0]
   32342:	221a      	movs	r2, #26
   32344:	2102      	movs	r1, #2
   32346:	4638      	mov	r0, r7
   32348:	f002 feda 	bl	35100 <ll_conn_update>
		return;
   3234c:	e5f0      	b.n	31f30 <hci_evt_encode+0x7c>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   3234e:	f1b8 0f00 	cmp.w	r8, #0
   32352:	d14a      	bne.n	323ea <hci_evt_encode+0x536>
   32354:	3508      	adds	r5, #8
   32356:	2102      	movs	r1, #2
   32358:	4628      	mov	r0, r5
   3235a:	f015 fc9c 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   3235e:	233e      	movs	r3, #62	; 0x3e
   32360:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   32362:	2313      	movs	r3, #19
   32364:	7043      	strb	r3, [r0, #1]
   32366:	2101      	movs	r1, #1
   32368:	4628      	mov	r0, r5
   3236a:	f015 fc94 	bl	47c96 <net_buf_simple_add>
	me->subevent = subevt;
   3236e:	2301      	movs	r3, #1
   32370:	7003      	strb	r3, [r0, #0]
   32372:	2112      	movs	r1, #18
   32374:	4628      	mov	r0, r5
   32376:	f015 fc8e 	bl	47c96 <net_buf_simple_add>
   3237a:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   3237c:	2212      	movs	r2, #18
   3237e:	4641      	mov	r1, r8
   32380:	f012 fd4a 	bl	44e18 <memset>
		lecc->status = status;
   32384:	7026      	strb	r6, [r4, #0]
		return;
   32386:	e5d3      	b.n	31f30 <hci_evt_encode+0x7c>
   32388:	3508      	adds	r5, #8
   3238a:	2102      	movs	r1, #2
   3238c:	4628      	mov	r0, r5
   3238e:	f015 fc82 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   32392:	233e      	movs	r3, #62	; 0x3e
   32394:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   32396:	2313      	movs	r3, #19
   32398:	7043      	strb	r3, [r0, #1]
   3239a:	2101      	movs	r1, #1
   3239c:	4628      	mov	r0, r5
   3239e:	f015 fc7a 	bl	47c96 <net_buf_simple_add>
   323a2:	4603      	mov	r3, r0
	me->subevent = subevt;
   323a4:	2201      	movs	r2, #1
   323a6:	701a      	strb	r2, [r3, #0]
   323a8:	4628      	mov	r0, r5
   323aa:	2112      	movs	r1, #18
   323ac:	f015 fc73 	bl	47c96 <net_buf_simple_add>
	lecc->status = 0x00;
   323b0:	7006      	strb	r6, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   323b2:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
   323b6:	7f63      	ldrb	r3, [r4, #29]
   323b8:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   323ba:	7fa3      	ldrb	r3, [r4, #30]
   323bc:	f003 0301 	and.w	r3, r3, #1
   323c0:	4605      	mov	r5, r0
   323c2:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   323c4:	2206      	movs	r2, #6
   323c6:	f104 011f 	add.w	r1, r4, #31
   323ca:	3005      	adds	r0, #5
   323cc:	f012 fd19 	bl	44e02 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   323d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   323d2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   323d4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   323d6:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   323da:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   323de:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   323e2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   323e6:	746b      	strb	r3, [r5, #17]
   323e8:	e5a2      	b.n	31f30 <hci_evt_encode+0x7c>
   323ea:	3508      	adds	r5, #8
   323ec:	2102      	movs	r1, #2
   323ee:	4628      	mov	r0, r5
   323f0:	f015 fc51 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   323f4:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   323f6:	231f      	movs	r3, #31
	hdr->evt = evt;
   323f8:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   323fa:	7043      	strb	r3, [r0, #1]
   323fc:	2101      	movs	r1, #1
   323fe:	4628      	mov	r0, r5
   32400:	f015 fc49 	bl	47c96 <net_buf_simple_add>
	me->subevent = subevt;
   32404:	230a      	movs	r3, #10
   32406:	7003      	strb	r3, [r0, #0]
   32408:	211e      	movs	r1, #30
   3240a:	4628      	mov	r0, r5
   3240c:	f015 fc43 	bl	47c96 <net_buf_simple_add>
   32410:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   32412:	221e      	movs	r2, #30
   32414:	2100      	movs	r1, #0
   32416:	f012 fcff 	bl	44e18 <memset>
			leecc->status = status;
   3241a:	7026      	strb	r6, [r4, #0]
			return;
   3241c:	e588      	b.n	31f30 <hci_evt_encode+0x7c>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3241e:	4a10      	ldr	r2, [pc, #64]	; (32460 <hci_evt_encode+0x5ac>)
   32420:	4912      	ldr	r1, [pc, #72]	; (3246c <hci_evt_encode+0x5b8>)
   32422:	4811      	ldr	r0, [pc, #68]	; (32468 <hci_evt_encode+0x5b4>)
   32424:	f641 337a 	movw	r3, #7034	; 0x1b7a
   32428:	f010 fc10 	bl	42c4c <printk>
   3242c:	4040      	eors	r0, r0
   3242e:	f380 8811 	msr	BASEPRI, r0
   32432:	f04f 0003 	mov.w	r0, #3
   32436:	df02      	svc	2
   32438:	e600      	b.n	3203c <hci_evt_encode+0x188>
		LL_ASSERT(0);
   3243a:	4a09      	ldr	r2, [pc, #36]	; (32460 <hci_evt_encode+0x5ac>)
   3243c:	490c      	ldr	r1, [pc, #48]	; (32470 <hci_evt_encode+0x5bc>)
   3243e:	480a      	ldr	r0, [pc, #40]	; (32468 <hci_evt_encode+0x5b4>)
   32440:	f641 43af 	movw	r3, #7343	; 0x1caf
   32444:	f010 fc02 	bl	42c4c <printk>
   32448:	4040      	eors	r0, r0
   3244a:	f380 8811 	msr	BASEPRI, r0
   3244e:	f04f 0003 	mov.w	r0, #3
   32452:	df02      	svc	2
		return;
   32454:	e56c      	b.n	31f30 <hci_evt_encode+0x7c>
   32456:	bf00      	nop
   32458:	20000158 	.word	0x20000158
   3245c:	20000160 	.word	0x20000160
   32460:	0004a0d0 	.word	0x0004a0d0
   32464:	0004a10c 	.word	0x0004a10c
   32468:	0004a024 	.word	0x0004a024
   3246c:	0004a148 	.word	0x0004a148
   32470:	0004a084 	.word	0x0004a084

00032474 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   32474:	b570      	push	{r4, r5, r6, lr}
   32476:	f100 0408 	add.w	r4, r0, #8
   3247a:	460e      	mov	r6, r1
   3247c:	4620      	mov	r0, r4
   3247e:	2102      	movs	r1, #2
   32480:	4615      	mov	r5, r2
   32482:	f015 fc08 	bl	47c96 <net_buf_simple_add>
	hdr->evt = evt;
   32486:	2313      	movs	r3, #19
	hdr->len = len;
   32488:	2105      	movs	r1, #5
	hdr->evt = evt;
   3248a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   3248c:	7041      	strb	r1, [r0, #1]
   3248e:	4620      	mov	r0, r4
   32490:	f015 fc01 	bl	47c96 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   32494:	2301      	movs	r3, #1
   32496:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   32498:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   3249c:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   324a0:	bd70      	pop	{r4, r5, r6, pc}
   324a2:	bf00      	nop

000324a4 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   324a4:	7903      	ldrb	r3, [r0, #4]
   324a6:	2b03      	cmp	r3, #3
   324a8:	d009      	beq.n	324be <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   324aa:	2b16      	cmp	r3, #22
   324ac:	d005      	beq.n	324ba <hci_get_class+0x16>
   324ae:	3b17      	subs	r3, #23
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
   324b0:	2b05      	cmp	r3, #5
   324b2:	bf94      	ite	ls
   324b4:	2003      	movls	r0, #3
   324b6:	2000      	movhi	r0, #0
   324b8:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   324ba:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   324bc:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   324be:	7f03      	ldrb	r3, [r0, #28]
   324c0:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   324c4:	2b03      	cmp	r3, #3
   324c6:	bf0c      	ite	eq
   324c8:	2004      	moveq	r0, #4
   324ca:	2005      	movne	r0, #5
   324cc:	4770      	bx	lr
   324ce:	bf00      	nop

000324d0 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   324d0:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   324d2:	4b0b      	ldr	r3, [pc, #44]	; (32500 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   324d4:	490b      	ldr	r1, [pc, #44]	; (32504 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   324d6:	4a0c      	ldr	r2, [pc, #48]	; (32508 <hci_init+0x38>)
	event_mask = DEFAULT_EVENT_MASK;
   324d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   324dc:	f641 75ff 	movw	r5, #8191	; 0x1fff
   324e0:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   324e4:	2400      	movs	r4, #0
   324e6:	2500      	movs	r5, #0
   324e8:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   324ec:	4b07      	ldr	r3, [pc, #28]	; (3250c <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   324ee:	201f      	movs	r0, #31
   324f0:	2100      	movs	r1, #0
   324f2:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
   324f6:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   324f8:	bc30      	pop	{r4, r5}
	conn_count = 0U;
   324fa:	601a      	str	r2, [r3, #0]
}
   324fc:	4770      	bx	lr
   324fe:	bf00      	nop
   32500:	20000158 	.word	0x20000158
   32504:	20001530 	.word	0x20001530
   32508:	20000160 	.word	0x20000160
   3250c:	20001ed4 	.word	0x20001ed4

00032510 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   32510:	f008 b8bc 	b.w	3a68c <lll_csrand_get>

00032514 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   32514:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   32516:	2300      	movs	r3, #0
   32518:	f009 feba 	bl	3c290 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   3251c:	2000      	movs	r0, #0
   3251e:	bd08      	pop	{r3, pc}

00032520 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   32520:	4801      	ldr	r0, [pc, #4]	; (32528 <ll_feat_get+0x8>)
   32522:	2100      	movs	r1, #0
   32524:	4770      	bx	lr
   32526:	bf00      	nop
   32528:	0001417f 	.word	0x0001417f

0003252c <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   3252c:	b510      	push	{r4, lr}
   3252e:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   32530:	f008 f8e2 	bl	3a6f8 <lll_reset>
	LL_ASSERT(!err);
   32534:	b950      	cbnz	r0, 3254c <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   32536:	f008 fcdf 	bl	3aef8 <lll_adv_reset>
	LL_ASSERT(!err);
   3253a:	b9c0      	cbnz	r0, 3256e <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   3253c:	f009 f98c 	bl	3b858 <lll_conn_reset>
	LL_ASSERT(!err);
   32540:	bb30      	cbnz	r0, 32590 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   32542:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   32544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32548:	f00f b852 	b.w	415f0 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   3254c:	4a19      	ldr	r2, [pc, #100]	; (325b4 <perform_lll_reset+0x88>)
   3254e:	491a      	ldr	r1, [pc, #104]	; (325b8 <perform_lll_reset+0x8c>)
   32550:	481a      	ldr	r0, [pc, #104]	; (325bc <perform_lll_reset+0x90>)
   32552:	f640 0324 	movw	r3, #2084	; 0x824
   32556:	f010 fb79 	bl	42c4c <printk>
   3255a:	4040      	eors	r0, r0
   3255c:	f380 8811 	msr	BASEPRI, r0
   32560:	f04f 0003 	mov.w	r0, #3
   32564:	df02      	svc	2
	err = lll_adv_reset();
   32566:	f008 fcc7 	bl	3aef8 <lll_adv_reset>
	LL_ASSERT(!err);
   3256a:	2800      	cmp	r0, #0
   3256c:	d0e6      	beq.n	3253c <perform_lll_reset+0x10>
   3256e:	4a11      	ldr	r2, [pc, #68]	; (325b4 <perform_lll_reset+0x88>)
   32570:	4911      	ldr	r1, [pc, #68]	; (325b8 <perform_lll_reset+0x8c>)
   32572:	4812      	ldr	r0, [pc, #72]	; (325bc <perform_lll_reset+0x90>)
   32574:	f640 0329 	movw	r3, #2089	; 0x829
   32578:	f010 fb68 	bl	42c4c <printk>
   3257c:	4040      	eors	r0, r0
   3257e:	f380 8811 	msr	BASEPRI, r0
   32582:	f04f 0003 	mov.w	r0, #3
   32586:	df02      	svc	2
	err = lll_conn_reset();
   32588:	f009 f966 	bl	3b858 <lll_conn_reset>
	LL_ASSERT(!err);
   3258c:	2800      	cmp	r0, #0
   3258e:	d0d8      	beq.n	32542 <perform_lll_reset+0x16>
   32590:	4a08      	ldr	r2, [pc, #32]	; (325b4 <perform_lll_reset+0x88>)
   32592:	4909      	ldr	r1, [pc, #36]	; (325b8 <perform_lll_reset+0x8c>)
   32594:	4809      	ldr	r0, [pc, #36]	; (325bc <perform_lll_reset+0x90>)
   32596:	f640 0335 	movw	r3, #2101	; 0x835
   3259a:	f010 fb57 	bl	42c4c <printk>
   3259e:	4040      	eors	r0, r0
   325a0:	f380 8811 	msr	BASEPRI, r0
   325a4:	f04f 0003 	mov.w	r0, #3
   325a8:	df02      	svc	2
   325aa:	4620      	mov	r0, r4
}
   325ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   325b0:	f00f b81e 	b.w	415f0 <z_impl_k_sem_give>
   325b4:	0004a184 	.word	0x0004a184
   325b8:	0004a1c0 	.word	0x0004a1c0
   325bc:	0004a024 	.word	0x0004a024

000325c0 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   325c0:	6008      	str	r0, [r1, #0]
   325c2:	4801      	ldr	r0, [pc, #4]	; (325c8 <ull_ticker_status_give+0x8>)
   325c4:	f00f b814 	b.w	415f0 <z_impl_k_sem_give>
   325c8:	20002188 	.word	0x20002188

000325cc <disabled_cb>:
   325cc:	f00f b810 	b.w	415f0 <z_impl_k_sem_give>

000325d0 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   325d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   325d4:	4d2c      	ldr	r5, [pc, #176]	; (32688 <tx_cmplt_get+0xb8>)
{
   325d6:	460c      	mov	r4, r1
   325d8:	4691      	mov	r9, r2
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
   325da:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   325dc:	7822      	ldrb	r2, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   325de:	782b      	ldrb	r3, [r5, #0]
   325e0:	4291      	cmp	r1, r2
   325e2:	bf9c      	itt	ls
   325e4:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
   325e6:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   325e8:	4591      	cmp	r9, r2
{
   325ea:	4682      	mov	sl, r0
   325ec:	d043      	beq.n	32676 <tx_cmplt_get+0xa6>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   325ee:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   325f2:	3201      	adds	r2, #1
   325f4:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   325f6:	4f25      	ldr	r7, [pc, #148]	; (3268c <tx_cmplt_get+0xbc>)
		i = 0U;
   325f8:	4291      	cmp	r1, r2
   325fa:	bf08      	it	eq
   325fc:	2200      	moveq	r2, #0

	*idx = i;
   325fe:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   32600:	5afa      	ldrh	r2, [r7, r3]
   32602:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   32604:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   32606:	443b      	add	r3, r7
   32608:	f04f 0802 	mov.w	r8, #2
   3260c:	f04f 0b01 	mov.w	fp, #1
   32610:	e01d      	b.n	3264e <tx_cmplt_get+0x7e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
   32612:	3601      	adds	r6, #1
   32614:	f8c3 b004 	str.w	fp, [r3, #4]
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
   32618:	f030 0303 	bics.w	r3, r0, #3
			cmplt++;
   3261c:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   3261e:	d124      	bne.n	3266a <tx_cmplt_get+0x9a>
	if (*idx >= count) {
   32620:	7823      	ldrb	r3, [r4, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
   32622:	7869      	ldrb	r1, [r5, #1]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   32624:	7828      	ldrb	r0, [r5, #0]
   32626:	4299      	cmp	r1, r3
   32628:	bf9c      	itt	ls
   3262a:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
   3262c:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   3262e:	454b      	cmp	r3, r9
   32630:	d022      	beq.n	32678 <tx_cmplt_get+0xa8>
	i = *idx + 1;
   32632:	1c5a      	adds	r2, r3, #1
   32634:	b2d2      	uxtb	r2, r2
		i = 0U;
   32636:	4291      	cmp	r1, r2
   32638:	bf08      	it	eq
   3263a:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   3263c:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   32640:	7022      	strb	r2, [r4, #0]
					    last, first);
	} while (tx && tx->handle == *handle);
   32642:	5af9      	ldrh	r1, [r7, r3]
   32644:	f8ba 2000 	ldrh.w	r2, [sl]
   32648:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   3264a:	443b      	add	r3, r7
   3264c:	d114      	bne.n	32678 <tx_cmplt_get+0xa8>
		node_tx = tx->node;
   3264e:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   32650:	2801      	cmp	r0, #1
   32652:	d9de      	bls.n	32612 <tx_cmplt_get+0x42>
   32654:	f030 0203 	bics.w	r2, r0, #3
   32658:	d00a      	beq.n	32670 <tx_cmplt_get+0xa0>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   3265a:	7902      	ldrb	r2, [r0, #4]
   3265c:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   32660:	3a01      	subs	r2, #1
   32662:	2a01      	cmp	r2, #1
   32664:	d90b      	bls.n	3267e <tx_cmplt_get+0xae>
   32666:	f8c3 8004 	str.w	r8, [r3, #4]
			ll_tx_mem_release(node_tx);
   3266a:	f002 fcf9 	bl	35060 <ll_tx_mem_release>
   3266e:	e7d7      	b.n	32620 <tx_cmplt_get+0x50>
   32670:	f8c3 8004 	str.w	r8, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   32674:	e7d4      	b.n	32620 <tx_cmplt_get+0x50>
		return 0;
   32676:	2600      	movs	r6, #0

	return cmplt;
}
   32678:	4630      	mov	r0, r6
   3267a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   3267e:	3601      	adds	r6, #1
   32680:	f8c3 b004 	str.w	fp, [r3, #4]
   32684:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   32686:	e7f0      	b.n	3266a <tx_cmplt_get+0x9a>
   32688:	2000063c 	.word	0x2000063c
   3268c:	20000640 	.word	0x20000640

00032690 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   32690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32694:	4e3c      	ldr	r6, [pc, #240]	; (32788 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   32696:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 3278c <ull_done+0xfc>
   3269a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 32790 <ull_done+0x100>
{
   3269e:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   326a0:	e9d6 0100 	ldrd	r0, r1, [r6]
   326a4:	aa01      	add	r2, sp, #4
   326a6:	f7fd f97d 	bl	2f9a4 <memq_peek>
		if (link) {
   326aa:	4604      	mov	r4, r0
   326ac:	2800      	cmp	r0, #0
   326ae:	d03e      	beq.n	3272e <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   326b0:	6870      	ldr	r0, [r6, #4]
   326b2:	2200      	movs	r2, #0
   326b4:	4631      	mov	r1, r6
   326b6:	f7fd f97d 	bl	2f9b4 <memq_dequeue>
			rx_demux_event_done(link, done);
   326ba:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   326bc:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   326be:	b135      	cbz	r5, 326ce <ull_done+0x3e>
	return hdr->ref;
   326c0:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   326c2:	2b00      	cmp	r3, #0
   326c4:	d052      	beq.n	3276c <ull_done+0xdc>
	return hdr->ref--;
   326c6:	782b      	ldrb	r3, [r5, #0]
   326c8:	3b01      	subs	r3, #1
   326ca:	b2db      	uxtb	r3, r3
   326cc:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   326ce:	f897 3020 	ldrb.w	r3, [r7, #32]
   326d2:	b123      	cbz	r3, 326de <ull_done+0x4e>
   326d4:	2b01      	cmp	r3, #1
   326d6:	d13b      	bne.n	32750 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   326d8:	4638      	mov	r0, r7
   326da:	f005 ff77 	bl	385cc <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   326de:	4a2d      	ldr	r2, [pc, #180]	; (32794 <ull_done+0x104>)
	last = last + 1;
   326e0:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   326e2:	f892 c001 	ldrb.w	ip, [r2, #1]
   326e6:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   326e8:	3301      	adds	r3, #1
	done->extra.type = 0U;
   326ea:	2100      	movs	r1, #0
   326ec:	b2db      	uxtb	r3, r3
		last = 0U;
   326ee:	459c      	cmp	ip, r3
   326f0:	bf08      	it	eq
   326f2:	460b      	moveq	r3, r1
	if (last == first) {
   326f4:	4298      	cmp	r0, r3
   326f6:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
   326fa:	7811      	ldrb	r1, [r2, #0]
   326fc:	d01a      	beq.n	32734 <ull_done+0xa4>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   326fe:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32700:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32702:	fb00 2101 	mla	r1, r0, r1, r2
   32706:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   32708:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   3270a:	2d00      	cmp	r5, #0
   3270c:	d0c8      	beq.n	326a0 <ull_done+0x10>
	return hdr->ref;
   3270e:	782b      	ldrb	r3, [r5, #0]
   32710:	2b00      	cmp	r3, #0
   32712:	d1c5      	bne.n	326a0 <ull_done+0x10>
   32714:	696b      	ldr	r3, [r5, #20]
   32716:	2b00      	cmp	r3, #0
   32718:	d0c2      	beq.n	326a0 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   3271a:	69a8      	ldr	r0, [r5, #24]
   3271c:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   3271e:	e9d6 0100 	ldrd	r0, r1, [r6]
   32722:	aa01      	add	r2, sp, #4
   32724:	f7fd f93e 	bl	2f9a4 <memq_peek>
		if (link) {
   32728:	4604      	mov	r4, r0
   3272a:	2800      	cmp	r0, #0
   3272c:	d1c0      	bne.n	326b0 <ull_done+0x20>
}
   3272e:	b003      	add	sp, #12
   32730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   32734:	4918      	ldr	r1, [pc, #96]	; (32798 <ull_done+0x108>)
   32736:	4819      	ldr	r0, [pc, #100]	; (3279c <ull_done+0x10c>)
   32738:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   3273c:	4642      	mov	r2, r8
   3273e:	f010 fa85 	bl	42c4c <printk>
   32742:	4040      	eors	r0, r0
   32744:	f380 8811 	msr	BASEPRI, r0
   32748:	f04f 0003 	mov.w	r0, #3
   3274c:	df02      	svc	2
   3274e:	e7dc      	b.n	3270a <ull_done+0x7a>
		LL_ASSERT(0);
   32750:	4913      	ldr	r1, [pc, #76]	; (327a0 <ull_done+0x110>)
   32752:	4812      	ldr	r0, [pc, #72]	; (3279c <ull_done+0x10c>)
   32754:	f640 2369 	movw	r3, #2665	; 0xa69
   32758:	4642      	mov	r2, r8
   3275a:	f010 fa77 	bl	42c4c <printk>
   3275e:	4040      	eors	r0, r0
   32760:	f380 8811 	msr	BASEPRI, r0
   32764:	f04f 0003 	mov.w	r0, #3
   32768:	df02      	svc	2
		break;
   3276a:	e7b8      	b.n	326de <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   3276c:	480b      	ldr	r0, [pc, #44]	; (3279c <ull_done+0x10c>)
   3276e:	f640 2312 	movw	r3, #2578	; 0xa12
   32772:	4642      	mov	r2, r8
   32774:	4649      	mov	r1, r9
   32776:	f010 fa69 	bl	42c4c <printk>
   3277a:	4040      	eors	r0, r0
   3277c:	f380 8811 	msr	BASEPRI, r0
   32780:	f04f 0003 	mov.w	r0, #3
   32784:	df02      	svc	2
   32786:	e79e      	b.n	326c6 <ull_done+0x36>
   32788:	20002174 	.word	0x20002174
   3278c:	0004a184 	.word	0x0004a184
   32790:	0004a1c8 	.word	0x0004a1c8
   32794:	200004fc 	.word	0x200004fc
   32798:	0004a1e0 	.word	0x0004a1e0
   3279c:	0004a024 	.word	0x0004a024
   327a0:	0004a084 	.word	0x0004a084

000327a4 <rx_alloc>:
{
   327a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   327a8:	4f33      	ldr	r7, [pc, #204]	; (32878 <rx_alloc+0xd4>)
   327aa:	783e      	ldrb	r6, [r7, #0]
   327ac:	4286      	cmp	r6, r0
   327ae:	bf28      	it	cs
   327b0:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   327b2:	b34e      	cbz	r6, 32808 <rx_alloc+0x64>
   327b4:	4d31      	ldr	r5, [pc, #196]	; (3287c <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   327b6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 32880 <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   327ba:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
   327bc:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
   327c0:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   327c2:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   327c4:	3401      	adds	r4, #1
   327c6:	b2e4      	uxtb	r4, r4
		last = 0U;
   327c8:	42a2      	cmp	r2, r4
   327ca:	bf08      	it	eq
   327cc:	2400      	moveq	r4, #0
	if (last == first) {
   327ce:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   327d0:	4640      	mov	r0, r8
   327d2:	d01b      	beq.n	3280c <rx_alloc+0x68>
   327d4:	f7fd f878 	bl	2f8c8 <mem_acquire>
   327d8:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   327da:	4648      	mov	r0, r9
		if (!link) {
   327dc:	f1ba 0f00 	cmp.w	sl, #0
   327e0:	d012      	beq.n	32808 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   327e2:	f7fd f871 	bl	2f8c8 <mem_acquire>
		if (!rx) {
   327e6:	2800      	cmp	r0, #0
   327e8:	d03f      	beq.n	3286a <rx_alloc+0xc6>
		rx->link = link;
   327ea:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   327ee:	78ea      	ldrb	r2, [r5, #3]
   327f0:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   327f2:	fb02 5303 	mla	r3, r2, r3, r5
   327f6:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   327f8:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   327fa:	70ec      	strb	r4, [r5, #3]
		max--;
   327fc:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   327fe:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32800:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   32804:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32806:	d1db      	bne.n	327c0 <rx_alloc+0x1c>
}
   32808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
   3280c:	783b      	ldrb	r3, [r7, #0]
   3280e:	2b00      	cmp	r3, #0
   32810:	d0fa      	beq.n	32808 <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32812:	4d1c      	ldr	r5, [pc, #112]	; (32884 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
   32814:	4e1c      	ldr	r6, [pc, #112]	; (32888 <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32816:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   32818:	f8df 8064 	ldr.w	r8, [pc, #100]	; 32880 <rx_alloc+0xdc>
		link->mem = NULL;
   3281c:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   32820:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32822:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   32824:	3401      	adds	r4, #1
   32826:	b2e4      	uxtb	r4, r4
		last = 0U;
   32828:	42a2      	cmp	r2, r4
   3282a:	bf08      	it	eq
   3282c:	2400      	moveq	r4, #0
	if (last == first) {
   3282e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   32830:	4630      	mov	r0, r6
   32832:	d0e9      	beq.n	32808 <rx_alloc+0x64>
   32834:	f7fd f848 	bl	2f8c8 <mem_acquire>
   32838:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   3283a:	4640      	mov	r0, r8
		if (!link) {
   3283c:	f1ba 0f00 	cmp.w	sl, #0
   32840:	d0e2      	beq.n	32808 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   32842:	f7fd f841 	bl	2f8c8 <mem_acquire>
		if (!rx) {
   32846:	b180      	cbz	r0, 3286a <rx_alloc+0xc6>
		link->mem = NULL;
   32848:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   3284c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32850:	78ea      	ldrb	r2, [r5, #3]
   32852:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32854:	fb02 5303 	mla	r3, r2, r3, r5
   32858:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   3285a:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   3285c:	70ec      	strb	r4, [r5, #3]
   3285e:	3b01      	subs	r3, #1
   32860:	b2db      	uxtb	r3, r3
   32862:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   32864:	2b00      	cmp	r3, #0
   32866:	d1db      	bne.n	32820 <rx_alloc+0x7c>
   32868:	e7ce      	b.n	32808 <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
   3286a:	4650      	mov	r0, sl
   3286c:	4906      	ldr	r1, [pc, #24]	; (32888 <rx_alloc+0xe4>)
}
   3286e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   32872:	f7fd b843 	b.w	2f8fc <mem_release>
   32876:	bf00      	nop
   32878:	20001f3c 	.word	0x20001f3c
   3287c:	20000520 	.word	0x20000520
   32880:	20001f8c 	.word	0x20001f8c
   32884:	20000514 	.word	0x20000514
   32888:	20001f40 	.word	0x20001f40

0003288c <rx_demux>:
{
   3288c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32890:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 32a40 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   32894:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 32a44 <rx_demux+0x1b8>
		LL_ASSERT(0);
   32898:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 32a48 <rx_demux+0x1bc>
   3289c:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 32a4c <rx_demux+0x1c0>
{
   328a0:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   328a2:	e9d8 0100 	ldrd	r0, r1, [r8]
   328a6:	aa03      	add	r2, sp, #12
   328a8:	f7fd f87c 	bl	2f9a4 <memq_peek>
		if (link) {
   328ac:	4605      	mov	r5, r0
   328ae:	2800      	cmp	r0, #0
   328b0:	d035      	beq.n	3291e <rx_demux+0x92>
			LL_ASSERT(rx);
   328b2:	9b03      	ldr	r3, [sp, #12]
   328b4:	2b00      	cmp	r3, #0
   328b6:	f000 80a6 	beq.w	32a06 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   328ba:	7818      	ldrb	r0, [r3, #0]
   328bc:	aa04      	add	r2, sp, #16
   328be:	a902      	add	r1, sp, #8
   328c0:	f006 f90a 	bl	38ad8 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   328c4:	4604      	mov	r4, r0
   328c6:	2800      	cmp	r0, #0
   328c8:	d055      	beq.n	32976 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   328ca:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   328ce:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   328d2:	780f      	ldrb	r7, [r1, #0]
   328d4:	f8ad 200a 	strh.w	r2, [sp, #10]
   328d8:	ae05      	add	r6, sp, #20
   328da:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   328dc:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   328e0:	f006 f914 	bl	38b0c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   328e4:	4621      	mov	r1, r4
   328e6:	9a05      	ldr	r2, [sp, #20]
   328e8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   328ec:	f006 f958 	bl	38ba0 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   328f0:	4620      	mov	r0, r4
   328f2:	f006 f8c9 	bl	38a88 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   328f6:	4632      	mov	r2, r6
   328f8:	4629      	mov	r1, r5
   328fa:	4638      	mov	r0, r7
   328fc:	f006 f8ec 	bl	38ad8 <ull_conn_ack_by_last_peek>
	} while (link);
   32900:	4604      	mov	r4, r0
   32902:	2800      	cmp	r0, #0
   32904:	d1ec      	bne.n	328e0 <rx_demux+0x54>
	k_sem_give(sem_recv);
   32906:	f8d9 0000 	ldr.w	r0, [r9]
   3290a:	f00e fe71 	bl	415f0 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   3290e:	e9d8 0100 	ldrd	r0, r1, [r8]
   32912:	aa03      	add	r2, sp, #12
   32914:	f7fd f846 	bl	2f9a4 <memq_peek>
		if (link) {
   32918:	4605      	mov	r5, r0
   3291a:	2800      	cmp	r0, #0
   3291c:	d1c9      	bne.n	328b2 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   3291e:	aa04      	add	r2, sp, #16
   32920:	a902      	add	r1, sp, #8
   32922:	f10d 0007 	add.w	r0, sp, #7
   32926:	f006 f8bb 	bl	38aa0 <ull_conn_ack_peek>
			if (link) {
   3292a:	4604      	mov	r4, r0
   3292c:	2800      	cmp	r0, #0
   3292e:	d067      	beq.n	32a00 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   32930:	9b04      	ldr	r3, [sp, #16]
   32932:	9305      	str	r3, [sp, #20]
   32934:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   32938:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   3293c:	f8ad 300a 	strh.w	r3, [sp, #10]
   32940:	ae05      	add	r6, sp, #20
   32942:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   32946:	f006 f8e1 	bl	38b0c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   3294a:	4621      	mov	r1, r4
   3294c:	9a05      	ldr	r2, [sp, #20]
   3294e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   32952:	f006 f925 	bl	38ba0 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   32956:	4620      	mov	r0, r4
   32958:	f006 f896 	bl	38a88 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   3295c:	4632      	mov	r2, r6
   3295e:	4629      	mov	r1, r5
   32960:	4638      	mov	r0, r7
   32962:	f006 f8b9 	bl	38ad8 <ull_conn_ack_by_last_peek>
	} while (link);
   32966:	4604      	mov	r4, r0
   32968:	2800      	cmp	r0, #0
   3296a:	d1ec      	bne.n	32946 <rx_demux+0xba>
	k_sem_give(sem_recv);
   3296c:	f8d9 0000 	ldr.w	r0, [r9]
   32970:	f00e fe3e 	bl	415f0 <z_impl_k_sem_give>
			if (nack) {
   32974:	e7cb      	b.n	3290e <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   32976:	9b03      	ldr	r3, [sp, #12]
   32978:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   3297a:	791b      	ldrb	r3, [r3, #4]
   3297c:	3b01      	subs	r3, #1
   3297e:	2b16      	cmp	r3, #22
   32980:	d80d      	bhi.n	3299e <rx_demux+0x112>
   32982:	e8df f003 	tbb	[pc, r3]
   32986:	0c1a      	.short	0x0c1a
   32988:	0c0c0c38 	.word	0x0c0c0c38
   3298c:	0c0c0c0c 	.word	0x0c0c0c0c
   32990:	0c0c0c0c 	.word	0x0c0c0c0c
   32994:	0c0c0c0c 	.word	0x0c0c0c0c
   32998:	2d0c0c0c 	.word	0x2d0c0c0c
   3299c:	1a          	.byte	0x1a
   3299d:	00          	.byte	0x00
		LL_ASSERT(0);
   3299e:	482c      	ldr	r0, [pc, #176]	; (32a50 <rx_demux+0x1c4>)
   329a0:	f640 13ff 	movw	r3, #2559	; 0x9ff
   329a4:	4652      	mov	r2, sl
   329a6:	4659      	mov	r1, fp
   329a8:	f010 f950 	bl	42c4c <printk>
   329ac:	4040      	eors	r0, r0
   329ae:	f380 8811 	msr	BASEPRI, r0
   329b2:	f04f 0003 	mov.w	r0, #3
   329b6:	df02      	svc	2
			if (nack) {
   329b8:	e773      	b.n	328a2 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   329ba:	4921      	ldr	r1, [pc, #132]	; (32a40 <rx_demux+0x1b4>)
   329bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   329c0:	2200      	movs	r2, #0
   329c2:	f7fc fff7 	bl	2f9b4 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   329c6:	4b23      	ldr	r3, [pc, #140]	; (32a54 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
   329c8:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   329ca:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   329cc:	4628      	mov	r0, r5
   329ce:	4a22      	ldr	r2, [pc, #136]	; (32a58 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   329d0:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   329d2:	f7fc ffdd 	bl	2f990 <memq_enqueue>
	k_sem_give(sem_recv);
   329d6:	f8d9 0000 	ldr.w	r0, [r9]
   329da:	f00e fe09 	bl	415f0 <z_impl_k_sem_give>
			if (nack) {
   329de:	e796      	b.n	3290e <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   329e0:	4917      	ldr	r1, [pc, #92]	; (32a40 <rx_demux+0x1b4>)
   329e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   329e6:	2200      	movs	r2, #0
   329e8:	f7fc ffe4 	bl	2f9b4 <memq_dequeue>
		ull_conn_setup(link, rx);
   329ec:	9905      	ldr	r1, [sp, #20]
   329ee:	4628      	mov	r0, r5
   329f0:	f002 fe50 	bl	35694 <ull_conn_setup>
			if (nack) {
   329f4:	e755      	b.n	328a2 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   329f6:	a905      	add	r1, sp, #20
   329f8:	4628      	mov	r0, r5
   329fa:	f002 fe73 	bl	356e4 <ull_conn_rx>
		if (nack) {
   329fe:	b188      	cbz	r0, 32a24 <rx_demux+0x198>
}
   32a00:	b007      	add	sp, #28
   32a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   32a06:	4915      	ldr	r1, [pc, #84]	; (32a5c <rx_demux+0x1d0>)
   32a08:	4811      	ldr	r0, [pc, #68]	; (32a50 <rx_demux+0x1c4>)
   32a0a:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   32a0e:	4652      	mov	r2, sl
   32a10:	f010 f91c 	bl	42c4c <printk>
   32a14:	4040      	eors	r0, r0
   32a16:	f380 8811 	msr	BASEPRI, r0
   32a1a:	f04f 0003 	mov.w	r0, #3
   32a1e:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   32a20:	9b03      	ldr	r3, [sp, #12]
   32a22:	e74a      	b.n	328ba <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   32a24:	4906      	ldr	r1, [pc, #24]	; (32a40 <rx_demux+0x1b4>)
   32a26:	4602      	mov	r2, r0
   32a28:	f8d8 0004 	ldr.w	r0, [r8, #4]
   32a2c:	f7fc ffc2 	bl	2f9b4 <memq_dequeue>
		if (rx) {
   32a30:	9905      	ldr	r1, [sp, #20]
   32a32:	2900      	cmp	r1, #0
   32a34:	f43f af35 	beq.w	328a2 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32a38:	4b06      	ldr	r3, [pc, #24]	; (32a54 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   32a3a:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32a3c:	78db      	ldrb	r3, [r3, #3]
   32a3e:	e7c6      	b.n	329ce <rx_demux+0x142>
   32a40:	2000217c 	.word	0x2000217c
   32a44:	20002184 	.word	0x20002184
   32a48:	0004a184 	.word	0x0004a184
   32a4c:	0004a084 	.word	0x0004a084
   32a50:	0004a024 	.word	0x0004a024
   32a54:	2000063c 	.word	0x2000063c
   32a58:	20002170 	.word	0x20002170
   32a5c:	0004a1f0 	.word	0x0004a1f0

00032a60 <ll_rx_get>:
{
   32a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32a64:	b085      	sub	sp, #20
   32a66:	e9cd 0100 	strd	r0, r1, [sp]
   32a6a:	4c63      	ldr	r4, [pc, #396]	; (32bf8 <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
   32a6c:	4d63      	ldr	r5, [pc, #396]	; (32bfc <ll_rx_get+0x19c>)
   32a6e:	4e64      	ldr	r6, [pc, #400]	; (32c00 <ll_rx_get+0x1a0>)
	*node_rx = NULL;
   32a70:	9a00      	ldr	r2, [sp, #0]
   32a72:	2300      	movs	r3, #0
   32a74:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   32a76:	e9d6 0100 	ldrd	r0, r1, [r6]
   32a7a:	aa03      	add	r2, sp, #12
   32a7c:	f7fc ff92 	bl	2f9a4 <memq_peek>
	if (link) {
   32a80:	4680      	mov	r8, r0
   32a82:	2800      	cmp	r0, #0
   32a84:	f000 809f 	beq.w	32bc6 <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   32a88:	9b03      	ldr	r3, [sp, #12]
   32a8a:	495e      	ldr	r1, [pc, #376]	; (32c04 <ll_rx_get+0x1a4>)
   32a8c:	781a      	ldrb	r2, [r3, #0]
   32a8e:	9801      	ldr	r0, [sp, #4]
   32a90:	f7ff fd9e 	bl	325d0 <tx_cmplt_get>
		if (!cmplt) {
   32a94:	2800      	cmp	r0, #0
   32a96:	f040 809b 	bne.w	32bd0 <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
   32a9a:	78a3      	ldrb	r3, [r4, #2]
   32a9c:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   32aa0:	78e2      	ldrb	r2, [r4, #3]
   32aa2:	4607      	mov	r7, r0
   32aa4:	f10d 0109 	add.w	r1, sp, #9
   32aa8:	f10d 000a 	add.w	r0, sp, #10
   32aac:	f7ff fd90 	bl	325d0 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   32ab0:	ea47 0200 	orr.w	r2, r7, r0
   32ab4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   32ab8:	d1f2      	bne.n	32aa0 <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   32aba:	9b03      	ldr	r3, [sp, #12]
   32abc:	7919      	ldrb	r1, [r3, #4]
   32abe:	2901      	cmp	r1, #1
   32ac0:	f040 8093 	bne.w	32bea <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
   32ac4:	494e      	ldr	r1, [pc, #312]	; (32c00 <ll_rx_get+0x1a0>)
   32ac6:	6870      	ldr	r0, [r6, #4]
   32ac8:	f7fc ff74 	bl	2f9b4 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   32acc:	494e      	ldr	r1, [pc, #312]	; (32c08 <ll_rx_get+0x1a8>)
   32ace:	4640      	mov	r0, r8
   32ad0:	f7fc ff14 	bl	2f8fc <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   32ad4:	782b      	ldrb	r3, [r5, #0]
   32ad6:	2b04      	cmp	r3, #4
   32ad8:	d866      	bhi.n	32ba8 <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
   32ada:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   32adc:	494b      	ldr	r1, [pc, #300]	; (32c0c <ll_rx_get+0x1ac>)
   32ade:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   32ae0:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   32ae2:	f7fc ff0b 	bl	2f8fc <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32ae6:	782b      	ldrb	r3, [r5, #0]
   32ae8:	2b00      	cmp	r3, #0
   32aea:	d0c1      	beq.n	32a70 <ll_rx_get+0x10>
   32aec:	f8df 8120 	ldr.w	r8, [pc, #288]	; 32c10 <ll_rx_get+0x1b0>
	last = last + 1;
   32af0:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   32af4:	f898 2001 	ldrb.w	r2, [r8, #1]
   32af8:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   32afc:	3701      	adds	r7, #1
   32afe:	b2ff      	uxtb	r7, r7
		last = 0U;
   32b00:	42ba      	cmp	r2, r7
   32b02:	bf08      	it	eq
   32b04:	2700      	moveq	r7, #0
	if (last == first) {
   32b06:	429f      	cmp	r7, r3
   32b08:	d019      	beq.n	32b3e <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
   32b0a:	483f      	ldr	r0, [pc, #252]	; (32c08 <ll_rx_get+0x1a8>)
   32b0c:	f7fc fedc 	bl	2f8c8 <mem_acquire>
		if (!link) {
   32b10:	4681      	mov	r9, r0
   32b12:	2800      	cmp	r0, #0
   32b14:	d0ac      	beq.n	32a70 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   32b16:	483d      	ldr	r0, [pc, #244]	; (32c0c <ll_rx_get+0x1ac>)
   32b18:	f7fc fed6 	bl	2f8c8 <mem_acquire>
		if (!rx) {
   32b1c:	2800      	cmp	r0, #0
   32b1e:	d05a      	beq.n	32bd6 <ll_rx_get+0x176>
		rx->link = link;
   32b20:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32b24:	f898 2003 	ldrb.w	r2, [r8, #3]
   32b28:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32b2c:	fb02 8303 	mla	r3, r2, r3, r8
   32b30:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   32b32:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   32b34:	f888 7003 	strb.w	r7, [r8, #3]
   32b38:	3b01      	subs	r3, #1
   32b3a:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   32b3c:	e798      	b.n	32a70 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32b3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 32c14 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
   32b42:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 32c08 <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32b46:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   32b4a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 32c0c <ll_rx_get+0x1ac>
	if (last == count) {
   32b4e:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   32b52:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   32b56:	3701      	adds	r7, #1
   32b58:	b2ff      	uxtb	r7, r7
		last = 0U;
   32b5a:	42ba      	cmp	r2, r7
   32b5c:	bf08      	it	eq
   32b5e:	2700      	moveq	r7, #0
	if (last == first) {
   32b60:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   32b62:	4648      	mov	r0, r9
   32b64:	d084      	beq.n	32a70 <ll_rx_get+0x10>
   32b66:	f7fc feaf 	bl	2f8c8 <mem_acquire>
   32b6a:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   32b6c:	4650      	mov	r0, sl
		if (!link) {
   32b6e:	f1bb 0f00 	cmp.w	fp, #0
   32b72:	f43f af7d 	beq.w	32a70 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   32b76:	f7fc fea7 	bl	2f8c8 <mem_acquire>
		if (!rx) {
   32b7a:	2800      	cmp	r0, #0
   32b7c:	d030      	beq.n	32be0 <ll_rx_get+0x180>
		link->mem = NULL;
   32b7e:	2300      	movs	r3, #0
   32b80:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   32b84:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   32b88:	f898 2003 	ldrb.w	r2, [r8, #3]
   32b8c:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   32b90:	fb02 8303 	mla	r3, r2, r3, r8
   32b94:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   32b96:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   32b98:	f888 7003 	strb.w	r7, [r8, #3]
   32b9c:	3b01      	subs	r3, #1
   32b9e:	b2db      	uxtb	r3, r3
   32ba0:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   32ba2:	2b00      	cmp	r3, #0
   32ba4:	d1d3      	bne.n	32b4e <ll_rx_get+0xee>
   32ba6:	e763      	b.n	32a70 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   32ba8:	4a1b      	ldr	r2, [pc, #108]	; (32c18 <ll_rx_get+0x1b8>)
   32baa:	491c      	ldr	r1, [pc, #112]	; (32c1c <ll_rx_get+0x1bc>)
   32bac:	481c      	ldr	r0, [pc, #112]	; (32c20 <ll_rx_get+0x1c0>)
   32bae:	f240 6306 	movw	r3, #1542	; 0x606
   32bb2:	f010 f84b 	bl	42c4c <printk>
   32bb6:	4040      	eors	r0, r0
   32bb8:	f380 8811 	msr	BASEPRI, r0
   32bbc:	f04f 0003 	mov.w	r0, #3
   32bc0:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   32bc2:	782b      	ldrb	r3, [r5, #0]
   32bc4:	e789      	b.n	32ada <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   32bc6:	78e2      	ldrb	r2, [r4, #3]
   32bc8:	490e      	ldr	r1, [pc, #56]	; (32c04 <ll_rx_get+0x1a4>)
   32bca:	9801      	ldr	r0, [sp, #4]
   32bcc:	f7ff fd00 	bl	325d0 <tx_cmplt_get>
}
   32bd0:	b005      	add	sp, #20
   32bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   32bd6:	490c      	ldr	r1, [pc, #48]	; (32c08 <ll_rx_get+0x1a8>)
   32bd8:	4648      	mov	r0, r9
   32bda:	f7fc fe8f 	bl	2f8fc <mem_release>
			return;
   32bde:	e747      	b.n	32a70 <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
   32be0:	4909      	ldr	r1, [pc, #36]	; (32c08 <ll_rx_get+0x1a8>)
   32be2:	4658      	mov	r0, fp
   32be4:	f7fc fe8a 	bl	2f8fc <mem_release>
			return;
   32be8:	e742      	b.n	32a70 <ll_rx_get+0x10>
			*node_rx = rx;
   32bea:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   32bec:	4610      	mov	r0, r2
			*node_rx = rx;
   32bee:	600b      	str	r3, [r1, #0]
}
   32bf0:	b005      	add	sp, #20
   32bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32bf6:	bf00      	nop
   32bf8:	2000063c 	.word	0x2000063c
   32bfc:	20001f3c 	.word	0x20001f3c
   32c00:	2000216c 	.word	0x2000216c
   32c04:	2000063e 	.word	0x2000063e
   32c08:	20001f40 	.word	0x20001f40
   32c0c:	20001f8c 	.word	0x20001f8c
   32c10:	20000520 	.word	0x20000520
   32c14:	20000514 	.word	0x20000514
   32c18:	0004a184 	.word	0x0004a184
   32c1c:	0004a1f4 	.word	0x0004a1f4
   32c20:	0004a024 	.word	0x0004a024

00032c24 <ll_rx_dequeue>:
{
   32c24:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   32c26:	495d      	ldr	r1, [pc, #372]	; (32d9c <ll_rx_dequeue+0x178>)
{
   32c28:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   32c2a:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   32c2c:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   32c2e:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   32c30:	aa01      	add	r2, sp, #4
   32c32:	f7fc febf 	bl	2f9b4 <memq_dequeue>
	LL_ASSERT(link);
   32c36:	4604      	mov	r4, r0
   32c38:	2800      	cmp	r0, #0
   32c3a:	d063      	beq.n	32d04 <ll_rx_dequeue+0xe0>
	mem_release(link, &mem_link_rx.free);
   32c3c:	4958      	ldr	r1, [pc, #352]	; (32da0 <ll_rx_dequeue+0x17c>)
   32c3e:	4620      	mov	r0, r4
   32c40:	f7fc fe5c 	bl	2f8fc <mem_release>
	switch (rx->type) {
   32c44:	9a01      	ldr	r2, [sp, #4]
   32c46:	7913      	ldrb	r3, [r2, #4]
   32c48:	2b1c      	cmp	r3, #28
   32c4a:	d810      	bhi.n	32c6e <ll_rx_dequeue+0x4a>
   32c4c:	e8df f003 	tbb	[pc, r3]
   32c50:	1e0f0f1e 	.word	0x1e0f0f1e
   32c54:	0f0f0f0f 	.word	0x0f0f0f0f
   32c58:	0f0f0f0f 	.word	0x0f0f0f0f
   32c5c:	0f0f0f0f 	.word	0x0f0f0f0f
   32c60:	0f0f0f0f 	.word	0x0f0f0f0f
   32c64:	1e2f0f0f 	.word	0x1e2f0f0f
   32c68:	1e1e1e1e 	.word	0x1e1e1e1e
   32c6c:	1e          	.byte	0x1e
   32c6d:	00          	.byte	0x00
		LL_ASSERT(0);
   32c6e:	4a4d      	ldr	r2, [pc, #308]	; (32da4 <ll_rx_dequeue+0x180>)
   32c70:	494d      	ldr	r1, [pc, #308]	; (32da8 <ll_rx_dequeue+0x184>)
   32c72:	484e      	ldr	r0, [pc, #312]	; (32dac <ll_rx_dequeue+0x188>)
   32c74:	f240 43c7 	movw	r3, #1223	; 0x4c7
   32c78:	f00f ffe8 	bl	42c4c <printk>
   32c7c:	4040      	eors	r0, r0
   32c7e:	f380 8811 	msr	BASEPRI, r0
   32c82:	f04f 0003 	mov.w	r0, #3
   32c86:	df02      	svc	2
}
   32c88:	b002      	add	sp, #8
   32c8a:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   32c8c:	2b00      	cmp	r3, #0
   32c8e:	d1fb      	bne.n	32c88 <ll_rx_dequeue+0x64>
   32c90:	4a44      	ldr	r2, [pc, #272]	; (32da4 <ll_rx_dequeue+0x180>)
   32c92:	4947      	ldr	r1, [pc, #284]	; (32db0 <ll_rx_dequeue+0x18c>)
   32c94:	4845      	ldr	r0, [pc, #276]	; (32dac <ll_rx_dequeue+0x188>)
   32c96:	f240 43c3 	movw	r3, #1219	; 0x4c3
   32c9a:	f00f ffd7 	bl	42c4c <printk>
   32c9e:	4040      	eors	r0, r0
   32ca0:	f380 8811 	msr	BASEPRI, r0
   32ca4:	f04f 0003 	mov.w	r0, #3
   32ca8:	df02      	svc	2
}
   32caa:	b002      	add	sp, #8
   32cac:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   32cae:	7f13      	ldrb	r3, [r2, #28]
   32cb0:	2b3c      	cmp	r3, #60	; 0x3c
   32cb2:	d035      	beq.n	32d20 <ll_rx_dequeue+0xfc>
   32cb4:	7f53      	ldrb	r3, [r2, #29]
   32cb6:	b1bb      	cbz	r3, 32ce8 <ll_rx_dequeue+0xc4>
			adv = HDR_LLL2ULL(lll);
   32cb8:	6893      	ldr	r3, [r2, #8]
   32cba:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   32cbc:	6e60      	ldr	r0, [r4, #100]	; 0x64
   32cbe:	b120      	cbz	r0, 32cca <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
   32cc0:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   32cc2:	493c      	ldr	r1, [pc, #240]	; (32db4 <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
   32cc4:	6663      	str	r3, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
   32cc6:	f7fc fe19 	bl	2f8fc <mem_release>
			adv->is_enabled = 0U;
   32cca:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   32cce:	f36f 0300 	bfc	r3, #0, #1
   32cd2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      ull_adv_is_enabled(0));
   32cd6:	2000      	movs	r0, #0
   32cd8:	f001 fa6c 	bl	341b4 <ull_adv_is_enabled>
			if (!bm) {
   32cdc:	2800      	cmp	r0, #0
   32cde:	d1d3      	bne.n	32c88 <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
   32ce0:	f006 fef0 	bl	39ac4 <ull_filter_adv_scan_state_cb>
}
   32ce4:	b002      	add	sp, #8
   32ce6:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   32ce8:	4a2e      	ldr	r2, [pc, #184]	; (32da4 <ll_rx_dequeue+0x180>)
   32cea:	492f      	ldr	r1, [pc, #188]	; (32da8 <ll_rx_dequeue+0x184>)
   32cec:	482f      	ldr	r0, [pc, #188]	; (32dac <ll_rx_dequeue+0x188>)
   32cee:	f240 4354 	movw	r3, #1108	; 0x454
   32cf2:	f00f ffab 	bl	42c4c <printk>
   32cf6:	4040      	eors	r0, r0
   32cf8:	f380 8811 	msr	BASEPRI, r0
   32cfc:	f04f 0003 	mov.w	r0, #3
   32d00:	df02      	svc	2
   32d02:	e7e8      	b.n	32cd6 <ll_rx_dequeue+0xb2>
	LL_ASSERT(link);
   32d04:	4a27      	ldr	r2, [pc, #156]	; (32da4 <ll_rx_dequeue+0x180>)
   32d06:	492c      	ldr	r1, [pc, #176]	; (32db8 <ll_rx_dequeue+0x194>)
   32d08:	4828      	ldr	r0, [pc, #160]	; (32dac <ll_rx_dequeue+0x188>)
   32d0a:	f240 33a1 	movw	r3, #929	; 0x3a1
   32d0e:	f00f ff9d 	bl	42c4c <printk>
   32d12:	4040      	eors	r0, r0
   32d14:	f380 8811 	msr	BASEPRI, r0
   32d18:	f04f 0003 	mov.w	r0, #3
   32d1c:	df02      	svc	2
   32d1e:	e78d      	b.n	32c3c <ll_rx_dequeue+0x18>
			lll = ftr->param;
   32d20:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
   32d22:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   32d26:	b1ed      	cbz	r5, 32d64 <ll_rx_dequeue+0x140>
				LL_ASSERT(!conn_lll->link_tx_free);
   32d28:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
   32d2a:	2200      	movs	r2, #0
   32d2c:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   32d2e:	b163      	cbz	r3, 32d4a <ll_rx_dequeue+0x126>
   32d30:	4a1c      	ldr	r2, [pc, #112]	; (32da4 <ll_rx_dequeue+0x180>)
   32d32:	4922      	ldr	r1, [pc, #136]	; (32dbc <ll_rx_dequeue+0x198>)
   32d34:	481d      	ldr	r0, [pc, #116]	; (32dac <ll_rx_dequeue+0x188>)
   32d36:	f240 431a 	movw	r3, #1050	; 0x41a
   32d3a:	f00f ff87 	bl	42c4c <printk>
   32d3e:	4040      	eors	r0, r0
   32d40:	f380 8811 	msr	BASEPRI, r0
   32d44:	f04f 0003 	mov.w	r0, #3
   32d48:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   32d4a:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   32d4e:	f105 0048 	add.w	r0, r5, #72	; 0x48
   32d52:	f7fc fe13 	bl	2f97c <memq_deinit>
				LL_ASSERT(link);
   32d56:	4606      	mov	r6, r0
   32d58:	b190      	cbz	r0, 32d80 <ll_rx_dequeue+0x15c>
				ll_conn_release(conn);
   32d5a:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   32d5c:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
   32d5e:	f002 f951 	bl	35004 <ll_conn_release>
   32d62:	e7b2      	b.n	32cca <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
   32d64:	4a0f      	ldr	r2, [pc, #60]	; (32da4 <ll_rx_dequeue+0x180>)
   32d66:	4916      	ldr	r1, [pc, #88]	; (32dc0 <ll_rx_dequeue+0x19c>)
   32d68:	4810      	ldr	r0, [pc, #64]	; (32dac <ll_rx_dequeue+0x188>)
   32d6a:	f240 4317 	movw	r3, #1047	; 0x417
   32d6e:	f00f ff6d 	bl	42c4c <printk>
   32d72:	4040      	eors	r0, r0
   32d74:	f380 8811 	msr	BASEPRI, r0
   32d78:	f04f 0003 	mov.w	r0, #3
   32d7c:	df02      	svc	2
   32d7e:	e7d3      	b.n	32d28 <ll_rx_dequeue+0x104>
				LL_ASSERT(link);
   32d80:	4a08      	ldr	r2, [pc, #32]	; (32da4 <ll_rx_dequeue+0x180>)
   32d82:	490d      	ldr	r1, [pc, #52]	; (32db8 <ll_rx_dequeue+0x194>)
   32d84:	4809      	ldr	r0, [pc, #36]	; (32dac <ll_rx_dequeue+0x188>)
   32d86:	f240 431d 	movw	r3, #1053	; 0x41d
   32d8a:	f00f ff5f 	bl	42c4c <printk>
   32d8e:	4040      	eors	r0, r0
   32d90:	f380 8811 	msr	BASEPRI, r0
   32d94:	f04f 0003 	mov.w	r0, #3
   32d98:	df02      	svc	2
   32d9a:	e7de      	b.n	32d5a <ll_rx_dequeue+0x136>
   32d9c:	2000216c 	.word	0x2000216c
   32da0:	20001f40 	.word	0x20001f40
   32da4:	0004a184 	.word	0x0004a184
   32da8:	0004a084 	.word	0x0004a084
   32dac:	0004a024 	.word	0x0004a024
   32db0:	0004a254 	.word	0x0004a254
   32db4:	20001f8c 	.word	0x20001f8c
   32db8:	0004a4f0 	.word	0x0004a4f0
   32dbc:	0004a23c 	.word	0x0004a23c
   32dc0:	0004a230 	.word	0x0004a230

00032dc4 <ll_rx_mem_release>:
{
   32dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   32dc8:	6804      	ldr	r4, [r0, #0]
{
   32dca:	4680      	mov	r8, r0
	while (rx) {
   32dcc:	b344      	cbz	r4, 32e20 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   32dce:	4f56      	ldr	r7, [pc, #344]	; (32f28 <ll_rx_mem_release+0x164>)
   32dd0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 32f2c <ll_rx_mem_release+0x168>
   32dd4:	4e56      	ldr	r6, [pc, #344]	; (32f30 <ll_rx_mem_release+0x16c>)
		rx = rx->next;
   32dd6:	4625      	mov	r5, r4
   32dd8:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   32dda:	792b      	ldrb	r3, [r5, #4]
   32ddc:	2b1c      	cmp	r3, #28
   32dde:	d810      	bhi.n	32e02 <ll_rx_mem_release+0x3e>
   32de0:	e8df f003 	tbb	[pc, r3]
   32de4:	380f0f38 	.word	0x380f0f38
   32de8:	0f0f0f0f 	.word	0x0f0f0f0f
   32dec:	0f0f0f0f 	.word	0x0f0f0f0f
   32df0:	0f0f0f0f 	.word	0x0f0f0f0f
   32df4:	0f0f0f0f 	.word	0x0f0f0f0f
   32df8:	56260f0f 	.word	0x56260f0f
   32dfc:	38383838 	.word	0x38383838
   32e00:	38          	.byte	0x38
   32e01:	00          	.byte	0x00
			LL_ASSERT(0);
   32e02:	f240 53fa 	movw	r3, #1530	; 0x5fa
   32e06:	463a      	mov	r2, r7
   32e08:	4649      	mov	r1, r9
   32e0a:	4630      	mov	r0, r6
   32e0c:	f00f ff1e 	bl	42c4c <printk>
   32e10:	4040      	eors	r0, r0
   32e12:	f380 8811 	msr	BASEPRI, r0
   32e16:	f04f 0003 	mov.w	r0, #3
   32e1a:	df02      	svc	2
	while (rx) {
   32e1c:	2c00      	cmp	r4, #0
   32e1e:	d1da      	bne.n	32dd6 <ll_rx_mem_release+0x12>
	*node_rx = rx;
   32e20:	2300      	movs	r3, #0
   32e22:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   32e26:	20ff      	movs	r0, #255	; 0xff
}
   32e28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   32e2c:	f7ff bcba 	b.w	327a4 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   32e30:	7f2b      	ldrb	r3, [r5, #28]
   32e32:	2b3c      	cmp	r3, #60	; 0x3c
   32e34:	d062      	beq.n	32efc <ll_rx_mem_release+0x138>
				LL_ASSERT(!cc->status);
   32e36:	b1db      	cbz	r3, 32e70 <ll_rx_mem_release+0xac>
   32e38:	493e      	ldr	r1, [pc, #248]	; (32f34 <ll_rx_mem_release+0x170>)
   32e3a:	f240 532b 	movw	r3, #1323	; 0x52b
   32e3e:	463a      	mov	r2, r7
   32e40:	4630      	mov	r0, r6
   32e42:	f00f ff03 	bl	42c4c <printk>
   32e46:	4040      	eors	r0, r0
   32e48:	f380 8811 	msr	BASEPRI, r0
   32e4c:	f04f 0003 	mov.w	r0, #3
   32e50:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   32e52:	792b      	ldrb	r3, [r5, #4]
   32e54:	b963      	cbnz	r3, 32e70 <ll_rx_mem_release+0xac>
   32e56:	4938      	ldr	r1, [pc, #224]	; (32f38 <ll_rx_mem_release+0x174>)
   32e58:	f240 537d 	movw	r3, #1405	; 0x57d
   32e5c:	463a      	mov	r2, r7
   32e5e:	4630      	mov	r0, r6
   32e60:	f00f fef4 	bl	42c4c <printk>
   32e64:	4040      	eors	r0, r0
   32e66:	f380 8811 	msr	BASEPRI, r0
   32e6a:	f04f 0003 	mov.w	r0, #3
   32e6e:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   32e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 32f3c <ll_rx_mem_release+0x178>
   32e74:	f89a 3000 	ldrb.w	r3, [sl]
   32e78:	2b04      	cmp	r3, #4
   32e7a:	d82f      	bhi.n	32edc <ll_rx_mem_release+0x118>
	mem_link_rx.quota_pdu += delta;
   32e7c:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   32e7e:	4930      	ldr	r1, [pc, #192]	; (32f40 <ll_rx_mem_release+0x17c>)
	mem_link_rx.quota_pdu += delta;
   32e80:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   32e84:	4628      	mov	r0, r5
   32e86:	f7fc fd39 	bl	2f8fc <mem_release>
	while (rx) {
   32e8a:	2c00      	cmp	r4, #0
   32e8c:	d1a3      	bne.n	32dd6 <ll_rx_mem_release+0x12>
   32e8e:	e7c7      	b.n	32e20 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   32e90:	88e8      	ldrh	r0, [r5, #6]
   32e92:	2800      	cmp	r0, #0
   32e94:	d1c2      	bne.n	32e1c <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   32e96:	f002 f8c3 	bl	35020 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   32e9a:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
   32e9c:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   32e9e:	b163      	cbz	r3, 32eba <ll_rx_mem_release+0xf6>
   32ea0:	4928      	ldr	r1, [pc, #160]	; (32f44 <ll_rx_mem_release+0x180>)
   32ea2:	f240 53ec 	movw	r3, #1516	; 0x5ec
   32ea6:	463a      	mov	r2, r7
   32ea8:	4630      	mov	r0, r6
   32eaa:	f00f fecf 	bl	42c4c <printk>
   32eae:	4040      	eors	r0, r0
   32eb0:	f380 8811 	msr	BASEPRI, r0
   32eb4:	f04f 0003 	mov.w	r0, #3
   32eb8:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   32eba:	f105 0168 	add.w	r1, r5, #104	; 0x68
   32ebe:	f105 0064 	add.w	r0, r5, #100	; 0x64
   32ec2:	f7fc fd5b 	bl	2f97c <memq_deinit>
				LL_ASSERT(link);
   32ec6:	4682      	mov	sl, r0
   32ec8:	b300      	cbz	r0, 32f0c <ll_rx_mem_release+0x148>
				conn->lll.link_tx_free = link;
   32eca:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
   32ece:	4628      	mov	r0, r5
   32ed0:	f002 f898 	bl	35004 <ll_conn_release>
	while (rx) {
   32ed4:	2c00      	cmp	r4, #0
   32ed6:	f47f af7e 	bne.w	32dd6 <ll_rx_mem_release+0x12>
   32eda:	e7a1      	b.n	32e20 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   32edc:	491a      	ldr	r1, [pc, #104]	; (32f48 <ll_rx_mem_release+0x184>)
   32ede:	f240 6306 	movw	r3, #1542	; 0x606
   32ee2:	463a      	mov	r2, r7
   32ee4:	4630      	mov	r0, r6
   32ee6:	f00f feb1 	bl	42c4c <printk>
   32eea:	4040      	eors	r0, r0
   32eec:	f380 8811 	msr	BASEPRI, r0
   32ef0:	f04f 0003 	mov.w	r0, #3
   32ef4:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   32ef6:	f89a 3000 	ldrb.w	r3, [sl]
   32efa:	e7bf      	b.n	32e7c <ll_rx_mem_release+0xb8>
				mem_release(rx_free, &mem_pdu_rx.free);
   32efc:	4910      	ldr	r1, [pc, #64]	; (32f40 <ll_rx_mem_release+0x17c>)
   32efe:	4628      	mov	r0, r5
   32f00:	f7fc fcfc 	bl	2f8fc <mem_release>
	while (rx) {
   32f04:	2c00      	cmp	r4, #0
   32f06:	f47f af66 	bne.w	32dd6 <ll_rx_mem_release+0x12>
   32f0a:	e789      	b.n	32e20 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   32f0c:	490f      	ldr	r1, [pc, #60]	; (32f4c <ll_rx_mem_release+0x188>)
   32f0e:	f240 53ef 	movw	r3, #1519	; 0x5ef
   32f12:	463a      	mov	r2, r7
   32f14:	4630      	mov	r0, r6
   32f16:	f00f fe99 	bl	42c4c <printk>
   32f1a:	4040      	eors	r0, r0
   32f1c:	f380 8811 	msr	BASEPRI, r0
   32f20:	f04f 0003 	mov.w	r0, #3
   32f24:	df02      	svc	2
   32f26:	e7d0      	b.n	32eca <ll_rx_mem_release+0x106>
   32f28:	0004a184 	.word	0x0004a184
   32f2c:	0004a084 	.word	0x0004a084
   32f30:	0004a024 	.word	0x0004a024
   32f34:	0004a274 	.word	0x0004a274
   32f38:	0004a280 	.word	0x0004a280
   32f3c:	20001f3c 	.word	0x20001f3c
   32f40:	20001f8c 	.word	0x20001f8c
   32f44:	0004a2a4 	.word	0x0004a2a4
   32f48:	0004a1f4 	.word	0x0004a1f4
   32f4c:	0004a4f0 	.word	0x0004a4f0

00032f50 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   32f50:	4801      	ldr	r0, [pc, #4]	; (32f58 <ll_rx_link_alloc+0x8>)
   32f52:	f7fc bcb9 	b.w	2f8c8 <mem_acquire>
   32f56:	bf00      	nop
   32f58:	20001f40 	.word	0x20001f40

00032f5c <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   32f5c:	4901      	ldr	r1, [pc, #4]	; (32f64 <ll_rx_link_release+0x8>)
   32f5e:	f7fc bccd 	b.w	2f8fc <mem_release>
   32f62:	bf00      	nop
   32f64:	20001f40 	.word	0x20001f40

00032f68 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   32f68:	4801      	ldr	r0, [pc, #4]	; (32f70 <ll_rx_alloc+0x8>)
   32f6a:	f7fc bcad 	b.w	2f8c8 <mem_acquire>
   32f6e:	bf00      	nop
   32f70:	20001f8c 	.word	0x20001f8c

00032f74 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   32f74:	4901      	ldr	r1, [pc, #4]	; (32f7c <ll_rx_release+0x8>)
   32f76:	f7fc bcc1 	b.w	2f8fc <mem_release>
   32f7a:	bf00      	nop
   32f7c:	20001f8c 	.word	0x20001f8c

00032f80 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32f80:	4b02      	ldr	r3, [pc, #8]	; (32f8c <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   32f82:	4a03      	ldr	r2, [pc, #12]	; (32f90 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   32f84:	78db      	ldrb	r3, [r3, #3]
   32f86:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   32f88:	f7fc bd02 	b.w	2f990 <memq_enqueue>
   32f8c:	2000063c 	.word	0x2000063c
   32f90:	20002170 	.word	0x20002170

00032f94 <ll_rx_sched>:
	k_sem_give(sem_recv);
   32f94:	4b01      	ldr	r3, [pc, #4]	; (32f9c <ll_rx_sched+0x8>)
   32f96:	6818      	ldr	r0, [r3, #0]
   32f98:	f00e bb2a 	b.w	415f0 <z_impl_k_sem_give>
   32f9c:	20002184 	.word	0x20002184

00032fa0 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   32fa0:	4b0d      	ldr	r3, [pc, #52]	; (32fd8 <ll_pdu_rx_alloc_peek+0x38>)
   32fa2:	7899      	ldrb	r1, [r3, #2]
   32fa4:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   32fa6:	4291      	cmp	r1, r2
   32fa8:	d80c      	bhi.n	32fc4 <ll_pdu_rx_alloc_peek+0x24>
		return last - first;
   32faa:	eba2 0c01 	sub.w	ip, r2, r1
   32fae:	fa5f fc8c 	uxtb.w	ip, ip
   32fb2:	4560      	cmp	r0, ip
   32fb4:	d80d      	bhi.n	32fd2 <ll_pdu_rx_alloc_peek+0x32>
	if (first == last) {
   32fb6:	4291      	cmp	r1, r2
   32fb8:	d00b      	beq.n	32fd2 <ll_pdu_rx_alloc_peek+0x32>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   32fba:	781a      	ldrb	r2, [r3, #0]
	return *((void **)(fifo + first * size));
   32fbc:	fb01 3302 	mla	r3, r1, r2, r3
   32fc0:	6858      	ldr	r0, [r3, #4]
   32fc2:	4770      	bx	lr
		return count - first + last;
   32fc4:	f893 c001 	ldrb.w	ip, [r3, #1]
   32fc8:	4462      	add	r2, ip
   32fca:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   32fcc:	b2d2      	uxtb	r2, r2
   32fce:	4290      	cmp	r0, r2
   32fd0:	d9f3      	bls.n	32fba <ll_pdu_rx_alloc_peek+0x1a>
		return NULL;
   32fd2:	2000      	movs	r0, #0
}
   32fd4:	4770      	bx	lr
   32fd6:	bf00      	nop
   32fd8:	20000514 	.word	0x20000514

00032fdc <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   32fdc:	4b09      	ldr	r3, [pc, #36]	; (33004 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   32fde:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   32fe0:	78da      	ldrb	r2, [r3, #3]
   32fe2:	7818      	ldrb	r0, [r3, #0]
   32fe4:	f893 c001 	ldrb.w	ip, [r3, #1]
   32fe8:	428a      	cmp	r2, r1
   32fea:	d009      	beq.n	33000 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   32fec:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   32fee:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   32ff2:	b2d2      	uxtb	r2, r2
	if (_first == count) {
		_first = 0U;
   32ff4:	4594      	cmp	ip, r2
   32ff6:	bf08      	it	eq
   32ff8:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   32ffa:	6840      	ldr	r0, [r0, #4]
	}

	*first = _first; /* Write back read-index */
   32ffc:	709a      	strb	r2, [r3, #2]

	return mem;
   32ffe:	4770      	bx	lr
		return NULL;
   33000:	2000      	movs	r0, #0
}
   33002:	4770      	bx	lr
   33004:	20000514 	.word	0x20000514

00033008 <ll_tx_ack_put>:
{
   33008:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   3300a:	4a15      	ldr	r2, [pc, #84]	; (33060 <ll_tx_ack_put+0x58>)
   3300c:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   33010:	7854      	ldrb	r4, [r2, #1]
   33012:	f892 e002 	ldrb.w	lr, [r2, #2]
   33016:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   33018:	f10c 0301 	add.w	r3, ip, #1
   3301c:	b2db      	uxtb	r3, r3
		last = 0U;
   3301e:	429c      	cmp	r4, r3
   33020:	bf08      	it	eq
   33022:	2300      	moveq	r3, #0
	if (last == first) {
   33024:	459e      	cmp	lr, r3
   33026:	d00a      	beq.n	3303e <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   33028:	fb1c fc05 	smulbb	ip, ip, r5
   3302c:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
   33030:	f82e 000c 	strh.w	r0, [lr, ip]
   33034:	44e6      	add	lr, ip
	tx->node = node_tx;
   33036:	f8ce 1004 	str.w	r1, [lr, #4]
	*last = idx; /* Commit: Update write index */
   3303a:	70d3      	strb	r3, [r2, #3]
}
   3303c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   3303e:	4a09      	ldr	r2, [pc, #36]	; (33064 <ll_tx_ack_put+0x5c>)
   33040:	4909      	ldr	r1, [pc, #36]	; (33068 <ll_tx_ack_put+0x60>)
   33042:	480a      	ldr	r0, [pc, #40]	; (3306c <ll_tx_ack_put+0x64>)
   33044:	f240 634e 	movw	r3, #1614	; 0x64e
   33048:	f00f fe00 	bl	42c4c <printk>
   3304c:	4040      	eors	r0, r0
   3304e:	f380 8811 	msr	BASEPRI, r0
   33052:	f04f 0003 	mov.w	r0, #3
   33056:	df02      	svc	2
	tx->handle = handle;
   33058:	2300      	movs	r3, #0
   3305a:	801b      	strh	r3, [r3, #0]
   3305c:	deff      	udf	#255	; 0xff
   3305e:	bf00      	nop
   33060:	2000063c 	.word	0x2000063c
   33064:	0004a184 	.word	0x0004a184
   33068:	0004a4e4 	.word	0x0004a4e4
   3306c:	0004a024 	.word	0x0004a024

00033070 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   33070:	2200      	movs	r2, #0
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   33072:	2304      	movs	r3, #4
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   33074:	7002      	strb	r2, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   33076:	700b      	strb	r3, [r1, #0]
}
   33078:	4770      	bx	lr
   3307a:	bf00      	nop

0003307c <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   3307c:	2200      	movs	r2, #0
{
   3307e:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   33080:	4611      	mov	r1, r2
   33082:	4b0a      	ldr	r3, [pc, #40]	; (330ac <ll_radio_state_abort+0x30>)
   33084:	2001      	movs	r0, #1
   33086:	f7fc fcf9 	bl	2fa7c <mayfly_enqueue>
	LL_ASSERT(!ret);
   3308a:	b900      	cbnz	r0, 3308e <ll_radio_state_abort+0x12>
}
   3308c:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   3308e:	4a08      	ldr	r2, [pc, #32]	; (330b0 <ll_radio_state_abort+0x34>)
   33090:	4908      	ldr	r1, [pc, #32]	; (330b4 <ll_radio_state_abort+0x38>)
   33092:	4809      	ldr	r0, [pc, #36]	; (330b8 <ll_radio_state_abort+0x3c>)
   33094:	f240 6366 	movw	r3, #1638	; 0x666
   33098:	f00f fdd8 	bl	42c4c <printk>
   3309c:	4040      	eors	r0, r0
   3309e:	f380 8811 	msr	BASEPRI, r0
   330a2:	f04f 0003 	mov.w	r0, #3
   330a6:	df02      	svc	2
}
   330a8:	bd08      	pop	{r3, pc}
   330aa:	bf00      	nop
   330ac:	200006b0 	.word	0x200006b0
   330b0:	0004a184 	.word	0x0004a184
   330b4:	0004a2bc 	.word	0x0004a2bc
   330b8:	0004a024 	.word	0x0004a024

000330bc <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   330bc:	f030 0302 	bics.w	r3, r0, #2
{
   330c0:	b510      	push	{r4, lr}
   330c2:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   330c4:	d002      	beq.n	330cc <ull_ticker_status_take+0x10>
   330c6:	680b      	ldr	r3, [r1, #0]
   330c8:	2b02      	cmp	r3, #2
   330ca:	d008      	beq.n	330de <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   330cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   330d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   330d4:	4809      	ldr	r0, [pc, #36]	; (330fc <ull_ticker_status_take+0x40>)
   330d6:	f00e fab1 	bl	4163c <z_impl_k_sem_take>
	return *ret_cb;
   330da:	6820      	ldr	r0, [r4, #0]
}
   330dc:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   330de:	4a08      	ldr	r2, [pc, #32]	; (33100 <ull_ticker_status_take+0x44>)
   330e0:	4908      	ldr	r1, [pc, #32]	; (33104 <ull_ticker_status_take+0x48>)
   330e2:	4809      	ldr	r0, [pc, #36]	; (33108 <ull_ticker_status_take+0x4c>)
   330e4:	f240 6382 	movw	r3, #1666	; 0x682
   330e8:	f00f fdb0 	bl	42c4c <printk>
   330ec:	4040      	eors	r0, r0
   330ee:	f380 8811 	msr	BASEPRI, r0
   330f2:	f04f 0003 	mov.w	r0, #3
   330f6:	df02      	svc	2
   330f8:	e7e8      	b.n	330cc <ull_ticker_status_take+0x10>
   330fa:	bf00      	nop
   330fc:	20002188 	.word	0x20002188
   33100:	0004a184 	.word	0x0004a184
   33104:	0004a2c4 	.word	0x0004a2c4
   33108:	0004a024 	.word	0x0004a024

0003310c <ull_disable_mark>:
	if (!*m) {
   3310c:	4904      	ldr	r1, [pc, #16]	; (33120 <ull_disable_mark+0x14>)
   3310e:	680a      	ldr	r2, [r1, #0]
   33110:	b10a      	cbz	r2, 33116 <ull_disable_mark+0xa>
}
   33112:	4610      	mov	r0, r2
   33114:	4770      	bx	lr
		*m = param;
   33116:	4602      	mov	r2, r0
   33118:	6008      	str	r0, [r1, #0]
}
   3311a:	4610      	mov	r0, r2
   3311c:	4770      	bx	lr
   3311e:	bf00      	nop
   33120:	20001f08 	.word	0x20001f08

00033124 <ull_disable_unmark>:
	if (*m && *m == param) {
   33124:	4a04      	ldr	r2, [pc, #16]	; (33138 <ull_disable_unmark+0x14>)
   33126:	6813      	ldr	r3, [r2, #0]
   33128:	b123      	cbz	r3, 33134 <ull_disable_unmark+0x10>
   3312a:	4298      	cmp	r0, r3
		*m = NULL;
   3312c:	bf06      	itte	eq
   3312e:	2100      	moveq	r1, #0
   33130:	6011      	streq	r1, [r2, #0]
	return NULL;
   33132:	2300      	movne	r3, #0
}
   33134:	4618      	mov	r0, r3
   33136:	4770      	bx	lr
   33138:	20001f08 	.word	0x20001f08

0003313c <ull_disable_mark_get>:
	return mark_get(mark_disable);
   3313c:	4b01      	ldr	r3, [pc, #4]	; (33144 <ull_disable_mark_get+0x8>)
}
   3313e:	6818      	ldr	r0, [r3, #0]
   33140:	4770      	bx	lr
   33142:	bf00      	nop
   33144:	20001f08 	.word	0x20001f08

00033148 <ull_update_mark>:
	if (!*m) {
   33148:	4904      	ldr	r1, [pc, #16]	; (3315c <ull_update_mark+0x14>)
   3314a:	680a      	ldr	r2, [r1, #0]
   3314c:	b10a      	cbz	r2, 33152 <ull_update_mark+0xa>
}
   3314e:	4610      	mov	r0, r2
   33150:	4770      	bx	lr
		*m = param;
   33152:	4602      	mov	r2, r0
   33154:	6008      	str	r0, [r1, #0]
}
   33156:	4610      	mov	r0, r2
   33158:	4770      	bx	lr
   3315a:	bf00      	nop
   3315c:	20001f0c 	.word	0x20001f0c

00033160 <ull_update_unmark>:
	if (*m && *m == param) {
   33160:	4a04      	ldr	r2, [pc, #16]	; (33174 <ull_update_unmark+0x14>)
   33162:	6813      	ldr	r3, [r2, #0]
   33164:	b123      	cbz	r3, 33170 <ull_update_unmark+0x10>
   33166:	4298      	cmp	r0, r3
		*m = NULL;
   33168:	bf06      	itte	eq
   3316a:	2100      	moveq	r1, #0
   3316c:	6011      	streq	r1, [r2, #0]
	return NULL;
   3316e:	2300      	movne	r3, #0
}
   33170:	4618      	mov	r0, r3
   33172:	4770      	bx	lr
   33174:	20001f0c 	.word	0x20001f0c

00033178 <ull_update_mark_get>:
	return mark_get(mark_update);
   33178:	4b01      	ldr	r3, [pc, #4]	; (33180 <ull_update_mark_get+0x8>)
}
   3317a:	6818      	ldr	r0, [r3, #0]
   3317c:	4770      	bx	lr
   3317e:	bf00      	nop
   33180:	20001f0c 	.word	0x20001f0c

00033184 <ull_disable>:
{
   33184:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   33186:	6805      	ldr	r5, [r0, #0]
   33188:	782b      	ldrb	r3, [r5, #0]
{
   3318a:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   3318c:	b353      	cbz	r3, 331e4 <ull_disable+0x60>
	compiler_barrier();
   3318e:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   33190:	2201      	movs	r2, #1
   33192:	2100      	movs	r1, #0
   33194:	4668      	mov	r0, sp
   33196:	f015 fca3 	bl	48ae0 <z_impl_k_sem_init>
   3319a:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   3319c:	4a13      	ldr	r2, [pc, #76]	; (331ec <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   3319e:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   331a2:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   331a4:	b1f3      	cbz	r3, 331e4 <ull_disable+0x60>
	mfy.param = lll;
   331a6:	4b12      	ldr	r3, [pc, #72]	; (331f0 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   331a8:	2200      	movs	r2, #0
   331aa:	4611      	mov	r1, r2
   331ac:	2003      	movs	r0, #3
	mfy.param = lll;
   331ae:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   331b0:	f7fc fc64 	bl	2fa7c <mayfly_enqueue>
	LL_ASSERT(!ret);
   331b4:	b940      	cbnz	r0, 331c8 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   331b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   331ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   331be:	4668      	mov	r0, sp
   331c0:	f00e fa3c 	bl	4163c <z_impl_k_sem_take>
}
   331c4:	b007      	add	sp, #28
   331c6:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   331c8:	4a0a      	ldr	r2, [pc, #40]	; (331f4 <ull_disable+0x70>)
   331ca:	490b      	ldr	r1, [pc, #44]	; (331f8 <ull_disable+0x74>)
   331cc:	480b      	ldr	r0, [pc, #44]	; (331fc <ull_disable+0x78>)
   331ce:	f240 63ff 	movw	r3, #1791	; 0x6ff
   331d2:	f00f fd3b 	bl	42c4c <printk>
   331d6:	4040      	eors	r0, r0
   331d8:	f380 8811 	msr	BASEPRI, r0
   331dc:	f04f 0003 	mov.w	r0, #3
   331e0:	df02      	svc	2
   331e2:	e7e8      	b.n	331b6 <ull_disable+0x32>
		return -EALREADY;
   331e4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   331e8:	e7ec      	b.n	331c4 <ull_disable+0x40>
   331ea:	bf00      	nop
   331ec:	000325cd 	.word	0x000325cd
   331f0:	200006a0 	.word	0x200006a0
   331f4:	0004a184 	.word	0x0004a184
   331f8:	0004a2bc 	.word	0x0004a2bc
   331fc:	0004a024 	.word	0x0004a024

00033200 <ull_ticker_stop_with_mark>:
{
   33200:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   33202:	4e20      	ldr	r6, [pc, #128]	; (33284 <ull_ticker_stop_with_mark+0x84>)
   33204:	6833      	ldr	r3, [r6, #0]
{
   33206:	b085      	sub	sp, #20
   33208:	460c      	mov	r4, r1
   3320a:	4617      	mov	r7, r2
	if (!*m) {
   3320c:	b353      	cbz	r3, 33264 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   3320e:	4299      	cmp	r1, r3
   33210:	d113      	bne.n	3323a <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   33212:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   33214:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   33216:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   33218:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   3321a:	9500      	str	r5, [sp, #0]
   3321c:	4b1a      	ldr	r3, [pc, #104]	; (33288 <ull_ticker_stop_with_mark+0x88>)
   3321e:	2103      	movs	r1, #3
   33220:	2000      	movs	r0, #0
   33222:	f7fd fdf7 	bl	30e14 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   33226:	4629      	mov	r1, r5
   33228:	f7ff ff48 	bl	330bc <ull_ticker_status_take>
	if (ret) {
   3322c:	4605      	mov	r5, r0
   3322e:	b140      	cbz	r0, 33242 <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   33230:	6833      	ldr	r3, [r6, #0]
   33232:	b10b      	cbz	r3, 33238 <ull_ticker_stop_with_mark+0x38>
   33234:	429c      	cmp	r4, r3
   33236:	d017      	beq.n	33268 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   33238:	b304      	cbz	r4, 3327c <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
   3323a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   3323e:	b005      	add	sp, #20
   33240:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   33242:	4638      	mov	r0, r7
   33244:	f7ff ff9e 	bl	33184 <ull_disable>
	if (*m && *m == param) {
   33248:	6833      	ldr	r3, [r6, #0]
   3324a:	b10b      	cbz	r3, 33250 <ull_ticker_stop_with_mark+0x50>
   3324c:	429c      	cmp	r4, r3
   3324e:	d011      	beq.n	33274 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   33250:	2c00      	cmp	r4, #0
   33252:	d1f2      	bne.n	3323a <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   33254:	2800      	cmp	r0, #0
   33256:	d0f2      	beq.n	3323e <ull_ticker_stop_with_mark+0x3e>
	return 0;
   33258:	f110 0f78 	cmn.w	r0, #120	; 0x78
   3325c:	bf08      	it	eq
   3325e:	2000      	moveq	r0, #0
}
   33260:	b005      	add	sp, #20
   33262:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   33264:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   33266:	e7d4      	b.n	33212 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   33268:	2300      	movs	r3, #0
		return -EALREADY;
   3326a:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   3326e:	6033      	str	r3, [r6, #0]
}
   33270:	b005      	add	sp, #20
   33272:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   33274:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   33276:	2800      	cmp	r0, #0
   33278:	d0e1      	beq.n	3323e <ull_ticker_stop_with_mark+0x3e>
   3327a:	e7ed      	b.n	33258 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   3327c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   33280:	e7dd      	b.n	3323e <ull_ticker_stop_with_mark+0x3e>
   33282:	bf00      	nop
   33284:	20001f08 	.word	0x20001f08
   33288:	000325c1 	.word	0x000325c1

0003328c <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   3328c:	4b0d      	ldr	r3, [pc, #52]	; (332c4 <ull_pdu_rx_alloc_peek+0x38>)
   3328e:	7899      	ldrb	r1, [r3, #2]
   33290:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   33292:	4291      	cmp	r1, r2
   33294:	d80c      	bhi.n	332b0 <ull_pdu_rx_alloc_peek+0x24>
		return last - first;
   33296:	eba2 0c01 	sub.w	ip, r2, r1
   3329a:	fa5f fc8c 	uxtb.w	ip, ip
   3329e:	4560      	cmp	r0, ip
   332a0:	d80d      	bhi.n	332be <ull_pdu_rx_alloc_peek+0x32>
	if (first == last) {
   332a2:	4291      	cmp	r1, r2
   332a4:	d00b      	beq.n	332be <ull_pdu_rx_alloc_peek+0x32>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   332a6:	781a      	ldrb	r2, [r3, #0]
	return *((void **)(fifo + first * size));
   332a8:	fb01 3302 	mla	r3, r1, r2, r3
   332ac:	6858      	ldr	r0, [r3, #4]
   332ae:	4770      	bx	lr
		return count - first + last;
   332b0:	f893 c001 	ldrb.w	ip, [r3, #1]
   332b4:	4462      	add	r2, ip
   332b6:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   332b8:	b2d2      	uxtb	r2, r2
   332ba:	4290      	cmp	r0, r2
   332bc:	d9f3      	bls.n	332a6 <ull_pdu_rx_alloc_peek+0x1a>
		return NULL;
   332be:	2000      	movs	r0, #0
}
   332c0:	4770      	bx	lr
   332c2:	bf00      	nop
   332c4:	20000520 	.word	0x20000520

000332c8 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   332c8:	4b09      	ldr	r3, [pc, #36]	; (332f0 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   332ca:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   332cc:	78da      	ldrb	r2, [r3, #3]
   332ce:	7818      	ldrb	r0, [r3, #0]
   332d0:	f893 c001 	ldrb.w	ip, [r3, #1]
   332d4:	428a      	cmp	r2, r1
   332d6:	d009      	beq.n	332ec <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   332d8:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   332da:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   332de:	b2d2      	uxtb	r2, r2
		_first = 0U;
   332e0:	4594      	cmp	ip, r2
   332e2:	bf08      	it	eq
   332e4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   332e6:	6840      	ldr	r0, [r0, #4]
	*first = _first; /* Write back read-index */
   332e8:	709a      	strb	r2, [r3, #2]
	return mem;
   332ea:	4770      	bx	lr
		return NULL;
   332ec:	2000      	movs	r0, #0
}
   332ee:	4770      	bx	lr
   332f0:	20000520 	.word	0x20000520

000332f4 <ull_rx_put>:
{
   332f4:	b538      	push	{r3, r4, r5, lr}
   332f6:	460c      	mov	r4, r1
   332f8:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   332fa:	f005 fbcb 	bl	38a94 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   332fe:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   33300:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   33302:	4a03      	ldr	r2, [pc, #12]	; (33310 <ull_rx_put+0x1c>)
   33304:	4628      	mov	r0, r5
}
   33306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   3330a:	f7fc bb41 	b.w	2f990 <memq_enqueue>
   3330e:	bf00      	nop
   33310:	20002180 	.word	0x20002180

00033314 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   33314:	2201      	movs	r2, #1
   33316:	4b02      	ldr	r3, [pc, #8]	; (33320 <ull_rx_sched+0xc>)
   33318:	4611      	mov	r1, r2
   3331a:	2000      	movs	r0, #0
   3331c:	f7fc bbae 	b.w	2fa7c <mayfly_enqueue>
   33320:	20000690 	.word	0x20000690

00033324 <ull_prepare_enqueue>:
{
   33324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   33328:	4e15      	ldr	r6, [pc, #84]	; (33380 <ull_prepare_enqueue+0x5c>)
{
   3332a:	f89d a020 	ldrb.w	sl, [sp, #32]
   3332e:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   33330:	78f3      	ldrb	r3, [r6, #3]
{
   33332:	460f      	mov	r7, r1
	last = last + 1;
   33334:	1c5d      	adds	r5, r3, #1
   33336:	4611      	mov	r1, r2
	if (last == count) {
   33338:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
   3333a:	b2ed      	uxtb	r5, r5
		last = 0U;
   3333c:	42aa      	cmp	r2, r5
   3333e:	bf08      	it	eq
   33340:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   33342:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
   33344:	42aa      	cmp	r2, r5
{
   33346:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   33348:	7830      	ldrb	r0, [r6, #0]
   3334a:	d015      	beq.n	33378 <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   3334c:	1d34      	adds	r4, r6, #4
   3334e:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   33352:	2210      	movs	r2, #16
   33354:	4620      	mov	r0, r4
   33356:	f011 fd54 	bl	44e02 <memcpy>
	e->is_resume = is_resume;
   3335a:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   3335c:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   3335e:	f00a 0a01 	and.w	sl, sl, #1
   33362:	f023 0303 	bic.w	r3, r3, #3
   33366:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   3336a:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   3336e:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   33370:	70f5      	strb	r5, [r6, #3]
}
   33372:	4620      	mov	r0, r4
   33374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   33378:	2400      	movs	r4, #0
}
   3337a:	4620      	mov	r0, r4
   3337c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33380:	20000538 	.word	0x20000538

00033384 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   33384:	4805      	ldr	r0, [pc, #20]	; (3339c <ull_prepare_dequeue_get+0x18>)
   33386:	7882      	ldrb	r2, [r0, #2]
	if (first == last) {
   33388:	78c1      	ldrb	r1, [r0, #3]
   3338a:	f890 c000 	ldrb.w	ip, [r0]
   3338e:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   33390:	bf1a      	itte	ne
   33392:	3004      	addne	r0, #4
   33394:	fb02 000c 	mlane	r0, r2, ip, r0
		return NULL;
   33398:	2000      	moveq	r0, #0
}
   3339a:	4770      	bx	lr
   3339c:	20000538 	.word	0x20000538

000333a0 <ull_prepare_dequeue_iter>:
{
   333a0:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   333a2:	4b0d      	ldr	r3, [pc, #52]	; (333d8 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   333a4:	7802      	ldrb	r2, [r0, #0]
   333a6:	7859      	ldrb	r1, [r3, #1]
   333a8:	f893 c003 	ldrb.w	ip, [r3, #3]
   333ac:	f893 e000 	ldrb.w	lr, [r3]
   333b0:	4291      	cmp	r1, r2
   333b2:	bf9c      	itt	ls
   333b4:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   333b6:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   333b8:	4594      	cmp	ip, r2
   333ba:	d00a      	beq.n	333d2 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   333bc:	1c53      	adds	r3, r2, #1
   333be:	b2db      	uxtb	r3, r3
		i = 0U;
   333c0:	4299      	cmp	r1, r3
   333c2:	bf08      	it	eq
   333c4:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   333c6:	4905      	ldr	r1, [pc, #20]	; (333dc <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   333c8:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   333ca:	fb02 100e 	mla	r0, r2, lr, r1
}
   333ce:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   333d2:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   333d4:	e7fb      	b.n	333ce <ull_prepare_dequeue_iter+0x2e>
   333d6:	bf00      	nop
   333d8:	20000538 	.word	0x20000538
   333dc:	2000053c 	.word	0x2000053c

000333e0 <ull_prepare_dequeue>:
{
   333e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   333e4:	4c23      	ldr	r4, [pc, #140]	; (33474 <ull_prepare_dequeue+0x94>)
   333e6:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   333e8:	78e1      	ldrb	r1, [r4, #3]
   333ea:	7823      	ldrb	r3, [r4, #0]
   333ec:	4291      	cmp	r1, r2
   333ee:	d027      	beq.n	33440 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   333f0:	1d27      	adds	r7, r4, #4
			mfy.param = next;
   333f2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 33478 <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
   333f6:	f8df b084 	ldr.w	fp, [pc, #132]	; 3347c <ull_prepare_dequeue+0x9c>
   333fa:	f8df a084 	ldr.w	sl, [pc, #132]	; 33480 <ull_prepare_dequeue+0xa0>
   333fe:	4680      	mov	r8, r0
   33400:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
   33404:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   33406:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   33408:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   3340c:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   33410:	d518      	bpl.n	33444 <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
   33412:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
   33414:	78e1      	ldrb	r1, [r4, #3]
   33416:	7820      	ldrb	r0, [r4, #0]
   33418:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
   3341c:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   3341e:	4291      	cmp	r1, r2
	_first += 1U;
   33420:	b2db      	uxtb	r3, r3
	if (_first == last) {
   33422:	d00d      	beq.n	33440 <ull_prepare_dequeue+0x60>
		_first = 0U;
   33424:	459c      	cmp	ip, r3
   33426:	bf08      	it	eq
   33428:	2300      	moveq	r3, #0
	if (first == last) {
   3342a:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   3342c:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   3342e:	d007      	beq.n	33440 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   33430:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   33434:	2d00      	cmp	r5, #0
   33436:	d1e5      	bne.n	33404 <ull_prepare_dequeue+0x24>
   33438:	b116      	cbz	r6, 33440 <ull_prepare_dequeue+0x60>
   3343a:	7f03      	ldrb	r3, [r0, #28]
   3343c:	07db      	lsls	r3, r3, #31
   3343e:	d5e1      	bpl.n	33404 <ull_prepare_dequeue+0x24>
}
   33440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   33444:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   33448:	4b0b      	ldr	r3, [pc, #44]	; (33478 <ull_prepare_dequeue+0x98>)
   3344a:	462a      	mov	r2, r5
   3344c:	4629      	mov	r1, r5
   3344e:	4640      	mov	r0, r8
   33450:	f7fc fb14 	bl	2fa7c <mayfly_enqueue>
			LL_ASSERT(!ret);
   33454:	2800      	cmp	r0, #0
   33456:	d0dc      	beq.n	33412 <ull_prepare_dequeue+0x32>
   33458:	480a      	ldr	r0, [pc, #40]	; (33484 <ull_prepare_dequeue+0xa4>)
   3345a:	f240 7376 	movw	r3, #1910	; 0x776
   3345e:	465a      	mov	r2, fp
   33460:	4651      	mov	r1, sl
   33462:	f00f fbf3 	bl	42c4c <printk>
   33466:	4040      	eors	r0, r0
   33468:	f380 8811 	msr	BASEPRI, r0
   3346c:	f04f 0003 	mov.w	r0, #3
   33470:	df02      	svc	2
   33472:	e7ce      	b.n	33412 <ull_prepare_dequeue+0x32>
   33474:	20000538 	.word	0x20000538
   33478:	20000660 	.word	0x20000660
   3347c:	0004a184 	.word	0x0004a184
   33480:	0004a2bc 	.word	0x0004a2bc
   33484:	0004a024 	.word	0x0004a024

00033488 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   33488:	4b06      	ldr	r3, [pc, #24]	; (334a4 <ull_event_done_extra_get+0x1c>)
   3348a:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   3348c:	78d9      	ldrb	r1, [r3, #3]
   3348e:	7818      	ldrb	r0, [r3, #0]
   33490:	4291      	cmp	r1, r2
   33492:	d005      	beq.n	334a0 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   33494:	fb02 3300 	mla	r3, r2, r0, r3
   33498:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   3349a:	b110      	cbz	r0, 334a2 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   3349c:	3020      	adds	r0, #32
   3349e:	4770      	bx	lr
		return NULL;
   334a0:	2000      	movs	r0, #0
}
   334a2:	4770      	bx	lr
   334a4:	200004fc 	.word	0x200004fc

000334a8 <ull_event_done>:
{
   334a8:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   334aa:	4a13      	ldr	r2, [pc, #76]	; (334f8 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   334ac:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   334ae:	78d4      	ldrb	r4, [r2, #3]
   334b0:	7811      	ldrb	r1, [r2, #0]
   334b2:	429c      	cmp	r4, r3
{
   334b4:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   334b6:	7850      	ldrb	r0, [r2, #1]
   334b8:	d01b      	beq.n	334f2 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   334ba:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   334be:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   334c0:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   334c2:	b2db      	uxtb	r3, r3
		_first = 0U;
   334c4:	4298      	cmp	r0, r3
   334c6:	bf08      	it	eq
   334c8:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   334ca:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   334cc:	b17c      	cbz	r4, 334ee <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   334ce:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   334d0:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   334d2:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   334d4:	4a09      	ldr	r2, [pc, #36]	; (334fc <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   334d6:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   334d8:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   334da:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   334dc:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   334de:	f7fc fa57 	bl	2f990 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   334e2:	2201      	movs	r2, #1
   334e4:	4b06      	ldr	r3, [pc, #24]	; (33500 <ull_event_done+0x58>)
   334e6:	4611      	mov	r1, r2
   334e8:	4628      	mov	r0, r5
   334ea:	f7fc fac7 	bl	2fa7c <mayfly_enqueue>
}
   334ee:	4620      	mov	r0, r4
   334f0:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   334f2:	2400      	movs	r4, #0
   334f4:	e7fb      	b.n	334ee <ull_event_done+0x46>
   334f6:	bf00      	nop
   334f8:	200004fc 	.word	0x200004fc
   334fc:	20002178 	.word	0x20002178
   33500:	20000680 	.word	0x20000680

00033504 <ull_rxfifo_alloc>:
{
   33504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33508:	b083      	sub	sp, #12
   3350a:	461d      	mov	r5, r3
   3350c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   3350e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   33512:	e9cd 0400 	strd	r0, r4, [sp]
   33516:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   3351a:	b33b      	cbz	r3, 3356c <ull_rxfifo_alloc+0x68>
   3351c:	1e5c      	subs	r4, r3, #1
   3351e:	f895 b000 	ldrb.w	fp, [r5]
   33522:	4688      	mov	r8, r1
   33524:	4617      	mov	r7, r2
   33526:	b2e4      	uxtb	r4, r4
	last = last + 1;
   33528:	f10b 0301 	add.w	r3, fp, #1
   3352c:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
   33530:	45d8      	cmp	r8, fp
   33532:	bf08      	it	eq
   33534:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
   33538:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
   3353a:	4648      	mov	r0, r9
   3353c:	d016      	beq.n	3356c <ull_rxfifo_alloc+0x68>
   3353e:	f7fc f9c3 	bl	2f8c8 <mem_acquire>
   33542:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
   33544:	4650      	mov	r0, sl
		if (!link) {
   33546:	b18e      	cbz	r6, 3356c <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
   33548:	f7fc f9be 	bl	2f8c8 <mem_acquire>
		if (!rx) {
   3354c:	b188      	cbz	r0, 33572 <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
   3354e:	2300      	movs	r3, #0
   33550:	6073      	str	r3, [r6, #4]
		rx->link = link;
   33552:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   33554:	782a      	ldrb	r2, [r5, #0]
   33556:	9b00      	ldr	r3, [sp, #0]
   33558:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   3355c:	9b01      	ldr	r3, [sp, #4]
   3355e:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   33560:	3c01      	subs	r4, #1
   33562:	b2e4      	uxtb	r4, r4
   33564:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   33566:	f885 b000 	strb.w	fp, [r5]
   3356a:	d1dd      	bne.n	33528 <ull_rxfifo_alloc+0x24>
}
   3356c:	b003      	add	sp, #12
   3356e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   33572:	4649      	mov	r1, r9
   33574:	4630      	mov	r0, r6
}
   33576:	b003      	add	sp, #12
   33578:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   3357c:	f7fc b9be 	b.w	2f8fc <mem_release>

00033580 <init_reset>:
{
   33580:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   33582:	4c3f      	ldr	r4, [pc, #252]	; (33680 <init_reset+0x100>)
   33584:	4d3f      	ldr	r5, [pc, #252]	; (33684 <init_reset+0x104>)
   33586:	79a2      	ldrb	r2, [r4, #6]
   33588:	88a1      	ldrh	r1, [r4, #4]
   3358a:	4e3f      	ldr	r6, [pc, #252]	; (33688 <init_reset+0x108>)
   3358c:	2000      	movs	r0, #0
{
   3358e:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   33590:	4623      	mov	r3, r4
   33592:	8068      	strh	r0, [r5, #2]
   33594:	f104 0008 	add.w	r0, r4, #8
   33598:	f7fc f966 	bl	2f868 <mem_init>
   3359c:	79e3      	ldrb	r3, [r4, #7]
   3359e:	79a2      	ldrb	r2, [r4, #6]
   335a0:	1d30      	adds	r0, r6, #4
   335a2:	441a      	add	r2, r3
   335a4:	2108      	movs	r1, #8
   335a6:	4633      	mov	r3, r6
   335a8:	f7fc f95e 	bl	2f868 <mem_init>
   335ac:	9602      	str	r6, [sp, #8]
   335ae:	462e      	mov	r6, r5
   335b0:	79a3      	ldrb	r3, [r4, #6]
   335b2:	f816 0b04 	ldrb.w	r0, [r6], #4
   335b6:	78aa      	ldrb	r2, [r5, #2]
   335b8:	7869      	ldrb	r1, [r5, #1]
   335ba:	9303      	str	r3, [sp, #12]
   335bc:	e9cd 6400 	strd	r6, r4, [sp]
   335c0:	1ceb      	adds	r3, r5, #3
   335c2:	f7ff ff9f 	bl	33504 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   335c6:	4b31      	ldr	r3, [pc, #196]	; (3368c <init_reset+0x10c>)
   335c8:	2207      	movs	r2, #7
   335ca:	1d18      	adds	r0, r3, #4
   335cc:	2144      	movs	r1, #68	; 0x44
   335ce:	f7fc f94b 	bl	2f868 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   335d2:	4b2f      	ldr	r3, [pc, #188]	; (33690 <init_reset+0x110>)
   335d4:	2209      	movs	r2, #9
   335d6:	1d18      	adds	r0, r3, #4
   335d8:	2108      	movs	r1, #8
   335da:	f7fc f945 	bl	2f868 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   335de:	482c      	ldr	r0, [pc, #176]	; (33690 <init_reset+0x110>)
   335e0:	f7fc f972 	bl	2f8c8 <mem_acquire>
	LL_ASSERT(link);
   335e4:	4604      	mov	r4, r0
   335e6:	b308      	cbz	r0, 3362c <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   335e8:	4a2a      	ldr	r2, [pc, #168]	; (33694 <init_reset+0x114>)
   335ea:	4620      	mov	r0, r4
   335ec:	1f11      	subs	r1, r2, #4
   335ee:	f7fc f9c1 	bl	2f974 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   335f2:	4825      	ldr	r0, [pc, #148]	; (33688 <init_reset+0x108>)
   335f4:	f7fc f968 	bl	2f8c8 <mem_acquire>
	LL_ASSERT(link);
   335f8:	4604      	mov	r4, r0
   335fa:	b328      	cbz	r0, 33648 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   335fc:	4a26      	ldr	r2, [pc, #152]	; (33698 <init_reset+0x118>)
   335fe:	4620      	mov	r0, r4
   33600:	1f11      	subs	r1, r2, #4
   33602:	f7fc f9b7 	bl	2f974 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   33606:	4822      	ldr	r0, [pc, #136]	; (33690 <init_reset+0x110>)
   33608:	f7fc f95e 	bl	2f8c8 <mem_acquire>
	LL_ASSERT(link);
   3360c:	4604      	mov	r4, r0
   3360e:	b348      	cbz	r0, 33664 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   33610:	4a22      	ldr	r2, [pc, #136]	; (3369c <init_reset+0x11c>)
   33612:	4620      	mov	r0, r4
   33614:	1f11      	subs	r1, r2, #4
   33616:	f7fc f9ad 	bl	2f974 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   3361a:	4b21      	ldr	r3, [pc, #132]	; (336a0 <init_reset+0x120>)
   3361c:	2205      	movs	r2, #5
	rx_alloc(UINT8_MAX);
   3361e:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   33620:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   33622:	f7ff f8bf 	bl	327a4 <rx_alloc>
}
   33626:	2000      	movs	r0, #0
   33628:	b004      	add	sp, #16
   3362a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   3362c:	4a1d      	ldr	r2, [pc, #116]	; (336a4 <init_reset+0x124>)
   3362e:	491e      	ldr	r1, [pc, #120]	; (336a8 <init_reset+0x128>)
   33630:	481e      	ldr	r0, [pc, #120]	; (336ac <init_reset+0x12c>)
   33632:	f640 0302 	movw	r3, #2050	; 0x802
   33636:	f00f fb09 	bl	42c4c <printk>
   3363a:	4040      	eors	r0, r0
   3363c:	f380 8811 	msr	BASEPRI, r0
   33640:	f04f 0003 	mov.w	r0, #3
   33644:	df02      	svc	2
   33646:	e7cf      	b.n	335e8 <init_reset+0x68>
	LL_ASSERT(link);
   33648:	4a16      	ldr	r2, [pc, #88]	; (336a4 <init_reset+0x124>)
   3364a:	4917      	ldr	r1, [pc, #92]	; (336a8 <init_reset+0x128>)
   3364c:	4817      	ldr	r0, [pc, #92]	; (336ac <init_reset+0x12c>)
   3364e:	f640 030a 	movw	r3, #2058	; 0x80a
   33652:	f00f fafb 	bl	42c4c <printk>
   33656:	4040      	eors	r0, r0
   33658:	f380 8811 	msr	BASEPRI, r0
   3365c:	f04f 0003 	mov.w	r0, #3
   33660:	df02      	svc	2
   33662:	e7cb      	b.n	335fc <init_reset+0x7c>
	LL_ASSERT(link);
   33664:	4a0f      	ldr	r2, [pc, #60]	; (336a4 <init_reset+0x124>)
   33666:	4910      	ldr	r1, [pc, #64]	; (336a8 <init_reset+0x128>)
   33668:	4810      	ldr	r0, [pc, #64]	; (336ac <init_reset+0x12c>)
   3366a:	f640 0312 	movw	r3, #2066	; 0x812
   3366e:	f00f faed 	bl	42c4c <printk>
   33672:	4040      	eors	r0, r0
   33674:	f380 8811 	msr	BASEPRI, r0
   33678:	f04f 0003 	mov.w	r0, #3
   3367c:	df02      	svc	2
   3367e:	e7c7      	b.n	33610 <init_reset+0x90>
   33680:	20000424 	.word	0x20000424
   33684:	200004fc 	.word	0x200004fc
   33688:	20001f10 	.word	0x20001f10
   3368c:	20001f8c 	.word	0x20001f8c
   33690:	20001f40 	.word	0x20001f40
   33694:	20002180 	.word	0x20002180
   33698:	20002178 	.word	0x20002178
   3369c:	20002170 	.word	0x20002170
   336a0:	20001f3c 	.word	0x20001f3c
   336a4:	0004a184 	.word	0x0004a184
   336a8:	0004a4f0 	.word	0x0004a4f0
   336ac:	0004a024 	.word	0x0004a024

000336b0 <ll_init>:
{
   336b0:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   336b2:	4b2c      	ldr	r3, [pc, #176]	; (33764 <ll_init+0xb4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   336b4:	4d2c      	ldr	r5, [pc, #176]	; (33768 <ll_init+0xb8>)
	sem_recv = sem_rx;
   336b6:	6018      	str	r0, [r3, #0]
{
   336b8:	b087      	sub	sp, #28
	cntr_init();
   336ba:	f008 fd6f 	bl	3c19c <cntr_init>
	mayfly_init();
   336be:	f7fc f989 	bl	2f9d4 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   336c2:	492a      	ldr	r1, [pc, #168]	; (3376c <ll_init+0xbc>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   336c4:	4a2a      	ldr	r2, [pc, #168]	; (33770 <ll_init+0xc0>)
   336c6:	9505      	str	r5, [sp, #20]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   336c8:	f04f 0c05 	mov.w	ip, #5
   336cc:	f881 c008 	strb.w	ip, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   336d0:	4c28      	ldr	r4, [pc, #160]	; (33774 <ll_init+0xc4>)
   336d2:	9204      	str	r2, [sp, #16]
   336d4:	4a28      	ldr	r2, [pc, #160]	; (33778 <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   336d6:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   336d8:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   336dc:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   336de:	240d      	movs	r4, #13
   336e0:	e9cd 1400 	strd	r1, r4, [sp]
   336e4:	4a25      	ldr	r2, [pc, #148]	; (3377c <ll_init+0xcc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   336e6:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   336e8:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   336ea:	700b      	strb	r3, [r1, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   336ec:	2000      	movs	r0, #0
   336ee:	2106      	movs	r1, #6
   336f0:	f7fd fa46 	bl	30b80 <ticker_init>
	LL_ASSERT(!err);
   336f4:	bb40      	cbnz	r0, 33748 <ll_init+0x98>
	return z_impl_k_sem_init(sem, initial_count, limit);
   336f6:	2201      	movs	r2, #1
   336f8:	2100      	movs	r1, #0
   336fa:	4821      	ldr	r0, [pc, #132]	; (33780 <ll_init+0xd0>)
   336fc:	f015 f9f0 	bl	48ae0 <z_impl_k_sem_init>
	err = lll_init();
   33700:	f006 ff90 	bl	3a624 <lll_init>
	if (err) {
   33704:	4604      	mov	r4, r0
   33706:	b110      	cbz	r0, 3370e <ll_init+0x5e>
}
   33708:	4620      	mov	r0, r4
   3370a:	b007      	add	sp, #28
   3370c:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   3370e:	f7ff ff37 	bl	33580 <init_reset>
	if (err) {
   33712:	4604      	mov	r4, r0
   33714:	2800      	cmp	r0, #0
   33716:	d1f7      	bne.n	33708 <ll_init+0x58>
	err = lll_adv_init();
   33718:	f007 fbd6 	bl	3aec8 <lll_adv_init>
	if (err) {
   3371c:	4604      	mov	r4, r0
   3371e:	2800      	cmp	r0, #0
   33720:	d1f2      	bne.n	33708 <ll_init+0x58>
	err = ull_adv_init();
   33722:	f000 fcdd 	bl	340e0 <ull_adv_init>
	if (err) {
   33726:	4604      	mov	r4, r0
   33728:	2800      	cmp	r0, #0
   3372a:	d1ed      	bne.n	33708 <ll_init+0x58>
	err = lll_conn_init();
   3372c:	f008 f888 	bl	3b840 <lll_conn_init>
	if (err) {
   33730:	4604      	mov	r4, r0
   33732:	2800      	cmp	r0, #0
   33734:	d1e8      	bne.n	33708 <ll_init+0x58>
	err = ull_conn_init();
   33736:	f001 ff55 	bl	355e4 <ull_conn_init>
	if (err) {
   3373a:	4604      	mov	r4, r0
   3373c:	2800      	cmp	r0, #0
   3373e:	d1e3      	bne.n	33708 <ll_init+0x58>
		ull_filter_reset(true);
   33740:	2001      	movs	r0, #1
   33742:	f006 f93f 	bl	399c4 <ull_filter_reset>
	return  0;
   33746:	e7df      	b.n	33708 <ll_init+0x58>
	LL_ASSERT(!err);
   33748:	4a0e      	ldr	r2, [pc, #56]	; (33784 <ll_init+0xd4>)
   3374a:	490f      	ldr	r1, [pc, #60]	; (33788 <ll_init+0xd8>)
   3374c:	480f      	ldr	r0, [pc, #60]	; (3378c <ll_init+0xdc>)
   3374e:	f240 230d 	movw	r3, #525	; 0x20d
   33752:	f00f fa7b 	bl	42c4c <printk>
   33756:	4040      	eors	r0, r0
   33758:	f380 8811 	msr	BASEPRI, r0
   3375c:	f04f 0003 	mov.w	r0, #3
   33760:	df02      	svc	2
   33762:	e7c8      	b.n	336f6 <ll_init+0x46>
   33764:	20002184 	.word	0x20002184
   33768:	0003ce35 	.word	0x0003ce35
   3376c:	20002564 	.word	0x20002564
   33770:	0003cce5 	.word	0x0003cce5
   33774:	0003cc81 	.word	0x0003cc81
   33778:	200022c0 	.word	0x200022c0
   3377c:	200021a0 	.word	0x200021a0
   33780:	20002188 	.word	0x20002188
   33784:	0004a184 	.word	0x0004a184
   33788:	0004a1c0 	.word	0x0004a1c0
   3378c:	0004a024 	.word	0x0004a024

00033790 <ll_reset>:
{
   33790:	b510      	push	{r4, lr}
   33792:	b086      	sub	sp, #24
	err = ull_adv_reset();
   33794:	f000 fcb4 	bl	34100 <ull_adv_reset>
	LL_ASSERT(!err);
   33798:	bb70      	cbnz	r0, 337f8 <ll_reset+0x68>
	err = ull_conn_reset();
   3379a:	f001 ff25 	bl	355e8 <ull_conn_reset>
	LL_ASSERT(!err);
   3379e:	2800      	cmp	r0, #0
   337a0:	d13b      	bne.n	3381a <ll_reset+0x8a>
	MFIFO_INIT(tx_ack);
   337a2:	4b3a      	ldr	r3, [pc, #232]	; (3388c <ll_reset+0xfc>)
   337a4:	2400      	movs	r4, #0
   337a6:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   337a8:	4620      	mov	r0, r4
   337aa:	f006 f90b 	bl	399c4 <ull_filter_reset>
	MFIFO_INIT(prep);
   337ae:	4938      	ldr	r1, [pc, #224]	; (33890 <ll_reset+0x100>)
	MFIFO_INIT(pdu_rx_free);
   337b0:	4a38      	ldr	r2, [pc, #224]	; (33894 <ll_reset+0x104>)
	MFIFO_INIT(ll_pdu_rx_free);
   337b2:	4b39      	ldr	r3, [pc, #228]	; (33898 <ll_reset+0x108>)
	MFIFO_INIT(prep);
   337b4:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   337b6:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   337b8:	805c      	strh	r4, [r3, #2]
   337ba:	2201      	movs	r2, #1
   337bc:	4621      	mov	r1, r4
   337be:	4668      	mov	r0, sp
   337c0:	f015 f98e 	bl	48ae0 <z_impl_k_sem_init>
		mfy.param = &sem;
   337c4:	4b35      	ldr	r3, [pc, #212]	; (3389c <ll_reset+0x10c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   337c6:	4622      	mov	r2, r4
   337c8:	4621      	mov	r1, r4
   337ca:	2003      	movs	r0, #3
		mfy.param = &sem;
   337cc:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   337d0:	f7fc f954 	bl	2fa7c <mayfly_enqueue>
		LL_ASSERT(!retval);
   337d4:	2800      	cmp	r0, #0
   337d6:	d14b      	bne.n	33870 <ll_reset+0xe0>
	return z_impl_k_sem_take(sem, timeout);
   337d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   337dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   337e0:	4668      	mov	r0, sp
   337e2:	f00d ff2b 	bl	4163c <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   337e6:	f000 fca5 	bl	34134 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   337ea:	2800      	cmp	r0, #0
   337ec:	d132      	bne.n	33854 <ll_reset+0xc4>
	err = init_reset();
   337ee:	f7ff fec7 	bl	33580 <init_reset>
	LL_ASSERT(!err);
   337f2:	bb00      	cbnz	r0, 33836 <ll_reset+0xa6>
}
   337f4:	b006      	add	sp, #24
   337f6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   337f8:	4a29      	ldr	r2, [pc, #164]	; (338a0 <ll_reset+0x110>)
   337fa:	492a      	ldr	r1, [pc, #168]	; (338a4 <ll_reset+0x114>)
   337fc:	482a      	ldr	r0, [pc, #168]	; (338a8 <ll_reset+0x118>)
   337fe:	f240 23ad 	movw	r3, #685	; 0x2ad
   33802:	f00f fa23 	bl	42c4c <printk>
   33806:	4040      	eors	r0, r0
   33808:	f380 8811 	msr	BASEPRI, r0
   3380c:	f04f 0003 	mov.w	r0, #3
   33810:	df02      	svc	2
	err = ull_conn_reset();
   33812:	f001 fee9 	bl	355e8 <ull_conn_reset>
	LL_ASSERT(!err);
   33816:	2800      	cmp	r0, #0
   33818:	d0c3      	beq.n	337a2 <ll_reset+0x12>
   3381a:	4a21      	ldr	r2, [pc, #132]	; (338a0 <ll_reset+0x110>)
   3381c:	4921      	ldr	r1, [pc, #132]	; (338a4 <ll_reset+0x114>)
   3381e:	4822      	ldr	r0, [pc, #136]	; (338a8 <ll_reset+0x118>)
   33820:	f240 23de 	movw	r3, #734	; 0x2de
   33824:	f00f fa12 	bl	42c4c <printk>
   33828:	4040      	eors	r0, r0
   3382a:	f380 8811 	msr	BASEPRI, r0
   3382e:	f04f 0003 	mov.w	r0, #3
   33832:	df02      	svc	2
   33834:	e7b5      	b.n	337a2 <ll_reset+0x12>
	LL_ASSERT(!err);
   33836:	4a1a      	ldr	r2, [pc, #104]	; (338a0 <ll_reset+0x110>)
   33838:	491a      	ldr	r1, [pc, #104]	; (338a4 <ll_reset+0x114>)
   3383a:	481b      	ldr	r0, [pc, #108]	; (338a8 <ll_reset+0x118>)
   3383c:	f240 3327 	movw	r3, #807	; 0x327
   33840:	f00f fa04 	bl	42c4c <printk>
   33844:	4040      	eors	r0, r0
   33846:	f380 8811 	msr	BASEPRI, r0
   3384a:	f04f 0003 	mov.w	r0, #3
   3384e:	df02      	svc	2
}
   33850:	b006      	add	sp, #24
   33852:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   33854:	4a12      	ldr	r2, [pc, #72]	; (338a0 <ll_reset+0x110>)
   33856:	4913      	ldr	r1, [pc, #76]	; (338a4 <ll_reset+0x114>)
   33858:	4813      	ldr	r0, [pc, #76]	; (338a8 <ll_reset+0x118>)
   3385a:	f240 331a 	movw	r3, #794	; 0x31a
   3385e:	f00f f9f5 	bl	42c4c <printk>
   33862:	4040      	eors	r0, r0
   33864:	f380 8811 	msr	BASEPRI, r0
   33868:	f04f 0003 	mov.w	r0, #3
   3386c:	df02      	svc	2
   3386e:	e7be      	b.n	337ee <ll_reset+0x5e>
		LL_ASSERT(!retval);
   33870:	4a0b      	ldr	r2, [pc, #44]	; (338a0 <ll_reset+0x110>)
   33872:	490e      	ldr	r1, [pc, #56]	; (338ac <ll_reset+0x11c>)
   33874:	480c      	ldr	r0, [pc, #48]	; (338a8 <ll_reset+0x118>)
   33876:	f240 330d 	movw	r3, #781	; 0x30d
   3387a:	f00f f9e7 	bl	42c4c <printk>
   3387e:	4040      	eors	r0, r0
   33880:	f380 8811 	msr	BASEPRI, r0
   33884:	f04f 0003 	mov.w	r0, #3
   33888:	df02      	svc	2
   3388a:	e7a5      	b.n	337d8 <ll_reset+0x48>
   3388c:	2000063c 	.word	0x2000063c
   33890:	20000538 	.word	0x20000538
   33894:	20000520 	.word	0x20000520
   33898:	20000514 	.word	0x20000514
   3389c:	20000670 	.word	0x20000670
   338a0:	0004a184 	.word	0x0004a184
   338a4:	0004a1c0 	.word	0x0004a1c0
   338a8:	0004a024 	.word	0x0004a024
   338ac:	0004a2e4 	.word	0x0004a2e4

000338b0 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   338b0:	b510      	push	{r4, lr}
   338b2:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   338b4:	2400      	movs	r4, #0
   338b6:	e9cd 4400 	strd	r4, r4, [sp]
   338ba:	9b04      	ldr	r3, [sp, #16]
   338bc:	f007 f8c6 	bl	3aa4c <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   338c0:	b002      	add	sp, #8
   338c2:	bd10      	pop	{r4, pc}

000338c4 <lll_resume>:

void lll_resume(void *param)
{
   338c4:	b510      	push	{r4, lr}
   338c6:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   338c8:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   338ca:	691a      	ldr	r2, [r3, #16]
   338cc:	6999      	ldr	r1, [r3, #24]
   338ce:	2401      	movs	r4, #1
{
   338d0:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   338d2:	4020      	ands	r0, r4
   338d4:	e9cd 0400 	strd	r0, r4, [sp]
   338d8:	6958      	ldr	r0, [r3, #20]
   338da:	f007 f8b7 	bl	3aa4c <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   338de:	b108      	cbz	r0, 338e4 <lll_resume+0x20>
   338e0:	3077      	adds	r0, #119	; 0x77
   338e2:	d101      	bne.n	338e8 <lll_resume+0x24>
}
   338e4:	b002      	add	sp, #8
   338e6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   338e8:	4a06      	ldr	r2, [pc, #24]	; (33904 <lll_resume+0x40>)
   338ea:	4907      	ldr	r1, [pc, #28]	; (33908 <lll_resume+0x44>)
   338ec:	4807      	ldr	r0, [pc, #28]	; (3390c <lll_resume+0x48>)
   338ee:	234f      	movs	r3, #79	; 0x4f
   338f0:	f00f f9ac 	bl	42c4c <printk>
   338f4:	4040      	eors	r0, r0
   338f6:	f380 8811 	msr	BASEPRI, r0
   338fa:	f04f 0003 	mov.w	r0, #3
   338fe:	df02      	svc	2
}
   33900:	b002      	add	sp, #8
   33902:	bd10      	pop	{r4, pc}
   33904:	0004a2ec 	.word	0x0004a2ec
   33908:	0004a330 	.word	0x0004a330
   3390c:	0004a024 	.word	0x0004a024

00033910 <ticker_stop_cb>:
{
   33910:	b530      	push	{r4, r5, lr}
   33912:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   33914:	4b19      	ldr	r3, [pc, #100]	; (3397c <ticker_stop_cb+0x6c>)
{
   33916:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   33918:	4a19      	ldr	r2, [pc, #100]	; (33980 <ticker_stop_cb+0x70>)
   3391a:	1aeb      	subs	r3, r5, r3
   3391c:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   33920:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
   33924:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   33928:	d119      	bne.n	3395e <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   3392a:	1ca2      	adds	r2, r4, #2
   3392c:	4b15      	ldr	r3, [pc, #84]	; (33984 <ticker_stop_cb+0x74>)
   3392e:	9500      	str	r5, [sp, #0]
   33930:	b2d2      	uxtb	r2, r2
   33932:	2101      	movs	r1, #1
   33934:	2000      	movs	r0, #0
   33936:	f7fd fa6d 	bl	30e14 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3393a:	f030 0302 	bics.w	r3, r0, #2
   3393e:	d00c      	beq.n	3395a <ticker_stop_cb+0x4a>
   33940:	4a11      	ldr	r2, [pc, #68]	; (33988 <ticker_stop_cb+0x78>)
   33942:	4912      	ldr	r1, [pc, #72]	; (3398c <ticker_stop_cb+0x7c>)
   33944:	4812      	ldr	r0, [pc, #72]	; (33990 <ticker_stop_cb+0x80>)
   33946:	f640 03d2 	movw	r3, #2258	; 0x8d2
   3394a:	f00f f97f 	bl	42c4c <printk>
   3394e:	4040      	eors	r0, r0
   33950:	f380 8811 	msr	BASEPRI, r0
   33954:	f04f 0003 	mov.w	r0, #3
   33958:	df02      	svc	2
}
   3395a:	b003      	add	sp, #12
   3395c:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   3395e:	4a0a      	ldr	r2, [pc, #40]	; (33988 <ticker_stop_cb+0x78>)
   33960:	490c      	ldr	r1, [pc, #48]	; (33994 <ticker_stop_cb+0x84>)
   33962:	480b      	ldr	r0, [pc, #44]	; (33990 <ticker_stop_cb+0x80>)
   33964:	f640 03cd 	movw	r3, #2253	; 0x8cd
   33968:	f00f f970 	bl	42c4c <printk>
   3396c:	4040      	eors	r0, r0
   3396e:	f380 8811 	msr	BASEPRI, r0
   33972:	f04f 0003 	mov.w	r0, #3
   33976:	df02      	svc	2
   33978:	e7d7      	b.n	3392a <ticker_stop_cb+0x1a>
   3397a:	bf00      	nop
   3397c:	2000259c 	.word	0x2000259c
   33980:	8d3dcb09 	.word	0x8d3dcb09
   33984:	00033a2d 	.word	0x00033a2d
   33988:	0004a344 	.word	0x0004a344
   3398c:	0004a390 	.word	0x0004a390
   33990:	0004a024 	.word	0x0004a024
   33994:	0004a384 	.word	0x0004a384

00033998 <disabled_cb>:
{
   33998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   3399a:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   3399c:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   3399e:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   339a0:	b1d7      	cbz	r7, 339d8 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   339a2:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   339a4:	2300      	movs	r3, #0
   339a6:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   339a8:	b34c      	cbz	r4, 339fe <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   339aa:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   339ac:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
   339ae:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   339b0:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   339b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   339b6:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   339b8:	221e      	movs	r2, #30
   339ba:	f104 001c 	add.w	r0, r4, #28
   339be:	f011 fa2b 	bl	44e18 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   339c2:	233c      	movs	r3, #60	; 0x3c
   339c4:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   339c6:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   339c8:	4621      	mov	r1, r4
   339ca:	4638      	mov	r0, r7
   339cc:	f7ff fad8 	bl	32f80 <ll_rx_put>
}
   339d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   339d4:	f7ff bade 	b.w	32f94 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   339d8:	4a10      	ldr	r2, [pc, #64]	; (33a1c <disabled_cb+0x84>)
   339da:	4911      	ldr	r1, [pc, #68]	; (33a20 <disabled_cb+0x88>)
   339dc:	4811      	ldr	r0, [pc, #68]	; (33a24 <disabled_cb+0x8c>)
   339de:	f640 131a 	movw	r3, #2330	; 0x91a
   339e2:	f00f f933 	bl	42c4c <printk>
   339e6:	4040      	eors	r0, r0
   339e8:	f380 8811 	msr	BASEPRI, r0
   339ec:	f04f 0003 	mov.w	r0, #3
   339f0:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   339f2:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   339f4:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   339f6:	2300      	movs	r3, #0
   339f8:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   339fa:	2c00      	cmp	r4, #0
   339fc:	d1d5      	bne.n	339aa <disabled_cb+0x12>
   339fe:	4a07      	ldr	r2, [pc, #28]	; (33a1c <disabled_cb+0x84>)
   33a00:	4909      	ldr	r1, [pc, #36]	; (33a28 <disabled_cb+0x90>)
   33a02:	4808      	ldr	r0, [pc, #32]	; (33a24 <disabled_cb+0x8c>)
   33a04:	f640 131e 	movw	r3, #2334	; 0x91e
   33a08:	f00f f920 	bl	42c4c <printk>
   33a0c:	4040      	eors	r0, r0
   33a0e:	f380 8811 	msr	BASEPRI, r0
   33a12:	f04f 0003 	mov.w	r0, #3
   33a16:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   33a18:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   33a1a:	e7c6      	b.n	339aa <disabled_cb+0x12>
   33a1c:	0004a344 	.word	0x0004a344
   33a20:	0004a3ac 	.word	0x0004a3ac
   33a24:	0004a024 	.word	0x0004a024
   33a28:	0004a3c0 	.word	0x0004a3c0

00033a2c <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   33a2c:	b100      	cbz	r0, 33a30 <ticker_stop_op_cb+0x4>
   33a2e:	4770      	bx	lr
	mfy.param = param;
   33a30:	4b0c      	ldr	r3, [pc, #48]	; (33a64 <ticker_stop_op_cb+0x38>)
{
   33a32:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   33a34:	4602      	mov	r2, r0
   33a36:	460c      	mov	r4, r1
   33a38:	2002      	movs	r0, #2
   33a3a:	2101      	movs	r1, #1
	mfy.param = param;
   33a3c:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   33a3e:	f7fc f81d 	bl	2fa7c <mayfly_enqueue>
	LL_ASSERT(!ret);
   33a42:	b900      	cbnz	r0, 33a46 <ticker_stop_op_cb+0x1a>
}
   33a44:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   33a46:	4a08      	ldr	r2, [pc, #32]	; (33a68 <ticker_stop_op_cb+0x3c>)
   33a48:	4908      	ldr	r1, [pc, #32]	; (33a6c <ticker_stop_op_cb+0x40>)
   33a4a:	4809      	ldr	r0, [pc, #36]	; (33a70 <ticker_stop_op_cb+0x44>)
   33a4c:	f640 03ee 	movw	r3, #2286	; 0x8ee
   33a50:	f00f f8fc 	bl	42c4c <printk>
   33a54:	4040      	eors	r0, r0
   33a56:	f380 8811 	msr	BASEPRI, r0
   33a5a:	f04f 0003 	mov.w	r0, #3
   33a5e:	df02      	svc	2
}
   33a60:	bd10      	pop	{r4, pc}
   33a62:	bf00      	nop
   33a64:	200006e0 	.word	0x200006e0
   33a68:	0004a344 	.word	0x0004a344
   33a6c:	0004a2bc 	.word	0x0004a2bc
   33a70:	0004a024 	.word	0x0004a024

00033a74 <adv_disable>:
{
   33a74:	b538      	push	{r3, r4, r5, lr}
   33a76:	7803      	ldrb	r3, [r0, #0]
   33a78:	4604      	mov	r4, r0
	if (ull_ref_get(hdr)) {
   33a7a:	2b00      	cmp	r3, #0
   33a7c:	d02c      	beq.n	33ad8 <adv_disable+0x64>
		mfy.param = &adv->lll;
   33a7e:	4d19      	ldr	r5, [pc, #100]	; (33ae4 <adv_disable+0x70>)
		LL_ASSERT(!hdr->disabled_cb);
   33a80:	6943      	ldr	r3, [r0, #20]
		mfy.param = &adv->lll;
   33a82:	f100 011c 	add.w	r1, r0, #28
   33a86:	60a9      	str	r1, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   33a88:	b16b      	cbz	r3, 33aa6 <adv_disable+0x32>
   33a8a:	4a17      	ldr	r2, [pc, #92]	; (33ae8 <adv_disable+0x74>)
   33a8c:	4917      	ldr	r1, [pc, #92]	; (33aec <adv_disable+0x78>)
   33a8e:	4818      	ldr	r0, [pc, #96]	; (33af0 <adv_disable+0x7c>)
   33a90:	f640 1303 	movw	r3, #2307	; 0x903
   33a94:	f00f f8da 	bl	42c4c <printk>
   33a98:	4040      	eors	r0, r0
   33a9a:	f380 8811 	msr	BASEPRI, r0
   33a9e:	f04f 0003 	mov.w	r0, #3
   33aa2:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   33aa4:	68a9      	ldr	r1, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   33aa6:	4813      	ldr	r0, [pc, #76]	; (33af4 <adv_disable+0x80>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   33aa8:	4b0e      	ldr	r3, [pc, #56]	; (33ae4 <adv_disable+0x70>)
   33aaa:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   33aac:	e9c4 0105 	strd	r0, r1, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   33ab0:	4611      	mov	r1, r2
   33ab2:	2001      	movs	r0, #1
   33ab4:	f7fb ffe2 	bl	2fa7c <mayfly_enqueue>
		LL_ASSERT(!ret);
   33ab8:	b900      	cbnz	r0, 33abc <adv_disable+0x48>
}
   33aba:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   33abc:	4a0a      	ldr	r2, [pc, #40]	; (33ae8 <adv_disable+0x74>)
   33abe:	490e      	ldr	r1, [pc, #56]	; (33af8 <adv_disable+0x84>)
   33ac0:	480b      	ldr	r0, [pc, #44]	; (33af0 <adv_disable+0x7c>)
   33ac2:	f640 130a 	movw	r3, #2314	; 0x90a
   33ac6:	f00f f8c1 	bl	42c4c <printk>
   33aca:	4040      	eors	r0, r0
   33acc:	f380 8811 	msr	BASEPRI, r0
   33ad0:	f04f 0003 	mov.w	r0, #3
   33ad4:	df02      	svc	2
}
   33ad6:	bd38      	pop	{r3, r4, r5, pc}
   33ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   33adc:	301c      	adds	r0, #28
   33ade:	f7ff bf5b 	b.w	33998 <disabled_cb>
   33ae2:	bf00      	nop
   33ae4:	200006d0 	.word	0x200006d0
   33ae8:	0004a344 	.word	0x0004a344
   33aec:	0004a3d8 	.word	0x0004a3d8
   33af0:	0004a024 	.word	0x0004a024
   33af4:	00033999 	.word	0x00033999
   33af8:	0004a2bc 	.word	0x0004a2bc

00033afc <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   33afc:	b900      	cbnz	r0, 33b00 <ticker_update_op_cb+0x4>
   33afe:	4770      	bx	lr
{
   33b00:	b510      	push	{r4, lr}
   33b02:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   33b04:	f7ff fb1a 	bl	3313c <ull_disable_mark_get>
   33b08:	4284      	cmp	r4, r0
   33b0a:	d00c      	beq.n	33b26 <ticker_update_op_cb+0x2a>
   33b0c:	4a06      	ldr	r2, [pc, #24]	; (33b28 <ticker_update_op_cb+0x2c>)
   33b0e:	4907      	ldr	r1, [pc, #28]	; (33b2c <ticker_update_op_cb+0x30>)
   33b10:	4807      	ldr	r0, [pc, #28]	; (33b30 <ticker_update_op_cb+0x34>)
   33b12:	f640 03bf 	movw	r3, #2239	; 0x8bf
   33b16:	f00f f899 	bl	42c4c <printk>
   33b1a:	4040      	eors	r0, r0
   33b1c:	f380 8811 	msr	BASEPRI, r0
   33b20:	f04f 0003 	mov.w	r0, #3
   33b24:	df02      	svc	2
}
   33b26:	bd10      	pop	{r4, pc}
   33b28:	0004a344 	.word	0x0004a344
   33b2c:	0004a3ec 	.word	0x0004a3ec
   33b30:	0004a024 	.word	0x0004a024

00033b34 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   33b34:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   33b36:	4b13      	ldr	r3, [pc, #76]	; (33b84 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   33b38:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   33b3a:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   33b3e:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
   33b42:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   33b46:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   33b4a:	f022 0202 	bic.w	r2, r2, #2
   33b4e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   33b50:	f042 020e 	orr.w	r2, r2, #14
   33b54:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   33b56:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   33b58:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   33b5a:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   33b5e:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   33b62:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   33b66:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
   33b6a:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   33b6c:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   33b6e:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   33b72:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   33b76:	2204      	movs	r2, #4
   33b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   33b7a:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   33b7c:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   33b7e:	f85d fb04 	ldr.w	pc, [sp], #4
   33b82:	bf00      	nop
   33b84:	2000259c 	.word	0x2000259c

00033b88 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   33b88:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   33b8a:	4c1b      	ldr	r4, [pc, #108]	; (33bf8 <conn_release.constprop.0+0x70>)
   33b8c:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   33b8e:	6dab      	ldr	r3, [r5, #88]	; 0x58
   33b90:	b163      	cbz	r3, 33bac <conn_release.constprop.0+0x24>
   33b92:	4a1a      	ldr	r2, [pc, #104]	; (33bfc <conn_release.constprop.0+0x74>)
   33b94:	491a      	ldr	r1, [pc, #104]	; (33c00 <conn_release.constprop.0+0x78>)
   33b96:	481b      	ldr	r0, [pc, #108]	; (33c04 <conn_release.constprop.0+0x7c>)
   33b98:	f640 1348 	movw	r3, #2376	; 0x948
   33b9c:	f00f f856 	bl	42c4c <printk>
   33ba0:	4040      	eors	r0, r0
   33ba2:	f380 8811 	msr	BASEPRI, r0
   33ba6:	f04f 0003 	mov.w	r0, #3
   33baa:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   33bac:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   33bb0:	f105 0048 	add.w	r0, r5, #72	; 0x48
   33bb4:	f7fb fee2 	bl	2f97c <memq_deinit>
	LL_ASSERT(link);
   33bb8:	4606      	mov	r6, r0
   33bba:	b170      	cbz	r0, 33bda <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   33bbc:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   33bbe:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   33bc0:	f001 fa20 	bl	35004 <ll_conn_release>
	adv->lll.conn = NULL;
   33bc4:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   33bc6:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   33bc8:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   33bca:	f7ff f9d3 	bl	32f74 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   33bce:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   33bd0:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   33bd2:	f7ff f9c3 	bl	32f5c <ll_rx_link_release>
	adv->link_cc_free = NULL;
   33bd6:	6625      	str	r5, [r4, #96]	; 0x60
}
   33bd8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   33bda:	4a08      	ldr	r2, [pc, #32]	; (33bfc <conn_release.constprop.0+0x74>)
   33bdc:	490a      	ldr	r1, [pc, #40]	; (33c08 <conn_release.constprop.0+0x80>)
   33bde:	4809      	ldr	r0, [pc, #36]	; (33c04 <conn_release.constprop.0+0x7c>)
   33be0:	f640 134a 	movw	r3, #2378	; 0x94a
   33be4:	f00f f832 	bl	42c4c <printk>
   33be8:	4040      	eors	r0, r0
   33bea:	f380 8811 	msr	BASEPRI, r0
   33bee:	f04f 0003 	mov.w	r0, #3
   33bf2:	df02      	svc	2
   33bf4:	e7e2      	b.n	33bbc <conn_release.constprop.0+0x34>
   33bf6:	bf00      	nop
   33bf8:	2000259c 	.word	0x2000259c
   33bfc:	0004a344 	.word	0x0004a344
   33c00:	0004a41c 	.word	0x0004a41c
   33c04:	0004a024 	.word	0x0004a024
   33c08:	0004a4f0 	.word	0x0004a4f0

00033c0c <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
   33c0c:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
   33c0e:	4c4a      	ldr	r4, [pc, #296]	; (33d38 <disable.part.0+0x12c>)
static inline uint8_t disable(uint8_t handle)
   33c10:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   33c12:	4620      	mov	r0, r4
   33c14:	f7ff fa7a 	bl	3310c <ull_disable_mark>
	LL_ASSERT(mark == adv);
   33c18:	4284      	cmp	r4, r0
   33c1a:	d00c      	beq.n	33c36 <disable.part.0+0x2a>
   33c1c:	4a47      	ldr	r2, [pc, #284]	; (33d3c <disable.part.0+0x130>)
   33c1e:	4948      	ldr	r1, [pc, #288]	; (33d40 <disable.part.0+0x134>)
   33c20:	4848      	ldr	r0, [pc, #288]	; (33d44 <disable.part.0+0x138>)
   33c22:	f640 13ff 	movw	r3, #2559	; 0x9ff
   33c26:	f00f f811 	bl	42c4c <printk>
   33c2a:	4040      	eors	r0, r0
   33c2c:	f380 8811 	msr	BASEPRI, r0
   33c30:	f04f 0003 	mov.w	r0, #3
   33c34:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   33c36:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   33c3a:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   33c3c:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   33c3e:	d50d      	bpl.n	33c5c <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   33c40:	2102      	movs	r1, #2
   33c42:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   33c44:	4b40      	ldr	r3, [pc, #256]	; (33d48 <disable.part.0+0x13c>)
   33c46:	9500      	str	r5, [sp, #0]
   33c48:	2103      	movs	r1, #3
   33c4a:	2201      	movs	r2, #1
   33c4c:	2000      	movs	r0, #0
   33c4e:	f7fd f8e1 	bl	30e14 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   33c52:	4629      	mov	r1, r5
   33c54:	f7ff fa32 	bl	330bc <ull_ticker_status_take>
		if (ret) {
   33c58:	2800      	cmp	r0, #0
   33c5a:	d158      	bne.n	33d0e <disable.part.0+0x102>
	ret_cb = TICKER_STATUS_BUSY;
   33c5c:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   33c5e:	2103      	movs	r1, #3
   33c60:	4b39      	ldr	r3, [pc, #228]	; (33d48 <disable.part.0+0x13c>)
   33c62:	9500      	str	r5, [sp, #0]
   33c64:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   33c66:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   33c68:	f7fd f8d4 	bl	30e14 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   33c6c:	4629      	mov	r1, r5
   33c6e:	f7ff fa25 	bl	330bc <ull_ticker_status_take>
	if (ret) {
   33c72:	bb20      	cbnz	r0, 33cbe <disable.part.0+0xb2>
	err = ull_disable(&adv->lll);
   33c74:	4835      	ldr	r0, [pc, #212]	; (33d4c <disable.part.0+0x140>)
   33c76:	f7ff fa85 	bl	33184 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   33c7a:	b108      	cbz	r0, 33c80 <disable.part.0+0x74>
   33c7c:	3078      	adds	r0, #120	; 0x78
   33c7e:	d133      	bne.n	33ce8 <disable.part.0+0xdc>
	mark = ull_disable_unmark(adv);
   33c80:	482d      	ldr	r0, [pc, #180]	; (33d38 <disable.part.0+0x12c>)
   33c82:	f7ff fa4f 	bl	33124 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   33c86:	4284      	cmp	r4, r0
   33c88:	d00c      	beq.n	33ca4 <disable.part.0+0x98>
   33c8a:	4a2c      	ldr	r2, [pc, #176]	; (33d3c <disable.part.0+0x130>)
   33c8c:	492c      	ldr	r1, [pc, #176]	; (33d40 <disable.part.0+0x134>)
   33c8e:	482d      	ldr	r0, [pc, #180]	; (33d44 <disable.part.0+0x138>)
   33c90:	f640 2321 	movw	r3, #2593	; 0xa21
   33c94:	f00e ffda 	bl	42c4c <printk>
   33c98:	4040      	eors	r0, r0
   33c9a:	f380 8811 	msr	BASEPRI, r0
   33c9e:	f04f 0003 	mov.w	r0, #3
   33ca2:	df02      	svc	2
	if (adv->lll.conn) {
   33ca4:	6a23      	ldr	r3, [r4, #32]
   33ca6:	b10b      	cbz	r3, 33cac <disable.part.0+0xa0>
		conn_release(adv);
   33ca8:	f7ff ff6e 	bl	33b88 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   33cac:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
	return 0;
   33cb0:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   33cb2:	f36f 0300 	bfc	r3, #0, #1
   33cb6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
   33cba:	b005      	add	sp, #20
   33cbc:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   33cbe:	481e      	ldr	r0, [pc, #120]	; (33d38 <disable.part.0+0x12c>)
   33cc0:	f7ff fa30 	bl	33124 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   33cc4:	4284      	cmp	r4, r0
   33cc6:	d034      	beq.n	33d32 <disable.part.0+0x126>
   33cc8:	4a1c      	ldr	r2, [pc, #112]	; (33d3c <disable.part.0+0x130>)
   33cca:	491d      	ldr	r1, [pc, #116]	; (33d40 <disable.part.0+0x134>)
   33ccc:	481d      	ldr	r0, [pc, #116]	; (33d44 <disable.part.0+0x138>)
   33cce:	f640 2318 	movw	r3, #2584	; 0xa18
   33cd2:	f00e ffbb 	bl	42c4c <printk>
   33cd6:	4040      	eors	r0, r0
   33cd8:	f380 8811 	msr	BASEPRI, r0
   33cdc:	f04f 0003 	mov.w	r0, #3
   33ce0:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   33ce2:	200c      	movs	r0, #12
}
   33ce4:	b005      	add	sp, #20
   33ce6:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || (err == -EALREADY));
   33ce8:	4a14      	ldr	r2, [pc, #80]	; (33d3c <disable.part.0+0x130>)
   33cea:	4919      	ldr	r1, [pc, #100]	; (33d50 <disable.part.0+0x144>)
   33cec:	4815      	ldr	r0, [pc, #84]	; (33d44 <disable.part.0+0x138>)
   33cee:	f640 231e 	movw	r3, #2590	; 0xa1e
   33cf2:	f00e ffab 	bl	42c4c <printk>
   33cf6:	4040      	eors	r0, r0
   33cf8:	f380 8811 	msr	BASEPRI, r0
   33cfc:	f04f 0003 	mov.w	r0, #3
   33d00:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   33d02:	480d      	ldr	r0, [pc, #52]	; (33d38 <disable.part.0+0x12c>)
   33d04:	f7ff fa0e 	bl	33124 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   33d08:	4284      	cmp	r4, r0
   33d0a:	d1be      	bne.n	33c8a <disable.part.0+0x7e>
   33d0c:	e7ca      	b.n	33ca4 <disable.part.0+0x98>
			mark = ull_disable_unmark(adv);
   33d0e:	480a      	ldr	r0, [pc, #40]	; (33d38 <disable.part.0+0x12c>)
   33d10:	f7ff fa08 	bl	33124 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   33d14:	4284      	cmp	r4, r0
   33d16:	d00c      	beq.n	33d32 <disable.part.0+0x126>
   33d18:	4a08      	ldr	r2, [pc, #32]	; (33d3c <disable.part.0+0x130>)
   33d1a:	4909      	ldr	r1, [pc, #36]	; (33d40 <disable.part.0+0x134>)
   33d1c:	4809      	ldr	r0, [pc, #36]	; (33d44 <disable.part.0+0x138>)
   33d1e:	f640 230a 	movw	r3, #2570	; 0xa0a
   33d22:	f00e ff93 	bl	42c4c <printk>
   33d26:	4040      	eors	r0, r0
   33d28:	f380 8811 	msr	BASEPRI, r0
   33d2c:	f04f 0003 	mov.w	r0, #3
   33d30:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   33d32:	200c      	movs	r0, #12
}
   33d34:	b005      	add	sp, #20
   33d36:	bd30      	pop	{r4, r5, pc}
   33d38:	2000259c 	.word	0x2000259c
   33d3c:	0004a344 	.word	0x0004a344
   33d40:	0004a430 	.word	0x0004a430
   33d44:	0004a024 	.word	0x0004a024
   33d48:	000325c1 	.word	0x000325c1
   33d4c:	200025b8 	.word	0x200025b8
   33d50:	0004a43c 	.word	0x0004a43c

00033d54 <adv_time_get.constprop.0.isra.0>:
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   33d54:	7803      	ldrb	r3, [r0, #0]
   33d56:	f003 030f 	and.w	r3, r3, #15
   33d5a:	2b02      	cmp	r3, #2
   33d5c:	d025      	beq.n	33daa <adv_time_get.constprop.0.isra.0+0x56>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   33d5e:	2b01      	cmp	r3, #1
   33d60:	d00d      	beq.n	33d7e <adv_time_get.constprop.0.isra.0+0x2a>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   33d62:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   33d64:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   33d66:	b19b      	cbz	r3, 33d90 <adv_time_get.constprop.0.isra.0+0x3c>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   33d68:	2b06      	cmp	r3, #6
   33d6a:	d011      	beq.n	33d90 <adv_time_get.constprop.0.isra.0+0x3c>
   33d6c:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   33d70:	3a01      	subs	r2, #1
   33d72:	f44f 702a 	mov.w	r0, #680	; 0x2a8
			time_us += (BYTES2US(adv_size, PHY_1M) +
   33d76:	fb02 0001 	mla	r0, r2, r1, r0
   33d7a:	b280      	uxth	r0, r0
}
   33d7c:	4770      	bx	lr
			time_us += (BYTES2US(adv_size, PHY_1M) +
   33d7e:	f240 2116 	movw	r1, #534	; 0x216
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   33d82:	3a01      	subs	r2, #1
   33d84:	f44f 6087 	mov.w	r0, #1080	; 0x438
			time_us += (BYTES2US(adv_size, PHY_1M) +
   33d88:	fb02 0001 	mla	r0, r2, r1, r0
   33d8c:	b280      	uxth	r0, r0
}
   33d8e:	4770      	bx	lr
				adv_size += pdu->len;
   33d90:	7843      	ldrb	r3, [r0, #1]
   33d92:	3310      	adds	r3, #16
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   33d94:	00db      	lsls	r3, r3, #3
   33d96:	f501 705c 	add.w	r0, r1, #880	; 0x370
   33d9a:	4418      	add	r0, r3
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   33d9c:	f503 71b3 	add.w	r1, r3, #358	; 0x166
   33da0:	3a01      	subs	r2, #1
			time_us += (BYTES2US(adv_size, PHY_1M) +
   33da2:	fb02 0001 	mla	r0, r2, r1, r0
   33da6:	b280      	uxth	r0, r0
}
   33da8:	4770      	bx	lr
				   rxtx_turn_us * (adv_chn_cnt - 1);
   33daa:	1e53      	subs	r3, r2, #1
			adv_size += pdu->len;
   33dac:	7841      	ldrb	r1, [r0, #1]
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   33dae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   33db2:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
   33db6:	0040      	lsls	r0, r0, #1
   33db8:	f101 0310 	add.w	r3, r1, #16
   33dbc:	00db      	lsls	r3, r3, #3
   33dbe:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   33dc2:	fb03 0202 	mla	r2, r3, r2, r0
   33dc6:	b290      	uxth	r0, r2
   33dc8:	4770      	bx	lr
   33dca:	bf00      	nop

00033dcc <ticker_cb>:
{
   33dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33dd0:	461d      	mov	r5, r3
   33dd2:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   33dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   33dd8:	429d      	cmp	r5, r3
{
   33dda:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   33dde:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   33de0:	d018      	beq.n	33e14 <ticker_cb+0x48>
	return ++hdr->ref;
   33de2:	7823      	ldrb	r3, [r4, #0]
   33de4:	3301      	adds	r3, #1
   33de6:	b2db      	uxtb	r3, r3
   33de8:	4607      	mov	r7, r0
   33dea:	4616      	mov	r6, r2
   33dec:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   33dee:	2b00      	cmp	r3, #0
   33df0:	d061      	beq.n	33eb6 <ticker_cb+0xea>
		p.ticks_at_expire = ticks_at_expire;
   33df2:	4938      	ldr	r1, [pc, #224]	; (33ed4 <ticker_cb+0x108>)
		mfy.param = &p;
   33df4:	4b38      	ldr	r3, [pc, #224]	; (33ed8 <ticker_cb+0x10c>)
		p.lazy = lazy;
   33df6:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   33df8:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   33dfc:	2200      	movs	r2, #0
		p.param = lll;
   33dfe:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   33e00:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   33e04:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   33e08:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   33e0a:	2001      	movs	r0, #1
   33e0c:	4611      	mov	r1, r2
   33e0e:	f7fb fe35 	bl	2fa7c <mayfly_enqueue>
		LL_ASSERT(!ret);
   33e12:	b938      	cbnz	r0, 33e24 <ticker_cb+0x58>
	if (!lll->is_hdcd)
   33e14:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   33e18:	f010 0501 	ands.w	r5, r0, #1
   33e1c:	d014      	beq.n	33e48 <ticker_cb+0x7c>
}
   33e1e:	b00a      	add	sp, #40	; 0x28
   33e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   33e24:	4a2d      	ldr	r2, [pc, #180]	; (33edc <ticker_cb+0x110>)
   33e26:	492e      	ldr	r1, [pc, #184]	; (33ee0 <ticker_cb+0x114>)
   33e28:	482e      	ldr	r0, [pc, #184]	; (33ee4 <ticker_cb+0x118>)
   33e2a:	f640 0392 	movw	r3, #2194	; 0x892
   33e2e:	f00e ff0d 	bl	42c4c <printk>
   33e32:	4040      	eors	r0, r0
   33e34:	f380 8811 	msr	BASEPRI, r0
   33e38:	f04f 0003 	mov.w	r0, #3
   33e3c:	df02      	svc	2
	if (!lll->is_hdcd)
   33e3e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   33e42:	f010 0501 	ands.w	r5, r0, #1
   33e46:	d1ea      	bne.n	33e1e <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   33e48:	2104      	movs	r1, #4
   33e4a:	a809      	add	r0, sp, #36	; 0x24
   33e4c:	f006 fc40 	bl	3a6d0 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   33e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   33e52:	4a25      	ldr	r2, [pc, #148]	; (33ee8 <ticker_cb+0x11c>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   33e54:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   33e56:	fba2 1203 	umull	r1, r2, r2, r3
   33e5a:	1a99      	subs	r1, r3, r2
   33e5c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   33e60:	0a12      	lsrs	r2, r2, #8
   33e62:	f240 1147 	movw	r1, #327	; 0x147
   33e66:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   33e6a:	4a20      	ldr	r2, [pc, #128]	; (33eec <ticker_cb+0x120>)
   33e6c:	4920      	ldr	r1, [pc, #128]	; (33ef0 <ticker_cb+0x124>)
   33e6e:	1aa2      	subs	r2, r4, r2
   33e70:	fba1 1202 	umull	r1, r2, r1, r2
   33e74:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   33e76:	491f      	ldr	r1, [pc, #124]	; (33ef4 <ticker_cb+0x128>)
   33e78:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   33e7a:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   33e7c:	e9cd 5104 	strd	r5, r1, [sp, #16]
   33e80:	e9cd 5502 	strd	r5, r5, [sp, #8]
   33e84:	e9cd 5500 	strd	r5, r5, [sp]
   33e88:	b2d2      	uxtb	r2, r2
   33e8a:	2101      	movs	r1, #1
   33e8c:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   33e8e:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   33e90:	f7fc ffa8 	bl	30de4 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   33e94:	f030 0302 	bics.w	r3, r0, #2
   33e98:	d0c1      	beq.n	33e1e <ticker_cb+0x52>
   33e9a:	4a10      	ldr	r2, [pc, #64]	; (33edc <ticker_cb+0x110>)
   33e9c:	4916      	ldr	r1, [pc, #88]	; (33ef8 <ticker_cb+0x12c>)
   33e9e:	4811      	ldr	r0, [pc, #68]	; (33ee4 <ticker_cb+0x118>)
   33ea0:	f240 732c 	movw	r3, #1836	; 0x72c
   33ea4:	f00e fed2 	bl	42c4c <printk>
   33ea8:	4040      	eors	r0, r0
   33eaa:	f380 8811 	msr	BASEPRI, r0
   33eae:	f04f 0003 	mov.w	r0, #3
   33eb2:	df02      	svc	2
}
   33eb4:	e7b3      	b.n	33e1e <ticker_cb+0x52>
		LL_ASSERT(ref);
   33eb6:	4a09      	ldr	r2, [pc, #36]	; (33edc <ticker_cb+0x110>)
   33eb8:	4910      	ldr	r1, [pc, #64]	; (33efc <ticker_cb+0x130>)
   33eba:	480a      	ldr	r0, [pc, #40]	; (33ee4 <ticker_cb+0x118>)
   33ebc:	f640 0385 	movw	r3, #2181	; 0x885
   33ec0:	f00e fec4 	bl	42c4c <printk>
   33ec4:	4040      	eors	r0, r0
   33ec6:	f380 8811 	msr	BASEPRI, r0
   33eca:	f04f 0003 	mov.w	r0, #3
   33ece:	df02      	svc	2
   33ed0:	e78f      	b.n	33df2 <ticker_cb+0x26>
   33ed2:	bf00      	nop
   33ed4:	2000261c 	.word	0x2000261c
   33ed8:	200006c0 	.word	0x200006c0
   33edc:	0004a344 	.word	0x0004a344
   33ee0:	0004a2bc 	.word	0x0004a2bc
   33ee4:	0004a024 	.word	0x0004a024
   33ee8:	90d4f121 	.word	0x90d4f121
   33eec:	2000259c 	.word	0x2000259c
   33ef0:	8d3dcb09 	.word	0x8d3dcb09
   33ef4:	00033afd 	.word	0x00033afd
   33ef8:	0004a390 	.word	0x0004a390
   33efc:	0004a454 	.word	0x0004a454

00033f00 <ll_adv_params_set>:
{
   33f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!adv || adv->is_enabled) {
   33f04:	4c6f      	ldr	r4, [pc, #444]	; (340c4 <ll_adv_params_set+0x1c4>)
{
   33f06:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   33f08:	4b6f      	ldr	r3, [pc, #444]	; (340c8 <ll_adv_params_set+0x1c8>)
	if (!adv || adv->is_enabled) {
   33f0a:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   33f0e:	4680      	mov	r8, r0
   33f10:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   33f12:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   33f16:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
   33f18:	f016 0601 	ands.w	r6, r6, #1
{
   33f1c:	4615      	mov	r5, r2
   33f1e:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
   33f22:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   33f26:	9000      	str	r0, [sp, #0]
   33f28:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   33f2c:	f040 808b 	bne.w	34046 <ll_adv_params_set+0x146>
	adv->lll.chan_map = chan_map;
   33f30:	f00c 0c07 	and.w	ip, ip, #7
   33f34:	f002 0203 	and.w	r2, r2, #3
   33f38:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   33f3c:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   33f40:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
   33f44:	f1be 0f01 	cmp.w	lr, #1
   33f48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   33f4c:	bf08      	it	eq
   33f4e:	f04f 0800 	moveq.w	r8, #0
	pdu->type = pdu_adv_type[adv_type];
   33f52:	f10e 0308 	add.w	r3, lr, #8
   33f56:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
   33f5a:	eb0d 0e03 	add.w	lr, sp, r3
   33f5e:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   33f62:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   33f64:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
   33f68:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   33f6c:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   33f70:	f013 0f0e 	tst.w	r3, #14
	adv->lll.chan_map = chan_map;
   33f74:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   33f78:	f029 011f 	bic.w	r1, r9, #31
   33f7c:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
   33f80:	ea4c 0c02 	orr.w	ip, ip, r2
   33f84:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   33f88:	bf0c      	ite	eq
   33f8a:	2201      	moveq	r2, #1
   33f8c:	2200      	movne	r2, #0
   33f8e:	f362 1345 	bfi	r3, r2, #5, #1
	adv->lll.chan_map = chan_map;
   33f92:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   33f96:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   33f9a:	f003 030f 	and.w	r3, r3, #15
   33f9e:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   33fa0:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   33fa4:	d046      	beq.n	34034 <ll_adv_params_set+0x134>
	adv->own_addr_type = own_addr_type;
   33fa6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   33faa:	f365 0342 	bfi	r3, r5, #1, #2
   33fae:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   33fb2:	b2da      	uxtb	r2, r3
   33fb4:	075b      	lsls	r3, r3, #29
   33fb6:	d508      	bpl.n	33fca <ll_adv_params_set+0xca>
		adv->peer_addr_type = direct_addr_type;
   33fb8:	f367 02c3 	bfi	r2, r7, #3, #1
   33fbc:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   33fc0:	4842      	ldr	r0, [pc, #264]	; (340cc <ll_adv_params_set+0x1cc>)
   33fc2:	990a      	ldr	r1, [sp, #40]	; 0x28
   33fc4:	2206      	movs	r2, #6
   33fc6:	f010 ff1c 	bl	44e02 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   33fca:	f898 3000 	ldrb.w	r3, [r8]
   33fce:	f003 020f 	and.w	r2, r3, #15
   33fd2:	2a01      	cmp	r2, #1
   33fd4:	d03c      	beq.n	34050 <ll_adv_params_set+0x150>
	} else if (pdu->len == 0) {
   33fd6:	f898 2001 	ldrb.w	r2, [r8, #1]
   33fda:	b1fa      	cbz	r2, 3401c <ll_adv_params_set+0x11c>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   33fdc:	f1b9 0f01 	cmp.w	r9, #1
   33fe0:	d053      	beq.n	3408a <ll_adv_params_set+0x18a>
		pdu->tx_addr = own_addr_type & 0x1;
   33fe2:	f898 3000 	ldrb.w	r3, [r8]
   33fe6:	f005 0501 	and.w	r5, r5, #1
   33fea:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
   33fee:	f36f 13c7 	bfc	r3, #7, #1
   33ff2:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   33ff6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   33ffa:	61e4      	str	r4, [r4, #28]
   33ffc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   34000:	01ad      	lsls	r5, r5, #6
   34002:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (pdu->len == 0) {
   34004:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   34006:	f045 0504 	orr.w	r5, r5, #4
   3400a:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   3400c:	b912      	cbnz	r2, 34014 <ll_adv_params_set+0x114>
			pdu->len = BDADDR_SIZE;
   3400e:	2106      	movs	r1, #6
   34010:	7059      	strb	r1, [r3, #1]
	return 0;
   34012:	4616      	mov	r6, r2
}
   34014:	4630      	mov	r0, r6
   34016:	b003      	add	sp, #12
   34018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   3401c:	f005 0501 	and.w	r5, r5, #1
   34020:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
   34024:	f362 13c7 	bfi	r3, r2, #7, #1
   34028:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   3402c:	2306      	movs	r3, #6
   3402e:	f888 3001 	strb.w	r3, [r8, #1]
   34032:	e7e0      	b.n	33ff6 <ll_adv_params_set+0xf6>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   34034:	f1b9 0f01 	cmp.w	r9, #1
   34038:	d0b5      	beq.n	33fa6 <ll_adv_params_set+0xa6>
		if (pdu->len == 0U) {
   3403a:	f898 2001 	ldrb.w	r2, [r8, #1]
   3403e:	b9c2      	cbnz	r2, 34072 <ll_adv_params_set+0x172>
			adv->ad_data_backup.len = 0U;
   34040:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
   34044:	e7af      	b.n	33fa6 <ll_adv_params_set+0xa6>
		return BT_HCI_ERR_CMD_DISALLOWED;
   34046:	260c      	movs	r6, #12
}
   34048:	4630      	mov	r0, r6
   3404a:	b003      	add	sp, #12
   3404c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   34050:	f005 0501 	and.w	r5, r5, #1
		pdu->rx_addr = direct_addr_type;
   34054:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   34056:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
   3405a:	f367 13c7 	bfi	r3, r7, #7, #1
   3405e:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   34062:	990a      	ldr	r1, [sp, #40]	; 0x28
   34064:	2206      	movs	r2, #6
   34066:	f010 fecc 	bl	44e02 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   3406a:	230c      	movs	r3, #12
   3406c:	f888 3001 	strb.w	r3, [r8, #1]
   34070:	e7c1      	b.n	33ff6 <ll_adv_params_set+0xf6>
			LL_ASSERT(pdu->len >=
   34072:	2a05      	cmp	r2, #5
   34074:	d916      	bls.n	340a4 <ll_adv_params_set+0x1a4>
			adv->ad_data_backup.len = pdu->len -
   34076:	3a06      	subs	r2, #6
   34078:	b2d2      	uxtb	r2, r2
   3407a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   3407e:	f108 0108 	add.w	r1, r8, #8
   34082:	4813      	ldr	r0, [pc, #76]	; (340d0 <ll_adv_params_set+0x1d0>)
   34084:	f010 febd 	bl	44e02 <memcpy>
   34088:	e78d      	b.n	33fa6 <ll_adv_params_set+0xa6>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   3408a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   3408e:	4910      	ldr	r1, [pc, #64]	; (340d0 <ll_adv_params_set+0x1d0>)
   34090:	f108 0008 	add.w	r0, r8, #8
   34094:	f010 feb5 	bl	44e02 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   34098:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   3409c:	3306      	adds	r3, #6
   3409e:	f888 3001 	strb.w	r3, [r8, #1]
   340a2:	e79e      	b.n	33fe2 <ll_adv_params_set+0xe2>
			LL_ASSERT(pdu->len >=
   340a4:	4a0b      	ldr	r2, [pc, #44]	; (340d4 <ll_adv_params_set+0x1d4>)
   340a6:	490c      	ldr	r1, [pc, #48]	; (340d8 <ll_adv_params_set+0x1d8>)
   340a8:	480c      	ldr	r0, [pc, #48]	; (340dc <ll_adv_params_set+0x1dc>)
   340aa:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   340ae:	f00e fdcd 	bl	42c4c <printk>
   340b2:	4040      	eors	r0, r0
   340b4:	f380 8811 	msr	BASEPRI, r0
   340b8:	f04f 0003 	mov.w	r0, #3
   340bc:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   340be:	f898 2001 	ldrb.w	r2, [r8, #1]
   340c2:	e7d8      	b.n	34076 <ll_adv_params_set+0x176>
   340c4:	2000259c 	.word	0x2000259c
   340c8:	000497c0 	.word	0x000497c0
   340cc:	20002607 	.word	0x20002607
   340d0:	200025dd 	.word	0x200025dd
   340d4:	0004a344 	.word	0x0004a344
   340d8:	0004a458 	.word	0x0004a458
   340dc:	0004a024 	.word	0x0004a024

000340e0 <ull_adv_init>:
{
   340e0:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   340e2:	4c06      	ldr	r4, [pc, #24]	; (340fc <ull_adv_init+0x1c>)
   340e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   340e8:	f006 ff1e 	bl	3af28 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   340ec:	f104 0034 	add.w	r0, r4, #52	; 0x34
   340f0:	f006 ff1a 	bl	3af28 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   340f4:	f7ff fd1e 	bl	33b34 <init_set.constprop.0>
}
   340f8:	2000      	movs	r0, #0
   340fa:	bd10      	pop	{r4, pc}
   340fc:	2000259c 	.word	0x2000259c

00034100 <ull_adv_reset>:
{
   34100:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   34102:	4b0b      	ldr	r3, [pc, #44]	; (34130 <ull_adv_reset+0x30>)
   34104:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   34108:	07d2      	lsls	r2, r2, #31
   3410a:	d50e      	bpl.n	3412a <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
   3410c:	6a1a      	ldr	r2, [r3, #32]
   3410e:	b152      	cbz	r2, 34126 <ull_adv_reset+0x26>
		adv->lll.conn->periph.cancelled = 1U;
   34110:	f892 1020 	ldrb.w	r1, [r2, #32]
   34114:	f041 0102 	orr.w	r1, r1, #2
   34118:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   3411c:	6a1b      	ldr	r3, [r3, #32]
   3411e:	f893 3020 	ldrb.w	r3, [r3, #32]
   34122:	07db      	lsls	r3, r3, #31
   34124:	d401      	bmi.n	3412a <ull_adv_reset+0x2a>
   34126:	f7ff fd71 	bl	33c0c <disable.part.0>
}
   3412a:	2000      	movs	r0, #0
   3412c:	bd08      	pop	{r3, pc}
   3412e:	bf00      	nop
   34130:	2000259c 	.word	0x2000259c

00034134 <ull_adv_reset_finalize>:
{
   34134:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   34136:	4c0a      	ldr	r4, [pc, #40]	; (34160 <ull_adv_reset_finalize+0x2c>)
   34138:	f104 0528 	add.w	r5, r4, #40	; 0x28
   3413c:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
   3413e:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
   34140:	f006 ff02 	bl	3af48 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   34144:	4620      	mov	r0, r4
   34146:	f006 feff 	bl	3af48 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   3414a:	4628      	mov	r0, r5
   3414c:	f006 feec 	bl	3af28 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   34150:	4620      	mov	r0, r4
   34152:	f006 fee9 	bl	3af28 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   34156:	f7ff fced 	bl	33b34 <init_set.constprop.0>
}
   3415a:	2000      	movs	r0, #0
   3415c:	bd38      	pop	{r3, r4, r5, pc}
   3415e:	bf00      	nop
   34160:	2000259c 	.word	0x2000259c

00034164 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   34164:	4a03      	ldr	r2, [pc, #12]	; (34174 <ull_adv_handle_get+0x10>)
   34166:	4b04      	ldr	r3, [pc, #16]	; (34178 <ull_adv_handle_get+0x14>)
   34168:	1a80      	subs	r0, r0, r2
   3416a:	fba3 3000 	umull	r3, r0, r3, r0
}
   3416e:	f3c0 108f 	ubfx	r0, r0, #6, #16
   34172:	4770      	bx	lr
   34174:	2000259c 	.word	0x2000259c
   34178:	8d3dcb09 	.word	0x8d3dcb09

0003417c <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   3417c:	4a04      	ldr	r2, [pc, #16]	; (34190 <ull_adv_lll_handle_get+0x14>)
   3417e:	6800      	ldr	r0, [r0, #0]
   34180:	4b04      	ldr	r3, [pc, #16]	; (34194 <ull_adv_lll_handle_get+0x18>)
   34182:	1a80      	subs	r0, r0, r2
   34184:	fba3 3000 	umull	r3, r0, r3, r0
}
   34188:	f3c0 108f 	ubfx	r0, r0, #6, #16
   3418c:	4770      	bx	lr
   3418e:	bf00      	nop
   34190:	2000259c 	.word	0x2000259c
   34194:	8d3dcb09 	.word	0x8d3dcb09

00034198 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   34198:	b938      	cbnz	r0, 341aa <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   3419a:	4805      	ldr	r0, [pc, #20]	; (341b0 <ull_adv_is_enabled_get+0x18>)
   3419c:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
   341a0:	f013 0f01 	tst.w	r3, #1
   341a4:	bf08      	it	eq
   341a6:	2000      	moveq	r0, #0
   341a8:	4770      	bx	lr
		return NULL;
   341aa:	2000      	movs	r0, #0
}
   341ac:	4770      	bx	lr
   341ae:	bf00      	nop
   341b0:	2000259c 	.word	0x2000259c

000341b4 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   341b4:	b928      	cbnz	r0, 341c2 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   341b6:	4b04      	ldr	r3, [pc, #16]	; (341c8 <ull_adv_is_enabled+0x14>)
   341b8:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   341bc:	f000 0001 	and.w	r0, r0, #1
   341c0:	4770      	bx	lr
   341c2:	2000      	movs	r0, #0
}
   341c4:	4770      	bx	lr
   341c6:	bf00      	nop
   341c8:	2000259c 	.word	0x2000259c

000341cc <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   341cc:	b950      	cbnz	r0, 341e4 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   341ce:	4b06      	ldr	r3, [pc, #24]	; (341e8 <ull_adv_filter_pol_get+0x1c>)
   341d0:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   341d4:	f010 0001 	ands.w	r0, r0, #1
   341d8:	d005      	beq.n	341e6 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   341da:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   341de:	f000 0003 	and.w	r0, r0, #3
   341e2:	4770      	bx	lr
		return 0;
   341e4:	2000      	movs	r0, #0
}
   341e6:	4770      	bx	lr
   341e8:	2000259c 	.word	0x2000259c

000341ec <ull_adv_pdu_update_addrs>:
{
   341ec:	b570      	push	{r4, r5, r6, lr}
   341ee:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   341f0:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
{
   341f4:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   341f6:	f005 fda9 	bl	39d4c <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   341fa:	b310      	cbz	r0, 34242 <ull_adv_pdu_update_addrs+0x56>
		pdu->tx_addr = 1;
   341fc:	7823      	ldrb	r3, [r4, #0]
   341fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   34202:	4601      	mov	r1, r0
   34204:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   34206:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   34208:	2206      	movs	r2, #6
   3420a:	4630      	mov	r0, r6
   3420c:	f010 fdf9 	bl	44e02 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   34210:	7823      	ldrb	r3, [r4, #0]
   34212:	f003 030f 	and.w	r3, r3, #15
   34216:	2b01      	cmp	r3, #1
   34218:	d001      	beq.n	3421e <ull_adv_pdu_update_addrs+0x32>
}
   3421a:	4630      	mov	r0, r6
   3421c:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   3421e:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   34222:	f005 fdc1 	bl	39da8 <ull_filter_tgta_get>
	if (rx_addr) {
   34226:	4601      	mov	r1, r0
   34228:	2800      	cmp	r0, #0
   3422a:	d0f6      	beq.n	3421a <ull_adv_pdu_update_addrs+0x2e>
		pdu->rx_addr = 1;
   3422c:	7823      	ldrb	r3, [r4, #0]
   3422e:	4620      	mov	r0, r4
   34230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   34234:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   34238:	2206      	movs	r2, #6
   3423a:	f010 fde2 	bl	44e02 <memcpy>
}
   3423e:	4630      	mov	r0, r6
   34240:	bd70      	pop	{r4, r5, r6, pc}
			own_id_addr = ll_addr_get(pdu->tx_addr);
   34242:	7820      	ldrb	r0, [r4, #0]
   34244:	f3c0 1080 	ubfx	r0, r0, #6, #1
   34248:	f7fc fe4a 	bl	30ee0 <ll_addr_get>
   3424c:	4601      	mov	r1, r0
	if (rpa) {
   3424e:	e7da      	b.n	34206 <ull_adv_pdu_update_addrs+0x1a>

00034250 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   34250:	291f      	cmp	r1, #31
   34252:	d849      	bhi.n	342e8 <ull_adv_data_set+0x98>
{
   34254:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   34256:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   3425a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   3425e:	b083      	sub	sp, #12
   34260:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   34262:	7833      	ldrb	r3, [r6, #0]
   34264:	f003 030f 	and.w	r3, r3, #15
   34268:	2b01      	cmp	r3, #1
   3426a:	460d      	mov	r5, r1
   3426c:	4604      	mov	r4, r0
   3426e:	4617      	mov	r7, r2
   34270:	d03c      	beq.n	342ec <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   34272:	f10d 0107 	add.w	r1, sp, #7
   34276:	3028      	adds	r0, #40	; 0x28
   34278:	f006 fee4 	bl	3b044 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   3427c:	4631      	mov	r1, r6
   3427e:	4606      	mov	r6, r0
   34280:	f811 2b02 	ldrb.w	r2, [r1], #2
   34284:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   34288:	f3c2 0303 	ubfx	r3, r2, #0, #4
   3428c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   34290:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   34294:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   34298:	f002 0280 	and.w	r2, r2, #128	; 0x80
   3429c:	4630      	mov	r0, r6
   3429e:	4313      	orrs	r3, r2
   342a0:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   342a4:	2206      	movs	r2, #6
   342a6:	f010 fdac 	bl	44e02 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   342aa:	462a      	mov	r2, r5
   342ac:	4639      	mov	r1, r7
   342ae:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   342b2:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   342b4:	f010 fda5 	bl	44e02 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   342b8:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   342ba:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   342be:	07db      	lsls	r3, r3, #31
   342c0:	d406      	bmi.n	342d0 <ull_adv_data_set+0x80>
	pdu->last = idx;
   342c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   342c6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return 0;
   342ca:	2000      	movs	r0, #0
}
   342cc:	b003      	add	sp, #12
   342ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   342d0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   342d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   342d8:	4631      	mov	r1, r6
   342da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   342dc:	4620      	mov	r0, r4
   342de:	f7f2 fbaf 	bl	26a40 <ull_adv_time_update>
		if (err) {
   342e2:	2800      	cmp	r0, #0
   342e4:	d0ed      	beq.n	342c2 <ull_adv_data_set+0x72>
   342e6:	e7f1      	b.n	342cc <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
   342e8:	2012      	movs	r0, #18
}
   342ea:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   342ec:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   342f0:	460a      	mov	r2, r1
   342f2:	3041      	adds	r0, #65	; 0x41
   342f4:	4639      	mov	r1, r7
   342f6:	f010 fd84 	bl	44e02 <memcpy>
		return 0;
   342fa:	2000      	movs	r0, #0
}
   342fc:	b003      	add	sp, #12
   342fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00034300 <ll_adv_data_set>:
{
   34300:	4603      	mov	r3, r0
   34302:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   34304:	4801      	ldr	r0, [pc, #4]	; (3430c <ll_adv_data_set+0xc>)
   34306:	4619      	mov	r1, r3
   34308:	f7ff bfa2 	b.w	34250 <ull_adv_data_set>
   3430c:	2000259c 	.word	0x2000259c

00034310 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   34310:	b5f0      	push	{r4, r5, r6, r7, lr}
   34312:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   34316:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   3431a:	b083      	sub	sp, #12
   3431c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   3431e:	460e      	mov	r6, r1
   34320:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   34322:	f10d 0107 	add.w	r1, sp, #7
   34326:	3034      	adds	r0, #52	; 0x34
   34328:	4617      	mov	r7, r2
   3432a:	f006 fe8b 	bl	3b044 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   3432e:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   34330:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   34332:	f811 3b02 	ldrb.w	r3, [r1], #2
   34336:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   3433a:	019b      	lsls	r3, r3, #6
   3433c:	f043 0304 	orr.w	r3, r3, #4
   34340:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   34342:	1db3      	adds	r3, r6, #6
   34344:	7043      	strb	r3, [r0, #1]
   34346:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   34348:	3002      	adds	r0, #2
   3434a:	f010 fd5a 	bl	44e02 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   3434e:	4632      	mov	r2, r6
   34350:	4639      	mov	r1, r7
   34352:	f105 0008 	add.w	r0, r5, #8
   34356:	f010 fd54 	bl	44e02 <memcpy>
	if (adv->is_enabled) {
   3435a:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   3435e:	07da      	lsls	r2, r3, #31
   34360:	d50b      	bpl.n	3437a <ull_scan_rsp_set.part.0+0x6a>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   34362:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   34366:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   3436a:	2341      	movs	r3, #65	; 0x41
   3436c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   3436e:	780a      	ldrb	r2, [r1, #0]
   34370:	f002 020f 	and.w	r2, r2, #15
   34374:	40d3      	lsrs	r3, r2
   34376:	07db      	lsls	r3, r3, #31
   34378:	d406      	bmi.n	34388 <ull_scan_rsp_set.part.0+0x78>
	pdu->last = idx;
   3437a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3437e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   34382:	2000      	movs	r0, #0
}
   34384:	b003      	add	sp, #12
   34386:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   34388:	462a      	mov	r2, r5
   3438a:	4620      	mov	r0, r4
   3438c:	f7f2 fb58 	bl	26a40 <ull_adv_time_update>
			if (err) {
   34390:	2800      	cmp	r0, #0
   34392:	d0f2      	beq.n	3437a <ull_scan_rsp_set.part.0+0x6a>
   34394:	e7f6      	b.n	34384 <ull_scan_rsp_set.part.0+0x74>
   34396:	bf00      	nop

00034398 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   34398:	281f      	cmp	r0, #31
{
   3439a:	4603      	mov	r3, r0
   3439c:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
   3439e:	d803      	bhi.n	343a8 <ll_adv_scan_rsp_set+0x10>
   343a0:	4802      	ldr	r0, [pc, #8]	; (343ac <ll_adv_scan_rsp_set+0x14>)
   343a2:	4619      	mov	r1, r3
   343a4:	f7ff bfb4 	b.w	34310 <ull_scan_rsp_set.part.0>
}
   343a8:	2012      	movs	r0, #18
   343aa:	4770      	bx	lr
   343ac:	2000259c 	.word	0x2000259c

000343b0 <init_reset>:
{
   343b0:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   343b2:	4b15      	ldr	r3, [pc, #84]	; (34408 <init_reset+0x58>)
   343b4:	4815      	ldr	r0, [pc, #84]	; (3440c <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   343b6:	4c16      	ldr	r4, [pc, #88]	; (34410 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   343b8:	2201      	movs	r2, #1
   343ba:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   343be:	f7fb fa53 	bl	2f868 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   343c2:	4b14      	ldr	r3, [pc, #80]	; (34414 <init_reset+0x64>)
   343c4:	2203      	movs	r2, #3
   343c6:	1d18      	adds	r0, r3, #4
   343c8:	2124      	movs	r1, #36	; 0x24
   343ca:	f7fb fa4d 	bl	2f868 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   343ce:	4b12      	ldr	r3, [pc, #72]	; (34418 <init_reset+0x68>)
   343d0:	2204      	movs	r2, #4
   343d2:	1898      	adds	r0, r3, r2
   343d4:	212c      	movs	r1, #44	; 0x2c
   343d6:	f7fb fa47 	bl	2f868 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   343da:	4b10      	ldr	r3, [pc, #64]	; (3441c <init_reset+0x6c>)
   343dc:	2207      	movs	r2, #7
   343de:	1d18      	adds	r0, r3, #4
   343e0:	2108      	movs	r1, #8
   343e2:	f7fb fa41 	bl	2f868 <mem_init>
	default_phy_tx |= PHY_2M;
   343e6:	490e      	ldr	r1, [pc, #56]	; (34420 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   343e8:	4a0e      	ldr	r2, [pc, #56]	; (34424 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   343ea:	480f      	ldr	r0, [pc, #60]	; (34428 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   343ec:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   343ee:	f04f 0c1b 	mov.w	ip, #27
   343f2:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   343f6:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   343f8:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   343fc:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   343fe:	f8a0 c000 	strh.w	ip, [r0]
}
   34402:	2000      	movs	r0, #0
   34404:	bd10      	pop	{r4, pc}
   34406:	bf00      	nop
   34408:	2000262c 	.word	0x2000262c
   3440c:	20001538 	.word	0x20001538
   34410:	20003b62 	.word	0x20003b62
   34414:	20002654 	.word	0x20002654
   34418:	200026c4 	.word	0x200026c4
   3441c:	20002778 	.word	0x20002778
   34420:	20003c6a 	.word	0x20003c6a
   34424:	20003c69 	.word	0x20003c69
   34428:	20003b64 	.word	0x20003b64

0003442c <ctrl_tx_pause_enqueue>:
{
   3442c:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
   3442e:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
{
   34432:	4604      	mov	r4, r0
   34434:	460d      	mov	r5, r1
	if (
   34436:	b11b      	cbz	r3, 34440 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   34438:	f890 1166 	ldrb.w	r1, [r0, #358]	; 0x166
	    conn->tx_head &&
   3443c:	0788      	lsls	r0, r1, #30
   3443e:	d50e      	bpl.n	3445e <ctrl_tx_pause_enqueue+0x32>
		if (!conn->tx_ctrl) {
   34440:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   34444:	b351      	cbz	r1, 3449c <ctrl_tx_pause_enqueue+0x70>
			LL_ASSERT(!pause);
   34446:	2a00      	cmp	r2, #0
   34448:	d132      	bne.n	344b0 <ctrl_tx_pause_enqueue+0x84>
	tx->next = conn->tx_ctrl_last->next;
   3444a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   3444e:	681a      	ldr	r2, [r3, #0]
   34450:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   34452:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   34454:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   34456:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   3445a:	b1e3      	cbz	r3, 34496 <ctrl_tx_pause_enqueue+0x6a>
}
   3445c:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   3445e:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   34462:	07c9      	lsls	r1, r1, #31
   34464:	d4ec      	bmi.n	34440 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   34466:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   3446a:	428b      	cmp	r3, r1
   3446c:	d02e      	beq.n	344cc <ctrl_tx_pause_enqueue+0xa0>
		} else if (!conn->tx_ctrl) {
   3446e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   34472:	2900      	cmp	r1, #0
   34474:	d038      	beq.n	344e8 <ctrl_tx_pause_enqueue+0xbc>
			LL_ASSERT(!pause);
   34476:	2a00      	cmp	r2, #0
   34478:	d0e7      	beq.n	3444a <ctrl_tx_pause_enqueue+0x1e>
   3447a:	4a23      	ldr	r2, [pc, #140]	; (34508 <ctrl_tx_pause_enqueue+0xdc>)
   3447c:	4923      	ldr	r1, [pc, #140]	; (3450c <ctrl_tx_pause_enqueue+0xe0>)
   3447e:	4824      	ldr	r0, [pc, #144]	; (34510 <ctrl_tx_pause_enqueue+0xe4>)
   34480:	f640 236e 	movw	r3, #2670	; 0xa6e
   34484:	f00e fbe2 	bl	42c4c <printk>
   34488:	4040      	eors	r0, r0
   3448a:	f380 8811 	msr	BASEPRI, r0
   3448e:	f04f 0003 	mov.w	r0, #3
   34492:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   34494:	e7d9      	b.n	3444a <ctrl_tx_pause_enqueue+0x1e>
		conn->tx_data_last = tx;
   34496:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   3449a:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   3449c:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   3449e:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
   344a2:	2a00      	cmp	r2, #0
   344a4:	d1d9      	bne.n	3445a <ctrl_tx_pause_enqueue+0x2e>
				conn->tx_ctrl_last = tx;
   344a6:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
   344aa:	2b00      	cmp	r3, #0
   344ac:	d1d6      	bne.n	3445c <ctrl_tx_pause_enqueue+0x30>
   344ae:	e7f2      	b.n	34496 <ctrl_tx_pause_enqueue+0x6a>
			LL_ASSERT(!pause);
   344b0:	4a15      	ldr	r2, [pc, #84]	; (34508 <ctrl_tx_pause_enqueue+0xdc>)
   344b2:	4916      	ldr	r1, [pc, #88]	; (3450c <ctrl_tx_pause_enqueue+0xe0>)
   344b4:	4816      	ldr	r0, [pc, #88]	; (34510 <ctrl_tx_pause_enqueue+0xe4>)
   344b6:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   344ba:	f00e fbc7 	bl	42c4c <printk>
   344be:	4040      	eors	r0, r0
   344c0:	f380 8811 	msr	BASEPRI, r0
   344c4:	f04f 0003 	mov.w	r0, #3
   344c8:	df02      	svc	2
   344ca:	e7be      	b.n	3444a <ctrl_tx_pause_enqueue+0x1e>
			conn->tx_data = conn->tx_data->next;
   344cc:	6819      	ldr	r1, [r3, #0]
   344ce:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   344d2:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   344d6:	2900      	cmp	r1, #0
   344d8:	d1cd      	bne.n	34476 <ctrl_tx_pause_enqueue+0x4a>
			tx->next = conn->tx_head->next;
   344da:	6819      	ldr	r1, [r3, #0]
   344dc:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   344de:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   344e0:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   344e2:	2a00      	cmp	r2, #0
   344e4:	d0df      	beq.n	344a6 <ctrl_tx_pause_enqueue+0x7a>
   344e6:	e7b8      	b.n	3445a <ctrl_tx_pause_enqueue+0x2e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   344e8:	7919      	ldrb	r1, [r3, #4]
   344ea:	f001 0103 	and.w	r1, r1, #3
   344ee:	2903      	cmp	r1, #3
   344f0:	d004      	beq.n	344fc <ctrl_tx_pause_enqueue+0xd0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   344f2:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   344f6:	2a00      	cmp	r2, #0
   344f8:	d0a7      	beq.n	3444a <ctrl_tx_pause_enqueue+0x1e>
   344fa:	e7be      	b.n	3447a <ctrl_tx_pause_enqueue+0x4e>
	    ((pdu_data_tx->llctrl.opcode !=
   344fc:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   344fe:	2903      	cmp	r1, #3
   34500:	d0eb      	beq.n	344da <ctrl_tx_pause_enqueue+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34502:	290a      	cmp	r1, #10
   34504:	d1f5      	bne.n	344f2 <ctrl_tx_pause_enqueue+0xc6>
   34506:	e7e8      	b.n	344da <ctrl_tx_pause_enqueue+0xae>
   34508:	0004a498 	.word	0x0004a498
   3450c:	0004a4d8 	.word	0x0004a4d8
   34510:	0004a024 	.word	0x0004a024

00034514 <tx_lll_flush>:
{
   34514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   34518:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   3451c:	4934      	ldr	r1, [pc, #208]	; (345f0 <tx_lll_flush+0xdc>)
{
   3451e:	b083      	sub	sp, #12
   34520:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   34522:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   34526:	4640      	mov	r0, r8
   34528:	f7fb fa04 	bl	2f934 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   3452c:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   34530:	4629      	mov	r1, r5
   34532:	f007 f993 	bl	3b85c <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   34536:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   34538:	aa01      	add	r2, sp, #4
   3453a:	4631      	mov	r1, r6
   3453c:	f7fb fa3a 	bl	2f9b4 <memq_dequeue>
	while (link) {
   34540:	b328      	cbz	r0, 3458e <tx_lll_flush+0x7a>
   34542:	4c2c      	ldr	r4, [pc, #176]	; (345f4 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   34544:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   34548:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   3454c:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   3454e:	f894 c001 	ldrb.w	ip, [r4, #1]
   34552:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   34554:	1c53      	adds	r3, r2, #1
   34556:	b2db      	uxtb	r3, r3
		last = 0U;
   34558:	459c      	cmp	ip, r3
   3455a:	bf08      	it	eq
   3455c:	2300      	moveq	r3, #0
	if (last == first) {
   3455e:	4299      	cmp	r1, r3
   34560:	f894 c000 	ldrb.w	ip, [r4]
   34564:	d033      	beq.n	345ce <tx_lll_flush+0xba>
		lll_tx->node = tx;
   34566:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   34568:	fb12 f20c 	smulbb	r2, r2, ip
   3456c:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
   34570:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   34574:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   34576:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   3457a:	6002      	str	r2, [r0, #0]
		tx->next = link;
   3457c:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   3457e:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   34580:	70e3      	strb	r3, [r4, #3]
   34582:	aa01      	add	r2, sp, #4
   34584:	4631      	mov	r1, r6
   34586:	f7fb fa15 	bl	2f9b4 <memq_dequeue>
	while (link) {
   3458a:	2800      	cmp	r0, #0
   3458c:	d1de      	bne.n	3454c <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   3458e:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   34592:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   34596:	b150      	cbz	r0, 345ae <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   34598:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   3459a:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   3459c:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   345a0:	f7fe fea8 	bl	332f4 <ull_rx_put>
	ull_rx_sched();
   345a4:	f7fe feb6 	bl	33314 <ull_rx_sched>
}
   345a8:	b003      	add	sp, #12
   345aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   345ae:	4a12      	ldr	r2, [pc, #72]	; (345f8 <tx_lll_flush+0xe4>)
   345b0:	4912      	ldr	r1, [pc, #72]	; (345fc <tx_lll_flush+0xe8>)
   345b2:	4813      	ldr	r0, [pc, #76]	; (34600 <tx_lll_flush+0xec>)
   345b4:	f640 13da 	movw	r3, #2522	; 0x9da
   345b8:	f00e fb48 	bl	42c4c <printk>
   345bc:	4040      	eors	r0, r0
   345be:	f380 8811 	msr	BASEPRI, r0
   345c2:	f04f 0003 	mov.w	r0, #3
   345c6:	df02      	svc	2
	link = rx->hdr.link;
   345c8:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   345cc:	e7e4      	b.n	34598 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   345ce:	4a0a      	ldr	r2, [pc, #40]	; (345f8 <tx_lll_flush+0xe4>)
   345d0:	490c      	ldr	r1, [pc, #48]	; (34604 <tx_lll_flush+0xf0>)
   345d2:	480b      	ldr	r0, [pc, #44]	; (34600 <tx_lll_flush+0xec>)
   345d4:	f640 13c6 	movw	r3, #2502	; 0x9c6
   345d8:	f00e fb38 	bl	42c4c <printk>
   345dc:	4040      	eors	r0, r0
   345de:	f380 8811 	msr	BASEPRI, r0
   345e2:	f04f 0003 	mov.w	r0, #3
   345e6:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   345e8:	2300      	movs	r3, #0
   345ea:	801b      	strh	r3, [r3, #0]
   345ec:	deff      	udf	#255	; 0xff
   345ee:	bf00      	nop
   345f0:	20001538 	.word	0x20001538
   345f4:	200006f0 	.word	0x200006f0
   345f8:	0004a498 	.word	0x0004a498
   345fc:	0004a4e8 	.word	0x0004a4e8
   34600:	0004a024 	.word	0x0004a024
   34604:	0004a4e0 	.word	0x0004a4e0

00034608 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   34608:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   3460c:	f012 0202 	ands.w	r2, r2, #2
   34610:	d00a      	beq.n	34628 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   34612:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
   34616:	b1d3      	cbz	r3, 3464e <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   34618:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   3461c:	681a      	ldr	r2, [r3, #0]
   3461e:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   34620:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   34622:	680b      	ldr	r3, [r1, #0]
   34624:	b1d3      	cbz	r3, 3465c <ctrl_tx_sec_enqueue+0x54>
   34626:	4770      	bx	lr
		if (conn->tx_head) {
   34628:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   3462c:	b1cb      	cbz	r3, 34662 <ctrl_tx_sec_enqueue+0x5a>
{
   3462e:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   34630:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
   34634:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
   34638:	45e6      	cmp	lr, ip
   3463a:	d004      	beq.n	34646 <ctrl_tx_sec_enqueue+0x3e>
   3463c:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
   34640:	f1bc 0f03 	cmp.w	ip, #3
   34644:	d010      	beq.n	34668 <ctrl_tx_sec_enqueue+0x60>
}
   34646:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   3464a:	f7ff beef 	b.w	3442c <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   3464e:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   34652:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   34654:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
   34658:	2b00      	cmp	r3, #0
   3465a:	d1e4      	bne.n	34626 <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   3465c:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
   34660:	4770      	bx	lr
	bool pause = false;
   34662:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   34664:	f7ff bee2 	b.w	3442c <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   34668:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   3466c:	f00c 0c03 	and.w	ip, ip, #3
   34670:	f1bc 0f03 	cmp.w	ip, #3
   34674:	d1e7      	bne.n	34646 <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   34676:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   34678:	2a03      	cmp	r2, #3
   3467a:	d005      	beq.n	34688 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   3467c:	f1a2 020a 	sub.w	r2, r2, #10
   34680:	fab2 f282 	clz	r2, r2
   34684:	0952      	lsrs	r2, r2, #5
   34686:	e7de      	b.n	34646 <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   34688:	2201      	movs	r2, #1
   3468a:	e7dc      	b.n	34646 <ctrl_tx_sec_enqueue+0x3e>

0003468c <ticker_stop_op_cb>:
{
   3468c:	b510      	push	{r4, lr}
   3468e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34690:	b9b0      	cbnz	r0, 346c0 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   34692:	4b12      	ldr	r3, [pc, #72]	; (346dc <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   34694:	2200      	movs	r2, #0
   34696:	2101      	movs	r1, #1
   34698:	2002      	movs	r0, #2
	mfy.param = param;
   3469a:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   3469c:	f7fb f9ee 	bl	2fa7c <mayfly_enqueue>
	LL_ASSERT(!ret);
   346a0:	b900      	cbnz	r0, 346a4 <ticker_stop_op_cb+0x18>
}
   346a2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   346a4:	4a0e      	ldr	r2, [pc, #56]	; (346e0 <ticker_stop_op_cb+0x54>)
   346a6:	490f      	ldr	r1, [pc, #60]	; (346e4 <ticker_stop_op_cb+0x58>)
   346a8:	480f      	ldr	r0, [pc, #60]	; (346e8 <ticker_stop_op_cb+0x5c>)
   346aa:	f44f 6318 	mov.w	r3, #2432	; 0x980
   346ae:	f00e facd 	bl	42c4c <printk>
   346b2:	4040      	eors	r0, r0
   346b4:	f380 8811 	msr	BASEPRI, r0
   346b8:	f04f 0003 	mov.w	r0, #3
   346bc:	df02      	svc	2
}
   346be:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   346c0:	4a07      	ldr	r2, [pc, #28]	; (346e0 <ticker_stop_op_cb+0x54>)
   346c2:	490a      	ldr	r1, [pc, #40]	; (346ec <ticker_stop_op_cb+0x60>)
   346c4:	4808      	ldr	r0, [pc, #32]	; (346e8 <ticker_stop_op_cb+0x5c>)
   346c6:	f640 137a 	movw	r3, #2426	; 0x97a
   346ca:	f00e fabf 	bl	42c4c <printk>
   346ce:	4040      	eors	r0, r0
   346d0:	f380 8811 	msr	BASEPRI, r0
   346d4:	f04f 0003 	mov.w	r0, #3
   346d8:	df02      	svc	2
   346da:	e7da      	b.n	34692 <ticker_stop_op_cb+0x6>
   346dc:	20000778 	.word	0x20000778
   346e0:	0004a498 	.word	0x0004a498
   346e4:	0004a2bc 	.word	0x0004a2bc
   346e8:	0004a024 	.word	0x0004a024
   346ec:	0004a4f8 	.word	0x0004a4f8

000346f0 <disabled_cb>:
{
   346f0:	b508      	push	{r3, lr}
	mfy.param = param;
   346f2:	4b0b      	ldr	r3, [pc, #44]	; (34720 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   346f4:	2200      	movs	r2, #0
	mfy.param = param;
   346f6:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   346f8:	4611      	mov	r1, r2
   346fa:	2001      	movs	r0, #1
   346fc:	f7fb f9be 	bl	2fa7c <mayfly_enqueue>
	LL_ASSERT(!ret);
   34700:	b900      	cbnz	r0, 34704 <disabled_cb+0x14>
}
   34702:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   34704:	4a07      	ldr	r2, [pc, #28]	; (34724 <disabled_cb+0x34>)
   34706:	4908      	ldr	r1, [pc, #32]	; (34728 <disabled_cb+0x38>)
   34708:	4808      	ldr	r0, [pc, #32]	; (3472c <disabled_cb+0x3c>)
   3470a:	f640 13ac 	movw	r3, #2476	; 0x9ac
   3470e:	f00e fa9d 	bl	42c4c <printk>
   34712:	4040      	eors	r0, r0
   34714:	f380 8811 	msr	BASEPRI, r0
   34718:	f04f 0003 	mov.w	r0, #3
   3471c:	df02      	svc	2
}
   3471e:	bd08      	pop	{r3, pc}
   34720:	20000758 	.word	0x20000758
   34724:	0004a498 	.word	0x0004a498
   34728:	0004a2bc 	.word	0x0004a2bc
   3472c:	0004a024 	.word	0x0004a024

00034730 <conn_disable>:
{
   34730:	b538      	push	{r3, r4, r5, lr}
	return hdr->ref;
   34732:	7803      	ldrb	r3, [r0, #0]
   34734:	4604      	mov	r4, r0
	if (ull_ref_get(hdr)) {
   34736:	2b00      	cmp	r3, #0
   34738:	d02c      	beq.n	34794 <conn_disable+0x64>
		mfy.param = &conn->lll;
   3473a:	4d19      	ldr	r5, [pc, #100]	; (347a0 <conn_disable+0x70>)
		LL_ASSERT(!hdr->disabled_cb);
   3473c:	6943      	ldr	r3, [r0, #20]
		mfy.param = &conn->lll;
   3473e:	f100 011c 	add.w	r1, r0, #28
   34742:	60a9      	str	r1, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   34744:	b16b      	cbz	r3, 34762 <conn_disable+0x32>
   34746:	4a17      	ldr	r2, [pc, #92]	; (347a4 <conn_disable+0x74>)
   34748:	4917      	ldr	r1, [pc, #92]	; (347a8 <conn_disable+0x78>)
   3474a:	4818      	ldr	r0, [pc, #96]	; (347ac <conn_disable+0x7c>)
   3474c:	f640 1395 	movw	r3, #2453	; 0x995
   34750:	f00e fa7c 	bl	42c4c <printk>
   34754:	4040      	eors	r0, r0
   34756:	f380 8811 	msr	BASEPRI, r0
   3475a:	f04f 0003 	mov.w	r0, #3
   3475e:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   34760:	68a9      	ldr	r1, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   34762:	4813      	ldr	r0, [pc, #76]	; (347b0 <conn_disable+0x80>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   34764:	4b0e      	ldr	r3, [pc, #56]	; (347a0 <conn_disable+0x70>)
   34766:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   34768:	e9c4 0105 	strd	r0, r1, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3476c:	4611      	mov	r1, r2
   3476e:	2001      	movs	r0, #1
   34770:	f7fb f984 	bl	2fa7c <mayfly_enqueue>
		LL_ASSERT(!ret);
   34774:	b900      	cbnz	r0, 34778 <conn_disable+0x48>
}
   34776:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   34778:	4a0a      	ldr	r2, [pc, #40]	; (347a4 <conn_disable+0x74>)
   3477a:	490e      	ldr	r1, [pc, #56]	; (347b4 <conn_disable+0x84>)
   3477c:	480b      	ldr	r0, [pc, #44]	; (347ac <conn_disable+0x7c>)
   3477e:	f640 139c 	movw	r3, #2460	; 0x99c
   34782:	f00e fa63 	bl	42c4c <printk>
   34786:	4040      	eors	r0, r0
   34788:	f380 8811 	msr	BASEPRI, r0
   3478c:	f04f 0003 	mov.w	r0, #3
   34790:	df02      	svc	2
}
   34792:	bd38      	pop	{r3, r4, r5, pc}
   34794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   34798:	301c      	adds	r0, #28
   3479a:	f7ff bfa9 	b.w	346f0 <disabled_cb>
   3479e:	bf00      	nop
   347a0:	20000768 	.word	0x20000768
   347a4:	0004a498 	.word	0x0004a498
   347a8:	0004a3d8 	.word	0x0004a3d8
   347ac:	0004a024 	.word	0x0004a024
   347b0:	000346f1 	.word	0x000346f1
   347b4:	0004a2bc 	.word	0x0004a2bc

000347b8 <conn_setup_adv_scan_disabled_cb>:
{
   347b8:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   347ba:	6883      	ldr	r3, [r0, #8]
   347bc:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   347be:	7f53      	ldrb	r3, [r2, #29]
   347c0:	09db      	lsrs	r3, r3, #7
   347c2:	d10d      	bne.n	347e0 <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
   347c4:	4a09      	ldr	r2, [pc, #36]	; (347ec <conn_setup_adv_scan_disabled_cb+0x34>)
   347c6:	490a      	ldr	r1, [pc, #40]	; (347f0 <conn_setup_adv_scan_disabled_cb+0x38>)
   347c8:	480a      	ldr	r0, [pc, #40]	; (347f4 <conn_setup_adv_scan_disabled_cb+0x3c>)
   347ca:	f640 03d5 	movw	r3, #2261	; 0x8d5
   347ce:	f00e fa3d 	bl	42c4c <printk>
   347d2:	4040      	eors	r0, r0
   347d4:	f380 8811 	msr	BASEPRI, r0
   347d8:	f04f 0003 	mov.w	r0, #3
   347dc:	df02      	svc	2
}
   347de:	bd08      	pop	{r3, pc}
		ull_periph_setup(rx, ftr, lll);
   347e0:	4601      	mov	r1, r0
}
   347e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
   347e6:	3108      	adds	r1, #8
   347e8:	f7f2 bc42 	b.w	27070 <ull_periph_setup>
   347ec:	0004a498 	.word	0x0004a498
   347f0:	0004a084 	.word	0x0004a084
   347f4:	0004a024 	.word	0x0004a024

000347f8 <ticker_start_conn_op_cb>:
{
   347f8:	b510      	push	{r4, lr}
   347fa:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   347fc:	b990      	cbnz	r0, 34824 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   347fe:	4620      	mov	r0, r4
   34800:	f7fe fcae 	bl	33160 <ull_update_unmark>
	LL_ASSERT(p == param);
   34804:	4284      	cmp	r4, r0
   34806:	d00c      	beq.n	34822 <ticker_start_conn_op_cb+0x2a>
   34808:	4a0d      	ldr	r2, [pc, #52]	; (34840 <ticker_start_conn_op_cb+0x48>)
   3480a:	490e      	ldr	r1, [pc, #56]	; (34844 <ticker_start_conn_op_cb+0x4c>)
   3480c:	480e      	ldr	r0, [pc, #56]	; (34848 <ticker_start_conn_op_cb+0x50>)
   3480e:	f640 03b7 	movw	r3, #2231	; 0x8b7
   34812:	f00e fa1b 	bl	42c4c <printk>
   34816:	4040      	eors	r0, r0
   34818:	f380 8811 	msr	BASEPRI, r0
   3481c:	f04f 0003 	mov.w	r0, #3
   34820:	df02      	svc	2
}
   34822:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34824:	4a06      	ldr	r2, [pc, #24]	; (34840 <ticker_start_conn_op_cb+0x48>)
   34826:	4909      	ldr	r1, [pc, #36]	; (3484c <ticker_start_conn_op_cb+0x54>)
   34828:	4807      	ldr	r0, [pc, #28]	; (34848 <ticker_start_conn_op_cb+0x50>)
   3482a:	f640 03b4 	movw	r3, #2228	; 0x8b4
   3482e:	f00e fa0d 	bl	42c4c <printk>
   34832:	4040      	eors	r0, r0
   34834:	f380 8811 	msr	BASEPRI, r0
   34838:	f04f 0003 	mov.w	r0, #3
   3483c:	df02      	svc	2
   3483e:	e7de      	b.n	347fe <ticker_start_conn_op_cb+0x6>
   34840:	0004a498 	.word	0x0004a498
   34844:	0004a504 	.word	0x0004a504
   34848:	0004a024 	.word	0x0004a024
   3484c:	0004a4f8 	.word	0x0004a4f8

00034850 <ticker_stop_conn_op_cb>:
{
   34850:	b510      	push	{r4, lr}
   34852:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   34854:	b990      	cbnz	r0, 3487c <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   34856:	4620      	mov	r0, r4
   34858:	f7fe fc76 	bl	33148 <ull_update_mark>
	LL_ASSERT(p == param);
   3485c:	4284      	cmp	r4, r0
   3485e:	d00c      	beq.n	3487a <ticker_stop_conn_op_cb+0x2a>
   34860:	4a0d      	ldr	r2, [pc, #52]	; (34898 <ticker_stop_conn_op_cb+0x48>)
   34862:	490e      	ldr	r1, [pc, #56]	; (3489c <ticker_stop_conn_op_cb+0x4c>)
   34864:	480e      	ldr	r0, [pc, #56]	; (348a0 <ticker_stop_conn_op_cb+0x50>)
   34866:	f640 03ad 	movw	r3, #2221	; 0x8ad
   3486a:	f00e f9ef 	bl	42c4c <printk>
   3486e:	4040      	eors	r0, r0
   34870:	f380 8811 	msr	BASEPRI, r0
   34874:	f04f 0003 	mov.w	r0, #3
   34878:	df02      	svc	2
}
   3487a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3487c:	4a06      	ldr	r2, [pc, #24]	; (34898 <ticker_stop_conn_op_cb+0x48>)
   3487e:	4909      	ldr	r1, [pc, #36]	; (348a4 <ticker_stop_conn_op_cb+0x54>)
   34880:	4807      	ldr	r0, [pc, #28]	; (348a0 <ticker_stop_conn_op_cb+0x50>)
   34882:	f640 03aa 	movw	r3, #2218	; 0x8aa
   34886:	f00e f9e1 	bl	42c4c <printk>
   3488a:	4040      	eors	r0, r0
   3488c:	f380 8811 	msr	BASEPRI, r0
   34890:	f04f 0003 	mov.w	r0, #3
   34894:	df02      	svc	2
   34896:	e7de      	b.n	34856 <ticker_stop_conn_op_cb+0x6>
   34898:	0004a498 	.word	0x0004a498
   3489c:	0004a504 	.word	0x0004a504
   348a0:	0004a024 	.word	0x0004a024
   348a4:	0004a4f8 	.word	0x0004a4f8

000348a8 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   348a8:	b900      	cbnz	r0, 348ac <ticker_update_conn_op_cb+0x4>
   348aa:	4770      	bx	lr
{
   348ac:	b510      	push	{r4, lr}
   348ae:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   348b0:	f7fe fc62 	bl	33178 <ull_update_mark_get>
   348b4:	4284      	cmp	r4, r0
   348b6:	d010      	beq.n	348da <ticker_update_conn_op_cb+0x32>
   348b8:	f7fe fc40 	bl	3313c <ull_disable_mark_get>
   348bc:	4284      	cmp	r4, r0
   348be:	d00c      	beq.n	348da <ticker_update_conn_op_cb+0x32>
   348c0:	4a06      	ldr	r2, [pc, #24]	; (348dc <ticker_update_conn_op_cb+0x34>)
   348c2:	4907      	ldr	r1, [pc, #28]	; (348e0 <ticker_update_conn_op_cb+0x38>)
   348c4:	4807      	ldr	r0, [pc, #28]	; (348e4 <ticker_update_conn_op_cb+0x3c>)
   348c6:	f640 03a1 	movw	r3, #2209	; 0x8a1
   348ca:	f00e f9bf 	bl	42c4c <printk>
   348ce:	4040      	eors	r0, r0
   348d0:	f380 8811 	msr	BASEPRI, r0
   348d4:	f04f 0003 	mov.w	r0, #3
   348d8:	df02      	svc	2
}
   348da:	bd10      	pop	{r4, pc}
   348dc:	0004a498 	.word	0x0004a498
   348e0:	0004a510 	.word	0x0004a510
   348e4:	0004a024 	.word	0x0004a024

000348e8 <tx_ull_dequeue>:
{
   348e8:	4603      	mov	r3, r0
   348ea:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   348ec:	f8d0 41c8 	ldr.w	r4, [r0, #456]	; 0x1c8
   348f0:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
{
   348f4:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   348f6:	b164      	cbz	r4, 34912 <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
   348f8:	4294      	cmp	r4, r2
   348fa:	d022      	beq.n	34942 <tx_ull_dequeue+0x5a>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   348fc:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   34900:	428a      	cmp	r2, r1
   34902:	d00b      	beq.n	3491c <tx_ull_dequeue+0x34>
		conn->tx_head = conn->tx_head->next;
   34904:	6812      	ldr	r2, [r2, #0]
   34906:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   3490a:	2300      	movs	r3, #0
}
   3490c:	bc10      	pop	{r4}
		tx->next = tx;
   3490e:	6003      	str	r3, [r0, #0]
}
   34910:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   34912:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   34916:	428a      	cmp	r2, r1
   34918:	d104      	bne.n	34924 <tx_ull_dequeue+0x3c>
	if (conn->tx_head == conn->tx_ctrl) {
   3491a:	b192      	cbz	r2, 34942 <tx_ull_dequeue+0x5a>
			conn->tx_data = conn->tx_data->next;
   3491c:	6809      	ldr	r1, [r1, #0]
   3491e:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
   34922:	e7ef      	b.n	34904 <tx_ull_dequeue+0x1c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34924:	7911      	ldrb	r1, [r2, #4]
   34926:	f001 0103 	and.w	r1, r1, #3
   3492a:	2903      	cmp	r1, #3
   3492c:	d015      	beq.n	3495a <tx_ull_dequeue+0x72>
		conn->tx_head = conn->tx_head->next;
   3492e:	6812      	ldr	r2, [r2, #0]
   34930:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
   34934:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   34936:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
		tx->next = tx;
   3493a:	4603      	mov	r3, r0
}
   3493c:	bc10      	pop	{r4}
		tx->next = tx;
   3493e:	6003      	str	r3, [r0, #0]
}
   34940:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   34942:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
   34946:	6812      	ldr	r2, [r2, #0]
   34948:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   3494c:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   3494e:	bf18      	it	ne
   34950:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   34954:	d0ee      	beq.n	34934 <tx_ull_dequeue+0x4c>
		tx->next = tx;
   34956:	4603      	mov	r3, r0
   34958:	e7f0      	b.n	3493c <tx_ull_dequeue+0x54>
	    ((pdu_data_tx->llctrl.opcode !=
   3495a:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3495c:	2903      	cmp	r1, #3
   3495e:	d0d1      	beq.n	34904 <tx_ull_dequeue+0x1c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34960:	290a      	cmp	r1, #10
   34962:	d1e4      	bne.n	3492e <tx_ull_dequeue+0x46>
   34964:	e7ce      	b.n	34904 <tx_ull_dequeue+0x1c>
   34966:	bf00      	nop

00034968 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   34968:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
   3496c:	4605      	mov	r5, r0
	if (conn->common.txn_lock) {
   3496e:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
   34972:	0780      	lsls	r0, r0, #30
{
   34974:	460e      	mov	r6, r1
	if (conn->common.txn_lock) {
   34976:	d434      	bmi.n	349e2 <reject_ext_ind_send+0x7a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   34978:	4831      	ldr	r0, [pc, #196]	; (34a40 <reject_ext_ind_send+0xd8>)
   3497a:	4690      	mov	r8, r2
   3497c:	461f      	mov	r7, r3
   3497e:	f7fa ffa3 	bl	2f8c8 <mem_acquire>
	if (!tx) {
   34982:	2800      	cmp	r0, #0
   34984:	d03c      	beq.n	34a00 <reject_ext_ind_send+0x98>
	conn->common.txn_lock = 1U;
   34986:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   3498a:	f043 0302 	orr.w	r3, r3, #2
   3498e:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   34992:	2303      	movs	r3, #3
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   34994:	2211      	movs	r2, #17
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   34996:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   34998:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3499c:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3499e:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   349a0:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   349a4:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   349a8:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   349aa:	7102      	strb	r2, [r0, #4]
	if (
   349ac:	b1f3      	cbz	r3, 349ec <reject_ext_ind_send+0x84>
	    !conn->llcp_enc.pause_tx &&
   349ae:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
	    conn->tx_head &&
   349b2:	0791      	lsls	r1, r2, #30
   349b4:	d41a      	bmi.n	349ec <reject_ext_ind_send+0x84>
	    !conn->llcp_phy.pause_tx &&
   349b6:	f895 21bf 	ldrb.w	r2, [r5, #447]	; 0x1bf
   349ba:	07d2      	lsls	r2, r2, #31
   349bc:	d416      	bmi.n	349ec <reject_ext_ind_send+0x84>
		if (conn->tx_head == conn->tx_data) {
   349be:	f8d5 21d0 	ldr.w	r2, [r5, #464]	; 0x1d0
   349c2:	4293      	cmp	r3, r2
   349c4:	d027      	beq.n	34a16 <reject_ext_ind_send+0xae>
		} else if (!conn->tx_ctrl) {
   349c6:	f8d5 21c8 	ldr.w	r2, [r5, #456]	; 0x1c8
   349ca:	b1e2      	cbz	r2, 34a06 <reject_ext_ind_send+0x9e>
	tx->next = conn->tx_ctrl_last->next;
   349cc:	f8d5 31cc 	ldr.w	r3, [r5, #460]	; 0x1cc
   349d0:	681a      	ldr	r2, [r3, #0]
   349d2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   349d4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   349d6:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   349d8:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
	if (!tx->next) {
   349dc:	b90b      	cbnz	r3, 349e2 <reject_ext_ind_send+0x7a>
		conn->tx_data_last = tx;
   349de:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   349e2:	2301      	movs	r3, #1
   349e4:	7133      	strb	r3, [r6, #4]
		*err = 0U;
   349e6:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   349e8:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
		if (!conn->tx_ctrl) {
   349ec:	f8d5 21c8 	ldr.w	r2, [r5, #456]	; 0x1c8
   349f0:	2a00      	cmp	r2, #0
   349f2:	d1eb      	bne.n	349cc <reject_ext_ind_send+0x64>
			tx->next = conn->tx_head;
   349f4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   349f6:	e9c5 0071 	strd	r0, r0, [r5, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   349fa:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
   349fe:	e7ed      	b.n	349dc <reject_ext_ind_send+0x74>
		*err = -ENOBUFS;
   34a00:	f06f 0068 	mvn.w	r0, #104	; 0x68
   34a04:	e7f0      	b.n	349e8 <reject_ext_ind_send+0x80>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34a06:	791a      	ldrb	r2, [r3, #4]
   34a08:	f002 0203 	and.w	r2, r2, #3
   34a0c:	2a03      	cmp	r2, #3
   34a0e:	d010      	beq.n	34a32 <reject_ext_ind_send+0xca>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   34a10:	f8c5 31c8 	str.w	r3, [r5, #456]	; 0x1c8
   34a14:	e7dc      	b.n	349d0 <reject_ext_ind_send+0x68>
			conn->tx_data = conn->tx_data->next;
   34a16:	681a      	ldr	r2, [r3, #0]
   34a18:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   34a1c:	f8d5 21c8 	ldr.w	r2, [r5, #456]	; 0x1c8
   34a20:	2a00      	cmp	r2, #0
   34a22:	d1d3      	bne.n	349cc <reject_ext_ind_send+0x64>
			tx->next = conn->tx_head->next;
   34a24:	681a      	ldr	r2, [r3, #0]
   34a26:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   34a28:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   34a2a:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   34a2c:	e9c5 0072 	strd	r0, r0, [r5, #456]	; 0x1c8
   34a30:	e7d4      	b.n	349dc <reject_ext_ind_send+0x74>
	    ((pdu_data_tx->llctrl.opcode !=
   34a32:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34a34:	2a03      	cmp	r2, #3
   34a36:	d0f5      	beq.n	34a24 <reject_ext_ind_send+0xbc>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34a38:	2a0a      	cmp	r2, #10
   34a3a:	d1e9      	bne.n	34a10 <reject_ext_ind_send+0xa8>
   34a3c:	e7f2      	b.n	34a24 <reject_ext_ind_send+0xbc>
   34a3e:	bf00      	nop
   34a40:	200026c4 	.word	0x200026c4

00034a44 <event_len_prep>:
{
   34a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   34a46:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   34a4a:	f003 0207 	and.w	r2, r3, #7
{
   34a4e:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   34a50:	2a06      	cmp	r2, #6
   34a52:	f200 80d7 	bhi.w	34c04 <event_len_prep+0x1c0>
   34a56:	e8df f002 	tbb	[pc, r2]
   34a5a:	4804      	.short	0x4804
   34a5c:	49494848 	.word	0x49494848
   34a60:	48          	.byte	0x48
   34a61:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   34a62:	486f      	ldr	r0, [pc, #444]	; (34c20 <event_len_prep+0x1dc>)
   34a64:	f7fa ff30 	bl	2f8c8 <mem_acquire>
		if (!tx) {
   34a68:	2800      	cmp	r0, #0
   34a6a:	d03e      	beq.n	34aea <event_len_prep+0xa6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   34a6c:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   34a70:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   34a74:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   34a78:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   34a7c:	2301      	movs	r3, #1
   34a7e:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   34a82:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   34a86:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   34a8a:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   34a8c:	72c3      	strb	r3, [r0, #11]
   34a8e:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   34a90:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   34a92:	2309      	movs	r3, #9
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   34a94:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   34a96:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->len =
   34a98:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   34a9a:	2214      	movs	r2, #20
	    conn->tx_head &&
   34a9c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   34aa0:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   34aa2:	221b      	movs	r2, #27
   34aa4:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34aa6:	7902      	ldrb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   34aa8:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34aaa:	f042 0203 	orr.w	r2, r2, #3
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   34aae:	7241      	strb	r1, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34ab0:	7102      	strb	r2, [r0, #4]
	if (
   34ab2:	b13b      	cbz	r3, 34ac4 <event_len_prep+0x80>
	    !conn->llcp_enc.pause_tx &&
   34ab4:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   34ab8:	0791      	lsls	r1, r2, #30
   34aba:	d403      	bmi.n	34ac4 <event_len_prep+0x80>
	    !conn->llcp_phy.pause_tx &&
   34abc:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   34ac0:	07d2      	lsls	r2, r2, #31
   34ac2:	d576      	bpl.n	34bb2 <event_len_prep+0x16e>
		if (!conn->tx_ctrl) {
   34ac4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   34ac8:	2a00      	cmp	r2, #0
   34aca:	f000 8082 	beq.w	34bd2 <event_len_prep+0x18e>
	tx->next = conn->tx_ctrl_last->next;
   34ace:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   34ad2:	681a      	ldr	r2, [r3, #0]
   34ad4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   34ad6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   34ad8:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   34ada:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   34ade:	2b00      	cmp	r3, #0
   34ae0:	d056      	beq.n	34b90 <event_len_prep+0x14c>
		conn->procedure_expire = conn->procedure_reload;
   34ae2:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   34ae6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   34aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   34aec:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   34af0:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   34af4:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   34af8:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   34afc:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   34b00:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   34b04:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   34b06:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   34b0a:	d024      	beq.n	34b56 <event_len_prep+0x112>
			conn->llcp_length.state =
   34b0c:	2206      	movs	r2, #6
   34b0e:	f362 0302 	bfi	r3, r2, #0, #3
   34b12:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
   34b16:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   34b1a:	b335      	cbz	r5, 34b6a <event_len_prep+0x126>
   34b1c:	6828      	ldr	r0, [r5, #0]
   34b1e:	b320      	cbz	r0, 34b6a <event_len_prep+0x126>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   34b20:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   34b22:	6842      	ldr	r2, [r0, #4]
   34b24:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   34b28:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   34b2c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   34b2e:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   34b30:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   34b32:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   34b34:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   34b36:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   34b38:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   34b3a:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   34b3c:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   34b40:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   34b42:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   34b44:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   34b46:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   34b48:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   34b4a:	f7fe fa19 	bl	32f80 <ll_rx_put>
}
   34b4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   34b52:	f7fe ba1f 	b.w	32f94 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   34b56:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
   34b5a:	b9e2      	cbnz	r2, 34b96 <event_len_prep+0x152>
				conn->llcp_length.ack = conn->llcp_length.req;
   34b5c:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
   34b60:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   34b64:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   34b68:	e7d5      	b.n	34b16 <event_len_prep+0xd2>
		LL_ASSERT(rx && rx->hdr.link);
   34b6a:	4a2e      	ldr	r2, [pc, #184]	; (34c24 <event_len_prep+0x1e0>)
   34b6c:	492e      	ldr	r1, [pc, #184]	; (34c28 <event_len_prep+0x1e4>)
   34b6e:	482f      	ldr	r0, [pc, #188]	; (34c2c <event_len_prep+0x1e8>)
   34b70:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   34b74:	f00e f86a 	bl	42c4c <printk>
   34b78:	4040      	eors	r0, r0
   34b7a:	f380 8811 	msr	BASEPRI, r0
   34b7e:	f04f 0003 	mov.w	r0, #3
   34b82:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   34b84:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   34b86:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   34b8a:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   34b8e:	e7c7      	b.n	34b20 <event_len_prep+0xdc>
		conn->tx_data_last = tx;
   34b90:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   34b94:	e7a5      	b.n	34ae2 <event_len_prep+0x9e>
				conn->llcp_length.tx_octets =
   34b96:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   34b9a:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   34b9c:	f362 0302 	bfi	r3, r2, #0, #3
   34ba0:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   34ba4:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
   34ba8:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   34bac:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   34bb0:	e7b1      	b.n	34b16 <event_len_prep+0xd2>
		if (conn->tx_head == conn->tx_data) {
   34bb2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   34bb6:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   34bb8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   34bbc:	d00f      	beq.n	34bde <event_len_prep+0x19a>
		} else if (!conn->tx_ctrl) {
   34bbe:	2a00      	cmp	r2, #0
   34bc0:	d185      	bne.n	34ace <event_len_prep+0x8a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34bc2:	791a      	ldrb	r2, [r3, #4]
   34bc4:	f002 0203 	and.w	r2, r2, #3
   34bc8:	2a03      	cmp	r2, #3
   34bca:	d015      	beq.n	34bf8 <event_len_prep+0x1b4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   34bcc:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   34bd0:	e77f      	b.n	34ad2 <event_len_prep+0x8e>
			tx->next = conn->tx_head;
   34bd2:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   34bd4:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   34bd8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   34bdc:	e77f      	b.n	34ade <event_len_prep+0x9a>
			conn->tx_data = conn->tx_data->next;
   34bde:	6819      	ldr	r1, [r3, #0]
   34be0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   34be4:	2a00      	cmp	r2, #0
   34be6:	f47f af72 	bne.w	34ace <event_len_prep+0x8a>
			tx->next = conn->tx_head->next;
   34bea:	681a      	ldr	r2, [r3, #0]
   34bec:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   34bee:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   34bf0:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   34bf2:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   34bf6:	e772      	b.n	34ade <event_len_prep+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   34bf8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34bfa:	2a03      	cmp	r2, #3
   34bfc:	d0f5      	beq.n	34bea <event_len_prep+0x1a6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34bfe:	2a0a      	cmp	r2, #10
   34c00:	d1e4      	bne.n	34bcc <event_len_prep+0x188>
   34c02:	e7f2      	b.n	34bea <event_len_prep+0x1a6>
		LL_ASSERT(0);
   34c04:	4a07      	ldr	r2, [pc, #28]	; (34c24 <event_len_prep+0x1e0>)
   34c06:	490a      	ldr	r1, [pc, #40]	; (34c30 <event_len_prep+0x1ec>)
   34c08:	4808      	ldr	r0, [pc, #32]	; (34c2c <event_len_prep+0x1e8>)
   34c0a:	f241 03ea 	movw	r3, #4330	; 0x10ea
   34c0e:	f00e f81d 	bl	42c4c <printk>
   34c12:	4040      	eors	r0, r0
   34c14:	f380 8811 	msr	BASEPRI, r0
   34c18:	f04f 0003 	mov.w	r0, #3
   34c1c:	df02      	svc	2
}
   34c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34c20:	200026c4 	.word	0x200026c4
   34c24:	0004a498 	.word	0x0004a498
   34c28:	0004a564 	.word	0x0004a564
   34c2c:	0004a024 	.word	0x0004a024
   34c30:	0004a084 	.word	0x0004a084

00034c34 <event_phy_upd_ind_prep>:
{
   34c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   34c38:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   34c3c:	f013 0601 	ands.w	r6, r3, #1
{
   34c40:	4604      	mov	r4, r0
   34c42:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   34c44:	f040 808b 	bne.w	34d5e <event_phy_upd_ind_prep+0x12a>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   34c48:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   34c4c:	1a69      	subs	r1, r5, r1
   34c4e:	040a      	lsls	r2, r1, #16
   34c50:	f100 808c 	bmi.w	34d6c <event_phy_upd_ind_prep+0x138>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   34c54:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   34c58:	2900      	cmp	r1, #0
   34c5a:	f2c0 8127 	blt.w	34eac <event_phy_upd_ind_prep+0x278>
		rx = conn->llcp_rx;
   34c5e:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
   34c62:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   34c64:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   34c68:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   34c6c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   34c70:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_tx_time = lll->max_tx_time;
   34c74:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		uint16_t eff_rx_time = lll->max_rx_time;
   34c78:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   34c7c:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   34c80:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   34c84:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   34c88:	d007      	beq.n	34c9a <event_phy_upd_ind_prep+0x66>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   34c8a:	f3c3 0082 	ubfx	r0, r3, #2, #3
   34c8e:	f360 0102 	bfi	r1, r0, #0, #3
   34c92:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   34c96:	f44f 76a4 	mov.w	r6, #328	; 0x148
		if (conn->llcp.phy_upd_ind.rx) {
   34c9a:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   34c9e:	d167      	bne.n	34d70 <event_phy_upd_ind_prep+0x13c>
		LL_ASSERT(rx && rx->hdr.link);
   34ca0:	2d00      	cmp	r5, #0
   34ca2:	f000 80e3 	beq.w	34e6c <event_phy_upd_ind_prep+0x238>
   34ca6:	6828      	ldr	r0, [r5, #0]
   34ca8:	2800      	cmp	r0, #0
   34caa:	f000 80df 	beq.w	34e6c <event_phy_upd_ind_prep+0x238>
		conn->llcp_rx = rx->hdr.link->mem;
   34cae:	6843      	ldr	r3, [r0, #4]
   34cb0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34cb4:	f012 0f02 	tst.w	r2, #2
   34cb8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   34cbc:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34cc0:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   34cc4:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34cc8:	d102      	bne.n	34cd0 <event_phy_upd_ind_prep+0x9c>
   34cca:	4599      	cmp	r9, r3
   34ccc:	f000 80b1 	beq.w	34e32 <event_phy_upd_ind_prep+0x1fe>
		rx->hdr.handle = lll->handle;
   34cd0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		upd->tx = lll->phy_tx;
   34cd2:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   34cd4:	231c      	movs	r3, #28
   34cd6:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   34cd8:	2300      	movs	r3, #0
		rx->hdr.handle = lll->handle;
   34cda:	80e9      	strh	r1, [r5, #6]
		upd->rx = lll->phy_rx;
   34cdc:	77aa      	strb	r2, [r5, #30]
		upd->status = 0U;
   34cde:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   34ce0:	4629      	mov	r1, r5
   34ce2:	f7fe f94d 	bl	32f80 <ll_rx_put>
		rx = conn->llcp_rx;
   34ce6:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   34cea:	2d00      	cmp	r5, #0
   34cec:	f000 80cf 	beq.w	34e8e <event_phy_upd_ind_prep+0x25a>
   34cf0:	6828      	ldr	r0, [r5, #0]
   34cf2:	2800      	cmp	r0, #0
   34cf4:	f000 80cb 	beq.w	34e8e <event_phy_upd_ind_prep+0x25a>
		if ((eff_tx_time <= lll->max_tx_time) &&
   34cf8:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   34cfc:	6842      	ldr	r2, [r0, #4]
   34cfe:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   34d02:	42b3      	cmp	r3, r6
   34d04:	d30a      	bcc.n	34d1c <event_phy_upd_ind_prep+0xe8>
   34d06:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   34d0a:	d807      	bhi.n	34d1c <event_phy_upd_ind_prep+0xe8>
		    (eff_rx_time <= lll->max_rx_time) &&
   34d0c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   34d10:	42bb      	cmp	r3, r7
   34d12:	d303      	bcc.n	34d1c <event_phy_upd_ind_prep+0xe8>
		    (eff_rx_time <= lll->max_rx_time) &&
   34d14:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   34d18:	f240 8103 	bls.w	34f22 <event_phy_upd_ind_prep+0x2ee>
		lll->max_tx_time = eff_tx_time;
   34d1c:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   34d20:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   34d24:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   34d26:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   34d28:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   34d2a:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   34d2e:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   34d32:	2109      	movs	r1, #9
   34d34:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   34d36:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   34d3a:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   34d3c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   34d40:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   34d42:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   34d46:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   34d48:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   34d4a:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   34d4c:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   34d4e:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   34d50:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   34d52:	f7fe f915 	bl	32f80 <ll_rx_put>
}
   34d56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   34d5a:	f7fe b91b 	b.w	32f94 <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   34d5e:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   34d62:	2200      	movs	r2, #0
   34d64:	f7fa fe1e 	bl	2f9a4 <memq_peek>
   34d68:	4606      	mov	r6, r0
   34d6a:	b158      	cbz	r0, 34d84 <event_phy_upd_ind_prep+0x150>
}
   34d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   34d70:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   34d74:	095b      	lsrs	r3, r3, #5
   34d76:	f363 0102 	bfi	r1, r3, #0, #3
   34d7a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   34d7e:	f44f 77a4 	mov.w	r7, #328	; 0x148
   34d82:	e78d      	b.n	34ca0 <event_phy_upd_ind_prep+0x6c>
		rx = ll_pdu_rx_alloc_peek(2);
   34d84:	2002      	movs	r0, #2
   34d86:	f7fe f90b 	bl	32fa0 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   34d8a:	4680      	mov	r8, r0
   34d8c:	2800      	cmp	r0, #0
   34d8e:	d0ed      	beq.n	34d6c <event_phy_upd_ind_prep+0x138>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   34d90:	4895      	ldr	r0, [pc, #596]	; (34fe8 <event_phy_upd_ind_prep+0x3b4>)
   34d92:	f7fa fd99 	bl	2f8c8 <mem_acquire>
		if (!tx) {
   34d96:	4607      	mov	r7, r0
   34d98:	2800      	cmp	r0, #0
   34d9a:	d0e7      	beq.n	34d6c <event_phy_upd_ind_prep+0x138>
		conn->llcp.phy_upd_ind.initiate = 0U;
   34d9c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   34da0:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   34da4:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   34da8:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   34dac:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   34db0:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   34db4:	b2db      	uxtb	r3, r3
   34db6:	f040 8096 	bne.w	34ee6 <event_phy_upd_ind_prep+0x2b2>
			conn->llcp_ack = conn->llcp_req;
   34dba:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   34dbe:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   34dc2:	079d      	lsls	r5, r3, #30
			conn->llcp_ack = conn->llcp_req;
   34dc4:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   34dc8:	f100 80bf 	bmi.w	34f4a <event_phy_upd_ind_prep+0x316>
   34dcc:	4633      	mov	r3, r6
   34dce:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   34dd0:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
   34dd2:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   34dd4:	723e      	strb	r6, [r7, #8]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   34dd6:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->len =
   34dd8:	717b      	strb	r3, [r7, #5]
		pdu_ctrl_tx->llctrl.opcode =
   34dda:	2218      	movs	r2, #24
	    conn->tx_head &&
   34ddc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode =
   34de0:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   34de2:	793a      	ldrb	r2, [r7, #4]
   34de4:	f042 0203 	orr.w	r2, r2, #3
   34de8:	713a      	strb	r2, [r7, #4]
	if (
   34dea:	2b00      	cmp	r3, #0
   34dec:	f000 80a2 	beq.w	34f34 <event_phy_upd_ind_prep+0x300>
	    !conn->llcp_enc.pause_tx &&
   34df0:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   34df4:	0790      	lsls	r0, r2, #30
   34df6:	f100 809d 	bmi.w	34f34 <event_phy_upd_ind_prep+0x300>
	    !conn->llcp_phy.pause_tx &&
   34dfa:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   34dfe:	07d1      	lsls	r1, r2, #31
   34e00:	f100 8098 	bmi.w	34f34 <event_phy_upd_ind_prep+0x300>
		if (conn->tx_head == conn->tx_data) {
   34e04:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   34e08:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   34e0a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   34e0e:	f000 80d0 	beq.w	34fb2 <event_phy_upd_ind_prep+0x37e>
		} else if (!conn->tx_ctrl) {
   34e12:	2a00      	cmp	r2, #0
   34e14:	f000 80da 	beq.w	34fcc <event_phy_upd_ind_prep+0x398>
	tx->next = conn->tx_ctrl_last->next;
   34e18:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   34e1c:	681a      	ldr	r2, [r3, #0]
   34e1e:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   34e20:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   34e22:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   34e24:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   34e28:	2b00      	cmp	r3, #0
   34e2a:	d19f      	bne.n	34d6c <event_phy_upd_ind_prep+0x138>
		conn->tx_data_last = tx;
   34e2c:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   34e30:	e79c      	b.n	34d6c <event_phy_upd_ind_prep+0x138>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34e32:	4590      	cmp	r8, r2
   34e34:	f47f af4c 	bne.w	34cd0 <event_phy_upd_ind_prep+0x9c>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   34e38:	2301      	movs	r3, #1
   34e3a:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   34e3c:	4629      	mov	r1, r5
   34e3e:	f7fe f89f 	bl	32f80 <ll_rx_put>
				rx = conn->llcp_rx;
   34e42:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   34e46:	2d00      	cmp	r5, #0
   34e48:	f000 80a4 	beq.w	34f94 <event_phy_upd_ind_prep+0x360>
   34e4c:	6828      	ldr	r0, [r5, #0]
   34e4e:	2800      	cmp	r0, #0
   34e50:	f000 80a0 	beq.w	34f94 <event_phy_upd_ind_prep+0x360>
				conn->llcp_rx = rx->hdr.link->mem;
   34e54:	6842      	ldr	r2, [r0, #4]
   34e56:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   34e5a:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   34e5c:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   34e5e:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   34e60:	f7fe f88e 	bl	32f80 <ll_rx_put>
}
   34e64:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   34e68:	f7fe b894 	b.w	32f94 <ll_rx_sched>
		LL_ASSERT(rx && rx->hdr.link);
   34e6c:	4a5f      	ldr	r2, [pc, #380]	; (34fec <event_phy_upd_ind_prep+0x3b8>)
   34e6e:	4960      	ldr	r1, [pc, #384]	; (34ff0 <event_phy_upd_ind_prep+0x3bc>)
   34e70:	4860      	ldr	r0, [pc, #384]	; (34ff4 <event_phy_upd_ind_prep+0x3c0>)
   34e72:	f241 231a 	movw	r3, #4634	; 0x121a
   34e76:	f00d fee9 	bl	42c4c <printk>
   34e7a:	4040      	eors	r0, r0
   34e7c:	f380 8811 	msr	BASEPRI, r0
   34e80:	f04f 0003 	mov.w	r0, #3
   34e84:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   34e86:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   34e88:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   34e8c:	e70f      	b.n	34cae <event_phy_upd_ind_prep+0x7a>
		LL_ASSERT(rx && rx->hdr.link);
   34e8e:	4a57      	ldr	r2, [pc, #348]	; (34fec <event_phy_upd_ind_prep+0x3b8>)
   34e90:	4957      	ldr	r1, [pc, #348]	; (34ff0 <event_phy_upd_ind_prep+0x3bc>)
   34e92:	4858      	ldr	r0, [pc, #352]	; (34ff4 <event_phy_upd_ind_prep+0x3c0>)
   34e94:	f241 2349 	movw	r3, #4681	; 0x1249
   34e98:	f00d fed8 	bl	42c4c <printk>
   34e9c:	4040      	eors	r0, r0
   34e9e:	f380 8811 	msr	BASEPRI, r0
   34ea2:	f04f 0003 	mov.w	r0, #3
   34ea6:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   34ea8:	6828      	ldr	r0, [r5, #0]
   34eaa:	e725      	b.n	34cf8 <event_phy_upd_ind_prep+0xc4>
			rx = ll_pdu_rx_alloc();
   34eac:	f7fe f896 	bl	32fdc <ll_pdu_rx_alloc>
			if (!rx) {
   34eb0:	4605      	mov	r5, r0
   34eb2:	2800      	cmp	r0, #0
   34eb4:	f43f af5a 	beq.w	34d6c <event_phy_upd_ind_prep+0x138>
			rx->hdr.link->mem = conn->llcp_rx;
   34eb8:	6803      	ldr	r3, [r0, #0]
   34eba:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   34ebe:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   34ec0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   34ec4:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   34ec8:	2b00      	cmp	r3, #0
   34eca:	da02      	bge.n	34ed2 <event_phy_upd_ind_prep+0x29e>
   34ecc:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   34ed0:	b91b      	cbnz	r3, 34eda <event_phy_upd_ind_prep+0x2a6>
		if (conn->llcp.phy_upd_ind.tx) {
   34ed2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   34ed6:	461a      	mov	r2, r3
   34ed8:	e6c4      	b.n	34c64 <event_phy_upd_ind_prep+0x30>
   34eda:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			conn->periph.llcp_type = LLCP_NONE;
   34ede:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
		if (conn->llcp.phy_upd_ind.tx) {
   34ee2:	461a      	mov	r2, r3
			conn->periph.llcp_type = LLCP_NONE;
   34ee4:	e6c2      	b.n	34c6c <event_phy_upd_ind_prep+0x38>
							 lll->latency +
   34ee6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   34ee8:	1da9      	adds	r1, r5, #6
   34eea:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   34eec:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   34ef0:	f7fe f874 	bl	32fdc <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   34ef4:	f8d8 3000 	ldr.w	r3, [r8]
   34ef8:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   34efc:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   34efe:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
				rx = ll_pdu_rx_alloc();
   34f02:	f7fe f86b 	bl	32fdc <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   34f06:	6803      	ldr	r3, [r0, #0]
   34f08:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   34f0c:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   34f0e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   34f12:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
				conn->llcp_rx = rx;
   34f16:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   34f1a:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   34f1e:	095b      	lsrs	r3, r3, #5
   34f20:	e756      	b.n	34dd0 <event_phy_upd_ind_prep+0x19c>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   34f22:	2301      	movs	r3, #1
   34f24:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   34f26:	4629      	mov	r1, r5
   34f28:	f7fe f82a 	bl	32f80 <ll_rx_put>
}
   34f2c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   34f30:	f7fe b830 	b.w	32f94 <ll_rx_sched>
		if (!conn->tx_ctrl) {
   34f34:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   34f38:	2a00      	cmp	r2, #0
   34f3a:	f47f af6d 	bne.w	34e18 <event_phy_upd_ind_prep+0x1e4>
			tx->next = conn->tx_head;
   34f3e:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   34f40:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   34f44:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   34f48:	e76e      	b.n	34e28 <event_phy_upd_ind_prep+0x1f4>
				(void)ll_pdu_rx_alloc();
   34f4a:	f7fe f847 	bl	32fdc <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   34f4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   34f50:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   34f54:	231c      	movs	r3, #28
				upd->status = 0U;
   34f56:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   34f5a:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   34f5e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   34f62:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   34f66:	f3c3 0302 	ubfx	r3, r3, #0, #3
   34f6a:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   34f6e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   34f72:	f3c3 0302 	ubfx	r3, r3, #0, #3
   34f76:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   34f7a:	4641      	mov	r1, r8
   34f7c:	f7fe f800 	bl	32f80 <ll_rx_put>
				ll_rx_sched();
   34f80:	f7fe f808 	bl	32f94 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   34f84:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   34f88:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   34f8c:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   34f90:	095b      	lsrs	r3, r3, #5
   34f92:	e71d      	b.n	34dd0 <event_phy_upd_ind_prep+0x19c>
				LL_ASSERT(rx && rx->hdr.link);
   34f94:	4a15      	ldr	r2, [pc, #84]	; (34fec <event_phy_upd_ind_prep+0x3b8>)
   34f96:	4916      	ldr	r1, [pc, #88]	; (34ff0 <event_phy_upd_ind_prep+0x3bc>)
   34f98:	4816      	ldr	r0, [pc, #88]	; (34ff4 <event_phy_upd_ind_prep+0x3c0>)
   34f9a:	f241 232c 	movw	r3, #4652	; 0x122c
   34f9e:	f00d fe55 	bl	42c4c <printk>
   34fa2:	4040      	eors	r0, r0
   34fa4:	f380 8811 	msr	BASEPRI, r0
   34fa8:	f04f 0003 	mov.w	r0, #3
   34fac:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   34fae:	6828      	ldr	r0, [r5, #0]
   34fb0:	e750      	b.n	34e54 <event_phy_upd_ind_prep+0x220>
			conn->tx_data = conn->tx_data->next;
   34fb2:	6819      	ldr	r1, [r3, #0]
   34fb4:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   34fb8:	2a00      	cmp	r2, #0
   34fba:	f47f af2d 	bne.w	34e18 <event_phy_upd_ind_prep+0x1e4>
			tx->next = conn->tx_head->next;
   34fbe:	681a      	ldr	r2, [r3, #0]
   34fc0:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   34fc2:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   34fc4:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   34fc6:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   34fca:	e72d      	b.n	34e28 <event_phy_upd_ind_prep+0x1f4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34fcc:	791a      	ldrb	r2, [r3, #4]
   34fce:	f002 0203 	and.w	r2, r2, #3
   34fd2:	2a03      	cmp	r2, #3
   34fd4:	d002      	beq.n	34fdc <event_phy_upd_ind_prep+0x3a8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   34fd6:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   34fda:	e71d      	b.n	34e18 <event_phy_upd_ind_prep+0x1e4>
	    ((pdu_data_tx->llctrl.opcode !=
   34fdc:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   34fde:	2a03      	cmp	r2, #3
   34fe0:	d0ed      	beq.n	34fbe <event_phy_upd_ind_prep+0x38a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   34fe2:	2a0a      	cmp	r2, #10
   34fe4:	d1f7      	bne.n	34fd6 <event_phy_upd_ind_prep+0x3a2>
   34fe6:	e7ea      	b.n	34fbe <event_phy_upd_ind_prep+0x38a>
   34fe8:	200026c4 	.word	0x200026c4
   34fec:	0004a498 	.word	0x0004a498
   34ff0:	0004a564 	.word	0x0004a564
   34ff4:	0004a024 	.word	0x0004a024

00034ff8 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   34ff8:	4801      	ldr	r0, [pc, #4]	; (35000 <ll_conn_acquire+0x8>)
   34ffa:	f7fa bc65 	b.w	2f8c8 <mem_acquire>
   34ffe:	bf00      	nop
   35000:	2000262c 	.word	0x2000262c

00035004 <ll_conn_release>:
	mem_release(conn, &conn_free);
   35004:	4901      	ldr	r1, [pc, #4]	; (3500c <ll_conn_release+0x8>)
   35006:	f7fa bc79 	b.w	2f8fc <mem_release>
   3500a:	bf00      	nop
   3500c:	2000262c 	.word	0x2000262c

00035010 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   35010:	4902      	ldr	r1, [pc, #8]	; (3501c <ll_conn_handle_get+0xc>)
   35012:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   35016:	f7fa bc8d 	b.w	2f934 <mem_index_get>
   3501a:	bf00      	nop
   3501c:	20001538 	.word	0x20001538

00035020 <ll_conn_get>:
{
   35020:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35022:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35026:	4801      	ldr	r0, [pc, #4]	; (3502c <ll_conn_get+0xc>)
   35028:	f7fa bc80 	b.w	2f92c <mem_get>
   3502c:	20001538 	.word	0x20001538

00035030 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35030:	b958      	cbnz	r0, 3504a <ll_connected_get+0x1a>
{
   35032:	b508      	push	{r3, lr}
   35034:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35036:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3503a:	4805      	ldr	r0, [pc, #20]	; (35050 <ll_connected_get+0x20>)
   3503c:	f7fa fc76 	bl	2f92c <mem_get>
	if (conn->lll.handle != handle) {
   35040:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   35042:	b903      	cbnz	r3, 35046 <ll_connected_get+0x16>
}
   35044:	bd08      	pop	{r3, pc}
		return NULL;
   35046:	2000      	movs	r0, #0
}
   35048:	bd08      	pop	{r3, pc}
		return NULL;
   3504a:	2000      	movs	r0, #0
}
   3504c:	4770      	bx	lr
   3504e:	bf00      	nop
   35050:	20001538 	.word	0x20001538

00035054 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   35054:	4801      	ldr	r0, [pc, #4]	; (3505c <ll_tx_mem_acquire+0x8>)
   35056:	f7fa bc37 	b.w	2f8c8 <mem_acquire>
   3505a:	bf00      	nop
   3505c:	20002654 	.word	0x20002654

00035060 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   35060:	4901      	ldr	r1, [pc, #4]	; (35068 <ll_tx_mem_release+0x8>)
   35062:	f7fa bc4b 	b.w	2f8fc <mem_release>
   35066:	bf00      	nop
   35068:	20002654 	.word	0x20002654

0003506c <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3506c:	2800      	cmp	r0, #0
   3506e:	d13e      	bne.n	350ee <ll_tx_mem_enqueue+0x82>
{
   35070:	b570      	push	{r4, r5, r6, lr}
   35072:	4602      	mov	r2, r0
   35074:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35076:	481f      	ldr	r0, [pc, #124]	; (350f4 <ll_tx_mem_enqueue+0x88>)
   35078:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3507c:	f7fa fc56 	bl	2f92c <mem_get>
	if (conn->lll.handle != handle) {
   35080:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35082:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   35084:	bb6a      	cbnz	r2, 350e2 <ll_tx_mem_enqueue+0x76>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   35086:	4c1c      	ldr	r4, [pc, #112]	; (350f8 <ll_tx_mem_enqueue+0x8c>)
   35088:	f894 c003 	ldrb.w	ip, [r4, #3]
	if (last == count) {
   3508c:	7861      	ldrb	r1, [r4, #1]
   3508e:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   35090:	f10c 0301 	add.w	r3, ip, #1
   35094:	b2db      	uxtb	r3, r3
		last = 0U;
   35096:	4299      	cmp	r1, r3
   35098:	bf08      	it	eq
   3509a:	2300      	moveq	r3, #0
   3509c:	78a1      	ldrb	r1, [r4, #2]
	if (last == first) {
   3509e:	4299      	cmp	r1, r3
   350a0:	d022      	beq.n	350e8 <ll_tx_mem_enqueue+0x7c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   350a2:	fb1c fc00 	smulbb	ip, ip, r0
   350a6:	1d20      	adds	r0, r4, #4
	lll_tx->handle = handle;
   350a8:	f820 200c 	strh.w	r2, [r0, ip]
   350ac:	4460      	add	r0, ip
	lll_tx->node = tx;
   350ae:	6046      	str	r6, [r0, #4]
	*last = idx; /* Commit: Update write index */
   350b0:	70e3      	strb	r3, [r4, #3]
   350b2:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   350b4:	b92b      	cbnz	r3, 350c2 <ll_tx_mem_enqueue+0x56>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   350b6:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   350ba:	2b00      	cmp	r3, #0
   350bc:	db0b      	blt.n	350d6 <ll_tx_mem_enqueue+0x6a>
	return 0;
   350be:	2000      	movs	r0, #0
}
   350c0:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   350c2:	4b0e      	ldr	r3, [pc, #56]	; (350fc <ll_tx_mem_enqueue+0x90>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   350c4:	2101      	movs	r1, #1
   350c6:	2003      	movs	r0, #3
		mfy.param = conn;
   350c8:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   350ca:	f7fa fcd7 	bl	2fa7c <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   350ce:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   350d2:	2b00      	cmp	r3, #0
   350d4:	daf3      	bge.n	350be <ll_tx_mem_enqueue+0x52>
		ull_periph_latency_cancel(conn, handle);
   350d6:	4628      	mov	r0, r5
   350d8:	2100      	movs	r1, #0
   350da:	f003 ff6b 	bl	38fb4 <ull_periph_latency_cancel>
	return 0;
   350de:	2000      	movs	r0, #0
}
   350e0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   350e2:	f06f 0015 	mvn.w	r0, #21
}
   350e6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   350e8:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   350ec:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   350ee:	f06f 0015 	mvn.w	r0, #21
}
   350f2:	4770      	bx	lr
   350f4:	20001538 	.word	0x20001538
   350f8:	20000734 	.word	0x20000734
   350fc:	20000788 	.word	0x20000788

00035100 <ll_conn_update>:
{
   35100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35104:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   35108:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   3510c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   35110:	2800      	cmp	r0, #0
   35112:	d155      	bne.n	351c0 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35114:	460c      	mov	r4, r1
   35116:	4615      	mov	r5, r2
   35118:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3511c:	4602      	mov	r2, r0
   3511e:	4841      	ldr	r0, [pc, #260]	; (35224 <ll_conn_update+0x124>)
   35120:	461e      	mov	r6, r3
   35122:	f7fa fc03 	bl	2f92c <mem_get>
   35126:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   35128:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   3512a:	2800      	cmp	r0, #0
   3512c:	d148      	bne.n	351c0 <ll_conn_update+0xc0>
	if (!cmd) {
   3512e:	bb3c      	cbnz	r4, 35180 <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   35130:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
   35134:	0699      	lsls	r1, r3, #26
   35136:	d44a      	bmi.n	351ce <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   35138:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   3513c:	07da      	lsls	r2, r3, #31
   3513e:	d442      	bmi.n	351c6 <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
   35140:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   35144:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   35148:	4293      	cmp	r3, r2
   3514a:	d136      	bne.n	351ba <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   3514c:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   35150:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   35154:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   35158:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
   3515c:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   3515e:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   35162:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   35164:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
   35168:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   3516c:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   35170:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
   35174:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   35178:	db4e      	blt.n	35218 <ll_conn_update+0x118>
	return 0;
   3517a:	2000      	movs	r0, #0
}
   3517c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   35180:	3c01      	subs	r4, #1
		if (cmd) {
   35182:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   35186:	d0db      	beq.n	35140 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   35188:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   3518c:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   35190:	429a      	cmp	r2, r3
   35192:	d012      	beq.n	351ba <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   35194:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   35198:	f003 020f 	and.w	r2, r3, #15
   3519c:	2a03      	cmp	r2, #3
   3519e:	d10c      	bne.n	351ba <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   351a0:	f004 040f 	and.w	r4, r4, #15
   351a4:	f023 031f 	bic.w	r3, r3, #31
   351a8:	f044 0410 	orr.w	r4, r4, #16
   351ac:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   351ae:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
   351b2:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
   351b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   351ba:	200c      	movs	r0, #12
}
   351bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   351c0:	2002      	movs	r0, #2
}
   351c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   351c6:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   351ca:	079b      	lsls	r3, r3, #30
   351cc:	d4b8      	bmi.n	35140 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   351ce:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   351d2:	2b00      	cmp	r3, #0
   351d4:	db1e      	blt.n	35214 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   351d6:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
   351da:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
   351de:	4293      	cmp	r3, r2
   351e0:	d1eb      	bne.n	351ba <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   351e2:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   351e6:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
   351ea:	3301      	adds	r3, #1
   351ec:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   351f0:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   351f4:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   351f6:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   351fa:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   351fc:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   35200:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   35204:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   35208:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   3520c:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
   35210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   35214:	201a      	movs	r0, #26
   35216:	e7d1      	b.n	351bc <ll_conn_update+0xbc>
				ull_periph_latency_cancel(conn, handle);
   35218:	4660      	mov	r0, ip
   3521a:	2100      	movs	r1, #0
   3521c:	f003 feca 	bl	38fb4 <ull_periph_latency_cancel>
	return 0;
   35220:	2000      	movs	r0, #0
   35222:	e7cb      	b.n	351bc <ll_conn_update+0xbc>
   35224:	20001538 	.word	0x20001538

00035228 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35228:	b9d0      	cbnz	r0, 35260 <ll_chm_get+0x38>
{
   3522a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3522c:	4602      	mov	r2, r0
   3522e:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35230:	480c      	ldr	r0, [pc, #48]	; (35264 <ll_chm_get+0x3c>)
   35232:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35236:	f7fa fb79 	bl	2f92c <mem_get>
	if (conn->lll.handle != handle) {
   3523a:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3523c:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   3523e:	b96e      	cbnz	r6, 3525c <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   35240:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   35244:	f884 61d8 	strb.w	r6, [r4, #472]	; 0x1d8
		memcpy(chm, conn->lll.data_chan_map,
   35248:	2205      	movs	r2, #5
   3524a:	4639      	mov	r1, r7
   3524c:	4628      	mov	r0, r5
   3524e:	f00f fdd8 	bl	44e02 <memcpy>
	} while (conn->chm_updated);
   35252:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
   35256:	2800      	cmp	r0, #0
   35258:	d1f4      	bne.n	35244 <ll_chm_get+0x1c>
}
   3525a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3525c:	2002      	movs	r0, #2
}
   3525e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35260:	2002      	movs	r0, #2
}
   35262:	4770      	bx	lr
   35264:	20001538 	.word	0x20001538

00035268 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35268:	bb70      	cbnz	r0, 352c8 <ll_terminate_ind_send+0x60>
{
   3526a:	b510      	push	{r4, lr}
   3526c:	4602      	mov	r2, r0
   3526e:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35270:	4819      	ldr	r0, [pc, #100]	; (352d8 <ll_terminate_ind_send+0x70>)
   35272:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35276:	f7fa fb59 	bl	2f92c <mem_get>
	if (conn->lll.handle != handle) {
   3527a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3527c:	bb13      	cbnz	r3, 352c4 <ll_terminate_ind_send+0x5c>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   3527e:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   35282:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   35286:	429a      	cmp	r2, r3
   35288:	d11a      	bne.n	352c0 <ll_terminate_ind_send+0x58>
	switch (reason) {
   3528a:	2c1a      	cmp	r4, #26
   3528c:	d803      	bhi.n	35296 <ll_terminate_ind_send+0x2e>
   3528e:	2c04      	cmp	r4, #4
   35290:	d810      	bhi.n	352b4 <ll_terminate_ind_send+0x4c>
   35292:	2012      	movs	r0, #18
}
   35294:	bd10      	pop	{r4, pc}
	switch (reason) {
   35296:	2c29      	cmp	r4, #41	; 0x29
   35298:	d001      	beq.n	3529e <ll_terminate_ind_send+0x36>
   3529a:	2c3b      	cmp	r4, #59	; 0x3b
   3529c:	d1f9      	bne.n	35292 <ll_terminate_ind_send+0x2a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3529e:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   352a2:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   352a6:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   352a8:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   352aa:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   352ae:	db0d      	blt.n	352cc <ll_terminate_ind_send+0x64>
	return 0;
   352b0:	2000      	movs	r0, #0
}
   352b2:	bd10      	pop	{r4, pc}
	switch (reason) {
   352b4:	4a09      	ldr	r2, [pc, #36]	; (352dc <ll_terminate_ind_send+0x74>)
   352b6:	40e2      	lsrs	r2, r4
   352b8:	07d2      	lsls	r2, r2, #31
   352ba:	d4f0      	bmi.n	3529e <ll_terminate_ind_send+0x36>
   352bc:	2012      	movs	r0, #18
   352be:	e7e9      	b.n	35294 <ll_terminate_ind_send+0x2c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   352c0:	200c      	movs	r0, #12
}
   352c2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   352c4:	2002      	movs	r0, #2
}
   352c6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   352c8:	2002      	movs	r0, #2
}
   352ca:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   352cc:	2100      	movs	r1, #0
   352ce:	f003 fe71 	bl	38fb4 <ull_periph_latency_cancel>
	return 0;
   352d2:	2000      	movs	r0, #0
}
   352d4:	bd10      	pop	{r4, pc}
   352d6:	bf00      	nop
   352d8:	20001538 	.word	0x20001538
   352dc:	04380020 	.word	0x04380020

000352e0 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   352e0:	bb00      	cbnz	r0, 35324 <ll_feature_req_send+0x44>
{
   352e2:	b510      	push	{r4, lr}
   352e4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   352e6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   352ea:	480f      	ldr	r0, [pc, #60]	; (35328 <ll_feature_req_send+0x48>)
   352ec:	f7fa fb1e 	bl	2f92c <mem_get>
	if (conn->lll.handle != handle) {
   352f0:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   352f2:	b984      	cbnz	r4, 35316 <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   352f4:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   352f8:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   352fc:	428a      	cmp	r2, r1
   352fe:	d108      	bne.n	35312 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   35300:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   35304:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   35306:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   35308:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3530c:	db05      	blt.n	3531a <ll_feature_req_send+0x3a>
	return 0;
   3530e:	4620      	mov	r0, r4
}
   35310:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   35312:	200c      	movs	r0, #12
}
   35314:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35316:	2002      	movs	r0, #2
}
   35318:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   3531a:	4621      	mov	r1, r4
   3531c:	f003 fe4a 	bl	38fb4 <ull_periph_latency_cancel>
	return 0;
   35320:	4620      	mov	r0, r4
}
   35322:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35324:	2002      	movs	r0, #2
}
   35326:	4770      	bx	lr
   35328:	20001538 	.word	0x20001538

0003532c <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3532c:	bb00      	cbnz	r0, 35370 <ll_version_ind_send+0x44>
{
   3532e:	b510      	push	{r4, lr}
   35330:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35332:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35336:	480f      	ldr	r0, [pc, #60]	; (35374 <ll_version_ind_send+0x48>)
   35338:	f7fa faf8 	bl	2f92c <mem_get>
	if (conn->lll.handle != handle) {
   3533c:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   3533e:	b984      	cbnz	r4, 35362 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   35340:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   35344:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   35348:	428a      	cmp	r2, r1
   3534a:	d108      	bne.n	3535e <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3534c:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   35350:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35352:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   35354:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35358:	db05      	blt.n	35366 <ll_version_ind_send+0x3a>
	return 0;
   3535a:	4620      	mov	r0, r4
}
   3535c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3535e:	200c      	movs	r0, #12
}
   35360:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35362:	2002      	movs	r0, #2
}
   35364:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   35366:	4621      	mov	r1, r4
   35368:	f003 fe24 	bl	38fb4 <ull_periph_latency_cancel>
	return 0;
   3536c:	4620      	mov	r0, r4
}
   3536e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35370:	2002      	movs	r0, #2
}
   35372:	4770      	bx	lr
   35374:	20001538 	.word	0x20001538

00035378 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35378:	2800      	cmp	r0, #0
   3537a:	d14c      	bne.n	35416 <ll_length_req_send+0x9e>
{
   3537c:	b538      	push	{r3, r4, r5, lr}
   3537e:	460d      	mov	r5, r1
   35380:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   35382:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35386:	4602      	mov	r2, r0
   35388:	4824      	ldr	r0, [pc, #144]	; (3541c <ll_length_req_send+0xa4>)
   3538a:	f7fa facf 	bl	2f92c <mem_get>
	if (conn->lll.handle != handle) {
   3538e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   35390:	bbc3      	cbnz	r3, 35404 <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   35392:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   35396:	071a      	lsls	r2, r3, #28
   35398:	d432      	bmi.n	35400 <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   3539a:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   3539e:	07d1      	lsls	r1, r2, #31
   353a0:	d503      	bpl.n	353aa <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   353a2:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   353a6:	0692      	lsls	r2, r2, #26
   353a8:	d52a      	bpl.n	35400 <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   353aa:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   353ae:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   353b2:	428a      	cmp	r2, r1
   353b4:	d011      	beq.n	353da <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   353b6:	f003 0307 	and.w	r3, r3, #7
   353ba:	2b03      	cmp	r3, #3
   353bc:	d004      	beq.n	353c8 <ll_length_req_send+0x50>
   353be:	3303      	adds	r3, #3
   353c0:	f003 0307 	and.w	r3, r3, #7
   353c4:	2b01      	cmp	r3, #1
   353c6:	d824      	bhi.n	35412 <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   353c8:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   353cc:	bb0b      	cbnz	r3, 35412 <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   353ce:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   353d2:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   353d6:	4618      	mov	r0, r3
}
   353d8:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   353da:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
   353de:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   353e2:	f36f 0302 	bfc	r3, #0, #3
   353e6:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   353ea:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
   353ee:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
   353f2:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   353f4:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   353f6:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   353fa:	db05      	blt.n	35408 <ll_length_req_send+0x90>
	return 0;
   353fc:	2000      	movs	r0, #0
}
   353fe:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   35400:	201a      	movs	r0, #26
}
   35402:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35404:	2002      	movs	r0, #2
}
   35406:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
   35408:	2100      	movs	r1, #0
   3540a:	f003 fdd3 	bl	38fb4 <ull_periph_latency_cancel>
	return 0;
   3540e:	2000      	movs	r0, #0
}
   35410:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   35412:	200c      	movs	r0, #12
}
   35414:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35416:	2002      	movs	r0, #2
}
   35418:	4770      	bx	lr
   3541a:	bf00      	nop
   3541c:	20001538 	.word	0x20001538

00035420 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   35420:	4a03      	ldr	r2, [pc, #12]	; (35430 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   35422:	4b04      	ldr	r3, [pc, #16]	; (35434 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   35424:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   35426:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   35428:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   3542a:	800b      	strh	r3, [r1, #0]
}
   3542c:	4770      	bx	lr
   3542e:	bf00      	nop
   35430:	20003b62 	.word	0x20003b62
   35434:	20003b64 	.word	0x20003b64

00035438 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   35438:	4a02      	ldr	r2, [pc, #8]	; (35444 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   3543a:	4b03      	ldr	r3, [pc, #12]	; (35448 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   3543c:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   3543e:	8019      	strh	r1, [r3, #0]
}
   35440:	2000      	movs	r0, #0
   35442:	4770      	bx	lr
   35444:	20003b62 	.word	0x20003b62
   35448:	20003b64 	.word	0x20003b64

0003544c <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   3544c:	f04f 0c1b 	mov.w	ip, #27
   35450:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   35454:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   35458:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3545c:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3545e:	8018      	strh	r0, [r3, #0]
}
   35460:	4770      	bx	lr
   35462:	bf00      	nop

00035464 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35464:	b9c0      	cbnz	r0, 35498 <ll_phy_get+0x34>
{
   35466:	b538      	push	{r3, r4, r5, lr}
   35468:	460d      	mov	r5, r1
   3546a:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3546c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35470:	4602      	mov	r2, r0
   35472:	480a      	ldr	r0, [pc, #40]	; (3549c <ll_phy_get+0x38>)
   35474:	f7fa fa5a 	bl	2f92c <mem_get>
   35478:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   3547a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   3547c:	b950      	cbnz	r0, 35494 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   3547e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   35482:	f3c2 0202 	ubfx	r2, r2, #0, #3
   35486:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   35488:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   3548c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   35490:	7023      	strb	r3, [r4, #0]
}
   35492:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35494:	2002      	movs	r0, #2
}
   35496:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35498:	2002      	movs	r0, #2
}
   3549a:	4770      	bx	lr
   3549c:	20001538 	.word	0x20001538

000354a0 <ll_phy_default_set>:
	default_phy_tx = tx;
   354a0:	4a02      	ldr	r2, [pc, #8]	; (354ac <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   354a2:	4b03      	ldr	r3, [pc, #12]	; (354b0 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   354a4:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   354a6:	7019      	strb	r1, [r3, #0]
}
   354a8:	2000      	movs	r0, #0
   354aa:	4770      	bx	lr
   354ac:	20003c6a 	.word	0x20003c6a
   354b0:	20003c69 	.word	0x20003c69

000354b4 <ll_phy_req_send>:
{
   354b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   354b6:	2800      	cmp	r0, #0
   354b8:	d143      	bne.n	35542 <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   354ba:	460c      	mov	r4, r1
   354bc:	4616      	mov	r6, r2
   354be:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   354c2:	4602      	mov	r2, r0
   354c4:	4823      	ldr	r0, [pc, #140]	; (35554 <ll_phy_req_send+0xa0>)
   354c6:	461f      	mov	r7, r3
   354c8:	f7fa fa30 	bl	2f92c <mem_get>
	if (conn->lll.handle != handle) {
   354cc:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   354ce:	bbc3      	cbnz	r3, 35542 <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   354d0:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
   354d4:	f015 0508 	ands.w	r5, r5, #8
   354d8:	d130      	bne.n	3553c <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   354da:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   354de:	07db      	lsls	r3, r3, #31
   354e0:	d504      	bpl.n	354ec <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   354e2:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   354e6:	f413 6f10 	tst.w	r3, #2304	; 0x900
   354ea:	d027      	beq.n	3553c <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   354ec:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   354f0:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
   354f4:	4299      	cmp	r1, r3
   354f6:	d11e      	bne.n	35536 <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   354f8:	f004 0407 	and.w	r4, r4, #7
   354fc:	00a4      	lsls	r4, r4, #2
   354fe:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   35502:	f007 0707 	and.w	r7, r7, #7
   35506:	ea44 1347 	orr.w	r3, r4, r7, lsl #5
   3550a:	f006 0601 	and.w	r6, r6, #1
   3550e:	ea43 2246 	orr.w	r2, r3, r6, lsl #9
   35512:	f8b0 31be 	ldrh.w	r3, [r0, #446]	; 0x1be
   35516:	f423 63df 	bic.w	r3, r3, #1784	; 0x6f8
   3551a:	f023 0307 	bic.w	r3, r3, #7
   3551e:	431a      	orrs	r2, r3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35520:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   35524:	f8a0 21be 	strh.w	r2, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
   35528:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3552a:	2b00      	cmp	r3, #0
	conn->llcp_phy.req++;
   3552c:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   35530:	db0a      	blt.n	35548 <ll_phy_req_send+0x94>
}
   35532:	4628      	mov	r0, r5
   35534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   35536:	250c      	movs	r5, #12
}
   35538:	4628      	mov	r0, r5
   3553a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3553c:	251a      	movs	r5, #26
}
   3553e:	4628      	mov	r0, r5
   35540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35542:	2502      	movs	r5, #2
}
   35544:	4628      	mov	r0, r5
   35546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
   35548:	2100      	movs	r1, #0
   3554a:	f003 fd33 	bl	38fb4 <ull_periph_latency_cancel>
}
   3554e:	4628      	mov	r0, r5
   35550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35552:	bf00      	nop
   35554:	20001538 	.word	0x20001538

00035558 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   35558:	b9d8      	cbnz	r0, 35592 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3555a:	4602      	mov	r2, r0
{
   3555c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3555e:	480e      	ldr	r0, [pc, #56]	; (35598 <ll_apto_get+0x40>)
   35560:	460c      	mov	r4, r1
   35562:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   35566:	f7fa f9e1 	bl	2f92c <mem_get>
   3556a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   3556c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   3556e:	b970      	cbnz	r0, 3558e <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   35570:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
   35574:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   35576:	fb02 f303 	mul.w	r3, r2, r3
   3557a:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   3557e:	4a07      	ldr	r2, [pc, #28]	; (3559c <ll_apto_get+0x44>)
   35580:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   35584:	fba2 2303 	umull	r2, r3, r2, r3
   35588:	099b      	lsrs	r3, r3, #6
   3558a:	8023      	strh	r3, [r4, #0]
}
   3558c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3558e:	2002      	movs	r0, #2
}
   35590:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35592:	2002      	movs	r0, #2
}
   35594:	4770      	bx	lr
   35596:	bf00      	nop
   35598:	20001538 	.word	0x20001538
   3559c:	10624dd3 	.word	0x10624dd3

000355a0 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   355a0:	b9d8      	cbnz	r0, 355da <ll_apto_set+0x3a>
{
   355a2:	b510      	push	{r4, lr}
   355a4:	4602      	mov	r2, r0
   355a6:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   355a8:	480d      	ldr	r0, [pc, #52]	; (355e0 <ll_apto_set+0x40>)
   355aa:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   355ae:	f7fa f9bd 	bl	2f92c <mem_get>
   355b2:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   355b4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   355b6:	b970      	cbnz	r0, 355d6 <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   355b8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   355ba:	f240 41e2 	movw	r1, #1250	; 0x4e2
   355be:	fb01 f202 	mul.w	r2, r1, r2
   355c2:	f242 7110 	movw	r1, #10000	; 0x2710
   355c6:	fb01 2104 	mla	r1, r1, r4, r2
   355ca:	3901      	subs	r1, #1
   355cc:	fbb1 f1f2 	udiv	r1, r1, r2
   355d0:	f8a3 10ce 	strh.w	r1, [r3, #206]	; 0xce
}
   355d4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   355d6:	2002      	movs	r0, #2
}
   355d8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   355da:	2002      	movs	r0, #2
}
   355dc:	4770      	bx	lr
   355de:	bf00      	nop
   355e0:	20001538 	.word	0x20001538

000355e4 <ull_conn_init>:
	err = init_reset();
   355e4:	f7fe bee4 	b.w	343b0 <init_reset>

000355e8 <ull_conn_reset>:
{
   355e8:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   355ea:	2200      	movs	r2, #0
   355ec:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   355f0:	4815      	ldr	r0, [pc, #84]	; (35648 <ull_conn_reset+0x60>)
   355f2:	f7fa f99b 	bl	2f92c <mem_get>
   355f6:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   355f8:	f100 021c 	add.w	r2, r0, #28
   355fc:	4601      	mov	r1, r0
   355fe:	2003      	movs	r0, #3
   35600:	f7fd fdfe 	bl	33200 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   35604:	b108      	cbz	r0, 3560a <ull_conn_reset+0x22>
   35606:	3078      	adds	r0, #120	; 0x78
   35608:	d10f      	bne.n	3562a <ull_conn_reset+0x42>
	MFIFO_INIT(conn_tx);
   3560a:	4810      	ldr	r0, [pc, #64]	; (3564c <ull_conn_reset+0x64>)
	MFIFO_INIT(conn_ack);
   3560c:	4910      	ldr	r1, [pc, #64]	; (35650 <ull_conn_reset+0x68>)
	conn_upd_curr = NULL;
   3560e:	4a11      	ldr	r2, [pc, #68]	; (35654 <ull_conn_reset+0x6c>)
	conn->lll.link_tx_free = NULL;
   35610:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   35612:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
   35616:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   35618:	804b      	strh	r3, [r1, #2]
	conn->lll.handle = LLL_HANDLE_INVALID;
   3561a:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   3561e:	6763      	str	r3, [r4, #116]	; 0x74
}
   35620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   35624:	6013      	str	r3, [r2, #0]
	err = init_reset();
   35626:	f7fe bec3 	b.w	343b0 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   3562a:	4a0b      	ldr	r2, [pc, #44]	; (35658 <ull_conn_reset+0x70>)
   3562c:	490b      	ldr	r1, [pc, #44]	; (3565c <ull_conn_reset+0x74>)
   3562e:	480c      	ldr	r0, [pc, #48]	; (35660 <ull_conn_reset+0x78>)
   35630:	f640 03e3 	movw	r3, #2275	; 0x8e3
   35634:	f00d fb0a 	bl	42c4c <printk>
   35638:	4040      	eors	r0, r0
   3563a:	f380 8811 	msr	BASEPRI, r0
   3563e:	f04f 0003 	mov.w	r0, #3
   35642:	df02      	svc	2
   35644:	e7e1      	b.n	3560a <ull_conn_reset+0x22>
   35646:	bf00      	nop
   35648:	20001538 	.word	0x20001538
   3564c:	20000734 	.word	0x20000734
   35650:	200006f0 	.word	0x200006f0
   35654:	20002630 	.word	0x20002630
   35658:	0004a498 	.word	0x0004a498
   3565c:	0004a5a8 	.word	0x0004a5a8
   35660:	0004a024 	.word	0x0004a024

00035664 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   35664:	4b01      	ldr	r3, [pc, #4]	; (3566c <ull_conn_default_tx_octets_get+0x8>)
}
   35666:	8818      	ldrh	r0, [r3, #0]
   35668:	4770      	bx	lr
   3566a:	bf00      	nop
   3566c:	20003b62 	.word	0x20003b62

00035670 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   35670:	4b01      	ldr	r3, [pc, #4]	; (35678 <ull_conn_default_tx_time_get+0x8>)
}
   35672:	8818      	ldrh	r0, [r3, #0]
   35674:	4770      	bx	lr
   35676:	bf00      	nop
   35678:	20003b64 	.word	0x20003b64

0003567c <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   3567c:	4b01      	ldr	r3, [pc, #4]	; (35684 <ull_conn_default_phy_tx_get+0x8>)
}
   3567e:	7818      	ldrb	r0, [r3, #0]
   35680:	4770      	bx	lr
   35682:	bf00      	nop
   35684:	20003c6a 	.word	0x20003c6a

00035688 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   35688:	4b01      	ldr	r3, [pc, #4]	; (35690 <ull_conn_default_phy_rx_get+0x8>)
}
   3568a:	7818      	ldrb	r0, [r3, #0]
   3568c:	4770      	bx	lr
   3568e:	bf00      	nop
   35690:	20003c69 	.word	0x20003c69

00035694 <ull_conn_setup>:
{
   35694:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   35696:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   35698:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   3569a:	681d      	ldr	r5, [r3, #0]
   3569c:	782b      	ldrb	r3, [r5, #0]
{
   3569e:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   356a0:	b193      	cbz	r3, 356c8 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   356a2:	696b      	ldr	r3, [r5, #20]
   356a4:	b163      	cbz	r3, 356c0 <ull_conn_setup+0x2c>
   356a6:	4a0b      	ldr	r2, [pc, #44]	; (356d4 <ull_conn_setup+0x40>)
   356a8:	490b      	ldr	r1, [pc, #44]	; (356d8 <ull_conn_setup+0x44>)
   356aa:	480c      	ldr	r0, [pc, #48]	; (356dc <ull_conn_setup+0x48>)
   356ac:	f240 33ed 	movw	r3, #1005	; 0x3ed
   356b0:	f00d facc 	bl	42c4c <printk>
   356b4:	4040      	eors	r0, r0
   356b6:	f380 8811 	msr	BASEPRI, r0
   356ba:	f04f 0003 	mov.w	r0, #3
   356be:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   356c0:	4b07      	ldr	r3, [pc, #28]	; (356e0 <ull_conn_setup+0x4c>)
   356c2:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   356c6:	bd38      	pop	{r3, r4, r5, pc}
   356c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   356cc:	4608      	mov	r0, r1
   356ce:	f7ff b873 	b.w	347b8 <conn_setup_adv_scan_disabled_cb>
   356d2:	bf00      	nop
   356d4:	0004a498 	.word	0x0004a498
   356d8:	0004a3d8 	.word	0x0004a3d8
   356dc:	0004a024 	.word	0x0004a024
   356e0:	000347b9 	.word	0x000347b9

000356e4 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   356e4:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   356e6:	88da      	ldrh	r2, [r3, #6]
   356e8:	2a00      	cmp	r2, #0
   356ea:	f040 80c1 	bne.w	35870 <ull_conn_rx+0x18c>
{
   356ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   356f2:	460e      	mov	r6, r1
   356f4:	b085      	sub	sp, #20
   356f6:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   356f8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   356fc:	48ad      	ldr	r0, [pc, #692]	; (359b4 <ull_conn_rx+0x2d0>)
   356fe:	f7fa f915 	bl	2f92c <mem_get>
   35702:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   35704:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   35706:	2800      	cmp	r0, #0
   35708:	f040 80ae 	bne.w	35868 <ull_conn_rx+0x184>
	pdu_rx = (void *)(*rx)->pdu;
   3570c:	6835      	ldr	r5, [r6, #0]
	switch (pdu_rx->ll_id) {
   3570e:	7f2a      	ldrb	r2, [r5, #28]
   35710:	f002 0203 	and.w	r2, r2, #3
   35714:	2a03      	cmp	r2, #3
   35716:	d123      	bne.n	35760 <ull_conn_rx+0x7c>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   35718:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	opcode = pdu_rx->llctrl.opcode;
   3571c:	f895 a01f 	ldrb.w	sl, [r5, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   35720:	07d3      	lsls	r3, r2, #31
	pdu_rx = (void *)(*rx)->pdu;
   35722:	f105 011c 	add.w	r1, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   35726:	d535      	bpl.n	35794 <ull_conn_rx+0xb0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   35728:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3572c:	2b00      	cmp	r3, #0
   3572e:	f2c0 8581 	blt.w	36234 <ull_conn_rx+0xb50>
	return (!conn->lll.role &&
   35732:	0750      	lsls	r0, r2, #29
   35734:	f100 80a0 	bmi.w	35878 <ull_conn_rx+0x194>
		((!conn->llcp_enc.refresh &&
   35738:	f1ba 0f02 	cmp.w	sl, #2
   3573c:	f000 82b6 	beq.w	35cac <ull_conn_rx+0x5c8>
   35740:	f1ba 0f11 	cmp.w	sl, #17
   35744:	d805      	bhi.n	35752 <ull_conn_rx+0x6e>
   35746:	489c      	ldr	r0, [pc, #624]	; (359b8 <ull_conn_rx+0x2d4>)
   35748:	fa20 f00a 	lsr.w	r0, r0, sl
   3574c:	07c0      	lsls	r0, r0, #31
   3574e:	f100 85bf 	bmi.w	362d0 <ull_conn_rx+0xbec>
		conn->llcp_terminate.reason_final =
   35752:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35754:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   35756:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
   3575a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3575c:	712b      	strb	r3, [r5, #4]
		return 0;
   3575e:	e00a      	b.n	35776 <ull_conn_rx+0x92>
	switch (pdu_rx->ll_id) {
   35760:	b962      	cbnz	r2, 3577c <ull_conn_rx+0x98>
		if (conn->llcp_enc.pause_rx) {
   35762:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   35766:	07db      	lsls	r3, r3, #31
			conn->llcp_terminate.reason_final =
   35768:	bf44      	itt	mi
   3576a:	233d      	movmi	r3, #61	; 0x3d
   3576c:	f884 3143 	strbmi.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35770:	2301      	movs	r3, #1
   35772:	712b      	strb	r3, [r5, #4]
	return 0;
   35774:	2000      	movs	r0, #0
}
   35776:	b005      	add	sp, #20
   35778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   3577c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
   35780:	07d2      	lsls	r2, r2, #31
   35782:	d5f7      	bpl.n	35774 <ull_conn_rx+0x90>
			conn->llcp_terminate.reason_final =
   35784:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35786:	2201      	movs	r2, #1
			conn->llcp_terminate.reason_final =
   35788:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3578c:	712a      	strb	r2, [r5, #4]
}
   3578e:	b005      	add	sp, #20
   35790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   35794:	f1ba 0f18 	cmp.w	sl, #24
   35798:	d81a      	bhi.n	357d0 <ull_conn_rx+0xec>
   3579a:	e8df f01a 	tbh	[pc, sl, lsl #1]
   3579e:	041b      	.short	0x041b
   357a0:	028703e5 	.word	0x028703e5
   357a4:	00190299 	.word	0x00190299
   357a8:	02550019 	.word	0x02550019
   357ac:	036b022b 	.word	0x036b022b
   357b0:	02e601ee 	.word	0x02e601ee
   357b4:	01ae0488 	.word	0x01ae0488
   357b8:	0019016b 	.word	0x0019016b
   357bc:	001901dd 	.word	0x001901dd
   357c0:	01110135 	.word	0x01110135
   357c4:	00970101 	.word	0x00970101
   357c8:	00d00097 	.word	0x00d00097
   357cc:	032f0019 	.word	0x032f0019
	if (conn->common.txn_lock) {
   357d0:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   357d4:	079f      	lsls	r7, r3, #30
   357d6:	d4cb      	bmi.n	35770 <ull_conn_rx+0x8c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   357d8:	4878      	ldr	r0, [pc, #480]	; (359bc <ull_conn_rx+0x2d8>)
   357da:	f7fa f875 	bl	2f8c8 <mem_acquire>
	if (!tx) {
   357de:	2800      	cmp	r0, #0
   357e0:	f000 85b0 	beq.w	36344 <ull_conn_rx+0xc60>
	conn->common.txn_lock = 1U;
   357e4:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   357e8:	f043 0302 	orr.w	r3, r3, #2
   357ec:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   357f0:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   357f2:	f880 a008 	strb.w	sl, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   357f6:	f043 0303 	orr.w	r3, r3, #3
   357fa:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   357fc:	2302      	movs	r3, #2
   357fe:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   35800:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   35804:	2307      	movs	r3, #7
   35806:	71c3      	strb	r3, [r0, #7]
	if (
   35808:	b1f2      	cbz	r2, 35848 <ull_conn_rx+0x164>
	    !conn->llcp_enc.pause_tx &&
   3580a:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   3580e:	079e      	lsls	r6, r3, #30
   35810:	d41a      	bmi.n	35848 <ull_conn_rx+0x164>
	    !conn->llcp_phy.pause_tx &&
   35812:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   35816:	07d9      	lsls	r1, r3, #31
   35818:	d416      	bmi.n	35848 <ull_conn_rx+0x164>
		if (conn->tx_head == conn->tx_data) {
   3581a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   3581e:	429a      	cmp	r2, r3
   35820:	f000 8594 	beq.w	3634c <ull_conn_rx+0xc68>
		} else if (!conn->tx_ctrl) {
   35824:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   35828:	2b00      	cmp	r3, #0
   3582a:	f000 85df 	beq.w	363ec <ull_conn_rx+0xd08>
	tx->next = conn->tx_ctrl_last->next;
   3582e:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   35832:	6813      	ldr	r3, [r2, #0]
   35834:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   35836:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   35838:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   3583a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   3583e:	2a00      	cmp	r2, #0
   35840:	d196      	bne.n	35770 <ull_conn_rx+0x8c>
		conn->tx_data_last = tx;
   35842:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35846:	e793      	b.n	35770 <ull_conn_rx+0x8c>
		if (!conn->tx_ctrl) {
   35848:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   3584c:	2b00      	cmp	r3, #0
   3584e:	f000 8535 	beq.w	362bc <ull_conn_rx+0xbd8>
	tx->next = conn->tx_ctrl_last->next;
   35852:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   35856:	681a      	ldr	r2, [r3, #0]
   35858:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3585a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3585c:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   3585e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   35862:	2a00      	cmp	r2, #0
   35864:	d184      	bne.n	35770 <ull_conn_rx+0x8c>
   35866:	e7ec      	b.n	35842 <ull_conn_rx+0x15e>
	pdu_rx = (void *)(*rx)->pdu;
   35868:	6833      	ldr	r3, [r6, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3586a:	2201      	movs	r2, #1
   3586c:	711a      	strb	r2, [r3, #4]
		return 0;
   3586e:	e781      	b.n	35774 <ull_conn_rx+0x90>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35870:	2201      	movs	r2, #1
   35872:	711a      	strb	r2, [r3, #4]
		return 0;
   35874:	2000      	movs	r0, #0
}
   35876:	4770      	bx	lr
   35878:	f1aa 0e02 	sub.w	lr, sl, #2
   3587c:	fa5f fc8e 	uxtb.w	ip, lr
   35880:	f1bc 0f09 	cmp.w	ip, #9
   35884:	f63f af5c 	bhi.w	35740 <ull_conn_rx+0x5c>
   35888:	f240 2005 	movw	r0, #517	; 0x205
   3588c:	fa20 f00c 	lsr.w	r0, r0, ip
   35890:	07c0      	lsls	r0, r0, #31
   35892:	f57f af58 	bpl.w	35746 <ull_conn_rx+0x62>
	switch (opcode) {
   35896:	f1be 0f09 	cmp.w	lr, #9
   3589a:	d899      	bhi.n	357d0 <ull_conn_rx+0xec>
   3589c:	a001      	add	r0, pc, #4	; (adr r0, 358a4 <ull_conn_rx+0x1c0>)
   3589e:	f850 f02e 	ldr.w	pc, [r0, lr, lsl #2]
   358a2:	bf00      	nop
   358a4:	00035cad 	.word	0x00035cad
   358a8:	00035cd1 	.word	0x00035cd1
   358ac:	000357d1 	.word	0x000357d1
   358b0:	000357d1 	.word	0x000357d1
   358b4:	00035c49 	.word	0x00035c49
   358b8:	00035bf5 	.word	0x00035bf5
   358bc:	00035e79 	.word	0x00035e79
   358c0:	00035b7b 	.word	0x00035b7b
   358c4:	00035d6f 	.word	0x00035d6f
   358c8:	000360af 	.word	0x000360af
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   358cc:	7f6b      	ldrb	r3, [r5, #29]
   358ce:	2b09      	cmp	r3, #9
   358d0:	f47f af7e 	bne.w	357d0 <ull_conn_rx+0xec>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   358d4:	f1ba 0f14 	cmp.w	sl, #20
   358d8:	f000 8596 	beq.w	36408 <ull_conn_rx+0xd24>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   358dc:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   358e0:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   358e4:	f8b4 e05a 	ldrh.w	lr, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   358e8:	f8b4 8058 	ldrh.w	r8, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   358ec:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   358f0:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	if (/* Local idle, and Peer request then complete the Peer procedure
   358f4:	4293      	cmp	r3, r2
   358f6:	f001 8149 	beq.w	36b8c <ull_conn_rx+0x14a8>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   358fa:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   358fe:	2300      	movs	r3, #0
	       tx) ||
   35900:	f001 0107 	and.w	r1, r1, #7
   35904:	2902      	cmp	r1, #2
   35906:	f000 859f 	beq.w	36448 <ull_conn_rx+0xd64>
   3590a:	f895 a01f 	ldrb.w	sl, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   3590e:	f1ba 0f15 	cmp.w	sl, #21
   35912:	f43f af2f 	beq.w	35774 <ull_conn_rx+0x90>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   35916:	4618      	mov	r0, r3
   35918:	4928      	ldr	r1, [pc, #160]	; (359bc <ull_conn_rx+0x2d8>)
   3591a:	f7f9 ffef 	bl	2f8fc <mem_release>
			if (conn->llcp_length.state ==
   3591e:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   35922:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   35926:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   3592a:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   3592e:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   35930:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   35934:	f47f af1e 	bne.w	35774 <ull_conn_rx+0x90>
				return -EBUSY;
   35938:	f06f 000f 	mvn.w	r0, #15
   3593c:	e71b      	b.n	35776 <ull_conn_rx+0x92>
		break;
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

#if defined(CONFIG_BT_CTLR_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   3593e:	7f6b      	ldrb	r3, [r5, #29]
   35940:	2b03      	cmp	r3, #3
   35942:	f47f af45 	bne.w	357d0 <ull_conn_rx+0xec>
			goto ull_conn_rx_unknown_rsp_send;
		}

		if (!conn->lll.role) {
   35946:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3594a:	2b00      	cmp	r3, #0
   3594c:	f2c0 8694 	blt.w	36678 <ull_conn_rx+0xf94>
			if ((conn->llcp_phy.ack !=
   35950:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   35954:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   35958:	4281      	cmp	r1, r0
   3595a:	d007      	beq.n	3596c <ull_conn_rx+0x288>
			    ((conn->llcp_phy.state ==
			      LLCP_PHY_STATE_ACK_WAIT) ||
			     (conn->llcp_phy.state ==
			      LLCP_PHY_STATE_RSP_WAIT) ||
   3595c:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   35960:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   35964:	3a01      	subs	r2, #1
   35966:	2a02      	cmp	r2, #2
   35968:	f240 879d 	bls.w	368a6 <ull_conn_rx+0x11c2>
				nack = reject_ext_ind_send(conn, *rx,
					PDU_DATA_LLCTRL_TYPE_PHY_REQ,
					BT_HCI_ERR_LL_PROC_COLLISION);
#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
#if defined(CONFIG_BT_CTLR_LE_ENC)
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   3596c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   35970:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   35974:	1a9b      	subs	r3, r3, r2
   35976:	f003 0303 	and.w	r3, r3, #3
   3597a:	2b02      	cmp	r3, #2
   3597c:	f000 8776 	beq.w	3686c <ull_conn_rx+0x1188>
				      0x03) == 0x02) &&
				    (conn->llcp_type !=
				     LLCP_ENCRYPTION)) ||
   35980:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   35984:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   35988:	429a      	cmp	r2, r3
   3598a:	f000 8790 	beq.w	368ae <ull_conn_rx+0x11ca>
			} else if (((conn->llcp_req - conn->llcp_ack) &
				    0x03) == 0x02) {
#endif /* !CONFIG_BT_CTLR_LE_ENC */
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */
				/* Different procedure collision */
				nack = reject_ext_ind_send(conn, *rx,
   3598e:	232a      	movs	r3, #42	; 0x2a
   35990:	2216      	movs	r2, #22
			nack = reject_ext_ind_send(conn, *rx,
   35992:	4629      	mov	r1, r5
   35994:	4620      	mov	r0, r4
}
   35996:	b005      	add	sp, #20
   35998:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   3599c:	f7fe bfe4 	b.w	34968 <reject_ext_ind_send>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   359a0:	7f6a      	ldrb	r2, [r5, #29]
   359a2:	2a01      	cmp	r2, #1
   359a4:	f47f af14 	bne.w	357d0 <ull_conn_rx+0xec>
		conn->procedure_expire = 0U;
   359a8:	2300      	movs	r3, #0
   359aa:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   359ae:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   359b0:	712a      	strb	r2, [r5, #4]
		break;
   359b2:	e6e0      	b.n	35776 <ull_conn_rx+0x92>
   359b4:	20001538 	.word	0x20001538
   359b8:	00022060 	.word	0x00022060
   359bc:	200026c4 	.word	0x200026c4
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   359c0:	7f6f      	ldrb	r7, [r5, #29]
   359c2:	2f01      	cmp	r7, #1
   359c4:	f47f af04 	bne.w	357d0 <ull_conn_rx+0xec>
	if (conn->common.txn_lock) {
   359c8:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   359cc:	f013 0602 	ands.w	r6, r3, #2
   359d0:	f040 8748 	bne.w	36864 <ull_conn_rx+0x1180>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   359d4:	48bb      	ldr	r0, [pc, #748]	; (35cc4 <ull_conn_rx+0x5e0>)
   359d6:	f7f9 ff77 	bl	2f8c8 <mem_acquire>
	if (!tx) {
   359da:	4601      	mov	r1, r0
   359dc:	2800      	cmp	r0, #0
   359de:	f000 84b1 	beq.w	36344 <ull_conn_rx+0xc60>
	conn->common.txn_lock = 1U;
   359e2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   359e6:	f043 0302 	orr.w	r3, r3, #2
   359ea:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   359ee:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   359f0:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   359f2:	f043 0303 	orr.w	r3, r3, #3
   359f6:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   359f8:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   359fa:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   359fc:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   359fe:	f7fe fe03 	bl	34608 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35a02:	712f      	strb	r7, [r5, #4]
	return 0;
   35a04:	4630      	mov	r0, r6
   35a06:	e6b6      	b.n	35776 <ull_conn_rx+0x92>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   35a08:	7f6b      	ldrb	r3, [r5, #29]
   35a0a:	2b03      	cmp	r3, #3
   35a0c:	f47f aee0 	bne.w	357d0 <ull_conn_rx+0xec>
	switch (rej_ext_ind->reject_opcode) {
   35a10:	f895 3020 	ldrb.w	r3, [r5, #32]
   35a14:	3b03      	subs	r3, #3
   35a16:	2b13      	cmp	r3, #19
   35a18:	f63f aeaa 	bhi.w	35770 <ull_conn_rx+0x8c>
   35a1c:	a201      	add	r2, pc, #4	; (adr r2, 35a24 <ull_conn_rx+0x340>)
   35a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   35a22:	bf00      	nop
   35a24:	000361a7 	.word	0x000361a7
   35a28:	00035771 	.word	0x00035771
   35a2c:	00035771 	.word	0x00035771
   35a30:	00035771 	.word	0x00035771
   35a34:	00035771 	.word	0x00035771
   35a38:	00035771 	.word	0x00035771
   35a3c:	00035771 	.word	0x00035771
   35a40:	00035771 	.word	0x00035771
   35a44:	00035771 	.word	0x00035771
   35a48:	00035771 	.word	0x00035771
   35a4c:	00035771 	.word	0x00035771
   35a50:	00035771 	.word	0x00035771
   35a54:	0003612f 	.word	0x0003612f
   35a58:	00035771 	.word	0x00035771
   35a5c:	00035771 	.word	0x00035771
   35a60:	00035771 	.word	0x00035771
   35a64:	00035771 	.word	0x00035771
   35a68:	000360f1 	.word	0x000360f1
   35a6c:	00035771 	.word	0x00035771
   35a70:	000361e7 	.word	0x000361e7
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   35a74:	7f6b      	ldrb	r3, [r5, #29]
   35a76:	2b02      	cmp	r3, #2
   35a78:	f47f aeaa 	bne.w	357d0 <ull_conn_rx+0xec>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   35a7c:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   35a80:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   35a84:	4293      	cmp	r3, r2
   35a86:	d004      	beq.n	35a92 <ull_conn_rx+0x3ae>
   35a88:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   35a8c:	2b03      	cmp	r3, #3
   35a8e:	f000 875b 	beq.w	36948 <ull_conn_rx+0x1264>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   35a92:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   35a96:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   35a9a:	4293      	cmp	r3, r2
   35a9c:	f000 85c5 	beq.w	3662a <ull_conn_rx+0xf46>
		rej_ext_ind->error_code = rej_ind->error_code;
   35aa0:	f895 1020 	ldrb.w	r1, [r5, #32]
   35aa4:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   35aa8:	2923      	cmp	r1, #35	; 0x23
   35aaa:	d012      	beq.n	35ad2 <ull_conn_rx+0x3ee>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   35aac:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   35ab0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   35ab4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   35ab8:	f36f 0200 	bfc	r2, #0, #1
   35abc:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   35ac0:	2200      	movs	r2, #0
   35ac2:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   35ac6:	f3c3 0202 	ubfx	r2, r3, #0, #3
   35aca:	f362 1306 	bfi	r3, r2, #4, #3
   35ace:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   35ad2:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   35ad6:	075a      	lsls	r2, r3, #29
   35ad8:	f57f ae4a 	bpl.w	35770 <ull_conn_rx+0x8c>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   35adc:	231c      	movs	r3, #28
   35ade:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   35ae0:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
   35ae2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   35ae6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   35aea:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   35aec:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   35af0:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   35af4:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   35af6:	77ab      	strb	r3, [r5, #30]
	if (err) {
   35af8:	e63d      	b.n	35776 <ull_conn_rx+0x92>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   35afa:	7f6e      	ldrb	r6, [r5, #29]
   35afc:	2e06      	cmp	r6, #6
   35afe:	f47f ae67 	bne.w	357d0 <ull_conn_rx+0xec>
	if (!conn->llcp_version.tx) {
   35b02:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   35b06:	07d9      	lsls	r1, r3, #31
   35b08:	f140 8687 	bpl.w	3681a <ull_conn_rx+0x1136>
	} else if (!conn->llcp_version.rx) {
   35b0c:	f013 0302 	ands.w	r3, r3, #2
   35b10:	f47f ae2e 	bne.w	35770 <ull_conn_rx+0x8c>
		conn->llcp_version.ack = conn->llcp_version.req;
   35b14:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
   35b18:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
   35b1c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   35b20:	f895 3020 	ldrb.w	r3, [r5, #32]
   35b24:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   35b28:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   35b2c:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   35b30:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   35b34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   35b38:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   35b3c:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   35b40:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   35b44:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   35b48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   35b4c:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   35b50:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   35b54:	2000      	movs	r0, #0
   35b56:	e60e      	b.n	35776 <ull_conn_rx+0x92>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   35b58:	7f6b      	ldrb	r3, [r5, #29]
   35b5a:	2b18      	cmp	r3, #24
   35b5c:	f47f ae38 	bne.w	357d0 <ull_conn_rx+0xec>
	return conn_upd_curr && (conn_upd_curr != conn);
   35b60:	f8df a164 	ldr.w	sl, [pc, #356]	; 35cc8 <ull_conn_rx+0x5e4>
   35b64:	f8da 3000 	ldr.w	r3, [sl]
   35b68:	2b00      	cmp	r3, #0
   35b6a:	f000 840e 	beq.w	3638a <ull_conn_rx+0xca6>
   35b6e:	429c      	cmp	r4, r3
   35b70:	f000 840b 	beq.w	3638a <ull_conn_rx+0xca6>
			nack = reject_ext_ind_send(conn, *rx,
   35b74:	2320      	movs	r3, #32
   35b76:	220f      	movs	r2, #15
   35b78:	e70b      	b.n	35992 <ull_conn_rx+0x2ae>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   35b7a:	7f6b      	ldrb	r3, [r5, #29]
   35b7c:	2b09      	cmp	r3, #9
   35b7e:	f47f ae27 	bne.w	357d0 <ull_conn_rx+0xec>
   35b82:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   35b84:	4951      	ldr	r1, [pc, #324]	; (35ccc <ull_conn_rx+0x5e8>)
   35b86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   35b88:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   35b8a:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   35b8e:	400a      	ands	r2, r1
   35b90:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   35b94:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   35b98:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   35b9c:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   35ba0:	401a      	ands	r2, r3
   35ba2:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
   35ba6:	6a2e      	ldr	r6, [r5, #32]
   35ba8:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   35baa:	f7fc fcb9 	bl	32520 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   35bae:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35bb2:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   35bb6:	4a45      	ldr	r2, [pc, #276]	; (35ccc <ull_conn_rx+0x5e8>)
	conn->llcp_feature.features_peer =
   35bb8:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
   35bbc:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   35bc0:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   35bc2:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   35bc6:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   35bc8:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_feature.ack = conn->llcp_feature.req;
   35bcc:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   35bd0:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat_result &= 0xFF;
   35bd4:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   35bd8:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   35bdc:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35bde:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   35be2:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35be4:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   35be8:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
   35bec:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   35bf0:	4618      	mov	r0, r3
}
   35bf2:	e5c0      	b.n	35776 <ull_conn_rx+0x92>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   35bf4:	7f6b      	ldrb	r3, [r5, #29]
   35bf6:	2b02      	cmp	r3, #2
   35bf8:	f47f adea 	bne.w	357d0 <ull_conn_rx+0xec>
		} else if ((conn->llcp_conn_param.ack !=
   35bfc:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
			    conn->llcp_conn_param.req) &&
   35c00:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
		} else if ((conn->llcp_conn_param.ack !=
   35c04:	4293      	cmp	r3, r2
			   (llctrl->unknown_rsp.type ==
   35c06:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   35c0a:	d002      	beq.n	35c12 <ull_conn_rx+0x52e>
			    conn->llcp_conn_param.req) &&
   35c0c:	2b0f      	cmp	r3, #15
   35c0e:	f000 85b9 	beq.w	36784 <ull_conn_rx+0x10a0>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   35c12:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   35c16:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   35c1a:	4291      	cmp	r1, r2
   35c1c:	d002      	beq.n	35c24 <ull_conn_rx+0x540>
   35c1e:	2b14      	cmp	r3, #20
   35c20:	f000 862b 	beq.w	3687a <ull_conn_rx+0x1196>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   35c24:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   35c28:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   35c2c:	4291      	cmp	r1, r2
   35c2e:	d002      	beq.n	35c36 <ull_conn_rx+0x552>
   35c30:	2b16      	cmp	r3, #22
   35c32:	f000 869f 	beq.w	36974 <ull_conn_rx+0x1290>
			switch (llctrl->unknown_rsp.type) {
   35c36:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35c38:	bf04      	itt	eq
   35c3a:	2301      	moveq	r3, #1
   35c3c:	712b      	strbeq	r3, [r5, #4]
		conn->procedure_expire = 0U;
   35c3e:	2300      	movs	r3, #0
   35c40:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   35c44:	4618      	mov	r0, r3
		break;
   35c46:	e596      	b.n	35776 <ull_conn_rx+0x92>
		if ((conn->llcp_req == conn->llcp_ack) ||
   35c48:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   35c4c:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   35c50:	4299      	cmp	r1, r3
   35c52:	f43f adbd 	beq.w	357d0 <ull_conn_rx+0xec>
   35c56:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
   35c5a:	2903      	cmp	r1, #3
   35c5c:	f47f adb8 	bne.w	357d0 <ull_conn_rx+0xec>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   35c60:	7f69      	ldrb	r1, [r5, #29]
   35c62:	2901      	cmp	r1, #1
   35c64:	f47f adb4 	bne.w	357d0 <ull_conn_rx+0xec>
		if (conn->lll.role) {
   35c68:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   35c6c:	2900      	cmp	r1, #0
   35c6e:	f2c0 8663 	blt.w	36938 <ull_conn_rx+0x1254>
			conn->llcp_enc.pause_rx = 0U;
   35c72:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
   35c76:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
   35c7a:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
   35c7c:	f022 0203 	bic.w	r2, r2, #3
   35c80:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   35c84:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   35c88:	0753      	lsls	r3, r2, #29
   35c8a:	f57f ad73 	bpl.w	35774 <ull_conn_rx+0x90>
			conn->llcp_enc.refresh = 0U;
   35c8e:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   35c92:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   35c94:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	int nack = 0;
   35c98:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   35c9a:	712b      	strb	r3, [r5, #4]
   35c9c:	e56b      	b.n	35776 <ull_conn_rx+0x92>
		((!conn->llcp_enc.refresh &&
   35c9e:	f1ba 0f07 	cmp.w	sl, #7
   35ca2:	d0a7      	beq.n	35bf4 <ull_conn_rx+0x510>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   35ca4:	f1ba 0f02 	cmp.w	sl, #2
   35ca8:	f040 82d3 	bne.w	36252 <ull_conn_rx+0xb6e>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   35cac:	7f6b      	ldrb	r3, [r5, #29]
   35cae:	2b02      	cmp	r3, #2
   35cb0:	f47f ad8e 	bne.w	357d0 <ull_conn_rx+0xec>
	conn->llcp_terminate.reason_final =
   35cb4:	f895 2020 	ldrb.w	r2, [r5, #32]
   35cb8:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35cbc:	2301      	movs	r3, #1
	int nack = 0;
   35cbe:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35cc0:	712b      	strb	r3, [r5, #4]
}
   35cc2:	e558      	b.n	35776 <ull_conn_rx+0x92>
   35cc4:	200026c4 	.word	0x200026c4
   35cc8:	20002630 	.word	0x20002630
   35ccc:	087830d0 	.word	0x087830d0
		if (!conn->lll.role ||
   35cd0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   35cd4:	2b00      	cmp	r3, #0
   35cd6:	f6bf ad7b 	bge.w	357d0 <ull_conn_rx+0xec>
   35cda:	7f6b      	ldrb	r3, [r5, #29]
   35cdc:	2b17      	cmp	r3, #23
   35cde:	f47f ad77 	bne.w	357d0 <ull_conn_rx+0xec>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   35ce2:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   35ce6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   35cea:	1a9b      	subs	r3, r3, r2
   35cec:	f003 0303 	and.w	r3, r3, #3
   35cf0:	2b02      	cmp	r3, #2
   35cf2:	f000 875f 	beq.w	36bb4 <ull_conn_rx+0x14d0>
		memcpy(&conn->llcp_enc.rand[0],
   35cf6:	2208      	movs	r2, #8
   35cf8:	f105 0120 	add.w	r1, r5, #32
   35cfc:	f204 1069 	addw	r0, r4, #361	; 0x169
   35d00:	f00f f87f 	bl	44e02 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   35d04:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   35d08:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   35d0c:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   35d10:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   35d14:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35d18:	6831      	ldr	r1, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   35d1a:	2301      	movs	r3, #1
   35d1c:	f363 0201 	bfi	r2, r3, #0, #2
   35d20:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35d24:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   35d26:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   35d2a:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   35d2c:	3b02      	subs	r3, #2
   35d2e:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&conn->llcp.encryption.skd[0],
   35d32:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   35d34:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
   35d38:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   35d3c:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   35d40:	f00f f85f 	bl	44e02 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   35d44:	2204      	movs	r2, #4
   35d46:	f105 0132 	add.w	r1, r5, #50	; 0x32
   35d4a:	f104 0094 	add.w	r0, r4, #148	; 0x94
   35d4e:	f00f f858 	bl	44e02 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   35d52:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   35d56:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   35d5a:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   35d5e:	f043 0301 	orr.w	r3, r3, #1
   35d62:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
   35d66:	2000      	movs	r0, #0
		break;
   35d68:	e505      	b.n	35776 <ull_conn_rx+0x92>
   35d6a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   35d6e:	2b00      	cmp	r3, #0
   35d70:	f6bf ad2e 	bge.w	357d0 <ull_conn_rx+0xec>
   35d74:	7f6e      	ldrb	r6, [r5, #29]
   35d76:	2e01      	cmp	r6, #1
   35d78:	f47f ad2a 	bne.w	357d0 <ull_conn_rx+0xec>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   35d7c:	48d9      	ldr	r0, [pc, #868]	; (360e4 <ull_conn_rx+0xa00>)
   35d7e:	f7f9 fda3 	bl	2f8c8 <mem_acquire>
		if (!tx) {
   35d82:	2800      	cmp	r0, #0
   35d84:	f000 82de 	beq.w	36344 <ull_conn_rx+0xc60>
	conn->llcp_enc.pause_rx = 1U;
   35d88:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   35d8c:	f023 0305 	bic.w	r3, r3, #5
   35d90:	f043 0305 	orr.w	r3, r3, #5
   35d94:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   35d98:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   35d9c:	f36f 03c3 	bfc	r3, #3, #1
   35da0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   35da4:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   35da6:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   35da8:	f043 0303 	orr.w	r3, r3, #3
   35dac:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   35dae:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   35db2:	220b      	movs	r2, #11
   35db4:	71c2      	strb	r2, [r0, #7]
	if (
   35db6:	2b00      	cmp	r3, #0
   35db8:	f000 830f 	beq.w	363da <ull_conn_rx+0xcf6>
	    !conn->llcp_enc.pause_tx &&
   35dbc:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   35dc0:	0797      	lsls	r7, r2, #30
   35dc2:	f100 830a 	bmi.w	363da <ull_conn_rx+0xcf6>
	    !conn->llcp_phy.pause_tx &&
   35dc6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   35dca:	07d6      	lsls	r6, r2, #31
   35dcc:	f100 8305 	bmi.w	363da <ull_conn_rx+0xcf6>
		if (conn->tx_head == conn->tx_data) {
   35dd0:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   35dd4:	4293      	cmp	r3, r2
   35dd6:	f000 87c6 	beq.w	36d66 <ull_conn_rx+0x1682>
		} else if (!conn->tx_ctrl) {
   35dda:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   35dde:	2a00      	cmp	r2, #0
   35de0:	f000 87d0 	beq.w	36d84 <ull_conn_rx+0x16a0>
	tx->next = conn->tx_ctrl_last->next;
   35de4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   35de8:	681a      	ldr	r2, [r3, #0]
   35dea:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   35dec:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   35dee:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   35df0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   35df4:	2b00      	cmp	r3, #0
   35df6:	f47f acbb 	bne.w	35770 <ull_conn_rx+0x8c>
   35dfa:	e522      	b.n	35842 <ull_conn_rx+0x15e>
   35dfc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   35e00:	2b00      	cmp	r3, #0
   35e02:	f6bf ace5 	bge.w	357d0 <ull_conn_rx+0xec>
   35e06:	7f6b      	ldrb	r3, [r5, #29]
   35e08:	2b05      	cmp	r3, #5
   35e0a:	f47f ace1 	bne.w	357d0 <ull_conn_rx+0xec>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   35e0e:	f895 2020 	ldrb.w	r2, [r5, #32]
   35e12:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   35e16:	4313      	orrs	r3, r2
   35e18:	f013 0307 	ands.w	r3, r3, #7
   35e1c:	f040 85ce 	bne.w	369bc <ull_conn_rx+0x12d8>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   35e20:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   35e24:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   35e28:	428a      	cmp	r2, r1
   35e2a:	f43f aca1 	beq.w	35770 <ull_conn_rx+0x8c>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   35e2e:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   35e32:	f002 0203 	and.w	r2, r2, #3
   35e36:	2a02      	cmp	r2, #2
   35e38:	f47f ac9a 	bne.w	35770 <ull_conn_rx+0x8c>
		conn->llcp_phy.pause_tx = 0U;
   35e3c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   35e40:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   35e44:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
   35e48:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   35e4c:	f363 0200 	bfi	r2, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   35e50:	4608      	mov	r0, r1
   35e52:	f361 1006 	bfi	r0, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   35e56:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   35e5a:	f012 0204 	ands.w	r2, r2, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   35e5e:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
   35e62:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
   35e66:	f040 8698 	bne.w	36b9a <ull_conn_rx+0x14b6>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   35e6a:	6833      	ldr	r3, [r6, #0]
   35e6c:	2101      	movs	r1, #1
   35e6e:	7119      	strb	r1, [r3, #4]
	int nack = 0;
   35e70:	4610      	mov	r0, r2
   35e72:	e480      	b.n	35776 <ull_conn_rx+0x92>
   35e74:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   35e78:	2b00      	cmp	r3, #0
   35e7a:	f6bf aca9 	bge.w	357d0 <ull_conn_rx+0xec>
   35e7e:	f895 801d 	ldrb.w	r8, [r5, #29]
   35e82:	f1b8 0f09 	cmp.w	r8, #9
   35e86:	f47f aca3 	bne.w	357d0 <ull_conn_rx+0xec>
	if (conn->common.txn_lock) {
   35e8a:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   35e8e:	f010 0602 	ands.w	r6, r0, #2
   35e92:	f47f ac6d 	bne.w	35770 <ull_conn_rx+0x8c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   35e96:	4893      	ldr	r0, [pc, #588]	; (360e4 <ull_conn_rx+0xa00>)
   35e98:	f7f9 fd16 	bl	2f8c8 <mem_acquire>
	if (!tx) {
   35e9c:	4607      	mov	r7, r0
   35e9e:	2800      	cmp	r0, #0
   35ea0:	f000 8250 	beq.w	36344 <ull_conn_rx+0xc60>
	conn->common.txn_lock = 1U;
   35ea4:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   35ea8:	498f      	ldr	r1, [pc, #572]	; (360e8 <ull_conn_rx+0xa04>)
	conn->common.txn_lock = 1U;
   35eaa:	f043 0302 	orr.w	r3, r3, #2
   35eae:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
   35eb2:	6a2a      	ldr	r2, [r5, #32]
   35eb4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	feat &= LL_FEAT_BIT_MASK;
   35eb6:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   35eb8:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   35ebc:	400a      	ands	r2, r1
   35ebe:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   35ec2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   35ec6:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   35eca:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   35ece:	401a      	ands	r2, r3
   35ed0:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
   35ed4:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
   35ed8:	f8d5 a020 	ldr.w	sl, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   35edc:	f7fc fb20 	bl	32520 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   35ee0:	f009 03ff 	and.w	r3, r9, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35ee4:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_peer =
   35ee8:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	feat &= LL_FEAT_BIT_MASK;
   35eec:	4b7e      	ldr	r3, [pc, #504]	; (360e8 <ull_conn_rx+0xa04>)
   35eee:	ea4a 0303 	orr.w	r3, sl, r3
	feat_result = feat_to_keep & feat_octet0;
   35ef2:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   35ef4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   35ef8:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
   35efc:	ea43 030a 	orr.w	r3, r3, sl
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35f00:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   35f04:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   35f08:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   35f0c:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   35f10:	f043 0301 	orr.w	r3, r3, #1
   35f14:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   35f18:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   35f1a:	f887 8005 	strb.w	r8, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   35f1e:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   35f22:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   35f24:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   35f26:	18b8      	adds	r0, r7, r2
   35f28:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   35f2a:	f887 8007 	strb.w	r8, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   35f2e:	f00e ff73 	bl	44e18 <memset>
	feat = feat_land_octet0(ll_feat_get(),
   35f32:	f7fc faf5 	bl	32520 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   35f36:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	dst[0] = val;
   35f3a:	7339      	strb	r1, [r7, #12]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   35f3c:	f063 03ff 	orn	r3, r3, #255	; 0xff
   35f40:	4003      	ands	r3, r0
	sys_put_le16(val >> 16, &dst[2]);
   35f42:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   35f44:	723b      	strb	r3, [r7, #8]
   35f46:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
   35f48:	f3c3 2307 	ubfx	r3, r3, #8, #8
   35f4c:	0a12      	lsrs	r2, r2, #8
	ctrl_tx_sec_enqueue(conn, tx);
   35f4e:	4620      	mov	r0, r4
   35f50:	727b      	strb	r3, [r7, #9]
   35f52:	737e      	strb	r6, [r7, #13]
	dst[0] = val;
   35f54:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
   35f56:	73fe      	strb	r6, [r7, #15]
   35f58:	72fa      	strb	r2, [r7, #11]
   35f5a:	4639      	mov	r1, r7
   35f5c:	f7fe fb54 	bl	34608 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35f60:	2301      	movs	r3, #1
   35f62:	712b      	strb	r3, [r5, #4]
	return 0;
   35f64:	4630      	mov	r0, r6
   35f66:	e406      	b.n	35776 <ull_conn_rx+0x92>
   35f68:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   35f6c:	2b00      	cmp	r3, #0
   35f6e:	f6bf ac2f 	bge.w	357d0 <ull_conn_rx+0xec>
   35f72:	7f6b      	ldrb	r3, [r5, #29]
   35f74:	2b08      	cmp	r3, #8
   35f76:	f47f ac2b 	bne.w	357d0 <ull_conn_rx+0xec>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   35f7a:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   35f7e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   35f80:	1af3      	subs	r3, r6, r3
   35f82:	041a      	lsls	r2, r3, #16
   35f84:	f100 8591 	bmi.w	36aaa <ull_conn_rx+0x13c6>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   35f88:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   35f8c:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   35f90:	1a9b      	subs	r3, r3, r2
   35f92:	f003 0303 	and.w	r3, r3, #3
   35f96:	2b02      	cmp	r3, #2
   35f98:	f000 858f 	beq.w	36aba <ull_conn_rx+0x13d6>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   35f9c:	2205      	movs	r2, #5
   35f9e:	f105 0120 	add.w	r1, r5, #32
   35fa2:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   35fa6:	f00e ff2c 	bl	44e02 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   35faa:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   35fae:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
   35fb2:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
   35fb6:	f36f 0200 	bfc	r2, #0, #1
   35fba:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   35fbe:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   35fc0:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35fc2:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   35fc4:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   35fc8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	int nack = 0;
   35fcc:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   35fce:	712a      	strb	r2, [r5, #4]
		if (err) {
   35fd0:	f7ff bbd1 	b.w	35776 <ull_conn_rx+0x92>
   35fd4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   35fd8:	2b00      	cmp	r3, #0
   35fda:	f6bf abf9 	bge.w	357d0 <ull_conn_rx+0xec>
   35fde:	7f6b      	ldrb	r3, [r5, #29]
   35fe0:	2b0c      	cmp	r3, #12
   35fe2:	f47f abf5 	bne.w	357d0 <ull_conn_rx+0xec>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   35fe6:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   35fea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   35fec:	1ad3      	subs	r3, r2, r3
   35fee:	0419      	lsls	r1, r3, #16
   35ff0:	f100 855b 	bmi.w	36aaa <ull_conn_rx+0x13c6>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   35ff4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   35ff8:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   35ffc:	1a5b      	subs	r3, r3, r1
   35ffe:	f003 0303 	and.w	r3, r3, #3
   36002:	2b02      	cmp	r3, #2
   36004:	f000 8559 	beq.w	36aba <ull_conn_rx+0x13d6>
	if (!conn_upd_curr) {
   36008:	4b38      	ldr	r3, [pc, #224]	; (360ec <ull_conn_rx+0xa08>)
   3600a:	6819      	ldr	r1, [r3, #0]
   3600c:	2900      	cmp	r1, #0
   3600e:	f000 858b 	beq.w	36b28 <ull_conn_rx+0x1444>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   36012:	f895 3020 	ldrb.w	r3, [r5, #32]
   36016:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   3601a:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   3601e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   36022:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
   36026:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   3602a:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   3602e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   36032:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   36036:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   3603a:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   3603e:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   36042:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   36046:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3604a:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   3604e:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
   36052:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   36056:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3605a:	f023 030f 	bic.w	r3, r3, #15
   3605e:	f043 0308 	orr.w	r3, r3, #8
   36062:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
   36066:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   3606a:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
   3606e:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   36072:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   36074:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
   36078:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
   3607c:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   3607e:	6832      	ldr	r2, [r6, #0]
   36080:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   36082:	6832      	ldr	r2, [r6, #0]
   36084:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   36088:	2300      	movs	r3, #0
   3608a:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   3608c:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   36090:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   36094:	4293      	cmp	r3, r2
   36096:	f43f add2 	beq.w	35c3e <ull_conn_rx+0x55a>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   3609a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   3609e:	f003 030e 	and.w	r3, r3, #14
   360a2:	2b04      	cmp	r3, #4
   360a4:	f47f adcb 	bne.w	35c3e <ull_conn_rx+0x55a>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   360a8:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		if (err) {
   360ac:	e5c7      	b.n	35c3e <ull_conn_rx+0x55a>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   360ae:	7f6e      	ldrb	r6, [r5, #29]
   360b0:	2e01      	cmp	r6, #1
   360b2:	f47f ab8d 	bne.w	357d0 <ull_conn_rx+0xec>
	} else if (!conn->lll.role) {
   360b6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   360ba:	2b00      	cmp	r3, #0
   360bc:	f2c0 815d 	blt.w	3637a <ull_conn_rx+0xc96>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   360c0:	4808      	ldr	r0, [pc, #32]	; (360e4 <ull_conn_rx+0xa00>)
   360c2:	f7f9 fc01 	bl	2f8c8 <mem_acquire>
		if (!tx) {
   360c6:	2800      	cmp	r0, #0
   360c8:	f000 813c 	beq.w	36344 <ull_conn_rx+0xc60>
	conn->llcp_enc.pause_rx = 1U;
   360cc:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   360d0:	f043 0301 	orr.w	r3, r3, #1
   360d4:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   360d8:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   360dc:	f023 0318 	bic.w	r3, r3, #24
   360e0:	e65e      	b.n	35da0 <ull_conn_rx+0x6bc>
   360e2:	bf00      	nop
   360e4:	200026c4 	.word	0x200026c4
   360e8:	087830d0 	.word	0x087830d0
   360ec:	20002630 	.word	0x20002630
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   360f0:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   360f4:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   360f8:	4293      	cmp	r3, r2
   360fa:	f43f ab39 	beq.w	35770 <ull_conn_rx+0x8c>
	conn->procedure_expire = 0U;
   360fe:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   36100:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   36102:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   36106:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3610a:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   3610c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   36110:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   36114:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   36116:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   36118:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3611c:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   3611e:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   36122:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   36124:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   36126:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   36128:	4618      	mov	r0, r3
   3612a:	f7ff bb24 	b.w	35776 <ull_conn_rx+0x92>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3612e:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   36132:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   36136:	429a      	cmp	r2, r3
   36138:	f43f ab1a 	beq.w	35770 <ull_conn_rx+0x8c>
	if (!lll->role && (rej_ext_ind->error_code ==
   3613c:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   36140:	2a00      	cmp	r2, #0
   36142:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   36146:	f2c0 8635 	blt.w	36db4 <ull_conn_rx+0x16d0>
   3614a:	2a1a      	cmp	r2, #26
   3614c:	f000 8680 	beq.w	36e50 <ull_conn_rx+0x176c>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   36150:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   36154:	f002 000f 	and.w	r0, r2, #15
   36158:	2804      	cmp	r0, #4
   3615a:	d106      	bne.n	3616a <ull_conn_rx+0xa86>
	conn_upd_curr = NULL;
   3615c:	48a8      	ldr	r0, [pc, #672]	; (36400 <ull_conn_rx+0xd1c>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3615e:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   36162:	2300      	movs	r3, #0
   36164:	6003      	str	r3, [r0, #0]
		conn->procedure_expire = 0U;
   36166:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   3616a:	06d0      	lsls	r0, r2, #27
   3616c:	f57f ab00 	bpl.w	35770 <ull_conn_rx+0x8c>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   36170:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36172:	07c9      	lsls	r1, r1, #31
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   36174:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36176:	f100 84f1 	bmi.w	36b5c <ull_conn_rx+0x1478>
	cu->status = rej_ext_ind->error_code;
   3617a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   3617e:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   36180:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   36182:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   36186:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   36188:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   3618a:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   3618c:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   36190:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   36194:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   36196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   3619a:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   3619e:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   361a0:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   361a2:	f7ff bae8 	b.w	35776 <ull_conn_rx+0x92>
		if ((conn->llcp_ack != conn->llcp_req) &&
   361a6:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   361aa:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   361ae:	428b      	cmp	r3, r1
   361b0:	f43f aade 	beq.w	35770 <ull_conn_rx+0x8c>
   361b4:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   361b8:	2b03      	cmp	r3, #3
   361ba:	f47f aad9 	bne.w	35770 <ull_conn_rx+0x8c>
	conn->llcp_enc.pause_rx = 0U;
   361be:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   361c2:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   361c6:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   361c8:	f022 0203 	bic.w	r2, r2, #3
   361cc:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   361d0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   361d4:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   361d8:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   361dc:	210d      	movs	r1, #13
   361de:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   361e0:	4618      	mov	r0, r3
   361e2:	f7ff bac8 	b.w	35776 <ull_conn_rx+0x92>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   361e6:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   361ea:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   361ee:	428b      	cmp	r3, r1
   361f0:	f43f aabe 	beq.w	35770 <ull_conn_rx+0x8c>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   361f4:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   361f8:	2a23      	cmp	r2, #35	; 0x23
   361fa:	d012      	beq.n	36222 <ull_conn_rx+0xb3e>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   361fc:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   36200:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   36204:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   36208:	f36f 0100 	bfc	r1, #0, #1
   3620c:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   36210:	2100      	movs	r1, #0
   36212:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   36216:	f3c3 0102 	ubfx	r1, r3, #0, #3
   3621a:	f361 1306 	bfi	r3, r1, #4, #3
   3621e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   36222:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   36226:	075e      	lsls	r6, r3, #29
   36228:	f57f aaa2 	bpl.w	35770 <ull_conn_rx+0x8c>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3622c:	231c      	movs	r3, #28
   3622e:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   36230:	772a      	strb	r2, [r5, #28]
   36232:	e456      	b.n	35ae2 <ull_conn_rx+0x3fe>
	       (conn->lll.role &&
   36234:	0750      	lsls	r0, r2, #29
   36236:	f57f ad32 	bpl.w	35c9e <ull_conn_rx+0x5ba>
		 (conn->llcp_enc.refresh &&
   3623a:	f1ba 0f02 	cmp.w	sl, #2
   3623e:	f43f ad35 	beq.w	35cac <ull_conn_rx+0x5c8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   36242:	f1ba 0f0b 	cmp.w	sl, #11
   36246:	f000 8094 	beq.w	36372 <ull_conn_rx+0xc8e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   3624a:	f1ba 0f03 	cmp.w	sl, #3
   3624e:	f43f ad44 	beq.w	35cda <ull_conn_rx+0x5f6>
   36252:	f1ba 0f11 	cmp.w	sl, #17
   36256:	f63f aa7c 	bhi.w	35752 <ull_conn_rx+0x6e>
   3625a:	486a      	ldr	r0, [pc, #424]	; (36404 <ull_conn_rx+0xd20>)
   3625c:	fa20 f00a 	lsr.w	r0, r0, sl
   36260:	07c0      	lsls	r0, r0, #31
   36262:	f57f aa76 	bpl.w	35752 <ull_conn_rx+0x6e>
	switch (opcode) {
   36266:	f1ba 0f11 	cmp.w	sl, #17
   3626a:	f63f aab1 	bhi.w	357d0 <ull_conn_rx+0xec>
   3626e:	a001      	add	r0, pc, #4	; (adr r0, 36274 <ull_conn_rx+0xb90>)
   36270:	f850 f02a 	ldr.w	pc, [r0, sl, lsl #2]
   36274:	00035fdf 	.word	0x00035fdf
   36278:	00035f6d 	.word	0x00035f6d
   3627c:	00035cad 	.word	0x00035cad
   36280:	00035cd1 	.word	0x00035cd1
   36284:	000357d1 	.word	0x000357d1
   36288:	000357d1 	.word	0x000357d1
   3628c:	00035c49 	.word	0x00035c49
   36290:	00035bf5 	.word	0x00035bf5
   36294:	00035e79 	.word	0x00035e79
   36298:	00035b7b 	.word	0x00035b7b
   3629c:	00035d6f 	.word	0x00035d6f
   362a0:	000360af 	.word	0x000360af
   362a4:	00035afb 	.word	0x00035afb
   362a8:	00035a75 	.word	0x00035a75
   362ac:	000357d1 	.word	0x000357d1
   362b0:	00035b59 	.word	0x00035b59
   362b4:	000357d1 	.word	0x000357d1
   362b8:	00035a09 	.word	0x00035a09
			tx->next = conn->tx_head;
   362bc:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   362be:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   362c2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   362c6:	2a00      	cmp	r2, #0
   362c8:	f47f aa52 	bne.w	35770 <ull_conn_rx+0x8c>
   362cc:	f7ff bab9 	b.w	35842 <ull_conn_rx+0x15e>
	switch (opcode) {
   362d0:	f1ba 0f18 	cmp.w	sl, #24
   362d4:	f63f aa7c 	bhi.w	357d0 <ull_conn_rx+0xec>
   362d8:	a001      	add	r0, pc, #4	; (adr r0, 362e0 <ull_conn_rx+0xbfc>)
   362da:	f850 f02a 	ldr.w	pc, [r0, sl, lsl #2]
   362de:	bf00      	nop
   362e0:	00035fd9 	.word	0x00035fd9
   362e4:	000357d1 	.word	0x000357d1
   362e8:	00035cad 	.word	0x00035cad
   362ec:	00035cd1 	.word	0x00035cd1
   362f0:	000357d1 	.word	0x000357d1
   362f4:	000357d1 	.word	0x000357d1
   362f8:	00035c49 	.word	0x00035c49
   362fc:	00035bf5 	.word	0x00035bf5
   36300:	00035e79 	.word	0x00035e79
   36304:	00035b7b 	.word	0x00035b7b
   36308:	00035d6f 	.word	0x00035d6f
   3630c:	000360af 	.word	0x000360af
   36310:	00035afb 	.word	0x00035afb
   36314:	00035a75 	.word	0x00035a75
   36318:	000357d1 	.word	0x000357d1
   3631c:	00035b59 	.word	0x00035b59
   36320:	000357d1 	.word	0x000357d1
   36324:	00035a09 	.word	0x00035a09
   36328:	000359c1 	.word	0x000359c1
   3632c:	000359a1 	.word	0x000359a1
   36330:	000358cd 	.word	0x000358cd
   36334:	000358cd 	.word	0x000358cd
   36338:	0003593f 	.word	0x0003593f
   3633c:	000357d1 	.word	0x000357d1
   36340:	00035e01 	.word	0x00035e01
		*err = -ENOBUFS;
   36344:	f06f 0068 	mvn.w	r0, #104	; 0x68
   36348:	f7ff ba15 	b.w	35776 <ull_conn_rx+0x92>
			conn->tx_data = conn->tx_data->next;
   3634c:	6813      	ldr	r3, [r2, #0]
   3634e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   36352:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   36356:	2b00      	cmp	r3, #0
   36358:	f47f aa69 	bne.w	3582e <ull_conn_rx+0x14a>
			tx->next = conn->tx_head->next;
   3635c:	6813      	ldr	r3, [r2, #0]
   3635e:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   36360:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   36362:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   36364:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   36368:	2a00      	cmp	r2, #0
   3636a:	f47f aa01 	bne.w	35770 <ull_conn_rx+0x8c>
   3636e:	f7ff ba68 	b.w	35842 <ull_conn_rx+0x15e>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   36372:	7f6b      	ldrb	r3, [r5, #29]
   36374:	2b01      	cmp	r3, #1
   36376:	f47f aa2b 	bne.w	357d0 <ull_conn_rx+0xec>
		conn->lll.enc_tx = 0;
   3637a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3637e:	f36f 1304 	bfc	r3, #4, #1
   36382:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   36386:	f7ff b9f3 	b.w	35770 <ull_conn_rx+0x8c>
		if (!conn->lll.role) {
   3638a:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   3638e:	2900      	cmp	r1, #0
   36390:	f2c0 80b2 	blt.w	364f8 <ull_conn_rx+0xe14>
					conn->llcp_conn_param.ack) &&
   36394:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
			if ((conn->llcp_conn_param.req !=
   36398:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   3639c:	4281      	cmp	r1, r0
   3639e:	d008      	beq.n	363b2 <ull_conn_rx+0xcce>
			    ((conn->llcp_conn_param.state ==
   363a0:	f894 6186 	ldrb.w	r6, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   363a4:	2151      	movs	r1, #81	; 0x51
   363a6:	f006 060f 	and.w	r6, r6, #15
   363aa:	40f1      	lsrs	r1, r6
   363ac:	07cf      	lsls	r7, r1, #31
   363ae:	f100 826e 	bmi.w	3688e <ull_conn_rx+0x11aa>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   363b2:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   363b6:	f894 60e5 	ldrb.w	r6, [r4, #229]	; 0xe5
   363ba:	1b89      	subs	r1, r1, r6
   363bc:	f001 0103 	and.w	r1, r1, #3
   363c0:	2902      	cmp	r1, #2
   363c2:	f000 83bf 	beq.w	36b44 <ull_conn_rx+0x1460>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   363c6:	f894 61bc 	ldrb.w	r6, [r4, #444]	; 0x1bc
   363ca:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   363ce:	428e      	cmp	r6, r1
   363d0:	f000 8417 	beq.w	36c02 <ull_conn_rx+0x151e>
				nack = reject_ext_ind_send(conn, *rx,
   363d4:	232a      	movs	r3, #42	; 0x2a
   363d6:	f7ff bbce 	b.w	35b76 <ull_conn_rx+0x492>
		if (!conn->tx_ctrl) {
   363da:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   363de:	2a00      	cmp	r2, #0
   363e0:	f47f ad00 	bne.w	35de4 <ull_conn_rx+0x700>
			tx->next = conn->tx_head;
   363e4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   363e6:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   363ea:	e500      	b.n	35dee <ull_conn_rx+0x70a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   363ec:	7913      	ldrb	r3, [r2, #4]
   363ee:	f003 0303 	and.w	r3, r3, #3
   363f2:	2b03      	cmp	r3, #3
   363f4:	f000 82b6 	beq.w	36964 <ull_conn_rx+0x1280>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   363f8:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
   363fc:	f7ff ba19 	b.w	35832 <ull_conn_rx+0x14e>
   36400:	20002630 	.word	0x20002630
   36404:	00022040 	.word	0x00022040
	if (conn->common.txn_lock) {
   36408:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   3640c:	079b      	lsls	r3, r3, #30
   3640e:	f53f a9af 	bmi.w	35770 <ull_conn_rx+0x8c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   36412:	48da      	ldr	r0, [pc, #872]	; (3677c <ull_conn_rx+0x1098>)
   36414:	f7f9 fa58 	bl	2f8c8 <mem_acquire>
	if (!tx) {
   36418:	4603      	mov	r3, r0
   3641a:	2800      	cmp	r0, #0
   3641c:	d092      	beq.n	36344 <ull_conn_rx+0xc60>
	conn->common.txn_lock = 1U;
   3641e:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   36422:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   36426:	f8b4 e05a 	ldrh.w	lr, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   3642a:	f8b4 8058 	ldrh.w	r8, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   3642e:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   36432:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   36436:	f042 0202 	orr.w	r2, r2, #2
   3643a:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3643e:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   36442:	428a      	cmp	r2, r1
   36444:	f040 856d 	bne.w	36f22 <ull_conn_rx+0x183e>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   36448:	8c28      	ldrh	r0, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3644a:	281a      	cmp	r0, #26
   3644c:	f240 8272 	bls.w	36934 <ull_conn_rx+0x1250>
			eff_tx_octets = MIN(max_rx_octets,
   36450:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   36454:	4281      	cmp	r1, r0
   36456:	bf28      	it	cs
   36458:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3645a:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   3645c:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   36460:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   36462:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   36464:	bf34      	ite	cc
   36466:	46f2      	movcc	sl, lr
   36468:	f04f 0a1b 	movcs.w	sl, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   3646c:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   36470:	bf34      	ite	cc
   36472:	4658      	movcc	r0, fp
   36474:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   36478:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   3647c:	bf34      	ite	cc
   3647e:	46cc      	movcc	ip, r9
   36480:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   36484:	45f2      	cmp	sl, lr
   36486:	f000 831a 	beq.w	36abe <ull_conn_rx+0x13da>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   3648a:	3a01      	subs	r2, #1
   3648c:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
   36490:	f8a4 a1b0 	strh.w	sl, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
   36494:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
   36498:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   3649c:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   364a0:	2b00      	cmp	r3, #0
   364a2:	f000 8355 	beq.w	36b50 <ull_conn_rx+0x146c>
   364a6:	2505      	movs	r5, #5
				conn->llcp_length.state =
   364a8:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   364ac:	f365 0202 	bfi	r2, r5, #0, #3
   364b0:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   364b4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   364b8:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   364ba:	6832      	ldr	r2, [r6, #0]
   364bc:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   364be:	6832      	ldr	r2, [r6, #0]
   364c0:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   364c4:	2200      	movs	r2, #0
   364c6:	6032      	str	r2, [r6, #0]
	if (tx) {
   364c8:	2b00      	cmp	r3, #0
   364ca:	f43f a953 	beq.w	35774 <ull_conn_rx+0x90>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   364ce:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   364d0:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   364d2:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   364d6:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   364d8:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   364da:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   364dc:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   364de:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   364e0:	f8a3 a008 	strh.w	sl, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   364e4:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   364e8:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   364ea:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   364ec:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   364ee:	f7fe f88b 	bl	34608 <ctrl_tx_sec_enqueue>
	return 0;
   364f2:	2000      	movs	r0, #0
}
   364f4:	f7ff b93f 	b.w	35776 <ull_conn_rx+0x92>
			    conn->llcp_conn_param.ack) ||
   364f8:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
		} else if ((conn->llcp_conn_param.req ==
   364fc:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
			    conn->llcp_conn_param.ack) ||
   36500:	9100      	str	r1, [sp, #0]
		} else if ((conn->llcp_conn_param.req ==
   36502:	428a      	cmp	r2, r1
   36504:	d005      	beq.n	36512 <ull_conn_rx+0xe2e>
			    conn->llcp_conn_param.ack) ||
   36506:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   3650a:	f012 0f0b 	tst.w	r2, #11
   3650e:	f47f a92f 	bne.w	35770 <ull_conn_rx+0x8c>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   36512:	f8b5 b020 	ldrh.w	fp, [r5, #32]
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   36516:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   3651a:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   3651e:	8cef      	ldrh	r7, [r5, #38]	; 0x26
				cpr->preferred_periodicity;
   36520:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   36524:	fa1f fe8b 	uxth.w	lr, fp
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   36528:	f1be 0f05 	cmp.w	lr, #5
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   3652c:	fa1f f189 	uxth.w	r1, r9
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   36530:	fa1f fc88 	uxth.w	ip, r8
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   36534:	b2ba      	uxth	r2, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   36536:	f240 809c 	bls.w	36672 <ull_conn_rx+0xf8e>
   3653a:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   3653e:	f200 8098 	bhi.w	36672 <ull_conn_rx+0xf8e>
			    (interval_max > 3200) ||
   36542:	458e      	cmp	lr, r1
   36544:	f200 8095 	bhi.w	36672 <ull_conn_rx+0xf8e>
			    (interval_min > interval_max) ||
   36548:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   3654c:	f080 8091 	bcs.w	36672 <ull_conn_rx+0xf8e>
			    (latency > 499) ||
   36550:	f1a2 0e0a 	sub.w	lr, r2, #10
   36554:	fa1f fe8e 	uxth.w	lr, lr
   36558:	f640 4076 	movw	r0, #3190	; 0xc76
   3655c:	4586      	cmp	lr, r0
   3655e:	f200 8088 	bhi.w	36672 <ull_conn_rx+0xf8e>
			     ((latency + 1) * interval_max)) ||
   36562:	f10c 0e01 	add.w	lr, ip, #1
   36566:	fa1f fe8e 	uxth.w	lr, lr
   3656a:	fb01 fe0e 	mul.w	lr, r1, lr
			    (timeout < 10) || (timeout > 3200) ||
   3656e:	ebbe 0f82 	cmp.w	lr, r2, lsl #2
   36572:	d27e      	bcs.n	36672 <ull_conn_rx+0xf8e>
			     ((latency + 1) * interval_max)) ||
   36574:	42b1      	cmp	r1, r6
   36576:	d37c      	bcc.n	36672 <ull_conn_rx+0xf8e>
			conn->llcp_conn_param.interval_min = interval_min;
   36578:	f8a4 b188 	strh.w	fp, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   3657c:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   36580:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   36584:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   36588:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   3658c:	f895 702a 	ldrb.w	r7, [r5, #42]	; 0x2a
   36590:	f895 6029 	ldrb.w	r6, [r5, #41]	; 0x29
   36594:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   36598:	f8a4 6192 	strh.w	r6, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   3659c:	f895 702c 	ldrb.w	r7, [r5, #44]	; 0x2c
   365a0:	f895 602b 	ldrb.w	r6, [r5, #43]	; 0x2b
   365a4:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.offset0 =
   365a8:	f8a4 6194 	strh.w	r6, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   365ac:	f895 702e 	ldrb.w	r7, [r5, #46]	; 0x2e
   365b0:	f895 602d 	ldrb.w	r6, [r5, #45]	; 0x2d
   365b4:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.offset1 =
   365b8:	f8a4 6196 	strh.w	r6, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   365bc:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
   365c0:	f895 602f 	ldrb.w	r6, [r5, #47]	; 0x2f
   365c4:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.offset2 =
   365c8:	f8a4 6198 	strh.w	r6, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   365cc:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
   365d0:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
   365d4:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.offset3 =
   365d8:	f8a4 619a 	strh.w	r6, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   365dc:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
   365e0:	f895 6033 	ldrb.w	r6, [r5, #51]	; 0x33
   365e4:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.offset4 =
   365e8:	f8a4 619c 	strh.w	r6, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   365ec:	f895 6035 	ldrb.w	r6, [r5, #53]	; 0x35
   365f0:	f895 7036 	ldrb.w	r7, [r5, #54]	; 0x36
   365f4:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.offset5 =
   365f8:	f8a4 619e 	strh.w	r6, [r4, #414]	; 0x19e
			     lll->interval) ||
   365fc:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   365fe:	42b1      	cmp	r1, r6
   36600:	f000 83fd 	beq.w	36dfe <ull_conn_rx+0x171a>
				conn->llcp_conn_param.state =
   36604:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   36608:	2103      	movs	r1, #3
   3660a:	f361 0203 	bfi	r2, r1, #0, #4
   3660e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   36612:	9a00      	ldr	r2, [sp, #0]
   36614:	1e50      	subs	r0, r2, #1
   36616:	f884 0185 	strb.w	r0, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
   3661a:	2b00      	cmp	r3, #0
   3661c:	f47f a8aa 	bne.w	35774 <ull_conn_rx+0x90>
		conn_upd_curr = conn;
   36620:	f8ca 4000 	str.w	r4, [sl]
	int nack = 0;
   36624:	4618      	mov	r0, r3
   36626:	f7ff b8a6 	b.w	35776 <ull_conn_rx+0x92>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3662a:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   3662e:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   36632:	4293      	cmp	r3, r2
   36634:	f43f ad5c 	beq.w	360f0 <ull_conn_rx+0xa0c>
		rej_ext_ind->error_code = rej_ind->error_code;
   36638:	f895 3020 	ldrb.w	r3, [r5, #32]
   3663c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   36640:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   36644:	2800      	cmp	r0, #0
   36646:	f2c0 8376 	blt.w	36d36 <ull_conn_rx+0x1652>
   3664a:	2b1a      	cmp	r3, #26
   3664c:	f000 8400 	beq.w	36e50 <ull_conn_rx+0x176c>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   36650:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   36654:	f003 000f 	and.w	r0, r3, #15
   36658:	2804      	cmp	r0, #4
   3665a:	d106      	bne.n	3666a <ull_conn_rx+0xf86>
	conn_upd_curr = NULL;
   3665c:	4848      	ldr	r0, [pc, #288]	; (36780 <ull_conn_rx+0x109c>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3665e:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   36662:	2200      	movs	r2, #0
   36664:	6002      	str	r2, [r0, #0]
		conn->procedure_expire = 0U;
   36666:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   3666a:	06db      	lsls	r3, r3, #27
   3666c:	f57f a880 	bpl.w	35770 <ull_conn_rx+0x8c>
   36670:	e57e      	b.n	36170 <ull_conn_rx+0xa8c>
				nack = reject_ext_ind_send(conn, *rx,
   36672:	231e      	movs	r3, #30
   36674:	f7ff ba7f 	b.w	35b76 <ull_conn_rx+0x492>
	if (conn->common.txn_lock) {
   36678:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   3667c:	079e      	lsls	r6, r3, #30
   3667e:	f53f a877 	bmi.w	35770 <ull_conn_rx+0x8c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   36682:	483e      	ldr	r0, [pc, #248]	; (3677c <ull_conn_rx+0x1098>)
   36684:	f7f9 f920 	bl	2f8c8 <mem_acquire>
	if (!tx) {
   36688:	4602      	mov	r2, r0
   3668a:	2800      	cmp	r0, #0
   3668c:	f43f ae5a 	beq.w	36344 <ull_conn_rx+0xc60>
	conn->common.txn_lock = 1U;
   36690:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   36694:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   36698:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
	conn->common.txn_lock = 1U;
   3669c:	f043 0302 	orr.w	r3, r3, #2
   366a0:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   366a4:	2302      	movs	r3, #2
   366a6:	f363 0101 	bfi	r1, r3, #0, #2
	if (conn->llcp_phy.ack ==
   366aa:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   366ae:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   366b2:	4283      	cmp	r3, r0
   366b4:	d115      	bne.n	366e2 <ull_conn_rx+0xffe>
		conn->llcp_phy.tx =
   366b6:	f8b4 11be 	ldrh.w	r1, [r4, #446]	; 0x1be
			conn->phy_pref_rx;
   366ba:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
		conn->llcp_phy.ack--;
   366be:	3b01      	subs	r3, #1
   366c0:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
   366c4:	f421 619f 	bic.w	r1, r1, #1272	; 0x4f8
   366c8:	f240 43fc 	movw	r3, #1276	; 0x4fc
   366cc:	f021 0104 	bic.w	r1, r1, #4
   366d0:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   366d4:	430b      	orrs	r3, r1
		conn->procedure_expire =
   366d6:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
		conn->llcp_phy.tx =
   366da:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
		conn->procedure_expire =
   366de:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   366e2:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
   366e6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   366ea:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   366ee:	f3c1 0682 	ubfx	r6, r1, #2, #3
   366f2:	4033      	ands	r3, r6
	conn->llcp_phy.rx &= p->tx_phys;
   366f4:	ea00 1051 	and.w	r0, r0, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   366f8:	009b      	lsls	r3, r3, #2
   366fa:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   366fe:	f001 0103 	and.w	r1, r1, #3
   36702:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   36704:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   36706:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   3670a:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   3670c:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   36710:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   36712:	4603      	mov	r3, r0
   36714:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   36718:	7253      	strb	r3, [r2, #9]
	    conn->tx_head &&
   3671a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3671e:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   36722:	2617      	movs	r6, #23
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   36724:	f3c0 0002 	ubfx	r0, r0, #0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   36728:	71d6      	strb	r6, [r2, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   3672a:	7210      	strb	r0, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3672c:	7111      	strb	r1, [r2, #4]
	if (
   3672e:	2b00      	cmp	r3, #0
   36730:	f000 80b0 	beq.w	36894 <ull_conn_rx+0x11b0>
	    !conn->llcp_enc.pause_tx &&
   36734:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   36738:	0788      	lsls	r0, r1, #30
   3673a:	f100 80ab 	bmi.w	36894 <ull_conn_rx+0x11b0>
	    !conn->llcp_phy.pause_tx &&
   3673e:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   36742:	07c9      	lsls	r1, r1, #31
   36744:	f100 80a6 	bmi.w	36894 <ull_conn_rx+0x11b0>
		if (conn->tx_head == conn->tx_data) {
   36748:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   3674c:	428b      	cmp	r3, r1
   3674e:	f000 8348 	beq.w	36de2 <ull_conn_rx+0x16fe>
		} else if (!conn->tx_ctrl) {
   36752:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   36756:	2900      	cmp	r1, #0
   36758:	f000 83f0 	beq.w	36f3c <ull_conn_rx+0x1858>
	tx->next = conn->tx_ctrl_last->next;
   3675c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   36760:	6819      	ldr	r1, [r3, #0]
   36762:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   36764:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
   36766:	6813      	ldr	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   36768:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   3676c:	2b00      	cmp	r3, #0
   3676e:	f47e afff 	bne.w	35770 <ull_conn_rx+0x8c>
		conn->tx_data_last = tx;
   36772:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36776:	f7fe bffb 	b.w	35770 <ull_conn_rx+0x8c>
   3677a:	bf00      	nop
   3677c:	200026c4 	.word	0x200026c4
   36780:	20002630 	.word	0x20002630
			conn->llcp_conn_param.disabled = 1U;
   36784:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   36788:	f043 0320 	orr.w	r3, r3, #32
   3678c:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   36790:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   36794:	2b00      	cmp	r3, #0
   36796:	f2c0 81b8 	blt.w	36b0a <ull_conn_rx+0x1426>
				LL_ASSERT(conn->llcp_cu.req ==
   3679a:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   3679e:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   367a2:	429a      	cmp	r2, r3
   367a4:	d00e      	beq.n	367c4 <ull_conn_rx+0x10e0>
   367a6:	4ae2      	ldr	r2, [pc, #904]	; (36b30 <ull_conn_rx+0x144c>)
   367a8:	49e2      	ldr	r1, [pc, #904]	; (36b34 <ull_conn_rx+0x1450>)
   367aa:	48e3      	ldr	r0, [pc, #908]	; (36b38 <ull_conn_rx+0x1454>)
   367ac:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   367b0:	f00c fa4c 	bl	42c4c <printk>
   367b4:	4040      	eors	r0, r0
   367b6:	f380 8811 	msr	BASEPRI, r0
   367ba:	f04f 0003 	mov.w	r0, #3
   367be:	df02      	svc	2
   367c0:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   367c4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   367c8:	2106      	movs	r1, #6
   367ca:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   367ce:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   367d0:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   367d2:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   367d6:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   367da:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   367dc:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   367e0:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   367e4:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
   367e8:	00db      	lsls	r3, r3, #3
   367ea:	f022 020f 	bic.w	r2, r2, #15
   367ee:	430b      	orrs	r3, r1
   367f0:	4313      	orrs	r3, r2
   367f2:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
   367f6:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
   367fa:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
   367fe:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
   36802:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   36804:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
   36808:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
   3680c:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
   36810:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36814:	7129      	strb	r1, [r5, #4]
				break;
   36816:	f7fe bfae 	b.w	35776 <ull_conn_rx+0x92>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3681a:	48c8      	ldr	r0, [pc, #800]	; (36b3c <ull_conn_rx+0x1458>)
   3681c:	f7f9 f854 	bl	2f8c8 <mem_acquire>
		if (!tx) {
   36820:	4601      	mov	r1, r0
   36822:	2800      	cmp	r0, #0
   36824:	f43f ad8e 	beq.w	36344 <ull_conn_rx+0xc60>
		conn->llcp_version.tx = 1U;
   36828:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   3682c:	f043 0301 	orr.w	r3, r3, #1
   36830:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   36834:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   36836:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   36838:	220c      	movs	r2, #12
   3683a:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   3683c:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3683e:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   36842:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   36846:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   36848:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   3684a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3684e:	2205      	movs	r2, #5
		v->sub_version_number =
   36850:	72c3      	strb	r3, [r0, #11]
   36852:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   36854:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   36856:	4620      	mov	r0, r4
   36858:	f7fd fed6 	bl	34608 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3685c:	2301      	movs	r3, #1
   3685e:	712b      	strb	r3, [r5, #4]
   36860:	f7ff b95e 	b.w	35b20 <ull_conn_rx+0x43c>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36864:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   36866:	2000      	movs	r0, #0
   36868:	f7fe bf85 	b.w	35776 <ull_conn_rx+0x92>
				      0x03) == 0x02) &&
   3686c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   36870:	2b03      	cmp	r3, #3
   36872:	f47f a88c 	bne.w	3598e <ull_conn_rx+0x2aa>
   36876:	f7ff b883 	b.w	35980 <ull_conn_rx+0x29c>
			conn->llcp_length.disabled = 1U;
   3687a:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   3687e:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   36882:	f043 0308 	orr.w	r3, r3, #8
   36886:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   3688a:	f7ff b9d8 	b.w	35c3e <ull_conn_rx+0x55a>
				nack = reject_ext_ind_send(conn, *rx,
   3688e:	2323      	movs	r3, #35	; 0x23
   36890:	f7ff b971 	b.w	35b76 <ull_conn_rx+0x492>
		if (!conn->tx_ctrl) {
   36894:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   36898:	2900      	cmp	r1, #0
   3689a:	f47f af5f 	bne.w	3675c <ull_conn_rx+0x1078>
			tx->next = conn->tx_head;
   3689e:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   368a0:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   368a4:	e75f      	b.n	36766 <ull_conn_rx+0x1082>
				nack = reject_ext_ind_send(conn, *rx,
   368a6:	2323      	movs	r3, #35	; 0x23
   368a8:	2216      	movs	r2, #22
   368aa:	f7ff b872 	b.w	35992 <ull_conn_rx+0x2ae>
				conn->llcp_phy.state =
   368ae:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   368b2:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   368b4:	f043 0303 	orr.w	r3, r3, #3
   368b8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   368bc:	d111      	bne.n	368e2 <ull_conn_rx+0x11fe>
					conn->llcp_phy.tx =
   368be:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
   368c2:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
   368c6:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   368c8:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   368cc:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   368d0:	f240 43fc 	movw	r3, #1276	; 0x4fc
   368d4:	f022 0204 	bic.w	r2, r2, #4
   368d8:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   368dc:	4313      	orrs	r3, r2
   368de:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
   368e2:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   368e6:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   368ea:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   368ee:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   368f2:	f003 0203 	and.w	r2, r3, #3
   368f6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   368fa:	4003      	ands	r3, r0
   368fc:	009b      	lsls	r3, r3, #2
   368fe:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   36902:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   36904:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   36908:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3690c:	d002      	beq.n	36914 <ull_conn_rx+0x1230>
   3690e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   36912:	d105      	bne.n	36920 <ull_conn_rx+0x123c>
					conn->llcp_phy.tx = 0;
   36914:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   36918:	f003 0303 	and.w	r3, r3, #3
   3691c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
   36920:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36924:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   36926:	4313      	orrs	r3, r2
   36928:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
   3692c:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3692e:	712a      	strb	r2, [r5, #4]
   36930:	f7fe bf21 	b.w	35776 <ull_conn_rx+0x92>
   36934:	4641      	mov	r1, r8
   36936:	e590      	b.n	3645a <ull_conn_rx+0xd76>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   36938:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   3693c:	f36f 0301 	bfc	r3, #0, #2
   36940:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   36944:	f7ff b9a0 	b.w	35c88 <ull_conn_rx+0x5a4>
	conn->llcp_enc.pause_rx = 0U;
   36948:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   3694c:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   36950:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   36952:	f021 0103 	bic.w	r1, r1, #3
   36956:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   3695a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   3695e:	4618      	mov	r0, r3
   36960:	f7fe bf09 	b.w	35776 <ull_conn_rx+0x92>
	    ((pdu_data_tx->llctrl.opcode !=
   36964:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   36966:	2b03      	cmp	r3, #3
   36968:	f43f acf8 	beq.w	3635c <ull_conn_rx+0xc78>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3696c:	2b0a      	cmp	r3, #10
   3696e:	f47f ad43 	bne.w	363f8 <ull_conn_rx+0xd14>
   36972:	e4f3      	b.n	3635c <ull_conn_rx+0xc78>
			lll->phy_tx_time = lll->phy_tx;
   36974:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   36978:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   3697c:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   36980:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   36984:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
   36986:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   3698a:	f361 1206 	bfi	r2, r1, #4, #3
   3698e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   36992:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   36996:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   3699a:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3699e:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   369a0:	f000 80f7 	beq.w	36b92 <ull_conn_rx+0x14ae>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   369a4:	221c      	movs	r2, #28
   369a6:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   369a8:	2300      	movs	r3, #0
   369aa:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   369ac:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
   369ae:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   369b2:	f3c3 0302 	ubfx	r3, r3, #0, #3
   369b6:	77ab      	strb	r3, [r5, #30]
   369b8:	f7ff b941 	b.w	35c3e <ull_conn_rx+0x55a>
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   369bc:	2101      	movs	r1, #1
   369be:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
   369c2:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   369c6:	f7f9 f953 	bl	2fc70 <util_ones_count_get>
   369ca:	2801      	cmp	r0, #1
   369cc:	f200 80d5 	bhi.w	36b7a <ull_conn_rx+0x1496>
	phy = ind->p_to_c_phy;
   369d0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   369d4:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   369d8:	f10d 000f 	add.w	r0, sp, #15
   369dc:	2101      	movs	r1, #1
   369de:	f7f9 f947 	bl	2fc70 <util_ones_count_get>
   369e2:	2801      	cmp	r0, #1
   369e4:	f200 80c9 	bhi.w	36b7a <ull_conn_rx+0x1496>
	instant = sys_le16_to_cpu(ind->instant);
   369e8:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   369ea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   369ec:	1ad3      	subs	r3, r2, r3
   369ee:	041b      	lsls	r3, r3, #16
   369f0:	f100 829f 	bmi.w	36f32 <ull_conn_rx+0x184e>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   369f4:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   369f8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   369fc:	1a5b      	subs	r3, r3, r1
   369fe:	f003 0303 	and.w	r3, r3, #3
   36a02:	2b02      	cmp	r3, #2
   36a04:	f000 8262 	beq.w	36ecc <ull_conn_rx+0x17e8>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   36a08:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   36a0c:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   36a10:	4283      	cmp	r3, r0
   36a12:	d018      	beq.n	36a46 <ull_conn_rx+0x1362>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   36a14:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   36a18:	f003 0303 	and.w	r3, r3, #3
   36a1c:	2b02      	cmp	r3, #2
   36a1e:	d112      	bne.n	36a46 <ull_conn_rx+0x1362>
		conn->llcp_phy.pause_tx = 0U;
   36a20:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   36a24:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   36a28:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   36a2c:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
   36a30:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   36a34:	f3c3 0380 	ubfx	r3, r3, #2, #1
   36a38:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
   36a3c:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   36a3e:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   36a42:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   36a46:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   36a4a:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   36a4e:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   36a52:	009b      	lsls	r3, r3, #2
   36a54:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   36a58:	f003 031c 	and.w	r3, r3, #28
   36a5c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   36a60:	f002 0202 	and.w	r2, r2, #2
   36a64:	4313      	orrs	r3, r2
   36a66:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   36a6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   36a6e:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   36a70:	6833      	ldr	r3, [r6, #0]
   36a72:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   36a74:	6833      	ldr	r3, [r6, #0]
   36a76:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
	*rx = NULL;
   36a7a:	2000      	movs	r0, #0
   36a7c:	6030      	str	r0, [r6, #0]
	if (conn->llcp.phy_upd_ind.tx) {
   36a7e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_PHY_UPD;
   36a82:	2306      	movs	r3, #6
	conn->llcp_ack -= 2U;
   36a84:	3902      	subs	r1, #2
	conn->llcp_type = LLCP_PHY_UPD;
   36a86:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
   36a8a:	f012 031c 	ands.w	r3, r2, #28
	conn->llcp_ack -= 2U;
   36a8e:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   36a92:	f43e ae6f 	beq.w	35774 <ull_conn_rx+0x90>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   36a96:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   36a9a:	f3c2 0282 	ubfx	r2, r2, #2, #3
   36a9e:	f362 1306 	bfi	r3, r2, #4, #3
   36aa2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		    PDU_DATA_LLCTRL_LEN(phy_upd_ind) != pdu_rx->len) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
   36aa6:	f7fe be66 	b.w	35776 <ull_conn_rx+0x92>
		err = BT_HCI_ERR_INSTANT_PASSED;
   36aaa:	2328      	movs	r3, #40	; 0x28
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   36aac:	2201      	movs	r2, #1
   36aae:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   36ab0:	2000      	movs	r0, #0
			conn->llcp_terminate.reason_final = err;
   36ab2:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
   36ab6:	f7fe be5e 	b.w	35776 <ull_conn_rx+0x92>
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   36aba:	232a      	movs	r3, #42	; 0x2a
   36abc:	e7f6      	b.n	36aac <ull_conn_rx+0x13c8>
			conn->procedure_expire = 0U;
   36abe:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   36ac0:	4541      	cmp	r1, r8
			conn->llcp_length.ack = conn->llcp_length.req;
   36ac2:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   36ac6:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   36aca:	f000 8141 	beq.w	36d50 <ull_conn_rx+0x166c>
			conn->lll.max_rx_time = eff_rx_time;
   36ace:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   36ad2:	2b00      	cmp	r3, #0
   36ad4:	f000 8137 	beq.w	36d46 <ull_conn_rx+0x1662>
					(conn->llcp_length.req - 1);
   36ad8:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   36ada:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
   36ade:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
   36ae2:	f8a4 a1b0 	strh.w	sl, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   36ae6:	2603      	movs	r6, #3
   36ae8:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   36aec:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   36af0:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   36af4:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   36af8:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   36afc:	f8a5 a020 	strh.w	sl, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   36b00:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   36b02:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   36b06:	84e8      	strh	r0, [r5, #38]	; 0x26
   36b08:	e4de      	b.n	364c8 <ull_conn_rx+0xde4>
	conn_upd_curr = NULL;
   36b0a:	4b0d      	ldr	r3, [pc, #52]	; (36b40 <ull_conn_rx+0x145c>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   36b0c:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   36b10:	2200      	movs	r2, #0
   36b12:	601a      	str	r2, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   36b14:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   36b18:	f013 0310 	ands.w	r3, r3, #16
   36b1c:	d158      	bne.n	36bd0 <ull_conn_rx+0x14ec>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36b1e:	2201      	movs	r2, #1
   36b20:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   36b22:	4618      	mov	r0, r3
				break;
   36b24:	f7fe be27 	b.w	35776 <ull_conn_rx+0x92>
		conn_upd_curr = conn;
   36b28:	601c      	str	r4, [r3, #0]
   36b2a:	f7ff ba72 	b.w	36012 <ull_conn_rx+0x92e>
   36b2e:	bf00      	nop
   36b30:	0004a498 	.word	0x0004a498
   36b34:	0004a5e4 	.word	0x0004a5e4
   36b38:	0004a024 	.word	0x0004a024
   36b3c:	200026c4 	.word	0x200026c4
   36b40:	20002630 	.word	0x20002630
				      0x03) == 0x02) &&
   36b44:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
   36b48:	2903      	cmp	r1, #3
   36b4a:	f47f ac43 	bne.w	363d4 <ull_conn_rx+0xcf0>
   36b4e:	e43a      	b.n	363c6 <ull_conn_rx+0xce2>
				conn->lll.max_tx_octets = eff_tx_octets;
   36b50:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   36b54:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   36b58:	2504      	movs	r5, #4
   36b5a:	e4a5      	b.n	364a8 <ull_conn_rx+0xdc4>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36b5c:	4ab8      	ldr	r2, [pc, #736]	; (36e40 <ull_conn_rx+0x175c>)
   36b5e:	49b9      	ldr	r1, [pc, #740]	; (36e44 <ull_conn_rx+0x1760>)
   36b60:	48b9      	ldr	r0, [pc, #740]	; (36e48 <ull_conn_rx+0x1764>)
   36b62:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   36b66:	f00c f871 	bl	42c4c <printk>
   36b6a:	4040      	eors	r0, r0
   36b6c:	f380 8811 	msr	BASEPRI, r0
   36b70:	f04f 0003 	mov.w	r0, #3
   36b74:	df02      	svc	2
   36b76:	f7ff bb00 	b.w	3617a <ull_conn_rx+0xa96>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36b7a:	6833      	ldr	r3, [r6, #0]
   36b7c:	2201      	movs	r2, #1
   36b7e:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   36b80:	231e      	movs	r3, #30
			conn->llcp_terminate.reason_final = err;
   36b82:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   36b86:	2000      	movs	r0, #0
   36b88:	f7fe bdf5 	b.w	35776 <ull_conn_rx+0x92>
	struct node_tx *tx = NULL;
   36b8c:	2300      	movs	r3, #0
   36b8e:	f7fe bebe 	b.w	3590e <ull_conn_rx+0x22a>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36b92:	2201      	movs	r2, #1
   36b94:	711a      	strb	r2, [r3, #4]
   36b96:	f7ff b852 	b.w	35c3e <ull_conn_rx+0x55a>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   36b9a:	6832      	ldr	r2, [r6, #0]
   36b9c:	201c      	movs	r0, #28
   36b9e:	7110      	strb	r0, [r2, #4]
		p->status = 0U;
   36ba0:	772b      	strb	r3, [r5, #28]
		p->tx = conn->lll.phy_tx;
   36ba2:	7769      	strb	r1, [r5, #29]
		p->rx = conn->lll.phy_rx;
   36ba4:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
	int nack = 0;
   36ba8:	4618      	mov	r0, r3
		p->rx = conn->lll.phy_rx;
   36baa:	f3c2 0302 	ubfx	r3, r2, #0, #3
   36bae:	77ab      	strb	r3, [r5, #30]
		if (err) {
   36bb0:	f7fe bde1 	b.w	35776 <ull_conn_rx+0x92>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   36bb4:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   36bb8:	3202      	adds	r2, #2
   36bba:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   36bbe:	2b00      	cmp	r3, #0
   36bc0:	f040 80ea 	bne.w	36d98 <ull_conn_rx+0x16b4>
			conn->periph.llcp_type = conn->llcp_type;
   36bc4:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   36bc8:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   36bcc:	f7ff b893 	b.w	35cf6 <ull_conn_rx+0x612>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   36bd0:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36bd2:	07ca      	lsls	r2, r1, #31
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   36bd4:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36bd6:	f100 80f6 	bmi.w	36dc6 <ull_conn_rx+0x16e2>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   36bda:	231a      	movs	r3, #26
   36bdc:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   36bde:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   36be0:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   36be4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   36be6:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   36be8:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   36bec:	227d      	movs	r2, #125	; 0x7d
   36bee:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   36bf2:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   36bf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   36bf8:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   36bfc:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   36bfe:	f7ff b81e 	b.w	35c3e <ull_conn_rx+0x55a>
				uint16_t latency =
   36c02:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
				uint16_t interval_min =
   36c04:	f8b5 9020 	ldrh.w	r9, [r5, #32]
				uint16_t interval_max =
   36c08:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
				uint16_t latency =
   36c0c:	f8ad 1006 	strh.w	r1, [sp, #6]
				uint16_t timeout =
   36c10:	f8b5 b026 	ldrh.w	fp, [r5, #38]	; 0x26
				uint16_t interval_min =
   36c14:	fa1f fc89 	uxth.w	ip, r9
				uint16_t latency =
   36c18:	460f      	mov	r7, r1
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   36c1a:	f1bc 0f05 	cmp.w	ip, #5
					cpr->preferred_periodicity;
   36c1e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
   36c22:	9100      	str	r1, [sp, #0]
				uint16_t interval_max =
   36c24:	fa1f f688 	uxth.w	r6, r8
				uint16_t latency =
   36c28:	b2bf      	uxth	r7, r7
				uint16_t timeout =
   36c2a:	fa1f f18b 	uxth.w	r1, fp
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   36c2e:	f67f ad20 	bls.w	36672 <ull_conn_rx+0xf8e>
   36c32:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
   36c36:	f63f ad1c 	bhi.w	36672 <ull_conn_rx+0xf8e>
				    (interval_max > 3200) ||
   36c3a:	45b4      	cmp	ip, r6
   36c3c:	f63f ad19 	bhi.w	36672 <ull_conn_rx+0xf8e>
				    (interval_min > interval_max) ||
   36c40:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   36c44:	f4bf ad15 	bcs.w	36672 <ull_conn_rx+0xf8e>
				    (latency > 499) ||
   36c48:	f1a1 0c0a 	sub.w	ip, r1, #10
   36c4c:	fa1f fc8c 	uxth.w	ip, ip
   36c50:	f640 4e76 	movw	lr, #3190	; 0xc76
   36c54:	45f4      	cmp	ip, lr
   36c56:	f63f ad0c 	bhi.w	36672 <ull_conn_rx+0xf8e>
				     ((latency + 1) * interval_max)) ||
   36c5a:	f107 0c01 	add.w	ip, r7, #1
   36c5e:	fa1f fc8c 	uxth.w	ip, ip
   36c62:	fb06 fc0c 	mul.w	ip, r6, ip
				    (timeout > 3200) ||
   36c66:	ebbc 0f81 	cmp.w	ip, r1, lsl #2
   36c6a:	f4bf ad02 	bcs.w	36672 <ull_conn_rx+0xf8e>
				     ((latency + 1) * interval_max)) ||
   36c6e:	f8dd c000 	ldr.w	ip, [sp]
   36c72:	4566      	cmp	r6, ip
   36c74:	f4ff acfd 	bcc.w	36672 <ull_conn_rx+0xf8e>
				conn->llcp_conn_param.latency =	latency;
   36c78:	f8bd c006 	ldrh.w	ip, [sp, #6]
   36c7c:	f8a4 c18c 	strh.w	ip, [r4, #396]	; 0x18c
				conn->llcp_conn_param.preferred_periodicity =
   36c80:	f8dd c000 	ldr.w	ip, [sp]
				conn->llcp_conn_param.interval_min =
   36c84:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.interval_max =
   36c88:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.timeout =	timeout;
   36c8c:	f8a4 b18e 	strh.w	fp, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   36c90:	f884 c190 	strb.w	ip, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   36c94:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   36c98:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
   36c9c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   36ca0:	f8a4 c192 	strh.w	ip, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   36ca4:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   36ca8:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
   36cac:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   36cb0:	f8a4 c194 	strh.w	ip, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   36cb4:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   36cb8:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
   36cbc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   36cc0:	f8a4 c196 	strh.w	ip, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   36cc4:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   36cc8:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
   36ccc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   36cd0:	f8a4 c198 	strh.w	ip, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   36cd4:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   36cd8:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
   36cdc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   36ce0:	f8a4 c19a 	strh.w	ip, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   36ce4:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   36ce8:	f895 c033 	ldrb.w	ip, [r5, #51]	; 0x33
   36cec:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   36cf0:	f8a4 c19c 	strh.w	ip, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   36cf4:	f895 c035 	ldrb.w	ip, [r5, #53]	; 0x35
   36cf8:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   36cfc:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
				conn->llcp_conn_param.offset5 =
   36d00:	f8a4 c19e 	strh.w	ip, [r4, #414]	; 0x19e
				     lll->interval) ||
   36d04:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   36d08:	4566      	cmp	r6, ip
   36d0a:	f000 80ea 	beq.w	36ee2 <ull_conn_rx+0x17fe>
					if (conn->llcp_enc.pause_tx) {
   36d0e:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   36d12:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   36d16:	f000 80de 	beq.w	36ed6 <ull_conn_rx+0x17f2>
						conn->llcp_conn_param.state =
   36d1a:	2102      	movs	r1, #2
   36d1c:	f361 0203 	bfi	r2, r1, #0, #4
   36d20:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   36d24:	2201      	movs	r2, #1
   36d26:	712a      	strb	r2, [r5, #4]
				conn->llcp_conn_param.ack--;
   36d28:	3801      	subs	r0, #1
   36d2a:	f884 0185 	strb.w	r0, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
   36d2e:	2b00      	cmp	r3, #0
   36d30:	f47e ad20 	bne.w	35774 <ull_conn_rx+0x90>
   36d34:	e474      	b.n	36620 <ull_conn_rx+0xf3c>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   36d36:	2b23      	cmp	r3, #35	; 0x23
   36d38:	f43f ac8a 	beq.w	36650 <ull_conn_rx+0xf6c>
			conn->periph.ticks_to_offset =
   36d3c:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   36d40:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   36d44:	e484      	b.n	36650 <ull_conn_rx+0xf6c>
				conn->lll.max_tx_octets = eff_tx_octets;
   36d46:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   36d4a:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   36d4e:	e6d5      	b.n	36afc <ull_conn_rx+0x1418>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   36d50:	4558      	cmp	r0, fp
   36d52:	f47f aebc 	bne.w	36ace <ull_conn_rx+0x13ea>
			    eff_rx_time == conn->lll.max_rx_time &&
   36d56:	45cc      	cmp	ip, r9
   36d58:	f47f aeb9 	bne.w	36ace <ull_conn_rx+0x13ea>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36d5c:	6832      	ldr	r2, [r6, #0]
   36d5e:	2501      	movs	r5, #1
   36d60:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   36d62:	f7ff bbb1 	b.w	364c8 <ull_conn_rx+0xde4>
			conn->tx_data = conn->tx_data->next;
   36d66:	681a      	ldr	r2, [r3, #0]
   36d68:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   36d6c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   36d70:	2a00      	cmp	r2, #0
   36d72:	f47f a837 	bne.w	35de4 <ull_conn_rx+0x700>
			tx->next = conn->tx_head->next;
   36d76:	681a      	ldr	r2, [r3, #0]
   36d78:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   36d7a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   36d7c:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   36d80:	f7ff b835 	b.w	35dee <ull_conn_rx+0x70a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   36d84:	791a      	ldrb	r2, [r3, #4]
   36d86:	f002 0203 	and.w	r2, r2, #3
   36d8a:	2a03      	cmp	r2, #3
   36d8c:	f000 80de 	beq.w	36f4c <ull_conn_rx+0x1868>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   36d90:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   36d94:	f7ff b826 	b.w	35de4 <ull_conn_rx+0x700>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   36d98:	4a29      	ldr	r2, [pc, #164]	; (36e40 <ull_conn_rx+0x175c>)
   36d9a:	492c      	ldr	r1, [pc, #176]	; (36e4c <ull_conn_rx+0x1768>)
   36d9c:	482a      	ldr	r0, [pc, #168]	; (36e48 <ull_conn_rx+0x1764>)
   36d9e:	f641 13ad 	movw	r3, #6573	; 0x19ad
   36da2:	f00b ff53 	bl	42c4c <printk>
   36da6:	4040      	eors	r0, r0
   36da8:	f380 8811 	msr	BASEPRI, r0
   36dac:	f04f 0003 	mov.w	r0, #3
   36db0:	df02      	svc	2
   36db2:	e707      	b.n	36bc4 <ull_conn_rx+0x14e0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   36db4:	2a23      	cmp	r2, #35	; 0x23
   36db6:	f43f a9cb 	beq.w	36150 <ull_conn_rx+0xa6c>
			conn->periph.ticks_to_offset =
   36dba:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   36dbe:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
   36dc2:	f7ff b9c5 	b.w	36150 <ull_conn_rx+0xa6c>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36dc6:	4a1e      	ldr	r2, [pc, #120]	; (36e40 <ull_conn_rx+0x175c>)
   36dc8:	491e      	ldr	r1, [pc, #120]	; (36e44 <ull_conn_rx+0x1760>)
   36dca:	481f      	ldr	r0, [pc, #124]	; (36e48 <ull_conn_rx+0x1764>)
   36dcc:	f641 4322 	movw	r3, #7202	; 0x1c22
   36dd0:	f00b ff3c 	bl	42c4c <printk>
   36dd4:	4040      	eors	r0, r0
   36dd6:	f380 8811 	msr	BASEPRI, r0
   36dda:	f04f 0003 	mov.w	r0, #3
   36dde:	df02      	svc	2
   36de0:	e6fb      	b.n	36bda <ull_conn_rx+0x14f6>
			conn->tx_data = conn->tx_data->next;
   36de2:	6819      	ldr	r1, [r3, #0]
   36de4:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   36de8:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   36dec:	2900      	cmp	r1, #0
   36dee:	f47f acb5 	bne.w	3675c <ull_conn_rx+0x1078>
			tx->next = conn->tx_head->next;
   36df2:	6819      	ldr	r1, [r3, #0]
   36df4:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   36df6:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   36df8:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   36dfc:	e4b3      	b.n	36766 <ull_conn_rx+0x1082>
			     lll->interval) ||
   36dfe:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
   36e00:	4566      	cmp	r6, ip
   36e02:	f47f abff 	bne.w	36604 <ull_conn_rx+0xf20>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   36e06:	f240 46e2 	movw	r6, #1250	; 0x4e2
   36e0a:	fb06 f101 	mul.w	r1, r6, r1
   36e0e:	f242 7610 	movw	r6, #10000	; 0x2710
   36e12:	fb06 1202 	mla	r2, r6, r2, r1
   36e16:	3a01      	subs	r2, #1
   36e18:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   36e1c:	f8b4 10c2 	ldrh.w	r1, [r4, #194]	; 0xc2
   36e20:	b292      	uxth	r2, r2
   36e22:	4291      	cmp	r1, r2
   36e24:	f47f abee 	bne.w	36604 <ull_conn_rx+0xf20>
				conn->llcp_conn_param.state =
   36e28:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   36e2c:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   36e30:	f042 0201 	orr.w	r2, r2, #1
   36e34:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36e38:	2201      	movs	r2, #1
   36e3a:	712a      	strb	r2, [r5, #4]
   36e3c:	f7ff bbe9 	b.w	36612 <ull_conn_rx+0xf2e>
   36e40:	0004a498 	.word	0x0004a498
   36e44:	0004a148 	.word	0x0004a148
   36e48:	0004a024 	.word	0x0004a024
   36e4c:	0004a5c0 	.word	0x0004a5c0
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   36e50:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   36e54:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   36e58:	429a      	cmp	r2, r3
   36e5a:	d00e      	beq.n	36e7a <ull_conn_rx+0x1796>
   36e5c:	4a43      	ldr	r2, [pc, #268]	; (36f6c <ull_conn_rx+0x1888>)
   36e5e:	4944      	ldr	r1, [pc, #272]	; (36f70 <ull_conn_rx+0x188c>)
   36e60:	4844      	ldr	r0, [pc, #272]	; (36f74 <ull_conn_rx+0x1890>)
   36e62:	f241 43af 	movw	r3, #5295	; 0x14af
   36e66:	f00b fef1 	bl	42c4c <printk>
   36e6a:	4040      	eors	r0, r0
   36e6c:	f380 8811 	msr	BASEPRI, r0
   36e70:	f04f 0003 	mov.w	r0, #3
   36e74:	df02      	svc	2
   36e76:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   36e7a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   36e7e:	2106      	movs	r1, #6
   36e80:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   36e84:	3b01      	subs	r3, #1
   36e86:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   36e8a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   36e8e:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   36e92:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   36e96:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   36e98:	00db      	lsls	r3, r3, #3
   36e9a:	430b      	orrs	r3, r1
   36e9c:	f022 020f 	bic.w	r2, r2, #15
   36ea0:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   36ea2:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   36ea6:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   36eaa:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   36eae:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   36eb2:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   36eb4:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
   36eb8:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   36ebc:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   36ec0:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   36ec4:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   36ec8:	f7fe bc52 	b.w	35770 <ull_conn_rx+0x8c>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36ecc:	6833      	ldr	r3, [r6, #0]
   36ece:	2201      	movs	r2, #1
   36ed0:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   36ed2:	232a      	movs	r3, #42	; 0x2a
   36ed4:	e655      	b.n	36b82 <ull_conn_rx+0x149e>
						conn->llcp_conn_param.state =
   36ed6:	2103      	movs	r1, #3
   36ed8:	f361 0203 	bfi	r2, r1, #0, #4
   36edc:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
   36ee0:	e722      	b.n	36d28 <ull_conn_rx+0x1644>
				     lll->interval) ||
   36ee2:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
   36ee4:	42be      	cmp	r6, r7
   36ee6:	f47f af12 	bne.w	36d0e <ull_conn_rx+0x162a>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   36eea:	f240 46e2 	movw	r6, #1250	; 0x4e2
   36eee:	fb06 f60c 	mul.w	r6, r6, ip
   36ef2:	f242 7710 	movw	r7, #10000	; 0x2710
   36ef6:	fb07 6101 	mla	r1, r7, r1, r6
   36efa:	3901      	subs	r1, #1
   36efc:	fbb1 f1f6 	udiv	r1, r1, r6
				     lll->latency) ||
   36f00:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
   36f04:	b289      	uxth	r1, r1
   36f06:	428e      	cmp	r6, r1
   36f08:	f47f af01 	bne.w	36d0e <ull_conn_rx+0x162a>
					conn->llcp_conn_param.state =
   36f0c:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   36f10:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   36f14:	f042 0201 	orr.w	r2, r2, #1
   36f18:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
					(*rx)->hdr.type =
   36f1c:	2201      	movs	r2, #1
   36f1e:	712a      	strb	r2, [r5, #4]
   36f20:	e702      	b.n	36d28 <ull_conn_rx+0x1644>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   36f22:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   36f26:	f011 0f06 	tst.w	r1, #6
   36f2a:	f43f aa8d 	beq.w	36448 <ull_conn_rx+0xd64>
   36f2e:	f7fe bce7 	b.w	35900 <ull_conn_rx+0x21c>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   36f32:	6833      	ldr	r3, [r6, #0]
   36f34:	2201      	movs	r2, #1
   36f36:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   36f38:	2328      	movs	r3, #40	; 0x28
   36f3a:	e622      	b.n	36b82 <ull_conn_rx+0x149e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   36f3c:	7919      	ldrb	r1, [r3, #4]
   36f3e:	f001 0103 	and.w	r1, r1, #3
   36f42:	2903      	cmp	r1, #3
   36f44:	d00a      	beq.n	36f5c <ull_conn_rx+0x1878>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   36f46:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   36f4a:	e407      	b.n	3675c <ull_conn_rx+0x1078>
	    ((pdu_data_tx->llctrl.opcode !=
   36f4c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   36f4e:	2a03      	cmp	r2, #3
   36f50:	f43f af11 	beq.w	36d76 <ull_conn_rx+0x1692>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   36f54:	2a0a      	cmp	r2, #10
   36f56:	f47f af1b 	bne.w	36d90 <ull_conn_rx+0x16ac>
   36f5a:	e70c      	b.n	36d76 <ull_conn_rx+0x1692>
	    ((pdu_data_tx->llctrl.opcode !=
   36f5c:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   36f5e:	2903      	cmp	r1, #3
   36f60:	f43f af47 	beq.w	36df2 <ull_conn_rx+0x170e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   36f64:	290a      	cmp	r1, #10
   36f66:	d1ee      	bne.n	36f46 <ull_conn_rx+0x1862>
   36f68:	e743      	b.n	36df2 <ull_conn_rx+0x170e>
   36f6a:	bf00      	nop
   36f6c:	0004a498 	.word	0x0004a498
   36f70:	0004a5e4 	.word	0x0004a5e4
   36f74:	0004a024 	.word	0x0004a024

00036f78 <ull_conn_llcp>:
{
   36f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36f7c:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   36f7e:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   36f82:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   36f86:	4298      	cmp	r0, r3
{
   36f88:	460d      	mov	r5, r1
   36f8a:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   36f8c:	d030      	beq.n	36ff0 <ull_conn_llcp+0x78>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   36f8e:	1a1b      	subs	r3, r3, r0
   36f90:	f003 0303 	and.w	r3, r3, #3
   36f94:	2b02      	cmp	r3, #2
   36f96:	d010      	beq.n	36fba <ull_conn_llcp+0x42>
   36f98:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   36f9c:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   36f9e:	f1bc 0f00 	cmp.w	ip, #0
   36fa2:	db4e      	blt.n	37042 <ull_conn_llcp+0xca>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   36fa4:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   36fa8:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   36fac:	1a9b      	subs	r3, r3, r2
   36fae:	b2db      	uxtb	r3, r3
   36fb0:	2b01      	cmp	r3, #1
   36fb2:	d05f      	beq.n	37074 <ull_conn_llcp+0xfc>
	return 0;
   36fb4:	2000      	movs	r0, #0
}
   36fb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   36fba:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   36fbe:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   36fc2:	429a      	cmp	r2, r3
   36fc4:	d006      	beq.n	36fd4 <ull_conn_llcp+0x5c>
			     LLCP_LENGTH_STATE_RESIZE) ||
   36fc6:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
   36fca:	f003 0306 	and.w	r3, r3, #6
   36fce:	2b04      	cmp	r3, #4
   36fd0:	f000 81f5 	beq.w	373be <ull_conn_llcp+0x446>
		switch (conn->llcp_type) {
   36fd4:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   36fd8:	1e7b      	subs	r3, r7, #1
   36fda:	2b05      	cmp	r3, #5
   36fdc:	f200 81d9 	bhi.w	37392 <ull_conn_llcp+0x41a>
   36fe0:	e8df f013 	tbh	[pc, r3, lsl #1]
   36fe4:	01760024 	.word	0x01760024
   36fe8:	01d700ef 	.word	0x01d700ef
   36fec:	00a700b2 	.word	0x00a700b2
   36ff0:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   36ff4:	2a00      	cmp	r2, #0
   36ff6:	4694      	mov	ip, r2
   36ff8:	f2c0 81db 	blt.w	373b2 <ull_conn_llcp+0x43a>
	    !conn->llcp_enc.pause_rx) {
   36ffc:	f894 7166 	ldrb.w	r7, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   37000:	f017 0801 	ands.w	r8, r7, #1
   37004:	d1cb      	bne.n	36f9e <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   37006:	f894 110d 	ldrb.w	r1, [r4, #269]	; 0x10d
   3700a:	f894 e10c 	ldrb.w	lr, [r4, #268]	; 0x10c
   3700e:	458e      	cmp	lr, r1
   37010:	f000 8305 	beq.w	3761e <ull_conn_llcp+0x6a6>
			conn->llcp_type = LLCP_CONN_UPD;
   37014:	2301      	movs	r3, #1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   37016:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_type = LLCP_CONN_UPD;
   3701a:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3701e:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
			conn->llcp_ack -= 2U;
   37022:	3802      	subs	r0, #2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   37024:	429a      	cmp	r2, r3
			conn->llcp_ack -= 2U;
   37026:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3702a:	d1cc      	bne.n	36fc6 <ull_conn_llcp+0x4e>
			if (event_conn_upd_prep(conn, lazy,
   3702c:	462a      	mov	r2, r5
   3702e:	4631      	mov	r1, r6
   37030:	4620      	mov	r0, r4
   37032:	f7ef fd5d 	bl	26af0 <event_conn_upd_prep>
   37036:	2800      	cmp	r0, #0
   37038:	f040 81b8 	bne.w	373ac <ull_conn_llcp+0x434>
				return -ECANCELED;
   3703c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   37040:	e7b9      	b.n	36fb6 <ull_conn_llcp+0x3e>
   37042:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37046:	2900      	cmp	r1, #0
   37048:	d0ac      	beq.n	36fa4 <ull_conn_llcp+0x2c>
		switch (conn->periph.llcp_type) {
   3704a:	2902      	cmp	r1, #2
   3704c:	f000 8178 	beq.w	37340 <ull_conn_llcp+0x3c8>
   37050:	2906      	cmp	r1, #6
   37052:	d05c      	beq.n	3710e <ull_conn_llcp+0x196>
   37054:	2901      	cmp	r1, #1
   37056:	d063      	beq.n	37120 <ull_conn_llcp+0x1a8>
			LL_ASSERT(0);
   37058:	4ab5      	ldr	r2, [pc, #724]	; (37330 <ull_conn_llcp+0x3b8>)
   3705a:	49b6      	ldr	r1, [pc, #728]	; (37334 <ull_conn_llcp+0x3bc>)
   3705c:	48b6      	ldr	r0, [pc, #728]	; (37338 <ull_conn_llcp+0x3c0>)
   3705e:	f240 5312 	movw	r3, #1298	; 0x512
   37062:	f00b fdf3 	bl	42c4c <printk>
   37066:	4040      	eors	r0, r0
   37068:	f380 8811 	msr	BASEPRI, r0
   3706c:	f04f 0003 	mov.w	r0, #3
   37070:	df02      	svc	2
			break;
   37072:	e797      	b.n	36fa4 <ull_conn_llcp+0x2c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37074:	48b1      	ldr	r0, [pc, #708]	; (3733c <ull_conn_llcp+0x3c4>)
   37076:	f7f8 fc27 	bl	2f8c8 <mem_acquire>
		if (tx) {
   3707a:	2800      	cmp	r0, #0
   3707c:	d03a      	beq.n	370f4 <ull_conn_llcp+0x17c>
			conn->llcp_terminate.ack--;
   3707e:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   37082:	3b01      	subs	r3, #1
   37084:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   37088:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   3708a:	2202      	movs	r2, #2
   3708c:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3708e:	f043 0303 	orr.w	r3, r3, #3
   37092:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   37094:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   37096:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   3709a:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
   3709e:	7202      	strb	r2, [r0, #8]
	if (
   370a0:	b1c3      	cbz	r3, 370d4 <ull_conn_llcp+0x15c>
	    !conn->llcp_enc.pause_tx &&
   370a2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   370a6:	0791      	lsls	r1, r2, #30
   370a8:	d414      	bmi.n	370d4 <ull_conn_llcp+0x15c>
	    !conn->llcp_phy.pause_tx &&
   370aa:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   370ae:	07d2      	lsls	r2, r2, #31
   370b0:	d410      	bmi.n	370d4 <ull_conn_llcp+0x15c>
		if (conn->tx_head == conn->tx_data) {
   370b2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   370b6:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   370b8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   370bc:	f000 856b 	beq.w	37b96 <ull_conn_llcp+0xc1e>
		} else if (!conn->tx_ctrl) {
   370c0:	b96a      	cbnz	r2, 370de <ull_conn_llcp+0x166>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   370c2:	791a      	ldrb	r2, [r3, #4]
   370c4:	f002 0203 	and.w	r2, r2, #3
   370c8:	2a03      	cmp	r2, #3
   370ca:	f000 86ff 	beq.w	37ecc <ull_conn_llcp+0xf54>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   370ce:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   370d2:	e006      	b.n	370e2 <ull_conn_llcp+0x16a>
		if (!conn->tx_ctrl) {
   370d4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   370d8:	2a00      	cmp	r2, #0
   370da:	f000 82f5 	beq.w	376c8 <ull_conn_llcp+0x750>
	tx->next = conn->tx_ctrl_last->next;
   370de:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   370e2:	681a      	ldr	r2, [r3, #0]
   370e4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   370e6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   370e8:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   370ea:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   370ee:	2b00      	cmp	r3, #0
   370f0:	f000 8169 	beq.w	373c6 <ull_conn_llcp+0x44e>
		if (!conn->procedure_expire) {
   370f4:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   370f8:	2800      	cmp	r0, #0
   370fa:	f47f af5b 	bne.w	36fb4 <ull_conn_llcp+0x3c>
			conn->procedure_expire = conn->supervision_reload;
   370fe:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   37102:	2b01      	cmp	r3, #1
   37104:	f240 82dc 	bls.w	376c0 <ull_conn_llcp+0x748>
			conn->procedure_expire = conn->supervision_reload;
   37108:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3710c:	e752      	b.n	36fb4 <ull_conn_llcp+0x3c>
			event_counter = lll->event_counter +
   3710e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   37110:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   37112:	4419      	add	r1, r3
   37114:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   37116:	4620      	mov	r0, r4
   37118:	b289      	uxth	r1, r1
   3711a:	f7fd fd8b 	bl	34c34 <event_phy_upd_ind_prep>
		break;
   3711e:	e741      	b.n	36fa4 <ull_conn_llcp+0x2c>
			if (event_conn_upd_prep(conn, lazy,
   37120:	462a      	mov	r2, r5
   37122:	4631      	mov	r1, r6
   37124:	4620      	mov	r0, r4
   37126:	f7ef fce3 	bl	26af0 <event_conn_upd_prep>
   3712a:	2800      	cmp	r0, #0
   3712c:	f47f af3a 	bne.w	36fa4 <ull_conn_llcp+0x2c>
   37130:	e784      	b.n	3703c <ull_conn_llcp+0xc4>
			event_counter = lll->event_counter +
   37132:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   37134:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   37136:	4419      	add	r1, r3
   37138:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   3713a:	b289      	uxth	r1, r1
   3713c:	4620      	mov	r0, r4
   3713e:	f7fd fd79 	bl	34c34 <event_phy_upd_ind_prep>
		break;
   37142:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   37146:	e72a      	b.n	36f9e <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37148:	487c      	ldr	r0, [pc, #496]	; (3733c <ull_conn_llcp+0x3c4>)
   3714a:	f7f8 fbbd 	bl	2f8c8 <mem_acquire>
	if (tx) {
   3714e:	2800      	cmp	r0, #0
   37150:	f000 812c 	beq.w	373ac <ull_conn_llcp+0x434>
		conn->llcp_ack = conn->llcp_req;
   37154:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37158:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3715c:	7903      	ldrb	r3, [r0, #4]
   3715e:	f043 0303 	orr.w	r3, r3, #3
   37162:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   37164:	2301      	movs	r3, #1
   37166:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   37168:	2312      	movs	r3, #18
   3716a:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   3716c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   37170:	2b00      	cmp	r3, #0
   37172:	f000 82b2 	beq.w	376da <ull_conn_llcp+0x762>
	    !conn->llcp_enc.pause_tx &&
   37176:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   3717a:	0791      	lsls	r1, r2, #30
   3717c:	f100 82ad 	bmi.w	376da <ull_conn_llcp+0x762>
	    !conn->llcp_phy.pause_tx &&
   37180:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37184:	07d2      	lsls	r2, r2, #31
   37186:	f100 82a8 	bmi.w	376da <ull_conn_llcp+0x762>
		if (conn->tx_head == conn->tx_data) {
   3718a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   3718e:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   37190:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37194:	f000 8679 	beq.w	37e8a <ull_conn_llcp+0xf12>
		} else if (!conn->tx_ctrl) {
   37198:	2a00      	cmp	r2, #0
   3719a:	f000 86a2 	beq.w	37ee2 <ull_conn_llcp+0xf6a>
	tx->next = conn->tx_ctrl_last->next;
   3719e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   371a2:	681a      	ldr	r2, [r3, #0]
   371a4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   371a6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   371a8:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   371aa:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   371ae:	2b00      	cmp	r3, #0
   371b0:	f000 83e6 	beq.w	37980 <ull_conn_llcp+0xa08>
		conn->procedure_expire = conn->procedure_reload;
   371b4:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   371b8:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   371bc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   371c0:	e6ed      	b.n	36f9e <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   371c2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   371c6:	f013 0803 	ands.w	r8, r3, #3
   371ca:	f000 814e 	beq.w	3746a <ull_conn_llcp+0x4f2>
		if (lll->role &&
   371ce:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   371d2:	2b00      	cmp	r3, #0
   371d4:	f6bf aee6 	bge.w	36fa4 <ull_conn_llcp+0x2c>
   371d8:	f1b8 0f01 	cmp.w	r8, #1
   371dc:	f47f af31 	bne.w	37042 <ull_conn_llcp+0xca>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   371e0:	4856      	ldr	r0, [pc, #344]	; (3733c <ull_conn_llcp+0x3c4>)
   371e2:	f7f8 fb71 	bl	2f8c8 <mem_acquire>
	if (!tx) {
   371e6:	4607      	mov	r7, r0
   371e8:	2800      	cmp	r0, #0
   371ea:	f000 80df 	beq.w	373ac <ull_conn_llcp+0x434>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   371ee:	7903      	ldrb	r3, [r0, #4]
   371f0:	f043 0303 	orr.w	r3, r3, #3
   371f4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   371f6:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   371fa:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   371fc:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   37200:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   37202:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   37206:	210c      	movs	r1, #12
   37208:	4640      	mov	r0, r8
   3720a:	f003 fa4d 	bl	3a6a8 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   3720e:	4641      	mov	r1, r8
   37210:	2208      	movs	r2, #8
   37212:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
   37216:	f00d fdf4 	bl	44e02 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   3721a:	464a      	mov	r2, r9
   3721c:	f107 0110 	add.w	r1, r7, #16
   37220:	f104 0098 	add.w	r0, r4, #152	; 0x98
   37224:	f00d fded 	bl	44e02 <memcpy>
	    conn->tx_head &&
   37228:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   3722c:	2b00      	cmp	r3, #0
   3722e:	f000 84a6 	beq.w	37b7e <ull_conn_llcp+0xc06>
	    !conn->llcp_enc.pause_tx &&
   37232:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37236:	0791      	lsls	r1, r2, #30
   37238:	f100 84a1 	bmi.w	37b7e <ull_conn_llcp+0xc06>
	    !conn->llcp_phy.pause_tx &&
   3723c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37240:	07d2      	lsls	r2, r2, #31
   37242:	f100 849c 	bmi.w	37b7e <ull_conn_llcp+0xc06>
		if (conn->tx_head == conn->tx_data) {
   37246:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   3724a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3724c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37250:	f000 8670 	beq.w	37f34 <ull_conn_llcp+0xfbc>
		} else if (!conn->tx_ctrl) {
   37254:	2a00      	cmp	r2, #0
   37256:	f000 8767 	beq.w	38128 <ull_conn_llcp+0x11b0>
	tx->next = conn->tx_ctrl_last->next;
   3725a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   3725e:	681a      	ldr	r2, [r3, #0]
   37260:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   37262:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   37264:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   37266:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   3726a:	2b00      	cmp	r3, #0
   3726c:	f000 85a3 	beq.w	37db6 <ull_conn_llcp+0xe3e>
			rx = ll_pdu_rx_alloc();
   37270:	f7fb feb4 	bl	32fdc <ll_pdu_rx_alloc>
			if (!rx) {
   37274:	4607      	mov	r7, r0
   37276:	2800      	cmp	r0, #0
   37278:	f000 8098 	beq.w	373ac <ull_conn_llcp+0x434>
			rx->hdr.handle = conn->lll.handle;
   3727c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3727e:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   37280:	2303      	movs	r3, #3
   37282:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   37284:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   37286:	7f3b      	ldrb	r3, [r7, #28]
   37288:	f043 0303 	orr.w	r3, r3, #3
   3728c:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3728e:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   37290:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   37292:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   37294:	f204 1169 	addw	r1, r4, #361	; 0x169
   37298:	f107 0020 	add.w	r0, r7, #32
   3729c:	f00d fdb1 	bl	44e02 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   372a0:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   372a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   372a8:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   372ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   372b0:	6838      	ldr	r0, [r7, #0]
   372b2:	4639      	mov	r1, r7
   372b4:	f7fb fe64 	bl	32f80 <ll_rx_put>
			ll_rx_sched();
   372b8:	f7fb fe6c 	bl	32f94 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   372bc:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   372c0:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   372c4:	2202      	movs	r2, #2
   372c6:	f362 0301 	bfi	r3, r2, #0, #2
   372ca:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   372ce:	e666      	b.n	36f9e <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   372d0:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   372d2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   372d4:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   372d6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   372da:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   372dc:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   372e0:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   372e2:	d173      	bne.n	373cc <ull_conn_llcp+0x454>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   372e4:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   372e8:	1afb      	subs	r3, r7, r3
   372ea:	0418      	lsls	r0, r3, #16
   372ec:	d45e      	bmi.n	373ac <ull_conn_llcp+0x434>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   372ee:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   372f2:	2b00      	cmp	r3, #0
   372f4:	f2c0 833c 	blt.w	37970 <ull_conn_llcp+0x9f8>
			conn->llcp_ack = conn->llcp_req;
   372f8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   372fc:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   37300:	f104 0734 	add.w	r7, r4, #52	; 0x34
   37304:	2205      	movs	r2, #5
   37306:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   3730a:	4638      	mov	r0, r7
   3730c:	f00d fd79 	bl	44e02 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   37310:	2105      	movs	r1, #5
   37312:	4638      	mov	r0, r7
   37314:	f7f8 fcac 	bl	2fc70 <util_ones_count_get>
		lll->data_chan_count =
   37318:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3731c:	2301      	movs	r3, #1
		lll->data_chan_count =
   3731e:	f360 0c05 	bfi	ip, r0, #0, #6
   37322:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   37326:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   3732a:	fa4f fc8c 	sxtb.w	ip, ip
   3732e:	e636      	b.n	36f9e <ull_conn_llcp+0x26>
   37330:	0004a498 	.word	0x0004a498
   37334:	0004a084 	.word	0x0004a084
   37338:	0004a024 	.word	0x0004a024
   3733c:	200026c4 	.word	0x200026c4
			event_counter = lll->event_counter +
   37340:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   37342:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   37344:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   37348:	440b      	add	r3, r1
   3734a:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   3734c:	f012 0601 	ands.w	r6, r2, #1
			event_counter = lll->event_counter +
   37350:	b29d      	uxth	r5, r3
	if (conn->llcp.chan_map.initiate) {
   37352:	f040 8119 	bne.w	37588 <ull_conn_llcp+0x610>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   37356:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   3735a:	1aeb      	subs	r3, r5, r3
   3735c:	0418      	lsls	r0, r3, #16
   3735e:	f53f ae21 	bmi.w	36fa4 <ull_conn_llcp+0x2c>
		memcpy(&lll->data_chan_map[0],
   37362:	f104 0534 	add.w	r5, r4, #52	; 0x34
   37366:	2205      	movs	r2, #5
   37368:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
			conn->periph.llcp_type = LLCP_NONE;
   3736c:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
   37370:	4628      	mov	r0, r5
   37372:	f00d fd46 	bl	44e02 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   37376:	2105      	movs	r1, #5
   37378:	4628      	mov	r0, r5
   3737a:	f7f8 fc79 	bl	2fc70 <util_ones_count_get>
		lll->data_chan_count =
   3737e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   37382:	2201      	movs	r2, #1
		lll->data_chan_count =
   37384:	f360 0305 	bfi	r3, r0, #0, #6
   37388:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3738c:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   37390:	e608      	b.n	36fa4 <ull_conn_llcp+0x2c>
			LL_ASSERT(0);
   37392:	4ad7      	ldr	r2, [pc, #860]	; (376f0 <ull_conn_llcp+0x778>)
   37394:	49d7      	ldr	r1, [pc, #860]	; (376f4 <ull_conn_llcp+0x77c>)
   37396:	48d8      	ldr	r0, [pc, #864]	; (376f8 <ull_conn_llcp+0x780>)
   37398:	f240 43e1 	movw	r3, #1249	; 0x4e1
   3739c:	f00b fc56 	bl	42c4c <printk>
   373a0:	4040      	eors	r0, r0
   373a2:	f380 8811 	msr	BASEPRI, r0
   373a6:	f04f 0003 	mov.w	r0, #3
   373aa:	df02      	svc	2
			break;
   373ac:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   373b0:	e5f5      	b.n	36f9e <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   373b2:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   373b6:	2900      	cmp	r1, #0
   373b8:	f47f ae47 	bne.w	3704a <ull_conn_llcp+0xd2>
   373bc:	e61e      	b.n	36ffc <ull_conn_llcp+0x84>
				event_len_prep(conn);
   373be:	4620      	mov	r0, r4
   373c0:	f7fd fb40 	bl	34a44 <event_len_prep>
   373c4:	e606      	b.n	36fd4 <ull_conn_llcp+0x5c>
		conn->tx_data_last = tx;
   373c6:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   373ca:	e693      	b.n	370f4 <ull_conn_llcp+0x17c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   373cc:	48cb      	ldr	r0, [pc, #812]	; (376fc <ull_conn_llcp+0x784>)
   373ce:	f7f8 fa7b 	bl	2f8c8 <mem_acquire>
		if (tx) {
   373d2:	4680      	mov	r8, r0
   373d4:	2800      	cmp	r0, #0
   373d6:	d0e9      	beq.n	373ac <ull_conn_llcp+0x434>
						      conn->lll.latency + 6;
   373d8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   373da:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
						      conn->lll.latency + 6;
   373de:	3306      	adds	r3, #6
   373e0:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   373e2:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   373e6:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   373e8:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   373ec:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   373f0:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   373f4:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   373f6:	2308      	movs	r3, #8
   373f8:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   373fa:	2301      	movs	r3, #1
   373fc:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   373fe:	2205      	movs	r2, #5
   37400:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   37404:	3008      	adds	r0, #8
   37406:	f00d fcfc 	bl	44e02 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   3740a:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   3740e:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   37412:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   37416:	2b00      	cmp	r3, #0
   37418:	f000 82b5 	beq.w	37986 <ull_conn_llcp+0xa0e>
	    !conn->llcp_enc.pause_tx &&
   3741c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37420:	0792      	lsls	r2, r2, #30
   37422:	f100 82b0 	bmi.w	37986 <ull_conn_llcp+0xa0e>
	    !conn->llcp_phy.pause_tx &&
   37426:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   3742a:	07d7      	lsls	r7, r2, #31
   3742c:	f100 82ab 	bmi.w	37986 <ull_conn_llcp+0xa0e>
		if (conn->tx_head == conn->tx_data) {
   37430:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37434:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   37436:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   3743a:	f000 855c 	beq.w	37ef6 <ull_conn_llcp+0xf7e>
		} else if (!conn->tx_ctrl) {
   3743e:	2a00      	cmp	r2, #0
   37440:	f000 85ff 	beq.w	38042 <ull_conn_llcp+0x10ca>
	tx->next = conn->tx_ctrl_last->next;
   37444:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37448:	681a      	ldr	r2, [r3, #0]
   3744a:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   3744e:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   37452:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   37456:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   3745a:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3745e:	2b00      	cmp	r3, #0
   37460:	f47f ad9d 	bne.w	36f9e <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
   37464:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   37468:	e599      	b.n	36f9e <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3746a:	48a4      	ldr	r0, [pc, #656]	; (376fc <ull_conn_llcp+0x784>)
   3746c:	f7f8 fa2c 	bl	2f8c8 <mem_acquire>
	if (!tx) {
   37470:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   37474:	4681      	mov	r9, r0
   37476:	2800      	cmp	r0, #0
   37478:	f43f ad91 	beq.w	36f9e <ull_conn_llcp+0x26>
	if (!lll->role) {
   3747c:	f1bc 0f00 	cmp.w	ip, #0
   37480:	f280 8306 	bge.w	37a90 <ull_conn_llcp+0xb18>
	else if (!lll->enc_rx) {
   37484:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   37488:	0719      	lsls	r1, r3, #28
   3748a:	f100 83ac 	bmi.w	37be6 <ull_conn_llcp+0xc6e>
		if (conn->llcp.encryption.error_code) {
   3748e:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   37492:	f1b8 0f00 	cmp.w	r8, #0
   37496:	f040 8492 	bne.w	37dbe <ull_conn_llcp+0xe46>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   3749a:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   3749e:	463b      	mov	r3, r7
   374a0:	4642      	mov	r2, r8
   374a2:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   374a6:	f204 1071 	addw	r0, r4, #369	; 0x171
   374aa:	f004 fef1 	bl	3c290 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   374ae:	4639      	mov	r1, r7
   374b0:	2210      	movs	r2, #16
   374b2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   374b6:	f00d fca4 	bl	44e02 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   374ba:	2208      	movs	r2, #8
   374bc:	f104 0194 	add.w	r1, r4, #148	; 0x94
   374c0:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   374c4:	f00d fc9d 	bl	44e02 <memcpy>
			lll->ccm_rx.direction = 1U;
   374c8:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   374cc:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   374d0:	f043 0301 	orr.w	r3, r3, #1
   374d4:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   374d8:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   374dc:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   374e0:	f368 0300 	bfi	r3, r8, #0, #1
   374e4:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   374e8:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   374ec:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   374f0:	f043 0308 	orr.w	r3, r3, #8
   374f4:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   374f8:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   374fc:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37500:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   37504:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   37508:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   3750c:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   37510:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   37514:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37518:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3751c:	2301      	movs	r3, #1
   3751e:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   37522:	2305      	movs	r3, #5
   37524:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   37528:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   3752c:	2b00      	cmp	r3, #0
   3752e:	f000 8390 	beq.w	37c52 <ull_conn_llcp+0xcda>
	    !conn->llcp_enc.pause_tx &&
   37532:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37536:	0791      	lsls	r1, r2, #30
   37538:	f100 838b 	bmi.w	37c52 <ull_conn_llcp+0xcda>
	    !conn->llcp_phy.pause_tx &&
   3753c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37540:	07d2      	lsls	r2, r2, #31
   37542:	f100 8386 	bmi.w	37c52 <ull_conn_llcp+0xcda>
		if (conn->tx_head == conn->tx_data) {
   37546:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   3754a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3754c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37550:	f000 85f4 	beq.w	3813c <ull_conn_llcp+0x11c4>
		} else if (!conn->tx_ctrl) {
   37554:	2a00      	cmp	r2, #0
   37556:	f000 86b5 	beq.w	382c4 <ull_conn_llcp+0x134c>
	tx->next = conn->tx_ctrl_last->next;
   3755a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   3755e:	681a      	ldr	r2, [r3, #0]
   37560:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   37564:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   37568:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   3756c:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37570:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   37574:	2b00      	cmp	r3, #0
   37576:	f000 8369 	beq.w	37c4c <ull_conn_llcp+0xcd4>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3757a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   3757e:	f043 0303 	orr.w	r3, r3, #3
   37582:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   37586:	e50a      	b.n	36f9e <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37588:	485c      	ldr	r0, [pc, #368]	; (376fc <ull_conn_llcp+0x784>)
   3758a:	f7f8 f99d 	bl	2f8c8 <mem_acquire>
		if (tx) {
   3758e:	4606      	mov	r6, r0
   37590:	2800      	cmp	r0, #0
   37592:	f43f ad07 	beq.w	36fa4 <ull_conn_llcp+0x2c>
						      conn->lll.latency + 6;
   37596:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   37598:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3759c:	7902      	ldrb	r2, [r0, #4]
						      conn->lll.latency + 6;
   3759e:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   375a0:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   375a4:	442b      	add	r3, r5
			conn->llcp.chan_map.initiate = 0U;
   375a6:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   375aa:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   375ae:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
   375b2:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   375b4:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   375b6:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   375b8:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   375ba:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   375bc:	2205      	movs	r2, #5
   375be:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   375c2:	3008      	adds	r0, #8
   375c4:	f00d fc1d 	bl	44e02 <memcpy>
	    conn->tx_head &&
   375c8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   375cc:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   375d0:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
   375d4:	2b00      	cmp	r3, #0
   375d6:	f000 81e2 	beq.w	3799e <ull_conn_llcp+0xa26>
	    !conn->llcp_enc.pause_tx &&
   375da:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   375de:	0797      	lsls	r7, r2, #30
   375e0:	f100 81dd 	bmi.w	3799e <ull_conn_llcp+0xa26>
	    !conn->llcp_phy.pause_tx &&
   375e4:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   375e8:	07d5      	lsls	r5, r2, #31
   375ea:	f100 81d8 	bmi.w	3799e <ull_conn_llcp+0xa26>
		if (conn->tx_head == conn->tx_data) {
   375ee:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   375f2:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   375f4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   375f8:	f000 848e 	beq.w	37f18 <ull_conn_llcp+0xfa0>
		} else if (!conn->tx_ctrl) {
   375fc:	2a00      	cmp	r2, #0
   375fe:	f000 857c 	beq.w	380fa <ull_conn_llcp+0x1182>
	tx->next = conn->tx_ctrl_last->next;
   37602:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37606:	681a      	ldr	r2, [r3, #0]
   37608:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
   3760a:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
   3760c:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
   3760e:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37612:	2b00      	cmp	r3, #0
   37614:	f47f acc6 	bne.w	36fa4 <ull_conn_llcp+0x2c>
		conn->tx_data_last = tx;
   37618:	f8c4 61d4 	str.w	r6, [r4, #468]	; 0x1d4
   3761c:	e4c2      	b.n	36fa4 <ull_conn_llcp+0x2c>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   3761e:	f894 e121 	ldrb.w	lr, [r4, #289]	; 0x121
   37622:	f894 9120 	ldrb.w	r9, [r4, #288]	; 0x120
   37626:	45ce      	cmp	lr, r9
   37628:	d06a      	beq.n	37700 <ull_conn_llcp+0x788>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   3762a:	ebae 0e09 	sub.w	lr, lr, r9
   3762e:	f01e 0f01 	tst.w	lr, #1
   37632:	f43f acb4 	beq.w	36f9e <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   37636:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   3763a:	f013 0701 	ands.w	r7, r3, #1
   3763e:	f000 81b9 	beq.w	379b4 <ull_conn_llcp+0xa3c>
		rx = ll_pdu_rx_alloc();
   37642:	f7fb fccb 	bl	32fdc <ll_pdu_rx_alloc>
		if (!rx) {
   37646:	4607      	mov	r7, r0
   37648:	2800      	cmp	r0, #0
   3764a:	f000 818b 	beq.w	37964 <ull_conn_llcp+0x9ec>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   3764e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   37652:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   37656:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   37658:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3765a:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3765c:	f043 0303 	orr.w	r3, r3, #3
   37660:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   37662:	2309      	movs	r3, #9
   37664:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   37666:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   37668:	2303      	movs	r3, #3
   3766a:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   3766c:	4641      	mov	r1, r8
   3766e:	2208      	movs	r2, #8
   37670:	3020      	adds	r0, #32
   37672:	f00d fbd1 	bl	44e18 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
   37676:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
	sys_put_le16(val >> 16, &dst[2]);
   3767a:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   3767c:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
   37680:	f3c2 2207 	ubfx	r2, r2, #8, #8
   37684:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
   37688:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   3768a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   3768e:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
   37692:	f3c3 2307 	ubfx	r3, r3, #8, #8
   37696:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   37698:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
   3769c:	0a12      	lsrs	r2, r2, #8
   3769e:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
   376a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   376a6:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
   376aa:	4639      	mov	r1, r7
		ll_rx_put(rx->hdr.link, rx);
   376ac:	6808      	ldr	r0, [r1, #0]
   376ae:	f7fb fc67 	bl	32f80 <ll_rx_put>
		ll_rx_sched();
   376b2:	f7fb fc6f 	bl	32f94 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   376b6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   376ba:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   376be:	e466      	b.n	36f8e <ull_conn_llcp+0x16>
				conn->procedure_expire++;
   376c0:	3301      	adds	r3, #1
   376c2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   376c6:	e476      	b.n	36fb6 <ull_conn_llcp+0x3e>
			tx->next = conn->tx_head;
   376c8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   376ca:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   376ce:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   376d2:	2b00      	cmp	r3, #0
   376d4:	f47f ad0e 	bne.w	370f4 <ull_conn_llcp+0x17c>
   376d8:	e675      	b.n	373c6 <ull_conn_llcp+0x44e>
		if (!conn->tx_ctrl) {
   376da:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   376de:	2a00      	cmp	r2, #0
   376e0:	f47f ad5d 	bne.w	3719e <ull_conn_llcp+0x226>
			tx->next = conn->tx_head;
   376e4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   376e6:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   376ea:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   376ee:	e55e      	b.n	371ae <ull_conn_llcp+0x236>
   376f0:	0004a498 	.word	0x0004a498
   376f4:	0004a084 	.word	0x0004a084
   376f8:	0004a024 	.word	0x0004a024
   376fc:	200026c4 	.word	0x200026c4
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   37700:	f894 e139 	ldrb.w	lr, [r4, #313]	; 0x139
   37704:	f894 8138 	ldrb.w	r8, [r4, #312]	; 0x138
   37708:	45c6      	cmp	lr, r8
   3770a:	d030      	beq.n	3776e <ull_conn_llcp+0x7f6>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   3770c:	ebae 0e08 	sub.w	lr, lr, r8
   37710:	f01e 0f01 	tst.w	lr, #1
   37714:	f43f ac43 	beq.w	36f9e <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   37718:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   3771c:	07d8      	lsls	r0, r3, #31
   3771e:	f140 82f6 	bpl.w	37d0e <ull_conn_llcp+0xd96>
	} else if (conn->llcp_version.rx) {
   37722:	079b      	lsls	r3, r3, #30
   37724:	f140 82e5 	bpl.w	37cf2 <ull_conn_llcp+0xd7a>
		rx = ll_pdu_rx_alloc();
   37728:	f7fb fc58 	bl	32fdc <ll_pdu_rx_alloc>
		if (!rx) {
   3772c:	4601      	mov	r1, r0
   3772e:	2800      	cmp	r0, #0
   37730:	f000 8118 	beq.w	37964 <ull_conn_llcp+0x9ec>
		conn->llcp_version.ack = conn->llcp_version.req;
   37734:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   37738:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
   3773c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3773e:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   37740:	2303      	movs	r3, #3
   37742:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   37744:	7f03      	ldrb	r3, [r0, #28]
   37746:	f043 0303 	orr.w	r3, r3, #3
   3774a:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   3774c:	2306      	movs	r3, #6
   3774e:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   37750:	230c      	movs	r3, #12
   37752:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   37754:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
   37758:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   3775c:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
   37760:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   37764:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   37768:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
   3776c:	e79e      	b.n	376ac <ull_conn_llcp+0x734>
		} else if (conn->llcp_conn_param.ack !=
   3776e:	f894 8185 	ldrb.w	r8, [r4, #389]	; 0x185
   37772:	f894 e184 	ldrb.w	lr, [r4, #388]	; 0x184
   37776:	45f0      	cmp	r8, lr
   37778:	f000 81f2 	beq.w	37b60 <ull_conn_llcp+0xbe8>
	return conn_upd_curr && (conn_upd_curr != conn);
   3777c:	f8df 8308 	ldr.w	r8, [pc, #776]	; 37a88 <ull_conn_llcp+0xb10>
			event_counter = lll->event_counter +
   37780:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	return conn_upd_curr && (conn_upd_curr != conn);
   37784:	f8d8 e000 	ldr.w	lr, [r8]
					lll->latency_prepare + lazy;
   37788:	f8b4 a02e 	ldrh.w	sl, [r4, #46]	; 0x2e
	return conn_upd_curr && (conn_upd_curr != conn);
   3778c:	f1be 0f00 	cmp.w	lr, #0
   37790:	f000 835a 	beq.w	37e48 <ull_conn_llcp+0xed0>
   37794:	4574      	cmp	r4, lr
   37796:	f47f ac02 	bne.w	36f9e <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   3779a:	f894 e186 	ldrb.w	lr, [r4, #390]	; 0x186
   3779e:	f00e 0e0f 	and.w	lr, lr, #15
   377a2:	f1be 0f06 	cmp.w	lr, #6
   377a6:	f200 8636 	bhi.w	38416 <ull_conn_llcp+0x149e>
   377aa:	f20f 0b08 	addw	fp, pc, #8
   377ae:	f85b f02e 	ldr.w	pc, [fp, lr, lsl #2]
   377b2:	bf00      	nop
   377b4:	000378a5 	.word	0x000378a5
   377b8:	00037821 	.word	0x00037821
   377bc:	000377d1 	.word	0x000377d1
   377c0:	00036f8f 	.word	0x00036f8f
   377c4:	00036f8f 	.word	0x00036f8f
   377c8:	00036f8f 	.word	0x00036f8f
   377cc:	00036f8f 	.word	0x00036f8f
	if (conn->llcp_enc.pause_tx) {
   377d0:	07bb      	lsls	r3, r7, #30
   377d2:	f53f abe4 	bmi.w	36f9e <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   377d6:	f7fb fc01 	bl	32fdc <ll_pdu_rx_alloc>
	if (!rx) {
   377da:	4601      	mov	r1, r0
   377dc:	2800      	cmp	r0, #0
   377de:	f000 80c1 	beq.w	37964 <ull_conn_llcp+0x9ec>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   377e2:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   377e6:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   377e8:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   377ea:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   377ee:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   377f2:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   377f4:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
   377f8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   377fa:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   377fc:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   377fe:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   37800:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   37804:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   37806:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   3780a:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   3780c:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   37810:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   37812:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   37816:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   37818:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   3781a:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3781c:	77cb      	strb	r3, [r1, #31]
	ll_rx_put(rx->hdr.link, rx);
   3781e:	e745      	b.n	376ac <ull_conn_llcp+0x734>
	if (conn->llcp_conn_param.status) {
   37820:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   37824:	2b00      	cmp	r3, #0
   37826:	f040 83b5 	bne.w	37f94 <ull_conn_llcp+0x101c>
	if (!conn->lll.role) {
   3782a:	2a00      	cmp	r2, #0
   3782c:	f2c0 84c1 	blt.w	381b2 <ull_conn_llcp+0x123a>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   37830:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   37834:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   37838:	2006      	movs	r0, #6
   3783a:	f360 0203 	bfi	r2, r0, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   3783e:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   37842:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   37846:	2501      	movs	r5, #1
		interval_max = conn->llcp_conn_param.interval_max;
   37848:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
   3784c:	f884 511c 	strb.w	r5, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
   37850:	2800      	cmp	r0, #0
   37852:	f000 84a0 	beq.w	38196 <ull_conn_llcp+0x121e>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   37856:	fbb2 f3f0 	udiv	r3, r2, r0
   3785a:	fb13 f300 	smulbb	r3, r3, r0
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   3785e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   37862:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   37864:	4298      	cmp	r0, r3
   37866:	bf98      	it	ls
   37868:	461a      	movls	r2, r3
   3786a:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3786e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   37872:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   37876:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
   3787a:	f8a4 0112 	strh.w	r0, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3787e:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   37882:	00db      	lsls	r3, r3, #3
   37884:	f022 020f 	bic.w	r2, r2, #15
   37888:	f043 0302 	orr.w	r3, r3, #2
   3788c:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   3788e:	3901      	subs	r1, #1
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   37890:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   37894:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   37898:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   3789c:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   378a0:	f7ff bb80 	b.w	36fa4 <ull_conn_llcp+0x2c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   378a4:	4879      	ldr	r0, [pc, #484]	; (37a8c <ull_conn_llcp+0xb14>)
   378a6:	f7f8 f80f 	bl	2f8c8 <mem_acquire>
	if (!tx) {
   378aa:	4602      	mov	r2, r0
   378ac:	2800      	cmp	r0, #0
   378ae:	d059      	beq.n	37964 <ull_conn_llcp+0x9ec>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   378b0:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   378b2:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   378b6:	f043 0303 	orr.w	r3, r3, #3
   378ba:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   378bc:	2318      	movs	r3, #24
   378be:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   378c0:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
   378c4:	8110      	strh	r0, [r2, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   378c6:	f8b4 018a 	ldrh.w	r0, [r4, #394]	; 0x18a
   378ca:	8150      	strh	r0, [r2, #10]
	p->preferred_periodicity = 0U;
   378cc:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   378ce:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
   378d2:	8190      	strh	r0, [r2, #12]
			event_counter = lll->event_counter +
   378d4:	eb09 010a 	add.w	r1, r9, sl
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   378d8:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
	p->preferred_periodicity = 0U;
   378dc:	7413      	strb	r3, [r2, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   378de:	74d3      	strb	r3, [r2, #19]
   378e0:	7513      	strb	r3, [r2, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   378e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   378e6:	81d0      	strh	r0, [r2, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
   378e8:	7553      	strb	r3, [r2, #21]
   378ea:	7593      	strb	r3, [r2, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   378ec:	75d3      	strb	r3, [r2, #23]
   378ee:	7613      	strb	r3, [r2, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   378f0:	7653      	strb	r3, [r2, #25]
   378f2:	7693      	strb	r3, [r2, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   378f4:	76d3      	strb	r3, [r2, #27]
   378f6:	7713      	strb	r3, [r2, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   378f8:	7753      	strb	r3, [r2, #29]
   378fa:	7793      	strb	r3, [r2, #30]
			event_counter = lll->event_counter +
   378fc:	4431      	add	r1, r6
	conn->procedure_expire = conn->procedure_reload;
   378fe:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   37902:	200f      	movs	r0, #15
   37904:	71d0      	strb	r0, [r2, #7]
	conn->procedure_expire = conn->procedure_reload;
   37906:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   3790a:	f8a2 1011 	strh.w	r1, [r2, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3790e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   37912:	2104      	movs	r1, #4
   37914:	f361 0303 	bfi	r3, r1, #0, #4
   37918:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	    conn->tx_head &&
   3791c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   37920:	2b00      	cmp	r3, #0
   37922:	f000 8315 	beq.w	37f50 <ull_conn_llcp+0xfd8>
	    !conn->llcp_enc.pause_tx &&
   37926:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   3792a:	078f      	lsls	r7, r1, #30
   3792c:	f100 8310 	bmi.w	37f50 <ull_conn_llcp+0xfd8>
	    !conn->llcp_phy.pause_tx &&
   37930:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   37934:	07c8      	lsls	r0, r1, #31
   37936:	f100 830b 	bmi.w	37f50 <ull_conn_llcp+0xfd8>
		if (conn->tx_head == conn->tx_data) {
   3793a:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   3793e:	428b      	cmp	r3, r1
		if (!conn->tx_ctrl) {
   37940:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37944:	f000 84dc 	beq.w	38300 <ull_conn_llcp+0x1388>
		} else if (!conn->tx_ctrl) {
   37948:	2900      	cmp	r1, #0
   3794a:	f000 84ed 	beq.w	38328 <ull_conn_llcp+0x13b0>
	tx->next = conn->tx_ctrl_last->next;
   3794e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37952:	6819      	ldr	r1, [r3, #0]
   37954:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   37956:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
   37958:	6813      	ldr	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   3795a:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   3795e:	2b00      	cmp	r3, #0
   37960:	f000 8367 	beq.w	38032 <ull_conn_llcp+0x10ba>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37964:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37968:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		return;
   3796c:	f7ff bb0f 	b.w	36f8e <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37970:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   37974:	2b00      	cmp	r3, #0
   37976:	f43f acbf 	beq.w	372f8 <ull_conn_llcp+0x380>
			conn->periph.llcp_type = LLCP_NONE;
   3797a:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   3797e:	e4bf      	b.n	37300 <ull_conn_llcp+0x388>
		conn->tx_data_last = tx;
   37980:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   37984:	e416      	b.n	371b4 <ull_conn_llcp+0x23c>
		if (!conn->tx_ctrl) {
   37986:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   3798a:	2a00      	cmp	r2, #0
   3798c:	f47f ad5a 	bne.w	37444 <ull_conn_llcp+0x4cc>
			tx->next = conn->tx_head;
   37990:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   37994:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37998:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   3799c:	e55d      	b.n	3745a <ull_conn_llcp+0x4e2>
		if (!conn->tx_ctrl) {
   3799e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   379a2:	2a00      	cmp	r2, #0
   379a4:	f47f ae2d 	bne.w	37602 <ull_conn_llcp+0x68a>
			tx->next = conn->tx_head;
   379a8:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   379aa:	e9c4 6671 	strd	r6, r6, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   379ae:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
   379b2:	e62e      	b.n	37612 <ull_conn_llcp+0x69a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   379b4:	4835      	ldr	r0, [pc, #212]	; (37a8c <ull_conn_llcp+0xb14>)
   379b6:	f7f7 ff87 	bl	2f8c8 <mem_acquire>
	if (tx) {
   379ba:	4680      	mov	r8, r0
   379bc:	2800      	cmp	r0, #0
   379be:	d0d1      	beq.n	37964 <ull_conn_llcp+0x9ec>
		conn->llcp_feature.ack--;
   379c0:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   379c4:	3b01      	subs	r3, #1
   379c6:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   379ca:	2309      	movs	r3, #9
   379cc:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   379ce:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   379d2:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   379d4:	7903      	ldrb	r3, [r0, #4]
   379d6:	f043 0303 	orr.w	r3, r3, #3
   379da:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   379dc:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   379e0:	bfac      	ite	ge
   379e2:	2308      	movge	r3, #8
   379e4:	230e      	movlt	r3, #14
   379e6:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   379e8:	4639      	mov	r1, r7
   379ea:	4410      	add	r0, r2
   379ec:	f00d fa14 	bl	44e18 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
   379f0:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   379f4:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   379f6:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
   379fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
   379fe:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
   37a02:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   37a04:	f888 300c 	strb.w	r3, [r8, #12]
   37a08:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
   37a0c:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   37a10:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
   37a14:	0a09      	lsrs	r1, r1, #8
   37a16:	0a12      	lsrs	r2, r2, #8
   37a18:	f888 100b 	strb.w	r1, [r8, #11]
   37a1c:	f888 300d 	strb.w	r3, [r8, #13]
   37a20:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
   37a24:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   37a28:	2b00      	cmp	r3, #0
   37a2a:	f000 80d0 	beq.w	37bce <ull_conn_llcp+0xc56>
	    !conn->llcp_enc.pause_tx &&
   37a2e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37a32:	0792      	lsls	r2, r2, #30
   37a34:	f100 80cb 	bmi.w	37bce <ull_conn_llcp+0xc56>
	    !conn->llcp_phy.pause_tx &&
   37a38:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37a3c:	07d7      	lsls	r7, r2, #31
   37a3e:	f100 80c6 	bmi.w	37bce <ull_conn_llcp+0xc56>
		if (conn->tx_head == conn->tx_data) {
   37a42:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37a46:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   37a48:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37a4c:	f000 82e1 	beq.w	38012 <ull_conn_llcp+0x109a>
		} else if (!conn->tx_ctrl) {
   37a50:	2a00      	cmp	r2, #0
   37a52:	f000 8415 	beq.w	38280 <ull_conn_llcp+0x1308>
	tx->next = conn->tx_ctrl_last->next;
   37a56:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37a5a:	681a      	ldr	r2, [r3, #0]
   37a5c:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   37a60:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   37a64:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   37a68:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37a6c:	2b00      	cmp	r3, #0
   37a6e:	f000 821a 	beq.w	37ea6 <ull_conn_llcp+0xf2e>
		conn->procedure_expire = conn->procedure_reload;
   37a72:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37a76:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37a7a:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
   37a7e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   37a82:	f7ff ba84 	b.w	36f8e <ull_conn_llcp+0x16>
   37a86:	bf00      	nop
   37a88:	20002630 	.word	0x20002630
   37a8c:	200026c4 	.word	0x200026c4
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   37a90:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   37a94:	463b      	mov	r3, r7
   37a96:	4642      	mov	r2, r8
   37a98:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   37a9c:	f204 1071 	addw	r0, r4, #369	; 0x171
   37aa0:	f004 fbf6 	bl	3c290 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   37aa4:	4639      	mov	r1, r7
   37aa6:	2210      	movs	r2, #16
   37aa8:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   37aac:	f00d f9a9 	bl	44e02 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   37ab0:	2208      	movs	r2, #8
   37ab2:	f104 0194 	add.w	r1, r4, #148	; 0x94
   37ab6:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   37aba:	f00d f9a2 	bl	44e02 <memcpy>
		lll->enc_rx = 1;
   37abe:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   37ac2:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
   37ac6:	f023 0318 	bic.w	r3, r3, #24
   37aca:	f043 0318 	orr.w	r3, r3, #24
   37ace:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
   37ad2:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   37ad6:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0;
   37ada:	f368 0300 	bfi	r3, r8, #0, #1
   37ade:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   37ae2:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   37ae6:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->ccm_tx.direction = 1;
   37aea:	f043 0301 	orr.w	r3, r3, #1
   37aee:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   37af2:	2301      	movs	r3, #1
		lll->ccm_tx.counter = 0;
   37af4:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   37af8:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   37afc:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   37b00:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   37b04:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   37b08:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37b0c:	f899 2004 	ldrb.w	r2, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   37b10:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   37b14:	2306      	movs	r3, #6
   37b16:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   37b1a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37b1e:	f042 0203 	orr.w	r2, r2, #3
   37b22:	f889 2004 	strb.w	r2, [r9, #4]
	if (
   37b26:	2b00      	cmp	r3, #0
   37b28:	d045      	beq.n	37bb6 <ull_conn_llcp+0xc3e>
	    !conn->llcp_enc.pause_tx &&
   37b2a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37b2e:	0797      	lsls	r7, r2, #30
   37b30:	d441      	bmi.n	37bb6 <ull_conn_llcp+0xc3e>
	    !conn->llcp_phy.pause_tx &&
   37b32:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37b36:	07d0      	lsls	r0, r2, #31
   37b38:	d43d      	bmi.n	37bb6 <ull_conn_llcp+0xc3e>
		if (conn->tx_head == conn->tx_data) {
   37b3a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37b3e:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   37b40:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37b44:	f000 820d 	beq.w	37f62 <ull_conn_llcp+0xfea>
		} else if (!conn->tx_ctrl) {
   37b48:	2a00      	cmp	r2, #0
   37b4a:	f47f ad06 	bne.w	3755a <ull_conn_llcp+0x5e2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   37b4e:	791a      	ldrb	r2, [r3, #4]
   37b50:	f002 0203 	and.w	r2, r2, #3
   37b54:	2a03      	cmp	r2, #3
   37b56:	f000 840d 	beq.w	38374 <ull_conn_llcp+0x13fc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   37b5a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   37b5e:	e4fc      	b.n	3755a <ull_conn_llcp+0x5e2>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   37b60:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   37b64:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   37b68:	4299      	cmp	r1, r3
   37b6a:	d07c      	beq.n	37c66 <ull_conn_llcp+0xcee>
			event_len_prep(conn);
   37b6c:	4620      	mov	r0, r4
   37b6e:	f7fc ff69 	bl	34a44 <event_len_prep>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   37b72:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37b76:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   37b7a:	f7ff ba08 	b.w	36f8e <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
   37b7e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37b82:	2a00      	cmp	r2, #0
   37b84:	f47f ab69 	bne.w	3725a <ull_conn_llcp+0x2e2>
			tx->next = conn->tx_head;
   37b88:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   37b8a:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37b8e:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   37b92:	f7ff bb6a 	b.w	3726a <ull_conn_llcp+0x2f2>
			conn->tx_data = conn->tx_data->next;
   37b96:	6819      	ldr	r1, [r3, #0]
   37b98:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37b9c:	2a00      	cmp	r2, #0
   37b9e:	f47f aa9e 	bne.w	370de <ull_conn_llcp+0x166>
			tx->next = conn->tx_head->next;
   37ba2:	681a      	ldr	r2, [r3, #0]
   37ba4:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   37ba6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   37ba8:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   37baa:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   37bae:	2b00      	cmp	r3, #0
   37bb0:	f47f aaa0 	bne.w	370f4 <ull_conn_llcp+0x17c>
   37bb4:	e407      	b.n	373c6 <ull_conn_llcp+0x44e>
		if (!conn->tx_ctrl) {
   37bb6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37bba:	2a00      	cmp	r2, #0
   37bbc:	f47f accd 	bne.w	3755a <ull_conn_llcp+0x5e2>
			tx->next = conn->tx_head;
   37bc0:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   37bc4:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37bc8:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   37bcc:	e4d0      	b.n	37570 <ull_conn_llcp+0x5f8>
		if (!conn->tx_ctrl) {
   37bce:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37bd2:	2a00      	cmp	r2, #0
   37bd4:	f47f af3f 	bne.w	37a56 <ull_conn_llcp+0xade>
			tx->next = conn->tx_head;
   37bd8:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   37bdc:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37be0:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   37be4:	e742      	b.n	37a6c <ull_conn_llcp+0xaf4>
	conn->lll.enc_tx = 1;
   37be6:	f043 0310 	orr.w	r3, r3, #16
   37bea:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   37bee:	2301      	movs	r3, #1
   37bf0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37bf2:	7903      	ldrb	r3, [r0, #4]
   37bf4:	f043 0303 	orr.w	r3, r3, #3
   37bf8:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   37bfa:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   37bfe:	2206      	movs	r2, #6
   37c00:	71c2      	strb	r2, [r0, #7]
	if (
   37c02:	2b00      	cmp	r3, #0
   37c04:	f000 80cd 	beq.w	37da2 <ull_conn_llcp+0xe2a>
	    !conn->llcp_enc.pause_tx &&
   37c08:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37c0c:	0797      	lsls	r7, r2, #30
   37c0e:	f100 80c8 	bmi.w	37da2 <ull_conn_llcp+0xe2a>
	    !conn->llcp_phy.pause_tx &&
   37c12:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37c16:	07d0      	lsls	r0, r2, #31
   37c18:	f100 80c3 	bmi.w	37da2 <ull_conn_llcp+0xe2a>
		if (conn->tx_head == conn->tx_data) {
   37c1c:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37c20:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   37c22:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37c26:	f000 8271 	beq.w	3810c <ull_conn_llcp+0x1194>
		} else if (!conn->tx_ctrl) {
   37c2a:	2a00      	cmp	r2, #0
   37c2c:	f000 82aa 	beq.w	38184 <ull_conn_llcp+0x120c>
	tx->next = conn->tx_ctrl_last->next;
   37c30:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37c34:	681a      	ldr	r2, [r3, #0]
   37c36:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   37c3a:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   37c3e:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   37c42:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37c46:	2b00      	cmp	r3, #0
   37c48:	f47f ac97 	bne.w	3757a <ull_conn_llcp+0x602>
		conn->tx_data_last = tx;
   37c4c:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   37c50:	e493      	b.n	3757a <ull_conn_llcp+0x602>
		if (!conn->tx_ctrl) {
   37c52:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37c56:	2a00      	cmp	r2, #0
   37c58:	f47f ac7f 	bne.w	3755a <ull_conn_llcp+0x5e2>
			tx->next = conn->tx_head;
   37c5c:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   37c60:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37c64:	e480      	b.n	37568 <ull_conn_llcp+0x5f0>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   37c66:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   37c6a:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   37c6e:	4299      	cmp	r1, r3
   37c70:	f43f a995 	beq.w	36f9e <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   37c74:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
   37c78:	f001 0703 	and.w	r7, r1, #3
   37c7c:	2f03      	cmp	r7, #3
   37c7e:	f000 81ea 	beq.w	38056 <ull_conn_llcp+0x10de>
   37c82:	2f00      	cmp	r7, #0
   37c84:	f47f a98a 	bne.w	36f9c <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37c88:	48be      	ldr	r0, [pc, #760]	; (37f84 <ull_conn_llcp+0x100c>)
   37c8a:	f7f7 fe1d 	bl	2f8c8 <mem_acquire>
		if (!tx) {
   37c8e:	4601      	mov	r1, r0
   37c90:	2800      	cmp	r0, #0
   37c92:	f43f ae67 	beq.w	37964 <ull_conn_llcp+0x9ec>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   37c96:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   37c9a:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   37c9e:	2201      	movs	r2, #1
   37ca0:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   37ca4:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   37ca8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   37cac:	f3c3 0782 	ubfx	r7, r3, #2, #3
   37cb0:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   37cb4:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   37cb8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   37cbc:	f360 07c3 	bfi	r7, r0, #3, #1
   37cc0:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   37cc4:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37cc8:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   37cca:	f367 02c5 	bfi	r2, r7, #3, #3
   37cce:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   37cd2:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   37cd6:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37cd8:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   37cdc:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   37cde:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   37ce0:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   37ce2:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   37ce4:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   37ce6:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   37ce8:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   37cea:	4620      	mov	r0, r4
   37cec:	f7fc fb9e 	bl	3442c <ctrl_tx_pause_enqueue>
   37cf0:	e6bf      	b.n	37a72 <ull_conn_llcp+0xafa>
		LL_ASSERT(0);
   37cf2:	4aa5      	ldr	r2, [pc, #660]	; (37f88 <ull_conn_llcp+0x1010>)
   37cf4:	49a5      	ldr	r1, [pc, #660]	; (37f8c <ull_conn_llcp+0x1014>)
   37cf6:	f640 63a1 	movw	r3, #3745	; 0xea1
		LL_ASSERT(0);
   37cfa:	48a5      	ldr	r0, [pc, #660]	; (37f90 <ull_conn_llcp+0x1018>)
   37cfc:	f00a ffa6 	bl	42c4c <printk>
   37d00:	4040      	eors	r0, r0
   37d02:	f380 8811 	msr	BASEPRI, r0
   37d06:	f04f 0003 	mov.w	r0, #3
   37d0a:	df02      	svc	2
		break;
   37d0c:	e62a      	b.n	37964 <ull_conn_llcp+0x9ec>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37d0e:	489d      	ldr	r0, [pc, #628]	; (37f84 <ull_conn_llcp+0x100c>)
   37d10:	f7f7 fdda 	bl	2f8c8 <mem_acquire>
		if (tx) {
   37d14:	2800      	cmp	r0, #0
   37d16:	f43f ae25 	beq.w	37964 <ull_conn_llcp+0x9ec>
			conn->llcp_version.ack--;
   37d1a:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   37d1e:	3b01      	subs	r3, #1
   37d20:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   37d24:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   37d28:	f043 0301 	orr.w	r3, r3, #1
   37d2c:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   37d30:	7903      	ldrb	r3, [r0, #4]
   37d32:	f043 0303 	orr.w	r3, r3, #3
   37d36:	7103      	strb	r3, [r0, #4]
			pdu->len =
   37d38:	2306      	movs	r3, #6
   37d3a:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   37d3c:	230c      	movs	r3, #12
   37d3e:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   37d40:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   37d42:	f06f 030e 	mvn.w	r3, #14
   37d46:	7243      	strb	r3, [r0, #9]
   37d48:	2305      	movs	r3, #5
   37d4a:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   37d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37d50:	72c3      	strb	r3, [r0, #11]
   37d52:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   37d54:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   37d58:	2b00      	cmp	r3, #0
   37d5a:	f000 80ae 	beq.w	37eba <ull_conn_llcp+0xf42>
	    !conn->llcp_enc.pause_tx &&
   37d5e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37d62:	0791      	lsls	r1, r2, #30
   37d64:	f100 80a9 	bmi.w	37eba <ull_conn_llcp+0xf42>
	    !conn->llcp_phy.pause_tx &&
   37d68:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37d6c:	07d2      	lsls	r2, r2, #31
   37d6e:	f100 80a4 	bmi.w	37eba <ull_conn_llcp+0xf42>
		if (conn->tx_head == conn->tx_data) {
   37d72:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37d76:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   37d78:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37d7c:	f000 8289 	beq.w	38292 <ull_conn_llcp+0x131a>
		} else if (!conn->tx_ctrl) {
   37d80:	2a00      	cmp	r2, #0
   37d82:	f000 8307 	beq.w	38394 <ull_conn_llcp+0x141c>
	tx->next = conn->tx_ctrl_last->next;
   37d86:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37d8a:	681a      	ldr	r2, [r3, #0]
   37d8c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   37d8e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   37d90:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   37d92:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37d96:	2b00      	cmp	r3, #0
   37d98:	f47f ae6b 	bne.w	37a72 <ull_conn_llcp+0xafa>
		conn->tx_data_last = tx;
   37d9c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
   37da0:	e667      	b.n	37a72 <ull_conn_llcp+0xafa>
		if (!conn->tx_ctrl) {
   37da2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37da6:	2a00      	cmp	r2, #0
   37da8:	f47f af42 	bne.w	37c30 <ull_conn_llcp+0xcb8>
			tx->next = conn->tx_head;
   37dac:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   37db0:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37db4:	e743      	b.n	37c3e <ull_conn_llcp+0xcc6>
		conn->tx_data_last = tx;
   37db6:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   37dba:	f7ff ba59 	b.w	37270 <ull_conn_llcp+0x2f8>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   37dbe:	7903      	ldrb	r3, [r0, #4]
   37dc0:	f043 0303 	orr.w	r3, r3, #3
   37dc4:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   37dc6:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   37dca:	07da      	lsls	r2, r3, #31
   37dcc:	d56e      	bpl.n	37eac <ull_conn_llcp+0xf34>
	    (conn->llcp_feature.features_conn &
   37dce:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   37dd2:	075b      	lsls	r3, r3, #29
   37dd4:	d56a      	bpl.n	37eac <ull_conn_llcp+0xf34>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   37dd6:	2311      	movs	r3, #17
   37dd8:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   37dda:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   37ddc:	f880 8009 	strb.w	r8, [r0, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   37de0:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   37de2:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
   37de6:	2300      	movs	r3, #0
   37de8:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
   37dec:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   37df0:	2b00      	cmp	r3, #0
   37df2:	d041      	beq.n	37e78 <ull_conn_llcp+0xf00>
	    !conn->llcp_enc.pause_tx &&
   37df4:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   37df8:	0797      	lsls	r7, r2, #30
   37dfa:	d43d      	bmi.n	37e78 <ull_conn_llcp+0xf00>
	    !conn->llcp_phy.pause_tx &&
   37dfc:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   37e00:	07d0      	lsls	r0, r2, #31
   37e02:	d439      	bmi.n	37e78 <ull_conn_llcp+0xf00>
		if (conn->tx_head == conn->tx_data) {
   37e04:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   37e08:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   37e0a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37e0e:	f000 81ab 	beq.w	38168 <ull_conn_llcp+0x11f0>
		} else if (!conn->tx_ctrl) {
   37e12:	2a00      	cmp	r2, #0
   37e14:	f000 82c6 	beq.w	383a4 <ull_conn_llcp+0x142c>
	tx->next = conn->tx_ctrl_last->next;
   37e18:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   37e1c:	681a      	ldr	r2, [r3, #0]
   37e1e:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   37e22:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   37e26:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   37e2a:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37e2e:	2b00      	cmp	r3, #0
   37e30:	d054      	beq.n	37edc <ull_conn_llcp+0xf64>
			conn->llcp_ack = conn->llcp_req;
   37e32:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   37e36:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   37e3a:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   37e3e:	2900      	cmp	r1, #0
   37e40:	f43f a8b0 	beq.w	36fa4 <ull_conn_llcp+0x2c>
   37e44:	f7ff b901 	b.w	3704a <ull_conn_llcp+0xd2>
	switch (conn->llcp_conn_param.state) {
   37e48:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   37e4c:	f003 030f 	and.w	r3, r3, #15
   37e50:	2b06      	cmp	r3, #6
   37e52:	f200 82e0 	bhi.w	38416 <ull_conn_llcp+0x149e>
   37e56:	a001      	add	r0, pc, #4	; (adr r0, 37e5c <ull_conn_llcp+0xee4>)
   37e58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   37e5c:	000378a5 	.word	0x000378a5
   37e60:	00037821 	.word	0x00037821
   37e64:	000377d1 	.word	0x000377d1
   37e68:	00036f9f 	.word	0x00036f9f
   37e6c:	00036f9f 	.word	0x00036f9f
   37e70:	00036f9f 	.word	0x00036f9f
   37e74:	00036f9f 	.word	0x00036f9f
		if (!conn->tx_ctrl) {
   37e78:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37e7c:	2a00      	cmp	r2, #0
   37e7e:	d1cb      	bne.n	37e18 <ull_conn_llcp+0xea0>
			tx->next = conn->tx_head;
   37e80:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   37e84:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37e88:	e7cd      	b.n	37e26 <ull_conn_llcp+0xeae>
			conn->tx_data = conn->tx_data->next;
   37e8a:	6819      	ldr	r1, [r3, #0]
   37e8c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37e90:	2a00      	cmp	r2, #0
   37e92:	f47f a984 	bne.w	3719e <ull_conn_llcp+0x226>
			tx->next = conn->tx_head->next;
   37e96:	681a      	ldr	r2, [r3, #0]
   37e98:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   37e9a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   37e9c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   37e9e:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   37ea2:	f7ff b984 	b.w	371ae <ull_conn_llcp+0x236>
		conn->tx_data_last = tx;
   37ea6:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
   37eaa:	e5e2      	b.n	37a72 <ull_conn_llcp+0xafa>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   37eac:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   37eae:	f889 8008 	strb.w	r8, [r9, #8]
   37eb2:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   37eb4:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   37eb8:	e793      	b.n	37de2 <ull_conn_llcp+0xe6a>
		if (!conn->tx_ctrl) {
   37eba:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   37ebe:	2a00      	cmp	r2, #0
   37ec0:	f47f af61 	bne.w	37d86 <ull_conn_llcp+0xe0e>
			tx->next = conn->tx_head;
   37ec4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   37ec6:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37eca:	e761      	b.n	37d90 <ull_conn_llcp+0xe18>
	    ((pdu_data_tx->llctrl.opcode !=
   37ecc:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   37ece:	2a03      	cmp	r2, #3
   37ed0:	f43f ae67 	beq.w	37ba2 <ull_conn_llcp+0xc2a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   37ed4:	2a0a      	cmp	r2, #10
   37ed6:	f47f a8fa 	bne.w	370ce <ull_conn_llcp+0x156>
   37eda:	e662      	b.n	37ba2 <ull_conn_llcp+0xc2a>
		conn->tx_data_last = tx;
   37edc:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   37ee0:	e7a7      	b.n	37e32 <ull_conn_llcp+0xeba>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   37ee2:	791a      	ldrb	r2, [r3, #4]
   37ee4:	f002 0203 	and.w	r2, r2, #3
   37ee8:	2a03      	cmp	r2, #3
   37eea:	f000 80fe 	beq.w	380ea <ull_conn_llcp+0x1172>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   37eee:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   37ef2:	f7ff b954 	b.w	3719e <ull_conn_llcp+0x226>
			conn->tx_data = conn->tx_data->next;
   37ef6:	6819      	ldr	r1, [r3, #0]
   37ef8:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37efc:	2a00      	cmp	r2, #0
   37efe:	f47f aaa1 	bne.w	37444 <ull_conn_llcp+0x4cc>
			tx->next = conn->tx_head->next;
   37f02:	681a      	ldr	r2, [r3, #0]
   37f04:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   37f08:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   37f0c:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   37f10:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   37f14:	f7ff baa1 	b.w	3745a <ull_conn_llcp+0x4e2>
			conn->tx_data = conn->tx_data->next;
   37f18:	6819      	ldr	r1, [r3, #0]
   37f1a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37f1e:	2a00      	cmp	r2, #0
   37f20:	f47f ab6f 	bne.w	37602 <ull_conn_llcp+0x68a>
			tx->next = conn->tx_head->next;
   37f24:	681a      	ldr	r2, [r3, #0]
   37f26:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
   37f28:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
   37f2a:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
   37f2c:	e9c4 6672 	strd	r6, r6, [r4, #456]	; 0x1c8
   37f30:	f7ff bb6f 	b.w	37612 <ull_conn_llcp+0x69a>
			conn->tx_data = conn->tx_data->next;
   37f34:	6819      	ldr	r1, [r3, #0]
   37f36:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37f3a:	2a00      	cmp	r2, #0
   37f3c:	f47f a98d 	bne.w	3725a <ull_conn_llcp+0x2e2>
			tx->next = conn->tx_head->next;
   37f40:	681a      	ldr	r2, [r3, #0]
   37f42:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   37f44:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   37f46:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   37f48:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   37f4c:	f7ff b98d 	b.w	3726a <ull_conn_llcp+0x2f2>
		if (!conn->tx_ctrl) {
   37f50:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   37f54:	2900      	cmp	r1, #0
   37f56:	f47f acfa 	bne.w	3794e <ull_conn_llcp+0x9d6>
			tx->next = conn->tx_head;
   37f5a:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   37f5c:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   37f60:	e4fa      	b.n	37958 <ull_conn_llcp+0x9e0>
			conn->tx_data = conn->tx_data->next;
   37f62:	6819      	ldr	r1, [r3, #0]
   37f64:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   37f68:	2a00      	cmp	r2, #0
   37f6a:	f47f aaf6 	bne.w	3755a <ull_conn_llcp+0x5e2>
			tx->next = conn->tx_head->next;
   37f6e:	681a      	ldr	r2, [r3, #0]
   37f70:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   37f74:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   37f78:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   37f7c:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   37f80:	f7ff baf6 	b.w	37570 <ull_conn_llcp+0x5f8>
   37f84:	200026c4 	.word	0x200026c4
   37f88:	0004a498 	.word	0x0004a498
   37f8c:	0004a084 	.word	0x0004a084
   37f90:	0004a024 	.word	0x0004a024
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   37f94:	48ca      	ldr	r0, [pc, #808]	; (382c0 <ull_conn_llcp+0x1348>)
   37f96:	f7f7 fc97 	bl	2f8c8 <mem_acquire>
		if (!tx) {
   37f9a:	2800      	cmp	r0, #0
   37f9c:	f43f ace2 	beq.w	37964 <ull_conn_llcp+0x9ec>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   37fa0:	7902      	ldrb	r2, [r0, #4]
   37fa2:	f042 0203 	orr.w	r2, r2, #3
   37fa6:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   37fa8:	2211      	movs	r2, #17
   37faa:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   37fac:	2203      	movs	r2, #3
   37fae:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   37fb0:	220f      	movs	r2, #15
   37fb2:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   37fb4:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
   37fb8:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   37fba:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   37fbe:	2a00      	cmp	r2, #0
   37fc0:	f000 8173 	beq.w	382aa <ull_conn_llcp+0x1332>
	    !conn->llcp_enc.pause_tx &&
   37fc4:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   37fc8:	0789      	lsls	r1, r1, #30
   37fca:	f100 816e 	bmi.w	382aa <ull_conn_llcp+0x1332>
	    !conn->llcp_phy.pause_tx &&
   37fce:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   37fd2:	07cb      	lsls	r3, r1, #31
   37fd4:	f100 8169 	bmi.w	382aa <ull_conn_llcp+0x1332>
		if (conn->tx_head == conn->tx_data) {
   37fd8:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   37fdc:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   37fde:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   37fe2:	f000 81aa 	beq.w	3833a <ull_conn_llcp+0x13c2>
		} else if (!conn->tx_ctrl) {
   37fe6:	2900      	cmp	r1, #0
   37fe8:	f000 81bc 	beq.w	38364 <ull_conn_llcp+0x13ec>
	tx->next = conn->tx_ctrl_last->next;
   37fec:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   37ff0:	6811      	ldr	r1, [r2, #0]
   37ff2:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   37ff4:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   37ff6:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   37ff8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   37ffc:	2a00      	cmp	r2, #0
   37ffe:	f000 81ae 	beq.w	3835e <ull_conn_llcp+0x13e6>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   38002:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   38006:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   3800a:	2300      	movs	r3, #0
   3800c:	f8c8 3000 	str.w	r3, [r8]
   38010:	e4a8      	b.n	37964 <ull_conn_llcp+0x9ec>
			conn->tx_data = conn->tx_data->next;
   38012:	6819      	ldr	r1, [r3, #0]
   38014:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38018:	2a00      	cmp	r2, #0
   3801a:	f47f ad1c 	bne.w	37a56 <ull_conn_llcp+0xade>
			tx->next = conn->tx_head->next;
   3801e:	681a      	ldr	r2, [r3, #0]
   38020:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   38024:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   38028:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   3802c:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   38030:	e51c      	b.n	37a6c <ull_conn_llcp+0xaf4>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   38032:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   38036:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->tx_data_last = tx;
   3803a:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
   3803e:	f7fe bfa6 	b.w	36f8e <ull_conn_llcp+0x16>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38042:	791a      	ldrb	r2, [r3, #4]
   38044:	f002 0203 	and.w	r2, r2, #3
   38048:	2a03      	cmp	r2, #3
   3804a:	f000 80aa 	beq.w	381a2 <ull_conn_llcp+0x122a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3804e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   38052:	f7ff b9f7 	b.w	37444 <ull_conn_llcp+0x4cc>
		if (conn->llcp_phy.tx & PHY_2M) {
   38056:	070f      	lsls	r7, r1, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   38058:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   3805c:	f3c1 0382 	ubfx	r3, r1, #2, #3
   38060:	f100 809d 	bmi.w	3819e <ull_conn_llcp+0x1226>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   38064:	f013 0201 	ands.w	r2, r3, #1
   38068:	d101      	bne.n	3806e <ull_conn_llcp+0x10f6>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   3806a:	f003 0204 	and.w	r2, r3, #4
			conn->llcp_phy.tx = PHY_2M;
   3806e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   38072:	f362 0384 	bfi	r3, r2, #2, #3
		if (conn->llcp_phy.rx & PHY_2M) {
   38076:	0659      	lsls	r1, r3, #25
			conn->llcp_phy.tx = PHY_2M;
   38078:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   3807c:	f3c3 1742 	ubfx	r7, r3, #5, #3
   38080:	f100 811c 	bmi.w	382bc <ull_conn_llcp+0x1344>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   38084:	f017 0101 	ands.w	r1, r7, #1
   38088:	d101      	bne.n	3808e <ull_conn_llcp+0x1116>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   3808a:	f007 0104 	and.w	r1, r7, #4
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   3808e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			conn->llcp_phy.rx = PHY_2M;
   38092:	f894 71be 	ldrb.w	r7, [r4, #446]	; 0x1be
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   38096:	f003 0307 	and.w	r3, r3, #7
			conn->llcp.phy_upd_ind.tx = 0U;
   3809a:	4293      	cmp	r3, r2
   3809c:	bf08      	it	eq
   3809e:	2200      	moveq	r2, #0
		conn->llcp_ack -= 2U;
   380a0:	3802      	subs	r0, #2
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   380a2:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_ack -= 2U;
   380a6:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   380aa:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   380ae:	f3c3 0380 	ubfx	r3, r3, #2, #1
		conn->llcp.phy_upd_ind.initiate = 1U;
   380b2:	005b      	lsls	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   380b4:	f000 0007 	and.w	r0, r0, #7
			conn->llcp_phy.rx = PHY_2M;
   380b8:	f361 1747 	bfi	r7, r1, #5, #3
		conn->llcp.phy_upd_ind.initiate = 1U;
   380bc:	f043 0301 	orr.w	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   380c0:	4288      	cmp	r0, r1
   380c2:	bf08      	it	eq
   380c4:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   380c6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   380ca:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			conn->llcp_phy.rx = PHY_2M;
   380ce:	f884 71be 	strb.w	r7, [r4, #446]	; 0x1be
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   380d2:	f362 0184 	bfi	r1, r2, #2, #3
		conn->llcp.phy_upd_ind.initiate = 1U;
   380d6:	f001 011c 	and.w	r1, r1, #28
   380da:	430b      	orrs	r3, r1
		conn->llcp_type = LLCP_PHY_UPD;
   380dc:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   380de:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   380e2:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   380e6:	f7fe bf75 	b.w	36fd4 <ull_conn_llcp+0x5c>
	    ((pdu_data_tx->llctrl.opcode !=
   380ea:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   380ec:	2a03      	cmp	r2, #3
   380ee:	f43f aed2 	beq.w	37e96 <ull_conn_llcp+0xf1e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   380f2:	2a0a      	cmp	r2, #10
   380f4:	f47f aefb 	bne.w	37eee <ull_conn_llcp+0xf76>
   380f8:	e6cd      	b.n	37e96 <ull_conn_llcp+0xf1e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   380fa:	791a      	ldrb	r2, [r3, #4]
   380fc:	f002 0203 	and.w	r2, r2, #3
   38100:	2a03      	cmp	r2, #3
   38102:	d02a      	beq.n	3815a <ull_conn_llcp+0x11e2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   38104:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   38108:	f7ff ba7b 	b.w	37602 <ull_conn_llcp+0x68a>
			conn->tx_data = conn->tx_data->next;
   3810c:	6819      	ldr	r1, [r3, #0]
   3810e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38112:	2a00      	cmp	r2, #0
   38114:	f47f ad8c 	bne.w	37c30 <ull_conn_llcp+0xcb8>
			tx->next = conn->tx_head->next;
   38118:	681a      	ldr	r2, [r3, #0]
   3811a:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3811e:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   38122:	f8c4 91c8 	str.w	r9, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   38126:	e58a      	b.n	37c3e <ull_conn_llcp+0xcc6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38128:	791a      	ldrb	r2, [r3, #4]
   3812a:	f002 0203 	and.w	r2, r2, #3
   3812e:	2a03      	cmp	r2, #3
   38130:	f000 80d6 	beq.w	382e0 <ull_conn_llcp+0x1368>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   38134:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   38138:	f7ff b88f 	b.w	3725a <ull_conn_llcp+0x2e2>
			conn->tx_data = conn->tx_data->next;
   3813c:	6819      	ldr	r1, [r3, #0]
   3813e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38142:	2a00      	cmp	r2, #0
   38144:	f47f aa09 	bne.w	3755a <ull_conn_llcp+0x5e2>
			tx->next = conn->tx_head->next;
   38148:	681a      	ldr	r2, [r3, #0]
   3814a:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3814e:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   38152:	f8c4 91c8 	str.w	r9, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   38156:	f7ff ba07 	b.w	37568 <ull_conn_llcp+0x5f0>
	    ((pdu_data_tx->llctrl.opcode !=
   3815a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3815c:	2a03      	cmp	r2, #3
   3815e:	f43f aee1 	beq.w	37f24 <ull_conn_llcp+0xfac>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38162:	2a0a      	cmp	r2, #10
   38164:	d1ce      	bne.n	38104 <ull_conn_llcp+0x118c>
   38166:	e6dd      	b.n	37f24 <ull_conn_llcp+0xfac>
			conn->tx_data = conn->tx_data->next;
   38168:	6819      	ldr	r1, [r3, #0]
   3816a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   3816e:	2a00      	cmp	r2, #0
   38170:	f47f ae52 	bne.w	37e18 <ull_conn_llcp+0xea0>
			tx->next = conn->tx_head->next;
   38174:	681a      	ldr	r2, [r3, #0]
   38176:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3817a:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   3817e:	f8c4 91c8 	str.w	r9, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   38182:	e650      	b.n	37e26 <ull_conn_llcp+0xeae>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38184:	791a      	ldrb	r2, [r3, #4]
   38186:	f002 0203 	and.w	r2, r2, #3
   3818a:	2a03      	cmp	r2, #3
   3818c:	f000 80fa 	beq.w	38384 <ull_conn_llcp+0x140c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   38190:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   38194:	e54c      	b.n	37c30 <ull_conn_llcp+0xcb8>
			conn->llcp_cu.interval = interval_max;
   38196:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
   3819a:	f7ff bb68 	b.w	3786e <ull_conn_llcp+0x8f6>
   3819e:	2202      	movs	r2, #2
   381a0:	e765      	b.n	3806e <ull_conn_llcp+0x10f6>
	    ((pdu_data_tx->llctrl.opcode !=
   381a2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   381a4:	2a03      	cmp	r2, #3
   381a6:	f43f aeac 	beq.w	37f02 <ull_conn_llcp+0xf8a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   381aa:	2a0a      	cmp	r2, #10
   381ac:	f47f af4f 	bne.w	3804e <ull_conn_llcp+0x10d6>
   381b0:	e6a7      	b.n	37f02 <ull_conn_llcp+0xf8a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   381b2:	4843      	ldr	r0, [pc, #268]	; (382c0 <ull_conn_llcp+0x1348>)
   381b4:	f7f7 fb88 	bl	2f8c8 <mem_acquire>
	if (!tx) {
   381b8:	2800      	cmp	r0, #0
   381ba:	f43f abd3 	beq.w	37964 <ull_conn_llcp+0x9ec>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   381be:	7902      	ldrb	r2, [r0, #4]
   381c0:	f042 0203 	orr.w	r2, r2, #3
   381c4:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   381c6:	2218      	movs	r2, #24
   381c8:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   381ca:	2210      	movs	r2, #16
   381cc:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
   381ce:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   381d2:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   381d4:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
   381d8:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   381da:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
   381de:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   381e0:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   381e4:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
   381e6:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
   381ea:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   381ec:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
   381f0:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   381f4:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
   381f8:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   381fc:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   38200:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   38204:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
   38208:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   3820c:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
   38210:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   38214:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
   38218:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   3821c:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   38220:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
   38224:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   38228:	2a00      	cmp	r2, #0
   3822a:	d061      	beq.n	382f0 <ull_conn_llcp+0x1378>
	    !conn->llcp_enc.pause_tx &&
   3822c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   38230:	078f      	lsls	r7, r1, #30
   38232:	d45d      	bmi.n	382f0 <ull_conn_llcp+0x1378>
	    !conn->llcp_phy.pause_tx &&
   38234:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   38238:	07c9      	lsls	r1, r1, #31
   3823a:	d459      	bmi.n	382f0 <ull_conn_llcp+0x1378>
		if (conn->tx_head == conn->tx_data) {
   3823c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   38240:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   38242:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   38246:	f000 80ce 	beq.w	383e6 <ull_conn_llcp+0x146e>
		} else if (!conn->tx_ctrl) {
   3824a:	2900      	cmp	r1, #0
   3824c:	f000 80c3 	beq.w	383d6 <ull_conn_llcp+0x145e>
	tx->next = conn->tx_ctrl_last->next;
   38250:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   38254:	6811      	ldr	r1, [r2, #0]
   38256:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   38258:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   3825a:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   3825c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   38260:	2a00      	cmp	r2, #0
   38262:	f000 80b5 	beq.w	383d0 <ull_conn_llcp+0x1458>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   38266:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3826a:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   3826e:	2305      	movs	r3, #5
   38270:	f363 0203 	bfi	r2, r3, #0, #4
   38274:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   38278:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3827c:	f7fe be87 	b.w	36f8e <ull_conn_llcp+0x16>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38280:	791a      	ldrb	r2, [r3, #4]
   38282:	f002 0203 	and.w	r2, r2, #3
   38286:	2a03      	cmp	r2, #3
   38288:	d047      	beq.n	3831a <ull_conn_llcp+0x13a2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3828a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   3828e:	f7ff bbe2 	b.w	37a56 <ull_conn_llcp+0xade>
			conn->tx_data = conn->tx_data->next;
   38292:	6819      	ldr	r1, [r3, #0]
   38294:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38298:	2a00      	cmp	r2, #0
   3829a:	f47f ad74 	bne.w	37d86 <ull_conn_llcp+0xe0e>
			tx->next = conn->tx_head->next;
   3829e:	681a      	ldr	r2, [r3, #0]
   382a0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   382a2:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   382a4:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   382a8:	e572      	b.n	37d90 <ull_conn_llcp+0xe18>
		if (!conn->tx_ctrl) {
   382aa:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   382ae:	2900      	cmp	r1, #0
   382b0:	f47f ae9c 	bne.w	37fec <ull_conn_llcp+0x1074>
			tx->next = conn->tx_head;
   382b4:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   382b6:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   382ba:	e69c      	b.n	37ff6 <ull_conn_llcp+0x107e>
   382bc:	2102      	movs	r1, #2
   382be:	e6e6      	b.n	3808e <ull_conn_llcp+0x1116>
   382c0:	200026c4 	.word	0x200026c4
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   382c4:	791a      	ldrb	r2, [r3, #4]
   382c6:	f002 0203 	and.w	r2, r2, #3
   382ca:	2a03      	cmp	r2, #3
   382cc:	f47f ac45 	bne.w	37b5a <ull_conn_llcp+0xbe2>
	    ((pdu_data_tx->llctrl.opcode !=
   382d0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   382d2:	2a03      	cmp	r2, #3
   382d4:	f43f af38 	beq.w	38148 <ull_conn_llcp+0x11d0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   382d8:	2a0a      	cmp	r2, #10
   382da:	f47f ac3e 	bne.w	37b5a <ull_conn_llcp+0xbe2>
   382de:	e733      	b.n	38148 <ull_conn_llcp+0x11d0>
	    ((pdu_data_tx->llctrl.opcode !=
   382e0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   382e2:	2a03      	cmp	r2, #3
   382e4:	f43f ae2c 	beq.w	37f40 <ull_conn_llcp+0xfc8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   382e8:	2a0a      	cmp	r2, #10
   382ea:	f47f af23 	bne.w	38134 <ull_conn_llcp+0x11bc>
   382ee:	e627      	b.n	37f40 <ull_conn_llcp+0xfc8>
		if (!conn->tx_ctrl) {
   382f0:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   382f4:	2900      	cmp	r1, #0
   382f6:	d1ab      	bne.n	38250 <ull_conn_llcp+0x12d8>
			tx->next = conn->tx_head;
   382f8:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   382fa:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   382fe:	e7ac      	b.n	3825a <ull_conn_llcp+0x12e2>
			conn->tx_data = conn->tx_data->next;
   38300:	6818      	ldr	r0, [r3, #0]
   38302:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38306:	2900      	cmp	r1, #0
   38308:	f47f ab21 	bne.w	3794e <ull_conn_llcp+0x9d6>
			tx->next = conn->tx_head->next;
   3830c:	6819      	ldr	r1, [r3, #0]
   3830e:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   38310:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   38312:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   38316:	f7ff bb1f 	b.w	37958 <ull_conn_llcp+0x9e0>
	    ((pdu_data_tx->llctrl.opcode !=
   3831a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3831c:	2a03      	cmp	r2, #3
   3831e:	f43f ae7e 	beq.w	3801e <ull_conn_llcp+0x10a6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38322:	2a0a      	cmp	r2, #10
   38324:	d1b1      	bne.n	3828a <ull_conn_llcp+0x1312>
   38326:	e67a      	b.n	3801e <ull_conn_llcp+0x10a6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38328:	7919      	ldrb	r1, [r3, #4]
   3832a:	f001 0103 	and.w	r1, r1, #3
   3832e:	2903      	cmp	r1, #3
   38330:	d00f      	beq.n	38352 <ull_conn_llcp+0x13da>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   38332:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   38336:	f7ff bb0a 	b.w	3794e <ull_conn_llcp+0x9d6>
			conn->tx_data = conn->tx_data->next;
   3833a:	6813      	ldr	r3, [r2, #0]
   3833c:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   38340:	2900      	cmp	r1, #0
   38342:	f47f ae53 	bne.w	37fec <ull_conn_llcp+0x1074>
			tx->next = conn->tx_head->next;
   38346:	6811      	ldr	r1, [r2, #0]
   38348:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   3834a:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   3834c:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   38350:	e651      	b.n	37ff6 <ull_conn_llcp+0x107e>
	    ((pdu_data_tx->llctrl.opcode !=
   38352:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38354:	2903      	cmp	r1, #3
   38356:	d0d9      	beq.n	3830c <ull_conn_llcp+0x1394>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38358:	290a      	cmp	r1, #10
   3835a:	d1ea      	bne.n	38332 <ull_conn_llcp+0x13ba>
   3835c:	e7d6      	b.n	3830c <ull_conn_llcp+0x1394>
		conn->tx_data_last = tx;
   3835e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   38362:	e64e      	b.n	38002 <ull_conn_llcp+0x108a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38364:	7911      	ldrb	r1, [r2, #4]
   38366:	f001 0103 	and.w	r1, r1, #3
   3836a:	2903      	cmp	r1, #3
   3836c:	d047      	beq.n	383fe <ull_conn_llcp+0x1486>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3836e:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   38372:	e63b      	b.n	37fec <ull_conn_llcp+0x1074>
	    ((pdu_data_tx->llctrl.opcode !=
   38374:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38376:	2a03      	cmp	r2, #3
   38378:	f43f adf9 	beq.w	37f6e <ull_conn_llcp+0xff6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3837c:	2a0a      	cmp	r2, #10
   3837e:	f47f abec 	bne.w	37b5a <ull_conn_llcp+0xbe2>
   38382:	e5f4      	b.n	37f6e <ull_conn_llcp+0xff6>
	    ((pdu_data_tx->llctrl.opcode !=
   38384:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38386:	2a03      	cmp	r2, #3
   38388:	f43f aec6 	beq.w	38118 <ull_conn_llcp+0x11a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3838c:	2a0a      	cmp	r2, #10
   3838e:	f47f aeff 	bne.w	38190 <ull_conn_llcp+0x1218>
   38392:	e6c1      	b.n	38118 <ull_conn_llcp+0x11a0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38394:	791a      	ldrb	r2, [r3, #4]
   38396:	f002 0203 	and.w	r2, r2, #3
   3839a:	2a03      	cmp	r2, #3
   3839c:	d00a      	beq.n	383b4 <ull_conn_llcp+0x143c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3839e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   383a2:	e4f0      	b.n	37d86 <ull_conn_llcp+0xe0e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   383a4:	791a      	ldrb	r2, [r3, #4]
   383a6:	f002 0203 	and.w	r2, r2, #3
   383aa:	2a03      	cmp	r2, #3
   383ac:	d009      	beq.n	383c2 <ull_conn_llcp+0x144a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   383ae:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   383b2:	e531      	b.n	37e18 <ull_conn_llcp+0xea0>
	    ((pdu_data_tx->llctrl.opcode !=
   383b4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   383b6:	2a03      	cmp	r2, #3
   383b8:	f43f af71 	beq.w	3829e <ull_conn_llcp+0x1326>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   383bc:	2a0a      	cmp	r2, #10
   383be:	d1ee      	bne.n	3839e <ull_conn_llcp+0x1426>
   383c0:	e76d      	b.n	3829e <ull_conn_llcp+0x1326>
	    ((pdu_data_tx->llctrl.opcode !=
   383c2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   383c4:	2a03      	cmp	r2, #3
   383c6:	f43f aed5 	beq.w	38174 <ull_conn_llcp+0x11fc>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   383ca:	2a0a      	cmp	r2, #10
   383cc:	d1ef      	bne.n	383ae <ull_conn_llcp+0x1436>
   383ce:	e6d1      	b.n	38174 <ull_conn_llcp+0x11fc>
		conn->tx_data_last = tx;
   383d0:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   383d4:	e747      	b.n	38266 <ull_conn_llcp+0x12ee>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   383d6:	7911      	ldrb	r1, [r2, #4]
   383d8:	f001 0103 	and.w	r1, r1, #3
   383dc:	2903      	cmp	r1, #3
   383de:	d014      	beq.n	3840a <ull_conn_llcp+0x1492>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   383e0:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   383e4:	e734      	b.n	38250 <ull_conn_llcp+0x12d8>
			conn->tx_data = conn->tx_data->next;
   383e6:	6813      	ldr	r3, [r2, #0]
   383e8:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   383ec:	2900      	cmp	r1, #0
   383ee:	f47f af2f 	bne.w	38250 <ull_conn_llcp+0x12d8>
			tx->next = conn->tx_head->next;
   383f2:	6811      	ldr	r1, [r2, #0]
   383f4:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   383f6:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   383f8:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
				conn->tx_ctrl_last = tx;
   383fc:	e72d      	b.n	3825a <ull_conn_llcp+0x12e2>
	    ((pdu_data_tx->llctrl.opcode !=
   383fe:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38400:	2903      	cmp	r1, #3
   38402:	d0a0      	beq.n	38346 <ull_conn_llcp+0x13ce>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38404:	290a      	cmp	r1, #10
   38406:	d1b2      	bne.n	3836e <ull_conn_llcp+0x13f6>
   38408:	e79d      	b.n	38346 <ull_conn_llcp+0x13ce>
	    ((pdu_data_tx->llctrl.opcode !=
   3840a:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3840c:	2903      	cmp	r1, #3
   3840e:	d0f0      	beq.n	383f2 <ull_conn_llcp+0x147a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38410:	290a      	cmp	r1, #10
   38412:	d1e5      	bne.n	383e0 <ull_conn_llcp+0x1468>
   38414:	e7ed      	b.n	383f2 <ull_conn_llcp+0x147a>
		LL_ASSERT(0);
   38416:	4a02      	ldr	r2, [pc, #8]	; (38420 <ull_conn_llcp+0x14a8>)
   38418:	4902      	ldr	r1, [pc, #8]	; (38424 <ull_conn_llcp+0x14ac>)
   3841a:	f640 73e1 	movw	r3, #4065	; 0xfe1
   3841e:	e46c      	b.n	37cfa <ull_conn_llcp+0xd82>
   38420:	0004a498 	.word	0x0004a498
   38424:	0004a084 	.word	0x0004a084

00038428 <ull_conn_tx_demux>:
{
   38428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3842c:	4c24      	ldr	r4, [pc, #144]	; (384c0 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3842e:	4f25      	ldr	r7, [pc, #148]	; (384c4 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   38430:	78e2      	ldrb	r2, [r4, #3]
{
   38432:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   38434:	1d26      	adds	r6, r4, #4
   38436:	e021      	b.n	3847c <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   38438:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   3843c:	4638      	mov	r0, r7
   3843e:	f7f7 fa75 	bl	2f92c <mem_get>
	if (conn->lll.handle != handle) {
   38442:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   38444:	bb2a      	cbnz	r2, 38492 <ull_conn_tx_demux+0x6a>
			struct node_tx *tx = lll_tx->node;
   38446:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   3844a:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   3844e:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   38450:	b351      	cbz	r1, 384a8 <ull_conn_tx_demux+0x80>
			if (conn->tx_data_last) {
   38452:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   38456:	b102      	cbz	r2, 3845a <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   38458:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   3845a:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   3845e:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   38460:	78a3      	ldrb	r3, [r4, #2]
   38462:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   38464:	429a      	cmp	r2, r3
   38466:	d005      	beq.n	38474 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   38468:	3301      	adds	r3, #1
   3846a:	b2db      	uxtb	r3, r3
		_first = 0U;
   3846c:	4299      	cmp	r1, r3
   3846e:	bf08      	it	eq
   38470:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   38472:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   38474:	3d01      	subs	r5, #1
   38476:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   3847a:	d01e      	beq.n	384ba <ull_conn_tx_demux+0x92>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3847c:	78a3      	ldrb	r3, [r4, #2]
   3847e:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   38480:	4293      	cmp	r3, r2
   38482:	d01a      	beq.n	384ba <ull_conn_tx_demux+0x92>
	return (void *)(fifo + first * size);
   38484:	fb13 f301 	smulbb	r3, r3, r1
   38488:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
   3848c:	5af2      	ldrh	r2, [r6, r3]
   3848e:	2a00      	cmp	r2, #0
   38490:	d0d2      	beq.n	38438 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   38492:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   38496:	790b      	ldrb	r3, [r1, #4]
   38498:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   3849c:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   384a0:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   384a2:	f7fa fdb1 	bl	33008 <ll_tx_ack_put>
   384a6:	e7da      	b.n	3845e <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   384a8:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   384ac:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   384b0:	2a00      	cmp	r2, #0
   384b2:	d1ce      	bne.n	38452 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   384b4:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   384b8:	e7cf      	b.n	3845a <ull_conn_tx_demux+0x32>
}
   384ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   384be:	bf00      	nop
   384c0:	20000734 	.word	0x20000734
   384c4:	20001538 	.word	0x20001538

000384c8 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   384c8:	4b39      	ldr	r3, [pc, #228]	; (385b0 <conn_cleanup+0xe8>)
{
   384ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn == conn_upd_curr) {
   384ce:	681a      	ldr	r2, [r3, #0]
	rx = conn->llcp_rx;
   384d0:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	*((uint8_t *)rx->pdu) = reason;
   384d4:	f880 1160 	strb.w	r1, [r0, #352]	; 0x160
	if (conn == conn_upd_curr) {
   384d8:	4290      	cmp	r0, r2
		conn_upd_curr = NULL;
   384da:	bf04      	itt	eq
   384dc:	2200      	moveq	r2, #0
   384de:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   384e0:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   384e2:	f8a0 214a 	strh.w	r2, [r0, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   384e6:	2317      	movs	r3, #23
{
   384e8:	b082      	sub	sp, #8
   384ea:	4606      	mov	r6, r0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   384ec:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
	while (rx) {
   384f0:	b144      	cbz	r4, 38504 <conn_cleanup+0x3c>
		hdr->type = NODE_RX_TYPE_RELEASE;
   384f2:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   384f4:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   384f6:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   384f8:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   384fa:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   384fc:	f7fa fd40 	bl	32f80 <ll_rx_put>
	while (rx) {
   38500:	2c00      	cmp	r4, #0
   38502:	d1f7      	bne.n	384f4 <conn_cleanup+0x2c>
	while (conn->tx_head) {
   38504:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   38508:	b381      	cbz	r1, 3856c <conn_cleanup+0xa4>
		link = mem_acquire(&mem_link_tx.free);
   3850a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 385b4 <conn_cleanup+0xec>
		LL_ASSERT(link);
   3850e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 385b8 <conn_cleanup+0xf0>
   38512:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 385bc <conn_cleanup+0xf4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   38516:	f106 0768 	add.w	r7, r6, #104	; 0x68
   3851a:	e007      	b.n	3852c <conn_cleanup+0x64>
   3851c:	4629      	mov	r1, r5
   3851e:	463a      	mov	r2, r7
   38520:	4620      	mov	r0, r4
   38522:	f7f7 fa35 	bl	2f990 <memq_enqueue>
	while (conn->tx_head) {
   38526:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   3852a:	b1f9      	cbz	r1, 3856c <conn_cleanup+0xa4>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3852c:	4630      	mov	r0, r6
   3852e:	f7fc f9db 	bl	348e8 <tx_ull_dequeue>
   38532:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   38534:	4640      	mov	r0, r8
   38536:	f7f7 f9c7 	bl	2f8c8 <mem_acquire>
		LL_ASSERT(link);
   3853a:	4604      	mov	r4, r0
   3853c:	2800      	cmp	r0, #0
   3853e:	d1ed      	bne.n	3851c <conn_cleanup+0x54>
   38540:	481f      	ldr	r0, [pc, #124]	; (385c0 <conn_cleanup+0xf8>)
   38542:	f640 135e 	movw	r3, #2398	; 0x95e
   38546:	4652      	mov	r2, sl
   38548:	4649      	mov	r1, r9
   3854a:	f00a fb7f 	bl	42c4c <printk>
   3854e:	4040      	eors	r0, r0
   38550:	f380 8811 	msr	BASEPRI, r0
   38554:	f04f 0003 	mov.w	r0, #3
   38558:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3855a:	4629      	mov	r1, r5
   3855c:	463a      	mov	r2, r7
   3855e:	4620      	mov	r0, r4
   38560:	f7f7 fa16 	bl	2f990 <memq_enqueue>
	while (conn->tx_head) {
   38564:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   38568:	2900      	cmp	r1, #0
   3856a:	d1df      	bne.n	3852c <conn_cleanup+0x64>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3856c:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   3856e:	4b15      	ldr	r3, [pc, #84]	; (385c4 <conn_cleanup+0xfc>)
   38570:	9600      	str	r6, [sp, #0]
   38572:	3203      	adds	r2, #3
   38574:	b2d2      	uxtb	r2, r2
   38576:	2101      	movs	r1, #1
   38578:	2000      	movs	r0, #0
   3857a:	f7f8 fc4b 	bl	30e14 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3857e:	f030 0302 	bics.w	r3, r0, #2
   38582:	d00c      	beq.n	3859e <conn_cleanup+0xd6>
   38584:	4a0c      	ldr	r2, [pc, #48]	; (385b8 <conn_cleanup+0xf0>)
   38586:	4910      	ldr	r1, [pc, #64]	; (385c8 <conn_cleanup+0x100>)
   38588:	480d      	ldr	r0, [pc, #52]	; (385c0 <conn_cleanup+0xf8>)
   3858a:	f640 1323 	movw	r3, #2339	; 0x923
   3858e:	f00a fb5d 	bl	42c4c <printk>
   38592:	4040      	eors	r0, r0
   38594:	f380 8811 	msr	BASEPRI, r0
   38598:	f04f 0003 	mov.w	r0, #3
   3859c:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   3859e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   385a2:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   385a4:	8533      	strh	r3, [r6, #40]	; 0x28
}
   385a6:	b002      	add	sp, #8
   385a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   385ac:	f7ff bf3c 	b.w	38428 <ull_conn_tx_demux>
   385b0:	20002630 	.word	0x20002630
   385b4:	20002778 	.word	0x20002778
   385b8:	0004a498 	.word	0x0004a498
   385bc:	0004a4f0 	.word	0x0004a4f0
   385c0:	0004a024 	.word	0x0004a024
   385c4:	0003468d 	.word	0x0003468d
   385c8:	0004a578 	.word	0x0004a578

000385cc <ull_conn_done>:
{
   385cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   385d0:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   385d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   385d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   385d8:	429a      	cmp	r2, r3
{
   385da:	b08a      	sub	sp, #40	; 0x28
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   385dc:	d05b      	beq.n	38696 <ull_conn_done+0xca>
	switch (done->extra.mic_state) {
   385de:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   385e2:	2b01      	cmp	r3, #1
   385e4:	4605      	mov	r5, r0
   385e6:	f000 80e5 	beq.w	387b4 <ull_conn_done+0x1e8>
   385ea:	2b02      	cmp	r3, #2
   385ec:	f000 80d8 	beq.w	387a0 <ull_conn_done+0x1d4>
   385f0:	2b00      	cmp	r3, #0
   385f2:	f000 80bb 	beq.w	3876c <ull_conn_done+0x1a0>
	reason_final = conn->llcp_terminate.reason_final;
   385f6:	f894 6143 	ldrb.w	r6, [r4, #323]	; 0x143
	if (reason_final && (
   385fa:	2e00      	cmp	r6, #0
   385fc:	f040 80d3 	bne.w	387a6 <ull_conn_done+0x1da>
	latency_event = lll->latency_event;
   38600:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   38604:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	ticks_drift_plus = 0U;
   38606:	9609      	str	r6, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   38608:	f108 0701 	add.w	r7, r8, #1
   3860c:	b2bf      	uxth	r7, r7
	ticks_drift_minus = 0U;
   3860e:	9608      	str	r6, [sp, #32]
	if (done->extra.trx_cnt) {
   38610:	2b00      	cmp	r3, #0
   38612:	d043      	beq.n	3869c <ull_conn_done+0xd0>
		} else if (lll->role) {
   38614:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   38618:	2b00      	cmp	r3, #0
   3861a:	f2c0 8113 	blt.w	38844 <ull_conn_done+0x278>
	if (done->extra.crc_valid) {
   3861e:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   38622:	2200      	movs	r2, #0
   38624:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   38628:	07da      	lsls	r2, r3, #31
   3862a:	f140 80c9 	bpl.w	387c0 <ull_conn_done+0x1f4>
		conn->supervision_expire = 0U;
   3862e:	2300      	movs	r3, #0
   38630:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   38634:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   38638:	b12b      	cbz	r3, 38646 <ull_conn_done+0x7a>
		if (conn->procedure_expire > elapsed_event) {
   3863a:	42bb      	cmp	r3, r7
   3863c:	f240 8113 	bls.w	38866 <ull_conn_done+0x29a>
			conn->procedure_expire -= elapsed_event;
   38640:	1bdb      	subs	r3, r3, r7
   38642:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   38646:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   3864a:	b12b      	cbz	r3, 38658 <ull_conn_done+0x8c>
		if (conn->apto_expire > elapsed_event) {
   3864c:	42bb      	cmp	r3, r7
   3864e:	f240 80e6 	bls.w	3881e <ull_conn_done+0x252>
			conn->apto_expire -= elapsed_event;
   38652:	1bdb      	subs	r3, r3, r7
   38654:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   38658:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
   3865c:	2a00      	cmp	r2, #0
   3865e:	d044      	beq.n	386ea <ull_conn_done+0x11e>
		if (conn->appto_expire > elapsed_event) {
   38660:	42ba      	cmp	r2, r7
   38662:	f200 80bc 	bhi.w	387de <ull_conn_done+0x212>
			if ((conn->procedure_expire == 0U) &&
   38666:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   3866a:	2200      	movs	r2, #0
   3866c:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   38670:	2b00      	cmp	r3, #0
   38672:	d13a      	bne.n	386ea <ull_conn_done+0x11e>
			    (conn->llcp_req == conn->llcp_ack)) {
   38674:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   38678:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
			if ((conn->procedure_expire == 0U) &&
   3867c:	4293      	cmp	r3, r2
   3867e:	d138      	bne.n	386f2 <ull_conn_done+0x126>
				conn->llcp_type = LLCP_PING;
   38680:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   38682:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   38684:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   38688:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3868c:	e036      	b.n	386fc <ull_conn_done+0x130>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   3868e:	2108      	movs	r1, #8
   38690:	4620      	mov	r0, r4
   38692:	f7ff ff19 	bl	384c8 <conn_cleanup>
}
   38696:	b00a      	add	sp, #40	; 0x28
   38698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
   3869c:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   386a0:	07db      	lsls	r3, r3, #31
   386a2:	d4c4      	bmi.n	3862e <ull_conn_done+0x62>
	else if (conn->connect_expire) {
   386a4:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
   386a8:	2b00      	cmp	r3, #0
   386aa:	f000 8089 	beq.w	387c0 <ull_conn_done+0x1f4>
		if (conn->connect_expire > elapsed_event) {
   386ae:	42bb      	cmp	r3, r7
   386b0:	f240 80f0 	bls.w	38894 <ull_conn_done+0x2c8>
			conn->connect_expire -= elapsed_event;
   386b4:	1bdb      	subs	r3, r3, r7
   386b6:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   386ba:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   386be:	2b00      	cmp	r3, #0
   386c0:	d0b8      	beq.n	38634 <ull_conn_done+0x68>
		if (conn->supervision_expire > elapsed_event) {
   386c2:	429f      	cmp	r7, r3
   386c4:	d2e3      	bcs.n	3868e <ull_conn_done+0xc2>
			conn->supervision_expire -= elapsed_event;
   386c6:	1bdb      	subs	r3, r3, r7
   386c8:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   386ca:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   386cc:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   386ce:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   386d2:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   386d4:	d907      	bls.n	386e6 <ull_conn_done+0x11a>
			else if (lll->role) {
   386d6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   386da:	4293      	cmp	r3, r2
   386dc:	daaa      	bge.n	38634 <ull_conn_done+0x68>
				if (latency_event) {
   386de:	f1b8 0f00 	cmp.w	r8, #0
   386e2:	f000 80c9 	beq.w	38878 <ull_conn_done+0x2ac>
				force = 1U;
   386e6:	2601      	movs	r6, #1
   386e8:	e7a4      	b.n	38634 <ull_conn_done+0x68>
			    (conn->llcp_req == conn->llcp_ack)) {
   386ea:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   386ee:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   386f2:	1a9b      	subs	r3, r3, r2
   386f4:	f003 0303 	and.w	r3, r3, #3
   386f8:	2b02      	cmp	r3, #2
   386fa:	d07c      	beq.n	387f6 <ull_conn_done+0x22a>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   386fc:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   38700:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   38704:	429a      	cmp	r2, r3
   38706:	f000 809b 	beq.w	38840 <ull_conn_done+0x274>
		lll->latency_event = 0U;
   3870a:	2200      	movs	r2, #0
   3870c:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3870e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   38710:	b90e      	cbnz	r6, 38716 <ull_conn_done+0x14a>
   38712:	4590      	cmp	r8, r2
   38714:	d07c      	beq.n	38810 <ull_conn_done+0x244>
		lazy = lll->latency_event + 1U;
   38716:	3201      	adds	r2, #1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   38718:	9d08      	ldr	r5, [sp, #32]
		lazy = lll->latency_event + 1U;
   3871a:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3871c:	b90b      	cbnz	r3, 38722 <ull_conn_done+0x156>
   3871e:	2d00      	cmp	r5, #0
   38720:	d058      	beq.n	387d4 <ull_conn_done+0x208>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   38722:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   38724:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38726:	9500      	str	r5, [sp, #0]
   38728:	2000      	movs	r0, #0
   3872a:	4d67      	ldr	r5, [pc, #412]	; (388c8 <ull_conn_done+0x2fc>)
   3872c:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   3872e:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38730:	e9cd 0001 	strd	r0, r0, [sp, #4]
   38734:	9604      	str	r6, [sp, #16]
   38736:	9406      	str	r4, [sp, #24]
   38738:	b2d2      	uxtb	r2, r2
   3873a:	2101      	movs	r1, #1
   3873c:	9505      	str	r5, [sp, #20]
   3873e:	f7f8 fb51 	bl	30de4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   38742:	f030 0302 	bics.w	r3, r0, #2
   38746:	d0a6      	beq.n	38696 <ull_conn_done+0xca>
   38748:	f7fa fcf8 	bl	3313c <ull_disable_mark_get>
   3874c:	4284      	cmp	r4, r0
   3874e:	d0a2      	beq.n	38696 <ull_conn_done+0xca>
   38750:	4a5e      	ldr	r2, [pc, #376]	; (388cc <ull_conn_done+0x300>)
   38752:	495f      	ldr	r1, [pc, #380]	; (388d0 <ull_conn_done+0x304>)
   38754:	485f      	ldr	r0, [pc, #380]	; (388d4 <ull_conn_done+0x308>)
   38756:	f240 63cd 	movw	r3, #1741	; 0x6cd
   3875a:	f00a fa77 	bl	42c4c <printk>
   3875e:	4040      	eors	r0, r0
   38760:	f380 8811 	msr	BASEPRI, r0
   38764:	f04f 0003 	mov.w	r0, #3
   38768:	df02      	svc	2
   3876a:	e794      	b.n	38696 <ull_conn_done+0xca>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   3876c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   38770:	071e      	lsls	r6, r3, #28
   38772:	d547      	bpl.n	38804 <ull_conn_done+0x238>
					    (lll->latency + 6)) ?
   38774:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   38776:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   3877a:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
   3877c:	429a      	cmp	r2, r3
   3877e:	bfc4      	itt	gt
   38780:	1f93      	subgt	r3, r2, #6
   38782:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
   38784:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   38788:	bfcc      	ite	gt
   3878a:	b29b      	uxthgt	r3, r3
   3878c:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   3878e:	4299      	cmp	r1, r3
   38790:	d063      	beq.n	3885a <ull_conn_done+0x28e>
				conn->appto_reload = appto_reload_new;
   38792:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   38796:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   3879a:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
   3879e:	e72a      	b.n	385f6 <ull_conn_done+0x2a>
		conn->llcp_terminate.reason_final =
   387a0:	263d      	movs	r6, #61	; 0x3d
   387a2:	f884 6143 	strb.w	r6, [r4, #323]	; 0x143
		conn_cleanup(conn, reason_final);
   387a6:	4631      	mov	r1, r6
   387a8:	4620      	mov	r0, r4
}
   387aa:	b00a      	add	sp, #40	; 0x28
   387ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn, reason_final);
   387b0:	f7ff be8a 	b.w	384c8 <conn_cleanup>
		conn->appto_expire = conn->apto_expire = 0U;
   387b4:	2300      	movs	r3, #0
   387b6:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   387ba:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   387be:	e71a      	b.n	385f6 <ull_conn_done+0x2a>
		if (!conn->supervision_expire) {
   387c0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   387c4:	2b00      	cmp	r3, #0
   387c6:	f47f af7c 	bne.w	386c2 <ull_conn_done+0xf6>
			conn->supervision_expire = conn->supervision_reload;
   387ca:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   387ce:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   387d2:	e774      	b.n	386be <ull_conn_done+0xf2>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   387d4:	2900      	cmp	r1, #0
   387d6:	d1a4      	bne.n	38722 <ull_conn_done+0x156>
   387d8:	2e00      	cmp	r6, #0
   387da:	d1a2      	bne.n	38722 <ull_conn_done+0x156>
   387dc:	e75b      	b.n	38696 <ull_conn_done+0xca>
			conn->appto_expire -= elapsed_event;
   387de:	1bd2      	subs	r2, r2, r7
			    (conn->llcp_req == conn->llcp_ack)) {
   387e0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
			conn->appto_expire -= elapsed_event;
   387e4:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
			    (conn->llcp_req == conn->llcp_ack)) {
   387e8:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   387ec:	1a9b      	subs	r3, r3, r2
   387ee:	f003 0303 	and.w	r3, r3, #3
   387f2:	2b02      	cmp	r3, #2
   387f4:	d182      	bne.n	386fc <ull_conn_done+0x130>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   387f6:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   387fa:	3b01      	subs	r3, #1
   387fc:	2b01      	cmp	r3, #1
   387fe:	f63f af7d 	bhi.w	386fc <ull_conn_done+0x130>
   38802:	e782      	b.n	3870a <ull_conn_done+0x13e>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   38804:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   38808:	07d8      	lsls	r0, r3, #31
   3880a:	f57f aef4 	bpl.w	385f6 <ull_conn_done+0x2a>
   3880e:	e7b1      	b.n	38774 <ull_conn_done+0x1a8>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   38810:	9d08      	ldr	r5, [sp, #32]
   38812:	b913      	cbnz	r3, 3881a <ull_conn_done+0x24e>
   38814:	2d00      	cmp	r5, #0
   38816:	f43f af3e 	beq.w	38696 <ull_conn_done+0xca>
	lazy = 0U;
   3881a:	4631      	mov	r1, r6
   3881c:	e781      	b.n	38722 <ull_conn_done+0x156>
			rx = ll_pdu_rx_alloc();
   3881e:	f7fa fbdd 	bl	32fdc <ll_pdu_rx_alloc>
			if (rx) {
   38822:	4601      	mov	r1, r0
   38824:	b320      	cbz	r0, 38870 <ull_conn_done+0x2a4>
				rx->handle = lll->handle;
   38826:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   38828:	2200      	movs	r2, #0
   3882a:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   3882e:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   38830:	231a      	movs	r3, #26
   38832:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   38834:	6800      	ldr	r0, [r0, #0]
   38836:	f7fa fba3 	bl	32f80 <ll_rx_put>
				ll_rx_sched();
   3883a:	f7fa fbab 	bl	32f94 <ll_rx_sched>
   3883e:	e70b      	b.n	38658 <ull_conn_done+0x8c>
	if ((force) || (latency_event != lll->latency_event)) {
   38840:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   38842:	e764      	b.n	3870e <ull_conn_done+0x142>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   38844:	aa08      	add	r2, sp, #32
   38846:	a909      	add	r1, sp, #36	; 0x24
   38848:	4628      	mov	r0, r5
   3884a:	f7ed fe85 	bl	26558 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   3884e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   38852:	b323      	cbz	r3, 3889e <ull_conn_done+0x2d2>
				lll->latency_event = 0;
   38854:	2300      	movs	r3, #0
   38856:	8623      	strh	r3, [r4, #48]	; 0x30
   38858:	e6e1      	b.n	3861e <ull_conn_done+0x52>
			if (conn->apto_expire == 0U) {
   3885a:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	; 0xd0
   3885e:	2900      	cmp	r1, #0
   38860:	f47f aec9 	bne.w	385f6 <ull_conn_done+0x2a>
   38864:	e797      	b.n	38796 <ull_conn_done+0x1ca>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   38866:	2122      	movs	r1, #34	; 0x22
   38868:	4620      	mov	r0, r4
   3886a:	f7ff fe2d 	bl	384c8 <conn_cleanup>
			return;
   3886e:	e712      	b.n	38696 <ull_conn_done+0xca>
				conn->apto_expire = 1U;
   38870:	2301      	movs	r3, #1
   38872:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   38876:	e6ef      	b.n	38658 <ull_conn_done+0x8c>
					force = conn->periph.force & 0x01;
   38878:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->periph.force >>= 1U;
   3887c:	085a      	lsrs	r2, r3, #1
					if (force) {
   3887e:	f013 0301 	ands.w	r3, r3, #1
						conn->periph.force |= BIT(31);
   38882:	bf17      	itett	ne
   38884:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->periph.force >>= 1U;
   38888:	f8c4 20dc 	streq.w	r2, [r4, #220]	; 0xdc
						conn->periph.force |= BIT(31);
   3888c:	f8c4 20dc 	strne.w	r2, [r4, #220]	; 0xdc
					force = conn->periph.force & 0x01;
   38890:	461e      	movne	r6, r3
   38892:	e6cf      	b.n	38634 <ull_conn_done+0x68>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   38894:	213e      	movs	r1, #62	; 0x3e
   38896:	4620      	mov	r0, r4
   38898:	f7ff fe16 	bl	384c8 <conn_cleanup>
			return;
   3889c:	e6fb      	b.n	38696 <ull_conn_done+0xca>
				ull_conn_tx_demux(UINT8_MAX);
   3889e:	20ff      	movs	r0, #255	; 0xff
   388a0:	f7ff fdc2 	bl	38428 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   388a4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   388a8:	2b00      	cmp	r3, #0
   388aa:	d1d3      	bne.n	38854 <ull_conn_done+0x288>
   388ac:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   388b0:	4632      	mov	r2, r6
   388b2:	f7f7 f877 	bl	2f9a4 <memq_peek>
   388b6:	2800      	cmp	r0, #0
   388b8:	d1cc      	bne.n	38854 <ull_conn_done+0x288>
			} else if (lll->periph.latency_enabled) {
   388ba:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   388be:	0759      	lsls	r1, r3, #29
				lll->latency_event = lll->latency;
   388c0:	bf44      	itt	mi
   388c2:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
   388c4:	8623      	strhmi	r3, [r4, #48]	; 0x30
   388c6:	e6aa      	b.n	3861e <ull_conn_done+0x52>
   388c8:	000348a9 	.word	0x000348a9
   388cc:	0004a498 	.word	0x0004a498
   388d0:	0004a60c 	.word	0x0004a60c
   388d4:	0004a024 	.word	0x0004a024

000388d8 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   388d8:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   388dc:	2b00      	cmp	r3, #0
   388de:	f000 80be 	beq.w	38a5e <ull_conn_tx_lll_enqueue+0x186>
   388e2:	3901      	subs	r1, #1
{
   388e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   388e8:	f8df 8174 	ldr.w	r8, [pc, #372]	; 38a60 <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
   388ec:	f8df a174 	ldr.w	sl, [pc, #372]	; 38a64 <ull_conn_tx_lll_enqueue+0x18c>
   388f0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 38a68 <ull_conn_tx_lll_enqueue+0x190>
   388f4:	4604      	mov	r4, r0
   388f6:	b2cd      	uxtb	r5, r1
   388f8:	e010      	b.n	3891c <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   388fa:	4640      	mov	r0, r8
   388fc:	f7f6 ffe4 	bl	2f8c8 <mem_acquire>
		LL_ASSERT(link);
   38900:	4607      	mov	r7, r0
   38902:	b3b0      	cbz	r0, 38972 <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   38904:	f104 0268 	add.w	r2, r4, #104	; 0x68
   38908:	4631      	mov	r1, r6
   3890a:	4638      	mov	r0, r7
   3890c:	f7f7 f840 	bl	2f990 <memq_enqueue>
	while (conn->tx_head &&
   38910:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   38914:	3d01      	subs	r5, #1
   38916:	b2ed      	uxtb	r5, r5
   38918:	2b00      	cmp	r3, #0
   3891a:	d05c      	beq.n	389d6 <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   3891c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   38920:	07d1      	lsls	r1, r2, #31
   38922:	d403      	bmi.n	3892c <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   38924:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   38928:	0792      	lsls	r2, r2, #30
   3892a:	d53a      	bpl.n	389a2 <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   3892c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   38930:	4293      	cmp	r3, r2
   38932:	d150      	bne.n	389d6 <ull_conn_tx_lll_enqueue+0xfe>
   38934:	2dff      	cmp	r5, #255	; 0xff
   38936:	d04e      	beq.n	389d6 <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   38938:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   3893c:	4620      	mov	r0, r4
   3893e:	f7fb ffd3 	bl	348e8 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   38942:	7903      	ldrb	r3, [r0, #4]
   38944:	f003 0303 	and.w	r3, r3, #3
   38948:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3894a:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3894c:	d1d5      	bne.n	388fa <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   3894e:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   38950:	2b0b      	cmp	r3, #11
   38952:	d042      	beq.n	389da <ull_conn_tx_lll_enqueue+0x102>
   38954:	d81b      	bhi.n	3898e <ull_conn_tx_lll_enqueue+0xb6>
   38956:	2b04      	cmp	r3, #4
   38958:	d1cf      	bne.n	388fa <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   3895a:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   3895e:	f043 0302 	orr.w	r3, r3, #2
   38962:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   38966:	4640      	mov	r0, r8
   38968:	f7f6 ffae 	bl	2f8c8 <mem_acquire>
		LL_ASSERT(link);
   3896c:	4607      	mov	r7, r0
   3896e:	2800      	cmp	r0, #0
   38970:	d1c8      	bne.n	38904 <ull_conn_tx_lll_enqueue+0x2c>
   38972:	483e      	ldr	r0, [pc, #248]	; (38a6c <ull_conn_tx_lll_enqueue+0x194>)
   38974:	f240 7326 	movw	r3, #1830	; 0x726
   38978:	4652      	mov	r2, sl
   3897a:	4649      	mov	r1, r9
   3897c:	f00a f966 	bl	42c4c <printk>
   38980:	4040      	eors	r0, r0
   38982:	f380 8811 	msr	BASEPRI, r0
   38986:	f04f 0003 	mov.w	r0, #3
   3898a:	df02      	svc	2
   3898c:	e7ba      	b.n	38904 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   3898e:	3b16      	subs	r3, #22
   38990:	2b01      	cmp	r3, #1
   38992:	d8b2      	bhi.n	388fa <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   38994:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   38998:	f043 0301 	orr.w	r3, r3, #1
   3899c:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   389a0:	e7ab      	b.n	388fa <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   389a2:	791a      	ldrb	r2, [r3, #4]
   389a4:	f002 0203 	and.w	r2, r2, #3
   389a8:	2a03      	cmp	r2, #3
   389aa:	d1c3      	bne.n	38934 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   389ac:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   389ae:	2a03      	cmp	r2, #3
   389b0:	d001      	beq.n	389b6 <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   389b2:	2a0a      	cmp	r2, #10
   389b4:	d1be      	bne.n	38934 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   389b6:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   389ba:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   389be:	428a      	cmp	r2, r1
   389c0:	d010      	beq.n	389e4 <ull_conn_tx_lll_enqueue+0x10c>
   389c2:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   389c6:	2a03      	cmp	r2, #3
   389c8:	d0b4      	beq.n	38934 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   389ca:	681a      	ldr	r2, [r3, #0]
   389cc:	b11a      	cbz	r2, 389d6 <ull_conn_tx_lll_enqueue+0xfe>
   389ce:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   389d2:	428a      	cmp	r2, r1
   389d4:	d032      	beq.n	38a3c <ull_conn_tx_lll_enqueue+0x164>
}
   389d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   389da:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   389de:	2b00      	cmp	r3, #0
   389e0:	da8b      	bge.n	388fa <ull_conn_tx_lll_enqueue+0x22>
   389e2:	e7ba      	b.n	3895a <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   389e4:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   389e8:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   389ec:	4288      	cmp	r0, r1
   389ee:	d1ec      	bne.n	389ca <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   389f0:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   389f4:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   389f8:	4288      	cmp	r0, r1
   389fa:	d1e6      	bne.n	389ca <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   389fc:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   38a00:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   38a04:	4288      	cmp	r0, r1
   38a06:	d1e0      	bne.n	389ca <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   38a08:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   38a0c:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   38a10:	4288      	cmp	r0, r1
   38a12:	d1da      	bne.n	389ca <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   38a14:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   38a18:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   38a1c:	4288      	cmp	r0, r1
   38a1e:	d1d4      	bne.n	389ca <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   38a20:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   38a24:	3a02      	subs	r2, #2
   38a26:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   38a2a:	2201      	movs	r2, #1
   38a2c:	f362 0301 	bfi	r3, r2, #0, #2
   38a30:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   38a34:	2303      	movs	r3, #3
   38a36:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   38a3a:	e77b      	b.n	38934 <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
   38a3c:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   38a40:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   38a44:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   38a48:	6810      	ldr	r0, [r2, #0]
   38a4a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   38a4c:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   38a4e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   38a52:	2900      	cmp	r1, #0
   38a54:	f47f af6e 	bne.w	38934 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   38a58:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   38a5c:	e76a      	b.n	38934 <ull_conn_tx_lll_enqueue+0x5c>
   38a5e:	4770      	bx	lr
   38a60:	20002778 	.word	0x20002778
   38a64:	0004a498 	.word	0x0004a498
   38a68:	0004a4f0 	.word	0x0004a4f0
   38a6c:	0004a024 	.word	0x0004a024

00038a70 <tx_demux>:
{
   38a70:	b510      	push	{r4, lr}
   38a72:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   38a74:	2001      	movs	r0, #1
   38a76:	f7ff fcd7 	bl	38428 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   38a7a:	4620      	mov	r0, r4
   38a7c:	2101      	movs	r1, #1
}
   38a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   38a82:	f7ff bf29 	b.w	388d8 <ull_conn_tx_lll_enqueue>
   38a86:	bf00      	nop

00038a88 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   38a88:	4901      	ldr	r1, [pc, #4]	; (38a90 <ull_conn_link_tx_release+0x8>)
   38a8a:	f7f6 bf37 	b.w	2f8fc <mem_release>
   38a8e:	bf00      	nop
   38a90:	20002778 	.word	0x20002778

00038a94 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   38a94:	4b01      	ldr	r3, [pc, #4]	; (38a9c <ull_conn_ack_last_idx_get+0x8>)
}
   38a96:	78d8      	ldrb	r0, [r3, #3]
   38a98:	4770      	bx	lr
   38a9a:	bf00      	nop
   38a9c:	200006f0 	.word	0x200006f0

00038aa0 <ull_conn_ack_peek>:
{
   38aa0:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   38aa2:	4b0c      	ldr	r3, [pc, #48]	; (38ad4 <ull_conn_ack_peek+0x34>)
   38aa4:	f893 c002 	ldrb.w	ip, [r3, #2]
   38aa8:	f893 e003 	ldrb.w	lr, [r3, #3]
   38aac:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   38aae:	45f4      	cmp	ip, lr
   38ab0:	d00d      	beq.n	38ace <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   38ab2:	fb1c fc04 	smulbb	ip, ip, r4
   38ab6:	3304      	adds	r3, #4
   38ab8:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   38abc:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   38ac0:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   38ac4:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   38ac6:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   38ac8:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   38aca:	6818      	ldr	r0, [r3, #0]
}
   38acc:	bd10      	pop	{r4, pc}
		return NULL;
   38ace:	2000      	movs	r0, #0
}
   38ad0:	bd10      	pop	{r4, pc}
   38ad2:	bf00      	nop
   38ad4:	200006f0 	.word	0x200006f0

00038ad8 <ull_conn_ack_by_last_peek>:
{
   38ad8:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   38ada:	4b0b      	ldr	r3, [pc, #44]	; (38b08 <ull_conn_ack_by_last_peek+0x30>)
   38adc:	f893 c002 	ldrb.w	ip, [r3, #2]
   38ae0:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   38ae4:	4584      	cmp	ip, r0
   38ae6:	d00d      	beq.n	38b04 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   38ae8:	3304      	adds	r3, #4
   38aea:	fb1c fc0e 	smulbb	ip, ip, lr
   38aee:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   38af2:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   38af6:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   38afa:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   38afc:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   38afe:	6818      	ldr	r0, [r3, #0]
}
   38b00:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   38b04:	2000      	movs	r0, #0
   38b06:	e7fb      	b.n	38b00 <ull_conn_ack_by_last_peek+0x28>
   38b08:	200006f0 	.word	0x200006f0

00038b0c <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   38b0c:	4b09      	ldr	r3, [pc, #36]	; (38b34 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   38b0e:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   38b10:	78da      	ldrb	r2, [r3, #3]
   38b12:	7818      	ldrb	r0, [r3, #0]
   38b14:	f893 c001 	ldrb.w	ip, [r3, #1]
   38b18:	428a      	cmp	r2, r1
   38b1a:	d009      	beq.n	38b30 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   38b1c:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   38b1e:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   38b22:	b2d2      	uxtb	r2, r2
		_first = 0U;
   38b24:	4594      	cmp	ip, r2
   38b26:	bf08      	it	eq
   38b28:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   38b2a:	6840      	ldr	r0, [r0, #4]
	*first = _first; /* Write back read-index */
   38b2c:	709a      	strb	r2, [r3, #2]
	return mem;
   38b2e:	4770      	bx	lr
		return NULL;
   38b30:	2000      	movs	r0, #0
}
   38b32:	4770      	bx	lr
   38b34:	200006f0 	.word	0x200006f0

00038b38 <ull_conn_lll_ack_enqueue>:
{
   38b38:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   38b3a:	4a15      	ldr	r2, [pc, #84]	; (38b90 <ull_conn_lll_ack_enqueue+0x58>)
   38b3c:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   38b40:	7854      	ldrb	r4, [r2, #1]
   38b42:	f892 e002 	ldrb.w	lr, [r2, #2]
   38b46:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   38b48:	f10c 0301 	add.w	r3, ip, #1
   38b4c:	b2db      	uxtb	r3, r3
		last = 0U;
   38b4e:	429c      	cmp	r4, r3
   38b50:	bf08      	it	eq
   38b52:	2300      	moveq	r3, #0
	if (last == first) {
   38b54:	459e      	cmp	lr, r3
   38b56:	d00a      	beq.n	38b6e <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   38b58:	fb1c fc05 	smulbb	ip, ip, r5
   38b5c:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
   38b60:	f82e 000c 	strh.w	r0, [lr, ip]
   38b64:	44e6      	add	lr, ip
	lll_tx->node = tx;
   38b66:	f8ce 1004 	str.w	r1, [lr, #4]
	*last = idx; /* Commit: Update write index */
   38b6a:	70d3      	strb	r3, [r2, #3]
}
   38b6c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   38b6e:	4a09      	ldr	r2, [pc, #36]	; (38b94 <ull_conn_lll_ack_enqueue+0x5c>)
   38b70:	4909      	ldr	r1, [pc, #36]	; (38b98 <ull_conn_lll_ack_enqueue+0x60>)
   38b72:	480a      	ldr	r0, [pc, #40]	; (38b9c <ull_conn_lll_ack_enqueue+0x64>)
   38b74:	f240 7376 	movw	r3, #1910	; 0x776
   38b78:	f00a f868 	bl	42c4c <printk>
   38b7c:	4040      	eors	r0, r0
   38b7e:	f380 8811 	msr	BASEPRI, r0
   38b82:	f04f 0003 	mov.w	r0, #3
   38b86:	df02      	svc	2
	lll_tx->handle = handle;
   38b88:	2300      	movs	r3, #0
   38b8a:	801b      	strh	r3, [r3, #0]
   38b8c:	deff      	udf	#255	; 0xff
   38b8e:	bf00      	nop
   38b90:	200006f0 	.word	0x200006f0
   38b94:	0004a498 	.word	0x0004a498
   38b98:	0004a4e0 	.word	0x0004a4e0
   38b9c:	0004a024 	.word	0x0004a024

00038ba0 <ull_conn_tx_ack>:
{
   38ba0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   38ba2:	7953      	ldrb	r3, [r2, #5]
{
   38ba4:	b082      	sub	sp, #8
   38ba6:	4614      	mov	r4, r2
   38ba8:	4605      	mov	r5, r0
   38baa:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   38bac:	b37b      	cbz	r3, 38c0e <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   38bae:	7923      	ldrb	r3, [r4, #4]
   38bb0:	f003 0203 	and.w	r2, r3, #3
   38bb4:	2a03      	cmp	r2, #3
   38bb6:	d00d      	beq.n	38bd4 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   38bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   38bbc:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   38bbe:	bf04      	itt	eq
   38bc0:	f36f 0301 	bfceq	r3, #0, #2
   38bc4:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   38bc6:	4621      	mov	r1, r4
   38bc8:	4628      	mov	r0, r5
}
   38bca:	b002      	add	sp, #8
   38bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   38bd0:	f7fa ba1a 	b.w	33008 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   38bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   38bd8:	429d      	cmp	r5, r3
   38bda:	d126      	bne.n	38c2a <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   38bdc:	6833      	ldr	r3, [r6, #0]
   38bde:	429c      	cmp	r4, r3
   38be0:	d03e      	beq.n	38c60 <ull_conn_tx_ack+0xc0>
		LL_ASSERT(!link->next);
   38be2:	2b00      	cmp	r3, #0
   38be4:	d0ef      	beq.n	38bc6 <ull_conn_tx_ack+0x26>
   38be6:	4a85      	ldr	r2, [pc, #532]	; (38dfc <ull_conn_tx_ack+0x25c>)
   38be8:	4985      	ldr	r1, [pc, #532]	; (38e00 <ull_conn_tx_ack+0x260>)
   38bea:	4886      	ldr	r0, [pc, #536]	; (38e04 <ull_conn_tx_ack+0x264>)
   38bec:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   38bf0:	f00a f82c 	bl	42c4c <printk>
   38bf4:	4040      	eors	r0, r0
   38bf6:	f380 8811 	msr	BASEPRI, r0
   38bfa:	f04f 0003 	mov.w	r0, #3
   38bfe:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   38c00:	4621      	mov	r1, r4
   38c02:	4628      	mov	r0, r5
}
   38c04:	b002      	add	sp, #8
   38c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   38c0a:	f7fa b9fd 	b.w	33008 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   38c0e:	4a7b      	ldr	r2, [pc, #492]	; (38dfc <ull_conn_tx_ack+0x25c>)
   38c10:	497d      	ldr	r1, [pc, #500]	; (38e08 <ull_conn_tx_ack+0x268>)
   38c12:	487c      	ldr	r0, [pc, #496]	; (38e04 <ull_conn_tx_ack+0x264>)
   38c14:	f240 7383 	movw	r3, #1923	; 0x783
   38c18:	f00a f818 	bl	42c4c <printk>
   38c1c:	4040      	eors	r0, r0
   38c1e:	f380 8811 	msr	BASEPRI, r0
   38c22:	f04f 0003 	mov.w	r0, #3
   38c26:	df02      	svc	2
   38c28:	e7c1      	b.n	38bae <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   38c2a:	462a      	mov	r2, r5
   38c2c:	4877      	ldr	r0, [pc, #476]	; (38e0c <ull_conn_tx_ack+0x26c>)
   38c2e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   38c32:	f7f6 fe7b 	bl	2f92c <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   38c36:	79e2      	ldrb	r2, [r4, #7]
   38c38:	3a02      	subs	r2, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   38c3a:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   38c3c:	2a15      	cmp	r2, #21
   38c3e:	d80c      	bhi.n	38c5a <ull_conn_tx_ack+0xba>
   38c40:	e8df f002 	tbb	[pc, r2]
   38c44:	261f0b4e 	.word	0x261f0b4e
   38c48:	180b185a 	.word	0x180b185a
   38c4c:	2d0b1f0b 	.word	0x2d0b1f0b
   38c50:	150b0b0b 	.word	0x150b0b0b
   38c54:	8e42180b 	.word	0x8e42180b
   38c58:	376c      	.short	0x376c
		if (link->next == (void *)tx) {
   38c5a:	6833      	ldr	r3, [r6, #0]
   38c5c:	42a3      	cmp	r3, r4
   38c5e:	d1c0      	bne.n	38be2 <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   38c60:	496b      	ldr	r1, [pc, #428]	; (38e10 <ull_conn_tx_ack+0x270>)
   38c62:	4620      	mov	r0, r4
}
   38c64:	b002      	add	sp, #8
   38c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   38c6a:	f7f6 be47 	b.w	2f8fc <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   38c6e:	7a22      	ldrb	r2, [r4, #8]
   38c70:	2a03      	cmp	r2, #3
   38c72:	d014      	beq.n	38c9e <ull_conn_tx_ack+0xfe>
			conn->common.txn_lock = 0U;
   38c74:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   38c78:	f36f 0241 	bfc	r2, #1, #1
   38c7c:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
   38c80:	e7ac      	b.n	38bdc <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   38c82:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   38c86:	f042 0202 	orr.w	r2, r2, #2
   38c8a:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
   38c8e:	e7a5      	b.n	38bdc <ull_conn_tx_ack+0x3c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   38c90:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   38c94:	f042 0203 	orr.w	r2, r2, #3
   38c98:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
   38c9c:	e79e      	b.n	38bdc <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   38c9e:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
   38ca2:	f022 0203 	bic.w	r2, r2, #3
   38ca6:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   38caa:	2200      	movs	r2, #0
   38cac:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		break;
   38cb0:	e794      	b.n	38bdc <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   38cb2:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   38cb6:	2a00      	cmp	r2, #0
   38cb8:	db7f      	blt.n	38dba <ull_conn_tx_ack+0x21a>
		conn->llcp_phy.pause_tx = 0U;
   38cba:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
   38cbe:	f36f 0200 	bfc	r2, #0, #1
   38cc2:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
   38cc6:	e789      	b.n	38bdc <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   38cc8:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   38ccc:	f002 0107 	and.w	r1, r2, #7
   38cd0:	2901      	cmp	r1, #1
   38cd2:	d183      	bne.n	38bdc <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   38cd4:	2102      	movs	r1, #2
   38cd6:	f361 0202 	bfi	r2, r1, #0, #3
   38cda:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
   38cde:	e77d      	b.n	38bdc <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   38ce0:	7a22      	ldrb	r2, [r4, #8]
			conn->llcp_terminate.reason_final =
   38ce2:	2a13      	cmp	r2, #19
   38ce4:	bf08      	it	eq
   38ce6:	2216      	moveq	r2, #22
   38ce8:	f880 2143 	strb.w	r2, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
   38cec:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   38cf0:	3a01      	subs	r2, #1
   38cf2:	f880 2141 	strb.w	r2, [r0, #321]	; 0x141
	break;
   38cf6:	e771      	b.n	38bdc <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   38cf8:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   38cfc:	2a00      	cmp	r2, #0
   38cfe:	dac7      	bge.n	38c90 <ull_conn_tx_ack+0xf0>
			conn->llcp_enc.pause_rx = 0U;
   38d00:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   38d04:	f022 0203 	bic.w	r2, r2, #3
   38d08:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
   38d0c:	2200      	movs	r2, #0
   38d0e:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   38d12:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   38d16:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
   38d1a:	e75f      	b.n	38bdc <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   38d1c:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
   38d20:	2102      	movs	r1, #2
   38d22:	f361 0201 	bfi	r2, r1, #0, #2
   38d26:	f880 21be 	strb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   38d2a:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   38d2e:	2a00      	cmp	r2, #0
   38d30:	dac3      	bge.n	38cba <ull_conn_tx_ack+0x11a>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   38d32:	4a38      	ldr	r2, [pc, #224]	; (38e14 <ull_conn_tx_ack+0x274>)
   38d34:	e892 0003 	ldmia.w	r2, {r0, r1}
   38d38:	aa02      	add	r2, sp, #8
   38d3a:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   38d3e:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
   38d42:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
   38d46:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   38d4a:	f002 0207 	and.w	r2, r2, #7
   38d4e:	3208      	adds	r2, #8
   38d50:	446a      	add	r2, sp
   38d52:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   38d56:	f362 1106 	bfi	r1, r2, #4, #3
   38d5a:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
   38d5e:	e7ac      	b.n	38cba <ull_conn_tx_ack+0x11a>
		conn->common.txn_lock = 0U;
   38d60:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   38d64:	f36f 0241 	bfc	r2, #1, #1
   38d68:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   38d6c:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
   38d70:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
   38d74:	4282      	cmp	r2, r0
   38d76:	f43f af31 	beq.w	38bdc <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   38d7a:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
   38d7e:	f001 0207 	and.w	r2, r1, #7
   38d82:	2a03      	cmp	r2, #3
   38d84:	d005      	beq.n	38d92 <ull_conn_tx_ack+0x1f2>
   38d86:	3203      	adds	r2, #3
   38d88:	f002 0207 	and.w	r2, r2, #7
   38d8c:	2a01      	cmp	r2, #1
   38d8e:	f63f af64 	bhi.w	38c5a <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
   38d92:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
   38d96:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				conn->lll.max_tx_time =
   38d9a:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	; 0x1b6
   38d9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   38da2:	f001 0207 	and.w	r2, r1, #7
   38da6:	2a05      	cmp	r2, #5
   38da8:	d022      	beq.n	38df0 <ull_conn_tx_ack+0x250>
				if (!conn->llcp_length.cache.tx_octets) {
   38daa:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
   38dae:	b98a      	cbnz	r2, 38dd4 <ull_conn_tx_ack+0x234>
					conn->llcp_length.ack =
   38db0:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   38db4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
   38db8:	e710      	b.n	38bdc <ull_conn_tx_ack+0x3c>
				conn->common.txn_lock = 0U;
   38dba:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   38dbe:	4a15      	ldr	r2, [pc, #84]	; (38e14 <ull_conn_tx_ack+0x274>)
				conn->common.txn_lock = 0U;
   38dc0:	f36f 0141 	bfc	r1, #1, #1
   38dc4:	f880 10d8 	strb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   38dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
   38dcc:	aa02      	add	r2, sp, #8
   38dce:	e902 0003 	stmdb	r2, {r0, r1}
				conn->common.txn_lock = 0U;
   38dd2:	e7b4      	b.n	38d3e <ull_conn_tx_ack+0x19e>
				conn->llcp_length.tx_octets =
   38dd4:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   38dd8:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   38dda:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   38dde:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   38de2:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   38de6:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   38dea:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
   38dee:	e6f5      	b.n	38bdc <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   38df0:	2204      	movs	r2, #4
   38df2:	f362 0102 	bfi	r1, r2, #0, #3
   38df6:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
   38dfa:	e6ef      	b.n	38bdc <ull_conn_tx_ack+0x3c>
   38dfc:	0004a498 	.word	0x0004a498
   38e00:	0004a674 	.word	0x0004a674
   38e04:	0004a024 	.word	0x0004a024
   38e08:	0004a668 	.word	0x0004a668
   38e0c:	20001538 	.word	0x20001538
   38e10:	200026c4 	.word	0x200026c4
   38e14:	0004a680 	.word	0x0004a680

00038e18 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   38e18:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	if (lll->enc_tx) {
   38e1c:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	switch (lll->phy_tx_time) {
   38e20:	f3c3 1302 	ubfx	r3, r3, #4, #3
   38e24:	2b02      	cmp	r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   38e26:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	return max_tx_octets;
   38e2a:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   38e2c:	bf15      	itete	ne
   38e2e:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   38e30:	089b      	lsreq	r3, r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   38e32:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   38e34:	3b0b      	subeq	r3, #11
   38e36:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   38e38:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   38e3a:	bf44      	itt	mi
   38e3c:	3b04      	submi	r3, #4
   38e3e:	b29b      	uxthmi	r3, r3
}
   38e40:	4298      	cmp	r0, r3
   38e42:	bf28      	it	cs
   38e44:	4618      	movcs	r0, r3
   38e46:	4770      	bx	lr

00038e48 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   38e48:	b510      	push	{r4, lr}
   38e4a:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   38e4c:	b930      	cbnz	r0, 38e5c <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   38e4e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   38e52:	f36f 0382 	bfc	r3, #2, #1
   38e56:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   38e5a:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   38e5c:	4a09      	ldr	r2, [pc, #36]	; (38e84 <ticker_update_latency_cancel_op_cb+0x3c>)
   38e5e:	490a      	ldr	r1, [pc, #40]	; (38e88 <ticker_update_latency_cancel_op_cb+0x40>)
   38e60:	480a      	ldr	r0, [pc, #40]	; (38e8c <ticker_update_latency_cancel_op_cb+0x44>)
   38e62:	f240 23af 	movw	r3, #687	; 0x2af
   38e66:	f009 fef1 	bl	42c4c <printk>
   38e6a:	4040      	eors	r0, r0
   38e6c:	f380 8811 	msr	BASEPRI, r0
   38e70:	f04f 0003 	mov.w	r0, #3
   38e74:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   38e76:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   38e7a:	f36f 0382 	bfc	r3, #2, #1
   38e7e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   38e82:	bd10      	pop	{r4, pc}
   38e84:	0004a68c 	.word	0x0004a68c
   38e88:	0004a6d4 	.word	0x0004a6d4
   38e8c:	0004a024 	.word	0x0004a024

00038e90 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   38e90:	b900      	cbnz	r0, 38e94 <ticker_op_cb+0x4>
   38e92:	4770      	bx	lr
{
   38e94:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   38e96:	4a07      	ldr	r2, [pc, #28]	; (38eb4 <ticker_op_cb+0x24>)
   38e98:	4907      	ldr	r1, [pc, #28]	; (38eb8 <ticker_op_cb+0x28>)
   38e9a:	4808      	ldr	r0, [pc, #32]	; (38ebc <ticker_op_cb+0x2c>)
   38e9c:	f240 23a7 	movw	r3, #679	; 0x2a7
   38ea0:	f009 fed4 	bl	42c4c <printk>
   38ea4:	4040      	eors	r0, r0
   38ea6:	f380 8811 	msr	BASEPRI, r0
   38eaa:	f04f 0003 	mov.w	r0, #3
   38eae:	df02      	svc	2
}
   38eb0:	bd08      	pop	{r3, pc}
   38eb2:	bf00      	nop
   38eb4:	0004a68c 	.word	0x0004a68c
   38eb8:	0004a4f8 	.word	0x0004a4f8
   38ebc:	0004a024 	.word	0x0004a024

00038ec0 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   38ec0:	2801      	cmp	r0, #1
   38ec2:	d000      	beq.n	38ec6 <ticker_op_stop_adv_cb+0x6>
   38ec4:	4770      	bx	lr
{
   38ec6:	b510      	push	{r4, lr}
   38ec8:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   38eca:	f7fa f937 	bl	3313c <ull_disable_mark_get>
   38ece:	4284      	cmp	r4, r0
   38ed0:	d00c      	beq.n	38eec <ticker_op_stop_adv_cb+0x2c>
   38ed2:	4a07      	ldr	r2, [pc, #28]	; (38ef0 <ticker_op_stop_adv_cb+0x30>)
   38ed4:	4907      	ldr	r1, [pc, #28]	; (38ef4 <ticker_op_stop_adv_cb+0x34>)
   38ed6:	4808      	ldr	r0, [pc, #32]	; (38ef8 <ticker_op_stop_adv_cb+0x38>)
   38ed8:	f240 239f 	movw	r3, #671	; 0x29f
   38edc:	f009 feb6 	bl	42c4c <printk>
   38ee0:	4040      	eors	r0, r0
   38ee2:	f380 8811 	msr	BASEPRI, r0
   38ee6:	f04f 0003 	mov.w	r0, #3
   38eea:	df02      	svc	2
}
   38eec:	bd10      	pop	{r4, pc}
   38eee:	bf00      	nop
   38ef0:	0004a68c 	.word	0x0004a68c
   38ef4:	0004a6e8 	.word	0x0004a6e8
   38ef8:	0004a024 	.word	0x0004a024

00038efc <ull_periph_ticker_cb>:
{
   38efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38f00:	9c07      	ldr	r4, [sp, #28]
   38f02:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   38f06:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   38f08:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   38f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   38f0e:	4299      	cmp	r1, r3
   38f10:	d026      	beq.n	38f60 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   38f12:	4606      	mov	r6, r0
   38f14:	4617      	mov	r7, r2
   38f16:	4601      	mov	r1, r0
   38f18:	462a      	mov	r2, r5
   38f1a:	4620      	mov	r0, r4
   38f1c:	f7fe f82c 	bl	36f78 <ull_conn_llcp>
		if (ret) {
   38f20:	b9f0      	cbnz	r0, 38f60 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   38f22:	7823      	ldrb	r3, [r4, #0]
   38f24:	3301      	adds	r3, #1
   38f26:	b2db      	uxtb	r3, r3
   38f28:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   38f2a:	b34b      	cbz	r3, 38f80 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   38f2c:	491b      	ldr	r1, [pc, #108]	; (38f9c <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   38f2e:	4b1c      	ldr	r3, [pc, #112]	; (38fa0 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   38f30:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   38f32:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   38f36:	2200      	movs	r2, #0
	p.param = &conn->lll;
   38f38:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   38f3a:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   38f3e:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   38f42:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   38f44:	2001      	movs	r0, #1
   38f46:	4611      	mov	r1, r2
   38f48:	f7f6 fd98 	bl	2fa7c <mayfly_enqueue>
	LL_ASSERT(!err);
   38f4c:	b950      	cbnz	r0, 38f64 <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   38f4e:	20ff      	movs	r0, #255	; 0xff
   38f50:	f7ff fa6a 	bl	38428 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   38f54:	4620      	mov	r0, r4
   38f56:	21ff      	movs	r1, #255	; 0xff
}
   38f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   38f5c:	f7ff bcbc 	b.w	388d8 <ull_conn_tx_lll_enqueue>
}
   38f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   38f64:	4a0f      	ldr	r2, [pc, #60]	; (38fa4 <ull_periph_ticker_cb+0xa8>)
   38f66:	4910      	ldr	r1, [pc, #64]	; (38fa8 <ull_periph_ticker_cb+0xac>)
   38f68:	4810      	ldr	r0, [pc, #64]	; (38fac <ull_periph_ticker_cb+0xb0>)
   38f6a:	f240 232a 	movw	r3, #554	; 0x22a
   38f6e:	f009 fe6d 	bl	42c4c <printk>
   38f72:	4040      	eors	r0, r0
   38f74:	f380 8811 	msr	BASEPRI, r0
   38f78:	f04f 0003 	mov.w	r0, #3
   38f7c:	df02      	svc	2
   38f7e:	e7e6      	b.n	38f4e <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   38f80:	4a08      	ldr	r2, [pc, #32]	; (38fa4 <ull_periph_ticker_cb+0xa8>)
   38f82:	490b      	ldr	r1, [pc, #44]	; (38fb0 <ull_periph_ticker_cb+0xb4>)
   38f84:	4809      	ldr	r0, [pc, #36]	; (38fac <ull_periph_ticker_cb+0xb0>)
   38f86:	f240 231d 	movw	r3, #541	; 0x21d
   38f8a:	f009 fe5f 	bl	42c4c <printk>
   38f8e:	4040      	eors	r0, r0
   38f90:	f380 8811 	msr	BASEPRI, r0
   38f94:	f04f 0003 	mov.w	r0, #3
   38f98:	df02      	svc	2
   38f9a:	e7c7      	b.n	38f2c <ull_periph_ticker_cb+0x30>
   38f9c:	200027bc 	.word	0x200027bc
   38fa0:	20000798 	.word	0x20000798
   38fa4:	0004a68c 	.word	0x0004a68c
   38fa8:	0004a1c0 	.word	0x0004a1c0
   38fac:	0004a024 	.word	0x0004a024
   38fb0:	0004a454 	.word	0x0004a454

00038fb4 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   38fb4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   38fb6:	b123      	cbz	r3, 38fc2 <ull_periph_latency_cancel+0xe>
   38fb8:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   38fbc:	f012 0304 	ands.w	r3, r2, #4
   38fc0:	d000      	beq.n	38fc4 <ull_periph_latency_cancel+0x10>
   38fc2:	4770      	bx	lr
{
   38fc4:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   38fc6:	f042 0204 	orr.w	r2, r2, #4
{
   38fca:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   38fcc:	4c11      	ldr	r4, [pc, #68]	; (39014 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   38fce:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   38fd2:	3103      	adds	r1, #3
   38fd4:	2201      	movs	r2, #1
   38fd6:	e9cd 3202 	strd	r3, r2, [sp, #8]
   38fda:	e9cd 3404 	strd	r3, r4, [sp, #16]
   38fde:	e9cd 3300 	strd	r3, r3, [sp]
   38fe2:	9006      	str	r0, [sp, #24]
   38fe4:	b2ca      	uxtb	r2, r1
   38fe6:	4618      	mov	r0, r3
   38fe8:	2103      	movs	r1, #3
   38fea:	f7f7 fefb 	bl	30de4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   38fee:	f030 0302 	bics.w	r3, r0, #2
   38ff2:	d00c      	beq.n	3900e <ull_periph_latency_cancel+0x5a>
   38ff4:	4a08      	ldr	r2, [pc, #32]	; (39018 <ull_periph_latency_cancel+0x64>)
   38ff6:	4909      	ldr	r1, [pc, #36]	; (3901c <ull_periph_latency_cancel+0x68>)
   38ff8:	4809      	ldr	r0, [pc, #36]	; (39020 <ull_periph_latency_cancel+0x6c>)
   38ffa:	f240 13e3 	movw	r3, #483	; 0x1e3
   38ffe:	f009 fe25 	bl	42c4c <printk>
   39002:	4040      	eors	r0, r0
   39004:	f380 8811 	msr	BASEPRI, r0
   39008:	f04f 0003 	mov.w	r0, #3
   3900c:	df02      	svc	2
}
   3900e:	b008      	add	sp, #32
   39010:	bd10      	pop	{r4, pc}
   39012:	bf00      	nop
   39014:	00038e49 	.word	0x00038e49
   39018:	0004a68c 	.word	0x0004a68c
   3901c:	0004a578 	.word	0x0004a578
   39020:	0004a024 	.word	0x0004a024

00039024 <ll_start_enc_req_send>:
{
   39024:	b570      	push	{r4, r5, r6, lr}
   39026:	460e      	mov	r6, r1
   39028:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   3902a:	f7fc f801 	bl	35030 <ll_connected_get>
	if (!conn) {
   3902e:	2800      	cmp	r0, #0
   39030:	d040      	beq.n	390b4 <ll_start_enc_req_send+0x90>
	if (error_code) {
   39032:	4604      	mov	r4, r0
   39034:	b95e      	cbnz	r6, 3904e <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   39036:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   3903a:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   3903e:	429a      	cmp	r2, r3
   39040:	d003      	beq.n	3904a <ll_start_enc_req_send+0x26>
   39042:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   39046:	2b03      	cmp	r3, #3
   39048:	d026      	beq.n	39098 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   3904a:	200c      	movs	r0, #12
}
   3904c:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   3904e:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   39052:	f010 0004 	ands.w	r0, r0, #4
   39056:	d112      	bne.n	3907e <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   39058:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   3905c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   39060:	429a      	cmp	r2, r3
   39062:	d0f2      	beq.n	3904a <ll_start_enc_req_send+0x26>
   39064:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   39068:	2b03      	cmp	r3, #3
   3906a:	d1ee      	bne.n	3904a <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3906c:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   39070:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   39074:	f360 0301 	bfi	r3, r0, #0, #2
   39078:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
}
   3907c:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   3907e:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   39082:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   39086:	4293      	cmp	r3, r2
   39088:	d1df      	bne.n	3904a <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   3908a:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   3908c:	f884 6142 	strb.w	r6, [r4, #322]	; 0x142
			conn->llcp_terminate.req++;
   39090:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	return 0;
   39094:	2000      	movs	r0, #0
}
   39096:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   39098:	2210      	movs	r2, #16
   3909a:	4629      	mov	r1, r5
   3909c:	f200 1071 	addw	r0, r0, #369	; 0x171
   390a0:	f00b feaf 	bl	44e02 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   390a4:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   390a8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   390ac:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
	return 0;
   390b0:	4630      	mov	r0, r6
}
   390b2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   390b4:	2002      	movs	r0, #2
}
   390b6:	bd70      	pop	{r4, r5, r6, pc}

000390b8 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   390b8:	b510      	push	{r4, lr}
   390ba:	4604      	mov	r4, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   390bc:	7800      	ldrb	r0, [r0, #0]
{
   390be:	f89d c008 	ldrb.w	ip, [sp, #8]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   390c2:	fb02 1101 	mla	r1, r2, r1, r1
   390c6:	4a1a      	ldr	r2, [pc, #104]	; (39130 <lll_chan_sel_1+0x78>)
   390c8:	4401      	add	r1, r0
   390ca:	fb82 0201 	smull	r0, r2, r2, r1
   390ce:	440a      	add	r2, r1
   390d0:	1152      	asrs	r2, r2, #5
   390d2:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   390d6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   390da:	1a8a      	subs	r2, r1, r2
   390dc:	b2d0      	uxtb	r0, r2
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   390de:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   390e0:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   390e2:	5c59      	ldrb	r1, [r3, r1]
   390e4:	f002 0207 	and.w	r2, r2, #7
   390e8:	fa41 f202 	asr.w	r2, r1, r2
   390ec:	f012 0201 	ands.w	r2, r2, #1
   390f0:	d11d      	bne.n	3912e <lll_chan_sel_1+0x76>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   390f2:	fbb0 f1fc 	udiv	r1, r0, ip
   390f6:	fb0c 0111 	mls	r1, ip, r1, r0
   390fa:	1e5c      	subs	r4, r3, #1
   390fc:	b2c9      	uxtb	r1, r1
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   390fe:	3304      	adds	r3, #4
	chan_next = 0U;
   39100:	4610      	mov	r0, r2
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   39102:	f100 0e08 	add.w	lr, r0, #8
   39106:	f814 2f01 	ldrb.w	r2, [r4, #1]!
		bit_count = 8U;
		while (bit_count--) {
   3910a:	fa5f fe8e 	uxtb.w	lr, lr
			if (bite & 0x01) {
   3910e:	f012 0f01 	tst.w	r2, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   39112:	f100 0c01 	add.w	ip, r0, #1
			bite >>= 1;
   39116:	ea4f 0252 	mov.w	r2, r2, lsr #1
			if (bite & 0x01) {
   3911a:	d002      	beq.n	39122 <lll_chan_sel_1+0x6a>
				if (chan_index == 0U) {
   3911c:	b139      	cbz	r1, 3912e <lll_chan_sel_1+0x76>
				chan_index--;
   3911e:	3901      	subs	r1, #1
   39120:	b2c9      	uxtb	r1, r1
			chan_next++;
   39122:	fa5f f08c 	uxtb.w	r0, ip
		while (bit_count--) {
   39126:	4586      	cmp	lr, r0
   39128:	d1f1      	bne.n	3910e <lll_chan_sel_1+0x56>
	while (byte_count--) {
   3912a:	429c      	cmp	r4, r3
   3912c:	d1e9      	bne.n	39102 <lll_chan_sel_1+0x4a>
}
   3912e:	bd10      	pop	{r4, pc}
   39130:	dd67c8a7 	.word	0xdd67c8a7

00039134 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   39134:	8842      	ldrh	r2, [r0, #2]
   39136:	8800      	ldrh	r0, [r0, #0]
}
   39138:	4050      	eors	r0, r2
   3913a:	4770      	bx	lr

0003913c <lll_chan_sel_2>:
{
   3913c:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3913e:	4d2f      	ldr	r5, [pc, #188]	; (391fc <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   39140:	4c2f      	ldr	r4, [pc, #188]	; (39200 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   39142:	4048      	eors	r0, r1
   39144:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   39148:	0a06      	lsrs	r6, r0, #8
   3914a:	fa5f fe80 	uxtb.w	lr, r0
   3914e:	eb0e 2e8e 	add.w	lr, lr, lr, lsl #10
   39152:	eb06 2086 	add.w	r0, r6, r6, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   39156:	ea04 1740 	and.w	r7, r4, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3915a:	ea05 0640 	and.w	r6, r5, r0, lsl #1
   3915e:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   39162:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   39166:	433e      	orrs	r6, r7
   39168:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3916c:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   39170:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   39174:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   39178:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   3917c:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   3917e:	f3c0 4007 	ubfx	r0, r0, #16, #8
   39182:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   39186:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   3918a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3918e:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   39190:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   39194:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   39196:	d1d7      	bne.n	39148 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   39198:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   3919a:	481a      	ldr	r0, [pc, #104]	; (39204 <lll_chan_sel_2+0xc8>)
   3919c:	fba0 4001 	umull	r4, r0, r0, r1
   391a0:	1a0c      	subs	r4, r1, r0
   391a2:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   391a6:	0940      	lsrs	r0, r0, #5
   391a8:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   391ac:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   391b0:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   391b2:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   391b6:	f000 0507 	and.w	r5, r0, #7
   391ba:	5d14      	ldrb	r4, [r2, r4]
   391bc:	412c      	asrs	r4, r5
   391be:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   391c0:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   391c2:	d41a      	bmi.n	391fa <lll_chan_sel_2+0xbe>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   391c4:	fb01 f303 	mul.w	r3, r1, r3
   391c8:	1e56      	subs	r6, r2, #1
   391ca:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   391ce:	3204      	adds	r2, #4
	chan_next = 0U;
   391d0:	4660      	mov	r0, ip
		bite = *chan_map;
   391d2:	f100 0508 	add.w	r5, r0, #8
   391d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   391da:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   391dc:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   391e0:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   391e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   391e8:	d002      	beq.n	391f0 <lll_chan_sel_2+0xb4>
				if (chan_index == 0U) {
   391ea:	b133      	cbz	r3, 391fa <lll_chan_sel_2+0xbe>
				chan_index--;
   391ec:	3b01      	subs	r3, #1
   391ee:	b2db      	uxtb	r3, r3
			chan_next++;
   391f0:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   391f2:	42a8      	cmp	r0, r5
   391f4:	d1f2      	bne.n	391dc <lll_chan_sel_2+0xa0>
	while (byte_count--) {
   391f6:	42b2      	cmp	r2, r6
   391f8:	d1eb      	bne.n	391d2 <lll_chan_sel_2+0x96>
}
   391fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   391fc:	00022110 	.word	0x00022110
   39200:	00088440 	.word	0x00088440
   39204:	bacf914d 	.word	0xbacf914d

00039208 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   39208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3920c:	4d18      	ldr	r5, [pc, #96]	; (39270 <rl_update+0x68>)
   3920e:	4e19      	ldr	r6, [pc, #100]	; (39274 <rl_update+0x6c>)
   39210:	2400      	movs	r4, #0
   39212:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   39216:	1eaf      	subs	r7, r5, #2
   39218:	f04f 0801 	mov.w	r8, #1
   3921c:	e006      	b.n	3922c <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3921e:	3401      	adds	r4, #1
   39220:	2c08      	cmp	r4, #8
   39222:	f105 0506 	add.w	r5, r5, #6
   39226:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3922a:	d01f      	beq.n	3926c <rl_update+0x64>
		if (rl[i].taken) {
   3922c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   39230:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   39234:	07da      	lsls	r2, r3, #31
   39236:	d5f2      	bpl.n	3921e <rl_update+0x16>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   39238:	787a      	ldrb	r2, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   3923a:	f897 c000 	ldrb.w	ip, [r7]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   3923e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   39242:	fa08 f104 	lsl.w	r1, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   39246:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   39248:	ea4c 0c01 	orr.w	ip, ip, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3924c:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3924e:	4631      	mov	r1, r6
   39250:	4628      	mov	r0, r5
   39252:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39254:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   39256:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3925a:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3925c:	f00b fdd1 	bl	44e02 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39260:	2c08      	cmp	r4, #8
   39262:	f105 0506 	add.w	r5, r5, #6
   39266:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3926a:	d1df      	bne.n	3922c <rl_update+0x24>
}
   3926c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   39270:	20002a3a 	.word	0x20002a3a
   39274:	200028f9 	.word	0x200028f9

00039278 <fal_update>:
{
   39278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3927c:	4e21      	ldr	r6, [pc, #132]	; (39304 <fal_update+0x8c>)
   3927e:	4d22      	ldr	r5, [pc, #136]	; (39308 <fal_update+0x90>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   39280:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3930c <fal_update+0x94>
   39284:	f8df 9088 	ldr.w	r9, [pc, #136]	; 39310 <fal_update+0x98>
{
   39288:	2400      	movs	r4, #0
   3928a:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   3928e:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   39290:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   39294:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   39298:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3929c:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   3929e:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   392a2:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   392a4:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   392a8:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   392ac:	d023      	beq.n	392f6 <fal_update+0x7e>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   392ae:	f898 e000 	ldrb.w	lr, [r8]
		j = fal[i].rl_idx;
   392b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   392b6:	f1be 0f00 	cmp.w	lr, #0
   392ba:	d00a      	beq.n	392d2 <fal_update+0x5a>
   392bc:	2b07      	cmp	r3, #7
   392be:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   392c2:	d806      	bhi.n	392d2 <fal_update+0x5a>
   392c4:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   392c8:	f013 0f04 	tst.w	r3, #4
   392cc:	d001      	beq.n	392d2 <fal_update+0x5a>
   392ce:	06db      	lsls	r3, r3, #27
   392d0:	d511      	bpl.n	392f6 <fal_update+0x7e>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   392d2:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   392d6:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   392da:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   392de:	ea4e 0e0c 	orr.w	lr, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   392e2:	f897 c001 	ldrb.w	ip, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   392e6:	f887 e000 	strb.w	lr, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   392ea:	40a3      	lsls	r3, r4
   392ec:	ea4c 0303 	orr.w	r3, ip, r3
   392f0:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   392f2:	f00b fd86 	bl	44e02 <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   392f6:	3401      	adds	r4, #1
   392f8:	2c08      	cmp	r4, #8
   392fa:	f105 0508 	add.w	r5, r5, #8
   392fe:	d1c7      	bne.n	39290 <fal_update+0x18>
}
   39300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   39304:	2000280e 	.word	0x2000280e
   39308:	200027ce 	.word	0x200027ce
   3930c:	20003c6c 	.word	0x20003c6c
   39310:	200028f8 	.word	0x200028f8

00039314 <ll_fal_size_get>:
}
   39314:	2008      	movs	r0, #8
   39316:	4770      	bx	lr

00039318 <ll_fal_clear>:
{
   39318:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   3931a:	2000      	movs	r0, #0
   3931c:	f7fa ff56 	bl	341cc <ull_adv_filter_pol_get>
   39320:	b9c8      	cbnz	r0, 39356 <ll_fal_clear+0x3e>
   39322:	4a0e      	ldr	r2, [pc, #56]	; (3935c <ll_fal_clear+0x44>)
			rl[j].fal = 0U;
   39324:	4c0e      	ldr	r4, [pc, #56]	; (39360 <ll_fal_clear+0x48>)
		uint8_t j = fal[i].rl_idx;
   39326:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   3932a:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   3932c:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   3932e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   39332:	d805      	bhi.n	39340 <ll_fal_clear+0x28>
			rl[j].fal = 0U;
   39334:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   39338:	f36f 1345 	bfc	r3, #5, #1
   3933c:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   39340:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   39344:	f36f 0300 	bfc	r3, #0, #1
   39348:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   3934c:	3001      	adds	r0, #1
   3934e:	2808      	cmp	r0, #8
   39350:	d1e9      	bne.n	39326 <ll_fal_clear+0xe>
	return 0;
   39352:	2000      	movs	r0, #0
}
   39354:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39356:	200c      	movs	r0, #12
}
   39358:	bd10      	pop	{r4, pc}
   3935a:	bf00      	nop
   3935c:	200027cc 	.word	0x200027cc
   39360:	200028f8 	.word	0x200028f8

00039364 <ll_fal_add>:
{
   39364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39368:	4681      	mov	r9, r0
   3936a:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   3936c:	2000      	movs	r0, #0
   3936e:	f7fa ff2d 	bl	341cc <ull_adv_filter_pol_get>
   39372:	2800      	cmp	r0, #0
   39374:	d16d      	bne.n	39452 <ll_fal_add+0xee>
	if (addr->type == ADDR_TYPE_ANON) {
   39376:	f899 a000 	ldrb.w	sl, [r9]
   3937a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   3937e:	4605      	mov	r5, r0
   39380:	d064      	beq.n	3944c <ll_fal_add+0xe8>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   39382:	4e42      	ldr	r6, [pc, #264]	; (3948c <ll_fal_add+0x128>)
   39384:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   39388:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   3938c:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   39390:	4604      	mov	r4, r0
   39392:	1eb7      	subs	r7, r6, #2
   39394:	e009      	b.n	393aa <ll_fal_add+0x46>
		} else if (free_idx && !fal[i].taken &&
   39396:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   3939a:	d101      	bne.n	393a0 <ll_fal_add+0x3c>
			*free_idx = i;
   3939c:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < FAL_SIZE; i++) {
   393a0:	3401      	adds	r4, #1
   393a2:	2c08      	cmp	r4, #8
   393a4:	f106 0608 	add.w	r6, r6, #8
   393a8:	d017      	beq.n	393da <ll_fal_add+0x76>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   393aa:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   393ae:	07d8      	lsls	r0, r3, #31
   393b0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   393b4:	d5ef      	bpl.n	39396 <ll_fal_add+0x32>
   393b6:	4552      	cmp	r2, sl
   393b8:	d1f2      	bne.n	393a0 <ll_fal_add+0x3c>
   393ba:	2206      	movs	r2, #6
   393bc:	4630      	mov	r0, r6
   393be:	4659      	mov	r1, fp
   393c0:	f00b fd0f 	bl	44de2 <memcmp>
   393c4:	2800      	cmp	r0, #0
   393c6:	d041      	beq.n	3944c <ll_fal_add+0xe8>
		} else if (free_idx && !fal[i].taken &&
   393c8:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   393cc:	07d9      	lsls	r1, r3, #31
   393ce:	d5e2      	bpl.n	39396 <ll_fal_add+0x32>
	for (i = 0; i < FAL_SIZE; i++) {
   393d0:	3401      	adds	r4, #1
   393d2:	2c08      	cmp	r4, #8
   393d4:	f106 0608 	add.w	r6, r6, #8
   393d8:	d1e7      	bne.n	393aa <ll_fal_add+0x46>
	} else if (j >= ARRAY_SIZE(fal)) {
   393da:	f1b8 0f07 	cmp.w	r8, #7
   393de:	d850      	bhi.n	39482 <ll_fal_add+0x11e>
	fal[i].id_addr_type = id_addr->type & 0x1;
   393e0:	f899 2000 	ldrb.w	r2, [r9]
   393e4:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   393e8:	4e29      	ldr	r6, [pc, #164]	; (39490 <ll_fal_add+0x12c>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   393ea:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
   393ec:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   393f0:	fb14 0008 	smlabb	r0, r4, r8, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
   393f4:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   393f8:	4438      	add	r0, r7
   393fa:	2206      	movs	r2, #6
   393fc:	4659      	mov	r1, fp
   393fe:	f00b fd00 	bl	44e02 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   39402:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39406:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3940a:	f003 0301 	and.w	r3, r3, #1
   3940e:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   39412:	fa5f fa85 	uxtb.w	sl, r5
   39416:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   3941a:	f3c2 1180 	ubfx	r1, r2, #6, #1
   3941e:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39420:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39424:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   39428:	d501      	bpl.n	3942e <ll_fal_add+0xca>
   3942a:	4299      	cmp	r1, r3
   3942c:	d015      	beq.n	3945a <ll_fal_add+0xf6>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3942e:	2d08      	cmp	r5, #8
   39430:	f106 0628 	add.w	r6, r6, #40	; 0x28
   39434:	d1eb      	bne.n	3940e <ll_fal_add+0xaa>
		fal[i].rl_idx = FILTER_IDX_NONE;
   39436:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   3943a:	22ff      	movs	r2, #255	; 0xff
   3943c:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   3943e:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   39442:	f043 0301 	orr.w	r3, r3, #1
   39446:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   3944a:	2000      	movs	r0, #0
}
   3944c:	b003      	add	sp, #12
   3944e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39452:	200c      	movs	r0, #12
}
   39454:	b003      	add	sp, #12
   39456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3945a:	4630      	mov	r0, r6
   3945c:	2206      	movs	r2, #6
   3945e:	4659      	mov	r1, fp
   39460:	9301      	str	r3, [sp, #4]
   39462:	f00b fcbe 	bl	44de2 <memcmp>
   39466:	9b01      	ldr	r3, [sp, #4]
   39468:	2800      	cmp	r0, #0
   3946a:	d1e0      	bne.n	3942e <ll_fal_add+0xca>
		rl[j].fal = 1U;
   3946c:	f819 3004 	ldrb.w	r3, [r9, r4]
   39470:	f043 0320 	orr.w	r3, r3, #32
   39474:	f809 3004 	strb.w	r3, [r9, r4]
		fal[i].rl_idx = j;
   39478:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   3947c:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   39480:	e7dd      	b.n	3943e <ll_fal_add+0xda>
   39482:	2007      	movs	r0, #7
}
   39484:	b003      	add	sp, #12
   39486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3948a:	bf00      	nop
   3948c:	200027ce 	.word	0x200027ce
   39490:	200028f9 	.word	0x200028f9

00039494 <ll_fal_remove>:
{
   39494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39498:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   3949a:	2000      	movs	r0, #0
   3949c:	f7fa fe96 	bl	341cc <ull_adv_filter_pol_get>
   394a0:	bbb8      	cbnz	r0, 39512 <ll_fal_remove+0x7e>
	if (addr->type == ADDR_TYPE_ANON) {
   394a2:	783e      	ldrb	r6, [r7, #0]
   394a4:	2eff      	cmp	r6, #255	; 0xff
   394a6:	4604      	mov	r4, r0
   394a8:	d013      	beq.n	394d2 <ll_fal_remove+0x3e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   394aa:	4d1b      	ldr	r5, [pc, #108]	; (39518 <ll_fal_remove+0x84>)
   394ac:	3701      	adds	r7, #1
	for (i = 0; i < FAL_SIZE; i++) {
   394ae:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   394b2:	f006 0601 	and.w	r6, r6, #1
   394b6:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   394ba:	f3c3 0240 	ubfx	r2, r3, #1, #1
   394be:	07db      	lsls	r3, r3, #31
   394c0:	d501      	bpl.n	394c6 <ll_fal_remove+0x32>
   394c2:	42b2      	cmp	r2, r6
   394c4:	d007      	beq.n	394d6 <ll_fal_remove+0x42>
	for (i = 0; i < FAL_SIZE; i++) {
   394c6:	3401      	adds	r4, #1
   394c8:	2c08      	cmp	r4, #8
   394ca:	f105 0508 	add.w	r5, r5, #8
   394ce:	d1f2      	bne.n	394b6 <ll_fal_remove+0x22>
   394d0:	2002      	movs	r0, #2
}
   394d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   394d6:	2206      	movs	r2, #6
   394d8:	4628      	mov	r0, r5
   394da:	4639      	mov	r1, r7
   394dc:	f00b fc81 	bl	44de2 <memcmp>
   394e0:	2800      	cmp	r0, #0
   394e2:	d1f0      	bne.n	394c6 <ll_fal_remove+0x32>
		uint8_t j = fal[i].rl_idx;
   394e4:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   394e8:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   394ea:	2b07      	cmp	r3, #7
   394ec:	d808      	bhi.n	39500 <ll_fal_remove+0x6c>
			rl[j].fal = 0U;
   394ee:	4a0b      	ldr	r2, [pc, #44]	; (3951c <ll_fal_remove+0x88>)
   394f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   394f4:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   394f8:	f360 1145 	bfi	r1, r0, #5, #1
   394fc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   39500:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   39504:	f36f 0300 	bfc	r3, #0, #1
   39508:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   3950c:	2000      	movs	r0, #0
}
   3950e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39512:	200c      	movs	r0, #12
}
   39514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39518:	200027ce 	.word	0x200027ce
   3951c:	200028f8 	.word	0x200028f8

00039520 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   39520:	2807      	cmp	r0, #7
{
   39522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39526:	4604      	mov	r4, r0
   39528:	460e      	mov	r6, r1
   3952a:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3952c:	d817      	bhi.n	3955e <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   3952e:	4d1a      	ldr	r5, [pc, #104]	; (39598 <ll_rl_id_addr_get+0x78>)
   39530:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   39534:	00a7      	lsls	r7, r4, #2
   39536:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   3953a:	07db      	lsls	r3, r3, #31
   3953c:	d51d      	bpl.n	3957a <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   3953e:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   39540:	4640      	mov	r0, r8
	*id_addr_type = rl[rl_idx].id_addr_type;
   39542:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   39546:	f3c3 1380 	ubfx	r3, r3, #6, #1
   3954a:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3954c:	2328      	movs	r3, #40	; 0x28
   3954e:	fb03 5104 	mla	r1, r3, r4, r5
   39552:	2206      	movs	r2, #6
}
   39554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   39558:	3101      	adds	r1, #1
   3955a:	f00b bc52 	b.w	44e02 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3955e:	4a0f      	ldr	r2, [pc, #60]	; (3959c <ll_rl_id_addr_get+0x7c>)
   39560:	490f      	ldr	r1, [pc, #60]	; (395a0 <ll_rl_id_addr_get+0x80>)
   39562:	4810      	ldr	r0, [pc, #64]	; (395a4 <ll_rl_id_addr_get+0x84>)
   39564:	f44f 7389 	mov.w	r3, #274	; 0x112
   39568:	f009 fb70 	bl	42c4c <printk>
   3956c:	4040      	eors	r0, r0
   3956e:	f380 8811 	msr	BASEPRI, r0
   39572:	f04f 0003 	mov.w	r0, #3
   39576:	df02      	svc	2
   39578:	e7d9      	b.n	3952e <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   3957a:	4a08      	ldr	r2, [pc, #32]	; (3959c <ll_rl_id_addr_get+0x7c>)
   3957c:	490a      	ldr	r1, [pc, #40]	; (395a8 <ll_rl_id_addr_get+0x88>)
   3957e:	4809      	ldr	r0, [pc, #36]	; (395a4 <ll_rl_id_addr_get+0x84>)
   39580:	f240 1313 	movw	r3, #275	; 0x113
   39584:	f009 fb62 	bl	42c4c <printk>
   39588:	4040      	eors	r0, r0
   3958a:	f380 8811 	msr	BASEPRI, r0
   3958e:	f04f 0003 	mov.w	r0, #3
   39592:	df02      	svc	2
   39594:	e7d3      	b.n	3953e <ll_rl_id_addr_get+0x1e>
   39596:	bf00      	nop
   39598:	200028f8 	.word	0x200028f8
   3959c:	0004a718 	.word	0x0004a718
   395a0:	0004a75c 	.word	0x0004a75c
   395a4:	0004a024 	.word	0x0004a024
   395a8:	0004a768 	.word	0x0004a768

000395ac <ll_rl_size_get>:
   395ac:	2008      	movs	r0, #8
   395ae:	4770      	bx	lr

000395b0 <ll_rl_clear>:
{
   395b0:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   395b2:	2000      	movs	r0, #0
   395b4:	f7fa fdfe 	bl	341b4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   395b8:	bb88      	cbnz	r0, 3961e <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   395ba:	4b1a      	ldr	r3, [pc, #104]	; (39624 <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   395bc:	4c1a      	ldr	r4, [pc, #104]	; (39628 <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   395be:	7819      	ldrb	r1, [r3, #0]
   395c0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   395c4:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   395c6:	f360 0100 	bfi	r1, r0, #0, #1
   395ca:	f360 0200 	bfi	r2, r0, #0, #1
   395ce:	7019      	strb	r1, [r3, #0]
   395d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   395d4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   395d8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   395dc:	f360 0100 	bfi	r1, r0, #0, #1
   395e0:	f360 0200 	bfi	r2, r0, #0, #1
   395e4:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   395e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   395ec:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   395f0:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   395f4:	f360 0100 	bfi	r1, r0, #0, #1
   395f8:	f360 0200 	bfi	r2, r0, #0, #1
   395fc:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   39600:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   39604:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   39608:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   3960c:	f360 0100 	bfi	r1, r0, #0, #1
   39610:	f360 0200 	bfi	r2, r0, #0, #1
   39614:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   39618:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   3961c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3961e:	200c      	movs	r0, #12
}
   39620:	bd10      	pop	{r4, pc}
   39622:	bf00      	nop
   39624:	200028f8 	.word	0x200028f8
   39628:	20003c6b 	.word	0x20003c6b

0003962c <ll_rl_remove>:
{
   3962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39630:	4681      	mov	r9, r0
   39632:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   39634:	2000      	movs	r0, #0
   39636:	f7fa fdbd 	bl	341b4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   3963a:	2800      	cmp	r0, #0
   3963c:	d149      	bne.n	396d2 <ll_rl_remove+0xa6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3963e:	46ca      	mov	sl, r9
   39640:	4e4e      	ldr	r6, [pc, #312]	; (3977c <ll_rl_remove+0x150>)
   39642:	f81a 8b01 	ldrb.w	r8, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39646:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39648:	f008 0801 	and.w	r8, r8, #1
   3964c:	1e75      	subs	r5, r6, #1
   3964e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   39652:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
   39656:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   3965a:	f3c2 1380 	ubfx	r3, r2, #6, #1
   3965e:	07d2      	lsls	r2, r2, #31
   39660:	ea4f 0784 	mov.w	r7, r4, lsl #2
   39664:	d501      	bpl.n	3966a <ll_rl_remove+0x3e>
   39666:	4543      	cmp	r3, r8
   39668:	d008      	beq.n	3967c <ll_rl_remove+0x50>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3966a:	3401      	adds	r4, #1
   3966c:	2c08      	cmp	r4, #8
   3966e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   39672:	d1ec      	bne.n	3964e <ll_rl_remove+0x22>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39674:	2002      	movs	r0, #2
}
   39676:	b003      	add	sp, #12
   39678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3967c:	4630      	mov	r0, r6
   3967e:	2206      	movs	r2, #6
   39680:	4651      	mov	r1, sl
   39682:	f00b fbae 	bl	44de2 <memcmp>
   39686:	4603      	mov	r3, r0
   39688:	2800      	cmp	r0, #0
   3968a:	d1ee      	bne.n	3966a <ll_rl_remove+0x3e>
		if (rl[i].pirk) {
   3968c:	f89b 2000 	ldrb.w	r2, [fp]
   39690:	0752      	lsls	r2, r2, #29
   39692:	d431      	bmi.n	396f8 <ll_rl_remove+0xcc>
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   39694:	f899 9000 	ldrb.w	r9, [r9]
	for (i = 0; i < FAL_SIZE; i++) {
   39698:	4e39      	ldr	r6, [pc, #228]	; (39780 <ll_rl_remove+0x154>)
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3969a:	f009 0901 	and.w	r9, r9, #1
   3969e:	f1a6 0802 	sub.w	r8, r6, #2
   396a2:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   396a6:	07d0      	lsls	r0, r2, #31
   396a8:	f3c2 0140 	ubfx	r1, r2, #1, #1
   396ac:	d501      	bpl.n	396b2 <ll_rl_remove+0x86>
   396ae:	4549      	cmp	r1, r9
   396b0:	d013      	beq.n	396da <ll_rl_remove+0xae>
	for (i = 0; i < FAL_SIZE; i++) {
   396b2:	3301      	adds	r3, #1
   396b4:	2b08      	cmp	r3, #8
   396b6:	f106 0608 	add.w	r6, r6, #8
   396ba:	d1f2      	bne.n	396a2 <ll_rl_remove+0x76>
		rl[i].taken = 0U;
   396bc:	443c      	add	r4, r7
		return 0;
   396be:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   396c0:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   396c4:	f36f 0300 	bfc	r3, #0, #1
   396c8:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
}
   396cc:	b003      	add	sp, #12
   396ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   396d2:	200c      	movs	r0, #12
}
   396d4:	b003      	add	sp, #12
   396d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   396da:	2206      	movs	r2, #6
   396dc:	4630      	mov	r0, r6
   396de:	4651      	mov	r1, sl
   396e0:	9301      	str	r3, [sp, #4]
   396e2:	f00b fb7e 	bl	44de2 <memcmp>
   396e6:	9b01      	ldr	r3, [sp, #4]
   396e8:	2800      	cmp	r0, #0
   396ea:	d1e2      	bne.n	396b2 <ll_rl_remove+0x86>
			fal[j].rl_idx = FILTER_IDX_NONE;
   396ec:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
   396f0:	23ff      	movs	r3, #255	; 0xff
   396f2:	f888 3001 	strb.w	r3, [r8, #1]
   396f6:	e7e1      	b.n	396bc <ll_rl_remove+0x90>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   396f8:	f8df 8088 	ldr.w	r8, [pc, #136]	; 39784 <ll_rl_remove+0x158>
   396fc:	f898 6000 	ldrb.w	r6, [r8]
   39700:	3e01      	subs	r6, #1
			if (pj && pi != pj) {
   39702:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   39706:	d003      	beq.n	39710 <ll_rl_remove+0xe4>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   39708:	f89b b017 	ldrb.w	fp, [fp, #23]
			if (pj && pi != pj) {
   3970c:	45b3      	cmp	fp, r6
   3970e:	d102      	bne.n	39716 <ll_rl_remove+0xea>
			peer_irk_count--;
   39710:	f888 6000 	strb.w	r6, [r8]
   39714:	e7be      	b.n	39694 <ll_rl_remove+0x68>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   39716:	481c      	ldr	r0, [pc, #112]	; (39788 <ll_rl_remove+0x15c>)
   39718:	9301      	str	r3, [sp, #4]
   3971a:	2210      	movs	r2, #16
   3971c:	eb00 1106 	add.w	r1, r0, r6, lsl #4
   39720:	eb00 100b 	add.w	r0, r0, fp, lsl #4
   39724:	f00b fb6d 	bl	44e02 <memcpy>
   39728:	9b01      	ldr	r3, [sp, #4]
   3972a:	f8df c060 	ldr.w	ip, [pc, #96]	; 3978c <ll_rl_remove+0x160>
   3972e:	461a      	mov	r2, r3
					if (rl[k].taken && rl[k].pirk &&
   39730:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   39734:	fa5f fe82 	uxtb.w	lr, r2
   39738:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   3973c:	f010 0f01 	tst.w	r0, #1
   39740:	f102 0201 	add.w	r2, r2, #1
   39744:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   39748:	d005      	beq.n	39756 <ll_rl_remove+0x12a>
   3974a:	0740      	lsls	r0, r0, #29
   3974c:	d503      	bpl.n	39756 <ll_rl_remove+0x12a>
   3974e:	f89c 0017 	ldrb.w	r0, [ip, #23]
   39752:	42b0      	cmp	r0, r6
   39754:	d008      	beq.n	39768 <ll_rl_remove+0x13c>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   39756:	2a08      	cmp	r2, #8
   39758:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   3975c:	d1e8      	bne.n	39730 <ll_rl_remove+0x104>
			peer_irk_count--;
   3975e:	f898 6000 	ldrb.w	r6, [r8]
   39762:	3e01      	subs	r6, #1
   39764:	b2f6      	uxtb	r6, r6
   39766:	e7d3      	b.n	39710 <ll_rl_remove+0xe4>
   39768:	f898 6000 	ldrb.w	r6, [r8]
						peer_irk_rl_ids[pi] = k;
   3976c:	4a08      	ldr	r2, [pc, #32]	; (39790 <ll_rl_remove+0x164>)
						rl[k].pirk_idx = pi;
   3976e:	f881 b017 	strb.w	fp, [r1, #23]
			peer_irk_count--;
   39772:	3e01      	subs	r6, #1
						peer_irk_rl_ids[pi] = k;
   39774:	f802 e00b 	strb.w	lr, [r2, fp]
			peer_irk_count--;
   39778:	b2f6      	uxtb	r6, r6
						break;
   3977a:	e7c9      	b.n	39710 <ll_rl_remove+0xe4>
   3977c:	200028f9 	.word	0x200028f9
   39780:	200027ce 	.word	0x200027ce
   39784:	20003c6b 	.word	0x20003c6b
   39788:	20002878 	.word	0x20002878
   3978c:	200028f8 	.word	0x200028f8
   39790:	20002870 	.word	0x20002870

00039794 <ll_rl_crpa_set>:
{
   39794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   39798:	795c      	ldrb	r4, [r3, #5]
   3979a:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   3979e:	2c40      	cmp	r4, #64	; 0x40
   397a0:	d001      	beq.n	397a6 <ll_rl_crpa_set+0x12>
}
   397a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   397a6:	461e      	mov	r6, r3
   397a8:	460f      	mov	r7, r1
   397aa:	b309      	cbz	r1, 397f0 <ll_rl_crpa_set+0x5c>
   397ac:	f8df 9068 	ldr.w	r9, [pc, #104]	; 39818 <ll_rl_crpa_set+0x84>
   397b0:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   397b2:	f000 0a01 	and.w	sl, r0, #1
   397b6:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   397ba:	e003      	b.n	397c4 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   397bc:	2c08      	cmp	r4, #8
   397be:	f109 0928 	add.w	r9, r9, #40	; 0x28
   397c2:	d0ee      	beq.n	397a2 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   397c4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   397c8:	4625      	mov	r5, r4
   397ca:	f818 c033 	ldrb.w	ip, [r8, r3, lsl #3]
   397ce:	f01c 0f01 	tst.w	ip, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   397d2:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   397d6:	f3cc 1380 	ubfx	r3, ip, #6, #1
   397da:	d0ef      	beq.n	397bc <ll_rl_crpa_set+0x28>
   397dc:	4553      	cmp	r3, sl
   397de:	d1ed      	bne.n	397bc <ll_rl_crpa_set+0x28>
   397e0:	4648      	mov	r0, r9
   397e2:	2206      	movs	r2, #6
   397e4:	4639      	mov	r1, r7
   397e6:	f00b fafc 	bl	44de2 <memcmp>
   397ea:	2800      	cmp	r0, #0
   397ec:	d1e6      	bne.n	397bc <ll_rl_crpa_set+0x28>
   397ee:	e004      	b.n	397fa <ll_rl_crpa_set+0x66>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   397f0:	2a07      	cmp	r2, #7
   397f2:	d8d6      	bhi.n	397a2 <ll_rl_crpa_set+0xe>
   397f4:	f8df 8024 	ldr.w	r8, [pc, #36]	; 3981c <ll_rl_crpa_set+0x88>
   397f8:	4615      	mov	r5, r2
   397fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   397fe:	00e8      	lsls	r0, r5, #3
   39800:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   39804:	07db      	lsls	r3, r3, #31
   39806:	d5cc      	bpl.n	397a2 <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   39808:	3018      	adds	r0, #24
   3980a:	4631      	mov	r1, r6
   3980c:	4440      	add	r0, r8
   3980e:	2206      	movs	r2, #6
}
   39810:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   39814:	f00b baf5 	b.w	44e02 <memcpy>
   39818:	200028f9 	.word	0x200028f9
   3981c:	200028f8 	.word	0x200028f8

00039820 <ll_rl_crpa_get>:
{
   39820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   39824:	4682      	mov	sl, r0
   39826:	4e1a      	ldr	r6, [pc, #104]	; (39890 <ll_rl_crpa_get+0x70>)
   39828:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   3982c:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3982e:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39830:	f008 0801 	and.w	r8, r8, #1
   39834:	1e77      	subs	r7, r6, #1
   39836:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3983a:	00d5      	lsls	r5, r2, #3
   3983c:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   39840:	f3c3 1280 	ubfx	r2, r3, #6, #1
   39844:	07db      	lsls	r3, r3, #31
   39846:	f104 0401 	add.w	r4, r4, #1
   3984a:	d501      	bpl.n	39850 <ll_rl_crpa_get+0x30>
   3984c:	4542      	cmp	r2, r8
   3984e:	d006      	beq.n	3985e <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39850:	2c08      	cmp	r4, #8
   39852:	f106 0628 	add.w	r6, r6, #40	; 0x28
   39856:	d1ee      	bne.n	39836 <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39858:	2002      	movs	r0, #2
}
   3985a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3985e:	4630      	mov	r0, r6
   39860:	2206      	movs	r2, #6
   39862:	4651      	mov	r1, sl
   39864:	f00b fabd 	bl	44de2 <memcmp>
   39868:	4683      	mov	fp, r0
   3986a:	2800      	cmp	r0, #0
   3986c:	d1f0      	bne.n	39850 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   3986e:	f105 0218 	add.w	r2, r5, #24
   39872:	4417      	add	r7, r2
   39874:	2106      	movs	r1, #6
   39876:	4638      	mov	r0, r7
   39878:	f7f6 f870 	bl	2f95c <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   3987c:	2800      	cmp	r0, #0
   3987e:	d0eb      	beq.n	39858 <ll_rl_crpa_get+0x38>
   39880:	2206      	movs	r2, #6
   39882:	4639      	mov	r1, r7
   39884:	4648      	mov	r0, r9
   39886:	f00b fabc 	bl	44e02 <memcpy>
		return 0;
   3988a:	4658      	mov	r0, fp
}
   3988c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39890:	200028f9 	.word	0x200028f9

00039894 <ll_rl_lrpa_get>:
{
   39894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   39898:	4681      	mov	r9, r0
   3989a:	4e16      	ldr	r6, [pc, #88]	; (398f4 <ll_rl_lrpa_get+0x60>)
   3989c:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   398a0:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   398a2:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   398a4:	f008 0801 	and.w	r8, r8, #1
   398a8:	1e77      	subs	r7, r6, #1
   398aa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   398ae:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   398b2:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   398b6:	f3c3 1280 	ubfx	r2, r3, #6, #1
   398ba:	07db      	lsls	r3, r3, #31
   398bc:	f104 0401 	add.w	r4, r4, #1
   398c0:	d501      	bpl.n	398c6 <ll_rl_lrpa_get+0x32>
   398c2:	4542      	cmp	r2, r8
   398c4:	d006      	beq.n	398d4 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   398c6:	2c08      	cmp	r4, #8
   398c8:	f106 0628 	add.w	r6, r6, #40	; 0x28
   398cc:	d1ed      	bne.n	398aa <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   398ce:	2002      	movs	r0, #2
}
   398d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   398d4:	4630      	mov	r0, r6
   398d6:	2206      	movs	r2, #6
   398d8:	4649      	mov	r1, r9
   398da:	f00b fa82 	bl	44de2 <memcmp>
   398de:	4683      	mov	fp, r0
   398e0:	2800      	cmp	r0, #0
   398e2:	d1f0      	bne.n	398c6 <ll_rl_lrpa_get+0x32>
   398e4:	6a69      	ldr	r1, [r5, #36]	; 0x24
   398e6:	2206      	movs	r2, #6
   398e8:	4650      	mov	r0, sl
   398ea:	f00b fa8a 	bl	44e02 <memcpy>
		return 0;
   398ee:	4658      	mov	r0, fp
}
   398f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   398f4:	200028f9 	.word	0x200028f9

000398f8 <ll_rl_enable>:
{
   398f8:	b510      	push	{r4, lr}
   398fa:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   398fc:	2000      	movs	r0, #0
   398fe:	f7fa fc59 	bl	341b4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   39902:	b958      	cbnz	r0, 3991c <ll_rl_enable+0x24>
	switch (enable) {
   39904:	b134      	cbz	r4, 39914 <ll_rl_enable+0x1c>
   39906:	2c01      	cmp	r4, #1
   39908:	d001      	beq.n	3990e <ll_rl_enable+0x16>
   3990a:	2012      	movs	r0, #18
}
   3990c:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   3990e:	4b04      	ldr	r3, [pc, #16]	; (39920 <ll_rl_enable+0x28>)
   39910:	701c      	strb	r4, [r3, #0]
}
   39912:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   39914:	4b02      	ldr	r3, [pc, #8]	; (39920 <ll_rl_enable+0x28>)
   39916:	701c      	strb	r4, [r3, #0]
	return 0;
   39918:	4620      	mov	r0, r4
}
   3991a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3991c:	200c      	movs	r0, #12
}
   3991e:	bd10      	pop	{r4, pc}
   39920:	20003c6c 	.word	0x20003c6c

00039924 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   39924:	4b03      	ldr	r3, [pc, #12]	; (39934 <ll_rl_timeout_set+0x10>)
   39926:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3992a:	fb02 f000 	mul.w	r0, r2, r0
   3992e:	6018      	str	r0, [r3, #0]
}
   39930:	4770      	bx	lr
   39932:	bf00      	nop
   39934:	20002a6c 	.word	0x20002a6c

00039938 <ll_priv_mode_set>:
{
   39938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3993c:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3993e:	2000      	movs	r0, #0
{
   39940:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   39942:	f7fa fc37 	bl	341b4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   39946:	bb68      	cbnz	r0, 399a4 <ll_priv_mode_set+0x6c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   39948:	4e1d      	ldr	r6, [pc, #116]	; (399c0 <ll_priv_mode_set+0x88>)
   3994a:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3994e:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39950:	f009 0901 	and.w	r9, r9, #1
   39954:	1e77      	subs	r7, r6, #1
   39956:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3995a:	00d5      	lsls	r5, r2, #3
   3995c:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   39960:	f3c3 1280 	ubfx	r2, r3, #6, #1
   39964:	07db      	lsls	r3, r3, #31
   39966:	f104 0401 	add.w	r4, r4, #1
   3996a:	d501      	bpl.n	39970 <ll_priv_mode_set+0x38>
   3996c:	454a      	cmp	r2, r9
   3996e:	d006      	beq.n	3997e <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39970:	2c08      	cmp	r4, #8
   39972:	f106 0628 	add.w	r6, r6, #40	; 0x28
   39976:	d1ee      	bne.n	39956 <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39978:	2002      	movs	r0, #2
}
   3997a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3997e:	4630      	mov	r0, r6
   39980:	2206      	movs	r2, #6
   39982:	4651      	mov	r1, sl
   39984:	f00b fa2d 	bl	44de2 <memcmp>
   39988:	2800      	cmp	r0, #0
   3998a:	d1f1      	bne.n	39970 <ll_priv_mode_set+0x38>
		switch (mode) {
   3998c:	f1b8 0f00 	cmp.w	r8, #0
   39990:	d00e      	beq.n	399b0 <ll_priv_mode_set+0x78>
   39992:	f1b8 0f01 	cmp.w	r8, #1
   39996:	d108      	bne.n	399aa <ll_priv_mode_set+0x72>
			rl[i].dev = 1U;
   39998:	5d7b      	ldrb	r3, [r7, r5]
   3999a:	f043 0310 	orr.w	r3, r3, #16
   3999e:	557b      	strb	r3, [r7, r5]
}
   399a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   399a4:	200c      	movs	r0, #12
}
   399a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   399aa:	2012      	movs	r0, #18
}
   399ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   399b0:	5d7b      	ldrb	r3, [r7, r5]
   399b2:	f368 1304 	bfi	r3, r8, #4, #1
   399b6:	557b      	strb	r3, [r7, r5]
	return 0;
   399b8:	4640      	mov	r0, r8
}
   399ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   399be:	bf00      	nop
   399c0:	200028f9 	.word	0x200028f9

000399c4 <ull_filter_reset>:
{
   399c4:	b4d0      	push	{r4, r6, r7}
   399c6:	4930      	ldr	r1, [pc, #192]	; (39a88 <ull_filter_reset+0xc4>)
   399c8:	4c30      	ldr	r4, [pc, #192]	; (39a8c <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   399ca:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   399cc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   399d0:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   399d2:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   399d4:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   399d8:	d805      	bhi.n	399e6 <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   399da:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   399de:	f36f 1245 	bfc	r2, #5, #1
   399e2:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   399e6:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   399ea:	f36f 0200 	bfc	r2, #0, #1
   399ee:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   399f2:	3301      	adds	r3, #1
   399f4:	2b08      	cmp	r3, #8
   399f6:	d1e9      	bne.n	399cc <ull_filter_reset+0x8>
	rl_enable = 0U;
   399f8:	4a25      	ldr	r2, [pc, #148]	; (39a90 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   399fa:	4c26      	ldr	r4, [pc, #152]	; (39a94 <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   399fc:	2300      	movs	r3, #0
   399fe:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   39a00:	780a      	ldrb	r2, [r1, #0]
   39a02:	f363 0200 	bfi	r2, r3, #0, #1
   39a06:	700a      	strb	r2, [r1, #0]
   39a08:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   39a0c:	f363 0200 	bfi	r2, r3, #0, #1
   39a10:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   39a14:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   39a18:	f363 0200 	bfi	r2, r3, #0, #1
   39a1c:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   39a20:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   39a24:	f363 0200 	bfi	r2, r3, #0, #1
   39a28:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   39a2c:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   39a30:	f363 0200 	bfi	r2, r3, #0, #1
   39a34:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   39a38:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   39a3c:	f363 0200 	bfi	r2, r3, #0, #1
   39a40:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   39a44:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   39a48:	f363 0200 	bfi	r2, r3, #0, #1
   39a4c:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   39a50:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   39a54:	f363 0200 	bfi	r2, r3, #0, #1
   39a58:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   39a5c:	4a0e      	ldr	r2, [pc, #56]	; (39a98 <ull_filter_reset+0xd4>)
   39a5e:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   39a60:	4b0e      	ldr	r3, [pc, #56]	; (39a9c <ull_filter_reset+0xd8>)
   39a62:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   39a66:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   39a6a:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   39a6e:	4b0c      	ldr	r3, [pc, #48]	; (39aa0 <ull_filter_reset+0xdc>)
   39a70:	6023      	str	r3, [r4, #0]
	if (init) {
   39a72:	b120      	cbz	r0, 39a7e <ull_filter_reset+0xba>
}
   39a74:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   39a76:	490b      	ldr	r1, [pc, #44]	; (39aa4 <ull_filter_reset+0xe0>)
   39a78:	480b      	ldr	r0, [pc, #44]	; (39aa8 <ull_filter_reset+0xe4>)
   39a7a:	f00f b8d7 	b.w	48c2c <k_work_init_delayable>
}
   39a7e:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   39a80:	4809      	ldr	r0, [pc, #36]	; (39aa8 <ull_filter_reset+0xe4>)
   39a82:	f00f b8df 	b.w	48c44 <k_work_cancel_delayable>
   39a86:	bf00      	nop
   39a88:	200028f8 	.word	0x200028f8
   39a8c:	200027cc 	.word	0x200027cc
   39a90:	20003c6c 	.word	0x20003c6c
   39a94:	20002a6c 	.word	0x20002a6c
   39a98:	20003c6b 	.word	0x20003c6b
   39a9c:	20001718 	.word	0x20001718
   39aa0:	000dbba0 	.word	0x000dbba0
   39aa4:	00039d11 	.word	0x00039d11
   39aa8:	20001720 	.word	0x20001720

00039aac <ull_filter_lll_get>:
		return &fal_filter;
   39aac:	4a03      	ldr	r2, [pc, #12]	; (39abc <ull_filter_lll_get+0x10>)
   39aae:	4b04      	ldr	r3, [pc, #16]	; (39ac0 <ull_filter_lll_get+0x14>)
}
   39ab0:	2800      	cmp	r0, #0
   39ab2:	bf0c      	ite	eq
   39ab4:	4610      	moveq	r0, r2
   39ab6:	4618      	movne	r0, r3
   39ab8:	4770      	bx	lr
   39aba:	bf00      	nop
   39abc:	20002a38 	.word	0x20002a38
   39ac0:	2000280c 	.word	0x2000280c

00039ac4 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   39ac4:	b1a8      	cbz	r0, 39af2 <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   39ac6:	4a0c      	ldr	r2, [pc, #48]	; (39af8 <ull_filter_adv_scan_state_cb+0x34>)
			return ((t * to_hz + off) / from_hz);
   39ac8:	6812      	ldr	r2, [r2, #0]
{
   39aca:	b510      	push	{r4, lr}
   39acc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   39ad0:	f240 30e7 	movw	r0, #999	; 0x3e7
   39ad4:	2100      	movs	r1, #0
   39ad6:	fbe2 0103 	umlal	r0, r1, r2, r3
   39ada:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39ade:	2300      	movs	r3, #0
   39ae0:	f7ec fb0e 	bl	26100 <__aeabi_uldivmod>
}
   39ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   39ae8:	4602      	mov	r2, r0
   39aea:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   39aec:	4803      	ldr	r0, [pc, #12]	; (39afc <ull_filter_adv_scan_state_cb+0x38>)
   39aee:	f007 bf5d 	b.w	419ac <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   39af2:	4802      	ldr	r0, [pc, #8]	; (39afc <ull_filter_adv_scan_state_cb+0x38>)
   39af4:	f00f b8a6 	b.w	48c44 <k_work_cancel_delayable>
   39af8:	20002a6c 	.word	0x20002a6c
   39afc:	20001720 	.word	0x20001720

00039b00 <ull_filter_adv_update>:
{
   39b00:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   39b02:	4b09      	ldr	r3, [pc, #36]	; (39b28 <ull_filter_adv_update+0x28>)
   39b04:	2200      	movs	r2, #0
   39b06:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   39b08:	b930      	cbnz	r0, 39b18 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   39b0a:	4b08      	ldr	r3, [pc, #32]	; (39b2c <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   39b0c:	4a08      	ldr	r2, [pc, #32]	; (39b30 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   39b0e:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   39b10:	2100      	movs	r1, #0
   39b12:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   39b14:	b91b      	cbnz	r3, 39b1e <ull_filter_adv_update+0x1e>
}
   39b16:	bd08      	pop	{r3, pc}
		fal_update();
   39b18:	f7ff fbae 	bl	39278 <fal_update>
   39b1c:	e7f5      	b.n	39b0a <ull_filter_adv_update+0xa>
}
   39b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   39b22:	f7ff bb71 	b.w	39208 <rl_update>
   39b26:	bf00      	nop
   39b28:	2000280c 	.word	0x2000280c
   39b2c:	20003c6c 	.word	0x20003c6c
   39b30:	20002a38 	.word	0x20002a38

00039b34 <ull_filter_rpa_update>:
{
   39b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39b38:	4683      	mov	fp, r0
   39b3a:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   39b3c:	f00f fa16 	bl	48f6c <z_impl_k_uptime_ticks>
   39b40:	014b      	lsls	r3, r1, #5
   39b42:	ea4f 1940 	mov.w	r9, r0, lsl #5
   39b46:	ebb9 0900 	subs.w	r9, r9, r0
   39b4a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   39b4e:	eb63 0301 	sbc.w	r3, r3, r1
   39b52:	009b      	lsls	r3, r3, #2
   39b54:	ea43 7399 	orr.w	r3, r3, r9, lsr #30
   39b58:	ea4f 0989 	mov.w	r9, r9, lsl #2
   39b5c:	eb19 0900 	adds.w	r9, r9, r0
   39b60:	eb41 0103 	adc.w	r1, r1, r3
   39b64:	00cb      	lsls	r3, r1, #3
   39b66:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   39b6a:	0bd9      	lsrs	r1, r3, #15
   39b6c:	f3c9 3910 	ubfx	r9, r9, #12, #17
   39b70:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   39b74:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   39b76:	f1bb 0f00 	cmp.w	fp, #0
   39b7a:	d117      	bne.n	39bac <ull_filter_rpa_update+0x78>
   39b7c:	4b5c      	ldr	r3, [pc, #368]	; (39cf0 <ull_filter_rpa_update+0x1bc>)
   39b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   39b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   39b86:	bf08      	it	eq
   39b88:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   39b8c:	d00e      	beq.n	39bac <ull_filter_rpa_update+0x78>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   39b8e:	ebb9 0202 	subs.w	r2, r9, r2
   39b92:	eb61 0303 	sbc.w	r3, r1, r3
   39b96:	4957      	ldr	r1, [pc, #348]	; (39cf4 <ull_filter_rpa_update+0x1c0>)
   39b98:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   39b9a:	428a      	cmp	r2, r1
   39b9c:	f173 0300 	sbcs.w	r3, r3, #0
   39ba0:	bfac      	ite	ge
   39ba2:	f04f 0a01 	movge.w	sl, #1
   39ba6:	f04f 0a00 	movlt.w	sl, #0
   39baa:	e001      	b.n	39bb0 <ull_filter_rpa_update+0x7c>
   39bac:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39bb0:	4e51      	ldr	r6, [pc, #324]	; (39cf8 <ull_filter_rpa_update+0x1c4>)
   39bb2:	f8df 8148 	ldr.w	r8, [pc, #328]	; 39cfc <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   39bb6:	2400      	movs	r4, #0
   39bb8:	1ff7      	subs	r7, r6, #7
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   39bba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   39bbe:	00a5      	lsls	r5, r4, #2
   39bc0:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   39bc4:	07da      	lsls	r2, r3, #31
   39bc6:	d515      	bpl.n	39bf4 <ull_filter_rpa_update+0xc0>
   39bc8:	f1ba 0f00 	cmp.w	sl, #0
   39bcc:	d101      	bne.n	39bd2 <ull_filter_rpa_update+0x9e>
   39bce:	0798      	lsls	r0, r3, #30
   39bd0:	d410      	bmi.n	39bf4 <ull_filter_rpa_update+0xc0>
			if (rl[i].pirk) {
   39bd2:	192b      	adds	r3, r5, r4
   39bd4:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   39bd8:	0759      	lsls	r1, r3, #29
   39bda:	d431      	bmi.n	39c40 <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   39bdc:	192b      	adds	r3, r5, r4
   39bde:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   39be2:	071a      	lsls	r2, r3, #28
   39be4:	d41b      	bmi.n	39c1e <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
   39be6:	4425      	add	r5, r4
   39be8:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   39bec:	f043 0302 	orr.w	r3, r3, #2
   39bf0:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39bf4:	3401      	adds	r4, #1
   39bf6:	2c08      	cmp	r4, #8
   39bf8:	f108 0806 	add.w	r8, r8, #6
   39bfc:	f106 0628 	add.w	r6, r6, #40	; 0x28
   39c00:	d1db      	bne.n	39bba <ull_filter_rpa_update+0x86>
	if (all) {
   39c02:	f1ba 0f00 	cmp.w	sl, #0
   39c06:	d004      	beq.n	39c12 <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   39c08:	4b39      	ldr	r3, [pc, #228]	; (39cf0 <ull_filter_rpa_update+0x1bc>)
   39c0a:	9a01      	ldr	r2, [sp, #4]
   39c0c:	f8c3 9000 	str.w	r9, [r3]
   39c10:	605a      	str	r2, [r3, #4]
	if (timeout) {
   39c12:	f1bb 0f00 	cmp.w	fp, #0
   39c16:	d137      	bne.n	39c88 <ull_filter_rpa_update+0x154>
}
   39c18:	b007      	add	sp, #28
   39c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   39c1e:	a902      	add	r1, sp, #8
   39c20:	4630      	mov	r0, r6
   39c22:	f00b f95d 	bl	44ee0 <bt_rpa_create>
				LL_ASSERT(!err);
   39c26:	2800      	cmp	r0, #0
   39c28:	d154      	bne.n	39cd4 <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   39c2a:	ab02      	add	r3, sp, #8
   39c2c:	f8c6 301d 	str.w	r3, [r6, #29]
   39c30:	4619      	mov	r1, r3
   39c32:	2206      	movs	r2, #6
   39c34:	4640      	mov	r0, r8
   39c36:	f00b f8e4 	bl	44e02 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   39c3a:	f8c6 801d 	str.w	r8, [r6, #29]
   39c3e:	e7d2      	b.n	39be6 <ull_filter_rpa_update+0xb2>
	psrc += length - 1;
   39c40:	7c33      	ldrb	r3, [r6, #16]
   39c42:	4a2f      	ldr	r2, [pc, #188]	; (39d00 <ull_filter_rpa_update+0x1cc>)
   39c44:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   39c48:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   39c4a:	f10d 0307 	add.w	r3, sp, #7
   39c4e:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   39c52:	f812 1901 	ldrb.w	r1, [r2], #-1
   39c56:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   39c5a:	4283      	cmp	r3, r0
   39c5c:	d1f9      	bne.n	39c52 <ull_filter_rpa_update+0x11e>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   39c5e:	f106 0117 	add.w	r1, r6, #23
   39c62:	a802      	add	r0, sp, #8
   39c64:	f00b f93c 	bl	44ee0 <bt_rpa_create>
				LL_ASSERT(!err);
   39c68:	2800      	cmp	r0, #0
   39c6a:	d0b7      	beq.n	39bdc <ull_filter_rpa_update+0xa8>
   39c6c:	4a25      	ldr	r2, [pc, #148]	; (39d04 <ull_filter_rpa_update+0x1d0>)
   39c6e:	4926      	ldr	r1, [pc, #152]	; (39d08 <ull_filter_rpa_update+0x1d4>)
   39c70:	4826      	ldr	r0, [pc, #152]	; (39d0c <ull_filter_rpa_update+0x1d8>)
   39c72:	f240 23eb 	movw	r3, #747	; 0x2eb
   39c76:	f008 ffe9 	bl	42c4c <printk>
   39c7a:	4040      	eors	r0, r0
   39c7c:	f380 8811 	msr	BASEPRI, r0
   39c80:	f04f 0003 	mov.w	r0, #3
   39c84:	df02      	svc	2
   39c86:	e7a9      	b.n	39bdc <ull_filter_rpa_update+0xa8>
		adv = ull_adv_is_enabled_get(0);
   39c88:	2000      	movs	r0, #0
   39c8a:	f7fa fa85 	bl	34198 <ull_adv_is_enabled_get>
		if (adv) {
   39c8e:	4604      	mov	r4, r0
   39c90:	2800      	cmp	r0, #0
   39c92:	d0c1      	beq.n	39c18 <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   39c94:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   39c98:	075b      	lsls	r3, r3, #29
   39c9a:	d5bd      	bpl.n	39c18 <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   39c9c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   39ca0:	2b07      	cmp	r3, #7
   39ca2:	d8b9      	bhi.n	39c18 <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   39ca4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   39ca8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   39cac:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   39cae:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   39cb0:	3028      	adds	r0, #40	; 0x28
   39cb2:	f001 f9c7 	bl	3b044 <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   39cb6:	7872      	ldrb	r2, [r6, #1]
   39cb8:	4605      	mov	r5, r0
   39cba:	3202      	adds	r2, #2
   39cbc:	4631      	mov	r1, r6
   39cbe:	f00b f8a0 	bl	44e02 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   39cc2:	4629      	mov	r1, r5
   39cc4:	4620      	mov	r0, r4
   39cc6:	f7fa fa91 	bl	341ec <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   39cca:	f89d 3008 	ldrb.w	r3, [sp, #8]
   39cce:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   39cd2:	e7a1      	b.n	39c18 <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
   39cd4:	4a0b      	ldr	r2, [pc, #44]	; (39d04 <ull_filter_rpa_update+0x1d0>)
   39cd6:	490c      	ldr	r1, [pc, #48]	; (39d08 <ull_filter_rpa_update+0x1d4>)
   39cd8:	480c      	ldr	r0, [pc, #48]	; (39d0c <ull_filter_rpa_update+0x1d8>)
   39cda:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   39cde:	f008 ffb5 	bl	42c4c <printk>
   39ce2:	4040      	eors	r0, r0
   39ce4:	f380 8811 	msr	BASEPRI, r0
   39ce8:	f04f 0003 	mov.w	r0, #3
   39cec:	df02      	svc	2
   39cee:	e79c      	b.n	39c2a <ull_filter_rpa_update+0xf6>
   39cf0:	20001718 	.word	0x20001718
   39cf4:	20002a6c 	.word	0x20002a6c
   39cf8:	200028ff 	.word	0x200028ff
   39cfc:	20002840 	.word	0x20002840
   39d00:	20002878 	.word	0x20002878
   39d04:	0004a718 	.word	0x0004a718
   39d08:	0004a1c0 	.word	0x0004a1c0
   39d0c:	0004a024 	.word	0x0004a024

00039d10 <rpa_timeout>:
{
   39d10:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   39d12:	2001      	movs	r0, #1
   39d14:	f7ff ff0e 	bl	39b34 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   39d18:	4a0a      	ldr	r2, [pc, #40]	; (39d44 <rpa_timeout+0x34>)
   39d1a:	6812      	ldr	r2, [r2, #0]
   39d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   39d20:	f240 30e7 	movw	r0, #999	; 0x3e7
   39d24:	2100      	movs	r1, #0
   39d26:	fbe2 0103 	umlal	r0, r1, r2, r3
   39d2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39d2e:	2300      	movs	r3, #0
   39d30:	f7ec f9e6 	bl	26100 <__aeabi_uldivmod>
}
   39d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   39d38:	4602      	mov	r2, r0
   39d3a:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   39d3c:	4802      	ldr	r0, [pc, #8]	; (39d48 <rpa_timeout+0x38>)
   39d3e:	f007 be35 	b.w	419ac <k_work_schedule>
   39d42:	bf00      	nop
   39d44:	20002a6c 	.word	0x20002a6c
   39d48:	20001720 	.word	0x20001720

00039d4c <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   39d4c:	2807      	cmp	r0, #7
   39d4e:	d813      	bhi.n	39d78 <ull_filter_adva_get+0x2c>
{
   39d50:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   39d52:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   39d56:	4d10      	ldr	r5, [pc, #64]	; (39d98 <ull_filter_adva_get+0x4c>)
   39d58:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   39d5c:	071a      	lsls	r2, r3, #28
   39d5e:	4604      	mov	r4, r0
   39d60:	ea4f 0680 	mov.w	r6, r0, lsl #2
   39d64:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   39d68:	d505      	bpl.n	39d76 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   39d6a:	079b      	lsls	r3, r3, #30
   39d6c:	d506      	bpl.n	39d7c <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   39d6e:	4426      	add	r6, r4
   39d70:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   39d74:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   39d76:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   39d78:	2000      	movs	r0, #0
}
   39d7a:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   39d7c:	4a07      	ldr	r2, [pc, #28]	; (39d9c <ull_filter_adva_get+0x50>)
   39d7e:	4908      	ldr	r1, [pc, #32]	; (39da0 <ull_filter_adva_get+0x54>)
   39d80:	4808      	ldr	r0, [pc, #32]	; (39da4 <ull_filter_adva_get+0x58>)
   39d82:	f44f 7347 	mov.w	r3, #796	; 0x31c
   39d86:	f008 ff61 	bl	42c4c <printk>
   39d8a:	4040      	eors	r0, r0
   39d8c:	f380 8811 	msr	BASEPRI, r0
   39d90:	f04f 0003 	mov.w	r0, #3
   39d94:	df02      	svc	2
   39d96:	e7ea      	b.n	39d6e <ull_filter_adva_get+0x22>
   39d98:	200028f8 	.word	0x200028f8
   39d9c:	0004a718 	.word	0x0004a718
   39da0:	0004a77c 	.word	0x0004a77c
   39da4:	0004a024 	.word	0x0004a024

00039da8 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   39da8:	2807      	cmp	r0, #7
   39daa:	d80c      	bhi.n	39dc6 <ull_filter_tgta_get+0x1e>
   39dac:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   39db0:	4a06      	ldr	r2, [pc, #24]	; (39dcc <ull_filter_tgta_get+0x24>)
   39db2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   39db6:	074b      	lsls	r3, r1, #29
   39db8:	d505      	bpl.n	39dc6 <ull_filter_tgta_get+0x1e>
		return rl[rl_idx].peer_rpa.val;
   39dba:	2328      	movs	r3, #40	; 0x28
   39dbc:	fb03 2200 	mla	r2, r3, r0, r2
   39dc0:	f102 001e 	add.w	r0, r2, #30
   39dc4:	4770      	bx	lr
	return NULL;
   39dc6:	2000      	movs	r0, #0
   39dc8:	4770      	bx	lr
   39dca:	bf00      	nop
   39dcc:	200028f8 	.word	0x200028f8

00039dd0 <ull_filter_rl_find>:
{
   39dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39dd4:	468b      	mov	fp, r1
	if (free_idx) {
   39dd6:	4617      	mov	r7, r2
   39dd8:	b10a      	cbz	r2, 39dde <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   39dda:	23ff      	movs	r3, #255	; 0xff
   39ddc:	7013      	strb	r3, [r2, #0]
   39dde:	4d1b      	ldr	r5, [pc, #108]	; (39e4c <ull_filter_rl_find+0x7c>)
{
   39de0:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39de2:	f000 0a01 	and.w	sl, r0, #1
   39de6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   39dea:	e006      	b.n	39dfa <ull_filter_rl_find+0x2a>
   39dec:	4552      	cmp	r2, sl
   39dee:	d01f      	beq.n	39e30 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39df0:	3401      	adds	r4, #1
   39df2:	2c08      	cmp	r4, #8
   39df4:	f105 0528 	add.w	r5, r5, #40	; 0x28
   39df8:	d015      	beq.n	39e26 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39dfa:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   39dfe:	fa5f f884 	uxtb.w	r8, r4
   39e02:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   39e06:	07d9      	lsls	r1, r3, #31
   39e08:	f3c3 1280 	ubfx	r2, r3, #6, #1
   39e0c:	d4ee      	bmi.n	39dec <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   39e0e:	2f00      	cmp	r7, #0
   39e10:	d0ee      	beq.n	39df0 <ull_filter_rl_find+0x20>
   39e12:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39e14:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   39e16:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   39e18:	bf08      	it	eq
   39e1a:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   39e1e:	2c08      	cmp	r4, #8
   39e20:	f105 0528 	add.w	r5, r5, #40	; 0x28
   39e24:	d1e9      	bne.n	39dfa <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   39e26:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   39e2a:	4640      	mov	r0, r8
   39e2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   39e30:	4628      	mov	r0, r5
   39e32:	2206      	movs	r2, #6
   39e34:	4659      	mov	r1, fp
   39e36:	f00a ffd4 	bl	44de2 <memcmp>
   39e3a:	2800      	cmp	r0, #0
   39e3c:	d0f5      	beq.n	39e2a <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   39e3e:	2f00      	cmp	r7, #0
   39e40:	d0d6      	beq.n	39df0 <ull_filter_rl_find+0x20>
   39e42:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   39e46:	07db      	lsls	r3, r3, #31
   39e48:	d4d2      	bmi.n	39df0 <ull_filter_rl_find+0x20>
   39e4a:	e7e2      	b.n	39e12 <ull_filter_rl_find+0x42>
   39e4c:	200028f9 	.word	0x200028f9

00039e50 <ll_rl_add>:
{
   39e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39e54:	4607      	mov	r7, r0
   39e56:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   39e58:	2000      	movs	r0, #0
{
   39e5a:	460d      	mov	r5, r1
   39e5c:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   39e5e:	f7fa f9a9 	bl	341b4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   39e62:	2800      	cmp	r0, #0
   39e64:	d17a      	bne.n	39f5c <ll_rl_add+0x10c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   39e66:	46ba      	mov	sl, r7
   39e68:	4604      	mov	r4, r0
   39e6a:	f81a 0b01 	ldrb.w	r0, [sl], #1
   39e6e:	f10d 020f 	add.w	r2, sp, #15
   39e72:	4651      	mov	r1, sl
   39e74:	f7ff ffac 	bl	39dd0 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   39e78:	2807      	cmp	r0, #7
   39e7a:	f240 80b1 	bls.w	39fe0 <ll_rl_add+0x190>
	} else if (j >= ARRAY_SIZE(rl)) {
   39e7e:	f89d 800f 	ldrb.w	r8, [sp, #15]
   39e82:	f1b8 0f07 	cmp.w	r8, #7
   39e86:	d87b      	bhi.n	39f80 <ll_rl_add+0x130>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   39e88:	eb08 0388 	add.w	r3, r8, r8, lsl #2
   39e8c:	4e56      	ldr	r6, [pc, #344]	; (39fe8 <ll_rl_add+0x198>)
   39e8e:	00db      	lsls	r3, r3, #3
   39e90:	1c58      	adds	r0, r3, #1
   39e92:	2206      	movs	r2, #6
   39e94:	4651      	mov	r1, sl
   39e96:	4430      	add	r0, r6
   39e98:	9300      	str	r3, [sp, #0]
   39e9a:	f00a ffb2 	bl	44e02 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   39e9e:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   39ea2:	7838      	ldrb	r0, [r7, #0]
   39ea4:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   39ea8:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
   39eac:	f360 1186 	bfi	r1, r0, #6, #1
   39eb0:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
   39eb4:	f806 100b 	strb.w	r1, [r6, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   39eb8:	4628      	mov	r0, r5
   39eba:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   39ebc:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   39ebe:	f7f5 fd4d 	bl	2f95c <mem_nz>
   39ec2:	f816 200b 	ldrb.w	r2, [r6, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   39ec6:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   39ec8:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   39ecc:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   39ece:	f806 200b 	strb.w	r2, [r6, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   39ed2:	f7f5 fd43 	bl	2f95c <mem_nz>
   39ed6:	f816 200b 	ldrb.w	r2, [r6, fp]
	if (rl[i].pirk) {
   39eda:	9b00      	ldr	r3, [sp, #0]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   39edc:	f000 0001 	and.w	r0, r0, #1
   39ee0:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   39ee4:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   39ee8:	f806 200b 	strb.w	r2, [r6, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   39eec:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   39ef0:	d14a      	bne.n	39f88 <ll_rl_add+0x138>
	if (rl[i].lirk) {
   39ef2:	2800      	cmp	r0, #0
   39ef4:	d165      	bne.n	39fc2 <ll_rl_add+0x172>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   39ef6:	f103 0018 	add.w	r0, r3, #24
   39efa:	2206      	movs	r2, #6
   39efc:	4430      	add	r0, r6
   39efe:	2100      	movs	r1, #0
   39f00:	f00a ff8a 	bl	44e18 <memset>
	rl[i].dev = 0U;
   39f04:	eb0b 0308 	add.w	r3, fp, r8
   39f08:	4d38      	ldr	r5, [pc, #224]	; (39fec <ll_rl_add+0x19c>)
	rl[i].rpas_ready = 0U;
   39f0a:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   39f0e:	f022 0212 	bic.w	r2, r2, #18
   39f12:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   39f16:	f897 9000 	ldrb.w	r9, [r7]
	for (i = 0; i < FAL_SIZE; i++) {
   39f1a:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   39f1c:	f009 0901 	and.w	r9, r9, #1
   39f20:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   39f24:	f3c3 0240 	ubfx	r2, r3, #1, #1
   39f28:	f013 0301 	ands.w	r3, r3, #1
   39f2c:	d001      	beq.n	39f32 <ll_rl_add+0xe2>
   39f2e:	454a      	cmp	r2, r9
   39f30:	d018      	beq.n	39f64 <ll_rl_add+0x114>
	for (i = 0; i < FAL_SIZE; i++) {
   39f32:	3401      	adds	r4, #1
   39f34:	2c08      	cmp	r4, #8
   39f36:	f105 0508 	add.w	r5, r5, #8
   39f3a:	d1f1      	bne.n	39f20 <ll_rl_add+0xd0>
   39f3c:	2300      	movs	r3, #0
	rl[i].taken = 1U;
   39f3e:	44c3      	add	fp, r8
   39f40:	015b      	lsls	r3, r3, #5
   39f42:	f816 203b 	ldrb.w	r2, [r6, fp, lsl #3]
   39f46:	f043 0301 	orr.w	r3, r3, #1
   39f4a:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   39f4e:	4313      	orrs	r3, r2
	return 0;
   39f50:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   39f52:	f806 303b 	strb.w	r3, [r6, fp, lsl #3]
}
   39f56:	b005      	add	sp, #20
   39f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39f5c:	200c      	movs	r0, #12
}
   39f5e:	b005      	add	sp, #20
   39f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   39f64:	4628      	mov	r0, r5
   39f66:	2206      	movs	r2, #6
   39f68:	4651      	mov	r1, sl
   39f6a:	9300      	str	r3, [sp, #0]
   39f6c:	f00a ff39 	bl	44de2 <memcmp>
   39f70:	9b00      	ldr	r3, [sp, #0]
   39f72:	2800      	cmp	r0, #0
   39f74:	d1dd      	bne.n	39f32 <ll_rl_add+0xe2>
		fal[j].rl_idx = i;
   39f76:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
   39f7a:	f887 8001 	strb.w	r8, [r7, #1]
		rl[i].fal = 1U;
   39f7e:	e7de      	b.n	39f3e <ll_rl_add+0xee>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   39f80:	2007      	movs	r0, #7
}
   39f82:	b005      	add	sp, #20
   39f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   39f88:	f8df c064 	ldr.w	ip, [pc, #100]	; 39ff0 <ll_rl_add+0x1a0>
		peer_irk_rl_ids[peer_irk_count] = i;
   39f8c:	4919      	ldr	r1, [pc, #100]	; (39ff4 <ll_rl_add+0x1a4>)
		rl[i].pirk_idx = peer_irk_count;
   39f8e:	f89c 2000 	ldrb.w	r2, [ip]
   39f92:	f8dd e004 	ldr.w	lr, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   39f96:	f801 8002 	strb.w	r8, [r1, r2]
   39f9a:	4917      	ldr	r1, [pc, #92]	; (39ff8 <ll_rl_add+0x1a8>)
		rl[i].pirk_idx = peer_irk_count;
   39f9c:	f88e 2017 	strb.w	r2, [lr, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   39fa0:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   39fa4:	3201      	adds	r2, #1
   39fa6:	f88c 2000 	strb.w	r2, [ip]
	psrc += length - 1;
   39faa:	3901      	subs	r1, #1
   39fac:	f105 020f 	add.w	r2, r5, #15
	for (; length > 0; length--) {
   39fb0:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   39fb2:	f812 c901 	ldrb.w	ip, [r2], #-1
   39fb6:	f801 cf01 	strb.w	ip, [r1, #1]!
	for (; length > 0; length--) {
   39fba:	42aa      	cmp	r2, r5
   39fbc:	d1f9      	bne.n	39fb2 <ll_rl_add+0x162>
	if (rl[i].lirk) {
   39fbe:	2800      	cmp	r0, #0
   39fc0:	d099      	beq.n	39ef6 <ll_rl_add+0xa6>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   39fc2:	1dd8      	adds	r0, r3, #7
   39fc4:	4649      	mov	r1, r9
   39fc6:	2210      	movs	r2, #16
   39fc8:	4430      	add	r0, r6
   39fca:	9300      	str	r3, [sp, #0]
   39fcc:	f00a ff19 	bl	44e02 <memcpy>
		rl[i].local_rpa = NULL;
   39fd0:	eb0b 0208 	add.w	r2, fp, r8
   39fd4:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   39fd8:	2100      	movs	r1, #0
   39fda:	9b00      	ldr	r3, [sp, #0]
   39fdc:	6251      	str	r1, [r2, #36]	; 0x24
   39fde:	e78a      	b.n	39ef6 <ll_rl_add+0xa6>
		return BT_HCI_ERR_INVALID_PARAM;
   39fe0:	2012      	movs	r0, #18
}
   39fe2:	b005      	add	sp, #20
   39fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39fe8:	200028f8 	.word	0x200028f8
   39fec:	200027ce 	.word	0x200027ce
   39ff0:	20003c6b 	.word	0x20003c6b
   39ff4:	20002870 	.word	0x20002870
   39ff8:	20002878 	.word	0x20002878

00039ffc <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   39ffc:	2807      	cmp	r0, #7
   39ffe:	d807      	bhi.n	3a010 <ull_filter_lll_lrpa_used+0x14>
   3a000:	4b04      	ldr	r3, [pc, #16]	; (3a014 <ull_filter_lll_lrpa_used+0x18>)
   3a002:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3a006:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   3a00a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   3a00e:	4770      	bx	lr
   3a010:	2000      	movs	r0, #0
}
   3a012:	4770      	bx	lr
   3a014:	200028f8 	.word	0x200028f8

0003a018 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   3a018:	4b02      	ldr	r3, [pc, #8]	; (3a024 <ull_filter_lll_irks_get+0xc>)
   3a01a:	781b      	ldrb	r3, [r3, #0]
   3a01c:	7003      	strb	r3, [r0, #0]
}
   3a01e:	4802      	ldr	r0, [pc, #8]	; (3a028 <ull_filter_lll_irks_get+0x10>)
   3a020:	4770      	bx	lr
   3a022:	bf00      	nop
   3a024:	20003c6b 	.word	0x20003c6b
   3a028:	20002878 	.word	0x20002878

0003a02c <ull_filter_lll_rl_irk_idx>:
{
   3a02c:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3a02e:	4b20      	ldr	r3, [pc, #128]	; (3a0b0 <ull_filter_lll_rl_irk_idx+0x84>)
   3a030:	781b      	ldrb	r3, [r3, #0]
   3a032:	4283      	cmp	r3, r0
{
   3a034:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3a036:	d90c      	bls.n	3a052 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   3a038:	4b1e      	ldr	r3, [pc, #120]	; (3a0b4 <ull_filter_lll_rl_irk_idx+0x88>)
   3a03a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   3a03c:	2c07      	cmp	r4, #7
   3a03e:	d819      	bhi.n	3a074 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   3a040:	4b1d      	ldr	r3, [pc, #116]	; (3a0b8 <ull_filter_lll_rl_irk_idx+0x8c>)
   3a042:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3a046:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   3a04a:	07db      	lsls	r3, r3, #31
   3a04c:	d520      	bpl.n	3a090 <ull_filter_lll_rl_irk_idx+0x64>
}
   3a04e:	4620      	mov	r0, r4
   3a050:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3a052:	4a1a      	ldr	r2, [pc, #104]	; (3a0bc <ull_filter_lll_rl_irk_idx+0x90>)
   3a054:	491a      	ldr	r1, [pc, #104]	; (3a0c0 <ull_filter_lll_rl_irk_idx+0x94>)
   3a056:	481b      	ldr	r0, [pc, #108]	; (3a0c4 <ull_filter_lll_rl_irk_idx+0x98>)
   3a058:	f240 336d 	movw	r3, #877	; 0x36d
   3a05c:	f008 fdf6 	bl	42c4c <printk>
   3a060:	4040      	eors	r0, r0
   3a062:	f380 8811 	msr	BASEPRI, r0
   3a066:	f04f 0003 	mov.w	r0, #3
   3a06a:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   3a06c:	4b11      	ldr	r3, [pc, #68]	; (3a0b4 <ull_filter_lll_rl_irk_idx+0x88>)
   3a06e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   3a070:	2c07      	cmp	r4, #7
   3a072:	d9e5      	bls.n	3a040 <ull_filter_lll_rl_irk_idx+0x14>
   3a074:	4a11      	ldr	r2, [pc, #68]	; (3a0bc <ull_filter_lll_rl_irk_idx+0x90>)
   3a076:	4914      	ldr	r1, [pc, #80]	; (3a0c8 <ull_filter_lll_rl_irk_idx+0x9c>)
   3a078:	4812      	ldr	r0, [pc, #72]	; (3a0c4 <ull_filter_lll_rl_irk_idx+0x98>)
   3a07a:	f240 336f 	movw	r3, #879	; 0x36f
   3a07e:	f008 fde5 	bl	42c4c <printk>
   3a082:	4040      	eors	r0, r0
   3a084:	f380 8811 	msr	BASEPRI, r0
   3a088:	f04f 0003 	mov.w	r0, #3
   3a08c:	df02      	svc	2
   3a08e:	e7d7      	b.n	3a040 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   3a090:	4a0a      	ldr	r2, [pc, #40]	; (3a0bc <ull_filter_lll_rl_irk_idx+0x90>)
   3a092:	490e      	ldr	r1, [pc, #56]	; (3a0cc <ull_filter_lll_rl_irk_idx+0xa0>)
   3a094:	480b      	ldr	r0, [pc, #44]	; (3a0c4 <ull_filter_lll_rl_irk_idx+0x98>)
   3a096:	f44f 735c 	mov.w	r3, #880	; 0x370
   3a09a:	f008 fdd7 	bl	42c4c <printk>
   3a09e:	4040      	eors	r0, r0
   3a0a0:	f380 8811 	msr	BASEPRI, r0
   3a0a4:	f04f 0003 	mov.w	r0, #3
   3a0a8:	df02      	svc	2
}
   3a0aa:	4620      	mov	r0, r4
   3a0ac:	bd10      	pop	{r4, pc}
   3a0ae:	bf00      	nop
   3a0b0:	20003c6b 	.word	0x20003c6b
   3a0b4:	20002870 	.word	0x20002870
   3a0b8:	200028f8 	.word	0x200028f8
   3a0bc:	0004a718 	.word	0x0004a718
   3a0c0:	0004a904 	.word	0x0004a904
   3a0c4:	0004a024 	.word	0x0004a024
   3a0c8:	0004a924 	.word	0x0004a924
   3a0cc:	0004a8f8 	.word	0x0004a8f8

0003a0d0 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   3a0d0:	2807      	cmp	r0, #7
   3a0d2:	d823      	bhi.n	3a11c <ull_filter_lll_irk_in_fal+0x4c>
{
   3a0d4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   3a0d6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3a0da:	4e11      	ldr	r6, [pc, #68]	; (3a120 <ull_filter_lll_irk_in_fal+0x50>)
   3a0dc:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   3a0e0:	07db      	lsls	r3, r3, #31
   3a0e2:	4604      	mov	r4, r0
   3a0e4:	ea4f 0580 	mov.w	r5, r0, lsl #2
   3a0e8:	d505      	bpl.n	3a0f6 <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   3a0ea:	4425      	add	r5, r4
   3a0ec:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   3a0f0:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   3a0f4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   3a0f6:	4a0b      	ldr	r2, [pc, #44]	; (3a124 <ull_filter_lll_irk_in_fal+0x54>)
   3a0f8:	490b      	ldr	r1, [pc, #44]	; (3a128 <ull_filter_lll_irk_in_fal+0x58>)
   3a0fa:	480c      	ldr	r0, [pc, #48]	; (3a12c <ull_filter_lll_irk_in_fal+0x5c>)
   3a0fc:	f240 337b 	movw	r3, #891	; 0x37b
   3a100:	f008 fda4 	bl	42c4c <printk>
   3a104:	4040      	eors	r0, r0
   3a106:	f380 8811 	msr	BASEPRI, r0
   3a10a:	f04f 0003 	mov.w	r0, #3
   3a10e:	df02      	svc	2
	return rl[rl_idx].fal;
   3a110:	4425      	add	r5, r4
   3a112:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   3a116:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   3a11a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   3a11c:	2000      	movs	r0, #0
}
   3a11e:	4770      	bx	lr
   3a120:	200028f8 	.word	0x200028f8
   3a124:	0004a718 	.word	0x0004a718
   3a128:	0004a768 	.word	0x0004a768
   3a12c:	0004a024 	.word	0x0004a024

0003a130 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   3a130:	7813      	ldrb	r3, [r2, #0]
   3a132:	2bff      	cmp	r3, #255	; 0xff
   3a134:	d11b      	bne.n	3a16e <ull_filter_lll_rl_addr_allowed+0x3e>
{
   3a136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a13a:	4d19      	ldr	r5, [pc, #100]	; (3a1a0 <ull_filter_lll_rl_addr_allowed+0x70>)
   3a13c:	4604      	mov	r4, r0
   3a13e:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   3a140:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   3a142:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   3a146:	b2df      	uxtb	r7, r3
   3a148:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   3a14c:	f01c 0001 	ands.w	r0, ip, #1
   3a150:	ea4f 0683 	mov.w	r6, r3, lsl #2
   3a154:	d003      	beq.n	3a15e <ull_filter_lll_rl_addr_allowed+0x2e>
   3a156:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   3a15a:	45a4      	cmp	ip, r4
   3a15c:	d009      	beq.n	3a172 <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3a15e:	3301      	adds	r3, #1
   3a160:	2b08      	cmp	r3, #8
   3a162:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   3a166:	d1ec      	bne.n	3a142 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   3a168:	2001      	movs	r0, #1
}
   3a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   3a16e:	2001      	movs	r0, #1
}
   3a170:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3a172:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   3a176:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3a178:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   3a17c:	f81c af01 	ldrb.w	sl, [ip, #1]!
   3a180:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   3a184:	45ca      	cmp	sl, r9
   3a186:	d1ea      	bne.n	3a15e <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3a188:	45dc      	cmp	ip, fp
   3a18a:	d1f7      	bne.n	3a17c <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   3a18c:	441e      	add	r6, r3
				*rl_idx = i;
   3a18e:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   3a190:	f815 3036 	ldrb.w	r3, [r5, r6, lsl #3]
   3a194:	075a      	lsls	r2, r3, #29
   3a196:	d5e8      	bpl.n	3a16a <ull_filter_lll_rl_addr_allowed+0x3a>
   3a198:	f3c3 1000 	ubfx	r0, r3, #4, #1
   3a19c:	e7e5      	b.n	3a16a <ull_filter_lll_rl_addr_allowed+0x3a>
   3a19e:	bf00      	nop
   3a1a0:	200028f8 	.word	0x200028f8

0003a1a4 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   3a1a4:	4b02      	ldr	r3, [pc, #8]	; (3a1b0 <ull_filter_lll_rl_enabled+0xc>)
   3a1a6:	7818      	ldrb	r0, [r3, #0]
}
   3a1a8:	3800      	subs	r0, #0
   3a1aa:	bf18      	it	ne
   3a1ac:	2001      	movne	r0, #1
   3a1ae:	4770      	bx	lr
   3a1b0:	20003c6c 	.word	0x20003c6c

0003a1b4 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   3a1b4:	4668      	mov	r0, sp
   3a1b6:	f020 0107 	bic.w	r1, r0, #7
   3a1ba:	468d      	mov	sp, r1
   3a1bc:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   3a1be:	f002 f889 	bl	3c2d4 <isr_radio>

	ISR_DIRECT_PM();
   3a1c2:	f7ef ff87 	bl	2a0d4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3a1c6:	f7f0 f857 	bl	2a278 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   3a1ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3a1ce:	4685      	mov	sp, r0
   3a1d0:	4770      	bx	lr
   3a1d2:	bf00      	nop

0003a1d4 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   3a1d4:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   3a1d6:	4b09      	ldr	r3, [pc, #36]	; (3a1fc <rtc0_nrf5_isr+0x28>)
   3a1d8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   3a1dc:	b93a      	cbnz	r2, 3a1ee <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   3a1de:	2001      	movs	r0, #1
   3a1e0:	f7f5 fca0 	bl	2fb24 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   3a1e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   3a1e8:	2002      	movs	r0, #2
   3a1ea:	f7f5 bc9b 	b.w	2fb24 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   3a1ee:	2000      	movs	r0, #0
   3a1f0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   3a1f4:	f7f6 fd14 	bl	30c20 <ticker_trigger>
   3a1f8:	e7f1      	b.n	3a1de <rtc0_nrf5_isr+0xa>
   3a1fa:	bf00      	nop
   3a1fc:	4000b000 	.word	0x4000b000

0003a200 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   3a200:	2000      	movs	r0, #0
   3a202:	f7f5 bc8f 	b.w	2fb24 <mayfly_run>
   3a206:	bf00      	nop

0003a208 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   3a208:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   3a20a:	4b0e      	ldr	r3, [pc, #56]	; (3a244 <ticker_stop_op_cb+0x3c>)
   3a20c:	4c0e      	ldr	r4, [pc, #56]	; (3a248 <ticker_stop_op_cb+0x40>)
   3a20e:	781a      	ldrb	r2, [r3, #0]
   3a210:	7823      	ldrb	r3, [r4, #0]
   3a212:	429a      	cmp	r2, r3
   3a214:	d006      	beq.n	3a224 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   3a216:	490d      	ldr	r1, [pc, #52]	; (3a24c <ticker_stop_op_cb+0x44>)
   3a218:	4a0d      	ldr	r2, [pc, #52]	; (3a250 <ticker_stop_op_cb+0x48>)
   3a21a:	7809      	ldrb	r1, [r1, #0]
   3a21c:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   3a21e:	3301      	adds	r3, #1
   3a220:	7023      	strb	r3, [r4, #0]
}
   3a222:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   3a224:	4a0b      	ldr	r2, [pc, #44]	; (3a254 <ticker_stop_op_cb+0x4c>)
   3a226:	490c      	ldr	r1, [pc, #48]	; (3a258 <ticker_stop_op_cb+0x50>)
   3a228:	480c      	ldr	r0, [pc, #48]	; (3a25c <ticker_stop_op_cb+0x54>)
   3a22a:	f240 3301 	movw	r3, #769	; 0x301
   3a22e:	f008 fd0d 	bl	42c4c <printk>
   3a232:	4040      	eors	r0, r0
   3a234:	f380 8811 	msr	BASEPRI, r0
   3a238:	f04f 0003 	mov.w	r0, #3
   3a23c:	df02      	svc	2
	preempt_stop_ack++;
   3a23e:	7823      	ldrb	r3, [r4, #0]
   3a240:	e7e9      	b.n	3a216 <ticker_stop_op_cb+0xe>
   3a242:	bf00      	nop
   3a244:	20003c72 	.word	0x20003c72
   3a248:	20003c71 	.word	0x20003c71
   3a24c:	20003c6d 	.word	0x20003c6d
   3a250:	20003c6e 	.word	0x20003c6e
   3a254:	0004a92c 	.word	0x0004a92c
   3a258:	0004a974 	.word	0x0004a974
   3a25c:	0004a024 	.word	0x0004a024

0003a260 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   3a260:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3a262:	b9f8      	cbnz	r0, 3a2a4 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   3a264:	4b1e      	ldr	r3, [pc, #120]	; (3a2e0 <ticker_start_op_cb+0x80>)
   3a266:	4d1f      	ldr	r5, [pc, #124]	; (3a2e4 <ticker_start_op_cb+0x84>)
   3a268:	781a      	ldrb	r2, [r3, #0]
   3a26a:	782b      	ldrb	r3, [r5, #0]
   3a26c:	429a      	cmp	r2, r3
   3a26e:	d027      	beq.n	3a2c0 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   3a270:	4a1d      	ldr	r2, [pc, #116]	; (3a2e8 <ticker_start_op_cb+0x88>)
   3a272:	4c1e      	ldr	r4, [pc, #120]	; (3a2ec <ticker_start_op_cb+0x8c>)
   3a274:	7812      	ldrb	r2, [r2, #0]
   3a276:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   3a278:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   3a27a:	4291      	cmp	r1, r2
	preempt_start_ack++;
   3a27c:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   3a27e:	b2d3      	uxtb	r3, r2
   3a280:	d00d      	beq.n	3a29e <ticker_start_op_cb+0x3e>
   3a282:	4a1b      	ldr	r2, [pc, #108]	; (3a2f0 <ticker_start_op_cb+0x90>)
   3a284:	491b      	ldr	r1, [pc, #108]	; (3a2f4 <ticker_start_op_cb+0x94>)
   3a286:	481c      	ldr	r0, [pc, #112]	; (3a2f8 <ticker_start_op_cb+0x98>)
   3a288:	f240 330f 	movw	r3, #783	; 0x30f
   3a28c:	f008 fcde 	bl	42c4c <printk>
   3a290:	4040      	eors	r0, r0
   3a292:	f380 8811 	msr	BASEPRI, r0
   3a296:	f04f 0003 	mov.w	r0, #3
   3a29a:	df02      	svc	2
	preempt_req++;
   3a29c:	7823      	ldrb	r3, [r4, #0]
   3a29e:	3301      	adds	r3, #1
   3a2a0:	7023      	strb	r3, [r4, #0]
}
   3a2a2:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3a2a4:	4a12      	ldr	r2, [pc, #72]	; (3a2f0 <ticker_start_op_cb+0x90>)
   3a2a6:	4915      	ldr	r1, [pc, #84]	; (3a2fc <ticker_start_op_cb+0x9c>)
   3a2a8:	4813      	ldr	r0, [pc, #76]	; (3a2f8 <ticker_start_op_cb+0x98>)
   3a2aa:	f240 330a 	movw	r3, #778	; 0x30a
   3a2ae:	f008 fccd 	bl	42c4c <printk>
   3a2b2:	4040      	eors	r0, r0
   3a2b4:	f380 8811 	msr	BASEPRI, r0
   3a2b8:	f04f 0003 	mov.w	r0, #3
   3a2bc:	df02      	svc	2
   3a2be:	e7d1      	b.n	3a264 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   3a2c0:	4a0b      	ldr	r2, [pc, #44]	; (3a2f0 <ticker_start_op_cb+0x90>)
   3a2c2:	490f      	ldr	r1, [pc, #60]	; (3a300 <ticker_start_op_cb+0xa0>)
   3a2c4:	480c      	ldr	r0, [pc, #48]	; (3a2f8 <ticker_start_op_cb+0x98>)
   3a2c6:	f44f 7343 	mov.w	r3, #780	; 0x30c
   3a2ca:	f008 fcbf 	bl	42c4c <printk>
   3a2ce:	4040      	eors	r0, r0
   3a2d0:	f380 8811 	msr	BASEPRI, r0
   3a2d4:	f04f 0003 	mov.w	r0, #3
   3a2d8:	df02      	svc	2
	preempt_start_ack++;
   3a2da:	782b      	ldrb	r3, [r5, #0]
   3a2dc:	e7c8      	b.n	3a270 <ticker_start_op_cb+0x10>
   3a2de:	bf00      	nop
   3a2e0:	20003c70 	.word	0x20003c70
   3a2e4:	20003c6f 	.word	0x20003c6f
   3a2e8:	20003c6d 	.word	0x20003c6d
   3a2ec:	20003c6e 	.word	0x20003c6e
   3a2f0:	0004a92c 	.word	0x0004a92c
   3a2f4:	0004a9c4 	.word	0x0004a9c4
   3a2f8:	0004a024 	.word	0x0004a024
   3a2fc:	0004a4f8 	.word	0x0004a4f8
   3a300:	0004a99c 	.word	0x0004a99c

0003a304 <isr_race>:
	radio_status_reset();
   3a304:	f002 b8f8 	b.w	3c4f8 <radio_status_reset>

0003a308 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   3a308:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   3a30a:	4a18      	ldr	r2, [pc, #96]	; (3a36c <preempt_ticker_cb+0x64>)
   3a30c:	4c18      	ldr	r4, [pc, #96]	; (3a370 <preempt_ticker_cb+0x68>)
   3a30e:	7812      	ldrb	r2, [r2, #0]
   3a310:	7823      	ldrb	r3, [r4, #0]
   3a312:	429a      	cmp	r2, r3
   3a314:	d01b      	beq.n	3a34e <preempt_ticker_cb+0x46>
	preempt_ack++;
   3a316:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   3a318:	4b16      	ldr	r3, [pc, #88]	; (3a374 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   3a31a:	3101      	adds	r1, #1
   3a31c:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3a31e:	2200      	movs	r2, #0
	preempt_ack++;
   3a320:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   3a322:	9903      	ldr	r1, [sp, #12]
   3a324:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3a326:	2001      	movs	r0, #1
   3a328:	4611      	mov	r1, r2
   3a32a:	f7f5 fba7 	bl	2fa7c <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   3a32e:	b900      	cbnz	r0, 3a332 <preempt_ticker_cb+0x2a>
}
   3a330:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   3a332:	4a11      	ldr	r2, [pc, #68]	; (3a378 <preempt_ticker_cb+0x70>)
   3a334:	4911      	ldr	r1, [pc, #68]	; (3a37c <preempt_ticker_cb+0x74>)
   3a336:	4812      	ldr	r0, [pc, #72]	; (3a380 <preempt_ticker_cb+0x78>)
   3a338:	f240 3376 	movw	r3, #886	; 0x376
   3a33c:	f008 fc86 	bl	42c4c <printk>
   3a340:	4040      	eors	r0, r0
   3a342:	f380 8811 	msr	BASEPRI, r0
   3a346:	f04f 0003 	mov.w	r0, #3
   3a34a:	df02      	svc	2
}
   3a34c:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   3a34e:	4a0a      	ldr	r2, [pc, #40]	; (3a378 <preempt_ticker_cb+0x70>)
   3a350:	490c      	ldr	r1, [pc, #48]	; (3a384 <preempt_ticker_cb+0x7c>)
   3a352:	480b      	ldr	r0, [pc, #44]	; (3a380 <preempt_ticker_cb+0x78>)
   3a354:	f44f 735c 	mov.w	r3, #880	; 0x370
   3a358:	f008 fc78 	bl	42c4c <printk>
   3a35c:	4040      	eors	r0, r0
   3a35e:	f380 8811 	msr	BASEPRI, r0
   3a362:	f04f 0003 	mov.w	r0, #3
   3a366:	df02      	svc	2
   3a368:	e7d5      	b.n	3a316 <preempt_ticker_cb+0xe>
   3a36a:	bf00      	nop
   3a36c:	20003c6e 	.word	0x20003c6e
   3a370:	20003c6d 	.word	0x20003c6d
   3a374:	200007a8 	.word	0x200007a8
   3a378:	0004a92c 	.word	0x0004a92c
   3a37c:	0004a2bc 	.word	0x0004a2bc
   3a380:	0004a024 	.word	0x0004a024
   3a384:	0004a9e0 	.word	0x0004a9e0

0003a388 <preempt_ticker_stop>:
{
   3a388:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   3a38a:	4917      	ldr	r1, [pc, #92]	; (3a3e8 <preempt_ticker_stop+0x60>)
   3a38c:	4a17      	ldr	r2, [pc, #92]	; (3a3ec <preempt_ticker_stop+0x64>)
   3a38e:	780b      	ldrb	r3, [r1, #0]
   3a390:	7812      	ldrb	r2, [r2, #0]
   3a392:	429a      	cmp	r2, r3
{
   3a394:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   3a396:	d122      	bne.n	3a3de <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   3a398:	4b15      	ldr	r3, [pc, #84]	; (3a3f0 <preempt_ticker_stop+0x68>)
   3a39a:	4a16      	ldr	r2, [pc, #88]	; (3a3f4 <preempt_ticker_stop+0x6c>)
   3a39c:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   3a39e:	7812      	ldrb	r2, [r2, #0]
   3a3a0:	429a      	cmp	r2, r3
   3a3a2:	d01c      	beq.n	3a3de <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   3a3a4:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3a3a6:	4b14      	ldr	r3, [pc, #80]	; (3a3f8 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   3a3a8:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3a3aa:	2200      	movs	r2, #0
	preempt_stop_req++;
   3a3ac:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3a3ae:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   3a3b0:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3a3b2:	4611      	mov	r1, r2
   3a3b4:	4610      	mov	r0, r2
   3a3b6:	f7f6 fd2d 	bl	30e14 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3a3ba:	4604      	mov	r4, r0
   3a3bc:	b178      	cbz	r0, 3a3de <preempt_ticker_stop+0x56>
   3a3be:	2802      	cmp	r0, #2
   3a3c0:	d00e      	beq.n	3a3e0 <preempt_ticker_stop+0x58>
   3a3c2:	4a0e      	ldr	r2, [pc, #56]	; (3a3fc <preempt_ticker_stop+0x74>)
   3a3c4:	490e      	ldr	r1, [pc, #56]	; (3a400 <preempt_ticker_stop+0x78>)
   3a3c6:	480f      	ldr	r0, [pc, #60]	; (3a404 <preempt_ticker_stop+0x7c>)
   3a3c8:	f240 3362 	movw	r3, #866	; 0x362
   3a3cc:	f008 fc3e 	bl	42c4c <printk>
   3a3d0:	4040      	eors	r0, r0
   3a3d2:	f380 8811 	msr	BASEPRI, r0
   3a3d6:	f04f 0003 	mov.w	r0, #3
   3a3da:	df02      	svc	2
   3a3dc:	e000      	b.n	3a3e0 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   3a3de:	2400      	movs	r4, #0
}
   3a3e0:	4620      	mov	r0, r4
   3a3e2:	b002      	add	sp, #8
   3a3e4:	bd10      	pop	{r4, pc}
   3a3e6:	bf00      	nop
   3a3e8:	20003c72 	.word	0x20003c72
   3a3ec:	20003c71 	.word	0x20003c71
   3a3f0:	20003c6d 	.word	0x20003c6d
   3a3f4:	20003c6e 	.word	0x20003c6e
   3a3f8:	0003a209 	.word	0x0003a209
   3a3fc:	0004a92c 	.word	0x0004a92c
   3a400:	0004a390 	.word	0x0004a390
   3a404:	0004a024 	.word	0x0004a024

0003a408 <preempt_ticker_start>:
{
   3a408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   3a40c:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   3a40e:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   3a412:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   3a414:	4b2a      	ldr	r3, [pc, #168]	; (3a4c0 <preempt_ticker_start+0xb8>)
   3a416:	4f2b      	ldr	r7, [pc, #172]	; (3a4c4 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   3a418:	68d6      	ldr	r6, [r2, #12]
{
   3a41a:	460d      	mov	r5, r1
   3a41c:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   3a41e:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   3a420:	6890      	ldr	r0, [r2, #8]
   3a422:	6853      	ldr	r3, [r2, #4]
   3a424:	4298      	cmp	r0, r3
   3a426:	bf2c      	ite	cs
   3a428:	ebc6 0600 	rsbcs	r6, r6, r0
   3a42c:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   3a430:	783b      	ldrb	r3, [r7, #0]
   3a432:	4299      	cmp	r1, r3
{
   3a434:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   3a436:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   3a43a:	d033      	beq.n	3a4a4 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   3a43c:	2c00      	cmp	r4, #0
   3a43e:	d03a      	beq.n	3a4b6 <preempt_ticker_start+0xae>
   3a440:	7f23      	ldrb	r3, [r4, #28]
   3a442:	079b      	lsls	r3, r3, #30
   3a444:	d437      	bmi.n	3a4b6 <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   3a446:	f8df a080 	ldr.w	sl, [pc, #128]	; 3a4c8 <preempt_ticker_start+0xc0>
   3a44a:	f8da 0000 	ldr.w	r0, [sl]
   3a44e:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   3a452:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   3a456:	d022      	beq.n	3a49e <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   3a458:	f7ff ff96 	bl	3a388 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   3a45c:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   3a45e:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   3a460:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   3a464:	f043 0302 	orr.w	r3, r3, #2
   3a468:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   3a46a:	4620      	mov	r0, r4
   3a46c:	69a3      	ldr	r3, [r4, #24]
   3a46e:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a470:	4b16      	ldr	r3, [pc, #88]	; (3a4cc <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   3a472:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a474:	9600      	str	r6, [sp, #0]
   3a476:	e9cd 3507 	strd	r3, r5, [sp, #28]
   3a47a:	4b15      	ldr	r3, [pc, #84]	; (3a4d0 <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   3a47c:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a480:	2200      	movs	r2, #0
	preempt_start_req++;
   3a482:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a484:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   3a488:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a48a:	e9cd 2203 	strd	r2, r2, [sp, #12]
   3a48e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   3a492:	4643      	mov	r3, r8
   3a494:	4611      	mov	r1, r2
   3a496:	4610      	mov	r0, r2
	preempt_start_req++;
   3a498:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3a49a:	f7f6 fc2f 	bl	30cfc <ticker_start>
}
   3a49e:	b00a      	add	sp, #40	; 0x28
   3a4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   3a4a4:	4b0b      	ldr	r3, [pc, #44]	; (3a4d4 <preempt_ticker_start+0xcc>)
   3a4a6:	4a0c      	ldr	r2, [pc, #48]	; (3a4d8 <preempt_ticker_start+0xd0>)
   3a4a8:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   3a4aa:	7812      	ldrb	r2, [r2, #0]
   3a4ac:	429a      	cmp	r2, r3
   3a4ae:	d1c5      	bne.n	3a43c <preempt_ticker_start+0x34>
   3a4b0:	f8df a014 	ldr.w	sl, [pc, #20]	; 3a4c8 <preempt_ticker_start+0xc0>
   3a4b4:	e7dc      	b.n	3a470 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   3a4b6:	2000      	movs	r0, #0
}
   3a4b8:	b00a      	add	sp, #40	; 0x28
   3a4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a4be:	bf00      	nop
   3a4c0:	20003c6f 	.word	0x20003c6f
   3a4c4:	20003c70 	.word	0x20003c70
   3a4c8:	20002a88 	.word	0x20002a88
   3a4cc:	0003a261 	.word	0x0003a261
   3a4d0:	0003a309 	.word	0x0003a309
   3a4d4:	20003c6d 	.word	0x20003c6d
   3a4d8:	20003c6e 	.word	0x20003c6e

0003a4dc <preempt>:

static void preempt(void *param)
{
   3a4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   3a4de:	4e4b      	ldr	r6, [pc, #300]	; (3a60c <preempt+0x130>)
   3a4e0:	68b3      	ldr	r3, [r6, #8]
{
   3a4e2:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   3a4e4:	b1b3      	cbz	r3, 3a514 <preempt+0x38>
   3a4e6:	6833      	ldr	r3, [r6, #0]
   3a4e8:	b1a3      	cbz	r3, 3a514 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   3a4ea:	23ff      	movs	r3, #255	; 0xff
   3a4ec:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   3a4ee:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   3a4f2:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   3a4f6:	f7f8 ff53 	bl	333a0 <ull_prepare_dequeue_iter>
	if (!next) {
   3a4fa:	4601      	mov	r1, r0
   3a4fc:	b150      	cbz	r0, 3a514 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   3a4fe:	7f0b      	ldrb	r3, [r1, #28]
   3a500:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   3a504:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   3a508:	d006      	beq.n	3a518 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   3a50a:	f7f8 ff49 	bl	333a0 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   3a50e:	4601      	mov	r1, r0
   3a510:	2800      	cmp	r0, #0
   3a512:	d1f4      	bne.n	3a4fe <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   3a514:	b009      	add	sp, #36	; 0x24
   3a516:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   3a518:	428d      	cmp	r5, r1
   3a51a:	d126      	bne.n	3a56a <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   3a51c:	6873      	ldr	r3, [r6, #4]
   3a51e:	6831      	ldr	r1, [r6, #0]
   3a520:	68e8      	ldr	r0, [r5, #12]
   3a522:	aa03      	add	r2, sp, #12
   3a524:	4798      	blx	r3
	if (!err) {
   3a526:	4607      	mov	r7, r0
   3a528:	b1b0      	cbz	r0, 3a558 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   3a52a:	68b3      	ldr	r3, [r6, #8]
   3a52c:	6831      	ldr	r1, [r6, #0]
   3a52e:	4620      	mov	r0, r4
   3a530:	4798      	blx	r3
	if (err == -EAGAIN) {
   3a532:	f117 0f0b 	cmn.w	r7, #11
   3a536:	d02c      	beq.n	3a592 <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   3a538:	378c      	adds	r7, #140	; 0x8c
   3a53a:	d0eb      	beq.n	3a514 <preempt+0x38>
   3a53c:	4a34      	ldr	r2, [pc, #208]	; (3a610 <preempt+0x134>)
   3a53e:	4935      	ldr	r1, [pc, #212]	; (3a614 <preempt+0x138>)
   3a540:	4835      	ldr	r0, [pc, #212]	; (3a618 <preempt+0x13c>)
   3a542:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   3a546:	f008 fb81 	bl	42c4c <printk>
   3a54a:	4040      	eors	r0, r0
   3a54c:	f380 8811 	msr	BASEPRI, r0
   3a550:	f04f 0003 	mov.w	r0, #3
   3a554:	df02      	svc	2
   3a556:	e7dd      	b.n	3a514 <preempt+0x38>
		next->is_aborted = 1;
   3a558:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   3a55a:	69aa      	ldr	r2, [r5, #24]
   3a55c:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   3a55e:	f043 0302 	orr.w	r3, r3, #2
   3a562:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   3a564:	4628      	mov	r0, r5
   3a566:	4790      	blx	r2
		return;
   3a568:	e7d4      	b.n	3a514 <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   3a56a:	4620      	mov	r0, r4
   3a56c:	f7ff ff4c 	bl	3a408 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3a570:	f030 0302 	bics.w	r3, r0, #2
   3a574:	d0ce      	beq.n	3a514 <preempt+0x38>
   3a576:	4a26      	ldr	r2, [pc, #152]	; (3a610 <preempt+0x134>)
   3a578:	4928      	ldr	r1, [pc, #160]	; (3a61c <preempt+0x140>)
   3a57a:	4827      	ldr	r0, [pc, #156]	; (3a618 <preempt+0x13c>)
   3a57c:	f44f 7367 	mov.w	r3, #924	; 0x39c
   3a580:	f008 fb64 	bl	42c4c <printk>
   3a584:	4040      	eors	r0, r0
   3a586:	f380 8811 	msr	BASEPRI, r0
   3a58a:	f04f 0003 	mov.w	r0, #3
   3a58e:	df02      	svc	2
   3a590:	e7c0      	b.n	3a514 <preempt+0x38>
		iter_idx = UINT8_MAX;
   3a592:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   3a594:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   3a598:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   3a59c:	f7f8 ff00 	bl	333a0 <ull_prepare_dequeue_iter>
		while (iter) {
   3a5a0:	b928      	cbnz	r0, 3a5ae <preempt+0xd2>
   3a5a2:	e013      	b.n	3a5cc <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   3a5a4:	f10d 000b 	add.w	r0, sp, #11
   3a5a8:	f7f8 fefa 	bl	333a0 <ull_prepare_dequeue_iter>
		while (iter) {
   3a5ac:	b170      	cbz	r0, 3a5cc <preempt+0xf0>
			if (!iter->is_aborted &&
   3a5ae:	7f03      	ldrb	r3, [r0, #28]
   3a5b0:	079a      	lsls	r2, r3, #30
   3a5b2:	d4f7      	bmi.n	3a5a4 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   3a5b4:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   3a5b6:	6831      	ldr	r1, [r6, #0]
   3a5b8:	4291      	cmp	r1, r2
   3a5ba:	d1f3      	bne.n	3a5a4 <preempt+0xc8>
				iter->is_aborted = 1;
   3a5bc:	f043 0302 	orr.w	r3, r3, #2
   3a5c0:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   3a5c2:	6983      	ldr	r3, [r0, #24]
   3a5c4:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   3a5c6:	f88d 400b 	strb.w	r4, [sp, #11]
   3a5ca:	e7eb      	b.n	3a5a4 <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   3a5cc:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   3a5ce:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   3a5d0:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   3a5d2:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   3a5d4:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   3a5d8:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   3a5da:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   3a5dc:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   3a5de:	9b03      	ldr	r3, [sp, #12]
   3a5e0:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   3a5e4:	aa04      	add	r2, sp, #16
   3a5e6:	f7f8 fe9d 	bl	33324 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   3a5ea:	2800      	cmp	r0, #0
   3a5ec:	d192      	bne.n	3a514 <preempt+0x38>
   3a5ee:	4a08      	ldr	r2, [pc, #32]	; (3a610 <preempt+0x134>)
   3a5f0:	490b      	ldr	r1, [pc, #44]	; (3a620 <preempt+0x144>)
   3a5f2:	4809      	ldr	r0, [pc, #36]	; (3a618 <preempt+0x13c>)
   3a5f4:	f240 33ce 	movw	r3, #974	; 0x3ce
   3a5f8:	f008 fb28 	bl	42c4c <printk>
   3a5fc:	4040      	eors	r0, r0
   3a5fe:	f380 8811 	msr	BASEPRI, r0
   3a602:	f04f 0003 	mov.w	r0, #3
   3a606:	df02      	svc	2
   3a608:	e784      	b.n	3a514 <preempt+0x38>
   3a60a:	bf00      	nop
   3a60c:	20002a74 	.word	0x20002a74
   3a610:	0004a92c 	.word	0x0004a92c
   3a614:	0004aa04 	.word	0x0004aa04
   3a618:	0004a024 	.word	0x0004a024
   3a61c:	0004a390 	.word	0x0004a390
   3a620:	0004a9fc 	.word	0x0004a9fc

0003a624 <lll_init>:
{
   3a624:	b510      	push	{r4, lr}
   3a626:	4816      	ldr	r0, [pc, #88]	; (3a680 <lll_init+0x5c>)
   3a628:	f006 fc1a 	bl	40e60 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   3a62c:	4b15      	ldr	r3, [pc, #84]	; (3a684 <lll_init+0x60>)
   3a62e:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   3a630:	b310      	cbz	r0, 3a678 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   3a632:	4b15      	ldr	r3, [pc, #84]	; (3a688 <lll_init+0x64>)
   3a634:	2400      	movs	r4, #0
   3a636:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   3a638:	f000 fafa 	bl	3ac30 <lll_clock_init>
	if (err < 0) {
   3a63c:	2800      	cmp	r0, #0
   3a63e:	db1a      	blt.n	3a676 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   3a640:	4621      	mov	r1, r4
   3a642:	2001      	movs	r0, #1
   3a644:	4622      	mov	r2, r4
   3a646:	f7ef fd2d 	bl	2a0a4 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   3a64a:	4622      	mov	r2, r4
   3a64c:	200b      	movs	r0, #11
   3a64e:	2101      	movs	r1, #1
   3a650:	f7ef fd28 	bl	2a0a4 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   3a654:	4622      	mov	r2, r4
   3a656:	4621      	mov	r1, r4
   3a658:	2018      	movs	r0, #24
   3a65a:	f7ef fd23 	bl	2a0a4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   3a65e:	2001      	movs	r0, #1
   3a660:	f7ef fcf0 	bl	2a044 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   3a664:	200b      	movs	r0, #11
   3a666:	f7ef fced 	bl	2a044 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   3a66a:	2018      	movs	r0, #24
   3a66c:	f7ef fcea 	bl	2a044 <arch_irq_enable>
	radio_setup();
   3a670:	f001 fe60 	bl	3c334 <radio_setup>
	return 0;
   3a674:	4620      	mov	r0, r4
}
   3a676:	bd10      	pop	{r4, pc}
		return -ENODEV;
   3a678:	f06f 0012 	mvn.w	r0, #18
}
   3a67c:	bd10      	pop	{r4, pc}
   3a67e:	bf00      	nop
   3a680:	0004aa10 	.word	0x0004aa10
   3a684:	20002a70 	.word	0x20002a70
   3a688:	20002a74 	.word	0x20002a74

0003a68c <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   3a68c:	4a05      	ldr	r2, [pc, #20]	; (3a6a4 <lll_csrand_get+0x18>)
{
   3a68e:	b410      	push	{r4}
   3a690:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   3a692:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   3a694:	6884      	ldr	r4, [r0, #8]
   3a696:	6824      	ldr	r4, [r4, #0]
   3a698:	b28a      	uxth	r2, r1
   3a69a:	4619      	mov	r1, r3
   3a69c:	4623      	mov	r3, r4
}
   3a69e:	bc10      	pop	{r4}
   3a6a0:	4718      	bx	r3
   3a6a2:	bf00      	nop
   3a6a4:	20002a70 	.word	0x20002a70

0003a6a8 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   3a6a8:	4b08      	ldr	r3, [pc, #32]	; (3a6cc <lll_csrand_isr_get+0x24>)
{
   3a6aa:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   3a6ac:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   3a6ae:	68ab      	ldr	r3, [r5, #8]
   3a6b0:	685c      	ldr	r4, [r3, #4]
   3a6b2:	b134      	cbz	r4, 3a6c2 <lll_csrand_isr_get+0x1a>
   3a6b4:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   3a6b6:	46a4      	mov	ip, r4
   3a6b8:	4601      	mov	r1, r0
   3a6ba:	2300      	movs	r3, #0
   3a6bc:	4628      	mov	r0, r5
}
   3a6be:	bc30      	pop	{r4, r5}
   3a6c0:	4760      	bx	ip
   3a6c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3a6c6:	bc30      	pop	{r4, r5}
   3a6c8:	4770      	bx	lr
   3a6ca:	bf00      	nop
   3a6cc:	20002a70 	.word	0x20002a70

0003a6d0 <lll_rand_isr_get>:
   3a6d0:	4b08      	ldr	r3, [pc, #32]	; (3a6f4 <lll_rand_isr_get+0x24>)
   3a6d2:	b430      	push	{r4, r5}
   3a6d4:	681d      	ldr	r5, [r3, #0]
   3a6d6:	68ab      	ldr	r3, [r5, #8]
   3a6d8:	685c      	ldr	r4, [r3, #4]
   3a6da:	b134      	cbz	r4, 3a6ea <lll_rand_isr_get+0x1a>
   3a6dc:	b28a      	uxth	r2, r1
   3a6de:	46a4      	mov	ip, r4
   3a6e0:	4601      	mov	r1, r0
   3a6e2:	2300      	movs	r3, #0
   3a6e4:	4628      	mov	r0, r5
   3a6e6:	bc30      	pop	{r4, r5}
   3a6e8:	4760      	bx	ip
   3a6ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3a6ee:	bc30      	pop	{r4, r5}
   3a6f0:	4770      	bx	lr
   3a6f2:	bf00      	nop
   3a6f4:	20002a70 	.word	0x20002a70

0003a6f8 <lll_reset>:
}
   3a6f8:	2000      	movs	r0, #0
   3a6fa:	4770      	bx	lr

0003a6fc <lll_disable>:
{
   3a6fc:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   3a6fe:	4604      	mov	r4, r0
{
   3a700:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   3a702:	2800      	cmp	r0, #0
   3a704:	d032      	beq.n	3a76c <lll_disable+0x70>
   3a706:	4b25      	ldr	r3, [pc, #148]	; (3a79c <lll_disable+0xa0>)
   3a708:	681a      	ldr	r2, [r3, #0]
   3a70a:	4282      	cmp	r2, r0
   3a70c:	d028      	beq.n	3a760 <lll_disable+0x64>
		idx = UINT8_MAX;
   3a70e:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   3a710:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   3a714:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   3a718:	f7f8 fe42 	bl	333a0 <ull_prepare_dequeue_iter>
		while (next) {
   3a71c:	b940      	cbnz	r0, 3a730 <lll_disable+0x34>
   3a71e:	e01b      	b.n	3a758 <lll_disable+0x5c>
			    (!param || (param == next->prepare_param.param))) {
   3a720:	68c3      	ldr	r3, [r0, #12]
   3a722:	42a3      	cmp	r3, r4
   3a724:	d01a      	beq.n	3a75c <lll_disable+0x60>
			next = ull_prepare_dequeue_iter(&idx);
   3a726:	f10d 0007 	add.w	r0, sp, #7
   3a72a:	f7f8 fe39 	bl	333a0 <ull_prepare_dequeue_iter>
		while (next) {
   3a72e:	b198      	cbz	r0, 3a758 <lll_disable+0x5c>
			if (!next->is_aborted &&
   3a730:	7f03      	ldrb	r3, [r0, #28]
   3a732:	079b      	lsls	r3, r3, #30
   3a734:	d4f7      	bmi.n	3a726 <lll_disable+0x2a>
   3a736:	2c00      	cmp	r4, #0
   3a738:	d1f2      	bne.n	3a720 <lll_disable+0x24>
			    (!param || (param == next->prepare_param.param))) {
   3a73a:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   3a73c:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   3a73e:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   3a740:	f043 0302 	orr.w	r3, r3, #2
   3a744:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   3a746:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   3a748:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   3a74c:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   3a750:	f7f8 fe26 	bl	333a0 <ull_prepare_dequeue_iter>
		while (next) {
   3a754:	2800      	cmp	r0, #0
   3a756:	d1eb      	bne.n	3a730 <lll_disable+0x34>
}
   3a758:	b003      	add	sp, #12
   3a75a:	bd30      	pop	{r4, r5, pc}
   3a75c:	4621      	mov	r1, r4
   3a75e:	e7ed      	b.n	3a73c <lll_disable+0x40>
		if (event.curr.abort_cb && event.curr.param) {
   3a760:	689b      	ldr	r3, [r3, #8]
   3a762:	b16b      	cbz	r3, 3a780 <lll_disable+0x84>
   3a764:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   3a766:	2000      	movs	r0, #0
   3a768:	4798      	blx	r3
   3a76a:	e7d0      	b.n	3a70e <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   3a76c:	4a0b      	ldr	r2, [pc, #44]	; (3a79c <lll_disable+0xa0>)
   3a76e:	6893      	ldr	r3, [r2, #8]
   3a770:	2b00      	cmp	r3, #0
   3a772:	d0cc      	beq.n	3a70e <lll_disable+0x12>
   3a774:	6811      	ldr	r1, [r2, #0]
   3a776:	2900      	cmp	r1, #0
   3a778:	d0c9      	beq.n	3a70e <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   3a77a:	2000      	movs	r0, #0
   3a77c:	4798      	blx	r3
   3a77e:	e7c6      	b.n	3a70e <lll_disable+0x12>
			LL_ASSERT(!param);
   3a780:	4a07      	ldr	r2, [pc, #28]	; (3a7a0 <lll_disable+0xa4>)
   3a782:	4908      	ldr	r1, [pc, #32]	; (3a7a4 <lll_disable+0xa8>)
   3a784:	4808      	ldr	r0, [pc, #32]	; (3a7a8 <lll_disable+0xac>)
   3a786:	23fd      	movs	r3, #253	; 0xfd
   3a788:	f008 fa60 	bl	42c4c <printk>
   3a78c:	4040      	eors	r0, r0
   3a78e:	f380 8811 	msr	BASEPRI, r0
   3a792:	f04f 0003 	mov.w	r0, #3
   3a796:	df02      	svc	2
   3a798:	e7b9      	b.n	3a70e <lll_disable+0x12>
   3a79a:	bf00      	nop
   3a79c:	20002a74 	.word	0x20002a74
   3a7a0:	0004a92c 	.word	0x0004a92c
   3a7a4:	0004aa14 	.word	0x0004aa14
   3a7a8:	0004a024 	.word	0x0004a024

0003a7ac <lll_prepare_done>:
}
   3a7ac:	2000      	movs	r0, #0
   3a7ae:	4770      	bx	lr

0003a7b0 <lll_done>:
{
   3a7b0:	b538      	push	{r3, r4, r5, lr}
   3a7b2:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   3a7b4:	f7f8 fde6 	bl	33384 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   3a7b8:	b154      	cbz	r4, 3a7d0 <lll_done+0x20>
   3a7ba:	b310      	cbz	r0, 3a802 <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   3a7bc:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   3a7be:	2000      	movs	r0, #0
   3a7c0:	f7f8 fe0e 	bl	333e0 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   3a7c4:	4620      	mov	r0, r4
   3a7c6:	f7f8 fe6f 	bl	334a8 <ull_event_done>
	LL_ASSERT(evdone);
   3a7ca:	b158      	cbz	r0, 3a7e4 <lll_done+0x34>
}
   3a7cc:	2000      	movs	r0, #0
   3a7ce:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   3a7d0:	4d1a      	ldr	r5, [pc, #104]	; (3a83c <lll_done+0x8c>)
   3a7d2:	68ab      	ldr	r3, [r5, #8]
   3a7d4:	b31b      	cbz	r3, 3a81e <lll_done+0x6e>
		param = event.curr.param;
   3a7d6:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   3a7d8:	2300      	movs	r3, #0
   3a7da:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   3a7dc:	602b      	str	r3, [r5, #0]
		if (param) {
   3a7de:	2c00      	cmp	r4, #0
   3a7e0:	d1ec      	bne.n	3a7bc <lll_done+0xc>
   3a7e2:	e7ec      	b.n	3a7be <lll_done+0xe>
	LL_ASSERT(evdone);
   3a7e4:	4a16      	ldr	r2, [pc, #88]	; (3a840 <lll_done+0x90>)
   3a7e6:	4917      	ldr	r1, [pc, #92]	; (3a844 <lll_done+0x94>)
   3a7e8:	4817      	ldr	r0, [pc, #92]	; (3a848 <lll_done+0x98>)
   3a7ea:	f240 136d 	movw	r3, #365	; 0x16d
   3a7ee:	f008 fa2d 	bl	42c4c <printk>
   3a7f2:	4040      	eors	r0, r0
   3a7f4:	f380 8811 	msr	BASEPRI, r0
   3a7f8:	f04f 0003 	mov.w	r0, #3
   3a7fc:	df02      	svc	2
}
   3a7fe:	2000      	movs	r0, #0
   3a800:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   3a802:	4a0f      	ldr	r2, [pc, #60]	; (3a840 <lll_done+0x90>)
   3a804:	4911      	ldr	r1, [pc, #68]	; (3a84c <lll_done+0x9c>)
   3a806:	4810      	ldr	r0, [pc, #64]	; (3a848 <lll_done+0x98>)
   3a808:	f240 1337 	movw	r3, #311	; 0x137
   3a80c:	f008 fa1e 	bl	42c4c <printk>
   3a810:	4040      	eors	r0, r0
   3a812:	f380 8811 	msr	BASEPRI, r0
   3a816:	f04f 0003 	mov.w	r0, #3
   3a81a:	df02      	svc	2
   3a81c:	e7ce      	b.n	3a7bc <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   3a81e:	4a08      	ldr	r2, [pc, #32]	; (3a840 <lll_done+0x90>)
   3a820:	490b      	ldr	r1, [pc, #44]	; (3a850 <lll_done+0xa0>)
   3a822:	4809      	ldr	r0, [pc, #36]	; (3a848 <lll_done+0x98>)
   3a824:	f240 133d 	movw	r3, #317	; 0x13d
   3a828:	f008 fa10 	bl	42c4c <printk>
   3a82c:	4040      	eors	r0, r0
   3a82e:	f380 8811 	msr	BASEPRI, r0
   3a832:	f04f 0003 	mov.w	r0, #3
   3a836:	df02      	svc	2
   3a838:	e7cd      	b.n	3a7d6 <lll_done+0x26>
   3a83a:	bf00      	nop
   3a83c:	20002a74 	.word	0x20002a74
   3a840:	0004a92c 	.word	0x0004a92c
   3a844:	0004aa40 	.word	0x0004aa40
   3a848:	0004a024 	.word	0x0004a024
   3a84c:	0004aa1c 	.word	0x0004aa1c
   3a850:	0004aa2c 	.word	0x0004aa2c

0003a854 <lll_is_abort_cb>:
}
   3a854:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3a858:	4770      	bx	lr
   3a85a:	bf00      	nop

0003a85c <lll_event_offset_get>:
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   3a85c:	6883      	ldr	r3, [r0, #8]
   3a85e:	2b00      	cmp	r3, #0
		return MAX(ull->ticks_active_to_start,
   3a860:	bfb8      	it	lt
   3a862:	68c3      	ldrlt	r3, [r0, #12]
		return MAX(ull->ticks_active_to_start,
   3a864:	6840      	ldr	r0, [r0, #4]
   3a866:	4298      	cmp	r0, r3
   3a868:	bf38      	it	cc
   3a86a:	4618      	movcc	r0, r3
}
   3a86c:	4770      	bx	lr
   3a86e:	bf00      	nop

0003a870 <lll_preempt_calc>:
{
   3a870:	b510      	push	{r4, lr}
   3a872:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   3a874:	f7f6 fb10 	bl	30e98 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   3a878:	1b02      	subs	r2, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   3a87a:	0213      	lsls	r3, r2, #8
   3a87c:	d405      	bmi.n	3a88a <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   3a87e:	1cd0      	adds	r0, r2, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   3a880:	2809      	cmp	r0, #9
   3a882:	bf94      	ite	ls
   3a884:	2000      	movls	r0, #0
   3a886:	2001      	movhi	r0, #1
}
   3a888:	bd10      	pop	{r4, pc}
		return 0;
   3a88a:	2000      	movs	r0, #0
}
   3a88c:	bd10      	pop	{r4, pc}
   3a88e:	bf00      	nop

0003a890 <lll_chan_set>:
	switch (chan) {
   3a890:	2826      	cmp	r0, #38	; 0x26
{
   3a892:	b510      	push	{r4, lr}
   3a894:	4604      	mov	r4, r0
	switch (chan) {
   3a896:	d01c      	beq.n	3a8d2 <lll_chan_set+0x42>
   3a898:	2827      	cmp	r0, #39	; 0x27
   3a89a:	d012      	beq.n	3a8c2 <lll_chan_set+0x32>
   3a89c:	2825      	cmp	r0, #37	; 0x25
   3a89e:	d008      	beq.n	3a8b2 <lll_chan_set+0x22>
		if (chan < 11) {
   3a8a0:	280a      	cmp	r0, #10
   3a8a2:	d91e      	bls.n	3a8e2 <lll_chan_set+0x52>
		} else if (chan < 40) {
   3a8a4:	2827      	cmp	r0, #39	; 0x27
   3a8a6:	d821      	bhi.n	3a8ec <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   3a8a8:	3003      	adds	r0, #3
   3a8aa:	0040      	lsls	r0, r0, #1
   3a8ac:	f001 fd9e 	bl	3c3ec <radio_freq_chan_set>
   3a8b0:	e002      	b.n	3a8b8 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   3a8b2:	2002      	movs	r0, #2
   3a8b4:	f001 fd9a 	bl	3c3ec <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   3a8b8:	4620      	mov	r0, r4
}
   3a8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   3a8be:	f001 bd9b 	b.w	3c3f8 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   3a8c2:	2050      	movs	r0, #80	; 0x50
   3a8c4:	f001 fd92 	bl	3c3ec <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   3a8c8:	4620      	mov	r0, r4
}
   3a8ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   3a8ce:	f001 bd93 	b.w	3c3f8 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   3a8d2:	201a      	movs	r0, #26
   3a8d4:	f001 fd8a 	bl	3c3ec <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   3a8d8:	4620      	mov	r0, r4
}
   3a8da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   3a8de:	f001 bd8b 	b.w	3c3f8 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   3a8e2:	3002      	adds	r0, #2
   3a8e4:	0040      	lsls	r0, r0, #1
   3a8e6:	f001 fd81 	bl	3c3ec <radio_freq_chan_set>
   3a8ea:	e7e5      	b.n	3a8b8 <lll_chan_set+0x28>
			LL_ASSERT(0);
   3a8ec:	4a06      	ldr	r2, [pc, #24]	; (3a908 <lll_chan_set+0x78>)
   3a8ee:	4907      	ldr	r1, [pc, #28]	; (3a90c <lll_chan_set+0x7c>)
   3a8f0:	4807      	ldr	r0, [pc, #28]	; (3a910 <lll_chan_set+0x80>)
   3a8f2:	f240 13df 	movw	r3, #479	; 0x1df
   3a8f6:	f008 f9a9 	bl	42c4c <printk>
   3a8fa:	4040      	eors	r0, r0
   3a8fc:	f380 8811 	msr	BASEPRI, r0
   3a900:	f04f 0003 	mov.w	r0, #3
   3a904:	df02      	svc	2
   3a906:	e7d7      	b.n	3a8b8 <lll_chan_set+0x28>
   3a908:	0004a92c 	.word	0x0004a92c
   3a90c:	0004a084 	.word	0x0004a084
   3a910:	0004a024 	.word	0x0004a024

0003a914 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   3a914:	f001 bdce 	b.w	3c4b4 <radio_rx_ready_delay_get>

0003a918 <lll_isr_tx_status_reset>:
{
   3a918:	b508      	push	{r3, lr}
	radio_status_reset();
   3a91a:	f001 fded 	bl	3c4f8 <radio_status_reset>
}
   3a91e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   3a922:	f001 bf3b 	b.w	3c79c <radio_tmr_status_reset>
   3a926:	bf00      	nop

0003a928 <lll_isr_rx_status_reset>:
{
   3a928:	b508      	push	{r3, lr}
	radio_status_reset();
   3a92a:	f001 fde5 	bl	3c4f8 <radio_status_reset>
	radio_tmr_status_reset();
   3a92e:	f001 ff35 	bl	3c79c <radio_tmr_status_reset>
}
   3a932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   3a936:	f001 bedd 	b.w	3c6f4 <radio_rssi_status_reset>
   3a93a:	bf00      	nop

0003a93c <lll_isr_status_reset>:
{
   3a93c:	b508      	push	{r3, lr}
	radio_status_reset();
   3a93e:	f001 fddb 	bl	3c4f8 <radio_status_reset>
	radio_tmr_status_reset();
   3a942:	f001 ff2b 	bl	3c79c <radio_tmr_status_reset>
	radio_filter_status_reset();
   3a946:	f001 ff11 	bl	3c76c <radio_filter_status_reset>
	radio_ar_status_reset();
   3a94a:	f002 f8f1 	bl	3cb30 <radio_ar_status_reset>
}
   3a94e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   3a952:	f001 becf 	b.w	3c6f4 <radio_rssi_status_reset>
   3a956:	bf00      	nop

0003a958 <lll_isr_cleanup>:
{
   3a958:	b508      	push	{r3, lr}
   3a95a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   3a95c:	4815      	ldr	r0, [pc, #84]	; (3a9b4 <lll_isr_cleanup+0x5c>)
   3a95e:	f001 fcc9 	bl	3c2f4 <radio_isr_set>
	if (!radio_is_idle()) {
   3a962:	f001 fde9 	bl	3c538 <radio_is_idle>
   3a966:	b150      	cbz	r0, 3a97e <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   3a968:	f001 ffbc 	bl	3c8e4 <radio_tmr_stop>
	err = lll_hfclock_off();
   3a96c:	f000 f9a4 	bl	3acb8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3a970:	2800      	cmp	r0, #0
   3a972:	db0c      	blt.n	3a98e <lll_isr_cleanup+0x36>
}
   3a974:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   3a978:	2000      	movs	r0, #0
   3a97a:	f7ff bf19 	b.w	3a7b0 <lll_done>
		radio_disable();
   3a97e:	f001 fda7 	bl	3c4d0 <radio_disable>
	radio_tmr_stop();
   3a982:	f001 ffaf 	bl	3c8e4 <radio_tmr_stop>
	err = lll_hfclock_off();
   3a986:	f000 f997 	bl	3acb8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3a98a:	2800      	cmp	r0, #0
   3a98c:	daf2      	bge.n	3a974 <lll_isr_cleanup+0x1c>
   3a98e:	4a0a      	ldr	r2, [pc, #40]	; (3a9b8 <lll_isr_cleanup+0x60>)
   3a990:	490a      	ldr	r1, [pc, #40]	; (3a9bc <lll_isr_cleanup+0x64>)
   3a992:	480b      	ldr	r0, [pc, #44]	; (3a9c0 <lll_isr_cleanup+0x68>)
   3a994:	f240 2342 	movw	r3, #578	; 0x242
   3a998:	f008 f958 	bl	42c4c <printk>
   3a99c:	4040      	eors	r0, r0
   3a99e:	f380 8811 	msr	BASEPRI, r0
   3a9a2:	f04f 0003 	mov.w	r0, #3
   3a9a6:	df02      	svc	2
	lll_done(NULL);
   3a9a8:	2000      	movs	r0, #0
}
   3a9aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   3a9ae:	f7ff beff 	b.w	3a7b0 <lll_done>
   3a9b2:	bf00      	nop
   3a9b4:	0003a305 	.word	0x0003a305
   3a9b8:	0004a92c 	.word	0x0004a92c
   3a9bc:	0004aa48 	.word	0x0004aa48
   3a9c0:	0004a024 	.word	0x0004a024

0003a9c4 <lll_isr_abort>:
{
   3a9c4:	b510      	push	{r4, lr}
   3a9c6:	4604      	mov	r4, r0
	radio_status_reset();
   3a9c8:	f001 fd96 	bl	3c4f8 <radio_status_reset>
	radio_tmr_status_reset();
   3a9cc:	f001 fee6 	bl	3c79c <radio_tmr_status_reset>
	radio_filter_status_reset();
   3a9d0:	f001 fecc 	bl	3c76c <radio_filter_status_reset>
	radio_ar_status_reset();
   3a9d4:	f002 f8ac 	bl	3cb30 <radio_ar_status_reset>
	radio_rssi_status_reset();
   3a9d8:	f001 fe8c 	bl	3c6f4 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   3a9dc:	4620      	mov	r0, r4
}
   3a9de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   3a9e2:	f7ff bfb9 	b.w	3a958 <lll_isr_cleanup>
   3a9e6:	bf00      	nop

0003a9e8 <lll_isr_early_abort>:
{
   3a9e8:	b508      	push	{r3, lr}
   3a9ea:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   3a9ec:	4813      	ldr	r0, [pc, #76]	; (3aa3c <lll_isr_early_abort+0x54>)
   3a9ee:	f001 fc81 	bl	3c2f4 <radio_isr_set>
	if (!radio_is_idle()) {
   3a9f2:	f001 fda1 	bl	3c538 <radio_is_idle>
   3a9f6:	b140      	cbz	r0, 3aa0a <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   3a9f8:	f000 f95e 	bl	3acb8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3a9fc:	2800      	cmp	r0, #0
   3a9fe:	db0a      	blt.n	3aa16 <lll_isr_early_abort+0x2e>
}
   3aa00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   3aa04:	2000      	movs	r0, #0
   3aa06:	f7ff bed3 	b.w	3a7b0 <lll_done>
		radio_disable();
   3aa0a:	f001 fd61 	bl	3c4d0 <radio_disable>
	err = lll_hfclock_off();
   3aa0e:	f000 f953 	bl	3acb8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3aa12:	2800      	cmp	r0, #0
   3aa14:	daf4      	bge.n	3aa00 <lll_isr_early_abort+0x18>
   3aa16:	4a0a      	ldr	r2, [pc, #40]	; (3aa40 <lll_isr_early_abort+0x58>)
   3aa18:	490a      	ldr	r1, [pc, #40]	; (3aa44 <lll_isr_early_abort+0x5c>)
   3aa1a:	480b      	ldr	r0, [pc, #44]	; (3aa48 <lll_isr_early_abort+0x60>)
   3aa1c:	f240 2351 	movw	r3, #593	; 0x251
   3aa20:	f008 f914 	bl	42c4c <printk>
   3aa24:	4040      	eors	r0, r0
   3aa26:	f380 8811 	msr	BASEPRI, r0
   3aa2a:	f04f 0003 	mov.w	r0, #3
   3aa2e:	df02      	svc	2
	lll_done(NULL);
   3aa30:	2000      	movs	r0, #0
}
   3aa32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   3aa36:	f7ff bebb 	b.w	3a7b0 <lll_done>
   3aa3a:	bf00      	nop
   3aa3c:	0003a305 	.word	0x0003a305
   3aa40:	0004a92c 	.word	0x0004a92c
   3aa44:	0004aa48 	.word	0x0004aa48
   3aa48:	0004a024 	.word	0x0004a024

0003aa4c <lll_prepare_resolve>:
{
   3aa4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3aa50:	b084      	sub	sp, #16
   3aa52:	4606      	mov	r6, r0
   3aa54:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   3aa56:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   3aa5a:	23ff      	movs	r3, #255	; 0xff
{
   3aa5c:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   3aa60:	f88d 300f 	strb.w	r3, [sp, #15]
{
   3aa64:	460f      	mov	r7, r1
   3aa66:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   3aa68:	f7f8 fc9a 	bl	333a0 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   3aa6c:	4604      	mov	r4, r0
   3aa6e:	b920      	cbnz	r0, 3aa7a <lll_prepare_resolve+0x2e>
   3aa70:	e032      	b.n	3aad8 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   3aa72:	f7f8 fc95 	bl	333a0 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   3aa76:	4604      	mov	r4, r0
   3aa78:	b370      	cbz	r0, 3aad8 <lll_prepare_resolve+0x8c>
   3aa7a:	f894 c01c 	ldrb.w	ip, [r4, #28]
   3aa7e:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   3aa82:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   3aa86:	d1f4      	bne.n	3aa72 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   3aa88:	f8df a130 	ldr.w	sl, [pc, #304]	; 3abbc <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   3aa8c:	f8da 3008 	ldr.w	r3, [sl, #8]
   3aa90:	bb4b      	cbnz	r3, 3aae6 <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   3aa92:	f1b9 0f00 	cmp.w	r9, #0
   3aa96:	d048      	beq.n	3ab2a <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   3aa98:	f8cd 9000 	str.w	r9, [sp]
   3aa9c:	4643      	mov	r3, r8
   3aa9e:	462a      	mov	r2, r5
   3aaa0:	4639      	mov	r1, r7
   3aaa2:	4630      	mov	r0, r6
   3aaa4:	f7f8 fc3e 	bl	33324 <ull_prepare_enqueue>
		LL_ASSERT(next);
   3aaa8:	b980      	cbnz	r0, 3aacc <lll_prepare_resolve+0x80>
   3aaaa:	4a45      	ldr	r2, [pc, #276]	; (3abc0 <lll_prepare_resolve+0x174>)
   3aaac:	4945      	ldr	r1, [pc, #276]	; (3abc4 <lll_prepare_resolve+0x178>)
   3aaae:	4846      	ldr	r0, [pc, #280]	; (3abc8 <lll_prepare_resolve+0x17c>)
   3aab0:	f240 238d 	movw	r3, #653	; 0x28d
   3aab4:	f008 f8ca 	bl	42c4c <printk>
   3aab8:	4040      	eors	r0, r0
   3aaba:	f380 8811 	msr	BASEPRI, r0
   3aabe:	f04f 0003 	mov.w	r0, #3
   3aac2:	df02      	svc	2
   3aac4:	2000      	movs	r0, #0
		if (is_resume) {
   3aac6:	f1b9 0f00 	cmp.w	r9, #0
   3aaca:	d019      	beq.n	3ab00 <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   3aacc:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   3aad0:	4620      	mov	r0, r4
   3aad2:	b004      	add	sp, #16
   3aad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   3aad8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 3abbc <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   3aadc:	f8da 3008 	ldr.w	r3, [sl, #8]
   3aae0:	2b00      	cmp	r3, #0
   3aae2:	d031      	beq.n	3ab48 <lll_prepare_resolve+0xfc>
   3aae4:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   3aae6:	f8cd 9000 	str.w	r9, [sp]
   3aaea:	4643      	mov	r3, r8
   3aaec:	462a      	mov	r2, r5
   3aaee:	4639      	mov	r1, r7
   3aaf0:	4630      	mov	r0, r6
   3aaf2:	f7f8 fc17 	bl	33324 <ull_prepare_enqueue>
		LL_ASSERT(next);
   3aaf6:	2800      	cmp	r0, #0
   3aaf8:	d0d7      	beq.n	3aaaa <lll_prepare_resolve+0x5e>
		if (is_resume) {
   3aafa:	f1b9 0f00 	cmp.w	r9, #0
   3aafe:	d1e5      	bne.n	3aacc <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   3ab00:	4601      	mov	r1, r0
   3ab02:	4620      	mov	r0, r4
   3ab04:	f7ff fc80 	bl	3a408 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3ab08:	f030 0302 	bics.w	r3, r0, #2
   3ab0c:	d0de      	beq.n	3aacc <lll_prepare_resolve+0x80>
   3ab0e:	4a2c      	ldr	r2, [pc, #176]	; (3abc0 <lll_prepare_resolve+0x174>)
   3ab10:	492e      	ldr	r1, [pc, #184]	; (3abcc <lll_prepare_resolve+0x180>)
   3ab12:	482d      	ldr	r0, [pc, #180]	; (3abc8 <lll_prepare_resolve+0x17c>)
   3ab14:	f44f 7326 	mov.w	r3, #664	; 0x298
   3ab18:	f008 f898 	bl	42c4c <printk>
   3ab1c:	4040      	eors	r0, r0
   3ab1e:	f380 8811 	msr	BASEPRI, r0
   3ab22:	f04f 0003 	mov.w	r0, #3
   3ab26:	df02      	svc	2
   3ab28:	e7d0      	b.n	3aacc <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   3ab2a:	42ac      	cmp	r4, r5
   3ab2c:	d00c      	beq.n	3ab48 <lll_prepare_resolve+0xfc>
   3ab2e:	4a24      	ldr	r2, [pc, #144]	; (3abc0 <lll_prepare_resolve+0x174>)
   3ab30:	4927      	ldr	r1, [pc, #156]	; (3abd0 <lll_prepare_resolve+0x184>)
   3ab32:	4825      	ldr	r0, [pc, #148]	; (3abc8 <lll_prepare_resolve+0x17c>)
   3ab34:	f240 23be 	movw	r3, #702	; 0x2be
   3ab38:	f008 f888 	bl	42c4c <printk>
   3ab3c:	4040      	eors	r0, r0
   3ab3e:	f380 8811 	msr	BASEPRI, r0
   3ab42:	f04f 0003 	mov.w	r0, #3
   3ab46:	df02      	svc	2
	event.curr.param = prepare_param->param;
   3ab48:	68eb      	ldr	r3, [r5, #12]
   3ab4a:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   3ab4e:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   3ab52:	4628      	mov	r0, r5
   3ab54:	47c0      	blx	r8
   3ab56:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   3ab58:	f7ff fc16 	bl	3a388 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3ab5c:	f030 0302 	bics.w	r3, r0, #2
   3ab60:	d11e      	bne.n	3aba0 <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   3ab62:	f10d 000f 	add.w	r0, sp, #15
   3ab66:	f7f8 fc1b 	bl	333a0 <ull_prepare_dequeue_iter>
		if (!p) {
   3ab6a:	2800      	cmp	r0, #0
   3ab6c:	d0b0      	beq.n	3aad0 <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   3ab6e:	7f03      	ldrb	r3, [r0, #28]
   3ab70:	f013 0303 	ands.w	r3, r3, #3
   3ab74:	d1f5      	bne.n	3ab62 <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   3ab76:	4601      	mov	r1, r0
   3ab78:	4618      	mov	r0, r3
   3ab7a:	f7ff fc45 	bl	3a408 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3ab7e:	f030 0302 	bics.w	r3, r0, #2
   3ab82:	d0a5      	beq.n	3aad0 <lll_prepare_resolve+0x84>
   3ab84:	4a0e      	ldr	r2, [pc, #56]	; (3abc0 <lll_prepare_resolve+0x174>)
   3ab86:	4911      	ldr	r1, [pc, #68]	; (3abcc <lll_prepare_resolve+0x180>)
   3ab88:	480f      	ldr	r0, [pc, #60]	; (3abc8 <lll_prepare_resolve+0x17c>)
   3ab8a:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   3ab8e:	f008 f85d 	bl	42c4c <printk>
   3ab92:	4040      	eors	r0, r0
   3ab94:	f380 8811 	msr	BASEPRI, r0
   3ab98:	f04f 0003 	mov.w	r0, #3
   3ab9c:	df02      	svc	2
   3ab9e:	e797      	b.n	3aad0 <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3aba0:	4a07      	ldr	r2, [pc, #28]	; (3abc0 <lll_prepare_resolve+0x174>)
   3aba2:	490a      	ldr	r1, [pc, #40]	; (3abcc <lll_prepare_resolve+0x180>)
   3aba4:	4808      	ldr	r0, [pc, #32]	; (3abc8 <lll_prepare_resolve+0x17c>)
   3aba6:	f240 23cb 	movw	r3, #715	; 0x2cb
   3abaa:	f008 f84f 	bl	42c4c <printk>
   3abae:	4040      	eors	r0, r0
   3abb0:	f380 8811 	msr	BASEPRI, r0
   3abb4:	f04f 0003 	mov.w	r0, #3
   3abb8:	df02      	svc	2
   3abba:	e7d2      	b.n	3ab62 <lll_prepare_resolve+0x116>
   3abbc:	20002a74 	.word	0x20002a74
   3abc0:	0004a92c 	.word	0x0004a92c
   3abc4:	0004aa54 	.word	0x0004aa54
   3abc8:	0004a024 	.word	0x0004a024
   3abcc:	0004a390 	.word	0x0004a390
   3abd0:	0004aa5c 	.word	0x0004aa5c

0003abd4 <clock_ready>:
	z_impl_k_sem_give(sem);
   3abd4:	f101 0010 	add.w	r0, r1, #16
   3abd8:	f006 bd0a 	b.w	415f0 <z_impl_k_sem_give>

0003abdc <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   3abdc:	b570      	push	{r4, r5, r6, lr}
   3abde:	4605      	mov	r5, r0
   3abe0:	b08a      	sub	sp, #40	; 0x28
   3abe2:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   3abe4:	2201      	movs	r2, #1
   3abe6:	2100      	movs	r1, #0
   3abe8:	a804      	add	r0, sp, #16
   3abea:	f00d ff79 	bl	48ae0 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   3abee:	4b0f      	ldr	r3, [pc, #60]	; (3ac2c <blocking_on+0x50>)
   3abf0:	9301      	str	r3, [sp, #4]
   3abf2:	2600      	movs	r6, #0
   3abf4:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   3abf6:	4669      	mov	r1, sp
   3abf8:	4628      	mov	r0, r5
   3abfa:	9603      	str	r6, [sp, #12]
   3abfc:	9302      	str	r3, [sp, #8]
   3abfe:	f008 f8bc 	bl	42d7a <onoff_request>
	if (err < 0) {
   3ac02:	2800      	cmp	r0, #0
   3ac04:	db10      	blt.n	3ac28 <blocking_on+0x4c>
   3ac06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   3ac0a:	4631      	mov	r1, r6
   3ac0c:	f240 30e7 	movw	r0, #999	; 0x3e7
   3ac10:	fbe4 0103 	umlal	r0, r1, r4, r3
   3ac14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3ac18:	2300      	movs	r3, #0
   3ac1a:	f7eb fa71 	bl	26100 <__aeabi_uldivmod>
   3ac1e:	4602      	mov	r2, r0
   3ac20:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   3ac22:	a804      	add	r0, sp, #16
   3ac24:	f006 fd0a 	bl	4163c <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   3ac28:	b00a      	add	sp, #40	; 0x28
   3ac2a:	bd70      	pop	{r4, r5, r6, pc}
   3ac2c:	0003abd5 	.word	0x0003abd5

0003ac30 <lll_clock_init>:

int lll_clock_init(void)
{
   3ac30:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   3ac32:	2001      	movs	r0, #1
   3ac34:	f003 fb3c 	bl	3e2b0 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   3ac38:	4904      	ldr	r1, [pc, #16]	; (3ac4c <lll_clock_init+0x1c>)
   3ac3a:	2300      	movs	r3, #0
   3ac3c:	2401      	movs	r4, #1
   3ac3e:	608c      	str	r4, [r1, #8]
   3ac40:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   3ac42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ac46:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   3ac48:	f008 b897 	b.w	42d7a <onoff_request>
   3ac4c:	20002a90 	.word	0x20002a90

0003ac50 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   3ac50:	4b0c      	ldr	r3, [pc, #48]	; (3ac84 <lll_clock_wait+0x34>)
   3ac52:	781a      	ldrb	r2, [r3, #0]
   3ac54:	b10a      	cbz	r2, 3ac5a <lll_clock_wait+0xa>
		return 0;
   3ac56:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   3ac58:	4770      	bx	lr
{
   3ac5a:	b510      	push	{r4, lr}
	done = true;
   3ac5c:	2001      	movs	r0, #1
   3ac5e:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   3ac60:	f003 fb26 	bl	3e2b0 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   3ac64:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   3ac68:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   3ac6a:	f7ff ffb7 	bl	3abdc <blocking_on>
	if (err) {
   3ac6e:	b938      	cbnz	r0, 3ac80 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   3ac70:	4620      	mov	r0, r4
   3ac72:	f008 f8cd 	bl	42e10 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   3ac76:	2802      	cmp	r0, #2
		return 0;
   3ac78:	bf0c      	ite	eq
   3ac7a:	2000      	moveq	r0, #0
		return -EIO;
   3ac7c:	f06f 0004 	mvnne.w	r0, #4
}
   3ac80:	bd10      	pop	{r4, pc}
   3ac82:	bf00      	nop
   3ac84:	20003c73 	.word	0x20003c73

0003ac88 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   3ac88:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   3ac8a:	4b0a      	ldr	r3, [pc, #40]	; (3acb4 <lll_hfclock_on+0x2c>)
   3ac8c:	f3bf 8f5b 	dmb	ish
   3ac90:	e853 2f00 	ldrex	r2, [r3]
   3ac94:	1c51      	adds	r1, r2, #1
   3ac96:	e843 1000 	strex	r0, r1, [r3]
   3ac9a:	2800      	cmp	r0, #0
   3ac9c:	d1f8      	bne.n	3ac90 <lll_hfclock_on+0x8>
   3ac9e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   3aca2:	2a00      	cmp	r2, #0
   3aca4:	dd01      	ble.n	3acaa <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   3aca6:	2000      	movs	r0, #0
   3aca8:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   3acaa:	f003 fb09 	bl	3e2c0 <z_nrf_clock_bt_ctlr_hf_request>
}
   3acae:	2000      	movs	r0, #0
   3acb0:	bd08      	pop	{r3, pc}
   3acb2:	bf00      	nop
   3acb4:	20002a8c 	.word	0x20002a8c

0003acb8 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   3acb8:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   3acba:	4b0d      	ldr	r3, [pc, #52]	; (3acf0 <lll_hfclock_off+0x38>)
   3acbc:	681a      	ldr	r2, [r3, #0]
   3acbe:	2a00      	cmp	r2, #0
   3acc0:	dd12      	ble.n	3ace8 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   3acc2:	f3bf 8f5b 	dmb	ish
   3acc6:	e853 2f00 	ldrex	r2, [r3]
   3acca:	1e51      	subs	r1, r2, #1
   3accc:	e843 1000 	strex	r0, r1, [r3]
   3acd0:	2800      	cmp	r0, #0
   3acd2:	d1f8      	bne.n	3acc6 <lll_hfclock_off+0xe>
   3acd4:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   3acd8:	2a01      	cmp	r2, #1
   3acda:	dd01      	ble.n	3ace0 <lll_hfclock_off+0x28>
		return 0;
   3acdc:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   3acde:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   3ace0:	f003 fb04 	bl	3e2ec <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   3ace4:	2000      	movs	r0, #0
}
   3ace6:	bd08      	pop	{r3, pc}
		return -EALREADY;
   3ace8:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   3acec:	bd08      	pop	{r3, pc}
   3acee:	bf00      	nop
   3acf0:	20002a8c 	.word	0x20002a8c

0003acf4 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   3acf4:	2032      	movs	r0, #50	; 0x32
   3acf6:	4770      	bx	lr

0003acf8 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   3acf8:	4b01      	ldr	r3, [pc, #4]	; (3ad00 <lll_clock_ppm_get+0x8>)
}
   3acfa:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   3acfe:	4770      	bx	lr
   3ad00:	0004aa88 	.word	0x0004aa88

0003ad04 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   3ad04:	b510      	push	{r4, lr}
   3ad06:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   3ad08:	f7ff fe18 	bl	3a93c <lll_isr_status_reset>

	radio_filter_disable();
   3ad0c:	f001 fd24 	bl	3c758 <radio_filter_disable>

	lll_isr_cleanup(param);
   3ad10:	4620      	mov	r0, r4
}
   3ad12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   3ad16:	f7ff be1f 	b.w	3a958 <lll_isr_cleanup>
   3ad1a:	bf00      	nop

0003ad1c <isr_tx>:
{
   3ad1c:	b530      	push	{r4, r5, lr}
   3ad1e:	b083      	sub	sp, #12
   3ad20:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   3ad22:	f7ff fdf9 	bl	3a918 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   3ad26:	2096      	movs	r0, #150	; 0x96
   3ad28:	f001 fd48 	bl	3c7bc <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   3ad2c:	2300      	movs	r3, #0
   3ad2e:	4618      	mov	r0, r3
   3ad30:	461a      	mov	r2, r3
   3ad32:	4619      	mov	r1, r3
   3ad34:	f001 fc70 	bl	3c618 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   3ad38:	2001      	movs	r0, #1
   3ad3a:	f7f8 faa7 	bl	3328c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3ad3e:	4604      	mov	r4, r0
   3ad40:	2800      	cmp	r0, #0
   3ad42:	d043      	beq.n	3adcc <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   3ad44:	f104 001c 	add.w	r0, r4, #28
   3ad48:	f001 fba6 	bl	3c498 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   3ad4c:	f001 fbe0 	bl	3c510 <radio_is_ready>
   3ad50:	b9e0      	cbnz	r0, 3ad8c <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   3ad52:	4825      	ldr	r0, [pc, #148]	; (3ade8 <isr_tx+0xcc>)
   3ad54:	4629      	mov	r1, r5
   3ad56:	f001 facd 	bl	3c2f4 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   3ad5a:	f7ff fa23 	bl	3a1a4 <ull_filter_lll_rl_enabled>
   3ad5e:	bb50      	cbnz	r0, 3adb6 <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   3ad60:	f001 fe14 	bl	3c98c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   3ad64:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   3ad66:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   3ad68:	4608      	mov	r0, r1
   3ad6a:	f001 fba5 	bl	3c4b8 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   3ad6e:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   3ad70:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   3ad72:	4608      	mov	r0, r1
   3ad74:	f001 fb9c 	bl	3c4b0 <radio_tx_chain_delay_get>
   3ad78:	442c      	add	r4, r5
   3ad7a:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   3ad7c:	1a20      	subs	r0, r4, r0
   3ad7e:	f001 fdbd 	bl	3c8fc <radio_tmr_hcto_configure>
}
   3ad82:	b003      	add	sp, #12
   3ad84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   3ad88:	f001 bdf2 	b.w	3c970 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   3ad8c:	4a17      	ldr	r2, [pc, #92]	; (3adec <isr_tx+0xd0>)
   3ad8e:	4918      	ldr	r1, [pc, #96]	; (3adf0 <isr_tx+0xd4>)
   3ad90:	4818      	ldr	r0, [pc, #96]	; (3adf4 <isr_tx+0xd8>)
   3ad92:	f240 4345 	movw	r3, #1093	; 0x445
   3ad96:	f007 ff59 	bl	42c4c <printk>
   3ad9a:	4040      	eors	r0, r0
   3ad9c:	f380 8811 	msr	BASEPRI, r0
   3ada0:	f04f 0003 	mov.w	r0, #3
   3ada4:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   3ada6:	4810      	ldr	r0, [pc, #64]	; (3ade8 <isr_tx+0xcc>)
   3ada8:	4629      	mov	r1, r5
   3adaa:	f001 faa3 	bl	3c2f4 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   3adae:	f7ff f9f9 	bl	3a1a4 <ull_filter_lll_rl_enabled>
   3adb2:	2800      	cmp	r0, #0
   3adb4:	d0d4      	beq.n	3ad60 <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   3adb6:	f10d 0007 	add.w	r0, sp, #7
   3adba:	f7ff f92d 	bl	3a018 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   3adbe:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   3adc0:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   3adc2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   3adc6:	f001 fe79 	bl	3cabc <radio_ar_configure>
   3adca:	e7c9      	b.n	3ad60 <isr_tx+0x44>
	LL_ASSERT(node_rx);
   3adcc:	4a07      	ldr	r2, [pc, #28]	; (3adec <isr_tx+0xd0>)
   3adce:	490a      	ldr	r1, [pc, #40]	; (3adf8 <isr_tx+0xdc>)
   3add0:	4808      	ldr	r0, [pc, #32]	; (3adf4 <isr_tx+0xd8>)
   3add2:	f240 4341 	movw	r3, #1089	; 0x441
   3add6:	f007 ff39 	bl	42c4c <printk>
   3adda:	4040      	eors	r0, r0
   3addc:	f380 8811 	msr	BASEPRI, r0
   3ade0:	f04f 0003 	mov.w	r0, #3
   3ade4:	df02      	svc	2
   3ade6:	e7ad      	b.n	3ad44 <isr_tx+0x28>
   3ade8:	0003b56d 	.word	0x0003b56d
   3adec:	0004aa98 	.word	0x0004aa98
   3adf0:	0004aaec 	.word	0x0004aaec
   3adf4:	0004a024 	.word	0x0004a024
   3adf8:	0004aae4 	.word	0x0004aae4

0003adfc <is_abort_cb>:
	if (next != curr) {
   3adfc:	4281      	cmp	r1, r0
{
   3adfe:	b508      	push	{r3, lr}
	if (next != curr) {
   3ae00:	d00e      	beq.n	3ae20 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   3ae02:	7a0b      	ldrb	r3, [r1, #8]
   3ae04:	07db      	lsls	r3, r3, #31
   3ae06:	d402      	bmi.n	3ae0e <is_abort_cb+0x12>
			return -ECANCELED;
   3ae08:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   3ae0c:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   3ae0e:	4b13      	ldr	r3, [pc, #76]	; (3ae5c <is_abort_cb+0x60>)
   3ae10:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   3ae12:	f7ff ff39 	bl	3ac88 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   3ae16:	2800      	cmp	r0, #0
   3ae18:	db0f      	blt.n	3ae3a <is_abort_cb+0x3e>
   3ae1a:	f06f 000a 	mvn.w	r0, #10
}
   3ae1e:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   3ae20:	7b0b      	ldrb	r3, [r1, #12]
   3ae22:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   3ae26:	690b      	ldr	r3, [r1, #16]
   3ae28:	781b      	ldrb	r3, [r3, #0]
   3ae2a:	f003 030f 	and.w	r3, r3, #15
		return 0;
   3ae2e:	2b01      	cmp	r3, #1
   3ae30:	bf14      	ite	ne
   3ae32:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   3ae36:	2000      	moveq	r0, #0
}
   3ae38:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   3ae3a:	4a09      	ldr	r2, [pc, #36]	; (3ae60 <is_abort_cb+0x64>)
   3ae3c:	4909      	ldr	r1, [pc, #36]	; (3ae64 <is_abort_cb+0x68>)
   3ae3e:	480a      	ldr	r0, [pc, #40]	; (3ae68 <is_abort_cb+0x6c>)
   3ae40:	f240 33fa 	movw	r3, #1018	; 0x3fa
   3ae44:	f007 ff02 	bl	42c4c <printk>
   3ae48:	4040      	eors	r0, r0
   3ae4a:	f380 8811 	msr	BASEPRI, r0
   3ae4e:	f04f 0003 	mov.w	r0, #3
   3ae52:	df02      	svc	2
   3ae54:	f06f 000a 	mvn.w	r0, #10
}
   3ae58:	bd08      	pop	{r3, pc}
   3ae5a:	bf00      	nop
   3ae5c:	0003b389 	.word	0x0003b389
   3ae60:	0004aa98 	.word	0x0004aa98
   3ae64:	0004aa48 	.word	0x0004aa48
   3ae68:	0004a024 	.word	0x0004a024

0003ae6c <abort_cb>:
{
   3ae6c:	b510      	push	{r4, lr}
	if (!prepare_param) {
   3ae6e:	b1d8      	cbz	r0, 3aea8 <abort_cb+0x3c>
	err = lll_hfclock_off();
   3ae70:	460c      	mov	r4, r1
   3ae72:	f7ff ff21 	bl	3acb8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3ae76:	2800      	cmp	r0, #0
   3ae78:	db04      	blt.n	3ae84 <abort_cb+0x18>
	lll_done(param);
   3ae7a:	4620      	mov	r0, r4
}
   3ae7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   3ae80:	f7ff bc96 	b.w	3a7b0 <lll_done>
	LL_ASSERT(err >= 0);
   3ae84:	4a0c      	ldr	r2, [pc, #48]	; (3aeb8 <abort_cb+0x4c>)
   3ae86:	490d      	ldr	r1, [pc, #52]	; (3aebc <abort_cb+0x50>)
   3ae88:	480d      	ldr	r0, [pc, #52]	; (3aec0 <abort_cb+0x54>)
   3ae8a:	f44f 6384 	mov.w	r3, #1056	; 0x420
   3ae8e:	f007 fedd 	bl	42c4c <printk>
   3ae92:	4040      	eors	r0, r0
   3ae94:	f380 8811 	msr	BASEPRI, r0
   3ae98:	f04f 0003 	mov.w	r0, #3
   3ae9c:	df02      	svc	2
	lll_done(param);
   3ae9e:	4620      	mov	r0, r4
}
   3aea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   3aea4:	f7ff bc84 	b.w	3a7b0 <lll_done>
		radio_isr_set(isr_abort, param);
   3aea8:	4806      	ldr	r0, [pc, #24]	; (3aec4 <abort_cb+0x58>)
   3aeaa:	f001 fa23 	bl	3c2f4 <radio_isr_set>
}
   3aeae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   3aeb2:	f001 bb0d 	b.w	3c4d0 <radio_disable>
   3aeb6:	bf00      	nop
   3aeb8:	0004aa98 	.word	0x0004aa98
   3aebc:	0004aa48 	.word	0x0004aa48
   3aec0:	0004a024 	.word	0x0004a024
   3aec4:	0003ad05 	.word	0x0003ad05

0003aec8 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   3aec8:	4b08      	ldr	r3, [pc, #32]	; (3aeec <lll_adv_init+0x24>)
   3aeca:	2204      	movs	r2, #4
{
   3aecc:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   3aece:	1898      	adds	r0, r3, r2
   3aed0:	2128      	movs	r1, #40	; 0x28
   3aed2:	f7f4 fcc9 	bl	2f868 <mem_init>
	MFIFO_INIT(pdu_free);
   3aed6:	4b06      	ldr	r3, [pc, #24]	; (3aef0 <lll_adv_init+0x28>)
   3aed8:	2400      	movs	r4, #0
   3aeda:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   3aedc:	2202      	movs	r2, #2
   3aede:	4621      	mov	r1, r4
   3aee0:	4804      	ldr	r0, [pc, #16]	; (3aef4 <lll_adv_init+0x2c>)
   3aee2:	f00d fdfd 	bl	48ae0 <z_impl_k_sem_init>
}
   3aee6:	4620      	mov	r0, r4
   3aee8:	bd10      	pop	{r4, pc}
   3aeea:	bf00      	nop
   3aeec:	20002aa0 	.word	0x20002aa0
   3aef0:	200007b8 	.word	0x200007b8
   3aef4:	20002b44 	.word	0x20002b44

0003aef8 <lll_adv_reset>:
   3aef8:	4b08      	ldr	r3, [pc, #32]	; (3af1c <lll_adv_reset+0x24>)
   3aefa:	2204      	movs	r2, #4
   3aefc:	b510      	push	{r4, lr}
   3aefe:	1898      	adds	r0, r3, r2
   3af00:	2128      	movs	r1, #40	; 0x28
   3af02:	f7f4 fcb1 	bl	2f868 <mem_init>
   3af06:	4b06      	ldr	r3, [pc, #24]	; (3af20 <lll_adv_reset+0x28>)
   3af08:	2400      	movs	r4, #0
   3af0a:	805c      	strh	r4, [r3, #2]
   3af0c:	2202      	movs	r2, #2
   3af0e:	4621      	mov	r1, r4
   3af10:	4804      	ldr	r0, [pc, #16]	; (3af24 <lll_adv_reset+0x2c>)
   3af12:	f00d fde5 	bl	48ae0 <z_impl_k_sem_init>
   3af16:	4620      	mov	r0, r4
   3af18:	bd10      	pop	{r4, pc}
   3af1a:	bf00      	nop
   3af1c:	20002aa0 	.word	0x20002aa0
   3af20:	200007b8 	.word	0x200007b8
   3af24:	20002b44 	.word	0x20002b44

0003af28 <lll_adv_data_init>:
{
   3af28:	b510      	push	{r4, lr}
   3af2a:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   3af2c:	4805      	ldr	r0, [pc, #20]	; (3af44 <lll_adv_data_init+0x1c>)
   3af2e:	f7f4 fccb 	bl	2f8c8 <mem_acquire>
	if (!p) {
   3af32:	b120      	cbz	r0, 3af3e <lll_adv_data_init+0x16>
   3af34:	4603      	mov	r3, r0
	p->len = 0U;
   3af36:	2000      	movs	r0, #0
   3af38:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   3af3a:	6063      	str	r3, [r4, #4]
}
   3af3c:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   3af3e:	f06f 000b 	mvn.w	r0, #11
}
   3af42:	bd10      	pop	{r4, pc}
   3af44:	20002aa0 	.word	0x20002aa0

0003af48 <lll_adv_data_reset>:
{
   3af48:	4603      	mov	r3, r0
	pdu->first = 0U;
   3af4a:	2000      	movs	r0, #0
   3af4c:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   3af4e:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   3af50:	6098      	str	r0, [r3, #8]
}
   3af52:	4770      	bx	lr

0003af54 <lll_adv_pdu_alloc_pdu_adv>:
{
   3af54:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   3af56:	4c34      	ldr	r4, [pc, #208]	; (3b028 <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   3af58:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   3af5a:	78e1      	ldrb	r1, [r4, #3]
   3af5c:	7823      	ldrb	r3, [r4, #0]
   3af5e:	4291      	cmp	r1, r2
   3af60:	d003      	beq.n	3af6a <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   3af62:	fb02 4303 	mla	r3, r2, r3, r4
   3af66:	685d      	ldr	r5, [r3, #4]
	if (p) {
   3af68:	b935      	cbnz	r5, 3af78 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   3af6a:	4830      	ldr	r0, [pc, #192]	; (3b02c <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   3af6c:	f7f4 fcac 	bl	2f8c8 <mem_acquire>
	if (p) {
   3af70:	4605      	mov	r5, r0
   3af72:	b1a0      	cbz	r0, 3af9e <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   3af74:	4628      	mov	r0, r5
   3af76:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   3af78:	482d      	ldr	r0, [pc, #180]	; (3b030 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   3af7a:	2200      	movs	r2, #0
   3af7c:	2300      	movs	r3, #0
   3af7e:	f006 fb5d 	bl	4163c <z_impl_k_sem_take>
		LL_ASSERT(!err);
   3af82:	bb38      	cbnz	r0, 3afd4 <lll_adv_pdu_alloc_pdu_adv+0x80>
	uint8_t _first = *first; /* Copy read-index */
   3af84:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   3af86:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   3af88:	7861      	ldrb	r1, [r4, #1]
   3af8a:	429a      	cmp	r2, r3
   3af8c:	d0f2      	beq.n	3af74 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   3af8e:	3301      	adds	r3, #1
   3af90:	b2db      	uxtb	r3, r3
		_first = 0U;
   3af92:	4299      	cmp	r1, r3
   3af94:	bf08      	it	eq
   3af96:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3af98:	70a3      	strb	r3, [r4, #2]
}
   3af9a:	4628      	mov	r0, r5
   3af9c:	bd38      	pop	{r3, r4, r5, pc}
   3af9e:	4824      	ldr	r0, [pc, #144]	; (3b030 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   3afa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3afa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3afa8:	f006 fb48 	bl	4163c <z_impl_k_sem_take>
	LL_ASSERT(!err);
   3afac:	bb00      	cbnz	r0, 3aff0 <lll_adv_pdu_alloc_pdu_adv+0x9c>
	uint8_t _first = *first; /* Copy read-index */
   3afae:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   3afb0:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   3afb2:	7822      	ldrb	r2, [r4, #0]
   3afb4:	7860      	ldrb	r0, [r4, #1]
   3afb6:	4299      	cmp	r1, r3
   3afb8:	d028      	beq.n	3b00c <lll_adv_pdu_alloc_pdu_adv+0xb8>
	mem = *((void **)(fifo + _first * size));
   3afba:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   3afbe:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   3afc0:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   3afc2:	b2db      	uxtb	r3, r3
		_first = 0U;
   3afc4:	4298      	cmp	r0, r3
   3afc6:	bf08      	it	eq
   3afc8:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3afca:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   3afcc:	b1f2      	cbz	r2, 3b00c <lll_adv_pdu_alloc_pdu_adv+0xb8>
   3afce:	4615      	mov	r5, r2
}
   3afd0:	4628      	mov	r0, r5
   3afd2:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   3afd4:	4a17      	ldr	r2, [pc, #92]	; (3b034 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   3afd6:	4918      	ldr	r1, [pc, #96]	; (3b038 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   3afd8:	4818      	ldr	r0, [pc, #96]	; (3b03c <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   3afda:	f240 1397 	movw	r3, #407	; 0x197
   3afde:	f007 fe35 	bl	42c4c <printk>
   3afe2:	4040      	eors	r0, r0
   3afe4:	f380 8811 	msr	BASEPRI, r0
   3afe8:	f04f 0003 	mov.w	r0, #3
   3afec:	df02      	svc	2
   3afee:	e7c9      	b.n	3af84 <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(!err);
   3aff0:	4a10      	ldr	r2, [pc, #64]	; (3b034 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   3aff2:	4911      	ldr	r1, [pc, #68]	; (3b038 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   3aff4:	4811      	ldr	r0, [pc, #68]	; (3b03c <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   3aff6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   3affa:	f007 fe27 	bl	42c4c <printk>
   3affe:	4040      	eors	r0, r0
   3b000:	f380 8811 	msr	BASEPRI, r0
   3b004:	f04f 0003 	mov.w	r0, #3
   3b008:	df02      	svc	2
   3b00a:	e7d0      	b.n	3afae <lll_adv_pdu_alloc_pdu_adv+0x5a>
	LL_ASSERT(p);
   3b00c:	4a09      	ldr	r2, [pc, #36]	; (3b034 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   3b00e:	490c      	ldr	r1, [pc, #48]	; (3b040 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   3b010:	480a      	ldr	r0, [pc, #40]	; (3b03c <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   3b012:	f240 13ad 	movw	r3, #429	; 0x1ad
   3b016:	f007 fe19 	bl	42c4c <printk>
   3b01a:	4040      	eors	r0, r0
   3b01c:	f380 8811 	msr	BASEPRI, r0
   3b020:	f04f 0003 	mov.w	r0, #3
   3b024:	df02      	svc	2
   3b026:	e7a5      	b.n	3af74 <lll_adv_pdu_alloc_pdu_adv+0x20>
   3b028:	200007b8 	.word	0x200007b8
   3b02c:	20002aa0 	.word	0x20002aa0
   3b030:	20002b44 	.word	0x20002b44
   3b034:	0004aa98 	.word	0x0004aa98
   3b038:	0004a1c0 	.word	0x0004a1c0
   3b03c:	0004a024 	.word	0x0004a024
   3b040:	0004ab00 	.word	0x0004ab00

0003b044 <lll_adv_pdu_alloc>:
{
   3b044:	b510      	push	{r4, lr}
	first = pdu->first;
   3b046:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   3b048:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   3b04a:	429a      	cmp	r2, r3
   3b04c:	d014      	beq.n	3b078 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   3b04e:	b2d4      	uxtb	r4, r2
   3b050:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   3b052:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   3b054:	4294      	cmp	r4, r2
   3b056:	d004      	beq.n	3b062 <lll_adv_pdu_alloc+0x1e>
			last++;
   3b058:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   3b05a:	7043      	strb	r3, [r0, #1]
			last++;
   3b05c:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   3b05e:	2b02      	cmp	r3, #2
   3b060:	d00e      	beq.n	3b080 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   3b062:	461a      	mov	r2, r3
	*idx = last;
   3b064:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   3b068:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   3b06a:	6860      	ldr	r0, [r4, #4]
	if (p) {
   3b06c:	b100      	cbz	r0, 3b070 <lll_adv_pdu_alloc+0x2c>
}
   3b06e:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   3b070:	f7ff ff70 	bl	3af54 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   3b074:	6060      	str	r0, [r4, #4]
}
   3b076:	bd10      	pop	{r4, pc}
		last++;
   3b078:	3301      	adds	r3, #1
   3b07a:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   3b07c:	2b02      	cmp	r3, #2
   3b07e:	d1f0      	bne.n	3b062 <lll_adv_pdu_alloc+0x1e>
{
   3b080:	2200      	movs	r2, #0
			last = 0U;
   3b082:	4613      	mov	r3, r2
   3b084:	e7ee      	b.n	3b064 <lll_adv_pdu_alloc+0x20>
   3b086:	bf00      	nop

0003b088 <lll_adv_pdu_latest_get>:
{
   3b088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   3b08a:	7802      	ldrb	r2, [r0, #0]
	if (first != pdu->last) {
   3b08c:	7843      	ldrb	r3, [r0, #1]
   3b08e:	4293      	cmp	r3, r2
{
   3b090:	4604      	mov	r4, r0
	if (first != pdu->last) {
   3b092:	d02a      	beq.n	3b0ea <lll_adv_pdu_latest_get+0x62>
		pdu_idx = first;
   3b094:	b2d5      	uxtb	r5, r2
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   3b096:	4a17      	ldr	r2, [pc, #92]	; (3b0f4 <lll_adv_pdu_latest_get+0x6c>)
   3b098:	460e      	mov	r6, r1
   3b09a:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   3b09c:	f892 c001 	ldrb.w	ip, [r2, #1]
	last = last + 1;
   3b0a0:	1c4b      	adds	r3, r1, #1
   3b0a2:	b2db      	uxtb	r3, r3
		last = 0U;
   3b0a4:	459c      	cmp	ip, r3
   3b0a6:	bf08      	it	eq
   3b0a8:	2300      	moveq	r3, #0
   3b0aa:	f892 c002 	ldrb.w	ip, [r2, #2]
   3b0ae:	eb00 0785 	add.w	r7, r0, r5, lsl #2
	if (last == first) {
   3b0b2:	459c      	cmp	ip, r3
		p = pdu->pdu[pdu_idx];
   3b0b4:	6878      	ldr	r0, [r7, #4]
   3b0b6:	d009      	beq.n	3b0cc <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   3b0b8:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   3b0bc:	fb0c 2101 	mla	r1, ip, r1, r2
   3b0c0:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   3b0c2:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   3b0c4:	480c      	ldr	r0, [pc, #48]	; (3b0f8 <lll_adv_pdu_latest_get+0x70>)
   3b0c6:	f006 fa93 	bl	415f0 <z_impl_k_sem_give>
			p = next;
   3b0ca:	2000      	movs	r0, #0
		first += 1U;
   3b0cc:	1c6b      	adds	r3, r5, #1
   3b0ce:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   3b0d0:	2b02      	cmp	r3, #2
   3b0d2:	bf0a      	itet	eq
   3b0d4:	2200      	moveq	r2, #0
	return (void *)pdu->pdu[first];
   3b0d6:	461a      	movne	r2, r3
			first = 0U;
   3b0d8:	4613      	moveq	r3, r2
		pdu->pdu[pdu_idx] = p;
   3b0da:	6078      	str	r0, [r7, #4]
		*is_modified = 1U;
   3b0dc:	2101      	movs	r1, #1
		pdu->first = first;
   3b0de:	7023      	strb	r3, [r4, #0]
	return (void *)pdu->pdu[first];
   3b0e0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
		*is_modified = 1U;
   3b0e4:	7031      	strb	r1, [r6, #0]
}
   3b0e6:	6860      	ldr	r0, [r4, #4]
   3b0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = pdu->pdu[pdu_idx];
   3b0ea:	461a      	mov	r2, r3
	return (void *)pdu->pdu[first];
   3b0ec:	eb04 0482 	add.w	r4, r4, r2, lsl #2
}
   3b0f0:	6860      	ldr	r0, [r4, #4]
   3b0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b0f4:	200007b8 	.word	0x200007b8
   3b0f8:	20002b44 	.word	0x20002b44

0003b0fc <chan_prepare.isra.0>:

static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   3b0fc:	b570      	push	{r4, r5, r6, lr}
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   3b0fe:	7a03      	ldrb	r3, [r0, #8]
   3b100:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   3b104:	4604      	mov	r4, r0
   3b106:	2b00      	cmp	r3, #0
   3b108:	fa93 f0a3 	rbit	r0, r3
   3b10c:	fab0 f080 	clz	r0, r0
   3b110:	bf08      	it	eq
   3b112:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   3b116:	b082      	sub	sp, #8
   3b118:	f100 0501 	add.w	r5, r0, #1
	LL_ASSERT(chan);
   3b11c:	d043      	beq.n	3b1a6 <chan_prepare.isra.0+0xaa>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   3b11e:	7a21      	ldrb	r1, [r4, #8]
   3b120:	1e5a      	subs	r2, r3, #1
   3b122:	4013      	ands	r3, r2
   3b124:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   3b128:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   3b12c:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   3b12e:	f7ff fbaf 	bl	3a890 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   3b132:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   3b134:	f10d 0107 	add.w	r1, sp, #7
   3b138:	f104 000c 	add.w	r0, r4, #12
   3b13c:	f88d 3007 	strb.w	r3, [sp, #7]
   3b140:	f7ff ffa2 	bl	3b088 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   3b144:	4605      	mov	r5, r0
   3b146:	2800      	cmp	r0, #0
   3b148:	d03e      	beq.n	3b1c8 <chan_prepare.isra.0+0xcc>

	radio_pkt_tx_set(pdu);
   3b14a:	4628      	mov	r0, r5
   3b14c:	f001 f9aa 	bl	3c4a4 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   3b150:	782b      	ldrb	r3, [r5, #0]
   3b152:	f003 030f 	and.w	r3, r3, #15
   3b156:	2b02      	cmp	r3, #2
   3b158:	d01d      	beq.n	3b196 <chan_prepare.isra.0+0x9a>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   3b15a:	f10d 0107 	add.w	r1, sp, #7
   3b15e:	f104 0018 	add.w	r0, r4, #24
   3b162:	f7ff ff91 	bl	3b088 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   3b166:	4606      	mov	r6, r0
   3b168:	2800      	cmp	r0, #0
   3b16a:	d03b      	beq.n	3b1e4 <chan_prepare.isra.0+0xe8>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   3b16c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3b170:	b95b      	cbnz	r3, 3b18a <chan_prepare.isra.0+0x8e>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   3b172:	4621      	mov	r1, r4
   3b174:	4822      	ldr	r0, [pc, #136]	; (3b200 <chan_prepare.isra.0+0x104>)
   3b176:	f001 f8bd 	bl	3c2f4 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   3b17a:	2096      	movs	r0, #150	; 0x96
   3b17c:	f001 fb1e 	bl	3c7bc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   3b180:	2000      	movs	r0, #0
   3b182:	f001 fa01 	bl	3c588 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   3b186:	b002      	add	sp, #8
   3b188:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   3b18a:	2206      	movs	r2, #6
   3b18c:	1ca9      	adds	r1, r5, #2
   3b18e:	1cb0      	adds	r0, r6, #2
   3b190:	f009 fe37 	bl	44e02 <memcpy>
   3b194:	e7ed      	b.n	3b172 <chan_prepare.isra.0+0x76>
		radio_isr_set(isr_done, lll);
   3b196:	481b      	ldr	r0, [pc, #108]	; (3b204 <chan_prepare.isra.0+0x108>)
   3b198:	4621      	mov	r1, r4
   3b19a:	f001 f8ab 	bl	3c2f4 <radio_isr_set>
		radio_switch_complete_and_disable();
   3b19e:	f001 fa9b 	bl	3c6d8 <radio_switch_complete_and_disable>
}
   3b1a2:	b002      	add	sp, #8
   3b1a4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   3b1a6:	4a18      	ldr	r2, [pc, #96]	; (3b208 <chan_prepare.isra.0+0x10c>)
   3b1a8:	4918      	ldr	r1, [pc, #96]	; (3b20c <chan_prepare.isra.0+0x110>)
   3b1aa:	4819      	ldr	r0, [pc, #100]	; (3b210 <chan_prepare.isra.0+0x114>)
   3b1ac:	f240 5337 	movw	r3, #1335	; 0x537
   3b1b0:	f007 fd4c 	bl	42c4c <printk>
   3b1b4:	4040      	eors	r0, r0
   3b1b6:	f380 8811 	msr	BASEPRI, r0
   3b1ba:	f04f 0003 	mov.w	r0, #3
   3b1be:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   3b1c0:	7a23      	ldrb	r3, [r4, #8]
   3b1c2:	f3c3 1302 	ubfx	r3, r3, #4, #3
   3b1c6:	e7aa      	b.n	3b11e <chan_prepare.isra.0+0x22>
	LL_ASSERT(pdu);
   3b1c8:	4a0f      	ldr	r2, [pc, #60]	; (3b208 <chan_prepare.isra.0+0x10c>)
   3b1ca:	4912      	ldr	r1, [pc, #72]	; (3b214 <chan_prepare.isra.0+0x118>)
   3b1cc:	4810      	ldr	r0, [pc, #64]	; (3b210 <chan_prepare.isra.0+0x114>)
   3b1ce:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   3b1d2:	f007 fd3b 	bl	42c4c <printk>
   3b1d6:	4040      	eors	r0, r0
   3b1d8:	f380 8811 	msr	BASEPRI, r0
   3b1dc:	f04f 0003 	mov.w	r0, #3
   3b1e0:	df02      	svc	2
   3b1e2:	e7b2      	b.n	3b14a <chan_prepare.isra.0+0x4e>
		LL_ASSERT(scan_pdu);
   3b1e4:	4a08      	ldr	r2, [pc, #32]	; (3b208 <chan_prepare.isra.0+0x10c>)
   3b1e6:	490c      	ldr	r1, [pc, #48]	; (3b218 <chan_prepare.isra.0+0x11c>)
   3b1e8:	4809      	ldr	r0, [pc, #36]	; (3b210 <chan_prepare.isra.0+0x114>)
   3b1ea:	f240 534a 	movw	r3, #1354	; 0x54a
   3b1ee:	f007 fd2d 	bl	42c4c <printk>
   3b1f2:	4040      	eors	r0, r0
   3b1f4:	f380 8811 	msr	BASEPRI, r0
   3b1f8:	f04f 0003 	mov.w	r0, #3
   3b1fc:	df02      	svc	2
   3b1fe:	e7b5      	b.n	3b16c <chan_prepare.isra.0+0x70>
   3b200:	0003ad1d 	.word	0x0003ad1d
   3b204:	0003b21d 	.word	0x0003b21d
   3b208:	0004aa98 	.word	0x0004aa98
   3b20c:	0004ab04 	.word	0x0004ab04
   3b210:	0004a024 	.word	0x0004a024
   3b214:	0004ab0c 	.word	0x0004ab0c
   3b218:	0004ab10 	.word	0x0004ab10

0003b21c <isr_done>:
{
   3b21c:	b510      	push	{r4, lr}
   3b21e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   3b220:	f7ff fb8c 	bl	3a93c <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   3b224:	7a23      	ldrb	r3, [r4, #8]
   3b226:	f003 0271 	and.w	r2, r3, #113	; 0x71
   3b22a:	2a01      	cmp	r2, #1
   3b22c:	d105      	bne.n	3b23a <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   3b22e:	f3c3 0242 	ubfx	r2, r3, #1, #3
   3b232:	f362 1306 	bfi	r3, r2, #4, #3
   3b236:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   3b238:	b2db      	uxtb	r3, r3
   3b23a:	f013 0f70 	tst.w	r3, #112	; 0x70
   3b23e:	d005      	beq.n	3b24c <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   3b240:	6863      	ldr	r3, [r4, #4]
   3b242:	b153      	cbz	r3, 3b25a <isr_done+0x3e>
   3b244:	f893 3020 	ldrb.w	r3, [r3, #32]
   3b248:	079b      	lsls	r3, r3, #30
   3b24a:	d506      	bpl.n	3b25a <isr_done+0x3e>
	radio_filter_disable();
   3b24c:	f001 fa84 	bl	3c758 <radio_filter_disable>
	lll_isr_cleanup(param);
   3b250:	4620      	mov	r0, r4
}
   3b252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   3b256:	f7ff bb7f 	b.w	3a958 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   3b25a:	4620      	mov	r0, r4
   3b25c:	f7ff ff4e 	bl	3b0fc <chan_prepare.isra.0>
		radio_tx_enable();
   3b260:	f001 f930 	bl	3c4c4 <radio_tx_enable>
}
   3b264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   3b268:	f001 bb82 	b.w	3c970 <radio_tmr_end_capture>

0003b26c <prepare_cb>:
{
   3b26c:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   3b26e:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   3b270:	6863      	ldr	r3, [r4, #4]
{
   3b272:	b083      	sub	sp, #12
   3b274:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   3b276:	2b00      	cmp	r3, #0
   3b278:	d16d      	bne.n	3b356 <prepare_cb+0xea>
	radio_reset();
   3b27a:	f001 f87d 	bl	3c378 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   3b27e:	2000      	movs	r0, #0
   3b280:	f001 f8ae 	bl	3c3e0 <radio_tx_power_set>
	radio_phy_set(0, 0);
   3b284:	2100      	movs	r1, #0
   3b286:	4608      	mov	r0, r1
   3b288:	f001 f89a 	bl	3c3c0 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   3b28c:	2200      	movs	r2, #0
   3b28e:	2125      	movs	r1, #37	; 0x25
   3b290:	2008      	movs	r0, #8
   3b292:	f001 f8db 	bl	3c44c <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   3b296:	4b35      	ldr	r3, [pc, #212]	; (3b36c <prepare_cb+0x100>)
   3b298:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   3b29a:	a801      	add	r0, sp, #4
   3b29c:	f001 f8be 	bl	3c41c <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   3b2a0:	4933      	ldr	r1, [pc, #204]	; (3b370 <prepare_cb+0x104>)
   3b2a2:	f240 605b 	movw	r0, #1627	; 0x65b
   3b2a6:	f001 f951 	bl	3c54c <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   3b2aa:	7a23      	ldrb	r3, [r4, #8]
   3b2ac:	f3c3 0242 	ubfx	r2, r3, #1, #3
   3b2b0:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   3b2b4:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   3b2b6:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   3b2b8:	f7ff ff20 	bl	3b0fc <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   3b2bc:	f7fe ff72 	bl	3a1a4 <ull_filter_lll_rl_enabled>
   3b2c0:	bb98      	cbnz	r0, 3b32a <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   3b2c2:	7a63      	ldrb	r3, [r4, #9]
   3b2c4:	079b      	lsls	r3, r3, #30
   3b2c6:	d127      	bne.n	3b318 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   3b2c8:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   3b2ca:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   3b2cc:	4638      	mov	r0, r7
   3b2ce:	f7ff fac5 	bl	3a85c <lll_event_offset_get>
   3b2d2:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   3b2d4:	686a      	ldr	r2, [r5, #4]
   3b2d6:	f106 0109 	add.w	r1, r6, #9
   3b2da:	2001      	movs	r0, #1
   3b2dc:	f001 fa7a 	bl	3c7d4 <radio_tmr_start>
	radio_tmr_end_capture();
   3b2e0:	f001 fb46 	bl	3c970 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   3b2e4:	4620      	mov	r0, r4
   3b2e6:	f7f8 ff49 	bl	3417c <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   3b2ea:	1c81      	adds	r1, r0, #2
   3b2ec:	4632      	mov	r2, r6
   3b2ee:	b2c9      	uxtb	r1, r1
   3b2f0:	4638      	mov	r0, r7
   3b2f2:	f7ff fabd 	bl	3a870 <lll_preempt_calc>
   3b2f6:	b930      	cbnz	r0, 3b306 <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   3b2f8:	4620      	mov	r0, r4
   3b2fa:	f7ff fa57 	bl	3a7ac <lll_prepare_done>
		LL_ASSERT(!ret);
   3b2fe:	b9d0      	cbnz	r0, 3b336 <prepare_cb+0xca>
}
   3b300:	2000      	movs	r0, #0
   3b302:	b003      	add	sp, #12
   3b304:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   3b306:	481b      	ldr	r0, [pc, #108]	; (3b374 <prepare_cb+0x108>)
   3b308:	4621      	mov	r1, r4
   3b30a:	f000 fff3 	bl	3c2f4 <radio_isr_set>
		radio_disable();
   3b30e:	f001 f8df 	bl	3c4d0 <radio_disable>
}
   3b312:	2000      	movs	r0, #0
   3b314:	b003      	add	sp, #12
   3b316:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   3b318:	2001      	movs	r0, #1
   3b31a:	f7fe fbc7 	bl	39aac <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   3b31e:	7841      	ldrb	r1, [r0, #1]
   3b320:	1c82      	adds	r2, r0, #2
   3b322:	7800      	ldrb	r0, [r0, #0]
   3b324:	f001 f9f8 	bl	3c718 <radio_filter_configure>
   3b328:	e7ce      	b.n	3b2c8 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   3b32a:	7a60      	ldrb	r0, [r4, #9]
   3b32c:	f010 0003 	ands.w	r0, r0, #3
   3b330:	bf18      	it	ne
   3b332:	2001      	movne	r0, #1
   3b334:	e7f1      	b.n	3b31a <prepare_cb+0xae>
		LL_ASSERT(!ret);
   3b336:	4a10      	ldr	r2, [pc, #64]	; (3b378 <prepare_cb+0x10c>)
   3b338:	4910      	ldr	r1, [pc, #64]	; (3b37c <prepare_cb+0x110>)
   3b33a:	4811      	ldr	r0, [pc, #68]	; (3b380 <prepare_cb+0x114>)
   3b33c:	f240 33d1 	movw	r3, #977	; 0x3d1
   3b340:	f007 fc84 	bl	42c4c <printk>
   3b344:	4040      	eors	r0, r0
   3b346:	f380 8811 	msr	BASEPRI, r0
   3b34a:	f04f 0003 	mov.w	r0, #3
   3b34e:	df02      	svc	2
}
   3b350:	2000      	movs	r0, #0
   3b352:	b003      	add	sp, #12
   3b354:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   3b356:	f893 3020 	ldrb.w	r3, [r3, #32]
   3b35a:	079a      	lsls	r2, r3, #30
   3b35c:	d08d      	beq.n	3b27a <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   3b35e:	4809      	ldr	r0, [pc, #36]	; (3b384 <prepare_cb+0x118>)
   3b360:	4621      	mov	r1, r4
   3b362:	f000 ffc7 	bl	3c2f4 <radio_isr_set>
		radio_disable();
   3b366:	f001 f8b3 	bl	3c4d0 <radio_disable>
		return 0;
   3b36a:	e7c9      	b.n	3b300 <prepare_cb+0x94>
   3b36c:	8e89bed6 	.word	0x8e89bed6
   3b370:	00555555 	.word	0x00555555
   3b374:	0003ad05 	.word	0x0003ad05
   3b378:	0004aa98 	.word	0x0004aa98
   3b37c:	0004a2bc 	.word	0x0004a2bc
   3b380:	0004a024 	.word	0x0004a024
   3b384:	0003a9e9 	.word	0x0003a9e9

0003b388 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   3b388:	68c3      	ldr	r3, [r0, #12]
{
   3b38a:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   3b38c:	681e      	ldr	r6, [r3, #0]
{
   3b38e:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   3b390:	f7f5 fd82 	bl	30e98 <ticker_ticks_now_get>
   3b394:	4605      	mov	r5, r0
   3b396:	4630      	mov	r0, r6
   3b398:	f7ff fa60 	bl	3a85c <lll_event_offset_get>
	p->remainder = 0;
   3b39c:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   3b39e:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   3b3a0:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   3b3a4:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   3b3a6:	4620      	mov	r0, r4
}
   3b3a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   3b3ac:	f7ff bf5e 	b.w	3b26c <prepare_cb>

0003b3b0 <lll_adv_prepare>:
{
   3b3b0:	b510      	push	{r4, lr}
   3b3b2:	b082      	sub	sp, #8
   3b3b4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   3b3b6:	f7ff fc67 	bl	3ac88 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   3b3ba:	2800      	cmp	r0, #0
   3b3bc:	db1a      	blt.n	3b3f4 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   3b3be:	4a14      	ldr	r2, [pc, #80]	; (3b410 <lll_adv_prepare+0x60>)
   3b3c0:	4914      	ldr	r1, [pc, #80]	; (3b414 <lll_adv_prepare+0x64>)
   3b3c2:	4815      	ldr	r0, [pc, #84]	; (3b418 <lll_adv_prepare+0x68>)
   3b3c4:	9400      	str	r4, [sp, #0]
   3b3c6:	2300      	movs	r3, #0
   3b3c8:	f7f8 fa72 	bl	338b0 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   3b3cc:	b108      	cbz	r0, 3b3d2 <lll_adv_prepare+0x22>
   3b3ce:	3077      	adds	r0, #119	; 0x77
   3b3d0:	d101      	bne.n	3b3d6 <lll_adv_prepare+0x26>
}
   3b3d2:	b002      	add	sp, #8
   3b3d4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   3b3d6:	4a11      	ldr	r2, [pc, #68]	; (3b41c <lll_adv_prepare+0x6c>)
   3b3d8:	4911      	ldr	r1, [pc, #68]	; (3b420 <lll_adv_prepare+0x70>)
   3b3da:	4812      	ldr	r0, [pc, #72]	; (3b424 <lll_adv_prepare+0x74>)
   3b3dc:	f240 239d 	movw	r3, #669	; 0x29d
   3b3e0:	f007 fc34 	bl	42c4c <printk>
   3b3e4:	4040      	eors	r0, r0
   3b3e6:	f380 8811 	msr	BASEPRI, r0
   3b3ea:	f04f 0003 	mov.w	r0, #3
   3b3ee:	df02      	svc	2
}
   3b3f0:	b002      	add	sp, #8
   3b3f2:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   3b3f4:	4a09      	ldr	r2, [pc, #36]	; (3b41c <lll_adv_prepare+0x6c>)
   3b3f6:	490c      	ldr	r1, [pc, #48]	; (3b428 <lll_adv_prepare+0x78>)
   3b3f8:	480a      	ldr	r0, [pc, #40]	; (3b424 <lll_adv_prepare+0x74>)
   3b3fa:	f240 239a 	movw	r3, #666	; 0x29a
   3b3fe:	f007 fc25 	bl	42c4c <printk>
   3b402:	4040      	eors	r0, r0
   3b404:	f380 8811 	msr	BASEPRI, r0
   3b408:	f04f 0003 	mov.w	r0, #3
   3b40c:	df02      	svc	2
   3b40e:	e7d6      	b.n	3b3be <lll_adv_prepare+0xe>
   3b410:	0003b26d 	.word	0x0003b26d
   3b414:	0003ae6d 	.word	0x0003ae6d
   3b418:	0003adfd 	.word	0x0003adfd
   3b41c:	0004aa98 	.word	0x0004aa98
   3b420:	0004ab1c 	.word	0x0004ab1c
   3b424:	0004a024 	.word	0x0004a024
   3b428:	0004aa48 	.word	0x0004aa48

0003b42c <lll_adv_scan_req_check>:
{
   3b42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   3b430:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   3b434:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b438:	f01c 0f01 	tst.w	ip, #1
{
   3b43c:	460f      	mov	r7, r1
   3b43e:	4616      	mov	r6, r2
   3b440:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b442:	d009      	beq.n	3b458 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   3b444:	f1b8 0f00 	cmp.w	r8, #0
   3b448:	d016      	beq.n	3b478 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   3b44a:	783b      	ldrb	r3, [r7, #0]
   3b44c:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   3b450:	d019      	beq.n	3b486 <lll_adv_scan_req_check+0x5a>
{
   3b452:	2000      	movs	r0, #0
}
   3b454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b458:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   3b45a:	f811 0b02 	ldrb.w	r0, [r1], #2
   3b45e:	9a07      	ldr	r2, [sp, #28]
   3b460:	f3c0 1080 	ubfx	r0, r0, #6, #1
   3b464:	f7fe fe64 	bl	3a130 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   3b468:	2800      	cmp	r0, #0
   3b46a:	d1ee      	bne.n	3b44a <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   3b46c:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   3b46e:	07db      	lsls	r3, r3, #31
   3b470:	d5ef      	bpl.n	3b452 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   3b472:	f1b8 0f00 	cmp.w	r8, #0
   3b476:	d1e8      	bne.n	3b44a <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b478:	9b07      	ldr	r3, [sp, #28]
   3b47a:	7818      	ldrb	r0, [r3, #0]
   3b47c:	f7fe fe28 	bl	3a0d0 <ull_filter_lll_irk_in_fal>
   3b480:	2800      	cmp	r0, #0
   3b482:	d1e2      	bne.n	3b44a <lll_adv_scan_req_check+0x1e>
   3b484:	e7e5      	b.n	3b452 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   3b486:	2206      	movs	r2, #6
   3b488:	f107 0108 	add.w	r1, r7, #8
   3b48c:	4628      	mov	r0, r5
   3b48e:	f009 fca8 	bl	44de2 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   3b492:	fab0 f080 	clz	r0, r0
   3b496:	0940      	lsrs	r0, r0, #5
}
   3b498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003b49c <lll_adv_connect_ind_check>:
{
   3b49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b4a0:	461f      	mov	r7, r3
	if (tgt_addr) {
   3b4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   3b4a4:	f89d 9020 	ldrb.w	r9, [sp, #32]
   3b4a8:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   3b4ac:	4605      	mov	r5, r0
   3b4ae:	460c      	mov	r4, r1
   3b4b0:	4690      	mov	r8, r2
	if (tgt_addr) {
   3b4b2:	b9fb      	cbnz	r3, 3b4f4 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   3b4b4:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b4b6:	079a      	lsls	r2, r3, #30
   3b4b8:	d507      	bpl.n	3b4ca <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   3b4ba:	b1a6      	cbz	r6, 3b4e6 <lll_adv_connect_ind_check+0x4a>
	return (tx_addr == sr->rx_addr) &&
   3b4bc:	7823      	ldrb	r3, [r4, #0]
   3b4be:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   3b4c2:	d03a      	beq.n	3b53a <lll_adv_connect_ind_check+0x9e>
   3b4c4:	2000      	movs	r0, #0
}
   3b4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   3b4ca:	f811 0b02 	ldrb.w	r0, [r1], #2
   3b4ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3b4d0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   3b4d4:	f7fe fe2c 	bl	3a130 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   3b4d8:	2800      	cmp	r0, #0
   3b4da:	d1ef      	bne.n	3b4bc <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   3b4dc:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   3b4de:	079b      	lsls	r3, r3, #30
   3b4e0:	d5f0      	bpl.n	3b4c4 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   3b4e2:	2e00      	cmp	r6, #0
   3b4e4:	d1ea      	bne.n	3b4bc <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3b4e8:	7818      	ldrb	r0, [r3, #0]
   3b4ea:	f7fe fdf1 	bl	3a0d0 <ull_filter_lll_irk_in_fal>
   3b4ee:	2800      	cmp	r0, #0
   3b4f0:	d1e4      	bne.n	3b4bc <lll_adv_connect_ind_check+0x20>
   3b4f2:	e7e7      	b.n	3b4c4 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   3b4f4:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   3b4f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3b4f8:	f81a 0b02 	ldrb.w	r0, [sl], #2
   3b4fc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   3b500:	4651      	mov	r1, sl
   3b502:	f7fe fe15 	bl	3a130 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   3b506:	2800      	cmp	r0, #0
   3b508:	d0dc      	beq.n	3b4c4 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == sr->rx_addr) &&
   3b50a:	7823      	ldrb	r3, [r4, #0]
   3b50c:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   3b510:	d1d8      	bne.n	3b4c4 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   3b512:	4638      	mov	r0, r7
   3b514:	2206      	movs	r2, #6
   3b516:	f104 0108 	add.w	r1, r4, #8
   3b51a:	f009 fc62 	bl	44de2 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   3b51e:	2800      	cmp	r0, #0
   3b520:	d1d0      	bne.n	3b4c4 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   3b522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3b524:	7818      	ldrb	r0, [r3, #0]
static inline bool isr_rx_ci_tgta_check(struct lll_adv *lll,
					uint8_t rx_addr, uint8_t *tgt_addr,
					struct pdu_adv *ci, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   3b526:	28ff      	cmp	r0, #255	; 0xff
   3b528:	d011      	beq.n	3b54e <lll_adv_connect_ind_check+0xb2>
   3b52a:	7aab      	ldrb	r3, [r5, #10]
   3b52c:	2bff      	cmp	r3, #255	; 0xff
   3b52e:	d00e      	beq.n	3b54e <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   3b530:	1ac0      	subs	r0, r0, r3
   3b532:	fab0 f080 	clz	r0, r0
   3b536:	0940      	lsrs	r0, r0, #5
   3b538:	e7c5      	b.n	3b4c6 <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   3b53a:	2206      	movs	r2, #6
   3b53c:	f104 0108 	add.w	r1, r4, #8
   3b540:	4638      	mov	r0, r7
   3b542:	f009 fc4e 	bl	44de2 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   3b546:	fab0 f080 	clz	r0, r0
   3b54a:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   3b54c:	e7bb      	b.n	3b4c6 <lll_adv_connect_ind_check+0x2a>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (rx_addr == ci->tx_addr) &&
   3b54e:	7823      	ldrb	r3, [r4, #0]
   3b550:	f3c3 1380 	ubfx	r3, r3, #6, #1
   3b554:	454b      	cmp	r3, r9
   3b556:	d1b5      	bne.n	3b4c4 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   3b558:	9809      	ldr	r0, [sp, #36]	; 0x24
   3b55a:	2206      	movs	r2, #6
   3b55c:	4651      	mov	r1, sl
   3b55e:	f009 fc40 	bl	44de2 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   3b562:	fab0 f080 	clz	r0, r0
   3b566:	0940      	lsrs	r0, r0, #5
   3b568:	e7ad      	b.n	3b4c6 <lll_adv_connect_ind_check+0x2a>
   3b56a:	bf00      	nop

0003b56c <isr_rx>:
{
   3b56c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3b570:	b08b      	sub	sp, #44	; 0x2c
   3b572:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   3b574:	f000 ffd6 	bl	3c524 <radio_is_done>
	if (trx_done) {
   3b578:	b2c0      	uxtb	r0, r0
   3b57a:	b950      	cbnz	r0, 3b592 <isr_rx+0x26>
	lll_isr_status_reset();
   3b57c:	f7ff f9de 	bl	3a93c <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   3b580:	487c      	ldr	r0, [pc, #496]	; (3b774 <isr_rx+0x208>)
   3b582:	4621      	mov	r1, r4
   3b584:	f000 feb6 	bl	3c2f4 <radio_isr_set>
}
   3b588:	b00b      	add	sp, #44	; 0x2c
   3b58a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   3b58e:	f000 bf9f 	b.w	3c4d0 <radio_disable>
		crc_ok = radio_crc_is_valid();
   3b592:	f000 ffe7 	bl	3c564 <radio_crc_is_valid>
   3b596:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   3b598:	f001 f8f0 	bl	3c77c <radio_filter_has_match>
   3b59c:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   3b59e:	f001 f8f7 	bl	3c790 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   3b5a2:	f001 fadb 	bl	3cb5c <radio_ar_has_match>
   3b5a6:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   3b5a8:	f001 fabc 	bl	3cb24 <radio_ar_match_get>
	if (crc_ok) {
   3b5ac:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   3b5ae:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   3b5b0:	f001 f8a8 	bl	3c704 <radio_rssi_is_ready>
	lll_isr_status_reset();
   3b5b4:	f7ff f9c2 	bl	3a93c <lll_isr_status_reset>
	if (crc_ok) {
   3b5b8:	2d00      	cmp	r5, #0
   3b5ba:	d0e1      	beq.n	3b580 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   3b5bc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   3b5c0:	d17a      	bne.n	3b6b8 <isr_rx+0x14c>
   3b5c2:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   3b5c4:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   3b5c6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   3b5ca:	f7f7 fe5f 	bl	3328c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3b5ce:	4605      	mov	r5, r0
   3b5d0:	2800      	cmp	r0, #0
   3b5d2:	f000 80a2 	beq.w	3b71a <isr_rx+0x1ae>
   3b5d6:	7b23      	ldrb	r3, [r4, #12]
   3b5d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   3b5dc:	f105 011c 	add.w	r1, r5, #28
   3b5e0:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   3b5e2:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   3b5e4:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   3b5e8:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   3b5ec:	f000 0c0f 	and.w	ip, r0, #15
   3b5f0:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   3b5f4:	bf08      	it	eq
   3b5f6:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   3b5fa:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   3b5fe:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   3b602:	7f28      	ldrb	r0, [r5, #28]
   3b604:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   3b608:	bf18      	it	ne
   3b60a:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   3b60e:	2803      	cmp	r0, #3
   3b610:	d05a      	beq.n	3b6c8 <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   3b612:	2805      	cmp	r0, #5
   3b614:	d1b4      	bne.n	3b580 <isr_rx+0x14>
   3b616:	7f68      	ldrb	r0, [r5, #29]
   3b618:	2822      	cmp	r0, #34	; 0x22
   3b61a:	d1b1      	bne.n	3b580 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   3b61c:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   3b61e:	2800      	cmp	r0, #0
   3b620:	d0ae      	beq.n	3b580 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   3b622:	f890 0020 	ldrb.w	r0, [r0, #32]
   3b626:	0780      	lsls	r0, r0, #30
   3b628:	d4aa      	bmi.n	3b580 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   3b62a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   3b62e:	9003      	str	r0, [sp, #12]
   3b630:	e9cd 8901 	strd	r8, r9, [sp, #4]
   3b634:	9700      	str	r7, [sp, #0]
   3b636:	4620      	mov	r0, r4
   3b638:	f7ff ff30 	bl	3b49c <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   3b63c:	2800      	cmp	r0, #0
   3b63e:	d09f      	beq.n	3b580 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   3b640:	2004      	movs	r0, #4
   3b642:	f7f7 fe23 	bl	3328c <ull_pdu_rx_alloc_peek>
		if (!rx) {
   3b646:	2800      	cmp	r0, #0
   3b648:	d09a      	beq.n	3b580 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   3b64a:	484b      	ldr	r0, [pc, #300]	; (3b778 <isr_rx+0x20c>)
   3b64c:	4621      	mov	r1, r4
   3b64e:	f000 fe51 	bl	3c2f4 <radio_isr_set>
		radio_disable();
   3b652:	f000 ff3d 	bl	3c4d0 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   3b656:	f000 ff5b 	bl	3c510 <radio_is_ready>
   3b65a:	2800      	cmp	r0, #0
   3b65c:	d14f      	bne.n	3b6fe <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   3b65e:	6862      	ldr	r2, [r4, #4]
   3b660:	f892 3020 	ldrb.w	r3, [r2, #32]
   3b664:	f043 0301 	orr.w	r3, r3, #1
   3b668:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   3b66c:	f7f7 fe2c 	bl	332c8 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3b670:	2216      	movs	r2, #22
		rx->hdr.handle = 0xffff;
   3b672:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3b676:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   3b678:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   3b67a:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   3b67c:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   3b67e:	f001 f92b 	bl	3c8d8 <radio_tmr_start_get>
   3b682:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   3b684:	f001 f97c 	bl	3c980 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   3b688:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   3b68a:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   3b68c:	4608      	mov	r0, r1
   3b68e:	f000 ff13 	bl	3c4b8 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   3b692:	1a24      	subs	r4, r4, r0
   3b694:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   3b696:	b1ae      	cbz	r6, 3b6c4 <isr_rx+0x158>
   3b698:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   3b69c:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   3b69e:	f7f7 fe13 	bl	332c8 <ull_pdu_rx_alloc>
   3b6a2:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   3b6a4:	4629      	mov	r1, r5
   3b6a6:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   3b6a8:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   3b6aa:	f7f7 fe23 	bl	332f4 <ull_rx_put>
		ull_rx_sched();
   3b6ae:	f7f7 fe31 	bl	33314 <ull_rx_sched>
}
   3b6b2:	b00b      	add	sp, #44	; 0x2c
   3b6b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   3b6b8:	fa5f f088 	uxtb.w	r0, r8
   3b6bc:	f7fe fcb6 	bl	3a02c <ull_filter_lll_rl_irk_idx>
   3b6c0:	4603      	mov	r3, r0
   3b6c2:	e77f      	b.n	3b5c4 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   3b6c4:	23ff      	movs	r3, #255	; 0xff
   3b6c6:	e7e9      	b.n	3b69c <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   3b6c8:	7f68      	ldrb	r0, [r5, #29]
   3b6ca:	280c      	cmp	r0, #12
   3b6cc:	f47f af58 	bne.w	3b580 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   3b6d0:	f1b8 0f00 	cmp.w	r8, #0
   3b6d4:	f47f af54 	bne.w	3b580 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   3b6d8:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   3b6dc:	9001      	str	r0, [sp, #4]
   3b6de:	f8cd 9000 	str.w	r9, [sp]
   3b6e2:	4620      	mov	r0, r4
   3b6e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   3b6e8:	9105      	str	r1, [sp, #20]
   3b6ea:	f7ff fe9f 	bl	3b42c <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   3b6ee:	bb10      	cbnz	r0, 3b736 <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   3b6f0:	7f28      	ldrb	r0, [r5, #28]
   3b6f2:	9b07      	ldr	r3, [sp, #28]
   3b6f4:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   3b6f8:	f000 000f 	and.w	r0, r0, #15
   3b6fc:	e789      	b.n	3b612 <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   3b6fe:	4a1f      	ldr	r2, [pc, #124]	; (3b77c <isr_rx+0x210>)
   3b700:	491f      	ldr	r1, [pc, #124]	; (3b780 <isr_rx+0x214>)
   3b702:	4820      	ldr	r0, [pc, #128]	; (3b784 <isr_rx+0x218>)
   3b704:	f240 53da 	movw	r3, #1498	; 0x5da
   3b708:	f007 faa0 	bl	42c4c <printk>
   3b70c:	4040      	eors	r0, r0
   3b70e:	f380 8811 	msr	BASEPRI, r0
   3b712:	f04f 0003 	mov.w	r0, #3
   3b716:	df02      	svc	2
   3b718:	e7a1      	b.n	3b65e <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   3b71a:	4a18      	ldr	r2, [pc, #96]	; (3b77c <isr_rx+0x210>)
   3b71c:	491a      	ldr	r1, [pc, #104]	; (3b788 <isr_rx+0x21c>)
   3b71e:	4819      	ldr	r0, [pc, #100]	; (3b784 <isr_rx+0x218>)
   3b720:	f240 537a 	movw	r3, #1402	; 0x57a
   3b724:	f007 fa92 	bl	42c4c <printk>
   3b728:	4040      	eors	r0, r0
   3b72a:	f380 8811 	msr	BASEPRI, r0
   3b72e:	f04f 0003 	mov.w	r0, #3
   3b732:	df02      	svc	2
   3b734:	e74f      	b.n	3b5d6 <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   3b736:	480f      	ldr	r0, [pc, #60]	; (3b774 <isr_rx+0x208>)
   3b738:	4621      	mov	r1, r4
   3b73a:	f000 fddb 	bl	3c2f4 <radio_isr_set>
		radio_switch_complete_and_disable();
   3b73e:	f000 ffcb 	bl	3c6d8 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   3b742:	7e23      	ldrb	r3, [r4, #24]
   3b744:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   3b748:	69d8      	ldr	r0, [r3, #28]
   3b74a:	f000 feab 	bl	3c4a4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   3b74e:	f000 fedf 	bl	3c510 <radio_is_ready>
   3b752:	2800      	cmp	r0, #0
   3b754:	d0ad      	beq.n	3b6b2 <isr_rx+0x146>
   3b756:	4a09      	ldr	r2, [pc, #36]	; (3b77c <isr_rx+0x210>)
   3b758:	4909      	ldr	r1, [pc, #36]	; (3b780 <isr_rx+0x214>)
   3b75a:	480a      	ldr	r0, [pc, #40]	; (3b784 <isr_rx+0x218>)
   3b75c:	f240 5393 	movw	r3, #1427	; 0x593
   3b760:	f007 fa74 	bl	42c4c <printk>
   3b764:	4040      	eors	r0, r0
   3b766:	f380 8811 	msr	BASEPRI, r0
   3b76a:	f04f 0003 	mov.w	r0, #3
   3b76e:	df02      	svc	2
		if (!err) {
   3b770:	e79f      	b.n	3b6b2 <isr_rx+0x146>
   3b772:	bf00      	nop
   3b774:	0003b21d 	.word	0x0003b21d
   3b778:	0003ad05 	.word	0x0003ad05
   3b77c:	0004aa98 	.word	0x0004aa98
   3b780:	0004aaec 	.word	0x0004aaec
   3b784:	0004a024 	.word	0x0004a024
   3b788:	0004aae4 	.word	0x0004aae4

0003b78c <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   3b78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b78e:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   3b790:	f7ff f8d4 	bl	3a93c <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   3b794:	f7f7 fe78 	bl	33488 <ull_event_done_extra_get>
	LL_ASSERT(e);
   3b798:	4604      	mov	r4, r0
   3b79a:	2800      	cmp	r0, #0
   3b79c:	d036      	beq.n	3b80c <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   3b79e:	4922      	ldr	r1, [pc, #136]	; (3b828 <isr_done+0x9c>)
   3b7a0:	79a2      	ldrb	r2, [r4, #6]
   3b7a2:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   3b7a4:	4b21      	ldr	r3, [pc, #132]	; (3b82c <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   3b7a6:	f360 0200 	bfi	r2, r0, #0, #1
   3b7aa:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   3b7ac:	4a20      	ldr	r2, [pc, #128]	; (3b830 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   3b7ae:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   3b7b0:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   3b7b2:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   3b7b4:	2101      	movs	r1, #1
   3b7b6:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   3b7b8:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   3b7ba:	b11b      	cbz	r3, 3b7c4 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   3b7bc:	f995 301d 	ldrsb.w	r3, [r5, #29]
   3b7c0:	2b00      	cmp	r3, #0
   3b7c2:	db04      	blt.n	3b7ce <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   3b7c4:	4628      	mov	r0, r5
}
   3b7c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   3b7ca:	f7ff b8c5 	b.w	3a958 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   3b7ce:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   3b7d2:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   3b7d6:	2b02      	cmp	r3, #2
   3b7d8:	d016      	beq.n	3b808 <isr_done+0x7c>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   3b7da:	2b04      	cmp	r3, #4
   3b7dc:	bf14      	ite	ne
   3b7de:	2728      	movne	r7, #40	; 0x28
   3b7e0:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   3b7e4:	f001 f8b8 	bl	3c958 <radio_tmr_aa_restore>
   3b7e8:	4606      	mov	r6, r0
   3b7ea:	f001 f8bb 	bl	3c964 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   3b7ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   3b7f0:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   3b7f2:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   3b7f4:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   3b7f8:	2300      	movs	r3, #0
   3b7fa:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   3b7fc:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   3b7fe:	4628      	mov	r0, r5
}
   3b800:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   3b804:	f7ff b8a8 	b.w	3a958 <lll_isr_cleanup>
	switch (phy) {
   3b808:	2718      	movs	r7, #24
   3b80a:	e7eb      	b.n	3b7e4 <isr_done+0x58>
	LL_ASSERT(e);
   3b80c:	4a09      	ldr	r2, [pc, #36]	; (3b834 <isr_done+0xa8>)
   3b80e:	490a      	ldr	r1, [pc, #40]	; (3b838 <isr_done+0xac>)
   3b810:	480a      	ldr	r0, [pc, #40]	; (3b83c <isr_done+0xb0>)
   3b812:	f240 3317 	movw	r3, #791	; 0x317
   3b816:	f007 fa19 	bl	42c4c <printk>
   3b81a:	4040      	eors	r0, r0
   3b81c:	f380 8811 	msr	BASEPRI, r0
   3b820:	f04f 0003 	mov.w	r0, #3
   3b824:	df02      	svc	2
   3b826:	e7ba      	b.n	3b79e <isr_done+0x12>
   3b828:	20003c75 	.word	0x20003c75
   3b82c:	20003b66 	.word	0x20003b66
   3b830:	20003c76 	.word	0x20003c76
   3b834:	0004ab30 	.word	0x0004ab30
   3b838:	0004a3bc 	.word	0x0004a3bc
   3b83c:	0004a024 	.word	0x0004a024

0003b840 <lll_conn_init>:
{
   3b840:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   3b842:	f000 fe99 	bl	3c578 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3b846:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   3b848:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3b84a:	2101      	movs	r1, #1
   3b84c:	f361 0201 	bfi	r2, r1, #0, #2
}
   3b850:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3b852:	701a      	strb	r2, [r3, #0]
}
   3b854:	bd08      	pop	{r3, pc}
   3b856:	bf00      	nop

0003b858 <lll_conn_reset>:
}
   3b858:	2000      	movs	r0, #0
   3b85a:	4770      	bx	lr

0003b85c <lll_conn_flush>:
}
   3b85c:	4770      	bx	lr
   3b85e:	bf00      	nop

0003b860 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   3b860:	4805      	ldr	r0, [pc, #20]	; (3b878 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   3b862:	4906      	ldr	r1, [pc, #24]	; (3b87c <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   3b864:	4a06      	ldr	r2, [pc, #24]	; (3b880 <lll_conn_prepare_reset+0x20>)
{
   3b866:	b410      	push	{r4}
	trx_cnt = 0U;
   3b868:	2300      	movs	r3, #0
   3b86a:	4c06      	ldr	r4, [pc, #24]	; (3b884 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   3b86c:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   3b86e:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   3b870:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   3b872:	8023      	strh	r3, [r4, #0]
}
   3b874:	bc10      	pop	{r4}
   3b876:	4770      	bx	lr
   3b878:	20003c75 	.word	0x20003c75
   3b87c:	20003c74 	.word	0x20003c74
   3b880:	20003c76 	.word	0x20003c76
   3b884:	20003b66 	.word	0x20003b66

0003b888 <lll_conn_abort_cb>:
{
   3b888:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   3b88a:	b1e8      	cbz	r0, 3b8c8 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   3b88c:	460d      	mov	r5, r1
   3b88e:	4604      	mov	r4, r0
   3b890:	f7ff fa12 	bl	3acb8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   3b894:	2800      	cmp	r0, #0
   3b896:	db0a      	blt.n	3b8ae <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   3b898:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   3b89a:	8923      	ldrh	r3, [r4, #8]
   3b89c:	8a51      	ldrh	r1, [r2, #18]
   3b89e:	3301      	adds	r3, #1
   3b8a0:	440b      	add	r3, r1
   3b8a2:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   3b8a4:	4628      	mov	r0, r5
}
   3b8a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   3b8aa:	f7fe bf81 	b.w	3a7b0 <lll_done>
	LL_ASSERT(err >= 0);
   3b8ae:	4a0a      	ldr	r2, [pc, #40]	; (3b8d8 <lll_conn_abort_cb+0x50>)
   3b8b0:	490a      	ldr	r1, [pc, #40]	; (3b8dc <lll_conn_abort_cb+0x54>)
   3b8b2:	480b      	ldr	r0, [pc, #44]	; (3b8e0 <lll_conn_abort_cb+0x58>)
   3b8b4:	23aa      	movs	r3, #170	; 0xaa
   3b8b6:	f007 f9c9 	bl	42c4c <printk>
   3b8ba:	4040      	eors	r0, r0
   3b8bc:	f380 8811 	msr	BASEPRI, r0
   3b8c0:	f04f 0003 	mov.w	r0, #3
   3b8c4:	df02      	svc	2
   3b8c6:	e7e7      	b.n	3b898 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   3b8c8:	4806      	ldr	r0, [pc, #24]	; (3b8e4 <lll_conn_abort_cb+0x5c>)
   3b8ca:	f000 fd13 	bl	3c2f4 <radio_isr_set>
}
   3b8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   3b8d2:	f000 bdfd 	b.w	3c4d0 <radio_disable>
   3b8d6:	bf00      	nop
   3b8d8:	0004ab30 	.word	0x0004ab30
   3b8dc:	0004aa48 	.word	0x0004aa48
   3b8e0:	0004a024 	.word	0x0004a024
   3b8e4:	0003b78d 	.word	0x0003b78d

0003b8e8 <lll_conn_rx_pkt_set>:
{
   3b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b8ea:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   3b8ec:	2001      	movs	r0, #1
   3b8ee:	f7f7 fccd 	bl	3328c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3b8f2:	4606      	mov	r6, r0
   3b8f4:	b360      	cbz	r0, 3b950 <lll_conn_rx_pkt_set+0x68>
	phy = lll->phy_rx;
   3b8f6:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   3b8fa:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   3b8fc:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   3b900:	2100      	movs	r1, #0
   3b902:	4620      	mov	r0, r4
   3b904:	f000 fd5c 	bl	3c3c0 <radio_phy_set>
	} else if (lll->enc_rx) {
   3b908:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   3b90c:	071b      	lsls	r3, r3, #28
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   3b90e:	ea4f 0244 	mov.w	r2, r4, lsl #1
	} else if (lll->enc_rx) {
   3b912:	d511      	bpl.n	3b938 <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   3b914:	1d39      	adds	r1, r7, #4
   3b916:	f042 0201 	orr.w	r2, r2, #1
   3b91a:	b2c9      	uxtb	r1, r1
   3b91c:	2008      	movs	r0, #8
   3b91e:	f000 fd95 	bl	3c44c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   3b922:	f106 021c 	add.w	r2, r6, #28
   3b926:	4621      	mov	r1, r4
   3b928:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   3b92c:	f001 f834 	bl	3c998 <radio_ccm_rx_pkt_set>
}
   3b930:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   3b934:	f000 bdb0 	b.w	3c498 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   3b938:	2008      	movs	r0, #8
   3b93a:	b2f9      	uxtb	r1, r7
   3b93c:	f042 0201 	orr.w	r2, r2, #1
   3b940:	f000 fd84 	bl	3c44c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   3b944:	f106 001c 	add.w	r0, r6, #28
}
   3b948:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   3b94c:	f000 bda4 	b.w	3c498 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   3b950:	4a06      	ldr	r2, [pc, #24]	; (3b96c <lll_conn_rx_pkt_set+0x84>)
   3b952:	4907      	ldr	r1, [pc, #28]	; (3b970 <lll_conn_rx_pkt_set+0x88>)
   3b954:	4807      	ldr	r0, [pc, #28]	; (3b974 <lll_conn_rx_pkt_set+0x8c>)
   3b956:	f240 235a 	movw	r3, #602	; 0x25a
   3b95a:	f007 f977 	bl	42c4c <printk>
   3b95e:	4040      	eors	r0, r0
   3b960:	f380 8811 	msr	BASEPRI, r0
   3b964:	f04f 0003 	mov.w	r0, #3
   3b968:	df02      	svc	2
   3b96a:	e7c4      	b.n	3b8f6 <lll_conn_rx_pkt_set+0xe>
   3b96c:	0004ab30 	.word	0x0004ab30
   3b970:	0004aae4 	.word	0x0004aae4
   3b974:	0004a024 	.word	0x0004a024

0003b978 <lll_conn_isr_tx>:
{
   3b978:	b538      	push	{r3, r4, r5, lr}
   3b97a:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   3b97c:	f7fe ffcc 	bl	3a918 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   3b980:	2096      	movs	r0, #150	; 0x96
   3b982:	f000 ff1b 	bl	3c7bc <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   3b986:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   3b98a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3b98e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   3b992:	f000 0007 	and.w	r0, r0, #7
   3b996:	f002 0207 	and.w	r2, r2, #7
   3b99a:	2100      	movs	r1, #0
   3b99c:	f000 fe3c 	bl	3c618 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   3b9a0:	4620      	mov	r0, r4
   3b9a2:	f7ff ffa1 	bl	3b8e8 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   3b9a6:	f000 fdb3 	bl	3c510 <radio_is_ready>
   3b9aa:	bb58      	cbnz	r0, 3ba04 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   3b9ac:	f000 ffee 	bl	3c98c <radio_tmr_tifs_base_get>
   3b9b0:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3b9b2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3b9b6:	2101      	movs	r1, #1
   3b9b8:	f000 0007 	and.w	r0, r0, #7
   3b9bc:	f000 fd7c 	bl	3c4b8 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   3b9c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   3b9c4:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3b9c8:	4405      	add	r5, r0
   3b9ca:	2b02      	cmp	r3, #2
   3b9cc:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   3b9d0:	d016      	beq.n	3ba00 <lll_conn_isr_tx+0x88>
		return 376;
   3b9d2:	2b04      	cmp	r3, #4
   3b9d4:	bf14      	ite	ne
   3b9d6:	2328      	movne	r3, #40	; 0x28
   3b9d8:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   3b9dc:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   3b9e0:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   3b9e4:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   3b9e8:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   3b9ea:	f000 fd61 	bl	3c4b0 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   3b9ee:	1a28      	subs	r0, r5, r0
   3b9f0:	f000 ff84 	bl	3c8fc <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   3b9f4:	4621      	mov	r1, r4
   3b9f6:	480a      	ldr	r0, [pc, #40]	; (3ba20 <lll_conn_isr_tx+0xa8>)
}
   3b9f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   3b9fc:	f000 bc7a 	b.w	3c2f4 <radio_isr_set>
	switch (phy) {
   3ba00:	2318      	movs	r3, #24
   3ba02:	e7eb      	b.n	3b9dc <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   3ba04:	4a07      	ldr	r2, [pc, #28]	; (3ba24 <lll_conn_isr_tx+0xac>)
   3ba06:	4908      	ldr	r1, [pc, #32]	; (3ba28 <lll_conn_isr_tx+0xb0>)
   3ba08:	4808      	ldr	r0, [pc, #32]	; (3ba2c <lll_conn_isr_tx+0xb4>)
   3ba0a:	f240 2313 	movw	r3, #531	; 0x213
   3ba0e:	f007 f91d 	bl	42c4c <printk>
   3ba12:	4040      	eors	r0, r0
   3ba14:	f380 8811 	msr	BASEPRI, r0
   3ba18:	f04f 0003 	mov.w	r0, #3
   3ba1c:	df02      	svc	2
   3ba1e:	e7c5      	b.n	3b9ac <lll_conn_isr_tx+0x34>
   3ba20:	0003bb55 	.word	0x0003bb55
   3ba24:	0004ab30 	.word	0x0004ab30
   3ba28:	0004aaec 	.word	0x0004aaec
   3ba2c:	0004a024 	.word	0x0004a024

0003ba30 <lll_conn_tx_pkt_set>:
{
   3ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ba32:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   3ba34:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   3ba38:	8f87      	ldrh	r7, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   3ba3a:	f001 0407 	and.w	r4, r1, #7
{
   3ba3e:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   3ba40:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   3ba44:	4620      	mov	r0, r4
   3ba46:	f000 fcbb 	bl	3c3c0 <radio_phy_set>
	} else if (lll->enc_tx) {
   3ba4a:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   3ba4e:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   3ba50:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   3ba52:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_tx) {
   3ba56:	d50d      	bpl.n	3ba74 <lll_conn_tx_pkt_set+0x44>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   3ba58:	1d39      	adds	r1, r7, #4
   3ba5a:	b2c9      	uxtb	r1, r1
   3ba5c:	2008      	movs	r0, #8
   3ba5e:	f000 fcf5 	bl	3c44c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   3ba62:	4631      	mov	r1, r6
   3ba64:	f105 0080 	add.w	r0, r5, #128	; 0x80
   3ba68:	f000 ffd4 	bl	3ca14 <radio_ccm_tx_pkt_set>
}
   3ba6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   3ba70:	f000 bd18 	b.w	3c4a4 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   3ba74:	b2f9      	uxtb	r1, r7
   3ba76:	2008      	movs	r0, #8
   3ba78:	f000 fce8 	bl	3c44c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   3ba7c:	4630      	mov	r0, r6
}
   3ba7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   3ba82:	f000 bd0f 	b.w	3c4a4 <radio_pkt_tx_set>
   3ba86:	bf00      	nop

0003ba88 <lll_conn_pdu_tx_prep>:
{
   3ba88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3ba8c:	4604      	mov	r4, r0
   3ba8e:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   3ba90:	aa01      	add	r2, sp, #4
   3ba92:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   3ba94:	460f      	mov	r7, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   3ba96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   3ba98:	f7f3 ff84 	bl	2f9a4 <memq_peek>
	if (lll->empty || !link) {
   3ba9c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3baa0:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   3baa2:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   3baa4:	d431      	bmi.n	3bb0a <lll_conn_pdu_tx_prep+0x82>
   3baa6:	2800      	cmp	r0, #0
   3baa8:	d045      	beq.n	3bb36 <lll_conn_pdu_tx_prep+0xae>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   3baaa:	9b01      	ldr	r3, [sp, #4]
   3baac:	f894 805d 	ldrb.w	r8, [r4, #93]	; 0x5d
   3bab0:	f103 0904 	add.w	r9, r3, #4
		if (!lll->packet_tx_head_len) {
   3bab4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   3bab8:	eb09 0508 	add.w	r5, r9, r8
		if (!lll->packet_tx_head_len) {
   3babc:	b913      	cbnz	r3, 3bac4 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   3babe:	786b      	ldrb	r3, [r5, #1]
   3bac0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   3bac4:	f1b8 0f00 	cmp.w	r8, #0
   3bac8:	d006      	beq.n	3bad8 <lll_conn_pdu_tx_prep+0x50>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   3baca:	f819 2008 	ldrb.w	r2, [r9, r8]
   3bace:	2101      	movs	r1, #1
   3bad0:	f361 0201 	bfi	r2, r1, #0, #2
   3bad4:	f809 2008 	strb.w	r2, [r9, r8]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   3bad8:	eba3 0308 	sub.w	r3, r3, r8
   3badc:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   3bade:	4620      	mov	r0, r4
   3bae0:	f7fd f99a 	bl	38e18 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   3bae4:	786b      	ldrb	r3, [r5, #1]
   3bae6:	4283      	cmp	r3, r0
   3bae8:	d91f      	bls.n	3bb2a <lll_conn_pdu_tx_prep+0xa2>
			p->len = max_tx_octets;
   3baea:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   3baec:	2201      	movs	r2, #1
   3baee:	f819 3008 	ldrb.w	r3, [r9, r8]
   3baf2:	f003 030f 	and.w	r3, r3, #15
   3baf6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   3bafa:	f809 3008 	strb.w	r3, [r9, r8]
		p->resv = 0U;
   3bafe:	2300      	movs	r3, #0
   3bb00:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   3bb02:	603d      	str	r5, [r7, #0]
}
   3bb04:	b003      	add	sp, #12
   3bb06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   3bb0a:	f043 0304 	orr.w	r3, r3, #4
   3bb0e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   3bb12:	f000 fd31 	bl	3c578 <radio_pkt_empty_get>
   3bb16:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   3bb18:	b1a6      	cbz	r6, 3bb44 <lll_conn_pdu_tx_prep+0xbc>
			p->md = 1U;
   3bb1a:	7803      	ldrb	r3, [r0, #0]
   3bb1c:	f043 0310 	orr.w	r3, r3, #16
   3bb20:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   3bb22:	603d      	str	r5, [r7, #0]
}
   3bb24:	b003      	add	sp, #12
   3bb26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   3bb2a:	6832      	ldr	r2, [r6, #0]
   3bb2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   3bb2e:	1ad2      	subs	r2, r2, r3
   3bb30:	bf18      	it	ne
   3bb32:	2201      	movne	r2, #1
   3bb34:	e7db      	b.n	3baee <lll_conn_pdu_tx_prep+0x66>
		lll->empty = 1U;
   3bb36:	f043 0304 	orr.w	r3, r3, #4
   3bb3a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   3bb3e:	f000 fd1b 	bl	3c578 <radio_pkt_empty_get>
   3bb42:	4605      	mov	r5, r0
			p->md = 0U;
   3bb44:	782b      	ldrb	r3, [r5, #0]
   3bb46:	f36f 1304 	bfc	r3, #4, #1
   3bb4a:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   3bb4c:	603d      	str	r5, [r7, #0]
}
   3bb4e:	b003      	add	sp, #12
   3bb50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0003bb54 <lll_conn_isr_rx>:
{
   3bb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bb58:	b082      	sub	sp, #8
   3bb5a:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   3bb5c:	f000 fce2 	bl	3c524 <radio_is_done>
	if (trx_done) {
   3bb60:	b2c0      	uxtb	r0, r0
   3bb62:	b950      	cbnz	r0, 3bb7a <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   3bb64:	f7fe fee0 	bl	3a928 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   3bb68:	48b8      	ldr	r0, [pc, #736]	; (3be4c <lll_conn_isr_rx+0x2f8>)
   3bb6a:	4621      	mov	r1, r4
   3bb6c:	f000 fbc2 	bl	3c2f4 <radio_isr_set>
}
   3bb70:	b002      	add	sp, #8
   3bb72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		radio_disable();
   3bb76:	f000 bcab 	b.w	3c4d0 <radio_disable>
		crc_ok = radio_crc_is_valid();
   3bb7a:	f000 fcf3 	bl	3c564 <radio_crc_is_valid>
   3bb7e:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   3bb80:	f000 fdc0 	bl	3c704 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   3bb84:	f7fe fed0 	bl	3a928 <lll_isr_rx_status_reset>
	trx_cnt++;
   3bb88:	4ab1      	ldr	r2, [pc, #708]	; (3be50 <lll_conn_isr_rx+0x2fc>)
   3bb8a:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   3bb8c:	2001      	movs	r0, #1
	trx_cnt++;
   3bb8e:	4403      	add	r3, r0
   3bb90:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   3bb92:	f7f7 fb7b 	bl	3328c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   3bb96:	4606      	mov	r6, r0
   3bb98:	2800      	cmp	r0, #0
   3bb9a:	f000 80cf 	beq.w	3bd3c <lll_conn_isr_rx+0x1e8>
	if (crc_ok) {
   3bb9e:	2d00      	cmp	r5, #0
   3bba0:	d153      	bne.n	3bc4a <lll_conn_isr_rx+0xf6>
		if (crc_expire == 0U) {
   3bba2:	4bac      	ldr	r3, [pc, #688]	; (3be54 <lll_conn_isr_rx+0x300>)
   3bba4:	781f      	ldrb	r7, [r3, #0]
   3bba6:	2f00      	cmp	r7, #0
   3bba8:	f040 80a6 	bne.w	3bcf8 <lll_conn_isr_rx+0x1a4>
		crc_expire--;
   3bbac:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bbae:	a901      	add	r1, sp, #4
   3bbb0:	4620      	mov	r0, r4
		crc_expire--;
   3bbb2:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bbb4:	f7ff ff68 	bl	3ba88 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   3bbb8:	f8dd 8004 	ldr.w	r8, [sp, #4]
		radio_tmr_tifs_set(EVENT_IFS_US);
   3bbbc:	2096      	movs	r0, #150	; 0x96
   3bbbe:	f000 fdfd 	bl	3c7bc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   3bbc2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3bbc6:	f000 0007 	and.w	r0, r0, #7
   3bbca:	f000 fcdd 	bl	3c588 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   3bbce:	48a2      	ldr	r0, [pc, #648]	; (3be58 <lll_conn_isr_rx+0x304>)
   3bbd0:	4621      	mov	r1, r4
   3bbd2:	f000 fb8f 	bl	3c2f4 <radio_isr_set>
		radio_tmr_end_capture();
   3bbd6:	f000 fecb 	bl	3c970 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   3bbda:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   3bbde:	f898 1000 	ldrb.w	r1, [r8]
   3bbe2:	f3c2 0340 	ubfx	r3, r2, #1, #1
   3bbe6:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   3bbe8:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   3bbec:	f021 010c 	bic.w	r1, r1, #12
   3bbf0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   3bbf4:	430b      	orrs	r3, r1
   3bbf6:	f888 3000 	strb.w	r3, [r8]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   3bbfa:	4641      	mov	r1, r8
   3bbfc:	4620      	mov	r0, r4
   3bbfe:	f7ff ff17 	bl	3ba30 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   3bc02:	f000 fc85 	bl	3c510 <radio_is_ready>
   3bc06:	2800      	cmp	r0, #0
   3bc08:	f040 80c9 	bne.w	3bd9e <lll_conn_isr_rx+0x24a>
	if (!radio_tmr_aa_restore()) {
   3bc0c:	f000 fea4 	bl	3c958 <radio_tmr_aa_restore>
   3bc10:	b180      	cbz	r0, 3bc34 <lll_conn_isr_rx+0xe0>
	if (tx_release) {
   3bc12:	b1ad      	cbz	r5, 3bc40 <lll_conn_isr_rx+0xec>
		LL_ASSERT(lll->handle != 0xFFFF);
   3bc14:	89a0      	ldrh	r0, [r4, #12]
   3bc16:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3bc1a:	4298      	cmp	r0, r3
   3bc1c:	f000 80cd 	beq.w	3bdba <lll_conn_isr_rx+0x266>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   3bc20:	4629      	mov	r1, r5
   3bc22:	f7fc ff89 	bl	38b38 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   3bc26:	2f00      	cmp	r7, #0
   3bc28:	d179      	bne.n	3bd1e <lll_conn_isr_rx+0x1ca>
}
   3bc2a:	b002      	add	sp, #8
   3bc2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ull_rx_sched();
   3bc30:	f7f7 bb70 	b.w	33314 <ull_rx_sched>
		radio_tmr_aa_save(radio_tmr_aa_get());
   3bc34:	f000 fe84 	bl	3c940 <radio_tmr_aa_get>
   3bc38:	f000 fe88 	bl	3c94c <radio_tmr_aa_save>
	if (tx_release) {
   3bc3c:	2d00      	cmp	r5, #0
   3bc3e:	d1e9      	bne.n	3bc14 <lll_conn_isr_rx+0xc0>
	if (is_rx_enqueue) {
   3bc40:	2f00      	cmp	r7, #0
   3bc42:	d16c      	bne.n	3bd1e <lll_conn_isr_rx+0x1ca>
}
   3bc44:	b002      	add	sp, #8
   3bc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pdu_data_rx->nesn != lll->sn) {
   3bc4a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bc4e:	7f32      	ldrb	r2, [r6, #28]
   3bc50:	f003 0101 	and.w	r1, r3, #1
   3bc54:	f3c2 0080 	ubfx	r0, r2, #2, #1
   3bc58:	4288      	cmp	r0, r1
   3bc5a:	d07f      	beq.n	3bd5c <lll_conn_isr_rx+0x208>
		if (lll->role) {
   3bc5c:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   3bc60:	f081 0101 	eor.w	r1, r1, #1
   3bc64:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   3bc68:	2a00      	cmp	r2, #0
		lll->sn++;
   3bc6a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   3bc6e:	da05      	bge.n	3bc7c <lll_conn_isr_rx+0x128>
			lll->periph.latency_enabled = 1;
   3bc70:	f894 3020 	ldrb.w	r3, [r4, #32]
   3bc74:	f043 0304 	orr.w	r3, r3, #4
   3bc78:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   3bc7c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bc80:	075d      	lsls	r5, r3, #29
   3bc82:	f100 80ac 	bmi.w	3bdde <lll_conn_isr_rx+0x28a>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   3bc86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3bc8a:	aa01      	add	r2, sp, #4
   3bc8c:	f7f3 fe8a 	bl	2f9a4 <memq_peek>
		if (link) {
   3bc90:	4605      	mov	r5, r0
   3bc92:	2800      	cmp	r0, #0
   3bc94:	f000 80d6 	beq.w	3be44 <lll_conn_isr_rx+0x2f0>
					       lll->packet_tx_head_offset);
   3bc98:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   3bc9c:	9b01      	ldr	r3, [sp, #4]
   3bc9e:	4413      	add	r3, r2
   3bca0:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   3bca2:	b171      	cbz	r1, 3bcc2 <lll_conn_isr_rx+0x16e>
				if (lll->enc_tx) {
   3bca4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bca8:	06d8      	lsls	r0, r3, #27
   3bcaa:	d50a      	bpl.n	3bcc2 <lll_conn_isr_rx+0x16e>
					lll->ccm_tx.counter++;
   3bcac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   3bcb0:	3301      	adds	r3, #1
   3bcb2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   3bcb6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   3bcba:	f143 0300 	adc.w	r3, r3, #0
   3bcbe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   3bcc2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   3bcc6:	440a      	add	r2, r1
   3bcc8:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   3bcca:	429a      	cmp	r2, r3
   3bccc:	f0c0 8092 	bcc.w	3bdf4 <lll_conn_isr_rx+0x2a0>
			} else if (offset == lll->packet_tx_head_len) {
   3bcd0:	f000 80ab 	beq.w	3be2a <lll_conn_isr_rx+0x2d6>
				LL_ASSERT(0);
   3bcd4:	4a61      	ldr	r2, [pc, #388]	; (3be5c <lll_conn_isr_rx+0x308>)
   3bcd6:	4962      	ldr	r1, [pc, #392]	; (3be60 <lll_conn_isr_rx+0x30c>)
   3bcd8:	4862      	ldr	r0, [pc, #392]	; (3be64 <lll_conn_isr_rx+0x310>)
   3bcda:	f240 33a3 	movw	r3, #931	; 0x3a3
   3bcde:	f006 ffb5 	bl	42c4c <printk>
   3bce2:	4040      	eors	r0, r0
   3bce4:	f380 8811 	msr	BASEPRI, r0
   3bce8:	f04f 0003 	mov.w	r0, #3
   3bcec:	df02      	svc	2
	tx_release = NULL;
   3bcee:	2500      	movs	r5, #0
   3bcf0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bcf4:	7f32      	ldrb	r2, [r6, #28]
   3bcf6:	e032      	b.n	3bd5e <lll_conn_isr_rx+0x20a>
		crc_expire--;
   3bcf8:	3f01      	subs	r7, #1
   3bcfa:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bcfc:	a901      	add	r1, sp, #4
   3bcfe:	4620      	mov	r0, r4
		crc_expire--;
   3bd00:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bd02:	f7ff fec1 	bl	3ba88 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   3bd06:	2f00      	cmp	r7, #0
   3bd08:	f040 8101 	bne.w	3bf0e <lll_conn_isr_rx+0x3ba>
	pdu_data_tx->sn = lll->sn;
   3bd0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
		radio_isr_set(isr_done, param);
   3bd10:	484e      	ldr	r0, [pc, #312]	; (3be4c <lll_conn_isr_rx+0x2f8>)
   3bd12:	4621      	mov	r1, r4
   3bd14:	f000 faee 	bl	3c2f4 <radio_isr_set>
			radio_switch_complete_and_disable();
   3bd18:	f000 fcde 	bl	3c6d8 <radio_switch_complete_and_disable>
   3bd1c:	e75d      	b.n	3bbda <lll_conn_isr_rx+0x86>
		ull_pdu_rx_alloc();
   3bd1e:	f7f7 fad3 	bl	332c8 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3bd22:	2303      	movs	r3, #3
   3bd24:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   3bd26:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   3bd28:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   3bd2a:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   3bd2c:	4631      	mov	r1, r6
   3bd2e:	f7f7 fae1 	bl	332f4 <ull_rx_put>
}
   3bd32:	b002      	add	sp, #8
   3bd34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ull_rx_sched();
   3bd38:	f7f7 baec 	b.w	33314 <ull_rx_sched>
	LL_ASSERT(node_rx);
   3bd3c:	4a47      	ldr	r2, [pc, #284]	; (3be5c <lll_conn_isr_rx+0x308>)
   3bd3e:	494a      	ldr	r1, [pc, #296]	; (3be68 <lll_conn_isr_rx+0x314>)
   3bd40:	4848      	ldr	r0, [pc, #288]	; (3be64 <lll_conn_isr_rx+0x310>)
   3bd42:	23f2      	movs	r3, #242	; 0xf2
   3bd44:	f006 ff82 	bl	42c4c <printk>
   3bd48:	4040      	eors	r0, r0
   3bd4a:	f380 8811 	msr	BASEPRI, r0
   3bd4e:	f04f 0003 	mov.w	r0, #3
   3bd52:	df02      	svc	2
	if (crc_ok) {
   3bd54:	2d00      	cmp	r5, #0
   3bd56:	f43f af24 	beq.w	3bba2 <lll_conn_isr_rx+0x4e>
   3bd5a:	e776      	b.n	3bc4a <lll_conn_isr_rx+0xf6>
	tx_release = NULL;
   3bd5c:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   3bd5e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   3bd62:	f3c3 0340 	ubfx	r3, r3, #1, #1
   3bd66:	429a      	cmp	r2, r3
   3bd68:	d04b      	beq.n	3be02 <lll_conn_isr_rx+0x2ae>
	is_rx_enqueue = 0U;
   3bd6a:	2700      	movs	r7, #0
		crc_expire = 0U;
   3bd6c:	4a39      	ldr	r2, [pc, #228]	; (3be54 <lll_conn_isr_rx+0x300>)
		crc_valid = 1U;
   3bd6e:	4b3f      	ldr	r3, [pc, #252]	; (3be6c <lll_conn_isr_rx+0x318>)
		crc_expire = 0U;
   3bd70:	2100      	movs	r1, #0
   3bd72:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bd74:	4620      	mov	r0, r4
		crc_valid = 1U;
   3bd76:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bd78:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   3bd7a:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   3bd7c:	f7ff fe84 	bl	3ba88 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   3bd80:	7f33      	ldrb	r3, [r6, #28]
   3bd82:	06da      	lsls	r2, r3, #27
   3bd84:	d428      	bmi.n	3bdd8 <lll_conn_isr_rx+0x284>
			      (pdu_data_tx->md == 0) &&
   3bd86:	f8dd 8004 	ldr.w	r8, [sp, #4]
   3bd8a:	f898 3000 	ldrb.w	r3, [r8]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   3bd8e:	06db      	lsls	r3, r3, #27
   3bd90:	f53f af14 	bmi.w	3bbbc <lll_conn_isr_rx+0x68>
			      (pdu_data_tx->md == 0) &&
   3bd94:	f898 3001 	ldrb.w	r3, [r8, #1]
   3bd98:	2b00      	cmp	r3, #0
   3bd9a:	d0b9      	beq.n	3bd10 <lll_conn_isr_rx+0x1bc>
   3bd9c:	e70e      	b.n	3bbbc <lll_conn_isr_rx+0x68>
	LL_ASSERT(!radio_is_ready());
   3bd9e:	4a2f      	ldr	r2, [pc, #188]	; (3be5c <lll_conn_isr_rx+0x308>)
   3bda0:	4933      	ldr	r1, [pc, #204]	; (3be70 <lll_conn_isr_rx+0x31c>)
   3bda2:	4830      	ldr	r0, [pc, #192]	; (3be64 <lll_conn_isr_rx+0x310>)
   3bda4:	f240 1369 	movw	r3, #361	; 0x169
   3bda8:	f006 ff50 	bl	42c4c <printk>
   3bdac:	4040      	eors	r0, r0
   3bdae:	f380 8811 	msr	BASEPRI, r0
   3bdb2:	f04f 0003 	mov.w	r0, #3
   3bdb6:	df02      	svc	2
   3bdb8:	e728      	b.n	3bc0c <lll_conn_isr_rx+0xb8>
		LL_ASSERT(lll->handle != 0xFFFF);
   3bdba:	4a28      	ldr	r2, [pc, #160]	; (3be5c <lll_conn_isr_rx+0x308>)
   3bdbc:	492d      	ldr	r1, [pc, #180]	; (3be74 <lll_conn_isr_rx+0x320>)
   3bdbe:	4829      	ldr	r0, [pc, #164]	; (3be64 <lll_conn_isr_rx+0x310>)
   3bdc0:	f44f 73bc 	mov.w	r3, #376	; 0x178
   3bdc4:	f006 ff42 	bl	42c4c <printk>
   3bdc8:	4040      	eors	r0, r0
   3bdca:	f380 8811 	msr	BASEPRI, r0
   3bdce:	f04f 0003 	mov.w	r0, #3
   3bdd2:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   3bdd4:	89a0      	ldrh	r0, [r4, #12]
   3bdd6:	e723      	b.n	3bc20 <lll_conn_isr_rx+0xcc>
			      (pdu_data_tx->md == 0) &&
   3bdd8:	f8dd 8004 	ldr.w	r8, [sp, #4]
   3bddc:	e6ee      	b.n	3bbbc <lll_conn_isr_rx+0x68>
			lll->empty = 0;
   3bdde:	f36f 0382 	bfc	r3, #2, #1
   3bde2:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   3bde6:	f000 fbc7 	bl	3c578 <radio_pkt_empty_get>
	tx_release = NULL;
   3bdea:	2500      	movs	r5, #0
   3bdec:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bdf0:	7f32      	ldrb	r2, [r6, #28]
   3bdf2:	e7b4      	b.n	3bd5e <lll_conn_isr_rx+0x20a>
				lll->packet_tx_head_offset = offset;
   3bdf4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   3bdf8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3bdfc:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   3bdfe:	2500      	movs	r5, #0
   3be00:	e7ad      	b.n	3bd5e <lll_conn_isr_rx+0x20a>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   3be02:	2003      	movs	r0, #3
   3be04:	f7f7 fa42 	bl	3328c <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   3be08:	2800      	cmp	r0, #0
   3be0a:	d0ae      	beq.n	3bd6a <lll_conn_isr_rx+0x216>
		lll->nesn++;
   3be0c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3be10:	f083 0302 	eor.w	r3, r3, #2
   3be14:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   3be18:	7f73      	ldrb	r3, [r6, #29]
   3be1a:	2b00      	cmp	r3, #0
   3be1c:	d0a5      	beq.n	3bd6a <lll_conn_isr_rx+0x216>
			if (lll->enc_rx) {
   3be1e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3be22:	0719      	lsls	r1, r3, #28
   3be24:	d428      	bmi.n	3be78 <lll_conn_isr_rx+0x324>
			*is_rx_enqueue = 1U;
   3be26:	2701      	movs	r7, #1
   3be28:	e7a0      	b.n	3bd6c <lll_conn_isr_rx+0x218>
				lll->packet_tx_head_len = 0;
   3be2a:	2200      	movs	r2, #0
   3be2c:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   3be30:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   3be32:	f104 0148 	add.w	r1, r4, #72	; 0x48
   3be36:	f7f3 fdbd 	bl	2f9b4 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   3be3a:	9b01      	ldr	r3, [sp, #4]
   3be3c:	681a      	ldr	r2, [r3, #0]
   3be3e:	602a      	str	r2, [r5, #0]
				tx->next = link;
   3be40:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   3be42:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   3be44:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3be48:	7f32      	ldrb	r2, [r6, #28]
   3be4a:	e788      	b.n	3bd5e <lll_conn_isr_rx+0x20a>
   3be4c:	0003b78d 	.word	0x0003b78d
   3be50:	20003b66 	.word	0x20003b66
   3be54:	20003c74 	.word	0x20003c74
   3be58:	0003b979 	.word	0x0003b979
   3be5c:	0004ab30 	.word	0x0004ab30
   3be60:	0004a084 	.word	0x0004a084
   3be64:	0004a024 	.word	0x0004a024
   3be68:	0004aae4 	.word	0x0004aae4
   3be6c:	20003c75 	.word	0x20003c75
   3be70:	0004aaec 	.word	0x0004aaec
   3be74:	0004ab84 	.word	0x0004ab84
				done = radio_ccm_is_done();
   3be78:	f000 fdf4 	bl	3ca64 <radio_ccm_is_done>
				LL_ASSERT(done);
   3be7c:	b3c8      	cbz	r0, 3bef2 <lll_conn_isr_rx+0x39e>
				bool mic_failure = !radio_ccm_mic_is_valid();
   3be7e:	f000 fe13 	bl	3caa8 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   3be82:	bb30      	cbnz	r0, 3bed2 <lll_conn_isr_rx+0x37e>
				    lll->ccm_rx.counter == 0 &&
   3be84:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   3be88:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
				if (mic_failure &&
   3be8c:	4313      	orrs	r3, r2
   3be8e:	d104      	bne.n	3be9a <lll_conn_isr_rx+0x346>
				    (pdu_data_rx->ll_id ==
   3be90:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   3be92:	f003 0303 	and.w	r3, r3, #3
   3be96:	2b03      	cmp	r3, #3
   3be98:	d004      	beq.n	3bea4 <lll_conn_isr_rx+0x350>
					mic_state = LLL_CONN_MIC_FAIL;
   3be9a:	4b1f      	ldr	r3, [pc, #124]	; (3bf18 <lll_conn_isr_rx+0x3c4>)
   3be9c:	2202      	movs	r2, #2
   3be9e:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   3bea0:	2700      	movs	r7, #0
   3bea2:	e6b3      	b.n	3bc0c <lll_conn_isr_rx+0xb8>
						radio_pkt_scratch_get();
   3bea4:	f000 fb6c 	bl	3c580 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   3bea8:	7843      	ldrb	r3, [r0, #1]
   3beaa:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   3beac:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   3beae:	d8f4      	bhi.n	3be9a <lll_conn_isr_rx+0x346>
						memcpy(pdu_data_rx,
   3beb0:	3303      	adds	r3, #3
   3beb2:	b2da      	uxtb	r2, r3
   3beb4:	f106 001c 	add.w	r0, r6, #28
   3beb8:	f008 ffa3 	bl	44e02 <memcpy>
						lll->ccm_rx.counter--;
   3bebc:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   3bec0:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   3bec4:	3b01      	subs	r3, #1
   3bec6:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   3beca:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   3bece:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   3bed2:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   3bed6:	4a10      	ldr	r2, [pc, #64]	; (3bf18 <lll_conn_isr_rx+0x3c4>)
				lll->ccm_rx.counter++;
   3bed8:	3301      	adds	r3, #1
   3beda:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   3bede:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   3bee2:	f104 016f 	add.w	r1, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   3bee6:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   3beea:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   3beec:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   3beee:	7017      	strb	r7, [r2, #0]
		if (err) {
   3bef0:	e73c      	b.n	3bd6c <lll_conn_isr_rx+0x218>
				LL_ASSERT(done);
   3bef2:	4a0a      	ldr	r2, [pc, #40]	; (3bf1c <lll_conn_isr_rx+0x3c8>)
   3bef4:	490a      	ldr	r1, [pc, #40]	; (3bf20 <lll_conn_isr_rx+0x3cc>)
   3bef6:	480b      	ldr	r0, [pc, #44]	; (3bf24 <lll_conn_isr_rx+0x3d0>)
   3bef8:	f240 33be 	movw	r3, #958	; 0x3be
   3befc:	f006 fea6 	bl	42c4c <printk>
   3bf00:	4040      	eors	r0, r0
   3bf02:	f380 8811 	msr	BASEPRI, r0
   3bf06:	f04f 0003 	mov.w	r0, #3
   3bf0a:	df02      	svc	2
   3bf0c:	e7b7      	b.n	3be7e <lll_conn_isr_rx+0x32a>
	pdu_data_tx->sn = lll->sn;
   3bf0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
	is_rx_enqueue = 0U;
   3bf12:	462f      	mov	r7, r5
   3bf14:	e652      	b.n	3bbbc <lll_conn_isr_rx+0x68>
   3bf16:	bf00      	nop
   3bf18:	20003c76 	.word	0x20003c76
   3bf1c:	0004ab30 	.word	0x0004ab30
   3bf20:	0004ab7c 	.word	0x0004ab7c
   3bf24:	0004a024 	.word	0x0004a024

0003bf28 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   3bf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   3bf2c:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   3bf2e:	89a2      	ldrh	r2, [r4, #12]
   3bf30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3bf34:	429a      	cmp	r2, r3
{
   3bf36:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   3bf38:	f000 80d1 	beq.w	3c0de <prepare_cb+0x1b6>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   3bf3c:	4605      	mov	r5, r0
   3bf3e:	f7ff fc8f 	bl	3b860 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   3bf42:	892b      	ldrh	r3, [r5, #8]
   3bf44:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   3bf46:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   3bf48:	441a      	add	r2, r3
   3bf4a:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   3bf4c:	4410      	add	r0, r2
   3bf4e:	b280      	uxth	r0, r0

	/* Update event counter to next value */
	lll->event_counter = (event_counter + 1);
   3bf50:	1c41      	adds	r1, r0, #1

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   3bf52:	7f63      	ldrb	r3, [r4, #29]
	lll->event_counter = (event_counter + 1);
   3bf54:	82e1      	strh	r1, [r4, #22]
	lll->latency_prepare = 0;
   3bf56:	2100      	movs	r1, #0
   3bf58:	8261      	strh	r1, [r4, #18]
	if (lll->data_chan_sel) {
   3bf5a:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare + p->lazy;
   3bf5c:	82a2      	strh	r2, [r4, #20]
	if (lll->data_chan_sel) {
   3bf5e:	f100 808f 	bmi.w	3c080 <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   3bf62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3bf66:	7fa1      	ldrb	r1, [r4, #30]
   3bf68:	9300      	str	r3, [sp, #0]
   3bf6a:	f104 001f 	add.w	r0, r4, #31
   3bf6e:	f104 0318 	add.w	r3, r4, #24
   3bf72:	f7fd f8a1 	bl	390b8 <lll_chan_sel_1>
   3bf76:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   3bf78:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   3bf7c:	1899      	adds	r1, r3, r2
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   3bf7e:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   3bf82:	4403      	add	r3, r0
	lll->periph.window_widening_prepare_us = 0;
   3bf84:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   3bf86:	63a3      	str	r3, [r4, #56]	; 0x38
   3bf88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->periph.window_widening_prepare_us = 0;
   3bf8a:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   3bf8c:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   3bf8e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   3bf92:	428b      	cmp	r3, r1
   3bf94:	bf28      	it	cs
   3bf96:	460b      	movcs	r3, r1
   3bf98:	f012 0204 	ands.w	r2, r2, #4
   3bf9c:	6323      	str	r3, [r4, #48]	; 0x30
   3bf9e:	f000 8090 	beq.w	3c0c2 <prepare_cb+0x19a>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   3bfa2:	f000 f9e9 	bl	3c378 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   3bfa6:	2000      	movs	r0, #0
   3bfa8:	f000 fa1a 	bl	3c3e0 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   3bfac:	4620      	mov	r0, r4
   3bfae:	f7ff fc9b 	bl	3b8e8 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   3bfb2:	1d20      	adds	r0, r4, #4
   3bfb4:	f000 fa32 	bl	3c41c <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   3bfb8:	8923      	ldrh	r3, [r4, #8]
   3bfba:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   3bfbc:	f240 605b 	movw	r0, #1627	; 0x65b
   3bfc0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   3bfc4:	f000 fac2 	bl	3c54c <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   3bfc8:	4630      	mov	r0, r6
   3bfca:	f7fe fc61 	bl	3a890 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   3bfce:	4621      	mov	r1, r4
   3bfd0:	4848      	ldr	r0, [pc, #288]	; (3c0f4 <prepare_cb+0x1cc>)
   3bfd2:	f000 f98f 	bl	3c2f4 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   3bfd6:	2096      	movs	r0, #150	; 0x96
   3bfd8:	f000 fbf0 	bl	3c7bc <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   3bfdc:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   3bfe0:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3bfe4:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   3bfe8:	2100      	movs	r1, #0
   3bfea:	f002 0207 	and.w	r2, r2, #7
   3bfee:	f000 0007 	and.w	r0, r0, #7
   3bff2:	f000 fb11 	bl	3c618 <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   3bff6:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   3bff8:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   3bffa:	4638      	mov	r0, r7
   3bffc:	f7fe fc2e 	bl	3a85c <lll_event_offset_get>
   3c000:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   3c002:	686a      	ldr	r2, [r5, #4]
   3c004:	f106 0109 	add.w	r1, r6, #9
   3c008:	2000      	movs	r0, #0
   3c00a:	f000 fbe3 	bl	3c7d4 <radio_tmr_start>
   3c00e:	4680      	mov	r8, r0

	radio_tmr_aa_capture();
   3c010:	f000 fc82 	bl	3c918 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   3c014:	2000      	movs	r0, #0
   3c016:	f000 fc99 	bl	3c94c <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   3c01a:	6b23      	ldr	r3, [r4, #48]	; 0x30
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3c01c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   3c020:	f103 0230 	add.w	r2, r3, #48	; 0x30
	hcto = remainder_us +
   3c024:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3c026:	f000 0007 	and.w	r0, r0, #7
   3c02a:	2101      	movs	r1, #1
	hcto = remainder_us +
   3c02c:	eb03 0542 	add.w	r5, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3c030:	f000 fa40 	bl	3c4b4 <radio_rx_ready_delay_get>
	hcto = remainder_us +
   3c034:	4445      	add	r5, r8
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   3c036:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   3c038:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   3c03c:	f000 0007 	and.w	r0, r0, #7
   3c040:	2802      	cmp	r0, #2
   3c042:	d03c      	beq.n	3c0be <prepare_cb+0x196>
		return 40;
   3c044:	2804      	cmp	r0, #4
   3c046:	bf0c      	ite	eq
   3c048:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   3c04c:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3c04e:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   3c050:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   3c052:	f000 fa31 	bl	3c4b8 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   3c056:	4428      	add	r0, r5
   3c058:	f000 fc50 	bl	3c8fc <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   3c05c:	89a1      	ldrh	r1, [r4, #12]
   3c05e:	3103      	adds	r1, #3
   3c060:	4632      	mov	r2, r6
   3c062:	b2c9      	uxtb	r1, r1
   3c064:	4638      	mov	r0, r7
   3c066:	f7fe fc03 	bl	3a870 <lll_preempt_calc>
   3c06a:	b190      	cbz	r0, 3c092 <prepare_cb+0x16a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   3c06c:	4822      	ldr	r0, [pc, #136]	; (3c0f8 <prepare_cb+0x1d0>)
   3c06e:	4621      	mov	r1, r4
   3c070:	f000 f940 	bl	3c2f4 <radio_isr_set>
		radio_disable();
   3c074:	f000 fa2c 	bl	3c4d0 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   3c078:	2000      	movs	r0, #0
   3c07a:	b002      	add	sp, #8
   3c07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   3c080:	8be1      	ldrh	r1, [r4, #30]
   3c082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3c086:	f104 0218 	add.w	r2, r4, #24
   3c08a:	f7fd f857 	bl	3913c <lll_chan_sel_2>
   3c08e:	4606      	mov	r6, r0
   3c090:	e772      	b.n	3bf78 <prepare_cb+0x50>
		ret = lll_prepare_done(lll);
   3c092:	4620      	mov	r0, r4
   3c094:	f7fe fb8a 	bl	3a7ac <lll_prepare_done>
		LL_ASSERT(!ret);
   3c098:	2800      	cmp	r0, #0
   3c09a:	d0ed      	beq.n	3c078 <prepare_cb+0x150>
   3c09c:	4a17      	ldr	r2, [pc, #92]	; (3c0fc <prepare_cb+0x1d4>)
   3c09e:	4918      	ldr	r1, [pc, #96]	; (3c100 <prepare_cb+0x1d8>)
   3c0a0:	4818      	ldr	r0, [pc, #96]	; (3c104 <prepare_cb+0x1dc>)
   3c0a2:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   3c0a6:	f006 fdd1 	bl	42c4c <printk>
   3c0aa:	4040      	eors	r0, r0
   3c0ac:	f380 8811 	msr	BASEPRI, r0
   3c0b0:	f04f 0003 	mov.w	r0, #3
   3c0b4:	df02      	svc	2
}
   3c0b6:	2000      	movs	r0, #0
   3c0b8:	b002      	add	sp, #8
   3c0ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   3c0be:	2318      	movs	r3, #24
   3c0c0:	e7c5      	b.n	3c04e <prepare_cb+0x126>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   3c0c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3c0c6:	f7f3 fc6d 	bl	2f9a4 <memq_peek>
		if (!link) {
   3c0ca:	2800      	cmp	r0, #0
   3c0cc:	f47f af69 	bne.w	3bfa2 <prepare_cb+0x7a>
			lll->empty = 1U;
   3c0d0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   3c0d4:	f043 0304 	orr.w	r3, r3, #4
   3c0d8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   3c0dc:	e761      	b.n	3bfa2 <prepare_cb+0x7a>
		radio_isr_set(lll_isr_early_abort, lll);
   3c0de:	480a      	ldr	r0, [pc, #40]	; (3c108 <prepare_cb+0x1e0>)
   3c0e0:	4621      	mov	r1, r4
   3c0e2:	f000 f907 	bl	3c2f4 <radio_isr_set>
		radio_disable();
   3c0e6:	f000 f9f3 	bl	3c4d0 <radio_disable>
}
   3c0ea:	2000      	movs	r0, #0
   3c0ec:	b002      	add	sp, #8
   3c0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c0f2:	bf00      	nop
   3c0f4:	0003bb55 	.word	0x0003bb55
   3c0f8:	0003a9c5 	.word	0x0003a9c5
   3c0fc:	0004ab9c 	.word	0x0004ab9c
   3c100:	0004a2bc 	.word	0x0004a2bc
   3c104:	0004a024 	.word	0x0004a024
   3c108:	0003a9e9 	.word	0x0003a9e9

0003c10c <lll_periph_prepare>:
{
   3c10c:	b510      	push	{r4, lr}
   3c10e:	b082      	sub	sp, #8
   3c110:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   3c112:	f7fe fdb9 	bl	3ac88 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   3c116:	2800      	cmp	r0, #0
   3c118:	db25      	blt.n	3c166 <lll_periph_prepare+0x5a>
	lll = p->param;
   3c11a:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   3c11c:	8920      	ldrh	r0, [r4, #8]
   3c11e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   3c120:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   3c122:	fb00 3303 	mla	r3, r0, r3, r3
   3c126:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   3c128:	4413      	add	r3, r2
   3c12a:	4283      	cmp	r3, r0
   3c12c:	bf28      	it	cs
   3c12e:	4603      	movcs	r3, r0
   3c130:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   3c132:	4a13      	ldr	r2, [pc, #76]	; (3c180 <lll_periph_prepare+0x74>)
   3c134:	4913      	ldr	r1, [pc, #76]	; (3c184 <lll_periph_prepare+0x78>)
   3c136:	4814      	ldr	r0, [pc, #80]	; (3c188 <lll_periph_prepare+0x7c>)
   3c138:	9400      	str	r4, [sp, #0]
   3c13a:	2300      	movs	r3, #0
   3c13c:	f7f7 fbb8 	bl	338b0 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   3c140:	b108      	cbz	r0, 3c146 <lll_periph_prepare+0x3a>
   3c142:	3077      	adds	r0, #119	; 0x77
   3c144:	d101      	bne.n	3c14a <lll_periph_prepare+0x3e>
}
   3c146:	b002      	add	sp, #8
   3c148:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   3c14a:	4a10      	ldr	r2, [pc, #64]	; (3c18c <lll_periph_prepare+0x80>)
   3c14c:	4910      	ldr	r1, [pc, #64]	; (3c190 <lll_periph_prepare+0x84>)
   3c14e:	4811      	ldr	r0, [pc, #68]	; (3c194 <lll_periph_prepare+0x88>)
   3c150:	235e      	movs	r3, #94	; 0x5e
   3c152:	f006 fd7b 	bl	42c4c <printk>
   3c156:	4040      	eors	r0, r0
   3c158:	f380 8811 	msr	BASEPRI, r0
   3c15c:	f04f 0003 	mov.w	r0, #3
   3c160:	df02      	svc	2
}
   3c162:	b002      	add	sp, #8
   3c164:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   3c166:	4a09      	ldr	r2, [pc, #36]	; (3c18c <lll_periph_prepare+0x80>)
   3c168:	490b      	ldr	r1, [pc, #44]	; (3c198 <lll_periph_prepare+0x8c>)
   3c16a:	480a      	ldr	r0, [pc, #40]	; (3c194 <lll_periph_prepare+0x88>)
   3c16c:	234d      	movs	r3, #77	; 0x4d
   3c16e:	f006 fd6d 	bl	42c4c <printk>
   3c172:	4040      	eors	r0, r0
   3c174:	f380 8811 	msr	BASEPRI, r0
   3c178:	f04f 0003 	mov.w	r0, #3
   3c17c:	df02      	svc	2
   3c17e:	e7cc      	b.n	3c11a <lll_periph_prepare+0xe>
   3c180:	0003bf29 	.word	0x0003bf29
   3c184:	0003b889 	.word	0x0003b889
   3c188:	0003a855 	.word	0x0003a855
   3c18c:	0004ab9c 	.word	0x0004ab9c
   3c190:	0004ab1c 	.word	0x0004ab1c
   3c194:	0004a024 	.word	0x0004a024
   3c198:	0004aa48 	.word	0x0004aa48

0003c19c <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   3c19c:	4b05      	ldr	r3, [pc, #20]	; (3c1b4 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   3c19e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3c1a2:	2100      	movs	r1, #0
   3c1a4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   3c1a8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   3c1ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   3c1b0:	4770      	bx	lr
   3c1b2:	bf00      	nop
   3c1b4:	4000b000 	.word	0x4000b000

0003c1b8 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   3c1b8:	4b05      	ldr	r3, [pc, #20]	; (3c1d0 <cntr_start+0x18>)
   3c1ba:	7818      	ldrb	r0, [r3, #0]
   3c1bc:	1c42      	adds	r2, r0, #1
   3c1be:	701a      	strb	r2, [r3, #0]
   3c1c0:	b918      	cbnz	r0, 3c1ca <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   3c1c2:	4b04      	ldr	r3, [pc, #16]	; (3c1d4 <cntr_start+0x1c>)
   3c1c4:	2201      	movs	r2, #1
   3c1c6:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   3c1c8:	4770      	bx	lr
		return 1;
   3c1ca:	2001      	movs	r0, #1
}
   3c1cc:	4770      	bx	lr
   3c1ce:	bf00      	nop
   3c1d0:	20003c77 	.word	0x20003c77
   3c1d4:	4000b000 	.word	0x4000b000

0003c1d8 <cntr_stop>:

uint32_t cntr_stop(void)
{
   3c1d8:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   3c1da:	4c0d      	ldr	r4, [pc, #52]	; (3c210 <cntr_stop+0x38>)
   3c1dc:	7820      	ldrb	r0, [r4, #0]
   3c1de:	b148      	cbz	r0, 3c1f4 <cntr_stop+0x1c>

	if (--_refcount) {
   3c1e0:	3801      	subs	r0, #1
   3c1e2:	b2c0      	uxtb	r0, r0
   3c1e4:	7020      	strb	r0, [r4, #0]
   3c1e6:	b918      	cbnz	r0, 3c1f0 <cntr_stop+0x18>
   3c1e8:	4b0a      	ldr	r3, [pc, #40]	; (3c214 <cntr_stop+0x3c>)
   3c1ea:	2201      	movs	r2, #1
   3c1ec:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   3c1ee:	bd10      	pop	{r4, pc}
		return 1;
   3c1f0:	2001      	movs	r0, #1
}
   3c1f2:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   3c1f4:	4a08      	ldr	r2, [pc, #32]	; (3c218 <cntr_stop+0x40>)
   3c1f6:	4909      	ldr	r1, [pc, #36]	; (3c21c <cntr_stop+0x44>)
   3c1f8:	4809      	ldr	r0, [pc, #36]	; (3c220 <cntr_stop+0x48>)
   3c1fa:	232d      	movs	r3, #45	; 0x2d
   3c1fc:	f006 fd26 	bl	42c4c <printk>
   3c200:	4040      	eors	r0, r0
   3c202:	f380 8811 	msr	BASEPRI, r0
   3c206:	f04f 0003 	mov.w	r0, #3
   3c20a:	df02      	svc	2
	if (--_refcount) {
   3c20c:	7820      	ldrb	r0, [r4, #0]
   3c20e:	e7e7      	b.n	3c1e0 <cntr_stop+0x8>
   3c210:	20003c77 	.word	0x20003c77
   3c214:	4000b000 	.word	0x4000b000
   3c218:	0004abf0 	.word	0x0004abf0
   3c21c:	0004ac3c 	.word	0x0004ac3c
   3c220:	0004a024 	.word	0x0004a024

0003c224 <cntr_cnt_get>:
     return p_reg->COUNTER;
   3c224:	4b01      	ldr	r3, [pc, #4]	; (3c22c <cntr_cnt_get+0x8>)
   3c226:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   3c22a:	4770      	bx	lr
   3c22c:	4000b000 	.word	0x4000b000

0003c230 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   3c230:	4b02      	ldr	r3, [pc, #8]	; (3c23c <cntr_cmp_set+0xc>)
   3c232:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   3c236:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   3c23a:	4770      	bx	lr
   3c23c:	4000b000 	.word	0x4000b000

0003c240 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c240:	4b12      	ldr	r3, [pc, #72]	; (3c28c <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   3c242:	b430      	push	{r4, r5}
   3c244:	2101      	movs	r1, #1
   3c246:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   3c248:	2000      	movs	r0, #0
   3c24a:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   3c24c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   3c250:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   3c254:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   3c258:	6019      	str	r1, [r3, #0]
}
   3c25a:	e005      	b.n	3c268 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   3c25c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   3c260:	b932      	cbnz	r2, 3c270 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   3c262:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   3c266:	b11a      	cbz	r2, 3c270 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   3c268:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   3c26c:	2a00      	cmp	r2, #0
   3c26e:	d0f5      	beq.n	3c25c <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c270:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   3c272:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   3c276:	2a00      	cmp	r2, #0
   3c278:	d1e7      	bne.n	3c24a <do_ecb+0xa>
   3c27a:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   3c27e:	2d00      	cmp	r5, #0
   3c280:	d0e3      	beq.n	3c24a <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   3c282:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   3c284:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   3c288:	4770      	bx	lr
   3c28a:	bf00      	nop
   3c28c:	4000e000 	.word	0x4000e000

0003c290 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   3c290:	b570      	push	{r4, r5, r6, lr}
   3c292:	b08c      	sub	sp, #48	; 0x30
   3c294:	460e      	mov	r6, r1
   3c296:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   3c298:	4601      	mov	r1, r0
   3c29a:	2210      	movs	r2, #16
   3c29c:	4668      	mov	r0, sp
{
   3c29e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   3c2a0:	f7f3 fb4e 	bl	2f940 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   3c2a4:	2210      	movs	r2, #16
   3c2a6:	eb0d 0002 	add.w	r0, sp, r2
   3c2aa:	4631      	mov	r1, r6
   3c2ac:	f7f3 fb48 	bl	2f940 <mem_rcopy>

	do_ecb(&ecb);
   3c2b0:	4668      	mov	r0, sp
   3c2b2:	f7ff ffc5 	bl	3c240 <do_ecb>

	if (cipher_text_le) {
   3c2b6:	b125      	cbz	r5, 3c2c2 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   3c2b8:	2210      	movs	r2, #16
   3c2ba:	a908      	add	r1, sp, #32
   3c2bc:	4628      	mov	r0, r5
   3c2be:	f7f3 fb3f 	bl	2f940 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   3c2c2:	b124      	cbz	r4, 3c2ce <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   3c2c4:	2210      	movs	r2, #16
   3c2c6:	a908      	add	r1, sp, #32
   3c2c8:	4620      	mov	r0, r4
   3c2ca:	f008 fd9a 	bl	44e02 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   3c2ce:	b00c      	add	sp, #48	; 0x30
   3c2d0:	bd70      	pop	{r4, r5, r6, pc}
   3c2d2:	bf00      	nop

0003c2d4 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   3c2d4:	4b04      	ldr	r3, [pc, #16]	; (3c2e8 <isr_radio+0x14>)
   3c2d6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   3c2da:	b123      	cbz	r3, 3c2e6 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   3c2dc:	4a03      	ldr	r2, [pc, #12]	; (3c2ec <isr_radio+0x18>)
   3c2de:	4b04      	ldr	r3, [pc, #16]	; (3c2f0 <isr_radio+0x1c>)
   3c2e0:	6810      	ldr	r0, [r2, #0]
   3c2e2:	681b      	ldr	r3, [r3, #0]
   3c2e4:	4718      	bx	r3
}
   3c2e6:	4770      	bx	lr
   3c2e8:	40001000 	.word	0x40001000
   3c2ec:	20002d78 	.word	0x20002d78
   3c2f0:	20002d74 	.word	0x20002d74

0003c2f4 <radio_isr_set>:
{
   3c2f4:	b538      	push	{r3, r4, r5, lr}
   3c2f6:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   3c2f8:	2001      	movs	r0, #1
{
   3c2fa:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   3c2fc:	f7ed feb0 	bl	2a060 <arch_irq_disable>
	isr_cb = cb;
   3c300:	4b08      	ldr	r3, [pc, #32]	; (3c324 <radio_isr_set+0x30>)
	isr_cb_param = param;
   3c302:	4a09      	ldr	r2, [pc, #36]	; (3c328 <radio_isr_set+0x34>)
	isr_cb = cb;
   3c304:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   3c306:	4909      	ldr	r1, [pc, #36]	; (3c32c <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3c308:	4b09      	ldr	r3, [pc, #36]	; (3c330 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   3c30a:	6015      	str	r5, [r2, #0]
   3c30c:	2010      	movs	r0, #16
   3c30e:	2202      	movs	r2, #2
   3c310:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   3c314:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   3c318:	2001      	movs	r0, #1
}
   3c31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   3c31e:	f7ed be91 	b.w	2a044 <arch_irq_enable>
   3c322:	bf00      	nop
   3c324:	20002d74 	.word	0x20002d74
   3c328:	20002d78 	.word	0x20002d78
   3c32c:	40001000 	.word	0x40001000
   3c330:	e000e100 	.word	0xe000e100

0003c334 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   3c334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3c338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   3c33c:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   3c33e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   3c342:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   3c346:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   3c34a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   3c34e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   3c352:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   3c356:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   3c35a:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   3c35e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   3c362:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   3c366:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   3c36a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   3c36e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   3c372:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   3c376:	4770      	bx	lr

0003c378 <radio_reset>:
{
   3c378:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   3c37a:	2001      	movs	r0, #1
   3c37c:	f7ed fe70 	bl	2a060 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   3c380:	4a0d      	ldr	r2, [pc, #52]	; (3c3b8 <radio_reset+0x40>)
   3c382:	2100      	movs	r1, #0
   3c384:	2301      	movs	r3, #1
   3c386:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   3c38a:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   3c38e:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   3c392:	490a      	ldr	r1, [pc, #40]	; (3c3bc <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   3c394:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   3c398:	f023 0301 	bic.w	r3, r3, #1
   3c39c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   3c3a0:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   3c3a4:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   3c3a8:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   3c3ac:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   3c3b0:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   3c3b4:	bd10      	pop	{r4, pc}
   3c3b6:	bf00      	nop
   3c3b8:	40001000 	.word	0x40001000
   3c3bc:	4001f000 	.word	0x4001f000

0003c3c0 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   3c3c0:	4b06      	ldr	r3, [pc, #24]	; (3c3dc <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   3c3c2:	2802      	cmp	r0, #2
   3c3c4:	bf14      	ite	ne
   3c3c6:	2203      	movne	r2, #3
   3c3c8:	2204      	moveq	r2, #4
   3c3ca:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   3c3ce:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   3c3d2:	f042 0201 	orr.w	r2, r2, #1
   3c3d6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   3c3da:	4770      	bx	lr
   3c3dc:	40001000 	.word	0x40001000

0003c3e0 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   3c3e0:	4b01      	ldr	r3, [pc, #4]	; (3c3e8 <radio_tx_power_set+0x8>)
   3c3e2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   3c3e6:	4770      	bx	lr
   3c3e8:	40001000 	.word	0x40001000

0003c3ec <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   3c3ec:	4b01      	ldr	r3, [pc, #4]	; (3c3f4 <radio_freq_chan_set+0x8>)
   3c3ee:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   3c3f2:	4770      	bx	lr
   3c3f4:	40001000 	.word	0x40001000

0003c3f8 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   3c3f8:	4b07      	ldr	r3, [pc, #28]	; (3c418 <radio_whiten_iv_set+0x20>)
   3c3fa:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   3c3fe:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   3c402:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   3c406:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   3c40a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   3c40e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   3c412:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   3c416:	4770      	bx	lr
   3c418:	40001000 	.word	0x40001000

0003c41c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   3c41c:	4a0a      	ldr	r2, [pc, #40]	; (3c448 <radio_aa_set+0x2c>)
   3c41e:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   3c420:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   3c422:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   3c426:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   3c42a:	78c3      	ldrb	r3, [r0, #3]
   3c42c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   3c430:	7843      	ldrb	r3, [r0, #1]
   3c432:	f890 c002 	ldrb.w	ip, [r0, #2]
   3c436:	7801      	ldrb	r1, [r0, #0]
   3c438:	041b      	lsls	r3, r3, #16
   3c43a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   3c43e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   3c442:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   3c446:	4770      	bx	lr
   3c448:	40001000 	.word	0x40001000

0003c44c <radio_pkt_configure>:
	switch (phy) {
   3c44c:	f3c2 0342 	ubfx	r3, r2, #1, #3
   3c450:	f1a3 0302 	sub.w	r3, r3, #2
   3c454:	fab3 f383 	clz	r3, r3
   3c458:	095b      	lsrs	r3, r3, #5
   3c45a:	061b      	lsls	r3, r3, #24
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   3c45c:	07d2      	lsls	r2, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   3c45e:	bf48      	it	mi
   3c460:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   3c464:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   3c468:	4a09      	ldr	r2, [pc, #36]	; (3c490 <radio_pkt_configure+0x44>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   3c46a:	4318      	orrs	r0, r3
   3c46c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   3c470:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   3c474:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   3c478:	4b06      	ldr	r3, [pc, #24]	; (3c494 <radio_pkt_configure+0x48>)
   3c47a:	4003      	ands	r3, r0
   3c47c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   3c480:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   3c484:	4319      	orrs	r1, r3
   3c486:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   3c48a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   3c48e:	4770      	bx	lr
   3c490:	40001000 	.word	0x40001000
   3c494:	fef80000 	.word	0xfef80000

0003c498 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   3c498:	4b01      	ldr	r3, [pc, #4]	; (3c4a0 <radio_pkt_rx_set+0x8>)
   3c49a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   3c49e:	4770      	bx	lr
   3c4a0:	40001000 	.word	0x40001000

0003c4a4 <radio_pkt_tx_set>:
   3c4a4:	4b01      	ldr	r3, [pc, #4]	; (3c4ac <radio_pkt_tx_set+0x8>)
   3c4a6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   3c4aa:	4770      	bx	lr
   3c4ac:	40001000 	.word	0x40001000

0003c4b0 <radio_tx_chain_delay_get>:
}
   3c4b0:	2001      	movs	r0, #1
   3c4b2:	4770      	bx	lr

0003c4b4 <radio_rx_ready_delay_get>:
}
   3c4b4:	2029      	movs	r0, #41	; 0x29
   3c4b6:	4770      	bx	lr

0003c4b8 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   3c4b8:	2802      	cmp	r0, #2
}
   3c4ba:	bf14      	ite	ne
   3c4bc:	200a      	movne	r0, #10
   3c4be:	2005      	moveq	r0, #5
   3c4c0:	4770      	bx	lr
   3c4c2:	bf00      	nop

0003c4c4 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c4c4:	4b01      	ldr	r3, [pc, #4]	; (3c4cc <radio_tx_enable+0x8>)
   3c4c6:	2201      	movs	r2, #1
   3c4c8:	601a      	str	r2, [r3, #0]
}
   3c4ca:	4770      	bx	lr
   3c4cc:	40001000 	.word	0x40001000

0003c4d0 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   3c4d0:	4a07      	ldr	r2, [pc, #28]	; (3c4f0 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   3c4d2:	4908      	ldr	r1, [pc, #32]	; (3c4f4 <radio_disable+0x24>)
{
   3c4d4:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   3c4d6:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   3c4d8:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   3c4dc:	2000      	movs	r0, #0
   3c4de:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   3c4e2:	6053      	str	r3, [r2, #4]
}
   3c4e4:	bc10      	pop	{r4}
   3c4e6:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   3c4e8:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   3c4ec:	610b      	str	r3, [r1, #16]
}
   3c4ee:	4770      	bx	lr
   3c4f0:	4001f000 	.word	0x4001f000
   3c4f4:	40001000 	.word	0x40001000

0003c4f8 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   3c4f8:	4b04      	ldr	r3, [pc, #16]	; (3c50c <radio_status_reset+0x14>)
   3c4fa:	2200      	movs	r2, #0
   3c4fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   3c500:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   3c504:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   3c508:	4770      	bx	lr
   3c50a:	bf00      	nop
   3c50c:	40001000 	.word	0x40001000

0003c510 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   3c510:	4b03      	ldr	r3, [pc, #12]	; (3c520 <radio_is_ready+0x10>)
   3c512:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   3c516:	3800      	subs	r0, #0
   3c518:	bf18      	it	ne
   3c51a:	2001      	movne	r0, #1
   3c51c:	4770      	bx	lr
   3c51e:	bf00      	nop
   3c520:	40001000 	.word	0x40001000

0003c524 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   3c524:	4b03      	ldr	r3, [pc, #12]	; (3c534 <radio_is_done+0x10>)
   3c526:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   3c52a:	3800      	subs	r0, #0
   3c52c:	bf18      	it	ne
   3c52e:	2001      	movne	r0, #1
   3c530:	4770      	bx	lr
   3c532:	bf00      	nop
   3c534:	40001000 	.word	0x40001000

0003c538 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   3c538:	4b03      	ldr	r3, [pc, #12]	; (3c548 <radio_is_idle+0x10>)
   3c53a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   3c53e:	fab0 f080 	clz	r0, r0
   3c542:	0940      	lsrs	r0, r0, #5
   3c544:	4770      	bx	lr
   3c546:	bf00      	nop
   3c548:	40001000 	.word	0x40001000

0003c54c <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   3c54c:	4b04      	ldr	r3, [pc, #16]	; (3c560 <radio_crc_configure+0x14>)
   3c54e:	f240 1203 	movw	r2, #259	; 0x103
   3c552:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   3c556:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   3c55a:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   3c55e:	4770      	bx	lr
   3c560:	40001000 	.word	0x40001000

0003c564 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   3c564:	4b03      	ldr	r3, [pc, #12]	; (3c574 <radio_crc_is_valid+0x10>)
   3c566:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   3c56a:	3800      	subs	r0, #0
   3c56c:	bf18      	it	ne
   3c56e:	2001      	movne	r0, #1
   3c570:	4770      	bx	lr
   3c572:	bf00      	nop
   3c574:	40001000 	.word	0x40001000

0003c578 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   3c578:	4800      	ldr	r0, [pc, #0]	; (3c57c <radio_pkt_empty_get+0x4>)
   3c57a:	4770      	bx	lr
   3c57c:	20002c6c 	.word	0x20002c6c

0003c580 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   3c580:	4800      	ldr	r0, [pc, #0]	; (3c584 <radio_pkt_scratch_get+0x4>)
   3c582:	4770      	bx	lr
   3c584:	20002c70 	.word	0x20002c70

0003c588 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c588:	4b1d      	ldr	r3, [pc, #116]	; (3c600 <radio_switch_complete_and_rx+0x78>)
{
   3c58a:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c58c:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3c58e:	4d1d      	ldr	r5, [pc, #116]	; (3c604 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c590:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3c594:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c596:	4e1c      	ldr	r6, [pc, #112]	; (3c608 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c598:	4c1c      	ldr	r4, [pc, #112]	; (3c60c <radio_switch_complete_and_rx+0x84>)
   3c59a:	4f1d      	ldr	r7, [pc, #116]	; (3c610 <radio_switch_complete_and_rx+0x88>)
   3c59c:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   3c5a0:	f102 030c 	add.w	r3, r2, #12
   3c5a4:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3c5a6:	00d0      	lsls	r0, r2, #3
   3c5a8:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c5aa:	0091      	lsls	r1, r2, #2
   3c5ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3c5b0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   3c5b4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   3c5b8:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c5bc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   3c5c0:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   3c5c4:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c5c8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c5cc:	4811      	ldr	r0, [pc, #68]	; (3c614 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c5ce:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c5d2:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   3c5d6:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   3c5da:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   3c5dc:	bf8a      	itet	hi
   3c5de:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   3c5e2:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   3c5e4:	3b2d      	subhi	r3, #45	; 0x2d
   3c5e6:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   3c5ea:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   3c5ec:	4b06      	ldr	r3, [pc, #24]	; (3c608 <radio_switch_complete_and_rx+0x80>)
   3c5ee:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   3c5f2:	f002 0201 	and.w	r2, r2, #1
   3c5f6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   3c5fa:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3c5fc:	bcf0      	pop	{r4, r5, r6, r7}
   3c5fe:	4770      	bx	lr
   3c600:	40001000 	.word	0x40001000
   3c604:	20003c78 	.word	0x20003c78
   3c608:	4001f000 	.word	0x4001f000
   3c60c:	40009140 	.word	0x40009140
   3c610:	4000110c 	.word	0x4000110c
   3c614:	40001004 	.word	0x40001004

0003c618 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   3c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c61c:	4e28      	ldr	r6, [pc, #160]	; (3c6c0 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3c61e:	4c29      	ldr	r4, [pc, #164]	; (3c6c4 <radio_switch_complete_and_tx+0xac>)
   3c620:	4f29      	ldr	r7, [pc, #164]	; (3c6c8 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c622:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 3c6cc <radio_switch_complete_and_tx+0xb4>
   3c626:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 3c6d0 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   3c62a:	2303      	movs	r3, #3
   3c62c:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   3c630:	7821      	ldrb	r1, [r4, #0]
   3c632:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   3c636:	f101 030c 	add.w	r3, r1, #12
   3c63a:	b2db      	uxtb	r3, r3
   3c63c:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3c63e:	00cd      	lsls	r5, r1, #3
   3c640:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3c644:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   3c648:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c64c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   3c650:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c654:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c658:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   3c65c:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c660:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   3c664:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   3c668:	2a02      	cmp	r2, #2
   3c66a:	bf08      	it	eq
   3c66c:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   3c66e:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   3c672:	f242 42b8 	movw	r2, #9400	; 0x24b8
   3c676:	f241 3588 	movw	r5, #5000	; 0x1388
   3c67a:	2802      	cmp	r0, #2
   3c67c:	bf08      	it	eq
   3c67e:	462a      	moveq	r2, r5
   3c680:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   3c684:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   3c688:	4413      	add	r3, r2
   3c68a:	4a12      	ldr	r2, [pc, #72]	; (3c6d4 <radio_switch_complete_and_tx+0xbc>)
   3c68c:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   3c690:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   3c694:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   3c698:	bf85      	ittet	hi
   3c69a:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   3c69c:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   3c6a0:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   3c6a2:	1a1b      	subhi	r3, r3, r0
   3c6a4:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   3c6a8:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   3c6aa:	4b08      	ldr	r3, [pc, #32]	; (3c6cc <radio_switch_complete_and_tx+0xb4>)
   3c6ac:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   3c6b0:	f001 0101 	and.w	r1, r1, #1
   3c6b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   3c6b8:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3c6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c6be:	bf00      	nop
   3c6c0:	40001000 	.word	0x40001000
   3c6c4:	20003c78 	.word	0x20003c78
   3c6c8:	40009140 	.word	0x40009140
   3c6cc:	4001f000 	.word	0x4001f000
   3c6d0:	4000110c 	.word	0x4000110c
   3c6d4:	10624dd3 	.word	0x10624dd3

0003c6d8 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   3c6d8:	4904      	ldr	r1, [pc, #16]	; (3c6ec <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   3c6da:	4b05      	ldr	r3, [pc, #20]	; (3c6f0 <radio_switch_complete_and_disable+0x18>)
   3c6dc:	2003      	movs	r0, #3
   3c6de:	f44f 6210 	mov.w	r2, #2304	; 0x900
   3c6e2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   3c6e6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3c6ea:	4770      	bx	lr
   3c6ec:	40001000 	.word	0x40001000
   3c6f0:	4001f000 	.word	0x4001f000

0003c6f4 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   3c6f4:	4b02      	ldr	r3, [pc, #8]	; (3c700 <radio_rssi_status_reset+0xc>)
   3c6f6:	2200      	movs	r2, #0
   3c6f8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   3c6fc:	4770      	bx	lr
   3c6fe:	bf00      	nop
   3c700:	40001000 	.word	0x40001000

0003c704 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   3c704:	4b03      	ldr	r3, [pc, #12]	; (3c714 <radio_rssi_is_ready+0x10>)
   3c706:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   3c70a:	3800      	subs	r0, #0
   3c70c:	bf18      	it	ne
   3c70e:	2001      	movne	r0, #1
   3c710:	4770      	bx	lr
   3c712:	bf00      	nop
   3c714:	40001000 	.word	0x40001000

0003c718 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   3c718:	b410      	push	{r4}
   3c71a:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   3c71e:	ea4f 038c 	mov.w	r3, ip, lsl #2
   3c722:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3c726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   3c72a:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   3c72c:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   3c730:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   3c734:	8894      	ldrh	r4, [r2, #4]
   3c736:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   3c73a:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   3c73e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   3c742:	d1ec      	bne.n	3c71e <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   3c744:	4b03      	ldr	r3, [pc, #12]	; (3c754 <radio_filter_configure+0x3c>)
}
   3c746:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   3c748:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   3c74c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   3c750:	4770      	bx	lr
   3c752:	bf00      	nop
   3c754:	40001000 	.word	0x40001000

0003c758 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   3c758:	4a03      	ldr	r2, [pc, #12]	; (3c768 <radio_filter_disable+0x10>)
   3c75a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   3c75e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3c762:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   3c766:	4770      	bx	lr
   3c768:	40001000 	.word	0x40001000

0003c76c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   3c76c:	4b02      	ldr	r3, [pc, #8]	; (3c778 <radio_filter_status_reset+0xc>)
   3c76e:	2200      	movs	r2, #0
   3c770:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   3c774:	4770      	bx	lr
   3c776:	bf00      	nop
   3c778:	40001000 	.word	0x40001000

0003c77c <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   3c77c:	4b03      	ldr	r3, [pc, #12]	; (3c78c <radio_filter_has_match+0x10>)
   3c77e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   3c782:	3800      	subs	r0, #0
   3c784:	bf18      	it	ne
   3c786:	2001      	movne	r0, #1
   3c788:	4770      	bx	lr
   3c78a:	bf00      	nop
   3c78c:	40001000 	.word	0x40001000

0003c790 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   3c790:	4b01      	ldr	r3, [pc, #4]	; (3c798 <radio_filter_match_get+0x8>)
   3c792:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   3c796:	4770      	bx	lr
   3c798:	40001000 	.word	0x40001000

0003c79c <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   3c79c:	4904      	ldr	r1, [pc, #16]	; (3c7b0 <radio_tmr_status_reset+0x14>)
   3c79e:	4b05      	ldr	r3, [pc, #20]	; (3c7b4 <radio_tmr_status_reset+0x18>)
   3c7a0:	4a05      	ldr	r2, [pc, #20]	; (3c7b8 <radio_tmr_status_reset+0x1c>)
   3c7a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   3c7a6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   3c7aa:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   3c7ae:	4770      	bx	lr
   3c7b0:	4000b000 	.word	0x4000b000
   3c7b4:	4001f000 	.word	0x4001f000
   3c7b8:	0e7000c0 	.word	0x0e7000c0

0003c7bc <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   3c7bc:	4b03      	ldr	r3, [pc, #12]	; (3c7cc <radio_tmr_tifs_set+0x10>)
   3c7be:	4a04      	ldr	r2, [pc, #16]	; (3c7d0 <radio_tmr_tifs_set+0x14>)
   3c7c0:	781b      	ldrb	r3, [r3, #0]
   3c7c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   3c7c6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3c7ca:	4770      	bx	lr
   3c7cc:	20003c78 	.word	0x20003c78
   3c7d0:	40009000 	.word	0x40009000

0003c7d4 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   3c7d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   3c7d8:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   3c7dc:	4d31      	ldr	r5, [pc, #196]	; (3c8a4 <radio_tmr_start+0xd0>)
   3c7de:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   3c7e2:	42ab      	cmp	r3, r5
{
   3c7e4:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   3c7e6:	d906      	bls.n	3c7f6 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   3c7e8:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   3c7ec:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   3c7f0:	3901      	subs	r1, #1
		remainder += 30517578UL;
   3c7f2:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c7f6:	4b2c      	ldr	r3, [pc, #176]	; (3c8a8 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   3c7f8:	482c      	ldr	r0, [pc, #176]	; (3c8ac <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   3c7fa:	4d2d      	ldr	r5, [pc, #180]	; (3c8b0 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c7fc:	4e2d      	ldr	r6, [pc, #180]	; (3c8b4 <radio_tmr_start+0xe0>)
   3c7fe:	2701      	movs	r7, #1
   3c800:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   3c802:	2700      	movs	r7, #0
   3c804:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   3c808:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   3c80c:	2704      	movs	r7, #4
   3c80e:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   3c812:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   3c814:	2702      	movs	r7, #2
   3c816:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   3c81a:	4a27      	ldr	r2, [pc, #156]	; (3c8b8 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   3c81c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   3c820:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   3c824:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   3c828:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   3c82c:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c82e:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c832:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   3c836:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   3c83a:	b364      	cbz	r4, 3c896 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   3c83c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   3c840:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   3c844:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   3c848:	4b1b      	ldr	r3, [pc, #108]	; (3c8b8 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c84a:	4a1c      	ldr	r2, [pc, #112]	; (3c8bc <radio_tmr_start+0xe8>)
   3c84c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   3c850:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   3c852:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c854:	f8df 8068 	ldr.w	r8, [pc, #104]	; 3c8c0 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c858:	f8df e068 	ldr.w	lr, [pc, #104]	; 3c8c4 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c85c:	f8df c068 	ldr.w	ip, [pc, #104]	; 3c8c8 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c860:	4f1a      	ldr	r7, [pc, #104]	; (3c8cc <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c862:	4e1b      	ldr	r6, [pc, #108]	; (3c8d0 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c864:	4d1b      	ldr	r5, [pc, #108]	; (3c8d4 <radio_tmr_start+0x100>)
   3c866:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   3c868:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   3c86c:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   3c870:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   3c874:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   3c878:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c87a:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c87e:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c882:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c886:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c88a:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c88e:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   3c892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   3c896:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   3c89a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   3c89e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   3c8a2:	e7d1      	b.n	3c848 <radio_tmr_start+0x74>
   3c8a4:	7ff0bdbf 	.word	0x7ff0bdbf
   3c8a8:	40008000 	.word	0x40008000
   3c8ac:	431bde83 	.word	0x431bde83
   3c8b0:	4000b000 	.word	0x4000b000
   3c8b4:	4000b148 	.word	0x4000b148
   3c8b8:	4001f000 	.word	0x4001f000
   3c8bc:	40009000 	.word	0x40009000
   3c8c0:	4000110c 	.word	0x4000110c
   3c8c4:	4000900c 	.word	0x4000900c
   3c8c8:	40009140 	.word	0x40009140
   3c8cc:	4001f004 	.word	0x4001f004
   3c8d0:	40009144 	.word	0x40009144
   3c8d4:	4001f00c 	.word	0x4001f00c

0003c8d8 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   3c8d8:	4b01      	ldr	r3, [pc, #4]	; (3c8e0 <radio_tmr_start_get+0x8>)
   3c8da:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   3c8de:	4770      	bx	lr
   3c8e0:	4000b000 	.word	0x4000b000

0003c8e4 <radio_tmr_stop>:
   3c8e4:	4903      	ldr	r1, [pc, #12]	; (3c8f4 <radio_tmr_stop+0x10>)
   3c8e6:	4a04      	ldr	r2, [pc, #16]	; (3c8f8 <radio_tmr_stop+0x14>)
   3c8e8:	2301      	movs	r3, #1
   3c8ea:	604b      	str	r3, [r1, #4]
   3c8ec:	610b      	str	r3, [r1, #16]
   3c8ee:	6053      	str	r3, [r2, #4]
   3c8f0:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   3c8f2:	4770      	bx	lr
   3c8f4:	40008000 	.word	0x40008000
   3c8f8:	40009000 	.word	0x40009000

0003c8fc <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   3c8fc:	4904      	ldr	r1, [pc, #16]	; (3c910 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   3c8fe:	4b05      	ldr	r3, [pc, #20]	; (3c914 <radio_tmr_hcto_configure+0x18>)
   3c900:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   3c904:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   3c908:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   3c90c:	4770      	bx	lr
   3c90e:	bf00      	nop
   3c910:	40008000 	.word	0x40008000
   3c914:	4001f000 	.word	0x4001f000

0003c918 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c918:	4b05      	ldr	r3, [pc, #20]	; (3c930 <radio_tmr_aa_capture+0x18>)
   3c91a:	4806      	ldr	r0, [pc, #24]	; (3c934 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c91c:	4906      	ldr	r1, [pc, #24]	; (3c938 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   3c91e:	4a07      	ldr	r2, [pc, #28]	; (3c93c <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   3c920:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   3c924:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   3c928:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   3c92c:	4770      	bx	lr
   3c92e:	bf00      	nop
   3c930:	4001f000 	.word	0x4001f000
   3c934:	40001100 	.word	0x40001100
   3c938:	40008040 	.word	0x40008040
   3c93c:	04000080 	.word	0x04000080

0003c940 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   3c940:	4b01      	ldr	r3, [pc, #4]	; (3c948 <radio_tmr_aa_get+0x8>)
   3c942:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   3c946:	4770      	bx	lr
   3c948:	40008000 	.word	0x40008000

0003c94c <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   3c94c:	4b01      	ldr	r3, [pc, #4]	; (3c954 <radio_tmr_aa_save+0x8>)
   3c94e:	6018      	str	r0, [r3, #0]
}
   3c950:	4770      	bx	lr
   3c952:	bf00      	nop
   3c954:	20002d7c 	.word	0x20002d7c

0003c958 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   3c958:	4b01      	ldr	r3, [pc, #4]	; (3c960 <radio_tmr_aa_restore+0x8>)
}
   3c95a:	6818      	ldr	r0, [r3, #0]
   3c95c:	4770      	bx	lr
   3c95e:	bf00      	nop
   3c960:	20002d7c 	.word	0x20002d7c

0003c964 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   3c964:	4b01      	ldr	r3, [pc, #4]	; (3c96c <radio_tmr_ready_get+0x8>)
   3c966:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   3c96a:	4770      	bx	lr
   3c96c:	40008000 	.word	0x40008000

0003c970 <radio_tmr_end_capture>:
   3c970:	4b02      	ldr	r3, [pc, #8]	; (3c97c <radio_tmr_end_capture+0xc>)
   3c972:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   3c976:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   3c97a:	4770      	bx	lr
   3c97c:	4001f000 	.word	0x4001f000

0003c980 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   3c980:	4b01      	ldr	r3, [pc, #4]	; (3c988 <radio_tmr_end_get+0x8>)
   3c982:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   3c986:	4770      	bx	lr
   3c988:	40008000 	.word	0x40008000

0003c98c <radio_tmr_tifs_base_get>:
   3c98c:	4b01      	ldr	r3, [pc, #4]	; (3c994 <radio_tmr_tifs_base_get+0x8>)
   3c98e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   3c992:	4770      	bx	lr
   3c994:	40008000 	.word	0x40008000

0003c998 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3c998:	4b17      	ldr	r3, [pc, #92]	; (3c9f8 <radio_ccm_rx_pkt_set+0x60>)
{
   3c99a:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3c99c:	2400      	movs	r4, #0
{
   3c99e:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3c9a0:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   3c9a2:	4816      	ldr	r0, [pc, #88]	; (3c9fc <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3c9a4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3c9a8:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   3c9ac:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   3c9b0:	4e13      	ldr	r6, [pc, #76]	; (3ca00 <radio_ccm_rx_pkt_set+0x68>)
   3c9b2:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   3c9b4:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   3c9b8:	4812      	ldr	r0, [pc, #72]	; (3ca04 <radio_ccm_rx_pkt_set+0x6c>)
   3c9ba:	2902      	cmp	r1, #2
   3c9bc:	bf08      	it	eq
   3c9be:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   3c9c0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   3c9c4:	4810      	ldr	r0, [pc, #64]	; (3ca08 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   3c9c6:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3c9ca:	4910      	ldr	r1, [pc, #64]	; (3ca0c <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   3c9cc:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   3c9d0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   3c9d4:	4a0e      	ldr	r2, [pc, #56]	; (3ca10 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3c9d6:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   3c9da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   3c9de:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   3c9e2:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   3c9e6:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   3c9ea:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c9ee:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   3c9f0:	bc70      	pop	{r4, r5, r6}
   3c9f2:	601a      	str	r2, [r3, #0]
   3c9f4:	4770      	bx	lr
   3c9f6:	bf00      	nop
   3c9f8:	4000f000 	.word	0x4000f000
   3c9fc:	40001000 	.word	0x40001000
   3ca00:	01010001 	.word	0x01010001
   3ca04:	01000001 	.word	0x01000001
   3ca08:	20002c70 	.word	0x20002c70
   3ca0c:	20002b60 	.word	0x20002b60
   3ca10:	4001f000 	.word	0x4001f000

0003ca14 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3ca14:	4b0f      	ldr	r3, [pc, #60]	; (3ca54 <radio_ccm_tx_pkt_set+0x40>)
{
   3ca16:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3ca18:	2200      	movs	r2, #0
{
   3ca1a:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3ca1c:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   3ca1e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   3ca22:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   3ca26:	480c      	ldr	r0, [pc, #48]	; (3ca58 <radio_ccm_tx_pkt_set+0x44>)
   3ca28:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   3ca2c:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   3ca30:	480a      	ldr	r0, [pc, #40]	; (3ca5c <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   3ca32:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3ca36:	4c0a      	ldr	r4, [pc, #40]	; (3ca60 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   3ca38:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   3ca3c:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   3ca3e:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   3ca42:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   3ca46:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   3ca48:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   3ca4c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   3ca50:	6019      	str	r1, [r3, #0]
}
   3ca52:	4770      	bx	lr
   3ca54:	4000f000 	.word	0x4000f000
   3ca58:	01010000 	.word	0x01010000
   3ca5c:	20002c70 	.word	0x20002c70
   3ca60:	20002b60 	.word	0x20002b60

0003ca64 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   3ca64:	4a0e      	ldr	r2, [pc, #56]	; (3caa0 <radio_ccm_is_done+0x3c>)
   3ca66:	2302      	movs	r3, #2
   3ca68:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   3ca6c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   3ca70:	b933      	cbnz	r3, 3ca80 <radio_ccm_is_done+0x1c>
		__WFE();
   3ca72:	bf20      	wfe
		__SEV();
   3ca74:	bf40      	sev
		__WFE();
   3ca76:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   3ca78:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   3ca7c:	2b00      	cmp	r3, #0
   3ca7e:	d0f8      	beq.n	3ca72 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   3ca80:	4b07      	ldr	r3, [pc, #28]	; (3caa0 <radio_ccm_is_done+0x3c>)
   3ca82:	4a08      	ldr	r2, [pc, #32]	; (3caa4 <radio_ccm_is_done+0x40>)
   3ca84:	2002      	movs	r0, #2
   3ca86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   3ca8a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   3ca8e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   3ca92:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   3ca96:	fab0 f080 	clz	r0, r0
   3ca9a:	0940      	lsrs	r0, r0, #5
   3ca9c:	4770      	bx	lr
   3ca9e:	bf00      	nop
   3caa0:	4000f000 	.word	0x4000f000
   3caa4:	e000e100 	.word	0xe000e100

0003caa8 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   3caa8:	4b03      	ldr	r3, [pc, #12]	; (3cab8 <radio_ccm_mic_is_valid+0x10>)
   3caaa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   3caae:	3800      	subs	r0, #0
   3cab0:	bf18      	it	ne
   3cab2:	2001      	movne	r0, #1
   3cab4:	4770      	bx	lr
   3cab6:	bf00      	nop
   3cab8:	4000f000 	.word	0x4000f000

0003cabc <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   3cabc:	4a15      	ldr	r2, [pc, #84]	; (3cb14 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   3cabe:	4b16      	ldr	r3, [pc, #88]	; (3cb18 <radio_ar_configure+0x5c>)
{
   3cac0:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   3cac2:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   3cac6:	4e15      	ldr	r6, [pc, #84]	; (3cb1c <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   3cac8:	2703      	movs	r7, #3
   3caca:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   3cace:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   3cad0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   3cad4:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   3cad6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   3cada:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   3cadc:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   3cae0:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   3cae4:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   3cae8:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   3caec:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   3caf0:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   3caf4:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   3caf8:	4909      	ldr	r1, [pc, #36]	; (3cb20 <radio_ar_configure+0x64>)
   3cafa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3cafe:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   3cb02:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   3cb06:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   3cb0a:	bcf0      	pop	{r4, r5, r6, r7}
   3cb0c:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   3cb10:	4770      	bx	lr
   3cb12:	bf00      	nop
   3cb14:	40001000 	.word	0x40001000
   3cb18:	4000f000 	.word	0x4000f000
   3cb1c:	20002b5c 	.word	0x20002b5c
   3cb20:	4001f000 	.word	0x4001f000

0003cb24 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   3cb24:	4b01      	ldr	r3, [pc, #4]	; (3cb2c <radio_ar_match_get+0x8>)
   3cb26:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   3cb2a:	4770      	bx	lr
   3cb2c:	4000f000 	.word	0x4000f000

0003cb30 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   3cb30:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   3cb32:	4807      	ldr	r0, [pc, #28]	; (3cb50 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   3cb34:	4c07      	ldr	r4, [pc, #28]	; (3cb54 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   3cb36:	4a08      	ldr	r2, [pc, #32]	; (3cb58 <radio_ar_status_reset+0x28>)
   3cb38:	2300      	movs	r3, #0
   3cb3a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   3cb3e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   3cb42:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   3cb46:	bc10      	pop	{r4}
   3cb48:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   3cb4c:	4770      	bx	lr
   3cb4e:	bf00      	nop
   3cb50:	4000f000 	.word	0x4000f000
   3cb54:	40001000 	.word	0x40001000
   3cb58:	4001f000 	.word	0x4001f000

0003cb5c <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   3cb5c:	4b08      	ldr	r3, [pc, #32]	; (3cb80 <radio_ar_has_match+0x24>)
   3cb5e:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   3cb62:	b160      	cbz	r0, 3cb7e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   3cb64:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   3cb68:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   3cb6c:	b138      	cbz	r0, 3cb7e <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   3cb6e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   3cb72:	b120      	cbz	r0, 3cb7e <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   3cb74:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   3cb78:	fab0 f080 	clz	r0, r0
   3cb7c:	0940      	lsrs	r0, r0, #5
}
   3cb7e:	4770      	bx	lr
   3cb80:	40001000 	.word	0x40001000

0003cb84 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   3cb84:	2902      	cmp	r1, #2
{
   3cb86:	b510      	push	{r4, lr}
   3cb88:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   3cb8a:	d00b      	beq.n	3cba4 <mayfly_enable_cb+0x20>
   3cb8c:	4a0a      	ldr	r2, [pc, #40]	; (3cbb8 <mayfly_enable_cb+0x34>)
   3cb8e:	490b      	ldr	r1, [pc, #44]	; (3cbbc <mayfly_enable_cb+0x38>)
   3cb90:	480b      	ldr	r0, [pc, #44]	; (3cbc0 <mayfly_enable_cb+0x3c>)
   3cb92:	231e      	movs	r3, #30
   3cb94:	f006 f85a 	bl	42c4c <printk>
   3cb98:	4040      	eors	r0, r0
   3cb9a:	f380 8811 	msr	BASEPRI, r0
   3cb9e:	f04f 0003 	mov.w	r0, #3
   3cba2:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   3cba4:	200b      	movs	r0, #11
	if (enable) {
   3cba6:	b11c      	cbz	r4, 3cbb0 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   3cba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   3cbac:	f7ed ba4a 	b.w	2a044 <arch_irq_enable>
}
   3cbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   3cbb4:	f7ed ba54 	b.w	2a060 <arch_irq_disable>
   3cbb8:	0004ac48 	.word	0x0004ac48
   3cbbc:	0004ac98 	.word	0x0004ac98
   3cbc0:	0004a024 	.word	0x0004a024

0003cbc4 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   3cbc4:	b129      	cbz	r1, 3cbd2 <mayfly_is_enabled+0xe>
   3cbc6:	3901      	subs	r1, #1
   3cbc8:	2901      	cmp	r1, #1
   3cbca:	d805      	bhi.n	3cbd8 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   3cbcc:	200b      	movs	r0, #11
   3cbce:	f7ed ba5b 	b.w	2a088 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   3cbd2:	2018      	movs	r0, #24
   3cbd4:	f7ed ba58 	b.w	2a088 <arch_irq_is_enabled>
{
   3cbd8:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   3cbda:	4a07      	ldr	r2, [pc, #28]	; (3cbf8 <mayfly_is_enabled+0x34>)
   3cbdc:	4907      	ldr	r1, [pc, #28]	; (3cbfc <mayfly_is_enabled+0x38>)
   3cbde:	4808      	ldr	r0, [pc, #32]	; (3cc00 <mayfly_is_enabled+0x3c>)
   3cbe0:	2336      	movs	r3, #54	; 0x36
   3cbe2:	f006 f833 	bl	42c4c <printk>
   3cbe6:	4040      	eors	r0, r0
   3cbe8:	f380 8811 	msr	BASEPRI, r0
   3cbec:	f04f 0003 	mov.w	r0, #3
   3cbf0:	df02      	svc	2
		break;
	}

	return 0;
}
   3cbf2:	2000      	movs	r0, #0
   3cbf4:	bd08      	pop	{r3, pc}
   3cbf6:	bf00      	nop
   3cbf8:	0004ac48 	.word	0x0004ac48
   3cbfc:	0004a084 	.word	0x0004a084
   3cc00:	0004a024 	.word	0x0004a024

0003cc04 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   3cc04:	4288      	cmp	r0, r1
   3cc06:	d00b      	beq.n	3cc20 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   3cc08:	2801      	cmp	r0, #1
   3cc0a:	d003      	beq.n	3cc14 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   3cc0c:	2802      	cmp	r0, #2
   3cc0e:	d009      	beq.n	3cc24 <mayfly_prio_is_equal+0x20>
   3cc10:	2000      	movs	r0, #0
#endif
	       0;
}
   3cc12:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   3cc14:	f1a1 0002 	sub.w	r0, r1, #2
   3cc18:	fab0 f080 	clz	r0, r0
   3cc1c:	0940      	lsrs	r0, r0, #5
   3cc1e:	4770      	bx	lr
   3cc20:	2001      	movs	r0, #1
   3cc22:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   3cc24:	f1a1 0001 	sub.w	r0, r1, #1
   3cc28:	fab0 f080 	clz	r0, r0
   3cc2c:	0940      	lsrs	r0, r0, #5
   3cc2e:	4770      	bx	lr

0003cc30 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   3cc30:	2901      	cmp	r1, #1
{
   3cc32:	b508      	push	{r3, lr}
	switch (callee_id) {
   3cc34:	d00f      	beq.n	3cc56 <mayfly_pend+0x26>
   3cc36:	2902      	cmp	r1, #2
   3cc38:	d00d      	beq.n	3cc56 <mayfly_pend+0x26>
   3cc3a:	b191      	cbz	r1, 3cc62 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   3cc3c:	4a0c      	ldr	r2, [pc, #48]	; (3cc70 <mayfly_pend+0x40>)
   3cc3e:	490d      	ldr	r1, [pc, #52]	; (3cc74 <mayfly_pend+0x44>)
   3cc40:	480d      	ldr	r0, [pc, #52]	; (3cc78 <mayfly_pend+0x48>)
   3cc42:	2367      	movs	r3, #103	; 0x67
   3cc44:	f006 f802 	bl	42c4c <printk>
   3cc48:	4040      	eors	r0, r0
   3cc4a:	f380 8811 	msr	BASEPRI, r0
   3cc4e:	f04f 0003 	mov.w	r0, #3
   3cc52:	df02      	svc	2
		break;
	}
}
   3cc54:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3cc56:	4b09      	ldr	r3, [pc, #36]	; (3cc7c <mayfly_pend+0x4c>)
   3cc58:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3cc5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3cc60:	bd08      	pop	{r3, pc}
   3cc62:	4b06      	ldr	r3, [pc, #24]	; (3cc7c <mayfly_pend+0x4c>)
   3cc64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   3cc68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3cc6c:	bd08      	pop	{r3, pc}
   3cc6e:	bf00      	nop
   3cc70:	0004ac48 	.word	0x0004ac48
   3cc74:	0004a084 	.word	0x0004a084
   3cc78:	0004a024 	.word	0x0004a024
   3cc7c:	e000e100 	.word	0xe000e100

0003cc80 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   3cc80:	2803      	cmp	r0, #3
{
   3cc82:	b510      	push	{r4, lr}
   3cc84:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   3cc86:	d804      	bhi.n	3cc92 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   3cc88:	4b11      	ldr	r3, [pc, #68]	; (3ccd0 <hal_ticker_instance0_caller_id_get+0x50>)
   3cc8a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   3cc8c:	b18c      	cbz	r4, 3ccb2 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   3cc8e:	4620      	mov	r0, r4
   3cc90:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   3cc92:	4a10      	ldr	r2, [pc, #64]	; (3ccd4 <hal_ticker_instance0_caller_id_get+0x54>)
   3cc94:	4910      	ldr	r1, [pc, #64]	; (3ccd8 <hal_ticker_instance0_caller_id_get+0x58>)
   3cc96:	4811      	ldr	r0, [pc, #68]	; (3ccdc <hal_ticker_instance0_caller_id_get+0x5c>)
   3cc98:	232b      	movs	r3, #43	; 0x2b
   3cc9a:	f005 ffd7 	bl	42c4c <printk>
   3cc9e:	4040      	eors	r0, r0
   3cca0:	f380 8811 	msr	BASEPRI, r0
   3cca4:	f04f 0003 	mov.w	r0, #3
   3cca8:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   3ccaa:	4b09      	ldr	r3, [pc, #36]	; (3ccd0 <hal_ticker_instance0_caller_id_get+0x50>)
   3ccac:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   3ccae:	2c00      	cmp	r4, #0
   3ccb0:	d1ed      	bne.n	3cc8e <hal_ticker_instance0_caller_id_get+0xe>
   3ccb2:	4a08      	ldr	r2, [pc, #32]	; (3ccd4 <hal_ticker_instance0_caller_id_get+0x54>)
   3ccb4:	490a      	ldr	r1, [pc, #40]	; (3cce0 <hal_ticker_instance0_caller_id_get+0x60>)
   3ccb6:	4809      	ldr	r0, [pc, #36]	; (3ccdc <hal_ticker_instance0_caller_id_get+0x5c>)
   3ccb8:	232e      	movs	r3, #46	; 0x2e
   3ccba:	f005 ffc7 	bl	42c4c <printk>
   3ccbe:	4040      	eors	r0, r0
   3ccc0:	f380 8811 	msr	BASEPRI, r0
   3ccc4:	f04f 0003 	mov.w	r0, #3
   3ccc8:	df02      	svc	2
}
   3ccca:	4620      	mov	r0, r4
   3cccc:	bd10      	pop	{r4, pc}
   3ccce:	bf00      	nop
   3ccd0:	0004ad28 	.word	0x0004ad28
   3ccd4:	0004aca8 	.word	0x0004aca8
   3ccd8:	0004acf8 	.word	0x0004acf8
   3ccdc:	0004a024 	.word	0x0004a024
   3cce0:	0004ad18 	.word	0x0004ad18

0003cce4 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   3cce4:	3801      	subs	r0, #1
{
   3cce6:	b510      	push	{r4, lr}
   3cce8:	461c      	mov	r4, r3
	switch (caller_id) {
   3ccea:	2804      	cmp	r0, #4
   3ccec:	f200 8082 	bhi.w	3cdf4 <hal_ticker_instance0_sched+0x110>
   3ccf0:	e8df f000 	tbb	[pc, r0]
   3ccf4:	3f302112 	.word	0x3f302112
   3ccf8:	03          	.byte	0x03
   3ccf9:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   3ccfa:	2904      	cmp	r1, #4
   3ccfc:	d04a      	beq.n	3cd94 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   3ccfe:	4a44      	ldr	r2, [pc, #272]	; (3ce10 <hal_ticker_instance0_sched+0x12c>)
   3cd00:	4944      	ldr	r1, [pc, #272]	; (3ce14 <hal_ticker_instance0_sched+0x130>)
   3cd02:	4845      	ldr	r0, [pc, #276]	; (3ce18 <hal_ticker_instance0_sched+0x134>)
   3cd04:	23ba      	movs	r3, #186	; 0xba
   3cd06:	f005 ffa1 	bl	42c4c <printk>
   3cd0a:	4040      	eors	r0, r0
   3cd0c:	f380 8811 	msr	BASEPRI, r0
   3cd10:	f04f 0003 	mov.w	r0, #3
   3cd14:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   3cd16:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3cd18:	2904      	cmp	r1, #4
   3cd1a:	d043      	beq.n	3cda4 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   3cd1c:	4a3c      	ldr	r2, [pc, #240]	; (3ce10 <hal_ticker_instance0_sched+0x12c>)
   3cd1e:	493d      	ldr	r1, [pc, #244]	; (3ce14 <hal_ticker_instance0_sched+0x130>)
   3cd20:	483d      	ldr	r0, [pc, #244]	; (3ce18 <hal_ticker_instance0_sched+0x134>)
   3cd22:	234e      	movs	r3, #78	; 0x4e
   3cd24:	f005 ff92 	bl	42c4c <printk>
   3cd28:	4040      	eors	r0, r0
   3cd2a:	f380 8811 	msr	BASEPRI, r0
   3cd2e:	f04f 0003 	mov.w	r0, #3
   3cd32:	df02      	svc	2
}
   3cd34:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3cd36:	2903      	cmp	r1, #3
   3cd38:	d03c      	beq.n	3cdb4 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   3cd3a:	4a35      	ldr	r2, [pc, #212]	; (3ce10 <hal_ticker_instance0_sched+0x12c>)
   3cd3c:	4935      	ldr	r1, [pc, #212]	; (3ce14 <hal_ticker_instance0_sched+0x130>)
   3cd3e:	4836      	ldr	r0, [pc, #216]	; (3ce18 <hal_ticker_instance0_sched+0x134>)
   3cd40:	2365      	movs	r3, #101	; 0x65
   3cd42:	f005 ff83 	bl	42c4c <printk>
   3cd46:	4040      	eors	r0, r0
   3cd48:	f380 8811 	msr	BASEPRI, r0
   3cd4c:	f04f 0003 	mov.w	r0, #3
   3cd50:	df02      	svc	2
}
   3cd52:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3cd54:	2904      	cmp	r1, #4
   3cd56:	d035      	beq.n	3cdc4 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   3cd58:	4a2d      	ldr	r2, [pc, #180]	; (3ce10 <hal_ticker_instance0_sched+0x12c>)
   3cd5a:	492e      	ldr	r1, [pc, #184]	; (3ce14 <hal_ticker_instance0_sched+0x130>)
   3cd5c:	482e      	ldr	r0, [pc, #184]	; (3ce18 <hal_ticker_instance0_sched+0x134>)
   3cd5e:	237c      	movs	r3, #124	; 0x7c
   3cd60:	f005 ff74 	bl	42c4c <printk>
   3cd64:	4040      	eors	r0, r0
   3cd66:	f380 8811 	msr	BASEPRI, r0
   3cd6a:	f04f 0003 	mov.w	r0, #3
   3cd6e:	df02      	svc	2
}
   3cd70:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   3cd72:	2903      	cmp	r1, #3
   3cd74:	d036      	beq.n	3cde4 <hal_ticker_instance0_sched+0x100>
   3cd76:	2904      	cmp	r1, #4
   3cd78:	d02c      	beq.n	3cdd4 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   3cd7a:	4a25      	ldr	r2, [pc, #148]	; (3ce10 <hal_ticker_instance0_sched+0x12c>)
   3cd7c:	4925      	ldr	r1, [pc, #148]	; (3ce14 <hal_ticker_instance0_sched+0x130>)
   3cd7e:	4826      	ldr	r0, [pc, #152]	; (3ce18 <hal_ticker_instance0_sched+0x134>)
   3cd80:	23a2      	movs	r3, #162	; 0xa2
   3cd82:	f005 ff63 	bl	42c4c <printk>
   3cd86:	4040      	eors	r0, r0
   3cd88:	f380 8811 	msr	BASEPRI, r0
   3cd8c:	f04f 0003 	mov.w	r0, #3
   3cd90:	df02      	svc	2
}
   3cd92:	bd10      	pop	{r4, pc}
			m.param = instance;
   3cd94:	4b21      	ldr	r3, [pc, #132]	; (3ce1c <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   3cd96:	2102      	movs	r1, #2
			m.param = instance;
   3cd98:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   3cd9a:	2003      	movs	r0, #3
}
   3cd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   3cda0:	f7f2 be6c 	b.w	2fa7c <mayfly_enqueue>
			m.param = instance;
   3cda4:	4b1e      	ldr	r3, [pc, #120]	; (3ce20 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   3cda6:	2102      	movs	r1, #2
			m.param = instance;
   3cda8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   3cdaa:	2000      	movs	r0, #0
}
   3cdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   3cdb0:	f7f2 be64 	b.w	2fa7c <mayfly_enqueue>
			m.param = instance;
   3cdb4:	4b1b      	ldr	r3, [pc, #108]	; (3ce24 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   3cdb6:	2101      	movs	r1, #1
			m.param = instance;
   3cdb8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   3cdba:	4608      	mov	r0, r1
}
   3cdbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   3cdc0:	f7f2 be5c 	b.w	2fa7c <mayfly_enqueue>
			m.param = instance;
   3cdc4:	4b18      	ldr	r3, [pc, #96]	; (3ce28 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   3cdc6:	2102      	movs	r1, #2
			m.param = instance;
   3cdc8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   3cdca:	2001      	movs	r0, #1
}
   3cdcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   3cdd0:	f7f2 be54 	b.w	2fa7c <mayfly_enqueue>
			m.param = instance;
   3cdd4:	4b15      	ldr	r3, [pc, #84]	; (3ce2c <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3cdd6:	2102      	movs	r1, #2
			m.param = instance;
   3cdd8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3cdda:	4608      	mov	r0, r1
}
   3cddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3cde0:	f7f2 be4c 	b.w	2fa7c <mayfly_enqueue>
			m.param = instance;
   3cde4:	4b12      	ldr	r3, [pc, #72]	; (3ce30 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3cde6:	2101      	movs	r1, #1
			m.param = instance;
   3cde8:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3cdea:	2002      	movs	r0, #2
}
   3cdec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   3cdf0:	f7f2 be44 	b.w	2fa7c <mayfly_enqueue>
		LL_ASSERT(0);
   3cdf4:	4a06      	ldr	r2, [pc, #24]	; (3ce10 <hal_ticker_instance0_sched+0x12c>)
   3cdf6:	4907      	ldr	r1, [pc, #28]	; (3ce14 <hal_ticker_instance0_sched+0x130>)
   3cdf8:	4807      	ldr	r0, [pc, #28]	; (3ce18 <hal_ticker_instance0_sched+0x134>)
   3cdfa:	23c0      	movs	r3, #192	; 0xc0
   3cdfc:	f005 ff26 	bl	42c4c <printk>
   3ce00:	4040      	eors	r0, r0
   3ce02:	f380 8811 	msr	BASEPRI, r0
   3ce06:	f04f 0003 	mov.w	r0, #3
   3ce0a:	df02      	svc	2
}
   3ce0c:	bd10      	pop	{r4, pc}
   3ce0e:	bf00      	nop
   3ce10:	0004aca8 	.word	0x0004aca8
   3ce14:	0004a084 	.word	0x0004a084
   3ce18:	0004a024 	.word	0x0004a024
   3ce1c:	200007e8 	.word	0x200007e8
   3ce20:	200007d8 	.word	0x200007d8
   3ce24:	200007c8 	.word	0x200007c8
   3ce28:	20000818 	.word	0x20000818
   3ce2c:	200007f8 	.word	0x200007f8
   3ce30:	20000808 	.word	0x20000808

0003ce34 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   3ce34:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   3ce36:	2000      	movs	r0, #0
   3ce38:	f7ff b9fa 	b.w	3c230 <cntr_cmp_set>

0003ce3c <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   3ce3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
{
   3ce40:	b508      	push	{r3, lr}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   3ce42:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   3ce46:	3101      	adds	r1, #1
{
   3ce48:	4603      	mov	r3, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   3ce4a:	d062      	beq.n	3cf12 <hci_vendor_read_static_addr+0xd6>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   3ce4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   3ce50:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   3ce54:	f010 0001 	ands.w	r0, r0, #1
   3ce58:	d100      	bne.n	3ce5c <hci_vendor_read_static_addr+0x20>

		return 1;
	}

	return 0;
}
   3ce5a:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   3ce5c:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
	dst[0] = val;
   3ce60:	7019      	strb	r1, [r3, #0]
	sys_put_le16(val >> 16, &dst[2]);
   3ce62:	0c08      	lsrs	r0, r1, #16
	dst[1] = val >> 8;
   3ce64:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   3ce68:	f3c1 2107 	ubfx	r1, r1, #8, #8
   3ce6c:	7059      	strb	r1, [r3, #1]
	dst[0] = val;
   3ce6e:	7098      	strb	r0, [r3, #2]
	dst[1] = val >> 8;
   3ce70:	f883 c003 	strb.w	ip, [r3, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   3ce74:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
	dst[0] = val;
   3ce78:	7119      	strb	r1, [r3, #4]
	dst[1] = val >> 8;
   3ce7a:	f3c1 2107 	ubfx	r1, r1, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   3ce7e:	f061 013f 	orn	r1, r1, #63	; 0x3f
   3ce82:	7159      	strb	r1, [r3, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   3ce84:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   3ce88:	3101      	adds	r1, #1
   3ce8a:	d03b      	beq.n	3cf04 <hci_vendor_read_static_addr+0xc8>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   3ce8c:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   3ce90:	3101      	adds	r1, #1
   3ce92:	d037      	beq.n	3cf04 <hci_vendor_read_static_addr+0xc8>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   3ce94:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   3ce98:	3101      	adds	r1, #1
   3ce9a:	d033      	beq.n	3cf04 <hci_vendor_read_static_addr+0xc8>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   3ce9c:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   3cea0:	3101      	adds	r1, #1
   3cea2:	d02f      	beq.n	3cf04 <hci_vendor_read_static_addr+0xc8>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   3cea4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
	dst[0] = val;
   3cea8:	7199      	strb	r1, [r3, #6]
	sys_put_le16(val >> 16, &dst[2]);
   3ceaa:	0c08      	lsrs	r0, r1, #16
	dst[1] = val >> 8;
   3ceac:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   3ceb0:	f3c1 2107 	ubfx	r1, r1, #8, #8
	dst[0] = val;
   3ceb4:	7218      	strb	r0, [r3, #8]
	dst[1] = val >> 8;
   3ceb6:	f883 c009 	strb.w	ip, [r3, #9]
   3ceba:	71d9      	strb	r1, [r3, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   3cebc:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	dst[0] = val;
   3cec0:	7299      	strb	r1, [r3, #10]
	sys_put_le16(val >> 16, &dst[2]);
   3cec2:	0c08      	lsrs	r0, r1, #16
	dst[1] = val >> 8;
   3cec4:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   3cec8:	f3c1 2107 	ubfx	r1, r1, #8, #8
	dst[0] = val;
   3cecc:	7318      	strb	r0, [r3, #12]
	dst[1] = val >> 8;
   3cece:	f883 c00d 	strb.w	ip, [r3, #13]
   3ced2:	72d9      	strb	r1, [r3, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   3ced4:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	dst[0] = val;
   3ced8:	7399      	strb	r1, [r3, #14]
	sys_put_le16(val >> 16, &dst[2]);
   3ceda:	0c08      	lsrs	r0, r1, #16
	dst[1] = val >> 8;
   3cedc:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   3cee0:	f3c1 2107 	ubfx	r1, r1, #8, #8
   3cee4:	73d9      	strb	r1, [r3, #15]
	dst[0] = val;
   3cee6:	7418      	strb	r0, [r3, #16]
	dst[1] = val >> 8;
   3cee8:	f883 c011 	strb.w	ip, [r3, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   3ceec:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
	dst[0] = val;
   3cef0:	749a      	strb	r2, [r3, #18]
	sys_put_le16(val >> 16, &dst[2]);
   3cef2:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   3cef4:	0a08      	lsrs	r0, r1, #8
   3cef6:	f3c2 2207 	ubfx	r2, r2, #8, #8
   3cefa:	7558      	strb	r0, [r3, #21]
   3cefc:	74da      	strb	r2, [r3, #19]
	dst[0] = val;
   3cefe:	7519      	strb	r1, [r3, #20]
		return 1;
   3cf00:	2001      	movs	r0, #1
}
   3cf02:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   3cf04:	2210      	movs	r2, #16
   3cf06:	2100      	movs	r1, #0
   3cf08:	1d98      	adds	r0, r3, #6
   3cf0a:	f007 ff85 	bl	44e18 <memset>
		return 1;
   3cf0e:	2001      	movs	r0, #1
}
   3cf10:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   3cf12:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
   3cf16:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3cf1a:	b292      	uxth	r2, r2
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   3cf1c:	428a      	cmp	r2, r1
   3cf1e:	d195      	bne.n	3ce4c <hci_vendor_read_static_addr+0x10>
	return 0;
   3cf20:	2000      	movs	r0, #0
}
   3cf22:	bd08      	pop	{r3, pc}

0003cf24 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   3cf24:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   3cf26:	2210      	movs	r2, #16
{
   3cf28:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   3cf2a:	2100      	movs	r1, #0
   3cf2c:	f007 ff74 	bl	44e18 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   3cf30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3cf34:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   3cf38:	3201      	adds	r2, #1
   3cf3a:	d034      	beq.n	3cfa6 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   3cf3c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   3cf40:	3201      	adds	r2, #1
   3cf42:	d030      	beq.n	3cfa6 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   3cf44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   3cf48:	3201      	adds	r2, #1
   3cf4a:	d02c      	beq.n	3cfa6 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   3cf4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   3cf50:	3201      	adds	r2, #1
   3cf52:	d028      	beq.n	3cfa6 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   3cf54:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   3cf58:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   3cf5a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   3cf5c:	0a08      	lsrs	r0, r1, #8
   3cf5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   3cf62:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   3cf64:	70e0      	strb	r0, [r4, #3]
   3cf66:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   3cf68:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   3cf6c:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   3cf6e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   3cf70:	0a08      	lsrs	r0, r1, #8
   3cf72:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   3cf76:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   3cf78:	71e0      	strb	r0, [r4, #7]
   3cf7a:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   3cf7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   3cf80:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   3cf82:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   3cf84:	0a08      	lsrs	r0, r1, #8
   3cf86:	f3c2 2207 	ubfx	r2, r2, #8, #8
   3cf8a:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   3cf8c:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   3cf8e:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   3cf90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   3cf94:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   3cf96:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   3cf98:	0a11      	lsrs	r1, r2, #8
   3cf9a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3cf9e:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   3cfa0:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   3cfa2:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   3cfa4:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   3cfa6:	4620      	mov	r0, r4
   3cfa8:	2210      	movs	r2, #16
}
   3cfaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   3cfae:	2100      	movs	r1, #0
   3cfb0:	f007 bf32 	b.w	44e18 <memset>

0003cfb4 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   3cfb4:	4b02      	ldr	r3, [pc, #8]	; (3cfc0 <net_buf_pool_get+0xc>)
   3cfb6:	222c      	movs	r2, #44	; 0x2c
   3cfb8:	fb02 3000 	mla	r0, r2, r0, r3
   3cfbc:	4770      	bx	lr
   3cfbe:	bf00      	nop
   3cfc0:	20000c3c 	.word	0x20000c3c

0003cfc4 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3cfc4:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   3cfc6:	4b06      	ldr	r3, [pc, #24]	; (3cfe0 <net_buf_id+0x1c>)
   3cfc8:	212c      	movs	r1, #44	; 0x2c
   3cfca:	fb01 3302 	mla	r3, r1, r2, r3
   3cfce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3cfd0:	7f1b      	ldrb	r3, [r3, #28]
   3cfd2:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   3cfd4:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3cfd6:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   3cfda:	fbb0 f0f3 	udiv	r0, r0, r3
   3cfde:	4770      	bx	lr
   3cfe0:	20000c3c 	.word	0x20000c3c

0003cfe4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   3cfe4:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3cfe6:	4b0a      	ldr	r3, [pc, #40]	; (3d010 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3cfe8:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3cfea:	242c      	movs	r4, #44	; 0x2c
   3cfec:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   3cff0:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3cff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3cff4:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   3cff6:	6823      	ldr	r3, [r4, #0]
   3cff8:	429a      	cmp	r2, r3
   3cffa:	bf94      	ite	ls
   3cffc:	600a      	strls	r2, [r1, #0]
   3cffe:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   3d000:	f7ff ffe0 	bl	3cfc4 <net_buf_id>
   3d004:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   3d008:	fb02 3000 	mla	r0, r2, r0, r3
   3d00c:	bd10      	pop	{r4, pc}
   3d00e:	bf00      	nop
   3d010:	20000c3c 	.word	0x20000c3c

0003d014 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   3d014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d018:	4605      	mov	r5, r0
   3d01a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   3d01c:	4610      	mov	r0, r2
   3d01e:	4619      	mov	r1, r3
{
   3d020:	4691      	mov	r9, r2
   3d022:	4698      	mov	r8, r3
   3d024:	4617      	mov	r7, r2
   3d026:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   3d028:	f00b ffa6 	bl	48f78 <sys_clock_timeout_end_calc>
   3d02c:	4682      	mov	sl, r0
   3d02e:	468b      	mov	fp, r1
	__asm__ volatile(
   3d030:	f04f 0320 	mov.w	r3, #32
   3d034:	f3ef 8111 	mrs	r1, BASEPRI
   3d038:	f383 8812 	msr	BASEPRI_MAX, r3
   3d03c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   3d040:	8b6b      	ldrh	r3, [r5, #26]
   3d042:	2b00      	cmp	r3, #0
   3d044:	d05a      	beq.n	3d0fc <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   3d046:	8b2a      	ldrh	r2, [r5, #24]
   3d048:	429a      	cmp	r2, r3
   3d04a:	d93e      	bls.n	3d0ca <net_buf_alloc_len+0xb6>
   3d04c:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   3d04e:	2200      	movs	r2, #0
   3d050:	2300      	movs	r3, #0
   3d052:	4628      	mov	r0, r5
   3d054:	f004 fa98 	bl	41588 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   3d058:	9900      	ldr	r1, [sp, #0]
   3d05a:	4604      	mov	r4, r0
   3d05c:	2800      	cmp	r0, #0
   3d05e:	d034      	beq.n	3d0ca <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   3d060:	f381 8811 	msr	BASEPRI, r1
   3d064:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   3d068:	9b01      	ldr	r3, [sp, #4]
   3d06a:	2b00      	cmp	r3, #0
   3d06c:	d056      	beq.n	3d11c <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   3d06e:	ea58 0309 	orrs.w	r3, r8, r9
   3d072:	d00f      	beq.n	3d094 <net_buf_alloc_len+0x80>
   3d074:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   3d078:	bf08      	it	eq
   3d07a:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   3d07e:	d009      	beq.n	3d094 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   3d080:	f005 f966 	bl	42350 <sys_clock_tick_get>
   3d084:	ebba 0700 	subs.w	r7, sl, r0
   3d088:	eb6b 0601 	sbc.w	r6, fp, r1
   3d08c:	2e00      	cmp	r6, #0
   3d08e:	bfbc      	itt	lt
   3d090:	2700      	movlt	r7, #0
   3d092:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3d094:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   3d096:	f8df 809c 	ldr.w	r8, [pc, #156]	; 3d134 <net_buf_alloc_len+0x120>
   3d09a:	f04f 092c 	mov.w	r9, #44	; 0x2c
   3d09e:	fb09 8303 	mla	r3, r9, r3, r8
   3d0a2:	463a      	mov	r2, r7
   3d0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3d0a6:	681b      	ldr	r3, [r3, #0]
   3d0a8:	a901      	add	r1, sp, #4
   3d0aa:	681d      	ldr	r5, [r3, #0]
   3d0ac:	4620      	mov	r0, r4
   3d0ae:	4633      	mov	r3, r6
   3d0b0:	47a8      	blx	r5
   3d0b2:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   3d0b4:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   3d0b6:	2800      	cmp	r0, #0
   3d0b8:	d131      	bne.n	3d11e <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   3d0ba:	79a0      	ldrb	r0, [r4, #6]
   3d0bc:	4621      	mov	r1, r4
   3d0be:	fb00 8009 	mla	r0, r0, r9, r8
   3d0c2:	f00b fcc7 	bl	48a54 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   3d0c6:	462c      	mov	r4, r5
}
   3d0c8:	e024      	b.n	3d114 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   3d0ca:	8b68      	ldrh	r0, [r5, #26]
   3d0cc:	1e43      	subs	r3, r0, #1
   3d0ce:	836b      	strh	r3, [r5, #26]
   3d0d0:	f381 8811 	msr	BASEPRI, r1
   3d0d4:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3d0d8:	7f2a      	ldrb	r2, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   3d0da:	8b29      	ldrh	r1, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   3d0dc:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3d0de:	f102 0317 	add.w	r3, r2, #23
   3d0e2:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   3d0e6:	1a09      	subs	r1, r1, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   3d0e8:	fb01 4403 	mla	r4, r1, r3, r4
	return pool - _net_buf_pool_list;
   3d0ec:	4b11      	ldr	r3, [pc, #68]	; (3d134 <net_buf_alloc_len+0x120>)
   3d0ee:	4912      	ldr	r1, [pc, #72]	; (3d138 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   3d0f0:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   3d0f2:	1aeb      	subs	r3, r5, r3
   3d0f4:	109b      	asrs	r3, r3, #2
   3d0f6:	434b      	muls	r3, r1
	buf->pool_id = pool_id(pool);
   3d0f8:	71a3      	strb	r3, [r4, #6]
		goto success;
   3d0fa:	e7b5      	b.n	3d068 <net_buf_alloc_len+0x54>
   3d0fc:	f381 8811 	msr	BASEPRI, r1
   3d100:	f3bf 8f6f 	isb	sy
   3d104:	464a      	mov	r2, r9
   3d106:	4643      	mov	r3, r8
   3d108:	4628      	mov	r0, r5
   3d10a:	f004 fa3d 	bl	41588 <z_impl_k_queue_get>
	if (!buf) {
   3d10e:	4604      	mov	r4, r0
   3d110:	2800      	cmp	r0, #0
   3d112:	d1a9      	bne.n	3d068 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   3d114:	4620      	mov	r0, r4
   3d116:	b003      	add	sp, #12
   3d118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   3d11c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   3d11e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   3d120:	2201      	movs	r2, #1
	buf->frags = NULL;
   3d122:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   3d124:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   3d126:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   3d128:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   3d12a:	6923      	ldr	r3, [r4, #16]
   3d12c:	81e2      	strh	r2, [r4, #14]
   3d12e:	60a3      	str	r3, [r4, #8]
	return buf;
   3d130:	e7f0      	b.n	3d114 <net_buf_alloc_len+0x100>
   3d132:	bf00      	nop
   3d134:	20000c3c 	.word	0x20000c3c
   3d138:	ba2e8ba3 	.word	0xba2e8ba3

0003d13c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   3d13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d140:	4d16      	ldr	r5, [pc, #88]	; (3d19c <net_buf_unref+0x60>)
   3d142:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   3d144:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   3d146:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   3d148:	b90c      	cbnz	r4, 3d14e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   3d14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   3d14e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   3d150:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   3d154:	3b01      	subs	r3, #1
   3d156:	b2db      	uxtb	r3, r3
   3d158:	7123      	strb	r3, [r4, #4]
   3d15a:	2b00      	cmp	r3, #0
   3d15c:	d1f5      	bne.n	3d14a <net_buf_unref+0xe>
		if (buf->__buf) {
   3d15e:	6921      	ldr	r1, [r4, #16]
   3d160:	b159      	cbz	r1, 3d17a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   3d162:	7963      	ldrb	r3, [r4, #5]
   3d164:	079b      	lsls	r3, r3, #30
   3d166:	d407      	bmi.n	3d178 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3d168:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   3d16a:	fb07 5303 	mla	r3, r7, r3, r5
   3d16e:	4620      	mov	r0, r4
   3d170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3d172:	681b      	ldr	r3, [r3, #0]
   3d174:	689b      	ldr	r3, [r3, #8]
   3d176:	4798      	blx	r3
			buf->__buf = NULL;
   3d178:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   3d17a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   3d17c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   3d17e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   3d182:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   3d184:	6a1b      	ldr	r3, [r3, #32]
   3d186:	b11b      	cbz	r3, 3d190 <net_buf_unref+0x54>
			pool->destroy(buf);
   3d188:	4620      	mov	r0, r4
   3d18a:	4798      	blx	r3
{
   3d18c:	4644      	mov	r4, r8
   3d18e:	e7db      	b.n	3d148 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   3d190:	4621      	mov	r1, r4
   3d192:	fb00 5007 	mla	r0, r0, r7, r5
   3d196:	f00b fc5d 	bl	48a54 <k_queue_prepend>
}
   3d19a:	e7f7      	b.n	3d18c <net_buf_unref+0x50>
   3d19c:	20000c3c 	.word	0x20000c3c

0003d1a0 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   3d1a0:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   3d1a4:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3d1a6:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   3d1a8:	d004      	beq.n	3d1b4 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
   3d1aa:	f010 0f78 	tst.w	r0, #120	; 0x78
   3d1ae:	d001      	beq.n	3d1b4 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
   3d1b0:	2000      	movs	r0, #0
   3d1b2:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   3d1b4:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
   3d1b6:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3d1ba:	f000 0008 	and.w	r0, r0, #8
   3d1be:	da05      	bge.n	3d1cc <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   3d1c0:	b958      	cbnz	r0, 3d1da <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
   3d1c2:	4808      	ldr	r0, [pc, #32]	; (3d1e4 <endpoint_ctx+0x44>)
   3d1c4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3d1c8:	304c      	adds	r0, #76	; 0x4c
   3d1ca:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   3d1cc:	b938      	cbnz	r0, 3d1de <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   3d1ce:	4805      	ldr	r0, [pc, #20]	; (3d1e4 <endpoint_ctx+0x44>)
   3d1d0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3d1d4:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
   3d1d8:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   3d1da:	4803      	ldr	r0, [pc, #12]	; (3d1e8 <endpoint_ctx+0x48>)
   3d1dc:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   3d1de:	4803      	ldr	r0, [pc, #12]	; (3d1ec <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
   3d1e0:	4770      	bx	lr
   3d1e2:	bf00      	nop
   3d1e4:	200033b0 	.word	0x200033b0
   3d1e8:	200034fc 	.word	0x200034fc
   3d1ec:	2000361c 	.word	0x2000361c

0003d1f0 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   3d1f0:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   3d1f2:	4801      	ldr	r0, [pc, #4]	; (3d1f8 <usbd_evt_put+0x8>)
   3d1f4:	f00b bc23 	b.w	48a3e <k_queue_append>
   3d1f8:	20000c24 	.word	0x20000c24

0003d1fc <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   3d1fc:	4901      	ldr	r1, [pc, #4]	; (3d204 <usbd_work_schedule+0x8>)
   3d1fe:	4802      	ldr	r0, [pc, #8]	; (3d208 <usbd_work_schedule+0xc>)
   3d200:	f00b bcf7 	b.w	48bf2 <k_work_submit_to_queue>
   3d204:	200033d8 	.word	0x200033d8
   3d208:	20001750 	.word	0x20001750

0003d20c <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   3d20c:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   3d20e:	480b      	ldr	r0, [pc, #44]	; (3d23c <usb_init+0x30>)
   3d210:	f002 fd48 	bl	3fca4 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   3d214:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   3d216:	480a      	ldr	r0, [pc, #40]	; (3d240 <usb_init+0x34>)
   3d218:	f002 fd8a 	bl	3fd30 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   3d21c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d220:	f44f 6280 	mov.w	r2, #1024	; 0x400
   3d224:	4907      	ldr	r1, [pc, #28]	; (3d244 <usb_init+0x38>)
   3d226:	4808      	ldr	r0, [pc, #32]	; (3d248 <usb_init+0x3c>)
   3d228:	9400      	str	r4, [sp, #0]
   3d22a:	f004 fb5d 	bl	418e8 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   3d22e:	4907      	ldr	r1, [pc, #28]	; (3d24c <usb_init+0x40>)
   3d230:	4807      	ldr	r0, [pc, #28]	; (3d250 <usb_init+0x44>)
   3d232:	f00b fcd5 	bl	48be0 <k_work_init>

	return 0;
}
   3d236:	4620      	mov	r0, r4
   3d238:	b002      	add	sp, #8
   3d23a:	bd10      	pop	{r4, pc}
   3d23c:	0004b4d6 	.word	0x0004b4d6
   3d240:	0004ad38 	.word	0x0004ad38
   3d244:	200051b0 	.word	0x200051b0
   3d248:	20001750 	.word	0x20001750
   3d24c:	0003d569 	.word	0x0003d569
   3d250:	200033d8 	.word	0x200033d8

0003d254 <usbd_evt_get>:
   3d254:	4802      	ldr	r0, [pc, #8]	; (3d260 <usbd_evt_get+0xc>)
   3d256:	2200      	movs	r2, #0
   3d258:	2300      	movs	r3, #0
   3d25a:	f004 b995 	b.w	41588 <z_impl_k_queue_get>
   3d25e:	bf00      	nop
   3d260:	20000c24 	.word	0x20000c24

0003d264 <usbd_evt_flush>:
{
   3d264:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d266:	4c05      	ldr	r4, [pc, #20]	; (3d27c <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   3d268:	f7ff fff4 	bl	3d254 <usbd_evt_get>
		if (ev) {
   3d26c:	b120      	cbz	r0, 3d278 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d26e:	1d01      	adds	r1, r0, #4
   3d270:	4620      	mov	r0, r4
   3d272:	f00b fb1d 	bl	488b0 <k_mem_slab_free>
	} while (ev != NULL);
   3d276:	e7f7      	b.n	3d268 <usbd_evt_flush+0x4>
}
   3d278:	bd10      	pop	{r4, pc}
   3d27a:	bf00      	nop
   3d27c:	20000ad8 	.word	0x20000ad8

0003d280 <usbd_evt_alloc>:
{
   3d280:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   3d282:	2300      	movs	r3, #0
   3d284:	480e      	ldr	r0, [pc, #56]	; (3d2c0 <usbd_evt_alloc+0x40>)
   3d286:	2200      	movs	r2, #0
   3d288:	a901      	add	r1, sp, #4
   3d28a:	f003 ff11 	bl	410b0 <k_mem_slab_alloc>
   3d28e:	b190      	cbz	r0, 3d2b6 <usbd_evt_alloc+0x36>
		usbd_evt_flush();
   3d290:	f7ff ffe8 	bl	3d264 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   3d294:	480a      	ldr	r0, [pc, #40]	; (3d2c0 <usbd_evt_alloc+0x40>)
   3d296:	2200      	movs	r2, #0
   3d298:	2300      	movs	r3, #0
   3d29a:	a901      	add	r1, sp, #4
   3d29c:	f003 ff08 	bl	410b0 <k_mem_slab_alloc>
   3d2a0:	b938      	cbnz	r0, 3d2b2 <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
   3d2a2:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
   3d2a4:	2304      	movs	r3, #4
		ev->block = block;
   3d2a6:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   3d2a8:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   3d2aa:	f7ff ffa1 	bl	3d1f0 <usbd_evt_put>
		usbd_work_schedule();
   3d2ae:	f7ff ffa5 	bl	3d1fc <usbd_work_schedule>
		return NULL;
   3d2b2:	2000      	movs	r0, #0
   3d2b4:	e001      	b.n	3d2ba <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
   3d2b6:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   3d2b8:	6040      	str	r0, [r0, #4]
}
   3d2ba:	b003      	add	sp, #12
   3d2bc:	f85d fb04 	ldr.w	pc, [sp], #4
   3d2c0:	20000ad8 	.word	0x20000ad8

0003d2c4 <usbd_event_transfer_data>:
		endpoint_ctx(p_event->data.eptransfer.ep);
   3d2c4:	7881      	ldrb	r1, [r0, #2]
{
   3d2c6:	b570      	push	{r4, r5, r6, lr}
   3d2c8:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   3d2ca:	4608      	mov	r0, r1
   3d2cc:	f7ff ff68 	bl	3d1a0 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3d2d0:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   3d2d2:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   3d2d4:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3d2d6:	d512      	bpl.n	3d2fe <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   3d2d8:	2d00      	cmp	r5, #0
   3d2da:	d143      	bne.n	3d364 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   3d2dc:	f7ff ffd0 	bl	3d280 <usbd_evt_alloc>
			if (!ev) {
   3d2e0:	4603      	mov	r3, r0
   3d2e2:	2800      	cmp	r0, #0
   3d2e4:	d03e      	beq.n	3d364 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
   3d2e6:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   3d2e8:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   3d2ea:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   3d2ec:	2203      	movs	r2, #3
   3d2ee:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3d2f0:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
   3d2f2:	f7ff ff7d 	bl	3d1f0 <usbd_evt_put>
}
   3d2f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_work_schedule();
   3d2fa:	f7ff bf7f 	b.w	3d1fc <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   3d2fe:	b14d      	cbz	r5, 3d314 <usbd_event_transfer_data+0x50>
   3d300:	2d01      	cmp	r5, #1
   3d302:	d12f      	bne.n	3d364 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   3d304:	f7ff ffbc 	bl	3d280 <usbd_evt_alloc>
			if (!ev) {
   3d308:	4603      	mov	r3, r0
   3d30a:	b358      	cbz	r0, 3d364 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   3d30c:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   3d30e:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3d310:	7305      	strb	r5, [r0, #12]
   3d312:	e7ed      	b.n	3d2f0 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   3d314:	f7ff ffb4 	bl	3d280 <usbd_evt_alloc>
			if (!ev) {
   3d318:	b320      	cbz	r0, 3d364 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   3d31a:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   3d31c:	4b12      	ldr	r3, [pc, #72]	; (3d368 <usbd_event_transfer_data+0xa4>)
   3d31e:	f012 0f80 	tst.w	r2, #128	; 0x80
   3d322:	f002 0108 	and.w	r1, r2, #8
   3d326:	d011      	beq.n	3d34c <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   3d328:	b141      	cbz	r1, 3d33c <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   3d32a:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   3d32e:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
   3d330:	2301      	movs	r3, #1
   3d332:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   3d334:	2302      	movs	r3, #2
   3d336:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3d338:	6084      	str	r4, [r0, #8]
   3d33a:	e7da      	b.n	3d2f2 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   3d33c:	f002 020f 	and.w	r2, r2, #15
   3d340:	2114      	movs	r1, #20
   3d342:	fb01 3302 	mla	r3, r1, r2, r3
   3d346:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   3d34a:	e7f0      	b.n	3d32e <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   3d34c:	b111      	cbz	r1, 3d354 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   3d34e:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   3d352:	e7ec      	b.n	3d32e <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   3d354:	f002 020f 	and.w	r2, r2, #15
   3d358:	2114      	movs	r1, #20
   3d35a:	fb01 3302 	mla	r3, r1, r2, r3
   3d35e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   3d362:	e7e4      	b.n	3d32e <usbd_event_transfer_data+0x6a>
}
   3d364:	bd70      	pop	{r4, r5, r6, pc}
   3d366:	bf00      	nop
   3d368:	40027000 	.word	0x40027000

0003d36c <usb_dc_power_event_handler>:
	switch (event) {
   3d36c:	2802      	cmp	r0, #2
{
   3d36e:	b510      	push	{r4, lr}
   3d370:	d811      	bhi.n	3d396 <usb_dc_power_event_handler+0x2a>
   3d372:	4b09      	ldr	r3, [pc, #36]	; (3d398 <usb_dc_power_event_handler+0x2c>)
   3d374:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   3d376:	f7ff ff83 	bl	3d280 <usbd_evt_alloc>
	if (!ev) {
   3d37a:	b160      	cbz	r0, 3d396 <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   3d37c:	2200      	movs	r2, #0
   3d37e:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   3d380:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   3d382:	f7ff ff35 	bl	3d1f0 <usbd_evt_put>
	if (usbd_ctx.attached) {
   3d386:	4b05      	ldr	r3, [pc, #20]	; (3d39c <usb_dc_power_event_handler+0x30>)
   3d388:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3d38c:	b11b      	cbz	r3, 3d396 <usb_dc_power_event_handler+0x2a>
}
   3d38e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   3d392:	f7ff bf33 	b.w	3d1fc <usbd_work_schedule>
}
   3d396:	bd10      	pop	{r4, pc}
   3d398:	0004b4d3 	.word	0x0004b4d3
   3d39c:	200033b0 	.word	0x200033b0

0003d3a0 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   3d3a0:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3d3a2:	490f      	ldr	r1, [pc, #60]	; (3d3e0 <hfxo_stop.constprop.0.isra.0+0x40>)
   3d3a4:	f3bf 8f5b 	dmb	ish
   3d3a8:	f101 0320 	add.w	r3, r1, #32
   3d3ac:	2200      	movs	r2, #0
   3d3ae:	e853 0f00 	ldrex	r0, [r3]
   3d3b2:	2801      	cmp	r0, #1
   3d3b4:	d103      	bne.n	3d3be <hfxo_stop.constprop.0.isra.0+0x1e>
   3d3b6:	e843 2400 	strex	r4, r2, [r3]
   3d3ba:	2c00      	cmp	r4, #0
   3d3bc:	d1f7      	bne.n	3d3ae <hfxo_stop.constprop.0.isra.0+0xe>
   3d3be:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   3d3c2:	d10b      	bne.n	3d3dc <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   3d3c4:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   3d3c6:	310c      	adds	r1, #12
   3d3c8:	4620      	mov	r0, r4
   3d3ca:	f005 fd46 	bl	42e5a <onoff_cancel>

	if (rv == -EALREADY) {
   3d3ce:	3078      	adds	r0, #120	; 0x78
   3d3d0:	d104      	bne.n	3d3dc <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
   3d3d2:	4620      	mov	r0, r4
}
   3d3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3d3d8:	f005 bd1a 	b.w	42e10 <onoff_release>
   3d3dc:	bd10      	pop	{r4, pc}
   3d3de:	bf00      	nop
   3d3e0:	200033b0 	.word	0x200033b0

0003d3e4 <usbd_event_handler>:
{
   3d3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d3e6:	4606      	mov	r6, r0
   3d3e8:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   3d3ea:	2214      	movs	r2, #20
   3d3ec:	2100      	movs	r1, #0
   3d3ee:	a803      	add	r0, sp, #12
   3d3f0:	f007 fd12 	bl	44e18 <memset>
	switch (p_event->type) {
   3d3f4:	7833      	ldrb	r3, [r6, #0]
   3d3f6:	3b01      	subs	r3, #1
   3d3f8:	2b05      	cmp	r3, #5
   3d3fa:	d821      	bhi.n	3d440 <usbd_event_handler+0x5c>
   3d3fc:	e8df f003 	tbb	[pc, r3]
   3d400:	1414037a 	.word	0x1414037a
   3d404:	166a      	.short	0x166a
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   3d406:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
   3d408:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   3d40c:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   3d40e:	f7ff ff37 	bl	3d280 <usbd_evt_alloc>
		if (!ev) {
   3d412:	4603      	mov	r3, r0
   3d414:	b1a0      	cbz	r0, 3d440 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   3d416:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   3d418:	f100 0208 	add.w	r2, r0, #8
   3d41c:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   3d420:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   3d424:	4618      	mov	r0, r3
   3d426:	e01d      	b.n	3d464 <usbd_event_handler+0x80>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   3d428:	2304      	movs	r3, #4
   3d42a:	e7ed      	b.n	3d408 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   3d42c:	78b1      	ldrb	r1, [r6, #2]
   3d42e:	4608      	mov	r0, r1
   3d430:	f7ff feb6 	bl	3d1a0 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   3d434:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   3d436:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
   3d438:	b123      	cbz	r3, 3d444 <usbd_event_handler+0x60>
   3d43a:	3b01      	subs	r3, #1
   3d43c:	2b02      	cmp	r3, #2
   3d43e:	d943      	bls.n	3d4c8 <usbd_event_handler+0xe4>
}
   3d440:	b009      	add	sp, #36	; 0x24
   3d442:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3d444:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   3d446:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   3d448:	d513      	bpl.n	3d472 <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
   3d44a:	2d00      	cmp	r5, #0
   3d44c:	d1f8      	bne.n	3d440 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   3d44e:	f7ff ff17 	bl	3d280 <usbd_evt_alloc>
			if (!ev) {
   3d452:	4603      	mov	r3, r0
   3d454:	2800      	cmp	r0, #0
   3d456:	d0f3      	beq.n	3d440 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   3d458:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   3d45a:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   3d45c:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   3d45e:	2203      	movs	r2, #3
   3d460:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3d462:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
   3d464:	f7ff fec4 	bl	3d1f0 <usbd_evt_put>
}
   3d468:	b009      	add	sp, #36	; 0x24
   3d46a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
   3d46e:	f7ff bec5 	b.w	3d1fc <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   3d472:	b155      	cbz	r5, 3d48a <usbd_event_handler+0xa6>
   3d474:	2d01      	cmp	r5, #1
   3d476:	d1e3      	bne.n	3d440 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   3d478:	f7ff ff02 	bl	3d280 <usbd_evt_alloc>
			if (!ev) {
   3d47c:	4603      	mov	r3, r0
   3d47e:	2800      	cmp	r0, #0
   3d480:	d0de      	beq.n	3d440 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   3d482:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   3d484:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3d486:	7305      	strb	r5, [r0, #12]
   3d488:	e7eb      	b.n	3d462 <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
   3d48a:	f7ff fef9 	bl	3d280 <usbd_evt_alloc>
			if (!ev) {
   3d48e:	4607      	mov	r7, r0
   3d490:	2800      	cmp	r0, #0
   3d492:	d0d5      	beq.n	3d440 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   3d494:	2301      	movs	r3, #1
   3d496:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   3d498:	2302      	movs	r3, #2
   3d49a:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   3d49c:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   3d49e:	f104 010c 	add.w	r1, r4, #12
   3d4a2:	78b0      	ldrb	r0, [r6, #2]
   3d4a4:	f00a ff81 	bl	483aa <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   3d4a8:	4a13      	ldr	r2, [pc, #76]	; (3d4f8 <usbd_event_handler+0x114>)
   3d4aa:	68e1      	ldr	r1, [r4, #12]
   3d4ac:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   3d4b0:	428b      	cmp	r3, r1
   3d4b2:	d906      	bls.n	3d4c2 <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   3d4b4:	1a5b      	subs	r3, r3, r1
   3d4b6:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   3d4ba:	f003 f97f 	bl	407bc <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   3d4be:	4638      	mov	r0, r7
   3d4c0:	e7d0      	b.n	3d464 <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
   3d4c2:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
   3d4c6:	e7fa      	b.n	3d4be <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
   3d4c8:	4630      	mov	r0, r6
}
   3d4ca:	b009      	add	sp, #36	; 0x24
   3d4cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
   3d4d0:	f7ff bef8 	b.w	3d2c4 <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
   3d4d4:	a801      	add	r0, sp, #4
   3d4d6:	f003 f94b 	bl	40770 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   3d4da:	f89d 3005 	ldrb.w	r3, [sp, #5]
   3d4de:	2b05      	cmp	r3, #5
   3d4e0:	d104      	bne.n	3d4ec <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   3d4e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   3d4e6:	f013 0f60 	tst.w	r3, #96	; 0x60
   3d4ea:	d0a9      	beq.n	3d440 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   3d4ec:	4b03      	ldr	r3, [pc, #12]	; (3d4fc <usbd_event_handler+0x118>)
   3d4ee:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   3d4f0:	2401      	movs	r4, #1
   3d4f2:	e78c      	b.n	3d40e <usbd_event_handler+0x2a>
	switch (p_event->type) {
   3d4f4:	2402      	movs	r4, #2
   3d4f6:	e78a      	b.n	3d40e <usbd_event_handler+0x2a>
   3d4f8:	200033b0 	.word	0x200033b0
   3d4fc:	2000351c 	.word	0x2000351c

0003d500 <eps_ctx_init>:
{
   3d500:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   3d502:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   3d504:	f064 007f 	orn	r0, r4, #127	; 0x7f
   3d508:	b2c0      	uxtb	r0, r0
   3d50a:	f7ff fe49 	bl	3d1a0 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   3d50e:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   3d510:	f00a fc04 	bl	47d1c <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   3d514:	2c08      	cmp	r4, #8
   3d516:	d1f5      	bne.n	3d504 <eps_ctx_init+0x4>
   3d518:	4d0f      	ldr	r5, [pc, #60]	; (3d558 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   3d51a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   3d51c:	b2e0      	uxtb	r0, r4
   3d51e:	f7ff fe3f 	bl	3d1a0 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   3d522:	6903      	ldr	r3, [r0, #16]
   3d524:	b903      	cbnz	r3, 3d528 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   3d526:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   3d528:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   3d52a:	f00a fbf7 	bl	47d1c <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   3d52e:	2c08      	cmp	r4, #8
   3d530:	f105 0540 	add.w	r5, r5, #64	; 0x40
   3d534:	d1f2      	bne.n	3d51c <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   3d536:	4c09      	ldr	r4, [pc, #36]	; (3d55c <eps_ctx_init+0x5c>)
   3d538:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   3d53c:	f00a fbee 	bl	47d1c <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   3d540:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
   3d544:	b913      	cbnz	r3, 3d54c <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   3d546:	4b06      	ldr	r3, [pc, #24]	; (3d560 <eps_ctx_init+0x60>)
   3d548:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   3d54c:	4805      	ldr	r0, [pc, #20]	; (3d564 <eps_ctx_init+0x64>)
   3d54e:	f00a fbe5 	bl	47d1c <ep_ctx_reset>
}
   3d552:	2000      	movs	r0, #0
   3d554:	bd38      	pop	{r3, r4, r5, pc}
   3d556:	bf00      	nop
   3d558:	200031b0 	.word	0x200031b0
   3d55c:	200033b0 	.word	0x200033b0
   3d560:	20002db0 	.word	0x20002db0
   3d564:	2000361c 	.word	0x2000361c

0003d568 <usbd_work_handler>:
{
   3d568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   3d56c:	4ca8      	ldr	r4, [pc, #672]	; (3d810 <usbd_work_handler+0x2a8>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d56e:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 3d814 <usbd_work_handler+0x2ac>
{
   3d572:	b085      	sub	sp, #20
   3d574:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   3d576:	f7ff fe6d 	bl	3d254 <usbd_evt_get>
   3d57a:	b910      	cbnz	r0, 3d582 <usbd_work_handler+0x1a>
}
   3d57c:	b005      	add	sp, #20
   3d57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   3d582:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   3d586:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d588:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   3d58c:	b93b      	cbnz	r3, 3d59e <usbd_work_handler+0x36>
   3d58e:	2a00      	cmp	r2, #0
   3d590:	f000 8086 	beq.w	3d6a0 <usbd_work_handler+0x138>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   3d594:	4649      	mov	r1, r9
   3d596:	4640      	mov	r0, r8
   3d598:	f00b f98a 	bl	488b0 <k_mem_slab_free>
}
   3d59c:	e7eb      	b.n	3d576 <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   3d59e:	2a04      	cmp	r2, #4
   3d5a0:	d8f8      	bhi.n	3d594 <usbd_work_handler+0x2c>
   3d5a2:	e8df f012 	tbh	[pc, r2, lsl #1]
   3d5a6:	007d      	.short	0x007d
   3d5a8:	01030005 	.word	0x01030005
   3d5ac:	01430119 	.word	0x01430119
	switch (ep_evt->evt_type) {
   3d5b0:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   3d5b2:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   3d5b4:	2b03      	cmp	r3, #3
   3d5b6:	d8ed      	bhi.n	3d594 <usbd_work_handler+0x2c>
   3d5b8:	e8df f003 	tbb	[pc, r3]
   3d5bc:	5f5a3d02 	.word	0x5f5a3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   3d5c0:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   3d5c2:	2208      	movs	r2, #8
   3d5c4:	2100      	movs	r1, #0
   3d5c6:	4630      	mov	r0, r6
   3d5c8:	f007 fc26 	bl	44e18 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   3d5cc:	4b92      	ldr	r3, [pc, #584]	; (3d818 <usbd_work_handler+0x2b0>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   3d5ce:	4893      	ldr	r0, [pc, #588]	; (3d81c <usbd_work_handler+0x2b4>)
   3d5d0:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   3d5d4:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   3d5d6:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   3d5da:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   3d5dc:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   3d5e0:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   3d5e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   3d5e8:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   3d5ea:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   3d5ee:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   3d5f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   3d5f6:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   3d5f8:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   3d5fc:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   3d600:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   3d604:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   3d606:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   3d608:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   3d60a:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   3d60c:	f007 fbf9 	bl	44e02 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   3d610:	682b      	ldr	r3, [r5, #0]
   3d612:	7a68      	ldrb	r0, [r5, #9]
   3d614:	2100      	movs	r1, #0
   3d616:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   3d618:	f996 3000 	ldrsb.w	r3, [r6]
   3d61c:	2b00      	cmp	r3, #0
   3d61e:	db06      	blt.n	3d62e <usbd_work_handler+0xc6>
   3d620:	88f3      	ldrh	r3, [r6, #6]
   3d622:	b123      	cbz	r3, 3d62e <usbd_work_handler+0xc6>
		ctx->ctrl_read_len = usbd_setup->wLength;
   3d624:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   3d628:	f003 f8c8 	bl	407bc <nrfx_usbd_setup_data_clear>
   3d62c:	e7b2      	b.n	3d594 <usbd_work_handler+0x2c>
		ctx->ctrl_read_len = 0U;
   3d62e:	2300      	movs	r3, #0
   3d630:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   3d634:	e7ae      	b.n	3d594 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_pending) {
   3d636:	7f6b      	ldrb	r3, [r5, #29]
   3d638:	2b00      	cmp	r3, #0
   3d63a:	d0ab      	beq.n	3d594 <usbd_work_handler+0x2c>
	if (!ep_ctx->read_complete) {
   3d63c:	7f2b      	ldrb	r3, [r5, #28]
   3d63e:	2b00      	cmp	r3, #0
   3d640:	d0a8      	beq.n	3d594 <usbd_work_handler+0x2c>
	ep_ctx->read_pending = false;
   3d642:	2600      	movs	r6, #0
   3d644:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3d646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3d64a:	4875      	ldr	r0, [pc, #468]	; (3d820 <usbd_work_handler+0x2b8>)
	ep_ctx->read_complete = false;
   3d64c:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3d64e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d652:	f00a fb76 	bl	47d42 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   3d656:	696b      	ldr	r3, [r5, #20]
   3d658:	9301      	str	r3, [sp, #4]
   3d65a:	686b      	ldr	r3, [r5, #4]
   3d65c:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   3d660:	a901      	add	r1, sp, #4
   3d662:	7a68      	ldrb	r0, [r5, #9]
   3d664:	f002 feb4 	bl	403d0 <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   3d668:	486d      	ldr	r0, [pc, #436]	; (3d820 <usbd_work_handler+0x2b8>)
   3d66a:	f00a fb6c 	bl	47d46 <k_mutex_unlock.isra.0>
   3d66e:	e791      	b.n	3d594 <usbd_work_handler+0x2c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   3d670:	682b      	ldr	r3, [r5, #0]
   3d672:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   3d674:	7a68      	ldrb	r0, [r5, #9]
   3d676:	4798      	blx	r3
		break;
   3d678:	e78c      	b.n	3d594 <usbd_work_handler+0x2c>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   3d67a:	7aab      	ldrb	r3, [r5, #10]
   3d67c:	b96b      	cbnz	r3, 3d69a <usbd_work_handler+0x132>
   3d67e:	7feb      	ldrb	r3, [r5, #31]
   3d680:	b95b      	cbnz	r3, 3d69a <usbd_work_handler+0x132>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3d682:	4867      	ldr	r0, [pc, #412]	; (3d820 <usbd_work_handler+0x2b8>)
   3d684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3d688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d68c:	f00a fb59 	bl	47d42 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   3d690:	f003 f8c4 	bl	4081c <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   3d694:	4862      	ldr	r0, [pc, #392]	; (3d820 <usbd_work_handler+0x2b8>)
   3d696:	f00a fb56 	bl	47d46 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   3d69a:	682b      	ldr	r3, [r5, #0]
   3d69c:	2102      	movs	r1, #2
   3d69e:	e7e9      	b.n	3d674 <usbd_work_handler+0x10c>
	switch (pwr_evt->state) {
   3d6a0:	7a02      	ldrb	r2, [r0, #8]
   3d6a2:	2a04      	cmp	r2, #4
   3d6a4:	f63f af76 	bhi.w	3d594 <usbd_work_handler+0x2c>
   3d6a8:	e8df f002 	tbb	[pc, r2]
   3d6ac:	6925035b 	.word	0x6925035b
   3d6b0:	75          	.byte	0x75
   3d6b1:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   3d6b2:	f002 fe3d 	bl	40330 <nrfx_usbd_is_enabled>
   3d6b6:	4605      	mov	r5, r0
   3d6b8:	2800      	cmp	r0, #0
   3d6ba:	f47f af6b 	bne.w	3d594 <usbd_work_handler+0x2c>
			nrfx_usbd_enable();
   3d6be:	f002 fd7b 	bl	401b8 <nrfx_usbd_enable>
   3d6c2:	f3bf 8f5b 	dmb	ish
   3d6c6:	4957      	ldr	r1, [pc, #348]	; (3d824 <usbd_work_handler+0x2bc>)
   3d6c8:	2301      	movs	r3, #1
   3d6ca:	e851 2f00 	ldrex	r2, [r1]
   3d6ce:	2a00      	cmp	r2, #0
   3d6d0:	d103      	bne.n	3d6da <usbd_work_handler+0x172>
   3d6d2:	e841 3000 	strex	r0, r3, [r1]
   3d6d6:	2800      	cmp	r0, #0
   3d6d8:	d1f7      	bne.n	3d6ca <usbd_work_handler+0x162>
   3d6da:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   3d6de:	f47f af59 	bne.w	3d594 <usbd_work_handler+0x2c>
   3d6e2:	f841 5c10 	str.w	r5, [r1, #-16]
   3d6e6:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   3d6ea:	69e0      	ldr	r0, [r4, #28]
   3d6ec:	6163      	str	r3, [r4, #20]
   3d6ee:	3914      	subs	r1, #20
   3d6f0:	f005 fb43 	bl	42d7a <onoff_request>
   3d6f4:	e74e      	b.n	3d594 <usbd_work_handler+0x2c>
	switch (pwr_evt->state) {
   3d6f6:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   3d6f8:	f065 007f 	orn	r0, r5, #127	; 0x7f
   3d6fc:	b2c0      	uxtb	r0, r0
   3d6fe:	f7ff fd4f 	bl	3d1a0 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   3d702:	7a03      	ldrb	r3, [r0, #8]
   3d704:	b113      	cbz	r3, 3d70c <usbd_work_handler+0x1a4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3d706:	7a40      	ldrb	r0, [r0, #9]
   3d708:	f003 fa6e 	bl	40be8 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   3d70c:	3501      	adds	r5, #1
   3d70e:	2d08      	cmp	r5, #8
   3d710:	d1f2      	bne.n	3d6f8 <usbd_work_handler+0x190>
		if (ep_ctx->cfg.en) {
   3d712:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   3d716:	b11b      	cbz	r3, 3d720 <usbd_work_handler+0x1b8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3d718:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   3d71c:	f003 fa64 	bl	40be8 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   3d720:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   3d722:	b2e8      	uxtb	r0, r5
   3d724:	f7ff fd3c 	bl	3d1a0 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   3d728:	7a03      	ldrb	r3, [r0, #8]
   3d72a:	b113      	cbz	r3, 3d732 <usbd_work_handler+0x1ca>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3d72c:	7a40      	ldrb	r0, [r0, #9]
   3d72e:	f003 fa5b 	bl	40be8 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   3d732:	3501      	adds	r5, #1
   3d734:	2d08      	cmp	r5, #8
   3d736:	d1f4      	bne.n	3d722 <usbd_work_handler+0x1ba>
		if (ep_ctx->cfg.en) {
   3d738:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   3d73c:	b11b      	cbz	r3, 3d746 <usbd_work_handler+0x1de>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   3d73e:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   3d742:	f003 fa51 	bl	40be8 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   3d746:	2001      	movs	r0, #1
   3d748:	f002 fdd4 	bl	402f4 <nrfx_usbd_start>
		ctx->ready = true;
   3d74c:	2301      	movs	r3, #1
   3d74e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   3d752:	6823      	ldr	r3, [r4, #0]
   3d754:	2b00      	cmp	r3, #0
   3d756:	f43f af1d 	beq.w	3d594 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   3d75a:	2100      	movs	r1, #0
   3d75c:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   3d75e:	4798      	blx	r3
   3d760:	e718      	b.n	3d594 <usbd_work_handler+0x2c>
		ctx->ready = false;
   3d762:	2500      	movs	r5, #0
   3d764:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   3d768:	f003 f9ca 	bl	40b00 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   3d76c:	f7ff fe18 	bl	3d3a0 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   3d770:	6823      	ldr	r3, [r4, #0]
   3d772:	2b00      	cmp	r3, #0
   3d774:	f43f af0e 	beq.w	3d594 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   3d778:	4629      	mov	r1, r5
   3d77a:	2004      	movs	r0, #4
   3d77c:	e7ef      	b.n	3d75e <usbd_work_handler+0x1f6>
		if (dev_ready()) {
   3d77e:	2b00      	cmp	r3, #0
   3d780:	f43f af08 	beq.w	3d594 <usbd_work_handler+0x2c>
			nrfx_usbd_suspend();
   3d784:	f003 f9d4 	bl	40b30 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   3d788:	6823      	ldr	r3, [r4, #0]
   3d78a:	2b00      	cmp	r3, #0
   3d78c:	f43f af02 	beq.w	3d594 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   3d790:	2100      	movs	r1, #0
   3d792:	2005      	movs	r0, #5
   3d794:	e7e3      	b.n	3d75e <usbd_work_handler+0x1f6>
		if (ctx->status_cb && dev_ready()) {
   3d796:	6822      	ldr	r2, [r4, #0]
   3d798:	2a00      	cmp	r2, #0
   3d79a:	f43f aefb 	beq.w	3d594 <usbd_work_handler+0x2c>
   3d79e:	2b00      	cmp	r3, #0
   3d7a0:	f43f aef8 	beq.w	3d594 <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_RESUME, NULL);
   3d7a4:	2100      	movs	r1, #0
   3d7a6:	2006      	movs	r0, #6
   3d7a8:	4790      	blx	r2
   3d7aa:	e6f3      	b.n	3d594 <usbd_work_handler+0x2c>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3d7ac:	f107 0510 	add.w	r5, r7, #16
   3d7b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d7b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3d7b8:	4628      	mov	r0, r5
   3d7ba:	f00a fac2 	bl	47d42 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   3d7be:	f7ff fe9f 	bl	3d500 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   3d7c2:	4628      	mov	r0, r5
   3d7c4:	f00a fabf 	bl	47d46 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   3d7c8:	f857 3c28 	ldr.w	r3, [r7, #-40]
   3d7cc:	2b00      	cmp	r3, #0
   3d7ce:	f43f aee1 	beq.w	3d594 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_RESET, NULL);
   3d7d2:	2100      	movs	r1, #0
   3d7d4:	2001      	movs	r0, #1
   3d7d6:	e7c2      	b.n	3d75e <usbd_work_handler+0x1f6>
	if (ep_ctx->cfg.en) {
   3d7d8:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   3d7dc:	b17b      	cbz	r3, 3d7fe <usbd_work_handler+0x296>
		ep_ctx->read_pending = true;
   3d7de:	2501      	movs	r5, #1
   3d7e0:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   3d7e4:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   3d7e8:	f7ff fd4a 	bl	3d280 <usbd_evt_alloc>
		if (!ev) {
   3d7ec:	b138      	cbz	r0, 3d7fe <usbd_work_handler+0x296>
		ev->evt.ep_evt.ep = ep_ctx;
   3d7ee:	4a0e      	ldr	r2, [pc, #56]	; (3d828 <usbd_work_handler+0x2c0>)
		ev->evt_type = USBD_EVT_EP;
   3d7f0:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3d7f2:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   3d7f4:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   3d7f6:	f7ff fcfb 	bl	3d1f0 <usbd_evt_put>
		usbd_work_schedule();
   3d7fa:	f7ff fcff 	bl	3d1fc <usbd_work_schedule>
			if (ctx->status_cb) {
   3d7fe:	f857 3c28 	ldr.w	r3, [r7, #-40]
   3d802:	2b00      	cmp	r3, #0
   3d804:	f43f aec6 	beq.w	3d594 <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SOF, NULL);
   3d808:	2100      	movs	r1, #0
   3d80a:	200a      	movs	r0, #10
   3d80c:	e7a7      	b.n	3d75e <usbd_work_handler+0x1f6>
   3d80e:	bf00      	nop
   3d810:	200033b0 	.word	0x200033b0
   3d814:	20000ad8 	.word	0x20000ad8
   3d818:	40027000 	.word	0x40027000
   3d81c:	200033b4 	.word	0x200033b4
   3d820:	200033e8 	.word	0x200033e8
   3d824:	200033d0 	.word	0x200033d0
   3d828:	2000361c 	.word	0x2000361c
	nrfx_power_usbevt_disable();
   3d82c:	f00a fd2b 	bl	48286 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   3d830:	f003 f966 	bl	40b00 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   3d834:	f002 fcb6 	bl	401a4 <nrfx_usbd_uninit>
	usbd_evt_flush();
   3d838:	f7ff fd14 	bl	3d264 <usbd_evt_flush>
	ret = eps_ctx_init();
   3d83c:	f7ff fe60 	bl	3d500 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   3d840:	f00a fd1a 	bl	48278 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   3d844:	4801      	ldr	r0, [pc, #4]	; (3d84c <usbd_work_handler+0x2e4>)
   3d846:	f002 fd7d 	bl	40344 <nrfx_usbd_init>
}
   3d84a:	e6a3      	b.n	3d594 <usbd_work_handler+0x2c>
   3d84c:	0003d3e5 	.word	0x0003d3e5

0003d850 <usb_dc_attach>:
{
   3d850:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   3d852:	4d1a      	ldr	r5, [pc, #104]	; (3d8bc <usb_dc_attach+0x6c>)
   3d854:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   3d858:	bb5c      	cbnz	r4, 3d8b2 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   3d85a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   3d85e:	f00b f86a 	bl	48936 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   3d862:	4620      	mov	r0, r4
   3d864:	f000 fd24 	bl	3e2b0 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3d868:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   3d86a:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3d86c:	2101      	movs	r1, #1
   3d86e:	2027      	movs	r0, #39	; 0x27
   3d870:	f7ec fc18 	bl	2a0a4 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   3d874:	4812      	ldr	r0, [pc, #72]	; (3d8c0 <usb_dc_attach+0x70>)
   3d876:	f002 fd65 	bl	40344 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   3d87a:	4b12      	ldr	r3, [pc, #72]	; (3d8c4 <usb_dc_attach+0x74>)
   3d87c:	4298      	cmp	r0, r3
   3d87e:	d11a      	bne.n	3d8b6 <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   3d880:	f00a fcfa 	bl	48278 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   3d884:	f7ff fe3c 	bl	3d500 <eps_ctx_init>
	if (ret == 0) {
   3d888:	4604      	mov	r4, r0
   3d88a:	b910      	cbnz	r0, 3d892 <usb_dc_attach+0x42>
		ctx->attached = true;
   3d88c:	2301      	movs	r3, #1
   3d88e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   3d892:	4b0d      	ldr	r3, [pc, #52]	; (3d8c8 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   3d894:	681b      	ldr	r3, [r3, #0]
   3d896:	b10b      	cbz	r3, 3d89c <usb_dc_attach+0x4c>
		usbd_work_schedule();
   3d898:	f7ff fcb0 	bl	3d1fc <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   3d89c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3d8a0:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   3d8a4:	07db      	lsls	r3, r3, #31
   3d8a6:	d502      	bpl.n	3d8ae <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   3d8a8:	2000      	movs	r0, #0
   3d8aa:	f7ff fd5f 	bl	3d36c <usb_dc_power_event_handler>
}
   3d8ae:	4620      	mov	r0, r4
   3d8b0:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   3d8b2:	2400      	movs	r4, #0
   3d8b4:	e7fb      	b.n	3d8ae <usb_dc_attach+0x5e>
		return -EIO;
   3d8b6:	f06f 0404 	mvn.w	r4, #4
   3d8ba:	e7f8      	b.n	3d8ae <usb_dc_attach+0x5e>
   3d8bc:	200033b0 	.word	0x200033b0
   3d8c0:	0003d3e5 	.word	0x0003d3e5
   3d8c4:	0bad0000 	.word	0x0bad0000
   3d8c8:	20000c24 	.word	0x20000c24

0003d8cc <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   3d8cc:	4b07      	ldr	r3, [pc, #28]	; (3d8ec <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   3d8ce:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   3d8d2:	b13a      	cbz	r2, 3d8e4 <usb_dc_set_address+0x18>
   3d8d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
   3d8d8:	2b00      	cmp	r3, #0
   3d8da:	bf0c      	ite	eq
   3d8dc:	f06f 0012 	mvneq.w	r0, #18
   3d8e0:	2000      	movne	r0, #0
   3d8e2:	4770      	bx	lr
		return -ENODEV;
   3d8e4:	f06f 0012 	mvn.w	r0, #18
}
   3d8e8:	4770      	bx	lr
   3d8ea:	bf00      	nop
   3d8ec:	200033b0 	.word	0x200033b0

0003d8f0 <usb_dc_ep_configure>:
	return get_usbd_ctx()->attached;
   3d8f0:	4b0f      	ldr	r3, [pc, #60]	; (3d930 <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
   3d8f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   3d8f6:	b510      	push	{r4, lr}
   3d8f8:	4601      	mov	r1, r0
	if (!dev_attached()) {
   3d8fa:	b1b3      	cbz	r3, 3d92a <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   3d8fc:	7804      	ldrb	r4, [r0, #0]
   3d8fe:	4620      	mov	r0, r4
   3d900:	f7ff fc4e 	bl	3d1a0 <endpoint_ctx>
	if (!ep_ctx) {
   3d904:	b910      	cbnz	r0, 3d90c <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   3d906:	f06f 0015 	mvn.w	r0, #21
}
   3d90a:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   3d90c:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   3d90e:	790b      	ldrb	r3, [r1, #4]
   3d910:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   3d912:	8849      	ldrh	r1, [r1, #2]
   3d914:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   3d916:	0723      	lsls	r3, r4, #28
   3d918:	d402      	bmi.n	3d920 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   3d91a:	1e4b      	subs	r3, r1, #1
   3d91c:	420b      	tst	r3, r1
   3d91e:	d1f2      	bne.n	3d906 <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   3d920:	4620      	mov	r0, r4
   3d922:	f00a fd3d 	bl	483a0 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   3d926:	2000      	movs	r0, #0
   3d928:	e7ef      	b.n	3d90a <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   3d92a:	f06f 0012 	mvn.w	r0, #18
   3d92e:	e7ec      	b.n	3d90a <usb_dc_ep_configure+0x1a>
   3d930:	200033b0 	.word	0x200033b0

0003d934 <usb_dc_ep_set_stall>:
	return get_usbd_ctx()->attached;
   3d934:	4b12      	ldr	r3, [pc, #72]	; (3d980 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   3d936:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3d93a:	b510      	push	{r4, lr}
   3d93c:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   3d93e:	b1ca      	cbz	r2, 3d974 <usb_dc_ep_set_stall+0x40>
   3d940:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3d944:	b1b3      	cbz	r3, 3d974 <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
   3d946:	f7ff fc2b 	bl	3d1a0 <endpoint_ctx>
	if (!ep_ctx) {
   3d94a:	4604      	mov	r4, r0
   3d94c:	b1a8      	cbz	r0, 3d97a <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
   3d94e:	7a83      	ldrb	r3, [r0, #10]
   3d950:	2b01      	cmp	r3, #1
   3d952:	d012      	beq.n	3d97a <usb_dc_ep_set_stall+0x46>
   3d954:	d907      	bls.n	3d966 <usb_dc_ep_set_stall+0x32>
   3d956:	3b02      	subs	r3, #2
   3d958:	2b01      	cmp	r3, #1
   3d95a:	d907      	bls.n	3d96c <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   3d95c:	6963      	ldr	r3, [r4, #20]
   3d95e:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   3d960:	2000      	movs	r0, #0
   3d962:	60e0      	str	r0, [r4, #12]
}
   3d964:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
   3d966:	f002 ff61 	bl	4082c <nrfx_usbd_setup_stall>
		break;
   3d96a:	e7f7      	b.n	3d95c <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   3d96c:	4608      	mov	r0, r1
   3d96e:	f002 fed1 	bl	40714 <nrfx_usbd_ep_stall>
		break;
   3d972:	e7f3      	b.n	3d95c <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
   3d974:	f06f 0012 	mvn.w	r0, #18
   3d978:	e7f4      	b.n	3d964 <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
   3d97a:	f06f 0015 	mvn.w	r0, #21
   3d97e:	e7f1      	b.n	3d964 <usb_dc_ep_set_stall+0x30>
   3d980:	200033b0 	.word	0x200033b0

0003d984 <usb_dc_ep_clear_stall>:
{
   3d984:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3d986:	4b0e      	ldr	r3, [pc, #56]	; (3d9c0 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   3d988:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3d98c:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   3d98e:	b182      	cbz	r2, 3d9b2 <usb_dc_ep_clear_stall+0x2e>
   3d990:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3d994:	b16b      	cbz	r3, 3d9b2 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   3d996:	f7ff fc03 	bl	3d1a0 <endpoint_ctx>
	if (!ep_ctx) {
   3d99a:	b168      	cbz	r0, 3d9b8 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   3d99c:	f015 0408 	ands.w	r4, r5, #8
   3d9a0:	d10a      	bne.n	3d9b8 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   3d9a2:	4628      	mov	r0, r5
   3d9a4:	f002 fed8 	bl	40758 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   3d9a8:	4628      	mov	r0, r5
   3d9aa:	f003 f96f 	bl	40c8c <nrfx_usbd_ep_stall_clear>
	return 0;
   3d9ae:	4620      	mov	r0, r4
}
   3d9b0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   3d9b2:	f06f 0012 	mvn.w	r0, #18
   3d9b6:	e7fb      	b.n	3d9b0 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   3d9b8:	f06f 0015 	mvn.w	r0, #21
   3d9bc:	e7f8      	b.n	3d9b0 <usb_dc_ep_clear_stall+0x2c>
   3d9be:	bf00      	nop
   3d9c0:	200033b0 	.word	0x200033b0

0003d9c4 <usb_dc_ep_is_stalled>:
{
   3d9c4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3d9c6:	4b0c      	ldr	r3, [pc, #48]	; (3d9f8 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   3d9c8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3d9cc:	4605      	mov	r5, r0
   3d9ce:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   3d9d0:	b162      	cbz	r2, 3d9ec <usb_dc_ep_is_stalled+0x28>
   3d9d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3d9d6:	b14b      	cbz	r3, 3d9ec <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   3d9d8:	f7ff fbe2 	bl	3d1a0 <endpoint_ctx>
	if (!ep_ctx) {
   3d9dc:	b148      	cbz	r0, 3d9f2 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   3d9de:	b141      	cbz	r1, 3d9f2 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   3d9e0:	4628      	mov	r0, r5
   3d9e2:	f002 fe9f 	bl	40724 <nrfx_usbd_ep_stall_check>
   3d9e6:	7020      	strb	r0, [r4, #0]
	return 0;
   3d9e8:	2000      	movs	r0, #0
}
   3d9ea:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   3d9ec:	f06f 0012 	mvn.w	r0, #18
   3d9f0:	e7fb      	b.n	3d9ea <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   3d9f2:	f06f 0015 	mvn.w	r0, #21
   3d9f6:	e7f8      	b.n	3d9ea <usb_dc_ep_is_stalled+0x26>
   3d9f8:	200033b0 	.word	0x200033b0

0003d9fc <usb_dc_ep_enable>:
{
   3d9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   3d9fe:	4f13      	ldr	r7, [pc, #76]	; (3da4c <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   3da00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
   3da04:	4604      	mov	r4, r0
	if (!dev_attached()) {
   3da06:	b1bb      	cbz	r3, 3da38 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   3da08:	f7ff fbca 	bl	3d1a0 <endpoint_ctx>
	if (!ep_ctx) {
   3da0c:	4605      	mov	r5, r0
   3da0e:	b1b0      	cbz	r0, 3da3e <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   3da10:	0723      	lsls	r3, r4, #28
   3da12:	d405      	bmi.n	3da20 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   3da14:	4620      	mov	r0, r4
   3da16:	f002 fe9f 	bl	40758 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   3da1a:	4620      	mov	r0, r4
   3da1c:	f003 f936 	bl	40c8c <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   3da20:	7a2e      	ldrb	r6, [r5, #8]
   3da22:	b97e      	cbnz	r6, 3da44 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
   3da24:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
   3da28:	2301      	movs	r3, #1
   3da2a:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   3da2c:	b118      	cbz	r0, 3da36 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   3da2e:	4620      	mov	r0, r4
   3da30:	f003 f8da 	bl	40be8 <nrfx_usbd_ep_enable>
	return 0;
   3da34:	4630      	mov	r0, r6
}
   3da36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   3da38:	f06f 0012 	mvn.w	r0, #18
   3da3c:	e7fb      	b.n	3da36 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
   3da3e:	f06f 0015 	mvn.w	r0, #21
   3da42:	e7f8      	b.n	3da36 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
   3da44:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3da48:	e7f5      	b.n	3da36 <usb_dc_ep_enable+0x3a>
   3da4a:	bf00      	nop
   3da4c:	200033b0 	.word	0x200033b0

0003da50 <usb_dc_ep_disable>:
{
   3da50:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   3da52:	4b11      	ldr	r3, [pc, #68]	; (3da98 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   3da54:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3da58:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   3da5a:	b19a      	cbz	r2, 3da84 <usb_dc_ep_disable+0x34>
   3da5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3da60:	b183      	cbz	r3, 3da84 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   3da62:	f7ff fb9d 	bl	3d1a0 <endpoint_ctx>
	if (!ep_ctx) {
   3da66:	4605      	mov	r5, r0
   3da68:	b178      	cbz	r0, 3da8a <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   3da6a:	7a03      	ldrb	r3, [r0, #8]
   3da6c:	b183      	cbz	r3, 3da90 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   3da6e:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
   3da70:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   3da72:	f003 f88d 	bl	40b90 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   3da76:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   3da78:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   3da7a:	f00a f94f 	bl	47d1c <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   3da7e:	722c      	strb	r4, [r5, #8]
	return 0;
   3da80:	4620      	mov	r0, r4
}
   3da82:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   3da84:	f06f 0012 	mvn.w	r0, #18
   3da88:	e7fb      	b.n	3da82 <usb_dc_ep_disable+0x32>
		return -EINVAL;
   3da8a:	f06f 0015 	mvn.w	r0, #21
   3da8e:	e7f8      	b.n	3da82 <usb_dc_ep_disable+0x32>
		return -EALREADY;
   3da90:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3da94:	e7f5      	b.n	3da82 <usb_dc_ep_disable+0x32>
   3da96:	bf00      	nop
   3da98:	200033b0 	.word	0x200033b0

0003da9c <usb_dc_ep_write>:
{
   3da9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   3daa0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 3db80 <usb_dc_ep_write+0xe4>
{
   3daa4:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
   3daa6:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   3daaa:	b085      	sub	sp, #20
   3daac:	4607      	mov	r7, r0
   3daae:	4689      	mov	r9, r1
   3dab0:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
   3dab2:	2b00      	cmp	r3, #0
   3dab4:	d05d      	beq.n	3db72 <usb_dc_ep_write+0xd6>
   3dab6:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   3daba:	2b00      	cmp	r3, #0
   3dabc:	d059      	beq.n	3db72 <usb_dc_ep_write+0xd6>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   3dabe:	0603      	lsls	r3, r0, #24
   3dac0:	d55a      	bpl.n	3db78 <usb_dc_ep_write+0xdc>
	ep_ctx = endpoint_ctx(ep);
   3dac2:	f7ff fb6d 	bl	3d1a0 <endpoint_ctx>
	if (!ep_ctx) {
   3dac6:	4605      	mov	r5, r0
   3dac8:	2800      	cmp	r0, #0
   3daca:	d055      	beq.n	3db78 <usb_dc_ep_write+0xdc>
	if (!ep_ctx->cfg.en) {
   3dacc:	7a03      	ldrb	r3, [r0, #8]
   3dace:	2b00      	cmp	r3, #0
   3dad0:	d052      	beq.n	3db78 <usb_dc_ep_write+0xdc>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3dad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3dad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3dada:	f108 0038 	add.w	r0, r8, #56	; 0x38
   3dade:	f00a f930 	bl	47d42 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   3dae2:	7fab      	ldrb	r3, [r5, #30]
   3dae4:	b14b      	cbz	r3, 3dafa <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   3dae6:	f108 0038 	add.w	r0, r8, #56	; 0x38
   3daea:	f00a f92c 	bl	47d46 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   3daee:	f06f 040a 	mvn.w	r4, #10
}
   3daf2:	4620      	mov	r0, r4
   3daf4:	b005      	add	sp, #20
   3daf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
   3dafa:	b916      	cbnz	r6, 3db02 <usb_dc_ep_write+0x66>
   3dafc:	7feb      	ldrb	r3, [r5, #31]
   3dafe:	b103      	cbz	r3, 3db02 <usb_dc_ep_write+0x66>
		ep_ctx->trans_zlp = false;
   3db00:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   3db02:	7aab      	ldrb	r3, [r5, #10]
   3db04:	b9bb      	cbnz	r3, 3db36 <usb_dc_ep_write+0x9a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   3db06:	b15e      	cbz	r6, 3db20 <usb_dc_ep_write+0x84>
   3db08:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   3db0c:	42b3      	cmp	r3, r6
   3db0e:	d907      	bls.n	3db20 <usb_dc_ep_write+0x84>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   3db10:	686a      	ldr	r2, [r5, #4]
   3db12:	fbb6 f3f2 	udiv	r3, r6, r2
   3db16:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   3db1a:	b90b      	cbnz	r3, 3db20 <usb_dc_ep_write+0x84>
			ep_ctx->trans_zlp = true;
   3db1c:	2301      	movs	r3, #1
   3db1e:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   3db20:	f002 fe8c 	bl	4083c <nrfx_usbd_last_setup_dir_get>
   3db24:	42b8      	cmp	r0, r7
   3db26:	d006      	beq.n	3db36 <usb_dc_ep_write+0x9a>
		nrfx_usbd_setup_clear();
   3db28:	f002 fe78 	bl	4081c <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   3db2c:	4815      	ldr	r0, [pc, #84]	; (3db84 <usb_dc_ep_write+0xe8>)
   3db2e:	f00a f90a 	bl	47d46 <k_mutex_unlock.isra.0>
		return 0;
   3db32:	2400      	movs	r4, #0
   3db34:	e7dd      	b.n	3daf2 <usb_dc_ep_write+0x56>
	ep_ctx->write_in_progress = true;
   3db36:	2301      	movs	r3, #1
   3db38:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   3db3a:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   3db3e:	a901      	add	r1, sp, #4
   3db40:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   3db42:	e9cd 9601 	strd	r9, r6, [sp, #4]
   3db46:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   3db4a:	f002 fc41 	bl	403d0 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   3db4e:	4b0e      	ldr	r3, [pc, #56]	; (3db88 <usb_dc_ep_write+0xec>)
   3db50:	4298      	cmp	r0, r3
   3db52:	d007      	beq.n	3db64 <usb_dc_ep_write+0xc8>
		ep_ctx->write_in_progress = false;
   3db54:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
   3db58:	b10c      	cbz	r4, 3db5e <usb_dc_ep_write+0xc2>
			*ret_bytes = 0;
   3db5a:	f8c4 8000 	str.w	r8, [r4]
		result = -EIO;
   3db5e:	f06f 0404 	mvn.w	r4, #4
   3db62:	e002      	b.n	3db6a <usb_dc_ep_write+0xce>
		if (ret_bytes) {
   3db64:	b10c      	cbz	r4, 3db6a <usb_dc_ep_write+0xce>
			*ret_bytes = data_len;
   3db66:	6026      	str	r6, [r4, #0]
	int result = 0;
   3db68:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
   3db6a:	4806      	ldr	r0, [pc, #24]	; (3db84 <usb_dc_ep_write+0xe8>)
   3db6c:	f00a f8eb 	bl	47d46 <k_mutex_unlock.isra.0>
	return result;
   3db70:	e7bf      	b.n	3daf2 <usb_dc_ep_write+0x56>
		return -ENODEV;
   3db72:	f06f 0412 	mvn.w	r4, #18
   3db76:	e7bc      	b.n	3daf2 <usb_dc_ep_write+0x56>
		return -EINVAL;
   3db78:	f06f 0415 	mvn.w	r4, #21
   3db7c:	e7b9      	b.n	3daf2 <usb_dc_ep_write+0x56>
   3db7e:	bf00      	nop
   3db80:	200033b0 	.word	0x200033b0
   3db84:	200033e8 	.word	0x200033e8
   3db88:	0bad0000 	.word	0x0bad0000

0003db8c <usb_dc_ep_read_wait>:
{
   3db8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3db90:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   3db92:	4b20      	ldr	r3, [pc, #128]	; (3dc14 <usb_dc_ep_read_wait+0x88>)
{
   3db94:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   3db96:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   3db9a:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   3db9c:	2a00      	cmp	r2, #0
   3db9e:	d033      	beq.n	3dc08 <usb_dc_ep_read_wait+0x7c>
   3dba0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   3dba4:	b383      	cbz	r3, 3dc08 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3dba6:	0603      	lsls	r3, r0, #24
   3dba8:	d431      	bmi.n	3dc0e <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
   3dbaa:	b901      	cbnz	r1, 3dbae <usb_dc_ep_read_wait+0x22>
   3dbac:	bb7f      	cbnz	r7, 3dc0e <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
   3dbae:	f7ff faf7 	bl	3d1a0 <endpoint_ctx>
	if (!ep_ctx) {
   3dbb2:	4604      	mov	r4, r0
   3dbb4:	b358      	cbz	r0, 3dc0e <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
   3dbb6:	7a03      	ldrb	r3, [r0, #8]
   3dbb8:	b34b      	cbz	r3, 3dc0e <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3dbba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3dbbe:	4816      	ldr	r0, [pc, #88]	; (3dc18 <usb_dc_ep_read_wait+0x8c>)
   3dbc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3dbc4:	f00a f8bd 	bl	47d42 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   3dbc8:	68e3      	ldr	r3, [r4, #12]
   3dbca:	429f      	cmp	r7, r3
   3dbcc:	46b8      	mov	r8, r7
   3dbce:	bf28      	it	cs
   3dbd0:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   3dbd2:	b946      	cbnz	r6, 3dbe6 <usb_dc_ep_read_wait+0x5a>
   3dbd4:	b93f      	cbnz	r7, 3dbe6 <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
   3dbd6:	b105      	cbz	r5, 3dbda <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
   3dbd8:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   3dbda:	480f      	ldr	r0, [pc, #60]	; (3dc18 <usb_dc_ep_read_wait+0x8c>)
   3dbdc:	f00a f8b3 	bl	47d46 <k_mutex_unlock.isra.0>
		return 0;
   3dbe0:	2000      	movs	r0, #0
}
   3dbe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   3dbe6:	69a1      	ldr	r1, [r4, #24]
   3dbe8:	4642      	mov	r2, r8
   3dbea:	4630      	mov	r0, r6
   3dbec:	f007 f909 	bl	44e02 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   3dbf0:	69a3      	ldr	r3, [r4, #24]
   3dbf2:	4443      	add	r3, r8
   3dbf4:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   3dbf6:	68e3      	ldr	r3, [r4, #12]
   3dbf8:	eba3 0308 	sub.w	r3, r3, r8
   3dbfc:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   3dbfe:	2d00      	cmp	r5, #0
   3dc00:	d0eb      	beq.n	3dbda <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
   3dc02:	f8c5 8000 	str.w	r8, [r5]
   3dc06:	e7e8      	b.n	3dbda <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
   3dc08:	f06f 0012 	mvn.w	r0, #18
   3dc0c:	e7e9      	b.n	3dbe2 <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
   3dc0e:	f06f 0015 	mvn.w	r0, #21
   3dc12:	e7e6      	b.n	3dbe2 <usb_dc_ep_read_wait+0x56>
   3dc14:	200033b0 	.word	0x200033b0
   3dc18:	200033e8 	.word	0x200033e8

0003dc1c <usb_dc_ep_read_continue>:
{
   3dc1c:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   3dc1e:	4d1e      	ldr	r5, [pc, #120]	; (3dc98 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   3dc20:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   3dc24:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   3dc26:	b382      	cbz	r2, 3dc8a <usb_dc_ep_read_continue+0x6e>
   3dc28:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   3dc2c:	b36a      	cbz	r2, 3dc8a <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   3dc2e:	061b      	lsls	r3, r3, #24
   3dc30:	d42e      	bmi.n	3dc90 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   3dc32:	f7ff fab5 	bl	3d1a0 <endpoint_ctx>
	if (!ep_ctx) {
   3dc36:	4604      	mov	r4, r0
   3dc38:	b350      	cbz	r0, 3dc90 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   3dc3a:	7a03      	ldrb	r3, [r0, #8]
   3dc3c:	b343      	cbz	r3, 3dc90 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   3dc3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3dc42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3dc46:	f105 0038 	add.w	r0, r5, #56	; 0x38
   3dc4a:	f00a f87a 	bl	47d42 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   3dc4e:	68e3      	ldr	r3, [r4, #12]
   3dc50:	b9b3      	cbnz	r3, 3dc80 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   3dc52:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   3dc54:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   3dc56:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   3dc58:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   3dc5a:	7f63      	ldrb	r3, [r4, #29]
   3dc5c:	b183      	cbz	r3, 3dc80 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   3dc5e:	f7ff fb0f 	bl	3d280 <usbd_evt_alloc>
			if (!ev) {
   3dc62:	b930      	cbnz	r0, 3dc72 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   3dc64:	f105 0038 	add.w	r0, r5, #56	; 0x38
   3dc68:	f00a f86d 	bl	47d46 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   3dc6c:	f06f 000b 	mvn.w	r0, #11
}
   3dc70:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   3dc72:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   3dc74:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   3dc76:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   3dc78:	f7ff faba 	bl	3d1f0 <usbd_evt_put>
			usbd_work_schedule();
   3dc7c:	f7ff fabe 	bl	3d1fc <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   3dc80:	4806      	ldr	r0, [pc, #24]	; (3dc9c <usb_dc_ep_read_continue+0x80>)
   3dc82:	f00a f860 	bl	47d46 <k_mutex_unlock.isra.0>
	return 0;
   3dc86:	2000      	movs	r0, #0
   3dc88:	e7f2      	b.n	3dc70 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   3dc8a:	f06f 0012 	mvn.w	r0, #18
   3dc8e:	e7ef      	b.n	3dc70 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   3dc90:	f06f 0015 	mvn.w	r0, #21
   3dc94:	e7ec      	b.n	3dc70 <usb_dc_ep_read_continue+0x54>
   3dc96:	bf00      	nop
   3dc98:	200033b0 	.word	0x200033b0
   3dc9c:	200033e8 	.word	0x200033e8

0003dca0 <usb_dc_ep_set_callback>:
{
   3dca0:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   3dca2:	4b08      	ldr	r3, [pc, #32]	; (3dcc4 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   3dca4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3dca8:	b12b      	cbz	r3, 3dcb6 <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
   3dcaa:	f7ff fa79 	bl	3d1a0 <endpoint_ctx>
	if (!ep_ctx) {
   3dcae:	b128      	cbz	r0, 3dcbc <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
   3dcb0:	6001      	str	r1, [r0, #0]
	return 0;
   3dcb2:	2000      	movs	r0, #0
}
   3dcb4:	bd08      	pop	{r3, pc}
		return -ENODEV;
   3dcb6:	f06f 0012 	mvn.w	r0, #18
   3dcba:	e7fb      	b.n	3dcb4 <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
   3dcbc:	f06f 0015 	mvn.w	r0, #21
   3dcc0:	e7f8      	b.n	3dcb4 <usb_dc_ep_set_callback+0x14>
   3dcc2:	bf00      	nop
   3dcc4:	200033b0 	.word	0x200033b0

0003dcc8 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   3dcc8:	4b01      	ldr	r3, [pc, #4]	; (3dcd0 <usb_dc_set_status_callback+0x8>)
   3dcca:	6018      	str	r0, [r3, #0]
}
   3dccc:	4770      	bx	lr
   3dcce:	bf00      	nop
   3dcd0:	200033b0 	.word	0x200033b0

0003dcd4 <usb_dc_ep_mps>:
{
   3dcd4:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   3dcd6:	4b07      	ldr	r3, [pc, #28]	; (3dcf4 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   3dcd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3dcdc:	b123      	cbz	r3, 3dce8 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   3dcde:	f7ff fa5f 	bl	3d1a0 <endpoint_ctx>
	if (!ep_ctx) {
   3dce2:	b120      	cbz	r0, 3dcee <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   3dce4:	6840      	ldr	r0, [r0, #4]
}
   3dce6:	bd08      	pop	{r3, pc}
		return -ENODEV;
   3dce8:	f06f 0012 	mvn.w	r0, #18
   3dcec:	e7fb      	b.n	3dce6 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   3dcee:	f06f 0015 	mvn.w	r0, #21
   3dcf2:	e7f8      	b.n	3dce6 <usb_dc_ep_mps+0x12>
   3dcf4:	200033b0 	.word	0x200033b0

0003dcf8 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   3dcf8:	2811      	cmp	r0, #17
   3dcfa:	d80e      	bhi.n	3dd1a <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   3dcfc:	4a08      	ldr	r2, [pc, #32]	; (3dd20 <adc_gain_invert+0x28>)
   3dcfe:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   3dd02:	b153      	cbz	r3, 3dd1a <adc_gain_invert+0x22>
   3dd04:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   3dd08:	7852      	ldrb	r2, [r2, #1]
   3dd0a:	b132      	cbz	r2, 3dd1a <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   3dd0c:	6808      	ldr	r0, [r1, #0]
   3dd0e:	4343      	muls	r3, r0
			rv = 0;
   3dd10:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   3dd12:	fb93 f3f2 	sdiv	r3, r3, r2
   3dd16:	600b      	str	r3, [r1, #0]
			rv = 0;
   3dd18:	4770      	bx	lr
	int rv = -EINVAL;
   3dd1a:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   3dd1e:	4770      	bx	lr
   3dd20:	0004b4d7 	.word	0x0004b4d7

0003dd24 <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   3dd24:	7908      	ldrb	r0, [r1, #4]
{
   3dd26:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   3dd28:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= SAADC_CH_NUM) {
   3dd2c:	2c07      	cmp	r4, #7
   3dd2e:	d81f      	bhi.n	3dd70 <adc_nrfx_channel_setup+0x4c>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   3dd30:	780b      	ldrb	r3, [r1, #0]
   3dd32:	2b09      	cmp	r3, #9
   3dd34:	d81c      	bhi.n	3dd70 <adc_nrfx_channel_setup+0x4c>
   3dd36:	e8df f003 	tbb	[pc, r3]
   3dd3a:	0606      	.short	0x0606
   3dd3c:	1b060606 	.word	0x1b060606
   3dd40:	201b1e05 	.word	0x201b1e05
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
   3dd44:	2305      	movs	r3, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   3dd46:	784a      	ldrb	r2, [r1, #1]
   3dd48:	2a03      	cmp	r2, #3
   3dd4a:	d018      	beq.n	3dd7e <adc_nrfx_channel_setup+0x5a>
   3dd4c:	2a04      	cmp	r2, #4
   3dd4e:	d10f      	bne.n	3dd70 <adc_nrfx_channel_setup+0x4c>
	nrf_saadc_channel_config_t config = {
   3dd50:	2500      	movs	r5, #0
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
   3dd52:	884a      	ldrh	r2, [r1, #2]
   3dd54:	f244 060a 	movw	r6, #16394	; 0x400a
   3dd58:	42b2      	cmp	r2, r6
   3dd5a:	d044      	beq.n	3dde6 <adc_nrfx_channel_setup+0xc2>
   3dd5c:	d811      	bhi.n	3dd82 <adc_nrfx_channel_setup+0x5e>
   3dd5e:	f244 0603 	movw	r6, #16387	; 0x4003
   3dd62:	42b2      	cmp	r2, r6
   3dd64:	d03b      	beq.n	3ddde <adc_nrfx_channel_setup+0xba>
   3dd66:	f244 0605 	movw	r6, #16389	; 0x4005
   3dd6a:	42b2      	cmp	r2, r6
   3dd6c:	d039      	beq.n	3dde2 <adc_nrfx_channel_setup+0xbe>
   3dd6e:	b3d2      	cbz	r2, 3dde6 <adc_nrfx_channel_setup+0xc2>
   3dd70:	f06f 0015 	mvn.w	r0, #21
   3dd74:	e032      	b.n	3dddc <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   3dd76:	2306      	movs	r3, #6
		break;
   3dd78:	e7e5      	b.n	3dd46 <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   3dd7a:	2307      	movs	r3, #7
		break;
   3dd7c:	e7e3      	b.n	3dd46 <adc_nrfx_channel_setup+0x22>
	switch (channel_cfg->reference) {
   3dd7e:	2501      	movs	r5, #1
   3dd80:	e7e7      	b.n	3dd52 <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   3dd82:	f244 0614 	movw	r6, #16404	; 0x4014
   3dd86:	42b2      	cmp	r2, r6
   3dd88:	d02f      	beq.n	3ddea <adc_nrfx_channel_setup+0xc6>
   3dd8a:	f244 0628 	movw	r6, #16424	; 0x4028
   3dd8e:	42b2      	cmp	r2, r6
   3dd90:	d02d      	beq.n	3ddee <adc_nrfx_channel_setup+0xca>
   3dd92:	f244 060f 	movw	r6, #16399	; 0x400f
   3dd96:	42b2      	cmp	r2, r6
   3dd98:	d1ea      	bne.n	3dd70 <adc_nrfx_channel_setup+0x4c>
	case ADC_ACQ_TIME_DEFAULT:
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10):
		config.acq_time = NRF_SAADC_ACQTIME_10US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 15):
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   3dd9a:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   3dd9c:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   3dda0:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   3dda2:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   3dda6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   3ddaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   3ddae:	0122      	lsls	r2, r4, #4
   3ddb0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3ddb4:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   3ddb8:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   3ddba:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   3ddbe:	0123      	lsls	r3, r4, #4
   3ddc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3ddc4:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   3ddc8:	798a      	ldrb	r2, [r1, #6]
   3ddca:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   3ddce:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   3ddd2:	4b08      	ldr	r3, [pc, #32]	; (3ddf4 <adc_nrfx_channel_setup+0xd0>)
   3ddd4:	794a      	ldrb	r2, [r1, #5]
   3ddd6:	4423      	add	r3, r4
   3ddd8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	return 0;
}
   3dddc:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   3ddde:	2200      	movs	r2, #0
   3dde0:	e7dc      	b.n	3dd9c <adc_nrfx_channel_setup+0x78>
	switch (channel_cfg->acquisition_time) {
   3dde2:	2201      	movs	r2, #1
   3dde4:	e7da      	b.n	3dd9c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   3dde6:	2202      	movs	r2, #2
   3dde8:	e7d8      	b.n	3dd9c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   3ddea:	2204      	movs	r2, #4
   3ddec:	e7d6      	b.n	3dd9c <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   3ddee:	2205      	movs	r2, #5
   3ddf0:	e7d4      	b.n	3dd9c <adc_nrfx_channel_setup+0x78>
   3ddf2:	bf00      	nop
   3ddf4:	20000168 	.word	0x20000168

0003ddf8 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   3ddf8:	4b04      	ldr	r3, [pc, #16]	; (3de0c <adc_context_start_sampling.isra.0+0x14>)
   3ddfa:	2201      	movs	r2, #1
   3ddfc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   3de00:	b108      	cbz	r0, 3de06 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3de02:	60da      	str	r2, [r3, #12]
}
   3de04:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3de06:	601a      	str	r2, [r3, #0]
   3de08:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   3de0a:	4770      	bx	lr
   3de0c:	40007000 	.word	0x40007000

0003de10 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   3de10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3de12:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   3de14:	485e      	ldr	r0, [pc, #376]	; (3df90 <adc_nrfx_read+0x180>)
   3de16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3de1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3de1e:	f003 fc0d 	bl	4163c <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   3de22:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
   3de24:	b910      	cbnz	r0, 3de2c <adc_nrfx_read+0x1c>
	switch (sequence->resolution) {
   3de26:	f06f 0415 	mvn.w	r4, #21
   3de2a:	e099      	b.n	3df60 <adc_nrfx_read+0x150>
	if (!selected_channels ||
   3de2c:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
   3de30:	d1f9      	bne.n	3de26 <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
   3de32:	4c58      	ldr	r4, [pc, #352]	; (3df94 <adc_nrfx_read+0x184>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   3de34:	4f58      	ldr	r7, [pc, #352]	; (3df98 <adc_nrfx_read+0x188>)
	active_channels = 0U;
   3de36:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   3de38:	fa20 f103 	lsr.w	r1, r0, r3
   3de3c:	f011 0101 	ands.w	r1, r1, #1
   3de40:	d032      	beq.n	3dea8 <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
   3de42:	18f9      	adds	r1, r7, r3
   3de44:	f891 c0a0 	ldrb.w	ip, [r1, #160]	; 0xa0
   3de48:	f1bc 0f00 	cmp.w	ip, #0
   3de4c:	d0eb      	beq.n	3de26 <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   3de4e:	eb04 1e03 	add.w	lr, r4, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   3de52:	7c6e      	ldrb	r6, [r5, #17]
   3de54:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   3de58:	3e00      	subs	r6, #0
   3de5a:	bf18      	it	ne
   3de5c:	2601      	movne	r6, #1
   3de5e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   3de62:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
   3de66:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   3de6a:	f103 0151 	add.w	r1, r3, #81	; 0x51
   3de6e:	0109      	lsls	r1, r1, #4
			++active_channels;
   3de70:	3201      	adds	r2, #1
   3de72:	f844 c001 	str.w	ip, [r4, r1]
   3de76:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   3de78:	3301      	adds	r3, #1
   3de7a:	2b08      	cmp	r3, #8
   3de7c:	d1dc      	bne.n	3de38 <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
   3de7e:	7c2b      	ldrb	r3, [r5, #16]
   3de80:	3b08      	subs	r3, #8
   3de82:	2b06      	cmp	r3, #6
   3de84:	d8cf      	bhi.n	3de26 <adc_nrfx_read+0x16>
   3de86:	a101      	add	r1, pc, #4	; (adr r1, 3de8c <adc_nrfx_read+0x7c>)
   3de88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   3de8c:	0003df75 	.word	0x0003df75
   3de90:	0003de27 	.word	0x0003de27
   3de94:	0003deb3 	.word	0x0003deb3
   3de98:	0003de27 	.word	0x0003de27
   3de9c:	0003df6d 	.word	0x0003df6d
   3dea0:	0003de27 	.word	0x0003de27
   3dea4:	0003df71 	.word	0x0003df71
   3dea8:	f103 0651 	add.w	r6, r3, #81	; 0x51
   3deac:	0136      	lsls	r6, r6, #4
   3deae:	51a1      	str	r1, [r4, r6]
}
   3deb0:	e7e2      	b.n	3de78 <adc_nrfx_read+0x68>
   3deb2:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
   3deb4:	4937      	ldr	r1, [pc, #220]	; (3df94 <adc_nrfx_read+0x184>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   3deb6:	2a01      	cmp	r2, #1
   3deb8:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   3debc:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   3debe:	d95b      	bls.n	3df78 <adc_nrfx_read+0x168>
   3dec0:	2b00      	cmp	r3, #0
   3dec2:	d1b0      	bne.n	3de26 <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
   3dec4:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   3dec8:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   3deca:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   3decc:	b111      	cbz	r1, 3ded4 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   3dece:	8989      	ldrh	r1, [r1, #12]
   3ded0:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   3ded4:	68e9      	ldr	r1, [r5, #12]
   3ded6:	4299      	cmp	r1, r3
   3ded8:	d356      	bcc.n	3df88 <adc_nrfx_read+0x178>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   3deda:	4b2e      	ldr	r3, [pc, #184]	; (3df94 <adc_nrfx_read+0x184>)
   3dedc:	68a9      	ldr	r1, [r5, #8]
   3dede:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   3dee2:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   3dee4:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   3dee8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   3deea:	4c2b      	ldr	r4, [pc, #172]	; (3df98 <adc_nrfx_read+0x188>)
   3deec:	f104 0674 	add.w	r6, r4, #116	; 0x74
   3def0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   3def2:	683b      	ldr	r3, [r7, #0]
   3def4:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
   3def6:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   3def8:	2600      	movs	r6, #0
   3defa:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   3defc:	4627      	mov	r7, r4
   3defe:	2b00      	cmp	r3, #0
   3df00:	d03d      	beq.n	3df7e <adc_nrfx_read+0x16e>
		ctx->options = *sequence->options;
   3df02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   3df04:	f104 0588 	add.w	r5, r4, #136	; 0x88
   3df08:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   3df0c:	6765      	str	r5, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   3df0e:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   3df12:	b3a0      	cbz	r0, 3df7e <adc_nrfx_read+0x16e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3df14:	f3bf 8f5b 	dmb	ish
   3df18:	e857 3f00 	ldrex	r3, [r7]
   3df1c:	e847 6200 	strex	r2, r6, [r7]
   3df20:	2a00      	cmp	r2, #0
   3df22:	d1f9      	bne.n	3df18 <adc_nrfx_read+0x108>
   3df24:	f3bf 8f5b 	dmb	ish
   3df28:	481c      	ldr	r0, [pc, #112]	; (3df9c <adc_nrfx_read+0x18c>)
   3df2a:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
   3df2e:	4a1c      	ldr	r2, [pc, #112]	; (3dfa0 <adc_nrfx_read+0x190>)
   3df30:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   3df34:	4631      	mov	r1, r6
   3df36:	2300      	movs	r3, #0
   3df38:	fbe7 0105 	umlal	r0, r1, r7, r5
   3df3c:	f7e8 f8e0 	bl	26100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   3df40:	2200      	movs	r2, #0
   3df42:	e9cd 0100 	strd	r0, r1, [sp]
   3df46:	2300      	movs	r3, #0
   3df48:	f104 0008 	add.w	r0, r4, #8
   3df4c:	f004 fa5e 	bl	4240c <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   3df50:	4814      	ldr	r0, [pc, #80]	; (3dfa4 <adc_nrfx_read+0x194>)
   3df52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3df56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3df5a:	f003 fb6f 	bl	4163c <z_impl_k_sem_take>
	return ctx->status;
   3df5e:	6f24      	ldr	r4, [r4, #112]	; 0x70
	z_impl_k_sem_give(sem);
   3df60:	480b      	ldr	r0, [pc, #44]	; (3df90 <adc_nrfx_read+0x180>)
   3df62:	f003 fb45 	bl	415f0 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   3df66:	4620      	mov	r0, r4
   3df68:	b003      	add	sp, #12
   3df6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   3df6c:	2302      	movs	r3, #2
		break;
   3df6e:	e7a1      	b.n	3deb4 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   3df70:	2303      	movs	r3, #3
		break;
   3df72:	e79f      	b.n	3deb4 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   3df74:	2300      	movs	r3, #0
   3df76:	e79d      	b.n	3deb4 <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
   3df78:	2b08      	cmp	r3, #8
   3df7a:	d9a3      	bls.n	3dec4 <adc_nrfx_read+0xb4>
   3df7c:	e753      	b.n	3de26 <adc_nrfx_read+0x16>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   3df7e:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   3df82:	f7ff ff39 	bl	3ddf8 <adc_context_start_sampling.isra.0>
   3df86:	e7e3      	b.n	3df50 <adc_nrfx_read+0x140>
		return -ENOMEM;
   3df88:	f06f 040b 	mvn.w	r4, #11
   3df8c:	e7e8      	b.n	3df60 <adc_nrfx_read+0x150>
   3df8e:	bf00      	nop
   3df90:	200001a8 	.word	0x200001a8
   3df94:	40007000 	.word	0x40007000
   3df98:	20000168 	.word	0x20000168
   3df9c:	000f423f 	.word	0x000f423f
   3dfa0:	000f4240 	.word	0x000f4240
   3dfa4:	200001c0 	.word	0x200001c0

0003dfa8 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3dfa8:	4b0e      	ldr	r3, [pc, #56]	; (3dfe4 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   3dfaa:	b510      	push	{r4, lr}
   3dfac:	2400      	movs	r4, #0
   3dfae:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   3dfb2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   3dfb6:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   3dfba:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   3dfbe:	2212      	movs	r2, #18
   3dfc0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   3dfc4:	2007      	movs	r0, #7
   3dfc6:	f7ec f83d 	bl	2a044 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3dfca:	4622      	mov	r2, r4
   3dfcc:	2101      	movs	r1, #1
   3dfce:	2007      	movs	r0, #7
   3dfd0:	f7ec f868 	bl	2a0a4 <z_arm_irq_priority_set>
	return sem->count;
   3dfd4:	4804      	ldr	r0, [pc, #16]	; (3dfe8 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   3dfd6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   3dfd8:	b913      	cbnz	r3, 3dfe0 <init_saadc+0x38>
   3dfda:	3040      	adds	r0, #64	; 0x40
   3dfdc:	f003 fb08 	bl	415f0 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   3dfe0:	2000      	movs	r0, #0
   3dfe2:	bd10      	pop	{r4, pc}
   3dfe4:	40007000 	.word	0x40007000
   3dfe8:	20000168 	.word	0x20000168

0003dfec <saadc_irq_handler>:
{
   3dfec:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3dfee:	4b30      	ldr	r3, [pc, #192]	; (3e0b0 <saadc_irq_handler+0xc4>)
   3dff0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   3dff4:	2a00      	cmp	r2, #0
   3dff6:	d04d      	beq.n	3e094 <saadc_irq_handler+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3dff8:	2200      	movs	r2, #0
   3dffa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   3dffe:	4c2d      	ldr	r4, [pc, #180]	; (3e0b4 <saadc_irq_handler+0xc8>)
   3e000:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e004:	2101      	movs	r1, #1
   3e006:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   3e008:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   3e00c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   3e00e:	4625      	mov	r5, r4
   3e010:	b3db      	cbz	r3, 3e08a <saadc_irq_handler+0x9e>
		adc_sequence_callback callback = ctx->options.callback;
   3e012:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   3e016:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   3e01a:	b133      	cbz	r3, 3e02a <saadc_irq_handler+0x3e>
			action = callback(dev,
   3e01c:	f104 0174 	add.w	r1, r4, #116	; 0x74
   3e020:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   3e022:	2801      	cmp	r0, #1
   3e024:	d014      	beq.n	3e050 <saadc_irq_handler+0x64>
   3e026:	2802      	cmp	r0, #2
   3e028:	d029      	beq.n	3e07e <saadc_irq_handler+0x92>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   3e02a:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   3e02e:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   3e032:	429a      	cmp	r2, r3
   3e034:	d923      	bls.n	3e07e <saadc_irq_handler+0x92>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   3e036:	3301      	adds	r3, #1
   3e038:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   3e03c:	4b1c      	ldr	r3, [pc, #112]	; (3e0b0 <saadc_irq_handler+0xc4>)
   3e03e:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   3e042:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   3e046:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   3e048:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   3e04c:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   3e050:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   3e054:	b92b      	cbnz	r3, 3e062 <saadc_irq_handler+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   3e056:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
}
   3e05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3e05e:	f7ff becb 	b.w	3ddf8 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   3e062:	f3bf 8f5b 	dmb	ish
   3e066:	e855 3f00 	ldrex	r3, [r5]
   3e06a:	1e5a      	subs	r2, r3, #1
   3e06c:	e845 2100 	strex	r1, r2, [r5]
   3e070:	2900      	cmp	r1, #0
   3e072:	d1f8      	bne.n	3e066 <saadc_irq_handler+0x7a>
   3e074:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   3e078:	2b01      	cmp	r3, #1
   3e07a:	dcec      	bgt.n	3e056 <saadc_irq_handler+0x6a>
   3e07c:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   3e07e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   3e082:	b113      	cbz	r3, 3e08a <saadc_irq_handler+0x9e>
	z_impl_k_timer_stop(timer);
   3e084:	480c      	ldr	r0, [pc, #48]	; (3e0b8 <saadc_irq_handler+0xcc>)
   3e086:	f00a ffa2 	bl	48fce <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   3e08a:	480c      	ldr	r0, [pc, #48]	; (3e0bc <saadc_irq_handler+0xd0>)
   3e08c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3e090:	f003 baae 	b.w	415f0 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e094:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   3e098:	2900      	cmp	r1, #0
   3e09a:	d0ef      	beq.n	3e07c <saadc_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e09c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   3e0a0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e0a4:	2201      	movs	r2, #1
   3e0a6:	609a      	str	r2, [r3, #8]
   3e0a8:	601a      	str	r2, [r3, #0]
   3e0aa:	605a      	str	r2, [r3, #4]
}
   3e0ac:	e7e6      	b.n	3e07c <saadc_irq_handler+0x90>
   3e0ae:	bf00      	nop
   3e0b0:	40007000 	.word	0x40007000
   3e0b4:	20000168 	.word	0x20000168
   3e0b8:	20000170 	.word	0x20000170
   3e0bc:	200001c0 	.word	0x200001c0

0003e0c0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   3e0c0:	4b08      	ldr	r3, [pc, #32]	; (3e0e4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   3e0c2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   3e0c4:	1ac3      	subs	r3, r0, r3
{
   3e0c6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3e0c8:	4907      	ldr	r1, [pc, #28]	; (3e0e8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   3e0ca:	109b      	asrs	r3, r3, #2
{
   3e0cc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3e0ce:	4359      	muls	r1, r3
   3e0d0:	4806      	ldr	r0, [pc, #24]	; (3e0ec <onoff_stop+0x2c>)
   3e0d2:	2240      	movs	r2, #64	; 0x40
   3e0d4:	f009 fe95 	bl	47e02 <stop>
	notify(mgr, res);
   3e0d8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   3e0da:	4601      	mov	r1, r0
	notify(mgr, res);
   3e0dc:	4620      	mov	r0, r4
}
   3e0de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   3e0e2:	4718      	bx	r3
   3e0e4:	20003650 	.word	0x20003650
   3e0e8:	b6db6db7 	.word	0xb6db6db7
   3e0ec:	000493bc 	.word	0x000493bc

0003e0f0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   3e0f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   3e0f2:	4c0c      	ldr	r4, [pc, #48]	; (3e124 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e0f4:	4a0c      	ldr	r2, [pc, #48]	; (3e128 <onoff_start+0x38>)
   3e0f6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   3e0f8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e0fa:	9300      	str	r3, [sp, #0]
{
   3e0fc:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e0fe:	460b      	mov	r3, r1
   3e100:	490a      	ldr	r1, [pc, #40]	; (3e12c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   3e102:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e104:	4361      	muls	r1, r4
{
   3e106:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   3e108:	4809      	ldr	r0, [pc, #36]	; (3e130 <onoff_start+0x40>)
   3e10a:	f009 fea6 	bl	47e5a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   3e10e:	1e01      	subs	r1, r0, #0
   3e110:	da05      	bge.n	3e11e <onoff_start+0x2e>
		notify(mgr, err);
   3e112:	4630      	mov	r0, r6
   3e114:	462b      	mov	r3, r5
	}
}
   3e116:	b002      	add	sp, #8
   3e118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   3e11c:	4718      	bx	r3
}
   3e11e:	b002      	add	sp, #8
   3e120:	bd70      	pop	{r4, r5, r6, pc}
   3e122:	bf00      	nop
   3e124:	20003650 	.word	0x20003650
   3e128:	00047ecb 	.word	0x00047ecb
   3e12c:	b6db6db7 	.word	0xb6db6db7
   3e130:	000493bc 	.word	0x000493bc

0003e134 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3e134:	2200      	movs	r2, #0
{
   3e136:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3e138:	2101      	movs	r1, #1
{
   3e13a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   3e13c:	4610      	mov	r0, r2
   3e13e:	f7eb ffb1 	bl	2a0a4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   3e142:	2000      	movs	r0, #0
   3e144:	f7eb ff7e 	bl	2a044 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   3e148:	480f      	ldr	r0, [pc, #60]	; (3e188 <clk_init+0x54>)
   3e14a:	f001 f985 	bl	3f458 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   3e14e:	4b0f      	ldr	r3, [pc, #60]	; (3e18c <clk_init+0x58>)
   3e150:	4298      	cmp	r0, r3
   3e152:	d115      	bne.n	3e180 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   3e154:	f001 f990 	bl	3f478 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   3e158:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   3e15a:	490d      	ldr	r1, [pc, #52]	; (3e190 <clk_init+0x5c>)
   3e15c:	4630      	mov	r0, r6
   3e15e:	f004 fdf9 	bl	42d54 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   3e162:	2800      	cmp	r0, #0
   3e164:	db0b      	blt.n	3e17e <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   3e166:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   3e168:	4909      	ldr	r1, [pc, #36]	; (3e190 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   3e16a:	2501      	movs	r5, #1
   3e16c:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   3e16e:	f104 001c 	add.w	r0, r4, #28
   3e172:	f004 fdef 	bl	42d54 <onoff_manager_init>
		if (err < 0) {
   3e176:	2800      	cmp	r0, #0
   3e178:	db01      	blt.n	3e17e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   3e17a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   3e17c:	2000      	movs	r0, #0
}
   3e17e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   3e180:	f06f 0004 	mvn.w	r0, #4
   3e184:	e7fb      	b.n	3e17e <clk_init+0x4a>
   3e186:	bf00      	nop
   3e188:	0003e1c9 	.word	0x0003e1c9
   3e18c:	0bad0000 	.word	0x0bad0000
   3e190:	0004ad70 	.word	0x0004ad70

0003e194 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   3e194:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   3e196:	230c      	movs	r3, #12
   3e198:	4809      	ldr	r0, [pc, #36]	; (3e1c0 <clkstarted_handle.constprop.0+0x2c>)
   3e19a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   3e19c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   3e19e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   3e1a0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   3e1a4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   3e1a6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   3e1a8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   3e1aa:	4418      	add	r0, r3
   3e1ac:	f009 fe16 	bl	47ddc <set_on_state>
	if (callback) {
   3e1b0:	b12d      	cbz	r5, 3e1be <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   3e1b2:	4632      	mov	r2, r6
   3e1b4:	462b      	mov	r3, r5
   3e1b6:	4803      	ldr	r0, [pc, #12]	; (3e1c4 <clkstarted_handle.constprop.0+0x30>)
}
   3e1b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   3e1bc:	4718      	bx	r3
}
   3e1be:	bd70      	pop	{r4, r5, r6, pc}
   3e1c0:	20003650 	.word	0x20003650
   3e1c4:	000493bc 	.word	0x000493bc

0003e1c8 <clock_event_handler>:
	switch (event) {
   3e1c8:	b110      	cbz	r0, 3e1d0 <clock_event_handler+0x8>
   3e1ca:	2801      	cmp	r0, #1
   3e1cc:	d004      	beq.n	3e1d8 <clock_event_handler+0x10>
   3e1ce:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   3e1d0:	4b03      	ldr	r3, [pc, #12]	; (3e1e0 <clock_event_handler+0x18>)
   3e1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   3e1d4:	075b      	lsls	r3, r3, #29
   3e1d6:	d101      	bne.n	3e1dc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   3e1d8:	f7ff bfdc 	b.w	3e194 <clkstarted_handle.constprop.0>
}
   3e1dc:	4770      	bx	lr
   3e1de:	bf00      	nop
   3e1e0:	20003650 	.word	0x20003650

0003e1e4 <generic_hfclk_start>:
{
   3e1e4:	b508      	push	{r3, lr}
	__asm__ volatile(
   3e1e6:	f04f 0320 	mov.w	r3, #32
   3e1ea:	f3ef 8111 	mrs	r1, BASEPRI
   3e1ee:	f383 8812 	msr	BASEPRI_MAX, r3
   3e1f2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   3e1f6:	4a12      	ldr	r2, [pc, #72]	; (3e240 <generic_hfclk_start+0x5c>)
   3e1f8:	6813      	ldr	r3, [r2, #0]
   3e1fa:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   3e1fe:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   3e202:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   3e204:	d00c      	beq.n	3e220 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3e206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3e20a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3e20e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   3e212:	f013 0301 	ands.w	r3, r3, #1
   3e216:	d003      	beq.n	3e220 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   3e218:	480a      	ldr	r0, [pc, #40]	; (3e244 <generic_hfclk_start+0x60>)
   3e21a:	f009 fddf 	bl	47ddc <set_on_state>
			already_started = true;
   3e21e:	2301      	movs	r3, #1
	__asm__ volatile(
   3e220:	f381 8811 	msr	BASEPRI, r1
   3e224:	f3bf 8f6f 	isb	sy
	if (already_started) {
   3e228:	b123      	cbz	r3, 3e234 <generic_hfclk_start+0x50>
}
   3e22a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   3e22e:	2000      	movs	r0, #0
   3e230:	f7ff bfb0 	b.w	3e194 <clkstarted_handle.constprop.0>
}
   3e234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   3e238:	2001      	movs	r0, #1
   3e23a:	f009 bf7f 	b.w	4813c <nrfx_clock_start>
   3e23e:	bf00      	nop
   3e240:	200036a0 	.word	0x200036a0
   3e244:	20003690 	.word	0x20003690

0003e248 <api_blocking_start>:
{
   3e248:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3e24a:	2200      	movs	r2, #0
   3e24c:	2301      	movs	r3, #1
   3e24e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3e252:	ab04      	add	r3, sp, #16
   3e254:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3e258:	4a09      	ldr	r2, [pc, #36]	; (3e280 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3e25a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3e25e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   3e260:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   3e264:	f009 fe2a 	bl	47ebc <api_start>
	if (err < 0) {
   3e268:	2800      	cmp	r0, #0
   3e26a:	db05      	blt.n	3e278 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   3e26c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   3e270:	2300      	movs	r3, #0
   3e272:	4668      	mov	r0, sp
   3e274:	f003 f9e2 	bl	4163c <z_impl_k_sem_take>
}
   3e278:	b007      	add	sp, #28
   3e27a:	f85d fb04 	ldr.w	pc, [sp], #4
   3e27e:	bf00      	nop
   3e280:	00047ee9 	.word	0x00047ee9

0003e284 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3e284:	4b09      	ldr	r3, [pc, #36]	; (3e2ac <generic_hfclk_stop+0x28>)
   3e286:	f3bf 8f5b 	dmb	ish
   3e28a:	e853 2f00 	ldrex	r2, [r3]
   3e28e:	f022 0102 	bic.w	r1, r2, #2
   3e292:	e843 1000 	strex	r0, r1, [r3]
   3e296:	2800      	cmp	r0, #0
   3e298:	d1f7      	bne.n	3e28a <generic_hfclk_stop+0x6>
   3e29a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   3e29e:	07d3      	lsls	r3, r2, #31
   3e2a0:	d402      	bmi.n	3e2a8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   3e2a2:	2001      	movs	r0, #1
   3e2a4:	f001 b8f6 	b.w	3f494 <nrfx_clock_stop>
}
   3e2a8:	4770      	bx	lr
   3e2aa:	bf00      	nop
   3e2ac:	200036a0 	.word	0x200036a0

0003e2b0 <z_nrf_clock_control_get_onoff>:
}
   3e2b0:	4a02      	ldr	r2, [pc, #8]	; (3e2bc <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   3e2b2:	b2c3      	uxtb	r3, r0
}
   3e2b4:	201c      	movs	r0, #28
   3e2b6:	fb03 2000 	mla	r0, r3, r0, r2
   3e2ba:	4770      	bx	lr
   3e2bc:	20003650 	.word	0x20003650

0003e2c0 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3e2c0:	4b09      	ldr	r3, [pc, #36]	; (3e2e8 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   3e2c2:	f3bf 8f5b 	dmb	ish
   3e2c6:	e853 2f00 	ldrex	r2, [r3]
   3e2ca:	f042 0101 	orr.w	r1, r2, #1
   3e2ce:	e843 1000 	strex	r0, r1, [r3]
   3e2d2:	2800      	cmp	r0, #0
   3e2d4:	d1f7      	bne.n	3e2c6 <z_nrf_clock_bt_ctlr_hf_request+0x6>
   3e2d6:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   3e2da:	0793      	lsls	r3, r2, #30
   3e2dc:	d402      	bmi.n	3e2e4 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   3e2de:	2001      	movs	r0, #1
   3e2e0:	f009 bf2c 	b.w	4813c <nrfx_clock_start>
}
   3e2e4:	4770      	bx	lr
   3e2e6:	bf00      	nop
   3e2e8:	200036a0 	.word	0x200036a0

0003e2ec <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3e2ec:	4b09      	ldr	r3, [pc, #36]	; (3e314 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   3e2ee:	f3bf 8f5b 	dmb	ish
   3e2f2:	e853 2f00 	ldrex	r2, [r3]
   3e2f6:	f022 0101 	bic.w	r1, r2, #1
   3e2fa:	e843 1000 	strex	r0, r1, [r3]
   3e2fe:	2800      	cmp	r0, #0
   3e300:	d1f7      	bne.n	3e2f2 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   3e302:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   3e306:	0793      	lsls	r3, r2, #30
   3e308:	d402      	bmi.n	3e310 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   3e30a:	2001      	movs	r0, #1
   3e30c:	f001 b8c2 	b.w	3f494 <nrfx_clock_stop>
}
   3e310:	4770      	bx	lr
   3e312:	bf00      	nop
   3e314:	200036a0 	.word	0x200036a0

0003e318 <z_nrf_clock_control_lf_on>:
{
   3e318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3e31c:	4939      	ldr	r1, [pc, #228]	; (3e404 <z_nrf_clock_control_lf_on+0xec>)
   3e31e:	f3bf 8f5b 	dmb	ish
   3e322:	4607      	mov	r7, r0
   3e324:	2201      	movs	r2, #1
   3e326:	e851 3f00 	ldrex	r3, [r1]
   3e32a:	e841 2000 	strex	r0, r2, [r1]
   3e32e:	2800      	cmp	r0, #0
   3e330:	d1f9      	bne.n	3e326 <z_nrf_clock_control_lf_on+0xe>
   3e332:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   3e336:	b933      	cbnz	r3, 3e346 <z_nrf_clock_control_lf_on+0x2e>
   3e338:	4933      	ldr	r1, [pc, #204]	; (3e408 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   3e33a:	4834      	ldr	r0, [pc, #208]	; (3e40c <z_nrf_clock_control_lf_on+0xf4>)
   3e33c:	604b      	str	r3, [r1, #4]
   3e33e:	60cb      	str	r3, [r1, #12]
   3e340:	608a      	str	r2, [r1, #8]
   3e342:	f004 fd1a 	bl	42d7a <onoff_request>
	switch (start_mode) {
   3e346:	1e7b      	subs	r3, r7, #1
   3e348:	2b01      	cmp	r3, #1
   3e34a:	d82f      	bhi.n	3e3ac <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   3e34c:	2f01      	cmp	r7, #1
   3e34e:	d107      	bne.n	3e360 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   3e350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e354:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   3e358:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   3e35c:	2b01      	cmp	r3, #1
   3e35e:	d025      	beq.n	3e3ac <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   3e360:	f00a facf 	bl	48902 <k_is_in_isr>
   3e364:	4604      	mov	r4, r0
   3e366:	b918      	cbnz	r0, 3e370 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   3e368:	4b29      	ldr	r3, [pc, #164]	; (3e410 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   3e36a:	781b      	ldrb	r3, [r3, #0]
   3e36c:	2b00      	cmp	r3, #0
   3e36e:	d141      	bne.n	3e3f4 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   3e370:	f04f 0320 	mov.w	r3, #32
   3e374:	f3ef 8611 	mrs	r6, BASEPRI
   3e378:	f383 8812 	msr	BASEPRI_MAX, r3
   3e37c:	f3bf 8f6f 	isb	sy
   3e380:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3e382:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3e414 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3e386:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   3e38a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3e38e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   3e392:	03d2      	lsls	r2, r2, #15
   3e394:	d50c      	bpl.n	3e3b0 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   3e396:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   3e39a:	2b01      	cmp	r3, #1
   3e39c:	d001      	beq.n	3e3a2 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   3e39e:	2f01      	cmp	r7, #1
   3e3a0:	d106      	bne.n	3e3b0 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   3e3a2:	b30c      	cbz	r4, 3e3e8 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   3e3a4:	f386 8811 	msr	BASEPRI, r6
   3e3a8:	f3bf 8f6f 	isb	sy
}
   3e3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   3e3b0:	b1ac      	cbz	r4, 3e3de <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   3e3b2:	4630      	mov	r0, r6
   3e3b4:	f7eb fe3c 	bl	2a030 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   3e3b8:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   3e3bc:	2b00      	cmp	r3, #0
   3e3be:	d1e4      	bne.n	3e38a <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3e3c0:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   3e3c4:	2a00      	cmp	r2, #0
   3e3c6:	d0e0      	beq.n	3e38a <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e3c8:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   3e3cc:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   3e3d0:	2301      	movs	r3, #1
   3e3d2:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   3e3d6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e3da:	60ab      	str	r3, [r5, #8]
}
   3e3dc:	e7d5      	b.n	3e38a <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   3e3de:	2100      	movs	r1, #0
   3e3e0:	2021      	movs	r0, #33	; 0x21
   3e3e2:	f003 fde7 	bl	41fb4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   3e3e6:	e7e7      	b.n	3e3b8 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   3e3e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e3ec:	2202      	movs	r2, #2
   3e3ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3e3f2:	e7db      	b.n	3e3ac <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   3e3f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3e3f8:	2202      	movs	r2, #2
   3e3fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   3e3fe:	4606      	mov	r6, r0
}
   3e400:	e7bf      	b.n	3e382 <z_nrf_clock_control_lf_on+0x6a>
   3e402:	bf00      	nop
   3e404:	200036a4 	.word	0x200036a4
   3e408:	20003640 	.word	0x20003640
   3e40c:	2000366c 	.word	0x2000366c
   3e410:	20003c80 	.word	0x20003c80
   3e414:	e000e100 	.word	0xe000e100

0003e418 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   3e418:	b530      	push	{r4, r5, lr}
	return port->config;
   3e41a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   3e41c:	7b04      	ldrb	r4, [r0, #12]
   3e41e:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   3e422:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   3e426:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   3e42a:	b085      	sub	sp, #20
   3e42c:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   3e430:	d104      	bne.n	3e43c <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   3e432:	4628      	mov	r0, r5
   3e434:	f001 fada 	bl	3f9ec <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   3e438:	2000      	movs	r0, #0
   3e43a:	e031      	b.n	3e4a0 <gpio_nrfx_pin_interrupt_configure+0x88>
	if (mode == GPIO_INT_MODE_LEVEL) {
   3e43c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   3e440:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   3e444:	d12e      	bne.n	3e4a4 <gpio_nrfx_pin_interrupt_configure+0x8c>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   3e446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   3e44a:	bf0c      	ite	eq
   3e44c:	2304      	moveq	r3, #4
   3e44e:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   3e450:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   3e454:	6883      	ldr	r3, [r0, #8]
   3e456:	40cb      	lsrs	r3, r1
   3e458:	07d9      	lsls	r1, r3, #31
   3e45a:	d42f      	bmi.n	3e4bc <gpio_nrfx_pin_interrupt_configure+0xa4>
   3e45c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   3e460:	d12c      	bne.n	3e4bc <gpio_nrfx_pin_interrupt_configure+0xa4>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   3e462:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   3e464:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   3e466:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   3e46a:	4a1d      	ldr	r2, [pc, #116]	; (3e4e0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   3e46c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   3e470:	bf18      	it	ne
   3e472:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   3e476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   3e47a:	07db      	lsls	r3, r3, #31
   3e47c:	d41e      	bmi.n	3e4bc <gpio_nrfx_pin_interrupt_configure+0xa4>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   3e47e:	f10d 0407 	add.w	r4, sp, #7
   3e482:	4621      	mov	r1, r4
   3e484:	4628      	mov	r0, r5
   3e486:	f001 fa15 	bl	3f8b4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   3e48a:	4b16      	ldr	r3, [pc, #88]	; (3e4e4 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   3e48c:	4298      	cmp	r0, r3
   3e48e:	d114      	bne.n	3e4ba <gpio_nrfx_pin_interrupt_configure+0xa2>
			err = nrfx_gpiote_channel_alloc(&ch);
   3e490:	4620      	mov	r0, r4
   3e492:	f001 fa5d 	bl	3f950 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   3e496:	4b14      	ldr	r3, [pc, #80]	; (3e4e8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   3e498:	4298      	cmp	r0, r3
   3e49a:	d00e      	beq.n	3e4ba <gpio_nrfx_pin_interrupt_configure+0xa2>
				return -ENOMEM;
   3e49c:	f06f 000b 	mvn.w	r0, #11
}
   3e4a0:	b005      	add	sp, #20
   3e4a2:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3e4a4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   3e4a8:	d005      	beq.n	3e4b6 <gpio_nrfx_pin_interrupt_configure+0x9e>
   3e4aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   3e4ae:	bf0c      	ite	eq
   3e4b0:	2302      	moveq	r3, #2
   3e4b2:	2301      	movne	r3, #1
   3e4b4:	e7cc      	b.n	3e450 <gpio_nrfx_pin_interrupt_configure+0x38>
   3e4b6:	2303      	movs	r3, #3
   3e4b8:	e7ca      	b.n	3e450 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   3e4ba:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3e4bc:	2300      	movs	r3, #0
   3e4be:	4619      	mov	r1, r3
   3e4c0:	aa02      	add	r2, sp, #8
   3e4c2:	4628      	mov	r0, r5
   3e4c4:	f001 f8d2 	bl	3f66c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   3e4c8:	4b07      	ldr	r3, [pc, #28]	; (3e4e8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   3e4ca:	4298      	cmp	r0, r3
   3e4cc:	d104      	bne.n	3e4d8 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   3e4ce:	2101      	movs	r1, #1
   3e4d0:	4628      	mov	r0, r5
   3e4d2:	f001 fa43 	bl	3f95c <nrfx_gpiote_trigger_enable>
   3e4d6:	e7af      	b.n	3e438 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   3e4d8:	f06f 0004 	mvn.w	r0, #4
   3e4dc:	e7e0      	b.n	3e4a0 <gpio_nrfx_pin_interrupt_configure+0x88>
   3e4de:	bf00      	nop
   3e4e0:	50000300 	.word	0x50000300
   3e4e4:	0bad0004 	.word	0x0bad0004
   3e4e8:	0bad0000 	.word	0x0bad0000

0003e4ec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   3e4ec:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   3e4ee:	f001 fa1f 	bl	3f930 <nrfx_gpiote_is_init>
   3e4f2:	4604      	mov	r4, r0
   3e4f4:	b968      	cbnz	r0, 3e512 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   3e4f6:	f001 f9f3 	bl	3f8e0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   3e4fa:	4b08      	ldr	r3, [pc, #32]	; (3e51c <gpio_nrfx_init+0x30>)
   3e4fc:	4298      	cmp	r0, r3
   3e4fe:	d10a      	bne.n	3e516 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   3e500:	4807      	ldr	r0, [pc, #28]	; (3e520 <gpio_nrfx_init+0x34>)
   3e502:	4621      	mov	r1, r4
   3e504:	f001 f9d0 	bl	3f8a8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   3e508:	4622      	mov	r2, r4
   3e50a:	2105      	movs	r1, #5
   3e50c:	2006      	movs	r0, #6
   3e50e:	f7eb fdc9 	bl	2a0a4 <z_arm_irq_priority_set>
		return 0;
   3e512:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   3e514:	bd10      	pop	{r4, pc}
		return -EIO;
   3e516:	f06f 0004 	mvn.w	r0, #4
   3e51a:	e7fb      	b.n	3e514 <gpio_nrfx_init+0x28>
   3e51c:	0bad0000 	.word	0x0bad0000
   3e520:	0003e525 	.word	0x0003e525

0003e524 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3e524:	0942      	lsrs	r2, r0, #5
{
   3e526:	b570      	push	{r4, r5, r6, lr}
   3e528:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3e52a:	d002      	beq.n	3e532 <nrfx_gpio_handler+0xe>
   3e52c:	2a01      	cmp	r2, #1
   3e52e:	d015      	beq.n	3e55c <nrfx_gpio_handler+0x38>
}
   3e530:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3e532:	4e0b      	ldr	r6, [pc, #44]	; (3e560 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   3e534:	6932      	ldr	r2, [r6, #16]
   3e536:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   3e538:	2900      	cmp	r1, #0
   3e53a:	d0f9      	beq.n	3e530 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   3e53c:	f003 031f 	and.w	r3, r3, #31
   3e540:	2501      	movs	r5, #1
   3e542:	680c      	ldr	r4, [r1, #0]
   3e544:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   3e546:	688a      	ldr	r2, [r1, #8]
   3e548:	402a      	ands	r2, r5
   3e54a:	d002      	beq.n	3e552 <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   3e54c:	684b      	ldr	r3, [r1, #4]
   3e54e:	4630      	mov	r0, r6
   3e550:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   3e552:	2c00      	cmp	r4, #0
   3e554:	d0ec      	beq.n	3e530 <nrfx_gpio_handler+0xc>
   3e556:	4621      	mov	r1, r4
   3e558:	6824      	ldr	r4, [r4, #0]
   3e55a:	e7f4      	b.n	3e546 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   3e55c:	4e01      	ldr	r6, [pc, #4]	; (3e564 <nrfx_gpio_handler+0x40>)
   3e55e:	e7e9      	b.n	3e534 <nrfx_gpio_handler+0x10>
   3e560:	000493ec 	.word	0x000493ec
   3e564:	000493d4 	.word	0x000493d4

0003e568 <gpio_nrfx_pin_configure>:
{
   3e568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   3e56c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   3e56e:	7b3b      	ldrb	r3, [r7, #12]
   3e570:	f001 051f 	and.w	r5, r1, #31
{
   3e574:	b085      	sub	sp, #20
   3e576:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   3e578:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   3e57c:	4614      	mov	r4, r2
   3e57e:	b9ca      	cbnz	r2, 3e5b4 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   3e580:	a902      	add	r1, sp, #8
   3e582:	4628      	mov	r0, r5
   3e584:	f001 f996 	bl	3f8b4 <nrfx_gpiote_channel_get>
   3e588:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   3e58a:	4628      	mov	r0, r5
   3e58c:	f001 fa56 	bl	3fa3c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   3e590:	4b47      	ldr	r3, [pc, #284]	; (3e6b0 <gpio_nrfx_pin_configure+0x148>)
   3e592:	4298      	cmp	r0, r3
   3e594:	d004      	beq.n	3e5a0 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   3e596:	f06f 0004 	mvn.w	r0, #4
}
   3e59a:	b005      	add	sp, #20
   3e59c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   3e5a0:	4284      	cmp	r4, r0
   3e5a2:	d105      	bne.n	3e5b0 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   3e5a4:	f89d 0008 	ldrb.w	r0, [sp, #8]
   3e5a8:	f001 f9cc 	bl	3f944 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   3e5ac:	42a0      	cmp	r0, r4
   3e5ae:	d1f2      	bne.n	3e596 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   3e5b0:	2000      	movs	r0, #0
   3e5b2:	e7f2      	b.n	3e59a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   3e5b4:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   3e5b8:	f10d 0103 	add.w	r1, sp, #3
   3e5bc:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   3e5be:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   3e5c2:	f001 f977 	bl	3f8b4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3e5c6:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   3e5c8:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   3e5ca:	aa02      	add	r2, sp, #8
   3e5cc:	4649      	mov	r1, r9
   3e5ce:	4628      	mov	r0, r5
   3e5d0:	f001 f84c 	bl	3f66c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   3e5d4:	4b36      	ldr	r3, [pc, #216]	; (3e6b0 <gpio_nrfx_pin_configure+0x148>)
   3e5d6:	4298      	cmp	r0, r3
   3e5d8:	d002      	beq.n	3e5e0 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   3e5da:	f06f 0015 	mvn.w	r0, #21
   3e5de:	e7dc      	b.n	3e59a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   3e5e0:	4580      	cmp	r8, r0
   3e5e2:	d103      	bne.n	3e5ec <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   3e5e4:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3e5e8:	f001 f9ac 	bl	3f944 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   3e5ec:	05a3      	lsls	r3, r4, #22
   3e5ee:	d54c      	bpl.n	3e68a <gpio_nrfx_pin_configure+0x122>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   3e5f0:	4b30      	ldr	r3, [pc, #192]	; (3e6b4 <gpio_nrfx_pin_configure+0x14c>)
   3e5f2:	4a31      	ldr	r2, [pc, #196]	; (3e6b8 <gpio_nrfx_pin_configure+0x150>)
   3e5f4:	4023      	ands	r3, r4
   3e5f6:	4293      	cmp	r3, r2
   3e5f8:	d039      	beq.n	3e66e <gpio_nrfx_pin_configure+0x106>
   3e5fa:	d80c      	bhi.n	3e616 <gpio_nrfx_pin_configure+0xae>
   3e5fc:	2b06      	cmp	r3, #6
   3e5fe:	d014      	beq.n	3e62a <gpio_nrfx_pin_configure+0xc2>
   3e600:	d804      	bhi.n	3e60c <gpio_nrfx_pin_configure+0xa4>
   3e602:	b193      	cbz	r3, 3e62a <gpio_nrfx_pin_configure+0xc2>
   3e604:	2b02      	cmp	r3, #2
   3e606:	d1e8      	bne.n	3e5da <gpio_nrfx_pin_configure+0x72>
   3e608:	2304      	movs	r3, #4
   3e60a:	e00e      	b.n	3e62a <gpio_nrfx_pin_configure+0xc2>
   3e60c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   3e610:	d1e3      	bne.n	3e5da <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   3e612:	2301      	movs	r3, #1
   3e614:	e009      	b.n	3e62a <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   3e616:	4a29      	ldr	r2, [pc, #164]	; (3e6bc <gpio_nrfx_pin_configure+0x154>)
   3e618:	4293      	cmp	r3, r2
   3e61a:	d02a      	beq.n	3e672 <gpio_nrfx_pin_configure+0x10a>
   3e61c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   3e620:	d029      	beq.n	3e676 <gpio_nrfx_pin_configure+0x10e>
   3e622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   3e626:	d1d8      	bne.n	3e5da <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   3e628:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   3e62a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   3e62e:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   3e632:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   3e636:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   3e638:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   3e63c:	bf54      	ite	pl
   3e63e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
   3e642:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   3e644:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   3e646:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   3e64a:	d516      	bpl.n	3e67a <gpio_nrfx_pin_configure+0x112>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   3e64c:	687a      	ldr	r2, [r7, #4]
   3e64e:	2301      	movs	r3, #1
   3e650:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   3e652:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   3e656:	2200      	movs	r2, #0
   3e658:	a901      	add	r1, sp, #4
   3e65a:	4628      	mov	r0, r5
   3e65c:	f001 f8b4 	bl	3f7c8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   3e660:	4b13      	ldr	r3, [pc, #76]	; (3e6b0 <gpio_nrfx_pin_configure+0x148>)
   3e662:	4298      	cmp	r0, r3
   3e664:	bf14      	ite	ne
   3e666:	f06f 0015 	mvnne.w	r0, #21
   3e66a:	2000      	moveq	r0, #0
   3e66c:	e795      	b.n	3e59a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   3e66e:	2307      	movs	r3, #7
   3e670:	e7db      	b.n	3e62a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   3e672:	2305      	movs	r3, #5
   3e674:	e7d9      	b.n	3e62a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   3e676:	2303      	movs	r3, #3
   3e678:	e7d7      	b.n	3e62a <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   3e67a:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   3e67c:	bf41      	itttt	mi
   3e67e:	2301      	movmi	r3, #1
   3e680:	687a      	ldrmi	r2, [r7, #4]
   3e682:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   3e684:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   3e688:	e7e5      	b.n	3e656 <gpio_nrfx_pin_configure+0xee>
	if (flags & GPIO_PULL_UP) {
   3e68a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3e68c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   3e690:	bf54      	ite	pl
   3e692:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   3e696:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3e698:	461a      	mov	r2, r3
   3e69a:	a901      	add	r1, sp, #4
   3e69c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   3e69e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   3e6a2:	f000 ffe3 	bl	3f66c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   3e6a6:	4b02      	ldr	r3, [pc, #8]	; (3e6b0 <gpio_nrfx_pin_configure+0x148>)
   3e6a8:	4298      	cmp	r0, r3
   3e6aa:	d081      	beq.n	3e5b0 <gpio_nrfx_pin_configure+0x48>
   3e6ac:	e795      	b.n	3e5da <gpio_nrfx_pin_configure+0x72>
   3e6ae:	bf00      	nop
   3e6b0:	0bad0000 	.word	0x0bad0000
   3e6b4:	00f00006 	.word	0x00f00006
   3e6b8:	00100006 	.word	0x00100006
   3e6bc:	00400002 	.word	0x00400002

0003e6c0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   3e6c0:	4b02      	ldr	r3, [pc, #8]	; (3e6cc <flash_nrf_pages_layout+0xc>)
   3e6c2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   3e6c4:	2301      	movs	r3, #1
   3e6c6:	6013      	str	r3, [r2, #0]
}
   3e6c8:	4770      	bx	lr
   3e6ca:	bf00      	nop
   3e6cc:	200036c0 	.word	0x200036c0

0003e6d0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   3e6d0:	4800      	ldr	r0, [pc, #0]	; (3e6d4 <flash_nrf_get_parameters+0x4>)
   3e6d2:	4770      	bx	lr
   3e6d4:	0004add4 	.word	0x0004add4

0003e6d8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   3e6d8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3e6da:	2201      	movs	r2, #1
   3e6dc:	4611      	mov	r1, r2
   3e6de:	4807      	ldr	r0, [pc, #28]	; (3e6fc <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   3e6e0:	4c07      	ldr	r4, [pc, #28]	; (3e700 <nrf_flash_init+0x28>)
   3e6e2:	f00a f9fd 	bl	48ae0 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   3e6e6:	f000 f9c3 	bl	3ea70 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   3e6ea:	f009 fdb5 	bl	48258 <nrfx_nvmc_flash_page_count_get>
   3e6ee:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   3e6f0:	f009 fdae 	bl	48250 <nrfx_nvmc_flash_page_size_get>
   3e6f4:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   3e6f6:	2000      	movs	r0, #0
   3e6f8:	bd10      	pop	{r4, pc}
   3e6fa:	bf00      	nop
   3e6fc:	200036c8 	.word	0x200036c8
   3e700:	200036c0 	.word	0x200036c0

0003e704 <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   3e704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3e708:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   3e70c:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   3e710:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   3e714:	f023 031f 	bic.w	r3, r3, #31
   3e718:	430b      	orrs	r3, r1
    pofcon |=
   3e71a:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   3e71e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   3e722:	4b02      	ldr	r3, [pc, #8]	; (3e72c <restore_pofwarn.part.0+0x28>)
   3e724:	2200      	movs	r2, #0
   3e726:	701a      	strb	r2, [r3, #0]
	}
}
   3e728:	4770      	bx	lr
   3e72a:	bf00      	nop
   3e72c:	20003c79 	.word	0x20003c79

0003e730 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3e730:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   3e734:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   3e738:	2b08      	cmp	r3, #8
   3e73a:	d122      	bne.n	3e782 <suspend_pofwarn+0x52>
    uint32_t pofcon = p_reg->POFCON;
   3e73c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   3e740:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   3e744:	f011 0001 	ands.w	r0, r1, #1
   3e748:	d01c      	beq.n	3e784 <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
   3e74a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   3e74e:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   3e752:	f020 001f 	bic.w	r0, r0, #31
    pofcon |=
   3e756:	4308      	orrs	r0, r1
    p_reg->POFCON = pofcon;
   3e758:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e75c:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   3e760:	b158      	cbz	r0, 3e77a <suspend_pofwarn+0x4a>
    uint32_t pofcon = p_reg->POFCON;
   3e762:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   3e766:	f023 031f 	bic.w	r3, r3, #31
   3e76a:	430b      	orrs	r3, r1
    pofcon |=
   3e76c:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   3e770:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   3e774:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3e778:	4770      	bx	lr
		pofcon_enabled = enabled;
   3e77a:	4b03      	ldr	r3, [pc, #12]	; (3e788 <suspend_pofwarn+0x58>)
   3e77c:	2201      	movs	r2, #1
   3e77e:	701a      	strb	r2, [r3, #0]
   3e780:	4770      	bx	lr
		return 0;
   3e782:	2000      	movs	r0, #0
}
   3e784:	4770      	bx	lr
   3e786:	bf00      	nop
   3e788:	20003c79 	.word	0x20003c79

0003e78c <erase_op>:
{
   3e78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e78e:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3e790:	f009 fd5e 	bl	48250 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   3e794:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3e796:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   3e798:	b10b      	cbz	r3, 3e79e <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   3e79a:	f000 f97b 	bl	3ea94 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   3e79e:	4f13      	ldr	r7, [pc, #76]	; (3e7ec <erase_op+0x60>)
{
   3e7a0:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   3e7a2:	f7ff ffc5 	bl	3e730 <suspend_pofwarn>
   3e7a6:	b9e8      	cbnz	r0, 3e7e4 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   3e7a8:	6860      	ldr	r0, [r4, #4]
   3e7aa:	f001 fa4d 	bl	3fc48 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   3e7ae:	68a3      	ldr	r3, [r4, #8]
   3e7b0:	1b5b      	subs	r3, r3, r5
   3e7b2:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   3e7b4:	6863      	ldr	r3, [r4, #4]
   3e7b6:	442b      	add	r3, r5
   3e7b8:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   3e7ba:	783b      	ldrb	r3, [r7, #0]
   3e7bc:	b10b      	cbz	r3, 3e7c2 <erase_op+0x36>
   3e7be:	f7ff ffa1 	bl	3e704 <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   3e7c2:	7b23      	ldrb	r3, [r4, #12]
		i++;
   3e7c4:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   3e7c6:	b93b      	cbnz	r3, 3e7d8 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   3e7c8:	68a3      	ldr	r3, [r4, #8]
   3e7ca:	2b00      	cmp	r3, #0
   3e7cc:	d1e9      	bne.n	3e7a2 <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   3e7ce:	68a0      	ldr	r0, [r4, #8]
   3e7d0:	3800      	subs	r0, #0
   3e7d2:	bf18      	it	ne
   3e7d4:	2001      	movne	r0, #1
}
   3e7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   3e7d8:	4630      	mov	r0, r6
   3e7da:	f7e8 ff09 	bl	275f0 <nrf_flash_sync_check_time_limit>
   3e7de:	2800      	cmp	r0, #0
   3e7e0:	d0f2      	beq.n	3e7c8 <erase_op+0x3c>
   3e7e2:	e7f4      	b.n	3e7ce <erase_op+0x42>
			return -ECANCELED;
   3e7e4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3e7e8:	e7f5      	b.n	3e7d6 <erase_op+0x4a>
   3e7ea:	bf00      	nop
   3e7ec:	20003c79 	.word	0x20003c79

0003e7f0 <flash_nrf_erase>:
{
   3e7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   3e7f2:	b087      	sub	sp, #28
   3e7f4:	460e      	mov	r6, r1
   3e7f6:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3e7f8:	f009 fd2a 	bl	48250 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   3e7fc:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3e7fe:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   3e800:	4630      	mov	r0, r6
   3e802:	f009 fbfc 	bl	47ffe <is_regular_addr_valid>
   3e806:	b3c8      	cbz	r0, 3e87c <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   3e808:	fbb6 f3f7 	udiv	r3, r6, r7
   3e80c:	fb07 6313 	mls	r3, r7, r3, r6
   3e810:	bba3      	cbnz	r3, 3e87c <flash_nrf_erase+0x8c>
   3e812:	fbb5 f4f7 	udiv	r4, r5, r7
   3e816:	fb07 5414 	mls	r4, r7, r4, r5
   3e81a:	bb7c      	cbnz	r4, 3e87c <flash_nrf_erase+0x8c>
		if (!n_pages) {
   3e81c:	42bd      	cmp	r5, r7
   3e81e:	d322      	bcc.n	3e866 <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   3e820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3e824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3e828:	4816      	ldr	r0, [pc, #88]	; (3e884 <flash_nrf_erase+0x94>)
   3e82a:	f002 ff07 	bl	4163c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   3e82e:	f009 fc0d 	bl	4804c <nrf_flash_sync_is_required>
   3e832:	ab02      	add	r3, sp, #8
   3e834:	4601      	mov	r1, r0
	struct flash_context context = {
   3e836:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   3e838:	b1c0      	cbz	r0, 3e86c <flash_nrf_erase+0x7c>
	struct flash_context context = {
   3e83a:	4621      	mov	r1, r4
   3e83c:	4618      	mov	r0, r3
   3e83e:	f006 faeb 	bl	44e18 <memset>
   3e842:	2201      	movs	r2, #1
   3e844:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   3e848:	4a0f      	ldr	r2, [pc, #60]	; (3e888 <flash_nrf_erase+0x98>)
   3e84a:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   3e84e:	480f      	ldr	r0, [pc, #60]	; (3e88c <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   3e850:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   3e854:	f000 f916 	bl	3ea84 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   3e858:	4668      	mov	r0, sp
   3e85a:	f7e8 fe4d 	bl	274f8 <nrf_flash_sync_exe>
	return	erase_op(&context);
   3e85e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   3e860:	4808      	ldr	r0, [pc, #32]	; (3e884 <flash_nrf_erase+0x94>)
   3e862:	f002 fec5 	bl	415f0 <z_impl_k_sem_give>
}
   3e866:	4620      	mov	r0, r4
   3e868:	b007      	add	sp, #28
   3e86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   3e86c:	4618      	mov	r0, r3
   3e86e:	f006 fad3 	bl	44e18 <memset>
   3e872:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   3e876:	f7ff ff89 	bl	3e78c <erase_op>
   3e87a:	e7f0      	b.n	3e85e <flash_nrf_erase+0x6e>
		return -EINVAL;
   3e87c:	f06f 0415 	mvn.w	r4, #21
   3e880:	e7f1      	b.n	3e866 <flash_nrf_erase+0x76>
   3e882:	bf00      	nop
   3e884:	200036c8 	.word	0x200036c8
   3e888:	0003e78d 	.word	0x0003e78d
   3e88c:	00015e64 	.word	0x00015e64

0003e890 <write_op>:
{
   3e890:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   3e892:	7b03      	ldrb	r3, [r0, #12]
{
   3e894:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   3e896:	b10b      	cbz	r3, 3e89c <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   3e898:	f000 f8fc 	bl	3ea94 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   3e89c:	4e19      	ldr	r6, [pc, #100]	; (3e904 <write_op+0x74>)
{
   3e89e:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   3e8a0:	68a3      	ldr	r3, [r4, #8]
   3e8a2:	2b03      	cmp	r3, #3
   3e8a4:	d806      	bhi.n	3e8b4 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3e8a6:	4a18      	ldr	r2, [pc, #96]	; (3e908 <write_op+0x78>)
   3e8a8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   3e8ac:	07db      	lsls	r3, r3, #31
   3e8ae:	d5fb      	bpl.n	3e8a8 <write_op+0x18>
	return FLASH_OP_DONE;
   3e8b0:	2000      	movs	r0, #0
}
   3e8b2:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   3e8b4:	f7ff ff3c 	bl	3e730 <suspend_pofwarn>
   3e8b8:	bb08      	cbnz	r0, 3e8fe <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   3e8ba:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   3e8bc:	6860      	ldr	r0, [r4, #4]
   3e8be:	6819      	ldr	r1, [r3, #0]
   3e8c0:	f001 f9e2 	bl	3fc88 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   3e8c4:	7833      	ldrb	r3, [r6, #0]
   3e8c6:	b10b      	cbz	r3, 3e8cc <write_op+0x3c>
   3e8c8:	f7ff ff1c 	bl	3e704 <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   3e8cc:	6863      	ldr	r3, [r4, #4]
   3e8ce:	3304      	adds	r3, #4
   3e8d0:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   3e8d2:	6823      	ldr	r3, [r4, #0]
   3e8d4:	3304      	adds	r3, #4
   3e8d6:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   3e8d8:	68a3      	ldr	r3, [r4, #8]
   3e8da:	3b04      	subs	r3, #4
   3e8dc:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   3e8de:	7b23      	ldrb	r3, [r4, #12]
		i++;
   3e8e0:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   3e8e2:	2b00      	cmp	r3, #0
   3e8e4:	d0dc      	beq.n	3e8a0 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   3e8e6:	4628      	mov	r0, r5
   3e8e8:	f7e8 fe82 	bl	275f0 <nrf_flash_sync_check_time_limit>
   3e8ec:	2800      	cmp	r0, #0
   3e8ee:	d0d7      	beq.n	3e8a0 <write_op+0x10>
   3e8f0:	4a05      	ldr	r2, [pc, #20]	; (3e908 <write_op+0x78>)
   3e8f2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   3e8f6:	07d9      	lsls	r1, r3, #31
   3e8f8:	d5fb      	bpl.n	3e8f2 <write_op+0x62>
				return FLASH_OP_ONGOING;
   3e8fa:	2001      	movs	r0, #1
   3e8fc:	e7d9      	b.n	3e8b2 <write_op+0x22>
			return -ECANCELED;
   3e8fe:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3e902:	e7d6      	b.n	3e8b2 <write_op+0x22>
   3e904:	20003c79 	.word	0x20003c79
   3e908:	4001e000 	.word	0x4001e000

0003e90c <flash_nrf_write>:
{
   3e90c:	b570      	push	{r4, r5, r6, lr}
   3e90e:	460d      	mov	r5, r1
   3e910:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   3e912:	4619      	mov	r1, r3
   3e914:	4628      	mov	r0, r5
{
   3e916:	4616      	mov	r6, r2
   3e918:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   3e91a:	f009 fb70 	bl	47ffe <is_regular_addr_valid>
   3e91e:	b360      	cbz	r0, 3e97a <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   3e920:	ea45 0304 	orr.w	r3, r5, r4
   3e924:	079b      	lsls	r3, r3, #30
   3e926:	d128      	bne.n	3e97a <flash_nrf_write+0x6e>
	if (!len) {
   3e928:	b1fc      	cbz	r4, 3e96a <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   3e92a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3e92e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3e932:	4813      	ldr	r0, [pc, #76]	; (3e980 <flash_nrf_write+0x74>)
   3e934:	f002 fe82 	bl	4163c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   3e938:	f009 fb88 	bl	4804c <nrf_flash_sync_is_required>
   3e93c:	4603      	mov	r3, r0
	struct flash_context context = {
   3e93e:	e9cd 6502 	strd	r6, r5, [sp, #8]
   3e942:	a802      	add	r0, sp, #8
   3e944:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   3e946:	b19b      	cbz	r3, 3e970 <flash_nrf_write+0x64>
	struct flash_context context = {
   3e948:	2301      	movs	r3, #1
   3e94a:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   3e94e:	4b0d      	ldr	r3, [pc, #52]	; (3e984 <flash_nrf_write+0x78>)
   3e950:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   3e954:	f641 504c 	movw	r0, #7500	; 0x1d4c
   3e958:	f000 f894 	bl	3ea84 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   3e95c:	4668      	mov	r0, sp
   3e95e:	f7e8 fdcb 	bl	274f8 <nrf_flash_sync_exe>
	return write_op(&context);
   3e962:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   3e964:	4806      	ldr	r0, [pc, #24]	; (3e980 <flash_nrf_write+0x74>)
   3e966:	f002 fe43 	bl	415f0 <z_impl_k_sem_give>
}
   3e96a:	4620      	mov	r0, r4
   3e96c:	b006      	add	sp, #24
   3e96e:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   3e970:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   3e974:	f7ff ff8c 	bl	3e890 <write_op>
   3e978:	e7f3      	b.n	3e962 <flash_nrf_write+0x56>
		return -EINVAL;
   3e97a:	f06f 0415 	mvn.w	r4, #21
   3e97e:	e7f4      	b.n	3e96a <flash_nrf_write+0x5e>
   3e980:	200036c8 	.word	0x200036c8
   3e984:	0003e891 	.word	0x0003e891

0003e988 <time_slot_callback_work>:
{
   3e988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3e98a:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   3e98c:	e9d3 2000 	ldrd	r2, r0, [r3]
   3e990:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   3e992:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   3e994:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   3e996:	d013      	beq.n	3e9c0 <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   3e998:	f10d 010f 	add.w	r1, sp, #15
   3e99c:	f10d 000e 	add.w	r0, sp, #14
   3e9a0:	f7f4 fb66 	bl	33070 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   3e9a4:	2300      	movs	r3, #0
   3e9a6:	9300      	str	r3, [sp, #0]
   3e9a8:	4619      	mov	r1, r3
   3e9aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   3e9ae:	f89d 000e 	ldrb.w	r0, [sp, #14]
   3e9b2:	f7f2 fa2f 	bl	30e14 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   3e9b6:	4b03      	ldr	r3, [pc, #12]	; (3e9c4 <time_slot_callback_work+0x3c>)
   3e9b8:	60dc      	str	r4, [r3, #12]
   3e9ba:	4803      	ldr	r0, [pc, #12]	; (3e9c8 <time_slot_callback_work+0x40>)
   3e9bc:	f002 fe18 	bl	415f0 <z_impl_k_sem_give>
}
   3e9c0:	b004      	add	sp, #16
   3e9c2:	bd10      	pop	{r4, pc}
   3e9c4:	200036e0 	.word	0x200036e0
   3e9c8:	200036f0 	.word	0x200036f0

0003e9cc <time_slot_delay>:
{
   3e9cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3e9d0:	b08d      	sub	sp, #52	; 0x34
   3e9d2:	4606      	mov	r6, r0
   3e9d4:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   3e9d6:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   3e9da:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   3e9de:	4690      	mov	r8, r2
   3e9e0:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   3e9e2:	f7f4 fb45 	bl	33070 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   3e9e6:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   3e9ea:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   3e9ee:	9700      	str	r7, [sp, #0]
   3e9f0:	2400      	movs	r4, #0
   3e9f2:	3501      	adds	r5, #1
   3e9f4:	4633      	mov	r3, r6
   3e9f6:	e9cd 4407 	strd	r4, r4, [sp, #28]
   3e9fa:	e9cd 8905 	strd	r8, r9, [sp, #20]
   3e9fe:	e9cd 4403 	strd	r4, r4, [sp, #12]
   3ea02:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3ea06:	b2ea      	uxtb	r2, r5
   3ea08:	2101      	movs	r1, #1
   3ea0a:	f7f2 f977 	bl	30cfc <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   3ea0e:	f030 0302 	bics.w	r3, r0, #2
   3ea12:	d00d      	beq.n	3ea30 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   3ea14:	4b08      	ldr	r3, [pc, #32]	; (3ea38 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   3ea16:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   3ea1a:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   3ea1c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   3ea20:	9400      	str	r4, [sp, #0]
   3ea22:	4623      	mov	r3, r4
   3ea24:	4621      	mov	r1, r4
   3ea26:	f7f2 f9f5 	bl	30e14 <ticker_stop>
   3ea2a:	4804      	ldr	r0, [pc, #16]	; (3ea3c <time_slot_delay+0x70>)
   3ea2c:	f002 fde0 	bl	415f0 <z_impl_k_sem_give>
}
   3ea30:	b00d      	add	sp, #52	; 0x34
   3ea32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3ea36:	bf00      	nop
   3ea38:	200036e0 	.word	0x200036e0
   3ea3c:	200036f0 	.word	0x200036f0

0003ea40 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   3ea40:	9b01      	ldr	r3, [sp, #4]
   3ea42:	4a02      	ldr	r2, [pc, #8]	; (3ea4c <time_slot_callback_prepare+0xc>)
   3ea44:	2131      	movs	r1, #49	; 0x31
   3ea46:	f7ff bfc1 	b.w	3e9cc <time_slot_delay>
   3ea4a:	bf00      	nop
   3ea4c:	0003ea51 	.word	0x0003ea51

0003ea50 <time_slot_callback_abort>:
{
   3ea50:	b570      	push	{r4, r5, r6, lr}
   3ea52:	9d05      	ldr	r5, [sp, #20]
   3ea54:	4604      	mov	r4, r0
	ll_radio_state_abort();
   3ea56:	f7f4 fb11 	bl	3307c <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   3ea5a:	462b      	mov	r3, r5
   3ea5c:	4620      	mov	r0, r4
   3ea5e:	4a03      	ldr	r2, [pc, #12]	; (3ea6c <time_slot_callback_abort+0x1c>)
}
   3ea60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   3ea64:	2106      	movs	r1, #6
   3ea66:	f7ff bfb1 	b.w	3e9cc <time_slot_delay>
   3ea6a:	bf00      	nop
   3ea6c:	0003e989 	.word	0x0003e989

0003ea70 <nrf_flash_sync_init>:
{
   3ea70:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3ea72:	2201      	movs	r2, #1
   3ea74:	2100      	movs	r1, #0
   3ea76:	4802      	ldr	r0, [pc, #8]	; (3ea80 <nrf_flash_sync_init+0x10>)
   3ea78:	f00a f832 	bl	48ae0 <z_impl_k_sem_init>
}
   3ea7c:	2000      	movs	r0, #0
   3ea7e:	bd08      	pop	{r3, pc}
   3ea80:	200036f0 	.word	0x200036f0

0003ea84 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   3ea84:	4b02      	ldr	r3, [pc, #8]	; (3ea90 <nrf_flash_sync_set_context+0xc>)
   3ea86:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   3ea8a:	e9c3 2000 	strd	r2, r0, [r3]
}
   3ea8e:	4770      	bx	lr
   3ea90:	200036e0 	.word	0x200036e0

0003ea94 <nrf_flash_sync_get_timestamp_begin>:
{
   3ea94:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   3ea96:	f7f2 f9ff 	bl	30e98 <ticker_ticks_now_get>
   3ea9a:	4b01      	ldr	r3, [pc, #4]	; (3eaa0 <nrf_flash_sync_get_timestamp_begin+0xc>)
   3ea9c:	6098      	str	r0, [r3, #8]
}
   3ea9e:	bd08      	pop	{r3, pc}
   3eaa0:	200036e0 	.word	0x200036e0

0003eaa4 <random_byte_get>:
	__asm__ volatile(
   3eaa4:	f04f 0320 	mov.w	r3, #32
   3eaa8:	f3ef 8211 	mrs	r2, BASEPRI
   3eaac:	f383 8812 	msr	BASEPRI_MAX, r3
   3eab0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   3eab4:	4b09      	ldr	r3, [pc, #36]	; (3eadc <random_byte_get+0x38>)
   3eab6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   3eaba:	b161      	cbz	r1, 3ead6 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3eabc:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   3eabe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3eac2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   3eac6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   3eaca:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   3eacc:	f382 8811 	msr	BASEPRI, r2
   3ead0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   3ead4:	4770      	bx	lr
	int retval = -EAGAIN;
   3ead6:	f06f 000a 	mvn.w	r0, #10
   3eada:	e7f7      	b.n	3eacc <random_byte_get+0x28>
   3eadc:	4000d000 	.word	0x4000d000

0003eae0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   3eae0:	b5f0      	push	{r4, r5, r6, r7, lr}
   3eae2:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   3eae4:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   3eae6:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   3eae8:	f04f 0020 	mov.w	r0, #32
   3eaec:	f3ef 8e11 	mrs	lr, BASEPRI
   3eaf0:	f380 8812 	msr	BASEPRI_MAX, r0
   3eaf4:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   3eaf8:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   3eafa:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   3eafe:	1ba4      	subs	r4, r4, r6
   3eb00:	403c      	ands	r4, r7
	if (available < len) {
   3eb02:	42a2      	cmp	r2, r4
		len = available;
   3eb04:	bf88      	it	hi
   3eb06:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   3eb08:	18b0      	adds	r0, r6, r2
   3eb0a:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   3eb0c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   3eb0e:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   3eb10:	f38e 8811 	msr	BASEPRI, lr
   3eb14:	f3bf 8f6f 	isb	sy
   3eb18:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   3eb1a:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   3eb1c:	4282      	cmp	r2, r0
   3eb1e:	d119      	bne.n	3eb54 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   3eb20:	4566      	cmp	r6, ip
   3eb22:	d10d      	bne.n	3eb40 <rng_pool_get+0x60>
	__asm__ volatile(
   3eb24:	f04f 0520 	mov.w	r5, #32
   3eb28:	f3ef 8211 	mrs	r2, BASEPRI
   3eb2c:	f385 8812 	msr	BASEPRI_MAX, r5
   3eb30:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   3eb34:	781d      	ldrb	r5, [r3, #0]
   3eb36:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   3eb38:	f382 8811 	msr	BASEPRI, r2
   3eb3c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   3eb40:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   3eb42:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   3eb44:	b288      	uxth	r0, r1
	available = available - len;
   3eb46:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   3eb48:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3eb4a:	bf22      	ittt	cs
   3eb4c:	4b06      	ldrcs	r3, [pc, #24]	; (3eb68 <rng_pool_get+0x88>)
   3eb4e:	2201      	movcs	r2, #1
   3eb50:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   3eb52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   3eb54:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   3eb58:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   3eb5a:	f89e e005 	ldrb.w	lr, [lr, #5]
   3eb5e:	f800 eb01 	strb.w	lr, [r0], #1
		first = (first + 1) & mask;
   3eb62:	403d      	ands	r5, r7
   3eb64:	e7da      	b.n	3eb1c <rng_pool_get+0x3c>
   3eb66:	bf00      	nop
   3eb68:	4000d000 	.word	0x4000d000

0003eb6c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3eb6c:	43db      	mvns	r3, r3
{
   3eb6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3eb72:	f013 0501 	ands.w	r5, r3, #1
{
   3eb76:	460e      	mov	r6, r1
   3eb78:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   3eb7a:	d004      	beq.n	3eb86 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   3eb7c:	4821      	ldr	r0, [pc, #132]	; (3ec04 <entropy_nrf5_get_entropy_isr+0x98>)
   3eb7e:	f7ff ffaf 	bl	3eae0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   3eb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   3eb86:	b3a2      	cbz	r2, 3ebf2 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   3eb88:	f04f 0320 	mov.w	r3, #32
   3eb8c:	f3ef 8811 	mrs	r8, BASEPRI
   3eb90:	f383 8812 	msr	BASEPRI_MAX, r3
   3eb94:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   3eb98:	200d      	movs	r0, #13
   3eb9a:	f7eb fa75 	bl	2a088 <arch_irq_is_enabled>
   3eb9e:	4607      	mov	r7, r0
		irq_disable(IRQN);
   3eba0:	200d      	movs	r0, #13
   3eba2:	f7eb fa5d 	bl	2a060 <arch_irq_disable>
	__asm__ volatile(
   3eba6:	f388 8811 	msr	BASEPRI, r8
   3ebaa:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3ebae:	f8df 8058 	ldr.w	r8, [pc, #88]	; 3ec08 <entropy_nrf5_get_entropy_isr+0x9c>
   3ebb2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 3ec0c <entropy_nrf5_get_entropy_isr+0xa0>
   3ebb6:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   3ebba:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   3ebbe:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3ebc2:	2301      	movs	r3, #1
   3ebc4:	f8c8 3000 	str.w	r3, [r8]
   3ebc8:	4625      	mov	r5, r4
   3ebca:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   3ebce:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   3ebd2:	b183      	cbz	r3, 3ebf6 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   3ebd4:	f7ff ff66 	bl	3eaa4 <random_byte_get>
			if (byte < 0) {
   3ebd8:	1e03      	subs	r3, r0, #0
   3ebda:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   3ebde:	dbf6      	blt.n	3ebce <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   3ebe0:	3d01      	subs	r5, #1
   3ebe2:	b2ad      	uxth	r5, r5
   3ebe4:	5573      	strb	r3, [r6, r5]
		} while (len);
   3ebe6:	2d00      	cmp	r5, #0
   3ebe8:	d1f1      	bne.n	3ebce <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   3ebea:	b117      	cbz	r7, 3ebf2 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   3ebec:	200d      	movs	r0, #13
   3ebee:	f7eb fa29 	bl	2a044 <arch_irq_enable>
	return cnt;
   3ebf2:	4620      	mov	r0, r4
   3ebf4:	e7c5      	b.n	3eb82 <entropy_nrf5_get_entropy_isr+0x16>
   3ebf6:	f3bf 8f4f 	dsb	sy
				__WFE();
   3ebfa:	bf20      	wfe
				__SEV();
   3ebfc:	bf40      	sev
				__WFE();
   3ebfe:	bf20      	wfe
   3ec00:	e7e5      	b.n	3ebce <entropy_nrf5_get_entropy_isr+0x62>
   3ec02:	bf00      	nop
   3ec04:	20003738 	.word	0x20003738
   3ec08:	4000d000 	.word	0x4000d000
   3ec0c:	e000e100 	.word	0xe000e100

0003ec10 <entropy_nrf5_get_entropy>:
{
   3ec10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   3ec14:	4f13      	ldr	r7, [pc, #76]	; (3ec64 <entropy_nrf5_get_entropy+0x54>)
   3ec16:	460d      	mov	r5, r1
   3ec18:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   3ec1a:	f107 0845 	add.w	r8, r7, #69	; 0x45
   3ec1e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   3ec22:	b914      	cbnz	r4, 3ec2a <entropy_nrf5_get_entropy+0x1a>
}
   3ec24:	4620      	mov	r0, r4
   3ec26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3ec2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3ec2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3ec32:	4638      	mov	r0, r7
   3ec34:	f002 fd02 	bl	4163c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   3ec38:	4622      	mov	r2, r4
   3ec3a:	4629      	mov	r1, r5
   3ec3c:	4640      	mov	r0, r8
   3ec3e:	f7ff ff4f 	bl	3eae0 <rng_pool_get>
   3ec42:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   3ec44:	4638      	mov	r0, r7
   3ec46:	f002 fcd3 	bl	415f0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   3ec4a:	b93e      	cbnz	r6, 3ec5c <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   3ec4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3ec50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3ec54:	4648      	mov	r0, r9
   3ec56:	f002 fcf1 	bl	4163c <z_impl_k_sem_take>
			continue;
   3ec5a:	e7e2      	b.n	3ec22 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   3ec5c:	1ba4      	subs	r4, r4, r6
   3ec5e:	b2a4      	uxth	r4, r4
		buf += bytes;
   3ec60:	4435      	add	r5, r6
   3ec62:	e7de      	b.n	3ec22 <entropy_nrf5_get_entropy+0x12>
   3ec64:	20003708 	.word	0x20003708

0003ec68 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   3ec68:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   3ec6a:	4c19      	ldr	r4, [pc, #100]	; (3ecd0 <entropy_nrf5_init+0x68>)
   3ec6c:	2201      	movs	r2, #1
   3ec6e:	4611      	mov	r1, r2
   3ec70:	4620      	mov	r0, r4
   3ec72:	f009 ff35 	bl	48ae0 <z_impl_k_sem_init>
   3ec76:	2201      	movs	r2, #1
   3ec78:	2100      	movs	r1, #0
   3ec7a:	f104 0018 	add.w	r0, r4, #24
   3ec7e:	f009 ff2f 	bl	48ae0 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   3ec82:	f240 4307 	movw	r3, #1031	; 0x407
   3ec86:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   3ec8a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   3ec8e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   3ec90:	230c      	movs	r3, #12
   3ec92:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   3ec96:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   3ec98:	4b0e      	ldr	r3, [pc, #56]	; (3ecd4 <entropy_nrf5_init+0x6c>)
   3ec9a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   3ec9e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   3eca2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   3eca6:	f042 0201 	orr.w	r2, r2, #1
   3ecaa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   3ecae:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   3ecb0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   3ecb4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   3ecb8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   3ecbc:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   3ecbe:	6019      	str	r1, [r3, #0]
   3ecc0:	200d      	movs	r0, #13
   3ecc2:	f7eb f9ef 	bl	2a0a4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   3ecc6:	200d      	movs	r0, #13
   3ecc8:	f7eb f9bc 	bl	2a044 <arch_irq_enable>

	return 0;
}
   3eccc:	4628      	mov	r0, r5
   3ecce:	bd38      	pop	{r3, r4, r5, pc}
   3ecd0:	20003708 	.word	0x20003708
   3ecd4:	4000d000 	.word	0x4000d000

0003ecd8 <isr>:
{
   3ecd8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   3ecda:	f7ff fee3 	bl	3eaa4 <random_byte_get>
	if (byte < 0) {
   3ecde:	2800      	cmp	r0, #0
   3ece0:	db20      	blt.n	3ed24 <isr+0x4c>
	uint8_t last  = rngp->last;
   3ece2:	4b17      	ldr	r3, [pc, #92]	; (3ed40 <isr+0x68>)
   3ece4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   3ece8:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   3ecec:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   3ecf0:	1b14      	subs	r4, r2, r4
   3ecf2:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   3ecf6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   3ecf8:	d10d      	bne.n	3ed16 <isr+0x3e>
	uint8_t last  = rngp->last;
   3ecfa:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   3ecfe:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   3ed02:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   3ed06:	1b14      	subs	r4, r2, r4
   3ed08:	ea31 0404 	bics.w	r4, r1, r4
   3ed0c:	d10b      	bne.n	3ed26 <isr+0x4e>
   3ed0e:	4b0d      	ldr	r3, [pc, #52]	; (3ed44 <isr+0x6c>)
   3ed10:	2201      	movs	r2, #1
   3ed12:	605a      	str	r2, [r3, #4]
}
   3ed14:	e00e      	b.n	3ed34 <isr+0x5c>
	rngp->buffer[last] = byte;
   3ed16:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   3ed18:	3201      	adds	r2, #1
   3ed1a:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   3ed1c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   3ed20:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   3ed24:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   3ed26:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   3ed28:	3201      	adds	r2, #1
   3ed2a:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   3ed2c:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   3ed30:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   3ed34:	4804      	ldr	r0, [pc, #16]	; (3ed48 <isr+0x70>)
}
   3ed36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ed3a:	f002 bc59 	b.w	415f0 <z_impl_k_sem_give>
   3ed3e:	bf00      	nop
   3ed40:	20003708 	.word	0x20003708
   3ed44:	4000d000 	.word	0x4000d000
   3ed48:	20003720 	.word	0x20003720

0003ed4c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   3ed4c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   3ed4e:	2301      	movs	r3, #1
   3ed50:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3ed52:	4a0e      	ldr	r2, [pc, #56]	; (3ed8c <compare_int_lock+0x40>)
   3ed54:	f3bf 8f5b 	dmb	ish
   3ed58:	43dc      	mvns	r4, r3
   3ed5a:	e852 1f00 	ldrex	r1, [r2]
   3ed5e:	ea01 0504 	and.w	r5, r1, r4
   3ed62:	e842 5600 	strex	r6, r5, [r2]
   3ed66:	2e00      	cmp	r6, #0
   3ed68:	d1f7      	bne.n	3ed5a <compare_int_lock+0xe>
   3ed6a:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3ed6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3ed72:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   3ed74:	4806      	ldr	r0, [pc, #24]	; (3ed90 <compare_int_lock+0x44>)
   3ed76:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   3ed7a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3ed7e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   3ed82:	420b      	tst	r3, r1
}
   3ed84:	bf14      	ite	ne
   3ed86:	2001      	movne	r0, #1
   3ed88:	2000      	moveq	r0, #0
   3ed8a:	bd70      	pop	{r4, r5, r6, pc}
   3ed8c:	20003760 	.word	0x20003760
   3ed90:	40011000 	.word	0x40011000

0003ed94 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3ed94:	4918      	ldr	r1, [pc, #96]	; (3edf8 <sys_clock_timeout_handler+0x64>)
{
   3ed96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ed98:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   3ed9a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3ed9e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   3eda0:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   3eda4:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   3eda8:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   3edaa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   3edae:	d221      	bcs.n	3edf4 <sys_clock_timeout_handler+0x60>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   3edb0:	4b12      	ldr	r3, [pc, #72]	; (3edfc <sys_clock_timeout_handler+0x68>)
   3edb2:	681b      	ldr	r3, [r3, #0]
   3edb4:	0a1a      	lsrs	r2, r3, #8
   3edb6:	061b      	lsls	r3, r3, #24
   3edb8:	195e      	adds	r6, r3, r5
   3edba:	4b11      	ldr	r3, [pc, #68]	; (3ee00 <sys_clock_timeout_handler+0x6c>)
   3edbc:	f142 0700 	adc.w	r7, r2, #0
   3edc0:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   3edc4:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   3edc6:	f003 fa67 	bl	42298 <sys_clock_announce>
    return p_reg->CC[ch];
   3edca:	00a3      	lsls	r3, r4, #2
   3edcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3edd0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   3edd4:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   3edd8:	42aa      	cmp	r2, r5
   3edda:	d10a      	bne.n	3edf2 <sys_clock_timeout_handler+0x5e>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   3eddc:	b91e      	cbnz	r6, 3ede6 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   3edde:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   3ede2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   3ede6:	4a07      	ldr	r2, [pc, #28]	; (3ee04 <sys_clock_timeout_handler+0x70>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3ede8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3edec:	40a3      	lsls	r3, r4
   3edee:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   3edf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   3edf4:	2600      	movs	r6, #0
   3edf6:	e7e6      	b.n	3edc6 <sys_clock_timeout_handler+0x32>
   3edf8:	20001808 	.word	0x20001808
   3edfc:	20003764 	.word	0x20003764
   3ee00:	200017f0 	.word	0x200017f0
   3ee04:	40011000 	.word	0x40011000

0003ee08 <compare_int_unlock>:
	if (key) {
   3ee08:	b311      	cbz	r1, 3ee50 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3ee0a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   3ee0e:	2301      	movs	r3, #1
   3ee10:	4a10      	ldr	r2, [pc, #64]	; (3ee54 <compare_int_unlock+0x4c>)
   3ee12:	4083      	lsls	r3, r0
   3ee14:	e852 cf00 	ldrex	ip, [r2]
   3ee18:	ea4c 0c03 	orr.w	ip, ip, r3
   3ee1c:	e842 c100 	strex	r1, ip, [r2]
   3ee20:	2900      	cmp	r1, #0
   3ee22:	d1f7      	bne.n	3ee14 <compare_int_unlock+0xc>
   3ee24:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   3ee28:	4a0b      	ldr	r2, [pc, #44]	; (3ee58 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3ee2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3ee2e:	4083      	lsls	r3, r0
   3ee30:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3ee34:	4b09      	ldr	r3, [pc, #36]	; (3ee5c <compare_int_unlock+0x54>)
   3ee36:	f3bf 8f5b 	dmb	ish
   3ee3a:	681b      	ldr	r3, [r3, #0]
   3ee3c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   3ee40:	40c3      	lsrs	r3, r0
   3ee42:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3ee44:	bf42      	ittt	mi
   3ee46:	4b06      	ldrmi	r3, [pc, #24]	; (3ee60 <compare_int_unlock+0x58>)
   3ee48:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   3ee4c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   3ee50:	4770      	bx	lr
   3ee52:	bf00      	nop
   3ee54:	20003760 	.word	0x20003760
   3ee58:	40011000 	.word	0x40011000
   3ee5c:	2000375c 	.word	0x2000375c
   3ee60:	e000e100 	.word	0xe000e100

0003ee64 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   3ee64:	4b0d      	ldr	r3, [pc, #52]	; (3ee9c <z_nrf_rtc_timer_read+0x38>)
   3ee66:	6818      	ldr	r0, [r3, #0]
   3ee68:	0a01      	lsrs	r1, r0, #8
   3ee6a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   3ee6c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   3ee70:	4b0b      	ldr	r3, [pc, #44]	; (3eea0 <z_nrf_rtc_timer_read+0x3c>)
   3ee72:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   3ee76:	1818      	adds	r0, r3, r0
   3ee78:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   3ee7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   3ee80:	d20a      	bcs.n	3ee98 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   3ee82:	4b08      	ldr	r3, [pc, #32]	; (3eea4 <z_nrf_rtc_timer_read+0x40>)
   3ee84:	e9d3 2300 	ldrd	r2, r3, [r3]
   3ee88:	4290      	cmp	r0, r2
   3ee8a:	eb71 0303 	sbcs.w	r3, r1, r3
   3ee8e:	d203      	bcs.n	3ee98 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   3ee90:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   3ee94:	f141 0100 	adc.w	r1, r1, #0
}
   3ee98:	4770      	bx	lr
   3ee9a:	bf00      	nop
   3ee9c:	20003764 	.word	0x20003764
   3eea0:	40011000 	.word	0x40011000
   3eea4:	200017f0 	.word	0x200017f0

0003eea8 <compare_set>:
{
   3eea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3eeac:	b085      	sub	sp, #20
   3eeae:	4616      	mov	r6, r2
   3eeb0:	4698      	mov	r8, r3
   3eeb2:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   3eeb4:	f7ff ff4a 	bl	3ed4c <compare_int_lock>
   3eeb8:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   3eeba:	f7ff ffd3 	bl	3ee64 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   3eebe:	42b0      	cmp	r0, r6
   3eec0:	eb71 0308 	sbcs.w	r3, r1, r8
   3eec4:	d276      	bcs.n	3efb4 <compare_set+0x10c>
		if (target_time - curr_time > COUNTER_SPAN) {
   3eec6:	4b45      	ldr	r3, [pc, #276]	; (3efdc <compare_set+0x134>)
   3eec8:	1a30      	subs	r0, r6, r0
   3eeca:	eb68 0101 	sbc.w	r1, r8, r1
   3eece:	4298      	cmp	r0, r3
   3eed0:	f171 0100 	sbcs.w	r1, r1, #0
   3eed4:	d27f      	bcs.n	3efd6 <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
   3eed6:	4b42      	ldr	r3, [pc, #264]	; (3efe0 <compare_set+0x138>)
   3eed8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   3eedc:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   3eee0:	45d8      	cmp	r8, fp
   3eee2:	bf08      	it	eq
   3eee4:	4556      	cmpeq	r6, sl
   3eee6:	d050      	beq.n	3ef8a <compare_set+0xe2>
   3eee8:	ea4f 0985 	mov.w	r9, r5, lsl #2
   3eeec:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   3eef0:	f105 0750 	add.w	r7, r5, #80	; 0x50
   3eef4:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   3eef8:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3eefa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3eefe:	40ab      	lsls	r3, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3ef00:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   3ef02:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   3ef06:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3ef0a:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   3ef0c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   3ef10:	4b34      	ldr	r3, [pc, #208]	; (3efe4 <compare_set+0x13c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3ef12:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   3ef16:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   3ef18:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   3ef1c:	1a40      	subs	r0, r0, r1
   3ef1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   3ef22:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   3ef26:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   3ef28:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   3ef2c:	d107      	bne.n	3ef3e <compare_set+0x96>
   3ef2e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   3ef32:	2013      	movs	r0, #19
   3ef34:	f00a f81c 	bl	48f70 <z_impl_k_busy_wait>
   3ef38:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   3ef3c:	4b29      	ldr	r3, [pc, #164]	; (3efe4 <compare_set+0x13c>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   3ef3e:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   3ef42:	eba4 000c 	sub.w	r0, r4, ip
   3ef46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   3ef4a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3ef4e:	bf88      	it	hi
   3ef50:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3ef52:	2000      	movs	r0, #0
   3ef54:	6038      	str	r0, [r7, #0]
   3ef56:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   3ef58:	9801      	ldr	r0, [sp, #4]
   3ef5a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   3ef5e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   3ef62:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   3ef66:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
   3ef6a:	4281      	cmp	r1, r0
   3ef6c:	d006      	beq.n	3ef7c <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
   3ef6e:	1a20      	subs	r0, r4, r0
   3ef70:	3802      	subs	r0, #2
   3ef72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   3ef76:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3ef7a:	d819      	bhi.n	3efb0 <compare_set+0x108>
	return (a - b) & COUNTER_MAX;
   3ef7c:	1aa4      	subs	r4, r4, r2
   3ef7e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   3ef82:	eb14 0a06 	adds.w	sl, r4, r6
   3ef86:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   3ef8a:	4915      	ldr	r1, [pc, #84]	; (3efe0 <compare_set+0x138>)
	cc_data[chan].callback = handler;
   3ef8c:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   3ef8e:	012b      	lsls	r3, r5, #4
   3ef90:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   3ef94:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   3ef98:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   3ef9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3ef9c:	6053      	str	r3, [r2, #4]
	return ret;
   3ef9e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   3efa0:	4628      	mov	r0, r5
   3efa2:	9900      	ldr	r1, [sp, #0]
   3efa4:	f7ff ff30 	bl	3ee08 <compare_int_unlock>
}
   3efa8:	4620      	mov	r0, r4
   3efaa:	b005      	add	sp, #20
   3efac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3efb0:	4620      	mov	r0, r4
   3efb2:	e7b1      	b.n	3ef18 <compare_set+0x70>
		atomic_or(&force_isr_mask, BIT(chan));
   3efb4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3efb6:	4a0c      	ldr	r2, [pc, #48]	; (3efe8 <compare_set+0x140>)
   3efb8:	f3bf 8f5b 	dmb	ish
   3efbc:	40ab      	lsls	r3, r5
   3efbe:	e852 0f00 	ldrex	r0, [r2]
   3efc2:	4318      	orrs	r0, r3
   3efc4:	e842 0100 	strex	r1, r0, [r2]
   3efc8:	2900      	cmp	r1, #0
   3efca:	d1f8      	bne.n	3efbe <compare_set+0x116>
   3efcc:	f3bf 8f5b 	dmb	ish
   3efd0:	46b2      	mov	sl, r6
   3efd2:	46c3      	mov	fp, r8
   3efd4:	e7d9      	b.n	3ef8a <compare_set+0xe2>
			return -EINVAL;
   3efd6:	f06f 0415 	mvn.w	r4, #21
   3efda:	e7e1      	b.n	3efa0 <compare_set+0xf8>
   3efdc:	01000001 	.word	0x01000001
   3efe0:	200017f8 	.word	0x200017f8
   3efe4:	40011000 	.word	0x40011000
   3efe8:	2000375c 	.word	0x2000375c

0003efec <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   3efec:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   3efee:	4b19      	ldr	r3, [pc, #100]	; (3f054 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   3eff0:	4d19      	ldr	r5, [pc, #100]	; (3f058 <sys_clock_driver_init+0x6c>)
   3eff2:	2400      	movs	r4, #0
   3eff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3eff8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3effc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   3f000:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   3f004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3f008:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3f00c:	4b13      	ldr	r3, [pc, #76]	; (3f05c <sys_clock_driver_init+0x70>)
   3f00e:	2602      	movs	r6, #2
   3f010:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   3f014:	2101      	movs	r1, #1
   3f016:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   3f01a:	2011      	movs	r0, #17
   3f01c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   3f020:	4622      	mov	r2, r4
   3f022:	f7eb f83f 	bl	2a0a4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   3f026:	2011      	movs	r0, #17
   3f028:	f7eb f80c 	bl	2a044 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   3f02c:	4a0c      	ldr	r2, [pc, #48]	; (3f060 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   3f02e:	2301      	movs	r3, #1
   3f030:	60ab      	str	r3, [r5, #8]
   3f032:	602b      	str	r3, [r5, #0]
   3f034:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   3f036:	4b0b      	ldr	r3, [pc, #44]	; (3f064 <sys_clock_driver_init+0x78>)
   3f038:	4a0b      	ldr	r2, [pc, #44]	; (3f068 <sys_clock_driver_init+0x7c>)
   3f03a:	9300      	str	r3, [sp, #0]
   3f03c:	9401      	str	r4, [sp, #4]
   3f03e:	2300      	movs	r3, #0
   3f040:	4620      	mov	r0, r4
   3f042:	f7ff ff31 	bl	3eea8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   3f046:	4630      	mov	r0, r6
   3f048:	f7ff f966 	bl	3e318 <z_nrf_clock_control_lf_on>

	return 0;
}
   3f04c:	4620      	mov	r0, r4
   3f04e:	b002      	add	sp, #8
   3f050:	bd70      	pop	{r4, r5, r6, pc}
   3f052:	bf00      	nop
   3f054:	200017f8 	.word	0x200017f8
   3f058:	40011000 	.word	0x40011000
   3f05c:	e000e100 	.word	0xe000e100
   3f060:	20003760 	.word	0x20003760
   3f064:	0003ed95 	.word	0x0003ed95
   3f068:	007fffff 	.word	0x007fffff

0003f06c <rtc_nrf_isr>:
{
   3f06c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   3f070:	4c35      	ldr	r4, [pc, #212]	; (3f148 <rtc_nrf_isr+0xdc>)
   3f072:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   3f076:	079a      	lsls	r2, r3, #30
   3f078:	d50b      	bpl.n	3f092 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f07a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   3f07e:	b143      	cbz	r3, 3f092 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   3f080:	4a32      	ldr	r2, [pc, #200]	; (3f14c <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3f082:	2300      	movs	r3, #0
   3f084:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   3f088:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   3f08c:	6813      	ldr	r3, [r2, #0]
   3f08e:	3301      	adds	r3, #1
   3f090:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   3f092:	f04f 0320 	mov.w	r3, #32
   3f096:	f3ef 8211 	mrs	r2, BASEPRI
   3f09a:	f383 8812 	msr	BASEPRI_MAX, r3
   3f09e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   3f0a2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   3f0a6:	03db      	lsls	r3, r3, #15
   3f0a8:	d512      	bpl.n	3f0d0 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3f0aa:	f3bf 8f5b 	dmb	ish
   3f0ae:	4b28      	ldr	r3, [pc, #160]	; (3f150 <rtc_nrf_isr+0xe4>)
   3f0b0:	e853 1f00 	ldrex	r1, [r3]
   3f0b4:	f021 0001 	bic.w	r0, r1, #1
   3f0b8:	e843 0600 	strex	r6, r0, [r3]
   3f0bc:	2e00      	cmp	r6, #0
   3f0be:	d1f7      	bne.n	3f0b0 <rtc_nrf_isr+0x44>
   3f0c0:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   3f0c4:	2900      	cmp	r1, #0
   3f0c6:	d135      	bne.n	3f134 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f0c8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   3f0cc:	2b00      	cmp	r3, #0
   3f0ce:	d131      	bne.n	3f134 <rtc_nrf_isr+0xc8>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   3f0d0:	2300      	movs	r3, #0
	__asm__ volatile(
   3f0d2:	f382 8811 	msr	BASEPRI, r2
   3f0d6:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   3f0da:	b343      	cbz	r3, 3f12e <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
   3f0dc:	f7ff fec2 	bl	3ee64 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   3f0e0:	f04f 0320 	mov.w	r3, #32
   3f0e4:	f3ef 8c11 	mrs	ip, BASEPRI
   3f0e8:	f383 8812 	msr	BASEPRI_MAX, r3
   3f0ec:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   3f0f0:	4b18      	ldr	r3, [pc, #96]	; (3f154 <rtc_nrf_isr+0xe8>)
   3f0f2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   3f0f6:	42b0      	cmp	r0, r6
   3f0f8:	41b9      	sbcs	r1, r7
   3f0fa:	f04f 0200 	mov.w	r2, #0
   3f0fe:	d320      	bcc.n	3f142 <rtc_nrf_isr+0xd6>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   3f100:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   3f104:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   3f108:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   3f10c:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   3f110:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   3f112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3f116:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   3f11a:	f38c 8811 	msr	BASEPRI, ip
   3f11e:	f3bf 8f6f 	isb	sy
		if (handler) {
   3f122:	b121      	cbz	r1, 3f12e <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
   3f124:	9500      	str	r5, [sp, #0]
   3f126:	4632      	mov	r2, r6
   3f128:	463b      	mov	r3, r7
   3f12a:	2000      	movs	r0, #0
   3f12c:	4788      	blx	r1
}
   3f12e:	b003      	add	sp, #12
   3f130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3f134:	2300      	movs	r3, #0
   3f136:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   3f13a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   3f13e:	2301      	movs	r3, #1
}
   3f140:	e7c7      	b.n	3f0d2 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   3f142:	4611      	mov	r1, r2
   3f144:	e7e9      	b.n	3f11a <rtc_nrf_isr+0xae>
   3f146:	bf00      	nop
   3f148:	40011000 	.word	0x40011000
   3f14c:	20003764 	.word	0x20003764
   3f150:	2000375c 	.word	0x2000375c
   3f154:	200017f8 	.word	0x200017f8

0003f158 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   3f158:	1c43      	adds	r3, r0, #1
{
   3f15a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   3f15c:	d021      	beq.n	3f1a2 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   3f15e:	2801      	cmp	r0, #1
   3f160:	dd21      	ble.n	3f1a6 <sys_clock_set_timeout+0x4e>
   3f162:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3f166:	da20      	bge.n	3f1aa <sys_clock_set_timeout+0x52>
   3f168:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   3f16a:	f7ff fe7b 	bl	3ee64 <z_nrf_rtc_timer_read>
   3f16e:	4b10      	ldr	r3, [pc, #64]	; (3f1b0 <sys_clock_set_timeout+0x58>)
   3f170:	e9d3 1300 	ldrd	r1, r3, [r3]
   3f174:	1a42      	subs	r2, r0, r1
		ticks = 0;
   3f176:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	uint64_t target_time = cyc + last_count;
   3f17a:	480e      	ldr	r0, [pc, #56]	; (3f1b4 <sys_clock_set_timeout+0x5c>)
		ticks = 0;
   3f17c:	bf28      	it	cs
   3f17e:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   3f180:	3201      	adds	r2, #1
   3f182:	4422      	add	r2, r4
	uint64_t target_time = cyc + last_count;
   3f184:	4282      	cmp	r2, r0
   3f186:	bf28      	it	cs
   3f188:	4602      	movcs	r2, r0
   3f18a:	1852      	adds	r2, r2, r1
   3f18c:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   3f190:	4909      	ldr	r1, [pc, #36]	; (3f1b8 <sys_clock_set_timeout+0x60>)
   3f192:	9001      	str	r0, [sp, #4]
   3f194:	9100      	str	r1, [sp, #0]
   3f196:	f143 0300 	adc.w	r3, r3, #0
   3f19a:	f7ff fe85 	bl	3eea8 <compare_set>
}
   3f19e:	b002      	add	sp, #8
   3f1a0:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   3f1a2:	4804      	ldr	r0, [pc, #16]	; (3f1b4 <sys_clock_set_timeout+0x5c>)
   3f1a4:	e7e0      	b.n	3f168 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   3f1a6:	2400      	movs	r4, #0
   3f1a8:	e7df      	b.n	3f16a <sys_clock_set_timeout+0x12>
   3f1aa:	4c02      	ldr	r4, [pc, #8]	; (3f1b4 <sys_clock_set_timeout+0x5c>)
   3f1ac:	e7dd      	b.n	3f16a <sys_clock_set_timeout+0x12>
   3f1ae:	bf00      	nop
   3f1b0:	20001808 	.word	0x20001808
   3f1b4:	007fffff 	.word	0x007fffff
   3f1b8:	0003ed95 	.word	0x0003ed95

0003f1bc <sys_clock_elapsed>:
{
   3f1bc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   3f1be:	f7ff fe51 	bl	3ee64 <z_nrf_rtc_timer_read>
   3f1c2:	4b02      	ldr	r3, [pc, #8]	; (3f1cc <sys_clock_elapsed+0x10>)
   3f1c4:	681b      	ldr	r3, [r3, #0]
}
   3f1c6:	1ac0      	subs	r0, r0, r3
   3f1c8:	bd08      	pop	{r3, pc}
   3f1ca:	bf00      	nop
   3f1cc:	20001808 	.word	0x20001808

0003f1d0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f1d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3f1d4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3f1d8:	2a08      	cmp	r2, #8
   3f1da:	d106      	bne.n	3f1ea <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3f1dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   3f1e0:	2b05      	cmp	r3, #5
   3f1e2:	d802      	bhi.n	3f1ea <nrf52_errata_103+0x1a>
   3f1e4:	4a02      	ldr	r2, [pc, #8]	; (3f1f0 <nrf52_errata_103+0x20>)
   3f1e6:	5cd0      	ldrb	r0, [r2, r3]
   3f1e8:	4770      	bx	lr
        return false;
   3f1ea:	2000      	movs	r0, #0
}
   3f1ec:	4770      	bx	lr
   3f1ee:	bf00      	nop
   3f1f0:	0004b518 	.word	0x0004b518

0003f1f4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   3f1f4:	4a02      	ldr	r2, [pc, #8]	; (3f200 <nvmc_wait+0xc>)
   3f1f6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   3f1fa:	2b00      	cmp	r3, #0
   3f1fc:	d0fb      	beq.n	3f1f6 <nvmc_wait+0x2>
}
   3f1fe:	4770      	bx	lr
   3f200:	4001e000 	.word	0x4001e000

0003f204 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   3f204:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   3f206:	f008 ff8d 	bl	48124 <nrf52_errata_136>
   3f20a:	b140      	cbz	r0, 3f21e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   3f20c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f210:	2200      	movs	r2, #0
   3f212:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   3f216:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   3f21a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   3f21e:	f008 ff81 	bl	48124 <nrf52_errata_136>
   3f222:	2800      	cmp	r0, #0
   3f224:	d046      	beq.n	3f2b4 <__kernel_ram_size+0x5c>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   3f226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   3f22a:	4b60      	ldr	r3, [pc, #384]	; (3f3ac <__kernel_ram_size+0x154>)
   3f22c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   3f230:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   3f234:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   3f238:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   3f23c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   3f240:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   3f244:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   3f248:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   3f24c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   3f250:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   3f254:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   3f258:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   3f25c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   3f260:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   3f264:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   3f268:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   3f26c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   3f270:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   3f274:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   3f278:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   3f27c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   3f280:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   3f284:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   3f288:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   3f28c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   3f290:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   3f294:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   3f298:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   3f29c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   3f2a0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   3f2a4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   3f2a8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   3f2ac:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   3f2b0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   3f2b4:	f7ff ff8c 	bl	3f1d0 <nrf52_errata_103>
   3f2b8:	b118      	cbz	r0, 3f2c2 <__kernel_ram_size+0x6a>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   3f2ba:	4b3d      	ldr	r3, [pc, #244]	; (3f3b0 <__kernel_ram_size+0x158>)
   3f2bc:	4a3d      	ldr	r2, [pc, #244]	; (3f3b4 <__kernel_ram_size+0x15c>)
   3f2be:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   3f2c2:	f7ff ff85 	bl	3f1d0 <nrf52_errata_103>
   3f2c6:	b118      	cbz	r0, 3f2d0 <__kernel_ram_size+0x78>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   3f2c8:	4b3b      	ldr	r3, [pc, #236]	; (3f3b8 <__kernel_ram_size+0x160>)
   3f2ca:	22fb      	movs	r2, #251	; 0xfb
   3f2cc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   3f2d0:	f7ff ff7e 	bl	3f1d0 <nrf52_errata_103>
   3f2d4:	b170      	cbz	r0, 3f2f4 <__kernel_ram_size+0x9c>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   3f2d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3f2da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3f2de:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   3f2e2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   3f2e6:	f022 020f 	bic.w	r2, r2, #15
   3f2ea:	f003 030f 	and.w	r3, r3, #15
   3f2ee:	4313      	orrs	r3, r2
   3f2f0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   3f2f4:	f7ff ff6c 	bl	3f1d0 <nrf52_errata_103>
   3f2f8:	b120      	cbz	r0, 3f304 <__kernel_ram_size+0xac>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   3f2fa:	4b30      	ldr	r3, [pc, #192]	; (3f3bc <__kernel_ram_size+0x164>)
   3f2fc:	f44f 7200 	mov.w	r2, #512	; 0x200
   3f300:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   3f304:	f008 ff0e 	bl	48124 <nrf52_errata_136>
   3f308:	b148      	cbz	r0, 3f31e <__kernel_ram_size+0xc6>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   3f30a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f30e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   3f312:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   3f314:	bf44      	itt	mi
   3f316:	f06f 0201 	mvnmi.w	r2, #1
   3f31a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3f31e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   3f322:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3f326:	2a08      	cmp	r2, #8
   3f328:	d10e      	bne.n	3f348 <__kernel_ram_size+0xf0>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3f32a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   3f32e:	2b05      	cmp	r3, #5
   3f330:	d802      	bhi.n	3f338 <__kernel_ram_size+0xe0>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   3f332:	4a23      	ldr	r2, [pc, #140]	; (3f3c0 <__kernel_ram_size+0x168>)
   3f334:	5cd3      	ldrb	r3, [r2, r3]
   3f336:	b13b      	cbz	r3, 3f348 <__kernel_ram_size+0xf0>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   3f338:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   3f33c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   3f340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f344:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   3f348:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   3f34c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   3f350:	2a00      	cmp	r2, #0
   3f352:	db03      	blt.n	3f35c <__kernel_ram_size+0x104>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   3f354:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   3f358:	2b00      	cmp	r3, #0
   3f35a:	da22      	bge.n	3f3a2 <__kernel_ram_size+0x14a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3f35c:	4919      	ldr	r1, [pc, #100]	; (3f3c4 <__kernel_ram_size+0x16c>)
   3f35e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3f360:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3f364:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3f368:	2412      	movs	r4, #18
    nvmc_wait();
   3f36a:	f7ff ff43 	bl	3f1f4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   3f36e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   3f372:	f7ff ff3f 	bl	3f1f4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   3f376:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   3f37a:	f7ff ff3b 	bl	3f1f4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   3f37e:	2300      	movs	r3, #0
   3f380:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   3f384:	f7ff ff36 	bl	3f1f4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   3f388:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   3f38c:	490e      	ldr	r1, [pc, #56]	; (3f3c8 <__kernel_ram_size+0x170>)
   3f38e:	4b0f      	ldr	r3, [pc, #60]	; (3f3cc <__kernel_ram_size+0x174>)
   3f390:	68ca      	ldr	r2, [r1, #12]
   3f392:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   3f396:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   3f398:	60cb      	str	r3, [r1, #12]
   3f39a:	f3bf 8f4f 	dsb	sy
    __NOP();
   3f39e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   3f3a0:	e7fd      	b.n	3f39e <__kernel_ram_size+0x146>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   3f3a2:	4b0b      	ldr	r3, [pc, #44]	; (3f3d0 <__kernel_ram_size+0x178>)
   3f3a4:	4a0b      	ldr	r2, [pc, #44]	; (3f3d4 <__kernel_ram_size+0x17c>)
   3f3a6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   3f3a8:	bd10      	pop	{r4, pc}
   3f3aa:	bf00      	nop
   3f3ac:	4000c000 	.word	0x4000c000
   3f3b0:	40005000 	.word	0x40005000
   3f3b4:	00038148 	.word	0x00038148
   3f3b8:	4000f000 	.word	0x4000f000
   3f3bc:	40029000 	.word	0x40029000
   3f3c0:	0004b512 	.word	0x0004b512
   3f3c4:	4001e000 	.word	0x4001e000
   3f3c8:	e000ed00 	.word	0xe000ed00
   3f3cc:	05fa0004 	.word	0x05fa0004
   3f3d0:	20000828 	.word	0x20000828
   3f3d4:	03d09000 	.word	0x03d09000

0003f3d8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   3f3d8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   3f3da:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   3f3dc:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3f3de:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   3f3e2:	fab2 f382 	clz	r3, r2
   3f3e6:	f1c3 031f 	rsb	r3, r3, #31
   3f3ea:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   3f3ec:	fa05 f403 	lsl.w	r4, r5, r3
   3f3f0:	ea22 0404 	bic.w	r4, r2, r4
   3f3f4:	e850 6f00 	ldrex	r6, [r0]
   3f3f8:	4296      	cmp	r6, r2
   3f3fa:	d104      	bne.n	3f406 <nrfx_flag32_alloc+0x2e>
   3f3fc:	e840 4c00 	strex	ip, r4, [r0]
   3f400:	f1bc 0f00 	cmp.w	ip, #0
   3f404:	d1f6      	bne.n	3f3f4 <nrfx_flag32_alloc+0x1c>
   3f406:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   3f40a:	d1e7      	bne.n	3f3dc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   3f40c:	4801      	ldr	r0, [pc, #4]	; (3f414 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   3f40e:	700b      	strb	r3, [r1, #0]
}
   3f410:	bd70      	pop	{r4, r5, r6, pc}
   3f412:	bf00      	nop
   3f414:	0bad0000 	.word	0x0bad0000

0003f418 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   3f418:	6803      	ldr	r3, [r0, #0]
   3f41a:	40cb      	lsrs	r3, r1
   3f41c:	07db      	lsls	r3, r3, #31
{
   3f41e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   3f420:	d414      	bmi.n	3f44c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   3f422:	2301      	movs	r3, #1
   3f424:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   3f426:	6802      	ldr	r2, [r0, #0]
   3f428:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   3f42c:	ea43 0102 	orr.w	r1, r3, r2
   3f430:	e850 4f00 	ldrex	r4, [r0]
   3f434:	4294      	cmp	r4, r2
   3f436:	d104      	bne.n	3f442 <nrfx_flag32_free+0x2a>
   3f438:	e840 1c00 	strex	ip, r1, [r0]
   3f43c:	f1bc 0f00 	cmp.w	ip, #0
   3f440:	d1f6      	bne.n	3f430 <nrfx_flag32_free+0x18>
   3f442:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   3f446:	d1ee      	bne.n	3f426 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   3f448:	4801      	ldr	r0, [pc, #4]	; (3f450 <nrfx_flag32_free+0x38>)
}
   3f44a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3f44c:	4801      	ldr	r0, [pc, #4]	; (3f454 <nrfx_flag32_free+0x3c>)
   3f44e:	e7fc      	b.n	3f44a <nrfx_flag32_free+0x32>
   3f450:	0bad0000 	.word	0x0bad0000
   3f454:	0bad0004 	.word	0x0bad0004

0003f458 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   3f458:	4b04      	ldr	r3, [pc, #16]	; (3f46c <nrfx_clock_init+0x14>)
   3f45a:	791a      	ldrb	r2, [r3, #4]
   3f45c:	b922      	cbnz	r2, 3f468 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   3f45e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   3f460:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   3f462:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   3f464:	4802      	ldr	r0, [pc, #8]	; (3f470 <nrfx_clock_init+0x18>)
   3f466:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   3f468:	4802      	ldr	r0, [pc, #8]	; (3f474 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3f46a:	4770      	bx	lr
   3f46c:	20003768 	.word	0x20003768
   3f470:	0bad0000 	.word	0x0bad0000
   3f474:	0bad000c 	.word	0x0bad000c

0003f478 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   3f478:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3f47a:	2000      	movs	r0, #0
   3f47c:	f7ea fe04 	bl	2a088 <arch_irq_is_enabled>
   3f480:	b908      	cbnz	r0, 3f486 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3f482:	f7ea fddf 	bl	2a044 <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   3f486:	4b02      	ldr	r3, [pc, #8]	; (3f490 <nrfx_clock_enable+0x18>)
   3f488:	2201      	movs	r2, #1
   3f48a:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   3f48c:	bd08      	pop	{r3, pc}
   3f48e:	bf00      	nop
   3f490:	20003c7a 	.word	0x20003c7a

0003f494 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   3f494:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   3f496:	b110      	cbz	r0, 3f49e <nrfx_clock_stop+0xa>
   3f498:	2801      	cmp	r0, #1
   3f49a:	d017      	beq.n	3f4cc <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   3f49c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   3f49e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   3f4a2:	2302      	movs	r3, #2
   3f4a4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f4a8:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   3f4ac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f4b0:	2301      	movs	r3, #1
   3f4b2:	60e3      	str	r3, [r4, #12]
   3f4b4:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3f4b8:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   3f4bc:	03db      	lsls	r3, r3, #15
   3f4be:	d5ed      	bpl.n	3f49c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   3f4c0:	2001      	movs	r0, #1
   3f4c2:	f008 fe39 	bl	48138 <nrfx_busy_wait>
   3f4c6:	3d01      	subs	r5, #1
   3f4c8:	d1f6      	bne.n	3f4b8 <nrfx_clock_stop+0x24>
   3f4ca:	e7e7      	b.n	3f49c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   3f4cc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f4d0:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   3f4d2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f4d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   3f4da:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f4de:	6060      	str	r0, [r4, #4]
   3f4e0:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3f4e4:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3f4e8:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   3f4ec:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3f4ee:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3f4f2:	d505      	bpl.n	3f500 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   3f4f4:	b123      	cbz	r3, 3f500 <nrfx_clock_stop+0x6c>
   3f4f6:	2001      	movs	r0, #1
   3f4f8:	f008 fe1e 	bl	48138 <nrfx_busy_wait>
   3f4fc:	3d01      	subs	r5, #1
   3f4fe:	d1f1      	bne.n	3f4e4 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   3f500:	4b01      	ldr	r3, [pc, #4]	; (3f508 <nrfx_clock_stop+0x74>)
   3f502:	2200      	movs	r2, #0
   3f504:	715a      	strb	r2, [r3, #5]
   3f506:	e7c9      	b.n	3f49c <nrfx_clock_stop+0x8>
   3f508:	20003768 	.word	0x20003768

0003f50c <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3f50c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   3f510:	b510      	push	{r4, lr}
   3f512:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   3f516:	b16a      	cbz	r2, 3f534 <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f518:	2200      	movs	r2, #0
   3f51a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3f51e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   3f522:	2201      	movs	r2, #1
   3f524:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   3f528:	4b11      	ldr	r3, [pc, #68]	; (3f570 <nrfx_clock_irq_handler+0x64>)
   3f52a:	7958      	ldrb	r0, [r3, #5]
   3f52c:	b910      	cbnz	r0, 3f534 <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   3f52e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   3f530:	681b      	ldr	r3, [r3, #0]
   3f532:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3f534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3f538:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   3f53c:	b172      	cbz	r2, 3f55c <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f53e:	2200      	movs	r2, #0
   3f540:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   3f544:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3f548:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3f54c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   3f550:	0792      	lsls	r2, r2, #30
   3f552:	d104      	bne.n	3f55e <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3f554:	2201      	movs	r2, #1
   3f556:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f55a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   3f55c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   3f55e:	2202      	movs	r2, #2
   3f560:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3f564:	4b02      	ldr	r3, [pc, #8]	; (3f570 <nrfx_clock_irq_handler+0x64>)
}
   3f566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3f56a:	681b      	ldr	r3, [r3, #0]
   3f56c:	2001      	movs	r0, #1
   3f56e:	4718      	bx	r3
   3f570:	20003768 	.word	0x20003768

0003f574 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   3f574:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   3f576:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   3f57a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   3f57c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   3f57e:	6002      	str	r2, [r0, #0]
}
   3f580:	4802      	ldr	r0, [pc, #8]	; (3f58c <nrf_gpio_pin_port_decode+0x18>)
   3f582:	bf18      	it	ne
   3f584:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   3f588:	4770      	bx	lr
   3f58a:	bf00      	nop
   3f58c:	50000300 	.word	0x50000300

0003f590 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   3f590:	4b03      	ldr	r3, [pc, #12]	; (3f5a0 <pin_in_use_by_te+0x10>)
   3f592:	3008      	adds	r0, #8
   3f594:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   3f598:	f3c0 1040 	ubfx	r0, r0, #5, #1
   3f59c:	4770      	bx	lr
   3f59e:	bf00      	nop
   3f5a0:	2000082c 	.word	0x2000082c

0003f5a4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   3f5a4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f5a6:	f100 0308 	add.w	r3, r0, #8
   3f5aa:	4c0c      	ldr	r4, [pc, #48]	; (3f5dc <call_handler+0x38>)
   3f5ac:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   3f5b0:	05da      	lsls	r2, r3, #23
{
   3f5b2:	4605      	mov	r5, r0
   3f5b4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f5b6:	d507      	bpl.n	3f5c8 <call_handler+0x24>
   3f5b8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   3f5bc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   3f5c0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   3f5c4:	6852      	ldr	r2, [r2, #4]
   3f5c6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   3f5c8:	68a3      	ldr	r3, [r4, #8]
   3f5ca:	b12b      	cbz	r3, 3f5d8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   3f5cc:	68e2      	ldr	r2, [r4, #12]
   3f5ce:	4631      	mov	r1, r6
   3f5d0:	4628      	mov	r0, r5
    }
}
   3f5d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   3f5d6:	4718      	bx	r3
}
   3f5d8:	bd70      	pop	{r4, r5, r6, pc}
   3f5da:	bf00      	nop
   3f5dc:	2000082c 	.word	0x2000082c

0003f5e0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f5e0:	4a12      	ldr	r2, [pc, #72]	; (3f62c <release_handler+0x4c>)
   3f5e2:	3008      	adds	r0, #8
{
   3f5e4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3f5e6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   3f5ea:	05d9      	lsls	r1, r3, #23
   3f5ec:	d51b      	bpl.n	3f626 <release_handler+0x46>
   3f5ee:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   3f5f2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3f5f6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3f5fa:	f102 040e 	add.w	r4, r2, #14
   3f5fe:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   3f600:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   3f604:	f413 7f80 	tst.w	r3, #256	; 0x100
   3f608:	d003      	beq.n	3f612 <release_handler+0x32>
   3f60a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   3f60e:	4299      	cmp	r1, r3
   3f610:	d009      	beq.n	3f626 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3f612:	3001      	adds	r0, #1
   3f614:	2830      	cmp	r0, #48	; 0x30
   3f616:	d1f3      	bne.n	3f600 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   3f618:	2300      	movs	r3, #0
   3f61a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3f61e:	4804      	ldr	r0, [pc, #16]	; (3f630 <release_handler+0x50>)
}
   3f620:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3f622:	f7ff bef9 	b.w	3f418 <nrfx_flag32_free>
}
   3f626:	bc10      	pop	{r4}
   3f628:	4770      	bx	lr
   3f62a:	bf00      	nop
   3f62c:	2000082c 	.word	0x2000082c
   3f630:	200008a0 	.word	0x200008a0

0003f634 <pin_handler_trigger_uninit>:
{
   3f634:	b538      	push	{r3, r4, r5, lr}
   3f636:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   3f638:	f7ff ffaa 	bl	3f590 <pin_in_use_by_te>
   3f63c:	4c09      	ldr	r4, [pc, #36]	; (3f664 <pin_handler_trigger_uninit+0x30>)
   3f63e:	f102 0508 	add.w	r5, r2, #8
   3f642:	b140      	cbz	r0, 3f656 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3f644:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   3f648:	4907      	ldr	r1, [pc, #28]	; (3f668 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   3f64a:	0b5b      	lsrs	r3, r3, #13
   3f64c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   3f650:	2000      	movs	r0, #0
   3f652:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   3f656:	4610      	mov	r0, r2
   3f658:	f7ff ffc2 	bl	3f5e0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   3f65c:	2300      	movs	r3, #0
   3f65e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   3f662:	bd38      	pop	{r3, r4, r5, pc}
   3f664:	2000082c 	.word	0x2000082c
   3f668:	40006000 	.word	0x40006000

0003f66c <nrfx_gpiote_input_configure>:
{
   3f66c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3f670:	4604      	mov	r4, r0
   3f672:	b085      	sub	sp, #20
   3f674:	4617      	mov	r7, r2
   3f676:	461e      	mov	r6, r3
    if (p_input_config)
   3f678:	b319      	cbz	r1, 3f6c2 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f67a:	f8df 8138 	ldr.w	r8, [pc, #312]	; 3f7b4 <nrfx_gpiote_input_configure+0x148>
   3f67e:	f100 0908 	add.w	r9, r0, #8
   3f682:	f838 5019 	ldrh.w	r5, [r8, r9, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3f686:	07ab      	lsls	r3, r5, #30
   3f688:	d506      	bpl.n	3f698 <nrfx_gpiote_input_configure+0x2c>
   3f68a:	f7ff ff81 	bl	3f590 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   3f68e:	b118      	cbz	r0, 3f698 <nrfx_gpiote_input_configure+0x2c>
                return NRFX_ERROR_INVALID_PARAM;
   3f690:	4849      	ldr	r0, [pc, #292]	; (3f7b8 <nrfx_gpiote_input_configure+0x14c>)
}
   3f692:	b005      	add	sp, #20
   3f694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   3f698:	2300      	movs	r3, #0
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   3f69a:	f025 0502 	bic.w	r5, r5, #2
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3f69e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   3f6a2:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   3f6a6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3f6aa:	f10d 020f 	add.w	r2, sp, #15
   3f6ae:	460b      	mov	r3, r1
   3f6b0:	4620      	mov	r0, r4
   3f6b2:	f10d 010e 	add.w	r1, sp, #14
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   3f6b6:	f045 0501 	orr.w	r5, r5, #1
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3f6ba:	f008 fd6b 	bl	48194 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   3f6be:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
    if (p_trigger_config)
   3f6c2:	b197      	cbz	r7, 3f6ea <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f6c4:	4b3b      	ldr	r3, [pc, #236]	; (3f7b4 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   3f6c6:	783d      	ldrb	r5, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   3f6c8:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f6ca:	f104 0008 	add.w	r0, r4, #8
   3f6ce:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   3f6d2:	078f      	lsls	r7, r1, #30
   3f6d4:	d50c      	bpl.n	3f6f0 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   3f6d6:	2a00      	cmp	r2, #0
   3f6d8:	d1da      	bne.n	3f690 <nrfx_gpiote_input_configure+0x24>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   3f6da:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   3f6de:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   3f6e2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
   3f6e6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   3f6ea:	bbce      	cbnz	r6, 3f760 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   3f6ec:	4833      	ldr	r0, [pc, #204]	; (3f7bc <nrfx_gpiote_input_configure+0x150>)
   3f6ee:	e7d0      	b.n	3f692 <nrfx_gpiote_input_configure+0x26>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   3f6f0:	f021 0120 	bic.w	r1, r1, #32
   3f6f4:	04c9      	lsls	r1, r1, #19
   3f6f6:	0cc9      	lsrs	r1, r1, #19
   3f6f8:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   3f6fc:	2a00      	cmp	r2, #0
   3f6fe:	d0ec      	beq.n	3f6da <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   3f700:	2d03      	cmp	r5, #3
   3f702:	d8c5      	bhi.n	3f690 <nrfx_gpiote_input_configure+0x24>
                uint8_t ch = *p_trigger_config->p_in_channel;
   3f704:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   3f706:	b92d      	cbnz	r5, 3f714 <nrfx_gpiote_input_configure+0xa8>
   3f708:	4a2d      	ldr	r2, [pc, #180]	; (3f7c0 <nrfx_gpiote_input_configure+0x154>)
   3f70a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   3f70e:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   3f712:	e7e2      	b.n	3f6da <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   3f714:	00ba      	lsls	r2, r7, #2
   3f716:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   3f71a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   3f71e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   3f722:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   3f726:	f02c 0c03 	bic.w	ip, ip, #3
   3f72a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   3f72e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   3f732:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   3f736:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   3f73a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3f73e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   3f742:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   3f746:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   3f74a:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
   3f74e:	ea4c 0c0e 	orr.w	ip, ip, lr
   3f752:	f041 0120 	orr.w	r1, r1, #32
   3f756:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   3f75a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   3f75e:	e7bc      	b.n	3f6da <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   3f760:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
   3f764:	4620      	mov	r0, r4
   3f766:	f7ff ff3b 	bl	3f5e0 <release_handler>
    if (!handler)
   3f76a:	2f00      	cmp	r7, #0
   3f76c:	d0be      	beq.n	3f6ec <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   3f76e:	4d11      	ldr	r5, [pc, #68]	; (3f7b4 <nrfx_gpiote_input_configure+0x148>)
   3f770:	682b      	ldr	r3, [r5, #0]
   3f772:	429f      	cmp	r7, r3
   3f774:	d104      	bne.n	3f780 <nrfx_gpiote_input_configure+0x114>
   3f776:	686b      	ldr	r3, [r5, #4]
   3f778:	429e      	cmp	r6, r3
   3f77a:	d101      	bne.n	3f780 <nrfx_gpiote_input_configure+0x114>
   3f77c:	2200      	movs	r2, #0
   3f77e:	e009      	b.n	3f794 <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   3f780:	4810      	ldr	r0, [pc, #64]	; (3f7c4 <nrfx_gpiote_input_configure+0x158>)
   3f782:	f10d 010f 	add.w	r1, sp, #15
   3f786:	f7ff fe27 	bl	3f3d8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   3f78a:	4b0c      	ldr	r3, [pc, #48]	; (3f7bc <nrfx_gpiote_input_configure+0x150>)
   3f78c:	4298      	cmp	r0, r3
   3f78e:	d180      	bne.n	3f692 <nrfx_gpiote_input_configure+0x26>
        handler_id = (int32_t)id;
   3f790:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   3f794:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   3f798:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3f79c:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   3f79e:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3f7a0:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   3f7a4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   3f7a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   3f7ac:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   3f7b0:	e79c      	b.n	3f6ec <nrfx_gpiote_input_configure+0x80>
   3f7b2:	bf00      	nop
   3f7b4:	2000082c 	.word	0x2000082c
   3f7b8:	0bad0004 	.word	0x0bad0004
   3f7bc:	0bad0000 	.word	0x0bad0000
   3f7c0:	40006000 	.word	0x40006000
   3f7c4:	200008a0 	.word	0x200008a0

0003f7c8 <nrfx_gpiote_output_configure>:
{
   3f7c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3f7cc:	4604      	mov	r4, r0
   3f7ce:	4615      	mov	r5, r2
    if (p_config)
   3f7d0:	b309      	cbz	r1, 3f816 <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f7d2:	4f32      	ldr	r7, [pc, #200]	; (3f89c <nrfx_gpiote_output_configure+0xd4>)
   3f7d4:	f100 0808 	add.w	r8, r0, #8
   3f7d8:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   3f7dc:	07b2      	lsls	r2, r6, #30
   3f7de:	d403      	bmi.n	3f7e8 <nrfx_gpiote_output_configure+0x20>
   3f7e0:	f7ff fed6 	bl	3f590 <pin_in_use_by_te>
   3f7e4:	2800      	cmp	r0, #0
   3f7e6:	d157      	bne.n	3f898 <nrfx_gpiote_output_configure+0xd0>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   3f7e8:	f016 0f1c 	tst.w	r6, #28
   3f7ec:	d002      	beq.n	3f7f4 <nrfx_gpiote_output_configure+0x2c>
   3f7ee:	784b      	ldrb	r3, [r1, #1]
   3f7f0:	2b01      	cmp	r3, #1
   3f7f2:	d051      	beq.n	3f898 <nrfx_gpiote_output_configure+0xd0>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   3f7f4:	2301      	movs	r3, #1
   3f7f6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   3f7fa:	2300      	movs	r3, #0
   3f7fc:	e9cd 1300 	strd	r1, r3, [sp]
   3f800:	1c4a      	adds	r2, r1, #1
   3f802:	1c8b      	adds	r3, r1, #2
   3f804:	4620      	mov	r0, r4
   3f806:	f10d 010f 	add.w	r1, sp, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   3f80a:	f046 0603 	orr.w	r6, r6, #3
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   3f80e:	f008 fcc1 	bl	48194 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   3f812:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_task_config)
   3f816:	b91d      	cbnz	r5, 3f820 <nrfx_gpiote_output_configure+0x58>
    return NRFX_SUCCESS;
   3f818:	4821      	ldr	r0, [pc, #132]	; (3f8a0 <nrfx_gpiote_output_configure+0xd8>)
}
   3f81a:	b004      	add	sp, #16
   3f81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f820:	4e1e      	ldr	r6, [pc, #120]	; (3f89c <nrfx_gpiote_output_configure+0xd4>)
   3f822:	f104 0708 	add.w	r7, r4, #8
   3f826:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   3f82a:	0783      	lsls	r3, r0, #30
   3f82c:	d534      	bpl.n	3f898 <nrfx_gpiote_output_configure+0xd0>
        uint32_t ch = p_task_config->task_ch;
   3f82e:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   3f832:	4661      	mov	r1, ip
   3f834:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   3f836:	f020 0020 	bic.w	r0, r0, #32
   3f83a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   3f83e:	04c0      	lsls	r0, r0, #19
   3f840:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   3f844:	0cc0      	lsrs	r0, r0, #19
   3f846:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   3f84a:	2300      	movs	r3, #0
   3f84c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   3f850:	786a      	ldrb	r2, [r5, #1]
   3f852:	2a00      	cmp	r2, #0
   3f854:	d0e0      	beq.n	3f818 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   3f856:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   3f85a:	78ad      	ldrb	r5, [r5, #2]
   3f85c:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   3f860:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3f864:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3f868:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   3f86c:	0223      	lsls	r3, r4, #8
   3f86e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   3f872:	0412      	lsls	r2, r2, #16
   3f874:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3f878:	ea43 030e 	orr.w	r3, r3, lr
   3f87c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   3f87e:	052a      	lsls	r2, r5, #20
   3f880:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   3f884:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3f888:	4313      	orrs	r3, r2
   3f88a:	f040 0020 	orr.w	r0, r0, #32
   3f88e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   3f892:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   3f896:	e7bf      	b.n	3f818 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
   3f898:	4802      	ldr	r0, [pc, #8]	; (3f8a4 <nrfx_gpiote_output_configure+0xdc>)
   3f89a:	e7be      	b.n	3f81a <nrfx_gpiote_output_configure+0x52>
   3f89c:	2000082c 	.word	0x2000082c
   3f8a0:	0bad0000 	.word	0x0bad0000
   3f8a4:	0bad0004 	.word	0x0bad0004

0003f8a8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   3f8a8:	4b01      	ldr	r3, [pc, #4]	; (3f8b0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   3f8aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   3f8ae:	4770      	bx	lr
   3f8b0:	2000082c 	.word	0x2000082c

0003f8b4 <nrfx_gpiote_channel_get>:
{
   3f8b4:	b508      	push	{r3, lr}
   3f8b6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   3f8b8:	f7ff fe6a 	bl	3f590 <pin_in_use_by_te>
   3f8bc:	b138      	cbz	r0, 3f8ce <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3f8be:	4b05      	ldr	r3, [pc, #20]	; (3f8d4 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   3f8c0:	4805      	ldr	r0, [pc, #20]	; (3f8d8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3f8c2:	3208      	adds	r2, #8
   3f8c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   3f8c8:	0b5b      	lsrs	r3, r3, #13
   3f8ca:	700b      	strb	r3, [r1, #0]
}
   3f8cc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3f8ce:	4803      	ldr	r0, [pc, #12]	; (3f8dc <nrfx_gpiote_channel_get+0x28>)
   3f8d0:	e7fc      	b.n	3f8cc <nrfx_gpiote_channel_get+0x18>
   3f8d2:	bf00      	nop
   3f8d4:	2000082c 	.word	0x2000082c
   3f8d8:	0bad0000 	.word	0x0bad0000
   3f8dc:	0bad0004 	.word	0x0bad0004

0003f8e0 <nrfx_gpiote_init>:
{
   3f8e0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   3f8e2:	4c0f      	ldr	r4, [pc, #60]	; (3f920 <nrfx_gpiote_init+0x40>)
   3f8e4:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   3f8e8:	b9bd      	cbnz	r5, 3f91a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   3f8ea:	2260      	movs	r2, #96	; 0x60
   3f8ec:	4629      	mov	r1, r5
   3f8ee:	f104 0010 	add.w	r0, r4, #16
   3f8f2:	f005 fa91 	bl	44e18 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   3f8f6:	2006      	movs	r0, #6
   3f8f8:	f7ea fba4 	bl	2a044 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3f8fc:	4b09      	ldr	r3, [pc, #36]	; (3f924 <nrfx_gpiote_init+0x44>)
    return err_code;
   3f8fe:	480a      	ldr	r0, [pc, #40]	; (3f928 <nrfx_gpiote_init+0x48>)
   3f900:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   3f904:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   3f908:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   3f90c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   3f910:	2301      	movs	r3, #1
   3f912:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   3f916:	6763      	str	r3, [r4, #116]	; 0x74
}
   3f918:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   3f91a:	4804      	ldr	r0, [pc, #16]	; (3f92c <nrfx_gpiote_init+0x4c>)
   3f91c:	e7fc      	b.n	3f918 <nrfx_gpiote_init+0x38>
   3f91e:	bf00      	nop
   3f920:	2000082c 	.word	0x2000082c
   3f924:	40006000 	.word	0x40006000
   3f928:	0bad0000 	.word	0x0bad0000
   3f92c:	0bad0005 	.word	0x0bad0005

0003f930 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   3f930:	4b03      	ldr	r3, [pc, #12]	; (3f940 <nrfx_gpiote_is_init+0x10>)
   3f932:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   3f936:	3800      	subs	r0, #0
   3f938:	bf18      	it	ne
   3f93a:	2001      	movne	r0, #1
   3f93c:	4770      	bx	lr
   3f93e:	bf00      	nop
   3f940:	2000082c 	.word	0x2000082c

0003f944 <nrfx_gpiote_channel_free>:
{
   3f944:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   3f946:	4801      	ldr	r0, [pc, #4]	; (3f94c <nrfx_gpiote_channel_free+0x8>)
   3f948:	f7ff bd66 	b.w	3f418 <nrfx_flag32_free>
   3f94c:	2000089c 	.word	0x2000089c

0003f950 <nrfx_gpiote_channel_alloc>:
{
   3f950:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   3f952:	4801      	ldr	r0, [pc, #4]	; (3f958 <nrfx_gpiote_channel_alloc+0x8>)
   3f954:	f7ff bd40 	b.w	3f3d8 <nrfx_flag32_alloc>
   3f958:	2000089c 	.word	0x2000089c

0003f95c <nrfx_gpiote_trigger_enable>:
{
   3f95c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3f95e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3f960:	f7ff fe16 	bl	3f590 <pin_in_use_by_te>
   3f964:	4a1f      	ldr	r2, [pc, #124]	; (3f9e4 <nrfx_gpiote_trigger_enable+0x88>)
   3f966:	f104 0508 	add.w	r5, r4, #8
   3f96a:	b1f0      	cbz	r0, 3f9aa <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f96c:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3f970:	f013 0602 	ands.w	r6, r3, #2
   3f974:	d119      	bne.n	3f9aa <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3f976:	0b5a      	lsrs	r2, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   3f978:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
   3f97a:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
   3f97e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   3f982:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3f986:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3f98a:	6006      	str	r6, [r0, #0]
   3f98c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   3f98e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   3f992:	f040 0001 	orr.w	r0, r0, #1
   3f996:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   3f99a:	b121      	cbz	r1, 3f9a6 <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   3f99c:	2301      	movs	r3, #1
   3f99e:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   3f9a0:	4a11      	ldr	r2, [pc, #68]	; (3f9e8 <nrfx_gpiote_trigger_enable+0x8c>)
   3f9a2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   3f9a6:	b002      	add	sp, #8
   3f9a8:	bd70      	pop	{r4, r5, r6, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3f9aa:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   3f9ae:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   3f9b2:	2b04      	cmp	r3, #4
   3f9b4:	d012      	beq.n	3f9dc <nrfx_gpiote_trigger_enable+0x80>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   3f9b6:	2b05      	cmp	r3, #5
   3f9b8:	d012      	beq.n	3f9e0 <nrfx_gpiote_trigger_enable+0x84>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3f9ba:	a801      	add	r0, sp, #4
   3f9bc:	9401      	str	r4, [sp, #4]
   3f9be:	f7ff fdd9 	bl	3f574 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3f9c2:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   3f9c4:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3f9c8:	40d9      	lsrs	r1, r3
   3f9ca:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   3f9ce:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   3f9d0:	4620      	mov	r0, r4
}
   3f9d2:	b002      	add	sp, #8
   3f9d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   3f9d8:	f008 bc25 	b.w	48226 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   3f9dc:	2103      	movs	r1, #3
   3f9de:	e7f7      	b.n	3f9d0 <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   3f9e0:	2102      	movs	r1, #2
   3f9e2:	e7f5      	b.n	3f9d0 <nrfx_gpiote_trigger_enable+0x74>
   3f9e4:	2000082c 	.word	0x2000082c
   3f9e8:	40006000 	.word	0x40006000

0003f9ec <nrfx_gpiote_trigger_disable>:
{
   3f9ec:	b508      	push	{r3, lr}
   3f9ee:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3f9f0:	f7ff fdce 	bl	3f590 <pin_in_use_by_te>
   3f9f4:	b1c0      	cbz	r0, 3fa28 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   3f9f6:	f102 0108 	add.w	r1, r2, #8
   3f9fa:	4b0e      	ldr	r3, [pc, #56]	; (3fa34 <nrfx_gpiote_trigger_disable+0x48>)
   3f9fc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3fa00:	0799      	lsls	r1, r3, #30
   3fa02:	d411      	bmi.n	3fa28 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3fa04:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   3fa06:	2201      	movs	r2, #1
   3fa08:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   3fa0a:	009b      	lsls	r3, r3, #2
   3fa0c:	490a      	ldr	r1, [pc, #40]	; (3fa38 <nrfx_gpiote_trigger_disable+0x4c>)
   3fa0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3fa12:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   3fa16:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   3fa1a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   3fa1e:	f022 0203 	bic.w	r2, r2, #3
   3fa22:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   3fa26:	bd08      	pop	{r3, pc}
   3fa28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   3fa2c:	2100      	movs	r1, #0
   3fa2e:	4610      	mov	r0, r2
   3fa30:	f008 bbf9 	b.w	48226 <nrf_gpio_cfg_sense_set>
   3fa34:	2000082c 	.word	0x2000082c
   3fa38:	40006000 	.word	0x40006000

0003fa3c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   3fa3c:	4b0e      	ldr	r3, [pc, #56]	; (3fa78 <nrfx_gpiote_pin_uninit+0x3c>)
   3fa3e:	f100 0208 	add.w	r2, r0, #8
{
   3fa42:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   3fa44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   3fa48:	07db      	lsls	r3, r3, #31
{
   3fa4a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   3fa4c:	d511      	bpl.n	3fa72 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   3fa4e:	f7ff ffcd 	bl	3f9ec <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   3fa52:	4620      	mov	r0, r4
   3fa54:	f7ff fdee 	bl	3f634 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fa58:	a801      	add	r0, sp, #4
   3fa5a:	9401      	str	r4, [sp, #4]
   3fa5c:	f7ff fd8a 	bl	3f574 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   3fa60:	9b01      	ldr	r3, [sp, #4]
   3fa62:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3fa66:	2202      	movs	r2, #2
   3fa68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   3fa6c:	4803      	ldr	r0, [pc, #12]	; (3fa7c <nrfx_gpiote_pin_uninit+0x40>)
}
   3fa6e:	b002      	add	sp, #8
   3fa70:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   3fa72:	4803      	ldr	r0, [pc, #12]	; (3fa80 <nrfx_gpiote_pin_uninit+0x44>)
   3fa74:	e7fb      	b.n	3fa6e <nrfx_gpiote_pin_uninit+0x32>
   3fa76:	bf00      	nop
   3fa78:	2000082c 	.word	0x2000082c
   3fa7c:	0bad0000 	.word	0x0bad0000
   3fa80:	0bad0004 	.word	0x0bad0004

0003fa84 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   3fa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fa88:	4b64      	ldr	r3, [pc, #400]	; (3fc1c <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   3fa8a:	4865      	ldr	r0, [pc, #404]	; (3fc20 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3fa8c:	4965      	ldr	r1, [pc, #404]	; (3fc24 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   3fa8e:	2600      	movs	r6, #0
{
   3fa90:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   3fa92:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3fa94:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3fa96:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   3fa98:	b135      	cbz	r5, 3faa8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   3fa9a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   3fa9e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3faa0:	bf1e      	ittt	ne
   3faa2:	601c      	strne	r4, [r3, #0]
   3faa4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   3faa6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3faa8:	3304      	adds	r3, #4
   3faaa:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   3faac:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   3fab0:	d1f1      	bne.n	3fa96 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3fab2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 3fc20 <nrfx_gpiote_irq_handler+0x19c>
   3fab6:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   3faba:	2b00      	cmp	r3, #0
   3fabc:	f000 8091 	beq.w	3fbe2 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   3fac0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   3fac4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   3fac8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   3faca:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   3face:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   3fad2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   3fad4:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   3fad8:	2700      	movs	r7, #0
            while (latch[i])
   3fada:	f10d 0910 	add.w	r9, sp, #16
   3fade:	017b      	lsls	r3, r7, #5
   3fae0:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   3fae2:	f04f 0a01 	mov.w	sl, #1
   3fae6:	e049      	b.n	3fb7c <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   3fae8:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3faea:	4a4f      	ldr	r2, [pc, #316]	; (3fc28 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   3faec:	fa94 f4a4 	rbit	r4, r4
   3faf0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   3faf4:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   3faf6:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3faf8:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   3fafc:	f004 0c07 	and.w	ip, r4, #7
   3fb00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   3fb04:	f819 2000 	ldrb.w	r2, [r9, r0]
   3fb08:	9403      	str	r4, [sp, #12]
   3fb0a:	fa0a fc0c 	lsl.w	ip, sl, ip
   3fb0e:	ea22 020c 	bic.w	r2, r2, ip
   3fb12:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fb16:	a803      	add	r0, sp, #12
   3fb18:	f3c3 0582 	ubfx	r5, r3, #2, #3
   3fb1c:	0899      	lsrs	r1, r3, #2
   3fb1e:	f7ff fd29 	bl	3f574 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3fb22:	9a03      	ldr	r2, [sp, #12]
   3fb24:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   3fb28:	074b      	lsls	r3, r1, #29
   3fb2a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3fb2e:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   3fb30:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   3fb34:	d529      	bpl.n	3fb8a <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   3fb36:	4620      	mov	r0, r4
   3fb38:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3fb3a:	b2d5      	uxtb	r5, r2
   3fb3c:	f7ff fd32 	bl	3f5a4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fb40:	a803      	add	r0, sp, #12
   3fb42:	9403      	str	r4, [sp, #12]
   3fb44:	f7ff fd16 	bl	3f574 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3fb48:	9b03      	ldr	r3, [sp, #12]
   3fb4a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   3fb4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   3fb52:	f3c3 4301 	ubfx	r3, r3, #16, #2
   3fb56:	429d      	cmp	r5, r3
   3fb58:	d107      	bne.n	3fb6a <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   3fb5a:	2100      	movs	r1, #0
   3fb5c:	4620      	mov	r0, r4
   3fb5e:	f008 fb62 	bl	48226 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   3fb62:	4629      	mov	r1, r5
   3fb64:	4620      	mov	r0, r4
   3fb66:	f008 fb5e 	bl	48226 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fb6a:	a803      	add	r0, sp, #12
   3fb6c:	9403      	str	r4, [sp, #12]
   3fb6e:	f7ff fd01 	bl	3f574 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   3fb72:	9b03      	ldr	r3, [sp, #12]
   3fb74:	fa0a f303 	lsl.w	r3, sl, r3
   3fb78:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   3fb7c:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   3fb80:	2c00      	cmp	r4, #0
   3fb82:	d1b1      	bne.n	3fae8 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   3fb84:	b9cf      	cbnz	r7, 3fbba <nrfx_gpiote_irq_handler+0x136>
   3fb86:	2701      	movs	r7, #1
   3fb88:	e7a9      	b.n	3fade <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   3fb8a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   3fb8c:	bf0c      	ite	eq
   3fb8e:	2103      	moveq	r1, #3
   3fb90:	2102      	movne	r1, #2
   3fb92:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   3fb94:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   3fb96:	f008 fb46 	bl	48226 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   3fb9a:	2d03      	cmp	r5, #3
   3fb9c:	d004      	beq.n	3fba8 <nrfx_gpiote_irq_handler+0x124>
   3fb9e:	9a01      	ldr	r2, [sp, #4]
   3fba0:	2a02      	cmp	r2, #2
   3fba2:	d106      	bne.n	3fbb2 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   3fba4:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   3fba6:	d1e0      	bne.n	3fb6a <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   3fba8:	4659      	mov	r1, fp
   3fbaa:	4620      	mov	r0, r4
   3fbac:	f7ff fcfa 	bl	3f5a4 <call_handler>
   3fbb0:	e7db      	b.n	3fb6a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   3fbb2:	2a03      	cmp	r2, #3
   3fbb4:	d1d9      	bne.n	3fb6a <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   3fbb6:	2d02      	cmp	r5, #2
   3fbb8:	e7f5      	b.n	3fba6 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   3fbba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   3fbbe:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   3fbc2:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
   3fbc6:	4919      	ldr	r1, [pc, #100]	; (3fc2c <nrfx_gpiote_irq_handler+0x1a8>)
   3fbc8:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   3fbcc:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   3fbce:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   3fbd2:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   3fbd6:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   3fbd8:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   3fbda:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   3fbde:	f47f af7b 	bne.w	3fad8 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   3fbe2:	2401      	movs	r4, #1
    while (mask)
   3fbe4:	b916      	cbnz	r6, 3fbec <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   3fbe6:	b007      	add	sp, #28
   3fbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   3fbec:	fa96 f3a6 	rbit	r3, r6
   3fbf0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   3fbf4:	fa04 f203 	lsl.w	r2, r4, r3
   3fbf8:	009b      	lsls	r3, r3, #2
   3fbfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3fbfe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   3fc02:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   3fc06:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   3fc0a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   3fc0e:	f3c0 2005 	ubfx	r0, r0, #8, #6
   3fc12:	f3c1 4101 	ubfx	r1, r1, #16, #2
   3fc16:	f7ff fcc5 	bl	3f5a4 <call_handler>
   3fc1a:	e7e3      	b.n	3fbe4 <nrfx_gpiote_irq_handler+0x160>
   3fc1c:	40006100 	.word	0x40006100
   3fc20:	40006000 	.word	0x40006000
   3fc24:	40006120 	.word	0x40006120
   3fc28:	2000082c 	.word	0x2000082c
   3fc2c:	50000300 	.word	0x50000300

0003fc30 <nvmc_word_write>:
   3fc30:	4a04      	ldr	r2, [pc, #16]	; (3fc44 <nvmc_word_write+0x14>)
   3fc32:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3fc36:	07db      	lsls	r3, r3, #31
   3fc38:	d5fb      	bpl.n	3fc32 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   3fc3a:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   3fc3c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   3fc40:	4770      	bx	lr
   3fc42:	bf00      	nop
   3fc44:	4001e000 	.word	0x4001e000

0003fc48 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   3fc48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   3fc4c:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   3fc4e:	fbb0 f3f2 	udiv	r3, r0, r2
   3fc52:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   3fc56:	b973      	cbnz	r3, 3fc76 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   3fc58:	4b08      	ldr	r3, [pc, #32]	; (3fc7c <nrfx_nvmc_page_erase+0x34>)
   3fc5a:	2202      	movs	r2, #2
   3fc5c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   3fc60:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3fc64:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3fc68:	07d2      	lsls	r2, r2, #31
   3fc6a:	d5fb      	bpl.n	3fc64 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   3fc6c:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3fc6e:	4804      	ldr	r0, [pc, #16]	; (3fc80 <nrfx_nvmc_page_erase+0x38>)
   3fc70:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   3fc74:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   3fc76:	4803      	ldr	r0, [pc, #12]	; (3fc84 <nrfx_nvmc_page_erase+0x3c>)
}
   3fc78:	4770      	bx	lr
   3fc7a:	bf00      	nop
   3fc7c:	4001e000 	.word	0x4001e000
   3fc80:	0bad0000 	.word	0x0bad0000
   3fc84:	0bad000a 	.word	0x0bad000a

0003fc88 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   3fc88:	b510      	push	{r4, lr}
   3fc8a:	4c05      	ldr	r4, [pc, #20]	; (3fca0 <nrfx_nvmc_word_write+0x18>)
   3fc8c:	2301      	movs	r3, #1
   3fc8e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   3fc92:	f7ff ffcd 	bl	3fc30 <nvmc_word_write>
   3fc96:	2300      	movs	r3, #0
   3fc98:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   3fc9c:	bd10      	pop	{r4, pc}
   3fc9e:	bf00      	nop
   3fca0:	4001e000 	.word	0x4001e000

0003fca4 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   3fca4:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   3fca6:	4c18      	ldr	r4, [pc, #96]	; (3fd08 <nrfx_power_init+0x64>)
   3fca8:	7823      	ldrb	r3, [r4, #0]
   3fcaa:	bb53      	cbnz	r3, 3fd02 <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   3fcac:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   3fcae:	0791      	lsls	r1, r2, #30
   3fcb0:	f3c2 0340 	ubfx	r3, r2, #1, #1
   3fcb4:	d511      	bpl.n	3fcda <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3fcb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3fcba:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
   3fcbe:	2908      	cmp	r1, #8
   3fcc0:	d11d      	bne.n	3fcfe <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3fcc2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   3fcc6:	2b05      	cmp	r3, #5
   3fcc8:	d819      	bhi.n	3fcfe <nrfx_power_init+0x5a>
   3fcca:	4910      	ldr	r1, [pc, #64]	; (3fd0c <nrfx_power_init+0x68>)
   3fccc:	5cc9      	ldrb	r1, [r1, r3]
   3fcce:	2301      	movs	r3, #1
   3fcd0:	b119      	cbz	r1, 3fcda <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   3fcd2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   3fcd6:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   3fcda:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   3fcde:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   3fce2:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3fce6:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   3fce8:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
   3fcec:	f7ea f9cc 	bl	2a088 <arch_irq_is_enabled>
   3fcf0:	b908      	cbnz	r0, 3fcf6 <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3fcf2:	f7ea f9a7 	bl	2a044 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   3fcf6:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   3fcf8:	4805      	ldr	r0, [pc, #20]	; (3fd10 <nrfx_power_init+0x6c>)
    m_initialized = true;
   3fcfa:	7023      	strb	r3, [r4, #0]
}
   3fcfc:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   3fcfe:	2301      	movs	r3, #1
   3fd00:	e7eb      	b.n	3fcda <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   3fd02:	4804      	ldr	r0, [pc, #16]	; (3fd14 <nrfx_power_init+0x70>)
   3fd04:	e7fa      	b.n	3fcfc <nrfx_power_init+0x58>
   3fd06:	bf00      	nop
   3fd08:	20003c7b 	.word	0x20003c7b
   3fd0c:	0004b51e 	.word	0x0004b51e
   3fd10:	0bad0000 	.word	0x0bad0000
   3fd14:	0bad000c 	.word	0x0bad000c

0003fd18 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   3fd18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   3fd1c:	f44f 7260 	mov.w	r2, #896	; 0x380
   3fd20:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   3fd24:	4b01      	ldr	r3, [pc, #4]	; (3fd2c <nrfx_power_usbevt_uninit+0x14>)
   3fd26:	2200      	movs	r2, #0
   3fd28:	601a      	str	r2, [r3, #0]
}
   3fd2a:	4770      	bx	lr
   3fd2c:	20003778 	.word	0x20003778

0003fd30 <nrfx_power_usbevt_init>:
{
   3fd30:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   3fd32:	f7ff fff1 	bl	3fd18 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   3fd36:	6803      	ldr	r3, [r0, #0]
   3fd38:	b10b      	cbz	r3, 3fd3e <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   3fd3a:	4a01      	ldr	r2, [pc, #4]	; (3fd40 <nrfx_power_usbevt_init+0x10>)
   3fd3c:	6013      	str	r3, [r2, #0]
}
   3fd3e:	bd08      	pop	{r3, pc}
   3fd40:	20003778 	.word	0x20003778

0003fd44 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   3fd44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   3fd48:	b510      	push	{r4, lr}
   3fd4a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   3fd4e:	0762      	lsls	r2, r4, #29
   3fd50:	d507      	bpl.n	3fd62 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   3fd52:	f44f 7084 	mov.w	r0, #264	; 0x108
   3fd56:	f008 fa83 	bl	48260 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   3fd5a:	b110      	cbz	r0, 3fd62 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   3fd5c:	4b1e      	ldr	r3, [pc, #120]	; (3fdd8 <nrfx_power_irq_handler+0x94>)
   3fd5e:	681b      	ldr	r3, [r3, #0]
   3fd60:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   3fd62:	06a3      	lsls	r3, r4, #26
   3fd64:	d508      	bpl.n	3fd78 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   3fd66:	f44f 708a 	mov.w	r0, #276	; 0x114
   3fd6a:	f008 fa79 	bl	48260 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   3fd6e:	b118      	cbz	r0, 3fd78 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   3fd70:	4b1a      	ldr	r3, [pc, #104]	; (3fddc <nrfx_power_irq_handler+0x98>)
   3fd72:	2000      	movs	r0, #0
   3fd74:	681b      	ldr	r3, [r3, #0]
   3fd76:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   3fd78:	0660      	lsls	r0, r4, #25
   3fd7a:	d508      	bpl.n	3fd8e <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   3fd7c:	f44f 708c 	mov.w	r0, #280	; 0x118
   3fd80:	f008 fa6e 	bl	48260 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   3fd84:	b118      	cbz	r0, 3fd8e <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   3fd86:	4b15      	ldr	r3, [pc, #84]	; (3fddc <nrfx_power_irq_handler+0x98>)
   3fd88:	2001      	movs	r0, #1
   3fd8a:	681b      	ldr	r3, [r3, #0]
   3fd8c:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   3fd8e:	0621      	lsls	r1, r4, #24
   3fd90:	d508      	bpl.n	3fda4 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   3fd92:	f44f 708e 	mov.w	r0, #284	; 0x11c
   3fd96:	f008 fa63 	bl	48260 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   3fd9a:	b118      	cbz	r0, 3fda4 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   3fd9c:	4b10      	ldr	r3, [pc, #64]	; (3fde0 <nrfx_power_irq_handler+0x9c>)
   3fd9e:	2000      	movs	r0, #0
   3fda0:	681b      	ldr	r3, [r3, #0]
   3fda2:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   3fda4:	05e2      	lsls	r2, r4, #23
   3fda6:	d508      	bpl.n	3fdba <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   3fda8:	f44f 7090 	mov.w	r0, #288	; 0x120
   3fdac:	f008 fa58 	bl	48260 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   3fdb0:	b118      	cbz	r0, 3fdba <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   3fdb2:	4b0b      	ldr	r3, [pc, #44]	; (3fde0 <nrfx_power_irq_handler+0x9c>)
   3fdb4:	2001      	movs	r0, #1
   3fdb6:	681b      	ldr	r3, [r3, #0]
   3fdb8:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   3fdba:	05a3      	lsls	r3, r4, #22
   3fdbc:	d50a      	bpl.n	3fdd4 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   3fdbe:	f44f 7092 	mov.w	r0, #292	; 0x124
   3fdc2:	f008 fa4d 	bl	48260 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   3fdc6:	b128      	cbz	r0, 3fdd4 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   3fdc8:	4b05      	ldr	r3, [pc, #20]	; (3fde0 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   3fdca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   3fdce:	681b      	ldr	r3, [r3, #0]
   3fdd0:	2002      	movs	r0, #2
   3fdd2:	4718      	bx	r3
}
   3fdd4:	bd10      	pop	{r4, pc}
   3fdd6:	bf00      	nop
   3fdd8:	20003770 	.word	0x20003770
   3fddc:	20003774 	.word	0x20003774
   3fde0:	20003778 	.word	0x20003778

0003fde4 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   3fde4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   3fde8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3fdec:	2a08      	cmp	r2, #8
   3fdee:	d106      	bne.n	3fdfe <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3fdf0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   3fdf4:	2b05      	cmp	r3, #5
   3fdf6:	d804      	bhi.n	3fe02 <nrf52_errata_187+0x1e>
   3fdf8:	4a03      	ldr	r2, [pc, #12]	; (3fe08 <nrf52_errata_187+0x24>)
   3fdfa:	5cd0      	ldrb	r0, [r2, r3]
   3fdfc:	4770      	bx	lr
        return false;
   3fdfe:	2000      	movs	r0, #0
   3fe00:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   3fe02:	2001      	movs	r0, #1
}
   3fe04:	4770      	bx	lr
   3fe06:	bf00      	nop
   3fe08:	0004b524 	.word	0x0004b524

0003fe0c <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   3fe0c:	4b05      	ldr	r3, [pc, #20]	; (3fe24 <ep_state_access+0x18>)
   3fe0e:	f010 0f80 	tst.w	r0, #128	; 0x80
   3fe12:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   3fe16:	bf08      	it	eq
   3fe18:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   3fe1a:	f000 000f 	and.w	r0, r0, #15
}
   3fe1e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   3fe22:	4770      	bx	lr
   3fe24:	200038ec 	.word	0x200038ec

0003fe28 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   3fe28:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   3fe2a:	f008 fa3a 	bl	482a2 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   3fe2e:	b118      	cbz	r0, 3fe38 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   3fe30:	4b03      	ldr	r3, [pc, #12]	; (3fe40 <usbd_dma_pending_clear+0x18>)
   3fe32:	2200      	movs	r2, #0
   3fe34:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
   3fe38:	4b02      	ldr	r3, [pc, #8]	; (3fe44 <usbd_dma_pending_clear+0x1c>)
   3fe3a:	2200      	movs	r2, #0
   3fe3c:	701a      	strb	r2, [r3, #0]
}
   3fe3e:	bd08      	pop	{r3, pc}
   3fe40:	40027000 	.word	0x40027000
   3fe44:	20003c7d 	.word	0x20003c7d

0003fe48 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   3fe48:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   3fe4a:	4a07      	ldr	r2, [pc, #28]	; (3fe68 <ev_usbreset_handler+0x20>)
   3fe4c:	2300      	movs	r3, #0
   3fe4e:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   3fe50:	4a06      	ldr	r2, [pc, #24]	; (3fe6c <ev_usbreset_handler+0x24>)
   3fe52:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   3fe54:	2301      	movs	r3, #1
   3fe56:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   3fe58:	4b05      	ldr	r3, [pc, #20]	; (3fe70 <ev_usbreset_handler+0x28>)
   3fe5a:	a801      	add	r0, sp, #4
   3fe5c:	681b      	ldr	r3, [r3, #0]
   3fe5e:	4798      	blx	r3
}
   3fe60:	b003      	add	sp, #12
   3fe62:	f85d fb04 	ldr.w	pc, [sp], #4
   3fe66:	bf00      	nop
   3fe68:	20003c7c 	.word	0x20003c7c
   3fe6c:	20003c7f 	.word	0x20003c7f
   3fe70:	2000397c 	.word	0x2000397c

0003fe74 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   3fe74:	4b19      	ldr	r3, [pc, #100]	; (3fedc <ev_usbevent_handler+0x68>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   3fe76:	b513      	push	{r0, r1, r4, lr}
   3fe78:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   3fe7c:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   3fe80:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   3fe82:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   3fe86:	d508      	bpl.n	3fe9a <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   3fe88:	4b15      	ldr	r3, [pc, #84]	; (3fee0 <ev_usbevent_handler+0x6c>)
   3fe8a:	2201      	movs	r2, #1
   3fe8c:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   3fe8e:	2302      	movs	r3, #2
   3fe90:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   3fe92:	4b14      	ldr	r3, [pc, #80]	; (3fee4 <ev_usbevent_handler+0x70>)
   3fe94:	a801      	add	r0, sp, #4
   3fe96:	681b      	ldr	r3, [r3, #0]
   3fe98:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   3fe9a:	05a2      	lsls	r2, r4, #22
   3fe9c:	d508      	bpl.n	3feb0 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   3fe9e:	4b10      	ldr	r3, [pc, #64]	; (3fee0 <ev_usbevent_handler+0x6c>)
   3fea0:	2200      	movs	r2, #0
   3fea2:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   3fea4:	2303      	movs	r3, #3
   3fea6:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   3fea8:	4b0e      	ldr	r3, [pc, #56]	; (3fee4 <ev_usbevent_handler+0x70>)
   3feaa:	a801      	add	r0, sp, #4
   3feac:	681b      	ldr	r3, [r3, #0]
   3feae:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   3feb0:	0563      	lsls	r3, r4, #21
   3feb2:	d510      	bpl.n	3fed6 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   3feb4:	4b0a      	ldr	r3, [pc, #40]	; (3fee0 <ev_usbevent_handler+0x6c>)
   3feb6:	781a      	ldrb	r2, [r3, #0]
   3feb8:	b16a      	cbz	r2, 3fed6 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   3feba:	2200      	movs	r2, #0
   3febc:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   3febe:	4b07      	ldr	r3, [pc, #28]	; (3fedc <ev_usbevent_handler+0x68>)
   3fec0:	2201      	movs	r2, #1
   3fec2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   3fec6:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   3fec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   3feca:	2304      	movs	r3, #4
   3fecc:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   3fece:	4b05      	ldr	r3, [pc, #20]	; (3fee4 <ev_usbevent_handler+0x70>)
   3fed0:	a801      	add	r0, sp, #4
   3fed2:	681b      	ldr	r3, [r3, #0]
   3fed4:	4798      	blx	r3
        }
    }
}
   3fed6:	b002      	add	sp, #8
   3fed8:	bd10      	pop	{r4, pc}
   3feda:	bf00      	nop
   3fedc:	40027000 	.word	0x40027000
   3fee0:	20003c7c 	.word	0x20003c7c
   3fee4:	2000397c 	.word	0x2000397c

0003fee8 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   3fee8:	f04f 0320 	mov.w	r3, #32
   3feec:	f3ef 8011 	mrs	r0, BASEPRI
   3fef0:	f383 8812 	msr	BASEPRI_MAX, r3
   3fef4:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   3fef8:	4b0a      	ldr	r3, [pc, #40]	; (3ff24 <usbd_errata_187_211_begin+0x3c>)
   3fefa:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   3fefe:	2203      	movs	r2, #3
   3ff00:	b961      	cbnz	r1, 3ff1c <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3ff02:	f249 3175 	movw	r1, #37749	; 0x9375
   3ff06:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   3ff0a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3ff0e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   3ff12:	f380 8811 	msr	BASEPRI, r0
   3ff16:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   3ff1a:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   3ff1c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   3ff20:	e7f7      	b.n	3ff12 <usbd_errata_187_211_begin+0x2a>
   3ff22:	bf00      	nop
   3ff24:	4006e000 	.word	0x4006e000

0003ff28 <usbd_errata_187_211_end>:
	__asm__ volatile(
   3ff28:	f04f 0320 	mov.w	r3, #32
   3ff2c:	f3ef 8011 	mrs	r0, BASEPRI
   3ff30:	f383 8812 	msr	BASEPRI_MAX, r3
   3ff34:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   3ff38:	4b0a      	ldr	r3, [pc, #40]	; (3ff64 <usbd_errata_187_211_end+0x3c>)
   3ff3a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   3ff3e:	b961      	cbnz	r1, 3ff5a <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3ff40:	f249 3275 	movw	r2, #37749	; 0x9375
   3ff44:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   3ff48:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   3ff4c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   3ff50:	f380 8811 	msr	BASEPRI, r0
   3ff54:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   3ff58:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   3ff5a:	2200      	movs	r2, #0
   3ff5c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   3ff60:	e7f6      	b.n	3ff50 <usbd_errata_187_211_end+0x28>
   3ff62:	bf00      	nop
   3ff64:	4006e000 	.word	0x4006e000

0003ff68 <nrfx_usbd_feeder_flash>:
{
   3ff68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ff6a:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   3ff6c:	4f0b      	ldr	r7, [pc, #44]	; (3ff9c <nrfx_usbd_feeder_flash+0x34>)
{
   3ff6e:	460c      	mov	r4, r1
   3ff70:	429a      	cmp	r2, r3
   3ff72:	bf28      	it	cs
   3ff74:	461a      	movcs	r2, r3
   3ff76:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   3ff78:	6809      	ldr	r1, [r1, #0]
   3ff7a:	4638      	mov	r0, r7
   3ff7c:	4615      	mov	r5, r2
   3ff7e:	f004 ff40 	bl	44e02 <memcpy>
    p_transfer->size -= tx_size;
   3ff82:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   3ff84:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
   3ff86:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   3ff88:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   3ff8c:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
   3ff8e:	6060      	str	r0, [r4, #4]
}
   3ff90:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   3ff92:	6023      	str	r3, [r4, #0]
}
   3ff94:	bf18      	it	ne
   3ff96:	2001      	movne	r0, #1
   3ff98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3ff9a:	bf00      	nop
   3ff9c:	20003980 	.word	0x20003980

0003ffa0 <nrfx_usbd_feeder_flash_zlp>:
    if (tx_size > ep_size)
   3ffa0:	684b      	ldr	r3, [r1, #4]
   3ffa2:	429a      	cmp	r2, r3
   3ffa4:	bf28      	it	cs
   3ffa6:	461a      	movcs	r2, r3
{
   3ffa8:	b570      	push	{r4, r5, r6, lr}
   3ffaa:	4606      	mov	r6, r0
   3ffac:	460d      	mov	r5, r1
   3ffae:	4614      	mov	r4, r2
    if (tx_size != 0)
   3ffb0:	b182      	cbz	r2, 3ffd4 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   3ffb2:	6809      	ldr	r1, [r1, #0]
   3ffb4:	4808      	ldr	r0, [pc, #32]	; (3ffd8 <nrfx_usbd_feeder_flash_zlp+0x38>)
   3ffb6:	f004 ff24 	bl	44e02 <memcpy>
        p_next->p_data.tx = p_buffer;
   3ffba:	4b07      	ldr	r3, [pc, #28]	; (3ffd8 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
   3ffbc:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
   3ffc0:	686b      	ldr	r3, [r5, #4]
   3ffc2:	1b1b      	subs	r3, r3, r4
   3ffc4:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   3ffc6:	682b      	ldr	r3, [r5, #0]
}
   3ffc8:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   3ffca:	4423      	add	r3, r4
   3ffcc:	602b      	str	r3, [r5, #0]
}
   3ffce:	bf18      	it	ne
   3ffd0:	2001      	movne	r0, #1
   3ffd2:	bd70      	pop	{r4, r5, r6, pc}
   3ffd4:	4613      	mov	r3, r2
   3ffd6:	e7f1      	b.n	3ffbc <nrfx_usbd_feeder_flash_zlp+0x1c>
   3ffd8:	20003980 	.word	0x20003980

0003ffdc <ev_sof_handler>:
{
   3ffdc:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   3ffde:	2300      	movs	r3, #0
   3ffe0:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   3ffe4:	4b0b      	ldr	r3, [pc, #44]	; (40014 <ev_sof_handler+0x38>)
   3ffe6:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   3ffea:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   3ffee:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   3fff2:	4a09      	ldr	r2, [pc, #36]	; (40018 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   3fff4:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   3fff6:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   3fff8:	bf0c      	ite	eq
   3fffa:	f44f 7180 	moveq.w	r1, #256	; 0x100
   3fffe:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
   40002:	430b      	orrs	r3, r1
   40004:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   40006:	4b05      	ldr	r3, [pc, #20]	; (4001c <ev_sof_handler+0x40>)
   40008:	a801      	add	r0, sp, #4
   4000a:	681b      	ldr	r3, [r3, #0]
   4000c:	4798      	blx	r3
}
   4000e:	b003      	add	sp, #12
   40010:	f85d fb04 	ldr.w	pc, [sp], #4
   40014:	40027000 	.word	0x40027000
   40018:	20003858 	.word	0x20003858
   4001c:	2000397c 	.word	0x2000397c

00040020 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   40020:	4b06      	ldr	r3, [pc, #24]	; (4003c <atomic_and.constprop.0.isra.0+0x1c>)
   40022:	f3bf 8f5b 	dmb	ish
   40026:	e853 1f00 	ldrex	r1, [r3]
   4002a:	4001      	ands	r1, r0
   4002c:	e843 1200 	strex	r2, r1, [r3]
   40030:	2a00      	cmp	r2, #0
   40032:	d1f8      	bne.n	40026 <atomic_and.constprop.0.isra.0+0x6>
   40034:	f3bf 8f5b 	dmb	ish
}
   40038:	4770      	bx	lr
   4003a:	bf00      	nop
   4003c:	200037e8 	.word	0x200037e8

00040040 <nrf_usbd_ep0in_dma_handler>:
{
   40040:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   40042:	f7ff fef1 	bl	3fe28 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   40046:	4b08      	ldr	r3, [pc, #32]	; (40068 <nrf_usbd_ep0in_dma_handler+0x28>)
   40048:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   4004c:	2a03      	cmp	r2, #3
   4004e:	d105      	bne.n	4005c <nrf_usbd_ep0in_dma_handler+0x1c>
}
   40050:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   40054:	f06f 0001 	mvn.w	r0, #1
   40058:	f7ff bfe2 	b.w	40020 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   4005c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   40060:	2b00      	cmp	r3, #0
   40062:	d0f5      	beq.n	40050 <nrf_usbd_ep0in_dma_handler+0x10>
}
   40064:	bd08      	pop	{r3, pc}
   40066:	bf00      	nop
   40068:	2000385c 	.word	0x2000385c

0004006c <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   4006c:	2201      	movs	r2, #1
{
   4006e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   40070:	fa02 f501 	lsl.w	r5, r2, r1
   40074:	491c      	ldr	r1, [pc, #112]	; (400e8 <usbd_ep_data_handler+0x7c>)
   40076:	4e1d      	ldr	r6, [pc, #116]	; (400ec <usbd_ep_data_handler+0x80>)
   40078:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   4007a:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   4007e:	ea43 0305 	orr.w	r3, r3, r5
{
   40082:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   40084:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   40086:	d024      	beq.n	400d2 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   40088:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   4008c:	4b18      	ldr	r3, [pc, #96]	; (400f0 <usbd_ep_data_handler+0x84>)
   4008e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   40092:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   40096:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   4009a:	681a      	ldr	r2, [r3, #0]
    if (ret)
   4009c:	b132      	cbz	r2, 400ac <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   4009e:	2200      	movs	r2, #0
   400a0:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   400a2:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   400a4:	681b      	ldr	r3, [r3, #0]
   400a6:	d011      	beq.n	400cc <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   400a8:	f008 f94a 	bl	48340 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   400ac:	6833      	ldr	r3, [r6, #0]
   400ae:	402b      	ands	r3, r5
   400b0:	d10a      	bne.n	400c8 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   400b2:	2206      	movs	r2, #6
   400b4:	f88d 2004 	strb.w	r2, [sp, #4]
   400b8:	f88d 4006 	strb.w	r4, [sp, #6]
   400bc:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   400c0:	4b0c      	ldr	r3, [pc, #48]	; (400f4 <usbd_ep_data_handler+0x88>)
   400c2:	a801      	add	r0, sp, #4
   400c4:	681b      	ldr	r3, [r3, #0]
   400c6:	4798      	blx	r3
}
   400c8:	b002      	add	sp, #8
   400ca:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   400cc:	f7ff ffb8 	bl	40040 <nrf_usbd_ep0in_dma_handler>
   400d0:	e7ec      	b.n	400ac <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   400d2:	6833      	ldr	r3, [r6, #0]
   400d4:	421d      	tst	r5, r3
   400d6:	d1f7      	bne.n	400c8 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   400d8:	2306      	movs	r3, #6
   400da:	f88d 3004 	strb.w	r3, [sp, #4]
   400de:	f88d 0006 	strb.w	r0, [sp, #6]
   400e2:	f88d 2007 	strb.w	r2, [sp, #7]
   400e6:	e7eb      	b.n	400c0 <usbd_ep_data_handler+0x54>
   400e8:	20003858 	.word	0x20003858
   400ec:	200037e8 	.word	0x200037e8
   400f0:	0004af10 	.word	0x0004af10
   400f4:	2000397c 	.word	0x2000397c

000400f8 <ev_setup_data_handler>:
{
   400f8:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   400fa:	4b05      	ldr	r3, [pc, #20]	; (40110 <ev_setup_data_handler+0x18>)
   400fc:	781a      	ldrb	r2, [r3, #0]
   400fe:	4610      	mov	r0, r2
   40100:	f008 f915 	bl	4832e <ep2bit>
}
   40104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   40108:	4601      	mov	r1, r0
   4010a:	4610      	mov	r0, r2
   4010c:	f7ff bfae 	b.w	4006c <usbd_ep_data_handler>
   40110:	20003c7f 	.word	0x20003c7f

00040114 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   40114:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   40116:	f7ff fe87 	bl	3fe28 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   4011a:	4b0c      	ldr	r3, [pc, #48]	; (4014c <ev_dma_epout8_handler+0x38>)
   4011c:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   40120:	2a03      	cmp	r2, #3
   40122:	d010      	beq.n	40146 <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   40124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   40128:	b96b      	cbnz	r3, 40146 <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4012a:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   4012e:	f7ff ff77 	bl	40020 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40132:	2306      	movs	r3, #6
   40134:	f88d 3004 	strb.w	r3, [sp, #4]
   40138:	2308      	movs	r3, #8
   4013a:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   4013e:	4b04      	ldr	r3, [pc, #16]	; (40150 <ev_dma_epout8_handler+0x3c>)
   40140:	a801      	add	r0, sp, #4
   40142:	681b      	ldr	r3, [r3, #0]
   40144:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   40146:	b003      	add	sp, #12
   40148:	f85d fb04 	ldr.w	pc, [sp], #4
   4014c:	2000385c 	.word	0x2000385c
   40150:	2000397c 	.word	0x2000397c

00040154 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   40154:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   40156:	f7ff fe67 	bl	3fe28 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   4015a:	4b10      	ldr	r3, [pc, #64]	; (4019c <ev_dma_epin8_handler+0x48>)
   4015c:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   40160:	2a03      	cmp	r2, #3
   40162:	d106      	bne.n	40172 <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   40164:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   40168:	b003      	add	sp, #12
   4016a:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4016e:	f7ff bf57 	b.w	40020 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   40172:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   40176:	b96b      	cbnz	r3, 40194 <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   40178:	f46f 7080 	mvn.w	r0, #256	; 0x100
   4017c:	f7ff ff50 	bl	40020 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40180:	2306      	movs	r3, #6
   40182:	f88d 3004 	strb.w	r3, [sp, #4]
   40186:	2388      	movs	r3, #136	; 0x88
   40188:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   4018c:	4b04      	ldr	r3, [pc, #16]	; (401a0 <ev_dma_epin8_handler+0x4c>)
   4018e:	a801      	add	r0, sp, #4
   40190:	681b      	ldr	r3, [r3, #0]
   40192:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   40194:	b003      	add	sp, #12
   40196:	f85d fb04 	ldr.w	pc, [sp], #4
   4019a:	bf00      	nop
   4019c:	2000385c 	.word	0x2000385c
   401a0:	2000397c 	.word	0x2000397c

000401a4 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   401a4:	4a02      	ldr	r2, [pc, #8]	; (401b0 <nrfx_usbd_uninit+0xc>)
   401a6:	2300      	movs	r3, #0
   401a8:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   401aa:	4a02      	ldr	r2, [pc, #8]	; (401b4 <nrfx_usbd_uninit+0x10>)
   401ac:	7013      	strb	r3, [r2, #0]
    return;
}
   401ae:	4770      	bx	lr
   401b0:	2000397c 	.word	0x2000397c
   401b4:	20003c7e 	.word	0x20003c7e

000401b8 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   401b8:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   401ba:	4b48      	ldr	r3, [pc, #288]	; (402dc <nrfx_usbd_enable+0x124>)
   401bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   401c0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   401c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   401c8:	f7ff fe0c 	bl	3fde4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   401cc:	b108      	cbz	r0, 401d2 <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   401ce:	f7ff fe8b 	bl	3fee8 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   401d2:	f008 f866 	bl	482a2 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   401d6:	b1c8      	cbz	r0, 4020c <nrfx_usbd_enable+0x54>
	__asm__ volatile(
   401d8:	f04f 0320 	mov.w	r3, #32
   401dc:	f3ef 8011 	mrs	r0, BASEPRI
   401e0:	f383 8812 	msr	BASEPRI_MAX, r3
   401e4:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   401e8:	4b3d      	ldr	r3, [pc, #244]	; (402e0 <nrfx_usbd_enable+0x128>)
   401ea:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   401ee:	22c0      	movs	r2, #192	; 0xc0
   401f0:	2900      	cmp	r1, #0
   401f2:	d16a      	bne.n	402ca <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   401f4:	f249 3175 	movw	r1, #37749	; 0x9375
   401f8:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   401fc:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   40200:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   40204:	f380 8811 	msr	BASEPRI, r0
   40208:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   4020c:	4b33      	ldr	r3, [pc, #204]	; (402dc <nrfx_usbd_enable+0x124>)
   4020e:	2201      	movs	r2, #1
   40210:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   40214:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   40218:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   4021c:	0512      	lsls	r2, r2, #20
   4021e:	d5fb      	bpl.n	40218 <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
   40220:	f44f 6200 	mov.w	r2, #2048	; 0x800
   40224:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   40228:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   4022c:	f008 f839 	bl	482a2 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   40230:	b1c0      	cbz	r0, 40264 <nrfx_usbd_enable+0xac>
	__asm__ volatile(
   40232:	f04f 0320 	mov.w	r3, #32
   40236:	f3ef 8011 	mrs	r0, BASEPRI
   4023a:	f383 8812 	msr	BASEPRI_MAX, r3
   4023e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   40242:	4b27      	ldr	r3, [pc, #156]	; (402e0 <nrfx_usbd_enable+0x128>)
   40244:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   40248:	2900      	cmp	r1, #0
   4024a:	d141      	bne.n	402d0 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   4024c:	f249 3275 	movw	r2, #37749	; 0x9375
   40250:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   40254:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   40258:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   4025c:	f380 8811 	msr	BASEPRI, r0
   40260:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   40264:	f7ff fdbe 	bl	3fde4 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   40268:	b130      	cbz	r0, 40278 <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
   4026a:	f7ff fe5d 	bl	3ff28 <usbd_errata_187_211_end>
   4026e:	f7ff fdb9 	bl	3fde4 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   40272:	b108      	cbz	r0, 40278 <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
   40274:	f7ff fe38 	bl	3fee8 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   40278:	f008 f813 	bl	482a2 <nrf52_errata_166>
   4027c:	4b17      	ldr	r3, [pc, #92]	; (402dc <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
   4027e:	b150      	cbz	r0, 40296 <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   40280:	f240 72e3 	movw	r2, #2019	; 0x7e3
   40284:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   40288:	2240      	movs	r2, #64	; 0x40
   4028a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   4028e:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   40292:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   40296:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   40298:	2280      	movs	r2, #128	; 0x80
   4029a:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   4029e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   402a2:	4b10      	ldr	r3, [pc, #64]	; (402e4 <nrfx_usbd_enable+0x12c>)
   402a4:	f240 12ff 	movw	r2, #511	; 0x1ff
   402a8:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   402aa:	4b0f      	ldr	r3, [pc, #60]	; (402e8 <nrfx_usbd_enable+0x130>)
   402ac:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   402ae:	f7ff fdbb 	bl	3fe28 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   402b2:	4b0e      	ldr	r3, [pc, #56]	; (402ec <nrfx_usbd_enable+0x134>)
   402b4:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   402b6:	4b0e      	ldr	r3, [pc, #56]	; (402f0 <nrfx_usbd_enable+0x138>)
   402b8:	2202      	movs	r2, #2
   402ba:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   402bc:	f7ff fd92 	bl	3fde4 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   402c0:	b150      	cbz	r0, 402d8 <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   402c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   402c6:	f7ff be2f 	b.w	3ff28 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   402ca:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   402ce:	e799      	b.n	40204 <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   402d0:	2200      	movs	r2, #0
   402d2:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   402d6:	e7c1      	b.n	4025c <nrfx_usbd_enable+0xa4>
}
   402d8:	bd08      	pop	{r3, pc}
   402da:	bf00      	nop
   402dc:	40027000 	.word	0x40027000
   402e0:	4006e000 	.word	0x4006e000
   402e4:	20003858 	.word	0x20003858
   402e8:	200037e8 	.word	0x200037e8
   402ec:	20003c7f 	.word	0x20003c7f
   402f0:	20003c7e 	.word	0x20003c7e

000402f4 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   402f4:	4b0a      	ldr	r3, [pc, #40]	; (40320 <nrfx_usbd_start+0x2c>)
   402f6:	2200      	movs	r2, #0
{
   402f8:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   402fa:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   402fc:	4a09      	ldr	r2, [pc, #36]	; (40324 <nrfx_usbd_start+0x30>)
   402fe:	4b0a      	ldr	r3, [pc, #40]	; (40328 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   40300:	4c0a      	ldr	r4, [pc, #40]	; (4032c <nrfx_usbd_start+0x38>)
   40302:	2800      	cmp	r0, #0
   40304:	bf18      	it	ne
   40306:	4613      	movne	r3, r2
   40308:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   4030c:	2027      	movs	r0, #39	; 0x27
   4030e:	f7e9 fe99 	bl	2a044 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   40312:	2301      	movs	r3, #1
   40314:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   40318:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   4031c:	bd10      	pop	{r4, pc}
   4031e:	bf00      	nop
   40320:	20003c7c 	.word	0x20003c7c
   40324:	01e01407 	.word	0x01e01407
   40328:	01c01407 	.word	0x01c01407
   4032c:	40027000 	.word	0x40027000

00040330 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   40330:	4b03      	ldr	r3, [pc, #12]	; (40340 <nrfx_usbd_is_enabled+0x10>)
   40332:	7818      	ldrb	r0, [r3, #0]
}
   40334:	2801      	cmp	r0, #1
   40336:	bf94      	ite	ls
   40338:	2000      	movls	r0, #0
   4033a:	2001      	movhi	r0, #1
   4033c:	4770      	bx	lr
   4033e:	bf00      	nop
   40340:	20003c7e 	.word	0x20003c7e

00040344 <nrfx_usbd_init>:
{
   40344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   40348:	4b1d      	ldr	r3, [pc, #116]	; (403c0 <nrfx_usbd_init+0x7c>)
   4034a:	781c      	ldrb	r4, [r3, #0]
   4034c:	2c00      	cmp	r4, #0
   4034e:	d135      	bne.n	403bc <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
   40350:	4a1c      	ldr	r2, [pc, #112]	; (403c4 <nrfx_usbd_init+0x80>)
   40352:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   40354:	2201      	movs	r2, #1
   40356:	701a      	strb	r2, [r3, #0]
   40358:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   4035a:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   4035e:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   40360:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   40364:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   40368:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   4036a:	bf14      	ite	ne
   4036c:	4641      	movne	r1, r8
   4036e:	2140      	moveq	r1, #64	; 0x40
   40370:	4630      	mov	r0, r6
   40372:	f008 f815 	bl	483a0 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   40376:	4630      	mov	r0, r6
   40378:	f7ff fd48 	bl	3fe0c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   4037c:	3501      	adds	r5, #1
   4037e:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
   40380:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
   40382:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
   40384:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   40386:	d1eb      	bne.n	40360 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   40388:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
   4038a:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   4038c:	f240 16ff 	movw	r6, #511	; 0x1ff
   40390:	4620      	mov	r0, r4
   40392:	f008 f805 	bl	483a0 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   40396:	4620      	mov	r0, r4
   40398:	f7ff fd38 	bl	3fe0c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   4039c:	3401      	adds	r4, #1
   4039e:	b2e4      	uxtb	r4, r4
   403a0:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   403a2:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   403a4:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   403a6:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   403a8:	d102      	bne.n	403b0 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
   403aa:	4807      	ldr	r0, [pc, #28]	; (403c8 <nrfx_usbd_init+0x84>)
}
   403ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   403b0:	f014 0f08 	tst.w	r4, #8
   403b4:	bf14      	ite	ne
   403b6:	4631      	movne	r1, r6
   403b8:	2140      	moveq	r1, #64	; 0x40
   403ba:	e7e9      	b.n	40390 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
   403bc:	4803      	ldr	r0, [pc, #12]	; (403cc <nrfx_usbd_init+0x88>)
   403be:	e7f5      	b.n	403ac <nrfx_usbd_init+0x68>
   403c0:	20003c7e 	.word	0x20003c7e
   403c4:	2000397c 	.word	0x2000397c
   403c8:	0bad0000 	.word	0x0bad0000
   403cc:	0bad0005 	.word	0x0bad0005

000403d0 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   403d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   403d4:	4605      	mov	r5, r0
	__asm__ volatile(
   403d6:	f04f 0320 	mov.w	r3, #32
   403da:	f3ef 8811 	mrs	r8, BASEPRI
   403de:	f383 8812 	msr	BASEPRI_MAX, r3
   403e2:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   403e6:	f010 040f 	ands.w	r4, r0, #15
   403ea:	d103      	bne.n	403f4 <nrfx_usbd_ep_transfer+0x24>
   403ec:	4b27      	ldr	r3, [pc, #156]	; (4048c <nrfx_usbd_ep_transfer+0xbc>)
   403ee:	781b      	ldrb	r3, [r3, #0]
   403f0:	4283      	cmp	r3, r0
   403f2:	d146      	bne.n	40482 <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   403f4:	4b26      	ldr	r3, [pc, #152]	; (40490 <nrfx_usbd_ep_transfer+0xc0>)
   403f6:	4e27      	ldr	r6, [pc, #156]	; (40494 <nrfx_usbd_ep_transfer+0xc4>)
   403f8:	681a      	ldr	r2, [r3, #0]
   403fa:	6837      	ldr	r7, [r6, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   403fc:	4628      	mov	r0, r5
   403fe:	f007 ff96 	bl	4832e <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   40402:	43d2      	mvns	r2, r2
   40404:	b292      	uxth	r2, r2
   40406:	f04f 0901 	mov.w	r9, #1
   4040a:	433a      	orrs	r2, r7
   4040c:	fa09 f900 	lsl.w	r9, r9, r0
   40410:	ea12 0f09 	tst.w	r2, r9
   40414:	d137      	bne.n	40486 <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   40416:	4628      	mov	r0, r5
   40418:	f7ff fcf8 	bl	3fe0c <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   4041c:	220c      	movs	r2, #12
   4041e:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
   40420:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   40422:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
   40424:	d529      	bpl.n	4047a <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   40426:	4a1c      	ldr	r2, [pc, #112]	; (40498 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   40428:	6808      	ldr	r0, [r1, #0]
   4042a:	4414      	add	r4, r2
   4042c:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   40430:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   40432:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   40436:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   4043a:	d119      	bne.n	40470 <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   4043c:	b9b2      	cbnz	r2, 4046c <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   4043e:	4a17      	ldr	r2, [pc, #92]	; (4049c <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   40440:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
   40442:	c907      	ldmia	r1, {r0, r1, r2}
   40444:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
   40448:	2200      	movs	r2, #0
   4044a:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   4044c:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
   4044e:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   40450:	4b13      	ldr	r3, [pc, #76]	; (404a0 <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   40452:	4814      	ldr	r0, [pc, #80]	; (404a4 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   40454:	ea49 0707 	orr.w	r7, r9, r7
   40458:	2280      	movs	r2, #128	; 0x80
   4045a:	6037      	str	r7, [r6, #0]
   4045c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   40460:	f388 8811 	msr	BASEPRI, r8
   40464:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   40468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   4046c:	4a0e      	ldr	r2, [pc, #56]	; (404a8 <nrfx_usbd_ep_transfer+0xd8>)
   4046e:	e7e7      	b.n	40440 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   40470:	b90a      	cbnz	r2, 40476 <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   40472:	4a0e      	ldr	r2, [pc, #56]	; (404ac <nrfx_usbd_ep_transfer+0xdc>)
   40474:	e7e4      	b.n	40440 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   40476:	4a0e      	ldr	r2, [pc, #56]	; (404b0 <nrfx_usbd_ep_transfer+0xe0>)
   40478:	e7e2      	b.n	40440 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   4047a:	4a0e      	ldr	r2, [pc, #56]	; (404b4 <nrfx_usbd_ep_transfer+0xe4>)
   4047c:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   4047e:	4a0e      	ldr	r2, [pc, #56]	; (404b8 <nrfx_usbd_ep_transfer+0xe8>)
   40480:	e7de      	b.n	40440 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
   40482:	480e      	ldr	r0, [pc, #56]	; (404bc <nrfx_usbd_ep_transfer+0xec>)
   40484:	e7ec      	b.n	40460 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
   40486:	480e      	ldr	r0, [pc, #56]	; (404c0 <nrfx_usbd_ep_transfer+0xf0>)
   40488:	e7ea      	b.n	40460 <nrfx_usbd_ep_transfer+0x90>
   4048a:	bf00      	nop
   4048c:	20003c7f 	.word	0x20003c7f
   40490:	20003858 	.word	0x20003858
   40494:	200037e8 	.word	0x200037e8
   40498:	200037ec 	.word	0x200037ec
   4049c:	000482e3 	.word	0x000482e3
   404a0:	e000e100 	.word	0xe000e100
   404a4:	0bad0000 	.word	0x0bad0000
   404a8:	00048305 	.word	0x00048305
   404ac:	0003ff69 	.word	0x0003ff69
   404b0:	0003ffa1 	.word	0x0003ffa1
   404b4:	2000377c 	.word	0x2000377c
   404b8:	000482b5 	.word	0x000482b5
   404bc:	0bad000a 	.word	0x0bad000a
   404c0:	0bad000b 	.word	0x0bad000b

000404c4 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   404c4:	f010 0f08 	tst.w	r0, #8
   404c8:	4b07      	ldr	r3, [pc, #28]	; (404e8 <nrfx_usbd_epout_size_get+0x24>)
   404ca:	d006      	beq.n	404da <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   404cc:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   404d0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   404d4:	bf18      	it	ne
   404d6:	2000      	movne	r0, #0
   404d8:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   404da:	f000 000f 	and.w	r0, r0, #15
   404de:	f500 7094 	add.w	r0, r0, #296	; 0x128
   404e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   404e6:	4770      	bx	lr
   404e8:	40027000 	.word	0x40027000

000404ec <usbd_dmareq_process>:
{
   404ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   404f0:	f8df 815c 	ldr.w	r8, [pc, #348]	; 40650 <usbd_dmareq_process+0x164>
   404f4:	f898 3000 	ldrb.w	r3, [r8]
{
   404f8:	b085      	sub	sp, #20
    if (!m_dma_pending)
   404fa:	2b00      	cmp	r3, #0
   404fc:	d16b      	bne.n	405d6 <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   404fe:	f8df 9154 	ldr.w	r9, [pc, #340]	; 40654 <usbd_dmareq_process+0x168>
   40502:	4e55      	ldr	r6, [pc, #340]	; (40658 <usbd_dmareq_process+0x16c>)
   40504:	f8d9 1000 	ldr.w	r1, [r9]
   40508:	6833      	ldr	r3, [r6, #0]
   4050a:	4019      	ands	r1, r3
   4050c:	d063      	beq.n	405d6 <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   4050e:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
   40512:	bf14      	ite	ne
   40514:	fa93 f1a3 	rbitne	r1, r3
   40518:	fa91 f1a1 	rbiteq	r1, r1
   4051c:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   40520:	290f      	cmp	r1, #15
   40522:	bf86      	itte	hi
   40524:	f1a1 0410 	subhi.w	r4, r1, #16
   40528:	b2e4      	uxtbhi	r4, r4
   4052a:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
   4052e:	4620      	mov	r0, r4
   40530:	f7ff fc6c 	bl	3fe0c <ep_state_access>
            if (NRF_USBD_EPIN_CHECK(ep))
   40534:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   40538:	f04f 0b01 	mov.w	fp, #1
   4053c:	fa0b fb01 	lsl.w	fp, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   40540:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
   40544:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   40546:	ea6f 0b0b 	mvn.w	fp, fp
            if (NRF_USBD_EPIN_CHECK(ep))
   4054a:	da47      	bge.n	405dc <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
   4054c:	6803      	ldr	r3, [r0, #0]
   4054e:	8982      	ldrh	r2, [r0, #12]
   40550:	6841      	ldr	r1, [r0, #4]
   40552:	a802      	add	r0, sp, #8
   40554:	4798      	blx	r3
                if (!continue_transfer)
   40556:	b900      	cbnz	r0, 4055a <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
   40558:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   4055a:	f007 fea2 	bl	482a2 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   4055e:	b118      	cbz	r0, 40568 <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   40560:	4b3e      	ldr	r3, [pc, #248]	; (4065c <usbd_dmareq_process+0x170>)
   40562:	2282      	movs	r2, #130	; 0x82
   40564:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   40568:	2301      	movs	r3, #1
   4056a:	f888 3000 	strb.w	r3, [r8]
            m_ep_ready &= ~(1U << pos);
   4056e:	6833      	ldr	r3, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   40570:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   40572:	9902      	ldr	r1, [sp, #8]
            m_ep_ready &= ~(1U << pos);
   40574:	ea03 030b 	and.w	r3, r3, fp
   40578:	6033      	str	r3, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   4057a:	68ab      	ldr	r3, [r5, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
   4057c:	f1ba 0f00 	cmp.w	sl, #0
   40580:	4413      	add	r3, r2
   40582:	60ab      	str	r3, [r5, #8]
   40584:	f004 0008 	and.w	r0, r4, #8
   40588:	4b34      	ldr	r3, [pc, #208]	; (4065c <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   4058a:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   4058e:	da4f      	bge.n	40630 <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
   40590:	2800      	cmp	r0, #0
   40592:	d045      	beq.n	40620 <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
   40594:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   40598:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   4059c:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   4059e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   405a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   405a6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   405aa:	2201      	movs	r2, #1
   405ac:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   405ae:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   405b0:	4a2b      	ldr	r2, [pc, #172]	; (40660 <usbd_dmareq_process+0x174>)
   405b2:	4b2c      	ldr	r3, [pc, #176]	; (40664 <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   405b4:	4929      	ldr	r1, [pc, #164]	; (4065c <usbd_dmareq_process+0x170>)
   405b6:	ea13 032a 	ands.w	r3, r3, sl, asr #32
   405ba:	bf38      	it	cc
   405bc:	4613      	movcc	r3, r2
   405be:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   405c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   405c6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   405ca:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   405cc:	b91a      	cbnz	r2, 405d6 <usbd_dmareq_process+0xea>
   405ce:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   405d2:	2a00      	cmp	r2, #0
   405d4:	d0f9      	beq.n	405ca <usbd_dmareq_process+0xde>
}
   405d6:	b005      	add	sp, #20
   405d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   405dc:	4620      	mov	r0, r4
   405de:	f7ff ff71 	bl	404c4 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   405e2:	89aa      	ldrh	r2, [r5, #12]
   405e4:	6869      	ldr	r1, [r5, #4]
   405e6:	f8d5 c000 	ldr.w	ip, [r5]
   405ea:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   405ec:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
   405ee:	a802      	add	r0, sp, #8
   405f0:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
   405f2:	9a02      	ldr	r2, [sp, #8]
   405f4:	2a00      	cmp	r2, #0
   405f6:	d0ae      	beq.n	40556 <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
   405f8:	9a03      	ldr	r2, [sp, #12]
   405fa:	4297      	cmp	r7, r2
   405fc:	d9ab      	bls.n	40556 <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   405fe:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   40600:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   40602:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   40604:	f7ff fd0c 	bl	40020 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   40608:	2306      	movs	r3, #6
   4060a:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   4060e:	4b16      	ldr	r3, [pc, #88]	; (40668 <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   40610:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   40614:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   40616:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   4061a:	a801      	add	r0, sp, #4
   4061c:	4798      	blx	r3
                    continue;
   4061e:	e771      	b.n	40504 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
   40620:	2014      	movs	r0, #20
   40622:	fb00 3304 	mla	r3, r0, r4, r3
   40626:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   4062a:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   4062e:	e7b5      	b.n	4059c <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
   40630:	b128      	cbz	r0, 4063e <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
   40632:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   40636:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   4063a:	2328      	movs	r3, #40	; 0x28
   4063c:	e7af      	b.n	4059e <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
   4063e:	2014      	movs	r0, #20
   40640:	fb00 3304 	mla	r3, r0, r4, r3
   40644:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   40648:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   4064c:	e7f5      	b.n	4063a <usbd_dmareq_process+0x14e>
   4064e:	bf00      	nop
   40650:	20003c7d 	.word	0x20003c7d
   40654:	200037e8 	.word	0x200037e8
   40658:	20003858 	.word	0x20003858
   4065c:	40027000 	.word	0x40027000
   40660:	0004af22 	.word	0x0004af22
   40664:	0004af10 	.word	0x0004af10
   40668:	2000397c 	.word	0x2000397c

0004066c <ev_epdata_handler>:
{
   4066c:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   4066e:	4b0f      	ldr	r3, [pc, #60]	; (406ac <ev_epdata_handler+0x40>)
   40670:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   40674:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   40678:	2501      	movs	r5, #1
    while (dataepstatus)
   4067a:	b91c      	cbnz	r4, 40684 <ev_epdata_handler+0x18>
}
   4067c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   40680:	f7ff bf34 	b.w	404ec <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   40684:	fa94 f3a4 	rbit	r3, r4
   40688:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   4068c:	2b0f      	cmp	r3, #15
   4068e:	bfc8      	it	gt
   40690:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   40694:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   40696:	bfd4      	ite	le
   40698:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   4069c:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   4069e:	fa05 f303 	lsl.w	r3, r5, r3
   406a2:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   406a6:	f7ff fce1 	bl	4006c <usbd_ep_data_handler>
   406aa:	e7e6      	b.n	4067a <ev_epdata_handler+0xe>
   406ac:	40027000 	.word	0x40027000

000406b0 <nrf_usbd_epout_dma_handler>:
{
   406b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   406b2:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   406b4:	f7ff fbb8 	bl	3fe28 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   406b8:	4620      	mov	r0, r4
   406ba:	f7ff fba7 	bl	3fe0c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   406be:	7b83      	ldrb	r3, [r0, #14]
   406c0:	2b03      	cmp	r3, #3
   406c2:	d10d      	bne.n	406e0 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   406c4:	4620      	mov	r0, r4
   406c6:	f007 fe32 	bl	4832e <ep2bit>
   406ca:	2301      	movs	r3, #1
   406cc:	fa03 f000 	lsl.w	r0, r3, r0
   406d0:	43c0      	mvns	r0, r0
   406d2:	f7ff fca5 	bl	40020 <atomic_and.constprop.0.isra.0>
}
   406d6:	b003      	add	sp, #12
   406d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   406dc:	f7ff bf06 	b.w	404ec <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   406e0:	6805      	ldr	r5, [r0, #0]
   406e2:	2d00      	cmp	r5, #0
   406e4:	d1f7      	bne.n	406d6 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   406e6:	4620      	mov	r0, r4
   406e8:	f007 fe21 	bl	4832e <ep2bit>
   406ec:	2301      	movs	r3, #1
   406ee:	fa03 f000 	lsl.w	r0, r3, r0
   406f2:	43c0      	mvns	r0, r0
   406f4:	f7ff fc94 	bl	40020 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   406f8:	2306      	movs	r3, #6
   406fa:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   406fe:	4b04      	ldr	r3, [pc, #16]	; (40710 <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40700:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   40704:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   40706:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   4070a:	a801      	add	r0, sp, #4
   4070c:	4798      	blx	r3
   4070e:	e7e2      	b.n	406d6 <nrf_usbd_epout_dma_handler+0x26>
   40710:	2000397c 	.word	0x2000397c

00040714 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   40714:	4b02      	ldr	r3, [pc, #8]	; (40720 <nrfx_usbd_ep_stall+0xc>)
   40716:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   4071a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   4071e:	4770      	bx	lr
   40720:	40027000 	.word	0x40027000

00040724 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   40724:	0702      	lsls	r2, r0, #28
   40726:	d413      	bmi.n	40750 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   40728:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   4072c:	f010 0f80 	tst.w	r0, #128	; 0x80
   40730:	4a08      	ldr	r2, [pc, #32]	; (40754 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   40732:	bf0b      	itete	eq
   40734:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   40738:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   4073c:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   40740:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   40744:	bf08      	it	eq
   40746:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   40748:	1e43      	subs	r3, r0, #1
   4074a:	4258      	negs	r0, r3
   4074c:	4158      	adcs	r0, r3
   4074e:	4770      	bx	lr
        return false;
   40750:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   40752:	4770      	bx	lr
   40754:	40027000 	.word	0x40027000

00040758 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   40758:	4b04      	ldr	r3, [pc, #16]	; (4076c <nrfx_usbd_ep_dtoggle_clear+0x14>)
   4075a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   4075e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   40762:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   40766:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   4076a:	4770      	bx	lr
   4076c:	40027000 	.word	0x40027000

00040770 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   40770:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   40772:	2208      	movs	r2, #8
   40774:	2100      	movs	r1, #0
{
   40776:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   40778:	f004 fb4e 	bl	44e18 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   4077c:	4b0e      	ldr	r3, [pc, #56]	; (407b8 <nrfx_usbd_setup_get+0x48>)
   4077e:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   40782:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   40784:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   40788:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   4078a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   4078e:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   40792:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   40796:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   40798:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   4079c:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   407a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   407a4:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   407a6:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   407aa:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   407ae:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   407b2:	80e3      	strh	r3, [r4, #6]
}
   407b4:	bd10      	pop	{r4, pc}
   407b6:	bf00      	nop
   407b8:	40027000 	.word	0x40027000

000407bc <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   407bc:	4b02      	ldr	r3, [pc, #8]	; (407c8 <nrfx_usbd_setup_data_clear+0xc>)
   407be:	2201      	movs	r2, #1
   407c0:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   407c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   407c4:	4770      	bx	lr
   407c6:	bf00      	nop
   407c8:	40027000 	.word	0x40027000

000407cc <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   407cc:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   407ce:	f7ff fb2b 	bl	3fe28 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   407d2:	4b10      	ldr	r3, [pc, #64]	; (40814 <ev_dma_epout0_handler+0x48>)
   407d4:	7b9a      	ldrb	r2, [r3, #14]
   407d6:	2a03      	cmp	r2, #3
   407d8:	d106      	bne.n	407e8 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   407da:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   407de:	b002      	add	sp, #8
   407e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   407e4:	f7ff bc1c 	b.w	40020 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   407e8:	681c      	ldr	r4, [r3, #0]
   407ea:	b974      	cbnz	r4, 4080a <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   407ec:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   407f0:	f7ff fc16 	bl	40020 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   407f4:	2306      	movs	r3, #6
   407f6:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   407fa:	4b07      	ldr	r3, [pc, #28]	; (40818 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   407fc:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   40800:	681b      	ldr	r3, [r3, #0]
   40802:	a801      	add	r0, sp, #4
   40804:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   40806:	b002      	add	sp, #8
   40808:	bd10      	pop	{r4, pc}
   4080a:	b002      	add	sp, #8
   4080c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   40810:	f7ff bfd4 	b.w	407bc <nrfx_usbd_setup_data_clear>
   40814:	2000385c 	.word	0x2000385c
   40818:	2000397c 	.word	0x2000397c

0004081c <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   4081c:	4b02      	ldr	r3, [pc, #8]	; (40828 <nrfx_usbd_setup_clear+0xc>)
   4081e:	2201      	movs	r2, #1
   40820:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   40822:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   40824:	4770      	bx	lr
   40826:	bf00      	nop
   40828:	40027000 	.word	0x40027000

0004082c <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   4082c:	4b02      	ldr	r3, [pc, #8]	; (40838 <nrfx_usbd_setup_stall+0xc>)
   4082e:	2201      	movs	r2, #1
   40830:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   40832:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   40834:	4770      	bx	lr
   40836:	bf00      	nop
   40838:	40027000 	.word	0x40027000

0004083c <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   4083c:	4b01      	ldr	r3, [pc, #4]	; (40844 <nrfx_usbd_last_setup_dir_get+0x8>)
   4083e:	7818      	ldrb	r0, [r3, #0]
   40840:	4770      	bx	lr
   40842:	bf00      	nop
   40844:	20003c7f 	.word	0x20003c7f

00040848 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   40848:	b510      	push	{r4, lr}
   4084a:	4602      	mov	r2, r0
	__asm__ volatile(
   4084c:	f04f 0320 	mov.w	r3, #32
   40850:	f3ef 8411 	mrs	r4, BASEPRI
   40854:	f383 8812 	msr	BASEPRI_MAX, r3
   40858:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   4085c:	f007 fd67 	bl	4832e <ep2bit>
   40860:	490d      	ldr	r1, [pc, #52]	; (40898 <nrfx_usbd_transfer_out_drop+0x50>)
   40862:	2301      	movs	r3, #1
   40864:	fa03 f000 	lsl.w	r0, r3, r0
   40868:	680b      	ldr	r3, [r1, #0]
   4086a:	ea23 0300 	bic.w	r3, r3, r0
   4086e:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   40870:	f012 0108 	ands.w	r1, r2, #8
   40874:	d10a      	bne.n	4088c <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   40876:	f002 030f 	and.w	r3, r2, #15
   4087a:	009b      	lsls	r3, r3, #2
   4087c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   40880:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   40884:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   40888:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   4088c:	f384 8811 	msr	BASEPRI, r4
   40890:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   40894:	bd10      	pop	{r4, pc}
   40896:	bf00      	nop
   40898:	20003858 	.word	0x20003858

0004089c <usbd_ep_abort>:
{
   4089c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4089e:	4601      	mov	r1, r0
	__asm__ volatile(
   408a0:	f04f 0320 	mov.w	r3, #32
   408a4:	f3ef 8511 	mrs	r5, BASEPRI
   408a8:	f383 8812 	msr	BASEPRI_MAX, r3
   408ac:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   408b0:	f7ff faac 	bl	3fe0c <ep_state_access>
   408b4:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   408b6:	4608      	mov	r0, r1
   408b8:	f007 fd39 	bl	4832e <ep2bit>
   408bc:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   408be:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   408c2:	fa02 f200 	lsl.w	r2, r2, r0
   408c6:	482e      	ldr	r0, [pc, #184]	; (40980 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   408c8:	d118      	bne.n	408fc <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   408ca:	6803      	ldr	r3, [r0, #0]
   408cc:	ea32 0403 	bics.w	r4, r2, r3
   408d0:	d00a      	beq.n	408e8 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   408d2:	4608      	mov	r0, r1
   408d4:	f7ff ffb8 	bl	40848 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   408d8:	2303      	movs	r3, #3
   408da:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   408dc:	f385 8811 	msr	BASEPRI, r5
   408e0:	f3bf 8f6f 	isb	sy
}
   408e4:	b003      	add	sp, #12
   408e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_ready &= ~(1U << ep2bit(ep));
   408e8:	4926      	ldr	r1, [pc, #152]	; (40984 <usbd_ep_abort+0xe8>)
            p_state->handler.consumer = NULL;
   408ea:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   408ec:	ea23 0302 	bic.w	r3, r3, r2
   408f0:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   408f2:	680b      	ldr	r3, [r1, #0]
   408f4:	ea23 0302 	bic.w	r3, r3, r2
   408f8:	600b      	str	r3, [r1, #0]
   408fa:	e7ed      	b.n	408d8 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   408fc:	070b      	lsls	r3, r1, #28
   408fe:	d415      	bmi.n	4092c <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   40900:	2980      	cmp	r1, #128	; 0x80
   40902:	4b21      	ldr	r3, [pc, #132]	; (40988 <usbd_ep_abort+0xec>)
   40904:	d02f      	beq.n	40966 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   40906:	f001 040f 	and.w	r4, r1, #15
   4090a:	f204 34da 	addw	r4, r4, #986	; 0x3da
   4090e:	0064      	lsls	r4, r4, #1
   40910:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   40914:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   40918:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   4091c:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   4091e:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   40922:	433c      	orrs	r4, r7
   40924:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   40928:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   4092c:	4f15      	ldr	r7, [pc, #84]	; (40984 <usbd_ep_abort+0xe8>)
   4092e:	6804      	ldr	r4, [r0, #0]
   40930:	683b      	ldr	r3, [r7, #0]
   40932:	ea64 0c03 	orn	ip, r4, r3
   40936:	ea1c 0f02 	tst.w	ip, r2
   4093a:	d0cf      	beq.n	408dc <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   4093c:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   4093e:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   40942:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   40944:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   40946:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   40948:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   4094a:	2303      	movs	r3, #3
   4094c:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   4094e:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   40952:	4b0e      	ldr	r3, [pc, #56]	; (4098c <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   40954:	f88d 1006 	strb.w	r1, [sp, #6]
   40958:	2206      	movs	r2, #6
            m_event_handler(&evt);
   4095a:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   4095c:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   40960:	a801      	add	r0, sp, #4
   40962:	4798      	blx	r3
   40964:	e7ba      	b.n	408dc <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   40966:	f240 74b4 	movw	r4, #1972	; 0x7b4
   4096a:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   4096e:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   40972:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   40976:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   40978:	f044 0404 	orr.w	r4, r4, #4
   4097c:	e7d1      	b.n	40922 <usbd_ep_abort+0x86>
   4097e:	bf00      	nop
   40980:	200037e8 	.word	0x200037e8
   40984:	20003858 	.word	0x20003858
   40988:	40027000 	.word	0x40027000
   4098c:	2000397c 	.word	0x2000397c

00040990 <ev_setup_handler>:
{
   40990:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   40992:	4b14      	ldr	r3, [pc, #80]	; (409e4 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   40994:	4c14      	ldr	r4, [pc, #80]	; (409e8 <ev_setup_handler+0x58>)
   40996:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   4099a:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   4099c:	4e13      	ldr	r6, [pc, #76]	; (409ec <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   4099e:	43da      	mvns	r2, r3
   409a0:	4b13      	ldr	r3, [pc, #76]	; (409f0 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
   409a2:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   409a4:	681b      	ldr	r3, [r3, #0]
   409a6:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   409a8:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   409aa:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   409ac:	f007 fcbf 	bl	4832e <ep2bit>
   409b0:	2301      	movs	r3, #1
   409b2:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   409b4:	4213      	tst	r3, r2
   409b6:	d002      	beq.n	409be <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   409b8:	4608      	mov	r0, r1
   409ba:	f7ff ff6f 	bl	4089c <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   409be:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
   409c2:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   409c6:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   409c8:	f7ff fb2a 	bl	40020 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   409cc:	6823      	ldr	r3, [r4, #0]
   409ce:	f043 0301 	orr.w	r3, r3, #1
   409d2:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   409d4:	2305      	movs	r3, #5
   409d6:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
   409d8:	4b06      	ldr	r3, [pc, #24]	; (409f4 <ev_setup_handler+0x64>)
   409da:	a801      	add	r0, sp, #4
   409dc:	681b      	ldr	r3, [r3, #0]
   409de:	4798      	blx	r3
}
   409e0:	b002      	add	sp, #8
   409e2:	bd70      	pop	{r4, r5, r6, pc}
   409e4:	40027000 	.word	0x40027000
   409e8:	20003858 	.word	0x20003858
   409ec:	20003c7f 	.word	0x20003c7f
   409f0:	200037e8 	.word	0x200037e8
   409f4:	2000397c 	.word	0x2000397c

000409f8 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   409f8:	4b1b      	ldr	r3, [pc, #108]	; (40a68 <nrfx_usbd_irq_handler+0x70>)
   409fa:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   409fe:	2300      	movs	r3, #0
{
   40a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   40a04:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   40a06:	461d      	mov	r5, r3
    while (to_process)
   40a08:	b970      	cbnz	r0, 40a28 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   40a0a:	4f18      	ldr	r7, [pc, #96]	; (40a6c <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   40a0c:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   40a10:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   40a14:	f04f 0801 	mov.w	r8, #1
    while (active)
   40a18:	b9bc      	cbnz	r4, 40a4a <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   40a1a:	f7ff fd67 	bl	404ec <usbd_dmareq_process>
    if (setup_active)
   40a1e:	b306      	cbz	r6, 40a62 <nrfx_usbd_irq_handler+0x6a>
}
   40a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   40a24:	f7ff bfb4 	b.w	40990 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   40a28:	fa90 f2a0 	rbit	r2, r0
   40a2c:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   40a30:	490f      	ldr	r1, [pc, #60]	; (40a70 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   40a32:	0096      	lsls	r6, r2, #2
   40a34:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   40a36:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   40a3a:	680e      	ldr	r6, [r1, #0]
    if (ret)
   40a3c:	b116      	cbz	r6, 40a44 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   40a3e:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   40a40:	6809      	ldr	r1, [r1, #0]
   40a42:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   40a44:	ea20 0002 	bic.w	r0, r0, r2
   40a48:	e7de      	b.n	40a08 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   40a4a:	fa94 f5a4 	rbit	r5, r4
   40a4e:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   40a52:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   40a56:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   40a5a:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   40a5c:	ea24 0405 	bic.w	r4, r4, r5
   40a60:	e7da      	b.n	40a18 <nrfx_usbd_irq_handler+0x20>
}
   40a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   40a66:	bf00      	nop
   40a68:	40027000 	.word	0x40027000
   40a6c:	0004ade4 	.word	0x0004ade4
   40a70:	40027100 	.word	0x40027100

00040a74 <usbd_ep_abort_all>:
{
   40a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   40a76:	4e11      	ldr	r6, [pc, #68]	; (40abc <usbd_ep_abort_all+0x48>)
   40a78:	4b11      	ldr	r3, [pc, #68]	; (40ac0 <usbd_ep_abort_all+0x4c>)
   40a7a:	6834      	ldr	r4, [r6, #0]
   40a7c:	681b      	ldr	r3, [r3, #0]
   40a7e:	0c24      	lsrs	r4, r4, #16
   40a80:	0424      	lsls	r4, r4, #16
   40a82:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   40a84:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   40a86:	b91c      	cbnz	r4, 40a90 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   40a88:	f240 13ff 	movw	r3, #511	; 0x1ff
   40a8c:	6033      	str	r3, [r6, #0]
}
   40a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   40a90:	fa94 f5a4 	rbit	r5, r4
   40a94:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   40a98:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   40a9a:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   40a9c:	bfc6      	itte	gt
   40a9e:	f1a5 0010 	subgt.w	r0, r5, #16
   40aa2:	b2c0      	uxtbgt	r0, r0
   40aa4:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   40aa8:	0703      	lsls	r3, r0, #28
   40aaa:	d401      	bmi.n	40ab0 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   40aac:	f7ff fef6 	bl	4089c <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   40ab0:	fa07 f505 	lsl.w	r5, r7, r5
   40ab4:	ea24 0405 	bic.w	r4, r4, r5
   40ab8:	e7e5      	b.n	40a86 <usbd_ep_abort_all+0x12>
   40aba:	bf00      	nop
   40abc:	20003858 	.word	0x20003858
   40ac0:	200037e8 	.word	0x200037e8

00040ac4 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   40ac4:	4b0c      	ldr	r3, [pc, #48]	; (40af8 <nrfx_usbd_stop+0x34>)
   40ac6:	2280      	movs	r2, #128	; 0x80
{
   40ac8:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   40aca:	2027      	movs	r0, #39	; 0x27
   40acc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   40ad0:	f7e9 fada 	bl	2a088 <arch_irq_is_enabled>
   40ad4:	b170      	cbz	r0, 40af4 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   40ad6:	4c09      	ldr	r4, [pc, #36]	; (40afc <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   40ad8:	f7ff ffcc 	bl	40a74 <usbd_ep_abort_all>
   40adc:	2300      	movs	r3, #0
   40ade:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   40ae2:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   40ae4:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   40ae8:	f7e9 faba 	bl	2a060 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   40aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   40af0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   40af4:	bd10      	pop	{r4, pc}
   40af6:	bf00      	nop
   40af8:	e000e100 	.word	0xe000e100
   40afc:	40027000 	.word	0x40027000

00040b00 <nrfx_usbd_disable>:
{
   40b00:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   40b02:	f7ff ffdf 	bl	40ac4 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   40b06:	4b08      	ldr	r3, [pc, #32]	; (40b28 <nrfx_usbd_disable+0x28>)
   40b08:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   40b0c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   40b10:	2200      	movs	r2, #0
   40b12:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   40b16:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   40b1a:	f7ff f985 	bl	3fe28 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   40b1e:	4b03      	ldr	r3, [pc, #12]	; (40b2c <nrfx_usbd_disable+0x2c>)
   40b20:	2201      	movs	r2, #1
   40b22:	701a      	strb	r2, [r3, #0]
}
   40b24:	bd08      	pop	{r3, pc}
   40b26:	bf00      	nop
   40b28:	40027000 	.word	0x40027000
   40b2c:	20003c7e 	.word	0x20003c7e

00040b30 <nrfx_usbd_suspend>:
{
   40b30:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   40b32:	f04f 0320 	mov.w	r3, #32
   40b36:	f3ef 8511 	mrs	r5, BASEPRI
   40b3a:	f383 8812 	msr	BASEPRI_MAX, r3
   40b3e:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   40b42:	4b11      	ldr	r3, [pc, #68]	; (40b88 <nrfx_usbd_suspend+0x58>)
   40b44:	781b      	ldrb	r3, [r3, #0]
   40b46:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   40b4a:	b933      	cbnz	r3, 40b5a <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
   40b4c:	2400      	movs	r4, #0
	__asm__ volatile(
   40b4e:	f385 8811 	msr	BASEPRI, r5
   40b52:	f3bf 8f6f 	isb	sy
}
   40b56:	4620      	mov	r0, r4
   40b58:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   40b5a:	f7ff ff8b 	bl	40a74 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   40b5e:	4b0b      	ldr	r3, [pc, #44]	; (40b8c <nrfx_usbd_suspend+0x5c>)
   40b60:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   40b64:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   40b68:	d1f0      	bne.n	40b4c <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   40b6a:	2101      	movs	r1, #1
   40b6c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   40b70:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   40b74:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   40b78:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   40b7a:	bf42      	ittt	mi
   40b7c:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   40b80:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   40b84:	4614      	movmi	r4, r2
}
   40b86:	e7e2      	b.n	40b4e <nrfx_usbd_suspend+0x1e>
   40b88:	20003c7c 	.word	0x20003c7c
   40b8c:	40027000 	.word	0x40027000

00040b90 <nrfx_usbd_ep_disable>:
{
   40b90:	b510      	push	{r4, lr}
   40b92:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   40b94:	f7ff fe82 	bl	4089c <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   40b98:	4a10      	ldr	r2, [pc, #64]	; (40bdc <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   40b9a:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   40b9e:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   40ba2:	f04f 0301 	mov.w	r3, #1
   40ba6:	bf14      	ite	ne
   40ba8:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   40bac:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   40bb0:	fa03 f300 	lsl.w	r3, r3, r0
   40bb4:	ea6f 0303 	mvn.w	r3, r3
   40bb8:	bf15      	itete	ne
   40bba:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   40bbc:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   40bbe:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   40bc2:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   40bc6:	bf14      	ite	ne
   40bc8:	4b05      	ldrne	r3, [pc, #20]	; (40be0 <nrfx_usbd_ep_disable+0x50>)
   40bca:	4b06      	ldreq	r3, [pc, #24]	; (40be4 <nrfx_usbd_ep_disable+0x54>)
   40bcc:	5c1a      	ldrb	r2, [r3, r0]
   40bce:	2301      	movs	r3, #1
   40bd0:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   40bd2:	4a02      	ldr	r2, [pc, #8]	; (40bdc <nrfx_usbd_ep_disable+0x4c>)
   40bd4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   40bd8:	bd10      	pop	{r4, pc}
   40bda:	bf00      	nop
   40bdc:	40027000 	.word	0x40027000
   40be0:	0004b52a 	.word	0x0004b52a
   40be4:	0004b533 	.word	0x0004b533

00040be8 <nrfx_usbd_ep_enable>:
{
   40be8:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   40bea:	b243      	sxtb	r3, r0
   40bec:	2b00      	cmp	r3, #0
   40bee:	4b23      	ldr	r3, [pc, #140]	; (40c7c <nrfx_usbd_ep_enable+0x94>)
   40bf0:	4a23      	ldr	r2, [pc, #140]	; (40c80 <nrfx_usbd_ep_enable+0x98>)
   40bf2:	bfa8      	it	ge
   40bf4:	461a      	movge	r2, r3
   40bf6:	f000 030f 	and.w	r3, r0, #15
   40bfa:	f04f 0401 	mov.w	r4, #1
   40bfe:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
   40c00:	4a20      	ldr	r2, [pc, #128]	; (40c84 <nrfx_usbd_ep_enable+0x9c>)
   40c02:	fa04 f101 	lsl.w	r1, r4, r1
{
   40c06:	4605      	mov	r5, r0
   40c08:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   40c0c:	da0c      	bge.n	40c28 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   40c0e:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   40c12:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   40c14:	07c8      	lsls	r0, r1, #31
   40c16:	d406      	bmi.n	40c26 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
   40c18:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   40c1c:	fa04 f303 	lsl.w	r3, r4, r3
   40c20:	430b      	orrs	r3, r1
   40c22:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   40c26:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   40c28:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
   40c2c:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   40c2e:	07c9      	lsls	r1, r1, #31
   40c30:	d4f9      	bmi.n	40c26 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
   40c32:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
   40c36:	fa04 f103 	lsl.w	r1, r4, r3
   40c3a:	4331      	orrs	r1, r6
   40c3c:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   40c40:	2b00      	cmp	r3, #0
   40c42:	d0f0      	beq.n	40c26 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
   40c44:	0703      	lsls	r3, r0, #28
   40c46:	d4ee      	bmi.n	40c26 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
   40c48:	f04f 0320 	mov.w	r3, #32
   40c4c:	f3ef 8611 	mrs	r6, BASEPRI
   40c50:	f383 8812 	msr	BASEPRI_MAX, r3
   40c54:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   40c58:	f7ff fdf6 	bl	40848 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   40c5c:	4628      	mov	r0, r5
   40c5e:	f007 fb66 	bl	4832e <ep2bit>
   40c62:	4a09      	ldr	r2, [pc, #36]	; (40c88 <nrfx_usbd_ep_enable+0xa0>)
   40c64:	6813      	ldr	r3, [r2, #0]
   40c66:	fa04 f000 	lsl.w	r0, r4, r0
   40c6a:	ea23 0300 	bic.w	r3, r3, r0
   40c6e:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   40c70:	f386 8811 	msr	BASEPRI, r6
   40c74:	f3bf 8f6f 	isb	sy
}
   40c78:	e7d5      	b.n	40c26 <nrfx_usbd_ep_enable+0x3e>
   40c7a:	bf00      	nop
   40c7c:	0004b533 	.word	0x0004b533
   40c80:	0004b52a 	.word	0x0004b52a
   40c84:	40027000 	.word	0x40027000
   40c88:	200037e8 	.word	0x200037e8

00040c8c <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   40c8c:	0603      	lsls	r3, r0, #24
{
   40c8e:	b510      	push	{r4, lr}
   40c90:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   40c92:	d405      	bmi.n	40ca0 <nrfx_usbd_ep_stall_clear+0x14>
   40c94:	f7ff fd46 	bl	40724 <nrfx_usbd_ep_stall_check>
   40c98:	b110      	cbz	r0, 40ca0 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   40c9a:	4620      	mov	r0, r4
   40c9c:	f7ff fdd4 	bl	40848 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   40ca0:	4b01      	ldr	r3, [pc, #4]	; (40ca8 <nrfx_usbd_ep_stall_clear+0x1c>)
   40ca2:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   40ca6:	bd10      	pop	{r4, pc}
   40ca8:	40027000 	.word	0x40027000

00040cac <kscan_direct_init>:
    }

    return 0;
}

static int kscan_direct_init(const struct device *dev) {
   40cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct kscan_direct_data *data = dev->data;
   40cb0:	f8d0 8010 	ldr.w	r8, [r0, #16]
    const struct kscan_direct_config *config = dev->config;
   40cb4:	6847      	ldr	r7, [r0, #4]

    data->dev = dev;
   40cb6:	f8c8 0000 	str.w	r0, [r8]
static int kscan_direct_init(const struct device *dev) {
   40cba:	4605      	mov	r5, r0
    for (int i = 0; i < config->inputs.len; i++) {
   40cbc:	2400      	movs	r4, #0
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   40cbe:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < config->inputs.len; i++) {
   40cc2:	687b      	ldr	r3, [r7, #4]
   40cc4:	42a3      	cmp	r3, r4
   40cc6:	d808      	bhi.n	40cda <kscan_direct_init+0x2e>

    kscan_direct_init_inputs(dev);

    k_work_init_delayable(&data->work, kscan_direct_work_handler);
   40cc8:	f108 0008 	add.w	r0, r8, #8
   40ccc:	4922      	ldr	r1, [pc, #136]	; (40d58 <kscan_direct_init+0xac>)
   40cce:	f007 ffad 	bl	48c2c <k_work_init_delayable>

    return 0;
}
   40cd2:	2000      	movs	r0, #0
   40cd4:	b003      	add	sp, #12
   40cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   40cda:	683e      	ldr	r6, [r7, #0]
        int err = kscan_direct_init_input_inst(dev, gpio, i, config->toggle_mode);
   40cdc:	7e3a      	ldrb	r2, [r7, #24]
    if (!device_is_ready(gpio->port)) {
   40cde:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
        int err = kscan_direct_init_input_inst(dev, gpio, i, config->toggle_mode);
   40ce2:	9201      	str	r2, [sp, #4]
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   40ce4:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   40ce8:	eb06 0bc4 	add.w	fp, r6, r4, lsl #3
   40cec:	f007 fd49 	bl	48782 <z_device_is_ready>
    if (!device_is_ready(gpio->port)) {
   40cf0:	9a01      	ldr	r2, [sp, #4]
   40cf2:	2800      	cmp	r0, #0
   40cf4:	d0e8      	beq.n	40cc8 <kscan_direct_init+0x1c>
    int err = gpio_pin_configure_dt(
   40cf6:	f89b c005 	ldrb.w	ip, [fp, #5]
   40cfa:	b352      	cbz	r2, 40d52 <kscan_direct_init+0xa6>
        return ((BIT(0) & gpio->dt_flags) ? GPIO_PULL_UP : GPIO_PULL_DOWN);
   40cfc:	f01c 0f01 	tst.w	ip, #1
   40d00:	bf0c      	ite	eq
   40d02:	2220      	moveq	r2, #32
   40d04:	2210      	movne	r2, #16
    int err = gpio_pin_configure_dt(
   40d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
   40d0a:	f856 0009 	ldr.w	r0, [r6, r9]
				  spec->pin,
   40d0e:	f89b 1004 	ldrb.w	r1, [fp, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   40d12:	ea4c 0202 	orr.w	r2, ip, r2
   40d16:	f007 fbb2 	bl	4847e <z_impl_gpio_pin_configure>
    if (err) {
   40d1a:	2800      	cmp	r0, #0
   40d1c:	d1d4      	bne.n	40cc8 <kscan_direct_init+0x1c>
    struct kscan_direct_irq_callback *irq = &data->irqs[index];
   40d1e:	692a      	ldr	r2, [r5, #16]
   40d20:	0121      	lsls	r1, r4, #4
   40d22:	6b90      	ldr	r0, [r2, #56]	; 0x38
    irq->dev = dev;
   40d24:	5045      	str	r5, [r0, r1]
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   40d26:	f89b 3004 	ldrb.w	r3, [fp, #4]
    struct kscan_direct_irq_callback *irq = &data->irqs[index];
   40d2a:	eb00 1204 	add.w	r2, r0, r4, lsl #4
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   40d2e:	480b      	ldr	r0, [pc, #44]	; (40d5c <kscan_direct_init+0xb0>)
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   40d30:	fa0a f303 	lsl.w	r3, sl, r3
	callback->pin_mask = pin_mask;
   40d34:	e9c2 0302 	strd	r0, r3, [r2, #8]
    err = gpio_add_callback(gpio->port, &irq->callback);
   40d38:	f856 0009 	ldr.w	r0, [r6, r9]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   40d3c:	6883      	ldr	r3, [r0, #8]
   40d3e:	69db      	ldr	r3, [r3, #28]
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   40d40:	1d11      	adds	r1, r2, #4
   40d42:	2b00      	cmp	r3, #0
   40d44:	d0c0      	beq.n	40cc8 <kscan_direct_init+0x1c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   40d46:	2201      	movs	r2, #1
   40d48:	4798      	blx	r3
    if (err) {
   40d4a:	2800      	cmp	r0, #0
   40d4c:	d1bc      	bne.n	40cc8 <kscan_direct_init+0x1c>
    for (int i = 0; i < config->inputs.len; i++) {
   40d4e:	3401      	adds	r4, #1
   40d50:	e7b7      	b.n	40cc2 <kscan_direct_init+0x16>
    int err = gpio_pin_configure_dt(
   40d52:	f44f 7280 	mov.w	r2, #256	; 0x100
   40d56:	e7d8      	b.n	40d0a <kscan_direct_init+0x5e>
   40d58:	000486ff 	.word	0x000486ff
   40d5c:	0004851d 	.word	0x0004851d

00040d60 <vddh_sample_fetch>:
    struct adc_channel_cfg acc;
    struct adc_sequence as;
    struct battery_value value;
};

static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   40d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   40d62:	3927      	subs	r1, #39	; 0x27
   40d64:	b289      	uxth	r1, r1
   40d66:	2912      	cmp	r1, #18
   40d68:	d827      	bhi.n	40dba <vddh_sample_fetch+0x5a>
   40d6a:	4b15      	ldr	r3, [pc, #84]	; (40dc0 <vddh_sample_fetch+0x60>)
   40d6c:	40cb      	lsrs	r3, r1
   40d6e:	07db      	lsls	r3, r3, #31
   40d70:	d523      	bpl.n	40dba <vddh_sample_fetch+0x5a>
        chan != SENSOR_CHAN_ALL) {
        LOG_DBG("Selected channel is not supported: %d.", chan);
        return -ENOTSUP;
    }

    struct vddh_data *drv_data = dev->data;
   40d72:	6905      	ldr	r5, [r0, #16]
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
   40d74:	4813      	ldr	r0, [pc, #76]	; (40dc4 <vddh_sample_fetch+0x64>)
   40d76:	6886      	ldr	r6, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   40d78:	f105 0108 	add.w	r1, r5, #8
   40d7c:	6873      	ldr	r3, [r6, #4]
   40d7e:	4798      	blx	r3
    struct adc_sequence *as = &drv_data->as;

    int rc = adc_read(adc, as);
    as->calibrate = false;
   40d80:	2300      	movs	r3, #0
   40d82:	76ab      	strb	r3, [r5, #26]

    if (rc != 0) {
   40d84:	4604      	mov	r4, r0
   40d86:	b9a8      	cbnz	r0, 40db4 <vddh_sample_fetch+0x54>
        LOG_ERR("Failed to read ADC: %d", rc);
        return rc;
    }

    int32_t val = drv_data->value.adc_raw;
   40d88:	8bab      	ldrh	r3, [r5, #28]
    rc = adc_raw_to_millivolts(adc_ref_internal(adc), drv_data->acc.gain, as->resolution, &val);
   40d8a:	8932      	ldrh	r2, [r6, #8]
   40d8c:	7828      	ldrb	r0, [r5, #0]
   40d8e:	7e2f      	ldrb	r7, [r5, #24]
	int32_t adc_mv = *valp * ref_mv;
   40d90:	4353      	muls	r3, r2
	int ret = adc_gain_invert(gain, &adc_mv);
   40d92:	a901      	add	r1, sp, #4
	int32_t adc_mv = *valp * ref_mv;
   40d94:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   40d96:	f7fc ffaf 	bl	3dcf8 <adc_gain_invert>
	if (ret == 0) {
   40d9a:	4604      	mov	r4, r0
   40d9c:	b950      	cbnz	r0, 40db4 <vddh_sample_fetch+0x54>
		*valp = (adc_mv >> resolution);
   40d9e:	9801      	ldr	r0, [sp, #4]
   40da0:	4138      	asrs	r0, r7
    if (rc != 0) {
        LOG_ERR("Failed to convert raw ADC to mV: %d", rc);
        return rc;
    }

    drv_data->value.millivolts = val * VDDHDIV;
   40da2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   40da6:	b280      	uxth	r0, r0
   40da8:	83e8      	strh	r0, [r5, #30]
    drv_data->value.state_of_charge = lithium_ion_mv_to_pct(drv_data->value.millivolts);
   40daa:	b200      	sxth	r0, r0
   40dac:	f007 fcd1 	bl	48752 <lithium_ion_mv_to_pct>
   40db0:	f885 0020 	strb.w	r0, [r5, #32]

    LOG_DBG("ADC raw %d ~ %d mV => %d%%", drv_data->value.adc_raw, drv_data->value.millivolts,
            drv_data->value.state_of_charge);

    return rc;
}
   40db4:	4620      	mov	r0, r4
   40db6:	b003      	add	sp, #12
   40db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   40dba:	f06f 0485 	mvn.w	r4, #133	; 0x85
   40dbe:	e7f9      	b.n	40db4 <vddh_sample_fetch+0x54>
   40dc0:	00040021 	.word	0x00040021
   40dc4:	0004941c 	.word	0x0004941c

00040dc8 <vddh_init>:
static const struct sensor_driver_api vddh_api = {
    .sample_fetch = vddh_sample_fetch,
    .channel_get = vddh_channel_get,
};

static int vddh_init(const struct device *dev) {
   40dc8:	b570      	push	{r4, r5, r6, lr}
    struct vddh_data *drv_data = dev->data;
   40dca:	6904      	ldr	r4, [r0, #16]
   40dcc:	4d12      	ldr	r5, [pc, #72]	; (40e18 <vddh_init+0x50>)
   40dce:	4628      	mov	r0, r5
   40dd0:	f007 fcd7 	bl	48782 <z_device_is_ready>

    if (!device_is_ready(adc)) {
   40dd4:	b1e0      	cbz	r0, 40e10 <vddh_init+0x48>
        LOG_ERR("ADC device is not ready %s", adc->name);
        return -ENODEV;
    }

    drv_data->as = (struct adc_sequence){
   40dd6:	2214      	movs	r2, #20
   40dd8:	2100      	movs	r1, #0
   40dda:	f104 0008 	add.w	r0, r4, #8
   40dde:	f004 f81b 	bl	44e18 <memset>
        .channels = BIT(0),
        .buffer = &drv_data->value.adc_raw,
   40de2:	f104 021c 	add.w	r2, r4, #28
        .oversampling = 4,
        .calibrate = true,
    };

#ifdef CONFIG_ADC_NRFX_SAADC
    drv_data->acc = (struct adc_channel_cfg){
   40de6:	490d      	ldr	r1, [pc, #52]	; (40e1c <vddh_init+0x54>)
    drv_data->as = (struct adc_sequence){
   40de8:	6122      	str	r2, [r4, #16]
    drv_data->acc = (struct adc_channel_cfg){
   40dea:	f44f 6250 	mov.w	r2, #3328	; 0xd00
   40dee:	e9c4 1200 	strd	r1, r2, [r4]
    drv_data->as = (struct adc_sequence){
   40df2:	2202      	movs	r2, #2
   40df4:	2301      	movs	r3, #1
   40df6:	6162      	str	r2, [r4, #20]
        .reference = ADC_REF_INTERNAL,
        .acquisition_time = ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40),
        .input_positive = SAADC_CH_PSELN_PSELN_VDDHDIV5,
    };

    drv_data->as.resolution = 12;
   40df8:	f240 420c 	movw	r2, #1036	; 0x40c
    drv_data->as = (struct adc_sequence){
   40dfc:	60e3      	str	r3, [r4, #12]
    drv_data->as.resolution = 12;
   40dfe:	8322      	strh	r2, [r4, #24]
    drv_data->as = (struct adc_sequence){
   40e00:	76a3      	strb	r3, [r4, #26]
	return api->channel_setup(dev, channel_cfg);
   40e02:	68ab      	ldr	r3, [r5, #8]
   40e04:	4621      	mov	r1, r4
   40e06:	4628      	mov	r0, r5
   40e08:	681b      	ldr	r3, [r3, #0]

    const int rc = adc_channel_setup(adc, &drv_data->acc);
    LOG_DBG("VDDHDIV5 setup returned %d", rc);

    return rc;
}
   40e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   40e0e:	4718      	bx	r3
   40e10:	f06f 0012 	mvn.w	r0, #18
   40e14:	bd70      	pop	{r4, r5, r6, pc}
   40e16:	bf00      	nop
   40e18:	0004941c 	.word	0x0004941c
   40e1c:	40280401 	.word	0x40280401

00040e20 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   40e20:	4b0e      	ldr	r3, [pc, #56]	; (40e5c <z_sys_init_run_level+0x3c>)
{
   40e22:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   40e24:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   40e28:	3001      	adds	r0, #1
   40e2a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   40e2e:	42a6      	cmp	r6, r4
   40e30:	d800      	bhi.n	40e34 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   40e32:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   40e34:	e9d4 3500 	ldrd	r3, r5, [r4]
   40e38:	4628      	mov	r0, r5
   40e3a:	4798      	blx	r3
		if (dev != NULL) {
   40e3c:	b165      	cbz	r5, 40e58 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   40e3e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   40e40:	b130      	cbz	r0, 40e50 <z_sys_init_run_level+0x30>
				dev->state->init_res = rc;
   40e42:	2800      	cmp	r0, #0
   40e44:	bfb8      	it	lt
   40e46:	4240      	neglt	r0, r0
   40e48:	28ff      	cmp	r0, #255	; 0xff
   40e4a:	bfa8      	it	ge
   40e4c:	20ff      	movge	r0, #255	; 0xff
   40e4e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   40e50:	785a      	ldrb	r2, [r3, #1]
   40e52:	f042 0201 	orr.w	r2, r2, #1
   40e56:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   40e58:	3408      	adds	r4, #8
   40e5a:	e7e8      	b.n	40e2e <z_sys_init_run_level+0xe>
   40e5c:	0004aef8 	.word	0x0004aef8

00040e60 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   40e60:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   40e62:	4605      	mov	r5, r0
   40e64:	b910      	cbnz	r0, 40e6c <z_impl_device_get_binding+0xc>
		return NULL;
   40e66:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   40e68:	4620      	mov	r0, r4
   40e6a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   40e6c:	7803      	ldrb	r3, [r0, #0]
   40e6e:	2b00      	cmp	r3, #0
   40e70:	d0f9      	beq.n	40e66 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   40e72:	4c0e      	ldr	r4, [pc, #56]	; (40eac <z_impl_device_get_binding+0x4c>)
   40e74:	4e0e      	ldr	r6, [pc, #56]	; (40eb0 <z_impl_device_get_binding+0x50>)
   40e76:	42b4      	cmp	r4, r6
   40e78:	d108      	bne.n	40e8c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   40e7a:	4c0c      	ldr	r4, [pc, #48]	; (40eac <z_impl_device_get_binding+0x4c>)
   40e7c:	42b4      	cmp	r4, r6
   40e7e:	d0f2      	beq.n	40e66 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   40e80:	4620      	mov	r0, r4
   40e82:	f007 fc7e 	bl	48782 <z_device_is_ready>
   40e86:	b950      	cbnz	r0, 40e9e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   40e88:	3418      	adds	r4, #24
   40e8a:	e7f7      	b.n	40e7c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   40e8c:	4620      	mov	r0, r4
   40e8e:	f007 fc78 	bl	48782 <z_device_is_ready>
   40e92:	b110      	cbz	r0, 40e9a <z_impl_device_get_binding+0x3a>
   40e94:	6823      	ldr	r3, [r4, #0]
   40e96:	42ab      	cmp	r3, r5
   40e98:	d0e6      	beq.n	40e68 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   40e9a:	3418      	adds	r4, #24
   40e9c:	e7eb      	b.n	40e76 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   40e9e:	6821      	ldr	r1, [r4, #0]
   40ea0:	4628      	mov	r0, r5
   40ea2:	f003 ff81 	bl	44da8 <strcmp>
   40ea6:	2800      	cmp	r0, #0
   40ea8:	d1ee      	bne.n	40e88 <z_impl_device_get_binding+0x28>
   40eaa:	e7dd      	b.n	40e68 <z_impl_device_get_binding+0x8>
   40eac:	000493bc 	.word	0x000493bc
   40eb0:	000494dc 	.word	0x000494dc

00040eb4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   40eb4:	4b01      	ldr	r3, [pc, #4]	; (40ebc <z_impl_z_errno+0x8>)
   40eb6:	6898      	ldr	r0, [r3, #8]
}
   40eb8:	3064      	adds	r0, #100	; 0x64
   40eba:	4770      	bx	lr
   40ebc:	20003b04 	.word	0x20003b04

00040ec0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   40ec0:	b510      	push	{r4, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   40ec2:	2300      	movs	r3, #0
{
   40ec4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   40ec6:	2201      	movs	r2, #1
   40ec8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   40ecc:	220f      	movs	r2, #15
   40ece:	e9cd 3202 	strd	r3, r2, [sp, #8]
   40ed2:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   40ed4:	4c0b      	ldr	r4, [pc, #44]	; (40f04 <init_idle_thread+0x44>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   40ed6:	4b0c      	ldr	r3, [pc, #48]	; (40f08 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
   40ed8:	490c      	ldr	r1, [pc, #48]	; (40f0c <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   40eda:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   40edc:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   40ee0:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   40ee4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   40ee8:	9300      	str	r3, [sp, #0]
   40eea:	fb02 1100 	mla	r1, r2, r0, r1
   40eee:	4b08      	ldr	r3, [pc, #32]	; (40f10 <init_idle_thread+0x50>)
   40ef0:	4620      	mov	r0, r4
   40ef2:	f000 f90b 	bl	4110c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   40ef6:	7b63      	ldrb	r3, [r4, #13]
   40ef8:	f023 0304 	bic.w	r3, r3, #4
   40efc:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   40efe:	b006      	add	sp, #24
   40f00:	bd10      	pop	{r4, pc}
   40f02:	bf00      	nop
   40f04:	20001810 	.word	0x20001810
   40f08:	20003b04 	.word	0x20003b04
   40f0c:	200059b0 	.word	0x200059b0
   40f10:	0004127d 	.word	0x0004127d

00040f14 <bg_thread_main>:
{
   40f14:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   40f16:	4b0a      	ldr	r3, [pc, #40]	; (40f40 <bg_thread_main+0x2c>)
   40f18:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   40f1a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   40f1c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   40f1e:	f7ff ff7f 	bl	40e20 <z_sys_init_run_level>
	boot_banner();
   40f22:	f008 f9db 	bl	492dc <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   40f26:	2003      	movs	r0, #3
   40f28:	f7ff ff7a 	bl	40e20 <z_sys_init_run_level>
	z_init_static_threads();
   40f2c:	f000 f94a 	bl	411c4 <z_init_static_threads>
	main();
   40f30:	f7e6 ff6a 	bl	27e08 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   40f34:	4a03      	ldr	r2, [pc, #12]	; (40f44 <bg_thread_main+0x30>)
   40f36:	7b13      	ldrb	r3, [r2, #12]
   40f38:	f023 0301 	bic.w	r3, r3, #1
   40f3c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   40f3e:	bd08      	pop	{r3, pc}
   40f40:	20003c80 	.word	0x20003c80
   40f44:	20001890 	.word	0x20001890

00040f48 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   40f48:	4802      	ldr	r0, [pc, #8]	; (40f54 <z_bss_zero+0xc>)
   40f4a:	4a03      	ldr	r2, [pc, #12]	; (40f58 <z_bss_zero+0x10>)
   40f4c:	2100      	movs	r1, #0
   40f4e:	1a12      	subs	r2, r2, r0
   40f50:	f003 bf62 	b.w	44e18 <memset>
   40f54:	20000da8 	.word	0x20000da8
   40f58:	20003c84 	.word	0x20003c84

00040f5c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   40f5c:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   40f5e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 41028 <z_cstart+0xcc>
   40f62:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   40f64:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   40f68:	4d30      	ldr	r5, [pc, #192]	; (4102c <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   40f6a:	4e31      	ldr	r6, [pc, #196]	; (41030 <z_cstart+0xd4>)
   40f6c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   40f6e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 41034 <z_cstart+0xd8>
   40f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   40f76:	2400      	movs	r4, #0
   40f78:	616b      	str	r3, [r5, #20]
   40f7a:	23e0      	movs	r3, #224	; 0xe0
   40f7c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   40f80:	77ec      	strb	r4, [r5, #31]
   40f82:	762c      	strb	r4, [r5, #24]
   40f84:	766c      	strb	r4, [r5, #25]
   40f86:	76ac      	strb	r4, [r5, #26]
   40f88:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   40f8c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   40f8e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   40f92:	626b      	str	r3, [r5, #36]	; 0x24
   40f94:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   40f98:	f7e9 fa4e 	bl	2a438 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   40f9c:	f7e9 f834 	bl	2a008 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   40fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   40fa4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   40fa6:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   40fa8:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   40faa:	f7e9 fafb 	bl	2a5a4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   40fae:	f7e9 fa8b 	bl	2a4c8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   40fb2:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   40fb6:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   40fb8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   40fbc:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   40fc0:	f001 fafc 	bl	425bc <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   40fc4:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   40fc6:	f007 fbdb 	bl	48780 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   40fca:	4620      	mov	r0, r4
   40fcc:	f7ff ff28 	bl	40e20 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   40fd0:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   40fd2:	4d19      	ldr	r5, [pc, #100]	; (41038 <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   40fd4:	f7ff ff24 	bl	40e20 <z_sys_init_run_level>
	z_sched_init();
   40fd8:	f000 ff5e 	bl	41e98 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   40fdc:	4b17      	ldr	r3, [pc, #92]	; (4103c <z_cstart+0xe0>)
   40fde:	9305      	str	r3, [sp, #20]
   40fe0:	2301      	movs	r3, #1
   40fe2:	4917      	ldr	r1, [pc, #92]	; (41040 <z_cstart+0xe4>)
   40fe4:	9400      	str	r4, [sp, #0]
   40fe6:	e9cd 4303 	strd	r4, r3, [sp, #12]
   40fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   40fee:	464b      	mov	r3, r9
   40ff0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   40ff4:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   40ff6:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   40ff8:	f000 f888 	bl	4110c <z_setup_new_thread>
   40ffc:	7b6a      	ldrb	r2, [r5, #13]
   40ffe:	4607      	mov	r7, r0
   41000:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   41004:	4628      	mov	r0, r5
   41006:	736a      	strb	r2, [r5, #13]
   41008:	f007 feb7 	bl	48d7a <z_ready_thread>
		init_idle_thread(i);
   4100c:	4620      	mov	r0, r4
   4100e:	f7ff ff57 	bl	40ec0 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   41012:	4b0c      	ldr	r3, [pc, #48]	; (41044 <z_cstart+0xe8>)
   41014:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   41016:	464a      	mov	r2, r9
   41018:	4639      	mov	r1, r7
   4101a:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   4101c:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   4101e:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   41022:	f7e9 f8f7 	bl	2a214 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   41026:	bf00      	nop
   41028:	200062f0 	.word	0x200062f0
   4102c:	e000ed00 	.word	0xe000ed00
   41030:	20003b04 	.word	0x20003b04
   41034:	00040f15 	.word	0x00040f15
   41038:	20001890 	.word	0x20001890
   4103c:	0004b544 	.word	0x0004b544
   41040:	200055b0 	.word	0x200055b0
   41044:	20001810 	.word	0x20001810

00041048 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   41048:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   4104a:	4c06      	ldr	r4, [pc, #24]	; (41064 <statics_init+0x1c>)
   4104c:	4d06      	ldr	r5, [pc, #24]	; (41068 <statics_init+0x20>)
   4104e:	42ac      	cmp	r4, r5
   41050:	d301      	bcc.n	41056 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   41052:	2000      	movs	r0, #0
   41054:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   41056:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   4105a:	4620      	mov	r0, r4
   4105c:	f007 fbc2 	bl	487e4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   41060:	3414      	adds	r4, #20
   41062:	e7f4      	b.n	4104e <statics_init+0x6>
   41064:	20000b10 	.word	0x20000b10
   41068:	20000b24 	.word	0x20000b24

0004106c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   4106c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   4106e:	4b0e      	ldr	r3, [pc, #56]	; (410a8 <init_mem_slab_module+0x3c>)
   41070:	4c0e      	ldr	r4, [pc, #56]	; (410ac <init_mem_slab_module+0x40>)
   41072:	42a3      	cmp	r3, r4
   41074:	d301      	bcc.n	4107a <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   41076:	2000      	movs	r0, #0
	return rc;
}
   41078:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   4107a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   4107e:	ea41 0200 	orr.w	r2, r1, r0
   41082:	f012 0203 	ands.w	r2, r2, #3
   41086:	d10b      	bne.n	410a0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   41088:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   4108a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   4108c:	42aa      	cmp	r2, r5
   4108e:	d101      	bne.n	41094 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   41090:	331c      	adds	r3, #28
   41092:	e7ee      	b.n	41072 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   41094:	695e      	ldr	r6, [r3, #20]
   41096:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   41098:	3201      	adds	r2, #1
		slab->free_list = p;
   4109a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   4109c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   4109e:	e7f5      	b.n	4108c <init_mem_slab_module+0x20>
	return rc;
   410a0:	f06f 0015 	mvn.w	r0, #21
   410a4:	e7e8      	b.n	41078 <init_mem_slab_module+0xc>
   410a6:	bf00      	nop
   410a8:	20000aa0 	.word	0x20000aa0
   410ac:	20000b10 	.word	0x20000b10

000410b0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   410b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   410b2:	460c      	mov	r4, r1
	__asm__ volatile(
   410b4:	f04f 0520 	mov.w	r5, #32
   410b8:	f3ef 8111 	mrs	r1, BASEPRI
   410bc:	f385 8812 	msr	BASEPRI_MAX, r5
   410c0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   410c4:	6945      	ldr	r5, [r0, #20]
   410c6:	b15d      	cbz	r5, 410e0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   410c8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   410ca:	682b      	ldr	r3, [r5, #0]
   410cc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   410ce:	6983      	ldr	r3, [r0, #24]
   410d0:	3301      	adds	r3, #1
   410d2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   410d4:	2000      	movs	r0, #0
	__asm__ volatile(
   410d6:	f381 8811 	msr	BASEPRI, r1
   410da:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   410de:	e011      	b.n	41104 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   410e0:	ea52 0603 	orrs.w	r6, r2, r3
   410e4:	d103      	bne.n	410ee <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   410e6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   410e8:	f06f 000b 	mvn.w	r0, #11
   410ec:	e7f3      	b.n	410d6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   410ee:	e9cd 2300 	strd	r2, r3, [sp]
   410f2:	4602      	mov	r2, r0
   410f4:	3008      	adds	r0, #8
   410f6:	f000 fe27 	bl	41d48 <z_pend_curr>
		if (result == 0) {
   410fa:	b918      	cbnz	r0, 41104 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   410fc:	4b02      	ldr	r3, [pc, #8]	; (41108 <k_mem_slab_alloc+0x58>)
   410fe:	689b      	ldr	r3, [r3, #8]
   41100:	695b      	ldr	r3, [r3, #20]
   41102:	6023      	str	r3, [r4, #0]
}
   41104:	b002      	add	sp, #8
   41106:	bd70      	pop	{r4, r5, r6, pc}
   41108:	20003b04 	.word	0x20003b04

0004110c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   4110c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   41110:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   41112:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   41114:	2604      	movs	r6, #4
   41116:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   41118:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   4111a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   4111c:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   41120:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   41122:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   41126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   41128:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   4112a:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   4112e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   41132:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   41136:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   41138:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   4113a:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   4113c:	9202      	str	r2, [sp, #8]
   4113e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   41140:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   41142:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   41146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   41148:	9200      	str	r2, [sp, #0]
   4114a:	4642      	mov	r2, r8
{
   4114c:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   4114e:	f7e9 f845 	bl	2a1dc <arch_new_thread>
	if (!_current) {
   41152:	4b05      	ldr	r3, [pc, #20]	; (41168 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   41154:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   41156:	689b      	ldr	r3, [r3, #8]
   41158:	b103      	cbz	r3, 4115c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   4115a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   4115c:	6763      	str	r3, [r4, #116]	; 0x74
}
   4115e:	4640      	mov	r0, r8
   41160:	b004      	add	sp, #16
   41162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41166:	bf00      	nop
   41168:	20003b04 	.word	0x20003b04

0004116c <z_impl_k_thread_create>:
{
   4116c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4116e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   41170:	2500      	movs	r5, #0
   41172:	9505      	str	r5, [sp, #20]
   41174:	9d10      	ldr	r5, [sp, #64]	; 0x40
   41176:	9504      	str	r5, [sp, #16]
   41178:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   4117a:	9503      	str	r5, [sp, #12]
   4117c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   4117e:	9502      	str	r5, [sp, #8]
{
   41180:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   41184:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   41186:	9501      	str	r5, [sp, #4]
   41188:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   4118a:	9500      	str	r5, [sp, #0]
{
   4118c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   4118e:	f7ff ffbd 	bl	4110c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   41192:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   41196:	bf08      	it	eq
   41198:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   4119c:	d005      	beq.n	411aa <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   4119e:	ea56 0307 	orrs.w	r3, r6, r7
   411a2:	d105      	bne.n	411b0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   411a4:	4620      	mov	r0, r4
   411a6:	f000 fd73 	bl	41c90 <z_sched_start>
}
   411aa:	4620      	mov	r0, r4
   411ac:	b007      	add	sp, #28
   411ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   411b0:	4903      	ldr	r1, [pc, #12]	; (411c0 <z_impl_k_thread_create+0x54>)
   411b2:	463a      	mov	r2, r7
   411b4:	4633      	mov	r3, r6
   411b6:	f104 0018 	add.w	r0, r4, #24
   411ba:	f000 fff3 	bl	421a4 <z_add_timeout>
   411be:	e7f4      	b.n	411aa <z_impl_k_thread_create+0x3e>
   411c0:	00048d9b 	.word	0x00048d9b

000411c4 <z_init_static_threads>:
{
   411c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   411c8:	4c29      	ldr	r4, [pc, #164]	; (41270 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   411ca:	4d2a      	ldr	r5, [pc, #168]	; (41274 <z_init_static_threads+0xb0>)
{
   411cc:	b087      	sub	sp, #28
   411ce:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   411d0:	42ae      	cmp	r6, r5
   411d2:	f104 0430 	add.w	r4, r4, #48	; 0x30
   411d6:	d30f      	bcc.n	411f8 <z_init_static_threads+0x34>
	k_sched_lock();
   411d8:	f000 fc7a 	bl	41ad0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   411dc:	4c24      	ldr	r4, [pc, #144]	; (41270 <z_init_static_threads+0xac>)
   411de:	f8df 9098 	ldr.w	r9, [pc, #152]	; 41278 <z_init_static_threads+0xb4>
   411e2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   411e6:	f240 37e7 	movw	r7, #999	; 0x3e7
   411ea:	42ac      	cmp	r4, r5
   411ec:	d320      	bcc.n	41230 <z_init_static_threads+0x6c>
}
   411ee:	b007      	add	sp, #28
   411f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   411f4:	f000 be34 	b.w	41e60 <k_sched_unlock>
		z_setup_new_thread(
   411f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   411fc:	9305      	str	r3, [sp, #20]
   411fe:	f854 3c10 	ldr.w	r3, [r4, #-16]
   41202:	9304      	str	r3, [sp, #16]
   41204:	f854 3c14 	ldr.w	r3, [r4, #-20]
   41208:	9303      	str	r3, [sp, #12]
   4120a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   4120e:	9302      	str	r3, [sp, #8]
   41210:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   41214:	9301      	str	r3, [sp, #4]
   41216:	f854 3c20 	ldr.w	r3, [r4, #-32]
   4121a:	9300      	str	r3, [sp, #0]
   4121c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   41220:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   41224:	f7ff ff72 	bl	4110c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   41228:	f854 3c30 	ldr.w	r3, [r4, #-48]
   4122c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   4122e:	e7ce      	b.n	411ce <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   41230:	6a63      	ldr	r3, [r4, #36]	; 0x24
   41232:	1c5a      	adds	r2, r3, #1
   41234:	d00d      	beq.n	41252 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   41236:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   4123a:	2100      	movs	r1, #0
   4123c:	4638      	mov	r0, r7
   4123e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   41242:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   41246:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   4124a:	d104      	bne.n	41256 <z_init_static_threads+0x92>
	z_sched_start(thread);
   4124c:	4640      	mov	r0, r8
   4124e:	f000 fd1f 	bl	41c90 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   41252:	3430      	adds	r4, #48	; 0x30
   41254:	e7c9      	b.n	411ea <z_init_static_threads+0x26>
   41256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   4125a:	2300      	movs	r3, #0
   4125c:	f7e4 ff50 	bl	26100 <__aeabi_uldivmod>
   41260:	4602      	mov	r2, r0
   41262:	460b      	mov	r3, r1
   41264:	f108 0018 	add.w	r0, r8, #24
   41268:	4649      	mov	r1, r9
   4126a:	f000 ff9b 	bl	421a4 <z_add_timeout>
   4126e:	e7f0      	b.n	41252 <z_init_static_threads+0x8e>
   41270:	20000a2c 	.word	0x20000a2c
   41274:	20000a2c 	.word	0x20000a2c
   41278:	00048d9b 	.word	0x00048d9b

0004127c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   4127c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   4127e:	4c0b      	ldr	r4, [pc, #44]	; (412ac <idle+0x30>)
	return !z_sys_post_kernel;
   41280:	4d0b      	ldr	r5, [pc, #44]	; (412b0 <idle+0x34>)
	__asm__ volatile(
   41282:	f04f 0220 	mov.w	r2, #32
   41286:	f3ef 8311 	mrs	r3, BASEPRI
   4128a:	f382 8812 	msr	BASEPRI_MAX, r2
   4128e:	f3bf 8f6f 	isb	sy
   41292:	f007 fe3d 	bl	48f10 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   41296:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   41298:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   4129a:	b913      	cbnz	r3, 412a2 <idle+0x26>
	arch_cpu_idle();
   4129c:	f7e8 feba 	bl	2a014 <arch_cpu_idle>
}
   412a0:	e7ef      	b.n	41282 <idle+0x6>
   412a2:	f7e8 fcb3 	bl	29c0c <pm_system_suspend>
   412a6:	2800      	cmp	r0, #0
   412a8:	d1eb      	bne.n	41282 <idle+0x6>
   412aa:	e7f7      	b.n	4129c <idle+0x20>
   412ac:	20003b04 	.word	0x20003b04
   412b0:	20003c80 	.word	0x20003c80

000412b4 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   412b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   412b8:	4604      	mov	r4, r0
   412ba:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   412bc:	f100 0808 	add.w	r8, r0, #8
   412c0:	f04f 0120 	mov.w	r1, #32
   412c4:	f3ef 8711 	mrs	r7, BASEPRI
   412c8:	f381 8812 	msr	BASEPRI_MAX, r1
   412cc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   412d0:	6a05      	ldr	r5, [r0, #32]
   412d2:	68c1      	ldr	r1, [r0, #12]
   412d4:	428d      	cmp	r5, r1
   412d6:	d22f      	bcs.n	41338 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   412d8:	f007 fdbf 	bl	48e5a <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   412dc:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   412de:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   412e0:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   412e2:	b178      	cbz	r0, 41304 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   412e4:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   412e6:	6940      	ldr	r0, [r0, #20]
   412e8:	f003 fd8b 	bl	44e02 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   412ec:	4628      	mov	r0, r5
   412ee:	67ec      	str	r4, [r5, #124]	; 0x7c
   412f0:	f007 fd43 	bl	48d7a <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   412f4:	4640      	mov	r0, r8
   412f6:	4639      	mov	r1, r7
   412f8:	f000 fbd8 	bl	41aac <z_reschedule>
			return 0;
   412fc:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   412fe:	b002      	add	sp, #8
   41300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   41304:	69e0      	ldr	r0, [r4, #28]
   41306:	f003 fd7c 	bl	44e02 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   4130a:	69e3      	ldr	r3, [r4, #28]
   4130c:	68a2      	ldr	r2, [r4, #8]
   4130e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   41310:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   41312:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   41314:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   41316:	bf04      	itt	eq
   41318:	6923      	ldreq	r3, [r4, #16]
   4131a:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   4131c:	6a23      	ldr	r3, [r4, #32]
   4131e:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   41320:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   41324:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   41326:	2110      	movs	r1, #16
   41328:	f007 ffac 	bl	49284 <z_handle_obj_poll_events>
		result = 0;
   4132c:	2000      	movs	r0, #0
	__asm__ volatile(
   4132e:	f387 8811 	msr	BASEPRI, r7
   41332:	f3bf 8f6f 	isb	sy
	return result;
   41336:	e7e2      	b.n	412fe <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   41338:	ea52 0103 	orrs.w	r1, r2, r3
   4133c:	d00a      	beq.n	41354 <z_impl_k_msgq_put+0xa0>
		_current->base.swap_data = (void *) data;
   4133e:	4907      	ldr	r1, [pc, #28]	; (4135c <z_impl_k_msgq_put+0xa8>)
   41340:	6889      	ldr	r1, [r1, #8]
   41342:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   41344:	e9cd 2300 	strd	r2, r3, [sp]
   41348:	4639      	mov	r1, r7
   4134a:	4602      	mov	r2, r0
   4134c:	4640      	mov	r0, r8
   4134e:	f000 fcfb 	bl	41d48 <z_pend_curr>
		return result;
   41352:	e7d4      	b.n	412fe <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   41354:	f06f 0022 	mvn.w	r0, #34	; 0x22
   41358:	e7e9      	b.n	4132e <z_impl_k_msgq_put+0x7a>
   4135a:	bf00      	nop
   4135c:	20003b04 	.word	0x20003b04

00041360 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   41360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   41362:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   41364:	f104 0708 	add.w	r7, r4, #8
{
   41368:	4608      	mov	r0, r1
	__asm__ volatile(
   4136a:	f04f 0120 	mov.w	r1, #32
   4136e:	f3ef 8611 	mrs	r6, BASEPRI
   41372:	f381 8812 	msr	BASEPRI_MAX, r1
   41376:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   4137a:	6a21      	ldr	r1, [r4, #32]
   4137c:	2900      	cmp	r1, #0
   4137e:	d031      	beq.n	413e4 <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   41380:	68a2      	ldr	r2, [r4, #8]
   41382:	69a1      	ldr	r1, [r4, #24]
   41384:	f003 fd3d 	bl	44e02 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   41388:	69a3      	ldr	r3, [r4, #24]
   4138a:	68a2      	ldr	r2, [r4, #8]
   4138c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   4138e:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   41390:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   41392:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   41394:	bf04      	itt	eq
   41396:	6923      	ldreq	r3, [r4, #16]
   41398:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   4139a:	6a23      	ldr	r3, [r4, #32]
   4139c:	3b01      	subs	r3, #1
   4139e:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   413a0:	4620      	mov	r0, r4
   413a2:	f007 fd5a 	bl	48e5a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   413a6:	4605      	mov	r5, r0
   413a8:	b360      	cbz	r0, 41404 <z_impl_k_msgq_get+0xa4>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   413aa:	6941      	ldr	r1, [r0, #20]
   413ac:	68a2      	ldr	r2, [r4, #8]
   413ae:	69e0      	ldr	r0, [r4, #28]
   413b0:	f003 fd27 	bl	44e02 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   413b4:	69e3      	ldr	r3, [r4, #28]
   413b6:	68a2      	ldr	r2, [r4, #8]
   413b8:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   413ba:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   413bc:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   413be:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   413c0:	bf04      	itt	eq
   413c2:	6923      	ldreq	r3, [r4, #16]
   413c4:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   413c6:	6a23      	ldr	r3, [r4, #32]
   413c8:	3301      	adds	r3, #1
   413ca:	6223      	str	r3, [r4, #32]
   413cc:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   413ce:	4628      	mov	r0, r5
   413d0:	67ec      	str	r4, [r5, #124]	; 0x7c
   413d2:	f007 fcd2 	bl	48d7a <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   413d6:	4638      	mov	r0, r7
   413d8:	4631      	mov	r1, r6
   413da:	f000 fb67 	bl	41aac <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   413de:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   413e0:	b003      	add	sp, #12
   413e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   413e4:	ea52 0103 	orrs.w	r1, r2, r3
   413e8:	d00a      	beq.n	41400 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   413ea:	4909      	ldr	r1, [pc, #36]	; (41410 <z_impl_k_msgq_get+0xb0>)
   413ec:	6889      	ldr	r1, [r1, #8]
   413ee:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   413f0:	e9cd 2300 	strd	r2, r3, [sp]
   413f4:	4631      	mov	r1, r6
   413f6:	4622      	mov	r2, r4
   413f8:	4638      	mov	r0, r7
   413fa:	f000 fca5 	bl	41d48 <z_pend_curr>
		return result;
   413fe:	e7ef      	b.n	413e0 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   41400:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   41404:	f386 8811 	msr	BASEPRI, r6
   41408:	f3bf 8f6f 	isb	sy
	return result;
   4140c:	e7e8      	b.n	413e0 <z_impl_k_msgq_get+0x80>
   4140e:	bf00      	nop
   41410:	20003b04 	.word	0x20003b04

00041414 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   41414:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   41418:	4604      	mov	r4, r0
   4141a:	4617      	mov	r7, r2
   4141c:	461e      	mov	r6, r3
	__asm__ volatile(
   4141e:	f04f 0320 	mov.w	r3, #32
   41422:	f3ef 8811 	mrs	r8, BASEPRI
   41426:	f383 8812 	msr	BASEPRI_MAX, r3
   4142a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   4142e:	68c3      	ldr	r3, [r0, #12]
   41430:	4a32      	ldr	r2, [pc, #200]	; (414fc <z_impl_k_mutex_lock+0xe8>)
   41432:	b16b      	cbz	r3, 41450 <z_impl_k_mutex_lock+0x3c>
   41434:	6880      	ldr	r0, [r0, #8]
   41436:	6891      	ldr	r1, [r2, #8]
   41438:	4288      	cmp	r0, r1
   4143a:	d019      	beq.n	41470 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   4143c:	ea57 0306 	orrs.w	r3, r7, r6
   41440:	d118      	bne.n	41474 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   41442:	f388 8811 	msr	BASEPRI, r8
   41446:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   4144a:	f06f 000f 	mvn.w	r0, #15
   4144e:	e00c      	b.n	4146a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   41450:	6891      	ldr	r1, [r2, #8]
   41452:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   41456:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   41458:	3301      	adds	r3, #1
   4145a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   4145c:	6893      	ldr	r3, [r2, #8]
   4145e:	60a3      	str	r3, [r4, #8]
   41460:	f388 8811 	msr	BASEPRI, r8
   41464:	f3bf 8f6f 	isb	sy
		return 0;
   41468:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   4146a:	b002      	add	sp, #8
   4146c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   41470:	6921      	ldr	r1, [r4, #16]
   41472:	e7f0      	b.n	41456 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   41474:	f991 100e 	ldrsb.w	r1, [r1, #14]
   41478:	f990 300e 	ldrsb.w	r3, [r0, #14]
   4147c:	4299      	cmp	r1, r3
   4147e:	bfa8      	it	ge
   41480:	4619      	movge	r1, r3
   41482:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   41486:	4291      	cmp	r1, r2
   41488:	bfb8      	it	lt
   4148a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   4148c:	428b      	cmp	r3, r1
   4148e:	dd2e      	ble.n	414ee <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   41490:	f007 fa49 	bl	48926 <adjust_owner_prio.isra.0>
   41494:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   41496:	e9cd 7600 	strd	r7, r6, [sp]
   4149a:	4819      	ldr	r0, [pc, #100]	; (41500 <z_impl_k_mutex_lock+0xec>)
   4149c:	4622      	mov	r2, r4
   4149e:	4641      	mov	r1, r8
   414a0:	f000 fc52 	bl	41d48 <z_pend_curr>
	if (got_mutex == 0) {
   414a4:	2800      	cmp	r0, #0
   414a6:	d0e0      	beq.n	4146a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   414a8:	f04f 0320 	mov.w	r3, #32
   414ac:	f3ef 8611 	mrs	r6, BASEPRI
   414b0:	f383 8812 	msr	BASEPRI_MAX, r3
   414b4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   414b8:	6823      	ldr	r3, [r4, #0]
   414ba:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   414bc:	429c      	cmp	r4, r3
   414be:	d00a      	beq.n	414d6 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   414c0:	b14b      	cbz	r3, 414d6 <z_impl_k_mutex_lock+0xc2>
   414c2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   414c6:	4299      	cmp	r1, r3
   414c8:	bfa8      	it	ge
   414ca:	4619      	movge	r1, r3
   414cc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   414d0:	4299      	cmp	r1, r3
   414d2:	bfb8      	it	lt
   414d4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   414d6:	68a0      	ldr	r0, [r4, #8]
   414d8:	f007 fa25 	bl	48926 <adjust_owner_prio.isra.0>
   414dc:	b900      	cbnz	r0, 414e0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   414de:	b145      	cbz	r5, 414f2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   414e0:	4807      	ldr	r0, [pc, #28]	; (41500 <z_impl_k_mutex_lock+0xec>)
   414e2:	4631      	mov	r1, r6
   414e4:	f000 fae2 	bl	41aac <z_reschedule>
	return -EAGAIN;
   414e8:	f06f 000a 	mvn.w	r0, #10
   414ec:	e7bd      	b.n	4146a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   414ee:	2500      	movs	r5, #0
   414f0:	e7d1      	b.n	41496 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   414f2:	f386 8811 	msr	BASEPRI, r6
   414f6:	f3bf 8f6f 	isb	sy
   414fa:	e7f5      	b.n	414e8 <z_impl_k_mutex_lock+0xd4>
   414fc:	20003b04 	.word	0x20003b04
   41500:	20003c81 	.word	0x20003c81

00041504 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   41504:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   41506:	6883      	ldr	r3, [r0, #8]
{
   41508:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   4150a:	2b00      	cmp	r3, #0
   4150c:	d032      	beq.n	41574 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   4150e:	4a1c      	ldr	r2, [pc, #112]	; (41580 <z_impl_k_mutex_unlock+0x7c>)
   41510:	6892      	ldr	r2, [r2, #8]
   41512:	4293      	cmp	r3, r2
   41514:	d131      	bne.n	4157a <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   41516:	7bda      	ldrb	r2, [r3, #15]
   41518:	3a01      	subs	r2, #1
   4151a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   4151c:	68c3      	ldr	r3, [r0, #12]
   4151e:	2b01      	cmp	r3, #1
   41520:	d905      	bls.n	4152e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   41522:	3b01      	subs	r3, #1
   41524:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   41526:	f000 fc9b 	bl	41e60 <k_sched_unlock>

	return 0;
   4152a:	2000      	movs	r0, #0
}
   4152c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   4152e:	f04f 0320 	mov.w	r3, #32
   41532:	f3ef 8511 	mrs	r5, BASEPRI
   41536:	f383 8812 	msr	BASEPRI_MAX, r3
   4153a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   4153e:	6901      	ldr	r1, [r0, #16]
   41540:	6880      	ldr	r0, [r0, #8]
   41542:	f007 f9f0 	bl	48926 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   41546:	4620      	mov	r0, r4
   41548:	f007 fc87 	bl	48e5a <z_unpend_first_thread>
	mutex->owner = new_owner;
   4154c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   4154e:	b158      	cbz	r0, 41568 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   41550:	f990 200e 	ldrsb.w	r2, [r0, #14]
   41554:	6122      	str	r2, [r4, #16]
   41556:	2200      	movs	r2, #0
   41558:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   4155a:	f007 fc0e 	bl	48d7a <z_ready_thread>
		z_reschedule(&lock, key);
   4155e:	4809      	ldr	r0, [pc, #36]	; (41584 <z_impl_k_mutex_unlock+0x80>)
   41560:	4629      	mov	r1, r5
   41562:	f000 faa3 	bl	41aac <z_reschedule>
   41566:	e7de      	b.n	41526 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   41568:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   4156a:	f385 8811 	msr	BASEPRI, r5
   4156e:	f3bf 8f6f 	isb	sy
   41572:	e7d8      	b.n	41526 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   41574:	f06f 0015 	mvn.w	r0, #21
   41578:	e7d8      	b.n	4152c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   4157a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4157e:	e7d5      	b.n	4152c <z_impl_k_mutex_unlock+0x28>
   41580:	20003b04 	.word	0x20003b04
   41584:	20003c81 	.word	0x20003c81

00041588 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   41588:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4158a:	4611      	mov	r1, r2
	__asm__ volatile(
   4158c:	f04f 0220 	mov.w	r2, #32
   41590:	f3ef 8511 	mrs	r5, BASEPRI
   41594:	f382 8812 	msr	BASEPRI_MAX, r2
   41598:	f3bf 8f6f 	isb	sy
   4159c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   4159e:	b19c      	cbz	r4, 415c8 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   415a0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   415a2:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   415a4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   415a8:	4294      	cmp	r4, r2
	list->head = node;
   415aa:	6003      	str	r3, [r0, #0]
	list->tail = node;
   415ac:	bf08      	it	eq
   415ae:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   415b0:	2101      	movs	r1, #1
   415b2:	4620      	mov	r0, r4
   415b4:	f007 fa2b 	bl	48a0e <z_queue_node_peek>
   415b8:	4604      	mov	r4, r0
	__asm__ volatile(
   415ba:	f385 8811 	msr	BASEPRI, r5
   415be:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   415c2:	4620      	mov	r0, r4
   415c4:	b003      	add	sp, #12
   415c6:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   415c8:	ea51 0203 	orrs.w	r2, r1, r3
   415cc:	d0f5      	beq.n	415ba <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   415ce:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   415d2:	e9cd 1300 	strd	r1, r3, [sp]
   415d6:	4610      	mov	r0, r2
   415d8:	4629      	mov	r1, r5
   415da:	f000 fbb5 	bl	41d48 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   415de:	2800      	cmp	r0, #0
   415e0:	d1ef      	bne.n	415c2 <z_impl_k_queue_get+0x3a>
   415e2:	4b02      	ldr	r3, [pc, #8]	; (415ec <z_impl_k_queue_get+0x64>)
   415e4:	689b      	ldr	r3, [r3, #8]
   415e6:	695c      	ldr	r4, [r3, #20]
   415e8:	e7eb      	b.n	415c2 <z_impl_k_queue_get+0x3a>
   415ea:	bf00      	nop
   415ec:	20003b04 	.word	0x20003b04

000415f0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   415f0:	b538      	push	{r3, r4, r5, lr}
   415f2:	4604      	mov	r4, r0
	__asm__ volatile(
   415f4:	f04f 0320 	mov.w	r3, #32
   415f8:	f3ef 8511 	mrs	r5, BASEPRI
   415fc:	f383 8812 	msr	BASEPRI_MAX, r3
   41600:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   41604:	f007 fc29 	bl	48e5a <z_unpend_first_thread>

	if (thread != NULL) {
   41608:	b148      	cbz	r0, 4161e <z_impl_k_sem_give+0x2e>
   4160a:	2200      	movs	r2, #0
   4160c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   4160e:	f007 fbb4 	bl	48d7a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   41612:	4629      	mov	r1, r5
   41614:	4808      	ldr	r0, [pc, #32]	; (41638 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   41616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   4161a:	f000 ba47 	b.w	41aac <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   4161e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   41622:	429a      	cmp	r2, r3
   41624:	bf18      	it	ne
   41626:	3301      	addne	r3, #1
   41628:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   4162a:	2102      	movs	r1, #2
   4162c:	f104 0010 	add.w	r0, r4, #16
   41630:	f007 fe28 	bl	49284 <z_handle_obj_poll_events>
}
   41634:	e7ed      	b.n	41612 <z_impl_k_sem_give+0x22>
   41636:	bf00      	nop
   41638:	20003c81 	.word	0x20003c81

0004163c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   4163c:	b513      	push	{r0, r1, r4, lr}
   4163e:	f04f 0420 	mov.w	r4, #32
   41642:	f3ef 8111 	mrs	r1, BASEPRI
   41646:	f384 8812 	msr	BASEPRI_MAX, r4
   4164a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   4164e:	6884      	ldr	r4, [r0, #8]
   41650:	b144      	cbz	r4, 41664 <z_impl_k_sem_take+0x28>
		sem->count--;
   41652:	3c01      	subs	r4, #1
   41654:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   41656:	f381 8811 	msr	BASEPRI, r1
   4165a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   4165e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   41660:	b002      	add	sp, #8
   41662:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   41664:	ea52 0403 	orrs.w	r4, r2, r3
   41668:	d106      	bne.n	41678 <z_impl_k_sem_take+0x3c>
   4166a:	f381 8811 	msr	BASEPRI, r1
   4166e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   41672:	f06f 000f 	mvn.w	r0, #15
   41676:	e7f3      	b.n	41660 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   41678:	e9cd 2300 	strd	r2, r3, [sp]
   4167c:	4602      	mov	r2, r0
   4167e:	4802      	ldr	r0, [pc, #8]	; (41688 <z_impl_k_sem_take+0x4c>)
   41680:	f000 fb62 	bl	41d48 <z_pend_curr>
	return ret;
   41684:	e7ec      	b.n	41660 <z_impl_k_sem_take+0x24>
   41686:	bf00      	nop
   41688:	20003c81 	.word	0x20003c81

0004168c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   4168c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   4168e:	4b09      	ldr	r3, [pc, #36]	; (416b4 <k_sys_work_q_init+0x28>)
   41690:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   41692:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   41694:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   41696:	9300      	str	r3, [sp, #0]
   41698:	4907      	ldr	r1, [pc, #28]	; (416b8 <k_sys_work_q_init+0x2c>)
   4169a:	4808      	ldr	r0, [pc, #32]	; (416bc <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   4169c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   416a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   416a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   416a8:	f000 f91e 	bl	418e8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   416ac:	4620      	mov	r0, r4
   416ae:	b004      	add	sp, #16
   416b0:	bd10      	pop	{r4, pc}
   416b2:	bf00      	nop
   416b4:	0004b549 	.word	0x0004b549
   416b8:	200062f0 	.word	0x200062f0
   416bc:	20001910 	.word	0x20001910

000416c0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   416c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   416c4:	f8df 9130 	ldr.w	r9, [pc, #304]	; 417f8 <work_queue_main+0x138>
   416c8:	b085      	sub	sp, #20
   416ca:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   416cc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   416d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	__asm__ volatile(
   416d4:	f04f 0320 	mov.w	r3, #32
   416d8:	f3ef 8811 	mrs	r8, BASEPRI
   416dc:	f383 8812 	msr	BASEPRI_MAX, r3
   416e0:	f3bf 8f6f 	isb	sy
   416e4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   416e8:	b98d      	cbnz	r5, 4170e <work_queue_main+0x4e>
		} else if (flag_test_and_clear(&queue->flags,
   416ea:	2102      	movs	r1, #2
   416ec:	f104 0098 	add.w	r0, r4, #152	; 0x98
   416f0:	f007 fa06 	bl	48b00 <flag_test_and_clear>
   416f4:	2800      	cmp	r0, #0
   416f6:	d135      	bne.n	41764 <work_queue_main+0xa4>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   416f8:	2300      	movs	r3, #0
   416fa:	e9cd 6700 	strd	r6, r7, [sp]
   416fe:	9302      	str	r3, [sp, #8]
   41700:	f104 0288 	add.w	r2, r4, #136	; 0x88
   41704:	4641      	mov	r1, r8
   41706:	483d      	ldr	r0, [pc, #244]	; (417fc <work_queue_main+0x13c>)
   41708:	f000 fcd6 	bl	420b8 <z_sched_wait>
			continue;
   4170c:	e7e2      	b.n	416d4 <work_queue_main+0x14>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4170e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   41712:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   41714:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   41718:	4295      	cmp	r5, r2
   4171a:	d101      	bne.n	41720 <work_queue_main+0x60>
	list->tail = node;
   4171c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   41720:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   41724:	f043 0302 	orr.w	r3, r3, #2
   41728:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   4172c:	68eb      	ldr	r3, [r5, #12]
   4172e:	f023 0304 	bic.w	r3, r3, #4
   41732:	f043 0301 	orr.w	r3, r3, #1
   41736:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   41738:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   4173a:	f388 8811 	msr	BASEPRI, r8
   4173e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   41742:	4628      	mov	r0, r5
   41744:	4798      	blx	r3
	__asm__ volatile(
   41746:	f04f 0320 	mov.w	r3, #32
   4174a:	f3ef 8b11 	mrs	fp, BASEPRI
   4174e:	f383 8812 	msr	BASEPRI_MAX, r3
   41752:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   41756:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41758:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   4175a:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   4175e:	d40b      	bmi.n	41778 <work_queue_main+0xb8>
	*flagp &= ~BIT(bit);
   41760:	60ea      	str	r2, [r5, #12]
   41762:	e00f      	b.n	41784 <work_queue_main+0xc4>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   41764:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   41768:	2200      	movs	r2, #0
   4176a:	2101      	movs	r1, #1
   4176c:	4628      	mov	r0, r5
   4176e:	f007 fb9c 	bl	48eaa <z_sched_wake>
   41772:	2800      	cmp	r0, #0
   41774:	d1f8      	bne.n	41768 <work_queue_main+0xa8>
   41776:	e7bf      	b.n	416f8 <work_queue_main+0x38>
	return list->head;
   41778:	f8d9 0000 	ldr.w	r0, [r9]
	*flagp &= ~BIT(bit);
   4177c:	f023 0303 	bic.w	r3, r3, #3
   41780:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   41782:	b970      	cbnz	r0, 417a2 <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   41784:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   41788:	f023 0302 	bic.w	r3, r3, #2
   4178c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   41790:	f38b 8811 	msr	BASEPRI, fp
   41794:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   41798:	05d8      	lsls	r0, r3, #23
   4179a:	d49b      	bmi.n	416d4 <work_queue_main+0x14>
	z_impl_k_yield();
   4179c:	f000 fb88 	bl	41eb0 <z_impl_k_yield>
}
   417a0:	e798      	b.n	416d4 <work_queue_main+0x14>
	return node->next;
   417a2:	f04f 0800 	mov.w	r8, #0
   417a6:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   417aa:	4642      	mov	r2, r8
		if (wc->work == work) {
   417ac:	6843      	ldr	r3, [r0, #4]
   417ae:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   417b0:	4601      	mov	r1, r0
		if (wc->work == work) {
   417b2:	d111      	bne.n	417d8 <work_queue_main+0x118>
	return node->next;
   417b4:	6803      	ldr	r3, [r0, #0]
	return list->tail;
   417b6:	f8d9 1004 	ldr.w	r1, [r9, #4]
Z_GENLIST_REMOVE(slist, snode)
   417ba:	f1b8 0f00 	cmp.w	r8, #0
   417be:	d113      	bne.n	417e8 <work_queue_main+0x128>
   417c0:	4288      	cmp	r0, r1
	list->head = node;
   417c2:	f8c9 3000 	str.w	r3, [r9]
Z_GENLIST_REMOVE(slist, snode)
   417c6:	d101      	bne.n	417cc <work_queue_main+0x10c>
	list->tail = node;
   417c8:	f8c9 3004 	str.w	r3, [r9, #4]
	parent->next = child;
   417cc:	f840 2b08 	str.w	r2, [r0], #8
	z_impl_k_sem_give(sem);
   417d0:	f7ff ff0e 	bl	415f0 <z_impl_k_sem_give>
}
   417d4:	4641      	mov	r1, r8
   417d6:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   417d8:	f1ba 0f00 	cmp.w	sl, #0
   417dc:	d0d2      	beq.n	41784 <work_queue_main+0xc4>
	return node->next;
   417de:	4650      	mov	r0, sl
   417e0:	4688      	mov	r8, r1
   417e2:	f8da a000 	ldr.w	sl, [sl]
   417e6:	e7e1      	b.n	417ac <work_queue_main+0xec>
Z_GENLIST_REMOVE(slist, snode)
   417e8:	4288      	cmp	r0, r1
	parent->next = child;
   417ea:	f8c8 3000 	str.w	r3, [r8]
	list->tail = node;
   417ee:	bf08      	it	eq
   417f0:	f8c9 8004 	streq.w	r8, [r9, #4]
}
   417f4:	e7ea      	b.n	417cc <work_queue_main+0x10c>
   417f6:	bf00      	nop
   417f8:	20003b2c 	.word	0x20003b2c
   417fc:	20003c81 	.word	0x20003c81

00041800 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   41800:	68c3      	ldr	r3, [r0, #12]
{
   41802:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   41804:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   41808:	079b      	lsls	r3, r3, #30
{
   4180a:	4605      	mov	r5, r0
   4180c:	460c      	mov	r4, r1
	if (ret) {
   4180e:	d50d      	bpl.n	4182c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   41810:	2201      	movs	r2, #1
   41812:	2100      	movs	r1, #0
   41814:	f104 0008 	add.w	r0, r4, #8
   41818:	f007 f962 	bl	48ae0 <z_impl_k_sem_init>
	parent->next = child;
   4181c:	2300      	movs	r3, #0
   4181e:	6023      	str	r3, [r4, #0]
	return list->tail;
   41820:	4b05      	ldr	r3, [pc, #20]	; (41838 <cancel_sync_locked+0x38>)
	canceler->work = work;
   41822:	6065      	str	r5, [r4, #4]
   41824:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   41826:	b91a      	cbnz	r2, 41830 <cancel_sync_locked+0x30>
	list->head = node;
   41828:	e9c3 4400 	strd	r4, r4, [r3]
}
   4182c:	4630      	mov	r0, r6
   4182e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   41830:	6014      	str	r4, [r2, #0]
	list->tail = node;
   41832:	605c      	str	r4, [r3, #4]
}
   41834:	e7fa      	b.n	4182c <cancel_sync_locked+0x2c>
   41836:	bf00      	nop
   41838:	20003b2c 	.word	0x20003b2c

0004183c <submit_to_queue_locked>:
{
   4183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   4183e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41840:	079a      	lsls	r2, r3, #30
{
   41842:	4604      	mov	r4, r0
   41844:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41846:	f3c3 0540 	ubfx	r5, r3, #1, #1
   4184a:	d41f      	bmi.n	4188c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   4184c:	075f      	lsls	r7, r3, #29
   4184e:	d41f      	bmi.n	41890 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   41850:	680a      	ldr	r2, [r1, #0]
   41852:	b90a      	cbnz	r2, 41858 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   41854:	6882      	ldr	r2, [r0, #8]
   41856:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   41858:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   4185a:	bf44      	itt	mi
   4185c:	68a3      	ldrmi	r3, [r4, #8]
   4185e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   41860:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   41862:	bf4c      	ite	mi
   41864:	2502      	movmi	r5, #2
		ret = 1;
   41866:	2501      	movpl	r5, #1
	if (queue == NULL) {
   41868:	b37f      	cbz	r7, 418ca <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   4186a:	4b1b      	ldr	r3, [pc, #108]	; (418d8 <submit_to_queue_locked+0x9c>)
   4186c:	689b      	ldr	r3, [r3, #8]
   4186e:	42bb      	cmp	r3, r7
   41870:	d111      	bne.n	41896 <submit_to_queue_locked+0x5a>
   41872:	f007 f846 	bl	48902 <k_is_in_isr>
   41876:	f080 0001 	eor.w	r0, r0, #1
   4187a:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   4187c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   41880:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   41882:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   41886:	d523      	bpl.n	418d0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   41888:	b13a      	cbz	r2, 4189a <submit_to_queue_locked+0x5e>
   4188a:	b940      	cbnz	r0, 4189e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   4188c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   41890:	2300      	movs	r3, #0
   41892:	6033      	str	r3, [r6, #0]
	return ret;
   41894:	e013      	b.n	418be <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   41896:	2000      	movs	r0, #0
   41898:	e7f0      	b.n	4187c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   4189a:	071b      	lsls	r3, r3, #28
   4189c:	d4f6      	bmi.n	4188c <submit_to_queue_locked+0x50>
	parent->next = child;
   4189e:	2300      	movs	r3, #0
   418a0:	6023      	str	r3, [r4, #0]
	return list->tail;
   418a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   418a6:	b963      	cbnz	r3, 418c2 <submit_to_queue_locked+0x86>
	list->head = node;
   418a8:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   418ac:	4638      	mov	r0, r7
   418ae:	f007 f940 	bl	48b32 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   418b2:	68e3      	ldr	r3, [r4, #12]
   418b4:	f043 0304 	orr.w	r3, r3, #4
   418b8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   418ba:	6833      	ldr	r3, [r6, #0]
   418bc:	60a3      	str	r3, [r4, #8]
}
   418be:	4628      	mov	r0, r5
   418c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   418c2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   418c4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   418c8:	e7f0      	b.n	418ac <submit_to_queue_locked+0x70>
		return -EINVAL;
   418ca:	f06f 0515 	mvn.w	r5, #21
   418ce:	e7df      	b.n	41890 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   418d0:	f06f 0512 	mvn.w	r5, #18
   418d4:	e7dc      	b.n	41890 <submit_to_queue_locked+0x54>
   418d6:	bf00      	nop
   418d8:	20003b04 	.word	0x20003b04

000418dc <k_work_submit>:
{
   418dc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   418de:	4801      	ldr	r0, [pc, #4]	; (418e4 <k_work_submit+0x8>)
   418e0:	f007 b987 	b.w	48bf2 <k_work_submit_to_queue>
   418e4:	20001910 	.word	0x20001910

000418e8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   418e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   418ea:	b089      	sub	sp, #36	; 0x24
   418ec:	4604      	mov	r4, r0
	list->head = NULL;
   418ee:	2000      	movs	r0, #0
	list->tail = NULL;
   418f0:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   418f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   418f6:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   418fa:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   418fe:	f104 0090 	add.w	r0, r4, #144	; 0x90
   41902:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   41906:	b31d      	cbz	r5, 41950 <k_work_queue_start+0x68>
   41908:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   4190a:	2800      	cmp	r0, #0
   4190c:	f240 1001 	movw	r0, #257	; 0x101
   41910:	bf08      	it	eq
   41912:	2001      	moveq	r0, #1
	*flagp = flags;
   41914:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   41918:	2000      	movs	r0, #0
   4191a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   4191e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   41922:	e9cd 3003 	strd	r3, r0, [sp, #12]
   41926:	e9cd 0001 	strd	r0, r0, [sp, #4]
   4192a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   4192e:	4b09      	ldr	r3, [pc, #36]	; (41954 <k_work_queue_start+0x6c>)
   41930:	9400      	str	r4, [sp, #0]
   41932:	4620      	mov	r0, r4
   41934:	f7ff fc1a 	bl	4116c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   41938:	b125      	cbz	r5, 41944 <k_work_queue_start+0x5c>
   4193a:	6829      	ldr	r1, [r5, #0]
   4193c:	b111      	cbz	r1, 41944 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   4193e:	4620      	mov	r0, r4
   41940:	f006 ffe5 	bl	4890e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   41944:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   41946:	b009      	add	sp, #36	; 0x24
   41948:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   4194c:	f006 bfe2 	b.w	48914 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   41950:	2001      	movs	r0, #1
   41952:	e7df      	b.n	41914 <k_work_queue_start+0x2c>
   41954:	000416c1 	.word	0x000416c1

00041958 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   41958:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4195a:	9001      	str	r0, [sp, #4]
   4195c:	4608      	mov	r0, r1
	__asm__ volatile(
   4195e:	f04f 0120 	mov.w	r1, #32
   41962:	f3ef 8411 	mrs	r4, BASEPRI
   41966:	f381 8812 	msr	BASEPRI_MAX, r1
   4196a:	f3bf 8f6f 	isb	sy
	return *flagp;
   4196e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   41970:	f011 0f0e 	tst.w	r1, #14
   41974:	d116      	bne.n	419a4 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   41976:	ea53 0502 	orrs.w	r5, r3, r2
   4197a:	d108      	bne.n	4198e <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   4197c:	a901      	add	r1, sp, #4
   4197e:	f7ff ff5d 	bl	4183c <submit_to_queue_locked>
	__asm__ volatile(
   41982:	f384 8811 	msr	BASEPRI, r4
   41986:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   4198a:	b003      	add	sp, #12
   4198c:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   4198e:	f041 0108 	orr.w	r1, r1, #8
   41992:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   41994:	9901      	ldr	r1, [sp, #4]
   41996:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   41998:	3010      	adds	r0, #16
   4199a:	4903      	ldr	r1, [pc, #12]	; (419a8 <k_work_schedule_for_queue+0x50>)
   4199c:	f000 fc02 	bl	421a4 <z_add_timeout>
	return ret;
   419a0:	2001      	movs	r0, #1
   419a2:	e7ee      	b.n	41982 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   419a4:	2000      	movs	r0, #0
   419a6:	e7ec      	b.n	41982 <k_work_schedule_for_queue+0x2a>
   419a8:	00048ba3 	.word	0x00048ba3

000419ac <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   419ac:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   419ae:	4801      	ldr	r0, [pc, #4]	; (419b4 <k_work_schedule+0x8>)
   419b0:	f7ff bfd2 	b.w	41958 <k_work_schedule_for_queue>
   419b4:	20001910 	.word	0x20001910

000419b8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   419b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   419ba:	460c      	mov	r4, r1
   419bc:	9001      	str	r0, [sp, #4]
   419be:	4616      	mov	r6, r2
   419c0:	461d      	mov	r5, r3
	__asm__ volatile(
   419c2:	f04f 0320 	mov.w	r3, #32
   419c6:	f3ef 8711 	mrs	r7, BASEPRI
   419ca:	f383 8812 	msr	BASEPRI_MAX, r3
   419ce:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   419d2:	4608      	mov	r0, r1
   419d4:	f007 f89f 	bl	48b16 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   419d8:	ea55 0306 	orrs.w	r3, r5, r6
   419dc:	d109      	bne.n	419f2 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   419de:	a901      	add	r1, sp, #4
   419e0:	4620      	mov	r0, r4
   419e2:	f7ff ff2b 	bl	4183c <submit_to_queue_locked>
	__asm__ volatile(
   419e6:	f387 8811 	msr	BASEPRI, r7
   419ea:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   419ee:	b003      	add	sp, #12
   419f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   419f2:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   419f4:	4906      	ldr	r1, [pc, #24]	; (41a10 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   419f6:	f043 0308 	orr.w	r3, r3, #8
   419fa:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   419fc:	9b01      	ldr	r3, [sp, #4]
   419fe:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   41a00:	f104 0010 	add.w	r0, r4, #16
   41a04:	4632      	mov	r2, r6
   41a06:	462b      	mov	r3, r5
   41a08:	f000 fbcc 	bl	421a4 <z_add_timeout>
	return ret;
   41a0c:	2001      	movs	r0, #1
   41a0e:	e7ea      	b.n	419e6 <k_work_reschedule_for_queue+0x2e>
   41a10:	00048ba3 	.word	0x00048ba3

00041a14 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   41a14:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   41a16:	4801      	ldr	r0, [pc, #4]	; (41a1c <k_work_reschedule+0x8>)
   41a18:	f7ff bfce 	b.w	419b8 <k_work_reschedule_for_queue>
   41a1c:	20001910 	.word	0x20001910

00041a20 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   41a20:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   41a22:	4c08      	ldr	r4, [pc, #32]	; (41a44 <z_reset_time_slice+0x24>)
   41a24:	6823      	ldr	r3, [r4, #0]
   41a26:	b15b      	cbz	r3, 41a40 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   41a28:	f7fd fbc8 	bl	3f1bc <sys_clock_elapsed>
   41a2c:	4603      	mov	r3, r0
   41a2e:	6820      	ldr	r0, [r4, #0]
   41a30:	4a05      	ldr	r2, [pc, #20]	; (41a48 <z_reset_time_slice+0x28>)
   41a32:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   41a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   41a38:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   41a3a:	2100      	movs	r1, #0
   41a3c:	f007 ba78 	b.w	48f30 <z_set_timeout_expiry>
}
   41a40:	bd10      	pop	{r4, pc}
   41a42:	bf00      	nop
   41a44:	20003b3c 	.word	0x20003b3c
   41a48:	20003b04 	.word	0x20003b04

00041a4c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   41a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41a4e:	4604      	mov	r4, r0
   41a50:	460d      	mov	r5, r1
	__asm__ volatile(
   41a52:	f04f 0320 	mov.w	r3, #32
   41a56:	f3ef 8611 	mrs	r6, BASEPRI
   41a5a:	f383 8812 	msr	BASEPRI_MAX, r3
   41a5e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   41a62:	4b0f      	ldr	r3, [pc, #60]	; (41aa0 <k_sched_time_slice_set+0x54>)
   41a64:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   41a66:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   41a6a:	f240 30e7 	movw	r0, #999	; 0x3e7
   41a6e:	6119      	str	r1, [r3, #16]
   41a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   41a74:	2300      	movs	r3, #0
   41a76:	fbe4 0107 	umlal	r0, r1, r4, r7
   41a7a:	f7e4 fb41 	bl	26100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   41a7e:	2c00      	cmp	r4, #0
   41a80:	4b08      	ldr	r3, [pc, #32]	; (41aa4 <k_sched_time_slice_set+0x58>)
   41a82:	dc09      	bgt.n	41a98 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   41a84:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   41a86:	4b08      	ldr	r3, [pc, #32]	; (41aa8 <k_sched_time_slice_set+0x5c>)
   41a88:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   41a8a:	f7ff ffc9 	bl	41a20 <z_reset_time_slice>
	__asm__ volatile(
   41a8e:	f386 8811 	msr	BASEPRI, r6
   41a92:	f3bf 8f6f 	isb	sy
	}
}
   41a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   41a98:	2802      	cmp	r0, #2
   41a9a:	bfb8      	it	lt
   41a9c:	2002      	movlt	r0, #2
   41a9e:	e7f1      	b.n	41a84 <k_sched_time_slice_set+0x38>
   41aa0:	20003b04 	.word	0x20003b04
   41aa4:	20003b3c 	.word	0x20003b3c
   41aa8:	20003b38 	.word	0x20003b38

00041aac <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   41aac:	b949      	cbnz	r1, 41ac2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   41aae:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   41ab2:	b930      	cbnz	r0, 41ac2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   41ab4:	4b05      	ldr	r3, [pc, #20]	; (41acc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   41ab6:	69da      	ldr	r2, [r3, #28]
   41ab8:	689b      	ldr	r3, [r3, #8]
   41aba:	429a      	cmp	r2, r3
   41abc:	d001      	beq.n	41ac2 <z_reschedule+0x16>
	ret = arch_swap(key);
   41abe:	f7e8 bb3f 	b.w	2a140 <arch_swap>
   41ac2:	f381 8811 	msr	BASEPRI, r1
   41ac6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   41aca:	4770      	bx	lr
   41acc:	20003b04 	.word	0x20003b04

00041ad0 <k_sched_lock>:
	__asm__ volatile(
   41ad0:	f04f 0320 	mov.w	r3, #32
   41ad4:	f3ef 8111 	mrs	r1, BASEPRI
   41ad8:	f383 8812 	msr	BASEPRI_MAX, r3
   41adc:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   41ae0:	4b04      	ldr	r3, [pc, #16]	; (41af4 <k_sched_lock+0x24>)
   41ae2:	689a      	ldr	r2, [r3, #8]
   41ae4:	7bd3      	ldrb	r3, [r2, #15]
   41ae6:	3b01      	subs	r3, #1
   41ae8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   41aea:	f381 8811 	msr	BASEPRI, r1
   41aee:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   41af2:	4770      	bx	lr
   41af4:	20003b04 	.word	0x20003b04

00041af8 <update_cache>:
{
   41af8:	b538      	push	{r3, r4, r5, lr}
   41afa:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   41afc:	480b      	ldr	r0, [pc, #44]	; (41b2c <update_cache+0x34>)
   41afe:	4d0c      	ldr	r5, [pc, #48]	; (41b30 <update_cache+0x38>)
   41b00:	f007 f935 	bl	48d6e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   41b04:	4604      	mov	r4, r0
   41b06:	b900      	cbnz	r0, 41b0a <update_cache+0x12>
   41b08:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   41b0a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   41b0c:	b93a      	cbnz	r2, 41b1e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   41b0e:	7b5a      	ldrb	r2, [r3, #13]
   41b10:	06d2      	lsls	r2, r2, #27
   41b12:	d104      	bne.n	41b1e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   41b14:	69a2      	ldr	r2, [r4, #24]
   41b16:	b912      	cbnz	r2, 41b1e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   41b18:	89da      	ldrh	r2, [r3, #14]
   41b1a:	2a7f      	cmp	r2, #127	; 0x7f
   41b1c:	d804      	bhi.n	41b28 <update_cache+0x30>
		if (thread != _current) {
   41b1e:	429c      	cmp	r4, r3
   41b20:	d001      	beq.n	41b26 <update_cache+0x2e>
			z_reset_time_slice();
   41b22:	f7ff ff7d 	bl	41a20 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   41b26:	4623      	mov	r3, r4
   41b28:	61eb      	str	r3, [r5, #28]
}
   41b2a:	bd38      	pop	{r3, r4, r5, pc}
   41b2c:	20003b24 	.word	0x20003b24
   41b30:	20003b04 	.word	0x20003b04

00041b34 <move_thread_to_end_of_prio_q>:
{
   41b34:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   41b36:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   41b3a:	7b43      	ldrb	r3, [r0, #13]
   41b3c:	2a00      	cmp	r2, #0
{
   41b3e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   41b40:	da04      	bge.n	41b4c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41b46:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   41b48:	f007 f8bc 	bl	48cc4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   41b4c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   41b4e:	4a15      	ldr	r2, [pc, #84]	; (41ba4 <move_thread_to_end_of_prio_q+0x70>)
   41b50:	f063 037f 	orn	r3, r3, #127	; 0x7f
   41b54:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   41b56:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41b5a:	f102 0420 	add.w	r4, r2, #32
   41b5e:	42a3      	cmp	r3, r4
   41b60:	d01a      	beq.n	41b98 <move_thread_to_end_of_prio_q+0x64>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41b62:	b1cb      	cbz	r3, 41b98 <move_thread_to_end_of_prio_q+0x64>
	int32_t b1 = thread_1->base.prio;
   41b64:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   41b68:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   41b6c:	42b5      	cmp	r5, r6
   41b6e:	d00e      	beq.n	41b8e <move_thread_to_end_of_prio_q+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   41b70:	42ae      	cmp	r6, r5
   41b72:	dd0c      	ble.n	41b8e <move_thread_to_end_of_prio_q+0x5a>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   41b74:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   41b76:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   41b7a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   41b7c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   41b7e:	6890      	ldr	r0, [r2, #8]
   41b80:	1a43      	subs	r3, r0, r1
   41b82:	4258      	negs	r0, r3
}
   41b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   41b88:	4158      	adcs	r0, r3
   41b8a:	f7ff bfb5 	b.w	41af8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   41b8e:	4298      	cmp	r0, r3
   41b90:	d002      	beq.n	41b98 <move_thread_to_end_of_prio_q+0x64>
   41b92:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41b94:	2b00      	cmp	r3, #0
   41b96:	d1e7      	bne.n	41b68 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   41b98:	e9c1 4000 	strd	r4, r0, [r1]
	tail->next = node;
   41b9c:	6001      	str	r1, [r0, #0]
	list->tail = node;
   41b9e:	6251      	str	r1, [r2, #36]	; 0x24
}
   41ba0:	e7ed      	b.n	41b7e <move_thread_to_end_of_prio_q+0x4a>
   41ba2:	bf00      	nop
   41ba4:	20003b04 	.word	0x20003b04

00041ba8 <z_time_slice>:
{
   41ba8:	b538      	push	{r3, r4, r5, lr}
   41baa:	4601      	mov	r1, r0
	__asm__ volatile(
   41bac:	f04f 0320 	mov.w	r3, #32
   41bb0:	f3ef 8411 	mrs	r4, BASEPRI
   41bb4:	f383 8812 	msr	BASEPRI_MAX, r3
   41bb8:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   41bbc:	4b15      	ldr	r3, [pc, #84]	; (41c14 <z_time_slice+0x6c>)
   41bbe:	4a16      	ldr	r2, [pc, #88]	; (41c18 <z_time_slice+0x70>)
   41bc0:	6898      	ldr	r0, [r3, #8]
   41bc2:	6815      	ldr	r5, [r2, #0]
   41bc4:	42a8      	cmp	r0, r5
   41bc6:	d106      	bne.n	41bd6 <z_time_slice+0x2e>
			z_reset_time_slice();
   41bc8:	f7ff ff2a 	bl	41a20 <z_reset_time_slice>
	__asm__ volatile(
   41bcc:	f384 8811 	msr	BASEPRI, r4
   41bd0:	f3bf 8f6f 	isb	sy
}
   41bd4:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   41bd6:	2500      	movs	r5, #0
   41bd8:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   41bda:	4a10      	ldr	r2, [pc, #64]	; (41c1c <z_time_slice+0x74>)
   41bdc:	6812      	ldr	r2, [r2, #0]
   41bde:	b1ba      	cbz	r2, 41c10 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   41be0:	89c2      	ldrh	r2, [r0, #14]
   41be2:	2a7f      	cmp	r2, #127	; 0x7f
   41be4:	d814      	bhi.n	41c10 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   41be6:	7b42      	ldrb	r2, [r0, #13]
   41be8:	06d2      	lsls	r2, r2, #27
   41bea:	d111      	bne.n	41c10 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   41bec:	4a0c      	ldr	r2, [pc, #48]	; (41c20 <z_time_slice+0x78>)
   41bee:	f990 500e 	ldrsb.w	r5, [r0, #14]
   41bf2:	6812      	ldr	r2, [r2, #0]
   41bf4:	4295      	cmp	r5, r2
   41bf6:	db0b      	blt.n	41c10 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   41bf8:	4a0a      	ldr	r2, [pc, #40]	; (41c24 <z_time_slice+0x7c>)
   41bfa:	4290      	cmp	r0, r2
   41bfc:	d008      	beq.n	41c10 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   41bfe:	691a      	ldr	r2, [r3, #16]
   41c00:	428a      	cmp	r2, r1
   41c02:	dc02      	bgt.n	41c0a <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   41c04:	f7ff ff96 	bl	41b34 <move_thread_to_end_of_prio_q>
   41c08:	e7de      	b.n	41bc8 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   41c0a:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   41c0c:	611a      	str	r2, [r3, #16]
   41c0e:	e7dd      	b.n	41bcc <z_time_slice+0x24>
   41c10:	2200      	movs	r2, #0
   41c12:	e7fb      	b.n	41c0c <z_time_slice+0x64>
   41c14:	20003b04 	.word	0x20003b04
   41c18:	20003b34 	.word	0x20003b34
   41c1c:	20003b3c 	.word	0x20003b3c
   41c20:	20003b38 	.word	0x20003b38
   41c24:	20001810 	.word	0x20001810

00041c28 <ready_thread>:
{
   41c28:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   41c2a:	f990 200d 	ldrsb.w	r2, [r0, #13]
   41c2e:	7b43      	ldrb	r3, [r0, #13]
   41c30:	2a00      	cmp	r2, #0
   41c32:	db29      	blt.n	41c88 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   41c34:	06da      	lsls	r2, r3, #27
   41c36:	d127      	bne.n	41c88 <ready_thread+0x60>
   41c38:	6982      	ldr	r2, [r0, #24]
   41c3a:	bb2a      	cbnz	r2, 41c88 <ready_thread+0x60>
	return list->head == list;
   41c3c:	4a13      	ldr	r2, [pc, #76]	; (41c8c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   41c3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   41c42:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   41c44:	e9d2 3108 	ldrd	r3, r1, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41c48:	f102 0420 	add.w	r4, r2, #32
   41c4c:	42a3      	cmp	r3, r4
   41c4e:	d016      	beq.n	41c7e <ready_thread+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41c50:	b1ab      	cbz	r3, 41c7e <ready_thread+0x56>
	int32_t b1 = thread_1->base.prio;
   41c52:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   41c56:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   41c5a:	42b5      	cmp	r5, r6
   41c5c:	d00a      	beq.n	41c74 <ready_thread+0x4c>
		if (z_sched_prio_cmp(thread, t) > 0) {
   41c5e:	42ae      	cmp	r6, r5
   41c60:	dd08      	ble.n	41c74 <ready_thread+0x4c>
	sys_dnode_t *const prev = successor->prev;
   41c62:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   41c64:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   41c68:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   41c6a:	6058      	str	r0, [r3, #4]
}
   41c6c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   41c6e:	2000      	movs	r0, #0
   41c70:	f7ff bf42 	b.w	41af8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   41c74:	428b      	cmp	r3, r1
   41c76:	d002      	beq.n	41c7e <ready_thread+0x56>
   41c78:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41c7a:	2b00      	cmp	r3, #0
   41c7c:	d1eb      	bne.n	41c56 <ready_thread+0x2e>
	node->prev = tail;
   41c7e:	e9c0 4100 	strd	r4, r1, [r0]
	tail->next = node;
   41c82:	6008      	str	r0, [r1, #0]
	list->tail = node;
   41c84:	6250      	str	r0, [r2, #36]	; 0x24
}
   41c86:	e7f1      	b.n	41c6c <ready_thread+0x44>
}
   41c88:	bc70      	pop	{r4, r5, r6}
   41c8a:	4770      	bx	lr
   41c8c:	20003b04 	.word	0x20003b04

00041c90 <z_sched_start>:
{
   41c90:	b510      	push	{r4, lr}
	__asm__ volatile(
   41c92:	f04f 0220 	mov.w	r2, #32
   41c96:	f3ef 8411 	mrs	r4, BASEPRI
   41c9a:	f382 8812 	msr	BASEPRI_MAX, r2
   41c9e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   41ca2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   41ca4:	0751      	lsls	r1, r2, #29
   41ca6:	d404      	bmi.n	41cb2 <z_sched_start+0x22>
	__asm__ volatile(
   41ca8:	f384 8811 	msr	BASEPRI, r4
   41cac:	f3bf 8f6f 	isb	sy
}
   41cb0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   41cb2:	f022 0204 	bic.w	r2, r2, #4
   41cb6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   41cb8:	f7ff ffb6 	bl	41c28 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   41cbc:	4621      	mov	r1, r4
   41cbe:	4802      	ldr	r0, [pc, #8]	; (41cc8 <z_sched_start+0x38>)
}
   41cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   41cc4:	f7ff bef2 	b.w	41aac <z_reschedule>
   41cc8:	20003c81 	.word	0x20003c81

00041ccc <unready_thread>:
{
   41ccc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   41cce:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   41cd2:	7b43      	ldrb	r3, [r0, #13]
   41cd4:	2a00      	cmp	r2, #0
{
   41cd6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   41cd8:	da04      	bge.n	41ce4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41cde:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   41ce0:	f006 fff0 	bl	48cc4 <sys_dlist_remove>
	update_cache(thread == _current);
   41ce4:	4b04      	ldr	r3, [pc, #16]	; (41cf8 <unready_thread+0x2c>)
   41ce6:	6898      	ldr	r0, [r3, #8]
   41ce8:	1a43      	subs	r3, r0, r1
   41cea:	4258      	negs	r0, r3
   41cec:	4158      	adcs	r0, r3
}
   41cee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   41cf2:	f7ff bf01 	b.w	41af8 <update_cache>
   41cf6:	bf00      	nop
   41cf8:	20003b04 	.word	0x20003b04

00041cfc <pend>:
{
   41cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41d00:	4606      	mov	r6, r0
   41d02:	4615      	mov	r5, r2
   41d04:	461c      	mov	r4, r3
	__asm__ volatile(
   41d06:	f04f 0320 	mov.w	r3, #32
   41d0a:	f3ef 8711 	mrs	r7, BASEPRI
   41d0e:	f383 8812 	msr	BASEPRI_MAX, r3
   41d12:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   41d16:	f007 f862 	bl	48dde <add_to_waitq_locked>
	__asm__ volatile(
   41d1a:	f387 8811 	msr	BASEPRI, r7
   41d1e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41d22:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   41d26:	bf08      	it	eq
   41d28:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   41d2c:	d008      	beq.n	41d40 <pend+0x44>
   41d2e:	462a      	mov	r2, r5
   41d30:	4623      	mov	r3, r4
   41d32:	f106 0018 	add.w	r0, r6, #24
   41d36:	4903      	ldr	r1, [pc, #12]	; (41d44 <pend+0x48>)
}
   41d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   41d3c:	f000 ba32 	b.w	421a4 <z_add_timeout>
   41d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41d44:	00048d9b 	.word	0x00048d9b

00041d48 <z_pend_curr>:
{
   41d48:	b510      	push	{r4, lr}
	pending_current = _current;
   41d4a:	4b07      	ldr	r3, [pc, #28]	; (41d68 <z_pend_curr+0x20>)
   41d4c:	6898      	ldr	r0, [r3, #8]
   41d4e:	4b07      	ldr	r3, [pc, #28]	; (41d6c <z_pend_curr+0x24>)
{
   41d50:	460c      	mov	r4, r1
	pending_current = _current;
   41d52:	6018      	str	r0, [r3, #0]
{
   41d54:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   41d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   41d5a:	f7ff ffcf 	bl	41cfc <pend>
   41d5e:	4620      	mov	r0, r4
}
   41d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   41d64:	f7e8 b9ec 	b.w	2a140 <arch_swap>
   41d68:	20003b04 	.word	0x20003b04
   41d6c:	20003b34 	.word	0x20003b34

00041d70 <z_set_prio>:
{
   41d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41d72:	4604      	mov	r4, r0
	__asm__ volatile(
   41d74:	f04f 0320 	mov.w	r3, #32
   41d78:	f3ef 8511 	mrs	r5, BASEPRI
   41d7c:	f383 8812 	msr	BASEPRI_MAX, r3
   41d80:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   41d84:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   41d86:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   41d88:	b249      	sxtb	r1, r1
   41d8a:	d132      	bne.n	41df2 <z_set_prio+0x82>
		if (need_sched) {
   41d8c:	6982      	ldr	r2, [r0, #24]
   41d8e:	bb82      	cbnz	r2, 41df2 <z_set_prio+0x82>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41d94:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   41d96:	f006 ff95 	bl	48cc4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   41d9a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   41d9c:	4a16      	ldr	r2, [pc, #88]	; (41df8 <z_set_prio+0x88>)
				thread->base.prio = prio;
   41d9e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   41da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   41da4:	7343      	strb	r3, [r0, #13]
   41da6:	4610      	mov	r0, r2
   41da8:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41dac:	4283      	cmp	r3, r0
   41dae:	d01a      	beq.n	41de6 <z_set_prio+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41db0:	b1cb      	cbz	r3, 41de6 <z_set_prio+0x76>
	return (node == list->tail) ? NULL : node->next;
   41db2:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   41db4:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   41db8:	42b1      	cmp	r1, r6
   41dba:	d00f      	beq.n	41ddc <z_set_prio+0x6c>
		if (z_sched_prio_cmp(thread, t) > 0) {
   41dbc:	428e      	cmp	r6, r1
   41dbe:	dd0d      	ble.n	41ddc <z_set_prio+0x6c>
	sys_dnode_t *const prev = successor->prev;
   41dc0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   41dc2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   41dc6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   41dc8:	605c      	str	r4, [r3, #4]
			update_cache(1);
   41dca:	2001      	movs	r0, #1
   41dcc:	f7ff fe94 	bl	41af8 <update_cache>
   41dd0:	2001      	movs	r0, #1
	__asm__ volatile(
   41dd2:	f385 8811 	msr	BASEPRI, r5
   41dd6:	f3bf 8f6f 	isb	sy
}
   41dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   41ddc:	42bb      	cmp	r3, r7
   41dde:	d002      	beq.n	41de6 <z_set_prio+0x76>
   41de0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41de2:	2b00      	cmp	r3, #0
   41de4:	d1e6      	bne.n	41db4 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   41de6:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   41de8:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   41dec:	601c      	str	r4, [r3, #0]
	list->tail = node;
   41dee:	6254      	str	r4, [r2, #36]	; 0x24
}
   41df0:	e7eb      	b.n	41dca <z_set_prio+0x5a>
			thread->base.prio = prio;
   41df2:	73a1      	strb	r1, [r4, #14]
   41df4:	2000      	movs	r0, #0
   41df6:	e7ec      	b.n	41dd2 <z_set_prio+0x62>
   41df8:	20003b04 	.word	0x20003b04

00041dfc <z_impl_k_thread_suspend>:
{
   41dfc:	b570      	push	{r4, r5, r6, lr}
   41dfe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   41e00:	3018      	adds	r0, #24
   41e02:	f007 f86f 	bl	48ee4 <z_abort_timeout>
	__asm__ volatile(
   41e06:	f04f 0320 	mov.w	r3, #32
   41e0a:	f3ef 8611 	mrs	r6, BASEPRI
   41e0e:	f383 8812 	msr	BASEPRI_MAX, r3
   41e12:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   41e16:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   41e1a:	7b63      	ldrb	r3, [r4, #13]
   41e1c:	2a00      	cmp	r2, #0
   41e1e:	da05      	bge.n	41e2c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41e24:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   41e26:	4620      	mov	r0, r4
   41e28:	f006 ff4c 	bl	48cc4 <sys_dlist_remove>
		update_cache(thread == _current);
   41e2c:	4d0b      	ldr	r5, [pc, #44]	; (41e5c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   41e2e:	7b63      	ldrb	r3, [r4, #13]
   41e30:	68a8      	ldr	r0, [r5, #8]
   41e32:	f043 0310 	orr.w	r3, r3, #16
   41e36:	7363      	strb	r3, [r4, #13]
   41e38:	1b03      	subs	r3, r0, r4
   41e3a:	4258      	negs	r0, r3
   41e3c:	4158      	adcs	r0, r3
   41e3e:	f7ff fe5b 	bl	41af8 <update_cache>
	__asm__ volatile(
   41e42:	f386 8811 	msr	BASEPRI, r6
   41e46:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   41e4a:	68ab      	ldr	r3, [r5, #8]
   41e4c:	42a3      	cmp	r3, r4
   41e4e:	d103      	bne.n	41e58 <z_impl_k_thread_suspend+0x5c>
}
   41e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   41e54:	f006 bf81 	b.w	48d5a <z_reschedule_unlocked>
}
   41e58:	bd70      	pop	{r4, r5, r6, pc}
   41e5a:	bf00      	nop
   41e5c:	20003b04 	.word	0x20003b04

00041e60 <k_sched_unlock>:
{
   41e60:	b510      	push	{r4, lr}
	__asm__ volatile(
   41e62:	f04f 0320 	mov.w	r3, #32
   41e66:	f3ef 8411 	mrs	r4, BASEPRI
   41e6a:	f383 8812 	msr	BASEPRI_MAX, r3
   41e6e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   41e72:	4b08      	ldr	r3, [pc, #32]	; (41e94 <k_sched_unlock+0x34>)
   41e74:	689a      	ldr	r2, [r3, #8]
   41e76:	7bd3      	ldrb	r3, [r2, #15]
   41e78:	3301      	adds	r3, #1
   41e7a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   41e7c:	2000      	movs	r0, #0
   41e7e:	f7ff fe3b 	bl	41af8 <update_cache>
	__asm__ volatile(
   41e82:	f384 8811 	msr	BASEPRI, r4
   41e86:	f3bf 8f6f 	isb	sy
}
   41e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   41e8e:	f006 bf64 	b.w	48d5a <z_reschedule_unlocked>
   41e92:	bf00      	nop
   41e94:	20003b04 	.word	0x20003b04

00041e98 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   41e98:	4b04      	ldr	r3, [pc, #16]	; (41eac <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   41e9a:	2100      	movs	r1, #0
   41e9c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   41ea0:	e9c3 2208 	strd	r2, r2, [r3, #32]
   41ea4:	4608      	mov	r0, r1
   41ea6:	f7ff bdd1 	b.w	41a4c <k_sched_time_slice_set>
   41eaa:	bf00      	nop
   41eac:	20003b04 	.word	0x20003b04

00041eb0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   41eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   41eb2:	f04f 0320 	mov.w	r3, #32
   41eb6:	f3ef 8411 	mrs	r4, BASEPRI
   41eba:	f383 8812 	msr	BASEPRI_MAX, r3
   41ebe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   41ec2:	4919      	ldr	r1, [pc, #100]	; (41f28 <z_impl_k_yield+0x78>)
   41ec4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   41ec6:	7b43      	ldrb	r3, [r0, #13]
   41ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   41ecc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   41ece:	f006 fef9 	bl	48cc4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   41ed2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   41ed4:	460a      	mov	r2, r1
   41ed6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   41eda:	7343      	strb	r3, [r0, #13]
   41edc:	f852 3f20 	ldr.w	r3, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41ee0:	4293      	cmp	r3, r2
   41ee2:	d01b      	beq.n	41f1c <z_impl_k_yield+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41ee4:	b1d3      	cbz	r3, 41f1c <z_impl_k_yield+0x6c>
	return (node == list->tail) ? NULL : node->next;
   41ee6:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   41ee8:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   41eec:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   41ef0:	42b5      	cmp	r5, r6
   41ef2:	d00e      	beq.n	41f12 <z_impl_k_yield+0x62>
		if (z_sched_prio_cmp(thread, t) > 0) {
   41ef4:	42ae      	cmp	r6, r5
   41ef6:	dd0c      	ble.n	41f12 <z_impl_k_yield+0x62>
	sys_dnode_t *const prev = successor->prev;
   41ef8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   41efa:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   41efe:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   41f00:	6058      	str	r0, [r3, #4]
	}
	queue_thread(_current);
	update_cache(1);
   41f02:	2001      	movs	r0, #1
   41f04:	f7ff fdf8 	bl	41af8 <update_cache>
   41f08:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
   41f0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   41f0e:	f7e8 b917 	b.w	2a140 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   41f12:	42bb      	cmp	r3, r7
   41f14:	d002      	beq.n	41f1c <z_impl_k_yield+0x6c>
   41f16:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   41f18:	2b00      	cmp	r3, #0
   41f1a:	d1e7      	bne.n	41eec <z_impl_k_yield+0x3c>
	sys_dnode_t *const tail = list->tail;
   41f1c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	node->prev = tail;
   41f1e:	e9c0 2300 	strd	r2, r3, [r0]
	tail->next = node;
   41f22:	6018      	str	r0, [r3, #0]
	list->tail = node;
   41f24:	6248      	str	r0, [r1, #36]	; 0x24
}
   41f26:	e7ec      	b.n	41f02 <z_impl_k_yield+0x52>
   41f28:	20003b04 	.word	0x20003b04

00041f2c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   41f2c:	ea50 0301 	orrs.w	r3, r0, r1
{
   41f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41f34:	4605      	mov	r5, r0
   41f36:	460e      	mov	r6, r1
	if (ticks == 0) {
   41f38:	d103      	bne.n	41f42 <z_tick_sleep+0x16>
	z_impl_k_yield();
   41f3a:	f7ff ffb9 	bl	41eb0 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   41f3e:	2000      	movs	r0, #0
   41f40:	e02c      	b.n	41f9c <z_tick_sleep+0x70>
	if (Z_TICK_ABS(ticks) <= 0) {
   41f42:	1c83      	adds	r3, r0, #2
   41f44:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   41f48:	db2a      	blt.n	41fa0 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   41f4a:	f007 f80b 	bl	48f64 <sys_clock_tick_get_32>
   41f4e:	1944      	adds	r4, r0, r5
   41f50:	f04f 0320 	mov.w	r3, #32
   41f54:	f3ef 8811 	mrs	r8, BASEPRI
   41f58:	f383 8812 	msr	BASEPRI_MAX, r3
   41f5c:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   41f60:	4f11      	ldr	r7, [pc, #68]	; (41fa8 <z_tick_sleep+0x7c>)
   41f62:	4b12      	ldr	r3, [pc, #72]	; (41fac <z_tick_sleep+0x80>)
   41f64:	68b8      	ldr	r0, [r7, #8]
   41f66:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   41f68:	f7ff feb0 	bl	41ccc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   41f6c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   41f6e:	4910      	ldr	r1, [pc, #64]	; (41fb0 <z_tick_sleep+0x84>)
   41f70:	462a      	mov	r2, r5
   41f72:	4633      	mov	r3, r6
   41f74:	3018      	adds	r0, #24
   41f76:	f000 f915 	bl	421a4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   41f7a:	68ba      	ldr	r2, [r7, #8]
   41f7c:	7b53      	ldrb	r3, [r2, #13]
   41f7e:	f043 0310 	orr.w	r3, r3, #16
   41f82:	7353      	strb	r3, [r2, #13]
   41f84:	4640      	mov	r0, r8
   41f86:	f7e8 f8db 	bl	2a140 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   41f8a:	f006 ffeb 	bl	48f64 <sys_clock_tick_get_32>
   41f8e:	1a20      	subs	r0, r4, r0
   41f90:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   41f94:	2801      	cmp	r0, #1
   41f96:	f173 0300 	sbcs.w	r3, r3, #0
   41f9a:	dbd0      	blt.n	41f3e <z_tick_sleep+0x12>
}
   41f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   41fa0:	f06f 0401 	mvn.w	r4, #1
   41fa4:	1a24      	subs	r4, r4, r0
   41fa6:	e7d3      	b.n	41f50 <z_tick_sleep+0x24>
   41fa8:	20003b04 	.word	0x20003b04
   41fac:	20003b34 	.word	0x20003b34
   41fb0:	00048d9b 	.word	0x00048d9b

00041fb4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41fb4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   41fb8:	bf08      	it	eq
   41fba:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   41fbe:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41fc0:	d106      	bne.n	41fd0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   41fc2:	4b08      	ldr	r3, [pc, #32]	; (41fe4 <z_impl_k_sleep+0x30>)
   41fc4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   41fc6:	f7ff ff19 	bl	41dfc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   41fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   41fce:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   41fd0:	f7ff ffac 	bl	41f2c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   41fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   41fd8:	fb80 0303 	smull	r0, r3, r0, r3
   41fdc:	0bc0      	lsrs	r0, r0, #15
   41fde:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   41fe2:	e7f4      	b.n	41fce <z_impl_k_sleep+0x1a>
   41fe4:	20003b04 	.word	0x20003b04

00041fe8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   41fe8:	4b01      	ldr	r3, [pc, #4]	; (41ff0 <z_impl_z_current_get+0x8>)
   41fea:	6898      	ldr	r0, [r3, #8]
   41fec:	4770      	bx	lr
   41fee:	bf00      	nop
   41ff0:	20003b04 	.word	0x20003b04

00041ff4 <z_impl_k_is_preempt_thread>:
   41ff4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   41ff8:	b93b      	cbnz	r3, 4200a <z_impl_k_is_preempt_thread+0x16>
   41ffa:	4b05      	ldr	r3, [pc, #20]	; (42010 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   41ffc:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   41ffe:	89d8      	ldrh	r0, [r3, #14]
   42000:	287f      	cmp	r0, #127	; 0x7f
   42002:	bf8c      	ite	hi
   42004:	2000      	movhi	r0, #0
   42006:	2001      	movls	r0, #1
   42008:	4770      	bx	lr
   4200a:	2000      	movs	r0, #0
}
   4200c:	4770      	bx	lr
   4200e:	bf00      	nop
   42010:	20003b04 	.word	0x20003b04

00042014 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   42014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42018:	4604      	mov	r4, r0
   4201a:	f04f 0320 	mov.w	r3, #32
   4201e:	f3ef 8611 	mrs	r6, BASEPRI
   42022:	f383 8812 	msr	BASEPRI_MAX, r3
   42026:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   4202a:	7b43      	ldrb	r3, [r0, #13]
   4202c:	071a      	lsls	r2, r3, #28
   4202e:	d505      	bpl.n	4203c <z_thread_abort+0x28>
	__asm__ volatile(
   42030:	f386 8811 	msr	BASEPRI, r6
   42034:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   42038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   4203c:	f023 0220 	bic.w	r2, r3, #32
   42040:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   42044:	09d2      	lsrs	r2, r2, #7
   42046:	d120      	bne.n	4208a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   42048:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   4204a:	68a3      	ldr	r3, [r4, #8]
   4204c:	b113      	cbz	r3, 42054 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   4204e:	4620      	mov	r0, r4
   42050:	f006 fe40 	bl	48cd4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   42054:	f104 0018 	add.w	r0, r4, #24
   42058:	f006 ff44 	bl	48ee4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   4205c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   42060:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   42064:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   42066:	42bd      	cmp	r5, r7
   42068:	d000      	beq.n	4206c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   4206a:	b9b5      	cbnz	r5, 4209a <z_thread_abort+0x86>
		update_cache(1);
   4206c:	2001      	movs	r0, #1
   4206e:	f7ff fd43 	bl	41af8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   42072:	4b10      	ldr	r3, [pc, #64]	; (420b4 <z_thread_abort+0xa0>)
   42074:	689b      	ldr	r3, [r3, #8]
   42076:	42a3      	cmp	r3, r4
   42078:	d1da      	bne.n	42030 <z_thread_abort+0x1c>
   4207a:	f3ef 8305 	mrs	r3, IPSR
   4207e:	2b00      	cmp	r3, #0
   42080:	d1d6      	bne.n	42030 <z_thread_abort+0x1c>
   42082:	4630      	mov	r0, r6
   42084:	f7e8 f85c 	bl	2a140 <arch_swap>
	return ret;
   42088:	e7d2      	b.n	42030 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4208a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   4208e:	f043 0308 	orr.w	r3, r3, #8
   42092:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   42094:	f006 fe16 	bl	48cc4 <sys_dlist_remove>
}
   42098:	e7d7      	b.n	4204a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   4209a:	4628      	mov	r0, r5
   4209c:	f006 fe1a 	bl	48cd4 <unpend_thread_no_timeout>
   420a0:	f105 0018 	add.w	r0, r5, #24
   420a4:	f006 ff1e 	bl	48ee4 <z_abort_timeout>
   420a8:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   420ac:	4628      	mov	r0, r5
   420ae:	f7ff fdbb 	bl	41c28 <ready_thread>
   420b2:	e7d7      	b.n	42064 <z_thread_abort+0x50>
   420b4:	20003b04 	.word	0x20003b04

000420b8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   420b8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   420ba:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   420be:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   420c0:	e9cd 6700 	strd	r6, r7, [sp]
   420c4:	f7ff fe40 	bl	41d48 <z_pend_curr>

	if (data != NULL) {
   420c8:	b11c      	cbz	r4, 420d2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   420ca:	4b03      	ldr	r3, [pc, #12]	; (420d8 <z_sched_wait+0x20>)
   420cc:	689b      	ldr	r3, [r3, #8]
   420ce:	695b      	ldr	r3, [r3, #20]
   420d0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   420d2:	b002      	add	sp, #8
   420d4:	bdd0      	pop	{r4, r6, r7, pc}
   420d6:	bf00      	nop
   420d8:	20003b04 	.word	0x20003b04

000420dc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   420dc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   420de:	4806      	ldr	r0, [pc, #24]	; (420f8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   420e0:	4a06      	ldr	r2, [pc, #24]	; (420fc <z_data_copy+0x20>)
   420e2:	4907      	ldr	r1, [pc, #28]	; (42100 <z_data_copy+0x24>)
   420e4:	1a12      	subs	r2, r2, r0
   420e6:	f002 fe8c 	bl	44e02 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   420ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   420ee:	4a05      	ldr	r2, [pc, #20]	; (42104 <z_data_copy+0x28>)
   420f0:	4905      	ldr	r1, [pc, #20]	; (42108 <z_data_copy+0x2c>)
   420f2:	4806      	ldr	r0, [pc, #24]	; (4210c <z_data_copy+0x30>)
   420f4:	f002 be85 	b.w	44e02 <memcpy>
   420f8:	20000000 	.word	0x20000000
   420fc:	20000da1 	.word	0x20000da1
   42100:	0004b584 	.word	0x0004b584
   42104:	00000000 	.word	0x00000000
   42108:	0004b584 	.word	0x0004b584
   4210c:	20000000 	.word	0x20000000

00042110 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   42110:	4b03      	ldr	r3, [pc, #12]	; (42120 <elapsed+0x10>)
   42112:	681b      	ldr	r3, [r3, #0]
   42114:	b90b      	cbnz	r3, 4211a <elapsed+0xa>
   42116:	f7fd b851 	b.w	3f1bc <sys_clock_elapsed>
}
   4211a:	2000      	movs	r0, #0
   4211c:	4770      	bx	lr
   4211e:	bf00      	nop
   42120:	20003b40 	.word	0x20003b40

00042124 <next_timeout>:
	return list->head == list;
   42124:	4b10      	ldr	r3, [pc, #64]	; (42168 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   42126:	b510      	push	{r4, lr}
   42128:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4212a:	429c      	cmp	r4, r3
   4212c:	bf08      	it	eq
   4212e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   42130:	f7ff ffee 	bl	42110 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   42134:	b1a4      	cbz	r4, 42160 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   42136:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   4213a:	1a1b      	subs	r3, r3, r0
   4213c:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   42140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   42144:	f172 0100 	sbcs.w	r1, r2, #0
   42148:	da0a      	bge.n	42160 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   4214a:	2a00      	cmp	r2, #0
   4214c:	bfac      	ite	ge
   4214e:	4618      	movge	r0, r3
   42150:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   42152:	4b06      	ldr	r3, [pc, #24]	; (4216c <next_timeout+0x48>)
   42154:	691b      	ldr	r3, [r3, #16]
   42156:	b113      	cbz	r3, 4215e <next_timeout+0x3a>
   42158:	4298      	cmp	r0, r3
   4215a:	bfa8      	it	ge
   4215c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   4215e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   42160:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   42164:	e7f5      	b.n	42152 <next_timeout+0x2e>
   42166:	bf00      	nop
   42168:	200008c4 	.word	0x200008c4
   4216c:	20003b04 	.word	0x20003b04

00042170 <remove_timeout>:
{
   42170:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   42172:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   42174:	b168      	cbz	r0, 42192 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   42176:	4a0a      	ldr	r2, [pc, #40]	; (421a0 <remove_timeout+0x30>)
   42178:	6852      	ldr	r2, [r2, #4]
   4217a:	4290      	cmp	r0, r2
   4217c:	d009      	beq.n	42192 <remove_timeout+0x22>
	if (next(t) != NULL) {
   4217e:	b143      	cbz	r3, 42192 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   42180:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   42184:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   42188:	1912      	adds	r2, r2, r4
   4218a:	eb41 0105 	adc.w	r1, r1, r5
   4218e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   42192:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   42194:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   42196:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   42198:	2300      	movs	r3, #0
	node->prev = NULL;
   4219a:	e9c0 3300 	strd	r3, r3, [r0]
}
   4219e:	bd30      	pop	{r4, r5, pc}
   421a0:	200008c4 	.word	0x200008c4

000421a4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   421a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   421a8:	bf08      	it	eq
   421aa:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   421ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   421b0:	4604      	mov	r4, r0
   421b2:	461d      	mov	r5, r3
   421b4:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   421b6:	d067      	beq.n	42288 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   421b8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   421ba:	f04f 0320 	mov.w	r3, #32
   421be:	f3ef 8711 	mrs	r7, BASEPRI
   421c2:	f383 8812 	msr	BASEPRI_MAX, r3
   421c6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   421ca:	3201      	adds	r2, #1
   421cc:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   421d0:	da1e      	bge.n	42210 <z_add_timeout+0x6c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   421d2:	492e      	ldr	r1, [pc, #184]	; (4228c <z_add_timeout+0xe8>)
   421d4:	e9d1 2000 	ldrd	r2, r0, [r1]
   421d8:	f06f 0301 	mvn.w	r3, #1
   421dc:	1a9b      	subs	r3, r3, r2
   421de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   421e2:	eb62 0000 	sbc.w	r0, r2, r0
   421e6:	1b9e      	subs	r6, r3, r6
   421e8:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   421ec:	2e01      	cmp	r6, #1
   421ee:	f170 0300 	sbcs.w	r3, r0, #0
   421f2:	da01      	bge.n	421f8 <z_add_timeout+0x54>
   421f4:	2601      	movs	r6, #1
   421f6:	2000      	movs	r0, #0
   421f8:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   421fc:	4e24      	ldr	r6, [pc, #144]	; (42290 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   421fe:	e9d6 c500 	ldrd	ip, r5, [r6]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   42202:	45b4      	cmp	ip, r6
   42204:	d116      	bne.n	42234 <z_add_timeout+0x90>
	node->prev = tail;
   42206:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   4220a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   4220c:	6074      	str	r4, [r6, #4]
}
   4220e:	e028      	b.n	42262 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   42210:	f7ff ff7e 	bl	42110 <elapsed>
   42214:	3601      	adds	r6, #1
   42216:	f145 0500 	adc.w	r5, r5, #0
   4221a:	1836      	adds	r6, r6, r0
   4221c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   42220:	e7ea      	b.n	421f8 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   42222:	1a9b      	subs	r3, r3, r2
   42224:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   42228:	4565      	cmp	r5, ip
   4222a:	e9c4 3104 	strd	r3, r1, [r4, #16]
   4222e:	d0ea      	beq.n	42206 <z_add_timeout+0x62>
   42230:	f8dc c000 	ldr.w	ip, [ip]
		for (t = first(); t != NULL; t = next(t)) {
   42234:	f1bc 0f00 	cmp.w	ip, #0
   42238:	d0e5      	beq.n	42206 <z_add_timeout+0x62>
			if (t->dticks > to->dticks) {
   4223a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   4223e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   42242:	4293      	cmp	r3, r2
   42244:	eb71 0e00 	sbcs.w	lr, r1, r0
   42248:	daeb      	bge.n	42222 <z_add_timeout+0x7e>
				t->dticks -= to->dticks;
   4224a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   4224c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   42250:	eb60 0001 	sbc.w	r0, r0, r1
   42254:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   42258:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   4225c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   4225e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   42262:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   42264:	42b3      	cmp	r3, r6
   42266:	d00b      	beq.n	42280 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   42268:	429c      	cmp	r4, r3
   4226a:	d109      	bne.n	42280 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   4226c:	f7ff ff5a 	bl	42124 <next_timeout>

			if (next_time == 0 ||
   42270:	b118      	cbz	r0, 4227a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   42272:	4b08      	ldr	r3, [pc, #32]	; (42294 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   42274:	691b      	ldr	r3, [r3, #16]
   42276:	4283      	cmp	r3, r0
   42278:	d002      	beq.n	42280 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   4227a:	2100      	movs	r1, #0
   4227c:	f7fc ff6c 	bl	3f158 <sys_clock_set_timeout>
	__asm__ volatile(
   42280:	f387 8811 	msr	BASEPRI, r7
   42284:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   42288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4228a:	bf00      	nop
   4228c:	200019b0 	.word	0x200019b0
   42290:	200008c4 	.word	0x200008c4
   42294:	20003b04 	.word	0x20003b04

00042298 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   42298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4229c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   4229e:	f7ff fc83 	bl	41ba8 <z_time_slice>
	__asm__ volatile(
   422a2:	f04f 0320 	mov.w	r3, #32
   422a6:	f3ef 8411 	mrs	r4, BASEPRI
   422aa:	f383 8812 	msr	BASEPRI_MAX, r3
   422ae:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   422b2:	4e24      	ldr	r6, [pc, #144]	; (42344 <sys_clock_announce+0xac>)
	return list->head == list;
   422b4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 42348 <sys_clock_announce+0xb0>
   422b8:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   422ba:	4d24      	ldr	r5, [pc, #144]	; (4234c <sys_clock_announce+0xb4>)
   422bc:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   422c0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   422c2:	4540      	cmp	r0, r8
		curr_tick += dt;
   422c4:	e9d5 1e00 	ldrd	r1, lr, [r5]
   422c8:	ea4f 77e2 	mov.w	r7, r2, asr #31
   422cc:	d00b      	beq.n	422e6 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   422ce:	b150      	cbz	r0, 422e6 <sys_clock_announce+0x4e>
   422d0:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   422d4:	429a      	cmp	r2, r3
   422d6:	eb77 090c 	sbcs.w	r9, r7, ip
   422da:	da16      	bge.n	4230a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   422dc:	1a9b      	subs	r3, r3, r2
   422de:	eb6c 0c07 	sbc.w	ip, ip, r7
   422e2:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   422e6:	1851      	adds	r1, r2, r1
   422e8:	eb4e 0707 	adc.w	r7, lr, r7
   422ec:	e9c5 1700 	strd	r1, r7, [r5]
	announce_remaining = 0;
   422f0:	2500      	movs	r5, #0
   422f2:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   422f4:	f7ff ff16 	bl	42124 <next_timeout>
   422f8:	4629      	mov	r1, r5
   422fa:	f7fc ff2d 	bl	3f158 <sys_clock_set_timeout>
	__asm__ volatile(
   422fe:	f384 8811 	msr	BASEPRI, r4
   42302:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   42306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   4230a:	1859      	adds	r1, r3, r1
   4230c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   42310:	1ad3      	subs	r3, r2, r3
   42312:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   42314:	2200      	movs	r2, #0
   42316:	2300      	movs	r3, #0
   42318:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   4231c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   42320:	f7ff ff26 	bl	42170 <remove_timeout>
   42324:	f384 8811 	msr	BASEPRI, r4
   42328:	f3bf 8f6f 	isb	sy
		t->fn(t);
   4232c:	6883      	ldr	r3, [r0, #8]
   4232e:	4798      	blx	r3
	__asm__ volatile(
   42330:	f04f 0320 	mov.w	r3, #32
   42334:	f3ef 8411 	mrs	r4, BASEPRI
   42338:	f383 8812 	msr	BASEPRI_MAX, r3
   4233c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   42340:	e7bc      	b.n	422bc <sys_clock_announce+0x24>
   42342:	bf00      	nop
   42344:	20003b40 	.word	0x20003b40
   42348:	200008c4 	.word	0x200008c4
   4234c:	200019b0 	.word	0x200019b0

00042350 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   42350:	b510      	push	{r4, lr}
   42352:	f04f 0320 	mov.w	r3, #32
   42356:	f3ef 8411 	mrs	r4, BASEPRI
   4235a:	f383 8812 	msr	BASEPRI_MAX, r3
   4235e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   42362:	f7fc ff2b 	bl	3f1bc <sys_clock_elapsed>
   42366:	4a05      	ldr	r2, [pc, #20]	; (4237c <sys_clock_tick_get+0x2c>)
   42368:	e9d2 3100 	ldrd	r3, r1, [r2]
   4236c:	18c0      	adds	r0, r0, r3
   4236e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   42372:	f384 8811 	msr	BASEPRI, r4
   42376:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   4237a:	bd10      	pop	{r4, pc}
   4237c:	200019b0 	.word	0x200019b0

00042380 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   42380:	b570      	push	{r4, r5, r6, lr}
   42382:	4604      	mov	r4, r0
	__asm__ volatile(
   42384:	f04f 0320 	mov.w	r3, #32
   42388:	f3ef 8511 	mrs	r5, BASEPRI
   4238c:	f383 8812 	msr	BASEPRI_MAX, r3
   42390:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   42394:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   42398:	3301      	adds	r3, #1
   4239a:	f142 0200 	adc.w	r2, r2, #0
   4239e:	2b02      	cmp	r3, #2
   423a0:	f172 0200 	sbcs.w	r2, r2, #0
   423a4:	d304      	bcc.n	423b0 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   423a6:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   423aa:	4917      	ldr	r1, [pc, #92]	; (42408 <z_timer_expiration_handler+0x88>)
   423ac:	f7ff fefa 	bl	421a4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   423b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   423b2:	3301      	adds	r3, #1
   423b4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   423b6:	6a23      	ldr	r3, [r4, #32]
   423b8:	b173      	cbz	r3, 423d8 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   423ba:	f385 8811 	msr	BASEPRI, r5
   423be:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   423c2:	6a23      	ldr	r3, [r4, #32]
   423c4:	4620      	mov	r0, r4
   423c6:	4798      	blx	r3
	__asm__ volatile(
   423c8:	f04f 0320 	mov.w	r3, #32
   423cc:	f3ef 8511 	mrs	r5, BASEPRI
   423d0:	f383 8812 	msr	BASEPRI_MAX, r3
   423d4:	f3bf 8f6f 	isb	sy
	return list->head == list;
   423d8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   423dc:	42a6      	cmp	r6, r4
   423de:	d000      	beq.n	423e2 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   423e0:	b926      	cbnz	r6, 423ec <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   423e2:	f385 8811 	msr	BASEPRI, r5
   423e6:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   423ea:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   423ec:	4630      	mov	r0, r6
   423ee:	f006 fc84 	bl	48cfa <z_unpend_thread_no_timeout>
   423f2:	2300      	movs	r3, #0
   423f4:	67f3      	str	r3, [r6, #124]	; 0x7c
   423f6:	f385 8811 	msr	BASEPRI, r5
   423fa:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   423fe:	4630      	mov	r0, r6
}
   42400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   42404:	f006 bcb9 	b.w	48d7a <z_ready_thread>
   42408:	00042381 	.word	0x00042381

0004240c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   4240c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   42410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   42414:	bf08      	it	eq
   42416:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   4241a:	4605      	mov	r5, r0
   4241c:	4614      	mov	r4, r2
   4241e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   42422:	4619      	mov	r1, r3
   42424:	4691      	mov	r9, r2
   42426:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   42428:	d037      	beq.n	4249a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   4242a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   4242e:	bf08      	it	eq
   42430:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   42434:	4637      	mov	r7, r6
   42436:	4682      	mov	sl, r0
   42438:	d011      	beq.n	4245e <z_impl_k_timer_start+0x52>
   4243a:	ea50 0306 	orrs.w	r3, r0, r6
   4243e:	d00e      	beq.n	4245e <z_impl_k_timer_start+0x52>
   42440:	1c72      	adds	r2, r6, #1
   42442:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   42446:	db0a      	blt.n	4245e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   42448:	2e02      	cmp	r6, #2
   4244a:	4684      	mov	ip, r0
   4244c:	f170 0000 	sbcs.w	r0, r0, #0
   42450:	bfbc      	itt	lt
   42452:	2702      	movlt	r7, #2
   42454:	f04f 0c00 	movlt.w	ip, #0
   42458:	3f01      	subs	r7, #1
   4245a:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   4245e:	1c63      	adds	r3, r4, #1
   42460:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   42464:	db0a      	blt.n	4247c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   42466:	2c01      	cmp	r4, #1
   42468:	f171 0300 	sbcs.w	r3, r1, #0
   4246c:	4622      	mov	r2, r4
   4246e:	bfbc      	itt	lt
   42470:	2201      	movlt	r2, #1
   42472:	2100      	movlt	r1, #0
   42474:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   42478:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   4247c:	4628      	mov	r0, r5
   4247e:	f006 fd31 	bl	48ee4 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   42482:	2300      	movs	r3, #0
   42484:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   42486:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   4248a:	464a      	mov	r2, r9
   4248c:	4643      	mov	r3, r8
   4248e:	4628      	mov	r0, r5
   42490:	4903      	ldr	r1, [pc, #12]	; (424a0 <z_impl_k_timer_start+0x94>)
		     duration);
}
   42492:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   42496:	f7ff be85 	b.w	421a4 <z_add_timeout>
}
   4249a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4249e:	bf00      	nop
   424a0:	00042381 	.word	0x00042381

000424a4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   424a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   424a8:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   424aa:	4b29      	ldr	r3, [pc, #164]	; (42550 <z_impl_k_poll+0xac>)
   424ac:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   424ae:	2301      	movs	r3, #1
   424b0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   424b4:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   424b8:	ea52 0305 	orrs.w	r3, r2, r5
{
   424bc:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   424be:	bf0c      	ite	eq
   424c0:	2301      	moveq	r3, #1
   424c2:	2300      	movne	r3, #0
   424c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   424c8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   424ca:	f006 fdcc 	bl	49066 <register_events>
   424ce:	4681      	mov	r9, r0
	__asm__ volatile(
   424d0:	f04f 0320 	mov.w	r3, #32
   424d4:	f3ef 8a11 	mrs	sl, BASEPRI
   424d8:	f383 8812 	msr	BASEPRI_MAX, r3
   424dc:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   424e0:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   424e4:	b964      	cbnz	r4, 42500 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   424e6:	4601      	mov	r1, r0
   424e8:	4652      	mov	r2, sl
   424ea:	4640      	mov	r0, r8
   424ec:	f006 fe8c 	bl	49208 <clear_event_registrations>
	__asm__ volatile(
   424f0:	f38a 8811 	msr	BASEPRI, sl
   424f4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   424f8:	4620      	mov	r0, r4
   424fa:	b002      	add	sp, #8
   424fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   42500:	2300      	movs	r3, #0
   42502:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   42506:	ea56 0305 	orrs.w	r3, r6, r5
   4250a:	d106      	bne.n	4251a <z_impl_k_poll+0x76>
   4250c:	f38a 8811 	msr	BASEPRI, sl
   42510:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   42514:	f06f 040a 	mvn.w	r4, #10
   42518:	e7ee      	b.n	424f8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   4251a:	e9cd 6500 	strd	r6, r5, [sp]
   4251e:	4a0d      	ldr	r2, [pc, #52]	; (42554 <z_impl_k_poll+0xb0>)
   42520:	480d      	ldr	r0, [pc, #52]	; (42558 <z_impl_k_poll+0xb4>)
   42522:	4651      	mov	r1, sl
   42524:	f7ff fc10 	bl	41d48 <z_pend_curr>
   42528:	4604      	mov	r4, r0
	__asm__ volatile(
   4252a:	f04f 0320 	mov.w	r3, #32
   4252e:	f3ef 8511 	mrs	r5, BASEPRI
   42532:	f383 8812 	msr	BASEPRI_MAX, r3
   42536:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   4253a:	462a      	mov	r2, r5
   4253c:	4649      	mov	r1, r9
   4253e:	4640      	mov	r0, r8
   42540:	f006 fe62 	bl	49208 <clear_event_registrations>
	__asm__ volatile(
   42544:	f385 8811 	msr	BASEPRI, r5
   42548:	f3bf 8f6f 	isb	sy
	return swap_rc;
   4254c:	e7d4      	b.n	424f8 <z_impl_k_poll+0x54>
   4254e:	bf00      	nop
   42550:	20003b04 	.word	0x20003b04
   42554:	200008cc 	.word	0x200008cc
   42558:	20003c81 	.word	0x20003c81

0004255c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   4255c:	b538      	push	{r3, r4, r5, lr}
   4255e:	4603      	mov	r3, r0
	__asm__ volatile(
   42560:	f04f 0220 	mov.w	r2, #32
   42564:	f3ef 8511 	mrs	r5, BASEPRI
   42568:	f382 8812 	msr	BASEPRI_MAX, r2
   4256c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   42570:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   42572:	2101      	movs	r1, #1
   42574:	6081      	str	r1, [r0, #8]
	return list->head == list;
   42576:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   42578:	4283      	cmp	r3, r0
   4257a:	d106      	bne.n	4258a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   4257c:	f385 8811 	msr	BASEPRI, r5
   42580:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   42584:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   42586:	4620      	mov	r0, r4
   42588:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   4258a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   4258e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   42590:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   42592:	2300      	movs	r3, #0
	node->prev = NULL;
   42594:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   42598:	f006 fddc 	bl	49154 <signal_poll_event>
	z_reschedule(&lock, key);
   4259c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   4259e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   425a0:	4801      	ldr	r0, [pc, #4]	; (425a8 <z_impl_k_poll_signal_raise+0x4c>)
   425a2:	f7ff fa83 	bl	41aac <z_reschedule>
	return rc;
   425a6:	e7ee      	b.n	42586 <z_impl_k_poll_signal_raise+0x2a>
   425a8:	20003c81 	.word	0x20003c81

000425ac <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   425ac:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   425ae:	4601      	mov	r1, r0
   425b0:	4801      	ldr	r0, [pc, #4]	; (425b8 <k_aligned_alloc+0xc>)
   425b2:	f006 be75 	b.w	492a0 <z_heap_aligned_alloc>
   425b6:	bf00      	nop
   425b8:	20000b10 	.word	0x20000b10

000425bc <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   425bc:	4b01      	ldr	r3, [pc, #4]	; (425c4 <k_thread_system_pool_assign+0x8>)
   425be:	6743      	str	r3, [r0, #116]	; 0x74
}
   425c0:	4770      	bx	lr
   425c2:	bf00      	nop
   425c4:	20000b10 	.word	0x20000b10

000425c8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   425c8:	b538      	push	{r3, r4, r5, lr}
   425ca:	4604      	mov	r4, r0
   425cc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   425ce:	f006 f998 	bl	48902 <k_is_in_isr>
   425d2:	b950      	cbnz	r0, 425ea <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   425d4:	4b06      	ldr	r3, [pc, #24]	; (425f0 <z_thread_aligned_alloc+0x28>)
   425d6:	689b      	ldr	r3, [r3, #8]
   425d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   425da:	b143      	cbz	r3, 425ee <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   425dc:	462a      	mov	r2, r5
   425de:	4621      	mov	r1, r4
   425e0:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   425e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   425e6:	f006 be5b 	b.w	492a0 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   425ea:	4b02      	ldr	r3, [pc, #8]	; (425f4 <z_thread_aligned_alloc+0x2c>)
   425ec:	e7f6      	b.n	425dc <z_thread_aligned_alloc+0x14>
}
   425ee:	bd38      	pop	{r3, r4, r5, pc}
   425f0:	20003b04 	.word	0x20003b04
   425f4:	20000b10 	.word	0x20000b10

000425f8 <__udivmoddi4>:
   425f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   425fc:	9e08      	ldr	r6, [sp, #32]
   425fe:	460d      	mov	r5, r1
   42600:	4604      	mov	r4, r0
   42602:	460f      	mov	r7, r1
   42604:	2b00      	cmp	r3, #0
   42606:	d14a      	bne.n	4269e <__udivmoddi4+0xa6>
   42608:	428a      	cmp	r2, r1
   4260a:	4694      	mov	ip, r2
   4260c:	d965      	bls.n	426da <__udivmoddi4+0xe2>
   4260e:	fab2 f382 	clz	r3, r2
   42612:	b143      	cbz	r3, 42626 <__udivmoddi4+0x2e>
   42614:	fa02 fc03 	lsl.w	ip, r2, r3
   42618:	f1c3 0220 	rsb	r2, r3, #32
   4261c:	409f      	lsls	r7, r3
   4261e:	fa20 f202 	lsr.w	r2, r0, r2
   42622:	4317      	orrs	r7, r2
   42624:	409c      	lsls	r4, r3
   42626:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   4262a:	fa1f f58c 	uxth.w	r5, ip
   4262e:	fbb7 f1fe 	udiv	r1, r7, lr
   42632:	0c22      	lsrs	r2, r4, #16
   42634:	fb0e 7711 	mls	r7, lr, r1, r7
   42638:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   4263c:	fb01 f005 	mul.w	r0, r1, r5
   42640:	4290      	cmp	r0, r2
   42642:	d90a      	bls.n	4265a <__udivmoddi4+0x62>
   42644:	eb1c 0202 	adds.w	r2, ip, r2
   42648:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
   4264c:	f080 811b 	bcs.w	42886 <__udivmoddi4+0x28e>
   42650:	4290      	cmp	r0, r2
   42652:	f240 8118 	bls.w	42886 <__udivmoddi4+0x28e>
   42656:	3902      	subs	r1, #2
   42658:	4462      	add	r2, ip
   4265a:	1a12      	subs	r2, r2, r0
   4265c:	b2a4      	uxth	r4, r4
   4265e:	fbb2 f0fe 	udiv	r0, r2, lr
   42662:	fb0e 2210 	mls	r2, lr, r0, r2
   42666:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   4266a:	fb00 f505 	mul.w	r5, r0, r5
   4266e:	42a5      	cmp	r5, r4
   42670:	d90a      	bls.n	42688 <__udivmoddi4+0x90>
   42672:	eb1c 0404 	adds.w	r4, ip, r4
   42676:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   4267a:	f080 8106 	bcs.w	4288a <__udivmoddi4+0x292>
   4267e:	42a5      	cmp	r5, r4
   42680:	f240 8103 	bls.w	4288a <__udivmoddi4+0x292>
   42684:	4464      	add	r4, ip
   42686:	3802      	subs	r0, #2
   42688:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   4268c:	1b64      	subs	r4, r4, r5
   4268e:	2100      	movs	r1, #0
   42690:	b11e      	cbz	r6, 4269a <__udivmoddi4+0xa2>
   42692:	40dc      	lsrs	r4, r3
   42694:	2300      	movs	r3, #0
   42696:	e9c6 4300 	strd	r4, r3, [r6]
   4269a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4269e:	428b      	cmp	r3, r1
   426a0:	d908      	bls.n	426b4 <__udivmoddi4+0xbc>
   426a2:	2e00      	cmp	r6, #0
   426a4:	f000 80ec 	beq.w	42880 <__udivmoddi4+0x288>
   426a8:	2100      	movs	r1, #0
   426aa:	e9c6 0500 	strd	r0, r5, [r6]
   426ae:	4608      	mov	r0, r1
   426b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   426b4:	fab3 f183 	clz	r1, r3
   426b8:	2900      	cmp	r1, #0
   426ba:	d149      	bne.n	42750 <__udivmoddi4+0x158>
   426bc:	42ab      	cmp	r3, r5
   426be:	d302      	bcc.n	426c6 <__udivmoddi4+0xce>
   426c0:	4282      	cmp	r2, r0
   426c2:	f200 80f7 	bhi.w	428b4 <__udivmoddi4+0x2bc>
   426c6:	1a84      	subs	r4, r0, r2
   426c8:	eb65 0203 	sbc.w	r2, r5, r3
   426cc:	2001      	movs	r0, #1
   426ce:	4617      	mov	r7, r2
   426d0:	2e00      	cmp	r6, #0
   426d2:	d0e2      	beq.n	4269a <__udivmoddi4+0xa2>
   426d4:	e9c6 4700 	strd	r4, r7, [r6]
   426d8:	e7df      	b.n	4269a <__udivmoddi4+0xa2>
   426da:	b902      	cbnz	r2, 426de <__udivmoddi4+0xe6>
   426dc:	deff      	udf	#255	; 0xff
   426de:	fab2 f382 	clz	r3, r2
   426e2:	2b00      	cmp	r3, #0
   426e4:	f040 808f 	bne.w	42806 <__udivmoddi4+0x20e>
   426e8:	1a8a      	subs	r2, r1, r2
   426ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
   426ee:	fa1f fe8c 	uxth.w	lr, ip
   426f2:	2101      	movs	r1, #1
   426f4:	fbb2 f5f7 	udiv	r5, r2, r7
   426f8:	fb07 2015 	mls	r0, r7, r5, r2
   426fc:	0c22      	lsrs	r2, r4, #16
   426fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   42702:	fb0e f005 	mul.w	r0, lr, r5
   42706:	4290      	cmp	r0, r2
   42708:	d908      	bls.n	4271c <__udivmoddi4+0x124>
   4270a:	eb1c 0202 	adds.w	r2, ip, r2
   4270e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   42712:	d202      	bcs.n	4271a <__udivmoddi4+0x122>
   42714:	4290      	cmp	r0, r2
   42716:	f200 80ca 	bhi.w	428ae <__udivmoddi4+0x2b6>
   4271a:	4645      	mov	r5, r8
   4271c:	1a12      	subs	r2, r2, r0
   4271e:	b2a4      	uxth	r4, r4
   42720:	fbb2 f0f7 	udiv	r0, r2, r7
   42724:	fb07 2210 	mls	r2, r7, r0, r2
   42728:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   4272c:	fb0e fe00 	mul.w	lr, lr, r0
   42730:	45a6      	cmp	lr, r4
   42732:	d908      	bls.n	42746 <__udivmoddi4+0x14e>
   42734:	eb1c 0404 	adds.w	r4, ip, r4
   42738:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   4273c:	d202      	bcs.n	42744 <__udivmoddi4+0x14c>
   4273e:	45a6      	cmp	lr, r4
   42740:	f200 80ba 	bhi.w	428b8 <__udivmoddi4+0x2c0>
   42744:	4610      	mov	r0, r2
   42746:	eba4 040e 	sub.w	r4, r4, lr
   4274a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   4274e:	e79f      	b.n	42690 <__udivmoddi4+0x98>
   42750:	f1c1 0720 	rsb	r7, r1, #32
   42754:	408b      	lsls	r3, r1
   42756:	fa22 fc07 	lsr.w	ip, r2, r7
   4275a:	ea4c 0c03 	orr.w	ip, ip, r3
   4275e:	fa05 f401 	lsl.w	r4, r5, r1
   42762:	fa20 f307 	lsr.w	r3, r0, r7
   42766:	40fd      	lsrs	r5, r7
   42768:	4323      	orrs	r3, r4
   4276a:	fa00 f901 	lsl.w	r9, r0, r1
   4276e:	ea4f 401c 	mov.w	r0, ip, lsr #16
   42772:	fa1f fe8c 	uxth.w	lr, ip
   42776:	fbb5 f8f0 	udiv	r8, r5, r0
   4277a:	0c1c      	lsrs	r4, r3, #16
   4277c:	fb00 5518 	mls	r5, r0, r8, r5
   42780:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   42784:	fb08 f50e 	mul.w	r5, r8, lr
   42788:	42a5      	cmp	r5, r4
   4278a:	fa02 f201 	lsl.w	r2, r2, r1
   4278e:	d90b      	bls.n	427a8 <__udivmoddi4+0x1b0>
   42790:	eb1c 0404 	adds.w	r4, ip, r4
   42794:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   42798:	f080 8087 	bcs.w	428aa <__udivmoddi4+0x2b2>
   4279c:	42a5      	cmp	r5, r4
   4279e:	f240 8084 	bls.w	428aa <__udivmoddi4+0x2b2>
   427a2:	f1a8 0802 	sub.w	r8, r8, #2
   427a6:	4464      	add	r4, ip
   427a8:	1b64      	subs	r4, r4, r5
   427aa:	b29d      	uxth	r5, r3
   427ac:	fbb4 f3f0 	udiv	r3, r4, r0
   427b0:	fb00 4413 	mls	r4, r0, r3, r4
   427b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   427b8:	fb03 fe0e 	mul.w	lr, r3, lr
   427bc:	45a6      	cmp	lr, r4
   427be:	d908      	bls.n	427d2 <__udivmoddi4+0x1da>
   427c0:	eb1c 0404 	adds.w	r4, ip, r4
   427c4:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
   427c8:	d26b      	bcs.n	428a2 <__udivmoddi4+0x2aa>
   427ca:	45a6      	cmp	lr, r4
   427cc:	d969      	bls.n	428a2 <__udivmoddi4+0x2aa>
   427ce:	3b02      	subs	r3, #2
   427d0:	4464      	add	r4, ip
   427d2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
   427d6:	fba0 8302 	umull	r8, r3, r0, r2
   427da:	eba4 040e 	sub.w	r4, r4, lr
   427de:	429c      	cmp	r4, r3
   427e0:	46c6      	mov	lr, r8
   427e2:	461d      	mov	r5, r3
   427e4:	d355      	bcc.n	42892 <__udivmoddi4+0x29a>
   427e6:	d052      	beq.n	4288e <__udivmoddi4+0x296>
   427e8:	b156      	cbz	r6, 42800 <__udivmoddi4+0x208>
   427ea:	ebb9 030e 	subs.w	r3, r9, lr
   427ee:	eb64 0405 	sbc.w	r4, r4, r5
   427f2:	fa04 f707 	lsl.w	r7, r4, r7
   427f6:	40cb      	lsrs	r3, r1
   427f8:	40cc      	lsrs	r4, r1
   427fa:	431f      	orrs	r7, r3
   427fc:	e9c6 7400 	strd	r7, r4, [r6]
   42800:	2100      	movs	r1, #0
   42802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   42806:	f1c3 0120 	rsb	r1, r3, #32
   4280a:	fa02 fc03 	lsl.w	ip, r2, r3
   4280e:	fa20 f201 	lsr.w	r2, r0, r1
   42812:	fa25 f101 	lsr.w	r1, r5, r1
   42816:	409d      	lsls	r5, r3
   42818:	432a      	orrs	r2, r5
   4281a:	ea4f 471c 	mov.w	r7, ip, lsr #16
   4281e:	fa1f fe8c 	uxth.w	lr, ip
   42822:	fbb1 f0f7 	udiv	r0, r1, r7
   42826:	fb07 1510 	mls	r5, r7, r0, r1
   4282a:	0c11      	lsrs	r1, r2, #16
   4282c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
   42830:	fb00 f50e 	mul.w	r5, r0, lr
   42834:	428d      	cmp	r5, r1
   42836:	fa04 f403 	lsl.w	r4, r4, r3
   4283a:	d908      	bls.n	4284e <__udivmoddi4+0x256>
   4283c:	eb1c 0101 	adds.w	r1, ip, r1
   42840:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   42844:	d22f      	bcs.n	428a6 <__udivmoddi4+0x2ae>
   42846:	428d      	cmp	r5, r1
   42848:	d92d      	bls.n	428a6 <__udivmoddi4+0x2ae>
   4284a:	3802      	subs	r0, #2
   4284c:	4461      	add	r1, ip
   4284e:	1b49      	subs	r1, r1, r5
   42850:	b292      	uxth	r2, r2
   42852:	fbb1 f5f7 	udiv	r5, r1, r7
   42856:	fb07 1115 	mls	r1, r7, r5, r1
   4285a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   4285e:	fb05 f10e 	mul.w	r1, r5, lr
   42862:	4291      	cmp	r1, r2
   42864:	d908      	bls.n	42878 <__udivmoddi4+0x280>
   42866:	eb1c 0202 	adds.w	r2, ip, r2
   4286a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   4286e:	d216      	bcs.n	4289e <__udivmoddi4+0x2a6>
   42870:	4291      	cmp	r1, r2
   42872:	d914      	bls.n	4289e <__udivmoddi4+0x2a6>
   42874:	3d02      	subs	r5, #2
   42876:	4462      	add	r2, ip
   42878:	1a52      	subs	r2, r2, r1
   4287a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
   4287e:	e739      	b.n	426f4 <__udivmoddi4+0xfc>
   42880:	4631      	mov	r1, r6
   42882:	4630      	mov	r0, r6
   42884:	e709      	b.n	4269a <__udivmoddi4+0xa2>
   42886:	4639      	mov	r1, r7
   42888:	e6e7      	b.n	4265a <__udivmoddi4+0x62>
   4288a:	4610      	mov	r0, r2
   4288c:	e6fc      	b.n	42688 <__udivmoddi4+0x90>
   4288e:	45c1      	cmp	r9, r8
   42890:	d2aa      	bcs.n	427e8 <__udivmoddi4+0x1f0>
   42892:	ebb8 0e02 	subs.w	lr, r8, r2
   42896:	eb63 050c 	sbc.w	r5, r3, ip
   4289a:	3801      	subs	r0, #1
   4289c:	e7a4      	b.n	427e8 <__udivmoddi4+0x1f0>
   4289e:	4645      	mov	r5, r8
   428a0:	e7ea      	b.n	42878 <__udivmoddi4+0x280>
   428a2:	4603      	mov	r3, r0
   428a4:	e795      	b.n	427d2 <__udivmoddi4+0x1da>
   428a6:	4640      	mov	r0, r8
   428a8:	e7d1      	b.n	4284e <__udivmoddi4+0x256>
   428aa:	46d0      	mov	r8, sl
   428ac:	e77c      	b.n	427a8 <__udivmoddi4+0x1b0>
   428ae:	3d02      	subs	r5, #2
   428b0:	4462      	add	r2, ip
   428b2:	e733      	b.n	4271c <__udivmoddi4+0x124>
   428b4:	4608      	mov	r0, r1
   428b6:	e70b      	b.n	426d0 <__udivmoddi4+0xd8>
   428b8:	4464      	add	r4, ip
   428ba:	3802      	subs	r0, #2
   428bc:	e743      	b.n	42746 <__udivmoddi4+0x14e>
   428be:	bf00      	nop

000428c0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   428c0:	4770      	bx	lr

000428c2 <zmk_event_manager_raise>:

int zmk_event_manager_raise(zmk_event_t *event) { return zmk_event_manager_handle_from(event, 0); }
   428c2:	2100      	movs	r1, #0
   428c4:	f7e4 bf9a 	b.w	277fc <zmk_event_manager_handle_from>

000428c8 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   428c8:	2301      	movs	r3, #1
   428ca:	fa03 f101 	lsl.w	r1, r3, r1
   428ce:	6903      	ldr	r3, [r0, #16]
   428d0:	681b      	ldr	r3, [r3, #0]
   428d2:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   428d4:	bf18      	it	ne
   428d6:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   428da:	b112      	cbz	r2, 428e2 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   428dc:	6883      	ldr	r3, [r0, #8]
   428de:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   428e0:	4718      	bx	r3
   428e2:	6883      	ldr	r3, [r0, #8]
   428e4:	691b      	ldr	r3, [r3, #16]
   428e6:	e7fb      	b.n	428e0 <gpio_pin_set+0x18>

000428e8 <ext_power_generic_get>:
    return data->status;
   428e8:	6903      	ldr	r3, [r0, #16]
}
   428ea:	7918      	ldrb	r0, [r3, #4]
   428ec:	4770      	bx	lr

000428ee <ext_power_generic_enable>:
static int ext_power_generic_enable(const struct device *dev) {
   428ee:	b510      	push	{r4, lr}
    if (gpio_pin_set(data->gpio, config->pin, 1)) {
   428f0:	6843      	ldr	r3, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   428f2:	6904      	ldr	r4, [r0, #16]
    if (gpio_pin_set(data->gpio, config->pin, 1)) {
   428f4:	7919      	ldrb	r1, [r3, #4]
   428f6:	6820      	ldr	r0, [r4, #0]
   428f8:	2201      	movs	r2, #1
   428fa:	f7ff ffe5 	bl	428c8 <gpio_pin_set>
   428fe:	b928      	cbnz	r0, 4290c <ext_power_generic_enable+0x1e>
    data->status = true;
   42900:	2301      	movs	r3, #1
   42902:	7123      	strb	r3, [r4, #4]
}
   42904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return ext_power_save_state();
   42908:	f7e5 b81c 	b.w	27944 <ext_power_save_state>
}
   4290c:	f06f 0004 	mvn.w	r0, #4
   42910:	bd10      	pop	{r4, pc}

00042912 <ext_power_generic_disable>:
static int ext_power_generic_disable(const struct device *dev) {
   42912:	b510      	push	{r4, lr}
    if (gpio_pin_set(data->gpio, config->pin, 0)) {
   42914:	6843      	ldr	r3, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   42916:	6904      	ldr	r4, [r0, #16]
    if (gpio_pin_set(data->gpio, config->pin, 0)) {
   42918:	7919      	ldrb	r1, [r3, #4]
   4291a:	6820      	ldr	r0, [r4, #0]
   4291c:	2200      	movs	r2, #0
   4291e:	f7ff ffd3 	bl	428c8 <gpio_pin_set>
   42922:	b920      	cbnz	r0, 4292e <ext_power_generic_disable+0x1c>
    data->status = false;
   42924:	7120      	strb	r0, [r4, #4]
}
   42926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return ext_power_save_state();
   4292a:	f7e5 b80b 	b.w	27944 <ext_power_save_state>
}
   4292e:	f06f 0004 	mvn.w	r0, #4
   42932:	bd10      	pop	{r4, pc}

00042934 <behavior_reset_init>:
#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)
struct behavior_reset_config {
    int type;
};

static int behavior_reset_init(const struct device *dev) { return 0; };
   42934:	2000      	movs	r0, #0
   42936:	4770      	bx	lr

00042938 <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   42938:	b082      	sub	sp, #8
   4293a:	b508      	push	{r3, lr}
   4293c:	a902      	add	r1, sp, #8
   4293e:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   42942:	6800      	ldr	r0, [r0, #0]
   42944:	f7fe fa8c 	bl	40e60 <z_impl_device_get_binding>
    const struct behavior_reset_config *cfg = dev->config;

    // TODO: Correct magic code for going into DFU?
    // See
    // https://github.com/adafruit/Adafruit_nRF52_Bootloader/blob/d6b28e66053eea467166f44875e3c7ec741cb471/src/main.c#L107
    sys_reboot(cfg->type);
   42948:	6843      	ldr	r3, [r0, #4]
   4294a:	6818      	ldr	r0, [r3, #0]
   4294c:	f7e5 fda0 	bl	28490 <sys_reboot>

00042950 <ext_power_enable>:
    if (api->enable == NULL) {
   42950:	6883      	ldr	r3, [r0, #8]
   42952:	681b      	ldr	r3, [r3, #0]
   42954:	b103      	cbz	r3, 42958 <ext_power_enable+0x8>
    return api->enable(dev);
   42956:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_enable(dev);
}
   42958:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4295c:	4770      	bx	lr

0004295e <ext_power_disable>:
__syscall int ext_power_disable(const struct device *dev);

static inline int z_impl_ext_power_disable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->disable == NULL) {
   4295e:	6883      	ldr	r3, [r0, #8]
   42960:	685b      	ldr	r3, [r3, #4]
   42962:	b103      	cbz	r3, 42966 <ext_power_disable+0x8>
        return -ENOTSUP;
    }

    return api->disable(dev);
   42964:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_DISABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_disable(dev);
}
   42966:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4296a:	4770      	bx	lr

0004296c <ext_power_get>:
__syscall int ext_power_get(const struct device *dev);

static inline int z_impl_ext_power_get(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->get == NULL) {
   4296c:	6883      	ldr	r3, [r0, #8]
   4296e:	689b      	ldr	r3, [r3, #8]
   42970:	b103      	cbz	r3, 42974 <ext_power_get+0x8>
        return -ENOTSUP;
    }

    return api->get(dev);
   42972:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_GET);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_get(dev);
}
   42974:	f06f 0085 	mvn.w	r0, #133	; 0x85
   42978:	4770      	bx	lr

0004297a <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   4297a:	b082      	sub	sp, #8
   4297c:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   42980:	2000      	movs	r0, #0
   42982:	b002      	add	sp, #8
   42984:	4770      	bx	lr

00042986 <behavior_ext_power_init>:

static int behavior_ext_power_init(const struct device *dev) { return 0; };
   42986:	2000      	movs	r0, #0
   42988:	4770      	bx	lr

0004298a <zmk_battery_work>:
    int rc = zmk_battery_update(battery);
   4298a:	f7e5 b8b3 	b.w	27af4 <zmk_battery_update.constprop.0>

0004298e <split_listener>:
#include <zmk/event_manager.h>
#include <zmk/events/position_state_changed.h>
#include <zmk/hid.h>
#include <zmk/endpoints.h>

int split_listener(const zmk_event_t *eh) {
   4298e:	b508      	push	{r3, lr}
    LOG_DBG("");
    const struct zmk_position_state_changed *ev = as_zmk_position_state_changed(eh);
   42990:	f7e5 f83e 	bl	27a10 <as_zmk_position_state_changed>
    if (ev != NULL) {
   42994:	4603      	mov	r3, r0
   42996:	b150      	cbz	r0, 429ae <split_listener+0x20>
        if (ev->state) {
   42998:	7a1b      	ldrb	r3, [r3, #8]
            return zmk_split_bt_position_pressed(ev->position);
   4299a:	7900      	ldrb	r0, [r0, #4]
        if (ev->state) {
   4299c:	b11b      	cbz	r3, 429a6 <split_listener+0x18>
        } else {
            return zmk_split_bt_position_released(ev->position);
        }
    }
    return ZMK_EV_EVENT_BUBBLE;
}
   4299e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return zmk_split_bt_position_pressed(ev->position);
   429a2:	f7e5 b95f 	b.w	27c64 <zmk_split_bt_position_pressed>
}
   429a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return zmk_split_bt_position_released(ev->position);
   429aa:	f7e5 b969 	b.w	27c80 <zmk_split_bt_position_released>
}
   429ae:	bd08      	pop	{r3, pc}

000429b0 <split_svc_pos_state_ccc>:
}
   429b0:	4770      	bx	lr

000429b2 <split_svc_num_of_positions>:
                                          void *buf, uint16_t len, uint16_t offset) {
   429b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attrs, buf, len, offset, attrs->user_data, sizeof(uint8_t));
   429b4:	2401      	movs	r4, #1
   429b6:	9402      	str	r4, [sp, #8]
   429b8:	68cc      	ldr	r4, [r1, #12]
   429ba:	9401      	str	r4, [sp, #4]
   429bc:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   429c0:	9400      	str	r4, [sp, #0]
   429c2:	f004 fb74 	bl	470ae <bt_gatt_attr_read>
}
   429c6:	b004      	add	sp, #16
   429c8:	bd10      	pop	{r4, pc}

000429ca <split_svc_run_behavior>:
                                      uint8_t flags) {
   429ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   429ce:	b092      	sub	sp, #72	; 0x48
   429d0:	461f      	mov	r7, r3
   429d2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    uint16_t end_addr = offset + len;
   429d6:	19dd      	adds	r5, r3, r7
                                      uint8_t flags) {
   429d8:	460c      	mov	r4, r1
    uint16_t end_addr = offset + len;
   429da:	b2ad      	uxth	r5, r5
    if (end_addr > sizeof(struct zmk_split_run_behavior_payload)) {
   429dc:	2d13      	cmp	r5, #19
    struct zmk_split_run_behavior_payload *payload = attrs->user_data;
   429de:	68e4      	ldr	r4, [r4, #12]
                                      uint8_t flags) {
   429e0:	4611      	mov	r1, r2
    if (end_addr > sizeof(struct zmk_split_run_behavior_payload)) {
   429e2:	d860      	bhi.n	42aa6 <split_svc_run_behavior+0xdc>
    memcpy(payload + offset, buf, len);
   429e4:	2013      	movs	r0, #19
   429e6:	463a      	mov	r2, r7
   429e8:	fb00 4003 	mla	r0, r0, r3, r4
   429ec:	f002 fa09 	bl	44e02 <memcpy>
    if ((end_addr > sizeof(struct zmk_split_run_behavior_data)) &&
   429f0:	2d0a      	cmp	r5, #10
   429f2:	d941      	bls.n	42a78 <split_svc_run_behavior+0xae>
        payload->behavior_dev[end_addr - behavior_dev_offset - 1] == '\0') {
   429f4:	4425      	add	r5, r4
    if ((end_addr > sizeof(struct zmk_split_run_behavior_data)) &&
   429f6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   429fa:	2b00      	cmp	r3, #0
   429fc:	d13c      	bne.n	42a78 <split_svc_run_behavior+0xae>
            .behavior_dev = payload->behavior_dev,
   429fe:	f104 020a 	add.w	r2, r4, #10
        struct zmk_behavior_binding binding = {
   42a02:	9203      	str	r2, [sp, #12]
            .param1 = payload->data.param1,
   42a04:	f8d4 2002 	ldr.w	r2, [r4, #2]
        struct zmk_behavior_binding binding = {
   42a08:	9204      	str	r2, [sp, #16]
            .param2 = payload->data.param2,
   42a0a:	f8d4 2006 	ldr.w	r2, [r4, #6]
        struct zmk_behavior_binding_event event = {.position = payload->data.position,
   42a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   42a12:	f894 8000 	ldrb.w	r8, [r4]
	return z_impl_k_uptime_ticks();
   42a16:	f006 faa9 	bl	48f6c <z_impl_k_uptime_ticks>
   42a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   42a1e:	fba0 5c03 	umull	r5, ip, r0, r3
   42a22:	fb03 cc01 	mla	ip, r3, r1, ip
        if (payload->data.state > 0) {
   42a26:	7862      	ldrb	r2, [r4, #1]
   42a28:	0bed      	lsrs	r5, r5, #15
   42a2a:	ea45 454c 	orr.w	r5, r5, ip, lsl #17
   42a2e:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
   42a32:	e9cd 8507 	strd	r8, r5, [sp, #28]
   42a36:	ac0a      	add	r4, sp, #40	; 0x28
   42a38:	ab06      	add	r3, sp, #24
   42a3a:	ae0e      	add	r6, sp, #56	; 0x38
   42a3c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   42a40:	b1f2      	cbz	r2, 42a80 <split_svc_run_behavior+0xb6>
            err = behavior_keymap_binding_pressed(&binding, event);
   42a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   42a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_PRESSED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   42a48:	e9cd 850b 	strd	r8, r5, [sp, #44]	; 0x2c
   42a4c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   42a50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   42a54:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
__syscall int behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                              struct zmk_behavior_binding_event event);

static inline int z_impl_behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                                         struct zmk_behavior_binding_event event) {
    const struct device *dev = device_get_binding(binding->behavior_dev);
   42a58:	9803      	ldr	r0, [sp, #12]
   42a5a:	f7fe fa01 	bl	40e60 <z_impl_device_get_binding>

    if (dev == NULL) {
   42a5e:	b158      	cbz	r0, 42a78 <split_svc_run_behavior+0xae>
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_pressed == NULL) {
   42a60:	6883      	ldr	r3, [r0, #8]
   42a62:	689c      	ldr	r4, [r3, #8]
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_released == NULL) {
   42a64:	b144      	cbz	r4, 42a78 <split_svc_run_behavior+0xae>
        return -ENOTSUP;
    }

    return api->binding_released(binding, event);
   42a66:	ab12      	add	r3, sp, #72	; 0x48
   42a68:	e913 0003 	ldmdb	r3, {r0, r1}
   42a6c:	e88d 0003 	stmia.w	sp, {r0, r1}
   42a70:	a803      	add	r0, sp, #12
   42a72:	e896 000c 	ldmia.w	r6, {r2, r3}
   42a76:	47a0      	blx	r4
    return len;
   42a78:	4638      	mov	r0, r7
}
   42a7a:	b012      	add	sp, #72	; 0x48
   42a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            err = behavior_keymap_binding_released(&binding, event);
   42a80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   42a82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_RELEASED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_released(binding, event);
   42a86:	e9cd 850b 	strd	r8, r5, [sp, #44]	; 0x2c
   42a8a:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   42a8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   42a92:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   42a96:	9803      	ldr	r0, [sp, #12]
   42a98:	f7fe f9e2 	bl	40e60 <z_impl_device_get_binding>
    if (dev == NULL) {
   42a9c:	2800      	cmp	r0, #0
   42a9e:	d0eb      	beq.n	42a78 <split_svc_run_behavior+0xae>
    if (api->binding_released == NULL) {
   42aa0:	6883      	ldr	r3, [r0, #8]
   42aa2:	68dc      	ldr	r4, [r3, #12]
   42aa4:	e7de      	b.n	42a64 <split_svc_run_behavior+0x9a>
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   42aa6:	f06f 0006 	mvn.w	r0, #6
   42aaa:	e7e6      	b.n	42a7a <split_svc_run_behavior+0xb0>

00042aac <security_changed>:
static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err) {
   42aac:	b500      	push	{lr}
   42aae:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   42ab0:	f003 fa14 	bl	45edc <bt_conn_get_dst>
   42ab4:	4669      	mov	r1, sp
   42ab6:	f7e5 f901 	bl	27cbc <bt_addr_le_to_str.constprop.0.isra.0>
}
   42aba:	b009      	add	sp, #36	; 0x24
   42abc:	f85d fb04 	ldr.w	pc, [sp], #4

00042ac0 <le_param_updated>:
                             uint16_t timeout) {
   42ac0:	b500      	push	{lr}
   42ac2:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   42ac4:	f003 fa0a 	bl	45edc <bt_conn_get_dst>
   42ac8:	4669      	mov	r1, sp
   42aca:	f7e5 f8f7 	bl	27cbc <bt_addr_le_to_str.constprop.0.isra.0>
}
   42ace:	b009      	add	sp, #36	; 0x24
   42ad0:	f85d fb04 	ldr.w	pc, [sp], #4

00042ad4 <raise_usb_status_changed_event>:
static void raise_usb_status_changed_event(struct k_work *_work) {
   42ad4:	b508      	push	{r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   42ad6:	f7e5 f983 	bl	27de0 <zmk_usb_get_conn_state>
   42ada:	f7e4 ffa3 	bl	27a24 <new_zmk_usb_conn_state_changed>
}
   42ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   42ae2:	f7ff beee 	b.w	428c2 <zmk_event_manager_raise>

00042ae6 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   42ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   42ae8:	2364      	movs	r3, #100	; 0x64
{
   42aea:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   42aec:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   42aee:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   42af0:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   42af4:	b111      	cbz	r1, 42afc <u8_to_dec+0x16>
   42af6:	3d01      	subs	r5, #1
   42af8:	d101      	bne.n	42afe <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   42afa:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   42afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   42afe:	429a      	cmp	r2, r3
		digit = value / divisor;
   42b00:	fbb2 f7f3 	udiv	r7, r2, r3
   42b04:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   42b06:	d202      	bcs.n	42b0e <u8_to_dec+0x28>
   42b08:	2b01      	cmp	r3, #1
   42b0a:	d000      	beq.n	42b0e <u8_to_dec+0x28>
   42b0c:	b130      	cbz	r0, 42b1c <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   42b0e:	3630      	adds	r6, #48	; 0x30
			buflen--;
   42b10:	3901      	subs	r1, #1
			num_digits++;
   42b12:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   42b14:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   42b18:	b2c9      	uxtb	r1, r1
			num_digits++;
   42b1a:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   42b1c:	fb03 2217 	mls	r2, r3, r7, r2
   42b20:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   42b22:	fbb3 f3fc 	udiv	r3, r3, ip
   42b26:	e7e5      	b.n	42af4 <u8_to_dec+0xe>

00042b28 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   42b28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   42b2c:	b2db      	uxtb	r3, r3
   42b2e:	2b09      	cmp	r3, #9
   42b30:	d802      	bhi.n	42b38 <char2hex+0x10>
		*x = c - '0';
   42b32:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   42b34:	2000      	movs	r0, #0
   42b36:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   42b38:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   42b3c:	2b05      	cmp	r3, #5
   42b3e:	d802      	bhi.n	42b46 <char2hex+0x1e>
		*x = c - 'a' + 10;
   42b40:	3857      	subs	r0, #87	; 0x57
   42b42:	7008      	strb	r0, [r1, #0]
   42b44:	e7f6      	b.n	42b34 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   42b46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   42b4a:	2b05      	cmp	r3, #5
   42b4c:	d801      	bhi.n	42b52 <char2hex+0x2a>
		*x = c - 'A' + 10;
   42b4e:	3837      	subs	r0, #55	; 0x37
   42b50:	e7f7      	b.n	42b42 <char2hex+0x1a>
		return -EINVAL;
   42b52:	f06f 0015 	mvn.w	r0, #21
}
   42b56:	4770      	bx	lr

00042b58 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   42b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   42b5a:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   42b5c:	f001 0001 	and.w	r0, r1, #1
   42b60:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   42b64:	429e      	cmp	r6, r3
   42b66:	ea4f 0751 	mov.w	r7, r1, lsr #1
   42b6a:	d903      	bls.n	42b74 <hex2bin+0x1c>
		return 0;
   42b6c:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   42b6e:	4630      	mov	r0, r6
   42b70:	b003      	add	sp, #12
   42b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   42b74:	b158      	cbz	r0, 42b8e <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   42b76:	7828      	ldrb	r0, [r5, #0]
   42b78:	f10d 0107 	add.w	r1, sp, #7
   42b7c:	f7ff ffd4 	bl	42b28 <char2hex>
   42b80:	2800      	cmp	r0, #0
   42b82:	dbf3      	blt.n	42b6c <hex2bin+0x14>
		buf[0] = dec;
   42b84:	f89d 3007 	ldrb.w	r3, [sp, #7]
   42b88:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   42b8c:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   42b8e:	3501      	adds	r5, #1
   42b90:	4417      	add	r7, r2
   42b92:	42ba      	cmp	r2, r7
   42b94:	d0eb      	beq.n	42b6e <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   42b96:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   42b9a:	f10d 0107 	add.w	r1, sp, #7
   42b9e:	f7ff ffc3 	bl	42b28 <char2hex>
   42ba2:	2800      	cmp	r0, #0
   42ba4:	dbe2      	blt.n	42b6c <hex2bin+0x14>
		buf[i] = dec << 4;
   42ba6:	f89d 4007 	ldrb.w	r4, [sp, #7]
   42baa:	0124      	lsls	r4, r4, #4
   42bac:	b2e4      	uxtb	r4, r4
   42bae:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   42bb0:	f815 0b02 	ldrb.w	r0, [r5], #2
   42bb4:	f7ff ffb8 	bl	42b28 <char2hex>
   42bb8:	2800      	cmp	r0, #0
   42bba:	dbd7      	blt.n	42b6c <hex2bin+0x14>
		buf[i] += dec;
   42bbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   42bc0:	441c      	add	r4, r3
   42bc2:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   42bc6:	e7e4      	b.n	42b92 <hex2bin+0x3a>

00042bc8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   42bc8:	4603      	mov	r3, r0
   42bca:	b140      	cbz	r0, 42bde <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   42bcc:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   42bce:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   42bd2:	2a02      	cmp	r2, #2
   42bd4:	d006      	beq.n	42be4 <sys_notify_validate+0x1c>
   42bd6:	2a03      	cmp	r2, #3
   42bd8:	d004      	beq.n	42be4 <sys_notify_validate+0x1c>
   42bda:	2a01      	cmp	r2, #1
   42bdc:	d005      	beq.n	42bea <sys_notify_validate+0x22>
		return -EINVAL;
   42bde:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   42be2:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   42be4:	681a      	ldr	r2, [r3, #0]
   42be6:	2a00      	cmp	r2, #0
   42be8:	d0f9      	beq.n	42bde <sys_notify_validate+0x16>
		notify->result = 0;
   42bea:	2000      	movs	r0, #0
   42bec:	6098      	str	r0, [r3, #8]
   42bee:	4770      	bx	lr

00042bf0 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   42bf0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   42bf2:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   42bf6:	2a02      	cmp	r2, #2
{
   42bf8:	b510      	push	{r4, lr}
   42bfa:	4603      	mov	r3, r0
	notify->result = res;
   42bfc:	6081      	str	r1, [r0, #8]
	switch (method) {
   42bfe:	d00a      	beq.n	42c16 <sys_notify_finalize+0x26>
   42c00:	2a03      	cmp	r2, #3
   42c02:	d10b      	bne.n	42c1c <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   42c04:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   42c06:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   42c08:	2200      	movs	r2, #0
   42c0a:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   42c0c:	b108      	cbz	r0, 42c12 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   42c0e:	f7ff fca5 	bl	4255c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   42c12:	4620      	mov	r0, r4
   42c14:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   42c16:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   42c18:	2400      	movs	r4, #0
		break;
   42c1a:	e7f5      	b.n	42c08 <sys_notify_finalize+0x18>
	switch (method) {
   42c1c:	2400      	movs	r4, #0
   42c1e:	4620      	mov	r0, r4
   42c20:	e7f2      	b.n	42c08 <sys_notify_finalize+0x18>

00042c22 <arch_printk_char_out>:
}
   42c22:	2000      	movs	r0, #0
   42c24:	4770      	bx	lr

00042c26 <str_out>:
{
   42c26:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   42c28:	688a      	ldr	r2, [r1, #8]
   42c2a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   42c2c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   42c2e:	b114      	cbz	r4, 42c36 <str_out+0x10>
   42c30:	684b      	ldr	r3, [r1, #4]
   42c32:	4293      	cmp	r3, r2
   42c34:	dc01      	bgt.n	42c3a <str_out+0x14>
		ctx->count++;
   42c36:	608d      	str	r5, [r1, #8]
}
   42c38:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   42c3a:	3b01      	subs	r3, #1
   42c3c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   42c3e:	bf08      	it	eq
   42c40:	2200      	moveq	r2, #0
   42c42:	608d      	str	r5, [r1, #8]
   42c44:	bf0c      	ite	eq
   42c46:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   42c48:	54a0      	strbne	r0, [r4, r2]
   42c4a:	e7f5      	b.n	42c38 <str_out+0x12>

00042c4c <printk>:
{
   42c4c:	b40f      	push	{r0, r1, r2, r3}
   42c4e:	b507      	push	{r0, r1, r2, lr}
   42c50:	a904      	add	r1, sp, #16
   42c52:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   42c56:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   42c58:	f7e5 f8fa 	bl	27e50 <vprintk>
}
   42c5c:	b003      	add	sp, #12
   42c5e:	f85d eb04 	ldr.w	lr, [sp], #4
   42c62:	b004      	add	sp, #16
   42c64:	4770      	bx	lr

00042c66 <snprintk>:
{
   42c66:	b40c      	push	{r2, r3}
   42c68:	b507      	push	{r0, r1, r2, lr}
   42c6a:	ab04      	add	r3, sp, #16
   42c6c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   42c70:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   42c72:	f7e5 f8fb 	bl	27e6c <vsnprintk>
}
   42c76:	b003      	add	sp, #12
   42c78:	f85d eb04 	ldr.w	lr, [sp], #4
   42c7c:	b002      	add	sp, #8
   42c7e:	4770      	bx	lr

00042c80 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   42c80:	b510      	push	{r4, lr}
	return list->head;
   42c82:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   42c84:	2200      	movs	r2, #0
   42c86:	b90b      	cbnz	r3, 42c8c <sys_slist_find_and_remove+0xc>
   42c88:	4618      	mov	r0, r3
   42c8a:	e00b      	b.n	42ca4 <sys_slist_find_and_remove+0x24>
   42c8c:	428b      	cmp	r3, r1
   42c8e:	d10f      	bne.n	42cb0 <sys_slist_find_and_remove+0x30>
	return node->next;
   42c90:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   42c92:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   42c94:	b93a      	cbnz	r2, 42ca6 <sys_slist_find_and_remove+0x26>
   42c96:	42a1      	cmp	r1, r4
	list->head = node;
   42c98:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   42c9a:	d100      	bne.n	42c9e <sys_slist_find_and_remove+0x1e>
	list->tail = node;
   42c9c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   42c9e:	2300      	movs	r3, #0
   42ca0:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   42ca2:	2001      	movs	r0, #1
   42ca4:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   42ca6:	42a1      	cmp	r1, r4
	parent->next = child;
   42ca8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   42caa:	bf08      	it	eq
   42cac:	6042      	streq	r2, [r0, #4]
}
   42cae:	e7f6      	b.n	42c9e <sys_slist_find_and_remove+0x1e>
	return node->next;
   42cb0:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   42cb2:	681b      	ldr	r3, [r3, #0]
   42cb4:	e7e7      	b.n	42c86 <sys_slist_find_and_remove+0x6>

00042cb6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   42cb6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   42cb8:	f013 0307 	ands.w	r3, r3, #7
   42cbc:	d105      	bne.n	42cca <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   42cbe:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   42cc0:	2b00      	cmp	r3, #0
   42cc2:	bf0c      	ite	eq
   42cc4:	2000      	moveq	r0, #0
   42cc6:	2003      	movne	r0, #3
   42cc8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   42cca:	2b02      	cmp	r3, #2
   42ccc:	d105      	bne.n	42cda <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   42cce:	8b40      	ldrh	r0, [r0, #26]
   42cd0:	fab0 f080 	clz	r0, r0
   42cd4:	0940      	lsrs	r0, r0, #5
   42cd6:	0080      	lsls	r0, r0, #2
   42cd8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   42cda:	2b01      	cmp	r3, #1
   42cdc:	d105      	bne.n	42cea <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   42cde:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   42ce0:	2b00      	cmp	r3, #0
   42ce2:	bf0c      	ite	eq
   42ce4:	2000      	moveq	r0, #0
   42ce6:	2005      	movne	r0, #5
   42ce8:	4770      	bx	lr
	int evt = EVT_NOP;
   42cea:	2000      	movs	r0, #0
}
   42cec:	4770      	bx	lr

00042cee <notify_one>:
{
   42cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42cf2:	460d      	mov	r5, r1
   42cf4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   42cf6:	4619      	mov	r1, r3
   42cf8:	1d28      	adds	r0, r5, #4
{
   42cfa:	4690      	mov	r8, r2
   42cfc:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   42cfe:	f7ff ff77 	bl	42bf0 <sys_notify_finalize>
	if (cb) {
   42d02:	4604      	mov	r4, r0
   42d04:	b138      	cbz	r0, 42d16 <notify_one+0x28>
		cb(mgr, cli, state, res);
   42d06:	4633      	mov	r3, r6
   42d08:	4642      	mov	r2, r8
   42d0a:	4629      	mov	r1, r5
   42d0c:	4638      	mov	r0, r7
   42d0e:	46a4      	mov	ip, r4
}
   42d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   42d14:	4760      	bx	ip
}
   42d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00042d1a <transition_complete>:
{
   42d1a:	b410      	push	{r4}
	__asm__ volatile(
   42d1c:	f04f 0420 	mov.w	r4, #32
   42d20:	f3ef 8211 	mrs	r2, BASEPRI
   42d24:	f384 8812 	msr	BASEPRI_MAX, r4
   42d28:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   42d2c:	6141      	str	r1, [r0, #20]
}
   42d2e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   42d30:	2101      	movs	r1, #1
   42d32:	f7e5 b8af 	b.w	27e94 <process_event>

00042d36 <validate_args>:
{
   42d36:	b510      	push	{r4, lr}
   42d38:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   42d3a:	b140      	cbz	r0, 42d4e <validate_args+0x18>
   42d3c:	b139      	cbz	r1, 42d4e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   42d3e:	1d08      	adds	r0, r1, #4
   42d40:	f7ff ff42 	bl	42bc8 <sys_notify_validate>
	if ((rv == 0)
   42d44:	b928      	cbnz	r0, 42d52 <validate_args+0x1c>
	    && ((cli->notify.flags
   42d46:	68a3      	ldr	r3, [r4, #8]
   42d48:	f033 0303 	bics.w	r3, r3, #3
   42d4c:	d001      	beq.n	42d52 <validate_args+0x1c>
		rv = -EINVAL;
   42d4e:	f06f 0015 	mvn.w	r0, #21
}
   42d52:	bd10      	pop	{r4, pc}

00042d54 <onoff_manager_init>:
{
   42d54:	b538      	push	{r3, r4, r5, lr}
   42d56:	460c      	mov	r4, r1
	if ((mgr == NULL)
   42d58:	4605      	mov	r5, r0
   42d5a:	b158      	cbz	r0, 42d74 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   42d5c:	b151      	cbz	r1, 42d74 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   42d5e:	680b      	ldr	r3, [r1, #0]
   42d60:	b143      	cbz	r3, 42d74 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   42d62:	684b      	ldr	r3, [r1, #4]
   42d64:	b133      	cbz	r3, 42d74 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   42d66:	221c      	movs	r2, #28
   42d68:	2100      	movs	r1, #0
   42d6a:	f002 f855 	bl	44e18 <memset>
   42d6e:	612c      	str	r4, [r5, #16]
	return 0;
   42d70:	2000      	movs	r0, #0
}
   42d72:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   42d74:	f06f 0015 	mvn.w	r0, #21
   42d78:	e7fb      	b.n	42d72 <onoff_manager_init+0x1e>

00042d7a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   42d7a:	b570      	push	{r4, r5, r6, lr}
   42d7c:	4604      	mov	r4, r0
   42d7e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   42d80:	f7ff ffd9 	bl	42d36 <validate_args>

	if (rv < 0) {
   42d84:	1e05      	subs	r5, r0, #0
   42d86:	db34      	blt.n	42df2 <onoff_request+0x78>
   42d88:	f04f 0320 	mov.w	r3, #32
   42d8c:	f3ef 8111 	mrs	r1, BASEPRI
   42d90:	f383 8812 	msr	BASEPRI_MAX, r3
   42d94:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   42d98:	8b23      	ldrh	r3, [r4, #24]
   42d9a:	f003 0207 	and.w	r2, r3, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   42d9e:	8b63      	ldrh	r3, [r4, #26]
   42da0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   42da4:	4283      	cmp	r3, r0
   42da6:	d02d      	beq.n	42e04 <onoff_request+0x8a>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   42da8:	2a02      	cmp	r2, #2
	rv = state;
   42daa:	4615      	mov	r5, r2
	if (state == ONOFF_STATE_ON) {
   42dac:	d10d      	bne.n	42dca <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   42dae:	3301      	adds	r3, #1
   42db0:	8363      	strh	r3, [r4, #26]
		notify = true;
   42db2:	2301      	movs	r3, #1
	__asm__ volatile(
   42db4:	f381 8811 	msr	BASEPRI, r1
   42db8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   42dbc:	b1cb      	cbz	r3, 42df2 <onoff_request+0x78>
			notify_one(mgr, cli, state, 0);
   42dbe:	2300      	movs	r3, #0
   42dc0:	4631      	mov	r1, r6
   42dc2:	4620      	mov	r0, r4
   42dc4:	f7ff ff93 	bl	42cee <notify_one>
   42dc8:	e013      	b.n	42df2 <onoff_request+0x78>
	} else if ((state == ONOFF_STATE_OFF)
   42dca:	2a06      	cmp	r2, #6
   42dcc:	d816      	bhi.n	42dfc <onoff_request+0x82>
   42dce:	e8df f002 	tbb	[pc, r2]
   42dd2:	1504      	.short	0x1504
   42dd4:	1c041515 	.word	0x1c041515
   42dd8:	04          	.byte	0x04
   42dd9:	00          	.byte	0x00
	parent->next = child;
   42dda:	2300      	movs	r3, #0
   42ddc:	6033      	str	r3, [r6, #0]
	return list->tail;
   42dde:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   42de0:	b94b      	cbnz	r3, 42df6 <onoff_request+0x7c>
	list->head = node;
   42de2:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   42de6:	b95a      	cbnz	r2, 42e00 <onoff_request+0x86>
		process_event(mgr, EVT_RECHECK, key);
   42de8:	460a      	mov	r2, r1
   42dea:	4620      	mov	r0, r4
   42dec:	2102      	movs	r1, #2
   42dee:	f7e5 f851 	bl	27e94 <process_event>
		}
	}

	return rv;
}
   42df2:	4628      	mov	r0, r5
   42df4:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   42df6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   42df8:	6066      	str	r6, [r4, #4]
}
   42dfa:	e7f4      	b.n	42de6 <onoff_request+0x6c>
	if (state == ONOFF_STATE_ON) {
   42dfc:	f06f 0504 	mvn.w	r5, #4
   42e00:	2300      	movs	r3, #0
   42e02:	e7d7      	b.n	42db4 <onoff_request+0x3a>
		rv = -EAGAIN;
   42e04:	f06f 050a 	mvn.w	r5, #10
   42e08:	e7fa      	b.n	42e00 <onoff_request+0x86>
	if (state == ONOFF_STATE_ON) {
   42e0a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   42e0e:	e7f7      	b.n	42e00 <onoff_request+0x86>

00042e10 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   42e10:	b510      	push	{r4, lr}
	__asm__ volatile(
   42e12:	f04f 0320 	mov.w	r3, #32
   42e16:	f3ef 8211 	mrs	r2, BASEPRI
   42e1a:	f383 8812 	msr	BASEPRI_MAX, r3
   42e1e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   42e22:	8b04      	ldrh	r4, [r0, #24]
   42e24:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   42e28:	2c02      	cmp	r4, #2
   42e2a:	d00a      	beq.n	42e42 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   42e2c:	2c01      	cmp	r4, #1
   42e2e:	bf0c      	ite	eq
   42e30:	f06f 0004 	mvneq.w	r0, #4
   42e34:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   42e38:	f382 8811 	msr	BASEPRI, r2
   42e3c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   42e40:	e008      	b.n	42e54 <onoff_release+0x44>
	mgr->refs -= 1U;
   42e42:	8b43      	ldrh	r3, [r0, #26]
   42e44:	3b01      	subs	r3, #1
   42e46:	b29b      	uxth	r3, r3
   42e48:	8343      	strh	r3, [r0, #26]
	if (stop) {
   42e4a:	b923      	cbnz	r3, 42e56 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   42e4c:	4621      	mov	r1, r4
   42e4e:	f7e5 f821 	bl	27e94 <process_event>
	int rv = state;
   42e52:	4620      	mov	r0, r4
}
   42e54:	bd10      	pop	{r4, pc}
	int rv = state;
   42e56:	4620      	mov	r0, r4
   42e58:	e7ee      	b.n	42e38 <onoff_release+0x28>

00042e5a <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   42e5a:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   42e5c:	b1b0      	cbz	r0, 42e8c <onoff_cancel+0x32>
   42e5e:	b1a9      	cbz	r1, 42e8c <onoff_cancel+0x32>
	__asm__ volatile(
   42e60:	f04f 0220 	mov.w	r2, #32
   42e64:	f3ef 8511 	mrs	r5, BASEPRI
   42e68:	f382 8812 	msr	BASEPRI_MAX, r2
   42e6c:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   42e70:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   42e72:	f7ff ff05 	bl	42c80 <sys_slist_find_and_remove>
   42e76:	b130      	cbz	r0, 42e86 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   42e78:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   42e7c:	f385 8811 	msr	BASEPRI, r5
   42e80:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   42e84:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   42e86:	f06f 0077 	mvn.w	r0, #119	; 0x77
   42e8a:	e7f7      	b.n	42e7c <onoff_cancel+0x22>
		return -EINVAL;
   42e8c:	f06f 0015 	mvn.w	r0, #21
   42e90:	e7f8      	b.n	42e84 <onoff_cancel+0x2a>

00042e92 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   42e92:	4604      	mov	r4, r0
   42e94:	b508      	push	{r3, lr}
   42e96:	4608      	mov	r0, r1
   42e98:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   42e9a:	461a      	mov	r2, r3
   42e9c:	47a0      	blx	r4
	return z_impl_z_current_get();
   42e9e:	f7ff f8a3 	bl	41fe8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   42ea2:	f7e7 faff 	bl	2a4a4 <z_impl_k_thread_abort>

00042ea6 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   42ea6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   42eaa:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   42eac:	0840      	lsrs	r0, r0, #1
   42eae:	4770      	bx	lr

00042eb0 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   42eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   42eb2:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   42eb4:	f7ff fff7 	bl	42ea6 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   42eb8:	fab0 f080 	clz	r0, r0
   42ebc:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   42ec0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   42ec4:	00ca      	lsls	r2, r1, #3
   42ec6:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   42eca:	1d17      	adds	r7, r2, #4
{
   42ecc:	460c      	mov	r4, r1
   42ece:	3206      	adds	r2, #6
   42ed0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   42ed2:	b956      	cbnz	r6, 42eea <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   42ed4:	2101      	movs	r1, #1
   42ed6:	fa01 f000 	lsl.w	r0, r1, r0
   42eda:	68d9      	ldr	r1, [r3, #12]
   42edc:	4301      	orrs	r1, r0
   42ede:	60d9      	str	r1, [r3, #12]
		b->next = c;
   42ee0:	f8cc 4010 	str.w	r4, [ip, #16]
   42ee4:	53dd      	strh	r5, [r3, r7]
   42ee6:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   42ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   42eea:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   42eec:	3104      	adds	r1, #4
   42eee:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   42ef0:	53d8      	strh	r0, [r3, r7]
   42ef2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   42ef6:	529e      	strh	r6, [r3, r2]
   42ef8:	80c5      	strh	r5, [r0, #6]
   42efa:	525d      	strh	r5, [r3, r1]
   42efc:	e7f4      	b.n	42ee8 <free_list_add+0x38>

00042efe <free_list_remove_bidx>:
{
   42efe:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   42f00:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   42f04:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   42f06:	4299      	cmp	r1, r3
   42f08:	f102 0104 	add.w	r1, r2, #4
   42f0c:	d10a      	bne.n	42f24 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   42f0e:	2301      	movs	r3, #1
   42f10:	fa03 f202 	lsl.w	r2, r3, r2
   42f14:	68c3      	ldr	r3, [r0, #12]
   42f16:	ea23 0302 	bic.w	r3, r3, r2
   42f1a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   42f1c:	2300      	movs	r3, #0
   42f1e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   42f22:	bd10      	pop	{r4, pc}
   42f24:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   42f26:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   42f2a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   42f2e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   42f32:	80cb      	strh	r3, [r1, #6]
   42f34:	8082      	strh	r2, [r0, #4]
}
   42f36:	e7f4      	b.n	42f22 <free_list_remove_bidx+0x24>

00042f38 <free_list_remove>:
{
   42f38:	b508      	push	{r3, lr}
   42f3a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   42f3c:	f7ff ffb3 	bl	42ea6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   42f40:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   42f44:	f1c2 021f 	rsb	r2, r2, #31
   42f48:	4618      	mov	r0, r3
}
   42f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   42f4e:	f7ff bfd6 	b.w	42efe <free_list_remove_bidx>

00042f52 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   42f52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42f56:	fab1 f581 	clz	r5, r1
   42f5a:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   42f5e:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   42f62:	4603      	mov	r3, r0
	if (b->next) {
   42f64:	693a      	ldr	r2, [r7, #16]
{
   42f66:	460e      	mov	r6, r1
	if (b->next) {
   42f68:	b1c2      	cbz	r2, 42f9c <alloc_chunk+0x4a>
   42f6a:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   42f6e:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   42f70:	4618      	mov	r0, r3
   42f72:	4621      	mov	r1, r4
   42f74:	f7ff ff97 	bl	42ea6 <chunk_size>
   42f78:	42b0      	cmp	r0, r6
   42f7a:	d306      	bcc.n	42f8a <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   42f7c:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   42f7e:	4618      	mov	r0, r3
   42f80:	f7ff ffbd 	bl	42efe <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   42f84:	4620      	mov	r0, r4
   42f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   42f8a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   42f8e:	f1b8 0801 	subs.w	r8, r8, #1
   42f92:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   42f94:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   42f96:	d001      	beq.n	42f9c <alloc_chunk+0x4a>
   42f98:	4282      	cmp	r2, r0
   42f9a:	d1e8      	bne.n	42f6e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   42f9c:	f1c5 0220 	rsb	r2, r5, #32
   42fa0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   42fa4:	4094      	lsls	r4, r2
   42fa6:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   42fa8:	4014      	ands	r4, r2
   42faa:	d0eb      	beq.n	42f84 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   42fac:	fa94 f2a4 	rbit	r2, r4
   42fb0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   42fb4:	1d11      	adds	r1, r2, #4
   42fb6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   42fba:	4621      	mov	r1, r4
   42fbc:	e7df      	b.n	42f7e <alloc_chunk+0x2c>

00042fbe <merge_chunks>:
{
   42fbe:	b538      	push	{r3, r4, r5, lr}
   42fc0:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   42fc2:	f7ff ff70 	bl	42ea6 <chunk_size>
{
   42fc6:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   42fc8:	4604      	mov	r4, r0
   42fca:	4611      	mov	r1, r2
   42fcc:	4618      	mov	r0, r3
   42fce:	f7ff ff6a 	bl	42ea6 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   42fd2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   42fd6:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   42fd8:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   42fda:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   42fdc:	4618      	mov	r0, r3
   42fde:	f7ff ff62 	bl	42ea6 <chunk_size>
	void *cmem = &buf[c];
   42fe2:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   42fe4:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   42fe8:	bd38      	pop	{r3, r4, r5, pc}

00042fea <split_chunks>:
{
   42fea:	b538      	push	{r3, r4, r5, lr}
   42fec:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   42fee:	f7ff ff5a 	bl	42ea6 <chunk_size>
{
   42ff2:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   42ff4:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   42ff6:	1a51      	subs	r1, r2, r1
   42ff8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   42ffc:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   42ffe:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   43000:	8060      	strh	r0, [r4, #2]
   43002:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   43006:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   43008:	8044      	strh	r4, [r0, #2]
   4300a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   4300e:	4618      	mov	r0, r3
   43010:	4611      	mov	r1, r2
   43012:	f7ff ff48 	bl	42ea6 <chunk_size>
	void *cmem = &buf[c];
   43016:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   43018:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   4301c:	bd38      	pop	{r3, r4, r5, pc}

0004301e <free_chunk>:
{
   4301e:	b538      	push	{r3, r4, r5, lr}
   43020:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   43022:	f7ff ff40 	bl	42ea6 <chunk_size>
   43026:	460c      	mov	r4, r1
   43028:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   4302a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   4302e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   43030:	07da      	lsls	r2, r3, #31
   43032:	d40a      	bmi.n	4304a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   43034:	4628      	mov	r0, r5
   43036:	f7ff ff7f 	bl	42f38 <free_list_remove>
	return c + chunk_size(h, c);
   4303a:	4621      	mov	r1, r4
   4303c:	4628      	mov	r0, r5
   4303e:	f7ff ff32 	bl	42ea6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   43042:	1822      	adds	r2, r4, r0
   43044:	4628      	mov	r0, r5
   43046:	f7ff ffba 	bl	42fbe <merge_chunks>
		return ((uint16_t *)cmem)[f];
   4304a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   4304e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   43050:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   43054:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   43056:	07db      	lsls	r3, r3, #31
   43058:	d40c      	bmi.n	43074 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   4305a:	4628      	mov	r0, r5
   4305c:	f7ff ff6c 	bl	42f38 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   43060:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   43064:	4622      	mov	r2, r4
   43066:	1a61      	subs	r1, r4, r1
   43068:	4628      	mov	r0, r5
   4306a:	f7ff ffa8 	bl	42fbe <merge_chunks>
   4306e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   43072:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   43074:	4621      	mov	r1, r4
   43076:	4628      	mov	r0, r5
}
   43078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   4307c:	f7ff bf18 	b.w	42eb0 <free_list_add>

00043080 <sys_heap_free>:
	if (mem == NULL) {
   43080:	b161      	cbz	r1, 4309c <sys_heap_free+0x1c>
   43082:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   43084:	3904      	subs	r1, #4
   43086:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   43088:	f021 0307 	bic.w	r3, r1, #7
   4308c:	4403      	add	r3, r0
	free_chunk(h, c);
   4308e:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   43090:	885a      	ldrh	r2, [r3, #2]
   43092:	f022 0201 	bic.w	r2, r2, #1
   43096:	805a      	strh	r2, [r3, #2]
   43098:	f7ff bfc1 	b.w	4301e <free_chunk>
}
   4309c:	4770      	bx	lr

0004309e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   4309e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   430a0:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   430a2:	b909      	cbnz	r1, 430a8 <sys_heap_alloc+0xa>
		return NULL;
   430a4:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   430a6:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   430a8:	68ab      	ldr	r3, [r5, #8]
   430aa:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   430ae:	d9f9      	bls.n	430a4 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   430b0:	310b      	adds	r1, #11
   430b2:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   430b4:	4621      	mov	r1, r4
   430b6:	4628      	mov	r0, r5
   430b8:	f7ff ff4b 	bl	42f52 <alloc_chunk>
	if (c == 0U) {
   430bc:	4606      	mov	r6, r0
   430be:	2800      	cmp	r0, #0
   430c0:	d0f0      	beq.n	430a4 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   430c2:	4601      	mov	r1, r0
   430c4:	4628      	mov	r0, r5
   430c6:	f7ff feee 	bl	42ea6 <chunk_size>
   430ca:	42a0      	cmp	r0, r4
   430cc:	d907      	bls.n	430de <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   430ce:	1932      	adds	r2, r6, r4
   430d0:	4628      	mov	r0, r5
   430d2:	f7ff ff8a 	bl	42fea <split_chunks>
		free_list_add(h, c + chunk_sz);
   430d6:	4611      	mov	r1, r2
   430d8:	4628      	mov	r0, r5
   430da:	f7ff fee9 	bl	42eb0 <free_list_add>
	void *cmem = &buf[c];
   430de:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   430e2:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   430e4:	8853      	ldrh	r3, [r2, #2]
   430e6:	f043 0301 	orr.w	r3, r3, #1
   430ea:	8053      	strh	r3, [r2, #2]
   430ec:	3004      	adds	r0, #4
	return mem;
   430ee:	e7da      	b.n	430a6 <sys_heap_alloc+0x8>

000430f0 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   430f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   430f4:	424b      	negs	r3, r1
   430f6:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   430fa:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
   430fe:	6806      	ldr	r6, [r0, #0]
{
   43100:	4614      	mov	r4, r2
	if (align != rew) {
   43102:	d00a      	beq.n	4311a <sys_heap_aligned_alloc+0x2a>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   43104:	2f04      	cmp	r7, #4
   43106:	463b      	mov	r3, r7
   43108:	46b9      	mov	r9, r7
   4310a:	bf28      	it	cs
   4310c:	2304      	movcs	r3, #4
		align -= rew;
   4310e:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   43110:	b974      	cbnz	r4, 43130 <sys_heap_aligned_alloc+0x40>
		return NULL;
   43112:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   43114:	4628      	mov	r0, r5
   43116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   4311a:	2904      	cmp	r1, #4
   4311c:	d804      	bhi.n	43128 <sys_heap_aligned_alloc+0x38>
}
   4311e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   43122:	4611      	mov	r1, r2
   43124:	f7ff bfbb 	b.w	4309e <sys_heap_alloc>
		rew = 0;
   43128:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   4312c:	2304      	movs	r3, #4
   4312e:	e7ef      	b.n	43110 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   43130:	68b2      	ldr	r2, [r6, #8]
   43132:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   43136:	d9ec      	bls.n	43112 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   43138:	f104 010b 	add.w	r1, r4, #11
   4313c:	4439      	add	r1, r7
   4313e:	1ac9      	subs	r1, r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   43140:	08c9      	lsrs	r1, r1, #3
   43142:	4630      	mov	r0, r6
   43144:	f7ff ff05 	bl	42f52 <alloc_chunk>
	if (c0 == 0) {
   43148:	4680      	mov	r8, r0
   4314a:	2800      	cmp	r0, #0
   4314c:	d0e1      	beq.n	43112 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   4314e:	f109 0504 	add.w	r5, r9, #4
   43152:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   43156:	1e7b      	subs	r3, r7, #1
   43158:	4435      	add	r5, r6
   4315a:	441d      	add	r5, r3
   4315c:	427f      	negs	r7, r7
   4315e:	403d      	ands	r5, r7
   43160:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   43164:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   43166:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   43168:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4316a:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   4316c:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   43170:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   43172:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   43176:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   4317a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   4317e:	d208      	bcs.n	43192 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   43180:	4601      	mov	r1, r0
   43182:	463a      	mov	r2, r7
   43184:	4630      	mov	r0, r6
   43186:	f7ff ff30 	bl	42fea <split_chunks>
		free_list_add(h, c0);
   4318a:	4641      	mov	r1, r8
   4318c:	4630      	mov	r0, r6
   4318e:	f7ff fe8f 	bl	42eb0 <free_list_add>
	return c + chunk_size(h, c);
   43192:	4639      	mov	r1, r7
   43194:	4630      	mov	r0, r6
   43196:	f7ff fe86 	bl	42ea6 <chunk_size>
   4319a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   4319c:	4284      	cmp	r4, r0
   4319e:	d207      	bcs.n	431b0 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   431a0:	4630      	mov	r0, r6
   431a2:	4622      	mov	r2, r4
   431a4:	f7ff ff21 	bl	42fea <split_chunks>
		free_list_add(h, c_end);
   431a8:	4621      	mov	r1, r4
   431aa:	4630      	mov	r0, r6
   431ac:	f7ff fe80 	bl	42eb0 <free_list_add>
	void *cmem = &buf[c];
   431b0:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   431b4:	8873      	ldrh	r3, [r6, #2]
   431b6:	f043 0301 	orr.w	r3, r3, #1
   431ba:	8073      	strh	r3, [r6, #2]
   431bc:	e7aa      	b.n	43114 <sys_heap_aligned_alloc+0x24>

000431be <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   431be:	3a04      	subs	r2, #4
{
   431c0:	b4f0      	push	{r4, r5, r6, r7}
   431c2:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   431c4:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   431c6:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   431c8:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   431cc:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   431d0:	1a0e      	subs	r6, r1, r0
   431d2:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   431d4:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   431d6:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   431da:	4604      	mov	r4, r0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   431dc:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   431e0:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   431e2:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   431e4:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   431e6:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   431ea:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   431ec:	f1c2 0220 	rsb	r2, r2, #32
   431f0:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   431f2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   431f6:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   431fa:	4294      	cmp	r4, r2
   431fc:	d1fb      	bne.n	431f6 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   431fe:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   43200:	f042 0201 	orr.w	r2, r2, #1
   43204:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   43206:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   4320a:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   4320c:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   4320e:	8007      	strh	r7, [r0, #0]
   43210:	8065      	strh	r5, [r4, #2]
   43212:	1984      	adds	r4, r0, r6
   43214:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   43218:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   4321c:	8067      	strh	r7, [r4, #2]
   4321e:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   43220:	885a      	ldrh	r2, [r3, #2]
   43222:	f042 0201 	orr.w	r2, r2, #1
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   43226:	bcf0      	pop	{r4, r5, r6, r7}
   43228:	805a      	strh	r2, [r3, #2]
	free_list_add(h, chunk0_size);
   4322a:	f7ff be41 	b.w	42eb0 <free_list_add>

0004322e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   4322e:	4770      	bx	lr

00043230 <read_str>:
{
   43230:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   43234:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   43238:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   4323a:	4640      	mov	r0, r8
{
   4323c:	461f      	mov	r7, r3
   4323e:	460c      	mov	r4, r1
   43240:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   43242:	f001 fdaa 	bl	44d9a <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   43246:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   4324a:	9300      	str	r3, [sp, #0]
   4324c:	b280      	uxth	r0, r0
   4324e:	e9cd 8001 	strd	r8, r0, [sp, #4]
   43252:	463b      	mov	r3, r7
   43254:	4632      	mov	r2, r6
   43256:	4621      	mov	r1, r4
   43258:	4628      	mov	r0, r5
   4325a:	f003 ff28 	bl	470ae <bt_gatt_attr_read>
}
   4325e:	b004      	add	sp, #16
   43260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00043264 <blvl_ccc_cfg_changed>:
}
   43264:	4770      	bx	lr

00043266 <bas_init>:
}
   43266:	2000      	movs	r0, #0
   43268:	4770      	bx	lr

0004326a <nvs_flash_rd>:
{
   4326a:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   4326c:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4326e:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   43270:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   43272:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   43274:	fa16 f181 	uxtah	r1, r6, r1
   43278:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   4327c:	6884      	ldr	r4, [r0, #8]
   4327e:	6824      	ldr	r4, [r4, #0]
   43280:	46a4      	mov	ip, r4
}
   43282:	bc70      	pop	{r4, r5, r6}
   43284:	4760      	bx	ip

00043286 <nvs_flash_block_cmp>:
{
   43286:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4328a:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4328c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   4328e:	681d      	ldr	r5, [r3, #0]
   43290:	426d      	negs	r5, r5
{
   43292:	b089      	sub	sp, #36	; 0x24
   43294:	4681      	mov	r9, r0
   43296:	460e      	mov	r6, r1
   43298:	4617      	mov	r7, r2
	block_size =
   4329a:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   4329e:	b91c      	cbnz	r4, 432a8 <nvs_flash_block_cmp+0x22>
	return 0;
   432a0:	4620      	mov	r0, r4
}
   432a2:	b009      	add	sp, #36	; 0x24
   432a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   432a8:	42ac      	cmp	r4, r5
   432aa:	46a0      	mov	r8, r4
   432ac:	bf28      	it	cs
   432ae:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   432b0:	4643      	mov	r3, r8
   432b2:	466a      	mov	r2, sp
   432b4:	4631      	mov	r1, r6
   432b6:	4648      	mov	r0, r9
   432b8:	f7ff ffd7 	bl	4326a <nvs_flash_rd>
		if (rc) {
   432bc:	2800      	cmp	r0, #0
   432be:	d1f0      	bne.n	432a2 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   432c0:	4642      	mov	r2, r8
   432c2:	4669      	mov	r1, sp
   432c4:	4638      	mov	r0, r7
   432c6:	f001 fd8c 	bl	44de2 <memcmp>
		if (rc) {
   432ca:	b920      	cbnz	r0, 432d6 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   432cc:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   432d0:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   432d2:	4447      	add	r7, r8
   432d4:	e7e3      	b.n	4329e <nvs_flash_block_cmp+0x18>
			return 1;
   432d6:	2001      	movs	r0, #1
   432d8:	e7e3      	b.n	432a2 <nvs_flash_block_cmp+0x1c>

000432da <nvs_flash_cmp_const>:
{
   432da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   432de:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   432e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   432e2:	681d      	ldr	r5, [r3, #0]
   432e4:	426d      	negs	r5, r5
{
   432e6:	b088      	sub	sp, #32
	block_size =
   432e8:	f005 0520 	and.w	r5, r5, #32
{
   432ec:	4607      	mov	r7, r0
   432ee:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   432f0:	4668      	mov	r0, sp
{
   432f2:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   432f4:	462a      	mov	r2, r5
   432f6:	f001 fd8f 	bl	44e18 <memset>
	while (len) {
   432fa:	b91c      	cbnz	r4, 43304 <nvs_flash_cmp_const+0x2a>
	return 0;
   432fc:	4620      	mov	r0, r4
}
   432fe:	b008      	add	sp, #32
   43300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   43304:	42ac      	cmp	r4, r5
   43306:	46a0      	mov	r8, r4
   43308:	bf28      	it	cs
   4330a:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   4330c:	4643      	mov	r3, r8
   4330e:	466a      	mov	r2, sp
   43310:	4631      	mov	r1, r6
   43312:	4638      	mov	r0, r7
   43314:	f7ff ffb7 	bl	43286 <nvs_flash_block_cmp>
		if (rc) {
   43318:	2800      	cmp	r0, #0
   4331a:	d1f0      	bne.n	432fe <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   4331c:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   43320:	4446      	add	r6, r8
   43322:	e7ea      	b.n	432fa <nvs_flash_cmp_const+0x20>

00043324 <nvs_flash_erase_sector>:
{
   43324:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   43326:	8982      	ldrh	r2, [r0, #12]
   43328:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   4332a:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4332c:	0c09      	lsrs	r1, r1, #16
{
   4332e:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   43330:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   43332:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   43334:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   43338:	6883      	ldr	r3, [r0, #8]
   4333a:	689b      	ldr	r3, [r3, #8]
   4333c:	4798      	blx	r3
	if (rc) {
   4333e:	b950      	cbnz	r0, 43356 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   43340:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   43342:	89a3      	ldrh	r3, [r4, #12]
   43344:	7912      	ldrb	r2, [r2, #4]
   43346:	4629      	mov	r1, r5
   43348:	4620      	mov	r0, r4
   4334a:	f7ff ffc6 	bl	432da <nvs_flash_cmp_const>
		rc = -ENXIO;
   4334e:	2800      	cmp	r0, #0
   43350:	bf18      	it	ne
   43352:	f06f 0005 	mvnne.w	r0, #5
}
   43356:	bd38      	pop	{r3, r4, r5, pc}

00043358 <nvs_ate_crc8_update>:
{
   43358:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4335a:	4601      	mov	r1, r0
{
   4335c:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4335e:	2207      	movs	r2, #7
   43360:	20ff      	movs	r0, #255	; 0xff
   43362:	f7e4 fd57 	bl	27e14 <crc8_ccitt>
	entry->crc8 = crc8;
   43366:	71e0      	strb	r0, [r4, #7]
}
   43368:	bd10      	pop	{r4, pc}

0004336a <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   4336a:	680b      	ldr	r3, [r1, #0]
   4336c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   43370:	0c1a      	lsrs	r2, r3, #16
   43372:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   43376:	bf08      	it	eq
   43378:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   4337c:	600b      	str	r3, [r1, #0]
}
   4337e:	4770      	bx	lr

00043380 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   43380:	7803      	ldrb	r3, [r0, #0]
   43382:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   43384:	bf81      	itttt	hi
   43386:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   4338a:	18c9      	addhi	r1, r1, r3
   4338c:	425b      	neghi	r3, r3
   4338e:	4019      	andhi	r1, r3
}
   43390:	4608      	mov	r0, r1
   43392:	4770      	bx	lr

00043394 <nvs_ate_valid>:
{
   43394:	b570      	push	{r4, r5, r6, lr}
   43396:	460c      	mov	r4, r1
   43398:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4339a:	2108      	movs	r1, #8
   4339c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4339e:	f7ff ffef 	bl	43380 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   433a2:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   433a4:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   433a6:	4621      	mov	r1, r4
   433a8:	20ff      	movs	r0, #255	; 0xff
   433aa:	f7e4 fd33 	bl	27e14 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   433ae:	79e3      	ldrb	r3, [r4, #7]
   433b0:	4283      	cmp	r3, r0
   433b2:	d107      	bne.n	433c4 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   433b4:	89aa      	ldrh	r2, [r5, #12]
   433b6:	8863      	ldrh	r3, [r4, #2]
   433b8:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   433ba:	4283      	cmp	r3, r0
   433bc:	bf2c      	ite	cs
   433be:	2000      	movcs	r0, #0
   433c0:	2001      	movcc	r0, #1
}
   433c2:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   433c4:	2000      	movs	r0, #0
   433c6:	e7fc      	b.n	433c2 <nvs_ate_valid+0x2e>

000433c8 <nvs_close_ate_valid>:
{
   433c8:	b538      	push	{r3, r4, r5, lr}
   433ca:	4605      	mov	r5, r0
   433cc:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   433ce:	f7ff ffe1 	bl	43394 <nvs_ate_valid>
   433d2:	b1a0      	cbz	r0, 433fe <nvs_close_ate_valid+0x36>
   433d4:	88a0      	ldrh	r0, [r4, #4]
   433d6:	b998      	cbnz	r0, 43400 <nvs_close_ate_valid+0x38>
   433d8:	8822      	ldrh	r2, [r4, #0]
   433da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   433de:	429a      	cmp	r2, r3
   433e0:	d10d      	bne.n	433fe <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   433e2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   433e4:	2108      	movs	r1, #8
   433e6:	f7ff ffcb 	bl	43380 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   433ea:	8862      	ldrh	r2, [r4, #2]
   433ec:	89ab      	ldrh	r3, [r5, #12]
   433ee:	1a9b      	subs	r3, r3, r2
   433f0:	fbb3 f2f0 	udiv	r2, r3, r0
   433f4:	fb02 3010 	mls	r0, r2, r0, r3
   433f8:	fab0 f080 	clz	r0, r0
   433fc:	0940      	lsrs	r0, r0, #5
}
   433fe:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   43400:	2000      	movs	r0, #0
   43402:	e7fc      	b.n	433fe <nvs_close_ate_valid+0x36>

00043404 <nvs_prev_ate>:
{
   43404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   43406:	4605      	mov	r5, r0
   43408:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4340a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4340c:	2108      	movs	r1, #8
   4340e:	f7ff ffb7 	bl	43380 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   43412:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   43414:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   43416:	2308      	movs	r3, #8
   43418:	4628      	mov	r0, r5
   4341a:	f7ff ff26 	bl	4326a <nvs_flash_rd>
	if (rc) {
   4341e:	4604      	mov	r4, r0
   43420:	2800      	cmp	r0, #0
   43422:	d138      	bne.n	43496 <nvs_prev_ate+0x92>
	*addr += ate_size;
   43424:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   43426:	89aa      	ldrh	r2, [r5, #12]
	*addr += ate_size;
   43428:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   4342a:	b299      	uxth	r1, r3
   4342c:	1bd2      	subs	r2, r2, r7
   4342e:	4291      	cmp	r1, r2
	*addr += ate_size;
   43430:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   43432:	d130      	bne.n	43496 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   43434:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   43436:	bf03      	ittte	eq
   43438:	89ea      	ldrheq	r2, [r5, #14]
   4343a:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
   4343e:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   43442:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   43446:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   43448:	2308      	movs	r3, #8
   4344a:	466a      	mov	r2, sp
   4344c:	4628      	mov	r0, r5
   4344e:	f7ff ff0c 	bl	4326a <nvs_flash_rd>
	if (rc) {
   43452:	4604      	mov	r4, r0
   43454:	b9f8      	cbnz	r0, 43496 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   43456:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   43458:	466a      	mov	r2, sp
   4345a:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4345c:	4603      	mov	r3, r0
		if (data8[i] != value) {
   4345e:	f812 0b01 	ldrb.w	r0, [r2], #1
   43462:	4281      	cmp	r1, r0
   43464:	d10c      	bne.n	43480 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   43466:	3301      	adds	r3, #1
   43468:	2b08      	cmp	r3, #8
   4346a:	d1f8      	bne.n	4345e <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   4346c:	686b      	ldr	r3, [r5, #4]
   4346e:	e005      	b.n	4347c <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   43470:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   43472:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   43476:	0c1b      	lsrs	r3, r3, #16
   43478:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   4347a:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   4347c:	6033      	str	r3, [r6, #0]
		return 0;
   4347e:	e00a      	b.n	43496 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   43480:	4669      	mov	r1, sp
   43482:	4628      	mov	r0, r5
   43484:	f7ff ffa0 	bl	433c8 <nvs_close_ate_valid>
   43488:	2800      	cmp	r0, #0
   4348a:	d1f1      	bne.n	43470 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   4348c:	4631      	mov	r1, r6
   4348e:	4628      	mov	r0, r5
   43490:	f7e5 f85c 	bl	2854c <nvs_recover_last_ate>
   43494:	4604      	mov	r4, r0
}
   43496:	4620      	mov	r0, r4
   43498:	b003      	add	sp, #12
   4349a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004349c <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   4349c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   434a0:	4607      	mov	r7, r0
   434a2:	461c      	mov	r4, r3
	offset += addr & ADDR_OFFS_MASK;
   434a4:	683d      	ldr	r5, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   434a6:	8983      	ldrh	r3, [r0, #12]
   434a8:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   434aa:	fa15 f181 	uxtah	r1, r5, r1
   434ae:	fb00 1503 	mla	r5, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   434b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   434b4:	681e      	ldr	r6, [r3, #0]
   434b6:	4276      	negs	r6, r6
	if (blen > 0) {
   434b8:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   434ba:	b089      	sub	sp, #36	; 0x24
   434bc:	4690      	mov	r8, r2
	if (blen > 0) {
   434be:	d00a      	beq.n	434d6 <nvs_flash_al_wrt.part.0+0x3a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   434c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   434c2:	6883      	ldr	r3, [r0, #8]
   434c4:	4629      	mov	r1, r5
   434c6:	f8d3 9004 	ldr.w	r9, [r3, #4]
   434ca:	4633      	mov	r3, r6
   434cc:	47c8      	blx	r9
		if (rc) {
   434ce:	b9c0      	cbnz	r0, 43502 <nvs_flash_al_wrt.part.0+0x66>
		len -= blen;
   434d0:	1ba4      	subs	r4, r4, r6
		offset += blen;
   434d2:	4435      	add	r5, r6
		data8 += blen;
   434d4:	44b0      	add	r8, r6
	if (len) {
   434d6:	b1bc      	cbz	r4, 43508 <nvs_flash_al_wrt.part.0+0x6c>
		memcpy(buf, data8, len);
   434d8:	4622      	mov	r2, r4
   434da:	4641      	mov	r1, r8
   434dc:	4668      	mov	r0, sp
   434de:	f001 fc90 	bl	44e02 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   434e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   434e4:	681a      	ldr	r2, [r3, #0]
   434e6:	7919      	ldrb	r1, [r3, #4]
   434e8:	1b12      	subs	r2, r2, r4
   434ea:	eb0d 0004 	add.w	r0, sp, r4
   434ee:	f001 fc93 	bl	44e18 <memset>
				 fs->flash_parameters->write_block_size);
   434f2:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   434f6:	681b      	ldr	r3, [r3, #0]
   434f8:	6882      	ldr	r2, [r0, #8]
   434fa:	4629      	mov	r1, r5
   434fc:	6854      	ldr	r4, [r2, #4]
   434fe:	466a      	mov	r2, sp
   43500:	47a0      	blx	r4
}
   43502:	b009      	add	sp, #36	; 0x24
   43504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
end:
   43508:	4620      	mov	r0, r4
   4350a:	e7fa      	b.n	43502 <nvs_flash_al_wrt.part.0+0x66>

0004350c <nvs_flash_data_wrt>:
{
   4350c:	b538      	push	{r3, r4, r5, lr}
   4350e:	4604      	mov	r4, r0
	if (!len) {
   43510:	4615      	mov	r5, r2
   43512:	b12a      	cbz	r2, 43520 <nvs_flash_data_wrt+0x14>
   43514:	4613      	mov	r3, r2
   43516:	460a      	mov	r2, r1
   43518:	6881      	ldr	r1, [r0, #8]
   4351a:	f7ff ffbf 	bl	4349c <nvs_flash_al_wrt.part.0>
   4351e:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   43520:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   43522:	4629      	mov	r1, r5
   43524:	f7ff ff2c 	bl	43380 <nvs_al_size.isra.0>
   43528:	68a3      	ldr	r3, [r4, #8]
   4352a:	4403      	add	r3, r0
   4352c:	60a3      	str	r3, [r4, #8]
}
   4352e:	4610      	mov	r0, r2
   43530:	bd38      	pop	{r3, r4, r5, pc}

00043532 <nvs_flash_ate_wrt>:
{
   43532:	b510      	push	{r4, lr}
   43534:	460a      	mov	r2, r1
	if (!len) {
   43536:	2308      	movs	r3, #8
   43538:	6841      	ldr	r1, [r0, #4]
{
   4353a:	4604      	mov	r4, r0
   4353c:	f7ff ffae 	bl	4349c <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   43540:	2108      	movs	r1, #8
   43542:	4602      	mov	r2, r0
   43544:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   43546:	f7ff ff1b 	bl	43380 <nvs_al_size.isra.0>
   4354a:	6863      	ldr	r3, [r4, #4]
   4354c:	1a1b      	subs	r3, r3, r0
   4354e:	6063      	str	r3, [r4, #4]
}
   43550:	4610      	mov	r0, r2
   43552:	bd10      	pop	{r4, pc}

00043554 <nvs_add_gc_done_ate>:
{
   43554:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   43556:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4355a:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   4355e:	2300      	movs	r3, #0
{
   43560:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   43562:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   43566:	6883      	ldr	r3, [r0, #8]
   43568:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   4356c:	4668      	mov	r0, sp
   4356e:	f7ff fef3 	bl	43358 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   43572:	4669      	mov	r1, sp
   43574:	4620      	mov	r0, r4
   43576:	f7ff ffdc 	bl	43532 <nvs_flash_ate_wrt>
}
   4357a:	b002      	add	sp, #8
   4357c:	bd10      	pop	{r4, pc}

0004357e <nvs_gc>:
{
   4357e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43582:	4604      	mov	r4, r0
   43584:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   43586:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   43588:	2108      	movs	r1, #8
   4358a:	f7ff fef9 	bl	43380 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   4358e:	6863      	ldr	r3, [r4, #4]
   43590:	0c1b      	lsrs	r3, r3, #16
   43592:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   43594:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   43596:	a903      	add	r1, sp, #12
   43598:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   4359a:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   4359c:	f7ff fee5 	bl	4336a <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   435a0:	f8dd a00c 	ldr.w	sl, [sp, #12]
   435a4:	89a6      	ldrh	r6, [r4, #12]
   435a6:	4456      	add	r6, sl
   435a8:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   435aa:	2308      	movs	r3, #8
   435ac:	aa06      	add	r2, sp, #24
   435ae:	4631      	mov	r1, r6
   435b0:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   435b2:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   435b4:	f7ff fe59 	bl	4326a <nvs_flash_rd>
	if (rc < 0) {
   435b8:	2800      	cmp	r0, #0
   435ba:	f2c0 8093 	blt.w	436e4 <nvs_gc+0x166>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   435be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   435c0:	aa06      	add	r2, sp, #24
   435c2:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   435c4:	2300      	movs	r3, #0
		if (data8[i] != value) {
   435c6:	f812 0b01 	ldrb.w	r0, [r2], #1
   435ca:	4281      	cmp	r1, r0
   435cc:	d17c      	bne.n	436c8 <nvs_gc+0x14a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   435ce:	3301      	adds	r3, #1
   435d0:	2b08      	cmp	r3, #8
   435d2:	d1f8      	bne.n	435c6 <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   435d4:	68a3      	ldr	r3, [r4, #8]
   435d6:	6862      	ldr	r2, [r4, #4]
   435d8:	442b      	add	r3, r5
   435da:	429a      	cmp	r2, r3
   435dc:	d26e      	bcs.n	436bc <nvs_gc+0x13e>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   435de:	4651      	mov	r1, sl
   435e0:	4620      	mov	r0, r4
   435e2:	f7ff fe9f 	bl	43324 <nvs_flash_erase_sector>
	if (rc) {
   435e6:	e07d      	b.n	436e4 <nvs_gc+0x166>
		gc_addr += close_ate.offset;
   435e8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   435ec:	0c36      	lsrs	r6, r6, #16
   435ee:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   435f0:	441e      	add	r6, r3
   435f2:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   435f4:	aa08      	add	r2, sp, #32
   435f6:	a904      	add	r1, sp, #16
   435f8:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   435fa:	f8dd 9010 	ldr.w	r9, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   435fe:	f7ff ff01 	bl	43404 <nvs_prev_ate>
		if (rc) {
   43602:	2800      	cmp	r0, #0
   43604:	d16e      	bne.n	436e4 <nvs_gc+0x166>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   43606:	a908      	add	r1, sp, #32
   43608:	4620      	mov	r0, r4
   4360a:	f7ff fec3 	bl	43394 <nvs_ate_valid>
   4360e:	2800      	cmp	r0, #0
   43610:	d034      	beq.n	4367c <nvs_gc+0xfe>
		wlk_addr = fs->ate_wra;
   43612:	6863      	ldr	r3, [r4, #4]
   43614:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   43616:	aa0a      	add	r2, sp, #40	; 0x28
   43618:	a905      	add	r1, sp, #20
   4361a:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   4361c:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4361e:	f7ff fef1 	bl	43404 <nvs_prev_ate>
			if (rc) {
   43622:	2800      	cmp	r0, #0
   43624:	d15e      	bne.n	436e4 <nvs_gc+0x166>
			if ((wlk_ate.id == gc_ate.id) &&
   43626:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   4362a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   4362e:	429a      	cmp	r2, r3
   43630:	d028      	beq.n	43684 <nvs_gc+0x106>
		} while (wlk_addr != fs->ate_wra);
   43632:	6862      	ldr	r2, [r4, #4]
   43634:	9b05      	ldr	r3, [sp, #20]
   43636:	429a      	cmp	r2, r3
   43638:	d1ed      	bne.n	43616 <nvs_gc+0x98>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   4363a:	454e      	cmp	r6, r9
   4363c:	d11e      	bne.n	4367c <nvs_gc+0xfe>
   4363e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   43642:	b1db      	cbz	r3, 4367c <nvs_gc+0xfe>
			data_addr += gc_ate.offset;
   43644:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   43648:	ea4f 4319 	mov.w	r3, r9, lsr #16
   4364c:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   4364e:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   43650:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   43652:	68a3      	ldr	r3, [r4, #8]
   43654:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   43658:	f7ff fe7e 	bl	43358 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4365c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   4365e:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   43662:	681e      	ldr	r6, [r3, #0]
   43664:	4276      	negs	r6, r6
	block_size =
   43666:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   4366a:	f1b8 0f00 	cmp.w	r8, #0
   4366e:	d110      	bne.n	43692 <nvs_gc+0x114>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   43670:	a908      	add	r1, sp, #32
   43672:	4620      	mov	r0, r4
   43674:	f7ff ff5d 	bl	43532 <nvs_flash_ate_wrt>
			if (rc) {
   43678:	2800      	cmp	r0, #0
   4367a:	d133      	bne.n	436e4 <nvs_gc+0x166>
	} while (gc_prev_addr != stop_addr);
   4367c:	9b01      	ldr	r3, [sp, #4]
   4367e:	4599      	cmp	r9, r3
   43680:	d1b8      	bne.n	435f4 <nvs_gc+0x76>
gc_done:
   43682:	e7a7      	b.n	435d4 <nvs_gc+0x56>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   43684:	a90a      	add	r1, sp, #40	; 0x28
   43686:	4620      	mov	r0, r4
   43688:	f7ff fe84 	bl	43394 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   4368c:	2800      	cmp	r0, #0
   4368e:	d0d0      	beq.n	43632 <nvs_gc+0xb4>
   43690:	e7d3      	b.n	4363a <nvs_gc+0xbc>
		bytes_to_copy = MIN(block_size, len);
   43692:	4546      	cmp	r6, r8
   43694:	46b3      	mov	fp, r6
   43696:	bf28      	it	cs
   43698:	46c3      	movcs	fp, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   4369a:	465b      	mov	r3, fp
   4369c:	aa0c      	add	r2, sp, #48	; 0x30
   4369e:	4639      	mov	r1, r7
   436a0:	4620      	mov	r0, r4
   436a2:	f7ff fde2 	bl	4326a <nvs_flash_rd>
		if (rc) {
   436a6:	b9e8      	cbnz	r0, 436e4 <nvs_gc+0x166>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   436a8:	465a      	mov	r2, fp
   436aa:	a90c      	add	r1, sp, #48	; 0x30
   436ac:	4620      	mov	r0, r4
   436ae:	f7ff ff2d 	bl	4350c <nvs_flash_data_wrt>
		if (rc) {
   436b2:	b9b8      	cbnz	r0, 436e4 <nvs_gc+0x166>
		len -= bytes_to_copy;
   436b4:	eba8 080b 	sub.w	r8, r8, fp
		addr += bytes_to_copy;
   436b8:	445f      	add	r7, fp
   436ba:	e7d6      	b.n	4366a <nvs_gc+0xec>
		rc = nvs_add_gc_done_ate(fs);
   436bc:	4620      	mov	r0, r4
   436be:	f7ff ff49 	bl	43554 <nvs_add_gc_done_ate>
		if (rc) {
   436c2:	2800      	cmp	r0, #0
   436c4:	d08b      	beq.n	435de <nvs_gc+0x60>
   436c6:	e00d      	b.n	436e4 <nvs_gc+0x166>
	stop_addr = gc_addr - ate_size;
   436c8:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   436ca:	a906      	add	r1, sp, #24
   436cc:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   436ce:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   436d0:	f7ff fe7a 	bl	433c8 <nvs_close_ate_valid>
   436d4:	2800      	cmp	r0, #0
   436d6:	d187      	bne.n	435e8 <nvs_gc+0x6a>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   436d8:	a904      	add	r1, sp, #16
   436da:	4620      	mov	r0, r4
   436dc:	f7e4 ff36 	bl	2854c <nvs_recover_last_ate>
		if (rc) {
   436e0:	2800      	cmp	r0, #0
   436e2:	d087      	beq.n	435f4 <nvs_gc+0x76>
}
   436e4:	b015      	add	sp, #84	; 0x54
   436e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000436ea <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   436ea:	2300      	movs	r3, #0
   436ec:	461a      	mov	r2, r3
   436ee:	f7e5 b8bb 	b.w	28868 <nvs_write>

000436f2 <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   436f2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   436f6:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   436f8:	7c03      	ldrb	r3, [r0, #16]
{
   436fa:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   436fe:	4604      	mov	r4, r0
   43700:	460f      	mov	r7, r1
   43702:	4690      	mov	r8, r2
	if (!fs->ready) {
   43704:	2b00      	cmp	r3, #0
   43706:	d045      	beq.n	43794 <nvs_read_hist+0xa2>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   43708:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4370a:	2108      	movs	r1, #8
   4370c:	f7ff fe38 	bl	43380 <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   43710:	89a3      	ldrh	r3, [r4, #12]
   43712:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   43716:	429e      	cmp	r6, r3
   43718:	d83f      	bhi.n	4379a <nvs_read_hist+0xa8>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   4371a:	6863      	ldr	r3, [r4, #4]
   4371c:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   4371e:	f04f 0a00 	mov.w	sl, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   43722:	aa02      	add	r2, sp, #8
   43724:	a901      	add	r1, sp, #4
   43726:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   43728:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4372a:	f7ff fe6b 	bl	43404 <nvs_prev_ate>
		if (rc) {
   4372e:	bb38      	cbnz	r0, 43780 <nvs_read_hist+0x8e>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   43730:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   43734:	42bb      	cmp	r3, r7
   43736:	d108      	bne.n	4374a <nvs_read_hist+0x58>
   43738:	a902      	add	r1, sp, #8
   4373a:	4620      	mov	r0, r4
   4373c:	f7ff fe2a 	bl	43394 <nvs_ate_valid>
   43740:	b118      	cbz	r0, 4374a <nvs_read_hist+0x58>
			cnt_his++;
   43742:	f10a 0a01 	add.w	sl, sl, #1
   43746:	fa1f fa8a 	uxth.w	sl, sl
		}
		if (wlk_addr == fs->ate_wra) {
   4374a:	6862      	ldr	r2, [r4, #4]
   4374c:	9b01      	ldr	r3, [sp, #4]
   4374e:	429a      	cmp	r2, r3
   43750:	d019      	beq.n	43786 <nvs_read_hist+0x94>
	while (cnt_his <= cnt) {
   43752:	45d1      	cmp	r9, sl
   43754:	d2e5      	bcs.n	43722 <nvs_read_hist+0x30>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   43756:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   4375a:	b1c3      	cbz	r3, 4378e <nvs_read_hist+0x9c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   4375c:	45d1      	cmp	r9, sl
   4375e:	d816      	bhi.n	4378e <nvs_read_hist+0x9c>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
	rd_addr += wlk_ate.offset;
   43760:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   43764:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   43766:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   43768:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   4376c:	bf28      	it	cs
   4376e:	4633      	movcs	r3, r6
   43770:	4642      	mov	r2, r8
   43772:	4429      	add	r1, r5
   43774:	4620      	mov	r0, r4
   43776:	f7ff fd78 	bl	4326a <nvs_flash_rd>
	if (rc) {
   4377a:	b908      	cbnz	r0, 43780 <nvs_read_hist+0x8e>
		goto err;
	}

	return wlk_ate.len;
   4377c:	f8bd 000c 	ldrh.w	r0, [sp, #12]

err:
	return rc;
}
   43780:	b004      	add	sp, #16
   43782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   43786:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4378a:	42bb      	cmp	r3, r7
   4378c:	d0e3      	beq.n	43756 <nvs_read_hist+0x64>
		return -ENOENT;
   4378e:	f06f 0001 	mvn.w	r0, #1
   43792:	e7f5      	b.n	43780 <nvs_read_hist+0x8e>
		return -EACCES;
   43794:	f06f 000c 	mvn.w	r0, #12
   43798:	e7f2      	b.n	43780 <nvs_read_hist+0x8e>
		return -EINVAL;
   4379a:	f06f 0015 	mvn.w	r0, #21
   4379e:	e7ef      	b.n	43780 <nvs_read_hist+0x8e>

000437a0 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   437a0:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   437a2:	2400      	movs	r4, #0
   437a4:	9400      	str	r4, [sp, #0]
   437a6:	f7ff ffa4 	bl	436f2 <nvs_read_hist>
	return rc;
}
   437aa:	b002      	add	sp, #8
   437ac:	bd10      	pop	{r4, pc}

000437ae <usb_write>:
{
   437ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   437b2:	4606      	mov	r6, r0
   437b4:	460f      	mov	r7, r1
   437b6:	4690      	mov	r8, r2
   437b8:	4699      	mov	r9, r3
   437ba:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   437bc:	464b      	mov	r3, r9
   437be:	4642      	mov	r2, r8
   437c0:	4639      	mov	r1, r7
   437c2:	4630      	mov	r0, r6
   437c4:	f7fa f96a 	bl	3da9c <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   437c8:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   437cc:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   437ce:	d103      	bne.n	437d8 <usb_write+0x2a>
	z_impl_k_yield();
   437d0:	f7fe fb6e 	bl	41eb0 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   437d4:	3d01      	subs	r5, #1
   437d6:	d1f1      	bne.n	437bc <usb_write+0xe>
}
   437d8:	4620      	mov	r0, r4
   437da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000437de <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   437de:	4770      	bx	lr

000437e0 <get_sectors_cb>:
{
   437e0:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   437e2:	6802      	ldr	r2, [r0, #0]
   437e4:	684c      	ldr	r4, [r1, #4]
   437e6:	42a2      	cmp	r2, r4
   437e8:	d316      	bcc.n	43818 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   437ea:	688b      	ldr	r3, [r1, #8]
   437ec:	4423      	add	r3, r4
   437ee:	429a      	cmp	r2, r3
   437f0:	d207      	bcs.n	43802 <get_sectors_cb+0x22>
	} else if (data->ret_idx >= data->ret_len) {
   437f2:	e9d1 5303 	ldrd	r5, r3, [r1, #12]
   437f6:	694e      	ldr	r6, [r1, #20]
   437f8:	42b3      	cmp	r3, r6
   437fa:	d304      	bcc.n	43806 <get_sectors_cb+0x26>
		data->status = -ENOMEM;
   437fc:	f06f 030b 	mvn.w	r3, #11
   43800:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   43802:	2000      	movs	r0, #0
   43804:	e009      	b.n	4381a <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   43806:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   4380a:	1b12      	subs	r2, r2, r4
   4380c:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   43810:	6842      	ldr	r2, [r0, #4]
   43812:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   43814:	3301      	adds	r3, #1
   43816:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   43818:	2001      	movs	r0, #1
}
   4381a:	bd70      	pop	{r4, r5, r6, pc}

0004381c <settings_delete>:
	return settings_save_one(name, NULL, 0);
   4381c:	2200      	movs	r2, #0
   4381e:	4611      	mov	r1, r2
   43820:	f7e5 bf60 	b.w	296e4 <settings_save_one>

00043824 <settings_name_steq>:
{
   43824:	4603      	mov	r3, r0
   43826:	b530      	push	{r4, r5, lr}
   43828:	4608      	mov	r0, r1
	if (next) {
   4382a:	b10a      	cbz	r2, 43830 <settings_name_steq+0xc>
		*next = NULL;
   4382c:	2100      	movs	r1, #0
   4382e:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   43830:	b163      	cbz	r3, 4384c <settings_name_steq+0x28>
   43832:	b190      	cbz	r0, 4385a <settings_name_steq+0x36>
   43834:	1e45      	subs	r5, r0, #1
   43836:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   43838:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   4383c:	4601      	mov	r1, r0
   4383e:	f810 3b01 	ldrb.w	r3, [r0], #1
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   43842:	b15c      	cbz	r4, 4385c <settings_name_steq+0x38>
	while ((*key != '\0') && (*key == *name) &&
   43844:	429c      	cmp	r4, r3
   43846:	d101      	bne.n	4384c <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   43848:	2c3d      	cmp	r4, #61	; 0x3d
   4384a:	d1f5      	bne.n	43838 <settings_name_steq+0x14>
	return 0;
   4384c:	2000      	movs	r0, #0
   4384e:	e004      	b.n	4385a <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   43850:	2b3d      	cmp	r3, #61	; 0x3d
   43852:	d008      	beq.n	43866 <settings_name_steq+0x42>
   43854:	fab3 f083 	clz	r0, r3
   43858:	0940      	lsrs	r0, r0, #5
}
   4385a:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   4385c:	2b2f      	cmp	r3, #47	; 0x2f
   4385e:	d1f7      	bne.n	43850 <settings_name_steq+0x2c>
		if (next) {
   43860:	b10a      	cbz	r2, 43866 <settings_name_steq+0x42>
			*next = name + 1;
   43862:	3101      	adds	r1, #1
   43864:	6011      	str	r1, [r2, #0]
		return 1;
   43866:	2001      	movs	r0, #1
   43868:	e7f7      	b.n	4385a <settings_name_steq+0x36>

0004386a <settings_name_next>:
{
   4386a:	b530      	push	{r4, r5, lr}
   4386c:	4603      	mov	r3, r0
	if (next) {
   4386e:	b109      	cbz	r1, 43874 <settings_name_next+0xa>
		*next = NULL;
   43870:	2200      	movs	r2, #0
   43872:	600a      	str	r2, [r1, #0]
	if (!name) {
   43874:	b16b      	cbz	r3, 43892 <settings_name_next+0x28>
   43876:	461a      	mov	r2, r3
   43878:	4614      	mov	r4, r2
   4387a:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   4387c:	f812 5b01 	ldrb.w	r5, [r2], #1
   43880:	b135      	cbz	r5, 43890 <settings_name_next+0x26>
   43882:	2d3d      	cmp	r5, #61	; 0x3d
   43884:	d004      	beq.n	43890 <settings_name_next+0x26>
   43886:	2d2f      	cmp	r5, #47	; 0x2f
   43888:	d1f6      	bne.n	43878 <settings_name_next+0xe>
		if (next) {
   4388a:	b109      	cbz	r1, 43890 <settings_name_next+0x26>
			*next = name + 1;
   4388c:	3401      	adds	r4, #1
   4388e:	600c      	str	r4, [r1, #0]
}
   43890:	bd30      	pop	{r4, r5, pc}
		return 0;
   43892:	4618      	mov	r0, r3
   43894:	e7fc      	b.n	43890 <settings_name_next+0x26>

00043896 <settings_call_set_handler>:
{
   43896:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4389a:	f8dd 8020 	ldr.w	r8, [sp, #32]
	const char *name_key = name;
   4389e:	9001      	str	r0, [sp, #4]
{
   438a0:	4604      	mov	r4, r0
   438a2:	460d      	mov	r5, r1
   438a4:	4616      	mov	r6, r2
   438a6:	461f      	mov	r7, r3
	if (load_arg && load_arg->subtree &&
   438a8:	f1b8 0f00 	cmp.w	r8, #0
   438ac:	d01b      	beq.n	438e6 <settings_call_set_handler+0x50>
   438ae:	f8d8 1000 	ldr.w	r1, [r8]
   438b2:	b199      	cbz	r1, 438dc <settings_call_set_handler+0x46>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   438b4:	aa01      	add	r2, sp, #4
   438b6:	f7ff ffb5 	bl	43824 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   438ba:	b978      	cbnz	r0, 438dc <settings_call_set_handler+0x46>
}
   438bc:	2000      	movs	r0, #0
   438be:	b002      	add	sp, #8
   438c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   438c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   438c8:	9801      	ldr	r0, [sp, #4]
   438ca:	9308      	str	r3, [sp, #32]
   438cc:	4632      	mov	r2, r6
   438ce:	463b      	mov	r3, r7
   438d0:	4629      	mov	r1, r5
   438d2:	46f4      	mov	ip, lr
}
   438d4:	b002      	add	sp, #8
   438d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   438da:	4760      	bx	ip
	if (load_arg && load_arg->cb) {
   438dc:	f8d8 e004 	ldr.w	lr, [r8, #4]
   438e0:	f1be 0f00 	cmp.w	lr, #0
   438e4:	d1ee      	bne.n	438c4 <settings_call_set_handler+0x2e>
		ch = settings_parse_and_lookup(name, &name_key);
   438e6:	a901      	add	r1, sp, #4
   438e8:	4620      	mov	r0, r4
   438ea:	f7e5 ffcb 	bl	29884 <settings_parse_and_lookup>
		if (!ch) {
   438ee:	2800      	cmp	r0, #0
   438f0:	d0e4      	beq.n	438bc <settings_call_set_handler+0x26>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   438f2:	6884      	ldr	r4, [r0, #8]
   438f4:	9801      	ldr	r0, [sp, #4]
   438f6:	463b      	mov	r3, r7
   438f8:	4632      	mov	r2, r6
   438fa:	4629      	mov	r1, r5
   438fc:	47a0      	blx	r4
		if (rc != 0) {
   438fe:	e7dd      	b.n	438bc <settings_call_set_handler+0x26>

00043900 <settings_nvs_read_fn>:
{
   43900:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   43902:	4613      	mov	r3, r2
{
   43904:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   43906:	460a      	mov	r2, r1
   43908:	8881      	ldrh	r1, [r0, #4]
   4390a:	6800      	ldr	r0, [r0, #0]
   4390c:	f7ff ff48 	bl	437a0 <nvs_read>
}
   43910:	42a0      	cmp	r0, r4
   43912:	bfa8      	it	ge
   43914:	4620      	movge	r0, r4
   43916:	bd10      	pop	{r4, pc}

00043918 <settings_nvs_save>:
{
   43918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4391c:	b097      	sub	sp, #92	; 0x5c
   4391e:	4604      	mov	r4, r0
   43920:	9201      	str	r2, [sp, #4]
   43922:	469b      	mov	fp, r3
	if (!name) {
   43924:	4689      	mov	r9, r1
   43926:	2900      	cmp	r1, #0
   43928:	d06b      	beq.n	43a02 <settings_nvs_save+0xea>
	delete = ((value == NULL) || (val_len == 0));
   4392a:	b1da      	cbz	r2, 43964 <settings_nvs_save+0x4c>
   4392c:	fabb f78b 	clz	r7, fp
   43930:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   43932:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   43934:	3501      	adds	r5, #1
   43936:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   43938:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   4393a:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   4393e:	1e6e      	subs	r6, r5, #1
   43940:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   43942:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   43946:	d030      	beq.n	439aa <settings_nvs_save+0x92>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   43948:	234a      	movs	r3, #74	; 0x4a
   4394a:	aa03      	add	r2, sp, #12
   4394c:	4631      	mov	r1, r6
   4394e:	4650      	mov	r0, sl
   43950:	f7ff ff26 	bl	437a0 <nvs_read>
		if (rc < 0) {
   43954:	2800      	cmp	r0, #0
   43956:	da07      	bge.n	43968 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   43958:	f110 0f02 	cmn.w	r0, #2
   4395c:	bf08      	it	eq
   4395e:	46b0      	moveq	r8, r6
   43960:	4635      	mov	r5, r6
   43962:	e7ec      	b.n	4393e <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   43964:	2701      	movs	r7, #1
   43966:	e7e4      	b.n	43932 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   43968:	f100 0358 	add.w	r3, r0, #88	; 0x58
   4396c:	eb0d 0003 	add.w	r0, sp, r3
   43970:	2300      	movs	r3, #0
   43972:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   43976:	a903      	add	r1, sp, #12
   43978:	4648      	mov	r0, r9
   4397a:	f001 fa15 	bl	44da8 <strcmp>
   4397e:	2800      	cmp	r0, #0
   43980:	d1ee      	bne.n	43960 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   43982:	2f00      	cmp	r7, #0
   43984:	d03b      	beq.n	439fe <settings_nvs_save+0xe6>
   43986:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   43988:	42b3      	cmp	r3, r6
   4398a:	d142      	bne.n	43a12 <settings_nvs_save+0xfa>
			cf->last_name_id--;
   4398c:	4622      	mov	r2, r4
   4398e:	1e73      	subs	r3, r6, #1
   43990:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   43994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   43998:	2302      	movs	r3, #2
   4399a:	4650      	mov	r0, sl
   4399c:	f7e4 ff64 	bl	28868 <nvs_write>
			if (rc < 0) {
   439a0:	2800      	cmp	r0, #0
   439a2:	da36      	bge.n	43a12 <settings_nvs_save+0xfa>
}
   439a4:	b017      	add	sp, #92	; 0x5c
   439a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   439aa:	bb6f      	cbnz	r7, 43a08 <settings_nvs_save+0xf0>
	write_name = true;
   439ac:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   439ae:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   439b2:	d02b      	beq.n	43a0c <settings_nvs_save+0xf4>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   439b4:	f104 0508 	add.w	r5, r4, #8
   439b8:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   439bc:	9a01      	ldr	r2, [sp, #4]
   439be:	465b      	mov	r3, fp
   439c0:	b289      	uxth	r1, r1
   439c2:	4628      	mov	r0, r5
   439c4:	f7e4 ff50 	bl	28868 <nvs_write>
	if (rc < 0) {
   439c8:	2800      	cmp	r0, #0
   439ca:	dbeb      	blt.n	439a4 <settings_nvs_save+0x8c>
	if (write_name) {
   439cc:	b157      	cbz	r7, 439e4 <settings_nvs_save+0xcc>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   439ce:	4648      	mov	r0, r9
   439d0:	f001 f9e3 	bl	44d9a <strlen>
   439d4:	464a      	mov	r2, r9
   439d6:	4603      	mov	r3, r0
   439d8:	4641      	mov	r1, r8
   439da:	4628      	mov	r0, r5
   439dc:	f7e4 ff44 	bl	28868 <nvs_write>
		if (rc < 0) {
   439e0:	2800      	cmp	r0, #0
   439e2:	dbdf      	blt.n	439a4 <settings_nvs_save+0x8c>
	if (write_name_id > cf->last_name_id) {
   439e4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   439e6:	4543      	cmp	r3, r8
   439e8:	d220      	bcs.n	43a2c <settings_nvs_save+0x114>
		cf->last_name_id = write_name_id;
   439ea:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   439ec:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   439ee:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   439f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   439f6:	4628      	mov	r0, r5
   439f8:	f7e4 ff36 	bl	28868 <nvs_write>
   439fc:	e016      	b.n	43a2c <settings_nvs_save+0x114>
   439fe:	46b0      	mov	r8, r6
   43a00:	e7d5      	b.n	439ae <settings_nvs_save+0x96>
		return -EINVAL;
   43a02:	f06f 0015 	mvn.w	r0, #21
   43a06:	e7cd      	b.n	439a4 <settings_nvs_save+0x8c>
		return 0;
   43a08:	2000      	movs	r0, #0
   43a0a:	e7cb      	b.n	439a4 <settings_nvs_save+0x8c>
		return -ENOMEM;
   43a0c:	f06f 000b 	mvn.w	r0, #11
   43a10:	e7c8      	b.n	439a4 <settings_nvs_save+0x8c>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   43a12:	4631      	mov	r1, r6
   43a14:	4650      	mov	r0, sl
   43a16:	f7ff fe68 	bl	436ea <nvs_delete>
			if (rc >= 0) {
   43a1a:	2800      	cmp	r0, #0
   43a1c:	dbc2      	blt.n	439a4 <settings_nvs_save+0x8c>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   43a1e:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   43a22:	313f      	adds	r1, #63	; 0x3f
   43a24:	b289      	uxth	r1, r1
   43a26:	4650      	mov	r0, sl
   43a28:	f7ff fe5f 	bl	436ea <nvs_delete>
	if (rc < 0) {
   43a2c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   43a30:	e7b8      	b.n	439a4 <settings_nvs_save+0x8c>

00043a32 <settings_nvs_backend_init>:
{
   43a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   43a34:	f100 0608 	add.w	r6, r0, #8
   43a38:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   43a3a:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   43a3c:	4630      	mov	r0, r6
   43a3e:	f7e4 fdb7 	bl	285b0 <nvs_init>
	if (rc) {
   43a42:	4605      	mov	r5, r0
   43a44:	b970      	cbnz	r0, 43a64 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   43a46:	2302      	movs	r3, #2
   43a48:	f10d 0206 	add.w	r2, sp, #6
   43a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   43a50:	4630      	mov	r0, r6
   43a52:	f7ff fea5 	bl	437a0 <nvs_read>
	if (rc < 0) {
   43a56:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   43a58:	bfac      	ite	ge
   43a5a:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   43a5e:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   43a62:	8723      	strh	r3, [r4, #56]	; 0x38
}
   43a64:	4628      	mov	r0, r5
   43a66:	b002      	add	sp, #8
   43a68:	bd70      	pop	{r4, r5, r6, pc}

00043a6a <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   43a6a:	b538      	push	{r3, r4, r5, lr}
   43a6c:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   43a6e:	42ab      	cmp	r3, r5
{
   43a70:	4611      	mov	r1, r2
   43a72:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   43a74:	d804      	bhi.n	43a80 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   43a76:	461a      	mov	r2, r3
   43a78:	f001 f9c3 	bl	44e02 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   43a7c:	4620      	mov	r0, r4
   43a7e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   43a80:	2400      	movs	r4, #0
   43a82:	e7fb      	b.n	43a7c <_copy+0x12>

00043a84 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   43a84:	f001 b9c8 	b.w	44e18 <memset>

00043a88 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   43a88:	09c3      	lsrs	r3, r0, #7
   43a8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   43a8e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   43a92:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   43a96:	b2c0      	uxtb	r0, r0
   43a98:	4770      	bx	lr

00043a9a <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   43a9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   43a9e:	4606      	mov	r6, r0
   43aa0:	b0a9      	sub	sp, #164	; 0xa4
   43aa2:	4688      	mov	r8, r1
   43aa4:	4614      	mov	r4, r2
   43aa6:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   43aa8:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   43aac:	f7e6 f986 	bl	29dbc <uECC_get_rng>
		if (!rng_function ||
   43ab0:	4603      	mov	r3, r0
   43ab2:	2800      	cmp	r0, #0
   43ab4:	d03e      	beq.n	43b34 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   43ab6:	2140      	movs	r1, #64	; 0x40
   43ab8:	a808      	add	r0, sp, #32
   43aba:	4798      	blx	r3
		if (!rng_function ||
   43abc:	b3d0      	cbz	r0, 43b34 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   43abe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   43ac2:	f112 031f 	adds.w	r3, r2, #31
   43ac6:	bf48      	it	mi
   43ac8:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   43acc:	466d      	mov	r5, sp
   43ace:	464a      	mov	r2, r9
   43ad0:	a908      	add	r1, sp, #32
   43ad2:	4628      	mov	r0, r5
   43ad4:	f343 1347 	sbfx	r3, r3, #5, #8
   43ad8:	f000 f9f2 	bl	43ec0 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   43adc:	4622      	mov	r2, r4
   43ade:	4629      	mov	r1, r5
   43ae0:	a818      	add	r0, sp, #96	; 0x60
   43ae2:	f000 fe02 	bl	446ea <EccPoint_compute_public_key>
   43ae6:	b318      	cbz	r0, 43b30 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   43ae8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   43aec:	1dd9      	adds	r1, r3, #7
   43aee:	bf48      	it	mi
   43af0:	f103 010e 	addmi.w	r1, r3, #14
   43af4:	462a      	mov	r2, r5
   43af6:	4640      	mov	r0, r8
   43af8:	10c9      	asrs	r1, r1, #3
   43afa:	f000 fe1e 	bl	4473a <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   43afe:	f994 1001 	ldrsb.w	r1, [r4, #1]
   43b02:	aa18      	add	r2, sp, #96	; 0x60
   43b04:	4630      	mov	r0, r6
   43b06:	f000 fe18 	bl	4473a <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   43b0a:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   43b0e:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   43b12:	ab18      	add	r3, sp, #96	; 0x60
   43b14:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   43b18:	1870      	adds	r0, r6, r1
   43b1a:	f000 fe0e 	bl	4473a <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   43b1e:	2220      	movs	r2, #32
   43b20:	2100      	movs	r1, #0
   43b22:	4628      	mov	r0, r5
   43b24:	f001 f978 	bl	44e18 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   43b28:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   43b2a:	b029      	add	sp, #164	; 0xa4
   43b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   43b30:	3f01      	subs	r7, #1
   43b32:	d1bb      	bne.n	43aac <uECC_make_key+0x12>
        		return 0;
   43b34:	2000      	movs	r0, #0
   43b36:	e7f8      	b.n	43b2a <uECC_make_key+0x90>

00043b38 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   43b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   43b3c:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   43b3e:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   43b42:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   43b46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   43b4a:	b0a4      	sub	sp, #144	; 0x90
   43b4c:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   43b4e:	1dda      	adds	r2, r3, #7
   43b50:	bf48      	it	mi
   43b52:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   43b56:	ad04      	add	r5, sp, #16
{
   43b58:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   43b5a:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   43b5c:	4628      	mov	r0, r5
   43b5e:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   43b60:	9502      	str	r5, [sp, #8]
   43b62:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   43b64:	f000 fdfd 	bl	44762 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   43b68:	463a      	mov	r2, r7
   43b6a:	4649      	mov	r1, r9
   43b6c:	a814      	add	r0, sp, #80	; 0x50
   43b6e:	f000 fdf8 	bl	44762 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   43b72:	ab14      	add	r3, sp, #80	; 0x50
   43b74:	eb09 0107 	add.w	r1, r9, r7
   43b78:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   43b7c:	463a      	mov	r2, r7
   43b7e:	f000 fdf0 	bl	44762 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   43b82:	4623      	mov	r3, r4
   43b84:	4632      	mov	r2, r6
   43b86:	4629      	mov	r1, r5
   43b88:	4628      	mov	r0, r5
   43b8a:	f000 fd82 	bl	44692 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   43b8e:	fab0 f380 	clz	r3, r0
   43b92:	9401      	str	r4, [sp, #4]
   43b94:	aa24      	add	r2, sp, #144	; 0x90
   43b96:	095b      	lsrs	r3, r3, #5
   43b98:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   43b9c:	8863      	ldrh	r3, [r4, #2]
   43b9e:	3301      	adds	r3, #1
   43ba0:	b21b      	sxth	r3, r3
   43ba2:	9300      	str	r3, [sp, #0]
   43ba4:	f851 2c88 	ldr.w	r2, [r1, #-136]
   43ba8:	a914      	add	r1, sp, #80	; 0x50
   43baa:	2300      	movs	r3, #0
   43bac:	4608      	mov	r0, r1
   43bae:	f000 fca8 	bl	44502 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   43bb2:	aa14      	add	r2, sp, #80	; 0x50
   43bb4:	4639      	mov	r1, r7
   43bb6:	4640      	mov	r0, r8
   43bb8:	f000 fdbf 	bl	4473a <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   43bbc:	4621      	mov	r1, r4
   43bbe:	a814      	add	r0, sp, #80	; 0x50
   43bc0:	f000 fc14 	bl	443ec <EccPoint_isZero>
   43bc4:	af02      	add	r7, sp, #8
   43bc6:	4604      	mov	r4, r0
   43bc8:	2208      	movs	r2, #8
   43bca:	2100      	movs	r1, #0
   43bcc:	4638      	mov	r0, r7
   43bce:	f001 f923 	bl	44e18 <memset>
   43bd2:	2220      	movs	r2, #32
   43bd4:	2100      	movs	r1, #0
   43bd6:	4630      	mov	r0, r6
   43bd8:	f001 f91e 	bl	44e18 <memset>
   43bdc:	2220      	movs	r2, #32
   43bde:	2100      	movs	r1, #0
   43be0:	4628      	mov	r0, r5
   43be2:	f001 f919 	bl	44e18 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   43be6:	fab4 f084 	clz	r0, r4
   43bea:	0940      	lsrs	r0, r0, #5
   43bec:	b024      	add	sp, #144	; 0x90
   43bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00043bf2 <uECC_vli_add>:
{
   43bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   43bf4:	2400      	movs	r4, #0
{
   43bf6:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   43bf8:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   43bfa:	b265      	sxtb	r5, r4
   43bfc:	42ab      	cmp	r3, r5
   43bfe:	dc00      	bgt.n	43c02 <uECC_vli_add+0x10>
}
   43c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   43c02:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   43c06:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   43c0a:	443d      	add	r5, r7
   43c0c:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   43c0e:	42af      	cmp	r7, r5
   43c10:	f000 0001 	and.w	r0, r0, #1
   43c14:	bf18      	it	ne
   43c16:	2000      	movne	r0, #0
		result[i] = sum;
   43c18:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   43c1c:	bf88      	it	hi
   43c1e:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   43c22:	3401      	adds	r4, #1
   43c24:	e7e9      	b.n	43bfa <uECC_vli_add+0x8>

00043c26 <uECC_vli_rshift1>:
	vli += num_words;
   43c26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   43c2a:	2300      	movs	r3, #0
	while (vli-- > end) {
   43c2c:	4288      	cmp	r0, r1
   43c2e:	d300      	bcc.n	43c32 <uECC_vli_rshift1+0xc>
}
   43c30:	4770      	bx	lr
		uECC_word_t temp = *vli;
   43c32:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   43c36:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   43c3a:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   43c3c:	07d3      	lsls	r3, r2, #31
   43c3e:	e7f5      	b.n	43c2c <uECC_vli_rshift1+0x6>

00043c40 <vli_modInv_update>:
	if (!EVEN(uv)) {
   43c40:	6803      	ldr	r3, [r0, #0]
{
   43c42:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   43c44:	f013 0601 	ands.w	r6, r3, #1
{
   43c48:	4605      	mov	r5, r0
   43c4a:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   43c4c:	d005      	beq.n	43c5a <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   43c4e:	4613      	mov	r3, r2
   43c50:	460a      	mov	r2, r1
   43c52:	4601      	mov	r1, r0
   43c54:	f7ff ffcd 	bl	43bf2 <uECC_vli_add>
   43c58:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   43c5a:	4621      	mov	r1, r4
   43c5c:	4628      	mov	r0, r5
   43c5e:	f7ff ffe2 	bl	43c26 <uECC_vli_rshift1>
	if (carry) {
   43c62:	b146      	cbz	r6, 43c76 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   43c64:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   43c68:	3a01      	subs	r2, #1
   43c6a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   43c6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   43c72:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   43c76:	bd70      	pop	{r4, r5, r6, pc}

00043c78 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   43c78:	f04f 0c00 	mov.w	ip, #0
{
   43c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   43c80:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   43c82:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   43c84:	fa4f f98c 	sxtb.w	r9, ip
   43c88:	454b      	cmp	r3, r9
   43c8a:	dc16      	bgt.n	43cba <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   43c8c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   43c90:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   43c94:	9601      	str	r6, [sp, #4]
   43c96:	f04f 0800 	mov.w	r8, #0
   43c9a:	9f01      	ldr	r7, [sp, #4]
   43c9c:	fa53 fe88 	uxtab	lr, r3, r8
   43ca0:	fa4f fe8e 	sxtb.w	lr, lr
   43ca4:	45be      	cmp	lr, r7
   43ca6:	fa5f f688 	uxtb.w	r6, r8
   43caa:	db28      	blt.n	43cfe <uECC_vli_mult+0x86>
	result[num_words * 2 - 1] = r0;
   43cac:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   43cb0:	f840 4c04 	str.w	r4, [r0, #-4]
}
   43cb4:	b003      	add	sp, #12
   43cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   43cba:	f04f 0e00 	mov.w	lr, #0
   43cbe:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   43cc2:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   43cc4:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   43cc8:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   43ccc:	fba6 6707 	umull	r6, r7, r6, r7
   43cd0:	1936      	adds	r6, r6, r4
		for (i = 0; i <= k; ++i) {
   43cd2:	f10e 0e01 	add.w	lr, lr, #1
   43cd6:	416f      	adcs	r7, r5
	*r0 = (uECC_word_t)r01;
   43cd8:	4634      	mov	r4, r6
		for (i = 0; i <= k; ++i) {
   43cda:	fa4f f68e 	sxtb.w	r6, lr
   43cde:	f04f 0b00 	mov.w	fp, #0
   43ce2:	bf28      	it	cs
   43ce4:	f04f 0b01 	movcs.w	fp, #1
   43ce8:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   43cea:	44d8      	add	r8, fp
	*r1 = r01 >> uECC_WORD_BITS;
   43cec:	463d      	mov	r5, r7
		for (i = 0; i <= k; ++i) {
   43cee:	dde9      	ble.n	43cc4 <uECC_vli_mult+0x4c>
		result[k] = r0;
   43cf0:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r2 += (r01 < p);
   43cf4:	4645      	mov	r5, r8
   43cf6:	f10c 0c01 	add.w	ip, ip, #1
	*r1 = r01 >> uECC_WORD_BITS;
   43cfa:	463c      	mov	r4, r7
   43cfc:	e7c2      	b.n	43c84 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   43cfe:	3601      	adds	r6, #1
   43d00:	46a9      	mov	r9, r5
   43d02:	b276      	sxtb	r6, r6
   43d04:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   43d08:	2500      	movs	r5, #0
   43d0a:	b277      	sxtb	r7, r6
   43d0c:	42bb      	cmp	r3, r7
   43d0e:	dc05      	bgt.n	43d1c <uECC_vli_mult+0xa4>
		result[k] = r0;
   43d10:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   43d14:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   43d18:	464c      	mov	r4, r9
   43d1a:	e7be      	b.n	43c9a <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   43d1c:	f06f 0703 	mvn.w	r7, #3
   43d20:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   43d22:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   43d26:	f85a 7007 	ldr.w	r7, [sl, r7]
   43d2a:	fba7 7c0c 	umull	r7, ip, r7, ip
   43d2e:	193f      	adds	r7, r7, r4
   43d30:	eb5c 0c09 	adcs.w	ip, ip, r9
   43d34:	f04f 0b00 	mov.w	fp, #0
   43d38:	bf28      	it	cs
   43d3a:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   43d3e:	445d      	add	r5, fp
	*r1 = r01 >> uECC_WORD_BITS;
   43d40:	46e1      	mov	r9, ip
	*r0 = (uECC_word_t)r01;
   43d42:	463c      	mov	r4, r7
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   43d44:	3601      	adds	r6, #1
   43d46:	e7e0      	b.n	43d0a <uECC_vli_mult+0x92>

00043d48 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   43d48:	2300      	movs	r3, #0
{
   43d4a:	b510      	push	{r4, lr}
		 vli[i] = 0;
   43d4c:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   43d4e:	b25a      	sxtb	r2, r3
   43d50:	4291      	cmp	r1, r2
   43d52:	dc00      	bgt.n	43d56 <uECC_vli_clear+0xe>
}
   43d54:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   43d56:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   43d5a:	3301      	adds	r3, #1
   43d5c:	e7f7      	b.n	43d4e <uECC_vli_clear+0x6>

00043d5e <uECC_vli_isZero>:
{
   43d5e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   43d60:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   43d62:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   43d64:	b25c      	sxtb	r4, r3
   43d66:	42a1      	cmp	r1, r4
   43d68:	dc03      	bgt.n	43d72 <uECC_vli_isZero+0x14>
}
   43d6a:	fab2 f082 	clz	r0, r2
   43d6e:	0940      	lsrs	r0, r0, #5
   43d70:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   43d72:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   43d76:	3301      	adds	r3, #1
   43d78:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   43d7a:	e7f3      	b.n	43d64 <uECC_vli_isZero+0x6>

00043d7c <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   43d7c:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   43d7e:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   43d80:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   43d84:	f001 011f 	and.w	r1, r1, #31
   43d88:	408b      	lsls	r3, r1
}
   43d8a:	4018      	ands	r0, r3
   43d8c:	4770      	bx	lr

00043d8e <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   43d8e:	3901      	subs	r1, #1
{
   43d90:	b510      	push	{r4, lr}
   43d92:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   43d94:	1d04      	adds	r4, r0, #4
   43d96:	060a      	lsls	r2, r1, #24
   43d98:	b2cb      	uxtb	r3, r1
   43d9a:	d404      	bmi.n	43da6 <uECC_vli_numBits+0x18>
   43d9c:	3901      	subs	r1, #1
   43d9e:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
   43da2:	2a00      	cmp	r2, #0
   43da4:	d0f7      	beq.n	43d96 <uECC_vli_numBits+0x8>
	return (i + 1);
   43da6:	3301      	adds	r3, #1
   43da8:	b25b      	sxtb	r3, r3
	if (num_digits == 0) {
   43daa:	b173      	cbz	r3, 43dca <uECC_vli_numBits+0x3c>
	digit = vli[num_digits - 1];
   43dac:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   43db0:	3a01      	subs	r2, #1
   43db2:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
	for (i = 0; digit; ++i) {
   43db6:	2200      	movs	r2, #0
   43db8:	b921      	cbnz	r1, 43dc4 <uECC_vli_numBits+0x36>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   43dba:	3b01      	subs	r3, #1
   43dbc:	eb02 1243 	add.w	r2, r2, r3, lsl #5
   43dc0:	b210      	sxth	r0, r2
}
   43dc2:	bd10      	pop	{r4, pc}
		digit >>= 1;
   43dc4:	0849      	lsrs	r1, r1, #1
	for (i = 0; digit; ++i) {
   43dc6:	3201      	adds	r2, #1
   43dc8:	e7f6      	b.n	43db8 <uECC_vli_numBits+0x2a>
		return 0;
   43dca:	4618      	mov	r0, r3
   43dcc:	e7f9      	b.n	43dc2 <uECC_vli_numBits+0x34>

00043dce <uECC_vli_set>:
{
   43dce:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   43dd0:	2300      	movs	r3, #0
   43dd2:	b25c      	sxtb	r4, r3
   43dd4:	42a2      	cmp	r2, r4
   43dd6:	dc00      	bgt.n	43dda <uECC_vli_set+0xc>
}
   43dd8:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   43dda:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   43dde:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   43de2:	3301      	adds	r3, #1
   43de4:	e7f5      	b.n	43dd2 <uECC_vli_set+0x4>

00043de6 <uECC_vli_cmp_unsafe>:
{
   43de6:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   43de8:	3a01      	subs	r2, #1
   43dea:	b252      	sxtb	r2, r2
   43dec:	0613      	lsls	r3, r2, #24
   43dee:	d501      	bpl.n	43df4 <uECC_vli_cmp_unsafe+0xe>
	return 0;
   43df0:	2000      	movs	r0, #0
}
   43df2:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   43df4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   43df8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   43dfc:	429c      	cmp	r4, r3
   43dfe:	d805      	bhi.n	43e0c <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   43e00:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   43e04:	d2f2      	bcs.n	43dec <uECC_vli_cmp_unsafe+0x6>
			return -1;
   43e06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   43e0a:	e7f2      	b.n	43df2 <uECC_vli_cmp_unsafe+0xc>
			return 1;
   43e0c:	2001      	movs	r0, #1
   43e0e:	e7f0      	b.n	43df2 <uECC_vli_cmp_unsafe+0xc>

00043e10 <uECC_vli_equal>:
{
   43e10:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   43e12:	3a01      	subs	r2, #1
   43e14:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   43e16:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   43e18:	0614      	lsls	r4, r2, #24
   43e1a:	d503      	bpl.n	43e24 <uECC_vli_equal+0x14>
}
   43e1c:	1e18      	subs	r0, r3, #0
   43e1e:	bf18      	it	ne
   43e20:	2001      	movne	r0, #1
   43e22:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   43e24:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   43e28:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   43e2c:	406c      	eors	r4, r5
   43e2e:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   43e30:	3a01      	subs	r2, #1
   43e32:	e7f1      	b.n	43e18 <uECC_vli_equal+0x8>

00043e34 <uECC_vli_sub>:
{
   43e34:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   43e36:	2400      	movs	r4, #0
{
   43e38:	4606      	mov	r6, r0
   43e3a:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   43e3c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   43e3e:	b265      	sxtb	r5, r4
   43e40:	4565      	cmp	r5, ip
   43e42:	db00      	blt.n	43e46 <uECC_vli_sub+0x12>
}
   43e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   43e46:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   43e4a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   43e4e:	1a3d      	subs	r5, r7, r0
   43e50:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   43e52:	42af      	cmp	r7, r5
   43e54:	f000 0001 	and.w	r0, r0, #1
   43e58:	bf18      	it	ne
   43e5a:	2000      	movne	r0, #0
		result[i] = diff;
   43e5c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   43e60:	bf38      	it	cc
   43e62:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   43e66:	3401      	adds	r4, #1
   43e68:	e7e9      	b.n	43e3e <uECC_vli_sub+0xa>

00043e6a <uECC_vli_modAdd>:
{
   43e6a:	b570      	push	{r4, r5, r6, lr}
   43e6c:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   43e70:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   43e72:	4633      	mov	r3, r6
{
   43e74:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   43e76:	f7ff febc 	bl	43bf2 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   43e7a:	b930      	cbnz	r0, 43e8a <uECC_vli_modAdd+0x20>
   43e7c:	4632      	mov	r2, r6
   43e7e:	4621      	mov	r1, r4
   43e80:	4628      	mov	r0, r5
   43e82:	f7ff ffb0 	bl	43de6 <uECC_vli_cmp_unsafe>
   43e86:	2801      	cmp	r0, #1
   43e88:	d007      	beq.n	43e9a <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   43e8a:	4633      	mov	r3, r6
   43e8c:	462a      	mov	r2, r5
   43e8e:	4621      	mov	r1, r4
   43e90:	4620      	mov	r0, r4
}
   43e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   43e96:	f7ff bfcd 	b.w	43e34 <uECC_vli_sub>
}
   43e9a:	bd70      	pop	{r4, r5, r6, pc}

00043e9c <uECC_vli_modSub>:
{
   43e9c:	b570      	push	{r4, r5, r6, lr}
   43e9e:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   43ea2:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   43ea4:	4633      	mov	r3, r6
{
   43ea6:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   43ea8:	f7ff ffc4 	bl	43e34 <uECC_vli_sub>
	if (l_borrow) {
   43eac:	b138      	cbz	r0, 43ebe <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   43eae:	4633      	mov	r3, r6
   43eb0:	462a      	mov	r2, r5
   43eb2:	4621      	mov	r1, r4
   43eb4:	4620      	mov	r0, r4
}
   43eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   43eba:	f7ff be9a 	b.w	43bf2 <uECC_vli_add>
}
   43ebe:	bd70      	pop	{r4, r5, r6, pc}

00043ec0 <uECC_vli_mmod>:
{
   43ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43ec4:	b0a5      	sub	sp, #148	; 0x94
   43ec6:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   43ec8:	ab14      	add	r3, sp, #80	; 0x50
   43eca:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   43ece:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   43ed0:	4629      	mov	r1, r5
   43ed2:	4610      	mov	r0, r2
{
   43ed4:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   43ed6:	f7ff ff5a 	bl	43d8e <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   43eda:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   43ede:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   43ee0:	2c00      	cmp	r4, #0
   43ee2:	4621      	mov	r1, r4
   43ee4:	bfb8      	it	lt
   43ee6:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   43eea:	4263      	negs	r3, r4
   43eec:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   43ef0:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   43ef4:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   43ef8:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   43efa:	bf58      	it	pl
   43efc:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   43efe:	f7ff ff23 	bl	43d48 <uECC_vli_clear>
	if (bit_shift > 0) {
   43f02:	2e00      	cmp	r6, #0
   43f04:	b208      	sxth	r0, r1
   43f06:	dd2b      	ble.n	43f60 <uECC_vli_mmod+0xa0>
   43f08:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   43f0a:	2200      	movs	r2, #0
   43f0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   43f10:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   43f14:	4613      	mov	r3, r2
   43f16:	429d      	cmp	r5, r3
   43f18:	d817      	bhi.n	43f4a <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   43f1a:	006b      	lsls	r3, r5, #1
   43f1c:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   43f1e:	ab04      	add	r3, sp, #16
   43f20:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   43f24:	1e6f      	subs	r7, r5, #1
   43f26:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   43f28:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   43f2a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   43f2e:	2c00      	cmp	r4, #0
   43f30:	da54      	bge.n	43fdc <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   43f32:	ab24      	add	r3, sp, #144	; 0x90
   43f34:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   43f38:	462a      	mov	r2, r5
   43f3a:	f856 1c88 	ldr.w	r1, [r6, #-136]
   43f3e:	4640      	mov	r0, r8
   43f40:	f7ff ff45 	bl	43dce <uECC_vli_set>
}
   43f44:	b025      	add	sp, #148	; 0x94
   43f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   43f4a:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   43f4e:	fa0c f106 	lsl.w	r1, ip, r6
   43f52:	430a      	orrs	r2, r1
   43f54:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   43f58:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   43f5a:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   43f5e:	e7da      	b.n	43f16 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   43f60:	ab04      	add	r3, sp, #16
   43f62:	462a      	mov	r2, r5
   43f64:	4639      	mov	r1, r7
   43f66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   43f6a:	f7ff ff30 	bl	43dce <uECC_vli_set>
   43f6e:	e7d4      	b.n	43f1a <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   43f70:	fa0f fe82 	sxth.w	lr, r2
   43f74:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   43f78:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   43f7c:	ab24      	add	r3, sp, #144	; 0x90
   43f7e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   43f82:	3001      	adds	r0, #1
   43f84:	f852 3c80 	ldr.w	r3, [r2, #-128]
   43f88:	440b      	add	r3, r1
   43f8a:	ebbb 0303 	subs.w	r3, fp, r3
   43f8e:	bf34      	ite	cc
   43f90:	2201      	movcc	r2, #1
   43f92:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   43f94:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   43f96:	bf18      	it	ne
   43f98:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   43f9a:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   43f9e:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   43fa2:	9b01      	ldr	r3, [sp, #4]
   43fa4:	b242      	sxtb	r2, r0
   43fa6:	429a      	cmp	r2, r3
   43fa8:	dbe2      	blt.n	43f70 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   43faa:	1a73      	subs	r3, r6, r1
   43fac:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   43fae:	4629      	mov	r1, r5
   43fb0:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   43fb2:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   43fb4:	f7ff fe37 	bl	43c26 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   43fb8:	ab24      	add	r3, sp, #144	; 0x90
   43fba:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   43fbe:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   43fc0:	f853 2c80 	ldr.w	r2, [r3, #-128]
   43fc4:	f857 3c80 	ldr.w	r3, [r7, #-128]
   43fc8:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   43fcc:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   43fd0:	4648      	mov	r0, r9
   43fd2:	3c01      	subs	r4, #1
   43fd4:	f7ff fe27 	bl	43c26 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   43fd8:	b224      	sxth	r4, r4
   43fda:	e7a8      	b.n	43f2e <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   43fdc:	ab24      	add	r3, sp, #144	; 0x90
   43fde:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   43fe0:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   43fe4:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   43fe6:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   43fea:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   43fee:	e7d8      	b.n	43fa2 <uECC_vli_mmod+0xe2>

00043ff0 <uECC_vli_modMult_fast>:
{
   43ff0:	b530      	push	{r4, r5, lr}
   43ff2:	461c      	mov	r4, r3
   43ff4:	b091      	sub	sp, #68	; 0x44
   43ff6:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   43ff8:	f993 3000 	ldrsb.w	r3, [r3]
   43ffc:	4668      	mov	r0, sp
   43ffe:	f7ff fe3b 	bl	43c78 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   44002:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   44006:	4669      	mov	r1, sp
   44008:	4628      	mov	r0, r5
   4400a:	4798      	blx	r3
}
   4400c:	b011      	add	sp, #68	; 0x44
   4400e:	bd30      	pop	{r4, r5, pc}

00044010 <uECC_vli_modSquare_fast>:
{
   44010:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   44012:	460a      	mov	r2, r1
   44014:	f7ff bfec 	b.w	43ff0 <uECC_vli_modMult_fast>

00044018 <double_jacobian_default>:
{
   44018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   4401c:	f993 6000 	ldrsb.w	r6, [r3]
{
   44020:	b092      	sub	sp, #72	; 0x48
   44022:	4604      	mov	r4, r0
   44024:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   44026:	4610      	mov	r0, r2
   44028:	4631      	mov	r1, r6
{
   4402a:	4615      	mov	r5, r2
   4402c:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   4402e:	f7ff fe96 	bl	43d5e <uECC_vli_isZero>
   44032:	2800      	cmp	r0, #0
   44034:	f040 8091 	bne.w	4415a <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   44038:	463a      	mov	r2, r7
   4403a:	4649      	mov	r1, r9
   4403c:	a802      	add	r0, sp, #8
   4403e:	f7ff ffe7 	bl	44010 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   44042:	463b      	mov	r3, r7
   44044:	aa02      	add	r2, sp, #8
   44046:	4621      	mov	r1, r4
   44048:	a80a      	add	r0, sp, #40	; 0x28
   4404a:	f7ff ffd1 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   4404e:	a902      	add	r1, sp, #8
   44050:	4608      	mov	r0, r1
   44052:	463a      	mov	r2, r7
   44054:	f7ff ffdc 	bl	44010 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   44058:	463b      	mov	r3, r7
   4405a:	462a      	mov	r2, r5
   4405c:	4649      	mov	r1, r9
   4405e:	4648      	mov	r0, r9
   44060:	f7ff ffc6 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   44064:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   44068:	463a      	mov	r2, r7
   4406a:	4629      	mov	r1, r5
   4406c:	4628      	mov	r0, r5
   4406e:	f7ff ffcf 	bl	44010 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   44072:	4643      	mov	r3, r8
   44074:	462a      	mov	r2, r5
   44076:	4621      	mov	r1, r4
   44078:	4620      	mov	r0, r4
   4407a:	9600      	str	r6, [sp, #0]
   4407c:	f7ff fef5 	bl	43e6a <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   44080:	4643      	mov	r3, r8
   44082:	462a      	mov	r2, r5
   44084:	4629      	mov	r1, r5
   44086:	4628      	mov	r0, r5
   44088:	9600      	str	r6, [sp, #0]
   4408a:	f7ff feee 	bl	43e6a <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   4408e:	4643      	mov	r3, r8
   44090:	462a      	mov	r2, r5
   44092:	4621      	mov	r1, r4
   44094:	4628      	mov	r0, r5
   44096:	9600      	str	r6, [sp, #0]
   44098:	f7ff ff00 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   4409c:	463b      	mov	r3, r7
   4409e:	462a      	mov	r2, r5
   440a0:	4621      	mov	r1, r4
   440a2:	4620      	mov	r0, r4
   440a4:	f7ff ffa4 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   440a8:	4643      	mov	r3, r8
   440aa:	4622      	mov	r2, r4
   440ac:	4621      	mov	r1, r4
   440ae:	4628      	mov	r0, r5
   440b0:	9600      	str	r6, [sp, #0]
   440b2:	f7ff feda 	bl	43e6a <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   440b6:	4643      	mov	r3, r8
   440b8:	9600      	str	r6, [sp, #0]
   440ba:	462a      	mov	r2, r5
   440bc:	4621      	mov	r1, r4
   440be:	4620      	mov	r0, r4
   440c0:	f7ff fed3 	bl	43e6a <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   440c4:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   440c6:	07db      	lsls	r3, r3, #31
   440c8:	d54a      	bpl.n	44160 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   440ca:	4633      	mov	r3, r6
   440cc:	4642      	mov	r2, r8
   440ce:	4621      	mov	r1, r4
   440d0:	4620      	mov	r0, r4
   440d2:	f7ff fd8e 	bl	43bf2 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   440d6:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   440d8:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   440da:	4620      	mov	r0, r4
   440dc:	f7ff fda3 	bl	43c26 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   440e0:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   440e4:	3b01      	subs	r3, #1
   440e6:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   440ea:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   440ee:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   440f2:	463a      	mov	r2, r7
   440f4:	4621      	mov	r1, r4
   440f6:	4628      	mov	r0, r5
   440f8:	f7ff ff8a 	bl	44010 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   440fc:	4643      	mov	r3, r8
   440fe:	aa0a      	add	r2, sp, #40	; 0x28
   44100:	4629      	mov	r1, r5
   44102:	4628      	mov	r0, r5
   44104:	9600      	str	r6, [sp, #0]
   44106:	f7ff fec9 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   4410a:	4643      	mov	r3, r8
   4410c:	aa0a      	add	r2, sp, #40	; 0x28
   4410e:	4629      	mov	r1, r5
   44110:	4628      	mov	r0, r5
   44112:	9600      	str	r6, [sp, #0]
   44114:	f7ff fec2 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   44118:	a90a      	add	r1, sp, #40	; 0x28
   4411a:	4608      	mov	r0, r1
   4411c:	4643      	mov	r3, r8
   4411e:	462a      	mov	r2, r5
   44120:	9600      	str	r6, [sp, #0]
   44122:	f7ff febb 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   44126:	463b      	mov	r3, r7
   44128:	aa0a      	add	r2, sp, #40	; 0x28
   4412a:	4621      	mov	r1, r4
   4412c:	4620      	mov	r0, r4
   4412e:	f7ff ff5f 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   44132:	aa02      	add	r2, sp, #8
   44134:	4643      	mov	r3, r8
   44136:	4610      	mov	r0, r2
   44138:	4621      	mov	r1, r4
   4413a:	9600      	str	r6, [sp, #0]
   4413c:	f7ff feae 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   44140:	4632      	mov	r2, r6
   44142:	4629      	mov	r1, r5
   44144:	4620      	mov	r0, r4
   44146:	f7ff fe42 	bl	43dce <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   4414a:	4649      	mov	r1, r9
   4414c:	4628      	mov	r0, r5
   4414e:	f7ff fe3e 	bl	43dce <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   44152:	a902      	add	r1, sp, #8
   44154:	4648      	mov	r0, r9
   44156:	f7ff fe3a 	bl	43dce <uECC_vli_set>
}
   4415a:	b012      	add	sp, #72	; 0x48
   4415c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   44160:	4631      	mov	r1, r6
   44162:	4620      	mov	r0, r4
   44164:	f7ff fd5f 	bl	43c26 <uECC_vli_rshift1>
   44168:	e7c3      	b.n	440f2 <double_jacobian_default+0xda>

0004416a <x_side_default>:
{
   4416a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4416e:	4615      	mov	r5, r2
   44170:	b08a      	sub	sp, #40	; 0x28
   44172:	4604      	mov	r4, r0
   44174:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   44176:	221c      	movs	r2, #28
   44178:	2100      	movs	r1, #0
   4417a:	a803      	add	r0, sp, #12
   4417c:	f000 fe4c 	bl	44e18 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   44180:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   44182:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   44186:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   44188:	462a      	mov	r2, r5
   4418a:	4631      	mov	r1, r6
   4418c:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4418e:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   44190:	f7ff ff3e 	bl	44010 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   44194:	463b      	mov	r3, r7
   44196:	aa02      	add	r2, sp, #8
   44198:	4621      	mov	r1, r4
   4419a:	4620      	mov	r0, r4
   4419c:	f8cd 8000 	str.w	r8, [sp]
   441a0:	f7ff fe7c 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   441a4:	462b      	mov	r3, r5
   441a6:	4632      	mov	r2, r6
   441a8:	4621      	mov	r1, r4
   441aa:	4620      	mov	r0, r4
   441ac:	f7ff ff20 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   441b0:	f8cd 8000 	str.w	r8, [sp]
   441b4:	463b      	mov	r3, r7
   441b6:	f105 0284 	add.w	r2, r5, #132	; 0x84
   441ba:	4621      	mov	r1, r4
   441bc:	4620      	mov	r0, r4
   441be:	f7ff fe54 	bl	43e6a <uECC_vli_modAdd>
}
   441c2:	b00a      	add	sp, #40	; 0x28
   441c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000441c8 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   441c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   441cc:	b09a      	sub	sp, #104	; 0x68
   441ce:	4616      	mov	r6, r2
   441d0:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   441d4:	4644      	mov	r4, r8
{
   441d6:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   441d8:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   441dc:	9500      	str	r5, [sp, #0]
{
   441de:	4607      	mov	r7, r0
   441e0:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   441e2:	4623      	mov	r3, r4
   441e4:	4602      	mov	r2, r0
   441e6:	4631      	mov	r1, r6
   441e8:	a802      	add	r0, sp, #8
   441ea:	f7ff fe57 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   441ee:	a902      	add	r1, sp, #8
   441f0:	4642      	mov	r2, r8
   441f2:	4608      	mov	r0, r1
   441f4:	f7ff ff0c 	bl	44010 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   441f8:	4643      	mov	r3, r8
   441fa:	aa02      	add	r2, sp, #8
   441fc:	4639      	mov	r1, r7
   441fe:	4638      	mov	r0, r7
   44200:	f7ff fef6 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   44204:	4643      	mov	r3, r8
   44206:	aa02      	add	r2, sp, #8
   44208:	4631      	mov	r1, r6
   4420a:	4630      	mov	r0, r6
   4420c:	f7ff fef0 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   44210:	4623      	mov	r3, r4
   44212:	4652      	mov	r2, sl
   44214:	4649      	mov	r1, r9
   44216:	a802      	add	r0, sp, #8
   44218:	9500      	str	r5, [sp, #0]
   4421a:	f7ff fe26 	bl	43e6a <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4421e:	4623      	mov	r3, r4
   44220:	4652      	mov	r2, sl
   44222:	4649      	mov	r1, r9
   44224:	4648      	mov	r0, r9
   44226:	9500      	str	r5, [sp, #0]
   44228:	f7ff fe38 	bl	43e9c <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   4422c:	4623      	mov	r3, r4
   4422e:	463a      	mov	r2, r7
   44230:	4631      	mov	r1, r6
   44232:	a80a      	add	r0, sp, #40	; 0x28
   44234:	9500      	str	r5, [sp, #0]
   44236:	f7ff fe31 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   4423a:	4643      	mov	r3, r8
   4423c:	aa0a      	add	r2, sp, #40	; 0x28
   4423e:	4651      	mov	r1, sl
   44240:	4650      	mov	r0, sl
   44242:	f7ff fed5 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   44246:	4623      	mov	r3, r4
   44248:	4632      	mov	r2, r6
   4424a:	4639      	mov	r1, r7
   4424c:	a80a      	add	r0, sp, #40	; 0x28
   4424e:	9500      	str	r5, [sp, #0]
   44250:	f7ff fe0b 	bl	43e6a <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   44254:	4642      	mov	r2, r8
   44256:	4649      	mov	r1, r9
   44258:	4630      	mov	r0, r6
   4425a:	f7ff fed9 	bl	44010 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   4425e:	4623      	mov	r3, r4
   44260:	aa0a      	add	r2, sp, #40	; 0x28
   44262:	4631      	mov	r1, r6
   44264:	4630      	mov	r0, r6
   44266:	9500      	str	r5, [sp, #0]
   44268:	f7ff fe18 	bl	43e9c <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   4426c:	4623      	mov	r3, r4
   4426e:	4632      	mov	r2, r6
   44270:	4639      	mov	r1, r7
   44272:	a812      	add	r0, sp, #72	; 0x48
   44274:	9500      	str	r5, [sp, #0]
   44276:	f7ff fe11 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   4427a:	4643      	mov	r3, r8
   4427c:	aa12      	add	r2, sp, #72	; 0x48
   4427e:	4649      	mov	r1, r9
   44280:	4648      	mov	r0, r9
   44282:	f7ff feb5 	bl	43ff0 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   44286:	4623      	mov	r3, r4
   44288:	4652      	mov	r2, sl
   4428a:	4649      	mov	r1, r9
   4428c:	4648      	mov	r0, r9
   4428e:	9500      	str	r5, [sp, #0]
   44290:	f7ff fe04 	bl	43e9c <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   44294:	4642      	mov	r2, r8
   44296:	a902      	add	r1, sp, #8
   44298:	a812      	add	r0, sp, #72	; 0x48
   4429a:	f7ff feb9 	bl	44010 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   4429e:	a912      	add	r1, sp, #72	; 0x48
   442a0:	4623      	mov	r3, r4
   442a2:	aa0a      	add	r2, sp, #40	; 0x28
   442a4:	4608      	mov	r0, r1
   442a6:	9500      	str	r5, [sp, #0]
   442a8:	f7ff fdf8 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   442ac:	4623      	mov	r3, r4
   442ae:	463a      	mov	r2, r7
   442b0:	a912      	add	r1, sp, #72	; 0x48
   442b2:	a80a      	add	r0, sp, #40	; 0x28
   442b4:	9500      	str	r5, [sp, #0]
   442b6:	f7ff fdf1 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   442ba:	a90a      	add	r1, sp, #40	; 0x28
   442bc:	4643      	mov	r3, r8
   442be:	aa02      	add	r2, sp, #8
   442c0:	4608      	mov	r0, r1
   442c2:	f7ff fe95 	bl	43ff0 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   442c6:	4623      	mov	r3, r4
   442c8:	4652      	mov	r2, sl
   442ca:	a90a      	add	r1, sp, #40	; 0x28
   442cc:	4650      	mov	r0, sl
   442ce:	9500      	str	r5, [sp, #0]
   442d0:	f7ff fde4 	bl	43e9c <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   442d4:	462a      	mov	r2, r5
   442d6:	a912      	add	r1, sp, #72	; 0x48
   442d8:	4638      	mov	r0, r7
   442da:	f7ff fd78 	bl	43dce <uECC_vli_set>
}
   442de:	b01a      	add	sp, #104	; 0x68
   442e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000442e4 <uECC_vli_modInv>:
{
   442e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   442e6:	460f      	mov	r7, r1
   442e8:	b0a1      	sub	sp, #132	; 0x84
   442ea:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   442ec:	4619      	mov	r1, r3
   442ee:	4638      	mov	r0, r7
{
   442f0:	4615      	mov	r5, r2
   442f2:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   442f4:	f7ff fd33 	bl	43d5e <uECC_vli_isZero>
   442f8:	b128      	cbz	r0, 44306 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   442fa:	4630      	mov	r0, r6
}
   442fc:	b021      	add	sp, #132	; 0x84
   442fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   44302:	f7ff bd21 	b.w	43d48 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   44306:	4622      	mov	r2, r4
   44308:	4639      	mov	r1, r7
   4430a:	4668      	mov	r0, sp
   4430c:	f7ff fd5f 	bl	43dce <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   44310:	4629      	mov	r1, r5
   44312:	a808      	add	r0, sp, #32
   44314:	f7ff fd5b 	bl	43dce <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   44318:	a810      	add	r0, sp, #64	; 0x40
   4431a:	4621      	mov	r1, r4
   4431c:	f7ff fd14 	bl	43d48 <uECC_vli_clear>
	u[0] = 1;
   44320:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   44322:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   44324:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   44326:	f7ff fd0f 	bl	43d48 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   4432a:	4622      	mov	r2, r4
   4432c:	a908      	add	r1, sp, #32
   4432e:	4668      	mov	r0, sp
   44330:	f7ff fd59 	bl	43de6 <uECC_vli_cmp_unsafe>
   44334:	b930      	cbnz	r0, 44344 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   44336:	4622      	mov	r2, r4
   44338:	a910      	add	r1, sp, #64	; 0x40
   4433a:	4630      	mov	r0, r6
   4433c:	f7ff fd47 	bl	43dce <uECC_vli_set>
}
   44340:	b021      	add	sp, #132	; 0x84
   44342:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   44344:	9b00      	ldr	r3, [sp, #0]
   44346:	07da      	lsls	r2, r3, #31
   44348:	d409      	bmi.n	4435e <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   4434a:	4621      	mov	r1, r4
   4434c:	4668      	mov	r0, sp
   4434e:	f7ff fc6a 	bl	43c26 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   44352:	4622      	mov	r2, r4
   44354:	4629      	mov	r1, r5
   44356:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   44358:	f7ff fc72 	bl	43c40 <vli_modInv_update>
   4435c:	e7e5      	b.n	4432a <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   4435e:	9b08      	ldr	r3, [sp, #32]
   44360:	07db      	lsls	r3, r3, #31
   44362:	d407      	bmi.n	44374 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   44364:	4621      	mov	r1, r4
   44366:	a808      	add	r0, sp, #32
   44368:	f7ff fc5d 	bl	43c26 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   4436c:	4622      	mov	r2, r4
   4436e:	4629      	mov	r1, r5
   44370:	a818      	add	r0, sp, #96	; 0x60
   44372:	e7f1      	b.n	44358 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   44374:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   44376:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   44378:	dd1c      	ble.n	443b4 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   4437a:	aa08      	add	r2, sp, #32
   4437c:	4669      	mov	r1, sp
   4437e:	4668      	mov	r0, sp
   44380:	f7ff fd58 	bl	43e34 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   44384:	4621      	mov	r1, r4
   44386:	4668      	mov	r0, sp
   44388:	f7ff fc4d 	bl	43c26 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   4438c:	4622      	mov	r2, r4
   4438e:	a918      	add	r1, sp, #96	; 0x60
   44390:	a810      	add	r0, sp, #64	; 0x40
   44392:	f7ff fd28 	bl	43de6 <uECC_vli_cmp_unsafe>
   44396:	2800      	cmp	r0, #0
   44398:	da05      	bge.n	443a6 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   4439a:	a910      	add	r1, sp, #64	; 0x40
   4439c:	4623      	mov	r3, r4
   4439e:	462a      	mov	r2, r5
   443a0:	4608      	mov	r0, r1
   443a2:	f7ff fc26 	bl	43bf2 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   443a6:	a910      	add	r1, sp, #64	; 0x40
   443a8:	4623      	mov	r3, r4
   443aa:	aa18      	add	r2, sp, #96	; 0x60
   443ac:	4608      	mov	r0, r1
   443ae:	f7ff fd41 	bl	43e34 <uECC_vli_sub>
   443b2:	e7ce      	b.n	44352 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   443b4:	466a      	mov	r2, sp
   443b6:	a808      	add	r0, sp, #32
   443b8:	f7ff fd3c 	bl	43e34 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   443bc:	4621      	mov	r1, r4
   443be:	a808      	add	r0, sp, #32
   443c0:	f7ff fc31 	bl	43c26 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   443c4:	4622      	mov	r2, r4
   443c6:	a910      	add	r1, sp, #64	; 0x40
   443c8:	a818      	add	r0, sp, #96	; 0x60
   443ca:	f7ff fd0c 	bl	43de6 <uECC_vli_cmp_unsafe>
   443ce:	2800      	cmp	r0, #0
   443d0:	da05      	bge.n	443de <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   443d2:	a918      	add	r1, sp, #96	; 0x60
   443d4:	4623      	mov	r3, r4
   443d6:	462a      	mov	r2, r5
   443d8:	4608      	mov	r0, r1
   443da:	f7ff fc0a 	bl	43bf2 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   443de:	a918      	add	r1, sp, #96	; 0x60
   443e0:	4623      	mov	r3, r4
   443e2:	aa10      	add	r2, sp, #64	; 0x40
   443e4:	4608      	mov	r0, r1
   443e6:	f7ff fd25 	bl	43e34 <uECC_vli_sub>
   443ea:	e7bf      	b.n	4436c <uECC_vli_modInv+0x88>

000443ec <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   443ec:	7809      	ldrb	r1, [r1, #0]
   443ee:	0049      	lsls	r1, r1, #1
   443f0:	b249      	sxtb	r1, r1
   443f2:	f7ff bcb4 	b.w	43d5e <uECC_vli_isZero>

000443f6 <apply_z>:
{
   443f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   443f8:	4615      	mov	r5, r2
   443fa:	b089      	sub	sp, #36	; 0x24
   443fc:	461c      	mov	r4, r3
   443fe:	4607      	mov	r7, r0
   44400:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   44402:	461a      	mov	r2, r3
   44404:	4629      	mov	r1, r5
   44406:	4668      	mov	r0, sp
   44408:	f7ff fe02 	bl	44010 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   4440c:	4623      	mov	r3, r4
   4440e:	466a      	mov	r2, sp
   44410:	4639      	mov	r1, r7
   44412:	4638      	mov	r0, r7
   44414:	f7ff fdec 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   44418:	4623      	mov	r3, r4
   4441a:	462a      	mov	r2, r5
   4441c:	4669      	mov	r1, sp
   4441e:	4668      	mov	r0, sp
   44420:	f7ff fde6 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   44424:	4623      	mov	r3, r4
   44426:	466a      	mov	r2, sp
   44428:	4631      	mov	r1, r6
   4442a:	4630      	mov	r0, r6
   4442c:	f7ff fde0 	bl	43ff0 <uECC_vli_modMult_fast>
}
   44430:	b009      	add	sp, #36	; 0x24
   44432:	bdf0      	pop	{r4, r5, r6, r7, pc}

00044434 <XYcZ_add>:
{
   44434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   44438:	b08a      	sub	sp, #40	; 0x28
   4443a:	4614      	mov	r4, r2
   4443c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   44440:	4655      	mov	r5, sl
{
   44442:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   44444:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   44448:	9600      	str	r6, [sp, #0]
{
   4444a:	4680      	mov	r8, r0
   4444c:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4444e:	462b      	mov	r3, r5
   44450:	4602      	mov	r2, r0
   44452:	4621      	mov	r1, r4
   44454:	a802      	add	r0, sp, #8
   44456:	f7ff fd21 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4445a:	a902      	add	r1, sp, #8
   4445c:	4652      	mov	r2, sl
   4445e:	4608      	mov	r0, r1
   44460:	f7ff fdd6 	bl	44010 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   44464:	4653      	mov	r3, sl
   44466:	aa02      	add	r2, sp, #8
   44468:	4641      	mov	r1, r8
   4446a:	4640      	mov	r0, r8
   4446c:	f7ff fdc0 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   44470:	4653      	mov	r3, sl
   44472:	aa02      	add	r2, sp, #8
   44474:	4621      	mov	r1, r4
   44476:	4620      	mov	r0, r4
   44478:	f7ff fdba 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4447c:	462b      	mov	r3, r5
   4447e:	464a      	mov	r2, r9
   44480:	4639      	mov	r1, r7
   44482:	4638      	mov	r0, r7
   44484:	9600      	str	r6, [sp, #0]
   44486:	f7ff fd09 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   4448a:	4652      	mov	r2, sl
   4448c:	4639      	mov	r1, r7
   4448e:	a802      	add	r0, sp, #8
   44490:	f7ff fdbe 	bl	44010 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   44494:	a902      	add	r1, sp, #8
   44496:	462b      	mov	r3, r5
   44498:	4642      	mov	r2, r8
   4449a:	4608      	mov	r0, r1
   4449c:	9600      	str	r6, [sp, #0]
   4449e:	f7ff fcfd 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   444a2:	a902      	add	r1, sp, #8
   444a4:	462b      	mov	r3, r5
   444a6:	4622      	mov	r2, r4
   444a8:	4608      	mov	r0, r1
   444aa:	9600      	str	r6, [sp, #0]
   444ac:	f7ff fcf6 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   444b0:	462b      	mov	r3, r5
   444b2:	4642      	mov	r2, r8
   444b4:	4621      	mov	r1, r4
   444b6:	4620      	mov	r0, r4
   444b8:	9600      	str	r6, [sp, #0]
   444ba:	f7ff fcef 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   444be:	4653      	mov	r3, sl
   444c0:	4622      	mov	r2, r4
   444c2:	4649      	mov	r1, r9
   444c4:	4648      	mov	r0, r9
   444c6:	f7ff fd93 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   444ca:	462b      	mov	r3, r5
   444cc:	aa02      	add	r2, sp, #8
   444ce:	4641      	mov	r1, r8
   444d0:	4620      	mov	r0, r4
   444d2:	9600      	str	r6, [sp, #0]
   444d4:	f7ff fce2 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   444d8:	4653      	mov	r3, sl
   444da:	4622      	mov	r2, r4
   444dc:	4639      	mov	r1, r7
   444de:	4638      	mov	r0, r7
   444e0:	f7ff fd86 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   444e4:	462b      	mov	r3, r5
   444e6:	464a      	mov	r2, r9
   444e8:	4639      	mov	r1, r7
   444ea:	4638      	mov	r0, r7
   444ec:	9600      	str	r6, [sp, #0]
   444ee:	f7ff fcd5 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   444f2:	4632      	mov	r2, r6
   444f4:	a902      	add	r1, sp, #8
   444f6:	4620      	mov	r0, r4
   444f8:	f7ff fc69 	bl	43dce <uECC_vli_set>
}
   444fc:	b00a      	add	sp, #40	; 0x28
   444fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00044502 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   44502:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44506:	b0af      	sub	sp, #188	; 0xbc
   44508:	e9cd 0102 	strd	r0, r1, [sp, #8]
   4450c:	9c39      	ldr	r4, [sp, #228]	; 0xe4
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   4450e:	f994 6000 	ldrsb.w	r6, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   44512:	a816      	add	r0, sp, #88	; 0x58
{
   44514:	4691      	mov	r9, r2
	uECC_vli_set(Rx[1], point, num_words);
   44516:	4632      	mov	r2, r6
{
   44518:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   4451a:	f7ff fc58 	bl	43dce <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   4451e:	00b3      	lsls	r3, r6, #2
   44520:	9304      	str	r3, [sp, #16]
   44522:	9b03      	ldr	r3, [sp, #12]
   44524:	eb03 0886 	add.w	r8, r3, r6, lsl #2
   44528:	4641      	mov	r1, r8
   4452a:	a826      	add	r0, sp, #152	; 0x98
   4452c:	f7ff fc4f 	bl	43dce <uECC_vli_set>
	if (initial_Z) {
   44530:	2d00      	cmp	r5, #0
   44532:	f000 8081 	beq.w	44638 <EccPoint_mult+0x136>
		uECC_vli_set(z, initial_Z, num_words);
   44536:	4629      	mov	r1, r5
   44538:	a806      	add	r0, sp, #24
   4453a:	f7ff fc48 	bl	43dce <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   4453e:	4632      	mov	r2, r6
   44540:	a916      	add	r1, sp, #88	; 0x58
   44542:	a80e      	add	r0, sp, #56	; 0x38
   44544:	f7ff fc43 	bl	43dce <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   44548:	a926      	add	r1, sp, #152	; 0x98
   4454a:	a81e      	add	r0, sp, #120	; 0x78
   4454c:	f7ff fc3f 	bl	43dce <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   44550:	4623      	mov	r3, r4
   44552:	aa06      	add	r2, sp, #24
   44554:	a816      	add	r0, sp, #88	; 0x58
   44556:	f7ff ff4e 	bl	443f6 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   4455a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   4455e:	4623      	mov	r3, r4
   44560:	aa06      	add	r2, sp, #24
   44562:	a926      	add	r1, sp, #152	; 0x98
   44564:	a816      	add	r0, sp, #88	; 0x58
   44566:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   44568:	4623      	mov	r3, r4
   4456a:	aa06      	add	r2, sp, #24
   4456c:	a91e      	add	r1, sp, #120	; 0x78
   4456e:	a80e      	add	r0, sp, #56	; 0x38
   44570:	f7ff ff41 	bl	443f6 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   44574:	f9bd 50e0 	ldrsh.w	r5, [sp, #224]	; 0xe0
   44578:	3d02      	subs	r5, #2
   4457a:	b22d      	sxth	r5, r5
   4457c:	2d00      	cmp	r5, #0
   4457e:	dc62      	bgt.n	44646 <EccPoint_mult+0x144>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   44580:	f8d9 5000 	ldr.w	r5, [r9]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   44584:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   44586:	f005 0701 	and.w	r7, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4458a:	ab0e      	add	r3, sp, #56	; 0x38
   4458c:	eb03 1947 	add.w	r9, r3, r7, lsl #5
   44590:	43ed      	mvns	r5, r5
   44592:	ab1e      	add	r3, sp, #120	; 0x78
   44594:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   44598:	f005 0501 	and.w	r5, r5, #1
   4459c:	ab0e      	add	r3, sp, #56	; 0x38
   4459e:	eb03 1a45 	add.w	sl, r3, r5, lsl #5
   445a2:	ab1e      	add	r3, sp, #120	; 0x78
   445a4:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   445a8:	462b      	mov	r3, r5
   445aa:	4652      	mov	r2, sl
   445ac:	4639      	mov	r1, r7
   445ae:	4648      	mov	r0, r9

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   445b0:	f104 0b04 	add.w	fp, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   445b4:	f7ff fe08 	bl	441c8 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   445b8:	465b      	mov	r3, fp
   445ba:	aa0e      	add	r2, sp, #56	; 0x38
   445bc:	a916      	add	r1, sp, #88	; 0x58
   445be:	a806      	add	r0, sp, #24
   445c0:	9600      	str	r6, [sp, #0]
   445c2:	f7ff fc6b 	bl	43e9c <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   445c6:	a906      	add	r1, sp, #24
   445c8:	4623      	mov	r3, r4
   445ca:	463a      	mov	r2, r7
   445cc:	4608      	mov	r0, r1
   445ce:	f7ff fd0f 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   445d2:	a906      	add	r1, sp, #24
   445d4:	9a03      	ldr	r2, [sp, #12]
   445d6:	4623      	mov	r3, r4
   445d8:	4608      	mov	r0, r1
   445da:	f7ff fd09 	bl	43ff0 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   445de:	a906      	add	r1, sp, #24
   445e0:	4633      	mov	r3, r6
   445e2:	465a      	mov	r2, fp
   445e4:	4608      	mov	r0, r1
   445e6:	f7ff fe7d 	bl	442e4 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   445ea:	a906      	add	r1, sp, #24
   445ec:	4623      	mov	r3, r4
   445ee:	4642      	mov	r2, r8
   445f0:	4608      	mov	r0, r1
   445f2:	f7ff fcfd 	bl	43ff0 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   445f6:	a906      	add	r1, sp, #24
   445f8:	4623      	mov	r3, r4
   445fa:	464a      	mov	r2, r9
   445fc:	4608      	mov	r0, r1
   445fe:	f7ff fcf7 	bl	43ff0 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   44602:	463b      	mov	r3, r7
   44604:	464a      	mov	r2, r9
   44606:	4629      	mov	r1, r5
   44608:	4650      	mov	r0, sl
   4460a:	9400      	str	r4, [sp, #0]
   4460c:	f7ff ff12 	bl	44434 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   44610:	4623      	mov	r3, r4
   44612:	aa06      	add	r2, sp, #24
   44614:	a91e      	add	r1, sp, #120	; 0x78
   44616:	a80e      	add	r0, sp, #56	; 0x38
   44618:	f7ff feed 	bl	443f6 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   4461c:	9802      	ldr	r0, [sp, #8]
   4461e:	4632      	mov	r2, r6
   44620:	a90e      	add	r1, sp, #56	; 0x38
   44622:	f7ff fbd4 	bl	43dce <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   44626:	9802      	ldr	r0, [sp, #8]
   44628:	9b04      	ldr	r3, [sp, #16]
   4462a:	a91e      	add	r1, sp, #120	; 0x78
   4462c:	4418      	add	r0, r3
   4462e:	f7ff fbce 	bl	43dce <uECC_vli_set>
}
   44632:	b02f      	add	sp, #188	; 0xbc
   44634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   44638:	4631      	mov	r1, r6
   4463a:	a806      	add	r0, sp, #24
   4463c:	f7ff fb84 	bl	43d48 <uECC_vli_clear>
		z[0] = 1;
   44640:	2301      	movs	r3, #1
   44642:	9306      	str	r3, [sp, #24]
   44644:	e77b      	b.n	4453e <EccPoint_mult+0x3c>
		nb = !uECC_vli_testBit(scalar, i);
   44646:	4629      	mov	r1, r5
   44648:	4648      	mov	r0, r9
   4464a:	f7ff fb97 	bl	43d7c <uECC_vli_testBit>
   4464e:	fab0 f780 	clz	r7, r0
   44652:	097f      	lsrs	r7, r7, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   44654:	f1c7 0b01 	rsb	fp, r7, #1
   44658:	ab0e      	add	r3, sp, #56	; 0x38
   4465a:	eb03 104b 	add.w	r0, r3, fp, lsl #5
   4465e:	ab1e      	add	r3, sp, #120	; 0x78
   44660:	eb03 1b4b 	add.w	fp, r3, fp, lsl #5
   44664:	ab0e      	add	r3, sp, #56	; 0x38
   44666:	eb03 1a47 	add.w	sl, r3, r7, lsl #5
   4466a:	ab1e      	add	r3, sp, #120	; 0x78
   4466c:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   44670:	463b      	mov	r3, r7
   44672:	4652      	mov	r2, sl
   44674:	4659      	mov	r1, fp
   44676:	9400      	str	r4, [sp, #0]
   44678:	9005      	str	r0, [sp, #20]
   4467a:	f7ff fda5 	bl	441c8 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   4467e:	9805      	ldr	r0, [sp, #20]
   44680:	9400      	str	r4, [sp, #0]
   44682:	4602      	mov	r2, r0
   44684:	465b      	mov	r3, fp
   44686:	4639      	mov	r1, r7
   44688:	4650      	mov	r0, sl
   4468a:	f7ff fed3 	bl	44434 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   4468e:	3d01      	subs	r5, #1
   44690:	e773      	b.n	4457a <EccPoint_mult+0x78>

00044692 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   44692:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   44696:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   4469a:	f119 081f 	adds.w	r8, r9, #31
{
   4469e:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   446a0:	bf48      	it	mi
   446a2:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   446a6:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   446a8:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   446ac:	3524      	adds	r5, #36	; 0x24
   446ae:	4601      	mov	r1, r0
{
   446b0:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   446b2:	4643      	mov	r3, r8
   446b4:	462a      	mov	r2, r5
   446b6:	4630      	mov	r0, r6
   446b8:	f7ff fa9b 	bl	43bf2 <uECC_vli_add>
   446bc:	4604      	mov	r4, r0
   446be:	b990      	cbnz	r0, 446e6 <regularize_k+0x54>
   446c0:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   446c4:	da06      	bge.n	446d4 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   446c6:	4649      	mov	r1, r9
   446c8:	4630      	mov	r0, r6
   446ca:	f7ff fb57 	bl	43d7c <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   446ce:	1e04      	subs	r4, r0, #0
   446d0:	bf18      	it	ne
   446d2:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   446d4:	4643      	mov	r3, r8
   446d6:	462a      	mov	r2, r5
   446d8:	4631      	mov	r1, r6
   446da:	4638      	mov	r0, r7
   446dc:	f7ff fa89 	bl	43bf2 <uECC_vli_add>

	return carry;
}
   446e0:	4620      	mov	r0, r4
   446e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   446e6:	2401      	movs	r4, #1
   446e8:	e7f4      	b.n	446d4 <regularize_k+0x42>

000446ea <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   446ea:	b530      	push	{r4, r5, lr}
   446ec:	4614      	mov	r4, r2
   446ee:	b095      	sub	sp, #84	; 0x54
   446f0:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   446f2:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   446f4:	4623      	mov	r3, r4
{
   446f6:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   446f8:	a904      	add	r1, sp, #16
   446fa:	9102      	str	r1, [sp, #8]
   446fc:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   446fe:	f7ff ffc8 	bl	44692 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   44702:	fab0 f380 	clz	r3, r0
   44706:	095b      	lsrs	r3, r3, #5
   44708:	aa14      	add	r2, sp, #80	; 0x50
   4470a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   4470e:	8863      	ldrh	r3, [r4, #2]
   44710:	9401      	str	r4, [sp, #4]
   44712:	3301      	adds	r3, #1
   44714:	b21b      	sxth	r3, r3
   44716:	9300      	str	r3, [sp, #0]
   44718:	f852 2c48 	ldr.w	r2, [r2, #-72]
   4471c:	2300      	movs	r3, #0
   4471e:	f104 0144 	add.w	r1, r4, #68	; 0x44
   44722:	4628      	mov	r0, r5
   44724:	f7ff feed 	bl	44502 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   44728:	4621      	mov	r1, r4
   4472a:	4628      	mov	r0, r5
   4472c:	f7ff fe5e 	bl	443ec <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   44730:	fab0 f080 	clz	r0, r0
   44734:	0940      	lsrs	r0, r0, #5
   44736:	b015      	add	sp, #84	; 0x54
   44738:	bd30      	pop	{r4, r5, pc}

0004473a <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   4473a:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   4473c:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   4473e:	1e4f      	subs	r7, r1, #1
   44740:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   44742:	428c      	cmp	r4, r1
   44744:	f105 0501 	add.w	r5, r5, #1
   44748:	db00      	blt.n	4474c <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   4474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   4474c:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   4474e:	f023 0603 	bic.w	r6, r3, #3
   44752:	f003 0303 	and.w	r3, r3, #3
   44756:	5996      	ldr	r6, [r2, r6]
   44758:	00db      	lsls	r3, r3, #3
   4475a:	fa26 f303 	lsr.w	r3, r6, r3
   4475e:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   44760:	e7ee      	b.n	44740 <uECC_vli_nativeToBytes+0x6>

00044762 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   44762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44764:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   44766:	1cd1      	adds	r1, r2, #3
   44768:	bf48      	it	mi
   4476a:	1d91      	addmi	r1, r2, #6
   4476c:	f341 0187 	sbfx	r1, r1, #2, #8
{
   44770:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   44772:	f7ff fae9 	bl	43d48 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   44776:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   44778:	1e67      	subs	r7, r4, #1
   4477a:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   4477c:	42a2      	cmp	r2, r4
   4477e:	f105 0501 	add.w	r5, r5, #1
   44782:	db00      	blt.n	44786 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   44784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   44786:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   44788:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   4478c:	5cb2      	ldrb	r2, [r6, r2]
   4478e:	f003 0303 	and.w	r3, r3, #3
   44792:	00db      	lsls	r3, r3, #3
   44794:	409a      	lsls	r2, r3
		native[b / uECC_WORD_SIZE] |=
   44796:	5843      	ldr	r3, [r0, r1]
   44798:	4313      	orrs	r3, r2
   4479a:	5043      	str	r3, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   4479c:	e7ed      	b.n	4477a <uECC_vli_bytesToNative+0x18>

0004479e <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   4479e:	b5f0      	push	{r4, r5, r6, r7, lr}
   447a0:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   447a2:	f991 6000 	ldrsb.w	r6, [r1]
{
   447a6:	4605      	mov	r5, r0
   447a8:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   447aa:	f7ff fe1f 	bl	443ec <EccPoint_isZero>
   447ae:	bb28      	cbnz	r0, 447fc <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   447b0:	1d27      	adds	r7, r4, #4
   447b2:	4632      	mov	r2, r6
   447b4:	4629      	mov	r1, r5
   447b6:	4638      	mov	r0, r7
   447b8:	f7ff fb15 	bl	43de6 <uECC_vli_cmp_unsafe>
   447bc:	2801      	cmp	r0, #1
   447be:	d120      	bne.n	44802 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   447c0:	4632      	mov	r2, r6
   447c2:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   447c6:	4638      	mov	r0, r7
   447c8:	f7ff fb0d 	bl	43de6 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   447cc:	2801      	cmp	r0, #1
   447ce:	d118      	bne.n	44802 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   447d0:	4622      	mov	r2, r4
   447d2:	4668      	mov	r0, sp
   447d4:	f7ff fc1c 	bl	44010 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   447d8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   447dc:	4622      	mov	r2, r4
   447de:	4629      	mov	r1, r5
   447e0:	a808      	add	r0, sp, #32
   447e2:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   447e4:	4632      	mov	r2, r6
   447e6:	a908      	add	r1, sp, #32
   447e8:	4668      	mov	r0, sp
   447ea:	f7ff fb11 	bl	43e10 <uECC_vli_equal>
		return -3;
   447ee:	2800      	cmp	r0, #0
   447f0:	bf0c      	ite	eq
   447f2:	2000      	moveq	r0, #0
   447f4:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   447f8:	b011      	add	sp, #68	; 0x44
   447fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   447fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   44800:	e7fa      	b.n	447f8 <uECC_valid_point+0x5a>
		return -2;
   44802:	f06f 0001 	mvn.w	r0, #1
   44806:	e7f7      	b.n	447f8 <uECC_valid_point+0x5a>

00044808 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   44808:	b570      	push	{r4, r5, r6, lr}
   4480a:	460c      	mov	r4, r1
   4480c:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   4480e:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   44810:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   44814:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   44816:	4601      	mov	r1, r0
   44818:	4668      	mov	r0, sp
   4481a:	f7ff ffa2 	bl	44762 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   4481e:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   44822:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   44826:	18a9      	adds	r1, r5, r2
   44828:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   4482c:	f7ff ff99 	bl	44762 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   44830:	2210      	movs	r2, #16
   44832:	4631      	mov	r1, r6
   44834:	4668      	mov	r0, sp
   44836:	f7ff fad6 	bl	43de6 <uECC_vli_cmp_unsafe>
   4483a:	b128      	cbz	r0, 44848 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   4483c:	4621      	mov	r1, r4
   4483e:	4668      	mov	r0, sp
   44840:	f7ff ffad 	bl	4479e <uECC_valid_point>
}
   44844:	b010      	add	sp, #64	; 0x40
   44846:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   44848:	f06f 0003 	mvn.w	r0, #3
   4484c:	e7fa      	b.n	44844 <uECC_valid_public_key+0x3c>

0004484e <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   4484e:	78cb      	ldrb	r3, [r1, #3]
   44850:	7802      	ldrb	r2, [r0, #0]
   44852:	4053      	eors	r3, r2
   44854:	7003      	strb	r3, [r0, #0]
   44856:	884b      	ldrh	r3, [r1, #2]
   44858:	7842      	ldrb	r2, [r0, #1]
   4485a:	4053      	eors	r3, r2
   4485c:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   4485e:	680a      	ldr	r2, [r1, #0]
   44860:	7883      	ldrb	r3, [r0, #2]
   44862:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   44866:	7083      	strb	r3, [r0, #2]
   44868:	680a      	ldr	r2, [r1, #0]
   4486a:	78c3      	ldrb	r3, [r0, #3]
   4486c:	4053      	eors	r3, r2
   4486e:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   44870:	79cb      	ldrb	r3, [r1, #7]
   44872:	7902      	ldrb	r2, [r0, #4]
   44874:	4053      	eors	r3, r2
   44876:	7103      	strb	r3, [r0, #4]
   44878:	88cb      	ldrh	r3, [r1, #6]
   4487a:	7942      	ldrb	r2, [r0, #5]
   4487c:	4053      	eors	r3, r2
   4487e:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   44880:	684a      	ldr	r2, [r1, #4]
   44882:	7983      	ldrb	r3, [r0, #6]
   44884:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   44888:	7183      	strb	r3, [r0, #6]
   4488a:	684a      	ldr	r2, [r1, #4]
   4488c:	79c3      	ldrb	r3, [r0, #7]
   4488e:	4053      	eors	r3, r2
   44890:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   44892:	7acb      	ldrb	r3, [r1, #11]
   44894:	7a02      	ldrb	r2, [r0, #8]
   44896:	4053      	eors	r3, r2
   44898:	7203      	strb	r3, [r0, #8]
   4489a:	7a42      	ldrb	r2, [r0, #9]
   4489c:	894b      	ldrh	r3, [r1, #10]
   4489e:	4053      	eors	r3, r2
   448a0:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   448a2:	688a      	ldr	r2, [r1, #8]
   448a4:	7a83      	ldrb	r3, [r0, #10]
   448a6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   448aa:	7283      	strb	r3, [r0, #10]
   448ac:	688a      	ldr	r2, [r1, #8]
   448ae:	7ac3      	ldrb	r3, [r0, #11]
   448b0:	4053      	eors	r3, r2
   448b2:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   448b4:	7bcb      	ldrb	r3, [r1, #15]
   448b6:	7b02      	ldrb	r2, [r0, #12]
   448b8:	4053      	eors	r3, r2
   448ba:	7303      	strb	r3, [r0, #12]
   448bc:	89cb      	ldrh	r3, [r1, #14]
   448be:	7b42      	ldrb	r2, [r0, #13]
   448c0:	4053      	eors	r3, r2
   448c2:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   448c4:	68ca      	ldr	r2, [r1, #12]
   448c6:	7b83      	ldrb	r3, [r0, #14]
   448c8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   448cc:	7383      	strb	r3, [r0, #14]
   448ce:	68ca      	ldr	r2, [r1, #12]
   448d0:	7bc3      	ldrb	r3, [r0, #15]
   448d2:	4053      	eors	r3, r2
   448d4:	73c3      	strb	r3, [r0, #15]
}
   448d6:	4770      	bx	lr

000448d8 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   448d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   448da:	7802      	ldrb	r2, [r0, #0]
   448dc:	f88d 2000 	strb.w	r2, [sp]
   448e0:	7942      	ldrb	r2, [r0, #5]
   448e2:	f88d 2001 	strb.w	r2, [sp, #1]
   448e6:	7a82      	ldrb	r2, [r0, #10]
   448e8:	f88d 2002 	strb.w	r2, [sp, #2]
   448ec:	7bc2      	ldrb	r2, [r0, #15]
   448ee:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   448f2:	7902      	ldrb	r2, [r0, #4]
   448f4:	f88d 2004 	strb.w	r2, [sp, #4]
   448f8:	7a42      	ldrb	r2, [r0, #9]
   448fa:	f88d 2005 	strb.w	r2, [sp, #5]
   448fe:	7b82      	ldrb	r2, [r0, #14]
   44900:	f88d 2006 	strb.w	r2, [sp, #6]
   44904:	78c2      	ldrb	r2, [r0, #3]
   44906:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   4490a:	7a02      	ldrb	r2, [r0, #8]
   4490c:	f88d 2008 	strb.w	r2, [sp, #8]
   44910:	7b42      	ldrb	r2, [r0, #13]
   44912:	f88d 2009 	strb.w	r2, [sp, #9]
   44916:	7882      	ldrb	r2, [r0, #2]
   44918:	f88d 200a 	strb.w	r2, [sp, #10]
   4491c:	79c2      	ldrb	r2, [r0, #7]
   4491e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   44922:	7b02      	ldrb	r2, [r0, #12]
   44924:	f88d 200c 	strb.w	r2, [sp, #12]
   44928:	7842      	ldrb	r2, [r0, #1]
   4492a:	7ac3      	ldrb	r3, [r0, #11]
   4492c:	f88d 200d 	strb.w	r2, [sp, #13]
   44930:	7982      	ldrb	r2, [r0, #6]
   44932:	f88d 200e 	strb.w	r2, [sp, #14]
   44936:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   4493a:	2310      	movs	r3, #16
   4493c:	466a      	mov	r2, sp
   4493e:	4619      	mov	r1, r3
   44940:	f7ff f893 	bl	43a6a <_copy>
}
   44944:	b005      	add	sp, #20
   44946:	f85d fb04 	ldr.w	pc, [sp], #4

0004494a <mult_row_column>:
{
   4494a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4494c:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   4494e:	7808      	ldrb	r0, [r1, #0]
{
   44950:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   44952:	f7ff f899 	bl	43a88 <_double_byte>
   44956:	4605      	mov	r5, r0
   44958:	7860      	ldrb	r0, [r4, #1]
   4495a:	f7ff f895 	bl	43a88 <_double_byte>
   4495e:	78a2      	ldrb	r2, [r4, #2]
   44960:	7863      	ldrb	r3, [r4, #1]
   44962:	4053      	eors	r3, r2
   44964:	78e2      	ldrb	r2, [r4, #3]
   44966:	4053      	eors	r3, r2
   44968:	405d      	eors	r5, r3
   4496a:	4068      	eors	r0, r5
   4496c:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   4496e:	7860      	ldrb	r0, [r4, #1]
   44970:	7827      	ldrb	r7, [r4, #0]
   44972:	f7ff f889 	bl	43a88 <_double_byte>
   44976:	4605      	mov	r5, r0
   44978:	78a0      	ldrb	r0, [r4, #2]
   4497a:	f7ff f885 	bl	43a88 <_double_byte>
   4497e:	78a3      	ldrb	r3, [r4, #2]
   44980:	405f      	eors	r7, r3
   44982:	78e3      	ldrb	r3, [r4, #3]
   44984:	405f      	eors	r7, r3
   44986:	407d      	eors	r5, r7
   44988:	4068      	eors	r0, r5
   4498a:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   4498c:	7863      	ldrb	r3, [r4, #1]
   4498e:	7827      	ldrb	r7, [r4, #0]
   44990:	78a0      	ldrb	r0, [r4, #2]
   44992:	405f      	eors	r7, r3
   44994:	f7ff f878 	bl	43a88 <_double_byte>
   44998:	4605      	mov	r5, r0
   4499a:	78e0      	ldrb	r0, [r4, #3]
   4499c:	f7ff f874 	bl	43a88 <_double_byte>
   449a0:	78e3      	ldrb	r3, [r4, #3]
   449a2:	405f      	eors	r7, r3
   449a4:	407d      	eors	r5, r7
   449a6:	4068      	eors	r0, r5
   449a8:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   449aa:	7820      	ldrb	r0, [r4, #0]
   449ac:	f7ff f86c 	bl	43a88 <_double_byte>
   449b0:	7862      	ldrb	r2, [r4, #1]
   449b2:	7823      	ldrb	r3, [r4, #0]
   449b4:	4053      	eors	r3, r2
   449b6:	78a2      	ldrb	r2, [r4, #2]
   449b8:	4053      	eors	r3, r2
   449ba:	ea80 0503 	eor.w	r5, r0, r3
   449be:	78e0      	ldrb	r0, [r4, #3]
   449c0:	f7ff f862 	bl	43a88 <_double_byte>
   449c4:	b2ed      	uxtb	r5, r5
   449c6:	4045      	eors	r5, r0
   449c8:	70f5      	strb	r5, [r6, #3]
}
   449ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000449cc <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   449cc:	b570      	push	{r4, r5, r6, lr}
   449ce:	4614      	mov	r4, r2
   449d0:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   449d2:	4605      	mov	r5, r0
   449d4:	2800      	cmp	r0, #0
   449d6:	d049      	beq.n	44a6c <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   449d8:	2900      	cmp	r1, #0
   449da:	d049      	beq.n	44a70 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   449dc:	2a00      	cmp	r2, #0
   449de:	d049      	beq.n	44a74 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   449e0:	2310      	movs	r3, #16
   449e2:	460a      	mov	r2, r1
   449e4:	4668      	mov	r0, sp
   449e6:	4619      	mov	r1, r3
   449e8:	f7ff f83f 	bl	43a6a <_copy>
	add_round_key(state, s->words);
   449ec:	4621      	mov	r1, r4
   449ee:	4668      	mov	r0, sp
   449f0:	f7ff ff2d 	bl	4484e <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   449f4:	3410      	adds	r4, #16
   449f6:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   449fa:	4668      	mov	r0, sp
   449fc:	f7e5 faa6 	bl	29f4c <sub_bytes>
		shift_rows(state);
   44a00:	4668      	mov	r0, sp
   44a02:	f7ff ff69 	bl	448d8 <shift_rows>
	mult_row_column(t, s);
   44a06:	4669      	mov	r1, sp
   44a08:	a804      	add	r0, sp, #16
   44a0a:	f7ff ff9e 	bl	4494a <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   44a0e:	a901      	add	r1, sp, #4
   44a10:	a805      	add	r0, sp, #20
   44a12:	f7ff ff9a 	bl	4494a <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   44a16:	a902      	add	r1, sp, #8
   44a18:	a806      	add	r0, sp, #24
   44a1a:	f7ff ff96 	bl	4494a <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   44a1e:	a903      	add	r1, sp, #12
   44a20:	a807      	add	r0, sp, #28
   44a22:	f7ff ff92 	bl	4494a <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   44a26:	2310      	movs	r3, #16
   44a28:	4619      	mov	r1, r3
   44a2a:	eb0d 0203 	add.w	r2, sp, r3
   44a2e:	4668      	mov	r0, sp
   44a30:	f7ff f81b 	bl	43a6a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   44a34:	4621      	mov	r1, r4
   44a36:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   44a38:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   44a3a:	f7ff ff08 	bl	4484e <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   44a3e:	42a6      	cmp	r6, r4
   44a40:	d1db      	bne.n	449fa <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   44a42:	f7e5 fa83 	bl	29f4c <sub_bytes>
	shift_rows(state);
   44a46:	4668      	mov	r0, sp
   44a48:	f7ff ff46 	bl	448d8 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   44a4c:	4631      	mov	r1, r6
   44a4e:	4668      	mov	r0, sp
   44a50:	f7ff fefd 	bl	4484e <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   44a54:	2310      	movs	r3, #16
   44a56:	4619      	mov	r1, r3
   44a58:	466a      	mov	r2, sp
   44a5a:	4628      	mov	r0, r5
   44a5c:	f7ff f805 	bl	43a6a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   44a60:	4668      	mov	r0, sp
   44a62:	2210      	movs	r2, #16
   44a64:	2100      	movs	r1, #0
   44a66:	f7ff f80d 	bl	43a84 <_set>

	return TC_CRYPTO_SUCCESS;
   44a6a:	2001      	movs	r0, #1
}
   44a6c:	b008      	add	sp, #32
   44a6e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   44a70:	4608      	mov	r0, r1
   44a72:	e7fb      	b.n	44a6c <tc_aes_encrypt+0xa0>
   44a74:	4610      	mov	r0, r2
   44a76:	e7f9      	b.n	44a6c <tc_aes_encrypt+0xa0>

00044a78 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   44a78:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   44a7a:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   44a7c:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   44a7e:	f912 3b10 	ldrsb.w	r3, [r2], #16
   44a82:	2b00      	cmp	r3, #0
   44a84:	bfb4      	ite	lt
   44a86:	2387      	movlt	r3, #135	; 0x87
   44a88:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   44a8a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   44a8e:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   44a92:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   44a94:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   44a98:	d002      	beq.n	44aa0 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   44a9a:	7813      	ldrb	r3, [r2, #0]
   44a9c:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   44a9e:	e7f4      	b.n	44a8a <gf_double+0x12>
	}
}
   44aa0:	bd10      	pop	{r4, pc}

00044aa2 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   44aa2:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   44aa4:	b120      	cbz	r0, 44ab0 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   44aa6:	2258      	movs	r2, #88	; 0x58
   44aa8:	2100      	movs	r1, #0
   44aaa:	f7fe ffeb 	bl	43a84 <_set>
   44aae:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   44ab0:	bd08      	pop	{r3, pc}

00044ab2 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   44ab2:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   44ab4:	4604      	mov	r4, r0
   44ab6:	b188      	cbz	r0, 44adc <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   44ab8:	2210      	movs	r2, #16
   44aba:	2100      	movs	r1, #0
   44abc:	f7fe ffe2 	bl	43a84 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   44ac0:	2210      	movs	r2, #16
   44ac2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   44ac6:	2100      	movs	r1, #0
   44ac8:	f7fe ffdc 	bl	43a84 <_set>
	s->leftover_offset = 0;
   44acc:	2300      	movs	r3, #0
   44ace:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   44ad0:	2200      	movs	r2, #0
   44ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   44ad6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   44ada:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   44adc:	bd10      	pop	{r4, pc}

00044ade <tc_cmac_setup>:
{
   44ade:	b570      	push	{r4, r5, r6, lr}
   44ae0:	4604      	mov	r4, r0
   44ae2:	460d      	mov	r5, r1
   44ae4:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   44ae6:	b310      	cbz	r0, 44b2e <tc_cmac_setup+0x50>
   44ae8:	b311      	cbz	r1, 44b30 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   44aea:	2258      	movs	r2, #88	; 0x58
   44aec:	2100      	movs	r1, #0
   44aee:	f7fe ffc9 	bl	43a84 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   44af2:	4629      	mov	r1, r5
	s->sched = sched;
   44af4:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   44af6:	4630      	mov	r0, r6
   44af8:	f7e5 fa34 	bl	29f64 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   44afc:	2210      	movs	r2, #16
   44afe:	2100      	movs	r1, #0
   44b00:	4620      	mov	r0, r4
   44b02:	f7fe ffbf 	bl	43a84 <_set>
	gf_double (s->K1, s->iv);
   44b06:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   44b0a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   44b0c:	4621      	mov	r1, r4
   44b0e:	4620      	mov	r0, r4
   44b10:	f7ff ff5c 	bl	449cc <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   44b14:	4621      	mov	r1, r4
   44b16:	4628      	mov	r0, r5
   44b18:	f7ff ffae 	bl	44a78 <gf_double>
	gf_double (s->K2, s->K1);
   44b1c:	4629      	mov	r1, r5
   44b1e:	f104 0020 	add.w	r0, r4, #32
   44b22:	f7ff ffa9 	bl	44a78 <gf_double>
	tc_cmac_init(s);
   44b26:	4620      	mov	r0, r4
   44b28:	f7ff ffc3 	bl	44ab2 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   44b2c:	2001      	movs	r0, #1
}
   44b2e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   44b30:	4608      	mov	r0, r1
   44b32:	e7fc      	b.n	44b2e <tc_cmac_setup+0x50>

00044b34 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   44b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44b38:	460d      	mov	r5, r1
   44b3a:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   44b3c:	4604      	mov	r4, r0
   44b3e:	2800      	cmp	r0, #0
   44b40:	d061      	beq.n	44c06 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   44b42:	b912      	cbnz	r2, 44b4a <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   44b44:	2001      	movs	r0, #1
}
   44b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   44b4a:	2900      	cmp	r1, #0
   44b4c:	d05b      	beq.n	44c06 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   44b4e:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   44b52:	ea53 0102 	orrs.w	r1, r3, r2
   44b56:	d056      	beq.n	44c06 <tc_cmac_update+0xd2>
	s->countdown--;
   44b58:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   44b5a:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   44b5e:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   44b62:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   44b66:	f1b8 0f00 	cmp.w	r8, #0
   44b6a:	d02a      	beq.n	44bc2 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   44b6c:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   44b70:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   44b74:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   44b76:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   44b78:	d208      	bcs.n	44b8c <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   44b7a:	4633      	mov	r3, r6
   44b7c:	462a      	mov	r2, r5
   44b7e:	4631      	mov	r1, r6
   44b80:	f7fe ff73 	bl	43a6a <_copy>
			s->leftover_offset += data_length;
   44b84:	6c63      	ldr	r3, [r4, #68]	; 0x44
   44b86:	4433      	add	r3, r6
   44b88:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   44b8a:	e7db      	b.n	44b44 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   44b8c:	463b      	mov	r3, r7
   44b8e:	462a      	mov	r2, r5
   44b90:	4639      	mov	r1, r7
   44b92:	f7fe ff6a 	bl	43a6a <_copy>
		data_length -= remaining_space;
   44b96:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   44b98:	2300      	movs	r3, #0
   44b9a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   44b9c:	4446      	add	r6, r8
		data += remaining_space;
   44b9e:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44ba0:	1e63      	subs	r3, r4, #1
   44ba2:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   44ba6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   44baa:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44bae:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   44bb0:	ea82 0200 	eor.w	r2, r2, r0
   44bb4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44bb6:	d1f6      	bne.n	44ba6 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   44bb8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   44bba:	4621      	mov	r1, r4
   44bbc:	4620      	mov	r0, r4
   44bbe:	f7ff ff05 	bl	449cc <tc_aes_encrypt>
   44bc2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   44bc6:	2e10      	cmp	r6, #16
   44bc8:	d80a      	bhi.n	44be0 <tc_cmac_update+0xac>
	if (data_length > 0) {
   44bca:	2e00      	cmp	r6, #0
   44bcc:	d0ba      	beq.n	44b44 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   44bce:	4633      	mov	r3, r6
   44bd0:	462a      	mov	r2, r5
   44bd2:	4631      	mov	r1, r6
   44bd4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   44bd8:	f7fe ff47 	bl	43a6a <_copy>
		s->leftover_offset = data_length;
   44bdc:	6466      	str	r6, [r4, #68]	; 0x44
   44bde:	e7b1      	b.n	44b44 <tc_cmac_update+0x10>
   44be0:	1e63      	subs	r3, r4, #1
   44be2:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   44be4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   44be8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44bec:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   44bee:	ea82 0200 	eor.w	r2, r2, r0
   44bf2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44bf4:	d1f6      	bne.n	44be4 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   44bf6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   44bf8:	4621      	mov	r1, r4
   44bfa:	4620      	mov	r0, r4
   44bfc:	f7ff fee6 	bl	449cc <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   44c00:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   44c02:	3e10      	subs	r6, #16
   44c04:	e7df      	b.n	44bc6 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   44c06:	2000      	movs	r0, #0
   44c08:	e79d      	b.n	44b46 <tc_cmac_update+0x12>

00044c0a <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   44c0a:	b570      	push	{r4, r5, r6, lr}
   44c0c:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   44c0e:	4605      	mov	r5, r0
   44c10:	b1e8      	cbz	r0, 44c4e <tc_cmac_final+0x44>
   44c12:	b369      	cbz	r1, 44c70 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   44c14:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   44c16:	2a10      	cmp	r2, #16
   44c18:	d11a      	bne.n	44c50 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   44c1a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44c1c:	1e63      	subs	r3, r4, #1
   44c1e:	3901      	subs	r1, #1
   44c20:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   44c24:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   44c28:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   44c2c:	4072      	eors	r2, r6
   44c2e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44c32:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   44c34:	ea82 0206 	eor.w	r2, r2, r6
   44c38:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   44c3a:	d1f3      	bne.n	44c24 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   44c3c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   44c3e:	4621      	mov	r1, r4
   44c40:	4628      	mov	r0, r5
   44c42:	f7ff fec3 	bl	449cc <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   44c46:	4620      	mov	r0, r4
   44c48:	f7ff ff2b 	bl	44aa2 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   44c4c:	2001      	movs	r0, #1
}
   44c4e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   44c50:	f102 0030 	add.w	r0, r2, #48	; 0x30
   44c54:	2100      	movs	r1, #0
   44c56:	f1c2 0210 	rsb	r2, r2, #16
   44c5a:	4420      	add	r0, r4
   44c5c:	f7fe ff12 	bl	43a84 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   44c60:	6c63      	ldr	r3, [r4, #68]	; 0x44
   44c62:	4423      	add	r3, r4
   44c64:	2280      	movs	r2, #128	; 0x80
   44c66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   44c6a:	f104 0120 	add.w	r1, r4, #32
   44c6e:	e7d5      	b.n	44c1c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   44c70:	4608      	mov	r0, r1
   44c72:	e7ec      	b.n	44c4e <tc_cmac_final+0x44>

00044c74 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   44c74:	f003 bd9b 	b.w	487ae <z_fatal_error>

00044c78 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   44c78:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   44c7a:	6800      	ldr	r0, [r0, #0]
   44c7c:	f003 bd97 	b.w	487ae <z_fatal_error>

00044c80 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   44c80:	2100      	movs	r1, #0
   44c82:	2001      	movs	r0, #1
   44c84:	f7ff bff6 	b.w	44c74 <z_arm_fatal_error>

00044c88 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   44c88:	b508      	push	{r3, lr}
	handler();
   44c8a:	f7e5 fa31 	bl	2a0f0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   44c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   44c92:	f7e5 baf1 	b.w	2a278 <z_arm_exc_exit>

00044c96 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   44c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44c9a:	4607      	mov	r7, r0
   44c9c:	4688      	mov	r8, r1
	register const char *s = nptr;
   44c9e:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   44ca0:	4621      	mov	r1, r4
   44ca2:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
}

static inline int isspace(int c)
{
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   44ca6:	2b20      	cmp	r3, #32
   44ca8:	d0fa      	beq.n	44ca0 <strtoul+0xa>
   44caa:	f1a3 0009 	sub.w	r0, r3, #9
   44cae:	2804      	cmp	r0, #4
   44cb0:	d9f6      	bls.n	44ca0 <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   44cb2:	2b2d      	cmp	r3, #45	; 0x2d
   44cb4:	d12f      	bne.n	44d16 <strtoul+0x80>
		neg = 1;
		c = *s++;
   44cb6:	784b      	ldrb	r3, [r1, #1]
   44cb8:	1c8c      	adds	r4, r1, #2
		neg = 1;
   44cba:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   44cbe:	2a00      	cmp	r2, #0
   44cc0:	d05d      	beq.n	44d7e <strtoul+0xe8>
   44cc2:	2a10      	cmp	r2, #16
   44cc4:	d109      	bne.n	44cda <strtoul+0x44>
   44cc6:	2b30      	cmp	r3, #48	; 0x30
   44cc8:	d107      	bne.n	44cda <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   44cca:	7823      	ldrb	r3, [r4, #0]
   44ccc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   44cd0:	2b58      	cmp	r3, #88	; 0x58
   44cd2:	d14f      	bne.n	44d74 <strtoul+0xde>
		c = s[1];
   44cd4:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   44cd6:	2210      	movs	r2, #16
		s += 2;
   44cd8:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   44cda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   44cde:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   44ce0:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   44ce4:	fb02 fe01 	mul.w	lr, r2, r1
   44ce8:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   44cec:	4628      	mov	r0, r5
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   44cee:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit(c)) {
   44cf2:	2e09      	cmp	r6, #9
   44cf4:	d816      	bhi.n	44d24 <strtoul+0x8e>
			c -= '0';
   44cf6:	4633      	mov	r3, r6
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   44cf8:	429a      	cmp	r2, r3
   44cfa:	dd23      	ble.n	44d44 <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   44cfc:	1c6e      	adds	r6, r5, #1
   44cfe:	d007      	beq.n	44d10 <strtoul+0x7a>
   44d00:	4288      	cmp	r0, r1
   44d02:	d81c      	bhi.n	44d3e <strtoul+0xa8>
   44d04:	d101      	bne.n	44d0a <strtoul+0x74>
   44d06:	4573      	cmp	r3, lr
   44d08:	dc19      	bgt.n	44d3e <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   44d0a:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   44d0e:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   44d10:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   44d14:	e7eb      	b.n	44cee <strtoul+0x58>
	} else if (c == '+') {
   44d16:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   44d18:	bf04      	itt	eq
   44d1a:	784b      	ldrbeq	r3, [r1, #1]
   44d1c:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   44d1e:	f04f 0c00 	mov.w	ip, #0
   44d22:	e7cc      	b.n	44cbe <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   44d24:	f043 0620 	orr.w	r6, r3, #32
   44d28:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha(c)) {
   44d2a:	2e19      	cmp	r6, #25
   44d2c:	d80a      	bhi.n	44d44 <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   44d2e:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   44d32:	2e1a      	cmp	r6, #26
   44d34:	bf34      	ite	cc
   44d36:	2637      	movcc	r6, #55	; 0x37
   44d38:	2657      	movcs	r6, #87	; 0x57
   44d3a:	1b9b      	subs	r3, r3, r6
   44d3c:	e7dc      	b.n	44cf8 <strtoul+0x62>
			any = -1;
   44d3e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   44d42:	e7e5      	b.n	44d10 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   44d44:	1c6b      	adds	r3, r5, #1
   44d46:	d109      	bne.n	44d5c <strtoul+0xc6>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   44d48:	f7fc f8b4 	bl	40eb4 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   44d4c:	2322      	movs	r3, #34	; 0x22
   44d4e:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   44d50:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   44d52:	f1b8 0f00 	cmp.w	r8, #0
   44d56:	d109      	bne.n	44d6c <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   44d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   44d5c:	f1bc 0f00 	cmp.w	ip, #0
   44d60:	d000      	beq.n	44d64 <strtoul+0xce>
		acc = -acc;
   44d62:	4240      	negs	r0, r0
	if (endptr != NULL) {
   44d64:	f1b8 0f00 	cmp.w	r8, #0
   44d68:	d0f6      	beq.n	44d58 <strtoul+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   44d6a:	b105      	cbz	r5, 44d6e <strtoul+0xd8>
   44d6c:	1e67      	subs	r7, r4, #1
   44d6e:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   44d72:	e7f1      	b.n	44d58 <strtoul+0xc2>
	if (base == 0) {
   44d74:	2330      	movs	r3, #48	; 0x30
   44d76:	2a00      	cmp	r2, #0
   44d78:	d1af      	bne.n	44cda <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   44d7a:	2208      	movs	r2, #8
   44d7c:	e7ad      	b.n	44cda <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   44d7e:	2b30      	cmp	r3, #48	; 0x30
   44d80:	d0a3      	beq.n	44cca <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   44d82:	220a      	movs	r2, #10
   44d84:	e7a9      	b.n	44cda <strtoul+0x44>

00044d86 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   44d86:	3901      	subs	r1, #1
   44d88:	4603      	mov	r3, r0
   44d8a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   44d8e:	b90a      	cbnz	r2, 44d94 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   44d90:	701a      	strb	r2, [r3, #0]

	return dest;
}
   44d92:	4770      	bx	lr
		*d = *s;
   44d94:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   44d98:	e7f7      	b.n	44d8a <strcpy+0x4>

00044d9a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   44d9a:	4603      	mov	r3, r0
	size_t n = 0;
   44d9c:	2000      	movs	r0, #0

	while (*s != '\0') {
   44d9e:	5c1a      	ldrb	r2, [r3, r0]
   44da0:	b902      	cbnz	r2, 44da4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   44da2:	4770      	bx	lr
		n++;
   44da4:	3001      	adds	r0, #1
   44da6:	e7fa      	b.n	44d9e <strlen+0x4>

00044da8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   44da8:	1e43      	subs	r3, r0, #1
   44daa:	3901      	subs	r1, #1
   44dac:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   44db0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   44db4:	4282      	cmp	r2, r0
   44db6:	d101      	bne.n	44dbc <strcmp+0x14>
   44db8:	2a00      	cmp	r2, #0
   44dba:	d1f7      	bne.n	44dac <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   44dbc:	1a10      	subs	r0, r2, r0
   44dbe:	4770      	bx	lr

00044dc0 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   44dc0:	b510      	push	{r4, lr}
   44dc2:	3901      	subs	r1, #1
   44dc4:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   44dc6:	4282      	cmp	r2, r0
   44dc8:	d009      	beq.n	44dde <strncmp+0x1e>
   44dca:	7803      	ldrb	r3, [r0, #0]
   44dcc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   44dd0:	42a3      	cmp	r3, r4
   44dd2:	d100      	bne.n	44dd6 <strncmp+0x16>
   44dd4:	b90b      	cbnz	r3, 44dda <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   44dd6:	1b18      	subs	r0, r3, r4
   44dd8:	e002      	b.n	44de0 <strncmp+0x20>
		s1++;
   44dda:	3001      	adds	r0, #1
		n--;
   44ddc:	e7f3      	b.n	44dc6 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   44dde:	2000      	movs	r0, #0
}
   44de0:	bd10      	pop	{r4, pc}

00044de2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   44de2:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   44de4:	b15a      	cbz	r2, 44dfe <memcmp+0x1c>
   44de6:	3901      	subs	r1, #1
   44de8:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   44dea:	f810 2b01 	ldrb.w	r2, [r0], #1
   44dee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   44df2:	42a0      	cmp	r0, r4
   44df4:	d001      	beq.n	44dfa <memcmp+0x18>
   44df6:	429a      	cmp	r2, r3
   44df8:	d0f7      	beq.n	44dea <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   44dfa:	1ad0      	subs	r0, r2, r3
}
   44dfc:	bd10      	pop	{r4, pc}
		return 0;
   44dfe:	4610      	mov	r0, r2
   44e00:	e7fc      	b.n	44dfc <memcmp+0x1a>

00044e02 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   44e02:	b510      	push	{r4, lr}
   44e04:	1e43      	subs	r3, r0, #1
   44e06:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   44e08:	4291      	cmp	r1, r2
   44e0a:	d100      	bne.n	44e0e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   44e0c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   44e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   44e12:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   44e16:	e7f7      	b.n	44e08 <memcpy+0x6>

00044e18 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   44e18:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   44e1a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   44e1c:	4603      	mov	r3, r0
	while (n > 0) {
   44e1e:	4293      	cmp	r3, r2
   44e20:	d100      	bne.n	44e24 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   44e22:	4770      	bx	lr
		*(d_byte++) = c_byte;
   44e24:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   44e28:	e7f9      	b.n	44e1e <memset+0x6>

00044e2a <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   44e2a:	684b      	ldr	r3, [r1, #4]
   44e2c:	2b01      	cmp	r3, #1
   44e2e:	dd07      	ble.n	44e40 <sprintf_out+0x16>
		*(p->ptr) = c;
   44e30:	680b      	ldr	r3, [r1, #0]
   44e32:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   44e34:	680b      	ldr	r3, [r1, #0]
   44e36:	3301      	adds	r3, #1
   44e38:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   44e3a:	684b      	ldr	r3, [r1, #4]
   44e3c:	3b01      	subs	r3, #1
   44e3e:	604b      	str	r3, [r1, #4]
}
   44e40:	2000      	movs	r0, #0
   44e42:	4770      	bx	lr

00044e44 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   44e44:	b084      	sub	sp, #16
   44e46:	ab04      	add	r3, sp, #16
   44e48:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   44e4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   44e50:	2b06      	cmp	r3, #6
   44e52:	d108      	bne.n	44e66 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   44e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44e58:	2201      	movs	r2, #1
   44e5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   44e5e:	f3bf 8f4f 	dsb	sy
        __WFE();
   44e62:	bf20      	wfe
    while (true)
   44e64:	e7fd      	b.n	44e62 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   44e66:	b004      	add	sp, #16
   44e68:	4770      	bx	lr

00044e6a <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   44e6a:	b084      	sub	sp, #16
   44e6c:	ab04      	add	r3, sp, #16
   44e6e:	e903 0007 	stmdb	r3, {r0, r1, r2}
   44e72:	2300      	movs	r3, #0
   44e74:	f383 8811 	msr	BASEPRI, r3
   44e78:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   44e7c:	b004      	add	sp, #16
   44e7e:	4770      	bx	lr

00044e80 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   44e80:	b530      	push	{r4, r5, lr}
   44e82:	b085      	sub	sp, #20
   44e84:	4604      	mov	r4, r0
   44e86:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   44e88:	4668      	mov	r0, sp
   44e8a:	2203      	movs	r2, #3
   44e8c:	f7ff ffb9 	bl	44e02 <memcpy>
	(void)memset(res + 3, 0, 13);
   44e90:	220d      	movs	r2, #13
   44e92:	2100      	movs	r1, #0
   44e94:	f10d 0003 	add.w	r0, sp, #3
   44e98:	f7ff ffbe 	bl	44e18 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   44e9c:	4620      	mov	r0, r4
   44e9e:	466a      	mov	r2, sp
   44ea0:	4669      	mov	r1, sp
   44ea2:	f7ed fb37 	bl	32514 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   44ea6:	4604      	mov	r4, r0
   44ea8:	b920      	cbnz	r0, 44eb4 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   44eaa:	2203      	movs	r2, #3
   44eac:	4669      	mov	r1, sp
   44eae:	4628      	mov	r0, r5
   44eb0:	f7ff ffa7 	bl	44e02 <memcpy>

	return 0;
}
   44eb4:	4620      	mov	r0, r4
   44eb6:	b005      	add	sp, #20
   44eb8:	bd30      	pop	{r4, r5, pc}

00044eba <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   44eba:	b513      	push	{r0, r1, r4, lr}
   44ebc:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   44ebe:	aa01      	add	r2, sp, #4
   44ec0:	3103      	adds	r1, #3
   44ec2:	f7ff ffdd 	bl	44e80 <ah>
	if (err) {
   44ec6:	b948      	cbnz	r0, 44edc <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   44ec8:	2203      	movs	r2, #3
   44eca:	a901      	add	r1, sp, #4
   44ecc:	4620      	mov	r0, r4
   44ece:	f7ff ff88 	bl	44de2 <memcmp>
   44ed2:	fab0 f080 	clz	r0, r0
   44ed6:	0940      	lsrs	r0, r0, #5
}
   44ed8:	b002      	add	sp, #8
   44eda:	bd10      	pop	{r4, pc}
		return false;
   44edc:	2000      	movs	r0, #0
   44ede:	e7fb      	b.n	44ed8 <bt_rpa_irk_matches+0x1e>

00044ee0 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   44ee0:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   44ee2:	1cce      	adds	r6, r1, #3
{
   44ee4:	4605      	mov	r5, r0
   44ee6:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   44ee8:	4630      	mov	r0, r6
   44eea:	2103      	movs	r1, #3
   44eec:	f7ed fb10 	bl	32510 <bt_rand>
	if (err) {
   44ef0:	b960      	cbnz	r0, 44f0c <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   44ef2:	7963      	ldrb	r3, [r4, #5]
   44ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   44ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   44efc:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   44efe:	4622      	mov	r2, r4
   44f00:	4631      	mov	r1, r6
   44f02:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   44f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   44f08:	f7ff bfba 	b.w	44e80 <ah>
}
   44f0c:	bd70      	pop	{r4, r5, r6, pc}

00044f0e <send_cmd_status>:
{
   44f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   44f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   44f16:	4606      	mov	r6, r0
   44f18:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   44f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44f1e:	2100      	movs	r1, #0
   44f20:	200f      	movs	r0, #15
   44f22:	f7e5 fe71 	bl	2ac08 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   44f26:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   44f28:	f100 0808 	add.w	r8, r0, #8
   44f2c:	4604      	mov	r4, r0
   44f2e:	7507      	strb	r7, [r0, #20]
   44f30:	2102      	movs	r1, #2
   44f32:	4640      	mov	r0, r8
   44f34:	f002 feaf 	bl	47c96 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   44f38:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   44f3a:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   44f3c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   44f3e:	7041      	strb	r1, [r0, #1]
   44f40:	4640      	mov	r0, r8
   44f42:	f002 fea8 	bl	47c96 <net_buf_simple_add>
	evt->ncmd = 1U;
   44f46:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   44f48:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   44f4a:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   44f4c:	4620      	mov	r0, r4
}
   44f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   44f52:	f7e6 bafb 	b.w	2b54c <bt_recv_prio>

00044f56 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   44f56:	f101 0320 	add.w	r3, r1, #32
   44f5a:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   44f5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   44f60:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   44f64:	428b      	cmp	r3, r1
   44f66:	d1f9      	bne.n	44f5c <sys_memcpy_swap.constprop.0+0x6>
}
   44f68:	4770      	bx	lr

00044f6a <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   44f6a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   44f6e:	f043 0306 	orr.w	r3, r3, #6
   44f72:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   44f76:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   44f7a:	f043 0304 	orr.w	r3, r3, #4
   44f7e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   44f82:	4770      	bx	lr

00044f84 <default_CSPRNG>:
{
   44f84:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   44f86:	f7ed fac3 	bl	32510 <bt_rand>
}
   44f8a:	fab0 f080 	clz	r0, r0
   44f8e:	0940      	lsrs	r0, r0, #5
   44f90:	bd08      	pop	{r3, pc}

00044f92 <bt_settings_decode_key>:
{
   44f92:	b570      	push	{r4, r5, r6, lr}
   44f94:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   44f96:	2100      	movs	r1, #0
{
   44f98:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   44f9a:	f7fe fc66 	bl	4386a <settings_name_next>
   44f9e:	280d      	cmp	r0, #13
   44fa0:	d118      	bne.n	44fd4 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   44fa2:	7b23      	ldrb	r3, [r4, #12]
   44fa4:	2b30      	cmp	r3, #48	; 0x30
   44fa6:	d113      	bne.n	44fd0 <bt_settings_decode_key+0x3e>
   44fa8:	2300      	movs	r3, #0
		addr->type = BT_ADDR_LE_PUBLIC;
   44faa:	f805 3b06 	strb.w	r3, [r5], #6
   44fae:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   44fb2:	462a      	mov	r2, r5
   44fb4:	4620      	mov	r0, r4
   44fb6:	2301      	movs	r3, #1
   44fb8:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   44fba:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   44fbc:	f7fd fdcc 	bl	42b58 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   44fc0:	42b4      	cmp	r4, r6
   44fc2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   44fc6:	d1f4      	bne.n	44fb2 <bt_settings_decode_key+0x20>
	return 0;
   44fc8:	2000      	movs	r0, #0
}
   44fca:	bd70      	pop	{r4, r5, r6, pc}
   44fcc:	2301      	movs	r3, #1
   44fce:	e7ec      	b.n	44faa <bt_settings_decode_key+0x18>
	} else if (key[12] == '1') {
   44fd0:	2b31      	cmp	r3, #49	; 0x31
   44fd2:	d0fb      	beq.n	44fcc <bt_settings_decode_key+0x3a>
		return -EINVAL;
   44fd4:	f06f 0015 	mvn.w	r0, #21
   44fd8:	e7f7      	b.n	44fca <bt_settings_decode_key+0x38>

00044fda <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   44fda:	f7e4 bcd5 	b.w	29988 <settings_subsys_init>

00044fde <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   44fde:	b510      	push	{r4, lr}
   44fe0:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   44fe2:	7801      	ldrb	r1, [r0, #0]
   44fe4:	7822      	ldrb	r2, [r4, #0]
   44fe6:	428a      	cmp	r2, r1
{
   44fe8:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   44fea:	d00f      	beq.n	4500c <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   44fec:	4669      	mov	r1, sp
   44fee:	f7e5 fdab 	bl	2ab48 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   44ff2:	a905      	add	r1, sp, #20
   44ff4:	4620      	mov	r0, r4
   44ff6:	f7e5 fda7 	bl	2ab48 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   44ffa:	2210      	movs	r2, #16
   44ffc:	f10d 0115 	add.w	r1, sp, #21
   45000:	f10d 0001 	add.w	r0, sp, #1
   45004:	f7ff feed 	bl	44de2 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   45008:	b00a      	add	sp, #40	; 0x28
   4500a:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   4500c:	2a01      	cmp	r2, #1
   4500e:	d006      	beq.n	4501e <bt_uuid_cmp+0x40>
   45010:	2a02      	cmp	r2, #2
   45012:	d007      	beq.n	45024 <bt_uuid_cmp+0x46>
   45014:	b972      	cbnz	r2, 45034 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   45016:	8840      	ldrh	r0, [r0, #2]
   45018:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   4501a:	1ac0      	subs	r0, r0, r3
   4501c:	e7f4      	b.n	45008 <bt_uuid_cmp+0x2a>
   4501e:	6840      	ldr	r0, [r0, #4]
   45020:	6863      	ldr	r3, [r4, #4]
   45022:	e7fa      	b.n	4501a <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   45024:	2210      	movs	r2, #16
   45026:	1c61      	adds	r1, r4, #1
   45028:	3001      	adds	r0, #1
}
   4502a:	b00a      	add	sp, #40	; 0x28
   4502c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   45030:	f7ff bed7 	b.w	44de2 <memcmp>
	switch (u1->type) {
   45034:	f06f 0015 	mvn.w	r0, #21
   45038:	e7e6      	b.n	45008 <bt_uuid_cmp+0x2a>

0004503a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   4503a:	2a04      	cmp	r2, #4
{
   4503c:	b510      	push	{r4, lr}
	switch (data_len) {
   4503e:	d00a      	beq.n	45056 <bt_uuid_create+0x1c>
   45040:	2a10      	cmp	r2, #16
   45042:	d00d      	beq.n	45060 <bt_uuid_create+0x26>
   45044:	2a02      	cmp	r2, #2
   45046:	f04f 0300 	mov.w	r3, #0
   4504a:	d10f      	bne.n	4506c <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   4504c:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   4504e:	880b      	ldrh	r3, [r1, #0]
   45050:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   45052:	2001      	movs	r0, #1
}
   45054:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   45056:	2301      	movs	r3, #1
   45058:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   4505a:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   4505c:	6042      	str	r2, [r0, #4]
		break;
   4505e:	e7f8      	b.n	45052 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   45060:	2302      	movs	r3, #2
   45062:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   45066:	f7ff fecc 	bl	44e02 <memcpy>
		break;
   4506a:	e7f2      	b.n	45052 <bt_uuid_create+0x18>
	switch (data_len) {
   4506c:	4618      	mov	r0, r3
   4506e:	e7f1      	b.n	45054 <bt_uuid_create+0x1a>

00045070 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   45070:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   45072:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   45074:	2106      	movs	r1, #6
{
   45076:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   45078:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   4507c:	f7ed fa48 	bl	32510 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   45080:	b918      	cbnz	r0, 4508a <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   45082:	79a3      	ldrb	r3, [r4, #6]
   45084:	f063 033f 	orn	r3, r3, #63	; 0x3f
   45088:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   4508a:	bd10      	pop	{r4, pc}

0004508c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   4508c:	280f      	cmp	r0, #15
   4508e:	d806      	bhi.n	4509e <bt_hci_evt_get_flags+0x12>
   45090:	280d      	cmp	r0, #13
   45092:	d80b      	bhi.n	450ac <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   45094:	2805      	cmp	r0, #5
   45096:	bf14      	ite	ne
   45098:	2002      	movne	r0, #2
   4509a:	2003      	moveq	r0, #3
   4509c:	4770      	bx	lr
	switch (evt) {
   4509e:	2813      	cmp	r0, #19
   450a0:	d004      	beq.n	450ac <bt_hci_evt_get_flags+0x20>
   450a2:	281a      	cmp	r0, #26
   450a4:	bf14      	ite	ne
   450a6:	2002      	movne	r0, #2
   450a8:	2001      	moveq	r0, #1
   450aa:	4770      	bx	lr
   450ac:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   450ae:	4770      	bx	lr

000450b0 <handle_event>:
{
   450b0:	b410      	push	{r4}
   450b2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   450b6:	4604      	mov	r4, r0
   450b8:	4608      	mov	r0, r1
		if (handler->event != event) {
   450ba:	7811      	ldrb	r1, [r2, #0]
   450bc:	42a1      	cmp	r1, r4
   450be:	d004      	beq.n	450ca <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   450c0:	3208      	adds	r2, #8
   450c2:	429a      	cmp	r2, r3
   450c4:	d1f9      	bne.n	450ba <handle_event+0xa>
}
   450c6:	bc10      	pop	{r4}
   450c8:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   450ca:	8981      	ldrh	r1, [r0, #12]
   450cc:	7853      	ldrb	r3, [r2, #1]
   450ce:	4299      	cmp	r1, r3
   450d0:	d3f9      	bcc.n	450c6 <handle_event+0x16>
		handler->handler(buf);
   450d2:	6853      	ldr	r3, [r2, #4]
}
   450d4:	bc10      	pop	{r4}
		handler->handler(buf);
   450d6:	4718      	bx	r3

000450d8 <hci_data_buf_overflow>:
}
   450d8:	4770      	bx	lr

000450da <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   450da:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   450de:	b183      	cbz	r3, 45102 <update_sec_level+0x28>
   450e0:	7b5a      	ldrb	r2, [r3, #13]
   450e2:	07d1      	lsls	r1, r2, #31
   450e4:	d50d      	bpl.n	45102 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   450e6:	06d2      	lsls	r2, r2, #27
   450e8:	d50d      	bpl.n	45106 <update_sec_level+0x2c>
   450ea:	7b1b      	ldrb	r3, [r3, #12]
   450ec:	2b10      	cmp	r3, #16
   450ee:	bf14      	ite	ne
   450f0:	2303      	movne	r3, #3
   450f2:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   450f4:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   450f6:	7a80      	ldrb	r0, [r0, #10]
}
   450f8:	4298      	cmp	r0, r3
   450fa:	bf8c      	ite	hi
   450fc:	2000      	movhi	r0, #0
   450fe:	2001      	movls	r0, #1
   45100:	4770      	bx	lr
   45102:	2302      	movs	r3, #2
   45104:	e7f6      	b.n	450f4 <update_sec_level+0x1a>
   45106:	2303      	movs	r3, #3
   45108:	e7f4      	b.n	450f4 <update_sec_level+0x1a>

0004510a <atomic_or>:
{
   4510a:	b510      	push	{r4, lr}
   4510c:	4603      	mov	r3, r0
}
   4510e:	f3bf 8f5b 	dmb	ish
   45112:	e853 0f00 	ldrex	r0, [r3]
   45116:	ea40 0201 	orr.w	r2, r0, r1
   4511a:	e843 2400 	strex	r4, r2, [r3]
   4511e:	2c00      	cmp	r4, #0
   45120:	d1f7      	bne.n	45112 <atomic_or+0x8>
   45122:	f3bf 8f5b 	dmb	ish
   45126:	bd10      	pop	{r4, pc}

00045128 <hci_disconn_complete>:
{
   45128:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   4512a:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   4512c:	782e      	ldrb	r6, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   4512e:	f8b5 0001 	ldrh.w	r0, [r5, #1]
	if (evt->status) {
   45132:	b96e      	cbnz	r6, 45150 <hci_disconn_complete+0x28>
	conn = bt_conn_lookup_handle(handle);
   45134:	f7e7 fa8c 	bl	2c650 <bt_conn_lookup_handle>
	if (!conn) {
   45138:	4604      	mov	r4, r0
   4513a:	b148      	cbz	r0, 45150 <hci_disconn_complete+0x28>
	conn->err = evt->reason;
   4513c:	78eb      	ldrb	r3, [r5, #3]
   4513e:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   45140:	4631      	mov	r1, r6
   45142:	f7e7 fa8d 	bl	2c660 <bt_conn_set_state>
		bt_conn_unref(conn);
   45146:	4620      	mov	r0, r4
}
   45148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4514c:	f000 be04 	b.w	45d58 <bt_conn_unref>
}
   45150:	bd70      	pop	{r4, r5, r6, pc}

00045152 <le_data_len_change>:
{
   45152:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   45154:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   45156:	8818      	ldrh	r0, [r3, #0]
   45158:	f7e7 fa7a 	bl	2c650 <bt_conn_lookup_handle>
	if (!conn) {
   4515c:	b118      	cbz	r0, 45166 <le_data_len_change+0x14>
}
   4515e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   45162:	f000 bdf9 	b.w	45d58 <bt_conn_unref>
}
   45166:	bd08      	pop	{r3, pc}

00045168 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   45168:	2101      	movs	r1, #1
   4516a:	3008      	adds	r0, #8
   4516c:	f002 bdba 	b.w	47ce4 <net_buf_simple_pull_mem>

00045170 <le_conn_update_complete>:
{
   45170:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   45172:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   45174:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   45178:	f7e7 fa6a 	bl	2c650 <bt_conn_lookup_handle>
	if (!conn) {
   4517c:	4604      	mov	r4, r0
   4517e:	b390      	cbz	r0, 451e6 <le_conn_update_complete+0x76>
	if (!evt->status) {
   45180:	782b      	ldrb	r3, [r5, #0]
   45182:	b9cb      	cbnz	r3, 451b8 <le_conn_update_complete+0x48>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   45184:	792a      	ldrb	r2, [r5, #4]
   45186:	78eb      	ldrb	r3, [r5, #3]
   45188:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4518c:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   45190:	79aa      	ldrb	r2, [r5, #6]
   45192:	796b      	ldrb	r3, [r5, #5]
   45194:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   45198:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   4519c:	79eb      	ldrb	r3, [r5, #7]
   4519e:	7a2a      	ldrb	r2, [r5, #8]
   451a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   451a4:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   451a8:	f7e7 fb20 	bl	2c7ec <notify_le_param_updated>
	bt_conn_unref(conn);
   451ac:	4620      	mov	r0, r4
}
   451ae:	b003      	add	sp, #12
   451b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   451b4:	f000 bdd0 	b.w	45d58 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   451b8:	2b1a      	cmp	r3, #26
   451ba:	d1f7      	bne.n	451ac <le_conn_update_complete+0x3c>
   451bc:	78c3      	ldrb	r3, [r0, #3]
   451be:	2b01      	cmp	r3, #1
   451c0:	d1f4      	bne.n	451ac <le_conn_update_complete+0x3c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   451c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   451c6:	3004      	adds	r0, #4
   451c8:	f7ff ff9f 	bl	4510a <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   451cc:	0543      	lsls	r3, r0, #21
   451ce:	d4ed      	bmi.n	451ac <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   451d0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   451d4:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   451d6:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   451d8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   451dc:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   451de:	4620      	mov	r0, r4
   451e0:	f7e7 fe0c 	bl	2cdfc <bt_l2cap_update_conn_param>
   451e4:	e7e2      	b.n	451ac <le_conn_update_complete+0x3c>
}
   451e6:	b003      	add	sp, #12
   451e8:	bd30      	pop	{r4, r5, pc}

000451ea <hci_vendor_event>:
   451ea:	4770      	bx	lr

000451ec <sys_put_le64>:
	dst[1] = val >> 8;
   451ec:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   451f0:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   451f2:	0e00      	lsrs	r0, r0, #24
   451f4:	7053      	strb	r3, [r2, #1]
   451f6:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   451f8:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   451fa:	f3c1 2007 	ubfx	r0, r1, #8, #8
   451fe:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   45200:	7093      	strb	r3, [r2, #2]
   45202:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   45204:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   45206:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   45208:	71d1      	strb	r1, [r2, #7]
}
   4520a:	4770      	bx	lr

0004520c <hci_num_completed_packets>:
{
   4520c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   45210:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   45212:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   45214:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   45216:	783b      	ldrb	r3, [r7, #0]
   45218:	429d      	cmp	r5, r3
   4521a:	db01      	blt.n	45220 <hci_num_completed_packets+0x14>
}
   4521c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   45220:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   45224:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   45228:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   4522c:	f7e7 fa10 	bl	2c650 <bt_conn_lookup_handle>
		if (!conn) {
   45230:	4604      	mov	r4, r0
   45232:	b350      	cbz	r0, 4528a <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   45234:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   45238:	b326      	cbz	r6, 45284 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   4523a:	f04f 0320 	mov.w	r3, #32
   4523e:	f3ef 8211 	mrs	r2, BASEPRI
   45242:	f383 8812 	msr	BASEPRI_MAX, r3
   45246:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   4524a:	69e3      	ldr	r3, [r4, #28]
   4524c:	b16b      	cbz	r3, 4526a <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   4524e:	3b01      	subs	r3, #1
   45250:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   45252:	f382 8811 	msr	BASEPRI, r2
   45256:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   4525a:	4620      	mov	r0, r4
   4525c:	f7e7 f956 	bl	2c50c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   45260:	3e01      	subs	r6, #1
   45262:	f7fc f9c5 	bl	415f0 <z_impl_k_sem_give>
   45266:	b2b6      	uxth	r6, r6
   45268:	e7e6      	b.n	45238 <hci_num_completed_packets+0x2c>
	return list->head;
   4526a:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   4526c:	b12b      	cbz	r3, 4527a <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4526e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   45270:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   45272:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   45274:	428b      	cmp	r3, r1
	list->tail = node;
   45276:	bf08      	it	eq
   45278:	61a0      	streq	r0, [r4, #24]
   4527a:	f382 8811 	msr	BASEPRI, r2
   4527e:	f3bf 8f6f 	isb	sy
			if (!node) {
   45282:	b923      	cbnz	r3, 4528e <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   45284:	4620      	mov	r0, r4
   45286:	f000 fd67 	bl	45d58 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   4528a:	3501      	adds	r5, #1
   4528c:	e7c3      	b.n	45216 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   4528e:	f04f 0220 	mov.w	r2, #32
   45292:	f3ef 8111 	mrs	r1, BASEPRI
   45296:	f382 8812 	msr	BASEPRI_MAX, r2
   4529a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   4529e:	68da      	ldr	r2, [r3, #12]
   452a0:	61e2      	str	r2, [r4, #28]
	return list->tail;
   452a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   452a4:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   452a8:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   452ac:	b94a      	cbnz	r2, 452c2 <hci_num_completed_packets+0xb6>
	list->head = node;
   452ae:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   452b2:	f381 8811 	msr	BASEPRI, r1
   452b6:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   452ba:	4648      	mov	r0, r9
   452bc:	f7fc fb0e 	bl	418dc <k_work_submit>
   452c0:	e7cb      	b.n	4525a <hci_num_completed_packets+0x4e>
	parent->next = child;
   452c2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   452c4:	6263      	str	r3, [r4, #36]	; 0x24
}
   452c6:	e7f4      	b.n	452b2 <hci_num_completed_packets+0xa6>

000452c8 <le_ltk_request>:
{
   452c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   452ca:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   452cc:	8826      	ldrh	r6, [r4, #0]
{
   452ce:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   452d0:	b2b0      	uxth	r0, r6
   452d2:	f7e7 f9bd 	bl	2c650 <bt_conn_lookup_handle>
	if (!conn) {
   452d6:	4605      	mov	r5, r0
   452d8:	b318      	cbz	r0, 45322 <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   452da:	af02      	add	r7, sp, #8
   452dc:	f8d4 2002 	ldr.w	r2, [r4, #2]
   452e0:	f8d4 3006 	ldr.w	r3, [r4, #6]
   452e4:	9701      	str	r7, [sp, #4]
   452e6:	8961      	ldrh	r1, [r4, #10]
   452e8:	9100      	str	r1, [sp, #0]
   452ea:	f002 f9ee 	bl	476ca <bt_smp_request_ltk>
   452ee:	b1d0      	cbz	r0, 45326 <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   452f0:	2112      	movs	r1, #18
   452f2:	f242 001a 	movw	r0, #8218	; 0x201a
   452f6:	f7e5 fe3f 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   452fa:	4604      	mov	r4, r0
   452fc:	b170      	cbz	r0, 4531c <le_ltk_request+0x54>
	return net_buf_simple_add(&buf->b, len);
   452fe:	2112      	movs	r1, #18
   45300:	3008      	adds	r0, #8
   45302:	f002 fcc8 	bl	47c96 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   45306:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   45308:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   4530c:	2210      	movs	r2, #16
   4530e:	f7ff fd78 	bl	44e02 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   45312:	4621      	mov	r1, r4
   45314:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   45318:	f7e5 fe68 	bl	2afec <bt_hci_cmd_send>
	bt_conn_unref(conn);
   4531c:	4628      	mov	r0, r5
   4531e:	f000 fd1b 	bl	45d58 <bt_conn_unref>
}
   45322:	b007      	add	sp, #28
   45324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   45326:	2102      	movs	r1, #2
   45328:	f242 001b 	movw	r0, #8219	; 0x201b
   4532c:	f7e5 fe24 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   45330:	4604      	mov	r4, r0
   45332:	2800      	cmp	r0, #0
   45334:	d0f2      	beq.n	4531c <le_ltk_request+0x54>
   45336:	2102      	movs	r1, #2
   45338:	3008      	adds	r0, #8
   4533a:	f002 fcac 	bl	47c96 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4533e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   45340:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   45342:	f242 001b 	movw	r0, #8219	; 0x201b
   45346:	e7e7      	b.n	45318 <le_ltk_request+0x50>

00045348 <le_conn_param_neg_reply>:
{
   45348:	b570      	push	{r4, r5, r6, lr}
   4534a:	4606      	mov	r6, r0
   4534c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   4534e:	f242 0021 	movw	r0, #8225	; 0x2021
   45352:	2103      	movs	r1, #3
   45354:	f7e5 fe10 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   45358:	4604      	mov	r4, r0
   4535a:	b160      	cbz	r0, 45376 <le_conn_param_neg_reply+0x2e>
   4535c:	2103      	movs	r1, #3
   4535e:	3008      	adds	r0, #8
   45360:	f002 fc99 	bl	47c96 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   45364:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   45366:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   45368:	4621      	mov	r1, r4
   4536a:	f242 0021 	movw	r0, #8225	; 0x2021
}
   4536e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   45372:	f7e5 be3b 	b.w	2afec <bt_hci_cmd_send>
}
   45376:	bd70      	pop	{r4, r5, r6, pc}

00045378 <le_conn_param_req>:
{
   45378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   4537a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   4537c:	78d9      	ldrb	r1, [r3, #3]
   4537e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   45380:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   45382:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   45386:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   4538a:	7959      	ldrb	r1, [r3, #5]
   4538c:	791a      	ldrb	r2, [r3, #4]
   4538e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   45392:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   45396:	799a      	ldrb	r2, [r3, #6]
   45398:	79d9      	ldrb	r1, [r3, #7]
   4539a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4539e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   453a2:	7a1a      	ldrb	r2, [r3, #8]
   453a4:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   453a6:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   453a8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   453ac:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   453ae:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   453b2:	f7e7 f94d 	bl	2c650 <bt_conn_lookup_handle>
	if (!conn) {
   453b6:	4606      	mov	r6, r0
   453b8:	b928      	cbnz	r0, 453c6 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   453ba:	2102      	movs	r1, #2
   453bc:	4620      	mov	r0, r4
   453be:	f7ff ffc3 	bl	45348 <le_conn_param_neg_reply>
}
   453c2:	b003      	add	sp, #12
   453c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   453c6:	4669      	mov	r1, sp
   453c8:	f7e7 fa74 	bl	2c8b4 <le_param_req>
   453cc:	b938      	cbnz	r0, 453de <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   453ce:	211e      	movs	r1, #30
   453d0:	4620      	mov	r0, r4
   453d2:	f7ff ffb9 	bl	45348 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   453d6:	4630      	mov	r0, r6
   453d8:	f000 fcbe 	bl	45d58 <bt_conn_unref>
   453dc:	e7f1      	b.n	453c2 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   453de:	210e      	movs	r1, #14
   453e0:	f242 0020 	movw	r0, #8224	; 0x2020
   453e4:	f7e5 fdc8 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   453e8:	4605      	mov	r5, r0
   453ea:	2800      	cmp	r0, #0
   453ec:	d0f3      	beq.n	453d6 <le_conn_param_req+0x5e>
   453ee:	210e      	movs	r1, #14
   453f0:	3008      	adds	r0, #8
   453f2:	f002 fc50 	bl	47c96 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   453f6:	220e      	movs	r2, #14
   453f8:	4604      	mov	r4, r0
   453fa:	2100      	movs	r1, #0
   453fc:	f7ff fd0c 	bl	44e18 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   45400:	f8bd 3000 	ldrh.w	r3, [sp]
   45404:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   45406:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   4540a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   4540c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   45410:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   45412:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   45416:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   45418:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   4541a:	4629      	mov	r1, r5
   4541c:	f242 0020 	movw	r0, #8224	; 0x2020
   45420:	f7e5 fde4 	bl	2afec <bt_hci_cmd_send>
   45424:	e7d7      	b.n	453d6 <le_conn_param_req+0x5e>

00045426 <hci_le_read_max_data_len>:
{
   45426:	b573      	push	{r0, r1, r4, r5, r6, lr}
   45428:	4606      	mov	r6, r0
   4542a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   4542c:	aa01      	add	r2, sp, #4
   4542e:	2100      	movs	r1, #0
   45430:	f242 002f 	movw	r0, #8239	; 0x202f
   45434:	f7e5 fdfc 	bl	2b030 <bt_hci_cmd_send_sync>
	if (err) {
   45438:	4604      	mov	r4, r0
   4543a:	b948      	cbnz	r0, 45450 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   4543c:	9801      	ldr	r0, [sp, #4]
   4543e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   45440:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   45444:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   45446:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   4544a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   4544c:	f7f7 fe76 	bl	3d13c <net_buf_unref>
}
   45450:	4620      	mov	r0, r4
   45452:	b002      	add	sp, #8
   45454:	bd70      	pop	{r4, r5, r6, pc}

00045456 <bt_hci_disconnect>:
{
   45456:	b570      	push	{r4, r5, r6, lr}
   45458:	4606      	mov	r6, r0
   4545a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   4545c:	f240 4006 	movw	r0, #1030	; 0x406
   45460:	2103      	movs	r1, #3
   45462:	f7e5 fd89 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   45466:	4604      	mov	r4, r0
   45468:	b168      	cbz	r0, 45486 <bt_hci_disconnect+0x30>
   4546a:	2103      	movs	r1, #3
   4546c:	3008      	adds	r0, #8
   4546e:	f002 fc12 	bl	47c96 <net_buf_simple_add>
	disconn->reason = reason;
   45472:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   45474:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   45476:	4621      	mov	r1, r4
   45478:	2200      	movs	r2, #0
}
   4547a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   4547e:	f240 4006 	movw	r0, #1030	; 0x406
   45482:	f7e5 bdd5 	b.w	2b030 <bt_hci_cmd_send_sync>
}
   45486:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4548a:	bd70      	pop	{r4, r5, r6, pc}

0004548c <bt_le_set_data_len>:
{
   4548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4548e:	4607      	mov	r7, r0
   45490:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   45492:	f242 0022 	movw	r0, #8226	; 0x2022
   45496:	2106      	movs	r1, #6
{
   45498:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   4549a:	f7e5 fd6d 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   4549e:	4604      	mov	r4, r0
   454a0:	b170      	cbz	r0, 454c0 <bt_le_set_data_len+0x34>
   454a2:	2106      	movs	r1, #6
   454a4:	3008      	adds	r0, #8
   454a6:	f002 fbf6 	bl	47c96 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   454aa:	883b      	ldrh	r3, [r7, #0]
   454ac:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   454ae:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   454b0:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   454b2:	4621      	mov	r1, r4
   454b4:	f242 0022 	movw	r0, #8226	; 0x2022
}
   454b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   454bc:	f7e5 bd96 	b.w	2afec <bt_hci_cmd_send>
}
   454c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   454c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000454c6 <bt_le_set_phy>:
{
   454c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   454ca:	4681      	mov	r9, r0
   454cc:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   454ce:	f242 0032 	movw	r0, #8242	; 0x2032
   454d2:	2107      	movs	r1, #7
{
   454d4:	f89d a020 	ldrb.w	sl, [sp, #32]
   454d8:	4617      	mov	r7, r2
   454da:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   454dc:	f7e5 fd4c 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   454e0:	4605      	mov	r5, r0
   454e2:	b198      	cbz	r0, 4550c <bt_le_set_phy+0x46>
   454e4:	2107      	movs	r1, #7
   454e6:	3008      	adds	r0, #8
   454e8:	f002 fbd5 	bl	47c96 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   454ec:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   454f0:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   454f4:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   454f6:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   454f8:	f8a0 a005 	strh.w	sl, [r0, #5]
	cp->handle = sys_cpu_to_le16(conn->handle);
   454fc:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   454fe:	4629      	mov	r1, r5
   45500:	f242 0032 	movw	r0, #8242	; 0x2032
}
   45504:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   45508:	f7e5 bd70 	b.w	2afec <bt_hci_cmd_send>
}
   4550c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00045514 <le_phy_update_complete>:
{
   45514:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   45516:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   45518:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4551c:	f7e7 f898 	bl	2c650 <bt_conn_lookup_handle>
	if (!conn) {
   45520:	4604      	mov	r4, r0
   45522:	b338      	cbz	r0, 45574 <le_phy_update_complete+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45524:	f3bf 8f5b 	dmb	ish
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   45528:	3004      	adds	r0, #4
   4552a:	e850 3f00 	ldrex	r3, [r0]
   4552e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   45532:	e840 2100 	strex	r1, r2, [r0]
   45536:	2900      	cmp	r1, #0
   45538:	d1f7      	bne.n	4552a <le_phy_update_complete+0x16>
   4553a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   4553e:	061b      	lsls	r3, r3, #24
   45540:	d506      	bpl.n	45550 <le_phy_update_complete+0x3c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   45542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   45546:	f7ff fde0 	bl	4510a <atomic_or>
		conn_auto_initiate(conn);
   4554a:	4620      	mov	r0, r4
   4554c:	f7e5 fddc 	bl	2b108 <conn_auto_initiate>
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   45550:	78e8      	ldrb	r0, [r5, #3]
   45552:	f7e5 fdcf 	bl	2b0f4 <bt_get_phy>
   45556:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   4555a:	7928      	ldrb	r0, [r5, #4]
   4555c:	f7e5 fdca 	bl	2b0f4 <bt_get_phy>
   45560:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
   45564:	4620      	mov	r0, r4
   45566:	f7e7 f983 	bl	2c870 <notify_le_phy_updated>
	bt_conn_unref(conn);
   4556a:	4620      	mov	r0, r4
}
   4556c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   45570:	f000 bbf2 	b.w	45d58 <bt_conn_unref>
}
   45574:	bd38      	pop	{r3, r4, r5, pc}

00045576 <le_remote_feat_complete>:
{
   45576:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   45578:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4557a:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4557e:	f7e7 f867 	bl	2c650 <bt_conn_lookup_handle>
	if (!conn) {
   45582:	4604      	mov	r4, r0
   45584:	b198      	cbz	r0, 455ae <le_remote_feat_complete+0x38>
	if (!evt->status) {
   45586:	782b      	ldrb	r3, [r5, #0]
   45588:	b923      	cbnz	r3, 45594 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   4558a:	2208      	movs	r2, #8
   4558c:	1ce9      	adds	r1, r5, #3
   4558e:	30ac      	adds	r0, #172	; 0xac
   45590:	f7ff fc37 	bl	44e02 <memcpy>
   45594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   45598:	1d20      	adds	r0, r4, #4
   4559a:	f7ff fdb6 	bl	4510a <atomic_or>
	conn_auto_initiate(conn);
   4559e:	4620      	mov	r0, r4
   455a0:	f7e5 fdb2 	bl	2b108 <conn_auto_initiate>
	bt_conn_unref(conn);
   455a4:	4620      	mov	r0, r4
}
   455a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   455aa:	f000 bbd5 	b.w	45d58 <bt_conn_unref>
}
   455ae:	bd38      	pop	{r3, r4, r5, pc}

000455b0 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   455b0:	6880      	ldr	r0, [r0, #8]
   455b2:	f7e5 be0d 	b.w	2b1d0 <bt_hci_le_enh_conn_complete>

000455b6 <le_legacy_conn_complete>:
{
   455b6:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   455b8:	6881      	ldr	r1, [r0, #8]
{
   455ba:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   455bc:	780b      	ldrb	r3, [r1, #0]
   455be:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   455c2:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   455c6:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   455ca:	78cb      	ldrb	r3, [r1, #3]
   455cc:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   455d0:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   455d4:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   455d8:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   455dc:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   455e0:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   455e4:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   455e8:	7c4b      	ldrb	r3, [r1, #17]
   455ea:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   455ee:	2207      	movs	r2, #7
   455f0:	3104      	adds	r1, #4
   455f2:	a803      	add	r0, sp, #12
   455f4:	f7ff fc05 	bl	44e02 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   455f8:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   455fa:	4669      	mov	r1, sp
   455fc:	2206      	movs	r2, #6
   455fe:	f10d 0013 	add.w	r0, sp, #19
   45602:	9400      	str	r4, [sp, #0]
   45604:	f8ad 4004 	strh.w	r4, [sp, #4]
   45608:	f7ff fbfb 	bl	44e02 <memcpy>
   4560c:	2206      	movs	r2, #6
   4560e:	4669      	mov	r1, sp
   45610:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   45614:	9400      	str	r4, [sp, #0]
   45616:	f8ad 4004 	strh.w	r4, [sp, #4]
   4561a:	f7ff fbf2 	bl	44e02 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   4561e:	a802      	add	r0, sp, #8
   45620:	f7e5 fdd6 	bl	2b1d0 <bt_hci_le_enh_conn_complete>
}
   45624:	b00a      	add	sp, #40	; 0x28
   45626:	bd10      	pop	{r4, pc}

00045628 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   45628:	8803      	ldrh	r3, [r0, #0]
   4562a:	8842      	ldrh	r2, [r0, #2]
   4562c:	4293      	cmp	r3, r2
{
   4562e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   45630:	d819      	bhi.n	45666 <bt_le_conn_params_valid+0x3e>
   45632:	2b05      	cmp	r3, #5
   45634:	d917      	bls.n	45666 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   45636:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   4563a:	d814      	bhi.n	45666 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   4563c:	8883      	ldrh	r3, [r0, #4]
   4563e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   45642:	d210      	bcs.n	45666 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   45644:	88c0      	ldrh	r0, [r0, #6]
   45646:	f1a0 010a 	sub.w	r1, r0, #10
   4564a:	b289      	uxth	r1, r1
   4564c:	f640 4476 	movw	r4, #3190	; 0xc76
   45650:	42a1      	cmp	r1, r4
   45652:	d808      	bhi.n	45666 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   45654:	3301      	adds	r3, #1
   45656:	b29b      	uxth	r3, r3
   45658:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   4565a:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   4565e:	bf34      	ite	cc
   45660:	2001      	movcc	r0, #1
   45662:	2000      	movcs	r0, #0
}
   45664:	bd10      	pop	{r4, pc}
		return false;
   45666:	2000      	movs	r0, #0
   45668:	e7fc      	b.n	45664 <bt_le_conn_params_valid+0x3c>

0004566a <hci_encrypt_key_refresh_complete>:
{
   4566a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   4566c:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4566e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   45672:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   45674:	f7e6 ffec 	bl	2c650 <bt_conn_lookup_handle>
	if (!conn) {
   45678:	4604      	mov	r4, r0
   4567a:	b338      	cbz	r0, 456cc <hci_encrypt_key_refresh_complete+0x62>
	if (status) {
   4567c:	b165      	cbz	r5, 45698 <hci_encrypt_key_refresh_complete+0x2e>
		bt_conn_security_changed(conn, status,
   4567e:	4628      	mov	r0, r5
   45680:	f7e5 fe86 	bl	2b390 <bt_security_err_get>
   45684:	4629      	mov	r1, r5
   45686:	4602      	mov	r2, r0
   45688:	4620      	mov	r0, r4
   4568a:	f7e7 f97b 	bl	2c984 <bt_conn_security_changed>
	bt_conn_unref(conn);
   4568e:	4620      	mov	r0, r4
}
   45690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   45694:	f000 bb60 	b.w	45d58 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   45698:	7883      	ldrb	r3, [r0, #2]
   4569a:	2b01      	cmp	r3, #1
   4569c:	d107      	bne.n	456ae <hci_encrypt_key_refresh_complete+0x44>
		bt_smp_update_keys(conn);
   4569e:	f002 f9ca 	bl	47a36 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   456a2:	4620      	mov	r0, r4
   456a4:	f7ff fd19 	bl	450da <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   456a8:	2800      	cmp	r0, #0
   456aa:	bf08      	it	eq
   456ac:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   456ae:	4628      	mov	r0, r5
   456b0:	f7e5 fe6e 	bl	2b390 <bt_security_err_get>
   456b4:	4629      	mov	r1, r5
   456b6:	4602      	mov	r2, r0
   456b8:	4620      	mov	r0, r4
   456ba:	f7e7 f963 	bl	2c984 <bt_conn_security_changed>
	if (status) {
   456be:	2d00      	cmp	r5, #0
   456c0:	d0e5      	beq.n	4568e <hci_encrypt_key_refresh_complete+0x24>
		bt_conn_disconnect(conn, status);
   456c2:	2105      	movs	r1, #5
   456c4:	4620      	mov	r0, r4
   456c6:	f000 fb8b 	bl	45de0 <bt_conn_disconnect>
   456ca:	e7e0      	b.n	4568e <hci_encrypt_key_refresh_complete+0x24>
}
   456cc:	bd38      	pop	{r3, r4, r5, pc}

000456ce <hci_encrypt_change>:
{
   456ce:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   456d0:	6886      	ldr	r6, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   456d2:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   456d6:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   456d8:	f7e6 ffba 	bl	2c650 <bt_conn_lookup_handle>
	if (!conn) {
   456dc:	4604      	mov	r4, r0
   456de:	b350      	cbz	r0, 45736 <hci_encrypt_change+0x68>
	if (status) {
   456e0:	b165      	cbz	r5, 456fc <hci_encrypt_change+0x2e>
		bt_conn_security_changed(conn, status,
   456e2:	4628      	mov	r0, r5
   456e4:	f7e5 fe54 	bl	2b390 <bt_security_err_get>
   456e8:	4629      	mov	r1, r5
   456ea:	4602      	mov	r2, r0
   456ec:	4620      	mov	r0, r4
   456ee:	f7e7 f949 	bl	2c984 <bt_conn_security_changed>
	bt_conn_unref(conn);
   456f2:	4620      	mov	r0, r4
}
   456f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   456f8:	f000 bb2e 	b.w	45d58 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   456fc:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   456fe:	78f3      	ldrb	r3, [r6, #3]
   45700:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   45702:	2a01      	cmp	r2, #1
   45704:	d108      	bne.n	45718 <hci_encrypt_change+0x4a>
		if (conn->encrypt) {
   45706:	b10b      	cbz	r3, 4570c <hci_encrypt_change+0x3e>
			bt_smp_update_keys(conn);
   45708:	f002 f995 	bl	47a36 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   4570c:	4620      	mov	r0, r4
   4570e:	f7ff fce4 	bl	450da <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   45712:	2800      	cmp	r0, #0
   45714:	bf08      	it	eq
   45716:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   45718:	4628      	mov	r0, r5
   4571a:	f7e5 fe39 	bl	2b390 <bt_security_err_get>
   4571e:	4629      	mov	r1, r5
   45720:	4602      	mov	r2, r0
   45722:	4620      	mov	r0, r4
   45724:	f7e7 f92e 	bl	2c984 <bt_conn_security_changed>
	if (status) {
   45728:	2d00      	cmp	r5, #0
   4572a:	d0e2      	beq.n	456f2 <hci_encrypt_change+0x24>
		bt_conn_disconnect(conn, status);
   4572c:	2105      	movs	r1, #5
   4572e:	4620      	mov	r0, r4
   45730:	f000 fb56 	bl	45de0 <bt_conn_disconnect>
   45734:	e7dd      	b.n	456f2 <hci_encrypt_change+0x24>
}
   45736:	bd70      	pop	{r4, r5, r6, pc}

00045738 <bt_send>:
		return bt_hci_ecc_send(buf);
   45738:	f7e5 b8ce 	b.w	2a8d8 <bt_hci_ecc_send>

0004573c <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   4573c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   4573e:	f7ea f83b 	bl	2f7b8 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   45742:	b118      	cbz	r0, 4574c <bt_addr_le_is_bonded+0x10>
   45744:	89c0      	ldrh	r0, [r0, #14]
   45746:	3800      	subs	r0, #0
   45748:	bf18      	it	ne
   4574a:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   4574c:	bd08      	pop	{r3, pc}

0004574e <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   4574e:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   45750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   45754:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   45756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4575a:	2100      	movs	r1, #0
{
   4575c:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4575e:	f7e5 fa53 	bl	2ac08 <bt_buf_get_evt>
   45762:	2102      	movs	r1, #2
   45764:	4604      	mov	r4, r0
   45766:	3008      	adds	r0, #8
   45768:	f002 fa95 	bl	47c96 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   4576c:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   4576e:	7045      	strb	r5, [r0, #1]

	return buf;
}
   45770:	4620      	mov	r0, r4
   45772:	bd70      	pop	{r4, r5, r6, pc}

00045774 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   45774:	3103      	adds	r1, #3
{
   45776:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   45778:	b2c9      	uxtb	r1, r1
{
   4577a:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4577c:	200e      	movs	r0, #14
   4577e:	f7ff ffe6 	bl	4574e <bt_hci_evt_create>
   45782:	2103      	movs	r1, #3
   45784:	4604      	mov	r4, r0
   45786:	3008      	adds	r0, #8
   45788:	f002 fa85 	bl	47c96 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   4578c:	2301      	movs	r3, #1
   4578e:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   45790:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   45794:	4620      	mov	r0, r4
   45796:	bd38      	pop	{r3, r4, r5, pc}

00045798 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   45798:	b570      	push	{r4, r5, r6, lr}
   4579a:	4605      	mov	r5, r0
   4579c:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   4579e:	200f      	movs	r0, #15
   457a0:	2104      	movs	r1, #4
   457a2:	f7ff ffd4 	bl	4574e <bt_hci_evt_create>
   457a6:	2104      	movs	r1, #4
   457a8:	4604      	mov	r4, r0
   457aa:	3008      	adds	r0, #8
   457ac:	f002 fa73 	bl	47c96 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   457b0:	2201      	movs	r2, #1
	cs->status = status;
   457b2:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   457b4:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   457b6:	8045      	strh	r5, [r0, #2]

	return buf;
}
   457b8:	4620      	mov	r0, r4
   457ba:	bd70      	pop	{r4, r5, r6, pc}

000457bc <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   457bc:	2207      	movs	r2, #7
   457be:	f7ff bb20 	b.w	44e02 <memcpy>

000457c2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   457c2:	f3bf 8f5b 	dmb	ish
   457c6:	6800      	ldr	r0, [r0, #0]
   457c8:	f3bf 8f5b 	dmb	ish
}
   457cc:	4770      	bx	lr

000457ce <adv_unpause_enabled>:
{
   457ce:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   457d0:	f100 0310 	add.w	r3, r0, #16
   457d4:	f3bf 8f5b 	dmb	ish
   457d8:	e853 2f00 	ldrex	r2, [r3]
   457dc:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   457e0:	e843 1400 	strex	r4, r1, [r3]
   457e4:	2c00      	cmp	r4, #0
   457e6:	d1f7      	bne.n	457d8 <adv_unpause_enabled+0xa>
   457e8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   457ec:	0453      	lsls	r3, r2, #17
   457ee:	d503      	bpl.n	457f8 <adv_unpause_enabled+0x2a>
}
   457f0:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   457f2:	2101      	movs	r1, #1
   457f4:	f000 b9df 	b.w	45bb6 <bt_le_adv_set_enable>
}
   457f8:	bc10      	pop	{r4}
   457fa:	4770      	bx	lr

000457fc <hci_id_add>:
{
   457fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   457fe:	f242 0027 	movw	r0, #8231	; 0x2027
{
   45802:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   45804:	2127      	movs	r1, #39	; 0x27
{
   45806:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   45808:	f7e5 fbb6 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   4580c:	4604      	mov	r4, r0
   4580e:	b1d0      	cbz	r0, 45846 <hci_id_add+0x4a>
   45810:	2127      	movs	r1, #39	; 0x27
   45812:	3008      	adds	r0, #8
   45814:	f002 fa3f 	bl	47c96 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   45818:	4639      	mov	r1, r7
   4581a:	4605      	mov	r5, r0
   4581c:	f7ff ffce 	bl	457bc <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   45820:	4631      	mov	r1, r6
   45822:	2210      	movs	r2, #16
   45824:	1de8      	adds	r0, r5, #7
   45826:	f7ff faec 	bl	44e02 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   4582a:	2210      	movs	r2, #16
   4582c:	2100      	movs	r1, #0
   4582e:	f105 0017 	add.w	r0, r5, #23
   45832:	f7ff faf1 	bl	44e18 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   45836:	4621      	mov	r1, r4
   45838:	2200      	movs	r2, #0
}
   4583a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   4583e:	f242 0027 	movw	r0, #8231	; 0x2027
   45842:	f7e5 bbf5 	b.w	2b030 <bt_hci_cmd_send_sync>
}
   45846:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4584a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004584c <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   4584c:	7a03      	ldrb	r3, [r0, #8]
   4584e:	075b      	lsls	r3, r3, #29
{
   45850:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   45852:	d505      	bpl.n	45860 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   45854:	4601      	mov	r1, r0
   45856:	322a      	adds	r2, #42	; 0x2a
   45858:	f811 0b01 	ldrb.w	r0, [r1], #1
   4585c:	f7ff bfce 	b.w	457fc <hci_id_add>
}
   45860:	4770      	bx	lr

00045862 <addr_res_enable>:
{
   45862:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   45864:	2101      	movs	r1, #1
{
   45866:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   45868:	f242 002d 	movw	r0, #8237	; 0x202d
   4586c:	f7e5 fb84 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   45870:	4604      	mov	r4, r0
   45872:	b158      	cbz	r0, 4588c <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   45874:	4629      	mov	r1, r5
   45876:	3008      	adds	r0, #8
   45878:	f002 fa1c 	bl	47cb4 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   4587c:	4621      	mov	r1, r4
   4587e:	2200      	movs	r2, #0
}
   45880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   45884:	f242 002d 	movw	r0, #8237	; 0x202d
   45888:	f7e5 bbd2 	b.w	2b030 <bt_hci_cmd_send_sync>
}
   4588c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45890:	bd38      	pop	{r3, r4, r5, pc}

00045892 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   45892:	f100 0210 	add.w	r2, r0, #16
{
   45896:	b508      	push	{r3, lr}
   45898:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4589a:	4610      	mov	r0, r2
   4589c:	f7ff ff91 	bl	457c2 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   458a0:	0641      	lsls	r1, r0, #25
   458a2:	d511      	bpl.n	458c8 <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   458a4:	f3bf 8f5b 	dmb	ish
   458a8:	e852 0f00 	ldrex	r0, [r2]
   458ac:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   458b0:	e842 0100 	strex	r1, r0, [r2]
   458b4:	2900      	cmp	r1, #0
   458b6:	d1f7      	bne.n	458a8 <adv_pause_enabled+0x16>
   458b8:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   458bc:	4618      	mov	r0, r3
   458be:	2100      	movs	r1, #0
}
   458c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   458c4:	f000 b977 	b.w	45bb6 <bt_le_adv_set_enable>
}
   458c8:	bd08      	pop	{r3, pc}

000458ca <bt_lookup_id_addr>:
{
   458ca:	b510      	push	{r4, lr}
   458cc:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   458ce:	f7e9 ff3b 	bl	2f748 <bt_keys_find_irk>
		if (keys) {
   458d2:	b100      	cbz	r0, 458d6 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   458d4:	1c44      	adds	r4, r0, #1
}
   458d6:	4620      	mov	r0, r4
   458d8:	bd10      	pop	{r4, pc}

000458da <bt_id_set_adv_private_addr>:
{
   458da:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   458dc:	2106      	movs	r1, #6
   458de:	4668      	mov	r0, sp
   458e0:	f7ec fe16 	bl	32510 <bt_rand>
	if (err) {
   458e4:	b940      	cbnz	r0, 458f8 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   458e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   458ea:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   458ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   458f0:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   458f4:	f7e5 fede 	bl	2b6b4 <set_random_address>
}
   458f8:	b003      	add	sp, #12
   458fa:	f85d fb04 	ldr.w	pc, [sp], #4

000458fe <bt_id_adv_random_addr_check>:
}
   458fe:	2001      	movs	r0, #1
   45900:	4770      	bx	lr

00045902 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   45902:	7a03      	ldrb	r3, [r0, #8]
   45904:	07d9      	lsls	r1, r3, #31
   45906:	d504      	bpl.n	45912 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   45908:	f023 0301 	bic.w	r3, r3, #1
   4590c:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   4590e:	f7e5 bf59 	b.w	2b7c4 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   45912:	0799      	lsls	r1, r3, #30
   45914:	d504      	bpl.n	45920 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   45916:	f023 0302 	bic.w	r3, r3, #2
   4591a:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   4591c:	f7e5 bfe8 	b.w	2b8f0 <bt_id_del>
}
   45920:	4770      	bx	lr

00045922 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   45922:	2000      	movs	r0, #0
   45924:	4770      	bx	lr

00045926 <get_adv_channel_map>:
{
   45926:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   45928:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   4592c:	bf0c      	ite	eq
   4592e:	2007      	moveq	r0, #7
   45930:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   45932:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   45934:	bf48      	it	mi
   45936:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   4593a:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   4593c:	bf48      	it	mi
   4593e:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   45942:	4770      	bx	lr

00045944 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45944:	f3bf 8f5b 	dmb	ish
   45948:	6800      	ldr	r0, [r0, #0]
   4594a:	f3bf 8f5b 	dmb	ish
}
   4594e:	4770      	bx	lr

00045950 <atomic_and>:
{
   45950:	b510      	push	{r4, lr}
   45952:	4603      	mov	r3, r0
}
   45954:	f3bf 8f5b 	dmb	ish
   45958:	e853 0f00 	ldrex	r0, [r3]
   4595c:	ea00 0201 	and.w	r2, r0, r1
   45960:	e843 2400 	strex	r4, r2, [r3]
   45964:	2c00      	cmp	r4, #0
   45966:	d1f7      	bne.n	45958 <atomic_and+0x8>
   45968:	f3bf 8f5b 	dmb	ish
   4596c:	bd10      	pop	{r4, pc}

0004596e <hci_set_ad>:
{
   4596e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45972:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   45974:	2120      	movs	r1, #32
{
   45976:	4682      	mov	sl, r0
   45978:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   4597a:	f7e5 fafd 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   4597e:	4605      	mov	r5, r0
   45980:	2800      	cmp	r0, #0
   45982:	d04a      	beq.n	45a1a <hci_set_ad+0xac>
	return net_buf_simple_add(&buf->b, len);
   45984:	2120      	movs	r1, #32
   45986:	3008      	adds	r0, #8
   45988:	f002 f985 	bl	47c96 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   4598c:	2220      	movs	r2, #32
   4598e:	2100      	movs	r1, #0
   45990:	4681      	mov	r9, r0
   45992:	f7ff fa41 	bl	44e18 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   45996:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   4599a:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   4599e:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   459a0:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   459a2:	f8d4 8000 	ldr.w	r8, [r4]
   459a6:	2300      	movs	r3, #0
   459a8:	6862      	ldr	r2, [r4, #4]
   459aa:	4293      	cmp	r3, r2
   459ac:	d30d      	bcc.n	459ca <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   459ae:	9b00      	ldr	r3, [sp, #0]
   459b0:	3408      	adds	r4, #8
   459b2:	42a3      	cmp	r3, r4
   459b4:	d1f5      	bne.n	459a2 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   459b6:	2200      	movs	r2, #0
   459b8:	4629      	mov	r1, r5
   459ba:	4650      	mov	r0, sl
	*data_len = set_data_len;
   459bc:	f889 6000 	strb.w	r6, [r9]
}
   459c0:	b003      	add	sp, #12
   459c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   459c6:	f7e5 bb33 	b.w	2b030 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   459ca:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   459ce:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   459d2:	1cb0      	adds	r0, r6, #2
   459d4:	1811      	adds	r1, r2, r0
   459d6:	291f      	cmp	r1, #31
   459d8:	d908      	bls.n	459ec <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   459da:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   459de:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   459e2:	d11f      	bne.n	45a24 <hci_set_ad+0xb6>
   459e4:	2a00      	cmp	r2, #0
   459e6:	dd1d      	ble.n	45a24 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   459e8:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   459ec:	b2d7      	uxtb	r7, r2
   459ee:	1c79      	adds	r1, r7, #1
   459f0:	f80b 1006 	strb.w	r1, [fp, r6]
   459f4:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   459f6:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   459f8:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   459fc:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   45a00:	f8d8 1004 	ldr.w	r1, [r8, #4]
   45a04:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   45a06:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   45a08:	f7ff f9fb 	bl	44e02 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   45a0c:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   45a0e:	4437      	add	r7, r6
   45a10:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   45a12:	3301      	adds	r3, #1
   45a14:	f108 0808 	add.w	r8, r8, #8
   45a18:	e7c6      	b.n	459a8 <hci_set_ad+0x3a>
		return -ENOBUFS;
   45a1a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   45a1e:	b003      	add	sp, #12
   45a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   45a24:	4628      	mov	r0, r5
   45a26:	f7f7 fb89 	bl	3d13c <net_buf_unref>
		return err;
   45a2a:	f06f 0015 	mvn.w	r0, #21
   45a2e:	e7f6      	b.n	45a1e <hci_set_ad+0xb0>

00045a30 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   45a30:	2301      	movs	r3, #1
{
   45a32:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   45a34:	fa03 f101 	lsl.w	r1, r3, r1
{
   45a38:	4604      	mov	r4, r0
	if (val) {
   45a3a:	b162      	cbz	r2, 45a56 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45a3c:	f3bf 8f5b 	dmb	ish
   45a40:	e854 3f00 	ldrex	r3, [r4]
   45a44:	430b      	orrs	r3, r1
   45a46:	e844 3200 	strex	r2, r3, [r4]
   45a4a:	2a00      	cmp	r2, #0
   45a4c:	d1f8      	bne.n	45a40 <atomic_set_bit_to+0x10>
   45a4e:	f3bf 8f5b 	dmb	ish
	}
}
   45a52:	bc10      	pop	{r4}
   45a54:	4770      	bx	lr
   45a56:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   45a58:	43c9      	mvns	r1, r1
   45a5a:	f7ff bf79 	b.w	45950 <atomic_and>

00045a5e <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   45a5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45a62:	b087      	sub	sp, #28
   45a64:	4605      	mov	r5, r0
   45a66:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   45a6a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   45a6e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   45a72:	460c      	mov	r4, r1
   45a74:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   45a76:	2100      	movs	r1, #0
   45a78:	2210      	movs	r2, #16
   45a7a:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   45a7c:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   45a7e:	f7ff f9cb 	bl	44e18 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   45a82:	b186      	cbz	r6, 45aa6 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   45a84:	f7e5 fdf8 	bl	2b678 <bt_get_name>
   45a88:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   45a8a:	2c00      	cmp	r4, #0
   45a8c:	d139      	bne.n	45b02 <le_adv_update.constprop.0+0xa4>
   45a8e:	2f00      	cmp	r7, #0
   45a90:	d142      	bne.n	45b18 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   45a92:	4658      	mov	r0, fp
   45a94:	f7ff f981 	bl	44d9a <strlen>
   45a98:	2309      	movs	r3, #9
   45a9a:	f88d 3000 	strb.w	r3, [sp]
   45a9e:	f88d 0001 	strb.w	r0, [sp, #1]
   45aa2:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   45aa6:	2e01      	cmp	r6, #1
			d_len = 2;
   45aa8:	bf0c      	ite	eq
   45aaa:	2202      	moveq	r2, #2
		d_len = 1;
   45aac:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   45aae:	a902      	add	r1, sp, #8
   45ab0:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   45ab4:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   45ab8:	bf04      	itt	eq
   45aba:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   45abe:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   45ac0:	f7ff ff55 	bl	4596e <hci_set_ad>
		if (err) {
   45ac4:	4604      	mov	r4, r0
   45ac6:	b978      	cbnz	r0, 45ae8 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   45ac8:	f1ba 0f00 	cmp.w	sl, #0
   45acc:	d126      	bne.n	45b1c <le_adv_update.constprop.0+0xbe>
   45ace:	3510      	adds	r5, #16
   45ad0:	f3bf 8f5b 	dmb	ish
   45ad4:	e855 3f00 	ldrex	r3, [r5]
   45ad8:	f043 0304 	orr.w	r3, r3, #4
   45adc:	e845 3200 	strex	r2, r3, [r5]
   45ae0:	2a00      	cmp	r2, #0
   45ae2:	d1f7      	bne.n	45ad4 <le_adv_update.constprop.0+0x76>
   45ae4:	f3bf 8f5b 	dmb	ish
}
   45ae8:	4620      	mov	r0, r4
   45aea:	b007      	add	sp, #28
   45aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   45af0:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   45af4:	3a08      	subs	r2, #8
   45af6:	2a01      	cmp	r2, #1
   45af8:	d925      	bls.n	45b46 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   45afa:	3301      	adds	r3, #1
   45afc:	4598      	cmp	r8, r3
   45afe:	d1f7      	bne.n	45af0 <le_adv_update.constprop.0+0x92>
   45b00:	e7c5      	b.n	45a8e <le_adv_update.constprop.0+0x30>
   45b02:	2300      	movs	r3, #0
   45b04:	e7fa      	b.n	45afc <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   45b06:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   45b0a:	3a08      	subs	r2, #8
   45b0c:	2a01      	cmp	r2, #1
   45b0e:	d91a      	bls.n	45b46 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   45b10:	3301      	adds	r3, #1
   45b12:	4599      	cmp	r9, r3
   45b14:	d1f7      	bne.n	45b06 <le_adv_update.constprop.0+0xa8>
   45b16:	e7bc      	b.n	45a92 <le_adv_update.constprop.0+0x34>
   45b18:	2300      	movs	r3, #0
   45b1a:	e7fa      	b.n	45b12 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   45b1c:	2e02      	cmp	r6, #2
   45b1e:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   45b22:	bf08      	it	eq
   45b24:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   45b26:	a902      	add	r1, sp, #8
			d_len = 2;
   45b28:	bf08      	it	eq
   45b2a:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   45b2c:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   45b30:	bf08      	it	eq
   45b32:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   45b36:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   45b3a:	f7ff ff18 	bl	4596e <hci_set_ad>
		if (err) {
   45b3e:	2800      	cmp	r0, #0
   45b40:	d0c5      	beq.n	45ace <le_adv_update.constprop.0+0x70>
   45b42:	4604      	mov	r4, r0
   45b44:	e7d0      	b.n	45ae8 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   45b46:	f06f 0415 	mvn.w	r4, #21
   45b4a:	e7cd      	b.n	45ae8 <le_adv_update.constprop.0+0x8a>

00045b4c <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   45b4c:	6843      	ldr	r3, [r0, #4]
   45b4e:	f013 0008 	ands.w	r0, r3, #8
   45b52:	d00a      	beq.n	45b6a <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   45b54:	035a      	lsls	r2, r3, #13
   45b56:	d407      	bmi.n	45b68 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   45b58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   45b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   45b60:	bf0c      	ite	eq
   45b62:	2001      	moveq	r0, #1
   45b64:	2002      	movne	r0, #2
   45b66:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   45b68:	2001      	movs	r0, #1
}
   45b6a:	4770      	bx	lr

00045b6c <bt_le_adv_set_enable_legacy>:
{
   45b6c:	b570      	push	{r4, r5, r6, lr}
   45b6e:	4606      	mov	r6, r0
   45b70:	b086      	sub	sp, #24
   45b72:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   45b74:	f242 000a 	movw	r0, #8202	; 0x200a
   45b78:	2101      	movs	r1, #1
   45b7a:	f7e5 f9fd 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   45b7e:	4604      	mov	r4, r0
   45b80:	b1b0      	cbz	r0, 45bb0 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   45b82:	3008      	adds	r0, #8
	if (enable) {
   45b84:	b195      	cbz	r5, 45bac <bt_le_adv_set_enable_legacy+0x40>
   45b86:	2101      	movs	r1, #1
   45b88:	f002 f894 	bl	47cb4 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   45b8c:	f106 0210 	add.w	r2, r6, #16
   45b90:	a903      	add	r1, sp, #12
   45b92:	4620      	mov	r0, r4
   45b94:	9500      	str	r5, [sp, #0]
   45b96:	2306      	movs	r3, #6
   45b98:	f7e5 f9dc 	bl	2af54 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   45b9c:	2200      	movs	r2, #0
   45b9e:	4621      	mov	r1, r4
   45ba0:	f242 000a 	movw	r0, #8202	; 0x200a
   45ba4:	f7e5 fa44 	bl	2b030 <bt_hci_cmd_send_sync>
}
   45ba8:	b006      	add	sp, #24
   45baa:	bd70      	pop	{r4, r5, r6, pc}
   45bac:	4629      	mov	r1, r5
   45bae:	e7eb      	b.n	45b88 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   45bb0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45bb4:	e7f8      	b.n	45ba8 <bt_le_adv_set_enable_legacy+0x3c>

00045bb6 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   45bb6:	f7ff bfd9 	b.w	45b6c <bt_le_adv_set_enable_legacy>

00045bba <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   45bba:	3018      	adds	r0, #24
   45bbc:	f003 b842 	b.w	48c44 <k_work_cancel_delayable>

00045bc0 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   45bc0:	f7e6 ba48 	b.w	2c054 <bt_le_adv_stop>

00045bc4 <atomic_and>:
{
   45bc4:	b510      	push	{r4, lr}
   45bc6:	4603      	mov	r3, r0
}
   45bc8:	f3bf 8f5b 	dmb	ish
   45bcc:	e853 0f00 	ldrex	r0, [r3]
   45bd0:	ea00 0201 	and.w	r2, r0, r1
   45bd4:	e843 2400 	strex	r4, r2, [r3]
   45bd8:	2c00      	cmp	r4, #0
   45bda:	d1f7      	bne.n	45bcc <atomic_and+0x8>
   45bdc:	f3bf 8f5b 	dmb	ish
   45be0:	bd10      	pop	{r4, pc}

00045be2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45be2:	f3bf 8f5b 	dmb	ish
   45be6:	6800      	ldr	r0, [r0, #0]
   45be8:	f3bf 8f5b 	dmb	ish
}
   45bec:	4770      	bx	lr

00045bee <tx_notify>:
{
   45bee:	b570      	push	{r4, r5, r6, lr}
   45bf0:	4604      	mov	r4, r0
	__asm__ volatile(
   45bf2:	f04f 0220 	mov.w	r2, #32
   45bf6:	f3ef 8311 	mrs	r3, BASEPRI
   45bfa:	f382 8812 	msr	BASEPRI_MAX, r2
   45bfe:	f3bf 8f6f 	isb	sy
	return list->head;
   45c02:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   45c04:	b920      	cbnz	r0, 45c10 <tx_notify+0x22>
	__asm__ volatile(
   45c06:	f383 8811 	msr	BASEPRI, r3
   45c0a:	f3bf 8f6f 	isb	sy
}
   45c0e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   45c10:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   45c12:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   45c14:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   45c16:	4288      	cmp	r0, r1
	list->tail = node;
   45c18:	bf08      	it	eq
   45c1a:	6262      	streq	r2, [r4, #36]	; 0x24
   45c1c:	f383 8811 	msr	BASEPRI, r3
   45c20:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   45c24:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   45c28:	f7e6 fbba 	bl	2c3a0 <tx_free>
		cb(conn, user_data);
   45c2c:	4631      	mov	r1, r6
   45c2e:	4620      	mov	r0, r4
   45c30:	47a8      	blx	r5
	while (1) {
   45c32:	e7de      	b.n	45bf2 <tx_notify+0x4>

00045c34 <tx_complete_work>:
	tx_notify(conn);
   45c34:	3828      	subs	r0, #40	; 0x28
   45c36:	f7ff bfda 	b.w	45bee <tx_notify>

00045c3a <bt_conn_reset_rx_state>:
{
   45c3a:	b510      	push	{r4, lr}
   45c3c:	4604      	mov	r4, r0
	if (!conn->rx) {
   45c3e:	6900      	ldr	r0, [r0, #16]
   45c40:	b118      	cbz	r0, 45c4a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   45c42:	f7f7 fa7b 	bl	3d13c <net_buf_unref>
	conn->rx = NULL;
   45c46:	2300      	movs	r3, #0
   45c48:	6123      	str	r3, [r4, #16]
}
   45c4a:	bd10      	pop	{r4, pc}

00045c4c <conn_cleanup>:
{
   45c4c:	b570      	push	{r4, r5, r6, lr}
   45c4e:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   45c50:	f100 0638 	add.w	r6, r0, #56	; 0x38
   45c54:	2200      	movs	r2, #0
   45c56:	2300      	movs	r3, #0
   45c58:	4630      	mov	r0, r6
   45c5a:	f001 ffbf 	bl	47bdc <net_buf_get>
   45c5e:	4605      	mov	r5, r0
   45c60:	b950      	cbnz	r0, 45c78 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   45c62:	4620      	mov	r0, r4
   45c64:	f7ff ffe9 	bl	45c3a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   45c68:	f104 0058 	add.w	r0, r4, #88	; 0x58
   45c6c:	2200      	movs	r2, #0
}
   45c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   45c72:	2300      	movs	r3, #0
   45c74:	f7fb bece 	b.w	41a14 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   45c78:	6968      	ldr	r0, [r5, #20]
   45c7a:	b108      	cbz	r0, 45c80 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   45c7c:	f7e6 fb90 	bl	2c3a0 <tx_free>
		net_buf_unref(buf);
   45c80:	4628      	mov	r0, r5
   45c82:	f7f7 fa5b 	bl	3d13c <net_buf_unref>
   45c86:	e7e5      	b.n	45c54 <conn_cleanup+0x8>

00045c88 <bt_conn_recv>:
{
   45c88:	b570      	push	{r4, r5, r6, lr}
   45c8a:	4616      	mov	r6, r2
   45c8c:	4604      	mov	r4, r0
   45c8e:	460d      	mov	r5, r1
	tx_notify(conn);
   45c90:	f7ff ffad 	bl	45bee <tx_notify>
	switch (flags) {
   45c94:	2e01      	cmp	r6, #1
   45c96:	d017      	beq.n	45cc8 <bt_conn_recv+0x40>
   45c98:	2e02      	cmp	r6, #2
   45c9a:	d117      	bne.n	45ccc <bt_conn_recv+0x44>
		if (conn->rx) {
   45c9c:	6923      	ldr	r3, [r4, #16]
   45c9e:	b113      	cbz	r3, 45ca6 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   45ca0:	4620      	mov	r0, r4
   45ca2:	f7ff ffca 	bl	45c3a <bt_conn_reset_rx_state>
		conn->rx = buf;
   45ca6:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   45ca8:	6921      	ldr	r1, [r4, #16]
   45caa:	898a      	ldrh	r2, [r1, #12]
   45cac:	2a01      	cmp	r2, #1
   45cae:	d937      	bls.n	45d20 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   45cb0:	688b      	ldr	r3, [r1, #8]
   45cb2:	881b      	ldrh	r3, [r3, #0]
   45cb4:	3304      	adds	r3, #4
   45cb6:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   45cb8:	429a      	cmp	r2, r3
   45cba:	d331      	bcc.n	45d20 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   45cbc:	d928      	bls.n	45d10 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   45cbe:	4620      	mov	r0, r4
}
   45cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   45cc4:	f7ff bfb9 	b.w	45c3a <bt_conn_reset_rx_state>
		if (!conn->rx) {
   45cc8:	6920      	ldr	r0, [r4, #16]
   45cca:	b918      	cbnz	r0, 45cd4 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   45ccc:	4620      	mov	r0, r4
   45cce:	f7ff ffb4 	bl	45c3a <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   45cd2:	e001      	b.n	45cd8 <bt_conn_recv+0x50>
		if (!buf->len) {
   45cd4:	89ae      	ldrh	r6, [r5, #12]
   45cd6:	b926      	cbnz	r6, 45ce2 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   45cd8:	4628      	mov	r0, r5
}
   45cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   45cde:	f7f7 ba2d 	b.w	3d13c <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   45ce2:	3008      	adds	r0, #8
   45ce4:	f002 f812 	bl	47d0c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   45ce8:	4286      	cmp	r6, r0
   45cea:	d907      	bls.n	45cfc <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   45cec:	6921      	ldr	r1, [r4, #16]
   45cee:	2200      	movs	r2, #0
   45cf0:	4620      	mov	r0, r4
   45cf2:	f000 fa00 	bl	460f6 <bt_l2cap_recv>
			conn->rx = NULL;
   45cf6:	2300      	movs	r3, #0
   45cf8:	6123      	str	r3, [r4, #16]
   45cfa:	e7ed      	b.n	45cd8 <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   45cfc:	6920      	ldr	r0, [r4, #16]
   45cfe:	89aa      	ldrh	r2, [r5, #12]
   45d00:	68a9      	ldr	r1, [r5, #8]
   45d02:	3008      	adds	r0, #8
   45d04:	f001 ffcd 	bl	47ca2 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   45d08:	4628      	mov	r0, r5
   45d0a:	f7f7 fa17 	bl	3d13c <net_buf_unref>
		break;
   45d0e:	e7cb      	b.n	45ca8 <bt_conn_recv+0x20>
	conn->rx = NULL;
   45d10:	2300      	movs	r3, #0
   45d12:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   45d14:	4620      	mov	r0, r4
   45d16:	2201      	movs	r2, #1
}
   45d18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   45d1c:	f000 b9eb 	b.w	460f6 <bt_l2cap_recv>
}
   45d20:	bd70      	pop	{r4, r5, r6, pc}

00045d22 <bt_conn_ref>:
{
   45d22:	b510      	push	{r4, lr}
   45d24:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   45d26:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   45d2a:	4610      	mov	r0, r2
   45d2c:	f7ff ff59 	bl	45be2 <atomic_get>
		if (!old) {
   45d30:	b180      	cbz	r0, 45d54 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   45d32:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   45d36:	1c41      	adds	r1, r0, #1
   45d38:	e852 4f00 	ldrex	r4, [r2]
   45d3c:	4284      	cmp	r4, r0
   45d3e:	d104      	bne.n	45d4a <bt_conn_ref+0x28>
   45d40:	e842 1c00 	strex	ip, r1, [r2]
   45d44:	f1bc 0f00 	cmp.w	ip, #0
   45d48:	d1f6      	bne.n	45d38 <bt_conn_ref+0x16>
   45d4a:	f3bf 8f5b 	dmb	ish
   45d4e:	d1ec      	bne.n	45d2a <bt_conn_ref+0x8>
}
   45d50:	4618      	mov	r0, r3
   45d52:	bd10      	pop	{r4, pc}
			return NULL;
   45d54:	4603      	mov	r3, r0
   45d56:	e7fb      	b.n	45d50 <bt_conn_ref+0x2e>

00045d58 <bt_conn_unref>:
{
   45d58:	b508      	push	{r3, lr}
   45d5a:	4603      	mov	r3, r0
	old = atomic_dec(&conn->ref);
   45d5c:	30bc      	adds	r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   45d5e:	f3bf 8f5b 	dmb	ish
   45d62:	e850 2f00 	ldrex	r2, [r0]
   45d66:	3a01      	subs	r2, #1
   45d68:	e840 2100 	strex	r1, r2, [r0]
   45d6c:	2900      	cmp	r1, #0
   45d6e:	d1f8      	bne.n	45d62 <bt_conn_unref+0xa>
   45d70:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   45d74:	789b      	ldrb	r3, [r3, #2]
   45d76:	2b01      	cmp	r3, #1
   45d78:	d106      	bne.n	45d88 <bt_conn_unref+0x30>
	    atomic_get(&conn->ref) == 0) {
   45d7a:	f7ff ff32 	bl	45be2 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   45d7e:	b918      	cbnz	r0, 45d88 <bt_conn_unref+0x30>
}
   45d80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   45d84:	f7e6 b9b6 	b.w	2c0f4 <bt_le_adv_resume>
}
   45d88:	bd08      	pop	{r3, pc}

00045d8a <conn_lookup_handle>:
{
   45d8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   45d8e:	4607      	mov	r7, r0
   45d90:	460e      	mov	r6, r1
   45d92:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   45d94:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   45d96:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   45d9a:	42b4      	cmp	r4, r6
   45d9c:	d103      	bne.n	45da6 <conn_lookup_handle+0x1c>
	return NULL;
   45d9e:	2300      	movs	r3, #0
}
   45da0:	4618      	mov	r0, r3
   45da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   45da6:	fb09 7004 	mla	r0, r9, r4, r7
   45daa:	f7ff ffba 	bl	45d22 <bt_conn_ref>
   45dae:	4603      	mov	r3, r0
		if (!conn) {
   45db0:	b158      	cbz	r0, 45dca <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   45db2:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   45db4:	2d01      	cmp	r5, #1
   45db6:	d002      	beq.n	45dbe <conn_lookup_handle+0x34>
   45db8:	3d07      	subs	r5, #7
   45dba:	2d01      	cmp	r5, #1
   45dbc:	d803      	bhi.n	45dc6 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   45dbe:	881a      	ldrh	r2, [r3, #0]
   45dc0:	4542      	cmp	r2, r8
   45dc2:	d0ed      	beq.n	45da0 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   45dc4:	4618      	mov	r0, r3
   45dc6:	f7ff ffc7 	bl	45d58 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   45dca:	3401      	adds	r4, #1
   45dcc:	e7e5      	b.n	45d9a <conn_lookup_handle+0x10>

00045dce <bt_conn_connected>:
{
   45dce:	b510      	push	{r4, lr}
   45dd0:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   45dd2:	f7e6 ffb7 	bl	2cd44 <bt_l2cap_connected>
	notify_connected(conn);
   45dd6:	4620      	mov	r0, r4
}
   45dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   45ddc:	f7e6 baea 	b.w	2c3b4 <notify_connected>

00045de0 <bt_conn_disconnect>:
{
   45de0:	b538      	push	{r3, r4, r5, lr}
	switch (conn->state) {
   45de2:	7b43      	ldrb	r3, [r0, #13]
   45de4:	3b02      	subs	r3, #2
{
   45de6:	4604      	mov	r4, r0
	switch (conn->state) {
   45de8:	2b06      	cmp	r3, #6
   45dea:	d805      	bhi.n	45df8 <bt_conn_disconnect+0x18>
   45dec:	e8df f003 	tbb	[pc, r3]
   45df0:	04040408 	.word	0x04040408
   45df4:	0e0c      	.short	0x0e0c
   45df6:	0c          	.byte	0x0c
   45df7:	00          	.byte	0x00
   45df8:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   45dfc:	4628      	mov	r0, r5
   45dfe:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   45e00:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   45e02:	2100      	movs	r1, #0
   45e04:	f7e6 fc2c 	bl	2c660 <bt_conn_set_state>
		return 0;
   45e08:	2500      	movs	r5, #0
   45e0a:	e7f7      	b.n	45dfc <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   45e0c:	8800      	ldrh	r0, [r0, #0]
   45e0e:	f7ff fb22 	bl	45456 <bt_hci_disconnect>
	if (err) {
   45e12:	4605      	mov	r5, r0
   45e14:	2800      	cmp	r0, #0
   45e16:	d1f1      	bne.n	45dfc <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   45e18:	7b63      	ldrb	r3, [r4, #13]
   45e1a:	2b07      	cmp	r3, #7
   45e1c:	d1ee      	bne.n	45dfc <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   45e1e:	2108      	movs	r1, #8
   45e20:	4620      	mov	r0, r4
   45e22:	f7e6 fc1d 	bl	2c660 <bt_conn_set_state>
   45e26:	e7e9      	b.n	45dfc <bt_conn_disconnect+0x1c>

00045e28 <bt_conn_set_security>:
{
   45e28:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   45e2a:	7b43      	ldrb	r3, [r0, #13]
   45e2c:	2b07      	cmp	r3, #7
{
   45e2e:	4604      	mov	r4, r0
   45e30:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   45e32:	d124      	bne.n	45e7e <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   45e34:	7a43      	ldrb	r3, [r0, #9]
   45e36:	428b      	cmp	r3, r1
   45e38:	d224      	bcs.n	45e84 <bt_conn_set_security+0x5c>
   45e3a:	7a83      	ldrb	r3, [r0, #10]
   45e3c:	428b      	cmp	r3, r1
   45e3e:	d221      	bcs.n	45e84 <bt_conn_set_security+0x5c>
	if (val) {
   45e40:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   45e42:	f100 0004 	add.w	r0, r0, #4
   45e46:	d515      	bpl.n	45e74 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45e48:	f3bf 8f5b 	dmb	ish
   45e4c:	e850 3f00 	ldrex	r3, [r0]
   45e50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   45e54:	e840 3200 	strex	r2, r3, [r0]
   45e58:	2a00      	cmp	r2, #0
   45e5a:	d1f7      	bne.n	45e4c <bt_conn_set_security+0x24>
   45e5c:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   45e60:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   45e64:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   45e66:	4620      	mov	r0, r4
   45e68:	f7e9 f9e6 	bl	2f238 <bt_smp_start_security>
	if (err) {
   45e6c:	b108      	cbz	r0, 45e72 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   45e6e:	7a63      	ldrb	r3, [r4, #9]
   45e70:	72a3      	strb	r3, [r4, #10]
}
   45e72:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   45e74:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   45e78:	f7ff fea4 	bl	45bc4 <atomic_and>
   45e7c:	e7f0      	b.n	45e60 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   45e7e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   45e82:	e7f6      	b.n	45e72 <bt_conn_set_security+0x4a>
		return 0;
   45e84:	2000      	movs	r0, #0
   45e86:	e7f4      	b.n	45e72 <bt_conn_set_security+0x4a>

00045e88 <bt_conn_get_security>:
}
   45e88:	7a40      	ldrb	r0, [r0, #9]
   45e8a:	4770      	bx	lr

00045e8c <bt_conn_is_peer_addr_le>:
{
   45e8c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   45e8e:	7a03      	ldrb	r3, [r0, #8]
   45e90:	428b      	cmp	r3, r1
{
   45e92:	4604      	mov	r4, r0
   45e94:	4615      	mov	r5, r2
	if (id != conn->id) {
   45e96:	d115      	bne.n	45ec4 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   45e98:	f100 0188 	add.w	r1, r0, #136	; 0x88
   45e9c:	2207      	movs	r2, #7
   45e9e:	4628      	mov	r0, r5
   45ea0:	f7fe ff9f 	bl	44de2 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   45ea4:	b180      	cbz	r0, 45ec8 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   45ea6:	78e3      	ldrb	r3, [r4, #3]
   45ea8:	2207      	movs	r2, #7
   45eaa:	b943      	cbnz	r3, 45ebe <bt_conn_is_peer_addr_le+0x32>
   45eac:	f104 0196 	add.w	r1, r4, #150	; 0x96
   45eb0:	4628      	mov	r0, r5
   45eb2:	f7fe ff96 	bl	44de2 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   45eb6:	fab0 f080 	clz	r0, r0
   45eba:	0940      	lsrs	r0, r0, #5
}
   45ebc:	bd38      	pop	{r3, r4, r5, pc}
   45ebe:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   45ec2:	e7f5      	b.n	45eb0 <bt_conn_is_peer_addr_le+0x24>
		return false;
   45ec4:	2000      	movs	r0, #0
   45ec6:	e7f9      	b.n	45ebc <bt_conn_is_peer_addr_le+0x30>
		return true;
   45ec8:	2001      	movs	r0, #1
   45eca:	e7f7      	b.n	45ebc <bt_conn_is_peer_addr_le+0x30>

00045ecc <bt_conn_exists_le>:
{
   45ecc:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   45ece:	f7e6 fda3 	bl	2ca18 <bt_conn_lookup_addr_le>
	if (conn) {
   45ed2:	b110      	cbz	r0, 45eda <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   45ed4:	f7ff ff40 	bl	45d58 <bt_conn_unref>
		return true;
   45ed8:	2001      	movs	r0, #1
}
   45eda:	bd08      	pop	{r3, pc}

00045edc <bt_conn_get_dst>:
}
   45edc:	3088      	adds	r0, #136	; 0x88
   45ede:	4770      	bx	lr

00045ee0 <bt_conn_le_conn_update>:
{
   45ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45ee2:	4607      	mov	r7, r0
   45ee4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   45ee6:	f242 0013 	movw	r0, #8211	; 0x2013
   45eea:	210e      	movs	r1, #14
   45eec:	f7e5 f844 	bl	2af78 <bt_hci_cmd_create>
	if (!buf) {
   45ef0:	4606      	mov	r6, r0
   45ef2:	b1d0      	cbz	r0, 45f2a <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   45ef4:	210e      	movs	r1, #14
   45ef6:	3008      	adds	r0, #8
   45ef8:	f001 fecd 	bl	47c96 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   45efc:	220e      	movs	r2, #14
   45efe:	4604      	mov	r4, r0
   45f00:	2100      	movs	r1, #0
   45f02:	f7fe ff89 	bl	44e18 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   45f06:	883b      	ldrh	r3, [r7, #0]
   45f08:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   45f0a:	882b      	ldrh	r3, [r5, #0]
   45f0c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   45f0e:	886b      	ldrh	r3, [r5, #2]
   45f10:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   45f12:	88ab      	ldrh	r3, [r5, #4]
   45f14:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   45f16:	88eb      	ldrh	r3, [r5, #6]
   45f18:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   45f1a:	4631      	mov	r1, r6
   45f1c:	2200      	movs	r2, #0
}
   45f1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   45f22:	f242 0013 	movw	r0, #8211	; 0x2013
   45f26:	f7e5 b883 	b.w	2b030 <bt_hci_cmd_send_sync>
}
   45f2a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   45f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00045f30 <l2cap_connected>:
}
   45f30:	4770      	bx	lr

00045f32 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   45f32:	3010      	adds	r0, #16
   45f34:	f002 be86 	b.w	48c44 <k_work_cancel_delayable>

00045f38 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   45f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45f3a:	4607      	mov	r7, r0
   45f3c:	460e      	mov	r6, r1
   45f3e:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   45f40:	2300      	movs	r3, #0
   45f42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   45f46:	2104      	movs	r1, #4
   45f48:	2000      	movs	r0, #0
   45f4a:	f7e6 fc3d 	bl	2c7c8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   45f4e:	4604      	mov	r4, r0
   45f50:	b130      	cbz	r0, 45f60 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   45f52:	2104      	movs	r1, #4
   45f54:	3008      	adds	r0, #8
   45f56:	f001 fe9e 	bl	47c96 <net_buf_simple_add>
	hdr->code = code;
   45f5a:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   45f5c:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   45f5e:	8045      	strh	r5, [r0, #2]
}
   45f60:	4620      	mov	r0, r4
   45f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00045f64 <bt_l2cap_chan_remove>:
	return list->head;
   45f64:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   45f66:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   45f68:	b173      	cbz	r3, 45f88 <bt_l2cap_chan_remove+0x24>
   45f6a:	3b08      	subs	r3, #8
   45f6c:	2500      	movs	r5, #0
	return node->next;
   45f6e:	461a      	mov	r2, r3
		if (chan == ch) {
   45f70:	4299      	cmp	r1, r3
   45f72:	f852 4f08 	ldr.w	r4, [r2, #8]!
   45f76:	d10d      	bne.n	45f94 <bt_l2cap_chan_remove+0x30>
	return list->tail;
   45f78:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   45f7a:	b935      	cbnz	r5, 45f8a <bt_l2cap_chan_remove+0x26>
   45f7c:	4291      	cmp	r1, r2
	list->head = node;
   45f7e:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   45f80:	d100      	bne.n	45f84 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   45f82:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   45f84:	2200      	movs	r2, #0
   45f86:	609a      	str	r2, [r3, #8]
}
   45f88:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   45f8a:	4291      	cmp	r1, r2
	parent->next = child;
   45f8c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   45f8e:	bf08      	it	eq
   45f90:	6545      	streq	r5, [r0, #84]	; 0x54
}
   45f92:	e7f7      	b.n	45f84 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   45f94:	2c00      	cmp	r4, #0
   45f96:	d0f7      	beq.n	45f88 <bt_l2cap_chan_remove+0x24>
   45f98:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   45f9c:	4615      	mov	r5, r2
   45f9e:	e7e6      	b.n	45f6e <bt_l2cap_chan_remove+0xa>

00045fa0 <bt_l2cap_chan_del>:
{
   45fa0:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   45fa2:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   45fa6:	4604      	mov	r4, r0
	if (!chan->conn) {
   45fa8:	b123      	cbz	r3, 45fb4 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   45faa:	686b      	ldr	r3, [r5, #4]
   45fac:	b103      	cbz	r3, 45fb0 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   45fae:	4798      	blx	r3
	chan->conn = NULL;
   45fb0:	2300      	movs	r3, #0
   45fb2:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   45fb4:	68e3      	ldr	r3, [r4, #12]
   45fb6:	b10b      	cbz	r3, 45fbc <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   45fb8:	4620      	mov	r0, r4
   45fba:	4798      	blx	r3
	if (ops->released) {
   45fbc:	69eb      	ldr	r3, [r5, #28]
   45fbe:	b11b      	cbz	r3, 45fc8 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   45fc0:	4620      	mov	r0, r4
}
   45fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   45fc6:	4718      	bx	r3
}
   45fc8:	bd70      	pop	{r4, r5, r6, pc}

00045fca <l2cap_rtx_timeout>:
{
   45fca:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   45fcc:	f1a0 0410 	sub.w	r4, r0, #16
   45fd0:	4621      	mov	r1, r4
   45fd2:	f850 0c10 	ldr.w	r0, [r0, #-16]
   45fd6:	f7ff ffc5 	bl	45f64 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   45fda:	4620      	mov	r0, r4
}
   45fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   45fe0:	f7ff bfde 	b.w	45fa0 <bt_l2cap_chan_del>

00045fe4 <bt_l2cap_disconnected>:
	return list->head;
   45fe4:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   45fe6:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   45fe8:	b160      	cbz	r0, 46004 <bt_l2cap_disconnected+0x20>
	return node->next;
   45fea:	f850 4908 	ldr.w	r4, [r0], #-8
   45fee:	b104      	cbz	r4, 45ff2 <bt_l2cap_disconnected+0xe>
   45ff0:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   45ff2:	f7ff ffd5 	bl	45fa0 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   45ff6:	b12c      	cbz	r4, 46004 <bt_l2cap_disconnected+0x20>
   45ff8:	68a3      	ldr	r3, [r4, #8]
   45ffa:	b103      	cbz	r3, 45ffe <bt_l2cap_disconnected+0x1a>
   45ffc:	3b08      	subs	r3, #8
{
   45ffe:	4620      	mov	r0, r4
   46000:	461c      	mov	r4, r3
   46002:	e7f6      	b.n	45ff2 <bt_l2cap_disconnected+0xe>
}
   46004:	bd10      	pop	{r4, pc}

00046006 <bt_l2cap_security_changed>:
	return list->head;
   46006:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   46008:	b538      	push	{r3, r4, r5, lr}
   4600a:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4600c:	b178      	cbz	r0, 4602e <bt_l2cap_security_changed+0x28>
	return node->next;
   4600e:	f850 4908 	ldr.w	r4, [r0], #-8
   46012:	b104      	cbz	r4, 46016 <bt_l2cap_security_changed+0x10>
   46014:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   46016:	6843      	ldr	r3, [r0, #4]
   46018:	689b      	ldr	r3, [r3, #8]
   4601a:	b10b      	cbz	r3, 46020 <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   4601c:	4629      	mov	r1, r5
   4601e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   46020:	b12c      	cbz	r4, 4602e <bt_l2cap_security_changed+0x28>
   46022:	68a3      	ldr	r3, [r4, #8]
   46024:	b103      	cbz	r3, 46028 <bt_l2cap_security_changed+0x22>
   46026:	3b08      	subs	r3, #8
{
   46028:	4620      	mov	r0, r4
   4602a:	461c      	mov	r4, r3
   4602c:	e7f3      	b.n	46016 <bt_l2cap_security_changed+0x10>
}
   4602e:	bd38      	pop	{r3, r4, r5, pc}

00046030 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   46030:	3104      	adds	r1, #4
   46032:	f7e6 bbc9 	b.w	2c7c8 <bt_conn_create_pdu_timeout>

00046036 <bt_l2cap_send_cb>:
{
   46036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4603a:	4614      	mov	r4, r2
   4603c:	4605      	mov	r5, r0
   4603e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   46040:	f102 0008 	add.w	r0, r2, #8
   46044:	2104      	movs	r1, #4
   46046:	461e      	mov	r6, r3
   46048:	f8dd 8018 	ldr.w	r8, [sp, #24]
   4604c:	f001 fe3a 	bl	47cc4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   46050:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   46052:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   46054:	3a04      	subs	r2, #4
   46056:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   46058:	4643      	mov	r3, r8
   4605a:	4632      	mov	r2, r6
   4605c:	4621      	mov	r1, r4
   4605e:	4628      	mov	r0, r5
}
   46060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   46064:	f7e6 ba8a 	b.w	2c57c <bt_conn_send_cb>

00046068 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   46068:	898b      	ldrh	r3, [r1, #12]
   4606a:	2b03      	cmp	r3, #3
{
   4606c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4606e:	4605      	mov	r5, r0
   46070:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   46072:	d927      	bls.n	460c4 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   46074:	2104      	movs	r1, #4
   46076:	f104 0008 	add.w	r0, r4, #8
   4607a:	f001 fe33 	bl	47ce4 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   4607e:	89a3      	ldrh	r3, [r4, #12]
   46080:	8842      	ldrh	r2, [r0, #2]
   46082:	429a      	cmp	r2, r3
   46084:	d11e      	bne.n	460c4 <l2cap_recv+0x5c>
	if (!hdr->ident) {
   46086:	7841      	ldrb	r1, [r0, #1]
   46088:	b1e1      	cbz	r1, 460c4 <l2cap_recv+0x5c>
	switch (hdr->code) {
   4608a:	7803      	ldrb	r3, [r0, #0]
   4608c:	2b01      	cmp	r3, #1
   4608e:	d019      	beq.n	460c4 <l2cap_recv+0x5c>
   46090:	2b13      	cmp	r3, #19
   46092:	d017      	beq.n	460c4 <l2cap_recv+0x5c>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   46094:	2202      	movs	r2, #2
   46096:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   46098:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   4609a:	f7ff ff4d 	bl	45f38 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   4609e:	4604      	mov	r4, r0
   460a0:	b180      	cbz	r0, 460c4 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   460a2:	2102      	movs	r1, #2
   460a4:	3008      	adds	r0, #8
   460a6:	f001 fdf6 	bl	47c96 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   460aa:	2300      	movs	r3, #0
   460ac:	7003      	strb	r3, [r0, #0]
   460ae:	7043      	strb	r3, [r0, #1]
   460b0:	4622      	mov	r2, r4
   460b2:	9300      	str	r3, [sp, #0]
   460b4:	2105      	movs	r1, #5
   460b6:	4628      	mov	r0, r5
   460b8:	f7ff ffbd 	bl	46036 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   460bc:	b110      	cbz	r0, 460c4 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   460be:	4620      	mov	r0, r4
   460c0:	f7f7 f83c 	bl	3d13c <net_buf_unref>
}
   460c4:	2000      	movs	r0, #0
   460c6:	b003      	add	sp, #12
   460c8:	bd30      	pop	{r4, r5, pc}

000460ca <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   460ca:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   460cc:	b138      	cbz	r0, 460de <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   460ce:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   460d2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   460d4:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   460d8:	d001      	beq.n	460de <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   460da:	6880      	ldr	r0, [r0, #8]
   460dc:	e7f6      	b.n	460cc <bt_l2cap_le_lookup_tx_cid+0x2>
}
   460de:	4770      	bx	lr

000460e0 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   460e0:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   460e2:	b138      	cbz	r0, 460f4 <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   460e4:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   460e8:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   460ea:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   460ee:	d001      	beq.n	460f4 <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   460f0:	6880      	ldr	r0, [r0, #8]
   460f2:	e7f6      	b.n	460e2 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   460f4:	4770      	bx	lr

000460f6 <bt_l2cap_recv>:
{
   460f6:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   460f8:	898b      	ldrh	r3, [r1, #12]
   460fa:	2b03      	cmp	r3, #3
{
   460fc:	4605      	mov	r5, r0
   460fe:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   46100:	d804      	bhi.n	4610c <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   46102:	4620      	mov	r0, r4
}
   46104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   46108:	f7f7 b818 	b.w	3d13c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   4610c:	2104      	movs	r1, #4
   4610e:	f104 0008 	add.w	r0, r4, #8
   46112:	f001 fde7 	bl	47ce4 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   46116:	8841      	ldrh	r1, [r0, #2]
   46118:	4628      	mov	r0, r5
   4611a:	f7ff ffe1 	bl	460e0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4611e:	2800      	cmp	r0, #0
   46120:	d0ef      	beq.n	46102 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   46122:	6843      	ldr	r3, [r0, #4]
   46124:	4621      	mov	r1, r4
   46126:	691b      	ldr	r3, [r3, #16]
   46128:	4798      	blx	r3
   4612a:	e7ea      	b.n	46102 <bt_l2cap_recv+0xc>

0004612c <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   4612c:	4770      	bx	lr

0004612e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   4612e:	4603      	mov	r3, r0
	return list->head;
   46130:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   46132:	b128      	cbz	r0, 46140 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   46134:	6859      	ldr	r1, [r3, #4]
	return node->next;
   46136:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   46138:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4613a:	4288      	cmp	r0, r1
	list->tail = node;
   4613c:	bf08      	it	eq
   4613e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   46140:	4770      	bx	lr

00046142 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   46142:	4603      	mov	r3, r0
	size_t bytes = 0;
   46144:	2000      	movs	r0, #0

	while (buf) {
   46146:	b903      	cbnz	r3, 4614a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   46148:	4770      	bx	lr
		bytes += buf->len;
   4614a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   4614c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   4614e:	4410      	add	r0, r2
		buf = buf->frags;
   46150:	e7f9      	b.n	46146 <net_buf_frags_len+0x4>

00046152 <att_sent>:
	if (chan->ops->sent) {
   46152:	684b      	ldr	r3, [r1, #4]
   46154:	695b      	ldr	r3, [r3, #20]
{
   46156:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   46158:	b103      	cbz	r3, 4615c <att_sent+0xa>
		chan->ops->sent(chan);
   4615a:	4718      	bx	r3
}
   4615c:	4770      	bx	lr

0004615e <attr_read_type_cb>:
{
   4615e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   46160:	68d4      	ldr	r4, [r2, #12]
   46162:	7823      	ldrb	r3, [r4, #0]
   46164:	3102      	adds	r1, #2
   46166:	b913      	cbnz	r3, 4616e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   46168:	7021      	strb	r1, [r4, #0]
	return true;
   4616a:	2001      	movs	r0, #1
   4616c:	e006      	b.n	4617c <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   4616e:	428b      	cmp	r3, r1
   46170:	d0fb      	beq.n	4616a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   46172:	8983      	ldrh	r3, [r0, #12]
   46174:	3b02      	subs	r3, #2
   46176:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   46178:	2000      	movs	r0, #0
   4617a:	6110      	str	r0, [r2, #16]
}
   4617c:	bd10      	pop	{r4, pc}

0004617e <att_prepare_write_req>:
}
   4617e:	2006      	movs	r0, #6
   46180:	4770      	bx	lr

00046182 <bt_gatt_foreach_attr>:
{
   46182:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   46184:	e9cd 2301 	strd	r2, r3, [sp, #4]
   46188:	2300      	movs	r3, #0
   4618a:	9300      	str	r3, [sp, #0]
   4618c:	461a      	mov	r2, r3
   4618e:	f7e7 fee5 	bl	2df5c <bt_gatt_foreach_attr_type>
}
   46192:	b005      	add	sp, #20
   46194:	f85d fb04 	ldr.w	pc, [sp], #4

00046198 <find_type_cb>:
{
   46198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   4619c:	f8d2 9000 	ldr.w	r9, [r2]
{
   461a0:	b091      	sub	sp, #68	; 0x44
   461a2:	4607      	mov	r7, r0
   461a4:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   461a6:	2500      	movs	r5, #0
   461a8:	f642 0301 	movw	r3, #10241	; 0x2801
   461ac:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   461ae:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   461b2:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   461b6:	a90b      	add	r1, sp, #44	; 0x2c
{
   461b8:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   461ba:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   461be:	f7fe ff0e 	bl	44fde <bt_uuid_cmp>
   461c2:	2800      	cmp	r0, #0
   461c4:	d079      	beq.n	462ba <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   461c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   461ca:	6838      	ldr	r0, [r7, #0]
   461cc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   461d0:	a90b      	add	r1, sp, #44	; 0x2c
   461d2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   461d6:	f7fe ff02 	bl	44fde <bt_uuid_cmp>
   461da:	b138      	cbz	r0, 461ec <find_type_cb+0x54>
		if (data->group &&
   461dc:	68a3      	ldr	r3, [r4, #8]
   461de:	b11b      	cbz	r3, 461e8 <find_type_cb+0x50>
   461e0:	885a      	ldrh	r2, [r3, #2]
   461e2:	42b2      	cmp	r2, r6
   461e4:	d200      	bcs.n	461e8 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   461e6:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   461e8:	2001      	movs	r0, #1
   461ea:	e009      	b.n	46200 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   461ec:	6861      	ldr	r1, [r4, #4]
   461ee:	4608      	mov	r0, r1
   461f0:	f7ff ffa7 	bl	46142 <net_buf_frags_len>
   461f4:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   461f8:	1a1b      	subs	r3, r3, r0
   461fa:	2b03      	cmp	r3, #3
   461fc:	d803      	bhi.n	46206 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   461fe:	2000      	movs	r0, #0
}
   46200:	b011      	add	sp, #68	; 0x44
   46202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   46206:	4608      	mov	r0, r1
   46208:	f001 fd17 	bl	47c3a <net_buf_frag_last>
   4620c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   4620e:	6860      	ldr	r0, [r4, #4]
   46210:	f7ff ff97 	bl	46142 <net_buf_frags_len>
   46214:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   46218:	f105 0b08 	add.w	fp, r5, #8
   4621c:	ebaa 0a00 	sub.w	sl, sl, r0
   46220:	4658      	mov	r0, fp
   46222:	f001 fd73 	bl	47d0c <net_buf_simple_tailroom>
   46226:	4582      	cmp	sl, r0
   46228:	d23f      	bcs.n	462aa <find_type_cb+0x112>
   4622a:	6860      	ldr	r0, [r4, #4]
   4622c:	f7ff ff89 	bl	46142 <net_buf_frags_len>
   46230:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   46234:	1a18      	subs	r0, r3, r0
	if (!len) {
   46236:	b970      	cbnz	r0, 46256 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   46238:	6863      	ldr	r3, [r4, #4]
   4623a:	7998      	ldrb	r0, [r3, #6]
   4623c:	f7f6 feba 	bl	3cfb4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   46240:	2200      	movs	r2, #0
   46242:	2300      	movs	r3, #0
   46244:	f001 fcc5 	bl	47bd2 <net_buf_alloc_fixed>
		if (!frag) {
   46248:	4605      	mov	r5, r0
   4624a:	2800      	cmp	r0, #0
   4624c:	d0d7      	beq.n	461fe <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   4624e:	4601      	mov	r1, r0
   46250:	6860      	ldr	r0, [r4, #4]
   46252:	f001 fd03 	bl	47c5c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   46256:	2300      	movs	r3, #0
   46258:	9300      	str	r3, [sp, #0]
   4625a:	f8d7 9004 	ldr.w	r9, [r7, #4]
   4625e:	4639      	mov	r1, r7
   46260:	2310      	movs	r3, #16
   46262:	aa02      	add	r2, sp, #8
   46264:	4640      	mov	r0, r8
   46266:	47c8      	blx	r9
	if (read < 0) {
   46268:	1e07      	subs	r7, r0, #0
   4626a:	db26      	blt.n	462ba <find_type_cb+0x122>
	if (read != data->value_len) {
   4626c:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   4626e:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   46270:	42ba      	cmp	r2, r7
   46272:	d01e      	beq.n	462b2 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   46274:	4601      	mov	r1, r0
   46276:	a80b      	add	r0, sp, #44	; 0x2c
   46278:	f7fe fedf 	bl	4503a <bt_uuid_create>
   4627c:	b1e8      	cbz	r0, 462ba <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   4627e:	b2fa      	uxtb	r2, r7
   46280:	a902      	add	r1, sp, #8
   46282:	a806      	add	r0, sp, #24
   46284:	f7fe fed9 	bl	4503a <bt_uuid_create>
   46288:	b1b8      	cbz	r0, 462ba <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   4628a:	a906      	add	r1, sp, #24
   4628c:	a80b      	add	r0, sp, #44	; 0x2c
   4628e:	f7fe fea6 	bl	44fde <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   46292:	b990      	cbnz	r0, 462ba <find_type_cb+0x122>
	data->err = 0x00;
   46294:	2300      	movs	r3, #0
   46296:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   46298:	2104      	movs	r1, #4
   4629a:	f105 0008 	add.w	r0, r5, #8
   4629e:	f001 fcfa 	bl	47c96 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   462a2:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   462a4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   462a6:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   462a8:	e79e      	b.n	461e8 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   462aa:	4658      	mov	r0, fp
   462ac:	f001 fd2e 	bl	47d0c <net_buf_simple_tailroom>
   462b0:	e7c1      	b.n	46236 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   462b2:	a902      	add	r1, sp, #8
   462b4:	f7fe fd95 	bl	44de2 <memcmp>
   462b8:	e7eb      	b.n	46292 <find_type_cb+0xfa>
	data->group = NULL;
   462ba:	2300      	movs	r3, #0
   462bc:	60a3      	str	r3, [r4, #8]
   462be:	e793      	b.n	461e8 <find_type_cb+0x50>

000462c0 <find_info_cb>:
{
   462c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   462c2:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   462c4:	6817      	ldr	r7, [r2, #0]
{
   462c6:	4605      	mov	r5, r0
   462c8:	460e      	mov	r6, r1
   462ca:	4614      	mov	r4, r2
	if (!data->rsp) {
   462cc:	b963      	cbnz	r3, 462e8 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   462ce:	6850      	ldr	r0, [r2, #4]
   462d0:	2101      	movs	r1, #1
   462d2:	3008      	adds	r0, #8
   462d4:	f001 fcdf 	bl	47c96 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   462d8:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   462da:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   462dc:	781b      	ldrb	r3, [r3, #0]
   462de:	2b00      	cmp	r3, #0
   462e0:	bf0c      	ite	eq
   462e2:	2301      	moveq	r3, #1
   462e4:	2302      	movne	r3, #2
   462e6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   462e8:	68a3      	ldr	r3, [r4, #8]
   462ea:	781b      	ldrb	r3, [r3, #0]
   462ec:	2b01      	cmp	r3, #1
   462ee:	d003      	beq.n	462f8 <find_info_cb+0x38>
   462f0:	2b02      	cmp	r3, #2
   462f2:	d019      	beq.n	46328 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   462f4:	2000      	movs	r0, #0
   462f6:	e016      	b.n	46326 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   462f8:	682b      	ldr	r3, [r5, #0]
   462fa:	781b      	ldrb	r3, [r3, #0]
   462fc:	2b00      	cmp	r3, #0
   462fe:	d1f9      	bne.n	462f4 <find_info_cb+0x34>
   46300:	6860      	ldr	r0, [r4, #4]
   46302:	2104      	movs	r1, #4
   46304:	3008      	adds	r0, #8
   46306:	f001 fcc6 	bl	47c96 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4630a:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   4630c:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4630e:	885b      	ldrh	r3, [r3, #2]
   46310:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   46312:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   46314:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   46316:	899b      	ldrh	r3, [r3, #12]
   46318:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   4631c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   4631e:	2804      	cmp	r0, #4
   46320:	bf94      	ite	ls
   46322:	2000      	movls	r0, #0
   46324:	2001      	movhi	r0, #1
}
   46326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   46328:	682b      	ldr	r3, [r5, #0]
   4632a:	781b      	ldrb	r3, [r3, #0]
   4632c:	2b02      	cmp	r3, #2
   4632e:	d1e1      	bne.n	462f4 <find_info_cb+0x34>
   46330:	6860      	ldr	r0, [r4, #4]
   46332:	2112      	movs	r1, #18
   46334:	3008      	adds	r0, #8
   46336:	f001 fcae 	bl	47c96 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4633a:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   4633c:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4633e:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   46340:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   46344:	3101      	adds	r1, #1
   46346:	f7fe fd5c 	bl	44e02 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   4634a:	6863      	ldr	r3, [r4, #4]
   4634c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   46350:	899b      	ldrh	r3, [r3, #12]
   46352:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   46354:	2812      	cmp	r0, #18
   46356:	e7e3      	b.n	46320 <find_info_cb+0x60>

00046358 <att_chan_mtu_updated>:
{
   46358:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   4635a:	6806      	ldr	r6, [r0, #0]
	return list->head;
   4635c:	6a72      	ldr	r2, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4635e:	b1e2      	cbz	r2, 4639a <att_chan_mtu_updated+0x42>
	return node->next;
   46360:	6813      	ldr	r3, [r2, #0]
   46362:	f5a2 75a2 	sub.w	r5, r2, #324	; 0x144
   46366:	b10b      	cbz	r3, 4636c <att_chan_mtu_updated+0x14>
   46368:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   4636c:	2200      	movs	r2, #0
   4636e:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   46370:	42a8      	cmp	r0, r5
   46372:	d009      	beq.n	46388 <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   46374:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   46378:	42a1      	cmp	r1, r4
   4637a:	bf38      	it	cc
   4637c:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   4637e:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   46382:	42a2      	cmp	r2, r4
   46384:	bf38      	it	cc
   46386:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46388:	b143      	cbz	r3, 4639c <att_chan_mtu_updated+0x44>
   4638a:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
   4638e:	b10c      	cbz	r4, 46394 <att_chan_mtu_updated+0x3c>
   46390:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   46394:	461d      	mov	r5, r3
   46396:	4623      	mov	r3, r4
   46398:	e7ea      	b.n	46370 <att_chan_mtu_updated+0x18>
   4639a:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4639c:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   463a0:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   463a4:	428b      	cmp	r3, r1
   463a6:	d801      	bhi.n	463ac <att_chan_mtu_updated+0x54>
   463a8:	4290      	cmp	r0, r2
   463aa:	d909      	bls.n	463c0 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   463ac:	4282      	cmp	r2, r0
   463ae:	bf38      	it	cc
   463b0:	4602      	movcc	r2, r0
   463b2:	4299      	cmp	r1, r3
   463b4:	6830      	ldr	r0, [r6, #0]
   463b6:	bf38      	it	cc
   463b8:	4619      	movcc	r1, r3
}
   463ba:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   463bc:	f7e8 b994 	b.w	2e6e8 <bt_gatt_att_max_mtu_changed>
}
   463c0:	bc70      	pop	{r4, r5, r6}
   463c2:	4770      	bx	lr

000463c4 <attr_read_group_cb>:
	if (!data->rsp->len) {
   463c4:	68d0      	ldr	r0, [r2, #12]
   463c6:	7803      	ldrb	r3, [r0, #0]
   463c8:	3104      	adds	r1, #4
   463ca:	b913      	cbnz	r3, 463d2 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   463cc:	7001      	strb	r1, [r0, #0]
	return true;
   463ce:	2001      	movs	r0, #1
}
   463d0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   463d2:	428b      	cmp	r3, r1
   463d4:	d0fb      	beq.n	463ce <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   463d6:	6891      	ldr	r1, [r2, #8]
   463d8:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   463da:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   463dc:	3b04      	subs	r3, #4
   463de:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   463e0:	6110      	str	r0, [r2, #16]
		return false;
   463e2:	4770      	bx	lr

000463e4 <att_get>:
{
   463e4:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   463e6:	7b43      	ldrb	r3, [r0, #13]
   463e8:	2b07      	cmp	r3, #7
   463ea:	d001      	beq.n	463f0 <att_get+0xc>
		return NULL;
   463ec:	2000      	movs	r0, #0
}
   463ee:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   463f0:	2104      	movs	r1, #4
   463f2:	f7ff fe75 	bl	460e0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   463f6:	2800      	cmp	r0, #0
   463f8:	d0f8      	beq.n	463ec <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   463fa:	f3bf 8f5b 	dmb	ish
   463fe:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   46402:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   46406:	075b      	lsls	r3, r3, #29
   46408:	d4f0      	bmi.n	463ec <att_get+0x8>
	return att_chan->att;
   4640a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   4640e:	e7ee      	b.n	463ee <att_get+0xa>

00046410 <chan_req_sent>:
	if (chan->req) {
   46410:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   46414:	b133      	cbz	r3, 46424 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   46416:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4641a:	2300      	movs	r3, #0
   4641c:	f500 7088 	add.w	r0, r0, #272	; 0x110
   46420:	f7fb baf8 	b.w	41a14 <k_work_reschedule>
}
   46424:	4770      	bx	lr

00046426 <write_cb>:
{
   46426:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   46428:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   4642a:	4601      	mov	r1, r0
{
   4642c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   4642e:	222a      	movs	r2, #42	; 0x2a
   46430:	6820      	ldr	r0, [r4, #0]
   46432:	f000 feac 	bl	4718e <bt_gatt_check_perm>
   46436:	4605      	mov	r5, r0
   46438:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   4643a:	bb28      	cbnz	r0, 46488 <write_cb+0x62>
	if (!data->req) {
   4643c:	7a23      	ldrb	r3, [r4, #8]
   4643e:	b1b3      	cbz	r3, 4646e <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   46440:	f1a3 0218 	sub.w	r2, r3, #24
   46444:	4253      	negs	r3, r2
   46446:	4153      	adcs	r3, r2
   46448:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   4644a:	9301      	str	r3, [sp, #4]
   4644c:	8a63      	ldrh	r3, [r4, #18]
   4644e:	9300      	str	r3, [sp, #0]
   46450:	68b7      	ldr	r7, [r6, #8]
   46452:	8a23      	ldrh	r3, [r4, #16]
   46454:	68e2      	ldr	r2, [r4, #12]
   46456:	6820      	ldr	r0, [r4, #0]
   46458:	4631      	mov	r1, r6
   4645a:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   4645c:	1e03      	subs	r3, r0, #0
   4645e:	db08      	blt.n	46472 <write_cb+0x4c>
   46460:	8a22      	ldrh	r2, [r4, #16]
   46462:	4293      	cmp	r3, r2
   46464:	d10e      	bne.n	46484 <write_cb+0x5e>
	data->err = 0U;
   46466:	2300      	movs	r3, #0
   46468:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   4646a:	2501      	movs	r5, #1
   4646c:	e007      	b.n	4647e <write_cb+0x58>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   4646e:	2302      	movs	r3, #2
   46470:	e7eb      	b.n	4644a <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   46472:	f113 0fff 	cmn.w	r3, #255	; 0xff
   46476:	d305      	bcc.n	46484 <write_cb+0x5e>
		return -err;
   46478:	425b      	negs	r3, r3
   4647a:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   4647c:	7523      	strb	r3, [r4, #20]
}
   4647e:	4628      	mov	r0, r5
   46480:	b003      	add	sp, #12
   46482:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   46484:	230e      	movs	r3, #14
   46486:	e7f9      	b.n	4647c <write_cb+0x56>
		return BT_GATT_ITER_STOP;
   46488:	2500      	movs	r5, #0
   4648a:	e7f8      	b.n	4647e <write_cb+0x58>

0004648c <att_chan_read>:
{
   4648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46490:	4680      	mov	r8, r0
   46492:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   46494:	4610      	mov	r0, r2
{
   46496:	4699      	mov	r9, r3
   46498:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4649a:	f7ff fe52 	bl	46142 <net_buf_frags_len>
   4649e:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   464a2:	4283      	cmp	r3, r0
{
   464a4:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   464a6:	d97a      	bls.n	4659e <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   464a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   464ac:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   464ae:	4630      	mov	r0, r6
   464b0:	f001 fbc3 	bl	47c3a <net_buf_frag_last>
	size_t len, total = 0;
   464b4:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   464b8:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   464ba:	4630      	mov	r0, r6
   464bc:	f7ff fe41 	bl	46142 <net_buf_frags_len>
   464c0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   464c4:	f105 0708 	add.w	r7, r5, #8
   464c8:	1a24      	subs	r4, r4, r0
   464ca:	4638      	mov	r0, r7
   464cc:	f001 fc1e 	bl	47d0c <net_buf_simple_tailroom>
   464d0:	4284      	cmp	r4, r0
   464d2:	d211      	bcs.n	464f8 <att_chan_read+0x6c>
   464d4:	4630      	mov	r0, r6
   464d6:	f7ff fe34 	bl	46142 <net_buf_frags_len>
   464da:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   464de:	1a24      	subs	r4, r4, r0
		if (!len) {
   464e0:	bb34      	cbnz	r4, 46530 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   464e2:	79b0      	ldrb	r0, [r6, #6]
   464e4:	f7f6 fd66 	bl	3cfb4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   464e8:	2200      	movs	r2, #0
   464ea:	2300      	movs	r3, #0
   464ec:	f001 fb71 	bl	47bd2 <net_buf_alloc_fixed>
			if (!frag) {
   464f0:	4605      	mov	r5, r0
   464f2:	b930      	cbnz	r0, 46502 <att_chan_read+0x76>
	return total;
   464f4:	4657      	mov	r7, sl
   464f6:	e02c      	b.n	46552 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   464f8:	4638      	mov	r0, r7
   464fa:	f001 fc07 	bl	47d0c <net_buf_simple_tailroom>
   464fe:	4604      	mov	r4, r0
   46500:	e7ee      	b.n	464e0 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   46502:	4601      	mov	r1, r0
   46504:	4630      	mov	r0, r6
   46506:	f001 fba9 	bl	47c5c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   4650a:	4630      	mov	r0, r6
   4650c:	f7ff fe19 	bl	46142 <net_buf_frags_len>
   46510:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   46514:	f105 0708 	add.w	r7, r5, #8
   46518:	1a24      	subs	r4, r4, r0
   4651a:	4638      	mov	r0, r7
   4651c:	f001 fbf6 	bl	47d0c <net_buf_simple_tailroom>
   46520:	4284      	cmp	r4, r0
   46522:	d21a      	bcs.n	4655a <att_chan_read+0xce>
   46524:	4630      	mov	r0, r6
   46526:	f7ff fe0c 	bl	46142 <net_buf_frags_len>
   4652a:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4652e:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   46530:	68a9      	ldr	r1, [r5, #8]
   46532:	89aa      	ldrh	r2, [r5, #12]
   46534:	f8db 7004 	ldr.w	r7, [fp, #4]
   46538:	9803      	ldr	r0, [sp, #12]
   4653a:	f8cd 9000 	str.w	r9, [sp]
   4653e:	440a      	add	r2, r1
   46540:	b2a3      	uxth	r3, r4
   46542:	4659      	mov	r1, fp
   46544:	47b8      	blx	r7
		if (read < 0) {
   46546:	1e07      	subs	r7, r0, #0
   46548:	da0c      	bge.n	46564 <att_chan_read+0xd8>
				return total;
   4654a:	f1ba 0f00 	cmp.w	sl, #0
   4654e:	bf18      	it	ne
   46550:	4657      	movne	r7, sl
}
   46552:	4638      	mov	r0, r7
   46554:	b005      	add	sp, #20
   46556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4655a:	4638      	mov	r0, r7
   4655c:	f001 fbd6 	bl	47d0c <net_buf_simple_tailroom>
   46560:	4604      	mov	r4, r0
   46562:	e7e5      	b.n	46530 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   46564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   46566:	b993      	cbnz	r3, 4658e <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   46568:	4639      	mov	r1, r7
   4656a:	f105 0008 	add.w	r0, r5, #8
   4656e:	f001 fb92 	bl	47c96 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   46572:	4630      	mov	r0, r6
   46574:	f7ff fde5 	bl	46142 <net_buf_frags_len>
   46578:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   4657c:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4657e:	4283      	cmp	r3, r0
		total += read;
   46580:	44ba      	add	sl, r7
		offset += read;
   46582:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   46586:	d9b5      	bls.n	464f4 <att_chan_read+0x68>
   46588:	42a7      	cmp	r7, r4
   4658a:	d096      	beq.n	464ba <att_chan_read+0x2e>
   4658c:	e7b2      	b.n	464f4 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   4658e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   46590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   46592:	4639      	mov	r1, r7
   46594:	4628      	mov	r0, r5
   46596:	4798      	blx	r3
   46598:	2800      	cmp	r0, #0
   4659a:	d1e5      	bne.n	46568 <att_chan_read+0xdc>
   4659c:	e7aa      	b.n	464f4 <att_chan_read+0x68>
		return 0;
   4659e:	2700      	movs	r7, #0
   465a0:	e7d7      	b.n	46552 <att_chan_read+0xc6>

000465a2 <chan_req_send>:
{
   465a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   465a4:	688f      	ldr	r7, [r1, #8]
{
   465a6:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   465a8:	4638      	mov	r0, r7
   465aa:	f7ff fdca 	bl	46142 <net_buf_frags_len>
   465ae:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   465b2:	4283      	cmp	r3, r0
{
   465b4:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   465b6:	d30d      	bcc.n	465d4 <chan_req_send+0x32>
	req->buf = NULL;
   465b8:	2600      	movs	r6, #0
	chan->req = req;
   465ba:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   465be:	4632      	mov	r2, r6
	req->buf = NULL;
   465c0:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   465c2:	4620      	mov	r0, r4
   465c4:	4639      	mov	r1, r7
   465c6:	f7e6 fd39 	bl	2d03c <chan_send>
	if (err) {
   465ca:	b110      	cbz	r0, 465d2 <chan_req_send+0x30>
		req->buf = buf;
   465cc:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   465ce:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   465d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   465d4:	f06f 0079 	mvn.w	r0, #121	; 0x79
   465d8:	e7fb      	b.n	465d2 <chan_req_send+0x30>

000465da <process_queue>:
{
   465da:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   465dc:	2200      	movs	r2, #0
{
   465de:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   465e0:	2300      	movs	r3, #0
   465e2:	4608      	mov	r0, r1
{
   465e4:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   465e6:	f001 faf9 	bl	47bdc <net_buf_get>
	if (buf) {
   465ea:	4605      	mov	r5, r0
   465ec:	b160      	cbz	r0, 46608 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   465ee:	4601      	mov	r1, r0
   465f0:	2200      	movs	r2, #0
   465f2:	4620      	mov	r0, r4
   465f4:	f7e6 fd22 	bl	2d03c <chan_send>
		if (err) {
   465f8:	4604      	mov	r4, r0
   465fa:	b118      	cbz	r0, 46604 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   465fc:	4629      	mov	r1, r5
   465fe:	4630      	mov	r0, r6
   46600:	f002 fa28 	bl	48a54 <k_queue_prepend>
}
   46604:	4620      	mov	r0, r4
   46606:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   46608:	f06f 0401 	mvn.w	r4, #1
   4660c:	e7fa      	b.n	46604 <process_queue+0x2a>

0004660e <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4660e:	b510      	push	{r4, lr}
	return list->head;
   46610:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   46612:	2200      	movs	r2, #0
   46614:	b153      	cbz	r3, 4662c <sys_slist_find_and_remove.isra.0+0x1e>
   46616:	428b      	cmp	r3, r1
   46618:	d10e      	bne.n	46638 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   4661a:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   4661c:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   4661e:	b932      	cbnz	r2, 4662e <sys_slist_find_and_remove.isra.0+0x20>
   46620:	42a1      	cmp	r1, r4
	list->head = node;
   46622:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   46624:	d100      	bne.n	46628 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   46626:	6043      	str	r3, [r0, #4]
	parent->next = child;
   46628:	2300      	movs	r3, #0
   4662a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4662c:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   4662e:	42a1      	cmp	r1, r4
	parent->next = child;
   46630:	6013      	str	r3, [r2, #0]
	list->tail = node;
   46632:	bf08      	it	eq
   46634:	6042      	streq	r2, [r0, #4]
}
   46636:	e7f7      	b.n	46628 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   46638:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4663a:	681b      	ldr	r3, [r3, #0]
   4663c:	e7ea      	b.n	46614 <sys_slist_find_and_remove.isra.0+0x6>

0004663e <att_exec_write_req>:
   4663e:	2006      	movs	r0, #6
   46640:	4770      	bx	lr

00046642 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   46642:	30f0      	adds	r0, #240	; 0xf0
   46644:	f3bf 8f5b 	dmb	ish
   46648:	e850 3f00 	ldrex	r3, [r0]
   4664c:	f023 0301 	bic.w	r3, r3, #1
   46650:	e840 3200 	strex	r2, r3, [r0]
   46654:	2a00      	cmp	r2, #0
   46656:	d1f7      	bne.n	46648 <chan_rsp_sent+0x6>
   46658:	f3bf 8f5b 	dmb	ish
}
   4665c:	4770      	bx	lr

0004665e <chan_cfm_sent>:
   4665e:	30f0      	adds	r0, #240	; 0xf0
   46660:	f3bf 8f5b 	dmb	ish
   46664:	e850 3f00 	ldrex	r3, [r0]
   46668:	f023 0302 	bic.w	r3, r3, #2
   4666c:	e840 3200 	strex	r2, r3, [r0]
   46670:	2a00      	cmp	r2, #0
   46672:	d1f7      	bne.n	46664 <chan_cfm_sent+0x6>
   46674:	f3bf 8f5b 	dmb	ish
}
   46678:	4770      	bx	lr

0004667a <read_cb>:
{
   4667a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   4667e:	f8d2 8000 	ldr.w	r8, [r2]
{
   46682:	4606      	mov	r6, r0
	data->err = 0x00;
   46684:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   46686:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   4668a:	7317      	strb	r7, [r2, #12]
{
   4668c:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   4668e:	4631      	mov	r1, r6
   46690:	2215      	movs	r2, #21
   46692:	f000 fd7c 	bl	4718e <bt_gatt_check_perm>
   46696:	4604      	mov	r4, r0
   46698:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   4669a:	b9a0      	cbnz	r0, 466c6 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   4669c:	e9cd 0000 	strd	r0, r0, [sp]
   466a0:	88ab      	ldrh	r3, [r5, #4]
   466a2:	68aa      	ldr	r2, [r5, #8]
   466a4:	4631      	mov	r1, r6
   466a6:	4640      	mov	r0, r8
   466a8:	f7ff fef0 	bl	4648c <att_chan_read>
	if (ret < 0) {
   466ac:	1e03      	subs	r3, r0, #0
   466ae:	da0c      	bge.n	466ca <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   466b0:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   466b4:	bf26      	itte	cs
   466b6:	425b      	negcs	r3, r3
   466b8:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   466ba:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   466bc:	732b      	strb	r3, [r5, #12]
}
   466be:	4620      	mov	r0, r4
   466c0:	b002      	add	sp, #8
   466c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   466c6:	463c      	mov	r4, r7
   466c8:	e7f9      	b.n	466be <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   466ca:	2401      	movs	r4, #1
   466cc:	e7f7      	b.n	466be <read_cb+0x44>

000466ce <bt_att_sent>:
{
   466ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   466d0:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   466d4:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   466d8:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   466da:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   466de:	b10b      	cbz	r3, 466e4 <bt_att_sent+0x16>
		chan->sent(chan);
   466e0:	4638      	mov	r0, r7
   466e2:	4798      	blx	r3
   466e4:	f3bf 8f5b 	dmb	ish
   466e8:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   466ec:	e853 1f00 	ldrex	r1, [r3]
   466f0:	f021 0110 	bic.w	r1, r1, #16
   466f4:	e843 1200 	strex	r2, r1, [r3]
   466f8:	2a00      	cmp	r2, #0
   466fa:	d1f7      	bne.n	466ec <bt_att_sent+0x1e>
   466fc:	f3bf 8f5b 	dmb	ish
	if (!att) {
   46700:	b30c      	cbz	r4, 46746 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   46702:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   46706:	b98b      	cbnz	r3, 4672c <bt_att_sent+0x5e>
   46708:	6863      	ldr	r3, [r4, #4]
   4670a:	b17b      	cbz	r3, 4672c <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   4670c:	1d20      	adds	r0, r4, #4
   4670e:	f7ff fd0e 	bl	4612e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   46712:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   46714:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   46716:	4638      	mov	r0, r7
   46718:	f7ff ff43 	bl	465a2 <chan_req_send>
   4671c:	2800      	cmp	r0, #0
   4671e:	da12      	bge.n	46746 <bt_att_sent+0x78>
	parent->next = child;
   46720:	6863      	ldr	r3, [r4, #4]
   46722:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   46724:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   46726:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   46728:	b903      	cbnz	r3, 4672c <bt_att_sent+0x5e>
	list->tail = node;
   4672a:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   4672c:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   46730:	4638      	mov	r0, r7
   46732:	f7ff ff52 	bl	465da <process_queue>
	if (!err) {
   46736:	b130      	cbz	r0, 46746 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   46738:	f104 010c 	add.w	r1, r4, #12
   4673c:	4638      	mov	r0, r7
}
   4673e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   46742:	f7ff bf4a 	b.w	465da <process_queue>
}
   46746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00046748 <att_req_send_process>:
{
   46748:	b570      	push	{r4, r5, r6, lr}
   4674a:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   4674c:	3004      	adds	r0, #4
   4674e:	f7ff fcee 	bl	4612e <sys_slist_get>
	if (!node) {
   46752:	4605      	mov	r5, r0
   46754:	b1b8      	cbz	r0, 46786 <att_req_send_process+0x3e>
	return list->head;
   46756:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46758:	b14b      	cbz	r3, 4676e <att_req_send_process+0x26>
	return node->next;
   4675a:	681e      	ldr	r6, [r3, #0]
   4675c:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   46760:	b10e      	cbz	r6, 46766 <att_req_send_process+0x1e>
   46762:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   46766:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   4676a:	b13b      	cbz	r3, 4677c <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4676c:	b966      	cbnz	r6, 46788 <att_req_send_process+0x40>
	parent->next = child;
   4676e:	6863      	ldr	r3, [r4, #4]
   46770:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   46772:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   46774:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   46776:	b933      	cbnz	r3, 46786 <att_req_send_process+0x3e>
	list->tail = node;
   46778:	60a5      	str	r5, [r4, #8]
}
   4677a:	e004      	b.n	46786 <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   4677c:	4629      	mov	r1, r5
   4677e:	f7ff ff10 	bl	465a2 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   46782:	2800      	cmp	r0, #0
   46784:	dbf2      	blt.n	4676c <att_req_send_process+0x24>
}
   46786:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   46788:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4678c:	b10b      	cbz	r3, 46792 <att_req_send_process+0x4a>
   4678e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   46792:	4630      	mov	r0, r6
   46794:	461e      	mov	r6, r3
   46796:	e7e6      	b.n	46766 <att_req_send_process+0x1e>

00046798 <bt_att_status>:
{
   46798:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4679a:	f3bf 8f5b 	dmb	ish
   4679e:	680b      	ldr	r3, [r1, #0]
   467a0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   467a4:	07db      	lsls	r3, r3, #31
{
   467a6:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   467a8:	d519      	bpl.n	467de <bt_att_status+0x46>
	if (!chan->att) {
   467aa:	f850 0c08 	ldr.w	r0, [r0, #-8]
   467ae:	b1b0      	cbz	r0, 467de <bt_att_status+0x46>
	if (chan->req) {
   467b0:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   467b4:	b99b      	cbnz	r3, 467de <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   467b6:	3004      	adds	r0, #4
   467b8:	f7ff fcb9 	bl	4612e <sys_slist_get>
	if (!node) {
   467bc:	4604      	mov	r4, r0
   467be:	b170      	cbz	r0, 467de <bt_att_status+0x46>
	return chan_req_send(chan, req);
   467c0:	4601      	mov	r1, r0
   467c2:	f1a5 0008 	sub.w	r0, r5, #8
   467c6:	f7ff feec 	bl	465a2 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   467ca:	2800      	cmp	r0, #0
   467cc:	da07      	bge.n	467de <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   467ce:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   467d2:	685a      	ldr	r2, [r3, #4]
   467d4:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   467d6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   467d8:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   467da:	b902      	cbnz	r2, 467de <bt_att_status+0x46>
	list->tail = node;
   467dc:	609c      	str	r4, [r3, #8]
}
   467de:	bd38      	pop	{r3, r4, r5, pc}

000467e0 <bt_att_chan_create_pdu>:
{
   467e0:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   467e2:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   467e6:	3201      	adds	r2, #1
   467e8:	429a      	cmp	r2, r3
{
   467ea:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   467ec:	d81b      	bhi.n	46826 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   467ee:	4608      	mov	r0, r1
   467f0:	f7e6 fb4e 	bl	2ce90 <att_op_get_type>
   467f4:	2802      	cmp	r0, #2
   467f6:	d001      	beq.n	467fc <bt_att_chan_create_pdu+0x1c>
   467f8:	2804      	cmp	r0, #4
   467fa:	d10f      	bne.n	4681c <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   467fc:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   46800:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   46802:	2100      	movs	r1, #0
   46804:	4608      	mov	r0, r1
   46806:	f7ff fc13 	bl	46030 <bt_l2cap_create_pdu_timeout>
   4680a:	4604      	mov	r4, r0
	if (!buf) {
   4680c:	b120      	cbz	r0, 46818 <bt_att_chan_create_pdu+0x38>
   4680e:	2101      	movs	r1, #1
   46810:	3008      	adds	r0, #8
   46812:	f001 fa40 	bl	47c96 <net_buf_simple_add>
	hdr->code = op;
   46816:	7005      	strb	r5, [r0, #0]
}
   46818:	4620      	mov	r0, r4
   4681a:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   4681c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   46820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   46824:	e7ed      	b.n	46802 <bt_att_chan_create_pdu+0x22>
		return NULL;
   46826:	2400      	movs	r4, #0
   46828:	e7f6      	b.n	46818 <bt_att_chan_create_pdu+0x38>

0004682a <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   4682a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4682e:	4688      	mov	r8, r1
   46830:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   46832:	2101      	movs	r1, #1
   46834:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   46836:	4605      	mov	r5, r0
   46838:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   4683a:	f7ff ffd1 	bl	467e0 <bt_att_chan_create_pdu>
	if (!buf) {
   4683e:	4604      	mov	r4, r0
   46840:	b170      	cbz	r0, 46860 <send_err_rsp.part.0+0x36>
   46842:	2104      	movs	r1, #4
   46844:	3008      	adds	r0, #8
   46846:	f001 fa26 	bl	47c96 <net_buf_simple_add>
	rsp->request = req;
   4684a:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   4684e:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   46850:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   46854:	4621      	mov	r1, r4
   46856:	4628      	mov	r0, r5
}
   46858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   4685c:	f7e6 bc4c 	b.w	2d0f8 <bt_att_chan_send_rsp.constprop.0>
}
   46860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00046864 <att_write_req>:
{
   46864:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46866:	460c      	mov	r4, r1
   46868:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   4686a:	f101 0008 	add.w	r0, r1, #8
   4686e:	f001 fa41 	bl	47cf4 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   46872:	89a2      	ldrh	r2, [r4, #12]
   46874:	9201      	str	r2, [sp, #4]
   46876:	68a2      	ldr	r2, [r4, #8]
   46878:	9200      	str	r2, [sp, #0]
   4687a:	4603      	mov	r3, r0
   4687c:	2213      	movs	r2, #19
   4687e:	2112      	movs	r1, #18
   46880:	4628      	mov	r0, r5
   46882:	f7e6 fd4b 	bl	2d31c <att_write_rsp.constprop.0>
}
   46886:	b003      	add	sp, #12
   46888:	bd30      	pop	{r4, r5, pc}

0004688a <att_write_cmd>:
{
   4688a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4688c:	460c      	mov	r4, r1
   4688e:	4605      	mov	r5, r0
   46890:	f101 0008 	add.w	r0, r1, #8
   46894:	f001 fa2e 	bl	47cf4 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   46898:	89a2      	ldrh	r2, [r4, #12]
   4689a:	9201      	str	r2, [sp, #4]
   4689c:	68a2      	ldr	r2, [r4, #8]
   4689e:	9200      	str	r2, [sp, #0]
   468a0:	2200      	movs	r2, #0
   468a2:	4603      	mov	r3, r0
   468a4:	4611      	mov	r1, r2
   468a6:	4628      	mov	r0, r5
   468a8:	f7e6 fd38 	bl	2d31c <att_write_rsp.constprop.0>
}
   468ac:	b003      	add	sp, #12
   468ae:	bd30      	pop	{r4, r5, pc}

000468b0 <bt_att_create_pdu>:
{
   468b0:	b570      	push	{r4, r5, r6, lr}
   468b2:	460e      	mov	r6, r1
   468b4:	4615      	mov	r5, r2
	att = att_get(conn);
   468b6:	f7ff fd95 	bl	463e4 <att_get>
	if (!att) {
   468ba:	b168      	cbz	r0, 468d8 <bt_att_create_pdu+0x28>
	return list->head;
   468bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   468be:	b15b      	cbz	r3, 468d8 <bt_att_create_pdu+0x28>
   468c0:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   468c4:	681b      	ldr	r3, [r3, #0]
   468c6:	b10b      	cbz	r3, 468cc <bt_att_create_pdu+0x1c>
   468c8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   468cc:	1c6a      	adds	r2, r5, #1
   468ce:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   468d2:	428a      	cmp	r2, r1
   468d4:	d902      	bls.n	468dc <bt_att_create_pdu+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   468d6:	b93b      	cbnz	r3, 468e8 <bt_att_create_pdu+0x38>
}
   468d8:	2000      	movs	r0, #0
   468da:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   468dc:	462a      	mov	r2, r5
   468de:	4631      	mov	r1, r6
}
   468e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   468e4:	f7ff bf7c 	b.w	467e0 <bt_att_chan_create_pdu>
   468e8:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   468ec:	b10c      	cbz	r4, 468f2 <bt_att_create_pdu+0x42>
   468ee:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   468f2:	4618      	mov	r0, r3
   468f4:	4623      	mov	r3, r4
   468f6:	e7ea      	b.n	468ce <bt_att_create_pdu+0x1e>

000468f8 <att_read_blob_req>:
{
   468f8:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   468fa:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   468fc:	8813      	ldrh	r3, [r2, #0]
   468fe:	8852      	ldrh	r2, [r2, #2]
   46900:	9200      	str	r2, [sp, #0]
   46902:	210c      	movs	r1, #12
   46904:	220d      	movs	r2, #13
   46906:	f7e6 fe37 	bl	2d578 <att_read_rsp>
}
   4690a:	b003      	add	sp, #12
   4690c:	f85d fb04 	ldr.w	pc, [sp], #4

00046910 <att_read_req>:
{
   46910:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   46912:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   46914:	2200      	movs	r2, #0
   46916:	881b      	ldrh	r3, [r3, #0]
   46918:	9200      	str	r2, [sp, #0]
   4691a:	210a      	movs	r1, #10
   4691c:	220b      	movs	r2, #11
   4691e:	f7e6 fe2b 	bl	2d578 <att_read_rsp>
}
   46922:	b003      	add	sp, #12
   46924:	f85d fb04 	ldr.w	pc, [sp], #4

00046928 <att_mtu_req>:
{
   46928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   4692a:	6803      	ldr	r3, [r0, #0]
{
   4692c:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   4692e:	6818      	ldr	r0, [r3, #0]
   46930:	f3bf 8f5b 	dmb	ish
   46934:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   46938:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   4693c:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   46940:	071b      	lsls	r3, r3, #28
   46942:	d420      	bmi.n	46986 <att_mtu_req+0x5e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   46944:	688b      	ldr	r3, [r1, #8]
   46946:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   46948:	2e16      	cmp	r6, #22
   4694a:	d91e      	bls.n	4698a <att_mtu_req+0x62>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   4694c:	2202      	movs	r2, #2
   4694e:	2103      	movs	r1, #3
   46950:	f7ff ffae 	bl	468b0 <bt_att_create_pdu>
	if (!pdu) {
   46954:	4607      	mov	r7, r0
   46956:	b1d0      	cbz	r0, 4698e <att_mtu_req+0x66>
	return net_buf_simple_add(&buf->b, len);
   46958:	2102      	movs	r1, #2
   4695a:	3008      	adds	r0, #8
   4695c:	f001 f99b 	bl	47c96 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   46960:	2341      	movs	r3, #65	; 0x41
   46962:	7003      	strb	r3, [r0, #0]
   46964:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   46966:	4639      	mov	r1, r7
   46968:	4620      	mov	r0, r4
   4696a:	f7e6 fbc5 	bl	2d0f8 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   4696e:	2e41      	cmp	r6, #65	; 0x41
   46970:	bf28      	it	cs
   46972:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   46974:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   46976:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   4697a:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   4697e:	f7ff fceb 	bl	46358 <att_chan_mtu_updated>
	return 0;
   46982:	4628      	mov	r0, r5
}
   46984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   46986:	2006      	movs	r0, #6
   46988:	e7fc      	b.n	46984 <att_mtu_req+0x5c>
		return BT_ATT_ERR_INVALID_PDU;
   4698a:	2004      	movs	r0, #4
   4698c:	e7fa      	b.n	46984 <att_mtu_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
   4698e:	200e      	movs	r0, #14
   46990:	e7f8      	b.n	46984 <att_mtu_req+0x5c>

00046992 <bt_att_init>:
	bt_gatt_init();
   46992:	f7e7 ba4f 	b.w	2de34 <bt_gatt_init>

00046996 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   46996:	898a      	ldrh	r2, [r1, #12]
   46998:	6889      	ldr	r1, [r1, #8]
   4699a:	2300      	movs	r3, #0
   4699c:	f7e6 bf6a 	b.w	2d874 <att_handle_rsp>

000469a0 <bt_att_encrypt_change>:
{
   469a0:	b570      	push	{r4, r5, r6, lr}
	if (!att_chan->att) {
   469a2:	f850 3c08 	ldr.w	r3, [r0, #-8]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   469a6:	4605      	mov	r5, r0
{
   469a8:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
   469aa:	f855 6908 	ldr.w	r6, [r5], #-8
	if (!att_chan->att) {
   469ae:	2b00      	cmp	r3, #0
   469b0:	d035      	beq.n	46a1e <bt_att_encrypt_change+0x7e>
	if (hci_status) {
   469b2:	b169      	cbz	r1, 469d0 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   469b4:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   469b8:	b38b      	cbz	r3, 46a1e <bt_att_encrypt_change+0x7e>
   469ba:	7c1b      	ldrb	r3, [r3, #16]
   469bc:	07da      	lsls	r2, r3, #31
   469be:	d52e      	bpl.n	46a1e <bt_att_encrypt_change+0x7e>
		return BT_ATT_ERR_AUTHENTICATION;
   469c0:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   469c2:	2200      	movs	r2, #0
   469c4:	4628      	mov	r0, r5
   469c6:	4611      	mov	r1, r2
}
   469c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   469cc:	f7e6 bf52 	b.w	2d874 <att_handle_rsp>
	bt_gatt_encrypt_change(conn);
   469d0:	4630      	mov	r0, r6
   469d2:	f7e7 fe9d 	bl	2e710 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   469d6:	7a73      	ldrb	r3, [r6, #9]
   469d8:	2b01      	cmp	r3, #1
   469da:	d020      	beq.n	46a1e <bt_att_encrypt_change+0x7e>
	if (!(att_chan->req && att_chan->req->retrying)) {
   469dc:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   469e0:	b1ec      	cbz	r4, 46a1e <bt_att_encrypt_change+0x7e>
   469e2:	7c23      	ldrb	r3, [r4, #16]
   469e4:	07db      	lsls	r3, r3, #31
   469e6:	d51a      	bpl.n	46a1e <bt_att_encrypt_change+0x7e>
	if (!req->encode) {
   469e8:	68e3      	ldr	r3, [r4, #12]
   469ea:	2b00      	cmp	r3, #0
   469ec:	d0e8      	beq.n	469c0 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   469ee:	6962      	ldr	r2, [r4, #20]
   469f0:	7c61      	ldrb	r1, [r4, #17]
   469f2:	4628      	mov	r0, r5
   469f4:	f7ff fef4 	bl	467e0 <bt_att_chan_create_pdu>
	if (!buf) {
   469f8:	4606      	mov	r6, r0
   469fa:	b140      	cbz	r0, 46a0e <bt_att_encrypt_change+0x6e>
	if (req->encode(buf, req->len, req->user_data)) {
   469fc:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   46a00:	68e3      	ldr	r3, [r4, #12]
   46a02:	4798      	blx	r3
   46a04:	4602      	mov	r2, r0
   46a06:	b120      	cbz	r0, 46a12 <bt_att_encrypt_change+0x72>
		net_buf_unref(buf);
   46a08:	4630      	mov	r0, r6
   46a0a:	f7f6 fb97 	bl	3d13c <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   46a0e:	230e      	movs	r3, #14
   46a10:	e7d7      	b.n	469c2 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   46a12:	4631      	mov	r1, r6
   46a14:	4628      	mov	r0, r5
   46a16:	f7e6 fb11 	bl	2d03c <chan_send>
   46a1a:	2800      	cmp	r0, #0
   46a1c:	d1f4      	bne.n	46a08 <bt_att_encrypt_change+0x68>
}
   46a1e:	bd70      	pop	{r4, r5, r6, pc}

00046a20 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   46a20:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   46a24:	f7e6 bf58 	b.w	2d8d8 <bt_att_disconnected>

00046a28 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   46a28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   46a2c:	4607      	mov	r7, r0
   46a2e:	460d      	mov	r5, r1
   46a30:	4616      	mov	r6, r2
   46a32:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   46a34:	f7ff fcd6 	bl	463e4 <att_get>
	if (!att) {
   46a38:	4604      	mov	r4, r0
   46a3a:	b938      	cbnz	r0, 46a4c <bt_att_send+0x24>
		net_buf_unref(buf);
   46a3c:	4628      	mov	r0, r5
   46a3e:	f7f6 fb7d 	bl	3d13c <net_buf_unref>
		return -ENOTCONN;
   46a42:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   46a46:	b002      	add	sp, #8
   46a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   46a4c:	b146      	cbz	r6, 46a60 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   46a4e:	f8cd 8000 	str.w	r8, [sp]
   46a52:	4633      	mov	r3, r6
   46a54:	462a      	mov	r2, r5
   46a56:	2104      	movs	r1, #4
   46a58:	4638      	mov	r0, r7
   46a5a:	f7ff faec 	bl	46036 <bt_l2cap_send_cb>
   46a5e:	e7f2      	b.n	46a46 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   46a60:	f100 060c 	add.w	r6, r0, #12
   46a64:	4629      	mov	r1, r5
   46a66:	4630      	mov	r0, r6
   46a68:	f001 f8d6 	bl	47c18 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   46a6c:	2200      	movs	r2, #0
   46a6e:	2300      	movs	r3, #0
   46a70:	4630      	mov	r0, r6
   46a72:	f001 f8b3 	bl	47bdc <net_buf_get>
	if (!buf) {
   46a76:	4605      	mov	r5, r0
   46a78:	b908      	cbnz	r0, 46a7e <bt_att_send+0x56>
	return 0;
   46a7a:	2000      	movs	r0, #0
   46a7c:	e7e3      	b.n	46a46 <bt_att_send+0x1e>
	return list->head;
   46a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46a80:	b1a3      	cbz	r3, 46aac <bt_att_send+0x84>
	return node->next;
   46a82:	681c      	ldr	r4, [r3, #0]
   46a84:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   46a88:	b10c      	cbz	r4, 46a8e <bt_att_send+0x66>
   46a8a:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   46a8e:	2200      	movs	r2, #0
   46a90:	4629      	mov	r1, r5
   46a92:	f7e6 fad3 	bl	2d03c <chan_send>
		if (err >= 0) {
   46a96:	2800      	cmp	r0, #0
   46a98:	daef      	bge.n	46a7a <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   46a9a:	b13c      	cbz	r4, 46aac <bt_att_send+0x84>
   46a9c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   46aa0:	b10b      	cbz	r3, 46aa6 <bt_att_send+0x7e>
   46aa2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   46aa6:	4620      	mov	r0, r4
   46aa8:	461c      	mov	r4, r3
   46aaa:	e7f0      	b.n	46a8e <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   46aac:	4629      	mov	r1, r5
   46aae:	4630      	mov	r0, r6
   46ab0:	f001 ffd0 	bl	48a54 <k_queue_prepend>
   46ab4:	e7e1      	b.n	46a7a <bt_att_send+0x52>

00046ab6 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   46ab6:	b510      	push	{r4, lr}
   46ab8:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   46aba:	f7ff fc93 	bl	463e4 <att_get>
	if (!att) {
   46abe:	b160      	cbz	r0, 46ada <bt_att_req_send+0x24>
	parent->next = child;
   46ac0:	2300      	movs	r3, #0
   46ac2:	6023      	str	r3, [r4, #0]
	return list->tail;
   46ac4:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   46ac6:	b92b      	cbnz	r3, 46ad4 <bt_att_req_send+0x1e>
	list->head = node;
   46ac8:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   46acc:	f7ff fe3c 	bl	46748 <att_req_send_process>

	return 0;
   46ad0:	2000      	movs	r0, #0
}
   46ad2:	bd10      	pop	{r4, pc}
	parent->next = child;
   46ad4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   46ad6:	6084      	str	r4, [r0, #8]
}
   46ad8:	e7f8      	b.n	46acc <bt_att_req_send+0x16>
		return -ENOTCONN;
   46ada:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   46ade:	e7f8      	b.n	46ad2 <bt_att_req_send+0x1c>

00046ae0 <gatt_ccc_changed>:
{
   46ae0:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   46ae2:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   46ae4:	895a      	ldrh	r2, [r3, #10]
   46ae6:	428a      	cmp	r2, r1
   46ae8:	d003      	beq.n	46af2 <gatt_ccc_changed+0x12>
		ccc->value = value;
   46aea:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   46aec:	68db      	ldr	r3, [r3, #12]
   46aee:	b103      	cbz	r3, 46af2 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   46af0:	4718      	bx	r3
}
   46af2:	4770      	bx	lr

00046af4 <gatt_indicate_rsp>:
{
   46af4:	b510      	push	{r4, lr}
   46af6:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   46af8:	68a3      	ldr	r3, [r4, #8]
{
   46afa:	460a      	mov	r2, r1
	if (params->func) {
   46afc:	b10b      	cbz	r3, 46b02 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   46afe:	4621      	mov	r1, r4
   46b00:	4798      	blx	r3
	params->_ref--;
   46b02:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   46b04:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   46b06:	3b01      	subs	r3, #1
   46b08:	b2db      	uxtb	r3, r3
   46b0a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   46b0c:	b122      	cbz	r2, 46b18 <gatt_indicate_rsp+0x24>
   46b0e:	b91b      	cbnz	r3, 46b18 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   46b10:	4620      	mov	r0, r4
}
   46b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   46b16:	4710      	bx	r2
}
   46b18:	bd10      	pop	{r4, pc}

00046b1a <match_uuid>:
	data->attr = attr;
   46b1a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   46b1c:	8091      	strh	r1, [r2, #4]
}
   46b1e:	2000      	movs	r0, #0
   46b20:	4770      	bx	lr

00046b22 <ccc_set_cb>:
}
   46b22:	2000      	movs	r0, #0
   46b24:	4770      	bx	lr

00046b26 <atomic_get>:
   46b26:	f3bf 8f5b 	dmb	ish
   46b2a:	6800      	ldr	r0, [r0, #0]
   46b2c:	f3bf 8f5b 	dmb	ish
}
   46b30:	4770      	bx	lr

00046b32 <gen_hash_m>:
{
   46b32:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   46b34:	6807      	ldr	r7, [r0, #0]
   46b36:	783d      	ldrb	r5, [r7, #0]
{
   46b38:	b089      	sub	sp, #36	; 0x24
   46b3a:	4606      	mov	r6, r0
   46b3c:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   46b3e:	b10d      	cbz	r5, 46b44 <gen_hash_m+0x12>
	switch (u16->val) {
   46b40:	2501      	movs	r5, #1
   46b42:	e014      	b.n	46b6e <gen_hash_m+0x3c>
   46b44:	887b      	ldrh	r3, [r7, #2]
   46b46:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   46b4a:	d004      	beq.n	46b56 <gen_hash_m+0x24>
   46b4c:	d812      	bhi.n	46b74 <gen_hash_m+0x42>
   46b4e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   46b52:	2b03      	cmp	r3, #3
   46b54:	d8f4      	bhi.n	46b40 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   46b56:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46b5a:	2202      	movs	r2, #2
   46b5c:	f10d 010a 	add.w	r1, sp, #10
   46b60:	4620      	mov	r0, r4
   46b62:	f7fd ffe7 	bl	44b34 <tc_cmac_update>
   46b66:	b9e0      	cbnz	r0, 46ba2 <gen_hash_m+0x70>
			state->err = -EINVAL;
   46b68:	f06f 0315 	mvn.w	r3, #21
   46b6c:	65a3      	str	r3, [r4, #88]	; 0x58
}
   46b6e:	4628      	mov	r0, r5
   46b70:	b009      	add	sp, #36	; 0x24
   46b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   46b74:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   46b78:	33ff      	adds	r3, #255	; 0xff
   46b7a:	b29b      	uxth	r3, r3
   46b7c:	2b04      	cmp	r3, #4
   46b7e:	d8df      	bhi.n	46b40 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   46b80:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46b84:	2202      	movs	r2, #2
   46b86:	f10d 010a 	add.w	r1, sp, #10
   46b8a:	4620      	mov	r0, r4
   46b8c:	f7fd ffd2 	bl	44b34 <tc_cmac_update>
   46b90:	2800      	cmp	r0, #0
   46b92:	d0e9      	beq.n	46b68 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   46b94:	887b      	ldrh	r3, [r7, #2]
   46b96:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46b9a:	2202      	movs	r2, #2
   46b9c:	f10d 010a 	add.w	r1, sp, #10
   46ba0:	e016      	b.n	46bd0 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   46ba2:	887b      	ldrh	r3, [r7, #2]
   46ba4:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46ba8:	2202      	movs	r2, #2
   46baa:	f10d 010a 	add.w	r1, sp, #10
   46bae:	4620      	mov	r0, r4
   46bb0:	f7fd ffc0 	bl	44b34 <tc_cmac_update>
   46bb4:	2800      	cmp	r0, #0
   46bb6:	d0d7      	beq.n	46b68 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   46bb8:	2000      	movs	r0, #0
   46bba:	aa03      	add	r2, sp, #12
   46bbc:	6877      	ldr	r7, [r6, #4]
   46bbe:	9000      	str	r0, [sp, #0]
   46bc0:	2313      	movs	r3, #19
   46bc2:	4631      	mov	r1, r6
   46bc4:	47b8      	blx	r7
		if (len < 0) {
   46bc6:	1e02      	subs	r2, r0, #0
   46bc8:	da01      	bge.n	46bce <gen_hash_m+0x9c>
			state->err = len;
   46bca:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   46bcc:	e7cf      	b.n	46b6e <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   46bce:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   46bd0:	4620      	mov	r0, r4
   46bd2:	f7fd ffaf 	bl	44b34 <tc_cmac_update>
   46bd6:	2800      	cmp	r0, #0
   46bd8:	d1b2      	bne.n	46b40 <gen_hash_m+0xe>
   46bda:	e7c5      	b.n	46b68 <gen_hash_m+0x36>

00046bdc <atomic_or>:
{
   46bdc:	b510      	push	{r4, lr}
   46bde:	4603      	mov	r3, r0
}
   46be0:	f3bf 8f5b 	dmb	ish
   46be4:	e853 0f00 	ldrex	r0, [r3]
   46be8:	ea40 0201 	orr.w	r2, r0, r1
   46bec:	e843 2400 	strex	r4, r2, [r3]
   46bf0:	2c00      	cmp	r4, #0
   46bf2:	d1f7      	bne.n	46be4 <atomic_or+0x8>
   46bf4:	f3bf 8f5b 	dmb	ish
   46bf8:	bd10      	pop	{r4, pc}

00046bfa <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   46bfa:	2207      	movs	r2, #7
   46bfc:	f7fe b901 	b.w	44e02 <memcpy>

00046c00 <cf_write>:
{
   46c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46c04:	4698      	mov	r8, r3
   46c06:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   46c0a:	2b01      	cmp	r3, #1
{
   46c0c:	4606      	mov	r6, r0
   46c0e:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   46c10:	d830      	bhi.n	46c74 <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   46c12:	4443      	add	r3, r8
   46c14:	2b01      	cmp	r3, #1
   46c16:	4645      	mov	r5, r8
   46c18:	dc2f      	bgt.n	46c7a <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   46c1a:	f7e6 fec3 	bl	2d9a4 <find_cf_cfg>
	if (!cfg) {
   46c1e:	4604      	mov	r4, r0
   46c20:	b918      	cbnz	r0, 46c2a <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   46c22:	f7e6 febf 	bl	2d9a4 <find_cf_cfg>
	if (!cfg) {
   46c26:	4604      	mov	r4, r0
   46c28:	b350      	cbz	r0, 46c80 <cf_write+0x80>
{
   46c2a:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   46c2c:	f1b8 0f00 	cmp.w	r8, #0
   46c30:	d10e      	bne.n	46c50 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   46c32:	f106 0188 	add.w	r1, r6, #136	; 0x88
   46c36:	1c60      	adds	r0, r4, #1
   46c38:	f7ff ffdf 	bl	46bfa <bt_addr_le_copy>
	cfg->id = conn->id;
   46c3c:	4620      	mov	r0, r4
   46c3e:	7a33      	ldrb	r3, [r6, #8]
   46c40:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   46c44:	2101      	movs	r1, #1
   46c46:	f7ff ffc9 	bl	46bdc <atomic_or>
}
   46c4a:	4628      	mov	r0, r5
   46c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   46c50:	7a20      	ldrb	r0, [r4, #8]
   46c52:	fa20 f301 	lsr.w	r3, r0, r1
   46c56:	07da      	lsls	r2, r3, #31
   46c58:	d503      	bpl.n	46c62 <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   46c5a:	783b      	ldrb	r3, [r7, #0]
   46c5c:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   46c5e:	07db      	lsls	r3, r3, #31
   46c60:	d511      	bpl.n	46c86 <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   46c62:	3101      	adds	r1, #1
   46c64:	2903      	cmp	r1, #3
   46c66:	d1e1      	bne.n	46c2c <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   46c68:	783b      	ldrb	r3, [r7, #0]
   46c6a:	f003 0307 	and.w	r3, r3, #7
   46c6e:	4318      	orrs	r0, r3
   46c70:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   46c72:	e7de      	b.n	46c32 <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46c74:	f06f 0506 	mvn.w	r5, #6
   46c78:	e7e7      	b.n	46c4a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   46c7a:	f06f 050c 	mvn.w	r5, #12
   46c7e:	e7e4      	b.n	46c4a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   46c80:	f06f 0510 	mvn.w	r5, #16
   46c84:	e7e1      	b.n	46c4a <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   46c86:	f06f 0512 	mvn.w	r5, #18
   46c8a:	e7de      	b.n	46c4a <cf_write+0x4a>

00046c8c <clear_ccc_cfg>:
{
   46c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   46c8e:	2500      	movs	r5, #0
{
   46c90:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   46c92:	4669      	mov	r1, sp
   46c94:	3001      	adds	r0, #1
   46c96:	9500      	str	r5, [sp, #0]
   46c98:	f8cd 5003 	str.w	r5, [sp, #3]
   46c9c:	f7ff ffad 	bl	46bfa <bt_addr_le_copy>
	cfg->id = 0U;
   46ca0:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   46ca2:	8125      	strh	r5, [r4, #8]
}
   46ca4:	b003      	add	sp, #12
   46ca6:	bd30      	pop	{r4, r5, pc}

00046ca8 <atomic_and>:
{
   46ca8:	b510      	push	{r4, lr}
   46caa:	4603      	mov	r3, r0
}
   46cac:	f3bf 8f5b 	dmb	ish
   46cb0:	e853 0f00 	ldrex	r0, [r3]
   46cb4:	ea00 0201 	and.w	r2, r0, r1
   46cb8:	e843 2400 	strex	r4, r2, [r3]
   46cbc:	2c00      	cmp	r4, #0
   46cbe:	d1f7      	bne.n	46cb0 <atomic_and+0x8>
   46cc0:	f3bf 8f5b 	dmb	ish
   46cc4:	bd10      	pop	{r4, pc}

00046cc6 <clear_cf_cfg>:
{
   46cc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46cc8:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   46cca:	2500      	movs	r5, #0
   46ccc:	4669      	mov	r1, sp
   46cce:	3001      	adds	r0, #1
   46cd0:	9500      	str	r5, [sp, #0]
   46cd2:	f8cd 5003 	str.w	r5, [sp, #3]
   46cd6:	f7ff ff90 	bl	46bfa <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   46cda:	f104 0008 	add.w	r0, r4, #8
   46cde:	2201      	movs	r2, #1
   46ce0:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   46ce2:	340c      	adds	r4, #12
   46ce4:	f7fe f898 	bl	44e18 <memset>
   46ce8:	f3bf 8f5b 	dmb	ish
   46cec:	e854 3f00 	ldrex	r3, [r4]
   46cf0:	e844 5200 	strex	r2, r5, [r4]
   46cf4:	2a00      	cmp	r2, #0
   46cf6:	d1f9      	bne.n	46cec <clear_cf_cfg+0x26>
   46cf8:	f3bf 8f5b 	dmb	ish
}
   46cfc:	b003      	add	sp, #12
   46cfe:	bd30      	pop	{r4, r5, pc}

00046d00 <read_appearance>:
{
   46d00:	b513      	push	{r0, r1, r4, lr}
   46d02:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   46d06:	4610      	mov	r0, r2
	if (offset > value_len) {
   46d08:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   46d0a:	f240 32c1 	movw	r2, #961	; 0x3c1
   46d0e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   46d12:	d80d      	bhi.n	46d30 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   46d14:	f1c1 0402 	rsb	r4, r1, #2
   46d18:	429c      	cmp	r4, r3
   46d1a:	bfa8      	it	ge
   46d1c:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   46d1e:	f10d 0306 	add.w	r3, sp, #6
   46d22:	4622      	mov	r2, r4
   46d24:	4419      	add	r1, r3
   46d26:	f7fe f86c 	bl	44e02 <memcpy>
}
   46d2a:	4620      	mov	r0, r4
   46d2c:	b002      	add	sp, #8
   46d2e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46d30:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   46d34:	e7f9      	b.n	46d2a <read_appearance+0x2a>

00046d36 <read_name>:
{
   46d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46d3a:	4698      	mov	r8, r3
   46d3c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   46d40:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   46d42:	f7e4 fc99 	bl	2b678 <bt_get_name>
   46d46:	4607      	mov	r7, r0
				 strlen(name));
   46d48:	f7fe f827 	bl	44d9a <strlen>
	if (offset > value_len) {
   46d4c:	b283      	uxth	r3, r0
   46d4e:	42b3      	cmp	r3, r6
   46d50:	d30c      	bcc.n	46d6c <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   46d52:	1b9c      	subs	r4, r3, r6
   46d54:	4544      	cmp	r4, r8
   46d56:	bfa8      	it	ge
   46d58:	4644      	movge	r4, r8
   46d5a:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   46d5c:	4622      	mov	r2, r4
   46d5e:	19b9      	adds	r1, r7, r6
   46d60:	4628      	mov	r0, r5
   46d62:	f7fe f84e 	bl	44e02 <memcpy>
}
   46d66:	4620      	mov	r0, r4
   46d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46d6c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   46d70:	e7f9      	b.n	46d66 <read_name+0x30>

00046d72 <cf_read>:
{
   46d72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   46d74:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   46d76:	2300      	movs	r3, #0
{
   46d78:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   46d7c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   46d80:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   46d82:	f7e6 fe0f 	bl	2d9a4 <find_cf_cfg>
	if (cfg) {
   46d86:	b128      	cbz	r0, 46d94 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   46d88:	f100 0108 	add.w	r1, r0, #8
   46d8c:	2201      	movs	r2, #1
   46d8e:	a801      	add	r0, sp, #4
   46d90:	f7fe f837 	bl	44e02 <memcpy>
	if (offset > value_len) {
   46d94:	2e01      	cmp	r6, #1
   46d96:	d80d      	bhi.n	46db4 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   46d98:	f1c6 0401 	rsb	r4, r6, #1
   46d9c:	42bc      	cmp	r4, r7
   46d9e:	bfa8      	it	ge
   46da0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   46da2:	ab01      	add	r3, sp, #4
   46da4:	4622      	mov	r2, r4
   46da6:	1999      	adds	r1, r3, r6
   46da8:	4628      	mov	r0, r5
   46daa:	f7fe f82a 	bl	44e02 <memcpy>
}
   46dae:	4620      	mov	r0, r4
   46db0:	b003      	add	sp, #12
   46db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46db4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   46db8:	e7f9      	b.n	46dae <cf_read+0x3c>

00046dba <bt_gatt_attr_read_service>:
{
   46dba:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   46dbc:	68c9      	ldr	r1, [r1, #12]
{
   46dbe:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   46dc0:	780a      	ldrb	r2, [r1, #0]
{
   46dc2:	461c      	mov	r4, r3
   46dc4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   46dc8:	b992      	cbnz	r2, 46df0 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   46dca:	884a      	ldrh	r2, [r1, #2]
   46dcc:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   46dd0:	2b02      	cmp	r3, #2
   46dd2:	d818      	bhi.n	46e06 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   46dd4:	f1c3 0202 	rsb	r2, r3, #2
   46dd8:	4294      	cmp	r4, r2
   46dda:	bfa8      	it	ge
   46ddc:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   46dde:	4622      	mov	r2, r4
   46de0:	f10d 0106 	add.w	r1, sp, #6
   46de4:	4419      	add	r1, r3
   46de6:	f7fe f80c 	bl	44e02 <memcpy>
}
   46dea:	4620      	mov	r0, r4
   46dec:	b002      	add	sp, #8
   46dee:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   46df0:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   46df2:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   46df6:	d806      	bhi.n	46e06 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   46df8:	f1c3 0210 	rsb	r2, r3, #16
   46dfc:	4294      	cmp	r4, r2
   46dfe:	bfa8      	it	ge
   46e00:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   46e02:	4622      	mov	r2, r4
   46e04:	e7ee      	b.n	46de4 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46e06:	f06f 0406 	mvn.w	r4, #6
   46e0a:	e7ee      	b.n	46dea <bt_gatt_attr_read_service+0x30>

00046e0c <cf_set>:
{
   46e0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   46e10:	4688      	mov	r8, r1
   46e12:	4616      	mov	r6, r2
   46e14:	461f      	mov	r7, r3
	if (!name) {
   46e16:	4605      	mov	r5, r0
   46e18:	b928      	cbnz	r0, 46e26 <cf_set+0x1a>
		return -EINVAL;
   46e1a:	f06f 0415 	mvn.w	r4, #21
}
   46e1e:	4620      	mov	r0, r4
   46e20:	b004      	add	sp, #16
   46e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   46e26:	a902      	add	r1, sp, #8
   46e28:	f7fe f8b3 	bl	44f92 <bt_settings_decode_key>
	if (err) {
   46e2c:	4604      	mov	r4, r0
   46e2e:	2800      	cmp	r0, #0
   46e30:	d1f3      	bne.n	46e1a <cf_set+0xe>
	settings_name_next(name, &next);
   46e32:	a901      	add	r1, sp, #4
   46e34:	4628      	mov	r0, r5
   46e36:	f7fc fd18 	bl	4386a <settings_name_next>
	if (!next) {
   46e3a:	9801      	ldr	r0, [sp, #4]
   46e3c:	b9d0      	cbnz	r0, 46e74 <cf_set+0x68>
	cfg = find_cf_cfg_by_addr(id, &addr);
   46e3e:	a902      	add	r1, sp, #8
   46e40:	2000      	movs	r0, #0
   46e42:	f7e6 fe37 	bl	2dab4 <find_cf_cfg_by_addr>
	if (!cfg) {
   46e46:	4605      	mov	r5, r0
   46e48:	b948      	cbnz	r0, 46e5e <cf_set+0x52>
		cfg = find_cf_cfg(NULL);
   46e4a:	f7e6 fdab 	bl	2d9a4 <find_cf_cfg>
		if (!cfg) {
   46e4e:	4605      	mov	r5, r0
   46e50:	b1d8      	cbz	r0, 46e8a <cf_set+0x7e>
		cfg->id = id;
   46e52:	2300      	movs	r3, #0
   46e54:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   46e58:	a902      	add	r1, sp, #8
   46e5a:	f7ff fece 	bl	46bfa <bt_addr_le_copy>
	if (len_rd) {
   46e5e:	f1b8 0f00 	cmp.w	r8, #0
   46e62:	d00e      	beq.n	46e82 <cf_set+0x76>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   46e64:	2201      	movs	r2, #1
   46e66:	f105 0108 	add.w	r1, r5, #8
   46e6a:	4638      	mov	r0, r7
   46e6c:	47b0      	blx	r6
		if (len < 0) {
   46e6e:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   46e72:	e7d4      	b.n	46e1e <cf_set+0x12>
		unsigned long next_id = strtoul(next, NULL, 10);
   46e74:	220a      	movs	r2, #10
   46e76:	4621      	mov	r1, r4
   46e78:	f7fd ff0d 	bl	44c96 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   46e7c:	2800      	cmp	r0, #0
   46e7e:	d0de      	beq.n	46e3e <cf_set+0x32>
   46e80:	e7cb      	b.n	46e1a <cf_set+0xe>
		clear_cf_cfg(cfg);
   46e82:	4628      	mov	r0, r5
   46e84:	f7ff ff1f 	bl	46cc6 <clear_cf_cfg>
   46e88:	e7c9      	b.n	46e1e <cf_set+0x12>
			return -ENOMEM;
   46e8a:	f06f 040b 	mvn.w	r4, #11
   46e8e:	e7c6      	b.n	46e1e <cf_set+0x12>

00046e90 <ccc_find_cfg>:
{
   46e90:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   46e92:	7803      	ldrb	r3, [r0, #0]
   46e94:	4293      	cmp	r3, r2
{
   46e96:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   46e98:	d001      	beq.n	46e9e <ccc_find_cfg+0xe>
	return NULL;
   46e9a:	2000      	movs	r0, #0
}
   46e9c:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   46e9e:	2207      	movs	r2, #7
   46ea0:	3001      	adds	r0, #1
   46ea2:	f7fd ff9e 	bl	44de2 <memcmp>
		if (id == ccc->cfg[i].id &&
   46ea6:	2800      	cmp	r0, #0
   46ea8:	d1f7      	bne.n	46e9a <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   46eaa:	4620      	mov	r0, r4
   46eac:	e7f6      	b.n	46e9c <ccc_find_cfg+0xc>

00046eae <find_ccc_cfg>:
{
   46eae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46eb0:	460c      	mov	r4, r1
						    &cfg->peer)) {
   46eb2:	1c4d      	adds	r5, r1, #1
		if (conn) {
   46eb4:	b148      	cbz	r0, 46eca <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   46eb6:	7809      	ldrb	r1, [r1, #0]
   46eb8:	462a      	mov	r2, r5
   46eba:	f7fe ffe7 	bl	45e8c <bt_conn_is_peer_addr_le>
	return NULL;
   46ebe:	2800      	cmp	r0, #0
   46ec0:	bf08      	it	eq
   46ec2:	2400      	moveq	r4, #0
}
   46ec4:	4620      	mov	r0, r4
   46ec6:	b003      	add	sp, #12
   46ec8:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   46eca:	9000      	str	r0, [sp, #0]
   46ecc:	2207      	movs	r2, #7
   46ece:	f8cd 0003 	str.w	r0, [sp, #3]
   46ed2:	4669      	mov	r1, sp
   46ed4:	4628      	mov	r0, r5
   46ed6:	f7fd ff84 	bl	44de2 <memcmp>
	return NULL;
   46eda:	2800      	cmp	r0, #0
   46edc:	bf18      	it	ne
   46ede:	2400      	movne	r4, #0
   46ee0:	e7f0      	b.n	46ec4 <find_ccc_cfg+0x16>

00046ee2 <bt_gatt_attr_read_ccc>:
{
   46ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   46ee4:	68c9      	ldr	r1, [r1, #12]
{
   46ee6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   46eea:	4615      	mov	r5, r2
   46eec:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   46eee:	f7ff ffde 	bl	46eae <find_ccc_cfg>
	if (cfg) {
   46ef2:	b100      	cbz	r0, 46ef6 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   46ef4:	8900      	ldrh	r0, [r0, #8]
   46ef6:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   46efa:	2e02      	cmp	r6, #2
   46efc:	d80e      	bhi.n	46f1c <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   46efe:	f1c6 0402 	rsb	r4, r6, #2
   46f02:	42bc      	cmp	r4, r7
   46f04:	bfa8      	it	ge
   46f06:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   46f08:	f10d 0306 	add.w	r3, sp, #6
   46f0c:	4622      	mov	r2, r4
   46f0e:	1999      	adds	r1, r3, r6
   46f10:	4628      	mov	r0, r5
   46f12:	f7fd ff76 	bl	44e02 <memcpy>
}
   46f16:	4620      	mov	r0, r4
   46f18:	b003      	add	sp, #12
   46f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   46f1c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   46f20:	e7f9      	b.n	46f16 <bt_gatt_attr_read_ccc+0x34>

00046f22 <sc_save>:
{
   46f22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   46f26:	4680      	mov	r8, r0
   46f28:	460f      	mov	r7, r1
   46f2a:	4616      	mov	r6, r2
   46f2c:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   46f2e:	f7e6 fecf 	bl	2dcd0 <find_sc_cfg>
	if (!cfg) {
   46f32:	4604      	mov	r4, r0
   46f34:	b960      	cbnz	r0, 46f50 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   46f36:	4669      	mov	r1, sp
   46f38:	9000      	str	r0, [sp, #0]
   46f3a:	f8cd 0003 	str.w	r0, [sp, #3]
   46f3e:	f7e6 fec7 	bl	2dcd0 <find_sc_cfg>
		if (!cfg) {
   46f42:	4604      	mov	r4, r0
   46f44:	b1d0      	cbz	r0, 46f7c <sc_save+0x5a>
		cfg->id = id;
   46f46:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   46f4a:	4639      	mov	r1, r7
   46f4c:	f7ff fe55 	bl	46bfa <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   46f50:	8922      	ldrh	r2, [r4, #8]
   46f52:	8963      	ldrh	r3, [r4, #10]
   46f54:	b972      	cbnz	r2, 46f74 <sc_save+0x52>
   46f56:	b97b      	cbnz	r3, 46f78 <sc_save+0x56>
		cfg->data.start = start;
   46f58:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   46f5a:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   46f5c:	4621      	mov	r1, r4
   46f5e:	f811 0b01 	ldrb.w	r0, [r1], #1
   46f62:	f7fe fbeb 	bl	4573c <bt_addr_le_is_bonded>
   46f66:	b148      	cbz	r0, 46f7c <sc_save+0x5a>
		sc_store(cfg);
   46f68:	4620      	mov	r0, r4
}
   46f6a:	b002      	add	sp, #8
   46f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   46f70:	f7e6 bd3a 	b.w	2d9e8 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   46f74:	4296      	cmp	r6, r2
   46f76:	d304      	bcc.n	46f82 <sc_save+0x60>
   46f78:	429d      	cmp	r5, r3
   46f7a:	d8ee      	bhi.n	46f5a <sc_save+0x38>
}
   46f7c:	b002      	add	sp, #8
   46f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   46f82:	429d      	cmp	r5, r3
		*start = new_start;
   46f84:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   46f86:	d9e9      	bls.n	46f5c <sc_save+0x3a>
   46f88:	e7e7      	b.n	46f5a <sc_save+0x38>

00046f8a <sc_clear>:
{
   46f8a:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   46f8c:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   46f90:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   46f92:	4631      	mov	r1, r6
   46f94:	7a00      	ldrb	r0, [r0, #8]
   46f96:	f7fe fbd1 	bl	4573c <bt_addr_le_is_bonded>
   46f9a:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   46f9c:	4631      	mov	r1, r6
   46f9e:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   46fa0:	b11d      	cbz	r5, 46faa <sc_clear+0x20>
}
   46fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   46fa6:	f7e6 beb5 	b.w	2dd14 <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   46faa:	f7e6 fe91 	bl	2dcd0 <find_sc_cfg>
		if (cfg) {
   46fae:	b128      	cbz	r0, 46fbc <sc_clear+0x32>
	memset(cfg, 0, sizeof(*cfg));
   46fb0:	4629      	mov	r1, r5
   46fb2:	220c      	movs	r2, #12
}
   46fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   46fb8:	f7fd bf2e 	b.w	44e18 <memset>
}
   46fbc:	bd70      	pop	{r4, r5, r6, pc}

00046fbe <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   46fbe:	2a02      	cmp	r2, #2
{
   46fc0:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   46fc2:	d108      	bne.n	46fd6 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   46fc4:	2300      	movs	r3, #0
   46fc6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   46fca:	461a      	mov	r2, r3
   46fcc:	7a00      	ldrb	r0, [r0, #8]
   46fce:	f7ff ffa8 	bl	46f22 <sc_save>
}
   46fd2:	2002      	movs	r0, #2
   46fd4:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   46fd6:	f7ff ffd8 	bl	46f8a <sc_clear>
   46fda:	e7fa      	b.n	46fd2 <sc_ccc_cfg_write+0x14>

00046fdc <sc_set>:
{
   46fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46fe0:	460e      	mov	r6, r1
   46fe2:	b086      	sub	sp, #24
   46fe4:	4617      	mov	r7, r2
   46fe6:	4698      	mov	r8, r3
	if (!name) {
   46fe8:	4605      	mov	r5, r0
   46fea:	b928      	cbnz	r0, 46ff8 <sc_set+0x1c>
		return -EINVAL;
   46fec:	f06f 0415 	mvn.w	r4, #21
}
   46ff0:	4620      	mov	r0, r4
   46ff2:	b006      	add	sp, #24
   46ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   46ff8:	a902      	add	r1, sp, #8
   46ffa:	f7fd ffca 	bl	44f92 <bt_settings_decode_key>
	if (err) {
   46ffe:	4604      	mov	r4, r0
   47000:	2800      	cmp	r0, #0
   47002:	d1f3      	bne.n	46fec <sc_set+0x10>
	settings_name_next(name, &next);
   47004:	a901      	add	r1, sp, #4
   47006:	4628      	mov	r0, r5
   47008:	f7fc fc2f 	bl	4386a <settings_name_next>
	if (!next) {
   4700c:	9801      	ldr	r0, [sp, #4]
   4700e:	b998      	cbnz	r0, 47038 <sc_set+0x5c>
	cfg = find_sc_cfg(id, &addr);
   47010:	a902      	add	r1, sp, #8
   47012:	2000      	movs	r0, #0
   47014:	f7e6 fe5c 	bl	2dcd0 <find_sc_cfg>
	if (!cfg && len_rd) {
   47018:	4605      	mov	r5, r0
   4701a:	bb08      	cbnz	r0, 47060 <sc_set+0x84>
   4701c:	2e00      	cmp	r6, #0
   4701e:	d0e7      	beq.n	46ff0 <sc_set+0x14>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   47020:	a904      	add	r1, sp, #16
   47022:	9004      	str	r0, [sp, #16]
   47024:	4604      	mov	r4, r0
   47026:	f8cd 0013 	str.w	r0, [sp, #19]
   4702a:	f7e6 fe51 	bl	2dcd0 <find_sc_cfg>
		if (!cfg) {
   4702e:	4605      	mov	r5, r0
   47030:	b948      	cbnz	r0, 47046 <sc_set+0x6a>
			return -ENOMEM;
   47032:	f06f 040b 	mvn.w	r4, #11
   47036:	e7db      	b.n	46ff0 <sc_set+0x14>
		unsigned long next_id = strtoul(next, NULL, 10);
   47038:	220a      	movs	r2, #10
   4703a:	4621      	mov	r1, r4
   4703c:	f7fd fe2b 	bl	44c96 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   47040:	2800      	cmp	r0, #0
   47042:	d0e5      	beq.n	47010 <sc_set+0x34>
   47044:	e7d2      	b.n	46fec <sc_set+0x10>
		cfg->id = id;
   47046:	f800 4b01 	strb.w	r4, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   4704a:	a902      	add	r1, sp, #8
   4704c:	f7ff fdd5 	bl	46bfa <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   47050:	2204      	movs	r2, #4
   47052:	f105 0108 	add.w	r1, r5, #8
   47056:	4640      	mov	r0, r8
   47058:	47b8      	blx	r7
		if (len < 0) {
   4705a:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   4705e:	e7c7      	b.n	46ff0 <sc_set+0x14>
	if (len_rd) {
   47060:	2e00      	cmp	r6, #0
   47062:	d1f5      	bne.n	47050 <sc_set+0x74>
		memset(cfg, 0, sizeof(*cfg));
   47064:	220c      	movs	r2, #12
   47066:	4631      	mov	r1, r6
   47068:	f7fd fed6 	bl	44e18 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   4706c:	e7c0      	b.n	46ff0 <sc_set+0x14>

0004706e <sc_restore_rsp>:
{
   4706e:	b538      	push	{r3, r4, r5, lr}
   47070:	4604      	mov	r4, r0
   47072:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   47074:	f7e6 fc96 	bl	2d9a4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   47078:	b130      	cbz	r0, 47088 <sc_restore_rsp+0x1a>
   4707a:	7a03      	ldrb	r3, [r0, #8]
   4707c:	07db      	lsls	r3, r3, #31
   4707e:	d503      	bpl.n	47088 <sc_restore_rsp+0x1a>
   47080:	2101      	movs	r1, #1
   47082:	300c      	adds	r0, #12
   47084:	f7ff fdaa 	bl	46bdc <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   47088:	b985      	cbnz	r5, 470ac <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   4708a:	7a20      	ldrb	r0, [r4, #8]
   4708c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   47090:	f7e6 fe1e 	bl	2dcd0 <find_sc_cfg>
		if (sc_cfg) {
   47094:	4604      	mov	r4, r0
   47096:	b148      	cbz	r0, 470ac <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   47098:	4629      	mov	r1, r5
   4709a:	2204      	movs	r2, #4
   4709c:	3008      	adds	r0, #8
   4709e:	f7fd febb 	bl	44e18 <memset>
		sc_store(cfg);
   470a2:	4620      	mov	r0, r4
}
   470a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   470a8:	f7e6 bc9e 	b.w	2d9e8 <sc_store>
}
   470ac:	bd38      	pop	{r3, r4, r5, pc}

000470ae <bt_gatt_attr_read>:
{
   470ae:	b510      	push	{r4, lr}
   470b0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   470b4:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   470b8:	42a1      	cmp	r1, r4
{
   470ba:	4610      	mov	r0, r2
	if (offset > value_len) {
   470bc:	d80b      	bhi.n	470d6 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   470be:	1a64      	subs	r4, r4, r1
   470c0:	429c      	cmp	r4, r3
   470c2:	bfa8      	it	ge
   470c4:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   470c6:	9b03      	ldr	r3, [sp, #12]
   470c8:	b2a4      	uxth	r4, r4
   470ca:	4622      	mov	r2, r4
   470cc:	4419      	add	r1, r3
   470ce:	f7fd fe98 	bl	44e02 <memcpy>
}
   470d2:	4620      	mov	r0, r4
   470d4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   470d6:	f06f 0406 	mvn.w	r4, #6
   470da:	e7fa      	b.n	470d2 <bt_gatt_attr_read+0x24>

000470dc <bt_gatt_attr_value_handle>:
{
   470dc:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   470de:	4604      	mov	r4, r0
   470e0:	b910      	cbnz	r0, 470e8 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   470e2:	2000      	movs	r0, #0
}
   470e4:	b002      	add	sp, #8
   470e6:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   470e8:	2300      	movs	r3, #0
   470ea:	f88d 3004 	strb.w	r3, [sp, #4]
   470ee:	6800      	ldr	r0, [r0, #0]
   470f0:	f642 0303 	movw	r3, #10243	; 0x2803
   470f4:	a901      	add	r1, sp, #4
   470f6:	f8ad 3006 	strh.w	r3, [sp, #6]
   470fa:	f7fd ff70 	bl	44fde <bt_uuid_cmp>
   470fe:	2800      	cmp	r0, #0
   47100:	d1ef      	bne.n	470e2 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   47102:	68e3      	ldr	r3, [r4, #12]
   47104:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   47106:	2800      	cmp	r0, #0
   47108:	d1ec      	bne.n	470e4 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   4710a:	4620      	mov	r0, r4
   4710c:	f7e6 fef6 	bl	2defc <bt_gatt_attr_get_handle>
   47110:	3001      	adds	r0, #1
   47112:	b280      	uxth	r0, r0
	return handle;
   47114:	e7e6      	b.n	470e4 <bt_gatt_attr_value_handle+0x8>

00047116 <bt_gatt_attr_read_chrc>:
{
   47116:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   47118:	68cc      	ldr	r4, [r1, #12]
{
   4711a:	b087      	sub	sp, #28
   4711c:	4608      	mov	r0, r1
   4711e:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   47120:	79a3      	ldrb	r3, [r4, #6]
   47122:	f88d 3004 	strb.w	r3, [sp, #4]
{
   47126:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   4712a:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   4712c:	f7ff ffd6 	bl	470dc <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   47130:	6821      	ldr	r1, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   47132:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   47136:	780b      	ldrb	r3, [r1, #0]
   47138:	b99b      	cbnz	r3, 47162 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   4713a:	884b      	ldrh	r3, [r1, #2]
   4713c:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   47140:	2405      	movs	r4, #5
	if (offset > value_len) {
   47142:	42b4      	cmp	r4, r6
   47144:	d315      	bcc.n	47172 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   47146:	1ba4      	subs	r4, r4, r6
   47148:	42bc      	cmp	r4, r7
   4714a:	bfa8      	it	ge
   4714c:	463c      	movge	r4, r7
   4714e:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   47150:	ab01      	add	r3, sp, #4
   47152:	4622      	mov	r2, r4
   47154:	1999      	adds	r1, r3, r6
   47156:	4628      	mov	r0, r5
   47158:	f7fd fe53 	bl	44e02 <memcpy>
}
   4715c:	4620      	mov	r0, r4
   4715e:	b007      	add	sp, #28
   47160:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   47162:	2210      	movs	r2, #16
   47164:	3101      	adds	r1, #1
   47166:	f10d 0007 	add.w	r0, sp, #7
   4716a:	f7fd fe4a 	bl	44e02 <memcpy>
		value_len += 16U;
   4716e:	2413      	movs	r4, #19
   47170:	e7e7      	b.n	47142 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   47172:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   47176:	e7f1      	b.n	4715c <bt_gatt_attr_read_chrc+0x46>

00047178 <bt_gatt_foreach_attr>:
{
   47178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   4717a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   4717e:	2300      	movs	r3, #0
   47180:	9300      	str	r3, [sp, #0]
   47182:	461a      	mov	r2, r3
   47184:	f7e6 feea 	bl	2df5c <bt_gatt_foreach_attr_type>
}
   47188:	b005      	add	sp, #20
   4718a:	f85d fb04 	ldr.w	pc, [sp], #4

0004718e <bt_gatt_check_perm>:
{
   4718e:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   47190:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   47192:	7c8b      	ldrb	r3, [r1, #18]
{
   47194:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   47196:	d504      	bpl.n	471a2 <bt_gatt_check_perm+0x14>
   47198:	f013 0f15 	tst.w	r3, #21
   4719c:	d01e      	beq.n	471dc <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   4719e:	6848      	ldr	r0, [r1, #4]
   471a0:	b1e0      	cbz	r0, 471dc <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   471a2:	0790      	lsls	r0, r2, #30
   471a4:	d504      	bpl.n	471b0 <bt_gatt_check_perm+0x22>
   471a6:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   471aa:	d019      	beq.n	471e0 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   471ac:	6889      	ldr	r1, [r1, #8]
   471ae:	b1b9      	cbz	r1, 471e0 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   471b0:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   471b4:	f014 0f30 	tst.w	r4, #48	; 0x30
   471b8:	d103      	bne.n	471c2 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   471ba:	f014 000c 	ands.w	r0, r4, #12
   471be:	d107      	bne.n	471d0 <bt_gatt_check_perm+0x42>
}
   471c0:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   471c2:	4628      	mov	r0, r5
   471c4:	f7fe fe60 	bl	45e88 <bt_conn_get_security>
   471c8:	2802      	cmp	r0, #2
   471ca:	d8f6      	bhi.n	471ba <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   471cc:	2005      	movs	r0, #5
   471ce:	e7f7      	b.n	471c0 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   471d0:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   471d2:	2b00      	cmp	r3, #0
   471d4:	bf14      	ite	ne
   471d6:	2000      	movne	r0, #0
   471d8:	200f      	moveq	r0, #15
   471da:	e7f1      	b.n	471c0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   471dc:	2002      	movs	r0, #2
   471de:	e7ef      	b.n	471c0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   471e0:	2003      	movs	r0, #3
   471e2:	e7ed      	b.n	471c0 <bt_gatt_check_perm+0x32>

000471e4 <gatt_notify>:
{
   471e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   471e8:	4614      	mov	r4, r2
   471ea:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   471ec:	2214      	movs	r2, #20
   471ee:	6861      	ldr	r1, [r4, #4]
{
   471f0:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   471f2:	f7ff ffcc 	bl	4718e <bt_gatt_check_perm>
   471f6:	bb08      	cbnz	r0, 4723c <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   471f8:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   471fa:	211b      	movs	r1, #27
   471fc:	3202      	adds	r2, #2
   471fe:	4638      	mov	r0, r7
   47200:	f7ff fb56 	bl	468b0 <bt_att_create_pdu>
	if (!buf) {
   47204:	4605      	mov	r5, r0
   47206:	b1e8      	cbz	r0, 47244 <gatt_notify+0x60>
   47208:	f100 0908 	add.w	r9, r0, #8
   4720c:	2102      	movs	r1, #2
   4720e:	4648      	mov	r0, r9
   47210:	f000 fd41 	bl	47c96 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   47214:	4606      	mov	r6, r0
   47216:	89a1      	ldrh	r1, [r4, #12]
   47218:	f826 8b02 	strh.w	r8, [r6], #2
   4721c:	4648      	mov	r0, r9
   4721e:	f000 fd3a 	bl	47c96 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   47222:	89a2      	ldrh	r2, [r4, #12]
   47224:	68a1      	ldr	r1, [r4, #8]
   47226:	4630      	mov	r0, r6
   47228:	f7fd fdeb 	bl	44e02 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   4722c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   47230:	4629      	mov	r1, r5
   47232:	4638      	mov	r0, r7
}
   47234:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   47238:	f7ff bbf6 	b.w	46a28 <bt_att_send>
		return -EPERM;
   4723c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   47240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   47244:	f06f 000b 	mvn.w	r0, #11
   47248:	e7fa      	b.n	47240 <gatt_notify+0x5c>

0004724a <bt_gatt_change_aware>:
{
   4724a:	b538      	push	{r3, r4, r5, lr}
   4724c:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   4724e:	f7e6 fba9 	bl	2d9a4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   47252:	b910      	cbnz	r0, 4725a <bt_gatt_change_aware+0x10>
		return true;
   47254:	2501      	movs	r5, #1
}
   47256:	4628      	mov	r0, r5
   47258:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   4725a:	7a03      	ldrb	r3, [r0, #8]
   4725c:	07d9      	lsls	r1, r3, #31
   4725e:	d5f9      	bpl.n	47254 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   47260:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   47264:	4620      	mov	r0, r4
   47266:	f7ff fc5e 	bl	46b26 <atomic_get>
   4726a:	07c2      	lsls	r2, r0, #31
   4726c:	d4f2      	bmi.n	47254 <bt_gatt_change_aware+0xa>
	if (!req) {
   4726e:	2d00      	cmp	r5, #0
   47270:	d0f1      	beq.n	47256 <bt_gatt_change_aware+0xc>
   47272:	4620      	mov	r0, r4
   47274:	f7ff fc57 	bl	46b26 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   47278:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4727a:	f3c0 0540 	ubfx	r5, r0, #1, #1
   4727e:	d509      	bpl.n	47294 <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   47280:	f06f 0102 	mvn.w	r1, #2
   47284:	4620      	mov	r0, r4
   47286:	f7ff fd0f 	bl	46ca8 <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4728a:	2101      	movs	r1, #1
   4728c:	4620      	mov	r0, r4
   4728e:	f7ff fca5 	bl	46bdc <atomic_or>
}
   47292:	e7e0      	b.n	47256 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   47294:	2102      	movs	r1, #2
   47296:	e7f9      	b.n	4728c <bt_gatt_change_aware+0x42>

00047298 <ccc_delayed_store>:
{
   47298:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   4729a:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   4729e:	4605      	mov	r5, r0
		if (!conn) {
   472a0:	b194      	cbz	r4, 472c8 <ccc_delayed_store+0x30>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   472a2:	f104 0688 	add.w	r6, r4, #136	; 0x88
   472a6:	7a20      	ldrb	r0, [r4, #8]
   472a8:	4631      	mov	r1, r6
   472aa:	f7fe fa47 	bl	4573c <bt_addr_le_is_bonded>
   472ae:	b158      	cbz	r0, 472c8 <ccc_delayed_store+0x30>
			ccc_store->conn_list[i] = NULL;
   472b0:	2300      	movs	r3, #0
   472b2:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   472b6:	7a20      	ldrb	r0, [r4, #8]
   472b8:	4631      	mov	r1, r6
   472ba:	f7e7 fa69 	bl	2e790 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   472be:	4620      	mov	r0, r4
}
   472c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   472c4:	f7fe bd48 	b.w	45d58 <bt_conn_unref>
}
   472c8:	bd70      	pop	{r4, r5, r6, pc}

000472ca <sys_memcpy_swap>:
	psrc += length - 1;
   472ca:	1e53      	subs	r3, r2, #1
   472cc:	4419      	add	r1, r3
	for (; length > 0; length--) {
   472ce:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   472d0:	f811 3901 	ldrb.w	r3, [r1], #-1
   472d4:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   472d8:	4290      	cmp	r0, r2
   472da:	d1f9      	bne.n	472d0 <sys_memcpy_swap+0x6>
}
   472dc:	4770      	bx	lr

000472de <smp_encrypt_info>:
}
   472de:	2007      	movs	r0, #7
   472e0:	4770      	bx	lr

000472e2 <smp_chan_get>:
{
   472e2:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   472e4:	2106      	movs	r1, #6
   472e6:	f7fe fefb 	bl	460e0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   472ea:	b100      	cbz	r0, 472ee <smp_chan_get+0xc>
	return CONTAINER_OF(chan, struct bt_smp, chan);
   472ec:	38f0      	subs	r0, #240	; 0xf0
}
   472ee:	bd08      	pop	{r3, pc}

000472f0 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   472f0:	2301      	movs	r3, #1
   472f2:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   472f4:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   472f6:	f3bf 8f5b 	dmb	ish
   472fa:	e850 2f00 	ldrex	r2, [r0]
   472fe:	401a      	ands	r2, r3
   47300:	e840 2100 	strex	r1, r2, [r0]
   47304:	2900      	cmp	r1, #0
   47306:	d1f8      	bne.n	472fa <atomic_clear_bit+0xa>
   47308:	f3bf 8f5b 	dmb	ish
}
   4730c:	4770      	bx	lr

0004730e <bt_smp_aes_cmac>:
{
   4730e:	b570      	push	{r4, r5, r6, lr}
   47310:	b0c2      	sub	sp, #264	; 0x108
   47312:	460d      	mov	r5, r1
   47314:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   47316:	4601      	mov	r1, r0
   47318:	aa16      	add	r2, sp, #88	; 0x58
   4731a:	4668      	mov	r0, sp
{
   4731c:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   4731e:	f7fd fbde 	bl	44ade <tc_cmac_setup>
   47322:	b150      	cbz	r0, 4733a <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   47324:	4632      	mov	r2, r6
   47326:	4629      	mov	r1, r5
   47328:	4668      	mov	r0, sp
   4732a:	f7fd fc03 	bl	44b34 <tc_cmac_update>
   4732e:	b120      	cbz	r0, 4733a <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   47330:	4669      	mov	r1, sp
   47332:	4620      	mov	r0, r4
   47334:	f7fd fc69 	bl	44c0a <tc_cmac_final>
   47338:	b918      	cbnz	r0, 47342 <bt_smp_aes_cmac+0x34>
		return -EIO;
   4733a:	f06f 0004 	mvn.w	r0, #4
}
   4733e:	b042      	add	sp, #264	; 0x108
   47340:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   47342:	2000      	movs	r0, #0
   47344:	e7fb      	b.n	4733e <bt_smp_aes_cmac+0x30>

00047346 <smp_security_request>:
   47346:	2007      	movs	r0, #7
   47348:	4770      	bx	lr

0004734a <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   4734a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   4734c:	2300      	movs	r3, #0
   4734e:	9300      	str	r3, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   47350:	4604      	mov	r4, r0
   47352:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   47354:	460a      	mov	r2, r1
   47356:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   4735a:	2106      	movs	r1, #6
   4735c:	f7fe fe6b 	bl	46036 <bt_l2cap_send_cb>
   47360:	b128      	cbz	r0, 4736e <smp_send.constprop.0+0x24>
		net_buf_unref(buf);
   47362:	4628      	mov	r0, r5
}
   47364:	b003      	add	sp, #12
   47366:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   4736a:	f7f5 bee7 	b.w	3d13c <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   4736e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   47372:	2300      	movs	r3, #0
   47374:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   47378:	b003      	add	sp, #12
   4737a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   4737e:	f7fa bb49 	b.w	41a14 <k_work_reschedule>

00047382 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   47382:	b510      	push	{r4, lr}
   47384:	1e43      	subs	r3, r0, #1
   47386:	f100 0210 	add.w	r2, r0, #16
   4738a:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   4738c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   47390:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   47394:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   47396:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   47398:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   4739a:	d1f7      	bne.n	4738c <sys_mem_swap.constprop.0+0xa>
	}
}
   4739c:	bd10      	pop	{r4, pc}

0004739e <smp_f6>:
{
   4739e:	b5f0      	push	{r4, r5, r6, r7, lr}
   473a0:	b097      	sub	sp, #92	; 0x5c
   473a2:	4605      	mov	r5, r0
   473a4:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   473a6:	a805      	add	r0, sp, #20
   473a8:	2210      	movs	r2, #16
{
   473aa:	461c      	mov	r4, r3
   473ac:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   473ae:	f7ff ff8c 	bl	472ca <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   473b2:	2210      	movs	r2, #16
   473b4:	4631      	mov	r1, r6
   473b6:	a809      	add	r0, sp, #36	; 0x24
   473b8:	f7ff ff87 	bl	472ca <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   473bc:	4621      	mov	r1, r4
   473be:	2210      	movs	r2, #16
   473c0:	a80d      	add	r0, sp, #52	; 0x34
   473c2:	f7ff ff82 	bl	472ca <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   473c6:	991c      	ldr	r1, [sp, #112]	; 0x70
   473c8:	2203      	movs	r2, #3
   473ca:	a811      	add	r0, sp, #68	; 0x44
   473cc:	f7ff ff7d 	bl	472ca <sys_memcpy_swap>
	m[51] = a1->type;
   473d0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   473d2:	f814 3b01 	ldrb.w	r3, [r4], #1
   473d6:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   473da:	4621      	mov	r1, r4
   473dc:	2206      	movs	r2, #6
   473de:	a812      	add	r0, sp, #72	; 0x48
   473e0:	f7fd fd0f 	bl	44e02 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   473e4:	4621      	mov	r1, r4
   473e6:	2206      	movs	r2, #6
   473e8:	a812      	add	r0, sp, #72	; 0x48
   473ea:	f7ff ff6e 	bl	472ca <sys_memcpy_swap>
	m[58] = a2->type;
   473ee:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   473f0:	f814 3b01 	ldrb.w	r3, [r4], #1
   473f4:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   473f8:	4621      	mov	r1, r4
   473fa:	2206      	movs	r2, #6
   473fc:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   47400:	f7fd fcff 	bl	44e02 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   47404:	4621      	mov	r1, r4
   47406:	2206      	movs	r2, #6
   47408:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   4740c:	f7ff ff5d 	bl	472ca <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   47410:	2210      	movs	r2, #16
   47412:	4629      	mov	r1, r5
   47414:	a801      	add	r0, sp, #4
   47416:	f7ff ff58 	bl	472ca <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   4741a:	463b      	mov	r3, r7
   4741c:	2241      	movs	r2, #65	; 0x41
   4741e:	a905      	add	r1, sp, #20
   47420:	a801      	add	r0, sp, #4
   47422:	f7ff ff74 	bl	4730e <bt_smp_aes_cmac>
	if (err) {
   47426:	4604      	mov	r4, r0
   47428:	b910      	cbnz	r0, 47430 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   4742a:	4638      	mov	r0, r7
   4742c:	f7ff ffa9 	bl	47382 <sys_mem_swap.constprop.0>
}
   47430:	4620      	mov	r0, r4
   47432:	b017      	add	sp, #92	; 0x5c
   47434:	bdf0      	pop	{r4, r5, r6, r7, pc}

00047436 <smp_f4>:
{
   47436:	b5f0      	push	{r4, r5, r6, r7, lr}
   47438:	b097      	sub	sp, #92	; 0x5c
   4743a:	4614      	mov	r4, r2
   4743c:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   4743e:	2220      	movs	r2, #32
   47440:	4601      	mov	r1, r0
   47442:	a805      	add	r0, sp, #20
{
   47444:	461d      	mov	r5, r3
   47446:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   47448:	f7ff ff3f 	bl	472ca <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   4744c:	2220      	movs	r2, #32
   4744e:	4631      	mov	r1, r6
   47450:	a80d      	add	r0, sp, #52	; 0x34
   47452:	f7ff ff3a 	bl	472ca <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   47456:	4621      	mov	r1, r4
   47458:	2210      	movs	r2, #16
   4745a:	a801      	add	r0, sp, #4
	m[64] = z;
   4745c:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   47460:	f7ff ff33 	bl	472ca <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   47464:	463b      	mov	r3, r7
   47466:	2241      	movs	r2, #65	; 0x41
   47468:	a905      	add	r1, sp, #20
   4746a:	a801      	add	r0, sp, #4
   4746c:	f7ff ff4f 	bl	4730e <bt_smp_aes_cmac>
	if (err) {
   47470:	4604      	mov	r4, r0
   47472:	b910      	cbnz	r0, 4747a <smp_f4+0x44>
	sys_mem_swap(res, 16);
   47474:	4638      	mov	r0, r7
   47476:	f7ff ff84 	bl	47382 <sys_mem_swap.constprop.0>
}
   4747a:	4620      	mov	r0, r4
   4747c:	b017      	add	sp, #92	; 0x5c
   4747e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00047480 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   47480:	2301      	movs	r3, #1
   47482:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   47484:	f3bf 8f5b 	dmb	ish
   47488:	e850 2f00 	ldrex	r2, [r0]
   4748c:	431a      	orrs	r2, r3
   4748e:	e840 2100 	strex	r1, r2, [r0]
   47492:	2900      	cmp	r1, #0
   47494:	d1f8      	bne.n	47488 <atomic_set_bit+0x8>
   47496:	f3bf 8f5b 	dmb	ish
}
   4749a:	4770      	bx	lr

0004749c <smp_keypress_notif>:
{
   4749c:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   4749e:	210e      	movs	r1, #14
   474a0:	f7ff ffee 	bl	47480 <atomic_set_bit>
}
   474a4:	2000      	movs	r0, #0
   474a6:	bd08      	pop	{r3, pc}

000474a8 <smp_central_ident>:
   474a8:	2007      	movs	r0, #7
   474aa:	4770      	bx	lr

000474ac <smp_pairing_rsp>:
   474ac:	2007      	movs	r0, #7
   474ae:	4770      	bx	lr

000474b0 <smp_signing_info>:
   474b0:	2007      	movs	r0, #7
   474b2:	4770      	bx	lr

000474b4 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   474b4:	f3bf 8f5b 	dmb	ish
   474b8:	6800      	ldr	r0, [r0, #0]
   474ba:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   474be:	4108      	asrs	r0, r1
}
   474c0:	f000 0001 	and.w	r0, r0, #1
   474c4:	4770      	bx	lr

000474c6 <update_keys_check>:
{
   474c6:	b510      	push	{r4, lr}
   474c8:	4603      	mov	r3, r0
	if (!keys ||
   474ca:	b1d9      	cbz	r1, 47504 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   474cc:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   474ce:	f010 0f24 	tst.w	r0, #36	; 0x24
   474d2:	d017      	beq.n	47504 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   474d4:	7d1a      	ldrb	r2, [r3, #20]
   474d6:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   474d8:	7b09      	ldrb	r1, [r1, #12]
   474da:	42a2      	cmp	r2, r4
   474dc:	bf28      	it	cs
   474de:	4622      	movcs	r2, r4
   474e0:	4291      	cmp	r1, r2
   474e2:	d901      	bls.n	474e8 <update_keys_check+0x22>
		return false;
   474e4:	2000      	movs	r0, #0
}
   474e6:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   474e8:	0682      	lsls	r2, r0, #26
   474ea:	d404      	bmi.n	474f6 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   474ec:	7a18      	ldrb	r0, [r3, #8]
   474ee:	3800      	subs	r0, #0
   474f0:	bf18      	it	ne
   474f2:	2001      	movne	r0, #1
   474f4:	e7f7      	b.n	474e6 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   474f6:	2105      	movs	r1, #5
   474f8:	1d18      	adds	r0, r3, #4
   474fa:	f7ff ffdb 	bl	474b4 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   474fe:	2800      	cmp	r0, #0
   47500:	d1f4      	bne.n	474ec <update_keys_check+0x26>
   47502:	e7ef      	b.n	474e4 <update_keys_check+0x1e>
		return true;
   47504:	2001      	movs	r0, #1
   47506:	e7ee      	b.n	474e6 <update_keys_check+0x20>

00047508 <smp_ident_info>:
{
   47508:	b538      	push	{r3, r4, r5, lr}
   4750a:	4604      	mov	r4, r0
   4750c:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4750e:	3004      	adds	r0, #4
   47510:	210d      	movs	r1, #13
   47512:	f7ff ffcf 	bl	474b4 <atomic_test_bit>
   47516:	b170      	cbz	r0, 47536 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   47518:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   4751a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   4751e:	2002      	movs	r0, #2
   47520:	7a19      	ldrb	r1, [r3, #8]
   47522:	f103 0288 	add.w	r2, r3, #136	; 0x88
   47526:	f000 fafb 	bl	47b20 <bt_keys_get_type>
		if (!keys) {
   4752a:	b150      	cbz	r0, 47542 <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   4752c:	2210      	movs	r2, #16
   4752e:	4629      	mov	r1, r5
   47530:	302a      	adds	r0, #42	; 0x2a
   47532:	f7fd fc66 	bl	44e02 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   47536:	4620      	mov	r0, r4
   47538:	2109      	movs	r1, #9
   4753a:	f7ff ffa1 	bl	47480 <atomic_set_bit>
	return 0;
   4753e:	2000      	movs	r0, #0
}
   47540:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   47542:	2008      	movs	r0, #8
   47544:	e7fc      	b.n	47540 <smp_ident_info+0x38>

00047546 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   47546:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   47548:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   4754a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4754c:	4628      	mov	r0, r5
   4754e:	2104      	movs	r1, #4
   47550:	f7ff ffb0 	bl	474b4 <atomic_test_bit>
   47554:	b970      	cbnz	r0, 47574 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   47556:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   4755a:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   4755c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   4755e:	4608      	mov	r0, r1
   47560:	f7fe fd66 	bl	46030 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   47564:	4604      	mov	r4, r0
   47566:	b938      	cbnz	r0, 47578 <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   47568:	2104      	movs	r1, #4
   4756a:	4628      	mov	r0, r5
   4756c:	f7ff ff88 	bl	47480 <atomic_set_bit>
}
   47570:	4620      	mov	r0, r4
   47572:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   47574:	2200      	movs	r2, #0
   47576:	e7f0      	b.n	4755a <smp_create_pdu.constprop.0+0x14>
   47578:	2101      	movs	r1, #1
   4757a:	3008      	adds	r0, #8
   4757c:	f000 fb8b 	bl	47c96 <net_buf_simple_add>
	hdr->code = op;
   47580:	7006      	strb	r6, [r0, #0]
	return buf;
   47582:	e7f5      	b.n	47570 <smp_create_pdu.constprop.0+0x2a>

00047584 <smp_send_pairing_random>:
{
   47584:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   47586:	2104      	movs	r1, #4
{
   47588:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   4758a:	f7ff ffdc 	bl	47546 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   4758e:	4604      	mov	r4, r0
   47590:	b170      	cbz	r0, 475b0 <smp_send_pairing_random+0x2c>
   47592:	2110      	movs	r1, #16
   47594:	3008      	adds	r0, #8
   47596:	f000 fb7e 	bl	47c96 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   4759a:	2210      	movs	r2, #16
   4759c:	f105 0127 	add.w	r1, r5, #39	; 0x27
   475a0:	f7fd fc2f 	bl	44e02 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   475a4:	4628      	mov	r0, r5
   475a6:	4621      	mov	r1, r4
   475a8:	f7ff fecf 	bl	4734a <smp_send.constprop.0>
	return 0;
   475ac:	2000      	movs	r0, #0
}
   475ae:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   475b0:	2008      	movs	r0, #8
   475b2:	e7fc      	b.n	475ae <smp_send_pairing_random+0x2a>

000475b4 <smp_dhkey_check>:
{
   475b4:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   475b6:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   475ba:	78db      	ldrb	r3, [r3, #3]
   475bc:	2b01      	cmp	r3, #1
{
   475be:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   475c0:	d114      	bne.n	475ec <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   475c2:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   475c4:	1d05      	adds	r5, r0, #4
   475c6:	2110      	movs	r1, #16
   475c8:	4628      	mov	r0, r5
   475ca:	f7ff fe91 	bl	472f0 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   475ce:	4631      	mov	r1, r6
   475d0:	2210      	movs	r2, #16
   475d2:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   475d6:	f7fd fc14 	bl	44e02 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   475da:	2107      	movs	r1, #7
   475dc:	4628      	mov	r0, r5
   475de:	f7ff ff69 	bl	474b4 <atomic_test_bit>
   475e2:	b128      	cbz	r0, 475f0 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   475e4:	2109      	movs	r1, #9
   475e6:	4628      	mov	r0, r5
   475e8:	f7ff ff4a 	bl	47480 <atomic_set_bit>
}
   475ec:	2000      	movs	r0, #0
   475ee:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   475f0:	210a      	movs	r1, #10
   475f2:	4628      	mov	r0, r5
   475f4:	f7ff ff5e 	bl	474b4 <atomic_test_bit>
   475f8:	2800      	cmp	r0, #0
   475fa:	d1f3      	bne.n	475e4 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   475fc:	4620      	mov	r0, r4
}
   475fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   47602:	f7e7 bae9 	b.w	2ebd8 <compute_and_check_and_send_periph_dhcheck>

00047606 <smp_pairing_confirm>:
{
   47606:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   47608:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   4760a:	1d05      	adds	r5, r0, #4
{
   4760c:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   4760e:	210b      	movs	r1, #11
   47610:	4628      	mov	r0, r5
   47612:	f7ff fe6d 	bl	472f0 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   47616:	2210      	movs	r2, #16
   47618:	4631      	mov	r1, r6
   4761a:	f104 0017 	add.w	r0, r4, #23
   4761e:	f7fd fbf0 	bl	44e02 <memcpy>
	switch (smp->method) {
   47622:	7a23      	ldrb	r3, [r4, #8]
   47624:	2b01      	cmp	r3, #1
   47626:	d009      	beq.n	4763c <smp_pairing_confirm+0x36>
   47628:	2b02      	cmp	r3, #2
   4762a:	d113      	bne.n	47654 <smp_pairing_confirm+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   4762c:	4620      	mov	r0, r4
   4762e:	2104      	movs	r1, #4
   47630:	f7ff ff26 	bl	47480 <atomic_set_bit>
}
   47634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   47638:	f7e7 bbb0 	b.w	2ed9c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4763c:	210a      	movs	r1, #10
   4763e:	4628      	mov	r0, r5
   47640:	f7ff ff38 	bl	474b4 <atomic_test_bit>
   47644:	2800      	cmp	r0, #0
   47646:	d0f1      	beq.n	4762c <smp_pairing_confirm+0x26>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   47648:	4628      	mov	r0, r5
   4764a:	2100      	movs	r1, #0
   4764c:	f7ff ff18 	bl	47480 <atomic_set_bit>
			return 0;
   47650:	2000      	movs	r0, #0
}
   47652:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   47654:	2008      	movs	r0, #8
   47656:	e7fc      	b.n	47652 <smp_pairing_confirm+0x4c>

00047658 <atomic_test_and_clear_bit>:
{
   47658:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   4765a:	2301      	movs	r3, #1
   4765c:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   47660:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   47662:	f3bf 8f5b 	dmb	ish
   47666:	e850 3f00 	ldrex	r3, [r0]
   4766a:	ea03 0402 	and.w	r4, r3, r2
   4766e:	e840 4500 	strex	r5, r4, [r0]
   47672:	2d00      	cmp	r5, #0
   47674:	d1f7      	bne.n	47666 <atomic_test_and_clear_bit+0xe>
   47676:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   4767a:	420b      	tst	r3, r1
}
   4767c:	bf14      	ite	ne
   4767e:	2001      	movne	r0, #1
   47680:	2000      	moveq	r0, #0
   47682:	bd30      	pop	{r4, r5, pc}

00047684 <smp_reset>:
{
   47684:	b538      	push	{r3, r4, r5, lr}
   47686:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   47688:	1d03      	adds	r3, r0, #4
   4768a:	2500      	movs	r5, #0
   4768c:	f3bf 8f5b 	dmb	ish
   47690:	e853 2f00 	ldrex	r2, [r3]
   47694:	e843 5100 	strex	r1, r5, [r3]
   47698:	2900      	cmp	r1, #0
   4769a:	d1f9      	bne.n	47690 <smp_reset+0xc>
   4769c:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   476a0:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   476a4:	f001 face 	bl	48c44 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   476a8:	7225      	strb	r5, [r4, #8]
   476aa:	f3bf 8f5b 	dmb	ish
   476ae:	e854 3f00 	ldrex	r3, [r4]
   476b2:	e844 5200 	strex	r2, r5, [r4]
   476b6:	2a00      	cmp	r2, #0
   476b8:	d1f9      	bne.n	476ae <smp_reset+0x2a>
   476ba:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   476be:	4620      	mov	r0, r4
   476c0:	2101      	movs	r1, #1
}
   476c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   476c6:	f7ff bedb 	b.w	47480 <atomic_set_bit>

000476ca <bt_smp_request_ltk>:
{
   476ca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   476ce:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   476d2:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   476d6:	4604      	mov	r4, r0
   476d8:	4693      	mov	fp, r2
   476da:	469a      	mov	sl, r3
	smp = smp_chan_get(conn);
   476dc:	f7ff fe01 	bl	472e2 <smp_chan_get>
	if (!smp) {
   476e0:	4605      	mov	r5, r0
   476e2:	2800      	cmp	r0, #0
   476e4:	d070      	beq.n	477c8 <bt_smp_request_ltk+0xfe>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   476e6:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   476e8:	f1b9 0f00 	cmp.w	r9, #0
   476ec:	d128      	bne.n	47740 <bt_smp_request_ltk+0x76>
   476ee:	ea5b 030a 	orrs.w	r3, fp, sl
   476f2:	d125      	bne.n	47740 <bt_smp_request_ltk+0x76>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   476f4:	2103      	movs	r1, #3
   476f6:	4638      	mov	r0, r7
   476f8:	f7ff fedc 	bl	474b4 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   476fc:	b300      	cbz	r0, 47740 <bt_smp_request_ltk+0x76>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   476fe:	2101      	movs	r1, #1
   47700:	4638      	mov	r0, r7
   47702:	f7ff fed7 	bl	474b4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   47706:	4606      	mov	r6, r0
   47708:	b1d0      	cbz	r0, 47740 <bt_smp_request_ltk+0x76>
	return MIN(req->max_key_size, rsp->max_key_size);
   4770a:	7d2c      	ldrb	r4, [r5, #20]
   4770c:	7b6b      	ldrb	r3, [r5, #13]
   4770e:	429c      	cmp	r4, r3
   47710:	bf28      	it	cs
   47712:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   47714:	4622      	mov	r2, r4
   47716:	f105 0147 	add.w	r1, r5, #71	; 0x47
   4771a:	4640      	mov	r0, r8
   4771c:	f7fd fb71 	bl	44e02 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   47720:	2c0f      	cmp	r4, #15
   47722:	d806      	bhi.n	47732 <bt_smp_request_ltk+0x68>
			(void)memset(ltk + enc_size, 0,
   47724:	f1c4 0210 	rsb	r2, r4, #16
   47728:	4649      	mov	r1, r9
   4772a:	eb08 0004 	add.w	r0, r8, r4
   4772e:	f7fd fb73 	bl	44e18 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   47732:	2101      	movs	r1, #1
   47734:	4638      	mov	r0, r7
   47736:	f7ff fea3 	bl	47480 <atomic_set_bit>
}
   4773a:	4630      	mov	r0, r6
   4773c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!conn->le.keys) {
   47740:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   47744:	b983      	cbnz	r3, 47768 <bt_smp_request_ltk+0x9e>
					     &conn->le.dst);
   47746:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   4774a:	7a21      	ldrb	r1, [r4, #8]
   4774c:	4632      	mov	r2, r6
   4774e:	2020      	movs	r0, #32
   47750:	f7e7 ffe4 	bl	2f71c <bt_keys_find>
   47754:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   47758:	b930      	cbnz	r0, 47768 <bt_smp_request_ltk+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   4775a:	7a21      	ldrb	r1, [r4, #8]
   4775c:	4632      	mov	r2, r6
   4775e:	2001      	movs	r0, #1
   47760:	f7e7 ffdc 	bl	2f71c <bt_keys_find>
   47764:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   47768:	f1b9 0f00 	cmp.w	r9, #0
   4776c:	d11d      	bne.n	477aa <bt_smp_request_ltk+0xe0>
   4776e:	ea5b 0a0a 	orrs.w	sl, fp, sl
   47772:	d11a      	bne.n	477aa <bt_smp_request_ltk+0xe0>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   47774:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   47778:	b1b9      	cbz	r1, 477aa <bt_smp_request_ltk+0xe0>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   4777a:	89cb      	ldrh	r3, [r1, #14]
   4777c:	069b      	lsls	r3, r3, #26
   4777e:	d514      	bpl.n	477aa <bt_smp_request_ltk+0xe0>
		enc_size = conn->le.keys->enc_size;
   47780:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   47782:	4640      	mov	r0, r8
   47784:	4622      	mov	r2, r4
   47786:	311a      	adds	r1, #26
   47788:	f7fd fb3b 	bl	44e02 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   4778c:	2c0f      	cmp	r4, #15
   4778e:	d806      	bhi.n	4779e <bt_smp_request_ltk+0xd4>
			(void)memset(ltk + enc_size, 0,
   47790:	f1c4 0210 	rsb	r2, r4, #16
   47794:	4649      	mov	r1, r9
   47796:	eb08 0004 	add.w	r0, r8, r4
   4779a:	f7fd fb3d 	bl	44e18 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4779e:	2101      	movs	r1, #1
   477a0:	4638      	mov	r0, r7
   477a2:	f7ff fe6d 	bl	47480 <atomic_set_bit>
		return true;
   477a6:	2601      	movs	r6, #1
   477a8:	e7c7      	b.n	4773a <bt_smp_request_ltk+0x70>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   477aa:	210f      	movs	r1, #15
   477ac:	4638      	mov	r0, r7
   477ae:	f7ff fe81 	bl	474b4 <atomic_test_bit>
   477b2:	b120      	cbz	r0, 477be <bt_smp_request_ltk+0xf4>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   477b4:	2202      	movs	r2, #2
   477b6:	2106      	movs	r1, #6
   477b8:	4620      	mov	r0, r4
   477ba:	f7e5 f8e3 	bl	2c984 <bt_conn_security_changed>
	smp_reset(smp);
   477be:	4628      	mov	r0, r5
   477c0:	f7ff ff60 	bl	47684 <smp_reset>
	return false;
   477c4:	2600      	movs	r6, #0
   477c6:	e7b8      	b.n	4773a <bt_smp_request_ltk+0x70>
		return false;
   477c8:	4606      	mov	r6, r0
   477ca:	e7b6      	b.n	4773a <bt_smp_request_ltk+0x70>

000477cc <bt_smp_sign>:
   477cc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   477d0:	4770      	bx	lr

000477d2 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   477d2:	1d03      	adds	r3, r0, #4
{
   477d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   477d6:	4605      	mov	r5, r0
   477d8:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   477da:	4618      	mov	r0, r3
   477dc:	2103      	movs	r1, #3
   477de:	f7ff fe69 	bl	474b4 <atomic_test_bit>
   477e2:	b1f0      	cbz	r0, 47822 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   477e4:	4631      	mov	r1, r6
   477e6:	4628      	mov	r0, r5
   477e8:	f7e7 fde6 	bl	2f3b8 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   477ec:	2105      	movs	r1, #5
   477ee:	4628      	mov	r0, r5
   477f0:	f7ff fea9 	bl	47546 <smp_create_pdu.constprop.0>
	if (!buf) {
   477f4:	4604      	mov	r4, r0
   477f6:	b308      	cbz	r0, 4783c <smp_error+0x6a>
   477f8:	2101      	movs	r1, #1
   477fa:	3008      	adds	r0, #8
   477fc:	f000 fa4b 	bl	47c96 <net_buf_simple_add>
	rsp->reason = reason;
   47800:	7006      	strb	r6, [r0, #0]
   47802:	2600      	movs	r6, #0
   47804:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   47808:	9600      	str	r6, [sp, #0]
   4780a:	4633      	mov	r3, r6
   4780c:	4622      	mov	r2, r4
   4780e:	2106      	movs	r1, #6
   47810:	f7fe fc11 	bl	46036 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   47814:	b118      	cbz	r0, 4781e <smp_error+0x4c>
		net_buf_unref(buf);
   47816:	4620      	mov	r0, r4
   47818:	f7f5 fc90 	bl	3d13c <net_buf_unref>
	return 0;
   4781c:	4630      	mov	r0, r6
}
   4781e:	b002      	add	sp, #8
   47820:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   47822:	2101      	movs	r1, #1
   47824:	4618      	mov	r0, r3
   47826:	f7ff fe45 	bl	474b4 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4782a:	2800      	cmp	r0, #0
   4782c:	d1da      	bne.n	477e4 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4782e:	210f      	movs	r1, #15
   47830:	4618      	mov	r0, r3
   47832:	f7ff fe3f 	bl	474b4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   47836:	2800      	cmp	r0, #0
   47838:	d1d4      	bne.n	477e4 <smp_error+0x12>
   4783a:	e7d7      	b.n	477ec <smp_error+0x1a>
		return -ENOBUFS;
   4783c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   47840:	e7ed      	b.n	4781e <smp_error+0x4c>

00047842 <bt_smp_dhkey_ready>:
{
   47842:	b570      	push	{r4, r5, r6, lr}
   47844:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   47846:	2008      	movs	r0, #8
   47848:	f7e7 f8e2 	bl	2ea10 <smp_find>
	if (smp) {
   4784c:	4604      	mov	r4, r0
   4784e:	b1b8      	cbz	r0, 47880 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   47850:	1d05      	adds	r5, r0, #4
   47852:	2108      	movs	r1, #8
   47854:	4628      	mov	r0, r5
   47856:	f7ff fd4b 	bl	472f0 <atomic_clear_bit>
	if (!dhkey) {
   4785a:	b38e      	cbz	r6, 478c0 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4785c:	2107      	movs	r1, #7
   4785e:	f7ff fd47 	bl	472f0 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   47862:	4631      	mov	r1, r6
   47864:	2220      	movs	r2, #32
   47866:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4786a:	f7fd faca 	bl	44e02 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4786e:	210a      	movs	r1, #10
   47870:	4628      	mov	r0, r5
   47872:	f7ff fe1f 	bl	474b4 <atomic_test_bit>
   47876:	b168      	cbz	r0, 47894 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   47878:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4787a:	4628      	mov	r0, r5
   4787c:	f7ff fe00 	bl	47480 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   47880:	2007      	movs	r0, #7
   47882:	f7e7 f8c5 	bl	2ea10 <smp_find>
		if (smp) {
   47886:	4604      	mov	r4, r0
   47888:	b118      	cbz	r0, 47892 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   4788a:	f7e7 f8ab 	bl	2e9e4 <smp_dhkey_generate>
			if (err) {
   4788e:	4601      	mov	r1, r0
   47890:	b990      	cbnz	r0, 478b8 <bt_smp_dhkey_ready+0x76>
}
   47892:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   47894:	2110      	movs	r1, #16
   47896:	4628      	mov	r0, r5
   47898:	f7ff fe0c 	bl	474b4 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4789c:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   4789e:	2800      	cmp	r0, #0
   478a0:	d1eb      	bne.n	4787a <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   478a2:	4628      	mov	r0, r5
   478a4:	f7ff fe06 	bl	474b4 <atomic_test_bit>
   478a8:	2800      	cmp	r0, #0
   478aa:	d0e9      	beq.n	47880 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   478ac:	4620      	mov	r0, r4
   478ae:	f7e7 f993 	bl	2ebd8 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   478b2:	4601      	mov	r1, r0
   478b4:	2800      	cmp	r0, #0
   478b6:	d0e3      	beq.n	47880 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   478b8:	4620      	mov	r0, r4
   478ba:	f7ff ff8a 	bl	477d2 <smp_error>
   478be:	e7df      	b.n	47880 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   478c0:	210b      	movs	r1, #11
   478c2:	e7f9      	b.n	478b8 <bt_smp_dhkey_ready+0x76>

000478c4 <smp_ident_addr_info>:
{
   478c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   478c8:	688f      	ldr	r7, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   478ca:	783b      	ldrb	r3, [r7, #0]
{
   478cc:	4604      	mov	r4, r0
   478ce:	b123      	cbz	r3, 478da <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   478d0:	79bb      	ldrb	r3, [r7, #6]
   478d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   478d6:	2bc0      	cmp	r3, #192	; 0xc0
   478d8:	d16b      	bne.n	479b2 <smp_ident_addr_info+0xee>
	struct bt_conn *conn = smp->chan.chan.conn;
   478da:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   478de:	f105 0888 	add.w	r8, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   478e2:	2207      	movs	r2, #7
   478e4:	4639      	mov	r1, r7
   478e6:	4640      	mov	r0, r8
   478e8:	f7fd fa7b 	bl	44de2 <memcmp>
   478ec:	b180      	cbz	r0, 47910 <smp_ident_addr_info+0x4c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   478ee:	7a28      	ldrb	r0, [r5, #8]
   478f0:	4639      	mov	r1, r7
   478f2:	f7e7 ff61 	bl	2f7b8 <bt_keys_find_addr>
		if (keys) {
   478f6:	4606      	mov	r6, r0
   478f8:	b150      	cbz	r0, 47910 <smp_ident_addr_info+0x4c>
			if (!update_keys_check(smp, keys)) {
   478fa:	4601      	mov	r1, r0
   478fc:	4620      	mov	r0, r4
   478fe:	f7ff fde2 	bl	474c6 <update_keys_check>
   47902:	b910      	cbnz	r0, 4790a <smp_ident_addr_info+0x46>
				return BT_SMP_ERR_UNSPECIFIED;
   47904:	2008      	movs	r0, #8
}
   47906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_keys_clear(keys);
   4790a:	4630      	mov	r0, r6
   4790c:	f7e7 ff64 	bl	2f7d8 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   47910:	210d      	movs	r1, #13
   47912:	1d20      	adds	r0, r4, #4
   47914:	f7ff fdce 	bl	474b4 <atomic_test_bit>
   47918:	b398      	cbz	r0, 47982 <smp_ident_addr_info+0xbe>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   4791a:	7a29      	ldrb	r1, [r5, #8]
   4791c:	4642      	mov	r2, r8
   4791e:	2002      	movs	r0, #2
   47920:	f000 f8fe 	bl	47b20 <bt_keys_get_type>
		if (!keys) {
   47924:	4606      	mov	r6, r0
   47926:	2800      	cmp	r0, #0
   47928:	d0ec      	beq.n	47904 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   4792a:	78eb      	ldrb	r3, [r5, #3]
   4792c:	2b00      	cmp	r3, #0
   4792e:	d13d      	bne.n	479ac <smp_ident_addr_info+0xe8>
			dst = &conn->le.resp_addr;
   47930:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   47934:	780b      	ldrb	r3, [r1, #0]
   47936:	2b01      	cmp	r3, #1
   47938:	d120      	bne.n	4797c <smp_ident_addr_info+0xb8>
		if (bt_addr_le_is_rpa(dst)) {
   4793a:	798b      	ldrb	r3, [r1, #6]
   4793c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   47940:	2b40      	cmp	r3, #64	; 0x40
   47942:	d11b      	bne.n	4797c <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   47944:	2206      	movs	r2, #6
   47946:	3101      	adds	r1, #1
   47948:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   4794c:	f7fd fa59 	bl	44e02 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   47950:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   47954:	b193      	cbz	r3, 4797c <smp_ident_addr_info+0xb8>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   47956:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   4795a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4795e:	2bc0      	cmp	r3, #192	; 0xc0
   47960:	d00c      	beq.n	4797c <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   47962:	2207      	movs	r2, #7
   47964:	4639      	mov	r1, r7
   47966:	1c70      	adds	r0, r6, #1
   47968:	f7fd fa4b 	bl	44e02 <memcpy>
   4796c:	2207      	movs	r2, #7
   4796e:	4639      	mov	r1, r7
   47970:	4640      	mov	r0, r8
   47972:	f7fd fa46 	bl	44e02 <memcpy>
				bt_conn_identity_resolved(conn);
   47976:	4628      	mov	r0, r5
   47978:	f7e4 ffd6 	bl	2c928 <bt_conn_identity_resolved>
		bt_id_add(keys);
   4797c:	4630      	mov	r0, r6
   4797e:	f7e3 ff21 	bl	2b7c4 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   47982:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   47986:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   4798a:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   4798c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   47990:	d503      	bpl.n	4799a <smp_ident_addr_info+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   47992:	210a      	movs	r1, #10
   47994:	4620      	mov	r0, r4
   47996:	f7ff fd73 	bl	47480 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   4799a:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   4799e:	b91d      	cbnz	r5, 479a8 <smp_ident_addr_info+0xe4>
		smp_pairing_complete(smp, 0);
   479a0:	4629      	mov	r1, r5
   479a2:	4620      	mov	r0, r4
   479a4:	f7e7 fd08 	bl	2f3b8 <smp_pairing_complete>
	return 0;
   479a8:	2000      	movs	r0, #0
   479aa:	e7ac      	b.n	47906 <smp_ident_addr_info+0x42>
			dst = &conn->le.init_addr;
   479ac:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   479b0:	e7c0      	b.n	47934 <smp_ident_addr_info+0x70>
		return BT_SMP_ERR_INVALID_PARAMS;
   479b2:	200a      	movs	r0, #10
   479b4:	e7a7      	b.n	47906 <smp_ident_addr_info+0x42>

000479b6 <bt_smp_disconnected>:
{
   479b6:	b570      	push	{r4, r5, r6, lr}
   479b8:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   479ba:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   479be:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   479c2:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   479c4:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   479c8:	f001 f93c 	bl	48c44 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   479cc:	2103      	movs	r1, #3
   479ce:	4620      	mov	r0, r4
   479d0:	f7ff fd70 	bl	474b4 <atomic_test_bit>
   479d4:	b1a0      	cbz	r0, 47a00 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   479d6:	2108      	movs	r1, #8
   479d8:	4630      	mov	r0, r6
   479da:	f7e7 fced 	bl	2f3b8 <smp_pairing_complete>
	if (keys) {
   479de:	b13d      	cbz	r5, 479f0 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   479e0:	89eb      	ldrh	r3, [r5, #14]
   479e2:	b113      	cbz	r3, 479ea <bt_smp_disconnected+0x34>
   479e4:	7b6b      	ldrb	r3, [r5, #13]
   479e6:	079b      	lsls	r3, r3, #30
   479e8:	d502      	bpl.n	479f0 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   479ea:	4628      	mov	r0, r5
   479ec:	f7e7 fef4 	bl	2f7d8 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   479f0:	4630      	mov	r0, r6
   479f2:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   479f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   479fa:	2100      	movs	r1, #0
   479fc:	f7fd ba0c 	b.w	44e18 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   47a00:	2101      	movs	r1, #1
   47a02:	4620      	mov	r0, r4
   47a04:	f7ff fd56 	bl	474b4 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   47a08:	2800      	cmp	r0, #0
   47a0a:	d1e4      	bne.n	479d6 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   47a0c:	210f      	movs	r1, #15
   47a0e:	4620      	mov	r0, r4
   47a10:	f7ff fd50 	bl	474b4 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   47a14:	2800      	cmp	r0, #0
   47a16:	d1de      	bne.n	479d6 <bt_smp_disconnected+0x20>
   47a18:	e7e1      	b.n	479de <bt_smp_disconnected+0x28>

00047a1a <smp_timeout>:
{
   47a1a:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   47a1c:	2108      	movs	r1, #8
{
   47a1e:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   47a20:	f5a0 70ec 	sub.w	r0, r0, #472	; 0x1d8
   47a24:	f7e7 fcc8 	bl	2f3b8 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   47a28:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   47a2c:	2104      	movs	r1, #4
}
   47a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   47a32:	f7ff bd25 	b.w	47480 <atomic_set_bit>

00047a36 <bt_smp_update_keys>:
{
   47a36:	b570      	push	{r4, r5, r6, lr}
   47a38:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   47a3a:	f7ff fc52 	bl	472e2 <smp_chan_get>
	if (!smp) {
   47a3e:	4605      	mov	r5, r0
   47a40:	2800      	cmp	r0, #0
   47a42:	d06a      	beq.n	47b1a <bt_smp_update_keys+0xe4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   47a44:	1d06      	adds	r6, r0, #4
   47a46:	2103      	movs	r1, #3
   47a48:	4630      	mov	r0, r6
   47a4a:	f7ff fd33 	bl	474b4 <atomic_test_bit>
   47a4e:	2800      	cmp	r0, #0
   47a50:	d063      	beq.n	47b1a <bt_smp_update_keys+0xe4>
	if (conn->le.keys) {
   47a52:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47a56:	b108      	cbz	r0, 47a5c <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   47a58:	f7e7 febe 	bl	2f7d8 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   47a5c:	7a20      	ldrb	r0, [r4, #8]
   47a5e:	f104 0188 	add.w	r1, r4, #136	; 0x88
   47a62:	f7e7 fe1b 	bl	2f69c <bt_keys_get_addr>
   47a66:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   47a6a:	b928      	cbnz	r0, 47a78 <bt_smp_update_keys+0x42>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   47a6c:	4628      	mov	r0, r5
   47a6e:	2108      	movs	r1, #8
}
   47a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   47a74:	f7ff bead 	b.w	477d2 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   47a78:	210e      	movs	r1, #14
   47a7a:	4630      	mov	r0, r6
   47a7c:	f7ff fd1a 	bl	474b4 <atomic_test_bit>
   47a80:	b128      	cbz	r0, 47a8e <bt_smp_update_keys+0x58>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   47a82:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   47a86:	7b53      	ldrb	r3, [r2, #13]
   47a88:	f043 0302 	orr.w	r3, r3, #2
   47a8c:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   47a8e:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   47a90:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   47a94:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   47a96:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   47a98:	d836      	bhi.n	47b08 <bt_smp_update_keys+0xd2>
   47a9a:	b3c2      	cbz	r2, 47b0e <bt_smp_update_keys+0xd8>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   47a9c:	f043 0301 	orr.w	r3, r3, #1
   47aa0:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   47aa2:	7b6b      	ldrb	r3, [r5, #13]
   47aa4:	7d2a      	ldrb	r2, [r5, #20]
   47aa6:	4293      	cmp	r3, r2
   47aa8:	bf28      	it	cs
   47aaa:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   47aac:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   47aae:	4630      	mov	r0, r6
   47ab0:	2105      	movs	r1, #5
   47ab2:	f7ff fcff 	bl	474b4 <atomic_test_bit>
   47ab6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   47aba:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   47abc:	b350      	cbz	r0, 47b14 <bt_smp_update_keys+0xde>
		conn->le.keys->flags |= BT_KEYS_SC;
   47abe:	f042 0210 	orr.w	r2, r2, #16
   47ac2:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   47ac4:	210d      	movs	r1, #13
   47ac6:	4630      	mov	r0, r6
   47ac8:	f7ff fcf4 	bl	474b4 <atomic_test_bit>
   47acc:	b328      	cbz	r0, 47b1a <bt_smp_update_keys+0xe4>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   47ace:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47ad2:	2120      	movs	r1, #32
   47ad4:	f000 f834 	bl	47b40 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   47ad8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47adc:	f105 0147 	add.w	r1, r5, #71	; 0x47
   47ae0:	2210      	movs	r2, #16
   47ae2:	301a      	adds	r0, #26
   47ae4:	f7fd f98d 	bl	44e02 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   47ae8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47aec:	2208      	movs	r2, #8
   47aee:	2100      	movs	r1, #0
   47af0:	3010      	adds	r0, #16
   47af2:	f7fd f991 	bl	44e18 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   47af6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   47afa:	2202      	movs	r2, #2
}
   47afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   47b00:	2100      	movs	r1, #0
   47b02:	3018      	adds	r0, #24
   47b04:	f7fd b988 	b.w	44e18 <memset>
	switch (smp->method) {
   47b08:	3a05      	subs	r2, #5
   47b0a:	2a01      	cmp	r2, #1
   47b0c:	d9c6      	bls.n	47a9c <bt_smp_update_keys+0x66>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   47b0e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		break;
   47b12:	e7c5      	b.n	47aa0 <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   47b14:	f022 0210 	bic.w	r2, r2, #16
   47b18:	735a      	strb	r2, [r3, #13]
}
   47b1a:	bd70      	pop	{r4, r5, r6, pc}

00047b1c <id_add>:
	bt_id_add(keys);
   47b1c:	f7e3 be52 	b.w	2b7c4 <bt_id_add>

00047b20 <bt_keys_get_type>:
{
   47b20:	b570      	push	{r4, r5, r6, lr}
   47b22:	4604      	mov	r4, r0
   47b24:	460d      	mov	r5, r1
   47b26:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   47b28:	f7e7 fdf8 	bl	2f71c <bt_keys_find>
	if (keys) {
   47b2c:	b938      	cbnz	r0, 47b3e <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   47b2e:	4631      	mov	r1, r6
   47b30:	4628      	mov	r0, r5
   47b32:	f7e7 fdb3 	bl	2f69c <bt_keys_get_addr>
	if (!keys) {
   47b36:	b110      	cbz	r0, 47b3e <bt_keys_get_type+0x1e>
	keys->keys |= type;
   47b38:	89c3      	ldrh	r3, [r0, #14]
   47b3a:	431c      	orrs	r4, r3
   47b3c:	81c4      	strh	r4, [r0, #14]
}
   47b3e:	bd70      	pop	{r4, r5, r6, pc}

00047b40 <bt_keys_add_type>:
	keys->keys |= type;
   47b40:	89c3      	ldrh	r3, [r0, #14]
   47b42:	4319      	orrs	r1, r3
   47b44:	81c1      	strh	r1, [r0, #14]
}
   47b46:	4770      	bx	lr

00047b48 <keys_set>:
{
   47b48:	b570      	push	{r4, r5, r6, lr}
   47b4a:	4605      	mov	r5, r0
   47b4c:	b090      	sub	sp, #64	; 0x40
   47b4e:	4614      	mov	r4, r2
   47b50:	4618      	mov	r0, r3
	if (!name) {
   47b52:	b915      	cbnz	r5, 47b5a <keys_set+0x12>
			return -EINVAL;
   47b54:	f06f 0415 	mvn.w	r4, #21
   47b58:	e01c      	b.n	47b94 <keys_set+0x4c>
	len = read_cb(cb_arg, val, sizeof(val));
   47b5a:	2234      	movs	r2, #52	; 0x34
   47b5c:	a903      	add	r1, sp, #12
   47b5e:	47a0      	blx	r4
	if (len < 0) {
   47b60:	1e04      	subs	r4, r0, #0
   47b62:	dbf7      	blt.n	47b54 <keys_set+0xc>
	err = bt_settings_decode_key(name, &addr);
   47b64:	a901      	add	r1, sp, #4
   47b66:	4628      	mov	r0, r5
   47b68:	f7fd fa13 	bl	44f92 <bt_settings_decode_key>
	if (err) {
   47b6c:	4606      	mov	r6, r0
   47b6e:	2800      	cmp	r0, #0
   47b70:	d1f0      	bne.n	47b54 <keys_set+0xc>
	settings_name_next(name, &next);
   47b72:	4669      	mov	r1, sp
   47b74:	4628      	mov	r0, r5
   47b76:	f7fb fe78 	bl	4386a <settings_name_next>
	if (!next) {
   47b7a:	9800      	ldr	r0, [sp, #0]
   47b7c:	b968      	cbnz	r0, 47b9a <keys_set+0x52>
	if (!len) {
   47b7e:	b99c      	cbnz	r4, 47ba8 <keys_set+0x60>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   47b80:	aa01      	add	r2, sp, #4
   47b82:	4621      	mov	r1, r4
   47b84:	203f      	movs	r0, #63	; 0x3f
   47b86:	f7e7 fdc9 	bl	2f71c <bt_keys_find>
		if (keys) {
   47b8a:	b118      	cbz	r0, 47b94 <keys_set+0x4c>
			(void)memset(keys, 0, sizeof(*keys));
   47b8c:	2240      	movs	r2, #64	; 0x40
   47b8e:	4621      	mov	r1, r4
   47b90:	f7fd f942 	bl	44e18 <memset>
}
   47b94:	4620      	mov	r0, r4
   47b96:	b010      	add	sp, #64	; 0x40
   47b98:	bd70      	pop	{r4, r5, r6, pc}
		unsigned long next_id = strtoul(next, NULL, 10);
   47b9a:	220a      	movs	r2, #10
   47b9c:	4631      	mov	r1, r6
   47b9e:	f7fd f87a 	bl	44c96 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   47ba2:	2800      	cmp	r0, #0
   47ba4:	d0eb      	beq.n	47b7e <keys_set+0x36>
   47ba6:	e7d5      	b.n	47b54 <keys_set+0xc>
	keys = bt_keys_get_addr(id, &addr);
   47ba8:	a901      	add	r1, sp, #4
   47baa:	2000      	movs	r0, #0
   47bac:	f7e7 fd76 	bl	2f69c <bt_keys_get_addr>
	if (!keys) {
   47bb0:	b158      	cbz	r0, 47bca <keys_set+0x82>
	if (len != BT_KEYS_STORAGE_LEN) {
   47bb2:	2c34      	cmp	r4, #52	; 0x34
   47bb4:	d002      	beq.n	47bbc <keys_set+0x74>
			bt_keys_clear(keys);
   47bb6:	f7e7 fe0f 	bl	2f7d8 <bt_keys_clear>
   47bba:	e7cb      	b.n	47b54 <keys_set+0xc>
		memcpy(keys->storage_start, val, len);
   47bbc:	4622      	mov	r2, r4
   47bbe:	a903      	add	r1, sp, #12
   47bc0:	300c      	adds	r0, #12
   47bc2:	f7fd f91e 	bl	44e02 <memcpy>
	return 0;
   47bc6:	2400      	movs	r4, #0
   47bc8:	e7e4      	b.n	47b94 <keys_set+0x4c>
		return -ENOMEM;
   47bca:	f06f 040b 	mvn.w	r4, #11
   47bce:	e7e1      	b.n	47b94 <keys_set+0x4c>

00047bd0 <fixed_data_unref>:
}
   47bd0:	4770      	bx	lr

00047bd2 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   47bd2:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   47bd4:	6849      	ldr	r1, [r1, #4]
   47bd6:	6809      	ldr	r1, [r1, #0]
   47bd8:	f7f5 ba1c 	b.w	3d014 <net_buf_alloc_len>

00047bdc <net_buf_get>:
{
   47bdc:	b570      	push	{r4, r5, r6, lr}
   47bde:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   47be0:	f7f9 fcd2 	bl	41588 <z_impl_k_queue_get>
	if (!buf) {
   47be4:	4605      	mov	r5, r0
   47be6:	b128      	cbz	r0, 47bf4 <net_buf_get+0x18>
   47be8:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   47bea:	7963      	ldrb	r3, [r4, #5]
   47bec:	f013 0301 	ands.w	r3, r3, #1
   47bf0:	d102      	bne.n	47bf8 <net_buf_get+0x1c>
	frag->frags = NULL;
   47bf2:	6023      	str	r3, [r4, #0]
}
   47bf4:	4628      	mov	r0, r5
   47bf6:	bd70      	pop	{r4, r5, r6, pc}
   47bf8:	2300      	movs	r3, #0
   47bfa:	2200      	movs	r2, #0
   47bfc:	4630      	mov	r0, r6
   47bfe:	f7f9 fcc3 	bl	41588 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   47c02:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   47c04:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   47c06:	f023 0301 	bic.w	r3, r3, #1
   47c0a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   47c0c:	4604      	mov	r4, r0
   47c0e:	e7ec      	b.n	47bea <net_buf_get+0xe>

00047c10 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   47c10:	6883      	ldr	r3, [r0, #8]
   47c12:	440b      	add	r3, r1
   47c14:	6003      	str	r3, [r0, #0]
}
   47c16:	4770      	bx	lr

00047c18 <net_buf_put>:
{
   47c18:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   47c1a:	460a      	mov	r2, r1
   47c1c:	6814      	ldr	r4, [r2, #0]
   47c1e:	b914      	cbnz	r4, 47c26 <net_buf_put+0xe>
}
   47c20:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   47c22:	f000 bf21 	b.w	48a68 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   47c26:	7953      	ldrb	r3, [r2, #5]
   47c28:	f043 0301 	orr.w	r3, r3, #1
   47c2c:	7153      	strb	r3, [r2, #5]
   47c2e:	4622      	mov	r2, r4
   47c30:	e7f4      	b.n	47c1c <net_buf_put+0x4>

00047c32 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   47c32:	7902      	ldrb	r2, [r0, #4]
   47c34:	3201      	adds	r2, #1
   47c36:	7102      	strb	r2, [r0, #4]
	return buf;
}
   47c38:	4770      	bx	lr

00047c3a <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   47c3a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   47c3c:	4618      	mov	r0, r3
   47c3e:	681b      	ldr	r3, [r3, #0]
   47c40:	2b00      	cmp	r3, #0
   47c42:	d1fb      	bne.n	47c3c <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   47c44:	4770      	bx	lr

00047c46 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   47c46:	6802      	ldr	r2, [r0, #0]
{
   47c48:	b510      	push	{r4, lr}
	if (parent->frags) {
   47c4a:	b12a      	cbz	r2, 47c58 <net_buf_frag_insert+0x12>
   47c4c:	460b      	mov	r3, r1
	while (buf->frags) {
   47c4e:	461c      	mov	r4, r3
   47c50:	681b      	ldr	r3, [r3, #0]
   47c52:	2b00      	cmp	r3, #0
   47c54:	d1fb      	bne.n	47c4e <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   47c56:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   47c58:	6001      	str	r1, [r0, #0]
}
   47c5a:	bd10      	pop	{r4, pc}

00047c5c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   47c5c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   47c5e:	4604      	mov	r4, r0
   47c60:	b920      	cbnz	r0, 47c6c <net_buf_frag_add+0x10>
	buf->ref++;
   47c62:	790b      	ldrb	r3, [r1, #4]
   47c64:	3301      	adds	r3, #1
   47c66:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   47c68:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   47c6a:	bd10      	pop	{r4, pc}
   47c6c:	4603      	mov	r3, r0
	while (buf->frags) {
   47c6e:	4618      	mov	r0, r3
   47c70:	681b      	ldr	r3, [r3, #0]
   47c72:	2b00      	cmp	r3, #0
   47c74:	d1fb      	bne.n	47c6e <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   47c76:	f7ff ffe6 	bl	47c46 <net_buf_frag_insert>
   47c7a:	4620      	mov	r0, r4
   47c7c:	e7f5      	b.n	47c6a <net_buf_frag_add+0xe>

00047c7e <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   47c7e:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   47c80:	b108      	cbz	r0, 47c86 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   47c82:	680b      	ldr	r3, [r1, #0]
   47c84:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   47c86:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   47c88:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   47c8a:	4608      	mov	r0, r1
	frag->frags = NULL;
   47c8c:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   47c8e:	f7f5 fa55 	bl	3d13c <net_buf_unref>
#endif

	return next_frag;
}
   47c92:	4620      	mov	r0, r4
   47c94:	bd10      	pop	{r4, pc}

00047c96 <net_buf_simple_add>:
	return buf->data + buf->len;
   47c96:	8883      	ldrh	r3, [r0, #4]
   47c98:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   47c9a:	4419      	add	r1, r3
   47c9c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   47c9e:	18d0      	adds	r0, r2, r3
   47ca0:	4770      	bx	lr

00047ca2 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   47ca2:	b430      	push	{r4, r5}
   47ca4:	8884      	ldrh	r4, [r0, #4]
   47ca6:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   47ca8:	18a3      	adds	r3, r4, r2
   47caa:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   47cac:	1928      	adds	r0, r5, r4
}
   47cae:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   47cb0:	f7fd b8a7 	b.w	44e02 <memcpy>

00047cb4 <net_buf_simple_add_u8>:
   47cb4:	8883      	ldrh	r3, [r0, #4]
   47cb6:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   47cb8:	b510      	push	{r4, lr}
	buf->len += len;
   47cba:	1c5c      	adds	r4, r3, #1
   47cbc:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   47cbe:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   47cc0:	18d0      	adds	r0, r2, r3
   47cc2:	bd10      	pop	{r4, pc}

00047cc4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   47cc4:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   47cc6:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   47cc8:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   47cca:	1a40      	subs	r0, r0, r1
	buf->len += len;
   47ccc:	4411      	add	r1, r2
	buf->data -= len;
   47cce:	6018      	str	r0, [r3, #0]
	buf->len += len;
   47cd0:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   47cd2:	4770      	bx	lr

00047cd4 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   47cd4:	8882      	ldrh	r2, [r0, #4]
   47cd6:	1a52      	subs	r2, r2, r1
{
   47cd8:	4603      	mov	r3, r0
	buf->len -= len;
   47cda:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   47cdc:	6800      	ldr	r0, [r0, #0]
   47cde:	4408      	add	r0, r1
   47ce0:	6018      	str	r0, [r3, #0]
}
   47ce2:	4770      	bx	lr

00047ce4 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   47ce4:	4603      	mov	r3, r0
	void *data = buf->data;
   47ce6:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   47ce8:	889a      	ldrh	r2, [r3, #4]
   47cea:	1a52      	subs	r2, r2, r1
	buf->data += len;
   47cec:	4401      	add	r1, r0
	buf->len -= len;
   47cee:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   47cf0:	6019      	str	r1, [r3, #0]

	return data;
}
   47cf2:	4770      	bx	lr

00047cf4 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   47cf4:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   47cf6:	6803      	ldr	r3, [r0, #0]
   47cf8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   47cfa:	2102      	movs	r1, #2
   47cfc:	f7ff ffea 	bl	47cd4 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   47d00:	4620      	mov	r0, r4
   47d02:	bd10      	pop	{r4, pc}

00047d04 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   47d04:	6802      	ldr	r2, [r0, #0]
   47d06:	6880      	ldr	r0, [r0, #8]
}
   47d08:	1a10      	subs	r0, r2, r0
   47d0a:	4770      	bx	lr

00047d0c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   47d0c:	8883      	ldrh	r3, [r0, #4]
   47d0e:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   47d10:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   47d12:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   47d14:	6803      	ldr	r3, [r0, #0]
   47d16:	1a5b      	subs	r3, r3, r1
}
   47d18:	1ad0      	subs	r0, r2, r3
   47d1a:	4770      	bx	lr

00047d1c <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   47d1c:	6903      	ldr	r3, [r0, #16]
{
   47d1e:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   47d20:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   47d24:	2300      	movs	r3, #0
   47d26:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   47d28:	7f83      	ldrb	r3, [r0, #30]
{
   47d2a:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   47d2c:	b113      	cbz	r3, 47d34 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   47d2e:	7a40      	ldrb	r0, [r0, #9]
   47d30:	f000 fb67 	bl	48402 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   47d34:	2301      	movs	r3, #1
   47d36:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   47d38:	2300      	movs	r3, #0
   47d3a:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   47d3c:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   47d3e:	77a3      	strb	r3, [r4, #30]
}
   47d40:	bd10      	pop	{r4, pc}

00047d42 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   47d42:	f7f9 bb67 	b.w	41414 <z_impl_k_mutex_lock>

00047d46 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   47d46:	f7f9 bbdd 	b.w	41504 <z_impl_k_mutex_unlock>

00047d4a <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   47d4a:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   47d4c:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   47d4e:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   47d52:	b921      	cbnz	r1, 47d5e <usb_dc_ep_check_cap+0x14>
   47d54:	3a00      	subs	r2, #0
   47d56:	bf18      	it	ne
   47d58:	2201      	movne	r2, #1
   47d5a:	4250      	negs	r0, r2
   47d5c:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   47d5e:	2a08      	cmp	r2, #8
   47d60:	d806      	bhi.n	47d70 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   47d62:	2901      	cmp	r1, #1
   47d64:	d107      	bne.n	47d76 <usb_dc_ep_check_cap+0x2c>
   47d66:	f083 0008 	eor.w	r0, r3, #8
   47d6a:	f340 00c0 	sbfx	r0, r0, #3, #1
   47d6e:	4770      	bx	lr
		return -1;
   47d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   47d74:	4770      	bx	lr
	return 0;
   47d76:	2000      	movs	r0, #0
}
   47d78:	4770      	bx	lr

00047d7a <usb_dc_ep_read>:
{
   47d7a:	b570      	push	{r4, r5, r6, lr}
   47d7c:	4604      	mov	r4, r0
   47d7e:	460e      	mov	r6, r1
   47d80:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   47d82:	f7f5 ff03 	bl	3db8c <usb_dc_ep_read_wait>
	if (ret) {
   47d86:	b930      	cbnz	r0, 47d96 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   47d88:	b906      	cbnz	r6, 47d8c <usb_dc_ep_read+0x12>
   47d8a:	b125      	cbz	r5, 47d96 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   47d8c:	4620      	mov	r0, r4
}
   47d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   47d92:	f7f5 bf43 	b.w	3dc1c <usb_dc_ep_read_continue>
}
   47d96:	bd70      	pop	{r4, r5, r6, pc}

00047d98 <adc_context_on_timer_expired>:
{
   47d98:	b410      	push	{r4}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   47d9a:	f1a0 0308 	sub.w	r3, r0, #8
   47d9e:	f3bf 8f5b 	dmb	ish
   47da2:	e853 2f00 	ldrex	r2, [r3]
   47da6:	1c51      	adds	r1, r2, #1
   47da8:	e843 1400 	strex	r4, r1, [r3]
   47dac:	2c00      	cmp	r4, #0
   47dae:	d1f8      	bne.n	47da2 <adc_context_on_timer_expired+0xa>
   47db0:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   47db4:	b922      	cbnz	r2, 47dc0 <adc_context_on_timer_expired+0x28>
		adc_context_start_sampling(ctx);
   47db6:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
}
   47dba:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   47dbc:	f7f6 b81c 	b.w	3ddf8 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   47dc0:	f06f 030f 	mvn.w	r3, #15
}
   47dc4:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   47dc6:	6683      	str	r3, [r0, #104]	; 0x68
}
   47dc8:	4770      	bx	lr

00047dca <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   47dca:	6903      	ldr	r3, [r0, #16]
   47dcc:	b2c9      	uxtb	r1, r1
   47dce:	220c      	movs	r2, #12
   47dd0:	fb01 3302 	mla	r3, r1, r2, r3
   47dd4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   47dd6:	f000 0007 	and.w	r0, r0, #7
   47dda:	4770      	bx	lr

00047ddc <set_on_state>:
	__asm__ volatile(
   47ddc:	f04f 0320 	mov.w	r3, #32
   47de0:	f3ef 8211 	mrs	r2, BASEPRI
   47de4:	f383 8812 	msr	BASEPRI_MAX, r3
   47de8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   47dec:	6803      	ldr	r3, [r0, #0]
   47dee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   47df2:	f043 0302 	orr.w	r3, r3, #2
   47df6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   47df8:	f382 8811 	msr	BASEPRI, r2
   47dfc:	f3bf 8f6f 	isb	sy
}
   47e00:	4770      	bx	lr

00047e02 <stop>:
{
   47e02:	4603      	mov	r3, r0
   47e04:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   47e06:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   47e08:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   47e0a:	f04f 0420 	mov.w	r4, #32
   47e0e:	f3ef 8611 	mrs	r6, BASEPRI
   47e12:	f384 8812 	msr	BASEPRI_MAX, r4
   47e16:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   47e1a:	250c      	movs	r5, #12
   47e1c:	fb05 0401 	mla	r4, r5, r1, r0
   47e20:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   47e22:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   47e26:	d001      	beq.n	47e2c <stop+0x2a>
   47e28:	42a2      	cmp	r2, r4
   47e2a:	d110      	bne.n	47e4e <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   47e2c:	fb05 0001 	mla	r0, r5, r1, r0
   47e30:	2201      	movs	r2, #1
   47e32:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   47e34:	2000      	movs	r0, #0
	__asm__ volatile(
   47e36:	f386 8811 	msr	BASEPRI, r6
   47e3a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   47e3e:	b928      	cbnz	r0, 47e4c <stop+0x4a>
	get_sub_config(dev, type)->stop();
   47e40:	685b      	ldr	r3, [r3, #4]
   47e42:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   47e46:	685b      	ldr	r3, [r3, #4]
   47e48:	4798      	blx	r3
	return 0;
   47e4a:	2000      	movs	r0, #0
}
   47e4c:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   47e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   47e52:	e7f0      	b.n	47e36 <stop+0x34>

00047e54 <api_stop>:
	return stop(dev, subsys, CTX_API);
   47e54:	2280      	movs	r2, #128	; 0x80
   47e56:	f7ff bfd4 	b.w	47e02 <stop>

00047e5a <async_start>:
{
   47e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   47e5c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   47e5e:	6904      	ldr	r4, [r0, #16]
{
   47e60:	4605      	mov	r5, r0
   47e62:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   47e64:	f04f 0020 	mov.w	r0, #32
   47e68:	f3ef 8c11 	mrs	ip, BASEPRI
   47e6c:	f380 8812 	msr	BASEPRI_MAX, r0
   47e70:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   47e74:	260c      	movs	r6, #12
   47e76:	fb06 4601 	mla	r6, r6, r1, r4
   47e7a:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   47e7c:	f000 0e07 	and.w	lr, r0, #7
   47e80:	f1be 0f01 	cmp.w	lr, #1
   47e84:	d111      	bne.n	47eaa <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   47e86:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   47e88:	2600      	movs	r6, #0
	__asm__ volatile(
   47e8a:	f38c 8811 	msr	BASEPRI, ip
   47e8e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   47e92:	b946      	cbnz	r6, 47ea6 <async_start+0x4c>
	subdata->cb = cb;
   47e94:	200c      	movs	r0, #12
   47e96:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   47e9a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   47e9e:	686b      	ldr	r3, [r5, #4]
   47ea0:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   47ea4:	4798      	blx	r3
}
   47ea6:	4630      	mov	r0, r6
   47ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   47eaa:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   47eae:	4287      	cmp	r7, r0
   47eb0:	bf14      	ite	ne
   47eb2:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   47eb6:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   47eba:	e7e6      	b.n	47e8a <async_start+0x30>

00047ebc <api_start>:
{
   47ebc:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   47ebe:	2480      	movs	r4, #128	; 0x80
   47ec0:	9400      	str	r4, [sp, #0]
   47ec2:	f7ff ffca 	bl	47e5a <async_start>
}
   47ec6:	b002      	add	sp, #8
   47ec8:	bd10      	pop	{r4, pc}

00047eca <onoff_started_callback>:
	return &data->mgr[type];
   47eca:	6900      	ldr	r0, [r0, #16]
{
   47ecc:	b410      	push	{r4}
	return &data->mgr[type];
   47ece:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   47ed0:	241c      	movs	r4, #28
   47ed2:	fb03 0004 	mla	r0, r3, r4, r0
   47ed6:	2100      	movs	r1, #0
}
   47ed8:	bc10      	pop	{r4}
	notify(mgr, 0);
   47eda:	4710      	bx	r2

00047edc <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   47edc:	2000      	movs	r0, #0
   47ede:	f000 b92d 	b.w	4813c <nrfx_clock_start>

00047ee2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   47ee2:	2000      	movs	r0, #0
   47ee4:	f7f7 bad6 	b.w	3f494 <nrfx_clock_stop>

00047ee8 <blocking_start_callback>:
{
   47ee8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   47eea:	f7f9 bb81 	b.w	415f0 <z_impl_k_sem_give>

00047eee <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47eee:	6843      	ldr	r3, [r0, #4]
   47ef0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   47ef2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   47ef6:	600b      	str	r3, [r1, #0]
}
   47ef8:	2000      	movs	r0, #0
   47efa:	4770      	bx	lr

00047efc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47efc:	6843      	ldr	r3, [r0, #4]
   47efe:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   47f00:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   47f04:	4042      	eors	r2, r0
   47f06:	400a      	ands	r2, r1
   47f08:	4042      	eors	r2, r0
    p_reg->OUT = value;
   47f0a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   47f0e:	2000      	movs	r0, #0
   47f10:	4770      	bx	lr

00047f12 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47f12:	6843      	ldr	r3, [r0, #4]
   47f14:	685b      	ldr	r3, [r3, #4]
}
   47f16:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   47f18:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   47f1c:	4770      	bx	lr

00047f1e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47f1e:	6843      	ldr	r3, [r0, #4]
   47f20:	685b      	ldr	r3, [r3, #4]
}
   47f22:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   47f24:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   47f28:	4770      	bx	lr

00047f2a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   47f2a:	6843      	ldr	r3, [r0, #4]
   47f2c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   47f2e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   47f32:	404b      	eors	r3, r1
    p_reg->OUT = value;
   47f34:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   47f38:	2000      	movs	r0, #0
   47f3a:	4770      	bx	lr

00047f3c <gpio_nrfx_manage_callback>:
	return port->data;
   47f3c:	6903      	ldr	r3, [r0, #16]
	return list->head;
   47f3e:	6858      	ldr	r0, [r3, #4]
{
   47f40:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   47f42:	b158      	cbz	r0, 47f5c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   47f44:	2400      	movs	r4, #0
   47f46:	4281      	cmp	r1, r0
   47f48:	d112      	bne.n	47f70 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   47f4a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   47f4c:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   47f4e:	b954      	cbnz	r4, 47f66 <gpio_nrfx_manage_callback+0x2a>
   47f50:	428d      	cmp	r5, r1
	list->head = node;
   47f52:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   47f54:	d100      	bne.n	47f58 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   47f56:	6098      	str	r0, [r3, #8]
	parent->next = child;
   47f58:	2000      	movs	r0, #0
   47f5a:	6008      	str	r0, [r1, #0]
	if (set) {
   47f5c:	b96a      	cbnz	r2, 47f7a <gpio_nrfx_manage_callback+0x3e>
	return 0;
   47f5e:	2000      	movs	r0, #0
}
   47f60:	bd30      	pop	{r4, r5, pc}
   47f62:	4628      	mov	r0, r5
   47f64:	e7ef      	b.n	47f46 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   47f66:	428d      	cmp	r5, r1
	parent->next = child;
   47f68:	6020      	str	r0, [r4, #0]
	list->tail = node;
   47f6a:	bf08      	it	eq
   47f6c:	609c      	streq	r4, [r3, #8]
}
   47f6e:	e7f3      	b.n	47f58 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   47f70:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   47f72:	4604      	mov	r4, r0
   47f74:	2d00      	cmp	r5, #0
   47f76:	d1f4      	bne.n	47f62 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   47f78:	b13a      	cbz	r2, 47f8a <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   47f7a:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   47f7c:	685a      	ldr	r2, [r3, #4]
   47f7e:	600a      	str	r2, [r1, #0]
	list->head = node;
   47f80:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   47f82:	2800      	cmp	r0, #0
   47f84:	d1eb      	bne.n	47f5e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   47f86:	6099      	str	r1, [r3, #8]
}
   47f88:	e7ea      	b.n	47f60 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   47f8a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   47f8e:	e7e7      	b.n	47f60 <gpio_nrfx_manage_callback+0x24>

00047f90 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   47f90:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   47f92:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   47f96:	2908      	cmp	r1, #8
   47f98:	6e66      	ldr	r6, [r4, #100]	; 0x64
   47f9a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   47f9c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   47f9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   47fa0:	ea4f 2515 	mov.w	r5, r5, lsr #8
   47fa4:	ea4f 6303 	mov.w	r3, r3, lsl #24
   47fa8:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   47fac:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   47fb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   47fb4:	ea43 0305 	orr.w	r3, r3, r5
   47fb8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   47fbc:	ea43 0302 	orr.w	r3, r3, r2
   47fc0:	9300      	str	r3, [sp, #0]
   47fc2:	6e26      	ldr	r6, [r4, #96]	; 0x60
   47fc4:	6e25      	ldr	r5, [r4, #96]	; 0x60
   47fc6:	6e22      	ldr	r2, [r4, #96]	; 0x60
   47fc8:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   47fca:	ea4f 2415 	mov.w	r4, r5, lsr #8
   47fce:	ea4f 6303 	mov.w	r3, r3, lsl #24
   47fd2:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   47fd6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   47fda:	ea43 0304 	orr.w	r3, r3, r4
   47fde:	ea4f 2402 	mov.w	r4, r2, lsl #8
   47fe2:	bf28      	it	cs
   47fe4:	2108      	movcs	r1, #8
   47fe6:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   47fea:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   47fec:	460a      	mov	r2, r1
   47fee:	460c      	mov	r4, r1
   47ff0:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   47ff2:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   47ff4:	f7fc ff05 	bl	44e02 <memcpy>

	return length;
}
   47ff8:	4620      	mov	r0, r4
   47ffa:	b002      	add	sp, #8
   47ffc:	bd70      	pop	{r4, r5, r6, pc}

00047ffe <is_regular_addr_valid>:
{
   47ffe:	b538      	push	{r3, r4, r5, lr}
   48000:	4605      	mov	r5, r0
   48002:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   48004:	f000 f91e 	bl	48244 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   48008:	2d00      	cmp	r5, #0
   4800a:	db07      	blt.n	4801c <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   4800c:	42a8      	cmp	r0, r5
   4800e:	d905      	bls.n	4801c <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   48010:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   48012:	4284      	cmp	r4, r0
   48014:	bf8c      	ite	hi
   48016:	2000      	movhi	r0, #0
   48018:	2001      	movls	r0, #1
}
   4801a:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   4801c:	2000      	movs	r0, #0
   4801e:	e7fc      	b.n	4801a <is_regular_addr_valid+0x1c>

00048020 <flash_nrf_read>:
{
   48020:	b570      	push	{r4, r5, r6, lr}
   48022:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   48024:	4628      	mov	r0, r5
   48026:	4619      	mov	r1, r3
{
   48028:	4616      	mov	r6, r2
   4802a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   4802c:	f7ff ffe7 	bl	47ffe <is_regular_addr_valid>
   48030:	b138      	cbz	r0, 48042 <flash_nrf_read+0x22>
	if (!len) {
   48032:	b14c      	cbz	r4, 48048 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   48034:	4622      	mov	r2, r4
   48036:	4629      	mov	r1, r5
   48038:	4630      	mov	r0, r6
   4803a:	f7fc fee2 	bl	44e02 <memcpy>
	return 0;
   4803e:	2000      	movs	r0, #0
}
   48040:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   48042:	f06f 0015 	mvn.w	r0, #21
   48046:	e7fb      	b.n	48040 <flash_nrf_read+0x20>
		return 0;
   48048:	4620      	mov	r0, r4
   4804a:	e7f9      	b.n	48040 <flash_nrf_read+0x20>

0004804c <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   4804c:	2000      	movs	r0, #0
   4804e:	f7e8 bddb 	b.w	30c08 <ticker_is_initialized>

00048052 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   48052:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   48056:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   48058:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   4805a:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   4805e:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   48060:	f8c4 8000 	str.w	r8, [r4]
{
   48064:	460d      	mov	r5, r1
   48066:	4616      	mov	r6, r2
	info->index = 0U;
   48068:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   4806c:	aa01      	add	r2, sp, #4
   4806e:	4669      	mov	r1, sp
   48070:	4798      	blx	r3

	while (layout_size--) {
   48072:	e9dd 7c00 	ldrd	r7, ip, [sp]
   48076:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   48078:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   4807c:	4560      	cmp	r0, ip
   4807e:	d104      	bne.n	4808a <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   48080:	f06f 0015 	mvn.w	r0, #21
}
   48084:	b003      	add	sp, #12
   48086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   4808a:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   4808e:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   48090:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   48092:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   48096:	b985      	cbnz	r5, 480ba <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   48098:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   4809a:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   4809e:	4543      	cmp	r3, r8
   480a0:	bf28      	it	cs
   480a2:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   480a4:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   480a8:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   480aa:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   480ac:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   480ae:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   480b0:	f100 0001 	add.w	r0, r0, #1
   480b4:	d9e2      	bls.n	4807c <flash_get_page_info+0x2a>
			return 0;
   480b6:	2000      	movs	r0, #0
   480b8:	e7e4      	b.n	48084 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   480ba:	1aab      	subs	r3, r5, r2
   480bc:	fbb3 f3f9 	udiv	r3, r3, r9
   480c0:	e7eb      	b.n	4809a <flash_get_page_info+0x48>

000480c2 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   480c2:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   480c4:	2200      	movs	r2, #0
   480c6:	f7ff bfc4 	b.w	48052 <flash_get_page_info>

000480ca <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   480ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   480ce:	6883      	ldr	r3, [r0, #8]
{
   480d0:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   480d2:	691b      	ldr	r3, [r3, #16]
{
   480d4:	4688      	mov	r8, r1
   480d6:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   480d8:	a901      	add	r1, sp, #4
   480da:	aa02      	add	r2, sp, #8
   480dc:	4798      	blx	r3
	off_t off = 0;
   480de:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   480e0:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   480e2:	4625      	mov	r5, r4
   480e4:	9b02      	ldr	r3, [sp, #8]
   480e6:	42ab      	cmp	r3, r5
   480e8:	d802      	bhi.n	480f0 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   480ea:	b006      	add	sp, #24
   480ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   480f0:	9f01      	ldr	r7, [sp, #4]
   480f2:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   480f6:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   480f8:	687b      	ldr	r3, [r7, #4]
   480fa:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   480fc:	683a      	ldr	r2, [r7, #0]
   480fe:	42b2      	cmp	r2, r6
   48100:	eb0a 0306 	add.w	r3, sl, r6
   48104:	d802      	bhi.n	4810c <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   48106:	3501      	adds	r5, #1
   48108:	469a      	mov	sl, r3
   4810a:	e7eb      	b.n	480e4 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   4810c:	4649      	mov	r1, r9
   4810e:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   48110:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   48112:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   48114:	47c0      	blx	r8
   48116:	2800      	cmp	r0, #0
   48118:	d0e7      	beq.n	480ea <flash_page_foreach+0x20>
			off += page_info.size;
   4811a:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   4811c:	3601      	adds	r6, #1
			off += page_info.size;
   4811e:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   48120:	e7ec      	b.n	480fc <flash_page_foreach+0x32>

00048122 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   48122:	4770      	bx	lr

00048124 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   48124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   48128:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   4812c:	f1a0 0308 	sub.w	r3, r0, #8
   48130:	4258      	negs	r0, r3
   48132:	4158      	adcs	r0, r3
   48134:	4770      	bx	lr

00048136 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   48136:	4700      	bx	r0

00048138 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   48138:	f000 bf1a 	b.w	48f70 <z_impl_k_busy_wait>

0004813c <nrfx_clock_start>:
    switch (domain)
   4813c:	b110      	cbz	r0, 48144 <nrfx_clock_start+0x8>
   4813e:	2801      	cmp	r0, #1
   48140:	d01d      	beq.n	4817e <nrfx_clock_start+0x42>
   48142:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   48144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   48148:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   4814c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   48150:	03c9      	lsls	r1, r1, #15
   48152:	d512      	bpl.n	4817a <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   48154:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   48158:	2a01      	cmp	r2, #1
   4815a:	d10e      	bne.n	4817a <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   4815c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   48160:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   48164:	2200      	movs	r2, #0
   48166:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   4816a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   4816e:	2202      	movs	r2, #2
   48170:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   48174:	2201      	movs	r2, #1
   48176:	609a      	str	r2, [r3, #8]
}
   48178:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   4817a:	2200      	movs	r2, #0
   4817c:	e7ee      	b.n	4815c <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4817e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   48182:	2200      	movs	r2, #0
   48184:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   48188:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   4818c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   48190:	6018      	str	r0, [r3, #0]
}
   48192:	4770      	bx	lr

00048194 <nrf_gpio_reconfigure>:
{
   48194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   48196:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   48198:	a801      	add	r0, sp, #4
{
   4819a:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   4819e:	4616      	mov	r6, r2
   481a0:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   481a2:	f7f7 f9e7 	bl	3f574 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   481a6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   481a8:	f1b6 0c00 	subs.w	ip, r6, #0
   481ac:	bf18      	it	ne
   481ae:	f04f 0c01 	movne.w	ip, #1
   481b2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   481b6:	1e0b      	subs	r3, r1, #0
   481b8:	bf18      	it	ne
   481ba:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   481bc:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   481be:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   481c2:	bf14      	ite	ne
   481c4:	f04f 0c0c 	movne.w	ip, #12
   481c8:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   481cc:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   481ce:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   481d2:	bf14      	ite	ne
   481d4:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   481d8:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   481dc:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   481de:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   481e2:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   481e6:	bf14      	ite	ne
   481e8:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   481ec:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   481f0:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   481f4:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   481f8:	b101      	cbz	r1, 481fc <nrf_gpio_reconfigure+0x68>
   481fa:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   481fc:	b10e      	cbz	r6, 48202 <nrf_gpio_reconfigure+0x6e>
   481fe:	7836      	ldrb	r6, [r6, #0]
   48200:	0076      	lsls	r6, r6, #1
   48202:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   48204:	b10d      	cbz	r5, 4820a <nrf_gpio_reconfigure+0x76>
   48206:	782d      	ldrb	r5, [r5, #0]
   48208:	00ad      	lsls	r5, r5, #2
   4820a:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   4820c:	b10c      	cbz	r4, 48212 <nrf_gpio_reconfigure+0x7e>
   4820e:	7824      	ldrb	r4, [r4, #0]
   48210:	0224      	lsls	r4, r4, #8
   48212:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   48214:	b10f      	cbz	r7, 4821a <nrf_gpio_reconfigure+0x86>
   48216:	783f      	ldrb	r7, [r7, #0]
   48218:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   4821a:	430c      	orrs	r4, r1
   4821c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   4821e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   48222:	b003      	add	sp, #12
   48224:	bdf0      	pop	{r4, r5, r6, r7, pc}

00048226 <nrf_gpio_cfg_sense_set>:
{
   48226:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   48228:	f10d 030f 	add.w	r3, sp, #15
   4822c:	9301      	str	r3, [sp, #4]
   4822e:	2300      	movs	r3, #0
{
   48230:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   48234:	9300      	str	r3, [sp, #0]
   48236:	461a      	mov	r2, r3
   48238:	4619      	mov	r1, r3
   4823a:	f7ff ffab 	bl	48194 <nrf_gpio_reconfigure>
}
   4823e:	b005      	add	sp, #20
   48240:	f85d fb04 	ldr.w	pc, [sp], #4

00048244 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   48244:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   48248:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   4824a:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   4824c:	4350      	muls	r0, r2
   4824e:	4770      	bx	lr

00048250 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   48250:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   48254:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   48256:	4770      	bx	lr

00048258 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   48258:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   4825c:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   4825e:	4770      	bx	lr

00048260 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   48260:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   48264:	681a      	ldr	r2, [r3, #0]
   48266:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   48268:	bf1f      	itttt	ne
   4826a:	2200      	movne	r2, #0
   4826c:	601a      	strne	r2, [r3, #0]
   4826e:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   48270:	2001      	movne	r0, #1
   48272:	bf08      	it	eq
   48274:	2000      	moveq	r0, #0
}
   48276:	4770      	bx	lr

00048278 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   48278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4827c:	f44f 7260 	mov.w	r2, #896	; 0x380
   48280:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   48284:	4770      	bx	lr

00048286 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   48286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4828a:	f44f 7260 	mov.w	r2, #896	; 0x380
   4828e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   48292:	4770      	bx	lr

00048294 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   48294:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   48296:	f7f7 fd55 	bl	3fd44 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   4829a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   4829e:	f7f7 b935 	b.w	3f50c <nrfx_clock_irq_handler>

000482a2 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   482a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   482a6:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   482aa:	f1a0 0308 	sub.w	r3, r0, #8
   482ae:	4258      	negs	r0, r3
   482b0:	4158      	adcs	r0, r3
   482b2:	4770      	bx	lr

000482b4 <nrfx_usbd_consumer>:
{
   482b4:	b530      	push	{r4, r5, lr}
        p_next->p_data = p_transfer->p_data;
   482b6:	e9d1 5400 	ldrd	r5, r4, [r1]
    if (size < data_size)
   482ba:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   482bc:	bf97      	itett	ls
   482be:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   482c2:	2100      	movhi	r1, #0
        size -= data_size;
   482c4:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   482c6:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   482c8:	bf8e      	itee	hi
   482ca:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   482ce:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   482d0:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   482d2:	429a      	cmp	r2, r3
   482d4:	d103      	bne.n	482de <nrfx_usbd_consumer+0x2a>
   482d6:	1e20      	subs	r0, r4, #0
   482d8:	bf18      	it	ne
   482da:	2001      	movne	r0, #1
}
   482dc:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   482de:	2000      	movs	r0, #0
   482e0:	e7fc      	b.n	482dc <nrfx_usbd_consumer+0x28>

000482e2 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   482e2:	684b      	ldr	r3, [r1, #4]
{
   482e4:	b510      	push	{r4, lr}
   482e6:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   482e8:	680c      	ldr	r4, [r1, #0]
   482ea:	bf28      	it	cs
   482ec:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   482ee:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   482f2:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   482f4:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   482f6:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   482f8:	4413      	add	r3, r2
}
   482fa:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   482fc:	600b      	str	r3, [r1, #0]
}
   482fe:	bf18      	it	ne
   48300:	2001      	movne	r0, #1
   48302:	bd10      	pop	{r4, pc}

00048304 <nrfx_usbd_feeder_ram_zlp>:
{
   48304:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   48306:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   48308:	680b      	ldr	r3, [r1, #0]
   4830a:	42a2      	cmp	r2, r4
   4830c:	bf28      	it	cs
   4830e:	4622      	movcs	r2, r4
   48310:	2a00      	cmp	r2, #0
   48312:	bf14      	ite	ne
   48314:	461d      	movne	r5, r3
   48316:	2500      	moveq	r5, #0
    p_transfer->size -= tx_size;
   48318:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   4831c:	4413      	add	r3, r2
    p_next->size = tx_size;
   4831e:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   48322:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   48324:	600b      	str	r3, [r1, #0]
}
   48326:	bf14      	ite	ne
   48328:	2001      	movne	r0, #1
   4832a:	2000      	moveq	r0, #0
   4832c:	bd30      	pop	{r4, r5, pc}

0004832e <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   4832e:	43c3      	mvns	r3, r0
   48330:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   48334:	f000 000f 	and.w	r0, r0, #15
}
   48338:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   4833c:	4770      	bx	lr

0004833e <ev_started_handler>:
}
   4833e:	4770      	bx	lr

00048340 <nrf_usbd_epin_dma_handler>:
{
   48340:	b508      	push	{r3, lr}
   48342:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
   48344:	f7f7 fd70 	bl	3fe28 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   48348:	4608      	mov	r0, r1
   4834a:	f7f7 fd5f 	bl	3fe0c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   4834e:	7b83      	ldrb	r3, [r0, #14]
   48350:	2b03      	cmp	r3, #3
   48352:	d10a      	bne.n	4836a <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   48354:	4608      	mov	r0, r1
   48356:	f7ff ffea 	bl	4832e <ep2bit>
   4835a:	2301      	movs	r3, #1
   4835c:	fa03 f000 	lsl.w	r0, r3, r0
   48360:	43c0      	mvns	r0, r0
}
   48362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   48366:	f7f7 be5b 	b.w	40020 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   4836a:	6803      	ldr	r3, [r0, #0]
   4836c:	2b00      	cmp	r3, #0
   4836e:	d0f1      	beq.n	48354 <nrf_usbd_epin_dma_handler+0x14>
}
   48370:	bd08      	pop	{r3, pc}

00048372 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   48372:	2087      	movs	r0, #135	; 0x87
   48374:	f7ff bfe4 	b.w	48340 <nrf_usbd_epin_dma_handler>

00048378 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   48378:	2086      	movs	r0, #134	; 0x86
   4837a:	f7ff bfe1 	b.w	48340 <nrf_usbd_epin_dma_handler>

0004837e <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   4837e:	2085      	movs	r0, #133	; 0x85
   48380:	f7ff bfde 	b.w	48340 <nrf_usbd_epin_dma_handler>

00048384 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   48384:	2084      	movs	r0, #132	; 0x84
   48386:	f7ff bfdb 	b.w	48340 <nrf_usbd_epin_dma_handler>

0004838a <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   4838a:	2083      	movs	r0, #131	; 0x83
   4838c:	f7ff bfd8 	b.w	48340 <nrf_usbd_epin_dma_handler>

00048390 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   48390:	2082      	movs	r0, #130	; 0x82
   48392:	f7ff bfd5 	b.w	48340 <nrf_usbd_epin_dma_handler>

00048396 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   48396:	2081      	movs	r0, #129	; 0x81
   48398:	f7ff bfd2 	b.w	48340 <nrf_usbd_epin_dma_handler>

0004839c <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   4839c:	f7f7 be50 	b.w	40040 <nrf_usbd_ep0in_dma_handler>

000483a0 <nrfx_usbd_ep_max_packet_size_set>:
{
   483a0:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   483a2:	f7f7 fd33 	bl	3fe0c <ep_state_access>
    p_state->max_packet_size = size;
   483a6:	8181      	strh	r1, [r0, #12]
}
   483a8:	bd08      	pop	{r3, pc}

000483aa <nrfx_usbd_ep_status_get>:
{
   483aa:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   483ac:	f7f7 fd2e 	bl	3fe0c <ep_state_access>
	__asm__ volatile(
   483b0:	f04f 0220 	mov.w	r2, #32
   483b4:	f3ef 8311 	mrs	r3, BASEPRI
   483b8:	f382 8812 	msr	BASEPRI_MAX, r2
   483bc:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   483c0:	6882      	ldr	r2, [r0, #8]
   483c2:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   483c4:	6802      	ldr	r2, [r0, #0]
   483c6:	b92a      	cbnz	r2, 483d4 <nrfx_usbd_ep_status_get+0x2a>
   483c8:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   483ca:	f383 8811 	msr	BASEPRI, r3
   483ce:	f3bf 8f6f 	isb	sy
}
   483d2:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   483d4:	2004      	movs	r0, #4
   483d6:	e7f8      	b.n	483ca <nrfx_usbd_ep_status_get+0x20>

000483d8 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   483d8:	2007      	movs	r0, #7
   483da:	f7f8 b969 	b.w	406b0 <nrf_usbd_epout_dma_handler>

000483de <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   483de:	2006      	movs	r0, #6
   483e0:	f7f8 b966 	b.w	406b0 <nrf_usbd_epout_dma_handler>

000483e4 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   483e4:	2005      	movs	r0, #5
   483e6:	f7f8 b963 	b.w	406b0 <nrf_usbd_epout_dma_handler>

000483ea <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   483ea:	2004      	movs	r0, #4
   483ec:	f7f8 b960 	b.w	406b0 <nrf_usbd_epout_dma_handler>

000483f0 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   483f0:	2003      	movs	r0, #3
   483f2:	f7f8 b95d 	b.w	406b0 <nrf_usbd_epout_dma_handler>

000483f6 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   483f6:	2002      	movs	r0, #2
   483f8:	f7f8 b95a 	b.w	406b0 <nrf_usbd_epout_dma_handler>

000483fc <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   483fc:	2001      	movs	r0, #1
   483fe:	f7f8 b957 	b.w	406b0 <nrf_usbd_epout_dma_handler>

00048402 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   48402:	f7f8 ba4b 	b.w	4089c <usbd_ep_abort>

00048406 <debounce_update>:
        state->counter -= elapsed_ms;
    }
}

void debounce_update(struct debounce_state *state, const bool active, const int elapsed_ms,
                     const struct debounce_config *config) {
   48406:	b570      	push	{r4, r5, r6, lr}
    // This uses a variation of the integrator debouncing described at
    // https://www.kennethkuhn.com/electronics/debounce.c
    // Every update where "active" does not match the current state, we increment
    // a counter, otherwise we decrement it. When the counter reaches a
    // threshold, the state flips and we reset the counter.
    state->changed = false;
   48408:	7804      	ldrb	r4, [r0, #0]
   4840a:	f36f 0441 	bfc	r4, #1, #1
   4840e:	7004      	strb	r4, [r0, #0]

    if (active == state->pressed) {
   48410:	f004 0501 	and.w	r5, r4, #1
    if (state->counter < elapsed_ms) {
   48414:	8804      	ldrh	r4, [r0, #0]
    if (active == state->pressed) {
   48416:	428d      	cmp	r5, r1
    if (state->counter < elapsed_ms) {
   48418:	f3c4 068d 	ubfx	r6, r4, #2, #14
    if (active == state->pressed) {
   4841c:	d109      	bne.n	48432 <debounce_update+0x2c>
    if (state->counter < elapsed_ms) {
   4841e:	42b2      	cmp	r2, r6
   48420:	dd03      	ble.n	4842a <debounce_update+0x24>
        state->counter = 0;
   48422:	f36f 048f 	bfc	r4, #2, #14
    if (state->counter < flip_threshold) {
        increment_counter(state, elapsed_ms);
        return;
    }

    state->pressed = !state->pressed;
   48426:	8004      	strh	r4, [r0, #0]
    state->counter = 0;
    state->changed = true;
}
   48428:	bd70      	pop	{r4, r5, r6, pc}
        state->counter -= elapsed_ms;
   4842a:	1ab6      	subs	r6, r6, r2
        state->counter += elapsed_ms;
   4842c:	f366 048f 	bfi	r4, r6, #2, #14
   48430:	e7f9      	b.n	48426 <debounce_update+0x20>
    return state->pressed ? config->debounce_release_ms : config->debounce_press_ms;
   48432:	e9d3 1300 	ldrd	r1, r3, [r3]
   48436:	f014 0f01 	tst.w	r4, #1
   4843a:	bf08      	it	eq
   4843c:	460b      	moveq	r3, r1
    if (state->counter < flip_threshold) {
   4843e:	429e      	cmp	r6, r3
   48440:	d208      	bcs.n	48454 <debounce_update+0x4e>
    if (state->counter + elapsed_ms > DEBOUNCE_COUNTER_MAX) {
   48442:	4416      	add	r6, r2
   48444:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
   48448:	d3f0      	bcc.n	4842c <debounce_update+0x26>
        state->counter = DEBOUNCE_COUNTER_MAX;
   4844a:	f643 73ff 	movw	r3, #16383	; 0x3fff
   4844e:	f363 048f 	bfi	r4, r3, #2, #14
   48452:	e7e8      	b.n	48426 <debounce_update+0x20>
    state->pressed = !state->pressed;
   48454:	f085 0401 	eor.w	r4, r5, #1
   48458:	f044 0402 	orr.w	r4, r4, #2
   4845c:	e7e3      	b.n	48426 <debounce_update+0x20>

0004845e <debounce_is_active>:

bool debounce_is_active(const struct debounce_state *state) {
    return state->pressed || state->counter > 0;
   4845e:	8800      	ldrh	r0, [r0, #0]
   48460:	f020 0002 	bic.w	r0, r0, #2
   48464:	b280      	uxth	r0, r0
}
   48466:	3800      	subs	r0, #0
   48468:	bf18      	it	ne
   4846a:	2001      	movne	r0, #1
   4846c:	4770      	bx	lr

0004846e <debounce_is_pressed>:

bool debounce_is_pressed(const struct debounce_state *state) { return state->pressed; }
   4846e:	7800      	ldrb	r0, [r0, #0]
   48470:	f000 0001 	and.w	r0, r0, #1
   48474:	4770      	bx	lr

00048476 <debounce_get_changed>:

   48476:	7800      	ldrb	r0, [r0, #0]
   48478:	f3c0 0040 	ubfx	r0, r0, #1, #1
   4847c:	4770      	bx	lr

0004847e <z_impl_gpio_pin_configure>:
{
   4847e:	b4f0      	push	{r4, r5, r6, r7}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   48480:	04d4      	lsls	r4, r2, #19
	const struct gpio_driver_api *api =
   48482:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   48484:	6906      	ldr	r6, [r0, #16]
{
   48486:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   48488:	d506      	bpl.n	48498 <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   4848a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   4848e:	d003      	beq.n	48498 <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   48490:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   48492:	bf48      	it	mi
   48494:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   48498:	6834      	ldr	r4, [r6, #0]
   4849a:	2501      	movs	r5, #1
   4849c:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   4849e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   484a2:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   484a4:	bf4c      	ite	mi
   484a6:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   484a8:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
   484aa:	683b      	ldr	r3, [r7, #0]
   484ac:	6034      	str	r4, [r6, #0]
}
   484ae:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   484b0:	4718      	bx	r3

000484b2 <kscan_direct_configure>:
    struct kscan_direct_data *data = dev->data;
   484b2:	6903      	ldr	r3, [r0, #16]
    if (!callback) {
   484b4:	b111      	cbz	r1, 484bc <kscan_direct_configure+0xa>
    data->callback = callback;
   484b6:	6059      	str	r1, [r3, #4]
    return 0;
   484b8:	2000      	movs	r0, #0
   484ba:	4770      	bx	lr
        return -EINVAL;
   484bc:	f06f 0015 	mvn.w	r0, #21
}
   484c0:	4770      	bx	lr

000484c2 <kscan_direct_interrupt_configure.isra.0>:
static int kscan_direct_interrupt_configure(const struct device *dev, const gpio_flags_t flags) {
   484c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   484c6:	4606      	mov	r6, r0
   484c8:	460c      	mov	r4, r1
    for (int i = 0; i < config->inputs.len; i++) {
   484ca:	2500      	movs	r5, #0
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   484cc:	f401 4700 	and.w	r7, r1, #32768	; 0x8000
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   484d0:	f04f 0801 	mov.w	r8, #1
   484d4:	6873      	ldr	r3, [r6, #4]
   484d6:	42ab      	cmp	r3, r5
   484d8:	d802      	bhi.n	484e0 <kscan_direct_interrupt_configure.isra.0+0x1e>
    return 0;
   484da:	2000      	movs	r0, #0
}
   484dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   484e0:	6833      	ldr	r3, [r6, #0]
   484e2:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   484e6:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   484ea:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_api *api =
   484ec:	f8d0 c008 	ldr.w	ip, [r0, #8]
	const struct gpio_driver_data *const data =
   484f0:	6902      	ldr	r2, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   484f2:	b18f      	cbz	r7, 48518 <kscan_direct_interrupt_configure.isra.0+0x56>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   484f4:	6812      	ldr	r2, [r2, #0]
   484f6:	fa08 f301 	lsl.w	r3, r8, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   484fa:	4213      	tst	r3, r2
   484fc:	d00c      	beq.n	48518 <kscan_direct_interrupt_configure.isra.0+0x56>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   484fe:	f484 22c0 	eor.w	r2, r4, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   48502:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   48506:	f8dc 9018 	ldr.w	r9, [ip, #24]
   4850a:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   4850e:	47c8      	blx	r9
        if (err) {
   48510:	2800      	cmp	r0, #0
   48512:	d1e3      	bne.n	484dc <kscan_direct_interrupt_configure.isra.0+0x1a>
    for (int i = 0; i < config->inputs.len; i++) {
   48514:	3501      	adds	r5, #1
   48516:	e7dd      	b.n	484d4 <kscan_direct_interrupt_configure.isra.0+0x12>
   48518:	4622      	mov	r2, r4
   4851a:	e7f2      	b.n	48502 <kscan_direct_interrupt_configure.isra.0+0x40>

0004851c <kscan_direct_irq_callback_handler>:
    struct kscan_direct_data *data = irq_data->dev->data;
   4851c:	f851 3c04 	ldr.w	r3, [r1, #-4]
                                              const gpio_port_pins_t pin) {
   48520:	b510      	push	{r4, lr}
    struct kscan_direct_data *data = irq_data->dev->data;
   48522:	691c      	ldr	r4, [r3, #16]
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   48524:	6823      	ldr	r3, [r4, #0]
   48526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   4852a:	6858      	ldr	r0, [r3, #4]
   4852c:	f7ff ffc9 	bl	484c2 <kscan_direct_interrupt_configure.isra.0>
	return z_impl_k_uptime_ticks();
   48530:	f000 fd1c 	bl	48f6c <z_impl_k_uptime_ticks>
   48534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48538:	fba0 0302 	umull	r0, r3, r0, r2
   4853c:	fb02 3101 	mla	r1, r2, r1, r3
   48540:	0bc0      	lsrs	r0, r0, #15
   48542:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   48546:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   48548:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    k_work_reschedule(&data->work, K_NO_WAIT);
   4854c:	2200      	movs	r2, #0
   4854e:	f104 0008 	add.w	r0, r4, #8
   48552:	2300      	movs	r3, #0
}
   48554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    k_work_reschedule(&data->work, K_NO_WAIT);
   48558:	f7f9 ba5c 	b.w	41a14 <k_work_reschedule>

0004855c <kscan_direct_read>:
static int kscan_direct_read(const struct device *dev) {
   4855c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const struct kscan_direct_config *config = dev->config;
   48560:	6844      	ldr	r4, [r0, #4]
    struct kscan_direct_data *data = dev->data;
   48562:	f8d0 8010 	ldr.w	r8, [r0, #16]
static int kscan_direct_read(const struct device *dev) {
   48566:	4606      	mov	r6, r0
    for (int i = 0; i < config->inputs.len; i++) {
   48568:	2500      	movs	r5, #0
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   4856a:	f04f 0901 	mov.w	r9, #1
        debounce_update(&data->pin_state[i], active, config->debounce_scan_period_ms,
   4856e:	f104 0a08 	add.w	sl, r4, #8
    for (int i = 0; i < config->inputs.len; i++) {
   48572:	6863      	ldr	r3, [r4, #4]
   48574:	42ab      	cmp	r3, r5
   48576:	d835      	bhi.n	485e4 <kscan_direct_read+0x88>
    for (int i = 0; i < config->inputs.len; i++) {
   48578:	f04f 0900 	mov.w	r9, #0
    bool continue_scan = false;
   4857c:	464d      	mov	r5, r9
    for (int i = 0; i < config->inputs.len; i++) {
   4857e:	6863      	ldr	r3, [r4, #4]
   48580:	454b      	cmp	r3, r9
   48582:	d853      	bhi.n	4862c <kscan_direct_read+0xd0>
    const struct kscan_direct_config *config = dev->config;
   48584:	6870      	ldr	r0, [r6, #4]
    if (continue_scan) {
   48586:	2d00      	cmp	r5, #0
   48588:	f000 809e 	beq.w	486c8 <kscan_direct_read+0x16c>
    struct kscan_direct_data *data = dev->data;
   4858c:	6934      	ldr	r4, [r6, #16]
    data->scan_time += config->debounce_scan_period_ms;
   4858e:	6903      	ldr	r3, [r0, #16]
   48590:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   48594:	1818      	adds	r0, r3, r0
   48596:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   4859a:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
   4859e:	03c9      	lsls	r1, r1, #15
   485a0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   485a4:	f240 33e7 	movw	r3, #999	; 0x3e7
   485a8:	03c0      	lsls	r0, r0, #15
   485aa:	18c0      	adds	r0, r0, r3
   485ac:	f141 0100 	adc.w	r1, r1, #0
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   485b0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   485b4:	f171 0300 	sbcs.w	r3, r1, #0
   485b8:	f104 0408 	add.w	r4, r4, #8
   485bc:	d37f      	bcc.n	486be <kscan_direct_read+0x162>
   485be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   485c2:	2300      	movs	r3, #0
   485c4:	f7dd fd9c 	bl	26100 <__aeabi_uldivmod>
   485c8:	f06f 0201 	mvn.w	r2, #1
   485cc:	1a12      	subs	r2, r2, r0
   485ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   485d2:	eb63 0301 	sbc.w	r3, r3, r1
   485d6:	4620      	mov	r0, r4
   485d8:	f7f9 fa1c 	bl	41a14 <k_work_reschedule>
}
   485dc:	2000      	movs	r0, #0
   485de:	b003      	add	sp, #12
   485e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   485e4:	6823      	ldr	r3, [r4, #0]
	return gpio_pin_get(spec->port, spec->pin);
   485e6:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   485ea:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
	const struct gpio_driver_data *const data =
   485ee:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return gpio_pin_get(spec->port, spec->pin);
   485f2:	7917      	ldrb	r7, [r2, #4]
	return api->port_get_raw(port, value);
   485f4:	6883      	ldr	r3, [r0, #8]
   485f6:	a901      	add	r1, sp, #4
   485f8:	685b      	ldr	r3, [r3, #4]
   485fa:	4798      	blx	r3
	if (ret == 0) {
   485fc:	b948      	cbnz	r0, 48612 <kscan_direct_read+0xb6>
		*value ^= data->invert;
   485fe:	f8db 2000 	ldr.w	r2, [fp]
   48602:	9b01      	ldr	r3, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   48604:	fa09 f707 	lsl.w	r7, r9, r7
		*value ^= data->invert;
   48608:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   4860a:	423b      	tst	r3, r7
   4860c:	bf14      	ite	ne
   4860e:	2001      	movne	r0, #1
   48610:	2000      	moveq	r0, #0
        debounce_update(&data->pin_state[i], active, config->debounce_scan_period_ms,
   48612:	f8d8 7048 	ldr.w	r7, [r8, #72]	; 0x48
   48616:	6922      	ldr	r2, [r4, #16]
   48618:	1e01      	subs	r1, r0, #0
   4861a:	4653      	mov	r3, sl
   4861c:	eb07 0045 	add.w	r0, r7, r5, lsl #1
   48620:	bf18      	it	ne
   48622:	2101      	movne	r1, #1
   48624:	f7ff feef 	bl	48406 <debounce_update>
    for (int i = 0; i < config->inputs.len; i++) {
   48628:	3501      	adds	r5, #1
   4862a:	e7a2      	b.n	48572 <kscan_direct_read+0x16>
        struct debounce_state *state = &data->pin_state[i];
   4862c:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
   48630:	eb03 0a49 	add.w	sl, r3, r9, lsl #1
        if (debounce_get_changed(state)) {
   48634:	4650      	mov	r0, sl
   48636:	f7ff ff1e 	bl	48476 <debounce_get_changed>
   4863a:	b948      	cbnz	r0, 48650 <kscan_direct_read+0xf4>
        continue_scan = continue_scan || debounce_is_active(state);
   4863c:	2d00      	cmp	r5, #0
   4863e:	d13c      	bne.n	486ba <kscan_direct_read+0x15e>
   48640:	4650      	mov	r0, sl
   48642:	f7ff ff0c 	bl	4845e <debounce_is_active>
   48646:	f000 0501 	and.w	r5, r0, #1
    for (int i = 0; i < config->inputs.len; i++) {
   4864a:	f109 0901 	add.w	r9, r9, #1
   4864e:	e796      	b.n	4857e <kscan_direct_read+0x22>
            const bool pressed = debounce_is_pressed(state);
   48650:	4650      	mov	r0, sl
   48652:	f7ff ff0c 	bl	4846e <debounce_is_pressed>
            data->callback(dev, 0, i, pressed);
   48656:	f8d8 c004 	ldr.w	ip, [r8, #4]
   4865a:	4603      	mov	r3, r0
            const bool pressed = debounce_is_pressed(state);
   4865c:	4607      	mov	r7, r0
            data->callback(dev, 0, i, pressed);
   4865e:	464a      	mov	r2, r9
   48660:	2100      	movs	r1, #0
   48662:	4630      	mov	r0, r6
   48664:	47e0      	blx	ip
            if (config->toggle_mode && pressed) {
   48666:	7e23      	ldrb	r3, [r4, #24]
   48668:	2b00      	cmp	r3, #0
   4866a:	d0e7      	beq.n	4863c <kscan_direct_read+0xe0>
   4866c:	2f00      	cmp	r7, #0
   4866e:	d0e5      	beq.n	4863c <kscan_direct_read+0xe0>
                kscan_inputs_set_flags(&config->inputs, &config->inputs.gpios[i]);
   48670:	6823      	ldr	r3, [r4, #0]
    for (int i = 0; i < inputs->len; i++) {
   48672:	2700      	movs	r7, #0
                kscan_inputs_set_flags(&config->inputs, &config->inputs.gpios[i]);
   48674:	eb03 0bc9 	add.w	fp, r3, r9, lsl #3
    for (int i = 0; i < inputs->len; i++) {
   48678:	6863      	ldr	r3, [r4, #4]
   4867a:	429f      	cmp	r7, r3
   4867c:	d2de      	bcs.n	4863c <kscan_direct_read+0xe0>
        extra_flags = GPIO_INPUT | kscan_gpio_get_extra_flags(&inputs->gpios[i],
   4867e:	6821      	ldr	r1, [r4, #0]
   48680:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    if (!active) {
   48684:	459b      	cmp	fp, r3
   48686:	795a      	ldrb	r2, [r3, #5]
        extra_flags = GPIO_INPUT | kscan_gpio_get_extra_flags(&inputs->gpios[i],
   48688:	ea4f 00c7 	mov.w	r0, r7, lsl #3
    if (!active) {
   4868c:	d012      	beq.n	486b4 <kscan_direct_read+0x158>
        return ((BIT(0) & gpio->dt_flags) ? GPIO_PULL_UP : GPIO_PULL_DOWN);
   4868e:	f012 0f01 	tst.w	r2, #1
   48692:	bf0c      	ite	eq
   48694:	f04f 0c20 	moveq.w	ip, #32
   48698:	f04f 0c10 	movne.w	ip, #16
	return gpio_pin_configure(spec->port,
   4869c:	5808      	ldr	r0, [r1, r0]
				  spec->pin,
   4869e:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   486a0:	ea42 020c 	orr.w	r2, r2, ip
   486a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   486a8:	f7ff fee9 	bl	4847e <z_impl_gpio_pin_configure>
        if (err) {
   486ac:	2800      	cmp	r0, #0
   486ae:	d1c5      	bne.n	4863c <kscan_direct_read+0xe0>
    for (int i = 0; i < inputs->len; i++) {
   486b0:	3701      	adds	r7, #1
   486b2:	e7e1      	b.n	48678 <kscan_direct_read+0x11c>
    return 0;
   486b4:	f04f 0c00 	mov.w	ip, #0
   486b8:	e7f0      	b.n	4869c <kscan_direct_read+0x140>
        continue_scan = continue_scan || debounce_is_active(state);
   486ba:	2001      	movs	r0, #1
   486bc:	e7c3      	b.n	48646 <kscan_direct_read+0xea>
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   486be:	f06f 0201 	mvn.w	r2, #1
   486c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   486c6:	e786      	b.n	485d6 <kscan_direct_read+0x7a>
    return kscan_direct_interrupt_configure(dev, GPIO_INT_LEVEL_ACTIVE);
   486c8:	f44f 2198 	mov.w	r1, #311296	; 0x4c000
   486cc:	f7ff fef9 	bl	484c2 <kscan_direct_interrupt_configure.isra.0>
   486d0:	e784      	b.n	485dc <kscan_direct_read+0x80>

000486d2 <kscan_direct_enable>:
static int kscan_direct_enable(const struct device *dev) {
   486d2:	b570      	push	{r4, r5, r6, lr}
    struct kscan_direct_data *data = dev->data;
   486d4:	6906      	ldr	r6, [r0, #16]
static int kscan_direct_enable(const struct device *dev) {
   486d6:	4604      	mov	r4, r0
   486d8:	f000 fc48 	bl	48f6c <z_impl_k_uptime_ticks>
   486dc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   486e0:	fba0 3205 	umull	r3, r2, r0, r5
   486e4:	fb05 2101 	mla	r1, r5, r1, r2
   486e8:	0bdb      	lsrs	r3, r3, #15
   486ea:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   486ee:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   486f0:	e9c6 3110 	strd	r3, r1, [r6, #64]	; 0x40
    return kscan_direct_read(dev);
   486f4:	4620      	mov	r0, r4
}
   486f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return kscan_direct_read(dev);
   486fa:	f7ff bf2f 	b.w	4855c <kscan_direct_read>

000486fe <kscan_direct_work_handler>:
    kscan_direct_read(data->dev);
   486fe:	f850 0c08 	ldr.w	r0, [r0, #-8]
   48702:	f7ff bf2b 	b.w	4855c <kscan_direct_read>

00048706 <kscan_direct_disable>:
static int kscan_direct_disable(const struct device *dev) {
   48706:	b510      	push	{r4, lr}
   48708:	4604      	mov	r4, r0
    k_work_cancel_delayable(&data->work);
   4870a:	6900      	ldr	r0, [r0, #16]
   4870c:	3008      	adds	r0, #8
   4870e:	f000 fa99 	bl	48c44 <k_work_cancel_delayable>
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   48712:	6860      	ldr	r0, [r4, #4]
   48714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
}
   48718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   4871c:	f7ff bed1 	b.w	484c2 <kscan_direct_interrupt_configure.isra.0>

00048720 <battery_channel_get>:

#include "battery_common.h"

int battery_channel_get(const struct battery_value *value, enum sensor_channel chan,
                        struct sensor_value *val_out) {
    switch (chan) {
   48720:	2927      	cmp	r1, #39	; 0x27
   48722:	d004      	beq.n	4872e <battery_channel_get+0xe>
   48724:	292c      	cmp	r1, #44	; 0x2c
   48726:	d00f      	beq.n	48748 <battery_channel_get+0x28>
   48728:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4872c:	4770      	bx	lr
    case SENSOR_CHAN_GAUGE_VOLTAGE:
        val_out->val1 = value->millivolts / 1000;
   4872e:	8843      	ldrh	r3, [r0, #2]
   48730:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   48734:	fbb3 f0f1 	udiv	r0, r3, r1
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   48738:	fb01 3310 	mls	r3, r1, r0, r3
   4873c:	b29b      	uxth	r3, r3
   4873e:	434b      	muls	r3, r1
        val_out->val1 = value->millivolts / 1000;
   48740:	6010      	str	r0, [r2, #0]
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   48742:	6053      	str	r3, [r2, #4]

    default:
        return -ENOTSUP;
    }

    return 0;
   48744:	2000      	movs	r0, #0
        break;
   48746:	4770      	bx	lr
        val_out->val1 = value->state_of_charge;
   48748:	7903      	ldrb	r3, [r0, #4]
   4874a:	6013      	str	r3, [r2, #0]
        val_out->val2 = 0;
   4874c:	2000      	movs	r0, #0
   4874e:	6050      	str	r0, [r2, #4]
}
   48750:	4770      	bx	lr

00048752 <lithium_ion_mv_to_pct>:

uint8_t lithium_ion_mv_to_pct(int16_t bat_mv) {
    // Simple linear approximation of a battery based off adafruit's discharge graph:
    // https://learn.adafruit.com/li-ion-and-lipoly-batteries/voltages

    if (bat_mv >= 4200) {
   48752:	f241 0367 	movw	r3, #4199	; 0x1067
   48756:	4298      	cmp	r0, r3
   48758:	dc0a      	bgt.n	48770 <lithium_ion_mv_to_pct+0x1e>
        return 100;
    } else if (bat_mv <= 3450) {
   4875a:	f640 537a 	movw	r3, #3450	; 0xd7a
   4875e:	4298      	cmp	r0, r3
   48760:	dd08      	ble.n	48774 <lithium_ion_mv_to_pct+0x22>
        return 0;
    }

    return bat_mv * 2 / 15 - 459;
   48762:	230f      	movs	r3, #15
   48764:	0040      	lsls	r0, r0, #1
   48766:	fbb0 f0f3 	udiv	r0, r0, r3
   4876a:	3035      	adds	r0, #53	; 0x35
   4876c:	b2c0      	uxtb	r0, r0
   4876e:	4770      	bx	lr
        return 100;
   48770:	2064      	movs	r0, #100	; 0x64
   48772:	4770      	bx	lr
        return 0;
   48774:	2000      	movs	r0, #0
   48776:	4770      	bx	lr

00048778 <vddh_channel_get>:
    return battery_channel_get(&drv_data->value, chan, val);
   48778:	6900      	ldr	r0, [r0, #16]
   4877a:	301c      	adds	r0, #28
   4877c:	f7ff bfd0 	b.w	48720 <battery_channel_get>

00048780 <z_device_state_init>:
}
   48780:	4770      	bx	lr

00048782 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   48782:	b138      	cbz	r0, 48794 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   48784:	68c3      	ldr	r3, [r0, #12]
   48786:	8818      	ldrh	r0, [r3, #0]
   48788:	f3c0 0008 	ubfx	r0, r0, #0, #9
   4878c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   48790:	4258      	negs	r0, r3
   48792:	4158      	adcs	r0, r3
}
   48794:	4770      	bx	lr

00048796 <arch_system_halt>:
	__asm__ volatile(
   48796:	f04f 0220 	mov.w	r2, #32
   4879a:	f3ef 8311 	mrs	r3, BASEPRI
   4879e:	f382 8812 	msr	BASEPRI_MAX, r2
   487a2:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   487a6:	e7fe      	b.n	487a6 <arch_system_halt+0x10>

000487a8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   487a8:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   487aa:	f7ff fff4 	bl	48796 <arch_system_halt>

000487ae <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   487ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   487b0:	4605      	mov	r5, r0
   487b2:	460e      	mov	r6, r1
   487b4:	f04f 0320 	mov.w	r3, #32
   487b8:	f3ef 8711 	mrs	r7, BASEPRI
   487bc:	f383 8812 	msr	BASEPRI_MAX, r3
   487c0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   487c4:	f7f9 fc10 	bl	41fe8 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   487c8:	4631      	mov	r1, r6
   487ca:	4604      	mov	r4, r0
   487cc:	4628      	mov	r0, r5
   487ce:	f7ff ffeb 	bl	487a8 <k_sys_fatal_error_handler>
	__asm__ volatile(
   487d2:	f387 8811 	msr	BASEPRI, r7
   487d6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   487da:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   487dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   487e0:	f7e1 be60 	b.w	2a4a4 <z_impl_k_thread_abort>

000487e4 <k_heap_init>:
{
   487e4:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   487e6:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   487ea:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   487ee:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   487f0:	f7fa bce5 	b.w	431be <sys_heap_init>

000487f4 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   487f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   487f8:	b085      	sub	sp, #20
   487fa:	4606      	mov	r6, r0
   487fc:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   487fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   48802:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   48804:	f000 fbb8 	bl	48f78 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   48808:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   4880c:	4605      	mov	r5, r0
   4880e:	460f      	mov	r7, r1
	__asm__ volatile(
   48810:	f04f 0320 	mov.w	r3, #32
   48814:	f3ef 8411 	mrs	r4, BASEPRI
   48818:	f383 8812 	msr	BASEPRI_MAX, r3
   4881c:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   48820:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   48824:	464a      	mov	r2, r9
   48826:	4641      	mov	r1, r8
   48828:	4630      	mov	r0, r6
   4882a:	f7fa fc61 	bl	430f0 <sys_heap_aligned_alloc>
   4882e:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   48830:	f7f9 fd8e 	bl	42350 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   48834:	9b03      	ldr	r3, [sp, #12]
   48836:	b13b      	cbz	r3, 48848 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   48838:	f384 8811 	msr	BASEPRI, r4
   4883c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   48840:	4618      	mov	r0, r3
   48842:	b005      	add	sp, #20
   48844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   48848:	1a28      	subs	r0, r5, r0
   4884a:	eb67 0101 	sbc.w	r1, r7, r1
   4884e:	2801      	cmp	r0, #1
   48850:	f171 0200 	sbcs.w	r2, r1, #0
   48854:	dbf0      	blt.n	48838 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   48856:	e9cd 0100 	strd	r0, r1, [sp]
   4885a:	465a      	mov	r2, fp
   4885c:	4621      	mov	r1, r4
   4885e:	4650      	mov	r0, sl
   48860:	f7f9 fa72 	bl	41d48 <z_pend_curr>
	__asm__ volatile(
   48864:	f04f 0320 	mov.w	r3, #32
   48868:	f3ef 8411 	mrs	r4, BASEPRI
   4886c:	f383 8812 	msr	BASEPRI_MAX, r3
   48870:	f3bf 8f6f 	isb	sy
   48874:	e7d6      	b.n	48824 <k_heap_aligned_alloc+0x30>

00048876 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   48876:	b538      	push	{r3, r4, r5, lr}
   48878:	4604      	mov	r4, r0
   4887a:	f04f 0320 	mov.w	r3, #32
   4887e:	f3ef 8511 	mrs	r5, BASEPRI
   48882:	f383 8812 	msr	BASEPRI_MAX, r3
   48886:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   4888a:	f7fa fbf9 	bl	43080 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   4888e:	f104 000c 	add.w	r0, r4, #12
   48892:	f000 fafa 	bl	48e8a <z_unpend_all>
   48896:	b130      	cbz	r0, 488a6 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   48898:	4629      	mov	r1, r5
   4889a:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   4889e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   488a2:	f7f9 b903 	b.w	41aac <z_reschedule>
	__asm__ volatile(
   488a6:	f385 8811 	msr	BASEPRI, r5
   488aa:	f3bf 8f6f 	isb	sy
}
   488ae:	bd38      	pop	{r3, r4, r5, pc}

000488b0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   488b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   488b2:	4604      	mov	r4, r0
   488b4:	460d      	mov	r5, r1
	__asm__ volatile(
   488b6:	f04f 0320 	mov.w	r3, #32
   488ba:	f3ef 8611 	mrs	r6, BASEPRI
   488be:	f383 8812 	msr	BASEPRI_MAX, r3
   488c2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   488c6:	6947      	ldr	r7, [r0, #20]
   488c8:	b977      	cbnz	r7, 488e8 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   488ca:	f000 fac6 	bl	48e5a <z_unpend_first_thread>

		if (pending_thread != NULL) {
   488ce:	b158      	cbz	r0, 488e8 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   488d0:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   488d2:	6142      	str	r2, [r0, #20]
   488d4:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   488d6:	f000 fa50 	bl	48d7a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   488da:	4631      	mov	r1, r6
   488dc:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   488e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   488e4:	f7f9 b8e2 	b.w	41aac <z_reschedule>
	**(char ***) mem = slab->free_list;
   488e8:	682b      	ldr	r3, [r5, #0]
   488ea:	6962      	ldr	r2, [r4, #20]
   488ec:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   488ee:	682b      	ldr	r3, [r5, #0]
   488f0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   488f2:	69a3      	ldr	r3, [r4, #24]
   488f4:	3b01      	subs	r3, #1
   488f6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   488f8:	f386 8811 	msr	BASEPRI, r6
   488fc:	f3bf 8f6f 	isb	sy
}
   48900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00048902 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   48902:	f3ef 8005 	mrs	r0, IPSR
}
   48906:	3800      	subs	r0, #0
   48908:	bf18      	it	ne
   4890a:	2001      	movne	r0, #1
   4890c:	4770      	bx	lr

0004890e <z_impl_k_thread_name_set>:
}
   4890e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   48912:	4770      	bx	lr

00048914 <z_impl_k_thread_start>:
	z_sched_start(thread);
   48914:	f7f9 b9bc 	b.w	41c90 <z_sched_start>

00048918 <z_pm_save_idle_exit>:
{
   48918:	b508      	push	{r3, lr}
	pm_system_resume();
   4891a:	f7e1 f935 	bl	29b88 <pm_system_resume>
}
   4891e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   48922:	f7ff bbfe 	b.w	48122 <sys_clock_idle_exit>

00048926 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   48926:	f990 300e 	ldrsb.w	r3, [r0, #14]
   4892a:	428b      	cmp	r3, r1
   4892c:	d001      	beq.n	48932 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   4892e:	f7f9 ba1f 	b.w	41d70 <z_set_prio>
}
   48932:	2000      	movs	r0, #0
   48934:	4770      	bx	lr

00048936 <z_impl_k_mutex_init>:
{
   48936:	4603      	mov	r3, r0
	mutex->owner = NULL;
   48938:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   4893a:	e9c3 0002 	strd	r0, r0, [r3, #8]
   4893e:	e9c3 3300 	strd	r3, r3, [r3]
}
   48942:	4770      	bx	lr

00048944 <queue_insert>:
{
   48944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   48948:	4699      	mov	r9, r3
   4894a:	4604      	mov	r4, r0
   4894c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   48950:	460d      	mov	r5, r1
   48952:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   48954:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   48958:	f04f 0220 	mov.w	r2, #32
   4895c:	f3ef 8711 	mrs	r7, BASEPRI
   48960:	f382 8812 	msr	BASEPRI_MAX, r2
   48964:	f3bf 8f6f 	isb	sy
	if (is_append) {
   48968:	b103      	cbz	r3, 4896c <queue_insert+0x28>
	return list->tail;
   4896a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   4896c:	4630      	mov	r0, r6
   4896e:	f000 fa74 	bl	48e5a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   48972:	b158      	cbz	r0, 4898c <queue_insert+0x48>
   48974:	2400      	movs	r4, #0
   48976:	67c4      	str	r4, [r0, #124]	; 0x7c
   48978:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   4897c:	f000 f9fd 	bl	48d7a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   48980:	4630      	mov	r0, r6
   48982:	4639      	mov	r1, r7
   48984:	f7f9 f892 	bl	41aac <z_reschedule>
	return 0;
   48988:	2000      	movs	r0, #0
   4898a:	e00c      	b.n	489a6 <queue_insert+0x62>
	if (alloc) {
   4898c:	f1b9 0f00 	cmp.w	r9, #0
   48990:	d01b      	beq.n	489ca <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   48992:	2108      	movs	r1, #8
   48994:	f7f9 fe18 	bl	425c8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   48998:	b938      	cbnz	r0, 489aa <queue_insert+0x66>
	__asm__ volatile(
   4899a:	f387 8811 	msr	BASEPRI, r7
   4899e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   489a2:	f06f 000b 	mvn.w	r0, #11
}
   489a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   489aa:	2201      	movs	r2, #1
		anode->data = data;
   489ac:	f8c0 8004 	str.w	r8, [r0, #4]
   489b0:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   489b2:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   489b4:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   489b8:	b95d      	cbnz	r5, 489d2 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   489ba:	6822      	ldr	r2, [r4, #0]
   489bc:	430a      	orrs	r2, r1
   489be:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   489c0:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   489c2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   489c4:	b972      	cbnz	r2, 489e4 <queue_insert+0xa0>
	list->tail = node;
   489c6:	6060      	str	r0, [r4, #4]
}
   489c8:	e00c      	b.n	489e4 <queue_insert+0xa0>
	node->next_and_flags = flags;
   489ca:	f8c8 9000 	str.w	r9, [r8]
}
   489ce:	4640      	mov	r0, r8
   489d0:	e7ef      	b.n	489b2 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   489d2:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   489d4:	f032 0203 	bics.w	r2, r2, #3
   489d8:	d110      	bne.n	489fc <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   489da:	6001      	str	r1, [r0, #0]
	return list->tail;
   489dc:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   489de:	b939      	cbnz	r1, 489f0 <queue_insert+0xac>
	list->head = node;
   489e0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   489e4:	2104      	movs	r1, #4
   489e6:	f104 0010 	add.w	r0, r4, #16
   489ea:	f000 fc4b 	bl	49284 <z_handle_obj_poll_events>
   489ee:	e7c7      	b.n	48980 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   489f0:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   489f2:	f002 0203 	and.w	r2, r2, #3
   489f6:	4302      	orrs	r2, r0
   489f8:	600a      	str	r2, [r1, #0]
   489fa:	e7e4      	b.n	489c6 <queue_insert+0x82>
   489fc:	430a      	orrs	r2, r1
   489fe:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   48a00:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   48a02:	f002 0203 	and.w	r2, r2, #3
   48a06:	ea40 0302 	orr.w	r3, r0, r2
   48a0a:	602b      	str	r3, [r5, #0]
}
   48a0c:	e7ea      	b.n	489e4 <queue_insert+0xa0>

00048a0e <z_queue_node_peek>:
{
   48a0e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   48a10:	4604      	mov	r4, r0
   48a12:	b130      	cbz	r0, 48a22 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   48a14:	6802      	ldr	r2, [r0, #0]
   48a16:	0793      	lsls	r3, r2, #30
   48a18:	d003      	beq.n	48a22 <z_queue_node_peek+0x14>
		ret = anode->data;
   48a1a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   48a1c:	b109      	cbz	r1, 48a22 <z_queue_node_peek+0x14>
			k_free(anode);
   48a1e:	f000 fc52 	bl	492c6 <k_free>
}
   48a22:	4620      	mov	r0, r4
   48a24:	bd10      	pop	{r4, pc}

00048a26 <z_impl_k_queue_init>:
	list->head = NULL;
   48a26:	2300      	movs	r3, #0
	list->tail = NULL;
   48a28:	e9c0 3300 	strd	r3, r3, [r0]
   48a2c:	f100 0308 	add.w	r3, r0, #8
   48a30:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   48a34:	f100 0310 	add.w	r3, r0, #16
   48a38:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   48a3c:	4770      	bx	lr

00048a3e <k_queue_append>:
{
   48a3e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   48a40:	2301      	movs	r3, #1
   48a42:	9300      	str	r3, [sp, #0]
   48a44:	2300      	movs	r3, #0
{
   48a46:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   48a48:	4619      	mov	r1, r3
   48a4a:	f7ff ff7b 	bl	48944 <queue_insert>
}
   48a4e:	b003      	add	sp, #12
   48a50:	f85d fb04 	ldr.w	pc, [sp], #4

00048a54 <k_queue_prepend>:
{
   48a54:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   48a56:	2300      	movs	r3, #0
{
   48a58:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   48a5a:	9300      	str	r3, [sp, #0]
   48a5c:	4619      	mov	r1, r3
   48a5e:	f7ff ff71 	bl	48944 <queue_insert>
}
   48a62:	b003      	add	sp, #12
   48a64:	f85d fb04 	ldr.w	pc, [sp], #4

00048a68 <k_queue_append_list>:
{
   48a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   48a6c:	4605      	mov	r5, r0
   48a6e:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   48a70:	460c      	mov	r4, r1
   48a72:	b391      	cbz	r1, 48ada <k_queue_append_list+0x72>
   48a74:	b38a      	cbz	r2, 48ada <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   48a76:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   48a7a:	f04f 0320 	mov.w	r3, #32
   48a7e:	f3ef 8811 	mrs	r8, BASEPRI
   48a82:	f383 8812 	msr	BASEPRI_MAX, r3
   48a86:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   48a8a:	4638      	mov	r0, r7
   48a8c:	f000 f9e5 	bl	48e5a <z_unpend_first_thread>
   48a90:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   48a94:	b920      	cbnz	r0, 48aa0 <k_queue_append_list+0x38>
	return list->tail;
   48a96:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   48a98:	b9ca      	cbnz	r2, 48ace <k_queue_append_list+0x66>
	list->head = node;
   48a9a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   48a9c:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   48a9e:	e00a      	b.n	48ab6 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   48aa0:	6144      	str	r4, [r0, #20]
   48aa2:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   48aa6:	f000 f968 	bl	48d7a <z_ready_thread>
		head = *(void **)head;
   48aaa:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   48aac:	4638      	mov	r0, r7
   48aae:	f000 f9d4 	bl	48e5a <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   48ab2:	2c00      	cmp	r4, #0
   48ab4:	d1ee      	bne.n	48a94 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   48ab6:	2104      	movs	r1, #4
   48ab8:	f105 0010 	add.w	r0, r5, #16
   48abc:	f000 fbe2 	bl	49284 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   48ac0:	4638      	mov	r0, r7
   48ac2:	4641      	mov	r1, r8
   48ac4:	f7f8 fff2 	bl	41aac <z_reschedule>
	return 0;
   48ac8:	2000      	movs	r0, #0
}
   48aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   48ace:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   48ad0:	f003 0303 	and.w	r3, r3, #3
   48ad4:	4323      	orrs	r3, r4
   48ad6:	6013      	str	r3, [r2, #0]
}
   48ad8:	e7e0      	b.n	48a9c <k_queue_append_list+0x34>
		return -EINVAL;
   48ada:	f06f 0015 	mvn.w	r0, #21
   48ade:	e7f4      	b.n	48aca <k_queue_append_list+0x62>

00048ae0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   48ae0:	b15a      	cbz	r2, 48afa <z_impl_k_sem_init+0x1a>
   48ae2:	428a      	cmp	r2, r1
   48ae4:	d309      	bcc.n	48afa <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   48ae6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   48aea:	e9c0 1202 	strd	r1, r2, [r0, #8]
   48aee:	e9c0 0000 	strd	r0, r0, [r0]
   48af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   48af6:	2000      	movs	r0, #0
   48af8:	4770      	bx	lr
		return -EINVAL;
   48afa:	f06f 0015 	mvn.w	r0, #21
}
   48afe:	4770      	bx	lr

00048b00 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   48b00:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   48b02:	2301      	movs	r3, #1
   48b04:	408b      	lsls	r3, r1
   48b06:	ea22 0303 	bic.w	r3, r2, r3
   48b0a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   48b0c:	fa22 f001 	lsr.w	r0, r2, r1
}
   48b10:	f000 0001 	and.w	r0, r0, #1
   48b14:	4770      	bx	lr

00048b16 <unschedule_locked>:
{
   48b16:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   48b18:	2103      	movs	r1, #3
{
   48b1a:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   48b1c:	300c      	adds	r0, #12
   48b1e:	f7ff ffef 	bl	48b00 <flag_test_and_clear>
   48b22:	4604      	mov	r4, r0
   48b24:	b118      	cbz	r0, 48b2e <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   48b26:	f105 0010 	add.w	r0, r5, #16
   48b2a:	f000 f9db 	bl	48ee4 <z_abort_timeout>
}
   48b2e:	4620      	mov	r0, r4
   48b30:	bd38      	pop	{r3, r4, r5, pc}

00048b32 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   48b32:	b120      	cbz	r0, 48b3e <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   48b34:	2200      	movs	r2, #0
   48b36:	4611      	mov	r1, r2
   48b38:	3088      	adds	r0, #136	; 0x88
   48b3a:	f000 b9b6 	b.w	48eaa <z_sched_wake>
}
   48b3e:	4770      	bx	lr

00048b40 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   48b40:	68c3      	ldr	r3, [r0, #12]
{
   48b42:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48b44:	f3c3 0540 	ubfx	r5, r3, #1, #1
   48b48:	079b      	lsls	r3, r3, #30
{
   48b4a:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48b4c:	d416      	bmi.n	48b7c <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   48b4e:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   48b50:	2102      	movs	r1, #2
   48b52:	300c      	adds	r0, #12
   48b54:	f7ff ffd4 	bl	48b00 <flag_test_and_clear>
   48b58:	b180      	cbz	r0, 48b7c <cancel_async_locked+0x3c>
	return list->head;
   48b5a:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   48b5e:	b16a      	cbz	r2, 48b7c <cancel_async_locked+0x3c>
   48b60:	4294      	cmp	r4, r2
   48b62:	d11b      	bne.n	48b9c <cancel_async_locked+0x5c>
	return node->next;
   48b64:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   48b66:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   48b6a:	b98d      	cbnz	r5, 48b90 <cancel_async_locked+0x50>
   48b6c:	428c      	cmp	r4, r1
	list->head = node;
   48b6e:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   48b72:	d101      	bne.n	48b78 <cancel_async_locked+0x38>
	list->tail = node;
   48b74:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   48b78:	2300      	movs	r3, #0
   48b7a:	6023      	str	r3, [r4, #0]
	return *flagp;
   48b7c:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   48b7e:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   48b82:	bf1e      	ittt	ne
   48b84:	f043 0302 	orrne.w	r3, r3, #2
   48b88:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   48b8a:	f003 000f 	andne.w	r0, r3, #15
}
   48b8e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   48b90:	428c      	cmp	r4, r1
	parent->next = child;
   48b92:	602a      	str	r2, [r5, #0]
	list->tail = node;
   48b94:	bf08      	it	eq
   48b96:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   48b9a:	e7ed      	b.n	48b78 <cancel_async_locked+0x38>
	return node->next;
   48b9c:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   48b9e:	6812      	ldr	r2, [r2, #0]
   48ba0:	e7dd      	b.n	48b5e <cancel_async_locked+0x1e>

00048ba2 <work_timeout>:
{
   48ba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   48ba4:	4604      	mov	r4, r0
   48ba6:	f04f 0320 	mov.w	r3, #32
   48baa:	f3ef 8511 	mrs	r5, BASEPRI
   48bae:	f383 8812 	msr	BASEPRI_MAX, r3
   48bb2:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   48bb6:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   48bb8:	f1a0 0610 	sub.w	r6, r0, #16
   48bbc:	2103      	movs	r1, #3
   48bbe:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   48bc0:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   48bc2:	f7ff ff9d 	bl	48b00 <flag_test_and_clear>
   48bc6:	b128      	cbz	r0, 48bd4 <work_timeout+0x32>
		queue = dw->queue;
   48bc8:	69a3      	ldr	r3, [r4, #24]
   48bca:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   48bcc:	a901      	add	r1, sp, #4
   48bce:	4630      	mov	r0, r6
   48bd0:	f7f8 fe34 	bl	4183c <submit_to_queue_locked>
	__asm__ volatile(
   48bd4:	f385 8811 	msr	BASEPRI, r5
   48bd8:	f3bf 8f6f 	isb	sy
}
   48bdc:	b002      	add	sp, #8
   48bde:	bd70      	pop	{r4, r5, r6, pc}

00048be0 <k_work_init>:
{
   48be0:	b538      	push	{r3, r4, r5, lr}
   48be2:	4604      	mov	r4, r0
   48be4:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   48be6:	2210      	movs	r2, #16
   48be8:	2100      	movs	r1, #0
   48bea:	f7fc f915 	bl	44e18 <memset>
   48bee:	6065      	str	r5, [r4, #4]
}
   48bf0:	bd38      	pop	{r3, r4, r5, pc}

00048bf2 <k_work_submit_to_queue>:
{
   48bf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   48bf4:	9001      	str	r0, [sp, #4]
   48bf6:	4608      	mov	r0, r1
	__asm__ volatile(
   48bf8:	f04f 0320 	mov.w	r3, #32
   48bfc:	f3ef 8511 	mrs	r5, BASEPRI
   48c00:	f383 8812 	msr	BASEPRI_MAX, r3
   48c04:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   48c08:	a901      	add	r1, sp, #4
   48c0a:	f7f8 fe17 	bl	4183c <submit_to_queue_locked>
   48c0e:	4604      	mov	r4, r0
	__asm__ volatile(
   48c10:	f385 8811 	msr	BASEPRI, r5
   48c14:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   48c18:	2800      	cmp	r0, #0
   48c1a:	dd04      	ble.n	48c26 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   48c1c:	f7f9 f9ea 	bl	41ff4 <z_impl_k_is_preempt_thread>
   48c20:	b108      	cbz	r0, 48c26 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   48c22:	f7f9 f945 	bl	41eb0 <z_impl_k_yield>
}
   48c26:	4620      	mov	r0, r4
   48c28:	b003      	add	sp, #12
   48c2a:	bd30      	pop	{r4, r5, pc}

00048c2c <k_work_init_delayable>:
{
   48c2c:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   48c2e:	2230      	movs	r2, #48	; 0x30
{
   48c30:	4604      	mov	r4, r0
   48c32:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   48c34:	2100      	movs	r1, #0
   48c36:	f7fc f8ef 	bl	44e18 <memset>
   48c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
   48c3e:	6065      	str	r5, [r4, #4]
   48c40:	60e3      	str	r3, [r4, #12]
}
   48c42:	bd38      	pop	{r3, r4, r5, pc}

00048c44 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   48c44:	b538      	push	{r3, r4, r5, lr}
   48c46:	4604      	mov	r4, r0
	__asm__ volatile(
   48c48:	f04f 0320 	mov.w	r3, #32
   48c4c:	f3ef 8511 	mrs	r5, BASEPRI
   48c50:	f383 8812 	msr	BASEPRI_MAX, r3
   48c54:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   48c58:	f7ff ff5d 	bl	48b16 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   48c5c:	4620      	mov	r0, r4
   48c5e:	f7ff ff6f 	bl	48b40 <cancel_async_locked>
	__asm__ volatile(
   48c62:	f385 8811 	msr	BASEPRI, r5
   48c66:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   48c6a:	bd38      	pop	{r3, r4, r5, pc}

00048c6c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   48c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48c6e:	4604      	mov	r4, r0
   48c70:	460d      	mov	r5, r1
	__asm__ volatile(
   48c72:	f04f 0320 	mov.w	r3, #32
   48c76:	f3ef 8711 	mrs	r7, BASEPRI
   48c7a:	f383 8812 	msr	BASEPRI_MAX, r3
   48c7e:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   48c82:	68c3      	ldr	r3, [r0, #12]
   48c84:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   48c88:	2b00      	cmp	r3, #0
   48c8a:	bf14      	ite	ne
   48c8c:	2601      	movne	r6, #1
   48c8e:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   48c90:	d009      	beq.n	48ca6 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   48c92:	f7ff ff40 	bl	48b16 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   48c96:	4620      	mov	r0, r4
   48c98:	f7ff ff52 	bl	48b40 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   48c9c:	4629      	mov	r1, r5
   48c9e:	4620      	mov	r0, r4
   48ca0:	f7f8 fdae 	bl	41800 <cancel_sync_locked>
   48ca4:	4603      	mov	r3, r0
	__asm__ volatile(
   48ca6:	f387 8811 	msr	BASEPRI, r7
   48caa:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   48cae:	b13b      	cbz	r3, 48cc0 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   48cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   48cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   48cb8:	f105 0008 	add.w	r0, r5, #8
   48cbc:	f7f8 fcbe 	bl	4163c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   48cc0:	4630      	mov	r0, r6
   48cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00048cc4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   48cc4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   48cc8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   48cca:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   48ccc:	2300      	movs	r3, #0
	node->prev = NULL;
   48cce:	e9c0 3300 	strd	r3, r3, [r0]
}
   48cd2:	4770      	bx	lr

00048cd4 <unpend_thread_no_timeout>:
{
   48cd4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   48cd6:	f7ff fff5 	bl	48cc4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   48cda:	7b43      	ldrb	r3, [r0, #13]
   48cdc:	f023 0302 	bic.w	r3, r3, #2
   48ce0:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   48ce2:	2300      	movs	r3, #0
   48ce4:	6083      	str	r3, [r0, #8]
}
   48ce6:	bd08      	pop	{r3, pc}

00048ce8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   48ce8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   48cec:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   48cf0:	4283      	cmp	r3, r0
		return b2 - b1;
   48cf2:	bf14      	ite	ne
   48cf4:	1ac0      	subne	r0, r0, r3
	return 0;
   48cf6:	2000      	moveq	r0, #0
}
   48cf8:	4770      	bx	lr

00048cfa <z_unpend_thread_no_timeout>:
{
   48cfa:	b508      	push	{r3, lr}
	__asm__ volatile(
   48cfc:	f04f 0320 	mov.w	r3, #32
   48d00:	f3ef 8111 	mrs	r1, BASEPRI
   48d04:	f383 8812 	msr	BASEPRI_MAX, r3
   48d08:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   48d0c:	f7ff ffe2 	bl	48cd4 <unpend_thread_no_timeout>
	__asm__ volatile(
   48d10:	f381 8811 	msr	BASEPRI, r1
   48d14:	f3bf 8f6f 	isb	sy
}
   48d18:	bd08      	pop	{r3, pc}

00048d1a <z_unpend_thread>:
{
   48d1a:	b510      	push	{r4, lr}
	__asm__ volatile(
   48d1c:	f04f 0320 	mov.w	r3, #32
   48d20:	f3ef 8411 	mrs	r4, BASEPRI
   48d24:	f383 8812 	msr	BASEPRI_MAX, r3
   48d28:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   48d2c:	f7ff ffd2 	bl	48cd4 <unpend_thread_no_timeout>
	__asm__ volatile(
   48d30:	f384 8811 	msr	BASEPRI, r4
   48d34:	f3bf 8f6f 	isb	sy
}
   48d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   48d3c:	3018      	adds	r0, #24
   48d3e:	f000 b8d1 	b.w	48ee4 <z_abort_timeout>

00048d42 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   48d42:	4603      	mov	r3, r0
   48d44:	b920      	cbnz	r0, 48d50 <z_reschedule_irqlock+0xe>
   48d46:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   48d4a:	b90a      	cbnz	r2, 48d50 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   48d4c:	f7e1 b9f8 	b.w	2a140 <arch_swap>
   48d50:	f383 8811 	msr	BASEPRI, r3
   48d54:	f3bf 8f6f 	isb	sy
}
   48d58:	4770      	bx	lr

00048d5a <z_reschedule_unlocked>:
	__asm__ volatile(
   48d5a:	f04f 0320 	mov.w	r3, #32
   48d5e:	f3ef 8011 	mrs	r0, BASEPRI
   48d62:	f383 8812 	msr	BASEPRI_MAX, r3
   48d66:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   48d6a:	f7ff bfea 	b.w	48d42 <z_reschedule_irqlock>

00048d6e <z_priq_dumb_best>:
{
   48d6e:	4603      	mov	r3, r0
	return list->head == list;
   48d70:	6800      	ldr	r0, [r0, #0]
}
   48d72:	4283      	cmp	r3, r0
   48d74:	bf08      	it	eq
   48d76:	2000      	moveq	r0, #0
   48d78:	4770      	bx	lr

00048d7a <z_ready_thread>:
{
   48d7a:	b510      	push	{r4, lr}
   48d7c:	f04f 0320 	mov.w	r3, #32
   48d80:	f3ef 8411 	mrs	r4, BASEPRI
   48d84:	f383 8812 	msr	BASEPRI_MAX, r3
   48d88:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   48d8c:	f7f8 ff4c 	bl	41c28 <ready_thread>
	__asm__ volatile(
   48d90:	f384 8811 	msr	BASEPRI, r4
   48d94:	f3bf 8f6f 	isb	sy
}
   48d98:	bd10      	pop	{r4, pc}

00048d9a <z_thread_timeout>:
{
   48d9a:	b510      	push	{r4, lr}
   48d9c:	4601      	mov	r1, r0
	__asm__ volatile(
   48d9e:	f04f 0320 	mov.w	r3, #32
   48da2:	f3ef 8411 	mrs	r4, BASEPRI
   48da6:	f383 8812 	msr	BASEPRI_MAX, r3
   48daa:	f3bf 8f6f 	isb	sy
		if (!killed) {
   48dae:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   48db2:	f013 0f28 	tst.w	r3, #40	; 0x28
   48db6:	d10d      	bne.n	48dd4 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   48db8:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   48dbc:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   48dbe:	b10b      	cbz	r3, 48dc4 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   48dc0:	f7ff ff88 	bl	48cd4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   48dc4:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   48dc8:	f023 0314 	bic.w	r3, r3, #20
   48dcc:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   48dd0:	f7f8 ff2a 	bl	41c28 <ready_thread>
	__asm__ volatile(
   48dd4:	f384 8811 	msr	BASEPRI, r4
   48dd8:	f3bf 8f6f 	isb	sy
}
   48ddc:	bd10      	pop	{r4, pc}

00048dde <add_to_waitq_locked>:
{
   48dde:	b538      	push	{r3, r4, r5, lr}
   48de0:	4604      	mov	r4, r0
   48de2:	460d      	mov	r5, r1
	unready_thread(thread);
   48de4:	f7f8 ff72 	bl	41ccc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   48de8:	7b63      	ldrb	r3, [r4, #13]
   48dea:	f043 0302 	orr.w	r3, r3, #2
   48dee:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   48df0:	b18d      	cbz	r5, 48e16 <add_to_waitq_locked+0x38>
   48df2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   48df4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48df6:	429d      	cmp	r5, r3
   48df8:	d014      	beq.n	48e24 <add_to_waitq_locked+0x46>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48dfa:	b19b      	cbz	r3, 48e24 <add_to_waitq_locked+0x46>
	int32_t b1 = thread_1->base.prio;
   48dfc:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   48e00:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   48e04:	428a      	cmp	r2, r1
   48e06:	d007      	beq.n	48e18 <add_to_waitq_locked+0x3a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   48e08:	4291      	cmp	r1, r2
   48e0a:	dd05      	ble.n	48e18 <add_to_waitq_locked+0x3a>
	sys_dnode_t *const prev = successor->prev;
   48e0c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   48e0e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   48e12:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   48e14:	605c      	str	r4, [r3, #4]
}
   48e16:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   48e18:	6869      	ldr	r1, [r5, #4]
   48e1a:	428b      	cmp	r3, r1
   48e1c:	d002      	beq.n	48e24 <add_to_waitq_locked+0x46>
   48e1e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48e20:	2b00      	cmp	r3, #0
   48e22:	d1ed      	bne.n	48e00 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   48e24:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   48e26:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   48e2a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   48e2c:	606c      	str	r4, [r5, #4]
}
   48e2e:	e7f2      	b.n	48e16 <add_to_waitq_locked+0x38>

00048e30 <z_unpend1_no_timeout>:
{
   48e30:	b510      	push	{r4, lr}
	__asm__ volatile(
   48e32:	f04f 0320 	mov.w	r3, #32
   48e36:	f3ef 8411 	mrs	r4, BASEPRI
   48e3a:	f383 8812 	msr	BASEPRI_MAX, r3
   48e3e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   48e42:	f7ff ff94 	bl	48d6e <z_priq_dumb_best>
		if (thread != NULL) {
   48e46:	4601      	mov	r1, r0
   48e48:	b108      	cbz	r0, 48e4e <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   48e4a:	f7ff ff43 	bl	48cd4 <unpend_thread_no_timeout>
	__asm__ volatile(
   48e4e:	f384 8811 	msr	BASEPRI, r4
   48e52:	f3bf 8f6f 	isb	sy
}
   48e56:	4608      	mov	r0, r1
   48e58:	bd10      	pop	{r4, pc}

00048e5a <z_unpend_first_thread>:
{
   48e5a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   48e5c:	f04f 0320 	mov.w	r3, #32
   48e60:	f3ef 8511 	mrs	r5, BASEPRI
   48e64:	f383 8812 	msr	BASEPRI_MAX, r3
   48e68:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   48e6c:	f7ff ff7f 	bl	48d6e <z_priq_dumb_best>
		if (thread != NULL) {
   48e70:	4604      	mov	r4, r0
   48e72:	b120      	cbz	r0, 48e7e <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   48e74:	f7ff ff2e 	bl	48cd4 <unpend_thread_no_timeout>
   48e78:	3018      	adds	r0, #24
   48e7a:	f000 f833 	bl	48ee4 <z_abort_timeout>
	__asm__ volatile(
   48e7e:	f385 8811 	msr	BASEPRI, r5
   48e82:	f3bf 8f6f 	isb	sy
}
   48e86:	4620      	mov	r0, r4
   48e88:	bd38      	pop	{r3, r4, r5, pc}

00048e8a <z_unpend_all>:
{
   48e8a:	b538      	push	{r3, r4, r5, lr}
   48e8c:	4605      	mov	r5, r0
	int need_sched = 0;
   48e8e:	2000      	movs	r0, #0
	return list->head == list;
   48e90:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48e92:	42a5      	cmp	r5, r4
   48e94:	d000      	beq.n	48e98 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   48e96:	b904      	cbnz	r4, 48e9a <z_unpend_all+0x10>
}
   48e98:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   48e9a:	4620      	mov	r0, r4
   48e9c:	f7ff ff3d 	bl	48d1a <z_unpend_thread>
		z_ready_thread(thread);
   48ea0:	4620      	mov	r0, r4
   48ea2:	f7ff ff6a 	bl	48d7a <z_ready_thread>
		need_sched = 1;
   48ea6:	2001      	movs	r0, #1
   48ea8:	e7f2      	b.n	48e90 <z_unpend_all+0x6>

00048eaa <z_sched_wake>:
{
   48eaa:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   48eac:	f04f 0320 	mov.w	r3, #32
   48eb0:	f3ef 8511 	mrs	r5, BASEPRI
   48eb4:	f383 8812 	msr	BASEPRI_MAX, r3
   48eb8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   48ebc:	f7ff ff57 	bl	48d6e <z_priq_dumb_best>
		if (thread != NULL) {
   48ec0:	4604      	mov	r4, r0
   48ec2:	b150      	cbz	r0, 48eda <z_sched_wake+0x30>
   48ec4:	67c1      	str	r1, [r0, #124]	; 0x7c
   48ec6:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   48ec8:	f7ff ff04 	bl	48cd4 <unpend_thread_no_timeout>
   48ecc:	3018      	adds	r0, #24
   48ece:	f000 f809 	bl	48ee4 <z_abort_timeout>
			ready_thread(thread);
   48ed2:	4620      	mov	r0, r4
   48ed4:	f7f8 fea8 	bl	41c28 <ready_thread>
			ret = true;
   48ed8:	2001      	movs	r0, #1
	__asm__ volatile(
   48eda:	f385 8811 	msr	BASEPRI, r5
   48ede:	f3bf 8f6f 	isb	sy
}
   48ee2:	bd38      	pop	{r3, r4, r5, pc}

00048ee4 <z_abort_timeout>:
{
   48ee4:	b510      	push	{r4, lr}
	__asm__ volatile(
   48ee6:	f04f 0220 	mov.w	r2, #32
   48eea:	f3ef 8411 	mrs	r4, BASEPRI
   48eee:	f382 8812 	msr	BASEPRI_MAX, r2
   48ef2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   48ef6:	6803      	ldr	r3, [r0, #0]
   48ef8:	b13b      	cbz	r3, 48f0a <z_abort_timeout+0x26>
			remove_timeout(to);
   48efa:	f7f9 f939 	bl	42170 <remove_timeout>
			ret = 0;
   48efe:	2000      	movs	r0, #0
	__asm__ volatile(
   48f00:	f384 8811 	msr	BASEPRI, r4
   48f04:	f3bf 8f6f 	isb	sy
}
   48f08:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   48f0a:	f06f 0015 	mvn.w	r0, #21
   48f0e:	e7f7      	b.n	48f00 <z_abort_timeout+0x1c>

00048f10 <z_get_next_timeout_expiry>:
{
   48f10:	b510      	push	{r4, lr}
	__asm__ volatile(
   48f12:	f04f 0320 	mov.w	r3, #32
   48f16:	f3ef 8411 	mrs	r4, BASEPRI
   48f1a:	f383 8812 	msr	BASEPRI_MAX, r3
   48f1e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   48f22:	f7f9 f8ff 	bl	42124 <next_timeout>
	__asm__ volatile(
   48f26:	f384 8811 	msr	BASEPRI, r4
   48f2a:	f3bf 8f6f 	isb	sy
}
   48f2e:	bd10      	pop	{r4, pc}

00048f30 <z_set_timeout_expiry>:
{
   48f30:	b570      	push	{r4, r5, r6, lr}
   48f32:	4604      	mov	r4, r0
   48f34:	460d      	mov	r5, r1
	__asm__ volatile(
   48f36:	f04f 0320 	mov.w	r3, #32
   48f3a:	f3ef 8611 	mrs	r6, BASEPRI
   48f3e:	f383 8812 	msr	BASEPRI_MAX, r3
   48f42:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   48f46:	f7f9 f8ed 	bl	42124 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   48f4a:	2801      	cmp	r0, #1
   48f4c:	dd05      	ble.n	48f5a <z_set_timeout_expiry+0x2a>
   48f4e:	42a0      	cmp	r0, r4
   48f50:	db03      	blt.n	48f5a <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   48f52:	4629      	mov	r1, r5
   48f54:	4620      	mov	r0, r4
   48f56:	f7f6 f8ff 	bl	3f158 <sys_clock_set_timeout>
	__asm__ volatile(
   48f5a:	f386 8811 	msr	BASEPRI, r6
   48f5e:	f3bf 8f6f 	isb	sy
}
   48f62:	bd70      	pop	{r4, r5, r6, pc}

00048f64 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   48f64:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   48f66:	f7f9 f9f3 	bl	42350 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   48f6a:	bd08      	pop	{r3, pc}

00048f6c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   48f6c:	f7f9 b9f0 	b.w	42350 <sys_clock_tick_get>

00048f70 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   48f70:	b108      	cbz	r0, 48f76 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   48f72:	f7e1 bb8d 	b.w	2a690 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   48f76:	4770      	bx	lr

00048f78 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48f78:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   48f7c:	bf08      	it	eq
   48f7e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   48f82:	b538      	push	{r3, r4, r5, lr}
   48f84:	4605      	mov	r5, r0
   48f86:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48f88:	d01d      	beq.n	48fc6 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   48f8a:	ea51 0300 	orrs.w	r3, r1, r0
   48f8e:	d103      	bne.n	48f98 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   48f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   48f94:	f7f9 b9dc 	b.w	42350 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   48f98:	f06f 0301 	mvn.w	r3, #1
   48f9c:	1a18      	subs	r0, r3, r0
   48f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   48fa2:	eb63 0101 	sbc.w	r1, r3, r1
   48fa6:	2900      	cmp	r1, #0
   48fa8:	da0c      	bge.n	48fc4 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   48faa:	f7f9 f9d1 	bl	42350 <sys_clock_tick_get>
   48fae:	2d01      	cmp	r5, #1
   48fb0:	4622      	mov	r2, r4
   48fb2:	f174 0400 	sbcs.w	r4, r4, #0
   48fb6:	462b      	mov	r3, r5
   48fb8:	bfbc      	itt	lt
   48fba:	2301      	movlt	r3, #1
   48fbc:	2200      	movlt	r2, #0
   48fbe:	1818      	adds	r0, r3, r0
   48fc0:	eb41 0102 	adc.w	r1, r1, r2
}
   48fc4:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   48fc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   48fca:	4601      	mov	r1, r0
   48fcc:	e7fa      	b.n	48fc4 <sys_clock_timeout_end_calc+0x4c>

00048fce <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   48fce:	b510      	push	{r4, lr}
   48fd0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   48fd2:	f7ff ff87 	bl	48ee4 <z_abort_timeout>

	if (inactive) {
   48fd6:	b9b0      	cbnz	r0, 49006 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   48fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   48fda:	b10b      	cbz	r3, 48fe0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   48fdc:	4620      	mov	r0, r4
   48fde:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   48fe0:	f104 0018 	add.w	r0, r4, #24
   48fe4:	f7ff ff24 	bl	48e30 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   48fe8:	b168      	cbz	r0, 49006 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   48fea:	f7ff fec6 	bl	48d7a <z_ready_thread>
	__asm__ volatile(
   48fee:	f04f 0320 	mov.w	r3, #32
   48ff2:	f3ef 8011 	mrs	r0, BASEPRI
   48ff6:	f383 8812 	msr	BASEPRI_MAX, r3
   48ffa:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   48ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   49002:	f7ff be9e 	b.w	48d42 <z_reschedule_irqlock>
   49006:	bd10      	pop	{r4, pc}

00049008 <add_event>:
{
   49008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4900a:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   4900c:	e9d0 1300 	ldrd	r1, r3, [r0]
   49010:	4288      	cmp	r0, r1
   49012:	4604      	mov	r4, r0
   49014:	d00d      	beq.n	49032 <add_event+0x2a>
	if ((pending == NULL) ||
   49016:	b163      	cbz	r3, 49032 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   49018:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   4901a:	b100      	cbz	r0, 4901e <add_event+0x16>
   4901c:	3860      	subs	r0, #96	; 0x60
   4901e:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   49022:	4639      	mov	r1, r7
   49024:	f7ff fe60 	bl	48ce8 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   49028:	2800      	cmp	r0, #0
   4902a:	dc02      	bgt.n	49032 <add_event+0x2a>
	return list->head == list;
   4902c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4902e:	42b4      	cmp	r4, r6
   49030:	d109      	bne.n	49046 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   49032:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   49034:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   49038:	601d      	str	r5, [r3, #0]
	list->tail = node;
   4903a:	6065      	str	r5, [r4, #4]
}
   4903c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   4903e:	6863      	ldr	r3, [r4, #4]
   49040:	42b3      	cmp	r3, r6
   49042:	d0f6      	beq.n	49032 <add_event+0x2a>
   49044:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   49046:	2e00      	cmp	r6, #0
   49048:	d0f3      	beq.n	49032 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   4904a:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   4904c:	b101      	cbz	r1, 49050 <add_event+0x48>
   4904e:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   49050:	4638      	mov	r0, r7
   49052:	f7ff fe49 	bl	48ce8 <z_sched_prio_cmp>
   49056:	2800      	cmp	r0, #0
   49058:	ddf1      	ble.n	4903e <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   4905a:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   4905c:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   49060:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   49062:	6075      	str	r5, [r6, #4]
			return;
   49064:	e7ea      	b.n	4903c <add_event+0x34>

00049066 <register_events>:
{
   49066:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   4906a:	2500      	movs	r5, #0
{
   4906c:	468b      	mov	fp, r1
   4906e:	4614      	mov	r4, r2
   49070:	461f      	mov	r7, r3
   49072:	4682      	mov	sl, r0
	int events_registered = 0;
   49074:	462e      	mov	r6, r5
	event->poller = NULL;
   49076:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   49078:	455d      	cmp	r5, fp
   4907a:	db02      	blt.n	49082 <register_events+0x1c>
}
   4907c:	4630      	mov	r0, r6
   4907e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49082:	f04f 0320 	mov.w	r3, #32
   49086:	f3ef 8911 	mrs	r9, BASEPRI
   4908a:	f383 8812 	msr	BASEPRI_MAX, r3
   4908e:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   49092:	f89a 300d 	ldrb.w	r3, [sl, #13]
   49096:	f003 031f 	and.w	r3, r3, #31
   4909a:	3b01      	subs	r3, #1
   4909c:	2b07      	cmp	r3, #7
   4909e:	d80f      	bhi.n	490c0 <register_events+0x5a>
   490a0:	e8df f003 	tbb	[pc, r3]
   490a4:	0a0e041e 	.word	0x0a0e041e
   490a8:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   490ac:	f8da 3010 	ldr.w	r3, [sl, #16]
   490b0:	689b      	ldr	r3, [r3, #8]
   490b2:	b12b      	cbz	r3, 490c0 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   490b4:	2302      	movs	r3, #2
   490b6:	e020      	b.n	490fa <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   490b8:	f8da 3010 	ldr.w	r3, [sl, #16]
   490bc:	681b      	ldr	r3, [r3, #0]
   490be:	bb8b      	cbnz	r3, 49124 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   490c0:	bb47      	cbnz	r7, 49114 <register_events+0xae>
   490c2:	7823      	ldrb	r3, [r4, #0]
   490c4:	b333      	cbz	r3, 49114 <register_events+0xae>
	switch (event->type) {
   490c6:	f89a 300d 	ldrb.w	r3, [sl, #13]
   490ca:	f003 031f 	and.w	r3, r3, #31
   490ce:	3b01      	subs	r3, #1
   490d0:	2b07      	cmp	r3, #7
   490d2:	d830      	bhi.n	49136 <register_events+0xd0>
   490d4:	e8df f003 	tbb	[pc, r3]
   490d8:	282f2833 	.word	0x282f2833
   490dc:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   490e0:	f8da 3010 	ldr.w	r3, [sl, #16]
   490e4:	689b      	ldr	r3, [r3, #8]
   490e6:	2b00      	cmp	r3, #0
   490e8:	d0ea      	beq.n	490c0 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   490ea:	2301      	movs	r3, #1
   490ec:	e005      	b.n	490fa <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   490ee:	f8da 3010 	ldr.w	r3, [sl, #16]
   490f2:	6a1b      	ldr	r3, [r3, #32]
   490f4:	2b00      	cmp	r3, #0
   490f6:	d0e3      	beq.n	490c0 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   490f8:	2310      	movs	r3, #16
	event->state |= state;
   490fa:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   490fe:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   49102:	f3c2 3145 	ubfx	r1, r2, #13, #6
   49106:	430b      	orrs	r3, r1
   49108:	f363 3252 	bfi	r2, r3, #13, #6
   4910c:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   49110:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   49114:	f389 8811 	msr	BASEPRI, r9
   49118:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   4911c:	3501      	adds	r5, #1
   4911e:	f10a 0a14 	add.w	sl, sl, #20
   49122:	e7a9      	b.n	49078 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   49124:	2304      	movs	r3, #4
   49126:	e7e8      	b.n	490fa <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   49128:	f8da 0010 	ldr.w	r0, [sl, #16]
   4912c:	4622      	mov	r2, r4
   4912e:	4651      	mov	r1, sl
   49130:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   49132:	f7ff ff69 	bl	49008 <add_event>
	event->poller = poller;
   49136:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   4913a:	3601      	adds	r6, #1
   4913c:	e7ea      	b.n	49114 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   4913e:	f8da 0010 	ldr.w	r0, [sl, #16]
   49142:	4622      	mov	r2, r4
   49144:	4651      	mov	r1, sl
   49146:	e7f4      	b.n	49132 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   49148:	f8da 0010 	ldr.w	r0, [sl, #16]
   4914c:	4622      	mov	r2, r4
   4914e:	4651      	mov	r1, sl
   49150:	3024      	adds	r0, #36	; 0x24
   49152:	e7ee      	b.n	49132 <register_events+0xcc>

00049154 <signal_poll_event>:
{
   49154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   49158:	6884      	ldr	r4, [r0, #8]
{
   4915a:	4605      	mov	r5, r0
   4915c:	460e      	mov	r6, r1
	if (poller != NULL) {
   4915e:	b144      	cbz	r4, 49172 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   49160:	7863      	ldrb	r3, [r4, #1]
   49162:	2b01      	cmp	r3, #1
   49164:	d136      	bne.n	491d4 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   49166:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   4916a:	f013 0302 	ands.w	r3, r3, #2
   4916e:	d10a      	bne.n	49186 <signal_poll_event+0x32>
		poller->is_polling = false;
   49170:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   49172:	68eb      	ldr	r3, [r5, #12]
   49174:	f3c3 3245 	ubfx	r2, r3, #13, #6
   49178:	4316      	orrs	r6, r2
	event->poller = NULL;
   4917a:	2000      	movs	r0, #0
	event->state |= state;
   4917c:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   49180:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   49182:	60eb      	str	r3, [r5, #12]
	return retcode;
   49184:	e00b      	b.n	4919e <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   49186:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   4918a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   4918e:	bf08      	it	eq
   49190:	f112 0f02 	cmneq.w	r2, #2
   49194:	d105      	bne.n	491a2 <signal_poll_event+0x4e>
		poller->is_polling = false;
   49196:	2300      	movs	r3, #0
   49198:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   4919a:	f06f 000a 	mvn.w	r0, #10
}
   4919e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   491a2:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   491a6:	4640      	mov	r0, r8
   491a8:	f7ff fdb7 	bl	48d1a <z_unpend_thread>
	arch_thread_return_value_set(thread,
   491ac:	2e08      	cmp	r6, #8
   491ae:	bf0c      	ite	eq
   491b0:	f06f 0303 	mvneq.w	r3, #3
   491b4:	2300      	movne	r3, #0
   491b6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   491b8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   491bc:	06db      	lsls	r3, r3, #27
   491be:	d102      	bne.n	491c6 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   491c0:	f854 7c48 	ldr.w	r7, [r4, #-72]
   491c4:	b10f      	cbz	r7, 491ca <signal_poll_event+0x76>
		poller->is_polling = false;
   491c6:	2300      	movs	r3, #0
   491c8:	e7d2      	b.n	49170 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   491ca:	4640      	mov	r0, r8
   491cc:	f7ff fdd5 	bl	48d7a <z_ready_thread>
		poller->is_polling = false;
   491d0:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   491d2:	e7ce      	b.n	49172 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   491d4:	2b02      	cmp	r3, #2
   491d6:	d1f6      	bne.n	491c6 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   491d8:	7823      	ldrb	r3, [r4, #0]
   491da:	2b00      	cmp	r3, #0
   491dc:	d0c9      	beq.n	49172 <signal_poll_event+0x1e>
   491de:	f854 7c04 	ldr.w	r7, [r4, #-4]
   491e2:	2f00      	cmp	r7, #0
   491e4:	d0f4      	beq.n	491d0 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   491e6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   491ea:	f1a4 0914 	sub.w	r9, r4, #20
   491ee:	f104 0014 	add.w	r0, r4, #20
   491f2:	f7ff fe77 	bl	48ee4 <z_abort_timeout>
		twork->poll_result = 0;
   491f6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   491fa:	4649      	mov	r1, r9
   491fc:	4638      	mov	r0, r7
   491fe:	f7ff fcf8 	bl	48bf2 <k_work_submit_to_queue>
		poller->is_polling = false;
   49202:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   49206:	e7b4      	b.n	49172 <signal_poll_event+0x1e>

00049208 <clear_event_registrations>:
	while (num_events--) {
   49208:	2314      	movs	r3, #20
{
   4920a:	b5f0      	push	{r4, r5, r6, r7, lr}
   4920c:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   49210:	2400      	movs	r4, #0
	switch (event->type) {
   49212:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   49216:	b901      	cbnz	r1, 4921a <clear_event_registrations+0x12>
}
   49218:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   4921a:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   4921e:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   49222:	f003 031f 	and.w	r3, r3, #31
   49226:	2b08      	cmp	r3, #8
   49228:	f1a0 0714 	sub.w	r7, r0, #20
   4922c:	d80c      	bhi.n	49248 <clear_event_registrations+0x40>
   4922e:	fa26 f303 	lsr.w	r3, r6, r3
   49232:	07db      	lsls	r3, r3, #31
   49234:	d508      	bpl.n	49248 <clear_event_registrations+0x40>
	return node->next != NULL;
   49236:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   4923a:	b12b      	cbz	r3, 49248 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   4923c:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   49240:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   49242:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   49244:	e940 4405 	strd	r4, r4, [r0, #-20]
   49248:	f382 8811 	msr	BASEPRI, r2
   4924c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   49250:	f04f 0320 	mov.w	r3, #32
   49254:	f3ef 8211 	mrs	r2, BASEPRI
   49258:	f383 8812 	msr	BASEPRI_MAX, r3
   4925c:	f3bf 8f6f 	isb	sy
   49260:	3901      	subs	r1, #1
   49262:	4638      	mov	r0, r7
   49264:	e7d7      	b.n	49216 <clear_event_registrations+0xe>

00049266 <k_poll_event_init>:
{
   49266:	b510      	push	{r4, lr}
	event->type = type;
   49268:	04d2      	lsls	r2, r2, #19
   4926a:	0209      	lsls	r1, r1, #8
   4926c:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   49270:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   49274:	430a      	orrs	r2, r1
   49276:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   49278:	2400      	movs	r4, #0
	event->type = type;
   4927a:	430a      	orrs	r2, r1
	event->obj = obj;
   4927c:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   49280:	6084      	str	r4, [r0, #8]
}
   49282:	bd10      	pop	{r4, pc}

00049284 <z_handle_obj_poll_events>:
{
   49284:	4603      	mov	r3, r0
	return list->head == list;
   49286:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   49288:	4283      	cmp	r3, r0
   4928a:	d008      	beq.n	4929e <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   4928c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   49290:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   49292:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   49294:	2300      	movs	r3, #0
	node->prev = NULL;
   49296:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   4929a:	f7ff bf5b 	b.w	49154 <signal_poll_event>
}
   4929e:	4770      	bx	lr

000492a0 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   492a0:	3204      	adds	r2, #4
{
   492a2:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   492a4:	4604      	mov	r4, r0
   492a6:	d208      	bcs.n	492ba <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   492a8:	2600      	movs	r6, #0
   492aa:	2700      	movs	r7, #0
   492ac:	e9cd 6700 	strd	r6, r7, [sp]
   492b0:	f041 0104 	orr.w	r1, r1, #4
   492b4:	f7ff fa9e 	bl	487f4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   492b8:	b910      	cbnz	r0, 492c0 <z_heap_aligned_alloc+0x20>
		return NULL;
   492ba:	2000      	movs	r0, #0
}
   492bc:	b002      	add	sp, #8
   492be:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   492c0:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   492c4:	e7fa      	b.n	492bc <z_heap_aligned_alloc+0x1c>

000492c6 <k_free>:
	if (ptr != NULL) {
   492c6:	b120      	cbz	r0, 492d2 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   492c8:	1f01      	subs	r1, r0, #4
   492ca:	f850 0c04 	ldr.w	r0, [r0, #-4]
   492ce:	f7ff bad2 	b.w	48876 <k_heap_free>
}
   492d2:	4770      	bx	lr

000492d4 <k_malloc>:
{
   492d4:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   492d6:	2004      	movs	r0, #4
   492d8:	f7f9 b968 	b.w	425ac <k_aligned_alloc>

000492dc <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   492dc:	4770      	bx	lr
	...

000492e0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   492e0:	f7f5 bf90 	b.w	3f204 <SystemInit>
