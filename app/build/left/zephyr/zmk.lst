
zmk.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00026000 <_vector_table>:
   26000:	70 94 00 20 bd ca 02 00 11 b7 04 00 91 ca 02 00     p.. ............
   26010:	91 ca 02 00 91 ca 02 00 91 ca 02 00 00 00 00 00     ................
	...
   2602c:	05 c8 02 00 91 ca 02 00 00 00 00 00 bd c7 02 00     ................
   2603c:	91 ca 02 00                                         ....

00026040 <_irq_vector_table>:
   26040:	81 c8 02 00 11 fa 03 00 81 c8 02 00 81 c8 02 00     ................
   26050:	81 c8 02 00 81 c8 02 00 81 c8 02 00 81 c8 02 00     ................
   26060:	81 c8 02 00 81 c8 02 00 81 c8 02 00 81 c8 02 00     ................
   26070:	81 c8 02 00 81 c8 02 00 81 c8 02 00 81 c8 02 00     ................
   26080:	81 c8 02 00 81 c8 02 00 81 c8 02 00 81 c8 02 00     ................
   26090:	81 c8 02 00 81 c8 02 00 81 c8 02 00 81 c8 02 00     ................
   260a0:	81 c8 02 00 81 c8 02 00 81 c8 02 00 81 c8 02 00     ................
   260b0:	81 c8 02 00 81 c8 02 00 81 c8 02 00 81 c8 02 00     ................
   260c0:	81 c8 02 00 81 c8 02 00 81 c8 02 00 81 c8 02 00     ................
   260d0:	81 c8 02 00 81 c8 02 00 81 c8 02 00 81 c8 02 00     ................
   260e0:	81 c8 02 00 81 c8 02 00 81 c8 02 00 81 c8 02 00     ................
   260f0:	81 c8 02 00 81 c8 02 00 81 c8 02 00 81 c8 02 00     ................

Disassembly of section text:

00026100 <__aeabi_uldivmod>:
   26100:	b953      	cbnz	r3, 26118 <__aeabi_uldivmod+0x18>
   26102:	b94a      	cbnz	r2, 26118 <__aeabi_uldivmod+0x18>
   26104:	2900      	cmp	r1, #0
   26106:	bf08      	it	eq
   26108:	2800      	cmpeq	r0, #0
   2610a:	bf1c      	itt	ne
   2610c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   26110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26114:	f000 b80c 	b.w	26130 <__aeabi_idiv0>
   26118:	f1ad 0c08 	sub.w	ip, sp, #8
   2611c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   26120:	f022 fd70 	bl	48c04 <__udivmoddi4>
   26124:	f8dd e004 	ldr.w	lr, [sp, #4]
   26128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2612c:	b004      	add	sp, #16
   2612e:	4770      	bx	lr

00026130 <__aeabi_idiv0>:
   26130:	4770      	bx	lr
   26132:	bf00      	nop
   26134:	0000      	movs	r0, r0
	...

00026138 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   26138:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   2613a:	4d40      	ldr	r5, [pc, #256]	; (2623c <bt_init+0x104>)
   2613c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   26140:	6899      	ldr	r1, [r3, #8]
   26142:	f011 0101 	ands.w	r1, r1, #1
   26146:	d123      	bne.n	26190 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   26148:	aa01      	add	r2, sp, #4
   2614a:	f640 4003 	movw	r0, #3075	; 0xc03
   2614e:	f007 fb3d 	bl	2d7cc <bt_hci_cmd_send_sync>
		if (err) {
   26152:	4604      	mov	r4, r0
   26154:	2800      	cmp	r0, #0
   26156:	d16e      	bne.n	26236 <bt_init+0xfe>
		hci_reset_complete(rsp);
   26158:	9c01      	ldr	r4, [sp, #4]
	uint8_t status = buf->data[0];
   2615a:	68a3      	ldr	r3, [r4, #8]
	if (status) {
   2615c:	781b      	ldrb	r3, [r3, #0]
   2615e:	b9a3      	cbnz	r3, 2618a <bt_init+0x52>
		bt_scan_reset();
   26160:	f008 fdc4 	bl	2ecec <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26164:	f3bf 8f5b 	dmb	ish
   26168:	462b      	mov	r3, r5
   2616a:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   2616e:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   26172:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26176:	f3bf 8f5b 	dmb	ish
   2617a:	e853 1f00 	ldrex	r1, [r3]
   2617e:	e843 2000 	strex	r0, r2, [r3]
   26182:	2800      	cmp	r0, #0
   26184:	d1f9      	bne.n	2617a <bt_init+0x42>
   26186:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   2618a:	4620      	mov	r0, r4
   2618c:	f01d f9a4 	bl	434d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   26190:	aa01      	add	r2, sp, #4
   26192:	2100      	movs	r1, #0
   26194:	f241 0003 	movw	r0, #4099	; 0x1003
   26198:	f007 fb18 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   2619c:	4604      	mov	r4, r0
   2619e:	2800      	cmp	r0, #0
   261a0:	d149      	bne.n	26236 <bt_init+0xfe>
	read_local_features_complete(rsp);
   261a2:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   261a4:	4826      	ldr	r0, [pc, #152]	; (26240 <bt_init+0x108>)
   261a6:	68b1      	ldr	r1, [r6, #8]
   261a8:	2208      	movs	r2, #8
   261aa:	3101      	adds	r1, #1
   261ac:	f025 fb6d 	bl	4b88a <memcpy>
	net_buf_unref(rsp);
   261b0:	4630      	mov	r0, r6
   261b2:	f01d f991 	bl	434d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   261b6:	4621      	mov	r1, r4
   261b8:	aa01      	add	r2, sp, #4
   261ba:	f241 0001 	movw	r0, #4097	; 0x1001
   261be:	f007 fb05 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   261c2:	4604      	mov	r4, r0
   261c4:	2800      	cmp	r0, #0
   261c6:	d136      	bne.n	26236 <bt_init+0xfe>
	read_local_ver_complete(rsp);
   261c8:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   261ca:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   261cc:	785a      	ldrb	r2, [r3, #1]
   261ce:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   261d2:	78d9      	ldrb	r1, [r3, #3]
   261d4:	789a      	ldrb	r2, [r3, #2]
   261d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   261da:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   261de:	791a      	ldrb	r2, [r3, #4]
   261e0:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   261e4:	7a19      	ldrb	r1, [r3, #8]
   261e6:	79da      	ldrb	r2, [r3, #7]
   261e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   261ec:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   261f0:	795a      	ldrb	r2, [r3, #5]
   261f2:	799b      	ldrb	r3, [r3, #6]
   261f4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   261f8:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   261fc:	f01d f96c 	bl	434d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   26200:	4621      	mov	r1, r4
   26202:	aa01      	add	r2, sp, #4
   26204:	f241 0002 	movw	r0, #4098	; 0x1002
   26208:	f007 fae0 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   2620c:	4604      	mov	r4, r0
   2620e:	b990      	cbnz	r0, 26236 <bt_init+0xfe>
	read_supported_commands_complete(rsp);
   26210:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   26212:	480c      	ldr	r0, [pc, #48]	; (26244 <bt_init+0x10c>)
   26214:	68b1      	ldr	r1, [r6, #8]
   26216:	2240      	movs	r2, #64	; 0x40
   26218:	3101      	adds	r1, #1
   2621a:	f025 fb36 	bl	4b88a <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   2621e:	4809      	ldr	r0, [pc, #36]	; (26244 <bt_init+0x10c>)
   26220:	f025 fbe7 	bl	4b9f2 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   26224:	4630      	mov	r0, r6
   26226:	f01d f957 	bl	434d8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   2622a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   2622e:	065a      	lsls	r2, r3, #25
   26230:	d40a      	bmi.n	26248 <bt_init+0x110>
		return -ENODEV;
   26232:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   26236:	4620      	mov	r0, r4
   26238:	b002      	add	sp, #8
   2623a:	bd70      	pop	{r4, r5, r6, pc}
   2623c:	20000000 	.word	0x20000000
   26240:	20000070 	.word	0x20000070
   26244:	20000078 	.word	0x20000078
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   26248:	4621      	mov	r1, r4
   2624a:	aa01      	add	r2, sp, #4
   2624c:	f242 0003 	movw	r0, #8195	; 0x2003
   26250:	f007 fabc 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   26254:	4604      	mov	r4, r0
   26256:	2800      	cmp	r0, #0
   26258:	d1ed      	bne.n	26236 <bt_init+0xfe>
	read_le_features_complete(rsp);
   2625a:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   2625c:	48ba      	ldr	r0, [pc, #744]	; (26548 <bt_init+0x410>)
   2625e:	68b1      	ldr	r1, [r6, #8]
   26260:	2208      	movs	r2, #8
   26262:	3101      	adds	r1, #1
   26264:	f025 fb11 	bl	4b88a <memcpy>
	net_buf_unref(rsp);
   26268:	4630      	mov	r0, r6
   2626a:	f01d f935 	bl	434d8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   2626e:	4621      	mov	r1, r4
   26270:	aa01      	add	r2, sp, #4
   26272:	f242 0002 	movw	r0, #8194	; 0x2002
   26276:	f007 faa9 	bl	2d7cc <bt_hci_cmd_send_sync>
		if (err) {
   2627a:	4604      	mov	r4, r0
   2627c:	2800      	cmp	r0, #0
   2627e:	d1da      	bne.n	26236 <bt_init+0xfe>
		le_read_buffer_size_complete(rsp);
   26280:	9c01      	ldr	r4, [sp, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   26282:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   26284:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   26288:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   2628c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   2628e:	b121      	cbz	r1, 2629a <bt_init+0x162>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   26290:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   26292:	48ae      	ldr	r0, [pc, #696]	; (2654c <bt_init+0x414>)
   26294:	4611      	mov	r1, r2
   26296:	f02a fa25 	bl	506e4 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   2629a:	4620      	mov	r0, r4
   2629c:	f01d f91c 	bl	434d8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   262a0:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   262a4:	f016 0620 	ands.w	r6, r6, #32
   262a8:	f000 8121 	beq.w	264ee <bt_init+0x3b6>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   262ac:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   262b0:	071b      	lsls	r3, r3, #28
   262b2:	d512      	bpl.n	262da <bt_init+0x1a2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   262b4:	aa01      	add	r2, sp, #4
   262b6:	2100      	movs	r1, #0
   262b8:	f242 001c 	movw	r0, #8220	; 0x201c
   262bc:	f007 fa86 	bl	2d7cc <bt_hci_cmd_send_sync>
		if (err) {
   262c0:	4604      	mov	r4, r0
   262c2:	2800      	cmp	r0, #0
   262c4:	d1b7      	bne.n	26236 <bt_init+0xfe>
		le_read_supp_states_complete(rsp);
   262c6:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   262c8:	6883      	ldr	r3, [r0, #8]
   262ca:	f8d3 2001 	ldr.w	r2, [r3, #1]
   262ce:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   262d2:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   262d6:	f01d f8ff 	bl	434d8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   262da:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   262de:	069e      	lsls	r6, r3, #26
   262e0:	d523      	bpl.n	2632a <bt_init+0x1f2>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   262e2:	f10d 0102 	add.w	r1, sp, #2
   262e6:	4668      	mov	r0, sp
   262e8:	f025 fe0a 	bl	4bf00 <hci_le_read_max_data_len>
		if (err) {
   262ec:	4604      	mov	r4, r0
   262ee:	2800      	cmp	r0, #0
   262f0:	d1a1      	bne.n	26236 <bt_init+0xfe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   262f2:	2104      	movs	r1, #4
   262f4:	f242 0024 	movw	r0, #8228	; 0x2024
   262f8:	f007 fa0c 	bl	2d714 <bt_hci_cmd_create>
		if (!buf) {
   262fc:	4606      	mov	r6, r0
   262fe:	2800      	cmp	r0, #0
   26300:	f000 80fc 	beq.w	264fc <bt_init+0x3c4>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   26304:	2104      	movs	r1, #4
   26306:	3008      	adds	r0, #8
   26308:	f029 fa8e 	bl	4f828 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   2630c:	f8bd 3000 	ldrh.w	r3, [sp]
   26310:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   26312:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   26316:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   26318:	4622      	mov	r2, r4
   2631a:	4631      	mov	r1, r6
   2631c:	f242 0024 	movw	r0, #8228	; 0x2024
   26320:	f007 fa54 	bl	2d7cc <bt_hci_cmd_send_sync>
		if (err) {
   26324:	4604      	mov	r4, r0
   26326:	2800      	cmp	r0, #0
   26328:	d185      	bne.n	26236 <bt_init+0xfe>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   2632a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   2632e:	065c      	lsls	r4, r3, #25
   26330:	d510      	bpl.n	26354 <bt_init+0x21c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   26332:	aa01      	add	r2, sp, #4
   26334:	2100      	movs	r1, #0
   26336:	f242 002a 	movw	r0, #8234	; 0x202a
   2633a:	f007 fa47 	bl	2d7cc <bt_hci_cmd_send_sync>
		if (err) {
   2633e:	4604      	mov	r4, r0
   26340:	2800      	cmp	r0, #0
   26342:	f47f af78 	bne.w	26236 <bt_init+0xfe>
		le_read_resolving_list_size_complete(rsp);
   26346:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   26348:	6883      	ldr	r3, [r0, #8]
   2634a:	785b      	ldrb	r3, [r3, #1]
   2634c:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   26350:	f01d f8c2 	bl	434d8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   26354:	2108      	movs	r1, #8
   26356:	f242 0001 	movw	r0, #8193	; 0x2001
   2635a:	f007 f9db 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   2635e:	4604      	mov	r4, r0
   26360:	2800      	cmp	r0, #0
   26362:	f000 80cb 	beq.w	264fc <bt_init+0x3c4>
   26366:	2108      	movs	r1, #8
   26368:	4408      	add	r0, r1
   2636a:	f029 fa5d 	bl	4f828 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   2636e:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   26372:	f011 0f40 	tst.w	r1, #64	; 0x40
   26376:	4602      	mov	r2, r0
   26378:	f240 2302 	movw	r3, #514	; 0x202
   2637c:	bf08      	it	eq
   2637e:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   26380:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   26382:	bf4c      	ite	mi
   26384:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   26388:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   2638c:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   2638e:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   26392:	bf48      	it	mi
   26394:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   26398:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   2639c:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   263a0:	bf18      	it	ne
   263a2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   263a6:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   263aa:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   263ac:	bf48      	it	mi
   263ae:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   263b2:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   263b4:	bf08      	it	eq
   263b6:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   263ba:	2100      	movs	r1, #0
   263bc:	f025 fc5c 	bl	4bc78 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   263c0:	4621      	mov	r1, r4
   263c2:	2200      	movs	r2, #0
   263c4:	f242 0001 	movw	r0, #8193	; 0x2001
   263c8:	f007 fa00 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   263cc:	4604      	mov	r4, r0
   263ce:	2800      	cmp	r0, #0
   263d0:	f47f af31 	bne.w	26236 <bt_init+0xfe>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   263d4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   263d8:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   263dc:	0698      	lsls	r0, r3, #26
   263de:	f100 80a2 	bmi.w	26526 <bt_init+0x3ee>
	if (bt_dev.le.acl_mtu) {
   263e2:	b9d9      	cbnz	r1, 2641c <bt_init+0x2e4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   263e4:	aa01      	add	r2, sp, #4
   263e6:	f241 0005 	movw	r0, #4101	; 0x1005
   263ea:	f007 f9ef 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   263ee:	4604      	mov	r4, r0
   263f0:	2800      	cmp	r0, #0
   263f2:	f47f af20 	bne.w	26236 <bt_init+0xfe>
	if (bt_dev.le.acl_mtu) {
   263f6:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   263fa:	9c01      	ldr	r4, [sp, #4]
	if (bt_dev.le.acl_mtu) {
   263fc:	b95b      	cbnz	r3, 26416 <bt_init+0x2de>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   263fe:	68a3      	ldr	r3, [r4, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   26400:	785a      	ldrb	r2, [r3, #1]
   26402:	7899      	ldrb	r1, [r3, #2]
   26404:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   26408:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   2640c:	889a      	ldrh	r2, [r3, #4]
   2640e:	484f      	ldr	r0, [pc, #316]	; (2654c <bt_init+0x414>)
   26410:	4611      	mov	r1, r2
   26412:	f02a f967 	bl	506e4 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   26416:	4620      	mov	r0, r4
   26418:	f01d f85e 	bl	434d8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   2641c:	2108      	movs	r1, #8
   2641e:	f640 4001 	movw	r0, #3073	; 0xc01
   26422:	f007 f977 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   26426:	4604      	mov	r4, r0
   26428:	2800      	cmp	r0, #0
   2642a:	d067      	beq.n	264fc <bt_init+0x3c4>
   2642c:	2108      	movs	r1, #8
   2642e:	4408      	add	r0, r1
   26430:	f029 f9fa 	bl	4f828 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   26434:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   26438:	07d9      	lsls	r1, r3, #31
   2643a:	4602      	mov	r2, r0
   2643c:	d579      	bpl.n	26532 <bt_init+0x3fa>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   2643e:	a140      	add	r1, pc, #256	; (adr r1, 26540 <bt_init+0x408>)
   26440:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   26444:	f025 fc18 	bl	4bc78 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   26448:	4621      	mov	r1, r4
   2644a:	2200      	movs	r2, #0
   2644c:	f640 4001 	movw	r0, #3073	; 0xc01
   26450:	f007 f9bc 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   26454:	4604      	mov	r4, r0
   26456:	2800      	cmp	r0, #0
   26458:	f47f aeed 	bne.w	26236 <bt_init+0xfe>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   2645c:	4601      	mov	r1, r0
   2645e:	aa01      	add	r2, sp, #4
   26460:	f64f 4001 	movw	r0, #64513	; 0xfc01
   26464:	f007 f9b2 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   26468:	4604      	mov	r4, r0
   2646a:	bb48      	cbnz	r0, 264c0 <bt_init+0x388>
	net_buf_unref(rsp);
   2646c:	9801      	ldr	r0, [sp, #4]
   2646e:	f01d f833 	bl	434d8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   26472:	4621      	mov	r1, r4
   26474:	aa01      	add	r2, sp, #4
   26476:	f64f 4002 	movw	r0, #64514	; 0xfc02
   2647a:	f007 f9a7 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   2647e:	4604      	mov	r4, r0
   26480:	b9f0      	cbnz	r0, 264c0 <bt_init+0x388>
	rp.cmds = (void *)rsp->data;
   26482:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   26484:	4832      	ldr	r0, [pc, #200]	; (26550 <bt_init+0x418>)
   26486:	68b1      	ldr	r1, [r6, #8]
   26488:	2202      	movs	r2, #2
   2648a:	3101      	adds	r1, #1
   2648c:	f025 f9fd 	bl	4b88a <memcpy>
	net_buf_unref(rsp);
   26490:	4630      	mov	r0, r6
   26492:	f01d f821 	bl	434d8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   26496:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   2649a:	075b      	lsls	r3, r3, #29
   2649c:	d510      	bpl.n	264c0 <bt_init+0x388>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   2649e:	aa01      	add	r2, sp, #4
   264a0:	4621      	mov	r1, r4
   264a2:	f64f 4003 	movw	r0, #64515	; 0xfc03
   264a6:	f007 f991 	bl	2d7cc <bt_hci_cmd_send_sync>
		if (err) {
   264aa:	b948      	cbnz	r0, 264c0 <bt_init+0x388>
		rp.feat = (void *)rsp->data;
   264ac:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   264ae:	4829      	ldr	r0, [pc, #164]	; (26554 <bt_init+0x41c>)
   264b0:	68a1      	ldr	r1, [r4, #8]
   264b2:	2201      	movs	r2, #1
   264b4:	4411      	add	r1, r2
   264b6:	f025 f9e8 	bl	4b88a <memcpy>
		net_buf_unref(rsp);
   264ba:	4620      	mov	r0, r4
   264bc:	f01d f80c 	bl	434d8 <net_buf_unref>
	err = bt_id_init();
   264c0:	f025 ffe1 	bl	4c486 <bt_id_init>
	if (err) {
   264c4:	4604      	mov	r4, r0
   264c6:	2800      	cmp	r0, #0
   264c8:	f47f aeb5 	bne.w	26236 <bt_init+0xfe>
		err = bt_conn_init();
   264cc:	f009 fd22 	bl	2ff14 <bt_conn_init>
		if (err) {
   264d0:	4604      	mov	r4, r0
   264d2:	2800      	cmp	r0, #0
   264d4:	f47f aeaf 	bne.w	26236 <bt_init+0xfe>
		if (!bt_dev.id_count) {
   264d8:	79eb      	ldrb	r3, [r5, #7]
   264da:	2b00      	cmp	r3, #0
   264dc:	f43f aeab 	beq.w	26236 <bt_init+0xfe>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   264e0:	2104      	movs	r1, #4
   264e2:	481d      	ldr	r0, [pc, #116]	; (26558 <bt_init+0x420>)
   264e4:	f025 fb58 	bl	4bb98 <atomic_or>
	bt_finalize_init();
   264e8:	f007 fd08 	bl	2defc <bt_finalize_init>
	return 0;
   264ec:	e6a3      	b.n	26236 <bt_init+0xfe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   264ee:	2102      	movs	r1, #2
   264f0:	f640 406d 	movw	r0, #3181	; 0xc6d
   264f4:	f007 f90e 	bl	2d714 <bt_hci_cmd_create>
		if (!buf) {
   264f8:	4604      	mov	r4, r0
   264fa:	b910      	cbnz	r0, 26502 <bt_init+0x3ca>
		return -ENOBUFS;
   264fc:	f06f 0468 	mvn.w	r4, #104	; 0x68
   26500:	e699      	b.n	26236 <bt_init+0xfe>
   26502:	2102      	movs	r1, #2
   26504:	3008      	adds	r0, #8
   26506:	f029 f98f 	bl	4f828 <net_buf_simple_add>
		cp_le->le = 0x01;
   2650a:	2301      	movs	r3, #1
   2650c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   2650e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   26510:	4621      	mov	r1, r4
   26512:	4632      	mov	r2, r6
   26514:	f640 406d 	movw	r0, #3181	; 0xc6d
   26518:	f007 f958 	bl	2d7cc <bt_hci_cmd_send_sync>
		if (err) {
   2651c:	4604      	mov	r4, r0
   2651e:	2800      	cmp	r0, #0
   26520:	f43f aec4 	beq.w	262ac <bt_init+0x174>
   26524:	e687      	b.n	26236 <bt_init+0xfe>
	else if (!bt_dev.le.acl_mtu) {
   26526:	2900      	cmp	r1, #0
   26528:	f47f af78 	bne.w	2641c <bt_init+0x2e4>
		return -EIO;
   2652c:	f06f 0404 	mvn.w	r4, #4
   26530:	e681      	b.n	26236 <bt_init+0xfe>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   26532:	480a      	ldr	r0, [pc, #40]	; (2655c <bt_init+0x424>)
   26534:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   26538:	e784      	b.n	26444 <bt_init+0x30c>
   2653a:	bf00      	nop
   2653c:	f3af 8000 	nop.w
   26540:	02008890 	.word	0x02008890
   26544:	20008000 	.word	0x20008000
   26548:	200000d0 	.word	0x200000d0
   2654c:	20000100 	.word	0x20000100
   26550:	200000b9 	.word	0x200000b9
   26554:	200000b8 	.word	0x200000b8
   26558:	200000cc 	.word	0x200000cc
   2655c:	02008810 	.word	0x02008810

00026560 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
   26560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
   26564:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
   26568:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
   2656c:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
   2656e:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
   26570:	45a0      	cmp	r8, r4
{
   26572:	460f      	mov	r7, r1
   26574:	4616      	mov	r6, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
   26576:	d819      	bhi.n	265ac <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   26578:	4d1d      	ldr	r5, [pc, #116]	; (265f0 <ull_drift_ticks_get+0x90>)
   2657a:	fba3 0105 	umull	r0, r1, r3, r5
   2657e:	a31a      	add	r3, pc, #104	; (adr r3, 265e8 <ull_drift_ticks_get+0x88>)
   26580:	e9d3 2300 	ldrd	r2, r3, [r3]
   26584:	f7ff fdbc 	bl	26100 <__aeabi_uldivmod>
   26588:	4603      	mov	r3, r0
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   2658a:	eba4 0008 	sub.w	r0, r4, r8
   2658e:	fba0 0105 	umull	r0, r1, r0, r5
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   26592:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   26596:	a314      	add	r3, pc, #80	; (adr r3, 265e8 <ull_drift_ticks_get+0x88>)
   26598:	e9d3 2300 	ldrd	r2, r3, [r3]
   2659c:	f7ff fdb0 	bl	26100 <__aeabi_uldivmod>
   265a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   265a4:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   265a6:	6030      	str	r0, [r6, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
   265a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   265ac:	f8df 9040 	ldr.w	r9, [pc, #64]	; 265f0 <ull_drift_ticks_get+0x90>
   265b0:	a30d      	add	r3, pc, #52	; (adr r3, 265e8 <ull_drift_ticks_get+0x88>)
   265b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   265b6:	fba8 0109 	umull	r0, r1, r8, r9
   265ba:	f7ff fda1 	bl	26100 <__aeabi_uldivmod>
   265be:	4604      	mov	r4, r0
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   265c0:	f105 0030 	add.w	r0, r5, #48	; 0x30
   265c4:	a308      	add	r3, pc, #32	; (adr r3, 265e8 <ull_drift_ticks_get+0x88>)
   265c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   265ca:	fba0 0109 	umull	r0, r1, r0, r9
   265ce:	f7ff fd97 	bl	26100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   265d2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   265d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   265da:	603c      	str	r4, [r7, #0]
		*ticks_drift_minus =
   265dc:	6030      	str	r0, [r6, #0]
}
   265de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   265e2:	bf00      	nop
   265e4:	f3af 8000 	nop.w
   265e8:	1afd498d 	.word	0x1afd498d
   265ec:	00000007 	.word	0x00000007
   265f0:	3b9aca00 	.word	0x3b9aca00
   265f4:	00000000 	.word	0x00000000

000265f8 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
   265f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265fc:	b091      	sub	sp, #68	; 0x44
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
   265fe:	2800      	cmp	r0, #0
   26600:	d04b      	beq.n	2669a <ll_adv_enable+0xa2>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
   26602:	4c75      	ldr	r4, [pc, #468]	; (267d8 <ll_adv_enable+0x1e0>)
   26604:	f894 506a 	ldrb.w	r5, [r4, #106]	; 0x6a
   26608:	f015 0501 	ands.w	r5, r5, #1
   2660c:	d15c      	bne.n	266c8 <ll_adv_enable+0xd0>
	ull_filter_adv_update(lll->filter_policy);
   2660e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
   26612:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
   26614:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
   26618:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
   2661c:	f018 fd92 	bl	3f144 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   26620:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   26624:	0747      	lsls	r7, r0, #29
   26626:	d429      	bmi.n	2667c <ll_adv_enable+0x84>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   26628:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   2662c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   26630:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   26634:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   26638:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   2663a:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
   2663e:	b187      	cbz	r7, 26662 <ll_adv_enable+0x6a>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
   26640:	4865      	ldr	r0, [pc, #404]	; (267d8 <ll_adv_enable+0x1e0>)
   26642:	4639      	mov	r1, r7
   26644:	f012 f8f4 	bl	38830 <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
   26648:	783b      	ldrb	r3, [r7, #0]
   2664a:	065e      	lsls	r6, r3, #25
   2664c:	d505      	bpl.n	2665a <ll_adv_enable+0x62>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
   2664e:	2106      	movs	r1, #6
   26650:	f00d f98e 	bl	33970 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
   26654:	2800      	cmp	r0, #0
   26656:	f000 820a 	beq.w	26a6e <ll_adv_enable+0x476>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
   2665a:	485f      	ldr	r0, [pc, #380]	; (267d8 <ll_adv_enable+0x1e0>)
   2665c:	4649      	mov	r1, r9
   2665e:	f012 f8e7 	bl	38830 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   26662:	783b      	ldrb	r3, [r7, #0]
   26664:	f013 0f0e 	tst.w	r3, #14
   26668:	d133      	bne.n	266d2 <ll_adv_enable+0xda>
		if (lll->conn) {
   2666a:	6a23      	ldr	r3, [r4, #32]
   2666c:	2b00      	cmp	r3, #0
   2666e:	f000 80bf 	beq.w	267f0 <ll_adv_enable+0x1f8>
	return BT_HCI_ERR_CMD_DISALLOWED;
   26672:	250c      	movs	r5, #12
}
   26674:	4628      	mov	r0, r5
   26676:	b011      	add	sp, #68	; 0x44
   26678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   2667c:	462a      	mov	r2, r5
   2667e:	f104 016b 	add.w	r1, r4, #107	; 0x6b
   26682:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   26686:	f018 fef1 	bl	3f46c <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
   2668a:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   2668c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
   26690:	d0ca      	beq.n	26628 <ll_adv_enable+0x30>
			ull_filter_rpa_update(false);
   26692:	4628      	mov	r0, r5
   26694:	f018 fd9c 	bl	3f1d0 <ull_filter_rpa_update>
   26698:	e7c6      	b.n	26628 <ll_adv_enable+0x30>
	if (!adv || !adv->is_enabled) {
   2669a:	4b4f      	ldr	r3, [pc, #316]	; (267d8 <ll_adv_enable+0x1e0>)
   2669c:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   266a0:	07d2      	lsls	r2, r2, #31
   266a2:	d511      	bpl.n	266c8 <ll_adv_enable+0xd0>
	if (adv->lll.conn) {
   266a4:	6a1a      	ldr	r2, [r3, #32]
   266a6:	b152      	cbz	r2, 266be <ll_adv_enable+0xc6>
		adv->lll.conn->periph.cancelled = 1U;
   266a8:	f892 1020 	ldrb.w	r1, [r2, #32]
   266ac:	f041 0102 	orr.w	r1, r1, #2
   266b0:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   266b4:	6a1b      	ldr	r3, [r3, #32]
   266b6:	f893 3020 	ldrb.w	r3, [r3, #32]
   266ba:	07db      	lsls	r3, r3, #31
   266bc:	d4d9      	bmi.n	26672 <ll_adv_enable+0x7a>
}
   266be:	b011      	add	sp, #68	; 0x44
   266c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   266c4:	f011 bdb8 	b.w	38238 <disable.part.0>
			return 0;
   266c8:	2500      	movs	r5, #0
}
   266ca:	4628      	mov	r0, r5
   266cc:	b011      	add	sp, #68	; 0x44
   266ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ch_map = lll->chan_map;
   266d2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   266d6:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
   266d8:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   266dc:	a80c      	add	r0, sp, #48	; 0x30
	uint8_t ch_map = lll->chan_map;
   266de:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   266e2:	f00d facf 	bl	33c84 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
   266e6:	2800      	cmp	r0, #0
   266e8:	d06b      	beq.n	267c2 <ll_adv_enable+0x1ca>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
   266ea:	f899 1001 	ldrb.w	r1, [r9, #1]
   266ee:	4602      	mov	r2, r0
   266f0:	4638      	mov	r0, r7
   266f2:	f011 fe51 	bl	38398 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   266f6:	4939      	ldr	r1, [pc, #228]	; (267dc <ll_adv_enable+0x1e4>)
	uint16_t interval = adv->interval;
   266f8:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
	adv->ull.ticks_prepare_to_start =
   266fc:	2331      	movs	r3, #49	; 0x31
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
   266fe:	2600      	movs	r6, #0
   26700:	60a3      	str	r3, [r4, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26702:	fba0 0101 	umull	r0, r1, r0, r1
   26706:	a332      	add	r3, pc, #200	; (adr r3, 267d0 <ll_adv_enable+0x1d8>)
   26708:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   2670c:	e9c4 6605 	strd	r6, r6, [r4, #20]
	hdr->ref = 0U;
   26710:	7026      	strb	r6, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
   26712:	6066      	str	r6, [r4, #4]
	adv->ull.ticks_preempt_to_start =
   26714:	60e6      	str	r6, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26716:	f7ff fcf3 	bl	26100 <__aeabi_uldivmod>
   2671a:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
   2671c:	f00e fcbe 	bl	3509c <ticker_ticks_now_get>
   26720:	4680      	mov	r8, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26722:	f1b9 0f00 	cmp.w	r9, #0
   26726:	d107      	bne.n	26738 <ll_adv_enable+0x140>
   26728:	783e      	ldrb	r6, [r7, #0]
   2672a:	f006 060f 	and.w	r6, r6, #15
   2672e:	f1a6 0601 	sub.w	r6, r6, #1
   26732:	fab6 f686 	clz	r6, r6
   26736:	0976      	lsrs	r6, r6, #5
   26738:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   2673c:	f366 0000 	bfi	r0, r6, #0, #1
	if (lll->is_hdcd) {
   26740:	f010 0601 	ands.w	r6, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26744:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
   26748:	f040 8160 	bne.w	26a0c <ll_adv_enable+0x414>
		const uint32_t ticks_slot = adv->ull.ticks_slot +
   2674c:	6923      	ldr	r3, [r4, #16]
		ll_adv_ticker_ext[handle].ticks_slot_window =
   2674e:	4a24      	ldr	r2, [pc, #144]	; (267e0 <ll_adv_enable+0x1e8>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26750:	4824      	ldr	r0, [pc, #144]	; (267e4 <ll_adv_enable+0x1ec>)
		ret = ticker_start_ext(
   26752:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
   26754:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26758:	fba9 0100 	umull	r0, r1, r9, r0
		ret = ticker_start_ext(
   2675c:	9406      	str	r4, [sp, #24]
   2675e:	9602      	str	r6, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26760:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26762:	2391      	movs	r3, #145	; 0x91
   26764:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
   26768:	4b1f      	ldr	r3, [pc, #124]	; (267e8 <ll_adv_enable+0x1f0>)
   2676a:	9307      	str	r3, [sp, #28]
   2676c:	4b1f      	ldr	r3, [pc, #124]	; (267ec <ll_adv_enable+0x1f4>)
   2676e:	9305      	str	r3, [sp, #20]
   26770:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26774:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
   26776:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
   2677a:	9303      	str	r3, [sp, #12]
   2677c:	af0e      	add	r7, sp, #56	; 0x38
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   2677e:	a314      	add	r3, pc, #80	; (adr r3, 267d0 <ll_adv_enable+0x1d8>)
   26780:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
   26784:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
		ret = ticker_start_ext(
   26788:	9708      	str	r7, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   2678a:	f7ff fcb9 	bl	26100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
   2678e:	4643      	mov	r3, r8
   26790:	e9cd 6000 	strd	r6, r0, [sp]
   26794:	464a      	mov	r2, r9
   26796:	4630      	mov	r0, r6
   26798:	2103      	movs	r1, #3
   2679a:	f00e fafd 	bl	34d98 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
   2679e:	4639      	mov	r1, r7
   267a0:	f010 ff80 	bl	376a4 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   267a4:	b968      	cbnz	r0, 267c2 <ll_adv_enable+0x1ca>
	adv->is_enabled = 1;
   267a6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   267aa:	f043 0301 	orr.w	r3, r3, #1
   267ae:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   267b2:	f012 fa2b 	bl	38c0c <ull_scan_is_enabled_get>
   267b6:	2800      	cmp	r0, #0
   267b8:	d186      	bne.n	266c8 <ll_adv_enable+0xd0>
		ull_filter_adv_scan_state_cb(BIT(0));
   267ba:	2001      	movs	r0, #1
   267bc:	f018 fca4 	bl	3f108 <ull_filter_adv_scan_state_cb>
   267c0:	e758      	b.n	26674 <ll_adv_enable+0x7c>
	if (adv->lll.conn) {
   267c2:	6a23      	ldr	r3, [r4, #32]
   267c4:	2b00      	cmp	r3, #0
   267c6:	f43f af54 	beq.w	26672 <ll_adv_enable+0x7a>
		conn_release(adv);
   267ca:	f011 fcf3 	bl	381b4 <conn_release.constprop.0>
   267ce:	e750      	b.n	26672 <ll_adv_enable+0x7a>
   267d0:	1afd498d 	.word	0x1afd498d
   267d4:	00000007 	.word	0x00000007
   267d8:	2000515c 	.word	0x2000515c
   267dc:	3b9aca00 	.word	0x3b9aca00
   267e0:	200051d4 	.word	0x200051d4
   267e4:	84e72a00 	.word	0x84e72a00
   267e8:	00036ba1 	.word	0x00036ba1
   267ec:	00038411 	.word	0x00038411
		link = ll_rx_link_alloc();
   267f0:	f010 fea2 	bl	37538 <ll_rx_link_alloc>
		if (!link) {
   267f4:	4682      	mov	sl, r0
   267f6:	2800      	cmp	r0, #0
   267f8:	f000 8141 	beq.w	26a7e <ll_adv_enable+0x486>
		node_rx = ll_rx_alloc();
   267fc:	f010 fea8 	bl	37550 <ll_rx_alloc>
		if (!node_rx) {
   26800:	4683      	mov	fp, r0
   26802:	2800      	cmp	r0, #0
   26804:	f000 8138 	beq.w	26a78 <ll_adv_enable+0x480>
		conn = ll_conn_acquire();
   26808:	f013 f8d4 	bl	399b4 <ll_conn_acquire>
		if (!conn) {
   2680c:	4606      	mov	r6, r0
   2680e:	2800      	cmp	r0, #0
   26810:	f000 812f 	beq.w	26a72 <ll_adv_enable+0x47a>
		conn_lll->handle = 0xFFFF;
   26814:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
   26818:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
   2681a:	8533      	strh	r3, [r6, #40]	; 0x28
		conn_lll = &conn->lll;
   2681c:	f106 031c 	add.w	r3, r6, #28
   26820:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
   26822:	2800      	cmp	r0, #0
   26824:	f000 812d 	beq.w	26a82 <ll_adv_enable+0x48a>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   26828:	f106 0268 	add.w	r2, r6, #104	; 0x68
   2682c:	f106 0164 	add.w	r1, r6, #100	; 0x64
   26830:	f00d f8aa 	bl	33988 <memq_init>
			conn_lll->phy_tx = PHY_1M;
   26834:	f8b6 3060 	ldrh.w	r3, [r6, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26838:	4994      	ldr	r1, [pc, #592]	; (26a8c <ll_adv_enable+0x494>)
			conn_lll->phy_tx = PHY_1M;
   2683a:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
   2683e:	f023 0307 	bic.w	r3, r3, #7
   26842:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   26846:	f043 0301 	orr.w	r3, r3, #1
   2684a:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
   2684e:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
   26852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26856:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2685a:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
		conn_lll->sn = 0;
   2685e:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
   26862:	f023 0307 	bic.w	r3, r3, #7
   26866:	f886 307a 	strb.w	r3, [r6, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
   2686a:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
   2686e:	f023 0307 	bic.w	r3, r3, #7
   26872:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
		conn->own_id_addr_type = BT_ADDR_LE_NONE->type;
   26876:	f896 30d6 	ldrb.w	r3, [r6, #214]	; 0xd6
		conn_lll->link_tx_free = NULL;
   2687a:	f04f 0800 	mov.w	r8, #0
		conn->own_id_addr_type = BT_ADDR_LE_NONE->type;
   2687e:	f368 0300 	bfi	r3, r8, #0, #1
   26882:	f886 30d6 	strb.w	r3, [r6, #214]	; 0xd6
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26886:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
   2688a:	e9c6 3116 	strd	r3, r1, [r6, #88]	; 0x58
		conn->connect_expire = 6;
   2688e:	2206      	movs	r2, #6
		(void)memcpy(conn->own_id_addr, BT_ADDR_LE_NONE->a.val,
   26890:	f64f 73ff 	movw	r3, #65535	; 0xffff
		conn->connect_expire = 6;
   26894:	f8a6 20c0 	strh.w	r2, [r6, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
   26898:	e9c6 8812 	strd	r8, r8, [r6, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
   2689c:	f8c6 8074 	str.w	r8, [r6, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
   268a0:	f8a6 8078 	strh.w	r8, [r6, #120]	; 0x78
		conn_lll->latency_prepare = 0;
   268a4:	f8a6 802e 	strh.w	r8, [r6, #46]	; 0x2e
		conn_lll->latency_event = 0;
   268a8:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		conn_lll->data_chan_use = 0;
   268ac:	f886 803b 	strb.w	r8, [r6, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
   268b0:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
		conn->supervision_expire = 0;
   268b4:	f8a6 80c4 	strh.w	r8, [r6, #196]	; 0xc4
		conn->procedure_expire = 0;
   268b8:	f8a6 80c8 	strh.w	r8, [r6, #200]	; 0xc8
		conn->apto_expire = 0U;
   268bc:	f8a6 80d0 	strh.w	r8, [r6, #208]	; 0xd0
		conn->appto_expire = 0U;
   268c0:	f8a6 80cc 	strh.w	r8, [r6, #204]	; 0xcc
		(void)memcpy(conn->own_id_addr, BT_ADDR_LE_NONE->a.val,
   268c4:	f10d 0131 	add.w	r1, sp, #49	; 0x31
   268c8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   268cc:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
   268d0:	f106 00d7 	add.w	r0, r6, #215	; 0xd7
   268d4:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   268d8:	930c      	str	r3, [sp, #48]	; 0x30
   268da:	f024 ffd6 	bl	4b88a <memcpy>
		conn->peer_id_addr_type = BT_ADDR_LE_NONE->type;
   268de:	f896 10d6 	ldrb.w	r1, [r6, #214]	; 0xd6
		(void)memcpy(conn->peer_id_addr, BT_ADDR_LE_NONE->a.val,
   268e2:	f06f 03ff 	mvn.w	r3, #255	; 0xff
		conn->peer_id_addr_type = BT_ADDR_LE_NONE->type;
   268e6:	f368 0141 	bfi	r1, r8, #1, #1
   268ea:	f886 10d6 	strb.w	r1, [r6, #214]	; 0xd6
		(void)memcpy(conn->peer_id_addr, BT_ADDR_LE_NONE->a.val,
   268ee:	2206      	movs	r2, #6
   268f0:	930e      	str	r3, [sp, #56]	; 0x38
   268f2:	f10d 0139 	add.w	r1, sp, #57	; 0x39
   268f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   268fa:	f106 00dd 	add.w	r0, r6, #221	; 0xdd
   268fe:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   26902:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
   26906:	f024 ffc0 	bl	4b88a <memcpy>
		conn->common.fex_valid = 0;
   2690a:	f896 30e4 	ldrb.w	r3, [r6, #228]	; 0xe4
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   2690e:	f8a6 80f0 	strh.w	r8, [r6, #240]	; 0xf0
		conn->common.fex_valid = 0;
   26912:	f023 0307 	bic.w	r3, r3, #7
   26916:	f886 30e4 	strb.w	r3, [r6, #228]	; 0xe4
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   2691a:	f886 80f2 	strb.w	r8, [r6, #242]	; 0xf2
		conn->llcp_rx = NULL;
   2691e:	f8c6 8114 	str.w	r8, [r6, #276]	; 0x114
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   26922:	f8a6 8118 	strh.w	r8, [r6, #280]	; 0x118
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   26926:	f8a6 8130 	strh.w	r8, [r6, #304]	; 0x130
		conn->llcp_feature.features_conn = ll_feat_get();
   2692a:	f010 f8d3 	bl	36ad4 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   2692e:	f896 314a 	ldrb.w	r3, [r6, #330]	; 0x14a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
   26932:	f8a6 8148 	strh.w	r8, [r6, #328]	; 0x148
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26936:	f023 0303 	bic.w	r3, r3, #3
   2693a:	f886 314a 	strb.w	r3, [r6, #330]	; 0x14a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   2693e:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
   26942:	f8a6 8150 	strh.w	r8, [r6, #336]	; 0x150
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26946:	f023 0318 	bic.w	r3, r3, #24
   2694a:	f886 307a 	strb.w	r3, [r6, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   2694e:	f896 3176 	ldrb.w	r3, [r6, #374]	; 0x176
		conn->llcp_terminate.reason_final = 0;
   26952:	f886 8153 	strb.w	r8, [r6, #339]	; 0x153
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26956:	f023 0307 	bic.w	r3, r3, #7
   2695a:	f886 3176 	strb.w	r3, [r6, #374]	; 0x176
		conn->llcp_conn_param.disabled = 0;
   2695e:	f896 3196 	ldrb.w	r3, [r6, #406]	; 0x196
		conn->llcp_terminate.node_rx.hdr.link = link;
   26962:	f8c6 a154 	str.w	sl, [r6, #340]	; 0x154
		conn->llcp_conn_param.disabled = 0;
   26966:	f368 1345 	bfi	r3, r8, #5, #1
   2696a:	f886 3196 	strb.w	r3, [r6, #406]	; 0x196
		conn->llcp_length.disabled = 0U;
   2696e:	f896 31be 	ldrb.w	r3, [r6, #446]	; 0x1be
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   26972:	f8a6 8174 	strh.w	r8, [r6, #372]	; 0x174
		conn->llcp_length.disabled = 0U;
   26976:	f368 03c3 	bfi	r3, r8, #3, #1
		conn->llcp_feature.features_peer = 0;
   2697a:	2200      	movs	r2, #0
		conn->llcp_length.disabled = 0U;
   2697c:	f886 31be 	strb.w	r3, [r6, #446]	; 0x1be
		conn->llcp_feature.features_peer = 0;
   26980:	2300      	movs	r3, #0
		conn->llcp_feature.features_conn = ll_feat_get();
   26982:	e9c6 014e 	strd	r0, r1, [r6, #312]	; 0x138
		conn->llcp_feature.features_peer = 0;
   26986:	e9c6 2350 	strd	r2, r3, [r6, #320]	; 0x140
		conn->periph.llcp_type = 0U;
   2698a:	f886 80e5 	strb.w	r8, [r6, #229]	; 0xe5
		conn->llcp_conn_param.req = 0;
   2698e:	f8a6 8194 	strh.w	r8, [r6, #404]	; 0x194
		conn->periph.ticks_to_offset = 0;
   26992:	f8c6 80ec 	str.w	r8, [r6, #236]	; 0xec
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
   26996:	f8a6 81bc 	strh.w	r8, [r6, #444]	; 0x1bc
		conn->llcp_length.cache.tx_octets = 0U;
   2699a:	f8a6 81c8 	strh.w	r8, [r6, #456]	; 0x1c8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
   2699e:	f013 fb6d 	bl	3a07c <ull_conn_default_tx_octets_get>
   269a2:	f8a6 00d2 	strh.w	r0, [r6, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
   269a6:	f013 fb6f 	bl	3a088 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   269aa:	f8d6 21cc 	ldr.w	r2, [r6, #460]	; 0x1cc
   269ae:	4b38      	ldr	r3, [pc, #224]	; (26a90 <ll_adv_enable+0x498>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
   269b0:	f8a6 00d4 	strh.w	r0, [r6, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   269b4:	4013      	ands	r3, r2
   269b6:	f8c6 31cc 	str.w	r3, [r6, #460]	; 0x1cc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   269ba:	f013 fb6b 	bl	3a094 <ull_conn_default_phy_tx_get>
   269be:	f896 31d0 	ldrb.w	r3, [r6, #464]	; 0x1d0
   269c2:	f360 0302 	bfi	r3, r0, #0, #3
   269c6:	f886 31d0 	strb.w	r3, [r6, #464]	; 0x1d0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   269ca:	f013 fb69 	bl	3a0a0 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
   269ce:	f106 031c 	add.w	r3, r6, #28
   269d2:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   269d4:	f896 31d0 	ldrb.w	r3, [r6, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   269d8:	f8c6 81d4 	str.w	r8, [r6, #468]	; 0x1d4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   269dc:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
   269e0:	e9c4 ab18 	strd	sl, fp, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
   269e4:	e9c6 8878 	strd	r8, r8, [r6, #480]	; 0x1e0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   269e8:	e9c6 8876 	strd	r8, r8, [r6, #472]	; 0x1d8
	hdr->disabled_cb = hdr->disabled_param = NULL;
   269ec:	e9c6 8805 	strd	r8, r8, [r6, #20]
	hdr->ref = 0U;
   269f0:	f886 8000 	strb.w	r8, [r6]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
   269f4:	61f6      	str	r6, [r6, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   269f6:	f886 31d0 	strb.w	r3, [r6, #464]	; 0x1d0
		err = lll_clock_wait();
   269fa:	f019 fd67 	bl	404cc <lll_clock_wait>
		if (err) {
   269fe:	2800      	cmp	r0, #0
   26a00:	f43f ae67 	beq.w	266d2 <ll_adv_enable+0xda>
			conn_release(adv);
   26a04:	f011 fbd6 	bl	381b4 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
   26a08:	2503      	movs	r5, #3
   26a0a:	e633      	b.n	26674 <ll_adv_enable+0x7c>
				   (adv->ull.ticks_slot + ticks_slot_overhead),
   26a0c:	6923      	ldr	r3, [r4, #16]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26a0e:	4a21      	ldr	r2, [pc, #132]	; (26a94 <ll_adv_enable+0x49c>)
   26a10:	f8df 9084 	ldr.w	r9, [pc, #132]	; 26a98 <ll_adv_enable+0x4a0>
   26a14:	9304      	str	r3, [sp, #16]
   26a16:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   26a18:	2602      	movs	r6, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26a1a:	af0e      	add	r7, sp, #56	; 0x38
   26a1c:	9301      	str	r3, [sp, #4]
   26a1e:	9205      	str	r2, [sp, #20]
   26a20:	2103      	movs	r1, #3
   26a22:	e9cd 0002 	strd	r0, r0, [sp, #8]
   26a26:	9406      	str	r4, [sp, #24]
   26a28:	4643      	mov	r3, r8
   26a2a:	9000      	str	r0, [sp, #0]
   26a2c:	9708      	str	r7, [sp, #32]
   26a2e:	f8cd 901c 	str.w	r9, [sp, #28]
   26a32:	4632      	mov	r2, r6
		ret_cb = TICKER_STATUS_BUSY;
   26a34:	960e      	str	r6, [sp, #56]	; 0x38
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26a36:	f00e fa05 	bl	34e44 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
   26a3a:	4639      	mov	r1, r7
   26a3c:	f010 fe32 	bl	376a4 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
   26a40:	2800      	cmp	r0, #0
   26a42:	f47f aebe 	bne.w	267c2 <ll_adv_enable+0x1ca>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26a46:	4a15      	ldr	r2, [pc, #84]	; (26a9c <ll_adv_enable+0x4a4>)
   26a48:	9205      	str	r2, [sp, #20]
   26a4a:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
   26a4e:	9200      	str	r2, [sp, #0]
   26a50:	e9cd 0003 	strd	r0, r0, [sp, #12]
   26a54:	e9cd 0001 	strd	r0, r0, [sp, #4]
   26a58:	f8cd 901c 	str.w	r9, [sp, #28]
   26a5c:	9708      	str	r7, [sp, #32]
   26a5e:	9406      	str	r4, [sp, #24]
   26a60:	4643      	mov	r3, r8
   26a62:	2201      	movs	r2, #1
   26a64:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
   26a66:	960e      	str	r6, [sp, #56]	; 0x38
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26a68:	f00e f9ec 	bl	34e44 <ticker_start>
   26a6c:	e697      	b.n	2679e <ll_adv_enable+0x1a6>
			return BT_HCI_ERR_INVALID_PARAM;
   26a6e:	2512      	movs	r5, #18
   26a70:	e600      	b.n	26674 <ll_adv_enable+0x7c>
			ll_rx_release(node_rx);
   26a72:	4658      	mov	r0, fp
   26a74:	f010 fd72 	bl	3755c <ll_rx_release>
			ll_rx_link_release(link);
   26a78:	4650      	mov	r0, sl
   26a7a:	f010 fd63 	bl	37544 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26a7e:	2507      	movs	r5, #7
   26a80:	e5f8      	b.n	26674 <ll_adv_enable+0x7c>
			conn_lll->link_tx_free = &conn_lll->link_tx;
   26a82:	f106 006c 	add.w	r0, r6, #108	; 0x6c
   26a86:	6770      	str	r0, [r6, #116]	; 0x74
   26a88:	e6ce      	b.n	26828 <ll_adv_enable+0x230>
   26a8a:	bf00      	nop
   26a8c:	01480148 	.word	0x01480148
   26a90:	f6ff0000 	.word	0xf6ff0000
   26a94:	00038411 	.word	0x00038411
   26a98:	00036ba1 	.word	0x00036ba1
   26a9c:	00037f3d 	.word	0x00037f3d

00026aa0 <ull_adv_time_update>:
{
   26aa0:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
   26aa2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
   26aa6:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
   26aa8:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
   26aac:	460d      	mov	r5, r1
   26aae:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26ab0:	2101      	movs	r1, #1
   26ab2:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
   26ab6:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
   26ab8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26abc:	f00d f8e2 	bl	33c84 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26ac0:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26ac2:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26ac4:	4628      	mov	r0, r5
   26ac6:	f011 fc67 	bl	38398 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26aca:	491d      	ldr	r1, [pc, #116]	; (26b40 <ull_adv_time_update+0xa0>)
   26acc:	a31a      	add	r3, pc, #104	; (adr r3, 26b38 <ull_adv_time_update+0x98>)
   26ace:	e9d3 2300 	ldrd	r2, r3, [r3]
   26ad2:	fba0 0101 	umull	r0, r1, r0, r1
   26ad6:	f7ff fb13 	bl	26100 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
   26ada:	6923      	ldr	r3, [r4, #16]
   26adc:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26ade:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
   26ae0:	d220      	bcs.n	26b24 <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
   26ae2:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
   26ae4:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26ae6:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26ae8:	4a16      	ldr	r2, [pc, #88]	; (26b44 <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26aea:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26aec:	4b16      	ldr	r3, [pc, #88]	; (26b48 <ull_adv_time_update+0xa8>)
   26aee:	1aa2      	subs	r2, r4, r2
   26af0:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
   26af4:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26af6:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26af8:	2300      	movs	r3, #0
   26afa:	440a      	add	r2, r1
   26afc:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
   26afe:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26b00:	4912      	ldr	r1, [pc, #72]	; (26b4c <ull_adv_time_update+0xac>)
   26b02:	9105      	str	r1, [sp, #20]
   26b04:	e9cd 3303 	strd	r3, r3, [sp, #12]
   26b08:	2103      	movs	r1, #3
   26b0a:	b2d2      	uxtb	r2, r2
   26b0c:	9606      	str	r6, [sp, #24]
   26b0e:	9300      	str	r3, [sp, #0]
   26b10:	4618      	mov	r0, r3
   26b12:	f00e fa0b 	bl	34f2c <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26b16:	4631      	mov	r1, r6
   26b18:	f010 fdc4 	bl	376a4 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26b1c:	b948      	cbnz	r0, 26b32 <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
   26b1e:	6125      	str	r5, [r4, #16]
}
   26b20:	b00a      	add	sp, #40	; 0x28
   26b22:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
   26b24:	d902      	bls.n	26b2c <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
   26b26:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
   26b28:	2300      	movs	r3, #0
   26b2a:	e7dc      	b.n	26ae6 <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
   26b2c:	2000      	movs	r0, #0
}
   26b2e:	b00a      	add	sp, #40	; 0x28
   26b30:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26b32:	200c      	movs	r0, #12
}
   26b34:	b00a      	add	sp, #40	; 0x28
   26b36:	bd70      	pop	{r4, r5, r6, pc}
   26b38:	1afd498d 	.word	0x1afd498d
   26b3c:	00000007 	.word	0x00000007
   26b40:	3b9aca00 	.word	0x3b9aca00
   26b44:	2000515c 	.word	0x2000515c
   26b48:	88888889 	.word	0x88888889
   26b4c:	00036ba1 	.word	0x00036ba1

00026b50 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
   26b50:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
   26b52:	4c19      	ldr	r4, [pc, #100]	; (26bb8 <ll_scan_params_set+0x68>)
{
   26b54:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
   26b58:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
   26b5c:	f01c 0501 	ands.w	r5, ip, #1
   26b60:	d122      	bne.n	26ba8 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
   26b62:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
   26b66:	0140      	lsls	r0, r0, #5
   26b68:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
   26b6c:	87a1      	strh	r1, [r4, #60]	; 0x3c
	lll->filter_policy = filter_policy;
   26b6e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   26b72:	f00e 0e18 	and.w	lr, lr, #24
   26b76:	f000 0020 	and.w	r0, r0, #32
   26b7a:	ea40 000e 	orr.w	r0, r0, lr
   26b7e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   26b82:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26b84:	480d      	ldr	r0, [pc, #52]	; (26bbc <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
   26b86:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26b8a:	2191      	movs	r1, #145	; 0x91
   26b8c:	fba2 0300 	umull	r0, r3, r2, r0
   26b90:	fb01 3102 	mla	r1, r1, r2, r3
   26b94:	a306      	add	r3, pc, #24	; (adr r3, 26bb0 <ll_scan_params_set+0x60>)
   26b96:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
   26b9a:	f884 c044 	strb.w	ip, [r4, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26b9e:	f7ff faaf 	bl	26100 <__aeabi_uldivmod>
   26ba2:	6420      	str	r0, [r4, #64]	; 0x40
}
   26ba4:	4628      	mov	r0, r5
   26ba6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26ba8:	250c      	movs	r5, #12
}
   26baa:	4628      	mov	r0, r5
   26bac:	bd38      	pop	{r3, r4, r5, pc}
   26bae:	bf00      	nop
   26bb0:	1afd498d 	.word	0x1afd498d
   26bb4:	00000007 	.word	0x00000007
   26bb8:	200051f8 	.word	0x200051f8
   26bbc:	84e72a00 	.word	0x84e72a00

00026bc0 <ull_scan_params_set>:
{
   26bc0:	b510      	push	{r4, lr}
   26bc2:	4604      	mov	r4, r0
   26bc4:	f89d 0008 	ldrb.w	r0, [sp, #8]
	lll->interval = interval;
   26bc8:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
   26bca:	ea4f 1c41 	mov.w	ip, r1, lsl #5
   26bce:	00c0      	lsls	r0, r0, #3
   26bd0:	7da1      	ldrb	r1, [r4, #22]
   26bd2:	f000 0018 	and.w	r0, r0, #24
   26bd6:	f00c 0c20 	and.w	ip, ip, #32
   26bda:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26bde:	480c      	ldr	r0, [pc, #48]	; (26c10 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
   26be0:	f021 0138 	bic.w	r1, r1, #56	; 0x38
   26be4:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26be8:	fba3 0200 	umull	r0, r2, r3, r0
   26bec:	2191      	movs	r1, #145	; 0x91
   26bee:	fb01 2103 	mla	r1, r1, r3, r2
	lll->filter_policy = filter_policy;
   26bf2:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26bf6:	a304      	add	r3, pc, #16	; (adr r3, 26c08 <ull_scan_params_set+0x48>)
   26bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   26bfc:	f7ff fa80 	bl	26100 <__aeabi_uldivmod>
   26c00:	6260      	str	r0, [r4, #36]	; 0x24
}
   26c02:	bd10      	pop	{r4, pc}
   26c04:	f3af 8000 	nop.w
   26c08:	1afd498d 	.word	0x1afd498d
   26c0c:	00000007 	.word	0x00000007
   26c10:	84e72a00 	.word	0x84e72a00
   26c14:	00000000 	.word	0x00000000

00026c18 <ull_scan_enable>:
{
   26c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26c1c:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
   26c1e:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
   26c22:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
   26c26:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   26c2a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   26c2e:	f360 1386 	bfi	r3, r0, #6, #1
{
   26c32:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
   26c34:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
   26c38:	f00e fa68 	bl	3510c <ll_addr_read>
	lll->chan = 0U;
   26c3c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   26c40:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   26c42:	484d      	ldr	r0, [pc, #308]	; (26d78 <ull_scan_enable+0x160>)
   26c44:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
   26c46:	f002 0279 	and.w	r2, r2, #121	; 0x79
   26c4a:	2500      	movs	r5, #0
   26c4c:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   26c50:	2191      	movs	r1, #145	; 0x91
   26c52:	fba3 0200 	umull	r0, r2, r3, r0
   26c56:	fb01 2103 	mla	r1, r1, r3, r2
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26c5a:	e9c4 5505 	strd	r5, r5, [r4, #20]
   26c5e:	a344      	add	r3, pc, #272	; (adr r3, 26d70 <ull_scan_enable+0x158>)
   26c60:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
   26c64:	7025      	strb	r5, [r4, #0]
   26c66:	f7ff fa4b 	bl	26100 <__aeabi_uldivmod>
	scan->ull.ticks_prepare_to_start =
   26c6a:	2331      	movs	r3, #49	; 0x31
   26c6c:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if ((lll->ticks_window +
   26c70:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_preempt_to_start =
   26c72:	60e5      	str	r5, [r4, #12]
	if ((lll->ticks_window +
   26c74:	3309      	adds	r3, #9
	    (ticks_interval -
   26c76:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
   26c7a:	4293      	cmp	r3, r2
		scan->ull.ticks_slot =
   26c7c:	bf32      	itee	cc
   26c7e:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
   26c80:	6122      	strcs	r2, [r4, #16]
		lll->ticks_window = 0U;
   26c82:	6425      	strcs	r5, [r4, #64]	; 0x40
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   26c84:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
   26c86:	f00e fa09 	bl	3509c <ticker_ticks_now_get>
	if (!lll->conn) {
   26c8a:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
   26c8c:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
   26c8e:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
   26c92:	2b00      	cmp	r3, #0
   26c94:	d04c      	beq.n	26d30 <ull_scan_enable+0x118>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   26c96:	4d39      	ldr	r5, [pc, #228]	; (26d7c <ull_scan_enable+0x164>)
   26c98:	4b39      	ldr	r3, [pc, #228]	; (26d80 <ull_scan_enable+0x168>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26c9a:	f8cd 8020 	str.w	r8, [sp, #32]
   26c9e:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   26ca0:	1b65      	subs	r5, r4, r5
   26ca2:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26ca6:	4834      	ldr	r0, [pc, #208]	; (26d78 <ull_scan_enable+0x160>)
   26ca8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26caa:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26cae:	fba3 0200 	umull	r0, r2, r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26cb2:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26cb6:	2191      	movs	r1, #145	; 0x91
   26cb8:	fb01 2103 	mla	r1, r1, r3, r2
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26cbc:	6923      	ldr	r3, [r4, #16]
   26cbe:	9304      	str	r3, [sp, #16]
   26cc0:	4b30      	ldr	r3, [pc, #192]	; (26d84 <ull_scan_enable+0x16c>)
   26cc2:	9307      	str	r3, [sp, #28]
   26cc4:	4b30      	ldr	r3, [pc, #192]	; (26d88 <ull_scan_enable+0x170>)
   26cc6:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
   26cc8:	f04f 0902 	mov.w	r9, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26ccc:	a328      	add	r3, pc, #160	; (adr r3, 26d70 <ull_scan_enable+0x158>)
   26cce:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
   26cd2:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   26cd6:	f7ff fa13 	bl	26100 <__aeabi_uldivmod>
   26cda:	4610      	mov	r0, r2
   26cdc:	4619      	mov	r1, r3
   26cde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26ce2:	2300      	movs	r3, #0
   26ce4:	f7ff fa0c 	bl	26100 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   26ce8:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26cea:	3504      	adds	r5, #4
   26cec:	b2ed      	uxtb	r5, r5
   26cee:	462a      	mov	r2, r5
   26cf0:	e9cd 6001 	strd	r6, r0, [sp, #4]
   26cf4:	463b      	mov	r3, r7
   26cf6:	2103      	movs	r1, #3
   26cf8:	f8cd a000 	str.w	sl, [sp]
   26cfc:	4650      	mov	r0, sl
   26cfe:	f00e f8a1 	bl	34e44 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26d02:	4641      	mov	r1, r8
   26d04:	f010 fcce 	bl	376a4 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26d08:	4605      	mov	r5, r0
   26d0a:	b968      	cbnz	r0, 26d28 <ull_scan_enable+0x110>
	scan->is_enabled = 1U;
   26d0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   26d10:	f043 0301 	orr.w	r3, r3, #1
   26d14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
   26d18:	f011 fd60 	bl	387dc <ull_adv_is_enabled_get>
   26d1c:	4604      	mov	r4, r0
   26d1e:	b1f8      	cbz	r0, 26d60 <ull_scan_enable+0x148>
	return 0;
   26d20:	4628      	mov	r0, r5
}
   26d22:	b00c      	add	sp, #48	; 0x30
   26d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26d28:	200c      	movs	r0, #12
}
   26d2a:	b00c      	add	sp, #48	; 0x30
   26d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
   26d30:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
   26d34:	6921      	ldr	r1, [r4, #16]
   26d36:	4643      	mov	r3, r8
   26d38:	aa0a      	add	r2, sp, #40	; 0x28
   26d3a:	2003      	movs	r0, #3
   26d3c:	f001 f9e0 	bl	28100 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
   26d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
   26d42:	2900      	cmp	r1, #0
   26d44:	d0a7      	beq.n	26c96 <ull_scan_enable+0x7e>
				       HAL_TICKER_US_TO_TICKS(offset_us);
   26d46:	4811      	ldr	r0, [pc, #68]	; (26d8c <ull_scan_enable+0x174>)
   26d48:	a309      	add	r3, pc, #36	; (adr r3, 26d70 <ull_scan_enable+0x158>)
   26d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   26d4e:	fba1 0100 	umull	r0, r1, r1, r0
   26d52:	f7ff f9d5 	bl	26100 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
   26d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
   26d58:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
   26d5c:	441f      	add	r7, r3
   26d5e:	e79a      	b.n	26c96 <ull_scan_enable+0x7e>
		ull_filter_adv_scan_state_cb(BIT(1));
   26d60:	4648      	mov	r0, r9
   26d62:	f018 f9d1 	bl	3f108 <ull_filter_adv_scan_state_cb>
	return 0;
   26d66:	4620      	mov	r0, r4
}
   26d68:	b00c      	add	sp, #48	; 0x30
   26d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26d6e:	bf00      	nop
   26d70:	1afd498d 	.word	0x1afd498d
   26d74:	00000007 	.word	0x00000007
   26d78:	84e72a00 	.word	0x84e72a00
   26d7c:	200051f8 	.word	0x200051f8
   26d80:	38e38e39 	.word	0x38e38e39
   26d84:	00036ba1 	.word	0x00036ba1
   26d88:	00038a05 	.word	0x00038a05
   26d8c:	3b9aca00 	.word	0x3b9aca00

00026d90 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
   26d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26d94:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   26d96:	8e45      	ldrh	r5, [r0, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   26d98:	f8b0 60f4 	ldrh.w	r6, [r0, #244]	; 0xf4
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26d9c:	441d      	add	r5, r3
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26d9e:	f890 311a 	ldrb.w	r3, [r0, #282]	; 0x11a
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26da2:	b2ad      	uxth	r5, r5
   26da4:	4429      	add	r1, r5
{
   26da6:	4617      	mov	r7, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26da8:	f013 0207 	ands.w	r2, r3, #7
{
   26dac:	b08b      	sub	sp, #44	; 0x2c
   26dae:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   26db0:	b289      	uxth	r1, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   26db2:	d00a      	beq.n	26dca <event_conn_upd_prep+0x3a>
		static memq_link_t s_link;
		static struct mayfly s_mfy_sched_offset = {0, 0,
			&s_link, 0, 0 };
		void (*fp_mfy_select_or_use)(void *) = NULL;

		switch (conn->llcp_cu.state) {
   26db4:	1e53      	subs	r3, r2, #1
   26db6:	2b04      	cmp	r3, #4
   26db8:	f200 8376 	bhi.w	274a8 <event_conn_upd_prep+0x718>
   26dbc:	e8df f013 	tbh	[pc, r3, lsl #1]
   26dc0:	023501c4 	.word	0x023501c4
   26dc4:	014d019e 	.word	0x014d019e
   26dc8:	0238      	.short	0x0238
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   26dca:	1b89      	subs	r1, r1, r6
   26dcc:	fa1f f881 	uxth.w	r8, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
   26dd0:	0409      	lsls	r1, r1, #16
   26dd2:	f100 816d 	bmi.w	270b0 <event_conn_upd_prep+0x320>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   26dd6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   26dda:	2b00      	cmp	r3, #0
   26ddc:	f2c0 826c 	blt.w	272b8 <event_conn_upd_prep+0x528>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
   26de0:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   26de4:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26de8:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   26dec:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
		conn->llcp_cu.ack = conn->llcp_cu.req;
   26df0:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   26df4:	f884 1119 	strb.w	r1, [r4, #281]	; 0x119
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26df8:	4293      	cmp	r3, r2
   26dfa:	d00a      	beq.n	26e12 <event_conn_upd_prep+0x82>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   26dfc:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   26e00:	f003 030f 	and.w	r3, r3, #15
   26e04:	2b06      	cmp	r3, #6
   26e06:	d104      	bne.n	26e12 <event_conn_upd_prep+0x82>
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
   26e08:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   26e0a:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
			conn->procedure_expire = 0U;
   26e0e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn == conn_upd_curr) {
   26e12:	4bbf      	ldr	r3, [pc, #764]	; (27110 <event_conn_upd_prep+0x380>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
   26e14:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
	if (conn == conn_upd_curr) {
   26e18:	681a      	ldr	r2, [r3, #0]
   26e1a:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   26e1c:	bf04      	itt	eq
   26e1e:	2200      	moveq	r2, #0
   26e20:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
   26e22:	f1b9 0f00 	cmp.w	r9, #0
   26e26:	f000 8159 	beq.w	270dc <event_conn_upd_prep+0x34c>
   26e2a:	f8d9 0000 	ldr.w	r0, [r9]
   26e2e:	2800      	cmp	r0, #0
   26e30:	f000 8154 	beq.w	270dc <event_conn_upd_prep+0x34c>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
   26e34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   26e36:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
		conn->llcp_rx = rx->hdr.link->mem;
   26e3a:	6841      	ldr	r1, [r0, #4]
   26e3c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
   26e40:	4293      	cmp	r3, r2
		    (conn->llcp_cu.latency != lll->latency) ||
   26e42:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
		if ((conn->llcp_cu.interval != lll->interval) ||
   26e46:	f000 823f 	beq.w	272c8 <event_conn_upd_prep+0x538>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   26e4a:	f8b4 1120 	ldrh.w	r1, [r4, #288]	; 0x120
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
   26e4e:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
   26e52:	f8a9 301e 	strh.w	r3, [r9, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   26e56:	2318      	movs	r3, #24
   26e58:	f889 3004 	strb.w	r3, [r9, #4]
			cu->status = 0x00;
   26e5c:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
   26e5e:	f8a9 c006 	strh.w	ip, [r9, #6]
			cu->latency = conn->llcp_cu.latency;
   26e62:	f8a9 2020 	strh.w	r2, [r9, #32]
			cu->timeout = conn->llcp_cu.timeout;
   26e66:	f8a9 1022 	strh.w	r1, [r9, #34]	; 0x22
			cu->status = 0x00;
   26e6a:	f889 301c 	strb.w	r3, [r9, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
   26e6e:	4649      	mov	r1, r9
   26e70:	f010 fb7a 	bl	37568 <ll_rx_put>
		ll_rx_sched();
   26e74:	f010 fb82 	bl	3757c <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   26e78:	68a3      	ldr	r3, [r4, #8]
   26e7a:	2b00      	cmp	r3, #0
   26e7c:	da09      	bge.n	26e92 <event_conn_upd_prep+0x102>
			uint32_t ticks_prepare_to_start =
   26e7e:	68e1      	ldr	r1, [r4, #12]
   26e80:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
   26e82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   26e86:	4291      	cmp	r1, r2
   26e88:	bf2c      	ite	cs
   26e8a:	187f      	addcs	r7, r7, r1
   26e8c:	18bf      	addcc	r7, r7, r2
   26e8e:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
   26e90:	1aff      	subs	r7, r7, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
   26e92:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
   26e94:	f8b4 911c 	ldrh.w	r9, [r4, #284]	; 0x11c
		conn_interval_old = instant_latency * lll->interval;
   26e98:	fb11 f108 	smulbb	r1, r1, r8
   26e9c:	b289      	uxth	r1, r1
		latency = conn_interval_old / conn->llcp_cu.interval;
   26e9e:	fbb1 f3f9 	udiv	r3, r1, r9
		conn_interval_new = latency * conn->llcp_cu.interval;
   26ea2:	fb19 f003 	smulbb	r0, r9, r3
   26ea6:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   26ea8:	4281      	cmp	r1, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
   26eaa:	fa1f fa83 	uxth.w	sl, r3
		if (conn_interval_new > conn_interval_old) {
   26eae:	f080 8104 	bcs.w	270ba <event_conn_upd_prep+0x32a>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   26eb2:	1a40      	subs	r0, r0, r1
   26eb4:	f240 42e2 	movw	r2, #1250	; 0x4e2
   26eb8:	4996      	ldr	r1, [pc, #600]	; (27114 <event_conn_upd_prep+0x384>)
   26eba:	fb02 f000 	mul.w	r0, r2, r0
   26ebe:	fba0 0101 	umull	r0, r1, r0, r1
   26ec2:	a391      	add	r3, pc, #580	; (adr r3, 27108 <event_conn_upd_prep+0x378>)
   26ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
   26ec8:	f7ff f91a 	bl	26100 <__aeabi_uldivmod>
   26ecc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   26ed0:	4407      	add	r7, r0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
   26ed2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   26ed4:	441e      	add	r6, r3
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
   26ed6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
   26eda:	1b76      	subs	r6, r6, r5
   26edc:	4456      	add	r6, sl
		conn_interval_us = conn->llcp_cu.interval *
   26ede:	f240 4be2 	movw	fp, #1250	; 0x4e2
		} else if (lll->role) {
   26ee2:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
   26ee4:	85e6      	strh	r6, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
   26ee6:	fb0b f609 	mul.w	r6, fp, r9
		} else if (lll->role) {
   26eea:	f2c0 8210 	blt.w	2730e <event_conn_upd_prep+0x57e>
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   26eee:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   26ef2:	4888      	ldr	r0, [pc, #544]	; (27114 <event_conn_upd_prep+0x384>)
   26ef4:	a384      	add	r3, pc, #528	; (adr r3, 27108 <event_conn_upd_prep+0x378>)
   26ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
   26efa:	fba1 0100 	umull	r0, r1, r1, r0
   26efe:	f7ff f8ff 	bl	26100 <__aeabi_uldivmod>
   26f02:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
		periodic_us = conn_interval_us;
   26f06:	4635      	mov	r5, r6

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
   26f08:	f108 0801 	add.w	r8, r8, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   26f0c:	4a82      	ldr	r2, [pc, #520]	; (27118 <event_conn_upd_prep+0x388>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26f0e:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
		lll->latency = conn->llcp_cu.latency;
   26f12:	f8b4 011e 	ldrh.w	r0, [r4, #286]	; 0x11e

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26f16:	4981      	ldr	r1, [pc, #516]	; (2711c <event_conn_upd_prep+0x38c>)
		lll->interval = conn->llcp_cu.interval;
   26f18:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   26f1c:	4432      	add	r2, r6
   26f1e:	fbb2 f2f6 	udiv	r2, r2, r6
   26f22:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26f26:	f242 7210 	movw	r2, #10000	; 0x2710
   26f2a:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26f2e:	4431      	add	r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26f30:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26f32:	fbb1 f1f6 	udiv	r1, r1, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26f36:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26f3a:	b28a      	uxth	r2, r1
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   26f3c:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26f40:	1d83      	adds	r3, r0, #6
   26f42:	429a      	cmp	r2, r3
		lll->latency = conn->llcp_cu.latency;
   26f44:	85a0      	strh	r0, [r4, #44]	; 0x2c
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   26f46:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26f4a:	dd04      	ble.n	26f56 <event_conn_upd_prep+0x1c6>
   26f4c:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
   26f50:	33fa      	adds	r3, #250	; 0xfa
   26f52:	441a      	add	r2, r3
   26f54:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
   26f56:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   26f5a:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
   26f5e:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
   26f60:	bf44      	itt	mi
   26f62:	2300      	movmi	r3, #0
   26f64:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   26f68:	2102      	movs	r1, #2
   26f6a:	2001      	movs	r0, #1
   26f6c:	f01b fff8 	bl	42f60 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   26f70:	2200      	movs	r2, #0
   26f72:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   26f74:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   26f76:	2001      	movs	r0, #1
   26f78:	f00c fd56 	bl	33a28 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   26f7c:	4968      	ldr	r1, [pc, #416]	; (27120 <event_conn_upd_prep+0x390>)
   26f7e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   26f82:	4620      	mov	r0, r4
   26f84:	f00c fce0 	bl	33948 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   26f88:	f100 0a05 	add.w	sl, r0, #5
   26f8c:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
   26f90:	4b64      	ldr	r3, [pc, #400]	; (27124 <event_conn_upd_prep+0x394>)
   26f92:	9400      	str	r4, [sp, #0]
   26f94:	4652      	mov	r2, sl
   26f96:	2101      	movs	r1, #1
   26f98:	2000      	movs	r0, #0
   26f9a:	f00d ffdf 	bl	34f5c <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   26f9e:	f030 0302 	bics.w	r3, r0, #2
   26fa2:	d00c      	beq.n	26fbe <event_conn_upd_prep+0x22e>
   26fa4:	4a60      	ldr	r2, [pc, #384]	; (27128 <event_conn_upd_prep+0x398>)
   26fa6:	4961      	ldr	r1, [pc, #388]	; (2712c <event_conn_upd_prep+0x39c>)
   26fa8:	4861      	ldr	r0, [pc, #388]	; (27130 <event_conn_upd_prep+0x3a0>)
   26faa:	f640 43cb 	movw	r3, #3275	; 0xccb
   26fae:	f022 fb61 	bl	49674 <printk>
   26fb2:	4040      	eors	r0, r0
   26fb4:	f380 8811 	msr	BASEPRI, r0
   26fb8:	f04f 0003 	mov.w	r0, #3
   26fbc:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   26fbe:	4e55      	ldr	r6, [pc, #340]	; (27114 <event_conn_upd_prep+0x384>)
   26fc0:	fba5 6b06 	umull	r6, fp, r5, r6
   26fc4:	a350      	add	r3, pc, #320	; (adr r3, 27108 <event_conn_upd_prep+0x378>)
   26fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   26fca:	4630      	mov	r0, r6
   26fcc:	4659      	mov	r1, fp
   26fce:	f7ff f897 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
   26fd2:	4b58      	ldr	r3, [pc, #352]	; (27134 <event_conn_upd_prep+0x3a4>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26fd4:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
   26fd8:	fba5 3103 	umull	r3, r1, r5, r3
   26fdc:	2207      	movs	r2, #7
   26fde:	1af0      	subs	r0, r6, r3
   26fe0:	fb02 1105 	mla	r1, r2, r5, r1
   26fe4:	eb6b 0101 	sbc.w	r1, fp, r1
   26fe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26fec:	2300      	movs	r3, #0
   26fee:	f7ff f887 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   26ff2:	e9cd 5001 	strd	r5, r0, [sp, #4]
   26ff6:	9408      	str	r4, [sp, #32]
   26ff8:	9406      	str	r4, [sp, #24]
   26ffa:	f8cd 8000 	str.w	r8, [sp]
				     TICKER_NULL_LAZY,
#else
				     TICKER_LAZY_MUST_EXPIRE_KEEP,
#endif /* CONFIG_BT_TICKER_LOW_LAT */
				     (ticks_slot_overhead +
				      conn->ull.ticks_slot),
   26ffe:	6921      	ldr	r1, [r4, #16]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   27000:	f994 5039 	ldrsb.w	r5, [r4, #57]	; 0x39
   27004:	484c      	ldr	r0, [pc, #304]	; (27138 <event_conn_upd_prep+0x3a8>)
   27006:	9104      	str	r1, [sp, #16]
   27008:	494c      	ldr	r1, [pc, #304]	; (2713c <event_conn_upd_prep+0x3ac>)
   2700a:	4c4d      	ldr	r4, [pc, #308]	; (27140 <event_conn_upd_prep+0x3b0>)
   2700c:	9407      	str	r4, [sp, #28]
   2700e:	ea11 0125 	ands.w	r1, r1, r5, asr #32
   27012:	bf38      	it	cc
   27014:	4601      	movcc	r1, r0
   27016:	9105      	str	r1, [sp, #20]
   27018:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   2701c:	463b      	mov	r3, r7
   2701e:	9103      	str	r1, [sp, #12]
   27020:	4652      	mov	r2, sl
   27022:	2101      	movs	r1, #1
   27024:	2000      	movs	r0, #0
   27026:	f00d ff0d 	bl	34e44 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   2702a:	f030 0302 	bics.w	r3, r0, #2
   2702e:	d00c      	beq.n	2704a <event_conn_upd_prep+0x2ba>
   27030:	4a3d      	ldr	r2, [pc, #244]	; (27128 <event_conn_upd_prep+0x398>)
   27032:	493e      	ldr	r1, [pc, #248]	; (2712c <event_conn_upd_prep+0x39c>)
   27034:	483e      	ldr	r0, [pc, #248]	; (27130 <event_conn_upd_prep+0x3a0>)
   27036:	f640 43e5 	movw	r3, #3301	; 0xce5
   2703a:	f022 fb1b 	bl	49674 <printk>
   2703e:	4040      	eors	r0, r0
   27040:	f380 8811 	msr	BASEPRI, r0
   27044:	f04f 0003 	mov.w	r0, #3
   27048:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
   2704a:	f1b9 0f00 	cmp.w	r9, #0
   2704e:	f040 8158 	bne.w	27302 <event_conn_upd_prep+0x572>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
   27052:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
   27054:	b00b      	add	sp, #44	; 0x2c
   27056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						      conn->lll.latency + 6;
   2705a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   2705c:	f890 511a 	ldrb.w	r5, [r0, #282]	; 0x11a
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
   27060:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
						      conn->lll.latency + 6;
   27064:	3206      	adds	r2, #6
   27066:	4411      	add	r1, r2
	    conn->tx_head &&
   27068:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
						      conn->lll.latency + 6;
   2706c:	b289      	uxth	r1, r1
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   2706e:	f36f 0502 	bfc	r5, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
   27072:	f8a0 10f4 	strh.w	r1, [r0, #244]	; 0xf4
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   27076:	8119      	strh	r1, [r3, #8]
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   27078:	f1a3 0009 	sub.w	r0, r3, #9
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   2707c:	f884 511a 	strb.w	r5, [r4, #282]	; 0x11a
	if (
   27080:	b122      	cbz	r2, 2708c <event_conn_upd_prep+0x2fc>
	    !conn->llcp_enc.pause_tx &&
   27082:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   27086:	078e      	lsls	r6, r1, #30
   27088:	f140 818f 	bpl.w	273aa <event_conn_upd_prep+0x61a>
		if (!conn->tx_ctrl) {
   2708c:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   27090:	2900      	cmp	r1, #0
   27092:	f000 81a3 	beq.w	273dc <event_conn_upd_prep+0x64c>
	tx->next = conn->tx_ctrl_last->next;
   27096:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   2709a:	6811      	ldr	r1, [r2, #0]
   2709c:	f843 1c09 	str.w	r1, [r3, #-9]
	conn->tx_ctrl_last->next = tx;
   270a0:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   270a2:	f853 2c09 	ldr.w	r2, [r3, #-9]
	conn->tx_ctrl_last = tx;
   270a6:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   270aa:	2a00      	cmp	r2, #0
   270ac:	f000 8193 	beq.w	273d6 <event_conn_upd_prep+0x646>
			return -EINPROGRESS;
   270b0:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
   270b4:	b00b      	add	sp, #44	; 0x2c
   270b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   270ba:	fb09 1113 	mls	r1, r9, r3, r1
   270be:	4815      	ldr	r0, [pc, #84]	; (27114 <event_conn_upd_prep+0x384>)
   270c0:	f240 43e2 	movw	r3, #1250	; 0x4e2
   270c4:	b289      	uxth	r1, r1
   270c6:	fb03 f101 	mul.w	r1, r3, r1
   270ca:	fba1 0100 	umull	r0, r1, r1, r0
   270ce:	a30e      	add	r3, pc, #56	; (adr r3, 27108 <event_conn_upd_prep+0x378>)
   270d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   270d4:	f7ff f814 	bl	26100 <__aeabi_uldivmod>
   270d8:	1a3f      	subs	r7, r7, r0
   270da:	e6fa      	b.n	26ed2 <event_conn_upd_prep+0x142>
		LL_ASSERT(rx && rx->hdr.link);
   270dc:	4a12      	ldr	r2, [pc, #72]	; (27128 <event_conn_upd_prep+0x398>)
   270de:	4919      	ldr	r1, [pc, #100]	; (27144 <event_conn_upd_prep+0x3b4>)
   270e0:	4813      	ldr	r0, [pc, #76]	; (27130 <event_conn_upd_prep+0x3a0>)
   270e2:	f44f 6342 	mov.w	r3, #3104	; 0xc20
   270e6:	f022 fac5 	bl	49674 <printk>
   270ea:	4040      	eors	r0, r0
   270ec:	f380 8811 	msr	BASEPRI, r0
   270f0:	f04f 0003 	mov.w	r0, #3
   270f4:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   270f6:	f8d9 0000 	ldr.w	r0, [r9]
   270fa:	e69b      	b.n	26e34 <event_conn_upd_prep+0xa4>
		switch (conn->llcp_cu.state) {
   270fc:	f06f 000f 	mvn.w	r0, #15
}
   27100:	b00b      	add	sp, #44	; 0x2c
   27102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27106:	bf00      	nop
   27108:	1afd498d 	.word	0x1afd498d
   2710c:	00000007 	.word	0x00000007
   27110:	20005254 	.word	0x20005254
   27114:	3b9aca00 	.word	0x3b9aca00
   27118:	026259ff 	.word	0x026259ff
   2711c:	01c9c37f 	.word	0x01c9c37f
   27120:	20002d58 	.word	0x20002d58
   27124:	0003910d 	.word	0x0003910d
   27128:	00052970 	.word	0x00052970
   2712c:	00052a50 	.word	0x00052a50
   27130:	00052460 	.word	0x00052460
   27134:	1afd498d 	.word	0x1afd498d
   27138:	0003df45 	.word	0x0003df45
   2713c:	0003dd55 	.word	0x0003dd55
   27140:	000390b5 	.word	0x000390b5
   27144:	00052a3c 	.word	0x00052a3c
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
   27148:	f8df 8324 	ldr.w	r8, [pc, #804]	; 27470 <event_conn_upd_prep+0x6e0>
		rx = ll_pdu_rx_alloc_peek(1);
   2714c:	2001      	movs	r0, #1
   2714e:	f010 fa1b 	bl	37588 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   27152:	4606      	mov	r6, r0
   27154:	2800      	cmp	r0, #0
   27156:	f000 8152 	beq.w	273fe <event_conn_upd_prep+0x66e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   2715a:	48c6      	ldr	r0, [pc, #792]	; (27474 <event_conn_upd_prep+0x6e4>)
   2715c:	f00c fbbe 	bl	338dc <mem_acquire>
		if (!tx) {
   27160:	4605      	mov	r5, r0
   27162:	2800      	cmp	r0, #0
   27164:	f000 814b 	beq.w	273fe <event_conn_upd_prep+0x66e>
	if (!conn_upd_curr) {
   27168:	4bc3      	ldr	r3, [pc, #780]	; (27478 <event_conn_upd_prep+0x6e8>)
   2716a:	681a      	ldr	r2, [r3, #0]
   2716c:	2a00      	cmp	r2, #0
   2716e:	f000 811a 	beq.w	273a6 <event_conn_upd_prep+0x616>
		(void)ll_pdu_rx_alloc();
   27172:	f010 fa27 	bl	375c4 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
   27176:	6833      	ldr	r3, [r6, #0]
   27178:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   2717c:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   2717e:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
   27180:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   27184:	f043 0303 	orr.w	r3, r3, #3
   27188:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   2718a:	230c      	movs	r3, #12
   2718c:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   2718e:	2300      	movs	r3, #0
   27190:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
   27192:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   27196:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   27198:	4ab8      	ldr	r2, [pc, #736]	; (2747c <event_conn_upd_prep+0x6ec>)
   2719a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2719e:	fba2 2303 	umull	r2, r3, r2, r3
   271a2:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
   271a4:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   271a8:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
   271ac:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   271b0:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   271b4:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   271b8:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   271bc:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
   271c0:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   271c4:	f8c4 70fc 	str.w	r7, [r4, #252]	; 0xfc
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
   271c8:	2203      	movs	r2, #3
   271ca:	f362 0302 	bfi	r3, r2, #0, #3
   271ce:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   271d2:	68a3      	ldr	r3, [r4, #8]
   271d4:	2b00      	cmp	r3, #0
   271d6:	da0a      	bge.n	271ee <event_conn_upd_prep+0x45e>
			uint32_t ticks_prepare_to_start =
   271d8:	68e1      	ldr	r1, [r4, #12]
   271da:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   271dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
   271e0:	4291      	cmp	r1, r2
   271e2:	bf2c      	ite	cs
   271e4:	187f      	addcs	r7, r7, r1
   271e6:	18bf      	addcc	r7, r7, r2
   271e8:	1aff      	subs	r7, r7, r3
   271ea:	f8c4 70fc 	str.w	r7, [r4, #252]	; 0xfc
		mfy_sched_offset->fp = fp_mfy_select_or_use;
   271ee:	4ba4      	ldr	r3, [pc, #656]	; (27480 <event_conn_upd_prep+0x6f0>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   271f0:	2201      	movs	r2, #1
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
   271f2:	3509      	adds	r5, #9
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
   271f4:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   271f8:	2102      	movs	r1, #2
   271fa:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
   271fc:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   27200:	f00c fc46 	bl	33a90 <mayfly_enqueue>
		LL_ASSERT(!retval);
   27204:	2800      	cmp	r0, #0
   27206:	f43f af53 	beq.w	270b0 <event_conn_upd_prep+0x320>
   2720a:	4a9e      	ldr	r2, [pc, #632]	; (27484 <event_conn_upd_prep+0x6f4>)
   2720c:	499e      	ldr	r1, [pc, #632]	; (27488 <event_conn_upd_prep+0x6f8>)
   2720e:	489f      	ldr	r0, [pc, #636]	; (2748c <event_conn_upd_prep+0x6fc>)
   27210:	f640 3373 	movw	r3, #2931	; 0xb73
   27214:	f022 fa2e 	bl	49674 <printk>
   27218:	4040      	eors	r0, r0
   2721a:	f380 8811 	msr	BASEPRI, r0
   2721e:	f04f 0003 	mov.w	r0, #3
   27222:	df02      	svc	2
	return -EINPROGRESS;
   27224:	f06f 0076 	mvn.w	r0, #118	; 0x76
   27228:	e714      	b.n	27054 <event_conn_upd_prep+0x2c4>
		switch (conn->llcp_cu.state) {
   2722a:	f8df 8264 	ldr.w	r8, [pc, #612]	; 27490 <event_conn_upd_prep+0x700>
   2722e:	e78d      	b.n	2714c <event_conn_upd_prep+0x3bc>
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
   27230:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
	    conn->tx_head &&
   27234:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
			conn->llcp_ack = conn->llcp_req;
   27238:	f890 00f0 	ldrb.w	r0, [r0, #240]	; 0xf0
   2723c:	f884 00f1 	strb.w	r0, [r4, #241]	; 0xf1
			conn->llcp_cu.ack = conn->llcp_cu.req;
   27240:	f894 0118 	ldrb.w	r0, [r4, #280]	; 0x118
	conn_upd_curr = NULL;
   27244:	498c      	ldr	r1, [pc, #560]	; (27478 <event_conn_upd_prep+0x6e8>)
			conn->llcp_cu.ack = conn->llcp_cu.req;
   27246:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   2724a:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
   2724e:	f884 0195 	strb.w	r0, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   27252:	2000      	movs	r0, #0
   27254:	6008      	str	r0, [r1, #0]
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   27256:	f1a2 0109 	sub.w	r1, r2, #9
	if (
   2725a:	b1c3      	cbz	r3, 2728e <event_conn_upd_prep+0x4fe>
	    !conn->llcp_enc.pause_tx &&
   2725c:	f894 0176 	ldrb.w	r0, [r4, #374]	; 0x176
	    conn->tx_head &&
   27260:	0780      	lsls	r0, r0, #30
   27262:	d414      	bmi.n	2728e <event_conn_upd_prep+0x4fe>
	    !conn->llcp_phy.pause_tx &&
   27264:	f894 01cf 	ldrb.w	r0, [r4, #463]	; 0x1cf
   27268:	07c7      	lsls	r7, r0, #31
   2726a:	d410      	bmi.n	2728e <event_conn_upd_prep+0x4fe>
		if (conn->tx_head == conn->tx_data) {
   2726c:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   27270:	4283      	cmp	r3, r0
   27272:	f000 80e0 	beq.w	27436 <event_conn_upd_prep+0x6a6>
		} else if (!conn->tx_ctrl) {
   27276:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
   2727a:	b968      	cbnz	r0, 27298 <event_conn_upd_prep+0x508>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2727c:	7918      	ldrb	r0, [r3, #4]
   2727e:	f000 0003 	and.w	r0, r0, #3
   27282:	2803      	cmp	r0, #3
   27284:	f000 80e8 	beq.w	27458 <event_conn_upd_prep+0x6c8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   27288:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   2728c:	e006      	b.n	2729c <event_conn_upd_prep+0x50c>
		if (!conn->tx_ctrl) {
   2728e:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
   27292:	2800      	cmp	r0, #0
   27294:	f000 80ac 	beq.w	273f0 <event_conn_upd_prep+0x660>
	tx->next = conn->tx_ctrl_last->next;
   27298:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   2729c:	6818      	ldr	r0, [r3, #0]
   2729e:	f842 0c09 	str.w	r0, [r2, #-9]
	conn->tx_ctrl_last->next = tx;
   272a2:	6019      	str	r1, [r3, #0]
	if (!tx->next) {
   272a4:	f852 3c09 	ldr.w	r3, [r2, #-9]
	conn->tx_ctrl_last = tx;
   272a8:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
	if (!tx->next) {
   272ac:	2b00      	cmp	r3, #0
   272ae:	f000 80a9 	beq.w	27404 <event_conn_upd_prep+0x674>
			return -ECANCELED;
   272b2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   272b6:	e6cd      	b.n	27054 <event_conn_upd_prep+0x2c4>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   272b8:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   272bc:	2b00      	cmp	r3, #0
   272be:	f43f ad8f 	beq.w	26de0 <event_conn_upd_prep+0x50>
			conn->periph.llcp_type = LLCP_NONE;
   272c2:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
   272c6:	e58f      	b.n	26de8 <event_conn_upd_prep+0x58>
		if ((conn->llcp_cu.interval != lll->interval) ||
   272c8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   272ca:	4291      	cmp	r1, r2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   272cc:	f8b4 1120 	ldrh.w	r1, [r4, #288]	; 0x120
		if ((conn->llcp_cu.interval != lll->interval) ||
   272d0:	f47f adbd 	bne.w	26e4e <event_conn_upd_prep+0xbe>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   272d4:	f240 4ee2 	movw	lr, #1250	; 0x4e2
   272d8:	fb0e fe03 	mul.w	lr, lr, r3
   272dc:	f242 7c10 	movw	ip, #10000	; 0x2710
   272e0:	fb0c ec01 	mla	ip, ip, r1, lr
   272e4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   272e8:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
   272ec:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
   272f0:	fa1f fc8c 	uxth.w	ip, ip
   272f4:	45e6      	cmp	lr, ip
   272f6:	f47f adaa 	bne.w	26e4e <event_conn_upd_prep+0xbe>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   272fa:	2301      	movs	r3, #1
   272fc:	f889 3004 	strb.w	r3, [r9, #4]
   27300:	e5b5      	b.n	26e6e <event_conn_upd_prep+0xde>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
   27302:	2201      	movs	r2, #1
   27304:	2102      	movs	r1, #2
   27306:	4610      	mov	r0, r2
   27308:	f00c fb8e 	bl	33a28 <mayfly_enable>
   2730c:	e6a1      	b.n	27052 <event_conn_upd_prep+0x2c2>
				lll->periph.window_widening_periodic_us *
   2730e:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
   27310:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   27312:	fb02 3318 	mls	r3, r2, r8, r3
   27316:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
   27318:	f019 f92c 	bl	40574 <lll_clock_ppm_local_get>
   2731c:	4605      	mov	r5, r0
   2731e:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27322:	f8df 8170 	ldr.w	r8, [pc, #368]	; 27494 <event_conn_upd_prep+0x704>
				ceiling_fraction(((lll_clock_ppm_local_get() +
   27326:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   2732a:	f019 f925 	bl	40578 <lll_clock_ppm_get>
   2732e:	4405      	add	r5, r0
   27330:	fb06 f505 	mul.w	r5, r6, r5
   27334:	4b58      	ldr	r3, [pc, #352]	; (27498 <event_conn_upd_prep+0x708>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   27336:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
				ceiling_fraction(((lll_clock_ppm_local_get() +
   2733a:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   2733e:	f205 253f 	addw	r5, r5, #575	; 0x23f
   27342:	fba3 3505 	umull	r3, r5, r3, r5
   27346:	0cad      	lsrs	r5, r5, #18
			lll->periph.window_widening_prepare_us +=
   27348:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_widening_periodic_us =
   2734a:	6425      	str	r5, [r4, #64]	; 0x40
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   2734c:	fb0b f202 	mul.w	r2, fp, r2
				lll->periph.window_widening_periodic_us *
   27350:	fb05 f00a 	mul.w	r0, r5, sl
			lll->periph.window_size_prepare_us =
   27354:	6522      	str	r2, [r4, #80]	; 0x50
				(conn_interval_us >> 1) - EVENT_IFS_US;
   27356:	0872      	lsrs	r2, r6, #1
			lll->periph.window_widening_prepare_us +=
   27358:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
   2735a:	3a96      	subs	r2, #150	; 0x96
   2735c:	4293      	cmp	r3, r2
   2735e:	bf28      	it	cs
   27360:	4613      	movcs	r3, r2
   27362:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
   27366:	2300      	movs	r3, #0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27368:	fba0 0108 	umull	r0, r1, r0, r8
			conn->periph.ticks_to_offset = 0U;
   2736c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27370:	a33d      	add	r3, pc, #244	; (adr r3, 27468 <event_conn_upd_prep+0x6d8>)
   27372:	e9d3 2300 	ldrd	r2, r3, [r3]
   27376:	f7fe fec3 	bl	26100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   2737a:	4b40      	ldr	r3, [pc, #256]	; (2747c <event_conn_upd_prep+0x6ec>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   2737c:	1a3f      	subs	r7, r7, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   2737e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   27382:	fba3 3000 	umull	r3, r0, r3, r0
   27386:	0a80      	lsrs	r0, r0, #10
   27388:	fb0b f000 	mul.w	r0, fp, r0
   2738c:	fba0 0108 	umull	r0, r1, r0, r8
   27390:	a335      	add	r3, pc, #212	; (adr r3, 27468 <event_conn_upd_prep+0x6d8>)
   27392:	e9d3 2300 	ldrd	r2, r3, [r3]
   27396:	f7fe feb3 	bl	26100 <__aeabi_uldivmod>
			periodic_us -= lll->periph.window_widening_periodic_us;
   2739a:	1b75      	subs	r5, r6, r5
		lll->interval = conn->llcp_cu.interval;
   2739c:	f8b4 911c 	ldrh.w	r9, [r4, #284]	; 0x11c
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   273a0:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
   273a4:	e5b2      	b.n	26f0c <event_conn_upd_prep+0x17c>
		conn_upd_curr = conn;
   273a6:	601c      	str	r4, [r3, #0]
   273a8:	e6e3      	b.n	27172 <event_conn_upd_prep+0x3e2>
	    !conn->llcp_phy.pause_tx &&
   273aa:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   273ae:	07cd      	lsls	r5, r1, #31
   273b0:	f53f ae6c 	bmi.w	2708c <event_conn_upd_prep+0x2fc>
		if (conn->tx_head == conn->tx_data) {
   273b4:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   273b8:	428a      	cmp	r2, r1
   273ba:	d028      	beq.n	2740e <event_conn_upd_prep+0x67e>
		} else if (!conn->tx_ctrl) {
   273bc:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   273c0:	2900      	cmp	r1, #0
   273c2:	f47f ae68 	bne.w	27096 <event_conn_upd_prep+0x306>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   273c6:	7911      	ldrb	r1, [r2, #4]
   273c8:	f001 0103 	and.w	r1, r1, #3
   273cc:	2903      	cmp	r1, #3
   273ce:	d065      	beq.n	2749c <event_conn_upd_prep+0x70c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   273d0:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
   273d4:	e661      	b.n	2709a <event_conn_upd_prep+0x30a>
		conn->tx_data_last = tx;
   273d6:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   273da:	e669      	b.n	270b0 <event_conn_upd_prep+0x320>
			tx->next = conn->tx_head;
   273dc:	f843 2c09 	str.w	r2, [r3, #-9]
				conn->tx_ctrl = tx;
   273e0:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   273e4:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   273e8:	2a00      	cmp	r2, #0
   273ea:	f47f ae61 	bne.w	270b0 <event_conn_upd_prep+0x320>
   273ee:	e7f2      	b.n	273d6 <event_conn_upd_prep+0x646>
			tx->next = conn->tx_head;
   273f0:	f842 3c09 	str.w	r3, [r2, #-9]
				conn->tx_ctrl = tx;
   273f4:	e9c4 1175 	strd	r1, r1, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   273f8:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
   273fc:	e756      	b.n	272ac <event_conn_upd_prep+0x51c>
			return -ENOBUFS;
   273fe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27402:	e627      	b.n	27054 <event_conn_upd_prep+0x2c4>
		conn->tx_data_last = tx;
   27404:	f8c4 11e4 	str.w	r1, [r4, #484]	; 0x1e4
			return -ECANCELED;
   27408:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2740c:	e622      	b.n	27054 <event_conn_upd_prep+0x2c4>
			conn->tx_data = conn->tx_data->next;
   2740e:	6811      	ldr	r1, [r2, #0]
   27410:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   27414:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   27418:	2900      	cmp	r1, #0
   2741a:	f47f ae3c 	bne.w	27096 <event_conn_upd_prep+0x306>
			tx->next = conn->tx_head->next;
   2741e:	6811      	ldr	r1, [r2, #0]
   27420:	f843 1c09 	str.w	r1, [r3, #-9]
			conn->tx_head->next = tx;
   27424:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   27426:	f853 2c09 	ldr.w	r2, [r3, #-9]
				conn->tx_ctrl_last = tx;
   2742a:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
	if (!tx->next) {
   2742e:	2a00      	cmp	r2, #0
   27430:	f47f ae3e 	bne.w	270b0 <event_conn_upd_prep+0x320>
   27434:	e7cf      	b.n	273d6 <event_conn_upd_prep+0x646>
			conn->tx_data = conn->tx_data->next;
   27436:	6818      	ldr	r0, [r3, #0]
   27438:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   2743c:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
   27440:	2800      	cmp	r0, #0
   27442:	f47f af29 	bne.w	27298 <event_conn_upd_prep+0x508>
			tx->next = conn->tx_head->next;
   27446:	6818      	ldr	r0, [r3, #0]
   27448:	f842 0c09 	str.w	r0, [r2, #-9]
			conn->tx_head->next = tx;
   2744c:	6019      	str	r1, [r3, #0]
	if (!tx->next) {
   2744e:	f852 3c09 	ldr.w	r3, [r2, #-9]
				conn->tx_ctrl_last = tx;
   27452:	e9c4 1176 	strd	r1, r1, [r4, #472]	; 0x1d8
   27456:	e729      	b.n	272ac <event_conn_upd_prep+0x51c>
	    ((pdu_data_tx->llctrl.opcode !=
   27458:	79d8      	ldrb	r0, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2745a:	2803      	cmp	r0, #3
   2745c:	d0f3      	beq.n	27446 <event_conn_upd_prep+0x6b6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   2745e:	280a      	cmp	r0, #10
   27460:	f47f af12 	bne.w	27288 <event_conn_upd_prep+0x4f8>
   27464:	e7ef      	b.n	27446 <event_conn_upd_prep+0x6b6>
   27466:	bf00      	nop
   27468:	1afd498d 	.word	0x1afd498d
   2746c:	00000007 	.word	0x00000007
   27470:	0003e5a5 	.word	0x0003e5a5
   27474:	200052e8 	.word	0x200052e8
   27478:	20005254 	.word	0x20005254
   2747c:	d1b71759 	.word	0xd1b71759
   27480:	20000ac0 	.word	0x20000ac0
   27484:	00052970 	.word	0x00052970
   27488:	00052764 	.word	0x00052764
   2748c:	00052460 	.word	0x00052460
   27490:	000282d1 	.word	0x000282d1
   27494:	3b9aca00 	.word	0x3b9aca00
   27498:	431bde83 	.word	0x431bde83
	    ((pdu_data_tx->llctrl.opcode !=
   2749c:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2749e:	2903      	cmp	r1, #3
   274a0:	d0bd      	beq.n	2741e <event_conn_upd_prep+0x68e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   274a2:	290a      	cmp	r1, #10
   274a4:	d194      	bne.n	273d0 <event_conn_upd_prep+0x640>
   274a6:	e7ba      	b.n	2741e <event_conn_upd_prep+0x68e>
			LL_ASSERT(0);
   274a8:	4a07      	ldr	r2, [pc, #28]	; (274c8 <event_conn_upd_prep+0x738>)
   274aa:	4908      	ldr	r1, [pc, #32]	; (274cc <event_conn_upd_prep+0x73c>)
   274ac:	4808      	ldr	r0, [pc, #32]	; (274d0 <event_conn_upd_prep+0x740>)
   274ae:	f640 33c7 	movw	r3, #3015	; 0xbc7
   274b2:	f022 f8df 	bl	49674 <printk>
   274b6:	4040      	eors	r0, r0
   274b8:	f380 8811 	msr	BASEPRI, r0
   274bc:	f04f 0003 	mov.w	r0, #3
   274c0:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
   274c2:	f04f 0800 	mov.w	r8, #0
			break;
   274c6:	e641      	b.n	2714c <event_conn_upd_prep+0x3bc>
   274c8:	00052970 	.word	0x00052970
   274cc:	000524c0 	.word	0x000524c0
   274d0:	00052460 	.word	0x00052460
   274d4:	00000000 	.word	0x00000000

000274d8 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
   274d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   274dc:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
   274de:	f8d2 b000 	ldr.w	fp, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   274e2:	681b      	ldr	r3, [r3, #0]
{
   274e4:	b097      	sub	sp, #92	; 0x5c
   274e6:	468a      	mov	sl, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   274e8:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
   274ea:	7f03      	ldrb	r3, [r0, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   274ec:	f100 011e 	add.w	r1, r0, #30
	peer_addr_type = pdu_adv->tx_addr;
   274f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
   274f4:	4604      	mov	r4, r0
   274f6:	4615      	mov	r5, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   274f8:	a814      	add	r0, sp, #80	; 0x50
   274fa:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
   274fc:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   27500:	f024 f9c3 	bl	4b88a <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
   27504:	f89a 0011 	ldrb.w	r0, [sl, #17]
   27508:	900d      	str	r0, [sp, #52]	; 0x34

	if (rl_idx != FILTER_IDX_NONE) {
   2750a:	28ff      	cmp	r0, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   2750c:	f10d 0848 	add.w	r8, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
   27510:	f000 8083 	beq.w	2761a <ull_periph_setup+0x142>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   27514:	4642      	mov	r2, r8
   27516:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   2751a:	f017 faf3 	bl	3eb04 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
   2751e:	f89d 6047 	ldrb.w	r6, [sp, #71]	; 0x47
   27522:	3602      	adds	r6, #2
   27524:	b2f6      	uxtb	r6, r6
   27526:	f88d 6047 	strb.w	r6, [sp, #71]	; 0x47
	link = rx->link;

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	const uint8_t peer_id_addr_type = (peer_addr_type & 0x01);
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
	const uint8_t *own_id_addr = adv->own_id_addr;
   2752a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
   2752c:	7f27      	ldrb	r7, [r4, #28]
	link = rx->link;
   2752e:	f8d4 c000 	ldr.w	ip, [r4]
   27532:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
	const uint8_t *own_id_addr = adv->own_id_addr;
   27536:	f103 0971 	add.w	r9, r3, #113	; 0x71
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
   2753a:	09ff      	lsrs	r7, r7, #7

	/* Do not connect twice to the same peer */
	if (ull_conn_peer_connected(own_id_addr_type, own_id_addr,
   2753c:	4643      	mov	r3, r8
   2753e:	f006 0201 	and.w	r2, r6, #1
   27542:	4649      	mov	r1, r9
   27544:	4638      	mov	r0, r7
   27546:	f012 fdb1 	bl	3a0ac <ull_conn_peer_connected>
   2754a:	2800      	cmp	r0, #0
   2754c:	d14b      	bne.n	275e6 <ull_periph_setup+0x10e>

		return;
	}

	/* Remember peer and own identity address */
	conn->peer_id_addr_type = peer_id_addr_type;
   2754e:	f89b 20d6 	ldrb.w	r2, [fp, #214]	; 0xd6
   27552:	900e      	str	r0, [sp, #56]	; 0x38
   27554:	f366 0241 	bfi	r2, r6, #1, #1
   27558:	f88b 20d6 	strb.w	r2, [fp, #214]	; 0xd6
	(void)memcpy(conn->peer_id_addr, peer_id_addr,
   2755c:	4641      	mov	r1, r8
   2755e:	2206      	movs	r2, #6
   27560:	f10b 00dd 	add.w	r0, fp, #221	; 0xdd
   27564:	f024 f991 	bl	4b88a <memcpy>
		     sizeof(conn->peer_id_addr));
	conn->own_id_addr_type = own_id_addr_type;
   27568:	f89b 20d6 	ldrb.w	r2, [fp, #214]	; 0xd6
   2756c:	f367 0200 	bfi	r2, r7, #0, #1
	(void)memcpy(conn->own_id_addr, own_id_addr,
   27570:	4649      	mov	r1, r9
	conn->own_id_addr_type = own_id_addr_type;
   27572:	f88b 20d6 	strb.w	r2, [fp, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr,
   27576:	f10b 00d7 	add.w	r0, fp, #215	; 0xd7
   2757a:	2206      	movs	r2, #6
   2757c:	f024 f985 	bl	4b88a <memcpy>
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   27580:	1d2f      	adds	r7, r5, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   27582:	2203      	movs	r2, #3
   27584:	f104 012e 	add.w	r1, r4, #46	; 0x2e
   27588:	f105 0008 	add.w	r0, r5, #8
   2758c:	f024 f97d 	bl	4b88a <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   27590:	f105 0618 	add.w	r6, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   27594:	2204      	movs	r2, #4
   27596:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   2759a:	4638      	mov	r0, r7
   2759c:	f024 f975 	bl	4b88a <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   275a0:	2205      	movs	r2, #5
   275a2:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   275a6:	4630      	mov	r0, r6
   275a8:	f024 f96f 	bl	4b88a <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   275ac:	4630      	mov	r0, r6
   275ae:	2105      	movs	r1, #5
   275b0:	f00c fb68 	bl	33c84 <util_ones_count_get>
   275b4:	7f6a      	ldrb	r2, [r5, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   275b6:	f894 603f 	ldrb.w	r6, [r4, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   275ba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   275be:	f360 0205 	bfi	r2, r0, #0, #6
   275c2:	776a      	strb	r2, [r5, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   275c4:	f3c6 0204 	ubfx	r2, r6, #0, #5
   275c8:	77aa      	strb	r2, [r5, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   275ca:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   275cc:	81e9      	strh	r1, [r5, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   275ce:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   275d0:	b289      	uxth	r1, r1
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   275d2:	f006 021f 	and.w	r2, r6, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   275d6:	d906      	bls.n	275e6 <ull_periph_setup+0x10e>
   275d8:	321b      	adds	r2, #27
   275da:	f002 021f 	and.w	r2, r2, #31
   275de:	2a0b      	cmp	r2, #11
   275e0:	d801      	bhi.n	275e6 <ull_periph_setup+0x10e>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
   275e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   275e4:	bb09      	cbnz	r1, 2762a <ull_periph_setup+0x152>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
   275e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
   275e8:	68e6      	ldr	r6, [r4, #12]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
   275ea:	980c      	ldr	r0, [sp, #48]	; 0x30
	hdr->disabled_cb = NULL;
   275ec:	2200      	movs	r2, #0
   275ee:	615a      	str	r2, [r3, #20]
	lll->periph.initiated = 0U;
   275f0:	f895 3020 	ldrb.w	r3, [r5, #32]
	rx->type = NODE_RX_TYPE_RELEASE;
   275f4:	2701      	movs	r7, #1
	lll->periph.initiated = 0U;
   275f6:	f362 0300 	bfi	r3, r2, #0, #1
   275fa:	f885 3020 	strb.w	r3, [r5, #32]
		ll_rx_put(link, rx);
   275fe:	4621      	mov	r1, r4
	rx->type = NODE_RX_TYPE_RELEASE;
   27600:	7127      	strb	r7, [r4, #4]
		ll_rx_put(link, rx);
   27602:	f00f ffb1 	bl	37568 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
   27606:	6830      	ldr	r0, [r6, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
   27608:	7137      	strb	r7, [r6, #4]
	ll_rx_put(link, rx);
   2760a:	4631      	mov	r1, r6
   2760c:	f00f ffac 	bl	37568 <ll_rx_put>
	ll_rx_sched();
   27610:	f00f ffb4 	bl	3757c <ll_rx_sched>
}
   27614:	b017      	add	sp, #92	; 0x5c
   27616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
   2761a:	2206      	movs	r2, #6
   2761c:	a914      	add	r1, sp, #80	; 0x50
   2761e:	4640      	mov	r0, r8
   27620:	f024 f933 	bl	4b88a <memcpy>
	const uint8_t peer_id_addr_type = (peer_addr_type & 0x01);
   27624:	f89d 6047 	ldrb.w	r6, [sp, #71]	; 0x47
   27628:	e77f      	b.n	2752a <ull_periph_setup+0x52>
	((struct lll_adv *)ftr->param)->conn = NULL;
   2762a:	f8da 2000 	ldr.w	r2, [sl]
   2762e:	6053      	str	r3, [r2, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   27630:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   27634:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   27638:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2763c:	822b      	strh	r3, [r5, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
   2763e:	f89b 30e4 	ldrb.w	r3, [fp, #228]	; 0xe4
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   27642:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   27644:	920f      	str	r2, [sp, #60]	; 0x3c
	conn->periph.sca = pdu_adv->connect_ind.sca;
   27646:	0976      	lsrs	r6, r6, #5
   27648:	f366 03c5 	bfi	r3, r6, #3, #3
   2764c:	f88b 30e4 	strb.w	r3, [fp, #228]	; 0xe4
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   27650:	f240 46e2 	movw	r6, #1250	; 0x4e2
   27654:	fb06 f901 	mul.w	r9, r6, r1
		ceiling_fraction(((lll_clock_ppm_local_get() +
   27658:	f018 ff8c 	bl	40574 <lll_clock_ppm_local_get>
   2765c:	900e      	str	r0, [sp, #56]	; 0x38
   2765e:	f89b 00e4 	ldrb.w	r0, [fp, #228]	; 0xe4
   27662:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   27666:	f018 ff87 	bl	40578 <lll_clock_ppm_get>
   2766a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2766c:	4ac2      	ldr	r2, [pc, #776]	; (27978 <ull_periph_setup+0x4a0>)
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2766e:	8a29      	ldrh	r1, [r5, #16]
		ceiling_fraction(((lll_clock_ppm_local_get() +
   27670:	4403      	add	r3, r0
   27672:	fb09 f303 	mul.w	r3, r9, r3
   27676:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   2767a:	f203 233f 	addw	r3, r3, #575	; 0x23f
   2767e:	fba2 2303 	umull	r2, r3, r2, r3
   27682:	0c9b      	lsrs	r3, r3, #18
	lll->periph.window_widening_periodic_us =
   27684:	626b      	str	r3, [r5, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   27686:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   2768a:	4abc      	ldr	r2, [pc, #752]	; (2797c <ull_periph_setup+0x4a4>)
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   2768c:	fb06 f303 	mul.w	r3, r6, r3
   27690:	63ab      	str	r3, [r5, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   27692:	ea4f 0359 	mov.w	r3, r9, lsr #1
   27696:	3b96      	subs	r3, #150	; 0x96
   27698:	62ab      	str	r3, [r5, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   2769a:	8f26      	ldrh	r6, [r4, #56]	; 0x38
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   2769c:	4bb8      	ldr	r3, [pc, #736]	; (27980 <ull_periph_setup+0x4a8>)
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   2769e:	f242 7010 	movw	r0, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   276a2:	444a      	add	r2, r9
   276a4:	fbb2 f2f9 	udiv	r2, r2, r9
   276a8:	f8ab 20c6 	strh.w	r2, [fp, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   276ac:	b2b2      	uxth	r2, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   276ae:	fb00 9202 	mla	r2, r0, r2, r9
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   276b2:	444b      	add	r3, r9
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   276b4:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   276b6:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   276b8:	fbb2 f2f9 	udiv	r2, r2, r9
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   276bc:	fbb3 f3f9 	udiv	r3, r3, r9
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   276c0:	f8ab 20c2 	strh.w	r2, [fp, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   276c4:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   276c6:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   276c8:	f8ab 20ce 	strh.w	r2, [fp, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   276cc:	dd04      	ble.n	276d8 <ull_periph_setup+0x200>
   276ce:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
   276d2:	31fa      	adds	r1, #250	; 0xfa
   276d4:	440a      	add	r2, r1
   276d6:	b292      	uxth	r2, r2
   276d8:	f8ab 20ca 	strh.w	r2, [fp, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
   276dc:	4639      	mov	r1, r7
   276de:	2204      	movs	r2, #4
   276e0:	f10b 00e8 	add.w	r0, fp, #232	; 0xe8
   276e4:	f024 f8d1 	bl	4b88a <memcpy>
		chan_sel = pdu_adv->chan_sel;
   276e8:	4623      	mov	r3, r4
   276ea:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
   276ee:	f3c2 1240 	ubfx	r2, r2, #5, #1
   276f2:	920e      	str	r2, [sp, #56]	; 0x38
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   276f4:	07da      	lsls	r2, r3, #31
   276f6:	f100 8106 	bmi.w	27906 <ull_periph_setup+0x42e>
	cc->status = 0U;
   276fa:	f44f 7380 	mov.w	r3, #256	; 0x100
   276fe:	83a3      	strh	r3, [r4, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   27700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27702:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
   27706:	f017 ffcd 	bl	3f6a4 <ull_filter_lll_lrpa_used>
   2770a:	2800      	cmp	r0, #0
   2770c:	f000 80ed 	beq.w	278ea <ull_periph_setup+0x412>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   27710:	2206      	movs	r2, #6
   27712:	f104 0124 	add.w	r1, r4, #36	; 0x24
   27716:	f104 002b 	add.w	r0, r4, #43	; 0x2b
   2771a:	f024 f8b6 	bl	4b88a <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   2771e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   27720:	2bff      	cmp	r3, #255	; 0xff
   27722:	f000 80e9 	beq.w	278f8 <ull_periph_setup+0x420>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   27726:	a914      	add	r1, sp, #80	; 0x50
   27728:	2206      	movs	r2, #6
   2772a:	f104 0025 	add.w	r0, r4, #37	; 0x25
   2772e:	f024 f8ac 	bl	4b88a <memcpy>
	cc->peer_addr_type = peer_addr_type;
   27732:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   27736:	77a3      	strb	r3, [r4, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
   27738:	4641      	mov	r1, r8
   2773a:	2206      	movs	r2, #6
   2773c:	f104 001f 	add.w	r0, r4, #31
   27740:	f024 f8a3 	bl	4b88a <memcpy>
	cc->sca = conn->periph.sca;
   27744:	f89b 30e4 	ldrb.w	r3, [fp, #228]	; 0xe4
	cc->interval = lll->interval;
   27748:	89ea      	ldrh	r2, [r5, #14]
   2774a:	8662      	strh	r2, [r4, #50]	; 0x32
	cc->sca = conn->periph.sca;
   2774c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->latency = lll->latency;
   27750:	8a2a      	ldrh	r2, [r5, #16]
   27752:	86a2      	strh	r2, [r4, #52]	; 0x34
	cc->sca = conn->periph.sca;
   27754:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	cc->timeout = timeout;
   27758:	86e6      	strh	r6, [r4, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
   2775a:	4658      	mov	r0, fp
   2775c:	f012 f936 	bl	399cc <ll_conn_handle_get>
		ll_rx_put(link, rx);
   27760:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
   27762:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
   27764:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
   27766:	f8da 4004 	ldr.w	r4, [sl, #4]
		ll_rx_put(link, rx);
   2776a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2776c:	f00f fefc 	bl	37568 <ll_rx_put>
		rx->handle = lll->handle;
   27770:	89ab      	ldrh	r3, [r5, #12]
   27772:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   27774:	231b      	movs	r3, #27
   27776:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
   27778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		link = rx->link;
   2777a:	f8d4 8000 	ldr.w	r8, [r4]
		if (chan_sel) {
   2777e:	2b00      	cmp	r3, #0
   27780:	f040 80d6 	bne.w	27930 <ull_periph_setup+0x458>
   27784:	9e0e      	ldr	r6, [sp, #56]	; 0x38
			cs->csa = 0x00;
   27786:	7726      	strb	r6, [r4, #28]
	ll_rx_put(link, rx);
   27788:	4621      	mov	r1, r4
   2778a:	4640      	mov	r0, r8
   2778c:	f00f feec 	bl	37568 <ll_rx_put>
	ll_rx_sched();
   27790:	f00f fef4 	bl	3757c <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27794:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
   27798:	f8b5 6040 	ldrh.w	r6, [r5, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
   2779c:	f8b5 4042 	ldrh.w	r4, [r5, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   277a0:	2101      	movs	r1, #1
   277a2:	f000 0007 	and.w	r0, r0, #7
   277a6:	f018 fcf3 	bl	40190 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   277aa:	4434      	add	r4, r6
   277ac:	f504 74e1 	add.w	r4, r4, #450	; 0x1c2
   277b0:	1821      	adds	r1, r4, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   277b2:	4680      	mov	r8, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   277b4:	4873      	ldr	r0, [pc, #460]	; (27984 <ull_periph_setup+0x4ac>)
	conn->ull.ticks_active_to_start = 0U;
   277b6:	2700      	movs	r7, #0
	conn->ull.ticks_prepare_to_start =
   277b8:	2331      	movs	r3, #49	; 0x31
   277ba:	f8cb 3008 	str.w	r3, [fp, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   277be:	fba1 0100 	umull	r0, r1, r1, r0
   277c2:	a36b      	add	r3, pc, #428	; (adr r3, 27970 <ull_periph_setup+0x498>)
   277c4:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
   277c8:	f8cb 7004 	str.w	r7, [fp, #4]
	conn->ull.ticks_preempt_to_start =
   277cc:	f8cb 700c 	str.w	r7, [fp, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   277d0:	f7fe fc96 	bl	26100 <__aeabi_uldivmod>
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   277d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	conn_offset_us = ftr->radio_end_us;
   277d6:	f8da 400c 	ldr.w	r4, [sl, #12]
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   277da:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   277dc:	f240 43e2 	movw	r3, #1250	; 0x4e2
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   277e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   277e4:	fb03 4402 	mla	r4, r3, r2, r4
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   277e8:	2102      	movs	r1, #2
   277ea:	463a      	mov	r2, r7
	conn->ull.ticks_slot =
   277ec:	f8cb 0010 	str.w	r0, [fp, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   277f0:	2001      	movs	r0, #1
   277f2:	f00c f919 	bl	33a28 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
   277f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   277f8:	4628      	mov	r0, r5
   277fa:	f010 ffd5 	bl	387a8 <ull_adv_handle_get>
   277fe:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   27800:	4b61      	ldr	r3, [pc, #388]	; (27988 <ull_periph_setup+0x4b0>)
   27802:	9500      	str	r5, [sp, #0]
   27804:	b2d2      	uxtb	r2, r2
   27806:	4638      	mov	r0, r7
   27808:	2101      	movs	r1, #1
   2780a:	f00d fba7 	bl	34f5c <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
   2780e:	f204 44b2 	addw	r4, r4, #1202	; 0x4b2
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27812:	2801      	cmp	r0, #1
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   27814:	eba9 0606 	sub.w	r6, r9, r6
	conn_offset_us -= ready_delay_us;
   27818:	eba4 0408 	sub.w	r4, r4, r8
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   2781c:	f000 8092 	beq.w	27944 <ull_periph_setup+0x46c>
	if (adv->lll.is_hdcd) {
   27820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   27822:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   27826:	07db      	lsls	r3, r3, #31
   27828:	d47a      	bmi.n	27920 <ull_periph_setup+0x448>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   2782a:	4658      	mov	r0, fp
   2782c:	f012 f8ce 	bl	399cc <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27830:	f8df 9150 	ldr.w	r9, [pc, #336]	; 27984 <ull_periph_setup+0x4ac>
   27834:	fba6 8609 	umull	r8, r6, r6, r9
   27838:	a34d      	add	r3, pc, #308	; (adr r3, 27970 <ull_periph_setup+0x498>)
   2783a:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   2783e:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27840:	4631      	mov	r1, r6
   27842:	4640      	mov	r0, r8
   27844:	f7fe fc5c 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27848:	f8da 3008 	ldr.w	r3, [sl, #8]
   2784c:	4a4f      	ldr	r2, [pc, #316]	; (2798c <ull_periph_setup+0x4b4>)
   2784e:	9207      	str	r2, [sp, #28]
   27850:	f1a3 0a3a 	sub.w	sl, r3, #58	; 0x3a
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27854:	4b4e      	ldr	r3, [pc, #312]	; (27990 <ull_periph_setup+0x4b8>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27856:	f8cd b018 	str.w	fp, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   2785a:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
   2785e:	fba7 3103 	umull	r3, r1, r7, r3
   27862:	ebb8 0003 	subs.w	r0, r8, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27866:	4b4b      	ldr	r3, [pc, #300]	; (27994 <ull_periph_setup+0x4bc>)
   27868:	9305      	str	r3, [sp, #20]
   2786a:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   2786e:	9308      	str	r3, [sp, #32]
   27870:	f8db 3010 	ldr.w	r3, [fp, #16]
   27874:	9304      	str	r3, [sp, #16]
   27876:	f04f 0300 	mov.w	r3, #0
   2787a:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   2787c:	f04f 0307 	mov.w	r3, #7
   27880:	fb03 1107 	mla	r1, r3, r7, r1
   27884:	eb66 0101 	sbc.w	r1, r6, r1
   27888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2788c:	2300      	movs	r3, #0
   2788e:	f7fe fc37 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27892:	a337      	add	r3, pc, #220	; (adr r3, 27970 <ull_periph_setup+0x498>)
   27894:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27898:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   2789c:	fba4 0109 	umull	r0, r1, r4, r9
   278a0:	f7fe fc2e 	bl	26100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   278a4:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   278a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   278aa:	b2ed      	uxtb	r5, r5
   278ac:	9000      	str	r0, [sp, #0]
   278ae:	4653      	mov	r3, sl
   278b0:	462a      	mov	r2, r5
   278b2:	2101      	movs	r1, #1
   278b4:	2000      	movs	r0, #0
   278b6:	f00d fac5 	bl	34e44 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   278ba:	f030 0302 	bics.w	r3, r0, #2
   278be:	d00c      	beq.n	278da <ull_periph_setup+0x402>
   278c0:	4a35      	ldr	r2, [pc, #212]	; (27998 <ull_periph_setup+0x4c0>)
   278c2:	4936      	ldr	r1, [pc, #216]	; (2799c <ull_periph_setup+0x4c4>)
   278c4:	4836      	ldr	r0, [pc, #216]	; (279a0 <ull_periph_setup+0x4c8>)
   278c6:	f240 13c9 	movw	r3, #457	; 0x1c9
   278ca:	f021 fed3 	bl	49674 <printk>
   278ce:	4040      	eors	r0, r0
   278d0:	f380 8811 	msr	BASEPRI, r0
   278d4:	f04f 0003 	mov.w	r0, #3
   278d8:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   278da:	2201      	movs	r2, #1
   278dc:	2102      	movs	r1, #2
   278de:	4610      	mov	r0, r2
   278e0:	f00c f8a2 	bl	33a28 <mayfly_enable>
}
   278e4:	b017      	add	sp, #92	; 0x5c
   278e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   278ea:	4601      	mov	r1, r0
   278ec:	2206      	movs	r2, #6
   278ee:	f104 002b 	add.w	r0, r4, #43	; 0x2b
   278f2:	f023 ffd5 	bl	4b8a0 <memset>
   278f6:	e712      	b.n	2771e <ull_periph_setup+0x246>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
   278f8:	2206      	movs	r2, #6
   278fa:	2100      	movs	r1, #0
   278fc:	f104 0025 	add.w	r0, r4, #37	; 0x25
   27900:	f023 ffce 	bl	4b8a0 <memset>
   27904:	e715      	b.n	27732 <ull_periph_setup+0x25a>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27906:	4a24      	ldr	r2, [pc, #144]	; (27998 <ull_periph_setup+0x4c0>)
   27908:	4926      	ldr	r1, [pc, #152]	; (279a4 <ull_periph_setup+0x4cc>)
   2790a:	4825      	ldr	r0, [pc, #148]	; (279a0 <ull_periph_setup+0x4c8>)
   2790c:	23f1      	movs	r3, #241	; 0xf1
   2790e:	f021 feb1 	bl	49674 <printk>
   27912:	4040      	eors	r0, r0
   27914:	f380 8811 	msr	BASEPRI, r0
   27918:	f04f 0003 	mov.w	r0, #3
   2791c:	df02      	svc	2
   2791e:	e6ec      	b.n	276fa <ull_periph_setup+0x222>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   27920:	2300      	movs	r3, #0
   27922:	2201      	movs	r2, #1
   27924:	9300      	str	r3, [sp, #0]
   27926:	4618      	mov	r0, r3
   27928:	4611      	mov	r1, r2
   2792a:	f00d fb17 	bl	34f5c <ticker_stop>
   2792e:	e77c      	b.n	2782a <ull_periph_setup+0x352>
			lll->data_chan_sel = 1;
   27930:	7f6b      	ldrb	r3, [r5, #29]
   27932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   27936:	4638      	mov	r0, r7
			lll->data_chan_sel = 1;
   27938:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   2793a:	f016 fedf 	bl	3e6fc <lll_chan_id>
   2793e:	2601      	movs	r6, #1
   27940:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
   27942:	e720      	b.n	27786 <ull_periph_setup+0x2ae>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27944:	f00f feee 	bl	37724 <ull_disable_mark_get>
   27948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2794a:	4283      	cmp	r3, r0
   2794c:	f43f af68 	beq.w	27820 <ull_periph_setup+0x348>
   27950:	4a11      	ldr	r2, [pc, #68]	; (27998 <ull_periph_setup+0x4c0>)
   27952:	4915      	ldr	r1, [pc, #84]	; (279a8 <ull_periph_setup+0x4d0>)
   27954:	4812      	ldr	r0, [pc, #72]	; (279a0 <ull_periph_setup+0x4c8>)
   27956:	f240 239f 	movw	r3, #671	; 0x29f
   2795a:	f021 fe8b 	bl	49674 <printk>
   2795e:	4040      	eors	r0, r0
   27960:	f380 8811 	msr	BASEPRI, r0
   27964:	f04f 0003 	mov.w	r0, #3
   27968:	df02      	svc	2
		  param == ull_disable_mark_get());
}
   2796a:	e759      	b.n	27820 <ull_periph_setup+0x348>
   2796c:	f3af 8000 	nop.w
   27970:	1afd498d 	.word	0x1afd498d
   27974:	00000007 	.word	0x00000007
   27978:	431bde83 	.word	0x431bde83
   2797c:	026259ff 	.word	0x026259ff
   27980:	01c9c37f 	.word	0x01c9c37f
   27984:	3b9aca00 	.word	0x3b9aca00
   27988:	0003dd19 	.word	0x0003dd19
   2798c:	0003dce9 	.word	0x0003dce9
   27990:	1afd498d 	.word	0x1afd498d
   27994:	0003dd55 	.word	0x0003dd55
   27998:	00052b58 	.word	0x00052b58
   2799c:	00052a50 	.word	0x00052a50
   279a0:	00052460 	.word	0x00052460
   279a4:	00052570 	.word	0x00052570
   279a8:	00052bb4 	.word	0x00052bb4
   279ac:	00000000 	.word	0x00000000

000279b0 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
   279b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   279b4:	b08b      	sub	sp, #44	; 0x2c
   279b6:	461f      	mov	r7, r3
   279b8:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   279bc:	9306      	str	r3, [sp, #24]
   279be:	e9cd 0104 	strd	r0, r1, [sp, #16]
   279c2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   279c6:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
   279ca:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
   279ce:	9303      	str	r3, [sp, #12]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   279d0:	2000      	movs	r0, #0
{
   279d2:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   279d4:	f011 f928 	bl	38c28 <ull_scan_is_disabled_get>
	if (!scan) {
   279d8:	2800      	cmp	r0, #0
   279da:	f000 81b7 	beq.w	27d4c <ll_create_connection+0x39c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
   279de:	f009 0801 	and.w	r8, r9, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
   279e2:	4605      	mov	r5, r0
   279e4:	4640      	mov	r0, r8
   279e6:	f00d fb81 	bl	350ec <ll_addr_get>
   279ea:	9002      	str	r0, [sp, #8]
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
   279ec:	f1b8 0f00 	cmp.w	r8, #0
   279f0:	d16a      	bne.n	27ac8 <ll_create_connection+0x118>
		return BT_HCI_ERR_INVALID_PARAM;
	}

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	/* Do not connect twice to the same peer */
	if (ull_conn_peer_connected(own_id_addr_type, own_id_addr,
   279f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   279f4:	9902      	ldr	r1, [sp, #8]
   279f6:	463a      	mov	r2, r7
   279f8:	4640      	mov	r0, r8
   279fa:	f012 fb57 	bl	3a0ac <ull_conn_peer_connected>
   279fe:	2800      	cmp	r0, #0
   27a00:	f040 81b5 	bne.w	27d6e <ll_create_connection+0x3be>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
   27a04:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
   27a06:	f105 021c 	add.w	r2, r5, #28
   27a0a:	9207      	str	r2, [sp, #28]
	if (lll->conn) {
   27a0c:	2b00      	cmp	r3, #0
   27a0e:	d062      	beq.n	27ad6 <ll_create_connection+0x126>
		conn_lll = lll->conn;
   27a10:	f8d5 a020 	ldr.w	sl, [r5, #32]
		conn = HDR_LLL2ULL(conn_lll);
   27a14:	f8da 4000 	ldr.w	r4, [sl]
	conn->ull.ticks_preempt_to_start =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	/* Remember peer and own identity address */
	conn->peer_id_addr_type = peer_addr_type;
   27a18:	f007 0b01 	and.w	fp, r7, #1
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
   27a1c:	f89a 0044 	ldrb.w	r0, [sl, #68]	; 0x44
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
   27a20:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   27a24:	f000 0007 	and.w	r0, r0, #7
   27a28:	f018 fbb0 	bl	4018c <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27a2c:	f8ba 1040 	ldrh.w	r1, [sl, #64]	; 0x40
   27a30:	f8ba 3042 	ldrh.w	r3, [sl, #66]	; 0x42
   27a34:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
   27a38:	4401      	add	r1, r0
   27a3a:	48d7      	ldr	r0, [pc, #860]	; (27d98 <ll_create_connection+0x3e8>)
   27a3c:	4419      	add	r1, r3
   27a3e:	fba1 0100 	umull	r0, r1, r1, r0
   27a42:	a3d3      	add	r3, pc, #844	; (adr r3, 27d90 <ll_create_connection+0x3e0>)
   27a44:	e9d3 2300 	ldrd	r2, r3, [r3]
   27a48:	f7fe fb5a 	bl	26100 <__aeabi_uldivmod>
   27a4c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
   27a50:	6120      	str	r0, [r4, #16]
				       max_tx_time +
				       EVENT_IFS_US +
				       max_rx_time);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
   27a52:	4630      	mov	r0, r6
   27a54:	f017 fb98 	bl	3f188 <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
   27a58:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   27a5c:	f36f 0341 	bfc	r3, #1, #1
   27a60:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   27a64:	23ff      	movs	r3, #255	; 0xff
   27a66:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   27a6a:	2e00      	cmp	r6, #0
   27a6c:	f000 8172 	beq.w	27d54 <ll_create_connection+0x3a4>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   27a70:	f1a9 0302 	sub.w	r3, r9, #2
   27a74:	2b01      	cmp	r3, #1
   27a76:	f240 817e 	bls.w	27d76 <ll_create_connection+0x3c6>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
   27a7a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   27a7e:	9914      	ldr	r1, [sp, #80]	; 0x50
	scan->own_addr_type = own_addr_type;
   27a80:	f369 0342 	bfi	r3, r9, #1, #2
   27a84:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
   27a88:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   27a8c:	f36b 0300 	bfi	r3, fp, #0, #1
   27a90:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   27a94:	2206      	movs	r2, #6
   27a96:	f105 0024 	add.w	r0, r5, #36	; 0x24
   27a9a:	f023 fef6 	bl	4b88a <memcpy>
	lll->conn_timeout = timeout;
   27a9e:	9b03      	ldr	r3, [sp, #12]
   27aa0:	862b      	strh	r3, [r5, #48]	; 0x30

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
   27aa2:	f105 001c 	add.w	r0, r5, #28
   27aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   27aaa:	2100      	movs	r1, #0
   27aac:	9600      	str	r6, [sp, #0]
   27aae:	f7ff f887 	bl	26bc0 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
   27ab2:	f018 fd0b 	bl	404cc <lll_clock_wait>
	if (err) {
   27ab6:	2800      	cmp	r0, #0
   27ab8:	f040 817a 	bne.w	27db0 <ll_create_connection+0x400>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
   27abc:	4628      	mov	r0, r5
   27abe:	f7ff f8ab 	bl	26c18 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
   27ac2:	b00b      	add	sp, #44	; 0x2c
   27ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
   27ac8:	2106      	movs	r1, #6
   27aca:	f00b ff51 	bl	33970 <mem_nz>
   27ace:	2800      	cmp	r0, #0
   27ad0:	d18f      	bne.n	279f2 <ll_create_connection+0x42>
		return BT_HCI_ERR_INVALID_PARAM;
   27ad2:	2012      	movs	r0, #18
   27ad4:	e7f5      	b.n	27ac2 <ll_create_connection+0x112>
	link = ll_rx_link_alloc();
   27ad6:	f00f fd2f 	bl	37538 <ll_rx_link_alloc>
	if (!link) {
   27ada:	9007      	str	r0, [sp, #28]
   27adc:	2800      	cmp	r0, #0
   27ade:	f000 81a2 	beq.w	27e26 <ll_create_connection+0x476>
	conn = ll_conn_acquire();
   27ae2:	f011 ff67 	bl	399b4 <ll_conn_acquire>
	if (!conn) {
   27ae6:	4604      	mov	r4, r0
   27ae8:	2800      	cmp	r0, #0
   27aea:	f000 81ba 	beq.w	27e62 <ll_create_connection+0x4b2>
	err = util_aa_le32(conn_lll->access_addr);
   27aee:	3020      	adds	r0, #32
   27af0:	f00c f8dc 	bl	33cac <util_aa_le32>
	conn_lll = &conn->lll;
   27af4:	f104 0a1c 	add.w	sl, r4, #28
	LL_ASSERT(!err);
   27af8:	2800      	cmp	r0, #0
   27afa:	f040 8183 	bne.w	27e04 <ll_create_connection+0x454>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
   27afe:	2103      	movs	r1, #3
   27b00:	f104 0024 	add.w	r0, r4, #36	; 0x24
   27b04:	f018 f9f0 	bl	3fee8 <lll_csrand_get>
	conn_lll->interval = interval;
   27b08:	9b06      	ldr	r3, [sp, #24]
	if (!conn_lll->link_tx_free) {
   27b0a:	6f60      	ldr	r0, [r4, #116]	; 0x74
	conn_lll->interval = interval;
   27b0c:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
   27b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
   27b12:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
   27b16:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
   27b18:	2800      	cmp	r0, #0
   27b1a:	f000 8180 	beq.w	27e1e <ll_create_connection+0x46e>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   27b1e:	f104 0164 	add.w	r1, r4, #100	; 0x64
   27b22:	f104 0268 	add.w	r2, r4, #104	; 0x68
   27b26:	f00b ff2f 	bl	33988 <memq_init>
	conn_lll->phy_tx = PHY_1M;
   27b2a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   27b2e:	4a9b      	ldr	r2, [pc, #620]	; (27d9c <ll_create_connection+0x3ec>)
	conn_lll->phy_tx = PHY_1M;
   27b30:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
   27b34:	f023 0307 	bic.w	r3, r3, #7
   27b38:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   27b3c:	f043 0301 	orr.w	r3, r3, #1
   27b40:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn_lll->sn = 0;
   27b44:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   27b48:	f023 0307 	bic.w	r3, r3, #7
	conn_lll->link_tx_free = NULL;
   27b4c:	f04f 0b00 	mov.w	fp, #0
	conn_lll->sn = 0;
   27b50:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   27b54:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
   27b58:	e9c4 3216 	strd	r3, r2, [r4, #88]	; 0x58
	conn_lll->link_tx_free = NULL;
   27b5c:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
	conn_lll->packet_tx_head_len = 0;
   27b60:	f8a4 b078 	strh.w	fp, [r4, #120]	; 0x78
	conn_lll->latency_prepare = 0;
   27b64:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
   27b68:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   27b6c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   27b70:	f016 fd7a 	bl	3e668 <ull_chan_map_get>
   27b74:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   27b78:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
   27b7c:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   27b7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
   27b82:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   27b86:	f018 f9af 	bl	3fee8 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27b8a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   27b8e:	4b84      	ldr	r3, [pc, #528]	; (27da0 <ll_create_connection+0x3f0>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27b90:	f8dd c00c 	ldr.w	ip, [sp, #12]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27b94:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
   27b96:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27b9a:	fba3 1302 	umull	r1, r3, r3, r2
   27b9e:	08db      	lsrs	r3, r3, #3
   27ba0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27ba4:	eba2 0283 	sub.w	r2, r2, r3, lsl #2
	conn_lll->data_chan_sel = 0;
   27ba8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
   27bac:	9906      	ldr	r1, [sp, #24]
	conn->supervision_expire = 0U;
   27bae:	f8a4 b0c4 	strh.w	fp, [r4, #196]	; 0xc4
	conn_lll->data_chan_sel = 0;
   27bb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27bb6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
   27bba:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_expire = 0U;
   27bbe:	f8a4 b0c8 	strh.w	fp, [r4, #200]	; 0xc8
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27bc2:	3205      	adds	r2, #5
	conn_lll->central.initiated = 0;
   27bc4:	f023 0303 	bic.w	r3, r3, #3
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27bc8:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
	conn_lll->central.initiated = 0;
   27bcc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
   27bd0:	f240 42e2 	movw	r2, #1250	; 0x4e2
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27bd4:	4b73      	ldr	r3, [pc, #460]	; (27da4 <ll_create_connection+0x3f4>)
	conn->apto_expire = 0U;
   27bd6:	f8a4 b0d0 	strh.w	fp, [r4, #208]	; 0xd0
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
   27bda:	fb02 f101 	mul.w	r1, r2, r1
   27bde:	460a      	mov	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27be0:	440b      	add	r3, r1
   27be2:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27be6:	4970      	ldr	r1, [pc, #448]	; (27da8 <ll_create_connection+0x3f8>)
	conn->appto_expire = 0U;
   27be8:	f8a4 b0cc 	strh.w	fp, [r4, #204]	; 0xcc
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27bec:	4411      	add	r1, r2
   27bee:	fbb1 f1f2 	udiv	r1, r1, r2
   27bf2:	f8a4 10c6 	strh.w	r1, [r4, #198]	; 0xc6
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27bf6:	f242 7110 	movw	r1, #10000	; 0x2710
   27bfa:	fb01 210c 	mla	r1, r1, ip, r2
   27bfe:	3901      	subs	r1, #1
   27c00:	fbb1 f2f2 	udiv	r2, r1, r2
   27c04:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
   27c08:	2206      	movs	r2, #6
   27c0a:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27c0e:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27c10:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27c12:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27c14:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27c18:	dd02      	ble.n	27c20 <ll_create_connection+0x270>
   27c1a:	3a06      	subs	r2, #6
   27c1c:	1a12      	subs	r2, r2, r0
   27c1e:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
   27c20:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27c24:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
	conn->common.fex_valid = 0U;
   27c28:	f023 0307 	bic.w	r3, r3, #7
   27c2c:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   27c30:	2300      	movs	r3, #0
   27c32:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
   27c36:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2
	conn->llcp_rx = NULL;
   27c3a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   27c3e:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   27c42:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
	conn->llcp_feature.features_conn = ll_feat_get();
   27c46:	f00e ff45 	bl	36ad4 <ll_feat_get>
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   27c4a:	f894 214a 	ldrb.w	r2, [r4, #330]	; 0x14a
	conn->llcp_terminate.node_rx.hdr.link = link;
   27c4e:	9b07      	ldr	r3, [sp, #28]
   27c50:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   27c54:	f022 0203 	bic.w	r2, r2, #3
   27c58:	f884 214a 	strb.w	r2, [r4, #330]	; 0x14a
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   27c5c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   27c60:	f022 0218 	bic.w	r2, r2, #24
   27c64:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   27c68:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   27c6c:	f022 0207 	bic.w	r2, r2, #7
   27c70:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->llcp_conn_param.disabled = 0U;
   27c74:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
	conn->llcp_version.req = conn->llcp_version.ack = 0;
   27c78:	2300      	movs	r3, #0
	conn->llcp_conn_param.disabled = 0U;
   27c7a:	f363 1245 	bfi	r2, r3, #5, #1
   27c7e:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
	conn->llcp_length.disabled = 0U;
   27c82:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
	conn->llcp_version.req = conn->llcp_version.ack = 0;
   27c86:	f8a4 3148 	strh.w	r3, [r4, #328]	; 0x148
	conn->llcp_length.disabled = 0U;
   27c8a:	f363 02c3 	bfi	r2, r3, #3, #1
	conn->llcp_feature.features_conn = ll_feat_get();
   27c8e:	e9c4 014e 	strd	r0, r1, [r4, #312]	; 0x138
	conn->llcp_feature.features_peer = 0;
   27c92:	2100      	movs	r1, #0
   27c94:	2000      	movs	r0, #0
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
   27c96:	f8a4 3150 	strh.w	r3, [r4, #336]	; 0x150
	conn->llcp_terminate.reason_final = 0U;
   27c9a:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   27c9e:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
	conn->llcp_conn_param.req = 0U;
   27ca2:	f8a4 3194 	strh.w	r3, [r4, #404]	; 0x194
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
   27ca6:	f8a4 31bc 	strh.w	r3, [r4, #444]	; 0x1bc
	conn->llcp_length.cache.tx_octets = 0U;
   27caa:	f8a4 31c8 	strh.w	r3, [r4, #456]	; 0x1c8
	conn->llcp_feature.features_peer = 0;
   27cae:	e9c4 0150 	strd	r0, r1, [r4, #320]	; 0x140
	conn->llcp_length.disabled = 0U;
   27cb2:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
   27cb6:	f012 f9e1 	bl	3a07c <ull_conn_default_tx_octets_get>
   27cba:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
	conn->default_tx_time = ull_conn_default_tx_time_get();
   27cbe:	f012 f9e3 	bl	3a088 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   27cc2:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
   27cc6:	4a39      	ldr	r2, [pc, #228]	; (27dac <ll_create_connection+0x3fc>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
   27cc8:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   27ccc:	400a      	ands	r2, r1
   27cce:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   27cd2:	f012 f9df 	bl	3a094 <ull_conn_default_phy_tx_get>
   27cd6:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
   27cda:	f360 0202 	bfi	r2, r0, #0, #3
   27cde:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   27ce2:	f012 f9dd 	bl	3a0a0 <ull_conn_default_phy_rx_get>
   27ce6:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
	(void)memcpy(conn->peer_id_addr, peer_addr, sizeof(conn->peer_id_addr));
   27cea:	9914      	ldr	r1, [sp, #80]	; 0x50
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   27cec:	f360 02c5 	bfi	r2, r0, #3, #3
   27cf0:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
	conn->peer_id_addr_type = peer_addr_type;
   27cf4:	f894 20d6 	ldrb.w	r2, [r4, #214]	; 0xd6
   27cf8:	f007 0b01 	and.w	fp, r7, #1
   27cfc:	f36b 0241 	bfi	r2, fp, #1, #1
	conn->tx_data = conn->tx_data_last = 0;
   27d00:	2300      	movs	r3, #0
	conn->peer_id_addr_type = peer_addr_type;
   27d02:	f884 20d6 	strb.w	r2, [r4, #214]	; 0xd6
	conn->ull.ticks_prepare_to_start =
   27d06:	2231      	movs	r2, #49	; 0x31
	conn->tx_data = conn->tx_data_last = 0;
   27d08:	e9c4 3378 	strd	r3, r3, [r4, #480]	; 0x1e0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   27d0c:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   27d10:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
	conn->ull.ticks_active_to_start = 0U;
   27d14:	6063      	str	r3, [r4, #4]
	conn->ull.ticks_preempt_to_start =
   27d16:	60e3      	str	r3, [r4, #12]
	conn->ull.ticks_prepare_to_start =
   27d18:	60a2      	str	r2, [r4, #8]
	(void)memcpy(conn->peer_id_addr, peer_addr, sizeof(conn->peer_id_addr));
   27d1a:	f104 00dd 	add.w	r0, r4, #221	; 0xdd
   27d1e:	2206      	movs	r2, #6
   27d20:	f023 fdb3 	bl	4b88a <memcpy>
	conn->own_id_addr_type = own_id_addr_type;
   27d24:	f894 20d6 	ldrb.w	r2, [r4, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr, sizeof(conn->own_id_addr));
   27d28:	9902      	ldr	r1, [sp, #8]
	conn->own_id_addr_type = own_id_addr_type;
   27d2a:	f369 0200 	bfi	r2, r9, #0, #1
   27d2e:	f884 20d6 	strb.w	r2, [r4, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr, sizeof(conn->own_id_addr));
   27d32:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   27d36:	2206      	movs	r2, #6
   27d38:	f023 fda7 	bl	4b88a <memcpy>
   27d3c:	2300      	movs	r3, #0
	lll->conn = conn_lll;
   27d3e:	f8c5 a020 	str.w	sl, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   27d42:	e9c4 3305 	strd	r3, r3, [r4, #20]
	hdr->ref = 0U;
   27d46:	7023      	strb	r3, [r4, #0]
   27d48:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
   27d4a:	e667      	b.n	27a1c <ll_create_connection+0x6c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   27d4c:	200c      	movs	r0, #12
}
   27d4e:	b00b      	add	sp, #44	; 0x2c
   27d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   27d54:	f017 fe54 	bl	3fa00 <ull_filter_lll_rl_enabled>
   27d58:	2800      	cmp	r0, #0
   27d5a:	f43f ae89 	beq.w	27a70 <ll_create_connection+0xc0>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
   27d5e:	9914      	ldr	r1, [sp, #80]	; 0x50
   27d60:	4638      	mov	r0, r7
   27d62:	4632      	mov	r2, r6
   27d64:	f017 fb82 	bl	3f46c <ull_filter_rl_find>
   27d68:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
   27d6c:	e680      	b.n	27a70 <ll_create_connection+0xc0>
		return BT_HCI_ERR_CONN_ALREADY_EXISTS;
   27d6e:	200b      	movs	r0, #11
}
   27d70:	b00b      	add	sp, #44	; 0x2c
   27d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_rpa_update(false);
   27d76:	2000      	movs	r0, #0
   27d78:	f017 fa2a 	bl	3f1d0 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   27d7c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   27d80:	f043 0302 	orr.w	r3, r3, #2
	own_id_addr_type = (own_addr_type & 0x01);
   27d84:	46c1      	mov	r9, r8
		lll->rpa_gen = 1;
   27d86:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   27d8a:	e676      	b.n	27a7a <ll_create_connection+0xca>
   27d8c:	f3af 8000 	nop.w
   27d90:	1afd498d 	.word	0x1afd498d
   27d94:	00000007 	.word	0x00000007
   27d98:	3b9aca00 	.word	0x3b9aca00
   27d9c:	01480148 	.word	0x01480148
   27da0:	aaaaaaab 	.word	0xaaaaaaab
   27da4:	01c9c37f 	.word	0x01c9c37f
   27da8:	026259ff 	.word	0x026259ff
   27dac:	f6ff0000 	.word	0xf6ff0000
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
   27db0:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
   27db2:	6da3      	ldr	r3, [r4, #88]	; 0x58
   27db4:	b163      	cbz	r3, 27dd0 <ll_create_connection+0x420>
   27db6:	4a2d      	ldr	r2, [pc, #180]	; (27e6c <ll_create_connection+0x4bc>)
   27db8:	492d      	ldr	r1, [pc, #180]	; (27e70 <ll_create_connection+0x4c0>)
   27dba:	482e      	ldr	r0, [pc, #184]	; (27e74 <ll_create_connection+0x4c4>)
   27dbc:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
   27dc0:	f021 fc58 	bl	49674 <printk>
   27dc4:	4040      	eors	r0, r0
   27dc6:	f380 8811 	msr	BASEPRI, r0
   27dca:	f04f 0003 	mov.w	r0, #3
   27dce:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   27dd0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   27dd4:	f104 0048 	add.w	r0, r4, #72	; 0x48
   27dd8:	f00b fdda 	bl	33990 <memq_deinit>
	LL_ASSERT(link);
   27ddc:	4606      	mov	r6, r0
   27dde:	2800      	cmp	r0, #0
   27de0:	d031      	beq.n	27e46 <ll_create_connection+0x496>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
   27de2:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
   27de4:	65a6      	str	r6, [r4, #88]	; 0x58

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
   27de6:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
	LL_ASSERT(link);
   27dea:	b1f4      	cbz	r4, 27e2a <ll_create_connection+0x47a>

	ll_rx_link_release(link);
   27dec:	4620      	mov	r0, r4
   27dee:	f00f fba9 	bl	37544 <ll_rx_link_release>

	ll_conn_release(conn);
   27df2:	4638      	mov	r0, r7
   27df4:	f011 fde4 	bl	399c0 <ll_conn_release>
	scan->lll.conn = NULL;
   27df8:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
   27dfa:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
   27dfc:	622b      	str	r3, [r5, #32]
}
   27dfe:	b00b      	add	sp, #44	; 0x2c
   27e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
   27e04:	4a19      	ldr	r2, [pc, #100]	; (27e6c <ll_create_connection+0x4bc>)
   27e06:	491c      	ldr	r1, [pc, #112]	; (27e78 <ll_create_connection+0x4c8>)
   27e08:	481a      	ldr	r0, [pc, #104]	; (27e74 <ll_create_connection+0x4c4>)
   27e0a:	23bf      	movs	r3, #191	; 0xbf
   27e0c:	f021 fc32 	bl	49674 <printk>
   27e10:	4040      	eors	r0, r0
   27e12:	f380 8811 	msr	BASEPRI, r0
   27e16:	f04f 0003 	mov.w	r0, #3
   27e1a:	df02      	svc	2
   27e1c:	e66f      	b.n	27afe <ll_create_connection+0x14e>
		conn_lll->link_tx_free = &conn_lll->link_tx;
   27e1e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   27e22:	6760      	str	r0, [r4, #116]	; 0x74
   27e24:	e67b      	b.n	27b1e <ll_create_connection+0x16e>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   27e26:	2007      	movs	r0, #7
   27e28:	e64b      	b.n	27ac2 <ll_create_connection+0x112>
	LL_ASSERT(link);
   27e2a:	4a10      	ldr	r2, [pc, #64]	; (27e6c <ll_create_connection+0x4bc>)
   27e2c:	4913      	ldr	r1, [pc, #76]	; (27e7c <ll_create_connection+0x4cc>)
   27e2e:	4811      	ldr	r0, [pc, #68]	; (27e74 <ll_create_connection+0x4c4>)
   27e30:	f240 43c1 	movw	r3, #1217	; 0x4c1
   27e34:	f021 fc1e 	bl	49674 <printk>
   27e38:	4040      	eors	r0, r0
   27e3a:	f380 8811 	msr	BASEPRI, r0
   27e3e:	f04f 0003 	mov.w	r0, #3
   27e42:	df02      	svc	2
   27e44:	e7d2      	b.n	27dec <ll_create_connection+0x43c>
	LL_ASSERT(link);
   27e46:	4a09      	ldr	r2, [pc, #36]	; (27e6c <ll_create_connection+0x4bc>)
   27e48:	490c      	ldr	r1, [pc, #48]	; (27e7c <ll_create_connection+0x4cc>)
   27e4a:	480a      	ldr	r0, [pc, #40]	; (27e74 <ll_create_connection+0x4c4>)
   27e4c:	f240 43ba 	movw	r3, #1210	; 0x4ba
   27e50:	f021 fc10 	bl	49674 <printk>
   27e54:	4040      	eors	r0, r0
   27e56:	f380 8811 	msr	BASEPRI, r0
   27e5a:	f04f 0003 	mov.w	r0, #3
   27e5e:	df02      	svc	2
   27e60:	e7bf      	b.n	27de2 <ll_create_connection+0x432>
		ll_rx_link_release(link);
   27e62:	9807      	ldr	r0, [sp, #28]
   27e64:	f00f fb6e 	bl	37544 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   27e68:	2007      	movs	r0, #7
   27e6a:	e62a      	b.n	27ac2 <ll_create_connection+0x112>
   27e6c:	00052be4 	.word	0x00052be4
   27e70:	0005289c 	.word	0x0005289c
   27e74:	00052460 	.word	0x00052460
   27e78:	0005263c 	.word	0x0005263c
   27e7c:	000529c8 	.word	0x000529c8

00027e80 <ull_central_setup>:
{
   27e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	peer_addr_type = pdu_tx->rx_addr;
   27e84:	4607      	mov	r7, r0
{
   27e86:	b08c      	sub	sp, #48	; 0x30
   27e88:	4604      	mov	r4, r0
	peer_addr_type = pdu_tx->rx_addr;
   27e8a:	f817 9f1c 	ldrb.w	r9, [r7, #28]!
{
   27e8e:	460e      	mov	r6, r1
   27e90:	4615      	mov	r5, r2
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
   27e92:	f100 0124 	add.w	r1, r0, #36	; 0x24
   27e96:	2206      	movs	r2, #6
   27e98:	a80a      	add	r0, sp, #40	; 0x28
   27e9a:	f023 fcf6 	bl	4b88a <memcpy>
	chan_sel = pdu_tx->chan_sel;
   27e9e:	f894 801c 	ldrb.w	r8, [r4, #28]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27ea2:	07fb      	lsls	r3, r7, #31
	peer_addr_type = pdu_tx->rx_addr;
   27ea4:	f3c9 19c0 	ubfx	r9, r9, #7, #1
	chan_sel = pdu_tx->chan_sel;
   27ea8:	f3c8 1840 	ubfx	r8, r8, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27eac:	f100 80f9 	bmi.w	280a2 <ull_central_setup+0x222>
	cc->status = 0U;
   27eb0:	2300      	movs	r3, #0
   27eb2:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
   27eb4:	7cb1      	ldrb	r1, [r6, #18]
	uint8_t rl_idx = ftr->rl_idx;
   27eb6:	7c77      	ldrb	r7, [r6, #17]
	if (ftr->lrpa_used) {
   27eb8:	f011 0101 	ands.w	r1, r1, #1
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
   27ebc:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
   27ec0:	f000 80d9 	beq.w	28076 <ull_central_setup+0x1f6>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
   27ec4:	f104 011e 	add.w	r1, r4, #30
   27ec8:	f104 002b 	add.w	r0, r4, #43	; 0x2b
   27ecc:	f023 fcdd 	bl	4b88a <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   27ed0:	2fff      	cmp	r7, #255	; 0xff
   27ed2:	f000 80d7 	beq.w	28084 <ull_central_setup+0x204>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
   27ed6:	4638      	mov	r0, r7
   27ed8:	f104 021f 	add.w	r2, r4, #31
   27edc:	f104 011e 	add.w	r1, r4, #30
   27ee0:	f016 fe10 	bl	3eb04 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
   27ee4:	7fa3      	ldrb	r3, [r4, #30]
   27ee6:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   27ee8:	a90a      	add	r1, sp, #40	; 0x28
		cc->peer_addr_type += 2;
   27eea:	77a3      	strb	r3, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   27eec:	2206      	movs	r2, #6
   27eee:	f104 0025 	add.w	r0, r4, #37	; 0x25
   27ef2:	f023 fcca 	bl	4b88a <memcpy>
	scan = HDR_LLL2ULL(ftr->param);
   27ef6:	6833      	ldr	r3, [r6, #0]
   27ef8:	f8d3 9000 	ldr.w	r9, [r3]
	cc->interval = lll->interval;
   27efc:	89eb      	ldrh	r3, [r5, #14]
   27efe:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->latency = lll->latency;
   27f00:	8a2b      	ldrh	r3, [r5, #16]
   27f02:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->timeout = scan->lll.conn_timeout;
   27f04:	f8b9 3030 	ldrh.w	r3, [r9, #48]	; 0x30
   27f08:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_clock_sca_local_get();
   27f0a:	f018 fb31 	bl	40570 <lll_clock_sca_local_get>
   27f0e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
   27f12:	682f      	ldr	r7, [r5, #0]
	lll->handle = ll_conn_handle_get(conn);
   27f14:	4638      	mov	r0, r7
   27f16:	f011 fd59 	bl	399cc <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
   27f1a:	f8d6 a004 	ldr.w	sl, [r6, #4]
	lll->handle = ll_conn_handle_get(conn);
   27f1e:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
   27f20:	4621      	mov	r1, r4
	rx->handle = lll->handle;
   27f22:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
   27f24:	6820      	ldr	r0, [r4, #0]
   27f26:	f00f fb1f 	bl	37568 <ll_rx_put>
		rx->handle = lll->handle;
   27f2a:	89ab      	ldrh	r3, [r5, #12]
   27f2c:	f8aa 3006 	strh.w	r3, [sl, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   27f30:	231b      	movs	r3, #27
		link = rx->link;
   27f32:	f8da 4000 	ldr.w	r4, [sl]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   27f36:	f88a 3004 	strb.w	r3, [sl, #4]
		if (chan_sel) {
   27f3a:	f1b8 0f00 	cmp.w	r8, #0
   27f3e:	f040 80be 	bne.w	280be <ull_central_setup+0x23e>
	ll_rx_put(link, rx);
   27f42:	4651      	mov	r1, sl
   27f44:	4620      	mov	r0, r4
			cs->csa = 0x00;
   27f46:	f88a 801c 	strb.w	r8, [sl, #28]
	ll_rx_put(link, rx);
   27f4a:	f00f fb0d 	bl	37568 <ll_rx_put>
	ll_rx_sched();
   27f4e:	f00f fb15 	bl	3757c <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
   27f52:	68ba      	ldr	r2, [r7, #8]
   27f54:	687b      	ldr	r3, [r7, #4]
						      lll->phy_flags);
   27f56:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   27f5a:	f8b5 800e 	ldrh.w	r8, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
   27f5e:	68f4      	ldr	r4, [r6, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
   27f60:	429a      	cmp	r2, r3
   27f62:	bf38      	it	cc
   27f64:	461a      	movcc	r2, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   27f66:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   27f6a:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   27f6e:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   27f72:	fb03 f808 	mul.w	r8, r3, r8
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
   27f76:	4692      	mov	sl, r2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   27f78:	f018 f908 	bl	4018c <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
   27f7c:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   27f7e:	2200      	movs	r2, #0
   27f80:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   27f82:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   27f84:	2001      	movs	r0, #1
   27f86:	f00b fd4f 	bl	33a28 <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
   27f8a:	4648      	mov	r0, r9
   27f8c:	f010 fe24 	bl	38bd8 <ull_scan_handle_get>
   27f90:	1d02      	adds	r2, r0, #4
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   27f92:	4b53      	ldr	r3, [pc, #332]	; (280e0 <ull_central_setup+0x260>)
   27f94:	f8cd 9000 	str.w	r9, [sp]
   27f98:	b2d2      	uxtb	r2, r2
   27f9a:	2101      	movs	r1, #1
   27f9c:	2000      	movs	r0, #0
   27f9e:	f00c ffdd 	bl	34f5c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   27fa2:	f030 0302 	bics.w	r3, r0, #2
   27fa6:	d00c      	beq.n	27fc2 <ull_central_setup+0x142>
   27fa8:	4a4e      	ldr	r2, [pc, #312]	; (280e4 <ull_central_setup+0x264>)
   27faa:	494f      	ldr	r1, [pc, #316]	; (280e8 <ull_central_setup+0x268>)
   27fac:	484f      	ldr	r0, [pc, #316]	; (280ec <ull_central_setup+0x26c>)
   27fae:	f240 33c9 	movw	r3, #969	; 0x3c9
   27fb2:	f021 fb5f 	bl	49674 <printk>
   27fb6:	4040      	eors	r0, r0
   27fb8:	f380 8811 	msr	BASEPRI, r0
   27fbc:	f04f 0003 	mov.w	r0, #3
   27fc0:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   27fc2:	f04f 0900 	mov.w	r9, #0
   27fc6:	464b      	mov	r3, r9
   27fc8:	2203      	movs	r2, #3
   27fca:	2101      	movs	r1, #1
   27fcc:	f8cd 9000 	str.w	r9, [sp]
   27fd0:	4648      	mov	r0, r9
   27fd2:	f00c ffc3 	bl	34f5c <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27fd6:	4638      	mov	r0, r7
   27fd8:	f011 fcf8 	bl	399cc <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27fdc:	68b6      	ldr	r6, [r6, #8]
   27fde:	3e09      	subs	r6, #9
   27fe0:	eba6 060a 	sub.w	r6, r6, sl
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27fe4:	f8df a108 	ldr.w	sl, [pc, #264]	; 280f0 <ull_central_setup+0x270>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27fe8:	4605      	mov	r5, r0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27fea:	a33b      	add	r3, pc, #236	; (adr r3, 280d8 <ull_central_setup+0x258>)
   27fec:	e9d3 2300 	ldrd	r2, r3, [r3]
   27ff0:	fba8 010a 	umull	r0, r1, r8, sl
   27ff4:	f7fe f884 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27ff8:	4619      	mov	r1, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27ffa:	4b3e      	ldr	r3, [pc, #248]	; (280f4 <ull_central_setup+0x274>)
   27ffc:	9307      	str	r3, [sp, #28]
   27ffe:	4b3e      	ldr	r3, [pc, #248]	; (280f8 <ull_central_setup+0x278>)
   28000:	9305      	str	r3, [sp, #20]
   28002:	f240 33f9 	movw	r3, #1017	; 0x3f9
   28006:	9706      	str	r7, [sp, #24]
   28008:	9308      	str	r3, [sp, #32]
   2800a:	693b      	ldr	r3, [r7, #16]
   2800c:	4680      	mov	r8, r0
   2800e:	e9cd 9303 	strd	r9, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   28012:	4610      	mov	r0, r2
   28014:	2300      	movs	r3, #0
   28016:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2801a:	f7fe f871 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   2801e:	a32e      	add	r3, pc, #184	; (adr r3, 280d8 <ull_central_setup+0x258>)
   28020:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   28024:	e9cd 8001 	strd	r8, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   28028:	fba4 010a 	umull	r0, r1, r4, sl
   2802c:	f7fe f868 	bl	26100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   28030:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   28032:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   28036:	b2ed      	uxtb	r5, r5
   28038:	9000      	str	r0, [sp, #0]
   2803a:	4633      	mov	r3, r6
   2803c:	462a      	mov	r2, r5
   2803e:	2101      	movs	r1, #1
   28040:	4648      	mov	r0, r9
   28042:	f00c feff 	bl	34e44 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   28046:	f030 0302 	bics.w	r3, r0, #2
   2804a:	d00c      	beq.n	28066 <ull_central_setup+0x1e6>
   2804c:	4a25      	ldr	r2, [pc, #148]	; (280e4 <ull_central_setup+0x264>)
   2804e:	4926      	ldr	r1, [pc, #152]	; (280e8 <ull_central_setup+0x268>)
   28050:	4826      	ldr	r0, [pc, #152]	; (280ec <ull_central_setup+0x26c>)
   28052:	f240 33fa 	movw	r3, #1018	; 0x3fa
   28056:	f021 fb0d 	bl	49674 <printk>
   2805a:	4040      	eors	r0, r0
   2805c:	f380 8811 	msr	BASEPRI, r0
   28060:	f04f 0003 	mov.w	r0, #3
   28064:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   28066:	2201      	movs	r2, #1
   28068:	2102      	movs	r1, #2
   2806a:	4610      	mov	r0, r2
   2806c:	f00b fcdc 	bl	33a28 <mayfly_enable>
}
   28070:	b00c      	add	sp, #48	; 0x30
   28072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   28076:	f104 002b 	add.w	r0, r4, #43	; 0x2b
   2807a:	f023 fc11 	bl	4b8a0 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
   2807e:	2fff      	cmp	r7, #255	; 0xff
   28080:	f47f af29 	bne.w	27ed6 <ull_central_setup+0x56>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
   28084:	2206      	movs	r2, #6
   28086:	2100      	movs	r1, #0
   28088:	f104 0025 	add.w	r0, r4, #37	; 0x25
   2808c:	f023 fc08 	bl	4b8a0 <memset>
		cc->peer_addr_type = peer_addr_type;
   28090:	f884 901e 	strb.w	r9, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
   28094:	a90a      	add	r1, sp, #40	; 0x28
   28096:	2206      	movs	r2, #6
   28098:	f104 001f 	add.w	r0, r4, #31
   2809c:	f023 fbf5 	bl	4b88a <memcpy>
   280a0:	e729      	b.n	27ef6 <ull_central_setup+0x76>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   280a2:	4a10      	ldr	r2, [pc, #64]	; (280e4 <ull_central_setup+0x264>)
   280a4:	4915      	ldr	r1, [pc, #84]	; (280fc <ull_central_setup+0x27c>)
   280a6:	4811      	ldr	r0, [pc, #68]	; (280ec <ull_central_setup+0x26c>)
   280a8:	f44f 7352 	mov.w	r3, #840	; 0x348
   280ac:	f021 fae2 	bl	49674 <printk>
   280b0:	4040      	eors	r0, r0
   280b2:	f380 8811 	msr	BASEPRI, r0
   280b6:	f04f 0003 	mov.w	r0, #3
   280ba:	df02      	svc	2
   280bc:	e6f8      	b.n	27eb0 <ull_central_setup+0x30>
			lll->data_chan_sel = 1;
   280be:	7f6b      	ldrb	r3, [r5, #29]
   280c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   280c4:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   280c6:	1d28      	adds	r0, r5, #4
   280c8:	f016 fb18 	bl	3e6fc <lll_chan_id>
   280cc:	f04f 0801 	mov.w	r8, #1
   280d0:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
   280d2:	e736      	b.n	27f42 <ull_central_setup+0xc2>
   280d4:	f3af 8000 	nop.w
   280d8:	1afd498d 	.word	0x1afd498d
   280dc:	00000007 	.word	0x00000007
   280e0:	0003df11 	.word	0x0003df11
   280e4:	00052be4 	.word	0x00052be4
   280e8:	00052a50 	.word	0x00052a50
   280ec:	00052460 	.word	0x00052460
   280f0:	3b9aca00 	.word	0x3b9aca00
   280f4:	0003df15 	.word	0x0003df15
   280f8:	0003df45 	.word	0x0003df45
   280fc:	00052570 	.word	0x00052570

00028100 <ull_sched_after_mstr_slot_get>:
}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
   28100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28104:	b08f      	sub	sp, #60	; 0x3c
   28106:	461e      	mov	r6, r3
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
   28108:	f04f 09ff 	mov.w	r9, #255	; 0xff
{
   2810c:	9309      	str	r3, [sp, #36]	; 0x24
   2810e:	4615      	mov	r5, r2
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   28110:	2300      	movs	r3, #0
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
   28112:	1d0a      	adds	r2, r1, #4
	ticker_id = ticker_id_prev = 0xff;
   28114:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   28118:	f8cd 9010 	str.w	r9, [sp, #16]
   2811c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 28220 <ull_sched_after_mstr_slot_get+0x120>
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
		LL_ASSERT(success);
   28120:	f8df b100 	ldr.w	fp, [pc, #256]	; 28224 <ull_sched_after_mstr_slot_get+0x124>
   28124:	f8df a100 	ldr.w	sl, [pc, #256]	; 28228 <ull_sched_after_mstr_slot_get+0x128>
   28128:	f8df 9100 	ldr.w	r9, [pc, #256]	; 2822c <ull_sched_after_mstr_slot_get+0x12c>
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   2812c:	6033      	str	r3, [r6, #0]
{
   2812e:	4604      	mov	r4, r0
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
   28130:	9208      	str	r2, [sp, #32]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   28132:	930c      	str	r3, [sp, #48]	; 0x30
	ticks_slot_abs_prev = 0U;
   28134:	9305      	str	r3, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   28136:	9306      	str	r3, [sp, #24]
   28138:	af0d      	add	r7, sp, #52	; 0x34
   2813a:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
   2813c:	2302      	movs	r3, #2
   2813e:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
   28140:	e9cd 8701 	strd	r8, r7, [sp, #4]
   28144:	9600      	str	r6, [sp, #0]
   28146:	462b      	mov	r3, r5
   28148:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   2814c:	4621      	mov	r1, r4
   2814e:	2000      	movs	r0, #0
   28150:	f00c ff46 	bl	34fe0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   28154:	2802      	cmp	r0, #2
   28156:	d02f      	beq.n	281b8 <ull_sched_after_mstr_slot_get+0xb8>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   28158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
   2815a:	2b00      	cmp	r3, #0
   2815c:	d132      	bne.n	281c4 <ull_sched_after_mstr_slot_get+0xc4>

		if (ticker_id == 0xff) {
   2815e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   28162:	28ff      	cmp	r0, #255	; 0xff
   28164:	d03e      	beq.n	281e4 <ull_sched_after_mstr_slot_get+0xe4>
			break;
		}

#if !defined(CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH)
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
   28166:	3805      	subs	r0, #5
   28168:	b2c3      	uxtb	r3, r0
   2816a:	2b05      	cmp	r3, #5
   2816c:	d8e6      	bhi.n	2813c <ull_sched_after_mstr_slot_get+0x3c>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   2816e:	b280      	uxth	r0, r0
   28170:	f011 fc34 	bl	399dc <ll_conn_get>
		if (conn && !conn->lll.role) {
   28174:	2800      	cmp	r0, #0
   28176:	d0e1      	beq.n	2813c <ull_sched_after_mstr_slot_get+0x3c>
   28178:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   2817c:	2b00      	cmp	r3, #0
   2817e:	dbdd      	blt.n	2813c <ull_sched_after_mstr_slot_get+0x3c>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
   28180:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr += conn->ull.ticks_slot;
   28182:	6902      	ldr	r2, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
   28184:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
   28186:	29ff      	cmp	r1, #255	; 0xff
   28188:	d00c      	beq.n	281a4 <ull_sched_after_mstr_slot_get+0xa4>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   2818a:	9906      	ldr	r1, [sp, #24]
   2818c:	9207      	str	r2, [sp, #28]
   2818e:	4618      	mov	r0, r3
   28190:	9304      	str	r3, [sp, #16]
   28192:	f00c ff85 	bl	350a0 <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
   28196:	9b05      	ldr	r3, [sp, #20]
   28198:	9a08      	ldr	r2, [sp, #32]
   2819a:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
   2819c:	4288      	cmp	r0, r1
   2819e:	9b04      	ldr	r3, [sp, #16]
   281a0:	9a07      	ldr	r2, [sp, #28]
   281a2:	d822      	bhi.n	281ea <ull_sched_after_mstr_slot_get+0xea>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
   281a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
			ticker_id_prev = ticker_id;
   281a8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   281ac:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   281ae:	e7c5      	b.n	2813c <ull_sched_after_mstr_slot_get+0x3c>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   281b0:	4621      	mov	r1, r4
   281b2:	2000      	movs	r0, #0
   281b4:	f00c ff5a 	bl	3506c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   281b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   281ba:	2b02      	cmp	r3, #2
   281bc:	d0f8      	beq.n	281b0 <ull_sched_after_mstr_slot_get+0xb0>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   281be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
   281c0:	2b00      	cmp	r3, #0
   281c2:	d0cc      	beq.n	2815e <ull_sched_after_mstr_slot_get+0x5e>
   281c4:	2373      	movs	r3, #115	; 0x73
   281c6:	465a      	mov	r2, fp
   281c8:	4651      	mov	r1, sl
   281ca:	4648      	mov	r0, r9
   281cc:	f021 fa52 	bl	49674 <printk>
   281d0:	4040      	eors	r0, r0
   281d2:	f380 8811 	msr	BASEPRI, r0
   281d6:	f04f 0003 	mov.w	r0, #3
   281da:	df02      	svc	2
		if (ticker_id == 0xff) {
   281dc:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   281e0:	28ff      	cmp	r0, #255	; 0xff
   281e2:	d1c0      	bne.n	28166 <ull_sched_after_mstr_slot_get+0x66>
		}
	}

	if (ticker_id_prev != 0xff) {
   281e4:	9b04      	ldr	r3, [sp, #16]
   281e6:	2bff      	cmp	r3, #255	; 0xff
   281e8:	d010      	beq.n	2820c <ull_sched_after_mstr_slot_get+0x10c>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   281ea:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   281ee:	4810      	ldr	r0, [pc, #64]	; (28230 <ull_sched_after_mstr_slot_get+0x130>)
   281f0:	4413      	add	r3, r2
   281f2:	fba3 0200 	umull	r0, r2, r3, r0
   281f6:	2107      	movs	r1, #7
   281f8:	fb01 2103 	mla	r1, r1, r3, r2
   281fc:	a306      	add	r3, pc, #24	; (adr r3, 28218 <ull_sched_after_mstr_slot_get+0x118>)
   281fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   28202:	f7fd ff7d 	bl	26100 <__aeabi_uldivmod>
   28206:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
   28208:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   2820a:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
   2820c:	b00f      	add	sp, #60	; 0x3c
   2820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28212:	bf00      	nop
   28214:	f3af 8000 	nop.w
   28218:	3b9aca00 	.word	0x3b9aca00
   2821c:	00000000 	.word	0x00000000
   28220:	0003e2e9 	.word	0x0003e2e9
   28224:	00052c30 	.word	0x00052c30
   28228:	00052c74 	.word	0x00052c74
   2822c:	00052460 	.word	0x00052460
   28230:	1afd498d 	.word	0x1afd498d
   28234:	00000000 	.word	0x00000000

00028238 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
   28238:	b570      	push	{r4, r5, r6, lr}
   2823a:	b082      	sub	sp, #8
   2823c:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
   2823e:	9201      	str	r2, [sp, #4]
{
   28240:	4615      	mov	r5, r2
   28242:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
   28244:	aa01      	add	r2, sp, #4
   28246:	2002      	movs	r0, #2
   28248:	f7ff ff5a 	bl	28100 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
   2824c:	6823      	ldr	r3, [r4, #0]
   2824e:	b30b      	cbz	r3, 28294 <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
   28250:	9801      	ldr	r0, [sp, #4]
   28252:	1b43      	subs	r3, r0, r5
   28254:	021b      	lsls	r3, r3, #8
   28256:	d41f      	bmi.n	28298 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
   28258:	4629      	mov	r1, r5
   2825a:	f00c ff21 	bl	350a0 <ticker_ticks_diff_get>
   2825e:	4a1a      	ldr	r2, [pc, #104]	; (282c8 <after_mstr_offset_get+0x90>)
   28260:	4603      	mov	r3, r0
   28262:	2107      	movs	r1, #7
   28264:	fba0 0202 	umull	r0, r2, r0, r2
   28268:	fb01 2103 	mla	r1, r1, r3, r2
   2826c:	a314      	add	r3, pc, #80	; (adr r3, 282c0 <after_mstr_offset_get+0x88>)
   2826e:	e9d3 2300 	ldrd	r2, r3, [r3]
   28272:	f7fd ff45 	bl	26100 <__aeabi_uldivmod>
   28276:	6822      	ldr	r2, [r4, #0]
   28278:	4402      	add	r2, r0
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
   2827a:	2a00      	cmp	r2, #0
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
   2827c:	6022      	str	r2, [r4, #0]
	if ((*win_offset_us & BIT(31)) == 0) {
   2827e:	db09      	blt.n	28294 <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
   28280:	f240 43e2 	movw	r3, #1250	; 0x4e2
   28284:	fb03 f006 	mul.w	r0, r3, r6

		while (*win_offset_us > conn_interval_us) {
   28288:	4290      	cmp	r0, r2
   2828a:	d203      	bcs.n	28294 <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
   2828c:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
   2828e:	4282      	cmp	r2, r0
   28290:	d8fc      	bhi.n	2828c <after_mstr_offset_get+0x54>
   28292:	6022      	str	r2, [r4, #0]
		}
	}
}
   28294:	b002      	add	sp, #8
   28296:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
   28298:	4601      	mov	r1, r0
   2829a:	4628      	mov	r0, r5
   2829c:	f00c ff00 	bl	350a0 <ticker_ticks_diff_get>
   282a0:	4a09      	ldr	r2, [pc, #36]	; (282c8 <after_mstr_offset_get+0x90>)
   282a2:	4603      	mov	r3, r0
   282a4:	2107      	movs	r1, #7
   282a6:	fba0 0202 	umull	r0, r2, r0, r2
   282aa:	fb01 2103 	mla	r1, r1, r3, r2
   282ae:	a304      	add	r3, pc, #16	; (adr r3, 282c0 <after_mstr_offset_get+0x88>)
   282b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   282b4:	f7fd ff24 	bl	26100 <__aeabi_uldivmod>
   282b8:	6822      	ldr	r2, [r4, #0]
   282ba:	1a12      	subs	r2, r2, r0
   282bc:	e7dd      	b.n	2827a <after_mstr_offset_get+0x42>
   282be:	bf00      	nop
   282c0:	3b9aca00 	.word	0x3b9aca00
   282c4:	00000000 	.word	0x00000000
   282c8:	1afd498d 	.word	0x1afd498d
   282cc:	00000000 	.word	0x00000000

000282d0 <ull_sched_mfy_win_offset_select>:
{
   282d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   282d4:	f8b0 11a4 	ldrh.w	r1, [r0, #420]	; 0x1a4
{
   282d8:	b088      	sub	sp, #32
   282da:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   282dc:	f240 43e2 	movw	r3, #1250	; 0x4e2
   282e0:	483f      	ldr	r0, [pc, #252]	; (283e0 <ull_sched_mfy_win_offset_select+0x110>)
   282e2:	fb03 f101 	mul.w	r1, r3, r1
	uint8_t offset_m_max = OFFSET_M_MAX;
   282e6:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   282e8:	2600      	movs	r6, #0
   282ea:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
   282ec:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   282f0:	fba1 0100 	umull	r0, r1, r1, r0
   282f4:	a338      	add	r3, pc, #224	; (adr r3, 283d8 <ull_sched_mfy_win_offset_select+0x108>)
   282f6:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   282fa:	e9c5 6601 	strd	r6, r6, [r5, #4]
   282fe:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   28300:	f7fd fefe 	bl	26100 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
   28304:	f10d 030f 	add.w	r3, sp, #15
   28308:	9501      	str	r5, [sp, #4]
   2830a:	9300      	str	r3, [sp, #0]
   2830c:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   28310:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
   28312:	aa04      	add	r2, sp, #16
   28314:	4620      	mov	r0, r4
   28316:	2101      	movs	r1, #1
   28318:	f015 ffe8 	bl	3e2ec <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
   2831c:	f89d 800f 	ldrb.w	r8, [sp, #15]
   28320:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   28324:	b2db      	uxtb	r3, r3
   28326:	f10d 0216 	add.w	r2, sp, #22
	uint8_t has_offset_s = 0U;
   2832a:	4630      	mov	r0, r6
   2832c:	f504 77d2 	add.w	r7, r4, #420	; 0x1a4
   28330:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
   28334:	f504 76d8 	add.w	r6, r4, #432	; 0x1b0
			if (win_offset_s != 0xffff) {
   28338:	f64f 7eff 	movw	lr, #65535	; 0xffff
		win_offset_s =
   2833c:	883a      	ldrh	r2, [r7, #0]
		while (offset_index_m < offset_m_max) {
   2833e:	f1b8 0f00 	cmp.w	r8, #0
   28342:	d00a      	beq.n	2835a <ull_sched_mfy_win_offset_select+0x8a>
   28344:	462b      	mov	r3, r5
			if (win_offset_s != 0xffff) {
   28346:	4572      	cmp	r2, lr
   28348:	d004      	beq.n	28354 <ull_sched_mfy_win_offset_select+0x84>
				if (win_offset_s ==
   2834a:	8819      	ldrh	r1, [r3, #0]
   2834c:	4291      	cmp	r1, r2
				has_offset_s = 1U;
   2834e:	f04f 0001 	mov.w	r0, #1
				if (win_offset_s ==
   28352:	d015      	beq.n	28380 <ull_sched_mfy_win_offset_select+0xb0>
		while (offset_index_m < offset_m_max) {
   28354:	3302      	adds	r3, #2
   28356:	4563      	cmp	r3, ip
   28358:	d1f5      	bne.n	28346 <ull_sched_mfy_win_offset_select+0x76>
	while (offset_index_s < OFFSET_S_MAX) {
   2835a:	3702      	adds	r7, #2
   2835c:	42be      	cmp	r6, r7
   2835e:	d1ed      	bne.n	2833c <ull_sched_mfy_win_offset_select+0x6c>
	} else if (!has_offset_s) {
   28360:	bb18      	cbnz	r0, 283aa <ull_sched_mfy_win_offset_select+0xda>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
   28362:	f8bd 3014 	ldrh.w	r3, [sp, #20]
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
   28366:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
   2836a:	f240 42e2 	movw	r2, #1250	; 0x4e2
   2836e:	fb03 f202 	mul.w	r2, r3, r2
	dst[1] = val >> 8;
   28372:	0a18      	lsrs	r0, r3, #8
   28374:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
	dst[0] = val;
   28378:	700b      	strb	r3, [r1, #0]
	dst[1] = val >> 8;
   2837a:	7048      	strb	r0, [r1, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   2837c:	2204      	movs	r2, #4
   2837e:	e00b      	b.n	28398 <ull_sched_mfy_win_offset_select+0xc8>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
   28380:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
   28384:	f240 43e2 	movw	r3, #1250	; 0x4e2
   28388:	fb02 f303 	mul.w	r3, r2, r3
   2838c:	0a10      	lsrs	r0, r2, #8
   2838e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
	dst[0] = val;
   28392:	700a      	strb	r2, [r1, #0]
	dst[1] = val >> 8;
   28394:	7048      	strb	r0, [r1, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   28396:	2204      	movs	r2, #4
   28398:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   2839c:	f362 0302 	bfi	r3, r2, #0, #3
   283a0:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
}
   283a4:	b008      	add	sp, #32
   283a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_ctrl_tx = CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
   283aa:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   283ae:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   283b2:	2103      	movs	r1, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   283b4:	430a      	orrs	r2, r1
		pdu_ctrl_tx->llctrl.opcode =
   283b6:	2011      	movs	r0, #17
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   283b8:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   283bc:	f803 1c04 	strb.w	r1, [r3, #-4]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
   283c0:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
   283c2:	210f      	movs	r1, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
   283c4:	701a      	strb	r2, [r3, #0]
		pdu_ctrl_tx->llctrl.opcode =
   283c6:	f803 0c02 	strb.w	r0, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
   283ca:	f803 1c01 	strb.w	r1, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
   283ce:	2205      	movs	r2, #5
   283d0:	e7e2      	b.n	28398 <ull_sched_mfy_win_offset_select+0xc8>
   283d2:	bf00      	nop
   283d4:	f3af 8000 	nop.w
   283d8:	1afd498d 	.word	0x1afd498d
   283dc:	00000007 	.word	0x00000007
   283e0:	3b9aca00 	.word	0x3b9aca00
   283e4:	00000000 	.word	0x00000000

000283e8 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
   283e8:	b538      	push	{r3, r4, r5, lr}
   283ea:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
   283ec:	f018 ff50 	bl	41290 <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
   283f0:	7da3      	ldrb	r3, [r4, #22]
   283f2:	7da2      	ldrb	r2, [r4, #22]
   283f4:	f3c3 0341 	ubfx	r3, r3, #1, #2
   283f8:	3301      	adds	r3, #1
   283fa:	f003 0303 	and.w	r3, r3, #3
   283fe:	2b03      	cmp	r3, #3
		lll->chan = 0U;
   28400:	bf08      	it	eq
   28402:	2300      	moveq	r3, #0
   28404:	f363 0242 	bfi	r2, r3, #1, #2
	}
	lll_chan_set(37 + lll->chan);
   28408:	bf14      	ite	ne
   2840a:	f103 0025 	addne.w	r0, r3, #37	; 0x25
   2840e:	2025      	moveq	r0, #37	; 0x25
   28410:	75a2      	strb	r2, [r4, #22]
   28412:	f017 fe79 	bl	40108 <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
   28416:	6863      	ldr	r3, [r4, #4]
   28418:	b30b      	cbz	r3, 2845e <isr_window+0x76>
   2841a:	6923      	ldr	r3, [r4, #16]
   2841c:	b1fb      	cbz	r3, 2845e <isr_window+0x76>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
   2841e:	f01a fc29 	bl	42c74 <radio_tmr_start_get>
   28422:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
   28424:	f00c fe3a 	bl	3509c <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   28428:	1cc1      	adds	r1, r0, #3
   2842a:	2000      	movs	r0, #0
   2842c:	f01a fbf0 	bl	42c10 <radio_tmr_start_tick>
#endif /* !CONFIG_BT_CENTRAL */

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event.
	 */
	radio_tmr_end_capture();
   28430:	f01a fc6c 	bl	42d0c <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
   28434:	f01a fc1e 	bl	42c74 <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
   28438:	4629      	mov	r1, r5
   2843a:	f00c fe31 	bl	350a0 <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
   2843e:	4a10      	ldr	r2, [pc, #64]	; (28480 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
   28440:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
   28442:	2107      	movs	r1, #7
   28444:	fba0 0202 	umull	r0, r2, r0, r2
   28448:	fb01 2103 	mla	r1, r1, r3, r2
   2844c:	a30a      	add	r3, pc, #40	; (adr r3, 28478 <isr_window+0x90>)
   2844e:	e9d3 2300 	ldrd	r2, r3, [r3]
   28452:	f7fd fe55 	bl	26100 <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
   28456:	6923      	ldr	r3, [r4, #16]
   28458:	1a1b      	subs	r3, r3, r0
   2845a:	6123      	str	r3, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
   2845c:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
   2845e:	f00c fe1d 	bl	3509c <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   28462:	1cc1      	adds	r1, r0, #3
   28464:	2000      	movs	r0, #0
   28466:	f01a fbd3 	bl	42c10 <radio_tmr_start_tick>
}
   2846a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   2846e:	f01a bc4d 	b.w	42d0c <radio_tmr_end_capture>
   28472:	bf00      	nop
   28474:	f3af 8000 	nop.w
   28478:	3b9aca00 	.word	0x3b9aca00
   2847c:	00000000 	.word	0x00000000
   28480:	1afd498d 	.word	0x1afd498d
   28484:	00000000 	.word	0x00000000

00028488 <isr_rx>:
{
   28488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2848c:	b089      	sub	sp, #36	; 0x24
   2848e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   28490:	f01a f9d2 	bl	42838 <radio_is_done>
	if (trx_done) {
   28494:	b2c0      	uxtb	r0, r0
   28496:	b950      	cbnz	r0, 284ae <isr_rx+0x26>
	lll_isr_status_reset();
   28498:	f017 fe8e 	bl	401b8 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
   2849c:	4879      	ldr	r0, [pc, #484]	; (28684 <isr_rx+0x1fc>)
   2849e:	4621      	mov	r1, r4
   284a0:	f01a f8a6 	bl	425f0 <radio_isr_set>
}
   284a4:	b009      	add	sp, #36	; 0x24
   284a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
   284aa:	f01a b99b 	b.w	427e4 <radio_disable>
		crc_ok = radio_crc_is_valid();
   284ae:	f01a f9e3 	bl	42878 <radio_crc_is_valid>
   284b2:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   284b4:	f01a fafe 	bl	42ab4 <radio_filter_has_match>
   284b8:	4683      	mov	fp, r0
		devmatch_id = radio_filter_match_get();
   284ba:	f01a fb05 	bl	42ac8 <radio_filter_match_get>
   284be:	4681      	mov	r9, r0
		irkmatch_ok = radio_ar_has_match();
   284c0:	f01a fd1a 	bl	42ef8 <radio_ar_has_match>
   284c4:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   284c6:	f01a fcfb 	bl	42ec0 <radio_ar_match_get>
   284ca:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
   284cc:	f01a fab6 	bl	42a3c <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
   284d0:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
   284d2:	4680      	mov	r8, r0
		phy_flags_rx = radio_phy_flags_rx_get();
   284d4:	f01a fa98 	bl	42a08 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
   284d8:	f017 fe6e 	bl	401b8 <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
   284dc:	2d00      	cmp	r5, #0
   284de:	d0dd      	beq.n	2849c <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(1);
   284e0:	2001      	movs	r0, #1
   284e2:	f00f f9c7 	bl	37874 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   284e6:	4605      	mov	r5, r0
   284e8:	2800      	cmp	r0, #0
   284ea:	f000 80bd 	beq.w	28668 <isr_rx+0x1e0>
	rl_idx = devmatch_ok ?
   284ee:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
		irkmatch_ok = radio_ar_has_match();
   284f2:	b2f6      	uxtb	r6, r6
	rl_idx = devmatch_ok ?
   284f4:	f040 80af 	bne.w	28656 <isr_rx+0x1ce>
   284f8:	2e00      	cmp	r6, #0
   284fa:	d138      	bne.n	2856e <isr_rx+0xe6>
   284fc:	27ff      	movs	r7, #255	; 0xff
	    !lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok, rl_idx)) {
   284fe:	465a      	mov	r2, fp
   28500:	463b      	mov	r3, r7
   28502:	4631      	mov	r1, r6
   28504:	4620      	mov	r0, r4
   28506:	f019 f8ef 	bl	416e8 <lll_scan_isr_rx_check>
	if (has_adva &&
   2850a:	2800      	cmp	r0, #0
   2850c:	d0c6      	beq.n	2849c <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
   2850e:	6863      	ldr	r3, [r4, #4]
	bool dir_report = false;
   28510:	2200      	movs	r2, #0
		rssi_ready = radio_rssi_is_ready();
   28512:	fa5f f888 	uxtb.w	r8, r8
	bool dir_report = false;
   28516:	f88d 201b 	strb.w	r2, [sp, #27]
	} else if (lll->conn && !lll->conn->central.cancelled &&
   2851a:	2b00      	cmp	r3, #0
   2851c:	d040      	beq.n	285a0 <isr_rx+0x118>
   2851e:	6863      	ldr	r3, [r4, #4]
   28520:	f893 3020 	ldrb.w	r3, [r3, #32]
   28524:	f013 0f02 	tst.w	r3, #2
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
   28528:	7f2b      	ldrb	r3, [r5, #28]
   2852a:	f003 010f 	and.w	r1, r3, #15
	} else if (lll->conn && !lll->conn->central.cancelled &&
   2852e:	d13a      	bne.n	285a6 <isr_rx+0x11e>
   28530:	2907      	cmp	r1, #7
   28532:	f040 80af 	bne.w	28694 <isr_rx+0x20c>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
		   (/* allow directed adv packets addressed to this device */
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
					pdu_adv_rx->direct_ind.tgt_addr,
					rl_idx, &dir_report))) ||
   28536:	f003 030f 	and.w	r3, r3, #15
   2853a:	2b04      	cmp	r3, #4
   2853c:	d1ae      	bne.n	2849c <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
		   lll->phy && lll_scan_ext_tgta_check(lll, true, false,
						       pdu_adv_rx, rl_idx,
						       &dir_report)) ||
#endif /* CONFIG_BT_CTLR_ADV_EXT */
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   2853e:	7f6b      	ldrb	r3, [r5, #29]
   28540:	2b25      	cmp	r3, #37	; 0x25
   28542:	d8ab      	bhi.n	2849c <isr_rx+0x14>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
		   (lll->state != 0U) &&
   28544:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   28546:	07da      	lsls	r2, r3, #31
   28548:	d5a8      	bpl.n	2849c <isr_rx+0x14>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   2854a:	f01a f9a3 	bl	42894 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
   2854e:	7f2b      	ldrb	r3, [r5, #28]
   28550:	7802      	ldrb	r2, [r0, #0]
   28552:	f3c3 1380 	ubfx	r3, r3, #6, #1
   28556:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   2855a:	d19f      	bne.n	2849c <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
   2855c:	3008      	adds	r0, #8
   2855e:	2206      	movs	r2, #6
   28560:	f105 011e 	add.w	r1, r5, #30
   28564:	f023 f981 	bl	4b86a <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   28568:	2800      	cmp	r0, #0
   2856a:	d197      	bne.n	2849c <isr_rx+0x14>
   2856c:	e040      	b.n	285f0 <isr_rx+0x168>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   2856e:	fa5f f08a 	uxtb.w	r0, sl
   28572:	f017 f933 	bl	3f7dc <ull_filter_lll_rl_irk_idx>
   28576:	4607      	mov	r7, r0
   28578:	e7c1      	b.n	284fe <isr_rx+0x76>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
   2857a:	2901      	cmp	r1, #1
   2857c:	f040 8149 	bne.w	28812 <isr_rx+0x38a>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   28580:	7f6b      	ldrb	r3, [r5, #29]
   28582:	2b0c      	cmp	r3, #12
   28584:	d18a      	bne.n	2849c <isr_rx+0x14>
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
   28586:	7f2a      	ldrb	r2, [r5, #28]
   28588:	9700      	str	r7, [sp, #0]
   2858a:	2300      	movs	r3, #0
   2858c:	9301      	str	r3, [sp, #4]
   2858e:	09d2      	lsrs	r2, r2, #7
   28590:	f105 0324 	add.w	r3, r5, #36	; 0x24
   28594:	4620      	mov	r0, r4
   28596:	f018 fff9 	bl	4158c <isr_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
   2859a:	2800      	cmp	r0, #0
   2859c:	f040 8084 	bne.w	286a8 <isr_rx+0x220>
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
   285a0:	7f2b      	ldrb	r3, [r5, #28]
   285a2:	f003 010f 	and.w	r1, r3, #15
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   285a6:	2900      	cmp	r1, #0
   285a8:	f040 8133 	bne.w	28812 <isr_rx+0x38a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   285ac:	7f6b      	ldrb	r3, [r5, #29]
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   285ae:	2b25      	cmp	r3, #37	; 0x25
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   285b0:	461a      	mov	r2, r3
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   285b2:	d84e      	bhi.n	28652 <isr_rx+0x1ca>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
   285b4:	7da3      	ldrb	r3, [r4, #22]
   285b6:	069b      	lsls	r3, r3, #26
   285b8:	d503      	bpl.n	285c2 <isr_rx+0x13a>
		   !lll->conn) {
   285ba:	6863      	ldr	r3, [r4, #4]
		   lll->type &&
   285bc:	2b00      	cmp	r3, #0
   285be:	f000 8139 	beq.w	28834 <isr_rx+0x3ac>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   285c2:	2345      	movs	r3, #69	; 0x45
   285c4:	40cb      	lsrs	r3, r1
   285c6:	07db      	lsls	r3, r3, #31
   285c8:	d413      	bmi.n	285f2 <isr_rx+0x16a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   285ca:	2901      	cmp	r1, #1
   285cc:	d141      	bne.n	28652 <isr_rx+0x1ca>
   285ce:	7f6b      	ldrb	r3, [r5, #29]
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   285d0:	2b0c      	cmp	r3, #12
   285d2:	f47f af63 	bne.w	2849c <isr_rx+0x14>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
   285d6:	7f2a      	ldrb	r2, [r5, #28]
   285d8:	9700      	str	r7, [sp, #0]
   285da:	f10d 031b 	add.w	r3, sp, #27
   285de:	9301      	str	r3, [sp, #4]
   285e0:	09d2      	lsrs	r2, r2, #7
   285e2:	f105 0324 	add.w	r3, r5, #36	; 0x24
   285e6:	2100      	movs	r1, #0
   285e8:	4620      	mov	r0, r4
   285ea:	f018 ffcf 	bl	4158c <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
   285ee:	b380      	cbz	r0, 28652 <isr_rx+0x1ca>
		 (pdu_adv_rx->len != 0) &&
   285f0:	7f6a      	ldrb	r2, [r5, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   285f2:	2a00      	cmp	r2, #0
   285f4:	f43f af52 	beq.w	2849c <isr_rx+0x14>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
   285f8:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
   285fa:	b12b      	cbz	r3, 28608 <isr_rx+0x180>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
   285fc:	7f2b      	ldrb	r3, [r5, #28]
   285fe:	f003 030f 	and.w	r3, r3, #15
   28602:	2b07      	cmp	r3, #7
   28604:	f47f af4a 	bne.w	2849c <isr_rx+0x14>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
   28608:	2003      	movs	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
   2860a:	f89d 901b 	ldrb.w	r9, [sp, #27]
	node_rx = ull_pdu_rx_alloc_peek(3);
   2860e:	f00f f931 	bl	37874 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   28612:	4605      	mov	r5, r0
   28614:	2800      	cmp	r0, #0
   28616:	f43f af41 	beq.w	2849c <isr_rx+0x14>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   2861a:	f00f f949 	bl	378b0 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   2861e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28622:	80eb      	strh	r3, [r5, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   28624:	2305      	movs	r3, #5
   28626:	712b      	strb	r3, [r5, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28628:	f1b8 0f00 	cmp.w	r8, #0
   2862c:	f040 80fe 	bne.w	2882c <isr_rx+0x3a4>
   28630:	207f      	movs	r0, #127	; 0x7f
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
   28632:	7eab      	ldrb	r3, [r5, #26]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28634:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28636:	2e00      	cmp	r6, #0
   28638:	bf08      	it	eq
   2863a:	27ff      	moveq	r7, #255	; 0xff
	node_rx->hdr.rx_ftr.direct = dir_report;
   2863c:	f369 0341 	bfi	r3, r9, #1, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   28640:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   28642:	76ab      	strb	r3, [r5, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
   28644:	4629      	mov	r1, r5
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28646:	766f      	strb	r7, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   28648:	f00f f948 	bl	378dc <ull_rx_put>
	ull_rx_sched();
   2864c:	f00f f956 	bl	378fc <ull_rx_sched>
	if (!err) {
   28650:	e724      	b.n	2849c <isr_rx+0x14>
   28652:	7f2b      	ldrb	r3, [r5, #28]
   28654:	e76f      	b.n	28536 <isr_rx+0xae>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
   28656:	7da0      	ldrb	r0, [r4, #22]
   28658:	fa5f f189 	uxtb.w	r1, r9
   2865c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   28660:	f017 f852 	bl	3f708 <ull_filter_lll_rl_idx>
   28664:	4607      	mov	r7, r0
   28666:	e74a      	b.n	284fe <isr_rx+0x76>
	LL_ASSERT(node_rx);
   28668:	4a07      	ldr	r2, [pc, #28]	; (28688 <isr_rx+0x200>)
   2866a:	4908      	ldr	r1, [pc, #32]	; (2868c <isr_rx+0x204>)
   2866c:	4808      	ldr	r0, [pc, #32]	; (28690 <isr_rx+0x208>)
   2866e:	f240 23c3 	movw	r3, #707	; 0x2c3
   28672:	f020 ffff 	bl	49674 <printk>
   28676:	4040      	eors	r0, r0
   28678:	f380 8811 	msr	BASEPRI, r0
   2867c:	f04f 0003 	mov.w	r0, #3
   28680:	df02      	svc	2
   28682:	e734      	b.n	284ee <isr_rx+0x66>
   28684:	00041349 	.word	0x00041349
   28688:	00053094 	.word	0x00053094
   2868c:	00053048 	.word	0x00053048
   28690:	00052460 	.word	0x00052460
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   28694:	7da2      	ldrb	r2, [r4, #22]
				    rl_idx)) &&
   28696:	0710      	lsls	r0, r2, #28
   28698:	f140 80ab 	bpl.w	287f2 <isr_rx+0x36a>
   2869c:	2900      	cmp	r1, #0
   2869e:	f47f af6c 	bne.w	2857a <isr_rx+0xf2>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
   286a2:	7f6b      	ldrb	r3, [r5, #29]
   286a4:	2b25      	cmp	r3, #37	; 0x25
   286a6:	d8d4      	bhi.n	28652 <isr_rx+0x1ca>
			rx = ull_pdu_rx_alloc_peek(4);
   286a8:	2004      	movs	r0, #4
   286aa:	f00f f8e3 	bl	37874 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   286ae:	2800      	cmp	r0, #0
   286b0:	f43f aef4 	beq.w	2849c <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
   286b4:	f01a fb32 	bl	42d1c <radio_tmr_end_get>
		if (!lll->ticks_window) {
   286b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
   286ba:	4680      	mov	r8, r0
		if (!lll->ticks_window) {
   286bc:	b943      	cbnz	r3, 286d0 <isr_rx+0x248>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
   286be:	8c23      	ldrh	r3, [r4, #32]
   286c0:	f240 2271 	movw	r2, #625	; 0x271
   286c4:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
   286c8:	fbb0 f2f3 	udiv	r2, r0, r3
   286cc:	fb03 0812 	mls	r8, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
   286d0:	6823      	ldr	r3, [r4, #0]
   286d2:	691a      	ldr	r2, [r3, #16]
   286d4:	4bbc      	ldr	r3, [pc, #752]	; (289c8 <isr_rx+0x540>)
   286d6:	2107      	movs	r1, #7
   286d8:	fba2 0303 	umull	r0, r3, r2, r3
   286dc:	fb01 3102 	mla	r1, r1, r2, r3
   286e0:	a3b7      	add	r3, pc, #732	; (adr r3, 289c0 <isr_rx+0x538>)
   286e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   286e6:	f7fd fd0b 	bl	26100 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
   286ea:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
   286ee:	4543      	cmp	r3, r8
   286f0:	f4ff aed4 	bcc.w	2849c <isr_rx+0x14>
		radio_switch_complete_and_disable();
   286f4:	f01a f97a 	bl	429ec <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   286f8:	4638      	mov	r0, r7
		lll_conn = lll->conn;
   286fa:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   286fc:	f016 ffe0 	bl	3f6c0 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
   28700:	7de3      	ldrb	r3, [r4, #23]
   28702:	079a      	lsls	r2, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   28704:	4681      	mov	r9, r0
		if (lll->rpa_gen && lrpa) {
   28706:	f140 8127 	bpl.w	28958 <isr_rx+0x4d0>
   2870a:	2800      	cmp	r0, #0
   2870c:	f000 8124 	beq.w	28958 <isr_rx+0x4d0>
			init_addr = lrpa->val;
   28710:	4683      	mov	fp, r0
			init_tx_addr = 1;
   28712:	f04f 0801 	mov.w	r8, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
   28716:	f01a f8bd 	bl	42894 <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
   2871a:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   2871c:	aa07      	add	r2, sp, #28
   2871e:	9203      	str	r2, [sp, #12]
					     pdu_adv_rx->adv_ind.addr,
   28720:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   28724:	4601      	mov	r1, r0
		pdu_tx = (void *)radio_pkt_scratch_get();
   28726:	4682      	mov	sl, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   28728:	f3c3 1380 	ubfx	r3, r3, #6, #1
   2872c:	9200      	str	r2, [sp, #0]
   2872e:	4620      	mov	r0, r4
   28730:	2200      	movs	r2, #0
   28732:	e9cd 8b01 	strd	r8, fp, [sp, #4]
   28736:	f018 fff1 	bl	4171c <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
   2873a:	4650      	mov	r0, sl
   2873c:	f01a f830 	bl	427a0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   28740:	f01a f870 	bl	42824 <radio_is_ready>
   28744:	2800      	cmp	r0, #0
   28746:	f040 811d 	bne.w	28984 <isr_rx+0x4fc>
		radio_isr_set(isr_done_cleanup, lll);
   2874a:	48a0      	ldr	r0, [pc, #640]	; (289cc <isr_rx+0x544>)
   2874c:	4621      	mov	r1, r4
   2874e:	f019 ff4f 	bl	425f0 <radio_isr_set>
		lll->conn->central.initiated = 1U;
   28752:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
   28754:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->central.initiated = 1U;
   28756:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
   2875a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->central.initiated = 1U;
   2875e:	f042 0201 	orr.w	r2, r2, #1
   28762:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
   28766:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
   28768:	f00f f8a2 	bl	378b0 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   2876c:	2316      	movs	r3, #22
		rx = ull_pdu_rx_alloc();
   2876e:	4680      	mov	r8, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   28770:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   28772:	f64f 73ff 	movw	r3, #65535	; 0xffff
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
   28776:	7f2d      	ldrb	r5, [r5, #28]
		rx->hdr.handle = 0xffff;
   28778:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
   2877a:	4651      	mov	r1, sl
   2877c:	2224      	movs	r2, #36	; 0x24
   2877e:	301c      	adds	r0, #28
   28780:	f023 f883 	bl	4b88a <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
   28784:	f898 301c 	ldrb.w	r3, [r8, #28]
		ftr->param = lll;
   28788:	f8c8 4008 	str.w	r4, [r8, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
   2878c:	f3c5 1540 	ubfx	r5, r5, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
   28790:	f365 1345 	bfi	r3, r5, #5, #1
   28794:	f888 301c 	strb.w	r3, [r8, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
   28798:	f01a fa6c 	bl	42c74 <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
   2879c:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
   2879e:	f8c8 0010 	str.w	r0, [r8, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
   287a2:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
   287a4:	9d07      	ldr	r5, [sp, #28]
				    radio_rx_chain_delay_get(PHY_1M, 0);
   287a6:	f01a f80b 	bl	427c0 <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   287aa:	2e00      	cmp	r6, #0
   287ac:	bf08      	it	eq
   287ae:	27ff      	moveq	r7, #255	; 0xff
   287b0:	f888 7019 	strb.w	r7, [r8, #25]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   287b4:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
   287b6:	1a2d      	subs	r5, r5, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   287b8:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
   287bc:	f8c8 5014 	str.w	r5, [r8, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   287c0:	d003      	beq.n	287ca <isr_rx+0x342>
   287c2:	f1b9 0300 	subs.w	r3, r9, #0
   287c6:	bf18      	it	ne
   287c8:	2301      	movne	r3, #1
   287ca:	f898 201a 	ldrb.w	r2, [r8, #26]
   287ce:	f363 0200 	bfi	r2, r3, #0, #1
   287d2:	f888 201a 	strb.w	r2, [r8, #26]
			ftr->extra = ull_pdu_rx_alloc();
   287d6:	f00f f86b 	bl	378b0 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   287da:	4641      	mov	r1, r8
			ftr->extra = ull_pdu_rx_alloc();
   287dc:	f8c8 000c 	str.w	r0, [r8, #12]
		ull_rx_put(rx->hdr.link, rx);
   287e0:	f8d8 0000 	ldr.w	r0, [r8]
   287e4:	f00f f87a 	bl	378dc <ull_rx_put>
}
   287e8:	b009      	add	sp, #36	; 0x24
   287ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ull_rx_sched();
   287ee:	f00f b885 	b.w	378fc <ull_rx_sched>
	if (rl_idx != FILTER_IDX_NONE) {
   287f2:	2fff      	cmp	r7, #255	; 0xff
   287f4:	f88d 701c 	strb.w	r7, [sp, #28]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
   287f8:	f3c3 1980 	ubfx	r9, r3, #6, #1
	if (rl_idx != FILTER_IDX_NONE) {
   287fc:	f000 8088 	beq.w	28910 <isr_rx+0x488>
		return (rl_idx == lll->rl_idx);
   28800:	7e22      	ldrb	r2, [r4, #24]
   28802:	1bd2      	subs	r2, r2, r7
   28804:	fab2 f282 	clz	r2, r2
   28808:	0952      	lsrs	r2, r2, #5
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   2880a:	2a00      	cmp	r2, #0
   2880c:	f47f af46 	bne.w	2869c <isr_rx+0x214>
   28810:	e6c9      	b.n	285a6 <isr_rx+0x11e>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   28812:	2906      	cmp	r1, #6
   28814:	f43f aeca 	beq.w	285ac <isr_rx+0x124>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   28818:	2345      	movs	r3, #69	; 0x45
   2881a:	40cb      	lsrs	r3, r1
   2881c:	07d8      	lsls	r0, r3, #31
   2881e:	f57f aed4 	bpl.w	285ca <isr_rx+0x142>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   28822:	7f6a      	ldrb	r2, [r5, #29]
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   28824:	2a25      	cmp	r2, #37	; 0x25
   28826:	f67f aee4 	bls.w	285f2 <isr_rx+0x16a>
   2882a:	e6ce      	b.n	285ca <isr_rx+0x142>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   2882c:	f01a f8f8 	bl	42a20 <radio_rssi_get>
   28830:	b2c0      	uxtb	r0, r0
   28832:	e6fe      	b.n	28632 <isr_rx+0x1aa>
		radio_tmr_tifs_set(EVENT_IFS_US);
   28834:	2096      	movs	r0, #150	; 0x96
   28836:	9305      	str	r3, [sp, #20]
   28838:	f01a f95c 	bl	42af4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   2883c:	9b05      	ldr	r3, [sp, #20]
   2883e:	4618      	mov	r0, r3
   28840:	f01a f82c 	bl	4289c <radio_switch_complete_and_rx>
	node_rx = ull_pdu_rx_alloc_peek(3);
   28844:	2003      	movs	r0, #3
   28846:	f00f f815 	bl	37874 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   2884a:	4681      	mov	r9, r0
   2884c:	2800      	cmp	r0, #0
   2884e:	f43f ae25 	beq.w	2849c <isr_rx+0x14>
	ull_pdu_rx_alloc();
   28852:	f00f f82d 	bl	378b0 <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
   28856:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2885a:	f8a9 3006 	strh.w	r3, [r9, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   2885e:	2305      	movs	r3, #5
   28860:	f889 3004 	strb.w	r3, [r9, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28864:	f1b8 0f00 	cmp.w	r8, #0
   28868:	d172      	bne.n	28950 <isr_rx+0x4c8>
   2886a:	237f      	movs	r3, #127	; 0x7f
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   2886c:	2e00      	cmp	r6, #0
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   2886e:	f889 3018 	strb.w	r3, [r9, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28872:	bf14      	ite	ne
   28874:	463b      	movne	r3, r7
   28876:	23ff      	moveq	r3, #255	; 0xff
   28878:	f889 3019 	strb.w	r3, [r9, #25]
	node_rx->hdr.rx_ftr.direct = dir_report;
   2887c:	f899 301a 	ldrb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
   28880:	f8d9 0000 	ldr.w	r0, [r9]
	node_rx->hdr.rx_ftr.direct = dir_report;
   28884:	f36f 0341 	bfc	r3, #1, #1
   28888:	f889 301a 	strb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
   2888c:	4649      	mov	r1, r9
   2888e:	f00f f825 	bl	378dc <ull_rx_put>
	ull_rx_sched();
   28892:	f00f f833 	bl	378fc <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
   28896:	f019 fffd 	bl	42894 <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   2889a:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
   2889c:	4606      	mov	r6, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   2889e:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   288a2:	7832      	ldrb	r2, [r6, #0]
   288a4:	01db      	lsls	r3, r3, #7
   288a6:	f002 0270 	and.w	r2, r2, #112	; 0x70
   288aa:	f043 0303 	orr.w	r3, r3, #3
   288ae:	4313      	orrs	r3, r2
   288b0:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   288b2:	230c      	movs	r3, #12
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   288b4:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   288b6:	7073      	strb	r3, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   288b8:	f016 ff02 	bl	3f6c0 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
   288bc:	7de3      	ldrb	r3, [r4, #23]
   288be:	079f      	lsls	r7, r3, #30
   288c0:	d551      	bpl.n	28966 <isr_rx+0x4de>
   288c2:	2800      	cmp	r0, #0
   288c4:	d04f      	beq.n	28966 <isr_rx+0x4de>
			pdu_tx->tx_addr = 1;
   288c6:	7833      	ldrb	r3, [r6, #0]
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
   288c8:	4601      	mov	r1, r0
			pdu_tx->tx_addr = 1;
   288ca:	4630      	mov	r0, r6
   288cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   288d0:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
   288d4:	2206      	movs	r2, #6
   288d6:	f022 ffd8 	bl	4b88a <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   288da:	2206      	movs	r2, #6
   288dc:	f105 011e 	add.w	r1, r5, #30
   288e0:	f106 0008 	add.w	r0, r6, #8
   288e4:	f022 ffd1 	bl	4b88a <memcpy>
		radio_pkt_tx_set(pdu_tx);
   288e8:	4630      	mov	r0, r6
   288ea:	f019 ff59 	bl	427a0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   288ee:	f019 ff99 	bl	42824 <radio_is_ready>
   288f2:	2800      	cmp	r0, #0
   288f4:	d154      	bne.n	289a0 <isr_rx+0x518>
		radio_tmr_end_capture();
   288f6:	f01a fa09 	bl	42d0c <radio_tmr_end_capture>
		lll->state = 1U;
   288fa:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
   288fc:	4834      	ldr	r0, [pc, #208]	; (289d0 <isr_rx+0x548>)
		lll->state = 1U;
   288fe:	f043 0301 	orr.w	r3, r3, #1
		radio_isr_set(isr_tx, lll);
   28902:	4621      	mov	r1, r4
		lll->state = 1U;
   28904:	75a3      	strb	r3, [r4, #22]
}
   28906:	b009      	add	sp, #36	; 0x24
   28908:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		radio_isr_set(isr_tx, lll);
   2890c:	f019 be70 	b.w	425f0 <radio_isr_set>
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
   28910:	f105 0a1e 	add.w	sl, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
   28914:	aa07      	add	r2, sp, #28
   28916:	4651      	mov	r1, sl
   28918:	4648      	mov	r0, r9
   2891a:	f017 f815 	bl	3f948 <ull_filter_lll_rl_addr_allowed>
   2891e:	2800      	cmp	r0, #0
   28920:	f43f ae3e 	beq.w	285a0 <isr_rx+0x118>
	return ((lll->adv_addr_type == addr_type) &&
   28924:	7de3      	ldrb	r3, [r4, #23]
   28926:	f003 0301 	and.w	r3, r3, #1
   2892a:	454b      	cmp	r3, r9
   2892c:	f47f ae38 	bne.w	285a0 <isr_rx+0x118>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
   28930:	4651      	mov	r1, sl
   28932:	2206      	movs	r2, #6
   28934:	f104 0008 	add.w	r0, r4, #8
   28938:	f022 ff97 	bl	4b86a <memcmp>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
   2893c:	7f2b      	ldrb	r3, [r5, #28]
	return ((lll->adv_addr_type == addr_type) &&
   2893e:	fab0 f280 	clz	r2, r0
   28942:	0952      	lsrs	r2, r2, #5
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
   28944:	f003 010f 	and.w	r1, r3, #15
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   28948:	2a00      	cmp	r2, #0
   2894a:	f47f aea7 	bne.w	2869c <isr_rx+0x214>
   2894e:	e62a      	b.n	285a6 <isr_rx+0x11e>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   28950:	f01a f866 	bl	42a20 <radio_rssi_get>
   28954:	b2c3      	uxtb	r3, r0
   28956:	e789      	b.n	2886c <isr_rx+0x3e4>
			init_tx_addr = lll->init_addr_type;
   28958:	f894 8016 	ldrb.w	r8, [r4, #22]
			init_addr = lll->init_addr;
   2895c:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
   28960:	f3c8 1880 	ubfx	r8, r8, #6, #1
			init_addr = lll->init_addr;
   28964:	e6d7      	b.n	28716 <isr_rx+0x28e>
			pdu_tx->tx_addr = lll->init_addr_type;
   28966:	7da3      	ldrb	r3, [r4, #22]
   28968:	7832      	ldrb	r2, [r6, #0]
   2896a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   2896e:	4630      	mov	r0, r6
   28970:	f363 1286 	bfi	r2, r3, #6, #1
   28974:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   28978:	f104 0119 	add.w	r1, r4, #25
   2897c:	2206      	movs	r2, #6
   2897e:	f022 ff84 	bl	4b88a <memcpy>
   28982:	e7aa      	b.n	288da <isr_rx+0x452>
		LL_ASSERT(!radio_is_ready());
   28984:	4a13      	ldr	r2, [pc, #76]	; (289d4 <isr_rx+0x54c>)
   28986:	4914      	ldr	r1, [pc, #80]	; (289d8 <isr_rx+0x550>)
   28988:	4814      	ldr	r0, [pc, #80]	; (289dc <isr_rx+0x554>)
   2898a:	f240 4391 	movw	r3, #1169	; 0x491
   2898e:	f020 fe71 	bl	49674 <printk>
   28992:	4040      	eors	r0, r0
   28994:	f380 8811 	msr	BASEPRI, r0
   28998:	f04f 0003 	mov.w	r0, #3
   2899c:	df02      	svc	2
   2899e:	e6d4      	b.n	2874a <isr_rx+0x2c2>
		LL_ASSERT(!radio_is_ready());
   289a0:	4a0c      	ldr	r2, [pc, #48]	; (289d4 <isr_rx+0x54c>)
   289a2:	490d      	ldr	r1, [pc, #52]	; (289d8 <isr_rx+0x550>)
   289a4:	480d      	ldr	r0, [pc, #52]	; (289dc <isr_rx+0x554>)
   289a6:	f240 5316 	movw	r3, #1302	; 0x516
   289aa:	f020 fe63 	bl	49674 <printk>
   289ae:	4040      	eors	r0, r0
   289b0:	f380 8811 	msr	BASEPRI, r0
   289b4:	f04f 0003 	mov.w	r0, #3
   289b8:	df02      	svc	2
   289ba:	e79c      	b.n	288f6 <isr_rx+0x46e>
   289bc:	f3af 8000 	nop.w
   289c0:	3b9aca00 	.word	0x3b9aca00
   289c4:	00000000 	.word	0x00000000
   289c8:	1afd498d 	.word	0x1afd498d
   289cc:	00041541 	.word	0x00041541
   289d0:	0004135d 	.word	0x0004135d
   289d4:	00053094 	.word	0x00053094
   289d8:	00053050 	.word	0x00053050
   289dc:	00052460 	.word	0x00052460

000289e0 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   289e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   289e4:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
   289e6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 28ac0 <nrf_flash_sync_exe+0xe0>
{
   289ea:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   289ec:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   289f0:	f10d 0036 	add.w	r0, sp, #54	; 0x36
   289f4:	f00e fe30 	bl	37658 <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
   289f8:	4f32      	ldr	r7, [pc, #200]	; (28ac4 <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
   289fa:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
   289fe:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
   28a02:	f00c fb4b 	bl	3509c <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
   28a06:	f8d8 4000 	ldr.w	r4, [r8]
   28a0a:	fba4 5407 	umull	r5, r4, r4, r7
   28a0e:	a32a      	add	r3, pc, #168	; (adr r3, 28ab8 <nrf_flash_sync_exe+0xd8>)
   28a10:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
   28a14:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
   28a16:	4621      	mov	r1, r4
   28a18:	4628      	mov	r0, r5
   28a1a:	f7fd fb71 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   28a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
   28a20:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   28a22:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
   28a26:	9306      	str	r3, [sp, #24]
   28a28:	4b27      	ldr	r3, [pc, #156]	; (28ac8 <nrf_flash_sync_exe+0xe8>)
   28a2a:	9305      	str	r3, [sp, #20]
   28a2c:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   28a2e:	a322      	add	r3, pc, #136	; (adr r3, 28ab8 <nrf_flash_sync_exe+0xd8>)
   28a30:	e9d3 2300 	ldrd	r2, r3, [r3]
   28a34:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
   28a38:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   28a3c:	f7fd fb60 	bl	26100 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   28a42:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
   28a46:	4b21      	ldr	r3, [pc, #132]	; (28acc <nrf_flash_sync_exe+0xec>)
	err = ticker_start(instance_index,
   28a48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28a4c:	fba7 3103 	umull	r3, r1, r7, r3
   28a50:	2207      	movs	r2, #7
	err = ticker_start(instance_index,
   28a52:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28a56:	fb02 1107 	mla	r1, r2, r7, r1
   28a5a:	1ae8      	subs	r0, r5, r3
   28a5c:	eb64 0101 	sbc.w	r1, r4, r1
   28a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28a64:	2300      	movs	r3, #0
   28a66:	f7fd fb4b 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   28a6a:	9600      	str	r6, [sp, #0]
   28a6c:	e9cd 7001 	strd	r7, r0, [sp, #4]
   28a70:	464b      	mov	r3, r9
   28a72:	465a      	mov	r2, fp
   28a74:	2103      	movs	r1, #3
   28a76:	4650      	mov	r0, sl
   28a78:	f00c f9e4 	bl	34e44 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   28a7c:	f030 0402 	bics.w	r4, r0, #2
   28a80:	d116      	bne.n	28ab0 <nrf_flash_sync_exe+0xd0>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   28a82:	4a13      	ldr	r2, [pc, #76]	; (28ad0 <nrf_flash_sync_exe+0xf0>)
   28a84:	4813      	ldr	r0, [pc, #76]	; (28ad4 <nrf_flash_sync_exe+0xf4>)
   28a86:	2300      	movs	r3, #0
   28a88:	f01f f8de 	bl	47c48 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
   28a8c:	b168      	cbz	r0, 28aaa <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   28a8e:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   28a92:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   28a96:	9400      	str	r4, [sp, #0]
   28a98:	4623      	mov	r3, r4
   28a9a:	2103      	movs	r1, #3
   28a9c:	f00c fa5e 	bl	34f5c <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
   28aa0:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
   28aa4:	b00f      	add	sp, #60	; 0x3c
   28aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
   28aaa:	f8d8 000c 	ldr.w	r0, [r8, #12]
   28aae:	e7f9      	b.n	28aa4 <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
   28ab0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
   28ab4:	e7f6      	b.n	28aa4 <nrf_flash_sync_exe+0xc4>
   28ab6:	bf00      	nop
   28ab8:	1afd498d 	.word	0x1afd498d
   28abc:	00000007 	.word	0x00000007
   28ac0:	2000676c 	.word	0x2000676c
   28ac4:	3b9aca00 	.word	0x3b9aca00
   28ac8:	00044fd9 	.word	0x00044fd9
   28acc:	1afd498d 	.word	0x1afd498d
   28ad0:	000b7b44 	.word	0x000b7b44
   28ad4:	2000677c 	.word	0x2000677c

00028ad8 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   28ad8:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   28ada:	4d0f      	ldr	r5, [pc, #60]	; (28b18 <nrf_flash_sync_check_time_limit+0x40>)
{
   28adc:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   28ade:	f00c fadd 	bl	3509c <ticker_ticks_now_get>
   28ae2:	68a9      	ldr	r1, [r5, #8]
   28ae4:	f00c fadc 	bl	350a0 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   28ae8:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
   28aea:	fbb0 f4f4 	udiv	r4, r0, r4
   28aee:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   28af0:	480a      	ldr	r0, [pc, #40]	; (28b1c <nrf_flash_sync_check_time_limit+0x44>)
   28af2:	a307      	add	r3, pc, #28	; (adr r3, 28b10 <nrf_flash_sync_check_time_limit+0x38>)
   28af4:	e9d3 2300 	ldrd	r2, r3, [r3]
   28af8:	fba1 0100 	umull	r0, r1, r1, r0
   28afc:	f7fd fb00 	bl	26100 <__aeabi_uldivmod>
   28b00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
   28b04:	4284      	cmp	r4, r0
   28b06:	bf94      	ite	ls
   28b08:	2000      	movls	r0, #0
   28b0a:	2001      	movhi	r0, #1
   28b0c:	bd38      	pop	{r3, r4, r5, pc}
   28b0e:	bf00      	nop
   28b10:	1afd498d 	.word	0x1afd498d
   28b14:	00000007 	.word	0x00000007
   28b18:	2000676c 	.word	0x2000676c
   28b1c:	3b9aca00 	.word	0x3b9aca00

00028b20 <activity_expiry_function>:
    }
}

K_WORK_DEFINE(activity_work, activity_work_handler);

void activity_expiry_function() { k_work_submit(&activity_work); }
   28b20:	4801      	ldr	r0, [pc, #4]	; (28b28 <activity_expiry_function+0x8>)
   28b22:	f01f b9e1 	b.w	47ee8 <k_work_submit>
   28b26:	bf00      	nop
   28b28:	20000260 	.word	0x20000260

00028b2c <activity_init>:

K_TIMER_DEFINE(activity_timer, activity_expiry_function, NULL);

int activity_init() {
   28b2c:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_uptime_ticks();
   28b2e:	f028 f81f 	bl	50b70 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   28b32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28b36:	fba0 0302 	umull	r0, r3, r0, r2
   28b3a:	fb02 3101 	mla	r1, r2, r1, r3
   28b3e:	0bc0      	lsrs	r0, r0, #15
    activity_last_uptime = k_uptime_get();
   28b40:	4a07      	ldr	r2, [pc, #28]	; (28b60 <activity_init+0x34>)
   28b42:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   28b46:	6010      	str	r0, [r2, #0]

    k_timer_start(&activity_timer, K_SECONDS(1), K_SECONDS(1));
   28b48:	2300      	movs	r3, #0
	compiler_barrier();
   28b4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
	z_impl_k_timer_start(timer, duration, period);
   28b4e:	4805      	ldr	r0, [pc, #20]	; (28b64 <activity_init+0x38>)
   28b50:	e9cd 2300 	strd	r2, r3, [sp]
   28b54:	f01f ff60 	bl	48a18 <z_impl_k_timer_start>
    return 0;
}
   28b58:	2000      	movs	r0, #0
   28b5a:	b003      	add	sp, #12
   28b5c:	f85d fb04 	ldr.w	pc, [sp], #4
   28b60:	20003b98 	.word	0x20003b98
   28b64:	20000dd0 	.word	0x20000dd0

00028b68 <raise_event>:
int raise_event() {
   28b68:	b508      	push	{r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   28b6a:	4b04      	ldr	r3, [pc, #16]	; (28b7c <raise_event+0x14>)
   28b6c:	7818      	ldrb	r0, [r3, #0]
   28b6e:	f000 f99b 	bl	28ea8 <new_zmk_activity_state_changed>
}
   28b72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   28b76:	f020 b9c0 	b.w	48efa <zmk_event_manager_raise>
   28b7a:	bf00      	nop
   28b7c:	20006c9e 	.word	0x20006c9e

00028b80 <set_state>:
    if (activity_state == state)
   28b80:	4b04      	ldr	r3, [pc, #16]	; (28b94 <set_state+0x14>)
   28b82:	781a      	ldrb	r2, [r3, #0]
   28b84:	4282      	cmp	r2, r0
   28b86:	d002      	beq.n	28b8e <set_state+0xe>
    activity_state = state;
   28b88:	7018      	strb	r0, [r3, #0]
    return raise_event();
   28b8a:	f7ff bfed 	b.w	28b68 <raise_event>
}
   28b8e:	2000      	movs	r0, #0
   28b90:	4770      	bx	lr
   28b92:	bf00      	nop
   28b94:	20006c9e 	.word	0x20006c9e

00028b98 <activity_event_listener>:
int activity_event_listener(const zmk_event_t *eh) {
   28b98:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   28b9a:	f027 ffe9 	bl	50b70 <z_impl_k_uptime_ticks>
   28b9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28ba2:	fba0 0302 	umull	r0, r3, r0, r2
   28ba6:	fb02 3101 	mla	r1, r2, r1, r3
   28baa:	0bc0      	lsrs	r0, r0, #15
    activity_last_uptime = k_uptime_get();
   28bac:	4a04      	ldr	r2, [pc, #16]	; (28bc0 <activity_event_listener+0x28>)
   28bae:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   28bb2:	6010      	str	r0, [r2, #0]
}
   28bb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return set_state(ZMK_ACTIVITY_ACTIVE);
   28bb8:	2000      	movs	r0, #0
   28bba:	f7ff bfe1 	b.w	28b80 <set_state>
   28bbe:	bf00      	nop
   28bc0:	20003b98 	.word	0x20003b98

00028bc4 <activity_work_handler>:
void activity_work_handler(struct k_work *work) {
   28bc4:	b508      	push	{r3, lr}
   28bc6:	f027 ffd3 	bl	50b70 <z_impl_k_uptime_ticks>
   28bca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28bce:	fba0 0302 	umull	r0, r3, r0, r2
   28bd2:	fb02 3101 	mla	r1, r2, r1, r3
    int32_t inactive_time = current - activity_last_uptime;
   28bd6:	4a08      	ldr	r2, [pc, #32]	; (28bf8 <activity_work_handler+0x34>)
   28bd8:	0bc3      	lsrs	r3, r0, #15
   28bda:	6812      	ldr	r2, [r2, #0]
   28bdc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   28be0:	1a9b      	subs	r3, r3, r2
        if (inactive_time > MAX_IDLE_MS) {
   28be2:	f247 5230 	movw	r2, #30000	; 0x7530
   28be6:	4293      	cmp	r3, r2
   28be8:	dd04      	ble.n	28bf4 <activity_work_handler+0x30>
}
   28bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_state(ZMK_ACTIVITY_IDLE);
   28bee:	2001      	movs	r0, #1
   28bf0:	f7ff bfc6 	b.w	28b80 <set_state>
}
   28bf4:	bd08      	pop	{r3, pc}
   28bf6:	bf00      	nop
   28bf8:	20003b98 	.word	0x20003b98

00028bfc <zmk_kscan_process_msgq>:

    k_msgq_put(&zmk_kscan_msgq, &ev, K_NO_WAIT);
    k_work_submit(&msg_processor.work);
}

void zmk_kscan_process_msgq(struct k_work *item) {
   28bfc:	b530      	push	{r4, r5, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   28bfe:	4c18      	ldr	r4, [pc, #96]	; (28c60 <zmk_kscan_process_msgq+0x64>)
   28c00:	b08d      	sub	sp, #52	; 0x34
   28c02:	2200      	movs	r2, #0
   28c04:	2300      	movs	r3, #0
   28c06:	a903      	add	r1, sp, #12
   28c08:	4620      	mov	r0, r4
   28c0a:	f01e feaf 	bl	4796c <z_impl_k_msgq_get>
    struct zmk_kscan_event ev;

    while (k_msgq_get(&zmk_kscan_msgq, &ev, K_NO_WAIT) == 0) {
   28c0e:	b108      	cbz	r0, 28c14 <zmk_kscan_process_msgq+0x18>
            (struct zmk_position_state_changed){.source = ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL,
                                                .state = pressed,
                                                .position = position,
                                                .timestamp = k_uptime_get()}));
    }
}
   28c10:	b00d      	add	sp, #52	; 0x34
   28c12:	bd30      	pop	{r4, r5, pc}
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   28c14:	9d05      	ldr	r5, [sp, #20]
        uint32_t position = zmk_matrix_transform_row_column_to_position(ev.row, ev.column);
   28c16:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   28c1a:	f000 f859 	bl	28cd0 <zmk_matrix_transform_row_column_to_position>
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   28c1e:	fab5 f585 	clz	r5, r5
   28c22:	096d      	lsrs	r5, r5, #5
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(
   28c24:	23ff      	movs	r3, #255	; 0xff
   28c26:	f88d 3018 	strb.w	r3, [sp, #24]
   28c2a:	9007      	str	r0, [sp, #28]
   28c2c:	f88d 5020 	strb.w	r5, [sp, #32]
	return z_impl_k_uptime_ticks();
   28c30:	f027 ff9e 	bl	50b70 <z_impl_k_uptime_ticks>
   28c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28c38:	fba0 0302 	umull	r0, r3, r0, r2
   28c3c:	fb02 3101 	mla	r1, r2, r1, r3
   28c40:	0bc0      	lsrs	r0, r0, #15
   28c42:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   28c46:	0bc9      	lsrs	r1, r1, #15
   28c48:	e88d 0003 	stmia.w	sp, {r0, r1}
   28c4c:	ab06      	add	r3, sp, #24
   28c4e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   28c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   28c54:	f000 f934 	bl	28ec0 <new_zmk_position_state_changed>
   28c58:	f020 f94f 	bl	48efa <zmk_event_manager_raise>
                                                .timestamp = k_uptime_get()}));
   28c5c:	e7d1      	b.n	28c02 <zmk_kscan_process_msgq+0x6>
   28c5e:	bf00      	nop
   28c60:	20000f7c 	.word	0x20000f7c

00028c64 <zmk_kscan_callback>:
                               bool pressed) {
   28c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   28c66:	f083 0301 	eor.w	r3, r3, #1
    struct zmk_kscan_event ev = {
   28c6a:	e9cd 1201 	strd	r1, r2, [sp, #4]
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   28c6e:	9303      	str	r3, [sp, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
   28c70:	2200      	movs	r2, #0
   28c72:	2300      	movs	r3, #0
   28c74:	a901      	add	r1, sp, #4
   28c76:	4804      	ldr	r0, [pc, #16]	; (28c88 <zmk_kscan_callback+0x24>)
   28c78:	f01e fe22 	bl	478c0 <z_impl_k_msgq_put>
    k_work_submit(&msg_processor.work);
   28c7c:	4803      	ldr	r0, [pc, #12]	; (28c8c <zmk_kscan_callback+0x28>)
   28c7e:	f01f f933 	bl	47ee8 <k_work_submit>
}
   28c82:	b005      	add	sp, #20
   28c84:	f85d fb04 	ldr.w	pc, [sp], #4
   28c88:	20000f7c 	.word	0x20000f7c
   28c8c:	20003b9c 	.word	0x20003b9c

00028c90 <zmk_kscan_init>:

int zmk_kscan_init(char *name) {
   28c90:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   28c92:	f01e fbeb 	bl	4746c <z_impl_device_get_binding>
    const struct device *dev = device_get_binding(name);
    if (dev == NULL) {
   28c96:	4604      	mov	r4, r0
   28c98:	b178      	cbz	r0, 28cba <zmk_kscan_init+0x2a>
        LOG_ERR("Failed to get the KSCAN device");
        return -EINVAL;
    }

    k_work_init(&msg_processor.work, zmk_kscan_process_msgq);
   28c9a:	490a      	ldr	r1, [pc, #40]	; (28cc4 <zmk_kscan_init+0x34>)
   28c9c:	480a      	ldr	r0, [pc, #40]	; (28cc8 <zmk_kscan_init+0x38>)
   28c9e:	f027 fda1 	bl	507e4 <k_work_init>
					kscan_callback_t callback)
{
	const struct kscan_driver_api *api =
				(struct kscan_driver_api *)dev->api;

	return api->config(dev, callback);
   28ca2:	68a3      	ldr	r3, [r4, #8]
   28ca4:	4909      	ldr	r1, [pc, #36]	; (28ccc <zmk_kscan_init+0x3c>)
   28ca6:	681b      	ldr	r3, [r3, #0]
   28ca8:	4620      	mov	r0, r4
   28caa:	4798      	blx	r3
static inline int z_impl_kscan_enable_callback(const struct device *dev)
{
	const struct kscan_driver_api *api =
			(const struct kscan_driver_api *)dev->api;

	if (api->enable_callback == NULL) {
   28cac:	68a3      	ldr	r3, [r4, #8]
   28cae:	689b      	ldr	r3, [r3, #8]
   28cb0:	b133      	cbz	r3, 28cc0 <zmk_kscan_init+0x30>
		return -ENOSYS;
	}

	return api->enable_callback(dev);
   28cb2:	4620      	mov	r0, r4
   28cb4:	4798      	blx	r3

    kscan_config(dev, zmk_kscan_callback);
    kscan_enable_callback(dev);

    return 0;
   28cb6:	2000      	movs	r0, #0
}
   28cb8:	bd10      	pop	{r4, pc}
        return -EINVAL;
   28cba:	f06f 0015 	mvn.w	r0, #21
   28cbe:	e7fb      	b.n	28cb8 <zmk_kscan_init+0x28>
    return 0;
   28cc0:	4618      	mov	r0, r3
   28cc2:	e7f9      	b.n	28cb8 <zmk_kscan_init+0x28>
   28cc4:	00028bfd 	.word	0x00028bfd
   28cc8:	20003b9c 	.word	0x20003b9c
   28ccc:	00028c65 	.word	0x00028c65

00028cd0 <zmk_matrix_transform_row_column_to_position>:
#endif

    matrix_index = (row * ZMK_MATRIX_COLS) + column;

#ifdef ZMK_KEYMAP_TRANSFORM_NODE
    return transform[matrix_index];
   28cd0:	2322      	movs	r3, #34	; 0x22
   28cd2:	fb03 1100 	mla	r1, r3, r0, r1
#else
    return matrix_index;
#endif /* ZMK_KEYMAP_TRANSFORM_NODE */
};
   28cd6:	4b02      	ldr	r3, [pc, #8]	; (28ce0 <zmk_matrix_transform_row_column_to_position+0x10>)
   28cd8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   28cdc:	4770      	bx	lr
   28cde:	bf00      	nop
   28ce0:	0005159c 	.word	0x0005159c

00028ce4 <zmk_event_manager_handle_from>:
extern struct zmk_event_type *__event_type_end[];

extern struct zmk_event_subscription __event_subscriptions_start[];
extern struct zmk_event_subscription __event_subscriptions_end[];

int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   28ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret = 0;
    uint8_t len = __event_subscriptions_end - __event_subscriptions_start;
   28ce8:	4b13      	ldr	r3, [pc, #76]	; (28d38 <zmk_event_manager_handle_from+0x54>)
   28cea:	4e14      	ldr	r6, [pc, #80]	; (28d3c <zmk_event_manager_handle_from+0x58>)
   28cec:	eba3 0806 	sub.w	r8, r3, r6
int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   28cf0:	4607      	mov	r7, r0
    for (int i = start_index; i < len; i++) {
   28cf2:	460d      	mov	r5, r1
   28cf4:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
   28cf8:	f3c8 08c7 	ubfx	r8, r8, #3, #8
   28cfc:	45a8      	cmp	r8, r5
   28cfe:	dc04      	bgt.n	28d0a <zmk_event_manager_handle_from+0x26>
        switch (ret) {
        case ZMK_EV_EVENT_BUBBLE:
            continue;
        case ZMK_EV_EVENT_HANDLED:
            LOG_DBG("Listener handled the event");
            ret = 0;
   28d00:	2400      	movs	r4, #0
            goto release;
        }
    }

release:
    k_free(event);
   28d02:	4638      	mov	r0, r7
   28d04:	f028 f8e1 	bl	50eca <k_free>
    return ret;
   28d08:	e013      	b.n	28d32 <zmk_event_manager_handle_from+0x4e>
        if (ev_sub->event_type != event->event) {
   28d0a:	6832      	ldr	r2, [r6, #0]
   28d0c:	683b      	ldr	r3, [r7, #0]
   28d0e:	429a      	cmp	r2, r3
   28d10:	d10a      	bne.n	28d28 <zmk_event_manager_handle_from+0x44>
        ret = ev_sub->listener->callback(event);
   28d12:	6873      	ldr	r3, [r6, #4]
   28d14:	4638      	mov	r0, r7
   28d16:	681b      	ldr	r3, [r3, #0]
   28d18:	4798      	blx	r3
        switch (ret) {
   28d1a:	2801      	cmp	r0, #1
        ret = ev_sub->listener->callback(event);
   28d1c:	4604      	mov	r4, r0
        switch (ret) {
   28d1e:	d0ef      	beq.n	28d00 <zmk_event_manager_handle_from+0x1c>
   28d20:	2802      	cmp	r0, #2
   28d22:	d004      	beq.n	28d2e <zmk_event_manager_handle_from+0x4a>
   28d24:	2800      	cmp	r0, #0
   28d26:	d1ec      	bne.n	28d02 <zmk_event_manager_handle_from+0x1e>
    for (int i = start_index; i < len; i++) {
   28d28:	3501      	adds	r5, #1
   28d2a:	3608      	adds	r6, #8
   28d2c:	e7e6      	b.n	28cfc <zmk_event_manager_handle_from+0x18>
            event->last_listener_index = i;
   28d2e:	713d      	strb	r5, [r7, #4]
            return 0;
   28d30:	2400      	movs	r4, #0
}
   28d32:	4620      	mov	r0, r4
   28d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28d38:	00053db0 	.word	0x00053db0
   28d3c:	00053d80 	.word	0x00053d80

00028d40 <ext_power_generic_init>:

struct settings_handler ext_power_conf = {.name = "ext_power/state",
                                          .h_set = ext_power_settings_set};
#endif

static int ext_power_generic_init(const struct device *dev) {
   28d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct ext_power_generic_data *data = dev->data;
    const struct ext_power_generic_config *config = dev->config;
   28d42:	6846      	ldr	r6, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   28d44:	6907      	ldr	r7, [r0, #16]
static int ext_power_generic_init(const struct device *dev) {
   28d46:	4605      	mov	r5, r0

    data->gpio = device_get_binding(config->label);
   28d48:	6830      	ldr	r0, [r6, #0]
   28d4a:	f01e fb8f 	bl	4746c <z_impl_device_get_binding>
   28d4e:	6038      	str	r0, [r7, #0]
    if (data->gpio == NULL) {
   28d50:	2800      	cmp	r0, #0
   28d52:	d044      	beq.n	28dde <ext_power_generic_init+0x9e>
        LOG_ERR("Failed to get ext-power control device");
        return -EINVAL;
    }

    if (gpio_pin_configure(data->gpio, config->pin, config->flags | GPIO_OUTPUT)) {
   28d54:	7973      	ldrb	r3, [r6, #5]
   28d56:	7931      	ldrb	r1, [r6, #4]
   28d58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   28d5c:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   28d60:	f8d0 e008 	ldr.w	lr, [r0, #8]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   28d64:	f013 0f01 	tst.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   28d68:	f04f 0401 	mov.w	r4, #1
   28d6c:	f8dc 3000 	ldr.w	r3, [ip]
   28d70:	fa04 f401 	lsl.w	r4, r4, r1
   28d74:	bf14      	ite	ne
   28d76:	4323      	orrne	r3, r4
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   28d78:	43a3      	biceq	r3, r4
   28d7a:	f8cc 3000 	str.w	r3, [ip]
	}

	return api->pin_configure(port, pin, flags);
   28d7e:	f8de 3000 	ldr.w	r3, [lr]
   28d82:	4798      	blx	r3
   28d84:	bb70      	cbnz	r0, 28de4 <ext_power_generic_init+0xa4>
        LOG_ERR("Failed to configure ext-power control pin");
        return -EIO;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   28d86:	f003 f923 	bl	2bfd0 <settings_subsys_init>

    int err = settings_register(&ext_power_conf);
   28d8a:	4818      	ldr	r0, [pc, #96]	; (28dec <ext_power_generic_init+0xac>)
   28d8c:	f003 f85e 	bl	2be4c <settings_register>
    if (err) {
   28d90:	4604      	mov	r4, r0
   28d92:	bb10      	cbnz	r0, 28dda <ext_power_generic_init+0x9a>
        LOG_ERR("Failed to register the ext_power settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&ext_power_save_work, ext_power_save_state_work);
   28d94:	4916      	ldr	r1, [pc, #88]	; (28df0 <ext_power_generic_init+0xb0>)
   28d96:	4817      	ldr	r0, [pc, #92]	; (28df4 <ext_power_generic_init+0xb4>)
   28d98:	f027 fd4a 	bl	50830 <k_work_init_delayable>

    // Set default value (on) if settings isn't set
    settings_load_subtree("ext_power");
   28d9c:	4816      	ldr	r0, [pc, #88]	; (28df8 <ext_power_generic_init+0xb8>)
   28d9e:	f002 ffff 	bl	2bda0 <settings_load_subtree>
    if (!data->settings_init) {
   28da2:	797b      	ldrb	r3, [r7, #5]
   28da4:	b95b      	cbnz	r3, 28dbe <ext_power_generic_init+0x7e>

        data->status = true;
   28da6:	2301      	movs	r3, #1
   28da8:	713b      	strb	r3, [r7, #4]
        k_work_schedule(&ext_power_save_work, K_NO_WAIT);
   28daa:	2200      	movs	r2, #0
   28dac:	2300      	movs	r3, #0
   28dae:	4811      	ldr	r0, [pc, #68]	; (28df4 <ext_power_generic_init+0xb4>)
   28db0:	f01f f902 	bl	47fb8 <k_work_schedule>
__syscall int ext_power_enable(const struct device *dev);

static inline int z_impl_ext_power_enable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->enable == NULL) {
   28db4:	68ab      	ldr	r3, [r5, #8]
   28db6:	681b      	ldr	r3, [r3, #0]
   28db8:	b10b      	cbz	r3, 28dbe <ext_power_generic_init+0x7e>
        return -ENOTSUP;
    }

    return api->enable(dev);
   28dba:	4628      	mov	r0, r5
   28dbc:	4798      	blx	r3
#else
    // Default to the ext_power being open when no settings
    ext_power_enable(dev);
#endif

    if (config->init_delay_ms) {
   28dbe:	88f1      	ldrh	r1, [r6, #6]
   28dc0:	b159      	cbz	r1, 28dda <ext_power_generic_init+0x9a>
   28dc2:	f240 30e7 	movw	r0, #999	; 0x3e7
   28dc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28dca:	2300      	movs	r3, #0
   28dcc:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   28dd0:	2100      	movs	r1, #0
   28dd2:	f7fd f995 	bl	26100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   28dd6:	f01f fbf3 	bl	485c0 <z_impl_k_sleep>
        k_msleep(config->init_delay_ms);
    }

    return 0;
}
   28dda:	4620      	mov	r0, r4
   28ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -EINVAL;
   28dde:	f06f 0415 	mvn.w	r4, #21
   28de2:	e7fa      	b.n	28dda <ext_power_generic_init+0x9a>
        return -EIO;
   28de4:	f06f 0404 	mvn.w	r4, #4
   28de8:	e7f7      	b.n	28dda <ext_power_generic_init+0x9a>
   28dea:	bf00      	nop
   28dec:	20000270 	.word	0x20000270
   28df0:	00028dfd 	.word	0x00028dfd
   28df4:	20001248 	.word	0x20001248
   28df8:	00053538 	.word	0x00053538

00028dfc <ext_power_save_state_work>:
static void ext_power_save_state_work(struct k_work *work) {
   28dfc:	b530      	push	{r4, r5, lr}
   28dfe:	b08b      	sub	sp, #44	; 0x2c
   28e00:	4c08      	ldr	r4, [pc, #32]	; (28e24 <ext_power_save_state_work+0x28>)
   28e02:	4620      	mov	r0, r4
   28e04:	f01e fb32 	bl	4746c <z_impl_device_get_binding>
    struct ext_power_generic_data *data = ext_power->data;
   28e08:	6905      	ldr	r5, [r0, #16]
    snprintf(setting_path, 40, "ext_power/state/%s", DT_INST_LABEL(0));
   28e0a:	4a07      	ldr	r2, [pc, #28]	; (28e28 <ext_power_save_state_work+0x2c>)
   28e0c:	4623      	mov	r3, r4
   28e0e:	2128      	movs	r1, #40	; 0x28
   28e10:	4668      	mov	r0, sp
   28e12:	f003 ff1b 	bl	2cc4c <snprintf>
    settings_save_one(setting_path, &data->status, sizeof(data->status));
   28e16:	2201      	movs	r2, #1
   28e18:	1d29      	adds	r1, r5, #4
   28e1a:	4668      	mov	r0, sp
   28e1c:	f002 ff86 	bl	2bd2c <settings_save_one>
}
   28e20:	b00b      	add	sp, #44	; 0x2c
   28e22:	bd30      	pop	{r4, r5, pc}
   28e24:	00053542 	.word	0x00053542
   28e28:	0005354c 	.word	0x0005354c

00028e2c <ext_power_save_state>:
int ext_power_save_state() {
   28e2c:	b508      	push	{r3, lr}
    int ret = k_work_reschedule(&ext_power_save_work, K_MSEC(CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE));
   28e2e:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   28e32:	2300      	movs	r3, #0
   28e34:	4802      	ldr	r0, [pc, #8]	; (28e40 <ext_power_save_state+0x14>)
   28e36:	f01f f8f3 	bl	48020 <k_work_reschedule>
}
   28e3a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   28e3e:	bd08      	pop	{r3, pc}
   28e40:	20001248 	.word	0x20001248

00028e44 <ext_power_settings_set>:
                                  void *cb_arg) {
   28e44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   28e48:	460c      	mov	r4, r1
   28e4a:	4616      	mov	r6, r2
    if (settings_name_steq(name, DT_INST_LABEL(0), &next) && !next) {
   28e4c:	4913      	ldr	r1, [pc, #76]	; (28e9c <ext_power_settings_set+0x58>)
   28e4e:	aa01      	add	r2, sp, #4
                                  void *cb_arg) {
   28e50:	461f      	mov	r7, r3
    if (settings_name_steq(name, DT_INST_LABEL(0), &next) && !next) {
   28e52:	f021 fa2b 	bl	4a2ac <settings_name_steq>
   28e56:	b1d8      	cbz	r0, 28e90 <ext_power_settings_set+0x4c>
   28e58:	f8dd 8004 	ldr.w	r8, [sp, #4]
   28e5c:	f1b8 0f00 	cmp.w	r8, #0
   28e60:	d116      	bne.n	28e90 <ext_power_settings_set+0x4c>
        if (len != sizeof(data->status)) {
   28e62:	2c01      	cmp	r4, #1
   28e64:	d117      	bne.n	28e96 <ext_power_settings_set+0x52>
        rc = read_cb(cb_arg, &data->status, sizeof(data->status));
   28e66:	4d0e      	ldr	r5, [pc, #56]	; (28ea0 <ext_power_settings_set+0x5c>)
   28e68:	4622      	mov	r2, r4
   28e6a:	1d29      	adds	r1, r5, #4
   28e6c:	4638      	mov	r0, r7
   28e6e:	47b0      	blx	r6
        if (rc >= 0) {
   28e70:	2800      	cmp	r0, #0
   28e72:	db06      	blt.n	28e82 <ext_power_settings_set+0x3e>
            data->settings_init = true;
   28e74:	716c      	strb	r4, [r5, #5]
            if (data->status) {
   28e76:	792c      	ldrb	r4, [r5, #4]
                ext_power_generic_enable(ext_power);
   28e78:	480a      	ldr	r0, [pc, #40]	; (28ea4 <ext_power_settings_set+0x60>)
            if (data->status) {
   28e7a:	b12c      	cbz	r4, 28e88 <ext_power_settings_set+0x44>
                ext_power_generic_enable(ext_power);
   28e7c:	f020 f853 	bl	48f26 <ext_power_generic_enable>
   28e80:	4640      	mov	r0, r8
}
   28e82:	b002      	add	sp, #8
   28e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ext_power_generic_disable(ext_power);
   28e88:	f020 f85f 	bl	48f4a <ext_power_generic_disable>
   28e8c:	4620      	mov	r0, r4
   28e8e:	e7f8      	b.n	28e82 <ext_power_settings_set+0x3e>
    return -ENOENT;
   28e90:	f06f 0001 	mvn.w	r0, #1
   28e94:	e7f5      	b.n	28e82 <ext_power_settings_set+0x3e>
            return -EINVAL;
   28e96:	f06f 0015 	mvn.w	r0, #21
   28e9a:	e7f2      	b.n	28e82 <ext_power_settings_set+0x3e>
   28e9c:	00053542 	.word	0x00053542
   28ea0:	20003bac 	.word	0x20003bac
   28ea4:	000510b0 	.word	0x000510b0

00028ea8 <new_zmk_activity_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/activity_state_changed.h>

   28ea8:	b510      	push	{r4, lr}
   28eaa:	4604      	mov	r4, r0
   28eac:	200c      	movs	r0, #12
   28eae:	f028 f813 	bl	50ed8 <k_malloc>
   28eb2:	4a02      	ldr	r2, [pc, #8]	; (28ebc <new_zmk_activity_state_changed+0x14>)
   28eb4:	6002      	str	r2, [r0, #0]
   28eb6:	7204      	strb	r4, [r0, #8]
   28eb8:	bd10      	pop	{r4, pc}
   28eba:	bf00      	nop
   28ebc:	00051640 	.word	0x00051640

00028ec0 <new_zmk_position_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/position_state_changed.h>

   28ec0:	b084      	sub	sp, #16
   28ec2:	b570      	push	{r4, r5, r6, lr}
   28ec4:	ac04      	add	r4, sp, #16
   28ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   28eca:	2020      	movs	r0, #32
   28ecc:	f028 f804 	bl	50ed8 <k_malloc>
   28ed0:	4604      	mov	r4, r0
   28ed2:	4b08      	ldr	r3, [pc, #32]	; (28ef4 <new_zmk_position_state_changed+0x34>)
   28ed4:	f844 3b08 	str.w	r3, [r4], #8
   28ed8:	ad04      	add	r5, sp, #16
   28eda:	4606      	mov	r6, r0
   28edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   28ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   28ee0:	e895 0003 	ldmia.w	r5, {r0, r1}
   28ee4:	e884 0003 	stmia.w	r4, {r0, r1}
   28ee8:	4630      	mov	r0, r6
   28eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   28eee:	b004      	add	sp, #16
   28ef0:	4770      	bx	lr
   28ef2:	bf00      	nop
   28ef4:	00051644 	.word	0x00051644

00028ef8 <as_zmk_position_state_changed>:
   28ef8:	6802      	ldr	r2, [r0, #0]
   28efa:	4b03      	ldr	r3, [pc, #12]	; (28f08 <as_zmk_position_state_changed+0x10>)
   28efc:	429a      	cmp	r2, r3
   28efe:	bf0c      	ite	eq
   28f00:	3008      	addeq	r0, #8
   28f02:	2000      	movne	r0, #0
   28f04:	4770      	bx	lr
   28f06:	bf00      	nop
   28f08:	00051644 	.word	0x00051644

00028f0c <new_zmk_usb_conn_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/usb_conn_state_changed.h>

   28f0c:	b510      	push	{r4, lr}
   28f0e:	4604      	mov	r4, r0
   28f10:	200c      	movs	r0, #12
   28f12:	f027 ffe1 	bl	50ed8 <k_malloc>
   28f16:	4a02      	ldr	r2, [pc, #8]	; (28f20 <new_zmk_usb_conn_state_changed+0x14>)
   28f18:	6002      	str	r2, [r0, #0]
   28f1a:	7204      	strb	r4, [r0, #8]
   28f1c:	bd10      	pop	{r4, pc}
   28f1e:	bf00      	nop
   28f20:	0005164c 	.word	0x0005164c

00028f24 <on_keymap_binding_pressed>:

    return 0;
}

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   28f24:	b082      	sub	sp, #8
   28f26:	b538      	push	{r3, r4, r5, lr}
   28f28:	a904      	add	r1, sp, #16
   28f2a:	e881 000c 	stmia.w	r1, {r2, r3}
   28f2e:	4605      	mov	r5, r0
   28f30:	4811      	ldr	r0, [pc, #68]	; (28f78 <on_keymap_binding_pressed+0x54>)
   28f32:	f01e fa9b 	bl	4746c <z_impl_device_get_binding>
   28f36:	4604      	mov	r4, r0
    const struct device *ext_power = device_get_binding("EXT_POWER");
    if (ext_power == NULL) {
   28f38:	b1a0      	cbz	r0, 28f64 <on_keymap_binding_pressed+0x40>
        LOG_ERR("Unable to retrieve ext_power device: %d", binding->param1);
        return -EIO;
    }

    switch (binding->param1) {
   28f3a:	686b      	ldr	r3, [r5, #4]
   28f3c:	2b01      	cmp	r3, #1
   28f3e:	d00c      	beq.n	28f5a <on_keymap_binding_pressed+0x36>
   28f40:	2b02      	cmp	r3, #2
   28f42:	d005      	beq.n	28f50 <on_keymap_binding_pressed+0x2c>
   28f44:	b9a3      	cbnz	r3, 28f70 <on_keymap_binding_pressed+0x4c>
    default:
        LOG_ERR("Unknown ext_power command: %d", binding->param1);
    }

    return -ENOTSUP;
}
   28f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28f4a:	b002      	add	sp, #8
            return ext_power_disable(ext_power);
   28f4c:	f020 b823 	b.w	48f96 <ext_power_disable>
        if (ext_power_get(ext_power) > 0)
   28f50:	f020 f828 	bl	48fa4 <ext_power_get>
   28f54:	2800      	cmp	r0, #0
            return ext_power_disable(ext_power);
   28f56:	4620      	mov	r0, r4
        if (ext_power_get(ext_power) > 0)
   28f58:	dcf5      	bgt.n	28f46 <on_keymap_binding_pressed+0x22>
}
   28f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28f5e:	b002      	add	sp, #8
            return ext_power_enable(ext_power);
   28f60:	f020 b812 	b.w	48f88 <ext_power_enable>
        return -EIO;
   28f64:	f06f 0004 	mvn.w	r0, #4
}
   28f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   28f6c:	b002      	add	sp, #8
   28f6e:	4770      	bx	lr
    switch (binding->param1) {
   28f70:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28f74:	e7f8      	b.n	28f68 <on_keymap_binding_pressed+0x44>
   28f76:	bf00      	nop
   28f78:	00053542 	.word	0x00053542

00028f7c <on_keymap_binding_convert_central_state_dependent_params>:
                                                         struct zmk_behavior_binding_event event) {
   28f7c:	b082      	sub	sp, #8
   28f7e:	b510      	push	{r4, lr}
   28f80:	a902      	add	r1, sp, #8
   28f82:	e881 000c 	stmia.w	r1, {r2, r3}
   28f86:	4604      	mov	r4, r0
   28f88:	480a      	ldr	r0, [pc, #40]	; (28fb4 <on_keymap_binding_convert_central_state_dependent_params+0x38>)
   28f8a:	f01e fa6f 	bl	4746c <z_impl_device_get_binding>
    if (ext_power == NULL) {
   28f8e:	b158      	cbz	r0, 28fa8 <on_keymap_binding_convert_central_state_dependent_params+0x2c>
    if (binding->param1 == EXT_POWER_TOGGLE_CMD) {
   28f90:	6863      	ldr	r3, [r4, #4]
   28f92:	2b02      	cmp	r3, #2
   28f94:	d106      	bne.n	28fa4 <on_keymap_binding_convert_central_state_dependent_params+0x28>
        binding->param1 = ext_power_get(ext_power) > 0 ? EXT_POWER_OFF_CMD : EXT_POWER_ON_CMD;
   28f96:	f020 f805 	bl	48fa4 <ext_power_get>
   28f9a:	2800      	cmp	r0, #0
   28f9c:	bfcc      	ite	gt
   28f9e:	2000      	movgt	r0, #0
   28fa0:	2001      	movle	r0, #1
   28fa2:	6060      	str	r0, [r4, #4]
    return 0;
   28fa4:	2000      	movs	r0, #0
   28fa6:	e001      	b.n	28fac <on_keymap_binding_convert_central_state_dependent_params+0x30>
        return -EIO;
   28fa8:	f06f 0004 	mvn.w	r0, #4
}
   28fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28fb0:	b002      	add	sp, #8
   28fb2:	4770      	bx	lr
   28fb4:	00053542 	.word	0x00053542

00028fb8 <zmk_hid_register_mod>:
#define GET_MODIFIERS (keyboard_report.body.modifiers)

zmk_mod_flags_t zmk_hid_get_explicit_mods() { return explicit_modifiers; }

int zmk_hid_register_mod(zmk_mod_t modifier) {
    explicit_modifier_counts[modifier]++;
   28fb8:	4a09      	ldr	r2, [pc, #36]	; (28fe0 <zmk_hid_register_mod+0x28>)
   28fba:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   28fbe:	3301      	adds	r3, #1
   28fc0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    LOG_DBG("Modifier %d count %d", modifier, explicit_modifier_counts[modifier]);
    WRITE_BIT(explicit_modifiers, modifier, true);
   28fc4:	4a07      	ldr	r2, [pc, #28]	; (28fe4 <zmk_hid_register_mod+0x2c>)
   28fc6:	2301      	movs	r3, #1
   28fc8:	7811      	ldrb	r1, [r2, #0]
   28fca:	4083      	lsls	r3, r0
   28fcc:	430b      	orrs	r3, r1
   28fce:	b2db      	uxtb	r3, r3
   28fd0:	7013      	strb	r3, [r2, #0]
    zmk_mod_flags_t current = GET_MODIFIERS;
   28fd2:	4a05      	ldr	r2, [pc, #20]	; (28fe8 <zmk_hid_register_mod+0x30>)
   28fd4:	7850      	ldrb	r0, [r2, #1]
    SET_MODIFIERS(explicit_modifiers);
   28fd6:	7053      	strb	r3, [r2, #1]
    return current == GET_MODIFIERS ? 0 : 1;
}
   28fd8:	1a18      	subs	r0, r3, r0
   28fda:	bf18      	it	ne
   28fdc:	2001      	movne	r0, #1
   28fde:	4770      	bx	lr
   28fe0:	20003bb4 	.word	0x20003bb4
   28fe4:	20006c9f 	.word	0x20006c9f
   28fe8:	20000d5d 	.word	0x20000d5d

00028fec <zmk_hid_unregister_mod>:

int zmk_hid_unregister_mod(zmk_mod_t modifier) {
    if (explicit_modifier_counts[modifier] <= 0) {
   28fec:	4a0d      	ldr	r2, [pc, #52]	; (29024 <zmk_hid_unregister_mod+0x38>)
   28fee:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   28ff2:	2b00      	cmp	r3, #0
   28ff4:	dd12      	ble.n	2901c <zmk_hid_unregister_mod+0x30>
        LOG_ERR("Tried to unregister modifier %d too often", modifier);
        return -EINVAL;
    }
    explicit_modifier_counts[modifier]--;
   28ff6:	3b01      	subs	r3, #1
   28ff8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    LOG_DBG("Modifier %d count: %d", modifier, explicit_modifier_counts[modifier]);
    if (explicit_modifier_counts[modifier] == 0) {
   28ffc:	4a0a      	ldr	r2, [pc, #40]	; (29028 <zmk_hid_unregister_mod+0x3c>)
   28ffe:	b92b      	cbnz	r3, 2900c <zmk_hid_unregister_mod+0x20>
        LOG_DBG("Modifier %d released", modifier);
        WRITE_BIT(explicit_modifiers, modifier, false);
   29000:	7813      	ldrb	r3, [r2, #0]
   29002:	2101      	movs	r1, #1
   29004:	4081      	lsls	r1, r0
   29006:	ea23 0301 	bic.w	r3, r3, r1
   2900a:	7013      	strb	r3, [r2, #0]
    }
    zmk_mod_flags_t current = GET_MODIFIERS;
   2900c:	4b07      	ldr	r3, [pc, #28]	; (2902c <zmk_hid_unregister_mod+0x40>)
    SET_MODIFIERS(explicit_modifiers);
   2900e:	7810      	ldrb	r0, [r2, #0]
    zmk_mod_flags_t current = GET_MODIFIERS;
   29010:	7859      	ldrb	r1, [r3, #1]
    SET_MODIFIERS(explicit_modifiers);
   29012:	7058      	strb	r0, [r3, #1]
    return current == GET_MODIFIERS ? 0 : 1;
   29014:	1a40      	subs	r0, r0, r1
   29016:	bf18      	it	ne
   29018:	2001      	movne	r0, #1
   2901a:	4770      	bx	lr
        return -EINVAL;
   2901c:	f06f 0015 	mvn.w	r0, #21
}
   29020:	4770      	bx	lr
   29022:	bf00      	nop
   29024:	20003bb4 	.word	0x20003bb4
   29028:	20006c9f 	.word	0x20006c9f
   2902c:	20000d5d 	.word	0x20000d5d

00029030 <zmk_hid_implicit_modifiers_press>:
        }                                                                                          \
    }

int zmk_hid_implicit_modifiers_press(zmk_mod_flags_t implicit_modifiers) {
    zmk_mod_flags_t current = GET_MODIFIERS;
    SET_MODIFIERS(explicit_modifiers | implicit_modifiers);
   29030:	4904      	ldr	r1, [pc, #16]	; (29044 <zmk_hid_implicit_modifiers_press+0x14>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   29032:	4b05      	ldr	r3, [pc, #20]	; (29048 <zmk_hid_implicit_modifiers_press+0x18>)
    SET_MODIFIERS(explicit_modifiers | implicit_modifiers);
   29034:	7809      	ldrb	r1, [r1, #0]
    zmk_mod_flags_t current = GET_MODIFIERS;
   29036:	785a      	ldrb	r2, [r3, #1]
    SET_MODIFIERS(explicit_modifiers | implicit_modifiers);
   29038:	4308      	orrs	r0, r1
   2903a:	7058      	strb	r0, [r3, #1]
    return current == GET_MODIFIERS ? 0 : 1;
}
   2903c:	1a80      	subs	r0, r0, r2
   2903e:	bf18      	it	ne
   29040:	2001      	movne	r0, #1
   29042:	4770      	bx	lr
   29044:	20006c9f 	.word	0x20006c9f
   29048:	20000d5d 	.word	0x20000d5d

0002904c <zmk_hid_implicit_modifiers_release>:

int zmk_hid_implicit_modifiers_release() {
    zmk_mod_flags_t current = GET_MODIFIERS;
   2904c:	4a04      	ldr	r2, [pc, #16]	; (29060 <zmk_hid_implicit_modifiers_release+0x14>)
    SET_MODIFIERS(explicit_modifiers);
   2904e:	4b05      	ldr	r3, [pc, #20]	; (29064 <zmk_hid_implicit_modifiers_release+0x18>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   29050:	7850      	ldrb	r0, [r2, #1]
    SET_MODIFIERS(explicit_modifiers);
   29052:	781b      	ldrb	r3, [r3, #0]
   29054:	7053      	strb	r3, [r2, #1]
    return current == GET_MODIFIERS ? 0 : 1;
}
   29056:	1a18      	subs	r0, r3, r0
   29058:	bf18      	it	ne
   2905a:	2001      	movne	r0, #1
   2905c:	4770      	bx	lr
   2905e:	bf00      	nop
   29060:	20000d5d 	.word	0x20000d5d
   29064:	20006c9f 	.word	0x20006c9f

00029068 <zmk_hid_keyboard_press>:

int zmk_hid_keyboard_press(zmk_key_t code) {
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   29068:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
   2906c:	2b07      	cmp	r3, #7
   2906e:	d803      	bhi.n	29078 <zmk_hid_keyboard_press+0x10>
        return zmk_hid_register_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   29070:	3020      	adds	r0, #32
   29072:	b2c0      	uxtb	r0, r0
   29074:	f7ff bfa0 	b.w	28fb8 <zmk_hid_register_mod>
   29078:	4b06      	ldr	r3, [pc, #24]	; (29094 <zmk_hid_keyboard_press+0x2c>)
    TOGGLE_KEYBOARD(0U, usage);
   2907a:	2200      	movs	r2, #0
   2907c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   29080:	b121      	cbz	r1, 2908c <zmk_hid_keyboard_press+0x24>
   29082:	3201      	adds	r2, #1
   29084:	2a06      	cmp	r2, #6
   29086:	d1f9      	bne.n	2907c <zmk_hid_keyboard_press+0x14>
    }
    select_keyboard_usage(code);
    return 0;
};
   29088:	2000      	movs	r0, #0
   2908a:	4770      	bx	lr
    TOGGLE_KEYBOARD(0U, usage);
   2908c:	7018      	strb	r0, [r3, #0]
   2908e:	2800      	cmp	r0, #0
   29090:	d0f7      	beq.n	29082 <zmk_hid_keyboard_press+0x1a>
   29092:	e7f9      	b.n	29088 <zmk_hid_keyboard_press+0x20>
   29094:	20000d5f 	.word	0x20000d5f

00029098 <zmk_hid_keyboard_release>:

int zmk_hid_keyboard_release(zmk_key_t code) {
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   29098:	f1a0 02e0 	sub.w	r2, r0, #224	; 0xe0
   2909c:	2a07      	cmp	r2, #7
int zmk_hid_keyboard_release(zmk_key_t code) {
   2909e:	b410      	push	{r4}
   290a0:	4603      	mov	r3, r0
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   290a2:	d804      	bhi.n	290ae <zmk_hid_keyboard_release+0x16>
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   290a4:	3020      	adds	r0, #32
    }
    deselect_keyboard_usage(code);
    return 0;
};
   290a6:	bc10      	pop	{r4}
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   290a8:	b2c0      	uxtb	r0, r0
   290aa:	f7ff bf9f 	b.w	28fec <zmk_hid_unregister_mod>
   290ae:	4a06      	ldr	r2, [pc, #24]	; (290c8 <zmk_hid_keyboard_release+0x30>)
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   290b0:	2006      	movs	r0, #6
    TOGGLE_KEYBOARD(usage, 0U);
   290b2:	2100      	movs	r1, #0
   290b4:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   290b8:	42a3      	cmp	r3, r4
   290ba:	bf08      	it	eq
   290bc:	7011      	strbeq	r1, [r2, #0]
   290be:	3801      	subs	r0, #1
   290c0:	d1f8      	bne.n	290b4 <zmk_hid_keyboard_release+0x1c>
};
   290c2:	bc10      	pop	{r4}
   290c4:	4770      	bx	lr
   290c6:	bf00      	nop
   290c8:	20000d5f 	.word	0x20000d5f

000290cc <zmk_hid_keyboard_clear>:
        return zmk_hid_mod_is_pressed(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
    }
    return check_keyboard_usage(code);
}

void zmk_hid_keyboard_clear() { memset(&keyboard_report.body, 0, sizeof(keyboard_report.body)); }
   290cc:	4802      	ldr	r0, [pc, #8]	; (290d8 <zmk_hid_keyboard_clear+0xc>)
   290ce:	2208      	movs	r2, #8
   290d0:	2100      	movs	r1, #0
   290d2:	f022 bbe5 	b.w	4b8a0 <memset>
   290d6:	bf00      	nop
   290d8:	20000d5e 	.word	0x20000d5e

000290dc <zmk_hid_consumer_press>:

int zmk_hid_consumer_press(zmk_key_t code) {
   290dc:	b510      	push	{r4, lr}
    TOGGLE_CONSUMER(0U, code);
   290de:	4908      	ldr	r1, [pc, #32]	; (29100 <zmk_hid_consumer_press+0x24>)
   290e0:	2300      	movs	r3, #0
   290e2:	eb01 0243 	add.w	r2, r1, r3, lsl #1
   290e6:	f8b2 4001 	ldrh.w	r4, [r2, #1]
   290ea:	b124      	cbz	r4, 290f6 <zmk_hid_consumer_press+0x1a>
   290ec:	3301      	adds	r3, #1
   290ee:	2b06      	cmp	r3, #6
   290f0:	d1f7      	bne.n	290e2 <zmk_hid_consumer_press+0x6>
    return 0;
};
   290f2:	2000      	movs	r0, #0
   290f4:	bd10      	pop	{r4, pc}
    TOGGLE_CONSUMER(0U, code);
   290f6:	f8a2 0001 	strh.w	r0, [r2, #1]
   290fa:	2800      	cmp	r0, #0
   290fc:	d0f6      	beq.n	290ec <zmk_hid_consumer_press+0x10>
   290fe:	e7f8      	b.n	290f2 <zmk_hid_consumer_press+0x16>
   29100:	20000d50 	.word	0x20000d50

00029104 <zmk_hid_consumer_release>:

int zmk_hid_consumer_release(zmk_key_t code) {
   29104:	b530      	push	{r4, r5, lr}
    TOGGLE_CONSUMER(code, 0U);
   29106:	2300      	movs	r3, #0
   29108:	4c07      	ldr	r4, [pc, #28]	; (29128 <zmk_hid_consumer_release+0x24>)
   2910a:	4619      	mov	r1, r3
   2910c:	eb04 0243 	add.w	r2, r4, r3, lsl #1
   29110:	3301      	adds	r3, #1
   29112:	f8b2 5001 	ldrh.w	r5, [r2, #1]
   29116:	4285      	cmp	r5, r0
   29118:	bf04      	itt	eq
   2911a:	7051      	strbeq	r1, [r2, #1]
   2911c:	7091      	strbeq	r1, [r2, #2]
   2911e:	2b06      	cmp	r3, #6
   29120:	d1f4      	bne.n	2910c <zmk_hid_consumer_release+0x8>
    return 0;
};
   29122:	2000      	movs	r0, #0
   29124:	bd30      	pop	{r4, r5, pc}
   29126:	bf00      	nop
   29128:	20000d50 	.word	0x20000d50

0002912c <zmk_hid_consumer_clear>:

void zmk_hid_consumer_clear() { memset(&consumer_report.body, 0, sizeof(consumer_report.body)); }
   2912c:	4802      	ldr	r0, [pc, #8]	; (29138 <zmk_hid_consumer_clear+0xc>)
   2912e:	220c      	movs	r2, #12
   29130:	2100      	movs	r1, #0
   29132:	f022 bbb5 	b.w	4b8a0 <memset>
   29136:	bf00      	nop
   29138:	20000d51 	.word	0x20000d51

0002913c <zmk_hid_get_keyboard_report>:
    return false;
}

struct zmk_hid_keyboard_report *zmk_hid_get_keyboard_report() {
    return &keyboard_report;
}
   2913c:	4800      	ldr	r0, [pc, #0]	; (29140 <zmk_hid_get_keyboard_report+0x4>)
   2913e:	4770      	bx	lr
   29140:	20000d5d 	.word	0x20000d5d

00029144 <zmk_hid_get_consumer_report>:

struct zmk_hid_consumer_report *zmk_hid_get_consumer_report() {
    return &consumer_report;
}
   29144:	4800      	ldr	r0, [pc, #0]	; (29148 <zmk_hid_get_consumer_report+0x4>)
   29146:	4770      	bx	lr
   29148:	20000d50 	.word	0x20000d50

0002914c <send_keyboard_report>:
    enum zmk_endpoint new_endpoint =
        (preferred_endpoint == ZMK_ENDPOINT_USB) ? ZMK_ENDPOINT_BLE : ZMK_ENDPOINT_USB;
    return zmk_endpoints_select(new_endpoint);
}

static int send_keyboard_report() {
   2914c:	b508      	push	{r3, lr}
    struct zmk_hid_keyboard_report *keyboard_report = zmk_hid_get_keyboard_report();
   2914e:	f7ff fff5 	bl	2913c <zmk_hid_get_keyboard_report>

    switch (current_endpoint) {
   29152:	4a09      	ldr	r2, [pc, #36]	; (29178 <send_keyboard_report+0x2c>)
   29154:	7812      	ldrb	r2, [r2, #0]
   29156:	b122      	cbz	r2, 29162 <send_keyboard_report+0x16>
   29158:	2a01      	cmp	r2, #1
   2915a:	d007      	beq.n	2916c <send_keyboard_report+0x20>

    default:
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
        return -ENOTSUP;
    }
}
   2915c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29160:	bd08      	pop	{r3, pc}
   29162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_usb_hid_send_report((uint8_t *)keyboard_report, sizeof(*keyboard_report));
   29166:	2109      	movs	r1, #9
   29168:	f001 b938 	b.w	2a3dc <zmk_usb_hid_send_report>
}
   2916c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_hog_send_keyboard_report(&keyboard_report->body);
   29170:	3001      	adds	r0, #1
   29172:	f000 bcf5 	b.w	29b60 <zmk_hog_send_keyboard_report>
   29176:	bf00      	nop
   29178:	20000d66 	.word	0x20000d66

0002917c <send_consumer_report>:

static int send_consumer_report() {
   2917c:	b508      	push	{r3, lr}
    struct zmk_hid_consumer_report *consumer_report = zmk_hid_get_consumer_report();
   2917e:	f7ff ffe1 	bl	29144 <zmk_hid_get_consumer_report>

    switch (current_endpoint) {
   29182:	4a09      	ldr	r2, [pc, #36]	; (291a8 <send_consumer_report+0x2c>)
   29184:	7812      	ldrb	r2, [r2, #0]
   29186:	b122      	cbz	r2, 29192 <send_consumer_report+0x16>
   29188:	2a01      	cmp	r2, #1
   2918a:	d007      	beq.n	2919c <send_consumer_report+0x20>

    default:
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
        return -ENOTSUP;
    }
}
   2918c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29190:	bd08      	pop	{r3, pc}
   29192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_usb_hid_send_report((uint8_t *)consumer_report, sizeof(*consumer_report));
   29196:	210d      	movs	r1, #13
   29198:	f001 b920 	b.w	2a3dc <zmk_usb_hid_send_report>
}
   2919c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_hog_send_consumer_report(&consumer_report->body);
   291a0:	3001      	adds	r0, #1
   291a2:	f000 bd03 	b.w	29bac <zmk_hog_send_consumer_report>
   291a6:	bf00      	nop
   291a8:	20000d66 	.word	0x20000d66

000291ac <endpoints_save_preferred_work>:
    settings_save_one("endpoints/preferred", &preferred_endpoint, sizeof(preferred_endpoint));
   291ac:	4902      	ldr	r1, [pc, #8]	; (291b8 <endpoints_save_preferred_work+0xc>)
   291ae:	4803      	ldr	r0, [pc, #12]	; (291bc <endpoints_save_preferred_work+0x10>)
   291b0:	2201      	movs	r2, #1
   291b2:	f002 bdbb 	b.w	2bd2c <settings_save_one>
   291b6:	bf00      	nop
   291b8:	20006ca0 	.word	0x20006ca0
   291bc:	00053608 	.word	0x00053608

000291c0 <zmk_endpoints_init>:
}

struct settings_handler endpoints_handler = {.name = "endpoints", .h_set = endpoints_handle_set};
#endif /* IS_ENABLED(CONFIG_SETTINGS) */

static int zmk_endpoints_init(const struct device *_arg) {
   291c0:	b510      	push	{r4, lr}
#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   291c2:	f002 ff05 	bl	2bfd0 <settings_subsys_init>

    int err = settings_register(&endpoints_handler);
   291c6:	4807      	ldr	r0, [pc, #28]	; (291e4 <zmk_endpoints_init+0x24>)
   291c8:	f002 fe40 	bl	2be4c <settings_register>
    if (err) {
   291cc:	4604      	mov	r4, r0
   291ce:	b930      	cbnz	r0, 291de <zmk_endpoints_init+0x1e>
        LOG_ERR("Failed to register the endpoints settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&endpoints_save_work, endpoints_save_preferred_work);
   291d0:	4805      	ldr	r0, [pc, #20]	; (291e8 <zmk_endpoints_init+0x28>)
   291d2:	4906      	ldr	r1, [pc, #24]	; (291ec <zmk_endpoints_init+0x2c>)
   291d4:	f027 fb2c 	bl	50830 <k_work_init_delayable>

    settings_load_subtree("endpoints");
   291d8:	4805      	ldr	r0, [pc, #20]	; (291f0 <zmk_endpoints_init+0x30>)
   291da:	f002 fde1 	bl	2bda0 <settings_load_subtree>
#endif

    return 0;
}
   291de:	4620      	mov	r0, r4
   291e0:	bd10      	pop	{r4, pc}
   291e2:	bf00      	nop
   291e4:	20000288 	.word	0x20000288
   291e8:	20001278 	.word	0x20001278
   291ec:	000291ad 	.word	0x000291ad
   291f0:	0005361c 	.word	0x0005361c

000291f4 <update_current_endpoint>:

    zmk_endpoints_send_report(HID_USAGE_KEY);
    zmk_endpoints_send_report(HID_USAGE_CONSUMER);
}

static void update_current_endpoint() {
   291f4:	b538      	push	{r3, r4, r5, lr}
    return zmk_ble_active_profile_is_connected();
   291f6:	f000 fab1 	bl	2975c <zmk_ble_active_profile_is_connected>
    if (is_ble_ready()) {
   291fa:	b1c8      	cbz	r0, 29230 <update_current_endpoint+0x3c>

enum usb_dc_status_code zmk_usb_get_status();
enum zmk_usb_conn_state zmk_usb_get_conn_state();

static inline bool zmk_usb_is_powered() { return zmk_usb_get_conn_state() != ZMK_USB_CONN_NONE; }
static inline bool zmk_usb_is_hid_ready() { return zmk_usb_get_conn_state() == ZMK_USB_CONN_HID; }
   291fc:	f001 f8b8 	bl	2a370 <zmk_usb_get_conn_state>
        if (is_usb_ready()) {
   29200:	2802      	cmp	r0, #2
   29202:	d11b      	bne.n	2923c <update_current_endpoint+0x48>
            return preferred_endpoint;
   29204:	4b0f      	ldr	r3, [pc, #60]	; (29244 <update_current_endpoint+0x50>)
   29206:	781c      	ldrb	r4, [r3, #0]
    enum zmk_endpoint new_endpoint = get_selected_endpoint();

    if (new_endpoint != current_endpoint) {
   29208:	4d0f      	ldr	r5, [pc, #60]	; (29248 <update_current_endpoint+0x54>)
   2920a:	782b      	ldrb	r3, [r5, #0]
   2920c:	42a3      	cmp	r3, r4
   2920e:	d017      	beq.n	29240 <update_current_endpoint+0x4c>
    zmk_hid_keyboard_clear();
   29210:	f7ff ff5c 	bl	290cc <zmk_hid_keyboard_clear>
    zmk_hid_consumer_clear();
   29214:	f7ff ff8a 	bl	2912c <zmk_hid_consumer_clear>
        return send_keyboard_report();
   29218:	f7ff ff98 	bl	2914c <send_keyboard_report>
        return send_consumer_report();
   2921c:	f7ff ffae 	bl	2917c <send_consumer_report>
        disconnect_current_endpoint();

        current_endpoint = new_endpoint;
        LOG_INF("Endpoint changed: %d", current_endpoint);

        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   29220:	4620      	mov	r0, r4
        current_endpoint = new_endpoint;
   29222:	702c      	strb	r4, [r5, #0]
        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   29224:	f000 f82e 	bl	29284 <new_zmk_endpoint_selection_changed>
            (struct zmk_endpoint_selection_changed){.endpoint = current_endpoint}));
    }
}
   29228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   2922c:	f01f be65 	b.w	48efa <zmk_event_manager_raise>
   29230:	f001 f89e 	bl	2a370 <zmk_usb_get_conn_state>
        return ZMK_ENDPOINT_BLE;
   29234:	1e84      	subs	r4, r0, #2
   29236:	bf18      	it	ne
   29238:	2401      	movne	r4, #1
   2923a:	e7e5      	b.n	29208 <update_current_endpoint+0x14>
   2923c:	2401      	movs	r4, #1
   2923e:	e7e3      	b.n	29208 <update_current_endpoint+0x14>
}
   29240:	bd38      	pop	{r3, r4, r5, pc}
   29242:	bf00      	nop
   29244:	20006ca0 	.word	0x20006ca0
   29248:	20000d66 	.word	0x20000d66

0002924c <endpoints_handle_set>:
                                void *cb_arg) {
   2924c:	b570      	push	{r4, r5, r6, lr}
   2924e:	460c      	mov	r4, r1
   29250:	4615      	mov	r5, r2
    if (settings_name_steq(name, "preferred", NULL)) {
   29252:	490a      	ldr	r1, [pc, #40]	; (2927c <endpoints_handle_set+0x30>)
   29254:	2200      	movs	r2, #0
                                void *cb_arg) {
   29256:	461e      	mov	r6, r3
    if (settings_name_steq(name, "preferred", NULL)) {
   29258:	f021 f828 	bl	4a2ac <settings_name_steq>
   2925c:	b150      	cbz	r0, 29274 <endpoints_handle_set+0x28>
        if (len != sizeof(enum zmk_endpoint)) {
   2925e:	2c01      	cmp	r4, #1
   29260:	d109      	bne.n	29276 <endpoints_handle_set+0x2a>
        int err = read_cb(cb_arg, &preferred_endpoint, sizeof(enum zmk_endpoint));
   29262:	4907      	ldr	r1, [pc, #28]	; (29280 <endpoints_handle_set+0x34>)
   29264:	4622      	mov	r2, r4
   29266:	4630      	mov	r0, r6
   29268:	47a8      	blx	r5
        if (err <= 0) {
   2926a:	2800      	cmp	r0, #0
   2926c:	dd02      	ble.n	29274 <endpoints_handle_set+0x28>
        update_current_endpoint();
   2926e:	f7ff ffc1 	bl	291f4 <update_current_endpoint>
    return 0;
   29272:	2000      	movs	r0, #0
}
   29274:	bd70      	pop	{r4, r5, r6, pc}
            return -EINVAL;
   29276:	f06f 0015 	mvn.w	r0, #21
   2927a:	e7fb      	b.n	29274 <endpoints_handle_set+0x28>
   2927c:	00053612 	.word	0x00053612
   29280:	20006ca0 	.word	0x20006ca0

00029284 <new_zmk_endpoint_selection_changed>:
 */

#include <kernel.h>
#include <zmk/events/endpoint_selection_changed.h>

ZMK_EVENT_IMPL(zmk_endpoint_selection_changed);
   29284:	b510      	push	{r4, lr}
   29286:	4604      	mov	r4, r0
   29288:	200c      	movs	r0, #12
   2928a:	f027 fe25 	bl	50ed8 <k_malloc>
   2928e:	4a02      	ldr	r2, [pc, #8]	; (29298 <new_zmk_endpoint_selection_changed+0x14>)
   29290:	6002      	str	r2, [r0, #0]
   29292:	7204      	strb	r4, [r0, #8]
   29294:	bd10      	pop	{r4, pc}
   29296:	bf00      	nop
   29298:	000516d4 	.word	0x000516d4

0002929c <set_layer_state>:
                                                        DT_INST_FOREACH_CHILD(0, SENSOR_LAYER)};

#endif /* ZMK_KEYMAP_HAS_SENSORS */

static inline int set_layer_state(uint8_t layer, bool state) {
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
   2929c:	2802      	cmp	r0, #2
static inline int set_layer_state(uint8_t layer, bool state) {
   2929e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
   292a0:	d82a      	bhi.n	292f8 <set_layer_state+0x5c>
        return -EINVAL;
    }

    // Default layer should *always* remain active
    if (layer == _zmk_keymap_layer_default && !state) {
   292a2:	b918      	cbnz	r0, 292ac <set_layer_state+0x10>
   292a4:	b911      	cbnz	r1, 292ac <set_layer_state+0x10>
    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
    // Don't send state changes unless there was an actual change
    if (old_state != _zmk_keymap_layer_state) {
        LOG_DBG("layer_changed: layer %d state %d", layer, state);
        ZMK_EVENT_RAISE(create_layer_state_changed(layer, state));
   292a6:	2000      	movs	r0, #0
    }

    return 0;
}
   292a8:	b004      	add	sp, #16
   292aa:	bd10      	pop	{r4, pc}
    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
   292ac:	4c14      	ldr	r4, [pc, #80]	; (29300 <set_layer_state+0x64>)
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   292ae:	2301      	movs	r3, #1
    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
   292b0:	6822      	ldr	r2, [r4, #0]
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   292b2:	4083      	lsls	r3, r0
   292b4:	b1e9      	cbz	r1, 292f2 <set_layer_state+0x56>
   292b6:	4313      	orrs	r3, r2
    if (old_state != _zmk_keymap_layer_state) {
   292b8:	429a      	cmp	r2, r3
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   292ba:	6023      	str	r3, [r4, #0]
    if (old_state != _zmk_keymap_layer_state) {
   292bc:	d0f3      	beq.n	292a6 <set_layer_state+0xa>

ZMK_EVENT_DECLARE(zmk_layer_state_changed);

static inline struct zmk_layer_state_changed_event *create_layer_state_changed(uint8_t layer,
                                                                               bool state) {
    return new_zmk_layer_state_changed((struct zmk_layer_state_changed){
   292be:	f88d 0000 	strb.w	r0, [sp]
   292c2:	f88d 1001 	strb.w	r1, [sp, #1]
	return z_impl_k_uptime_ticks();
   292c6:	f027 fc53 	bl	50b70 <z_impl_k_uptime_ticks>
   292ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   292ce:	fba0 0302 	umull	r0, r3, r0, r2
   292d2:	fb02 3101 	mla	r1, r2, r1, r3
   292d6:	0bc0      	lsrs	r0, r0, #15
   292d8:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   292dc:	0bc9      	lsrs	r1, r1, #15
   292de:	e9cd 0102 	strd	r0, r1, [sp, #8]
   292e2:	ab04      	add	r3, sp, #16
   292e4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   292e8:	f000 f8b6 	bl	29458 <new_zmk_layer_state_changed>
        ZMK_EVENT_RAISE(create_layer_state_changed(layer, state));
   292ec:	f01f fe05 	bl	48efa <zmk_event_manager_raise>
   292f0:	e7d9      	b.n	292a6 <set_layer_state+0xa>
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   292f2:	ea22 0303 	bic.w	r3, r2, r3
   292f6:	e7df      	b.n	292b8 <set_layer_state+0x1c>
        return -EINVAL;
   292f8:	f06f 0015 	mvn.w	r0, #21
   292fc:	e7d4      	b.n	292a8 <set_layer_state+0xc>
   292fe:	bf00      	nop
   29300:	20003bd4 	.word	0x20003bd4

00029304 <zmk_keymap_apply_position_state>:
        return behavior_keymap_binding_released(binding, event);
    }
}

int zmk_keymap_apply_position_state(uint8_t source, int layer, uint32_t position, bool pressed,
                                    int64_t timestamp) {
   29304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29308:	4615      	mov	r5, r2
    // We want to make a copy of this, since it may be converted from
    // relative to absolute before being invoked
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   2930a:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
                                    int64_t timestamp) {
   2930e:	461f      	mov	r7, r3
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29310:	434a      	muls	r2, r1
   29312:	230c      	movs	r3, #12
   29314:	fb03 2205 	mla	r2, r3, r5, r2
   29318:	4b39      	ldr	r3, [pc, #228]	; (29400 <zmk_keymap_apply_position_state+0xfc>)
   2931a:	4413      	add	r3, r2
                                    int64_t timestamp) {
   2931c:	4682      	mov	sl, r0
   2931e:	460e      	mov	r6, r1
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29320:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
                                    int64_t timestamp) {
   29324:	b08d      	sub	sp, #52	; 0x34
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29326:	ac05      	add	r4, sp, #20
   29328:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                                    int64_t timestamp) {
   2932c:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
   29330:	f01e f89c 	bl	4746c <z_impl_device_get_binding>
    LOG_DBG("layer: %d position: %d, binding name: %s", layer, position,
            log_strdup(binding.behavior_dev));

    behavior = device_get_binding(binding.behavior_dev);

    if (!behavior) {
   29334:	4683      	mov	fp, r0
   29336:	2800      	cmp	r0, #0
   29338:	d05d      	beq.n	293f6 <zmk_keymap_apply_position_state+0xf2>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_CONVERT_CENTRAL_STATE_DEPENDENT_PARAMS);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_convert_central_state_dependent_params(binding, event);
   2933a:	e9cd 6508 	strd	r6, r5, [sp, #32]
   2933e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
__syscall int behavior_keymap_binding_convert_central_state_dependent_params(
    struct zmk_behavior_binding *binding, struct zmk_behavior_binding_event event);

static inline int z_impl_behavior_keymap_binding_convert_central_state_dependent_params(
    struct zmk_behavior_binding *binding, struct zmk_behavior_binding_event event) {
    const struct device *dev = device_get_binding(binding->behavior_dev);
   29342:	9805      	ldr	r0, [sp, #20]
   29344:	f01e f892 	bl	4746c <z_impl_device_get_binding>
    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_convert_central_state_dependent_params == NULL) {
   29348:	6883      	ldr	r3, [r0, #8]
   2934a:	685b      	ldr	r3, [r3, #4]
   2934c:	469c      	mov	ip, r3
   2934e:	b153      	cbz	r3, 29366 <zmk_keymap_apply_position_state+0x62>
        return 0;
    }

    return api->binding_convert_central_state_dependent_params(binding, event);
   29350:	ab0c      	add	r3, sp, #48	; 0x30
   29352:	e913 0003 	ldmdb	r3, {r0, r1}
   29356:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2935a:	e88d 0003 	stmia.w	sp, {r0, r1}
   2935e:	4620      	mov	r0, r4
   29360:	4661      	mov	r1, ip
   29362:	4788      	blx	r1
        LOG_WRN("No behavior assigned to %d on layer %d", position, layer);
        return 1;
    }

    int err = behavior_keymap_binding_convert_central_state_dependent_params(&binding, event);
    if (err) {
   29364:	bb58      	cbnz	r0, 293be <zmk_keymap_apply_position_state+0xba>
    if (behavior == NULL) {
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)behavior->api;
    *locality = api->locality;
   29366:	f8db 3008 	ldr.w	r3, [fp, #8]
   2936a:	781b      	ldrb	r3, [r3, #0]
    if (err) {
        LOG_ERR("Failed to get behavior locality %d", err);
        return err;
    }

    switch (locality) {
   2936c:	2b01      	cmp	r3, #1
   2936e:	d013      	beq.n	29398 <zmk_keymap_apply_position_state+0x94>
   29370:	2b02      	cmp	r3, #2
   29372:	d027      	beq.n	293c4 <zmk_keymap_apply_position_state+0xc0>
   29374:	2b00      	cmp	r3, #0
   29376:	d140      	bne.n	293fa <zmk_keymap_apply_position_state+0xf6>
    case BEHAVIOR_LOCALITY_CENTRAL:
        return invoke_locally(&binding, event, pressed);
   29378:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   2937c:	ab0c      	add	r3, sp, #48	; 0x30
   2937e:	9702      	str	r7, [sp, #8]
   29380:	e913 0003 	ldmdb	r3, {r0, r1}
   29384:	e9cd 6508 	strd	r6, r5, [sp, #32]
   29388:	e88d 0003 	stmia.w	sp, {r0, r1}
   2938c:	462b      	mov	r3, r5
   2938e:	4632      	mov	r2, r6
#if ZMK_BLE_IS_CENTRAL
        for (int i = 0; i < ZMK_BLE_SPLIT_PERIPHERAL_COUNT; i++) {
            zmk_split_bt_invoke_behavior(i, &binding, event, pressed);
        }
#endif
        return invoke_locally(&binding, event, pressed);
   29390:	4620      	mov	r0, r4
   29392:	f01f ff1f 	bl	491d4 <invoke_locally>
   29396:	e012      	b.n	293be <zmk_keymap_apply_position_state+0xba>
            return invoke_locally(&binding, event, pressed);
   29398:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   2939c:	9702      	str	r7, [sp, #8]
   2939e:	aa0a      	add	r2, sp, #40	; 0x28
   293a0:	e892 0003 	ldmia.w	r2, {r0, r1}
   293a4:	e9cd 6508 	strd	r6, r5, [sp, #32]
   293a8:	e88d 0003 	stmia.w	sp, {r0, r1}
   293ac:	ab08      	add	r3, sp, #32
        if (source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
   293ae:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
            return invoke_locally(&binding, event, pressed);
   293b2:	cb0c      	ldmia	r3, {r2, r3}
        if (source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
   293b4:	d0ec      	beq.n	29390 <zmk_keymap_apply_position_state+0x8c>
            return zmk_split_bt_invoke_behavior(source, &binding, event, pressed);
   293b6:	4621      	mov	r1, r4
   293b8:	4650      	mov	r0, sl
   293ba:	f020 f862 	bl	49482 <zmk_split_bt_invoke_behavior>
    }

    return -ENOTSUP;
}
   293be:	b00d      	add	sp, #52	; 0x34
   293c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            zmk_split_bt_invoke_behavior(i, &binding, event, pressed);
   293c4:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   293c8:	e9cd 6508 	strd	r6, r5, [sp, #32]
   293cc:	9702      	str	r7, [sp, #8]
   293ce:	ae0a      	add	r6, sp, #40	; 0x28
   293d0:	e896 0003 	ldmia.w	r6, {r0, r1}
   293d4:	e88d 0003 	stmia.w	sp, {r0, r1}
   293d8:	ad08      	add	r5, sp, #32
   293da:	e895 000c 	ldmia.w	r5, {r2, r3}
   293de:	4621      	mov	r1, r4
   293e0:	2000      	movs	r0, #0
   293e2:	f020 f84e 	bl	49482 <zmk_split_bt_invoke_behavior>
        return invoke_locally(&binding, event, pressed);
   293e6:	9702      	str	r7, [sp, #8]
   293e8:	e896 0003 	ldmia.w	r6, {r0, r1}
   293ec:	e88d 0003 	stmia.w	sp, {r0, r1}
   293f0:	e895 000c 	ldmia.w	r5, {r2, r3}
   293f4:	e7cc      	b.n	29390 <zmk_keymap_apply_position_state+0x8c>
        return 1;
   293f6:	2001      	movs	r0, #1
   293f8:	e7e1      	b.n	293be <zmk_keymap_apply_position_state+0xba>
    switch (locality) {
   293fa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   293fe:	e7de      	b.n	293be <zmk_keymap_apply_position_state+0xba>
   29400:	000516dc 	.word	0x000516dc

00029404 <zmk_keymap_position_state_changed>:

int zmk_keymap_position_state_changed(uint8_t source, uint32_t position, bool pressed,
                                      int64_t timestamp) {
   29404:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
   29408:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
   2940c:	4d10      	ldr	r5, [pc, #64]	; (29450 <zmk_keymap_position_state_changed+0x4c>)
   2940e:	4680      	mov	r8, r0
   29410:	460f      	mov	r7, r1
    if (pressed) {
   29412:	4614      	mov	r4, r2
   29414:	b11a      	cbz	r2, 2941e <zmk_keymap_position_state_changed+0x1a>
        zmk_keymap_active_behavior_layer[position] = _zmk_keymap_layer_state;
   29416:	4b0f      	ldr	r3, [pc, #60]	; (29454 <zmk_keymap_position_state_changed+0x50>)
   29418:	681b      	ldr	r3, [r3, #0]
   2941a:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
                                      int64_t timestamp) {
   2941e:	2602      	movs	r6, #2
    }
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
        if (zmk_keymap_layer_active_with_state(layer, zmk_keymap_active_behavior_layer[position])) {
   29420:	f855 1027 	ldr.w	r1, [r5, r7, lsl #2]
   29424:	b2f0      	uxtb	r0, r6
   29426:	f01f fec5 	bl	491b4 <zmk_keymap_layer_active_with_state>
   2942a:	b930      	cbnz	r0, 2943a <zmk_keymap_position_state_changed+0x36>
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
   2942c:	3e01      	subs	r6, #1
   2942e:	d2f7      	bcs.n	29420 <zmk_keymap_position_state_changed+0x1c>
                return ret;
            }
        }
    }

    return -ENOTSUP;
   29430:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   29434:	b002      	add	sp, #8
   29436:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
            int ret = zmk_keymap_apply_position_state(source, layer, position, pressed, timestamp);
   2943a:	e9cd ab00 	strd	sl, fp, [sp]
   2943e:	4623      	mov	r3, r4
   29440:	463a      	mov	r2, r7
   29442:	4631      	mov	r1, r6
   29444:	4640      	mov	r0, r8
   29446:	f7ff ff5d 	bl	29304 <zmk_keymap_apply_position_state>
            if (ret > 0) {
   2944a:	2800      	cmp	r0, #0
   2944c:	ddf2      	ble.n	29434 <zmk_keymap_position_state_changed+0x30>
   2944e:	e7ed      	b.n	2942c <zmk_keymap_position_state_changed+0x28>
   29450:	20003bd8 	.word	0x20003bd8
   29454:	20003bd4 	.word	0x20003bd4

00029458 <new_zmk_layer_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/layer_state_changed.h>

   29458:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2945a:	466c      	mov	r4, sp
   2945c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   29460:	2018      	movs	r0, #24
   29462:	f027 fd39 	bl	50ed8 <k_malloc>
   29466:	4605      	mov	r5, r0
   29468:	4b05      	ldr	r3, [pc, #20]	; (29480 <new_zmk_layer_state_changed+0x28>)
   2946a:	f845 3b08 	str.w	r3, [r5], #8
   2946e:	4606      	mov	r6, r0
   29470:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29474:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   29478:	4630      	mov	r0, r6
   2947a:	b004      	add	sp, #16
   2947c:	bd70      	pop	{r4, r5, r6, pc}
   2947e:	bf00      	nop
   29480:	00051bf0 	.word	0x00051bf0

00029484 <new_zmk_keycode_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/keycode_state_changed.h>

ZMK_EVENT_IMPL(zmk_keycode_state_changed);
   29484:	b084      	sub	sp, #16
   29486:	b570      	push	{r4, r5, r6, lr}
   29488:	ac04      	add	r4, sp, #16
   2948a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   2948e:	2020      	movs	r0, #32
   29490:	f027 fd22 	bl	50ed8 <k_malloc>
   29494:	4604      	mov	r4, r0
   29496:	4b08      	ldr	r3, [pc, #32]	; (294b8 <new_zmk_keycode_state_changed+0x34>)
   29498:	f844 3b08 	str.w	r3, [r4], #8
   2949c:	ad04      	add	r5, sp, #16
   2949e:	4606      	mov	r6, r0
   294a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   294a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   294a4:	e895 0003 	ldmia.w	r5, {r0, r1}
   294a8:	e884 0003 	stmia.w	r4, {r0, r1}
   294ac:	4630      	mov	r0, r6
   294ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   294b2:	b004      	add	sp, #16
   294b4:	4770      	bx	lr
   294b6:	bf00      	nop
   294b8:	00051bf8 	.word	0x00051bf8

000294bc <as_zmk_keycode_state_changed>:
   294bc:	6802      	ldr	r2, [r0, #0]
   294be:	4b03      	ldr	r3, [pc, #12]	; (294cc <as_zmk_keycode_state_changed+0x10>)
   294c0:	429a      	cmp	r2, r3
   294c2:	bf0c      	ite	eq
   294c4:	3008      	addeq	r0, #8
   294c6:	2000      	movne	r0, #0
   294c8:	4770      	bx	lr
   294ca:	bf00      	nop
   294cc:	00051bf8 	.word	0x00051bf8

000294d0 <new_zmk_ble_active_profile_changed>:
 */

#include <kernel.h>
#include <zmk/events/ble_active_profile_changed.h>

   294d0:	b513      	push	{r0, r1, r4, lr}
   294d2:	466c      	mov	r4, sp
   294d4:	e884 0003 	stmia.w	r4, {r0, r1}
   294d8:	2010      	movs	r0, #16
   294da:	f027 fcfd 	bl	50ed8 <k_malloc>
   294de:	4602      	mov	r2, r0
   294e0:	4905      	ldr	r1, [pc, #20]	; (294f8 <new_zmk_ble_active_profile_changed+0x28>)
   294e2:	f842 1b08 	str.w	r1, [r2], #8
   294e6:	4603      	mov	r3, r0
   294e8:	e894 0003 	ldmia.w	r4, {r0, r1}
   294ec:	e882 0003 	stmia.w	r2, {r0, r1}
   294f0:	4618      	mov	r0, r3
   294f2:	b002      	add	sp, #8
   294f4:	bd10      	pop	{r4, pc}
   294f6:	bf00      	nop
   294f8:	00051bfc 	.word	0x00051bfc

000294fc <raise_profile_changed_event>:

static bt_addr_le_t peripheral_addr;

#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_ROLE_CENTRAL) */

static void raise_profile_changed_event() {
   294fc:	b507      	push	{r0, r1, r2, lr}
    ZMK_EVENT_RAISE(new_zmk_ble_active_profile_changed((struct zmk_ble_active_profile_changed){
   294fe:	4b09      	ldr	r3, [pc, #36]	; (29524 <raise_profile_changed_event+0x28>)
   29500:	781a      	ldrb	r2, [r3, #0]
   29502:	4b09      	ldr	r3, [pc, #36]	; (29528 <raise_profile_changed_event+0x2c>)
   29504:	f88d 2000 	strb.w	r2, [sp]
   29508:	2116      	movs	r1, #22
   2950a:	fb02 3301 	mla	r3, r2, r1, r3
   2950e:	9301      	str	r3, [sp, #4]
   29510:	ab02      	add	r3, sp, #8
   29512:	e913 0003 	ldmdb	r3, {r0, r1}
   29516:	f7ff ffdb 	bl	294d0 <new_zmk_ble_active_profile_changed>
        .index = active_profile, .profile = &profiles[active_profile]}));
}
   2951a:	b003      	add	sp, #12
   2951c:	f85d eb04 	ldr.w	lr, [sp], #4
    ZMK_EVENT_RAISE(new_zmk_ble_active_profile_changed((struct zmk_ble_active_profile_changed){
   29520:	f01f bceb 	b.w	48efa <zmk_event_manager_raise>
   29524:	20006ca1 	.word	0x20006ca1
   29528:	20006caa 	.word	0x20006caa

0002952c <ble_save_profile_work>:

int zmk_ble_active_profile_index() { return active_profile; }

#if IS_ENABLED(CONFIG_SETTINGS)
static void ble_save_profile_work(struct k_work *work) {
    settings_save_one("ble/active_profile", &active_profile, sizeof(active_profile));
   2952c:	4902      	ldr	r1, [pc, #8]	; (29538 <ble_save_profile_work+0xc>)
   2952e:	4803      	ldr	r0, [pc, #12]	; (2953c <ble_save_profile_work+0x10>)
   29530:	2201      	movs	r2, #1
   29532:	f002 bbfb 	b.w	2bd2c <settings_save_one>
   29536:	bf00      	nop
   29538:	20006ca1 	.word	0x20006ca1
   2953c:	000536d1 	.word	0x000536d1

00029540 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   29540:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   29542:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   29544:	b08a      	sub	sp, #40	; 0x28
   29546:	4604      	mov	r4, r0
   29548:	460e      	mov	r6, r1
   2954a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   2954c:	2b03      	cmp	r3, #3
   2954e:	d820      	bhi.n	29592 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   29550:	e8df f003 	tbb	[pc, r3]
   29554:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   29558:	4911      	ldr	r1, [pc, #68]	; (295a0 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   2955a:	4628      	mov	r0, r5
   2955c:	f022 f957 	bl	4b80e <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   29560:	7863      	ldrb	r3, [r4, #1]
   29562:	9304      	str	r3, [sp, #16]
   29564:	78a3      	ldrb	r3, [r4, #2]
   29566:	9303      	str	r3, [sp, #12]
   29568:	78e3      	ldrb	r3, [r4, #3]
   2956a:	9302      	str	r3, [sp, #8]
   2956c:	7923      	ldrb	r3, [r4, #4]
   2956e:	9301      	str	r3, [sp, #4]
   29570:	7963      	ldrb	r3, [r4, #5]
   29572:	9300      	str	r3, [sp, #0]
   29574:	4a0b      	ldr	r2, [pc, #44]	; (295a4 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   29576:	79a3      	ldrb	r3, [r4, #6]
   29578:	9505      	str	r5, [sp, #20]
   2957a:	211e      	movs	r1, #30
   2957c:	4630      	mov	r0, r6
   2957e:	f020 f886 	bl	4968e <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   29582:	b00a      	add	sp, #40	; 0x28
   29584:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   29586:	4908      	ldr	r1, [pc, #32]	; (295a8 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   29588:	e7e7      	b.n	2955a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   2958a:	4908      	ldr	r1, [pc, #32]	; (295ac <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   2958c:	e7e5      	b.n	2955a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   2958e:	4908      	ldr	r1, [pc, #32]	; (295b0 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   29590:	e7e3      	b.n	2955a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   29592:	4a08      	ldr	r2, [pc, #32]	; (295b4 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   29594:	210a      	movs	r1, #10
   29596:	4628      	mov	r0, r5
   29598:	f020 f879 	bl	4968e <snprintk>
		break;
   2959c:	e7e0      	b.n	29560 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   2959e:	bf00      	nop
   295a0:	000536e4 	.word	0x000536e4
   295a4:	0005370d 	.word	0x0005370d
   295a8:	000536eb 	.word	0x000536eb
   295ac:	000536f2 	.word	0x000536f2
   295b0:	000536fc 	.word	0x000536fc
   295b4:	00053706 	.word	0x00053706

000295b8 <ble_profiles_handle_set>:
#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_ROLE_CENTRAL) */

#if IS_ENABLED(CONFIG_SETTINGS)

static int ble_profiles_handle_set(const char *name, size_t len, settings_read_cb read_cb,
                                   void *cb_arg) {
   295b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   295bc:	b08b      	sub	sp, #44	; 0x2c
   295be:	460d      	mov	r5, r1
   295c0:	4616      	mov	r6, r2
    const char *next;

    LOG_DBG("Setting BLE value %s", log_strdup(name));

    if (settings_name_steq(name, "profiles", &next) && next) {
   295c2:	4926      	ldr	r1, [pc, #152]	; (2965c <ble_profiles_handle_set+0xa4>)
   295c4:	466a      	mov	r2, sp
                                   void *cb_arg) {
   295c6:	4604      	mov	r4, r0
   295c8:	4698      	mov	r8, r3
    if (settings_name_steq(name, "profiles", &next) && next) {
   295ca:	f020 fe6f 	bl	4a2ac <settings_name_steq>
   295ce:	b1f8      	cbz	r0, 29610 <ble_profiles_handle_set+0x58>
   295d0:	9800      	ldr	r0, [sp, #0]
   295d2:	b1e8      	cbz	r0, 29610 <ble_profiles_handle_set+0x58>
        char *endptr;
        uint8_t idx = strtoul(next, &endptr, 10);
   295d4:	220a      	movs	r2, #10
   295d6:	a901      	add	r1, sp, #4
   295d8:	f022 f8a1 	bl	4b71e <strtoul>
        if (*endptr != '\0') {
   295dc:	9b01      	ldr	r3, [sp, #4]
   295de:	781f      	ldrb	r7, [r3, #0]
   295e0:	bb07      	cbnz	r7, 29624 <ble_profiles_handle_set+0x6c>
            LOG_WRN("Invalid profile index: %s", log_strdup(next));
            return -EINVAL;
        }

        if (len != sizeof(struct zmk_ble_profile)) {
   295e2:	2d16      	cmp	r5, #22
   295e4:	d11e      	bne.n	29624 <ble_profiles_handle_set+0x6c>
            LOG_ERR("Invalid profile size (got %d expected %d)", len,
                    sizeof(struct zmk_ble_profile));
            return -EINVAL;
        }

        if (idx >= ZMK_BLE_PROFILE_COUNT) {
   295e6:	b2c4      	uxtb	r4, r0
   295e8:	2c04      	cmp	r4, #4
   295ea:	d81b      	bhi.n	29624 <ble_profiles_handle_set+0x6c>
            LOG_WRN("Profile address for index %d is larger than max of %d", idx,
                    ZMK_BLE_PROFILE_COUNT);
            return -EINVAL;
        }

        int err = read_cb(cb_arg, &profiles[idx], sizeof(struct zmk_ble_profile));
   295ec:	f8df 9070 	ldr.w	r9, [pc, #112]	; 29660 <ble_profiles_handle_set+0xa8>
   295f0:	436c      	muls	r4, r5
   295f2:	462a      	mov	r2, r5
   295f4:	eb09 0104 	add.w	r1, r9, r4
   295f8:	4640      	mov	r0, r8
   295fa:	47b0      	blx	r6
        if (err <= 0) {
   295fc:	2800      	cmp	r0, #0
   295fe:	dd13      	ble.n	29628 <ble_profiles_handle_set+0x70>
            LOG_ERR("Failed to handle profile address from settings (err %d)", err);
            return err;
        }

        char addr_str[BT_ADDR_LE_STR_LEN];
        bt_addr_le_to_str(&profiles[idx].peer, addr_str, sizeof(addr_str));
   29600:	f104 000f 	add.w	r0, r4, #15
   29604:	a902      	add	r1, sp, #8
   29606:	4448      	add	r0, r9
   29608:	f7ff ff9a 	bl	29540 <bt_addr_le_to_str.constprop.0.isra.0>
            return err;
        }
    }
#endif

    return 0;
   2960c:	2000      	movs	r0, #0
   2960e:	e00b      	b.n	29628 <ble_profiles_handle_set+0x70>
    } else if (settings_name_steq(name, "active_profile", &next) && !next) {
   29610:	4914      	ldr	r1, [pc, #80]	; (29664 <ble_profiles_handle_set+0xac>)
   29612:	466a      	mov	r2, sp
   29614:	4620      	mov	r0, r4
   29616:	f020 fe49 	bl	4a2ac <settings_name_steq>
   2961a:	b178      	cbz	r0, 2963c <ble_profiles_handle_set+0x84>
   2961c:	9b00      	ldr	r3, [sp, #0]
   2961e:	b96b      	cbnz	r3, 2963c <ble_profiles_handle_set+0x84>
        if (len != sizeof(active_profile)) {
   29620:	2d01      	cmp	r5, #1
   29622:	d004      	beq.n	2962e <ble_profiles_handle_set+0x76>
            return -EINVAL;
   29624:	f06f 0015 	mvn.w	r0, #21
};
   29628:	b00b      	add	sp, #44	; 0x2c
   2962a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        int err = read_cb(cb_arg, &active_profile, sizeof(active_profile));
   2962e:	490e      	ldr	r1, [pc, #56]	; (29668 <ble_profiles_handle_set+0xb0>)
   29630:	462a      	mov	r2, r5
        int err = read_cb(cb_arg, &peripheral_addr, sizeof(bt_addr_le_t));
   29632:	4640      	mov	r0, r8
   29634:	47b0      	blx	r6
        if (err <= 0) {
   29636:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2963a:	e7f5      	b.n	29628 <ble_profiles_handle_set+0x70>
    else if (settings_name_steq(name, "peripheral_address", &next) && !next) {
   2963c:	490b      	ldr	r1, [pc, #44]	; (2966c <ble_profiles_handle_set+0xb4>)
   2963e:	466a      	mov	r2, sp
   29640:	4620      	mov	r0, r4
   29642:	f020 fe33 	bl	4a2ac <settings_name_steq>
   29646:	2800      	cmp	r0, #0
   29648:	d0ee      	beq.n	29628 <ble_profiles_handle_set+0x70>
   2964a:	9b00      	ldr	r3, [sp, #0]
   2964c:	2b00      	cmp	r3, #0
   2964e:	d1dd      	bne.n	2960c <ble_profiles_handle_set+0x54>
        if (len != sizeof(bt_addr_le_t)) {
   29650:	2d07      	cmp	r5, #7
   29652:	d1e7      	bne.n	29624 <ble_profiles_handle_set+0x6c>
        int err = read_cb(cb_arg, &peripheral_addr, sizeof(bt_addr_le_t));
   29654:	4906      	ldr	r1, [pc, #24]	; (29670 <ble_profiles_handle_set+0xb8>)
   29656:	462a      	mov	r2, r5
   29658:	e7eb      	b.n	29632 <ble_profiles_handle_set+0x7a>
   2965a:	bf00      	nop
   2965c:	00053730 	.word	0x00053730
   29660:	20006caa 	.word	0x20006caa
   29664:	000536d5 	.word	0x000536d5
   29668:	20006ca1 	.word	0x20006ca1
   2966c:	00053754 	.word	0x00053754
   29670:	20006ca3 	.word	0x20006ca3

00029674 <disconnected>:
        LOG_DBG("Active profile connected");
        k_work_submit(&raise_profile_changed_event_work);
    }
}

static void disconnected(struct bt_conn *conn, uint8_t reason) {
   29674:	b510      	push	{r4, lr}
   29676:	b090      	sub	sp, #64	; 0x40
   29678:	4604      	mov	r4, r0
    char addr[BT_ADDR_LE_STR_LEN];
    struct bt_conn_info info;

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   2967a:	f023 fa10 	bl	4ca9e <bt_conn_get_dst>
   2967e:	4669      	mov	r1, sp
   29680:	f7ff ff5e 	bl	29540 <bt_addr_le_to_str.constprop.0.isra.0>

    LOG_DBG("Disconnected from %s (reason 0x%02x)", log_strdup(addr), reason);

    bt_conn_get_info(conn, &info);
   29684:	a908      	add	r1, sp, #32
   29686:	4620      	mov	r0, r4
   29688:	f006 f9c2 	bl	2fa10 <bt_conn_get_info>

    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   2968c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   29690:	2b01      	cmp	r3, #1
   29692:	d113      	bne.n	296bc <disconnected+0x48>
        return;
    }

    // We need to do this in a work callback, otherwise the advertising update will still see the
    // connection for a profile as active, and not start advertising yet.
    k_work_submit(&update_advertising_work);
   29694:	480a      	ldr	r0, [pc, #40]	; (296c0 <disconnected+0x4c>)
   29696:	f01e fc27 	bl	47ee8 <k_work_submit>
    return bt_addr_le_cmp(bt_conn_get_dst(conn), &profiles[active_profile].peer) == 0;
   2969a:	4620      	mov	r0, r4
   2969c:	f023 f9ff 	bl	4ca9e <bt_conn_get_dst>
   296a0:	4b08      	ldr	r3, [pc, #32]	; (296c4 <disconnected+0x50>)
   296a2:	4909      	ldr	r1, [pc, #36]	; (296c8 <disconnected+0x54>)
   296a4:	781b      	ldrb	r3, [r3, #0]
   296a6:	2216      	movs	r2, #22
   296a8:	fb02 1103 	mla	r1, r2, r3, r1
	return memcmp(a, b, sizeof(*a));
   296ac:	310f      	adds	r1, #15
   296ae:	2207      	movs	r2, #7
   296b0:	f022 f8db 	bl	4b86a <memcmp>

    if (is_conn_active_profile(conn)) {
   296b4:	b910      	cbnz	r0, 296bc <disconnected+0x48>
        LOG_DBG("Active profile disconnected");
        k_work_submit(&raise_profile_changed_event_work);
   296b6:	4805      	ldr	r0, [pc, #20]	; (296cc <disconnected+0x58>)
   296b8:	f01e fc16 	bl	47ee8 <k_work_submit>
    }
}
   296bc:	b010      	add	sp, #64	; 0x40
   296be:	bd10      	pop	{r4, pc}
   296c0:	200002e8 	.word	0x200002e8
   296c4:	20006ca1 	.word	0x20006ca1
   296c8:	20006caa 	.word	0x20006caa
   296cc:	200002d8 	.word	0x200002d8

000296d0 <zmk_ble_active_profile_is_open>:
bool zmk_ble_active_profile_is_open() {
   296d0:	b507      	push	{r0, r1, r2, lr}
    return !bt_addr_le_cmp(&profiles[active_profile].peer, BT_ADDR_LE_ANY);
   296d2:	4b0a      	ldr	r3, [pc, #40]	; (296fc <zmk_ble_active_profile_is_open+0x2c>)
   296d4:	480a      	ldr	r0, [pc, #40]	; (29700 <zmk_ble_active_profile_is_open+0x30>)
   296d6:	781b      	ldrb	r3, [r3, #0]
   296d8:	2216      	movs	r2, #22
   296da:	fb02 0003 	mla	r0, r2, r3, r0
   296de:	4669      	mov	r1, sp
   296e0:	2300      	movs	r3, #0
   296e2:	2207      	movs	r2, #7
   296e4:	300f      	adds	r0, #15
   296e6:	9300      	str	r3, [sp, #0]
   296e8:	f8cd 3003 	str.w	r3, [sp, #3]
   296ec:	f022 f8bd 	bl	4b86a <memcmp>
}
   296f0:	fab0 f080 	clz	r0, r0
   296f4:	0940      	lsrs	r0, r0, #5
   296f6:	b003      	add	sp, #12
   296f8:	f85d fb04 	ldr.w	pc, [sp], #4
   296fc:	20006ca1 	.word	0x20006ca1
   29700:	20006caa 	.word	0x20006caa

00029704 <set_profile_address>:
void set_profile_address(uint8_t index, const bt_addr_le_t *addr) {
   29704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29708:	4604      	mov	r4, r0
   2970a:	b08c      	sub	sp, #48	; 0x30
   2970c:	460d      	mov	r5, r1
   2970e:	f04f 0816 	mov.w	r8, #22
    memcpy(&profiles[index].peer, addr, sizeof(bt_addr_le_t));
   29712:	4f0f      	ldr	r7, [pc, #60]	; (29750 <set_profile_address+0x4c>)
    bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   29714:	a904      	add	r1, sp, #16
   29716:	4628      	mov	r0, r5
   29718:	fb14 f608 	smulbb	r6, r4, r8
   2971c:	f7ff ff10 	bl	29540 <bt_addr_le_to_str.constprop.0.isra.0>
    memcpy(&profiles[index].peer, addr, sizeof(bt_addr_le_t));
   29720:	f106 000f 	add.w	r0, r6, #15
   29724:	4629      	mov	r1, r5
   29726:	2207      	movs	r2, #7
   29728:	4438      	add	r0, r7
   2972a:	f022 f8ae 	bl	4b88a <memcpy>
    sprintf(setting_name, "ble/profiles/%d", index);
   2972e:	4622      	mov	r2, r4
   29730:	4908      	ldr	r1, [pc, #32]	; (29754 <set_profile_address+0x50>)
   29732:	4668      	mov	r0, sp
   29734:	f003 faa2 	bl	2cc7c <sprintf>
    settings_save_one(setting_name, &profiles[index], sizeof(struct zmk_ble_profile));
   29738:	4642      	mov	r2, r8
   2973a:	19b9      	adds	r1, r7, r6
   2973c:	4668      	mov	r0, sp
   2973e:	f002 faf5 	bl	2bd2c <settings_save_one>
    k_work_submit(&raise_profile_changed_event_work);
   29742:	4805      	ldr	r0, [pc, #20]	; (29758 <set_profile_address+0x54>)
   29744:	f01e fbd0 	bl	47ee8 <k_work_submit>
}
   29748:	b00c      	add	sp, #48	; 0x30
   2974a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2974e:	bf00      	nop
   29750:	20006caa 	.word	0x20006caa
   29754:	00053739 	.word	0x00053739
   29758:	200002d8 	.word	0x200002d8

0002975c <zmk_ble_active_profile_is_connected>:
bool zmk_ble_active_profile_is_connected() {
   2975c:	b537      	push	{r0, r1, r2, r4, r5, lr}
bt_addr_le_t *zmk_ble_active_profile_addr() { return &profiles[active_profile].peer; }
   2975e:	4b0e      	ldr	r3, [pc, #56]	; (29798 <zmk_ble_active_profile_is_connected+0x3c>)
   29760:	4c0e      	ldr	r4, [pc, #56]	; (2979c <zmk_ble_active_profile_is_connected+0x40>)
   29762:	781b      	ldrb	r3, [r3, #0]
   29764:	2216      	movs	r2, #22
   29766:	fb02 4403 	mla	r4, r2, r3, r4
   2976a:	340f      	adds	r4, #15
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2976c:	2500      	movs	r5, #0
   2976e:	2207      	movs	r2, #7
   29770:	4669      	mov	r1, sp
   29772:	4620      	mov	r0, r4
   29774:	9500      	str	r5, [sp, #0]
   29776:	f8cd 5003 	str.w	r5, [sp, #3]
   2977a:	f022 f876 	bl	4b86a <memcmp>
   2977e:	b148      	cbz	r0, 29794 <zmk_ble_active_profile_is_connected+0x38>
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
   29780:	4621      	mov	r1, r4
   29782:	4628      	mov	r0, r5
   29784:	f006 f8f2 	bl	2f96c <bt_conn_lookup_addr_le>
   29788:	b120      	cbz	r0, 29794 <zmk_ble_active_profile_is_connected+0x38>
    bt_conn_unref(conn);
   2978a:	f023 f8b7 	bl	4c8fc <bt_conn_unref>
    return true;
   2978e:	2001      	movs	r0, #1
}
   29790:	b003      	add	sp, #12
   29792:	bd30      	pop	{r4, r5, pc}
        return false;
   29794:	2000      	movs	r0, #0
   29796:	e7fb      	b.n	29790 <zmk_ble_active_profile_is_connected+0x34>
   29798:	20006ca1 	.word	0x20006ca1
   2979c:	20006caa 	.word	0x20006caa

000297a0 <update_advertising>:
int update_advertising() {
   297a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   297a2:	b08d      	sub	sp, #52	; 0x34
    if (zmk_ble_active_profile_is_open()) {
   297a4:	f7ff ff94 	bl	296d0 <zmk_ble_active_profile_is_open>
   297a8:	b988      	cbnz	r0, 297ce <update_advertising+0x2e>
    } else if (!zmk_ble_active_profile_is_connected()) {
   297aa:	f7ff ffd7 	bl	2975c <zmk_ble_active_profile_is_connected>
   297ae:	f080 0301 	eor.w	r3, r0, #1
   297b2:	005b      	lsls	r3, r3, #1
   297b4:	b2db      	uxtb	r3, r3
    switch (desired_adv + CURR_ADV(advertising_status)) {
   297b6:	4d22      	ldr	r5, [pc, #136]	; (29840 <update_advertising+0xa0>)
   297b8:	782a      	ldrb	r2, [r5, #0]
   297ba:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   297be:	2b11      	cmp	r3, #17
   297c0:	dc07      	bgt.n	297d2 <update_advertising+0x32>
   297c2:	2b02      	cmp	r3, #2
   297c4:	d02f      	beq.n	29826 <update_advertising+0x86>
   297c6:	2b10      	cmp	r3, #16
   297c8:	d00c      	beq.n	297e4 <update_advertising+0x44>
    return 0;
   297ca:	2400      	movs	r4, #0
   297cc:	e007      	b.n	297de <update_advertising+0x3e>
        desired_adv = ZMK_ADV_CONN;
   297ce:	2302      	movs	r3, #2
   297d0:	e7f1      	b.n	297b6 <update_advertising+0x16>
    switch (desired_adv + CURR_ADV(advertising_status)) {
   297d2:	2b20      	cmp	r3, #32
   297d4:	d006      	beq.n	297e4 <update_advertising+0x44>
   297d6:	2b12      	cmp	r3, #18
   297d8:	f04f 0400 	mov.w	r4, #0
   297dc:	d00a      	beq.n	297f4 <update_advertising+0x54>
};
   297de:	4620      	mov	r0, r4
   297e0:	b00d      	add	sp, #52	; 0x34
   297e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CHECKED_ADV_STOP();
   297e4:	f005 f956 	bl	2ea94 <bt_le_adv_stop>
   297e8:	2300      	movs	r3, #0
   297ea:	702b      	strb	r3, [r5, #0]
   297ec:	4604      	mov	r4, r0
   297ee:	2800      	cmp	r0, #0
   297f0:	d0eb      	beq.n	297ca <update_advertising+0x2a>
   297f2:	e7f4      	b.n	297de <update_advertising+0x3e>
        CHECKED_ADV_STOP();
   297f4:	f005 f94e 	bl	2ea94 <bt_le_adv_stop>
   297f8:	702c      	strb	r4, [r5, #0]
   297fa:	4604      	mov	r4, r0
   297fc:	2800      	cmp	r0, #0
   297fe:	d1ee      	bne.n	297de <update_advertising+0x3e>
        CHECKED_OPEN_ADV();
   29800:	4f10      	ldr	r7, [pc, #64]	; (29844 <update_advertising+0xa4>)
   29802:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   29804:	ae02      	add	r6, sp, #8
   29806:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   29808:	683b      	ldr	r3, [r7, #0]
   2980a:	490f      	ldr	r1, [pc, #60]	; (29848 <update_advertising+0xa8>)
   2980c:	6033      	str	r3, [r6, #0]
   2980e:	2204      	movs	r2, #4
   29810:	9400      	str	r4, [sp, #0]
   29812:	4623      	mov	r3, r4
   29814:	a802      	add	r0, sp, #8
   29816:	f005 f90b 	bl	2ea30 <bt_le_adv_start>
   2981a:	4604      	mov	r4, r0
   2981c:	2800      	cmp	r0, #0
   2981e:	d1de      	bne.n	297de <update_advertising+0x3e>
   29820:	2302      	movs	r3, #2
   29822:	702b      	strb	r3, [r5, #0]
        break;
   29824:	e7d1      	b.n	297ca <update_advertising+0x2a>
        CHECKED_OPEN_ADV();
   29826:	4e07      	ldr	r6, [pc, #28]	; (29844 <update_advertising+0xa4>)
   29828:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2982a:	ac07      	add	r4, sp, #28
   2982c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2982e:	6833      	ldr	r3, [r6, #0]
   29830:	6023      	str	r3, [r4, #0]
   29832:	2300      	movs	r3, #0
   29834:	4904      	ldr	r1, [pc, #16]	; (29848 <update_advertising+0xa8>)
   29836:	9300      	str	r3, [sp, #0]
   29838:	2204      	movs	r2, #4
   2983a:	a807      	add	r0, sp, #28
   2983c:	e7eb      	b.n	29816 <update_advertising+0x76>
   2983e:	bf00      	nop
   29840:	20006ca2 	.word	0x20006ca2
   29844:	00051480 	.word	0x00051480
   29848:	00051c14 	.word	0x00051c14

0002984c <auth_pairing_complete>:
    }

    return BT_SECURITY_ERR_SUCCESS;
};

static void auth_pairing_complete(struct bt_conn *conn, bool bonded) {
   2984c:	b530      	push	{r4, r5, lr}
   2984e:	b091      	sub	sp, #68	; 0x44
   29850:	4605      	mov	r5, r0
    struct bt_conn_info info;
    char addr[BT_ADDR_LE_STR_LEN];
    const bt_addr_le_t *dst = bt_conn_get_dst(conn);
   29852:	f023 f924 	bl	4ca9e <bt_conn_get_dst>

    bt_addr_le_to_str(dst, addr, sizeof(addr));
   29856:	4669      	mov	r1, sp
    const bt_addr_le_t *dst = bt_conn_get_dst(conn);
   29858:	4604      	mov	r4, r0
    bt_addr_le_to_str(dst, addr, sizeof(addr));
   2985a:	f7ff fe71 	bl	29540 <bt_addr_le_to_str.constprop.0.isra.0>
    bt_conn_get_info(conn, &info);
   2985e:	a908      	add	r1, sp, #32
   29860:	4628      	mov	r0, r5
   29862:	f006 f8d5 	bl	2fa10 <bt_conn_get_info>

    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   29866:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   2986a:	2b01      	cmp	r3, #1
   2986c:	d105      	bne.n	2987a <auth_pairing_complete+0x2e>
        LOG_DBG("SKIPPING FOR ROLE %d", info.role);
        return;
    }

    if (!zmk_ble_active_profile_is_open()) {
   2986e:	f7ff ff2f 	bl	296d0 <zmk_ble_active_profile_is_open>
        LOG_ERR("Pairing completed but current profile is not open: %s", log_strdup(addr));
        bt_unpair(BT_ID_DEFAULT, dst);
   29872:	4621      	mov	r1, r4
    if (!zmk_ble_active_profile_is_open()) {
   29874:	b918      	cbnz	r0, 2987e <auth_pairing_complete+0x32>
        bt_unpair(BT_ID_DEFAULT, dst);
   29876:	f004 fa0b 	bl	2dc90 <bt_unpair>
        return;
    }

    set_profile_address(active_profile, dst);
    update_advertising();
};
   2987a:	b011      	add	sp, #68	; 0x44
   2987c:	bd30      	pop	{r4, r5, pc}
    set_profile_address(active_profile, dst);
   2987e:	4b03      	ldr	r3, [pc, #12]	; (2988c <auth_pairing_complete+0x40>)
   29880:	7818      	ldrb	r0, [r3, #0]
   29882:	f7ff ff3f 	bl	29704 <set_profile_address>
    update_advertising();
   29886:	f7ff ff8b 	bl	297a0 <update_advertising>
   2988a:	e7f6      	b.n	2987a <auth_pairing_complete+0x2e>
   2988c:	20006ca1 	.word	0x20006ca1

00029890 <connected>:
static void connected(struct bt_conn *conn, uint8_t err) {
   29890:	b530      	push	{r4, r5, lr}
   29892:	b091      	sub	sp, #68	; 0x44
   29894:	460d      	mov	r5, r1
    bt_conn_get_info(conn, &info);
   29896:	a908      	add	r1, sp, #32
static void connected(struct bt_conn *conn, uint8_t err) {
   29898:	4604      	mov	r4, r0
    bt_conn_get_info(conn, &info);
   2989a:	f006 f8b9 	bl	2fa10 <bt_conn_get_info>
    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   2989e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   298a2:	2b01      	cmp	r3, #1
   298a4:	d10b      	bne.n	298be <connected+0x2e>
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   298a6:	4620      	mov	r0, r4
   298a8:	f023 f8f9 	bl	4ca9e <bt_conn_get_dst>
   298ac:	4669      	mov	r1, sp
   298ae:	f7ff fe47 	bl	29540 <bt_addr_le_to_str.constprop.0.isra.0>
    advertising_status = ZMK_ADV_NONE;
   298b2:	4b10      	ldr	r3, [pc, #64]	; (298f4 <connected+0x64>)
   298b4:	2200      	movs	r2, #0
   298b6:	701a      	strb	r2, [r3, #0]
    if (err) {
   298b8:	b11d      	cbz	r5, 298c2 <connected+0x32>
        update_advertising();
   298ba:	f7ff ff71 	bl	297a0 <update_advertising>
}
   298be:	b011      	add	sp, #68	; 0x44
   298c0:	bd30      	pop	{r4, r5, pc}
    if (bt_conn_set_security(conn, BT_SECURITY_L2)) {
   298c2:	2102      	movs	r1, #2
   298c4:	4620      	mov	r0, r4
   298c6:	f023 f898 	bl	4c9fa <bt_conn_set_security>
    update_advertising();
   298ca:	f7ff ff69 	bl	297a0 <update_advertising>
    return bt_addr_le_cmp(bt_conn_get_dst(conn), &profiles[active_profile].peer) == 0;
   298ce:	4620      	mov	r0, r4
   298d0:	f023 f8e5 	bl	4ca9e <bt_conn_get_dst>
   298d4:	4b08      	ldr	r3, [pc, #32]	; (298f8 <connected+0x68>)
   298d6:	4909      	ldr	r1, [pc, #36]	; (298fc <connected+0x6c>)
   298d8:	781b      	ldrb	r3, [r3, #0]
   298da:	2216      	movs	r2, #22
   298dc:	fb02 1103 	mla	r1, r2, r3, r1
   298e0:	310f      	adds	r1, #15
   298e2:	2207      	movs	r2, #7
   298e4:	f021 ffc1 	bl	4b86a <memcmp>
    if (is_conn_active_profile(conn)) {
   298e8:	2800      	cmp	r0, #0
   298ea:	d1e8      	bne.n	298be <connected+0x2e>
        k_work_submit(&raise_profile_changed_event_work);
   298ec:	4804      	ldr	r0, [pc, #16]	; (29900 <connected+0x70>)
   298ee:	f01e fafb 	bl	47ee8 <k_work_submit>
   298f2:	e7e4      	b.n	298be <connected+0x2e>
   298f4:	20006ca2 	.word	0x20006ca2
   298f8:	20006ca1 	.word	0x20006ca1
   298fc:	20006caa 	.word	0x20006caa
   29900:	200002d8 	.word	0x200002d8

00029904 <zmk_ble_init>:
    }

    update_advertising();
}

static int zmk_ble_init(const struct device *_arg) {
   29904:	b510      	push	{r4, lr}
    int err = bt_enable(NULL);
   29906:	2000      	movs	r0, #0
   29908:	f004 fb10 	bl	2df2c <bt_enable>

    if (err) {
   2990c:	4604      	mov	r4, r0
   2990e:	b9c0      	cbnz	r0, 29942 <zmk_ble_init+0x3e>
        LOG_ERR("BLUETOOTH FAILED (%d)", err);
        return err;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   29910:	f002 fb5e 	bl	2bfd0 <settings_subsys_init>

    err = settings_register(&profiles_handler);
   29914:	480c      	ldr	r0, [pc, #48]	; (29948 <zmk_ble_init+0x44>)
   29916:	f002 fa99 	bl	2be4c <settings_register>
    if (err) {
   2991a:	4604      	mov	r4, r0
   2991c:	b988      	cbnz	r0, 29942 <zmk_ble_init+0x3e>
        LOG_ERR("Failed to setup the profile settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&ble_save_work, ble_save_profile_work);
   2991e:	490b      	ldr	r1, [pc, #44]	; (2994c <zmk_ble_init+0x48>)
   29920:	480b      	ldr	r0, [pc, #44]	; (29950 <zmk_ble_init+0x4c>)
   29922:	f026 ff85 	bl	50830 <k_work_init_delayable>

    settings_load_subtree("ble");
   29926:	480b      	ldr	r0, [pc, #44]	; (29954 <zmk_ble_init+0x50>)
   29928:	f002 fa3a 	bl	2bda0 <settings_load_subtree>
    settings_load_subtree("bt");
   2992c:	480a      	ldr	r0, [pc, #40]	; (29958 <zmk_ble_init+0x54>)
   2992e:	f002 fa37 	bl	2bda0 <settings_load_subtree>
            LOG_ERR("Failed to delete setting: %d", err);
        }
    }
#endif

    bt_conn_cb_register(&conn_callbacks);
   29932:	480a      	ldr	r0, [pc, #40]	; (2995c <zmk_ble_init+0x58>)
   29934:	f005 fff6 	bl	2f924 <bt_conn_cb_register>
    bt_conn_auth_cb_register(&zmk_ble_auth_cb_display);
   29938:	4809      	ldr	r0, [pc, #36]	; (29960 <zmk_ble_init+0x5c>)
   2993a:	f006 facf 	bl	2fedc <bt_conn_auth_cb_register>
    update_advertising();
   2993e:	f7ff ff2f 	bl	297a0 <update_advertising>

    zmk_ble_ready(0);

    return 0;
}
   29942:	4620      	mov	r0, r4
   29944:	bd10      	pop	{r4, pc}
   29946:	bf00      	nop
   29948:	200002c0 	.word	0x200002c0
   2994c:	0002952d 	.word	0x0002952d
   29950:	200012a8 	.word	0x200012a8
   29954:	00053749 	.word	0x00053749
   29958:	0005374d 	.word	0x0005374d
   2995c:	200002a0 	.word	0x200002a0
   29960:	200002f8 	.word	0x200002f8

00029964 <zmk_ble_clear_bonds>:
int zmk_ble_clear_bonds() {
   29964:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    if (bt_addr_le_cmp(&profiles[active_profile].peer, BT_ADDR_LE_ANY)) {
   29968:	4e12      	ldr	r6, [pc, #72]	; (299b4 <zmk_ble_clear_bonds+0x50>)
   2996a:	4f13      	ldr	r7, [pc, #76]	; (299b8 <zmk_ble_clear_bonds+0x54>)
   2996c:	7830      	ldrb	r0, [r6, #0]
   2996e:	2516      	movs	r5, #22
   29970:	f04f 080f 	mov.w	r8, #15
   29974:	fb15 8000 	smlabb	r0, r5, r0, r8
   29978:	2400      	movs	r4, #0
   2997a:	2207      	movs	r2, #7
   2997c:	4669      	mov	r1, sp
   2997e:	4438      	add	r0, r7
   29980:	9400      	str	r4, [sp, #0]
   29982:	f8cd 4003 	str.w	r4, [sp, #3]
   29986:	f021 ff70 	bl	4b86a <memcmp>
   2998a:	b168      	cbz	r0, 299a8 <zmk_ble_clear_bonds+0x44>
        bt_unpair(BT_ID_DEFAULT, &profiles[active_profile].peer);
   2998c:	7833      	ldrb	r3, [r6, #0]
   2998e:	fb15 8103 	smlabb	r1, r5, r3, r8
   29992:	4439      	add	r1, r7
   29994:	4620      	mov	r0, r4
   29996:	f004 f97b 	bl	2dc90 <bt_unpair>
        set_profile_address(active_profile, BT_ADDR_LE_ANY);
   2999a:	7830      	ldrb	r0, [r6, #0]
   2999c:	9402      	str	r4, [sp, #8]
   2999e:	a902      	add	r1, sp, #8
   299a0:	f8cd 400b 	str.w	r4, [sp, #11]
   299a4:	f7ff feae 	bl	29704 <set_profile_address>
    update_advertising();
   299a8:	f7ff fefa 	bl	297a0 <update_advertising>
};
   299ac:	2000      	movs	r0, #0
   299ae:	b004      	add	sp, #16
   299b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   299b4:	20006ca1 	.word	0x20006ca1
   299b8:	20006caa 	.word	0x20006caa

000299bc <zmk_ble_prof_select>:
    if (index >= ZMK_BLE_PROFILE_COUNT) {
   299bc:	2804      	cmp	r0, #4
int zmk_ble_prof_select(uint8_t index) {
   299be:	b508      	push	{r3, lr}
    if (index >= ZMK_BLE_PROFILE_COUNT) {
   299c0:	d810      	bhi.n	299e4 <zmk_ble_prof_select+0x28>
    if (active_profile == index) {
   299c2:	4b0a      	ldr	r3, [pc, #40]	; (299ec <zmk_ble_prof_select+0x30>)
   299c4:	781a      	ldrb	r2, [r3, #0]
   299c6:	4282      	cmp	r2, r0
   299c8:	d00a      	beq.n	299e0 <zmk_ble_prof_select+0x24>
    active_profile = index;
   299ca:	7018      	strb	r0, [r3, #0]
    return k_work_reschedule(&ble_save_work, K_MSEC(CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE));
   299cc:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   299d0:	2300      	movs	r3, #0
   299d2:	4807      	ldr	r0, [pc, #28]	; (299f0 <zmk_ble_prof_select+0x34>)
   299d4:	f01e fb24 	bl	48020 <k_work_reschedule>
    update_advertising();
   299d8:	f7ff fee2 	bl	297a0 <update_advertising>
    raise_profile_changed_event();
   299dc:	f7ff fd8e 	bl	294fc <raise_profile_changed_event>
        return 0;
   299e0:	2000      	movs	r0, #0
   299e2:	e001      	b.n	299e8 <zmk_ble_prof_select+0x2c>
        return -ERANGE;
   299e4:	f06f 0021 	mvn.w	r0, #33	; 0x21
};
   299e8:	bd08      	pop	{r3, pc}
   299ea:	bf00      	nop
   299ec:	20006ca1 	.word	0x20006ca1
   299f0:	200012a8 	.word	0x200012a8

000299f4 <zmk_ble_prof_next>:
    return zmk_ble_prof_select((active_profile + 1) % ZMK_BLE_PROFILE_COUNT);
   299f4:	4b05      	ldr	r3, [pc, #20]	; (29a0c <zmk_ble_prof_next+0x18>)
   299f6:	7818      	ldrb	r0, [r3, #0]
   299f8:	2305      	movs	r3, #5
   299fa:	3001      	adds	r0, #1
   299fc:	fbb0 f3f3 	udiv	r3, r0, r3
   29a00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   29a04:	1ac0      	subs	r0, r0, r3
   29a06:	b2c0      	uxtb	r0, r0
   29a08:	f7ff bfd8 	b.w	299bc <zmk_ble_prof_select>
   29a0c:	20006ca1 	.word	0x20006ca1

00029a10 <zmk_ble_prof_prev>:
    return zmk_ble_prof_select((active_profile + ZMK_BLE_PROFILE_COUNT - 1) %
   29a10:	4b05      	ldr	r3, [pc, #20]	; (29a28 <zmk_ble_prof_prev+0x18>)
   29a12:	7818      	ldrb	r0, [r3, #0]
   29a14:	2305      	movs	r3, #5
   29a16:	3004      	adds	r0, #4
   29a18:	fbb0 f3f3 	udiv	r3, r0, r3
   29a1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   29a20:	1ac0      	subs	r0, r0, r3
   29a22:	b2c0      	uxtb	r0, r0
   29a24:	f7ff bfca 	b.w	299bc <zmk_ble_prof_select>
   29a28:	20006ca1 	.word	0x20006ca1

00029a2c <zmk_ble_active_profile_addr>:
bt_addr_le_t *zmk_ble_active_profile_addr() { return &profiles[active_profile].peer; }
   29a2c:	4b03      	ldr	r3, [pc, #12]	; (29a3c <zmk_ble_active_profile_addr+0x10>)
   29a2e:	4804      	ldr	r0, [pc, #16]	; (29a40 <zmk_ble_active_profile_addr+0x14>)
   29a30:	781b      	ldrb	r3, [r3, #0]
   29a32:	2216      	movs	r2, #22
   29a34:	fb02 0003 	mla	r0, r2, r3, r0
   29a38:	300f      	adds	r0, #15
   29a3a:	4770      	bx	lr
   29a3c:	20006ca1 	.word	0x20006ca1
   29a40:	20006caa 	.word	0x20006caa

00029a44 <zmk_ble_set_peripheral_addr>:
void zmk_ble_set_peripheral_addr(bt_addr_le_t *addr) {
   29a44:	b510      	push	{r4, lr}
    memcpy(&peripheral_addr, addr, sizeof(bt_addr_le_t));
   29a46:	4601      	mov	r1, r0
void zmk_ble_set_peripheral_addr(bt_addr_le_t *addr) {
   29a48:	4604      	mov	r4, r0
    memcpy(&peripheral_addr, addr, sizeof(bt_addr_le_t));
   29a4a:	2207      	movs	r2, #7
   29a4c:	4804      	ldr	r0, [pc, #16]	; (29a60 <zmk_ble_set_peripheral_addr+0x1c>)
   29a4e:	f021 ff1c 	bl	4b88a <memcpy>
    settings_save_one("ble/peripheral_address", addr, sizeof(bt_addr_le_t));
   29a52:	4621      	mov	r1, r4
   29a54:	4803      	ldr	r0, [pc, #12]	; (29a64 <zmk_ble_set_peripheral_addr+0x20>)
}
   29a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    settings_save_one("ble/peripheral_address", addr, sizeof(bt_addr_le_t));
   29a5a:	2207      	movs	r2, #7
   29a5c:	f002 b966 	b.w	2bd2c <settings_save_one>
   29a60:	20006ca3 	.word	0x20006ca3
   29a64:	00053750 	.word	0x00053750

00029a68 <read_hids_report_map>:
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
                             sizeof(struct hids_report));
}

static ssize_t read_hids_report_map(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                    void *buf, uint16_t len, uint16_t offset) {
   29a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, zmk_hid_report_desc,
   29a6a:	244c      	movs	r4, #76	; 0x4c
   29a6c:	9402      	str	r4, [sp, #8]
   29a6e:	4c04      	ldr	r4, [pc, #16]	; (29a80 <read_hids_report_map+0x18>)
   29a70:	9401      	str	r4, [sp, #4]
   29a72:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   29a76:	9400      	str	r4, [sp, #0]
   29a78:	f024 fb0d 	bl	4e096 <bt_gatt_attr_read>
                             sizeof(zmk_hid_report_desc));
}
   29a7c:	b004      	add	sp, #16
   29a7e:	bd10      	pop	{r4, pc}
   29a80:	0005378e 	.word	0x0005378e

00029a84 <zmk_hog_init>:
    k_work_submit_to_queue(&hog_work_q, &hog_consumer_work);

    return 0;
};

int zmk_hog_init(const struct device *_arg) {
   29a84:	b507      	push	{r0, r1, r2, lr}
    static const struct k_work_queue_config queue_config = {.name = "HID Over GATT Send Work"};
    k_work_queue_start(&hog_work_q, hog_q_stack, K_THREAD_STACK_SIZEOF(hog_q_stack),
   29a86:	4b06      	ldr	r3, [pc, #24]	; (29aa0 <zmk_hog_init+0x1c>)
   29a88:	9300      	str	r3, [sp, #0]
   29a8a:	4906      	ldr	r1, [pc, #24]	; (29aa4 <zmk_hog_init+0x20>)
   29a8c:	4806      	ldr	r0, [pc, #24]	; (29aa8 <zmk_hog_init+0x24>)
   29a8e:	2305      	movs	r3, #5
   29a90:	f44f 7200 	mov.w	r2, #512	; 0x200
   29a94:	f01e fa2e 	bl	47ef4 <k_work_queue_start>
                       CONFIG_ZMK_BLE_THREAD_PRIORITY, &queue_config);

    return 0;
}
   29a98:	2000      	movs	r0, #0
   29a9a:	b003      	add	sp, #12
   29a9c:	f85d fb04 	ldr.w	pc, [sp], #4
   29aa0:	00051d60 	.word	0x00051d60
   29aa4:	20006df0 	.word	0x20006df0
   29aa8:	200012d8 	.word	0x200012d8

00029aac <send_keyboard_report_callback>:
void send_keyboard_report_callback(struct k_work *work) {
   29aac:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   29aae:	4e13      	ldr	r6, [pc, #76]	; (29afc <send_keyboard_report_callback+0x50>)
        struct bt_gatt_notify_params notify_params = {
   29ab0:	4f13      	ldr	r7, [pc, #76]	; (29b00 <send_keyboard_report_callback+0x54>)
void send_keyboard_report_callback(struct k_work *work) {
   29ab2:	b089      	sub	sp, #36	; 0x24
   29ab4:	2200      	movs	r2, #0
   29ab6:	2300      	movs	r3, #0
   29ab8:	4669      	mov	r1, sp
   29aba:	4630      	mov	r0, r6
   29abc:	f01d ff56 	bl	4796c <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_keyboard_msgq, &report, K_NO_WAIT) == 0) {
   29ac0:	4605      	mov	r5, r0
   29ac2:	b108      	cbz	r0, 29ac8 <send_keyboard_report_callback+0x1c>
}
   29ac4:	b009      	add	sp, #36	; 0x24
   29ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        struct bt_conn *conn = destination_connection();
   29ac8:	f01f fc8b 	bl	493e2 <destination_connection>
        if (conn == NULL) {
   29acc:	4604      	mov	r4, r0
   29ace:	2800      	cmp	r0, #0
   29ad0:	d0f8      	beq.n	29ac4 <send_keyboard_report_callback+0x18>
        struct bt_gatt_notify_params notify_params = {
   29ad2:	2218      	movs	r2, #24
   29ad4:	4629      	mov	r1, r5
   29ad6:	a802      	add	r0, sp, #8
   29ad8:	f021 fee2 	bl	4b8a0 <memset>
   29adc:	2308      	movs	r3, #8
        int err = bt_gatt_notify_cb(conn, &notify_params);
   29ade:	eb0d 0103 	add.w	r1, sp, r3
   29ae2:	4620      	mov	r0, r4
        struct bt_gatt_notify_params notify_params = {
   29ae4:	9703      	str	r7, [sp, #12]
   29ae6:	f8cd d010 	str.w	sp, [sp, #16]
   29aea:	f8ad 3014 	strh.w	r3, [sp, #20]
        int err = bt_gatt_notify_cb(conn, &notify_params);
   29aee:	f007 ff03 	bl	318f8 <bt_gatt_notify_cb>
        bt_conn_unref(conn);
   29af2:	4620      	mov	r0, r4
   29af4:	f022 ff02 	bl	4c8fc <bt_conn_unref>
   29af8:	e7dc      	b.n	29ab4 <send_keyboard_report_callback+0x8>
   29afa:	bf00      	nop
   29afc:	20000f4c 	.word	0x20000f4c
   29b00:	00051c98 	.word	0x00051c98

00029b04 <send_consumer_report_callback>:
void send_consumer_report_callback(struct k_work *work) {
   29b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b08:	4f13      	ldr	r7, [pc, #76]	; (29b58 <send_consumer_report_callback+0x54>)
        struct bt_gatt_notify_params notify_params = {
   29b0a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 29b5c <send_consumer_report_callback+0x58>
void send_consumer_report_callback(struct k_work *work) {
   29b0e:	b08a      	sub	sp, #40	; 0x28
   29b10:	ae01      	add	r6, sp, #4
   29b12:	2200      	movs	r2, #0
   29b14:	2300      	movs	r3, #0
   29b16:	4631      	mov	r1, r6
   29b18:	4638      	mov	r0, r7
   29b1a:	f01d ff27 	bl	4796c <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_consumer_msgq, &report, K_NO_WAIT) == 0) {
   29b1e:	4605      	mov	r5, r0
   29b20:	b110      	cbz	r0, 29b28 <send_consumer_report_callback+0x24>
};
   29b22:	b00a      	add	sp, #40	; 0x28
   29b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        struct bt_conn *conn = destination_connection();
   29b28:	f01f fc5b 	bl	493e2 <destination_connection>
        if (conn == NULL) {
   29b2c:	4604      	mov	r4, r0
   29b2e:	2800      	cmp	r0, #0
   29b30:	d0f7      	beq.n	29b22 <send_consumer_report_callback+0x1e>
        struct bt_gatt_notify_params notify_params = {
   29b32:	2218      	movs	r2, #24
   29b34:	4629      	mov	r1, r5
   29b36:	a804      	add	r0, sp, #16
   29b38:	f021 feb2 	bl	4b8a0 <memset>
   29b3c:	230c      	movs	r3, #12
        int err = bt_gatt_notify_cb(conn, &notify_params);
   29b3e:	a904      	add	r1, sp, #16
   29b40:	4620      	mov	r0, r4
        struct bt_gatt_notify_params notify_params = {
   29b42:	e9cd 8605 	strd	r8, r6, [sp, #20]
   29b46:	f8ad 301c 	strh.w	r3, [sp, #28]
        int err = bt_gatt_notify_cb(conn, &notify_params);
   29b4a:	f007 fed5 	bl	318f8 <bt_gatt_notify_cb>
        bt_conn_unref(conn);
   29b4e:	4620      	mov	r0, r4
   29b50:	f022 fed4 	bl	4c8fc <bt_conn_unref>
   29b54:	e7dd      	b.n	29b12 <send_consumer_report_callback+0xe>
   29b56:	bf00      	nop
   29b58:	20000f1c 	.word	0x20000f1c
   29b5c:	00051cfc 	.word	0x00051cfc

00029b60 <zmk_hog_send_keyboard_report>:
int zmk_hog_send_keyboard_report(struct zmk_hid_keyboard_report_body *report) {
   29b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29b62:	4605      	mov	r5, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
   29b64:	f640 42cd 	movw	r2, #3277	; 0xccd
   29b68:	4601      	mov	r1, r0
   29b6a:	2300      	movs	r3, #0
   29b6c:	480c      	ldr	r0, [pc, #48]	; (29ba0 <zmk_hog_send_keyboard_report+0x40>)
   29b6e:	f01d fea7 	bl	478c0 <z_impl_k_msgq_put>
    if (err) {
   29b72:	4604      	mov	r4, r0
   29b74:	b178      	cbz	r0, 29b96 <zmk_hog_send_keyboard_report+0x36>
        switch (err) {
   29b76:	f110 0f0b 	cmn.w	r0, #11
   29b7a:	d109      	bne.n	29b90 <zmk_hog_send_keyboard_report+0x30>
	return z_impl_k_msgq_get(msgq, data, timeout);
   29b7c:	2200      	movs	r2, #0
   29b7e:	2300      	movs	r3, #0
   29b80:	4669      	mov	r1, sp
   29b82:	4807      	ldr	r0, [pc, #28]	; (29ba0 <zmk_hog_send_keyboard_report+0x40>)
   29b84:	f01d fef2 	bl	4796c <z_impl_k_msgq_get>
            return zmk_hog_send_keyboard_report(report);
   29b88:	4628      	mov	r0, r5
   29b8a:	f7ff ffe9 	bl	29b60 <zmk_hog_send_keyboard_report>
   29b8e:	4604      	mov	r4, r0
};
   29b90:	4620      	mov	r0, r4
   29b92:	b003      	add	sp, #12
   29b94:	bd30      	pop	{r4, r5, pc}
    k_work_submit_to_queue(&hog_work_q, &hog_keyboard_work);
   29b96:	4903      	ldr	r1, [pc, #12]	; (29ba4 <zmk_hog_send_keyboard_report+0x44>)
   29b98:	4803      	ldr	r0, [pc, #12]	; (29ba8 <zmk_hog_send_keyboard_report+0x48>)
   29b9a:	f026 fe2c 	bl	507f6 <k_work_submit_to_queue>
    return 0;
   29b9e:	e7f7      	b.n	29b90 <zmk_hog_send_keyboard_report+0x30>
   29ba0:	20000f4c 	.word	0x20000f4c
   29ba4:	200003f0 	.word	0x200003f0
   29ba8:	200012d8 	.word	0x200012d8

00029bac <zmk_hog_send_consumer_report>:
int zmk_hog_send_consumer_report(struct zmk_hid_consumer_report_body *report) {
   29bac:	b530      	push	{r4, r5, lr}
   29bae:	4605      	mov	r5, r0
   29bb0:	b085      	sub	sp, #20
	return z_impl_k_msgq_put(msgq, data, timeout);
   29bb2:	f640 42cd 	movw	r2, #3277	; 0xccd
   29bb6:	4601      	mov	r1, r0
   29bb8:	2300      	movs	r3, #0
   29bba:	480d      	ldr	r0, [pc, #52]	; (29bf0 <zmk_hog_send_consumer_report+0x44>)
   29bbc:	f01d fe80 	bl	478c0 <z_impl_k_msgq_put>
    if (err) {
   29bc0:	4604      	mov	r4, r0
   29bc2:	b178      	cbz	r0, 29be4 <zmk_hog_send_consumer_report+0x38>
        switch (err) {
   29bc4:	f110 0f0b 	cmn.w	r0, #11
   29bc8:	d109      	bne.n	29bde <zmk_hog_send_consumer_report+0x32>
	return z_impl_k_msgq_get(msgq, data, timeout);
   29bca:	2200      	movs	r2, #0
   29bcc:	2300      	movs	r3, #0
   29bce:	a901      	add	r1, sp, #4
   29bd0:	4807      	ldr	r0, [pc, #28]	; (29bf0 <zmk_hog_send_consumer_report+0x44>)
   29bd2:	f01d fecb 	bl	4796c <z_impl_k_msgq_get>
            return zmk_hog_send_consumer_report(report);
   29bd6:	4628      	mov	r0, r5
   29bd8:	f7ff ffe8 	bl	29bac <zmk_hog_send_consumer_report>
   29bdc:	4604      	mov	r4, r0
};
   29bde:	4620      	mov	r0, r4
   29be0:	b005      	add	sp, #20
   29be2:	bd30      	pop	{r4, r5, pc}
    k_work_submit_to_queue(&hog_work_q, &hog_consumer_work);
   29be4:	4903      	ldr	r1, [pc, #12]	; (29bf4 <zmk_hog_send_consumer_report+0x48>)
   29be6:	4804      	ldr	r0, [pc, #16]	; (29bf8 <zmk_hog_send_consumer_report+0x4c>)
   29be8:	f026 fe05 	bl	507f6 <k_work_submit_to_queue>
    return 0;
   29bec:	e7f7      	b.n	29bde <zmk_hog_send_consumer_report+0x32>
   29bee:	bf00      	nop
   29bf0:	20000f1c 	.word	0x20000f1c
   29bf4:	200003e0 	.word	0x200003e0
   29bf8:	200012d8 	.word	0x200012d8

00029bfc <new_zmk_battery_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/battery_state_changed.h>

   29bfc:	b510      	push	{r4, lr}
   29bfe:	4604      	mov	r4, r0
   29c00:	200c      	movs	r0, #12
   29c02:	f027 f969 	bl	50ed8 <k_malloc>
   29c06:	4a02      	ldr	r2, [pc, #8]	; (29c10 <new_zmk_battery_state_changed+0x14>)
   29c08:	6002      	str	r2, [r0, #0]
   29c0a:	7204      	strb	r4, [r0, #8]
   29c0c:	bd10      	pop	{r4, pc}
   29c0e:	bf00      	nop
   29c10:	00051d68 	.word	0x00051d68

00029c14 <zmk_battery_timer>:
    }
}

K_WORK_DEFINE(battery_work, zmk_battery_work);

static void zmk_battery_timer(struct k_timer *timer) { k_work_submit(&battery_work); }
   29c14:	4801      	ldr	r0, [pc, #4]	; (29c1c <zmk_battery_timer+0x8>)
   29c16:	f01e b967 	b.w	47ee8 <k_work_submit>
   29c1a:	bf00      	nop
   29c1c:	20000400 	.word	0x20000400

00029c20 <zmk_battery_update.constprop.0>:
static int zmk_battery_update(const struct device *battery) {
   29c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   29c22:	4c0f      	ldr	r4, [pc, #60]	; (29c60 <zmk_battery_update.constprop.0+0x40>)
   29c24:	68a5      	ldr	r5, [r4, #8]
   29c26:	212c      	movs	r1, #44	; 0x2c
   29c28:	68eb      	ldr	r3, [r5, #12]
   29c2a:	4620      	mov	r0, r4
   29c2c:	4798      	blx	r3
    if (rc != 0) {
   29c2e:	b9a0      	cbnz	r0, 29c5a <zmk_battery_update.constprop.0+0x3a>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   29c30:	212c      	movs	r1, #44	; 0x2c
   29c32:	692b      	ldr	r3, [r5, #16]
   29c34:	466a      	mov	r2, sp
   29c36:	4620      	mov	r0, r4
   29c38:	4798      	blx	r3
    if (rc != 0) {
   29c3a:	b970      	cbnz	r0, 29c5a <zmk_battery_update.constprop.0+0x3a>
    if (last_state_of_charge != state_of_charge.val1) {
   29c3c:	4c09      	ldr	r4, [pc, #36]	; (29c64 <zmk_battery_update.constprop.0+0x44>)
   29c3e:	9b00      	ldr	r3, [sp, #0]
   29c40:	7822      	ldrb	r2, [r4, #0]
   29c42:	429a      	cmp	r2, r3
   29c44:	d009      	beq.n	29c5a <zmk_battery_update.constprop.0+0x3a>
        last_state_of_charge = state_of_charge.val1;
   29c46:	b2d8      	uxtb	r0, r3
   29c48:	7020      	strb	r0, [r4, #0]
        rc = bt_bas_set_battery_level(last_state_of_charge);
   29c4a:	f000 ff6f 	bl	2ab2c <bt_bas_set_battery_level>
        if (rc != 0) {
   29c4e:	b920      	cbnz	r0, 29c5a <zmk_battery_update.constprop.0+0x3a>
        rc = ZMK_EVENT_RAISE(new_zmk_battery_state_changed(
   29c50:	7820      	ldrb	r0, [r4, #0]
   29c52:	f7ff ffd3 	bl	29bfc <new_zmk_battery_state_changed>
   29c56:	f01f f950 	bl	48efa <zmk_event_manager_raise>
}
   29c5a:	b003      	add	sp, #12
   29c5c:	bd30      	pop	{r4, r5, pc}
   29c5e:	bf00      	nop
   29c60:	000510c8 	.word	0x000510c8
   29c64:	20006d19 	.word	0x20006d19

00029c68 <zmk_battery_init>:

K_TIMER_DEFINE(battery_timer, zmk_battery_timer, NULL);

static int zmk_battery_init(const struct device *_arg) {
   29c68:	b513      	push	{r0, r1, r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   29c6a:	480b      	ldr	r0, [pc, #44]	; (29c98 <zmk_battery_init+0x30>)
   29c6c:	f026 fb8b 	bl	50386 <z_device_is_ready>
    }

    LOG_WRN("Finding battery device labeled BATTERY is deprecated. Use zmk,battery chosen node.");
#endif

    if (!device_is_ready(battery)) {
   29c70:	b170      	cbz	r0, 29c90 <zmk_battery_init+0x28>
        LOG_ERR("Battery device \"%s\" is not ready", battery->name);
        return -ENODEV;
    }

    int rc = zmk_battery_update(battery);
   29c72:	f7ff ffd5 	bl	29c20 <zmk_battery_update.constprop.0>

    if (rc != 0) {
   29c76:	4604      	mov	r4, r0
   29c78:	b938      	cbnz	r0, 29c8a <zmk_battery_init+0x22>
        LOG_DBG("Failed to update battery value: %d.", rc);
        return rc;
    }

    k_timer_start(&battery_timer, K_MINUTES(1), K_SECONDS(CONFIG_ZMK_BATTERY_REPORT_INTERVAL));
   29c7a:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   29c7e:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   29c80:	4806      	ldr	r0, [pc, #24]	; (29c9c <zmk_battery_init+0x34>)
   29c82:	e9cd 2300 	strd	r2, r3, [sp]
   29c86:	f01e fec7 	bl	48a18 <z_impl_k_timer_start>

    return 0;
}
   29c8a:	4620      	mov	r0, r4
   29c8c:	b002      	add	sp, #8
   29c8e:	bd10      	pop	{r4, pc}
        return -ENODEV;
   29c90:	f06f 0412 	mvn.w	r4, #18
   29c94:	e7f9      	b.n	29c8a <zmk_battery_init+0x22>
   29c96:	bf00      	nop
   29c98:	000510c8 	.word	0x000510c8
   29c9c:	20000e08 	.word	0x20000e08

00029ca0 <start_scan>:
    if (type == BT_GAP_ADV_TYPE_ADV_IND || type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
        bt_data_parse(ad, split_central_eir_found, (void *)addr);
    }
}

static int start_scan(void) {
   29ca0:	b530      	push	{r4, r5, lr}
    int err;

    err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, split_central_device_found);
   29ca2:	4d06      	ldr	r5, [pc, #24]	; (29cbc <start_scan+0x1c>)
   29ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
static int start_scan(void) {
   29ca6:	b087      	sub	sp, #28
    err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, split_central_device_found);
   29ca8:	ac01      	add	r4, sp, #4
   29caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   29cac:	682b      	ldr	r3, [r5, #0]
   29cae:	4904      	ldr	r1, [pc, #16]	; (29cc0 <start_scan+0x20>)
   29cb0:	6023      	str	r3, [r4, #0]
   29cb2:	a801      	add	r0, sp, #4
   29cb4:	f005 f948 	bl	2ef48 <bt_le_scan_start>
        return err;
    }

    LOG_DBG("Scanning successfully started");
    return 0;
}
   29cb8:	b007      	add	sp, #28
   29cba:	bd30      	pop	{r4, r5, pc}
   29cbc:	00051494 	.word	0x00051494
   29cc0:	00029dcd 	.word	0x00029dcd

00029cc4 <zmk_split_bt_central_init>:

    struct zmk_split_run_behavior_payload_wrapper wrapper = {.source = source, .payload = payload};
    return split_bt_invoke_behavior_payload(wrapper);
}

int zmk_split_bt_central_init(const struct device *_arg) {
   29cc4:	b507      	push	{r0, r1, r2, lr}
    k_work_queue_start(&split_central_split_run_q, split_central_split_run_q_stack,
   29cc6:	2300      	movs	r3, #0
   29cc8:	4907      	ldr	r1, [pc, #28]	; (29ce8 <zmk_split_bt_central_init+0x24>)
   29cca:	9300      	str	r3, [sp, #0]
   29ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
   29cd0:	2305      	movs	r3, #5
   29cd2:	4806      	ldr	r0, [pc, #24]	; (29cec <zmk_split_bt_central_init+0x28>)
   29cd4:	f01e f90e 	bl	47ef4 <k_work_queue_start>
                       K_THREAD_STACK_SIZEOF(split_central_split_run_q_stack),
                       CONFIG_ZMK_BLE_THREAD_PRIORITY, NULL);
    bt_conn_cb_register(&conn_callbacks);
   29cd8:	4805      	ldr	r0, [pc, #20]	; (29cf0 <zmk_split_bt_central_init+0x2c>)
   29cda:	f005 fe23 	bl	2f924 <bt_conn_cb_register>

    return start_scan();
}
   29cde:	b003      	add	sp, #12
   29ce0:	f85d eb04 	ldr.w	lr, [sp], #4
    return start_scan();
   29ce4:	f7ff bfdc 	b.w	29ca0 <start_scan>
   29ce8:	20006ff0 	.word	0x20006ff0
   29cec:	20001378 	.word	0x20001378
   29cf0:	20000410 	.word	0x20000410

00029cf4 <split_bt_invoke_behavior_payload>:
split_bt_invoke_behavior_payload(struct zmk_split_run_behavior_payload_wrapper payload_wrapper) {
   29cf4:	b084      	sub	sp, #16
   29cf6:	b510      	push	{r4, lr}
   29cf8:	b088      	sub	sp, #32
   29cfa:	ac0a      	add	r4, sp, #40	; 0x28
   29cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_k_msgq_put(msgq, data, timeout);
   29d00:	4811      	ldr	r0, [pc, #68]	; (29d48 <split_bt_invoke_behavior_payload+0x54>)
   29d02:	4621      	mov	r1, r4
   29d04:	f640 42cd 	movw	r2, #3277	; 0xccd
   29d08:	2300      	movs	r3, #0
   29d0a:	f01d fdd9 	bl	478c0 <z_impl_k_msgq_put>
    if (err) {
   29d0e:	4604      	mov	r4, r0
   29d10:	b1a8      	cbz	r0, 29d3e <split_bt_invoke_behavior_payload+0x4a>
        switch (err) {
   29d12:	f110 0f0b 	cmn.w	r0, #11
   29d16:	d10c      	bne.n	29d32 <split_bt_invoke_behavior_payload+0x3e>
	return z_impl_k_msgq_get(msgq, data, timeout);
   29d18:	2200      	movs	r2, #0
   29d1a:	2300      	movs	r3, #0
   29d1c:	a903      	add	r1, sp, #12
   29d1e:	480a      	ldr	r0, [pc, #40]	; (29d48 <split_bt_invoke_behavior_payload+0x54>)
   29d20:	f01d fe24 	bl	4796c <z_impl_k_msgq_get>
            return split_bt_invoke_behavior_payload(payload_wrapper);
   29d24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29d26:	9300      	str	r3, [sp, #0]
   29d28:	ab0a      	add	r3, sp, #40	; 0x28
   29d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   29d2c:	f7ff ffe2 	bl	29cf4 <split_bt_invoke_behavior_payload>
   29d30:	4604      	mov	r4, r0
};
   29d32:	4620      	mov	r0, r4
   29d34:	b008      	add	sp, #32
   29d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29d3a:	b004      	add	sp, #16
   29d3c:	4770      	bx	lr
    k_work_submit_to_queue(&split_central_split_run_q, &split_central_split_run_work);
   29d3e:	4903      	ldr	r1, [pc, #12]	; (29d4c <split_bt_invoke_behavior_payload+0x58>)
   29d40:	4803      	ldr	r0, [pc, #12]	; (29d50 <split_bt_invoke_behavior_payload+0x5c>)
   29d42:	f026 fd58 	bl	507f6 <k_work_submit_to_queue>
    return 0;
   29d46:	e7f4      	b.n	29d32 <split_bt_invoke_behavior_payload+0x3e>
   29d48:	20000fac 	.word	0x20000fac
   29d4c:	20000440 	.word	0x20000440
   29d50:	20001378 	.word	0x20001378

00029d54 <bt_addr_le_to_str.constprop.0.isra.0>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   29d54:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
   29d56:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   29d58:	b08a      	sub	sp, #40	; 0x28
   29d5a:	4604      	mov	r4, r0
   29d5c:	460e      	mov	r6, r1
   29d5e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   29d60:	2b03      	cmp	r3, #3
   29d62:	d820      	bhi.n	29da6 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   29d64:	e8df f003 	tbb	[pc, r3]
   29d68:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
   29d6c:	4911      	ldr	r1, [pc, #68]	; (29db4 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		strcpy(type, "random");
   29d6e:	4628      	mov	r0, r5
   29d70:	f021 fd4d 	bl	4b80e <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   29d74:	7863      	ldrb	r3, [r4, #1]
   29d76:	9304      	str	r3, [sp, #16]
   29d78:	78a3      	ldrb	r3, [r4, #2]
   29d7a:	9303      	str	r3, [sp, #12]
   29d7c:	78e3      	ldrb	r3, [r4, #3]
   29d7e:	9302      	str	r3, [sp, #8]
   29d80:	7923      	ldrb	r3, [r4, #4]
   29d82:	9301      	str	r3, [sp, #4]
   29d84:	7963      	ldrb	r3, [r4, #5]
   29d86:	9300      	str	r3, [sp, #0]
   29d88:	4a0b      	ldr	r2, [pc, #44]	; (29db8 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   29d8a:	79a3      	ldrb	r3, [r4, #6]
   29d8c:	9505      	str	r5, [sp, #20]
   29d8e:	211e      	movs	r1, #30
   29d90:	4630      	mov	r0, r6
   29d92:	f01f fc7c 	bl	4968e <snprintk>
}
   29d96:	b00a      	add	sp, #40	; 0x28
   29d98:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   29d9a:	4908      	ldr	r1, [pc, #32]	; (29dbc <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   29d9c:	e7e7      	b.n	29d6e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   29d9e:	4908      	ldr	r1, [pc, #32]	; (29dc0 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   29da0:	e7e5      	b.n	29d6e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   29da2:	4908      	ldr	r1, [pc, #32]	; (29dc4 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   29da4:	e7e3      	b.n	29d6e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   29da6:	4a08      	ldr	r2, [pc, #32]	; (29dc8 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   29da8:	210a      	movs	r1, #10
   29daa:	4628      	mov	r0, r5
   29dac:	f01f fc6f 	bl	4968e <snprintk>
		break;
   29db0:	e7e0      	b.n	29d74 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   29db2:	bf00      	nop
   29db4:	000536e4 	.word	0x000536e4
   29db8:	0005370d 	.word	0x0005370d
   29dbc:	000536eb 	.word	0x000536eb
   29dc0:	000536f2 	.word	0x000536f2
   29dc4:	000536fc 	.word	0x000536fc
   29dc8:	00053706 	.word	0x00053706

00029dcc <split_central_device_found>:
                                       struct net_buf_simple *ad) {
   29dcc:	b570      	push	{r4, r5, r6, lr}
   29dce:	b088      	sub	sp, #32
   29dd0:	4616      	mov	r6, r2
    bt_addr_le_to_str(addr, dev, sizeof(dev));
   29dd2:	4669      	mov	r1, sp
                                       struct net_buf_simple *ad) {
   29dd4:	4605      	mov	r5, r0
   29dd6:	461c      	mov	r4, r3
    bt_addr_le_to_str(addr, dev, sizeof(dev));
   29dd8:	f7ff ffbc 	bl	29d54 <bt_addr_le_to_str.constprop.0.isra.0>
    if (type == BT_GAP_ADV_TYPE_ADV_IND || type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
   29ddc:	2e01      	cmp	r6, #1
   29dde:	d804      	bhi.n	29dea <split_central_device_found+0x1e>
        bt_data_parse(ad, split_central_eir_found, (void *)addr);
   29de0:	4903      	ldr	r1, [pc, #12]	; (29df0 <split_central_device_found+0x24>)
   29de2:	462a      	mov	r2, r5
   29de4:	4620      	mov	r0, r4
   29de6:	f022 fa1a 	bl	4c21e <bt_data_parse>
}
   29dea:	b008      	add	sp, #32
   29dec:	bd70      	pop	{r4, r5, r6, pc}
   29dee:	bf00      	nop
   29df0:	0002a205 	.word	0x0002a205

00029df4 <peripheral_event_work_callback>:
void peripheral_event_work_callback(struct k_work *work) {
   29df4:	b530      	push	{r4, r5, lr}
   29df6:	4d0c      	ldr	r5, [pc, #48]	; (29e28 <peripheral_event_work_callback+0x34>)
   29df8:	b089      	sub	sp, #36	; 0x24
   29dfa:	ac02      	add	r4, sp, #8
   29dfc:	2200      	movs	r2, #0
   29dfe:	2300      	movs	r3, #0
   29e00:	4621      	mov	r1, r4
   29e02:	4628      	mov	r0, r5
   29e04:	f01d fdb2 	bl	4796c <z_impl_k_msgq_get>
    while (k_msgq_get(&peripheral_event_msgq, &ev, K_NO_WAIT) == 0) {
   29e08:	b108      	cbz	r0, 29e0e <peripheral_event_work_callback+0x1a>
}
   29e0a:	b009      	add	sp, #36	; 0x24
   29e0c:	bd30      	pop	{r4, r5, pc}
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(ev));
   29e0e:	ab08      	add	r3, sp, #32
   29e10:	e913 0003 	ldmdb	r3, {r0, r1}
   29e14:	e88d 0003 	stmia.w	sp, {r0, r1}
   29e18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29e1c:	f7ff f850 	bl	28ec0 <new_zmk_position_state_changed>
   29e20:	f01f f86b 	bl	48efa <zmk_event_manager_raise>
   29e24:	e7ea      	b.n	29dfc <peripheral_event_work_callback+0x8>
   29e26:	bf00      	nop
   29e28:	20000eec 	.word	0x20000eec

00029e2c <split_central_split_run_callback>:
void split_central_split_run_callback(struct k_work *work) {
   29e2c:	b570      	push	{r4, r5, r6, lr}
   29e2e:	4e10      	ldr	r6, [pc, #64]	; (29e70 <split_central_split_run_callback+0x44>)
        if (peripherals[payload_wrapper.source].state != PERIPHERAL_SLOT_STATE_CONNECTED) {
   29e30:	4c10      	ldr	r4, [pc, #64]	; (29e74 <split_central_split_run_callback+0x48>)
void split_central_split_run_callback(struct k_work *work) {
   29e32:	b08a      	sub	sp, #40	; 0x28
   29e34:	2200      	movs	r2, #0
   29e36:	2300      	movs	r3, #0
   29e38:	a905      	add	r1, sp, #20
   29e3a:	4630      	mov	r0, r6
   29e3c:	f01d fd96 	bl	4796c <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_split_central_split_run_msgq, &payload_wrapper, K_NO_WAIT) == 0) {
   29e40:	b108      	cbz	r0, 29e46 <split_central_split_run_callback+0x1a>
}
   29e42:	b00a      	add	sp, #40	; 0x28
   29e44:	bd70      	pop	{r4, r5, r6, pc}
        if (peripherals[payload_wrapper.source].state != PERIPHERAL_SLOT_STATE_CONNECTED) {
   29e46:	f89d 3014 	ldrb.w	r3, [sp, #20]
   29e4a:	227c      	movs	r2, #124	; 0x7c
   29e4c:	4353      	muls	r3, r2
   29e4e:	18e5      	adds	r5, r4, r3
   29e50:	5ce3      	ldrb	r3, [r4, r3]
   29e52:	2b02      	cmp	r3, #2
   29e54:	d1ee      	bne.n	29e34 <split_central_split_run_callback+0x8>
 */
static inline int bt_gatt_write_without_response(struct bt_conn *conn,
						 uint16_t handle, const void *data,
						 uint16_t length, bool sign)
{
	return bt_gatt_write_without_response_cb(conn, handle, data, length,
   29e56:	e9cd 0001 	strd	r0, r0, [sp, #4]
   29e5a:	2301      	movs	r3, #1
   29e5c:	9300      	str	r3, [sp, #0]
   29e5e:	f8b5 1058 	ldrh.w	r1, [r5, #88]	; 0x58
   29e62:	6868      	ldr	r0, [r5, #4]
   29e64:	2313      	movs	r3, #19
   29e66:	f10d 0215 	add.w	r2, sp, #21
   29e6a:	f024 fbb0 	bl	4e5ce <bt_gatt_write_without_response_cb>
   29e6e:	e7e1      	b.n	29e34 <split_central_split_run_callback+0x8>
   29e70:	20000fac 	.word	0x20000fac
   29e74:	20003c68 	.word	0x20003c68

00029e78 <peripheral_slot_index_for_conn>:
        if (peripherals[i].conn == conn) {
   29e78:	4b03      	ldr	r3, [pc, #12]	; (29e88 <peripheral_slot_index_for_conn+0x10>)
   29e7a:	685b      	ldr	r3, [r3, #4]
    return -EINVAL;
   29e7c:	4283      	cmp	r3, r0
}
   29e7e:	bf14      	ite	ne
   29e80:	f06f 0015 	mvnne.w	r0, #21
   29e84:	2000      	moveq	r0, #0
   29e86:	4770      	bx	lr
   29e88:	20003c68 	.word	0x20003c68

00029e8c <peripheral_slot_for_conn>:
struct peripheral_slot *peripheral_slot_for_conn(struct bt_conn *conn) {
   29e8c:	b508      	push	{r3, lr}
    int idx = peripheral_slot_index_for_conn(conn);
   29e8e:	f7ff fff3 	bl	29e78 <peripheral_slot_index_for_conn>
    if (idx < 0) {
   29e92:	1e03      	subs	r3, r0, #0
    return &peripherals[idx];
   29e94:	bfa3      	ittte	ge
   29e96:	4803      	ldrge	r0, [pc, #12]	; (29ea4 <peripheral_slot_for_conn+0x18>)
   29e98:	227c      	movge	r2, #124	; 0x7c
   29e9a:	fb02 0003 	mlage	r0, r2, r3, r0
        return NULL;
   29e9e:	2000      	movlt	r0, #0
}
   29ea0:	bd08      	pop	{r3, pc}
   29ea2:	bf00      	nop
   29ea4:	20003c68 	.word	0x20003c68

00029ea8 <split_central_process_connection>:
static void split_central_process_connection(struct bt_conn *conn) {
   29ea8:	b510      	push	{r4, lr}
    err = bt_conn_set_security(conn, BT_SECURITY_L2);
   29eaa:	2102      	movs	r1, #2
static void split_central_process_connection(struct bt_conn *conn) {
   29eac:	b088      	sub	sp, #32
   29eae:	4604      	mov	r4, r0
    err = bt_conn_set_security(conn, BT_SECURITY_L2);
   29eb0:	f022 fda3 	bl	4c9fa <bt_conn_set_security>
    if (err) {
   29eb4:	b948      	cbnz	r0, 29eca <split_central_process_connection+0x22>
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   29eb6:	4620      	mov	r0, r4
   29eb8:	f7ff ffe8 	bl	29e8c <peripheral_slot_for_conn>
    if (slot == NULL) {
   29ebc:	b128      	cbz	r0, 29eca <split_central_process_connection+0x22>
    if (!slot->subscribe_params.value_handle) {
   29ebe:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   29ec0:	b12b      	cbz	r3, 29ece <split_central_process_connection+0x26>
    bt_conn_get_info(conn, &info);
   29ec2:	4669      	mov	r1, sp
   29ec4:	4620      	mov	r0, r4
   29ec6:	f005 fda3 	bl	2fa10 <bt_conn_get_info>
}
   29eca:	b008      	add	sp, #32
   29ecc:	bd10      	pop	{r4, pc}
        slot->discover_params.uuid = &split_service_uuid.uuid;
   29ece:	4a09      	ldr	r2, [pc, #36]	; (29ef4 <split_central_process_connection+0x4c>)
   29ed0:	6082      	str	r2, [r0, #8]
        slot->discover_params.func = split_central_service_discovery_func;
   29ed2:	4a09      	ldr	r2, [pc, #36]	; (29ef8 <split_central_process_connection+0x50>)
   29ed4:	60c2      	str	r2, [r0, #12]
        slot->discover_params.start_handle = 0x0001;
   29ed6:	2201      	movs	r2, #1
   29ed8:	8202      	strh	r2, [r0, #16]
        slot->discover_params.end_handle = 0xffff;
   29eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
   29ede:	82c2      	strh	r2, [r0, #22]
        slot->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   29ee0:	7603      	strb	r3, [r0, #24]
        err = bt_gatt_discover(slot->conn, &slot->discover_params);
   29ee2:	f100 0108 	add.w	r1, r0, #8
   29ee6:	6840      	ldr	r0, [r0, #4]
   29ee8:	f007 fe70 	bl	31bcc <bt_gatt_discover>
        if (err) {
   29eec:	2800      	cmp	r0, #0
   29eee:	d0e8      	beq.n	29ec2 <split_central_process_connection+0x1a>
   29ef0:	e7eb      	b.n	29eca <split_central_process_connection+0x22>
   29ef2:	bf00      	nop
   29ef4:	00053818 	.word	0x00053818
   29ef8:	00029efd 	.word	0x00029efd

00029efc <split_central_service_discovery_func>:
                                                    struct bt_gatt_discover_params *params) {
   29efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29f00:	4613      	mov	r3, r2
   29f02:	b086      	sub	sp, #24
   29f04:	4607      	mov	r7, r0
    if (!attr) {
   29f06:	460e      	mov	r6, r1
   29f08:	b939      	cbnz	r1, 29f1a <split_central_service_discovery_func+0x1e>
        (void)memset(params, 0, sizeof(*params));
   29f0a:	2218      	movs	r2, #24
   29f0c:	4618      	mov	r0, r3
   29f0e:	f021 fcc7 	bl	4b8a0 <memset>
        return BT_GATT_ITER_STOP;
   29f12:	4630      	mov	r0, r6
}
   29f14:	b006      	add	sp, #24
   29f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   29f1a:	f7ff ffb7 	bl	29e8c <peripheral_slot_for_conn>
    if (slot == NULL) {
   29f1e:	4604      	mov	r4, r0
   29f20:	2800      	cmp	r0, #0
   29f22:	d0f7      	beq.n	29f14 <split_central_service_discovery_func+0x18>
    if (bt_uuid_cmp(slot->discover_params.uuid, BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID))) {
   29f24:	4b13      	ldr	r3, [pc, #76]	; (29f74 <split_central_service_discovery_func+0x78>)
   29f26:	f8d0 c008 	ldr.w	ip, [r0, #8]
   29f2a:	aa01      	add	r2, sp, #4
   29f2c:	f103 0810 	add.w	r8, r3, #16
   29f30:	4696      	mov	lr, r2
   29f32:	6818      	ldr	r0, [r3, #0]
   29f34:	6859      	ldr	r1, [r3, #4]
   29f36:	4615      	mov	r5, r2
   29f38:	c503      	stmia	r5!, {r0, r1}
   29f3a:	3308      	adds	r3, #8
   29f3c:	4543      	cmp	r3, r8
   29f3e:	462a      	mov	r2, r5
   29f40:	d1f7      	bne.n	29f32 <split_central_service_discovery_func+0x36>
   29f42:	781b      	ldrb	r3, [r3, #0]
   29f44:	702b      	strb	r3, [r5, #0]
   29f46:	4671      	mov	r1, lr
   29f48:	4660      	mov	r0, ip
   29f4a:	f021 fd8c 	bl	4ba66 <bt_uuid_cmp>
   29f4e:	4605      	mov	r5, r0
   29f50:	b108      	cbz	r0, 29f56 <split_central_service_discovery_func+0x5a>
        return BT_GATT_ITER_CONTINUE;
   29f52:	2001      	movs	r0, #1
   29f54:	e7de      	b.n	29f14 <split_central_service_discovery_func+0x18>
    slot->discover_params.func = split_central_chrc_discovery_func;
   29f56:	4b08      	ldr	r3, [pc, #32]	; (29f78 <split_central_service_discovery_func+0x7c>)
   29f58:	60e3      	str	r3, [r4, #12]
    slot->discover_params.start_handle = attr->handle + 1;
   29f5a:	8a33      	ldrh	r3, [r6, #16]
    slot->discover_params.uuid = NULL;
   29f5c:	60a0      	str	r0, [r4, #8]
    slot->discover_params.start_handle = attr->handle + 1;
   29f5e:	3301      	adds	r3, #1
   29f60:	8223      	strh	r3, [r4, #16]
    slot->discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   29f62:	2303      	movs	r3, #3
   29f64:	7623      	strb	r3, [r4, #24]
    int err = bt_gatt_discover(conn, &slot->discover_params);
   29f66:	f104 0108 	add.w	r1, r4, #8
   29f6a:	4638      	mov	r0, r7
   29f6c:	f007 fe2e 	bl	31bcc <bt_gatt_discover>
    return BT_GATT_ITER_STOP;
   29f70:	4628      	mov	r0, r5
   29f72:	e7cf      	b.n	29f14 <split_central_service_discovery_func+0x18>
   29f74:	000514a8 	.word	0x000514a8
   29f78:	0002a041 	.word	0x0002a041

00029f7c <split_central_notify_func>:
                                         uint16_t length) {
   29f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29f80:	b086      	sub	sp, #24
   29f82:	4607      	mov	r7, r0
   29f84:	4614      	mov	r4, r2
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   29f86:	f7ff ff81 	bl	29e8c <peripheral_slot_for_conn>
    if (slot == NULL) {
   29f8a:	2800      	cmp	r0, #0
   29f8c:	d051      	beq.n	2a032 <split_central_notify_func+0xb6>
    if (!data) {
   29f8e:	b924      	cbnz	r4, 29f9a <split_central_notify_func+0x1e>
        params->value_handle = 0U;
   29f90:	810c      	strh	r4, [r1, #8]
        return BT_GATT_ITER_STOP;
   29f92:	4620      	mov	r0, r4
}
   29f94:	b006      	add	sp, #24
   29f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29f9a:	1e63      	subs	r3, r4, #1
   29f9c:	f100 0259 	add.w	r2, r0, #89	; 0x59
   29fa0:	340f      	adds	r4, #15
        slot->changed_positions[i] = ((uint8_t *)data)[i] ^ slot->position_state[i];
   29fa2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   29fa6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   29faa:	4069      	eors	r1, r5
   29fac:	7411      	strb	r1, [r2, #16]
        slot->position_state[i] = ((uint8_t *)data)[i];
   29fae:	7819      	ldrb	r1, [r3, #0]
   29fb0:	7011      	strb	r1, [r2, #0]
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   29fb2:	42a3      	cmp	r3, r4
   29fb4:	d1f5      	bne.n	29fa2 <split_central_notify_func+0x26>
	return z_impl_k_msgq_put(msgq, data, timeout);
   29fb6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 2a038 <split_central_notify_func+0xbc>
                k_work_submit(&peripheral_event_work);
   29fba:	f8df a080 	ldr.w	sl, [pc, #128]	; 2a03c <split_central_notify_func+0xc0>
   29fbe:	f100 046a 	add.w	r4, r0, #106	; 0x6a
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   29fc2:	2600      	movs	r6, #0
                bool pressed = slot->position_state[i] & BIT(j);
   29fc4:	f04f 0801 	mov.w	r8, #1
        for (int j = 0; j < 8; j++) {
   29fc8:	2500      	movs	r5, #0
            if (slot->changed_positions[i] & BIT(j)) {
   29fca:	7823      	ldrb	r3, [r4, #0]
   29fcc:	40eb      	lsrs	r3, r5
   29fce:	07db      	lsls	r3, r3, #31
   29fd0:	d527      	bpl.n	2a022 <split_central_notify_func+0xa6>
                bool pressed = slot->position_state[i] & BIT(j);
   29fd2:	f814 1c10 	ldrb.w	r1, [r4, #-16]
   29fd6:	fa08 f305 	lsl.w	r3, r8, r5
   29fda:	4219      	tst	r1, r3
                                                            peripheral_slot_index_for_conn(conn),
   29fdc:	4638      	mov	r0, r7
                bool pressed = slot->position_state[i] & BIT(j);
   29fde:	bf14      	ite	ne
   29fe0:	2101      	movne	r1, #1
   29fe2:	2100      	moveq	r1, #0
                                                            peripheral_slot_index_for_conn(conn),
   29fe4:	f7ff ff48 	bl	29e78 <peripheral_slot_index_for_conn>
   29fe8:	19aa      	adds	r2, r5, r6
                struct zmk_position_state_changed ev = {.source =
   29fea:	f88d 0000 	strb.w	r0, [sp]
   29fee:	9201      	str	r2, [sp, #4]
   29ff0:	f88d 1008 	strb.w	r1, [sp, #8]
	return z_impl_k_uptime_ticks();
   29ff4:	f026 fdbc 	bl	50b70 <z_impl_k_uptime_ticks>
   29ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29ffc:	fba0 0302 	umull	r0, r3, r0, r2
   2a000:	fb02 3101 	mla	r1, r2, r1, r3
   2a004:	0bc0      	lsrs	r0, r0, #15
   2a006:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2a00a:	0bc9      	lsrs	r1, r1, #15
   2a00c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a010:	2200      	movs	r2, #0
   2a012:	2300      	movs	r3, #0
   2a014:	4669      	mov	r1, sp
   2a016:	4648      	mov	r0, r9
   2a018:	f01d fc52 	bl	478c0 <z_impl_k_msgq_put>
                k_work_submit(&peripheral_event_work);
   2a01c:	4650      	mov	r0, sl
   2a01e:	f01d ff63 	bl	47ee8 <k_work_submit>
        for (int j = 0; j < 8; j++) {
   2a022:	3501      	adds	r5, #1
   2a024:	2d08      	cmp	r5, #8
   2a026:	d1d0      	bne.n	29fca <split_central_notify_func+0x4e>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a028:	3608      	adds	r6, #8
   2a02a:	2e80      	cmp	r6, #128	; 0x80
   2a02c:	f104 0401 	add.w	r4, r4, #1
   2a030:	d1ca      	bne.n	29fc8 <split_central_notify_func+0x4c>
        return BT_GATT_ITER_CONTINUE;
   2a032:	2001      	movs	r0, #1
   2a034:	e7ae      	b.n	29f94 <split_central_notify_func+0x18>
   2a036:	bf00      	nop
   2a038:	20000eec 	.word	0x20000eec
   2a03c:	20000430 	.word	0x20000430

0002a040 <split_central_chrc_discovery_func>:
                                                 struct bt_gatt_discover_params *params) {
   2a040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a044:	4606      	mov	r6, r0
   2a046:	b08a      	sub	sp, #40	; 0x28
    if (!attr) {
   2a048:	460d      	mov	r5, r1
   2a04a:	2900      	cmp	r1, #0
   2a04c:	d062      	beq.n	2a114 <split_central_chrc_discovery_func+0xd4>
    if (!attr->user_data) {
   2a04e:	68c9      	ldr	r1, [r1, #12]
   2a050:	2900      	cmp	r1, #0
   2a052:	d061      	beq.n	2a118 <split_central_chrc_discovery_func+0xd8>
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a054:	f7ff ff1a 	bl	29e8c <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a058:	4604      	mov	r4, r0
   2a05a:	2800      	cmp	r0, #0
   2a05c:	d03a      	beq.n	2a0d4 <split_central_chrc_discovery_func+0x94>
                     BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_POSITION_STATE_UUID))) {
   2a05e:	4b2f      	ldr	r3, [pc, #188]	; (2a11c <split_central_chrc_discovery_func+0xdc>)
    if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a060:	f8d1 c000 	ldr.w	ip, [r1]
                     BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_POSITION_STATE_UUID))) {
   2a064:	466a      	mov	r2, sp
   2a066:	f103 0810 	add.w	r8, r3, #16
   2a06a:	4696      	mov	lr, r2
   2a06c:	6818      	ldr	r0, [r3, #0]
   2a06e:	6859      	ldr	r1, [r3, #4]
   2a070:	4617      	mov	r7, r2
   2a072:	c703      	stmia	r7!, {r0, r1}
   2a074:	3308      	adds	r3, #8
   2a076:	4543      	cmp	r3, r8
   2a078:	463a      	mov	r2, r7
   2a07a:	d1f7      	bne.n	2a06c <split_central_chrc_discovery_func+0x2c>
   2a07c:	781b      	ldrb	r3, [r3, #0]
   2a07e:	703b      	strb	r3, [r7, #0]
    if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a080:	4671      	mov	r1, lr
   2a082:	4660      	mov	r0, ip
   2a084:	f021 fcef 	bl	4ba66 <bt_uuid_cmp>
   2a088:	bb38      	cbnz	r0, 2a0da <split_central_chrc_discovery_func+0x9a>
        slot->discover_params.start_handle = attr->handle + 2;
   2a08a:	8a2b      	ldrh	r3, [r5, #16]
        slot->discover_params.uuid = NULL;
   2a08c:	60a0      	str	r0, [r4, #8]
        slot->discover_params.start_handle = attr->handle + 2;
   2a08e:	3302      	adds	r3, #2
   2a090:	8223      	strh	r3, [r4, #16]
        slot->discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   2a092:	2303      	movs	r3, #3
   2a094:	7623      	strb	r3, [r4, #24]
        slot->subscribe_params.disc_params = &slot->sub_discover_params;
   2a096:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2a09a:	6323      	str	r3, [r4, #48]	; 0x30
        slot->subscribe_params.end_handle = slot->discover_params.end_handle;
   2a09c:	8ae3      	ldrh	r3, [r4, #22]
   2a09e:	85a3      	strh	r3, [r4, #44]	; 0x2c
        slot->subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
   2a0a0:	4628      	mov	r0, r5
   2a0a2:	f024 f80f 	bl	4e0c4 <bt_gatt_attr_value_handle>
        slot->subscribe_params.notify = split_central_notify_func;
   2a0a6:	4b1e      	ldr	r3, [pc, #120]	; (2a120 <split_central_chrc_discovery_func+0xe0>)
   2a0a8:	6223      	str	r3, [r4, #32]
        slot->subscribe_params.value = BT_GATT_CCC_NOTIFY;
   2a0aa:	2301      	movs	r3, #1
        slot->subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
   2a0ac:	8520      	strh	r0, [r4, #40]	; 0x28
        slot->subscribe_params.value = BT_GATT_CCC_NOTIFY;
   2a0ae:	86a3      	strh	r3, [r4, #52]	; 0x34
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a0b0:	4630      	mov	r0, r6
   2a0b2:	f7ff feeb 	bl	29e8c <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a0b6:	b120      	cbz	r0, 2a0c2 <split_central_chrc_discovery_func+0x82>
    int err = bt_gatt_subscribe(conn, &slot->subscribe_params);
   2a0b8:	f100 0120 	add.w	r1, r0, #32
   2a0bc:	4630      	mov	r0, r6
   2a0be:	f007 ff91 	bl	31fe4 <bt_gatt_subscribe>
    bool subscribed = (slot->run_behavior_handle && slot->subscribe_params.value_handle);
   2a0c2:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   2a0c6:	b11b      	cbz	r3, 2a0d0 <split_central_chrc_discovery_func+0x90>
   2a0c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   2a0ca:	3b00      	subs	r3, #0
   2a0cc:	bf18      	it	ne
   2a0ce:	2301      	movne	r3, #1
    return subscribed ? BT_GATT_ITER_STOP : BT_GATT_ITER_CONTINUE;
   2a0d0:	f083 0001 	eor.w	r0, r3, #1
}
   2a0d4:	b00a      	add	sp, #40	; 0x28
   2a0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a0da:	68eb      	ldr	r3, [r5, #12]
   2a0dc:	681f      	ldr	r7, [r3, #0]
                            BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_RUN_BEHAVIOR_UUID))) {
   2a0de:	4b11      	ldr	r3, [pc, #68]	; (2a124 <split_central_chrc_discovery_func+0xe4>)
   2a0e0:	aa05      	add	r2, sp, #20
   2a0e2:	f103 0e10 	add.w	lr, r3, #16
   2a0e6:	4694      	mov	ip, r2
   2a0e8:	6818      	ldr	r0, [r3, #0]
   2a0ea:	6859      	ldr	r1, [r3, #4]
   2a0ec:	4616      	mov	r6, r2
   2a0ee:	c603      	stmia	r6!, {r0, r1}
   2a0f0:	3308      	adds	r3, #8
   2a0f2:	4573      	cmp	r3, lr
   2a0f4:	4632      	mov	r2, r6
   2a0f6:	d1f7      	bne.n	2a0e8 <split_central_chrc_discovery_func+0xa8>
   2a0f8:	781b      	ldrb	r3, [r3, #0]
   2a0fa:	7033      	strb	r3, [r6, #0]
    } else if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a0fc:	4661      	mov	r1, ip
   2a0fe:	4638      	mov	r0, r7
   2a100:	f021 fcb1 	bl	4ba66 <bt_uuid_cmp>
   2a104:	2800      	cmp	r0, #0
   2a106:	d1dc      	bne.n	2a0c2 <split_central_chrc_discovery_func+0x82>
        slot->run_behavior_handle = bt_gatt_attr_value_handle(attr);
   2a108:	4628      	mov	r0, r5
   2a10a:	f023 ffdb 	bl	4e0c4 <bt_gatt_attr_value_handle>
   2a10e:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
   2a112:	e7d6      	b.n	2a0c2 <split_central_chrc_discovery_func+0x82>
        return BT_GATT_ITER_STOP;
   2a114:	4608      	mov	r0, r1
   2a116:	e7dd      	b.n	2a0d4 <split_central_chrc_discovery_func+0x94>
   2a118:	4608      	mov	r0, r1
   2a11a:	e7db      	b.n	2a0d4 <split_central_chrc_discovery_func+0x94>
   2a11c:	000514b9 	.word	0x000514b9
   2a120:	00029f7d 	.word	0x00029f7d
   2a124:	000514ca 	.word	0x000514ca

0002a128 <release_peripheral_slot>:
int release_peripheral_slot(int index) {
   2a128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (index < 0 || index >= ZMK_BLE_SPLIT_PERIPHERAL_COUNT) {
   2a12c:	4604      	mov	r4, r0
int release_peripheral_slot(int index) {
   2a12e:	b086      	sub	sp, #24
    if (index < 0 || index >= ZMK_BLE_SPLIT_PERIPHERAL_COUNT) {
   2a130:	2800      	cmp	r0, #0
   2a132:	d14a      	bne.n	2a1ca <release_peripheral_slot+0xa2>
    if (slot->state == PERIPHERAL_SLOT_STATE_OPEN) {
   2a134:	4d26      	ldr	r5, [pc, #152]	; (2a1d0 <release_peripheral_slot+0xa8>)
   2a136:	782b      	ldrb	r3, [r5, #0]
   2a138:	2b00      	cmp	r3, #0
   2a13a:	d046      	beq.n	2a1ca <release_peripheral_slot+0xa2>
    if (slot->conn != NULL) {
   2a13c:	6868      	ldr	r0, [r5, #4]
   2a13e:	b110      	cbz	r0, 2a146 <release_peripheral_slot+0x1e>
        bt_conn_unref(slot->conn);
   2a140:	f022 fbdc 	bl	4c8fc <bt_conn_unref>
        slot->conn = NULL;
   2a144:	606c      	str	r4, [r5, #4]
    slot->state = PERIPHERAL_SLOT_STATE_OPEN;
   2a146:	2400      	movs	r4, #0
   2a148:	4f22      	ldr	r7, [pc, #136]	; (2a1d4 <release_peripheral_slot+0xac>)
   2a14a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2a1d8 <release_peripheral_slot+0xb0>
                k_work_submit(&peripheral_event_work);
   2a14e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 2a1dc <release_peripheral_slot+0xb4>
    slot->state = PERIPHERAL_SLOT_STATE_OPEN;
   2a152:	702c      	strb	r4, [r5, #0]
                struct zmk_position_state_changed ev = {.source = index,
   2a154:	46a0      	mov	r8, r4
        for (int j = 0; j < 8; j++) {
   2a156:	2600      	movs	r6, #0
            if (slot->position_state[i] & BIT(j)) {
   2a158:	783b      	ldrb	r3, [r7, #0]
   2a15a:	40f3      	lsrs	r3, r6
   2a15c:	07db      	lsls	r3, r3, #31
   2a15e:	d51c      	bpl.n	2a19a <release_peripheral_slot+0x72>
                struct zmk_position_state_changed ev = {.source = index,
   2a160:	1933      	adds	r3, r6, r4
   2a162:	f88d 8000 	strb.w	r8, [sp]
   2a166:	9301      	str	r3, [sp, #4]
   2a168:	f88d 8008 	strb.w	r8, [sp, #8]
	return z_impl_k_uptime_ticks();
   2a16c:	f026 fd00 	bl	50b70 <z_impl_k_uptime_ticks>
   2a170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a174:	fba0 0302 	umull	r0, r3, r0, r2
   2a178:	fb02 3101 	mla	r1, r2, r1, r3
   2a17c:	0bc0      	lsrs	r0, r0, #15
   2a17e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2a182:	0bc9      	lsrs	r1, r1, #15
   2a184:	e9cd 0104 	strd	r0, r1, [sp, #16]
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a188:	2200      	movs	r2, #0
   2a18a:	2300      	movs	r3, #0
   2a18c:	4669      	mov	r1, sp
   2a18e:	4648      	mov	r0, r9
   2a190:	f01d fb96 	bl	478c0 <z_impl_k_msgq_put>
                k_work_submit(&peripheral_event_work);
   2a194:	4650      	mov	r0, sl
   2a196:	f01d fea7 	bl	47ee8 <k_work_submit>
        for (int j = 0; j < 8; j++) {
   2a19a:	3601      	adds	r6, #1
   2a19c:	2e08      	cmp	r6, #8
   2a19e:	d1db      	bne.n	2a158 <release_peripheral_slot+0x30>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a1a0:	3408      	adds	r4, #8
   2a1a2:	2c80      	cmp	r4, #128	; 0x80
   2a1a4:	f107 0701 	add.w	r7, r7, #1
   2a1a8:	d1d5      	bne.n	2a156 <release_peripheral_slot+0x2e>
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a1aa:	2200      	movs	r2, #0
   2a1ac:	490c      	ldr	r1, [pc, #48]	; (2a1e0 <release_peripheral_slot+0xb8>)
        slot->position_state[i] = 0U;
   2a1ae:	4613      	mov	r3, r2
   2a1b0:	f801 3f01 	strb.w	r3, [r1, #1]!
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a1b4:	3201      	adds	r2, #1
   2a1b6:	2a10      	cmp	r2, #16
        slot->changed_positions[i] = 0U;
   2a1b8:	740b      	strb	r3, [r1, #16]
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a1ba:	d1f9      	bne.n	2a1b0 <release_peripheral_slot+0x88>
    slot->subscribe_params.value_handle = 0;
   2a1bc:	852b      	strh	r3, [r5, #40]	; 0x28
    slot->run_behavior_handle = 0;
   2a1be:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
   2a1c2:	2000      	movs	r0, #0
}
   2a1c4:	b006      	add	sp, #24
   2a1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return -EINVAL;
   2a1ca:	f06f 0015 	mvn.w	r0, #21
   2a1ce:	e7f9      	b.n	2a1c4 <release_peripheral_slot+0x9c>
   2a1d0:	20003c68 	.word	0x20003c68
   2a1d4:	20003cc2 	.word	0x20003cc2
   2a1d8:	20000eec 	.word	0x20000eec
   2a1dc:	20000430 	.word	0x20000430
   2a1e0:	20003cc1 	.word	0x20003cc1

0002a1e4 <reserve_peripheral_slot>:
int reserve_peripheral_slot() {
   2a1e4:	b538      	push	{r3, r4, r5, lr}
        if (peripherals[i].state == PERIPHERAL_SLOT_STATE_OPEN) {
   2a1e6:	4d06      	ldr	r5, [pc, #24]	; (2a200 <reserve_peripheral_slot+0x1c>)
   2a1e8:	782c      	ldrb	r4, [r5, #0]
   2a1ea:	b934      	cbnz	r4, 2a1fa <reserve_peripheral_slot+0x16>
            release_peripheral_slot(i);
   2a1ec:	4620      	mov	r0, r4
   2a1ee:	f7ff ff9b 	bl	2a128 <release_peripheral_slot>
            peripherals[i].state = PERIPHERAL_SLOT_STATE_CONNECTING;
   2a1f2:	2301      	movs	r3, #1
   2a1f4:	702b      	strb	r3, [r5, #0]
   2a1f6:	4620      	mov	r0, r4
}
   2a1f8:	bd38      	pop	{r3, r4, r5, pc}
    return -ENOMEM;
   2a1fa:	f06f 000b 	mvn.w	r0, #11
   2a1fe:	e7fb      	b.n	2a1f8 <reserve_peripheral_slot+0x14>
   2a200:	20003c68 	.word	0x20003c68

0002a204 <split_central_eir_found>:
static bool split_central_eir_found(struct bt_data *data, void *user_data) {
   2a204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (data->type) {
   2a208:	7803      	ldrb	r3, [r0, #0]
   2a20a:	3b06      	subs	r3, #6
   2a20c:	2b01      	cmp	r3, #1
static bool split_central_eir_found(struct bt_data *data, void *user_data) {
   2a20e:	b0a4      	sub	sp, #144	; 0x90
   2a210:	4605      	mov	r5, r0
   2a212:	460e      	mov	r6, r1
    switch (data->type) {
   2a214:	d903      	bls.n	2a21e <split_central_eir_found+0x1a>
    return true;
   2a216:	2001      	movs	r0, #1
}
   2a218:	b024      	add	sp, #144	; 0x90
   2a21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (data->data_len % 16 != 0U) {
   2a21e:	7844      	ldrb	r4, [r0, #1]
   2a220:	f014 040f 	ands.w	r4, r4, #15
   2a224:	d1f7      	bne.n	2a216 <split_central_eir_found+0x12>
        for (i = 0; i < data->data_len; i += 16) {
   2a226:	786b      	ldrb	r3, [r5, #1]
   2a228:	429c      	cmp	r4, r3
   2a22a:	daf4      	bge.n	2a216 <split_central_eir_found+0x12>
            if (!bt_uuid_create(&uuid.uuid, &data->data[i], 16)) {
   2a22c:	6869      	ldr	r1, [r5, #4]
   2a22e:	2210      	movs	r2, #16
   2a230:	4421      	add	r1, r4
   2a232:	a801      	add	r0, sp, #4
   2a234:	f021 fc45 	bl	4bac2 <bt_uuid_create>
   2a238:	b370      	cbz	r0, 2a298 <split_central_eir_found+0x94>
            if (bt_uuid_cmp(&uuid.uuid, BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID))) {
   2a23a:	4b35      	ldr	r3, [pc, #212]	; (2a310 <split_central_eir_found+0x10c>)
   2a23c:	aa06      	add	r2, sp, #24
   2a23e:	f103 0710 	add.w	r7, r3, #16
   2a242:	4696      	mov	lr, r2
   2a244:	6818      	ldr	r0, [r3, #0]
   2a246:	6859      	ldr	r1, [r3, #4]
   2a248:	4694      	mov	ip, r2
   2a24a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   2a24e:	3308      	adds	r3, #8
   2a250:	42bb      	cmp	r3, r7
   2a252:	4662      	mov	r2, ip
   2a254:	d1f6      	bne.n	2a244 <split_central_eir_found+0x40>
   2a256:	781b      	ldrb	r3, [r3, #0]
   2a258:	f88c 3000 	strb.w	r3, [ip]
   2a25c:	4671      	mov	r1, lr
   2a25e:	a801      	add	r0, sp, #4
   2a260:	f021 fc01 	bl	4ba66 <bt_uuid_cmp>
   2a264:	b1d0      	cbz	r0, 2a29c <split_central_eir_found+0x98>
                bt_uuid_to_str(&uuid.uuid, uuid_str, sizeof(uuid_str));
   2a266:	2225      	movs	r2, #37	; 0x25
   2a268:	a910      	add	r1, sp, #64	; 0x40
   2a26a:	a801      	add	r0, sp, #4
   2a26c:	f002 ffde 	bl	2d22c <bt_uuid_to_str>
                bt_uuid_to_str(BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID), service_uuid_str,
   2a270:	aa0b      	add	r2, sp, #44	; 0x2c
   2a272:	4b27      	ldr	r3, [pc, #156]	; (2a310 <split_central_eir_found+0x10c>)
   2a274:	4696      	mov	lr, r2
   2a276:	6818      	ldr	r0, [r3, #0]
   2a278:	6859      	ldr	r1, [r3, #4]
   2a27a:	4694      	mov	ip, r2
   2a27c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   2a280:	3308      	adds	r3, #8
   2a282:	42bb      	cmp	r3, r7
   2a284:	4662      	mov	r2, ip
   2a286:	d1f6      	bne.n	2a276 <split_central_eir_found+0x72>
   2a288:	781b      	ldrb	r3, [r3, #0]
   2a28a:	f88c 3000 	strb.w	r3, [ip]
   2a28e:	2225      	movs	r2, #37	; 0x25
   2a290:	a91a      	add	r1, sp, #104	; 0x68
   2a292:	4670      	mov	r0, lr
   2a294:	f002 ffca 	bl	2d22c <bt_uuid_to_str>
        for (i = 0; i < data->data_len; i += 16) {
   2a298:	3410      	adds	r4, #16
   2a29a:	e7c4      	b.n	2a226 <split_central_eir_found+0x22>
            zmk_ble_set_peripheral_addr(addr);
   2a29c:	4630      	mov	r0, r6
   2a29e:	f7ff fbd1 	bl	29a44 <zmk_ble_set_peripheral_addr>
            err = bt_le_scan_stop();
   2a2a2:	f004 fecd 	bl	2f040 <bt_le_scan_stop>
            if (err) {
   2a2a6:	4607      	mov	r7, r0
   2a2a8:	2800      	cmp	r0, #0
   2a2aa:	d1f5      	bne.n	2a298 <split_central_eir_found+0x94>
            uint8_t slot_idx = reserve_peripheral_slot();
   2a2ac:	f7ff ff9a 	bl	2a1e4 <reserve_peripheral_slot>
            slot->conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   2a2b0:	4631      	mov	r1, r6
   2a2b2:	b2c5      	uxtb	r5, r0
   2a2b4:	4638      	mov	r0, r7
   2a2b6:	f005 fb59 	bl	2f96c <bt_conn_lookup_addr_le>
   2a2ba:	f8df c058 	ldr.w	ip, [pc, #88]	; 2a314 <split_central_eir_found+0x110>
   2a2be:	4c16      	ldr	r4, [pc, #88]	; (2a318 <split_central_eir_found+0x114>)
   2a2c0:	227c      	movs	r2, #124	; 0x7c
   2a2c2:	4355      	muls	r5, r2
   2a2c4:	eb0c 0805 	add.w	r8, ip, r5
   2a2c8:	af1a      	add	r7, sp, #104	; 0x68
   2a2ca:	f8c8 0004 	str.w	r0, [r8, #4]
            if (slot->conn) {
   2a2ce:	b150      	cbz	r0, 2a2e6 <split_central_eir_found+0xe2>
                split_central_process_connection(slot->conn);
   2a2d0:	f7ff fdea 	bl	29ea8 <split_central_process_connection>
                err = bt_conn_le_phy_update(slot->conn, BT_CONN_LE_PHY_PARAM_2M);
   2a2d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   2a2d6:	901a      	str	r0, [sp, #104]	; 0x68
   2a2d8:	4639      	mov	r1, r7
   2a2da:	f8d8 0004 	ldr.w	r0, [r8, #4]
   2a2de:	f022 fbe0 	bl	4caa2 <bt_conn_le_phy_update>
            return false;
   2a2e2:	2000      	movs	r0, #0
   2a2e4:	e798      	b.n	2a218 <split_central_eir_found+0x14>
                param = BT_LE_CONN_PARAM(0x0006, 0x0006, 30, 400);
   2a2e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   2a2e8:	6d21      	ldr	r1, [r4, #80]	; 0x50
   2a2ea:	ab10      	add	r3, sp, #64	; 0x40
                err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN, param, &slot->conn);
   2a2ec:	3454      	adds	r4, #84	; 0x54
                param = BT_LE_CONN_PARAM(0x0006, 0x0006, 30, 400);
   2a2ee:	c303      	stmia	r3!, {r0, r1}
                err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN, param, &slot->conn);
   2a2f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2a2f4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   2a2f8:	1d2b      	adds	r3, r5, #4
   2a2fa:	4463      	add	r3, ip
   2a2fc:	aa10      	add	r2, sp, #64	; 0x40
   2a2fe:	4639      	mov	r1, r7
   2a300:	4630      	mov	r0, r6
   2a302:	f005 fbb3 	bl	2fa6c <bt_conn_le_create>
                if (err) {
   2a306:	2800      	cmp	r0, #0
   2a308:	d0eb      	beq.n	2a2e2 <split_central_eir_found+0xde>
                    start_scan();
   2a30a:	f7ff fcc9 	bl	29ca0 <start_scan>
   2a30e:	e7e8      	b.n	2a2e2 <split_central_eir_found+0xde>
   2a310:	000514a8 	.word	0x000514a8
   2a314:	20003c68 	.word	0x20003c68
   2a318:	00051494 	.word	0x00051494

0002a31c <confirm_peripheral_slot_conn>:
int confirm_peripheral_slot_conn(struct bt_conn *conn) {
   2a31c:	b508      	push	{r3, lr}
    int idx = peripheral_slot_index_for_conn(conn);
   2a31e:	f7ff fdab 	bl	29e78 <peripheral_slot_index_for_conn>
    if (idx < 0) {
   2a322:	2800      	cmp	r0, #0
   2a324:	db05      	blt.n	2a332 <confirm_peripheral_slot_conn+0x16>
    peripherals[idx].state = PERIPHERAL_SLOT_STATE_CONNECTED;
   2a326:	237c      	movs	r3, #124	; 0x7c
   2a328:	4358      	muls	r0, r3
   2a32a:	4b02      	ldr	r3, [pc, #8]	; (2a334 <confirm_peripheral_slot_conn+0x18>)
   2a32c:	2202      	movs	r2, #2
   2a32e:	541a      	strb	r2, [r3, r0]
    return 0;
   2a330:	2000      	movs	r0, #0
}
   2a332:	bd08      	pop	{r3, pc}
   2a334:	20003c68 	.word	0x20003c68

0002a338 <usb_status_cb>:
        return ZMK_USB_CONN_POWERED;
    }
}

void usb_status_cb(enum usb_dc_status_code status, const uint8_t *params) {
    usb_status = status;
   2a338:	4b02      	ldr	r3, [pc, #8]	; (2a344 <usb_status_cb+0xc>)
   2a33a:	7018      	strb	r0, [r3, #0]
    k_work_submit(&usb_status_notifier_work);
   2a33c:	4802      	ldr	r0, [pc, #8]	; (2a348 <usb_status_cb+0x10>)
   2a33e:	f01d bdd3 	b.w	47ee8 <k_work_submit>
   2a342:	bf00      	nop
   2a344:	20000d76 	.word	0x20000d76
   2a348:	20000450 	.word	0x20000450

0002a34c <zmk_usb_init>:
};

static int zmk_usb_init(const struct device *_arg) {
   2a34c:	b508      	push	{r3, lr}
    int usb_enable_ret;

    usb_enable_ret = usb_enable(usb_status_cb);
   2a34e:	4804      	ldr	r0, [pc, #16]	; (2a360 <zmk_usb_init+0x14>)
   2a350:	f001 fa06 	bl	2b760 <usb_enable>

    if (usb_enable_ret != 0) {
        LOG_ERR("Unable to enable USB");
        return -EINVAL;
   2a354:	2800      	cmp	r0, #0
    }

    return 0;
}
   2a356:	bf18      	it	ne
   2a358:	f06f 0015 	mvnne.w	r0, #21
   2a35c:	bd08      	pop	{r3, pc}
   2a35e:	bf00      	nop
   2a360:	0002a339 	.word	0x0002a339

0002a364 <zmk_usb_get_status>:
enum usb_dc_status_code zmk_usb_get_status() { return usb_status; }
   2a364:	4b01      	ldr	r3, [pc, #4]	; (2a36c <zmk_usb_get_status+0x8>)
   2a366:	7818      	ldrb	r0, [r3, #0]
   2a368:	4770      	bx	lr
   2a36a:	bf00      	nop
   2a36c:	20000d76 	.word	0x20000d76

0002a370 <zmk_usb_get_conn_state>:
    switch (usb_status) {
   2a370:	4b08      	ldr	r3, [pc, #32]	; (2a394 <zmk_usb_get_conn_state+0x24>)
   2a372:	781b      	ldrb	r3, [r3, #0]
   2a374:	3b03      	subs	r3, #3
   2a376:	2b08      	cmp	r3, #8
   2a378:	d808      	bhi.n	2a38c <zmk_usb_get_conn_state+0x1c>
   2a37a:	e8df f003 	tbb	[pc, r3]
   2a37e:	0509      	.short	0x0509
   2a380:	07070709 	.word	0x07070709
   2a384:	0707      	.short	0x0707
   2a386:	05          	.byte	0x05
   2a387:	00          	.byte	0x00
   2a388:	2000      	movs	r0, #0
   2a38a:	4770      	bx	lr
        return ZMK_USB_CONN_POWERED;
   2a38c:	2001      	movs	r0, #1
   2a38e:	4770      	bx	lr
        return ZMK_USB_CONN_HID;
   2a390:	2002      	movs	r0, #2
}
   2a392:	4770      	bx	lr
   2a394:	20000d76 	.word	0x20000d76

0002a398 <zmk_usb_hid_init>:

        return err;
    }
}

static int zmk_usb_hid_init(const struct device *_arg) {
   2a398:	b510      	push	{r4, lr}
   2a39a:	4809      	ldr	r0, [pc, #36]	; (2a3c0 <zmk_usb_hid_init+0x28>)
    hid_dev = device_get_binding("HID_0");
   2a39c:	4c09      	ldr	r4, [pc, #36]	; (2a3c4 <zmk_usb_hid_init+0x2c>)
   2a39e:	f01d f865 	bl	4746c <z_impl_device_get_binding>
   2a3a2:	6020      	str	r0, [r4, #0]
    if (hid_dev == NULL) {
   2a3a4:	b148      	cbz	r0, 2a3ba <zmk_usb_hid_init+0x22>
        LOG_ERR("Unable to locate HID device");
        return -EINVAL;
    }

    usb_hid_register_device(hid_dev, zmk_hid_report_desc, sizeof(zmk_hid_report_desc), &ops);
   2a3a6:	4b08      	ldr	r3, [pc, #32]	; (2a3c8 <zmk_usb_hid_init+0x30>)
   2a3a8:	4908      	ldr	r1, [pc, #32]	; (2a3cc <zmk_usb_hid_init+0x34>)
   2a3aa:	224c      	movs	r2, #76	; 0x4c
   2a3ac:	f019 f9ae 	bl	4370c <usb_hid_register_device>
    usb_hid_init(hid_dev);
   2a3b0:	6820      	ldr	r0, [r4, #0]
   2a3b2:	f025 fa92 	bl	4f8da <usb_hid_init>

    return 0;
   2a3b6:	2000      	movs	r0, #0
}
   2a3b8:	bd10      	pop	{r4, pc}
        return -EINVAL;
   2a3ba:	f06f 0015 	mvn.w	r0, #21
   2a3be:	e7fb      	b.n	2a3b8 <zmk_usb_hid_init+0x20>
   2a3c0:	00053829 	.word	0x00053829
   2a3c4:	20003ce4 	.word	0x20003ce4
   2a3c8:	00051d70 	.word	0x00051d70
   2a3cc:	0005382f 	.word	0x0005382f

0002a3d0 <in_ready_cb>:
	z_impl_k_sem_give(sem);
   2a3d0:	4801      	ldr	r0, [pc, #4]	; (2a3d8 <in_ready_cb+0x8>)
   2a3d2:	f01d bc13 	b.w	47bfc <z_impl_k_sem_give>
   2a3d6:	bf00      	nop
   2a3d8:	20000ff4 	.word	0x20000ff4

0002a3dc <zmk_usb_hid_send_report>:
int zmk_usb_hid_send_report(const uint8_t *report, size_t len) {
   2a3dc:	b538      	push	{r3, r4, r5, lr}
   2a3de:	4604      	mov	r4, r0
   2a3e0:	460d      	mov	r5, r1
    switch (zmk_usb_get_status()) {
   2a3e2:	f7ff ffbf 	bl	2a364 <zmk_usb_get_status>
   2a3e6:	280b      	cmp	r0, #11
   2a3e8:	d80b      	bhi.n	2a402 <zmk_usb_hid_send_report+0x26>
   2a3ea:	e8df f000 	tbb	[pc, r0]
   2a3ee:	1e1e      	.short	0x1e1e
   2a3f0:	061e0a0a 	.word	0x061e0a0a
   2a3f4:	0a0a0a0a 	.word	0x0a0a0a0a
   2a3f8:	1e0a      	.short	0x1e0a
}
   2a3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return usb_wakeup_request();
   2a3fe:	f001 b979 	b.w	2b6f4 <usb_wakeup_request>
	return z_impl_k_sem_take(sem, timeout);
   2a402:	f44f 7276 	mov.w	r2, #984	; 0x3d8
   2a406:	2300      	movs	r3, #0
   2a408:	4809      	ldr	r0, [pc, #36]	; (2a430 <zmk_usb_hid_send_report+0x54>)
   2a40a:	f01d fc1d 	bl	47c48 <z_impl_k_sem_take>
        int err = hid_int_ep_write(hid_dev, report, len, NULL);
   2a40e:	4809      	ldr	r0, [pc, #36]	; (2a434 <zmk_usb_hid_send_report+0x58>)
   2a410:	4621      	mov	r1, r4
   2a412:	6800      	ldr	r0, [r0, #0]
   2a414:	2300      	movs	r3, #0
   2a416:	462a      	mov	r2, r5
   2a418:	f025 fa69 	bl	4f8ee <hid_int_ep_write>
        if (err) {
   2a41c:	4604      	mov	r4, r0
   2a41e:	b110      	cbz	r0, 2a426 <zmk_usb_hid_send_report+0x4a>
	z_impl_k_sem_give(sem);
   2a420:	4803      	ldr	r0, [pc, #12]	; (2a430 <zmk_usb_hid_send_report+0x54>)
   2a422:	f01d fbeb 	bl	47bfc <z_impl_k_sem_give>
}
   2a426:	4620      	mov	r0, r4
   2a428:	bd38      	pop	{r3, r4, r5, pc}
    switch (zmk_usb_get_status()) {
   2a42a:	f06f 0412 	mvn.w	r4, #18
   2a42e:	e7fa      	b.n	2a426 <zmk_usb_hid_send_report+0x4a>
   2a430:	20000ff4 	.word	0x20000ff4
   2a434:	20003ce4 	.word	0x20003ce4

0002a438 <main>:
#define ZMK_KSCAN_DEV DT_LABEL(ZMK_MATRIX_NODE_ID)

void main(void) {
    LOG_INF("Welcome to ZMK!\n");

    if (zmk_kscan_init(ZMK_KSCAN_DEV) != 0) {
   2a438:	4801      	ldr	r0, [pc, #4]	; (2a440 <main+0x8>)
   2a43a:	f7fe bc29 	b.w	28c90 <zmk_kscan_init>
   2a43e:	bf00      	nop
   2a440:	0005387b 	.word	0x0005387b

0002a444 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   2a444:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2a446:	4c09      	ldr	r4, [pc, #36]	; (2a46c <crc8_ccitt+0x28>)
   2a448:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   2a44a:	4291      	cmp	r1, r2
   2a44c:	d100      	bne.n	2a450 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   2a44e:	bd10      	pop	{r4, pc}
		val ^= p[i];
   2a450:	f811 3b01 	ldrb.w	r3, [r1], #1
   2a454:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2a456:	0903      	lsrs	r3, r0, #4
   2a458:	0100      	lsls	r0, r0, #4
   2a45a:	5ce3      	ldrb	r3, [r4, r3]
   2a45c:	b2c0      	uxtb	r0, r0
   2a45e:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2a460:	0918      	lsrs	r0, r3, #4
   2a462:	011b      	lsls	r3, r3, #4
   2a464:	5c20      	ldrb	r0, [r4, r0]
   2a466:	b2db      	uxtb	r3, r3
   2a468:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   2a46a:	e7ee      	b.n	2a44a <crc8_ccitt+0x6>
   2a46c:	00053881 	.word	0x00053881

0002a470 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   2a470:	680b      	ldr	r3, [r1, #0]
   2a472:	3301      	adds	r3, #1
   2a474:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   2a476:	4b01      	ldr	r3, [pc, #4]	; (2a47c <char_out+0xc>)
   2a478:	681b      	ldr	r3, [r3, #0]
   2a47a:	4718      	bx	r3
   2a47c:	20000460 	.word	0x20000460

0002a480 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   2a480:	b507      	push	{r0, r1, r2, lr}
   2a482:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   2a484:	2100      	movs	r1, #0
{
   2a486:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   2a488:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   2a48a:	4803      	ldr	r0, [pc, #12]	; (2a498 <vprintk+0x18>)
   2a48c:	a901      	add	r1, sp, #4
   2a48e:	f000 f8f7 	bl	2a680 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   2a492:	b003      	add	sp, #12
   2a494:	f85d fb04 	ldr.w	pc, [sp], #4
   2a498:	0002a471 	.word	0x0002a471

0002a49c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   2a49c:	b530      	push	{r4, r5, lr}
   2a49e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   2a4a0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   2a4a4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   2a4a6:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   2a4a8:	a901      	add	r1, sp, #4
   2a4aa:	4805      	ldr	r0, [pc, #20]	; (2a4c0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   2a4ac:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   2a4ae:	f000 f8e7 	bl	2a680 <cbvprintf>

	if (ctx.count < ctx.max) {
   2a4b2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   2a4b6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   2a4b8:	bfb8      	it	lt
   2a4ba:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   2a4bc:	b005      	add	sp, #20
   2a4be:	bd30      	pop	{r4, r5, pc}
   2a4c0:	0004964f 	.word	0x0004964f

0002a4c4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   2a4c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a4c8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   2a4cc:	f019 0808 	ands.w	r8, r9, #8
{
   2a4d0:	4604      	mov	r4, r0
   2a4d2:	4693      	mov	fp, r2
	if (processing) {
   2a4d4:	d00d      	beq.n	2a4f2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   2a4d6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   2a4d8:	bf0c      	ite	eq
   2a4da:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   2a4de:	f049 0920 	orrne.w	r9, r9, #32
   2a4e2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   2a4e6:	f38b 8811 	msr	BASEPRI, fp
   2a4ea:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   2a4ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a4f2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   2a4f6:	2902      	cmp	r1, #2
   2a4f8:	d10d      	bne.n	2a516 <process_event+0x52>
			evt = process_recheck(mgr);
   2a4fa:	4620      	mov	r0, r4
   2a4fc:	f01f f8ef 	bl	496de <process_recheck>
		if (evt == EVT_NOP) {
   2a500:	2800      	cmp	r0, #0
   2a502:	d0f0      	beq.n	2a4e6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   2a504:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a506:	8b23      	ldrh	r3, [r4, #24]
   2a508:	2804      	cmp	r0, #4
   2a50a:	d869      	bhi.n	2a5e0 <process_event+0x11c>
   2a50c:	e8df f000 	tbb	[pc, r0]
   2a510:	5a506803 	.word	0x5a506803
   2a514:	61          	.byte	0x61
   2a515:	00          	.byte	0x00
			res = mgr->last_res;
   2a516:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a518:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   2a51a:	2f00      	cmp	r7, #0
   2a51c:	da15      	bge.n	2a54a <process_event+0x86>
		*clients = mgr->clients;
   2a51e:	6825      	ldr	r5, [r4, #0]
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   2a520:	e9c4 8800 	strd	r8, r8, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a524:	f021 0107 	bic.w	r1, r1, #7
   2a528:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2a52c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   2a52e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2a530:	8b21      	ldrh	r1, [r4, #24]
   2a532:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2a536:	45ca      	cmp	sl, r9
   2a538:	d002      	beq.n	2a540 <process_event+0x7c>
		if (do_monitors
   2a53a:	68a3      	ldr	r3, [r4, #8]
   2a53c:	2b00      	cmp	r3, #0
   2a53e:	d152      	bne.n	2a5e6 <process_event+0x122>
		    || !sys_slist_is_empty(&clients)
   2a540:	b90d      	cbnz	r5, 2a546 <process_event+0x82>
		    || (transit != NULL)) {
   2a542:	2e00      	cmp	r6, #0
   2a544:	d069      	beq.n	2a61a <process_event+0x156>
   2a546:	2300      	movs	r3, #0
   2a548:	e04e      	b.n	2a5e8 <process_event+0x124>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a54a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   2a54e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   2a550:	2a01      	cmp	r2, #1
   2a552:	d81c      	bhi.n	2a58e <process_event+0xca>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a554:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   2a558:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   2a55a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a55c:	b289      	uxth	r1, r1
   2a55e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   2a562:	d10a      	bne.n	2a57a <process_event+0xb6>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2a564:	b13d      	cbz	r5, 2a576 <process_event+0xb2>
   2a566:	8b63      	ldrh	r3, [r4, #26]
   2a568:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   2a56a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   2a56c:	3301      	adds	r3, #1
   2a56e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2a570:	2a00      	cmp	r2, #0
   2a572:	d1fa      	bne.n	2a56a <process_event+0xa6>
   2a574:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a576:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   2a57a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2a57c:	4620      	mov	r0, r4
   2a57e:	f01f f8ae 	bl	496de <process_recheck>
   2a582:	4606      	mov	r6, r0
   2a584:	2800      	cmp	r0, #0
   2a586:	d0d3      	beq.n	2a530 <process_event+0x6c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2a588:	f041 0120 	orr.w	r1, r1, #32
   2a58c:	e7ce      	b.n	2a52c <process_event+0x68>
	} else if (state == ONOFF_STATE_TO_OFF) {
   2a58e:	2b04      	cmp	r3, #4
   2a590:	d10b      	bne.n	2a5aa <process_event+0xe6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a592:	f021 0107 	bic.w	r1, r1, #7
   2a596:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2a598:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2a59a:	4620      	mov	r0, r4
   2a59c:	f01f f89f 	bl	496de <process_recheck>
   2a5a0:	4605      	mov	r5, r0
   2a5a2:	b118      	cbz	r0, 2a5ac <process_event+0xe8>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2a5a4:	f041 0120 	orr.w	r1, r1, #32
   2a5a8:	8321      	strh	r1, [r4, #24]
   2a5aa:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   2a5ac:	462e      	mov	r6, r5
   2a5ae:	e7bf      	b.n	2a530 <process_event+0x6c>
			transit = mgr->transitions->start;
   2a5b0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a5b2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   2a5b6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a5b8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   2a5bc:	8323      	strh	r3, [r4, #24]
}
   2a5be:	2500      	movs	r5, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a5c0:	462f      	mov	r7, r5
   2a5c2:	e7b5      	b.n	2a530 <process_event+0x6c>
			transit = mgr->transitions->stop;
   2a5c4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a5c6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   2a5ca:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a5cc:	f043 0304 	orr.w	r3, r3, #4
   2a5d0:	e7f4      	b.n	2a5bc <process_event+0xf8>
			transit = mgr->transitions->reset;
   2a5d2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a5d4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   2a5d8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a5da:	f043 0305 	orr.w	r3, r3, #5
   2a5de:	e7ed      	b.n	2a5bc <process_event+0xf8>
   2a5e0:	2500      	movs	r5, #0
   2a5e2:	462e      	mov	r6, r5
   2a5e4:	e7ec      	b.n	2a5c0 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   2a5e6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2a5e8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   2a5ec:	8321      	strh	r1, [r4, #24]
   2a5ee:	f38b 8811 	msr	BASEPRI, fp
   2a5f2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   2a5f6:	b9fb      	cbnz	r3, 2a638 <process_event+0x174>
	while (!sys_slist_is_empty(list)) {
   2a5f8:	bb85      	cbnz	r5, 2a65c <process_event+0x198>
			if (transit != NULL) {
   2a5fa:	b116      	cbz	r6, 2a602 <process_event+0x13e>
				transit(mgr, transition_complete);
   2a5fc:	491f      	ldr	r1, [pc, #124]	; (2a67c <process_event+0x1b8>)
   2a5fe:	4620      	mov	r0, r4
   2a600:	47b0      	blx	r6
	__asm__ volatile(
   2a602:	f04f 0320 	mov.w	r3, #32
   2a606:	f3ef 8b11 	mrs	fp, BASEPRI
   2a60a:	f383 8812 	msr	BASEPRI_MAX, r3
   2a60e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   2a612:	8b23      	ldrh	r3, [r4, #24]
   2a614:	f023 0308 	bic.w	r3, r3, #8
   2a618:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   2a61a:	8b23      	ldrh	r3, [r4, #24]
   2a61c:	06da      	lsls	r2, r3, #27
   2a61e:	d525      	bpl.n	2a66c <process_event+0x1a8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   2a620:	f023 0310 	bic.w	r3, r3, #16
   2a624:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   2a626:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   2a628:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   2a62c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   2a630:	2900      	cmp	r1, #0
   2a632:	f47f af60 	bne.w	2a4f6 <process_event+0x32>
out:
   2a636:	e756      	b.n	2a4e6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   2a638:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2a63a:	2900      	cmp	r1, #0
   2a63c:	d0dc      	beq.n	2a5f8 <process_event+0x134>
	return node->next;
   2a63e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   2a642:	f8d1 b004 	ldr.w	fp, [r1, #4]
   2a646:	463b      	mov	r3, r7
   2a648:	4652      	mov	r2, sl
   2a64a:	4620      	mov	r0, r4
   2a64c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2a64e:	f1b9 0f00 	cmp.w	r9, #0
   2a652:	d0d1      	beq.n	2a5f8 <process_event+0x134>
   2a654:	4649      	mov	r1, r9
   2a656:	f8d9 9000 	ldr.w	r9, [r9]
   2a65a:	e7f2      	b.n	2a642 <process_event+0x17e>
   2a65c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   2a65e:	463b      	mov	r3, r7
   2a660:	4652      	mov	r2, sl
   2a662:	4620      	mov	r0, r4
   2a664:	682d      	ldr	r5, [r5, #0]
   2a666:	f01f f856 	bl	49716 <notify_one>
   2a66a:	e7c5      	b.n	2a5f8 <process_event+0x134>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   2a66c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   2a670:	bf1e      	ittt	ne
   2a672:	f023 0320 	bicne.w	r3, r3, #32
   2a676:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   2a678:	2102      	movne	r1, #2
   2a67a:	e7d5      	b.n	2a628 <process_event+0x164>
   2a67c:	00049743 	.word	0x00049743

0002a680 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
   2a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a684:	b08d      	sub	sp, #52	; 0x34
   2a686:	461d      	mov	r5, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
   2a688:	1e53      	subs	r3, r2, #1
{
   2a68a:	9001      	str	r0, [sp, #4]
   2a68c:	468a      	mov	sl, r1
	fmt--;
   2a68e:	9302      	str	r3, [sp, #8]
	size_t count = 0;
   2a690:	f04f 0900 	mov.w	r9, #0

start:
	while (*++fmt != '%') {
   2a694:	9b02      	ldr	r3, [sp, #8]
   2a696:	7858      	ldrb	r0, [r3, #1]
   2a698:	2825      	cmp	r0, #37	; 0x25
   2a69a:	f103 0401 	add.w	r4, r3, #1
   2a69e:	d120      	bne.n	2a6e2 <cbvprintf+0x62>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
   2a6a0:	2100      	movs	r1, #0

	for (fmt++ ; ; fmt++) {
   2a6a2:	461e      	mov	r6, r3
	precision = -1;
   2a6a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	for (fmt++ ; ; fmt++) {
   2a6a8:	3602      	adds	r6, #2
	length_mod = 0;
   2a6aa:	460a      	mov	r2, r1
	padding_mode = 0;
   2a6ac:	9103      	str	r1, [sp, #12]
	min_width = -1;
   2a6ae:	463c      	mov	r4, r7
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
   2a6b0:	f04f 0c0a 	mov.w	ip, #10
		switch (*fmt) {
   2a6b4:	7833      	ldrb	r3, [r6, #0]
   2a6b6:	9602      	str	r6, [sp, #8]
   2a6b8:	2b39      	cmp	r3, #57	; 0x39
   2a6ba:	f106 0601 	add.w	r6, r6, #1
   2a6be:	d859      	bhi.n	2a774 <cbvprintf+0xf4>
   2a6c0:	2b1f      	cmp	r3, #31
   2a6c2:	d818      	bhi.n	2a6f6 <cbvprintf+0x76>
   2a6c4:	2b00      	cmp	r3, #0
   2a6c6:	f000 81e8 	beq.w	2aa9a <cbvprintf+0x41a>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
   2a6ca:	9b01      	ldr	r3, [sp, #4]
   2a6cc:	4651      	mov	r1, sl
   2a6ce:	2025      	movs	r0, #37	; 0x25
   2a6d0:	4798      	blx	r3
			OUTC(*fmt);
   2a6d2:	9b02      	ldr	r3, [sp, #8]
   2a6d4:	4651      	mov	r1, sl
   2a6d6:	7818      	ldrb	r0, [r3, #0]
   2a6d8:	9b01      	ldr	r3, [sp, #4]
   2a6da:	4798      	blx	r3
   2a6dc:	f109 0902 	add.w	r9, r9, #2
			goto start;
   2a6e0:	e7d8      	b.n	2a694 <cbvprintf+0x14>
		if (*fmt == '\0') {
   2a6e2:	2800      	cmp	r0, #0
   2a6e4:	f000 81d9 	beq.w	2aa9a <cbvprintf+0x41a>
		OUTC(*fmt);
   2a6e8:	9b01      	ldr	r3, [sp, #4]
   2a6ea:	4651      	mov	r1, sl
   2a6ec:	4798      	blx	r3
   2a6ee:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
   2a6f2:	9402      	str	r4, [sp, #8]
   2a6f4:	e7ce      	b.n	2a694 <cbvprintf+0x14>
		switch (*fmt) {
   2a6f6:	f1a3 0020 	sub.w	r0, r3, #32
   2a6fa:	2819      	cmp	r0, #25
   2a6fc:	d8e5      	bhi.n	2a6ca <cbvprintf+0x4a>
   2a6fe:	f20f 0e08 	addw	lr, pc, #8
   2a702:	f85e f020 	ldr.w	pc, [lr, r0, lsl #2]
   2a706:	bf00      	nop
   2a708:	0002a771 	.word	0x0002a771
   2a70c:	0002a6cb 	.word	0x0002a6cb
   2a710:	0002a6cb 	.word	0x0002a6cb
   2a714:	0002a771 	.word	0x0002a771
   2a718:	0002a6cb 	.word	0x0002a6cb
   2a71c:	0002a7f5 	.word	0x0002a7f5
   2a720:	0002a6cb 	.word	0x0002a6cb
   2a724:	0002a6cb 	.word	0x0002a6cb
   2a728:	0002a6cb 	.word	0x0002a6cb
   2a72c:	0002a6cb 	.word	0x0002a6cb
   2a730:	0002a839 	.word	0x0002a839
   2a734:	0002a771 	.word	0x0002a771
   2a738:	0002a6cb 	.word	0x0002a6cb
   2a73c:	0002a84b 	.word	0x0002a84b
   2a740:	0002a803 	.word	0x0002a803
   2a744:	0002a6cb 	.word	0x0002a6cb
   2a748:	0002a80f 	.word	0x0002a80f
   2a74c:	0002a82b 	.word	0x0002a82b
   2a750:	0002a82b 	.word	0x0002a82b
   2a754:	0002a82b 	.word	0x0002a82b
   2a758:	0002a82b 	.word	0x0002a82b
   2a75c:	0002a82b 	.word	0x0002a82b
   2a760:	0002a82b 	.word	0x0002a82b
   2a764:	0002a82b 	.word	0x0002a82b
   2a768:	0002a82b 	.word	0x0002a82b
   2a76c:	0002a82b 	.word	0x0002a82b
   2a770:	4619      	mov	r1, r3
   2a772:	e79f      	b.n	2a6b4 <cbvprintf+0x34>
   2a774:	2b58      	cmp	r3, #88	; 0x58
   2a776:	f000 810d 	beq.w	2a994 <cbvprintf+0x314>
   2a77a:	f1a3 0063 	sub.w	r0, r3, #99	; 0x63
   2a77e:	fa5f fe80 	uxtb.w	lr, r0
   2a782:	f1be 0f17 	cmp.w	lr, #23
   2a786:	d8a0      	bhi.n	2a6ca <cbvprintf+0x4a>
   2a788:	2817      	cmp	r0, #23
   2a78a:	d89e      	bhi.n	2a6ca <cbvprintf+0x4a>
   2a78c:	f20f 0e04 	addw	lr, pc, #4
   2a790:	f85e f020 	ldr.w	pc, [lr, r0, lsl #2]
   2a794:	0002a9f3 	.word	0x0002a9f3
   2a798:	0002a871 	.word	0x0002a871
   2a79c:	0002a6cb 	.word	0x0002a6cb
   2a7a0:	0002a6cb 	.word	0x0002a6cb
   2a7a4:	0002a6cb 	.word	0x0002a6cb
   2a7a8:	0002a851 	.word	0x0002a851
   2a7ac:	0002a871 	.word	0x0002a871
   2a7b0:	0002a6cb 	.word	0x0002a6cb
   2a7b4:	0002a6cb 	.word	0x0002a6cb
   2a7b8:	0002a851 	.word	0x0002a851
   2a7bc:	0002a6cb 	.word	0x0002a6cb
   2a7c0:	0002a6cb 	.word	0x0002a6cb
   2a7c4:	0002a6cb 	.word	0x0002a6cb
   2a7c8:	0002a941 	.word	0x0002a941
   2a7cc:	0002a6cb 	.word	0x0002a6cb
   2a7d0:	0002a6cb 	.word	0x0002a6cb
   2a7d4:	0002a9d5 	.word	0x0002a9d5
   2a7d8:	0002a6cb 	.word	0x0002a6cb
   2a7dc:	0002a871 	.word	0x0002a871
   2a7e0:	0002a6cb 	.word	0x0002a6cb
   2a7e4:	0002a6cb 	.word	0x0002a6cb
   2a7e8:	0002a941 	.word	0x0002a941
   2a7ec:	0002a6cb 	.word	0x0002a6cb
   2a7f0:	0002a851 	.word	0x0002a851
			OUTC('%');
   2a7f4:	9b01      	ldr	r3, [sp, #4]
   2a7f6:	4651      	mov	r1, sl
   2a7f8:	2025      	movs	r0, #37	; 0x25
   2a7fa:	4798      	blx	r3
   2a7fc:	f109 0901 	add.w	r9, r9, #1
			goto start;
   2a800:	e748      	b.n	2a694 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
   2a802:	9b03      	ldr	r3, [sp, #12]
   2a804:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   2a808:	9303      	str	r3, [sp, #12]
			precision = 0;
   2a80a:	2700      	movs	r7, #0
			continue;
   2a80c:	e752      	b.n	2a6b4 <cbvprintf+0x34>
			if (min_width < 0 && precision < 0 && !padding_mode) {
   2a80e:	2c00      	cmp	r4, #0
   2a810:	da0b      	bge.n	2a82a <cbvprintf+0x1aa>
   2a812:	2f00      	cmp	r7, #0
   2a814:	da0b      	bge.n	2a82e <cbvprintf+0x1ae>
   2a816:	9803      	ldr	r0, [sp, #12]
   2a818:	2800      	cmp	r0, #0
   2a81a:	f000 8136 	beq.w	2aa8a <cbvprintf+0x40a>
				min_width = 10 * min_width + *fmt - '0';
   2a81e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2a822:	fb0c 3404 	mla	r4, ip, r4, r3
   2a826:	3c30      	subs	r4, #48	; 0x30
   2a828:	e744      	b.n	2a6b4 <cbvprintf+0x34>
			if (precision >= 0) {
   2a82a:	2f00      	cmp	r7, #0
   2a82c:	dbf7      	blt.n	2a81e <cbvprintf+0x19e>
				precision = 10 * precision + *fmt - '0';
   2a82e:	fb0c 3307 	mla	r3, ip, r7, r3
   2a832:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
   2a836:	e73d      	b.n	2a6b4 <cbvprintf+0x34>
			if (precision >= 0) {
   2a838:	2f00      	cmp	r7, #0
				precision = va_arg(ap, int);
   2a83a:	f855 3b04 	ldr.w	r3, [r5], #4
			if (precision >= 0) {
   2a83e:	f280 8126 	bge.w	2aa8e <cbvprintf+0x40e>
				if (min_width < 0) {
   2a842:	2b00      	cmp	r3, #0
   2a844:	f280 8125 	bge.w	2aa92 <cbvprintf+0x412>
					min_width = -min_width;
   2a848:	425c      	negs	r4, r3
		switch (*fmt) {
   2a84a:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
   2a84c:	9303      	str	r3, [sp, #12]
   2a84e:	e731      	b.n	2a6b4 <cbvprintf+0x34>
			if (*fmt == 'h' && length_mod == 'h') {
   2a850:	2b68      	cmp	r3, #104	; 0x68
   2a852:	d103      	bne.n	2a85c <cbvprintf+0x1dc>
   2a854:	2a68      	cmp	r2, #104	; 0x68
   2a856:	d106      	bne.n	2a866 <cbvprintf+0x1e6>
				length_mod = 'H';
   2a858:	2248      	movs	r2, #72	; 0x48
   2a85a:	e72b      	b.n	2a6b4 <cbvprintf+0x34>
			} else if (*fmt == 'l' && length_mod == 'l') {
   2a85c:	2b6c      	cmp	r3, #108	; 0x6c
   2a85e:	d102      	bne.n	2a866 <cbvprintf+0x1e6>
   2a860:	2a6c      	cmp	r2, #108	; 0x6c
   2a862:	f000 8118 	beq.w	2aa96 <cbvprintf+0x416>
			} else if (length_mod == '\0') {
   2a866:	2a00      	cmp	r2, #0
   2a868:	f47f af2f 	bne.w	2a6ca <cbvprintf+0x4a>
   2a86c:	461a      	mov	r2, r3
		switch (*fmt) {
   2a86e:	e721      	b.n	2a6b4 <cbvprintf+0x34>
			if (length_mod == 'z') {
   2a870:	2a7a      	cmp	r2, #122	; 0x7a
   2a872:	d106      	bne.n	2a882 <cbvprintf+0x202>
			} else if (*fmt == 'u') {
   2a874:	2b75      	cmp	r3, #117	; 0x75
				precision = va_arg(ap, int);
   2a876:	f855 6b04 	ldr.w	r6, [r5], #4
			} else if (*fmt == 'u') {
   2a87a:	d115      	bne.n	2a8a8 <cbvprintf+0x228>
				d = va_arg(ap, unsigned int);
   2a87c:	f04f 0b00 	mov.w	fp, #0
   2a880:	e00c      	b.n	2a89c <cbvprintf+0x21c>
			} else if (length_mod == 'l') {
   2a882:	2a6c      	cmp	r2, #108	; 0x6c
   2a884:	d0f6      	beq.n	2a874 <cbvprintf+0x1f4>
			} else if (length_mod == 'L') {
   2a886:	2a4c      	cmp	r2, #76	; 0x4c
   2a888:	d1f4      	bne.n	2a874 <cbvprintf+0x1f4>
					unsigned long long llu =
   2a88a:	3507      	adds	r5, #7
   2a88c:	f025 0207 	bic.w	r2, r5, #7
				if (*fmt == 'u') {
   2a890:	2b75      	cmp	r3, #117	; 0x75
					unsigned long long llu =
   2a892:	e9d2 6b00 	ldrd	r6, fp, [r2]
   2a896:	f102 0508 	add.w	r5, r2, #8
				if (*fmt == 'u') {
   2a89a:	d107      	bne.n	2a8ac <cbvprintf+0x22c>
			} else if (special == ' ') {
   2a89c:	2920      	cmp	r1, #32
   2a89e:	d146      	bne.n	2a92e <cbvprintf+0x2ae>
				prefix = " ";
   2a8a0:	f8df 8200 	ldr.w	r8, [pc, #512]	; 2aaa4 <cbvprintf+0x424>
				min_width--;
   2a8a4:	3c01      	subs	r4, #1
   2a8a6:	e00a      	b.n	2a8be <cbvprintf+0x23e>
				d = va_arg(ap, int);
   2a8a8:	ea4f 7be6 	mov.w	fp, r6, asr #31
			if (*fmt != 'u' && (int_value_type)d < 0) {
   2a8ac:	f1bb 0f00 	cmp.w	fp, #0
   2a8b0:	daf4      	bge.n	2a89c <cbvprintf+0x21c>
				d = -d;
   2a8b2:	4276      	negs	r6, r6
				prefix = "-";
   2a8b4:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 2aaa8 <cbvprintf+0x428>
				d = -d;
   2a8b8:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
   2a8bc:	3c01      	subs	r4, #1
	int i = 0;
   2a8be:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   2a8c2:	9305      	str	r3, [sp, #20]
   2a8c4:	2300      	movs	r3, #0
   2a8c6:	9304      	str	r3, [sp, #16]
		unsigned int c = num % base;
   2a8c8:	4630      	mov	r0, r6
   2a8ca:	4659      	mov	r1, fp
   2a8cc:	220a      	movs	r2, #10
   2a8ce:	2300      	movs	r3, #0
   2a8d0:	f7fb fc16 	bl	26100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
   2a8d4:	f8dd c010 	ldr.w	ip, [sp, #16]
   2a8d8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   2a8dc:	9304      	str	r3, [sp, #16]
   2a8de:	9b05      	ldr	r3, [sp, #20]
   2a8e0:	3230      	adds	r2, #48	; 0x30
   2a8e2:	f803 2d01 	strb.w	r2, [r3, #-1]!
   2a8e6:	4632      	mov	r2, r6
   2a8e8:	9305      	str	r3, [sp, #20]
	} while (num);
   2a8ea:	2a0a      	cmp	r2, #10
   2a8ec:	465b      	mov	r3, fp
   2a8ee:	f173 0300 	sbcs.w	r3, r3, #0
		num /= base;
   2a8f2:	4606      	mov	r6, r0
   2a8f4:	468b      	mov	fp, r1
	} while (num);
   2a8f6:	d2e7      	bcs.n	2a8c8 <cbvprintf+0x248>
	return -i;
   2a8f8:	f1cc 0301 	rsb	r3, ip, #1
			data = buf + sizeof(buf) - data_len;
   2a8fc:	f10c 0230 	add.w	r2, ip, #48	; 0x30
			data = buf + sizeof(buf) - data_len;
   2a900:	eb0d 0602 	add.w	r6, sp, r2
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   2a904:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
   2a906:	f1a6 0604 	sub.w	r6, r6, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   2a90a:	da04      	bge.n	2a916 <cbvprintf+0x296>
   2a90c:	9a03      	ldr	r2, [sp, #12]
   2a90e:	f012 0f01 	tst.w	r2, #1
   2a912:	bf18      	it	ne
   2a914:	4627      	movne	r7, r4
		precision -= data_len;
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
   2a916:	9a03      	ldr	r2, [sp, #12]
		precision -= data_len;
   2a918:	eba7 0b03 	sub.w	fp, r7, r3
		if (precision > 0) {
   2a91c:	f1bb 0f00 	cmp.w	fp, #0
		min_width -= data_len;
   2a920:	bfd4      	ite	le
   2a922:	1ae4      	suble	r4, r4, r3
			min_width -= precision;
   2a924:	1be4      	subgt	r4, r4, r7
		if (!(padding_mode & PAD_TAIL)) {
   2a926:	0792      	lsls	r2, r2, #30
   2a928:	d47a      	bmi.n	2aa20 <cbvprintf+0x3a0>
   2a92a:	4627      	mov	r7, r4
   2a92c:	e071      	b.n	2aa12 <cbvprintf+0x392>
			} else if (special == '+') {
   2a92e:	292b      	cmp	r1, #43	; 0x2b
				prefix = "+";
   2a930:	bf0a      	itet	eq
   2a932:	f8df 8178 	ldreq.w	r8, [pc, #376]	; 2aaac <cbvprintf+0x42c>
	prefix = "";
   2a936:	f8df 8178 	ldrne.w	r8, [pc, #376]	; 2aab0 <cbvprintf+0x430>
				min_width--;
   2a93a:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
   2a93e:	e7be      	b.n	2a8be <cbvprintf+0x23e>
			if (*fmt == 'p') {
   2a940:	2b70      	cmp	r3, #112	; 0x70
   2a942:	d127      	bne.n	2a994 <cbvprintf+0x314>
				x = (uintptr_t)va_arg(ap, void *);
   2a944:	f855 2b04 	ldr.w	r2, [r5], #4
   2a948:	2000      	movs	r0, #0
				if (x == (uint_value_type)0) {
   2a94a:	2a00      	cmp	r2, #0
   2a94c:	d058      	beq.n	2aa00 <cbvprintf+0x380>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   2a94e:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2aab4 <cbvprintf+0x434>
				min_width -= 2;
   2a952:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
   2a954:	f003 0360 	and.w	r3, r3, #96	; 0x60
   2a958:	f1a3 0b39 	sub.w	fp, r3, #57	; 0x39
	int i = 0;
   2a95c:	f10d 0e2d 	add.w	lr, sp, #45	; 0x2d
   2a960:	2600      	movs	r6, #0
		unsigned int c = num % base;
   2a962:	f002 030f 	and.w	r3, r2, #15
		if (c >= 10) {
   2a966:	2b09      	cmp	r3, #9
			c += alpha;
   2a968:	bf88      	it	hi
   2a96a:	445b      	addhi	r3, fp
		buftop[--i] = c + '0';
   2a96c:	3330      	adds	r3, #48	; 0x30
   2a96e:	f80e 3d01 	strb.w	r3, [lr, #-1]!
	} while (num);
   2a972:	2a10      	cmp	r2, #16
		num /= base;
   2a974:	ea4f 1312 	mov.w	r3, r2, lsr #4
   2a978:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
   2a97c:	ea4f 1110 	mov.w	r1, r0, lsr #4
	} while (num);
   2a980:	f170 0000 	sbcs.w	r0, r0, #0
		buftop[--i] = c + '0';
   2a984:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
	} while (num);
   2a988:	d220      	bcs.n	2a9cc <cbvprintf+0x34c>
	return -i;
   2a98a:	f1c6 0301 	rsb	r3, r6, #1
			data = buf + sizeof(buf) - data_len;
   2a98e:	f106 0230 	add.w	r2, r6, #48	; 0x30
   2a992:	e7b5      	b.n	2a900 <cbvprintf+0x280>
			} else if (length_mod == 'l') {
   2a994:	2a6c      	cmp	r2, #108	; 0x6c
   2a996:	d103      	bne.n	2a9a0 <cbvprintf+0x320>
				x = va_arg(ap, unsigned int);
   2a998:	f855 2b04 	ldr.w	r2, [r5], #4
   2a99c:	2000      	movs	r0, #0
   2a99e:	e008      	b.n	2a9b2 <cbvprintf+0x332>
			} else if (length_mod == 'L') {
   2a9a0:	2a4c      	cmp	r2, #76	; 0x4c
   2a9a2:	d1f9      	bne.n	2a998 <cbvprintf+0x318>
				unsigned long long llx =
   2a9a4:	3507      	adds	r5, #7
   2a9a6:	f025 0007 	bic.w	r0, r5, #7
   2a9aa:	4605      	mov	r5, r0
   2a9ac:	6840      	ldr	r0, [r0, #4]
   2a9ae:	f855 2b08 	ldr.w	r2, [r5], #8
			if (special == '#') {
   2a9b2:	2923      	cmp	r1, #35	; 0x23
   2a9b4:	d107      	bne.n	2a9c6 <cbvprintf+0x346>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   2a9b6:	4e40      	ldr	r6, [pc, #256]	; (2aab8 <cbvprintf+0x438>)
   2a9b8:	493e      	ldr	r1, [pc, #248]	; (2aab4 <cbvprintf+0x434>)
   2a9ba:	f013 0f20 	tst.w	r3, #32
   2a9be:	bf0c      	ite	eq
   2a9c0:	46b0      	moveq	r8, r6
   2a9c2:	4688      	movne	r8, r1
   2a9c4:	e7c5      	b.n	2a952 <cbvprintf+0x2d2>
	prefix = "";
   2a9c6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 2aab0 <cbvprintf+0x430>
   2a9ca:	e7c3      	b.n	2a954 <cbvprintf+0x2d4>
		buftop[--i] = c + '0';
   2a9cc:	4666      	mov	r6, ip
		num /= base;
   2a9ce:	461a      	mov	r2, r3
   2a9d0:	4608      	mov	r0, r1
   2a9d2:	e7c6      	b.n	2a962 <cbvprintf+0x2e2>
			data = va_arg(ap, char *);
   2a9d4:	f855 6b04 	ldr.w	r6, [r5], #4
			data_len = strlen(data);
   2a9d8:	4630      	mov	r0, r6
   2a9da:	f020 ff22 	bl	4b822 <strlen>
			if (precision >= 0 && data_len > precision) {
   2a9de:	2f00      	cmp	r7, #0
			data_len = strlen(data);
   2a9e0:	4603      	mov	r3, r0
			if (precision >= 0 && data_len > precision) {
   2a9e2:	db02      	blt.n	2a9ea <cbvprintf+0x36a>
   2a9e4:	42b8      	cmp	r0, r7
   2a9e6:	bfa8      	it	ge
   2a9e8:	463b      	movge	r3, r7
   2a9ea:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2aab0 <cbvprintf+0x430>
   2a9ee:	2700      	movs	r7, #0
   2a9f0:	e791      	b.n	2a916 <cbvprintf+0x296>
			buf[0] = c;
   2a9f2:	f855 3b04 	ldr.w	r3, [r5], #4
   2a9f6:	f88d 3018 	strb.w	r3, [sp, #24]
			data = buf;
   2a9fa:	ae06      	add	r6, sp, #24
			data_len = 1;
   2a9fc:	2301      	movs	r3, #1
   2a9fe:	e7f4      	b.n	2a9ea <cbvprintf+0x36a>
					data = "(nil)";
   2aa00:	4e2e      	ldr	r6, [pc, #184]	; (2aabc <cbvprintf+0x43c>)
					data_len = 5;
   2aa02:	2305      	movs	r3, #5
   2aa04:	e7f1      	b.n	2a9ea <cbvprintf+0x36a>
   2aa06:	9303      	str	r3, [sp, #12]
			while (--min_width >= 0) {
				OUTC(' ');
   2aa08:	4651      	mov	r1, sl
   2aa0a:	9b01      	ldr	r3, [sp, #4]
   2aa0c:	2020      	movs	r0, #32
   2aa0e:	4798      	blx	r3
   2aa10:	9b03      	ldr	r3, [sp, #12]
			while (--min_width >= 0) {
   2aa12:	3f01      	subs	r7, #1
   2aa14:	d5f7      	bpl.n	2aa06 <cbvprintf+0x386>
   2aa16:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
   2aa1a:	3c01      	subs	r4, #1
   2aa1c:	4491      	add	r9, r2
   2aa1e:	1aa4      	subs	r4, r4, r2
   2aa20:	eba9 0708 	sub.w	r7, r9, r8
   2aa24:	e004      	b.n	2aa30 <cbvprintf+0x3b0>
   2aa26:	9303      	str	r3, [sp, #12]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
   2aa28:	4651      	mov	r1, sl
   2aa2a:	9b01      	ldr	r3, [sp, #4]
   2aa2c:	4798      	blx	r3
   2aa2e:	9b03      	ldr	r3, [sp, #12]
   2aa30:	eb07 0908 	add.w	r9, r7, r8
		while (*prefix) {
   2aa34:	f818 0b01 	ldrb.w	r0, [r8], #1
   2aa38:	2800      	cmp	r0, #0
   2aa3a:	d1f4      	bne.n	2aa26 <cbvprintf+0x3a6>
		precision -= data_len;
   2aa3c:	465f      	mov	r7, fp
		}
		while (--precision >= 0) {
   2aa3e:	3f01      	subs	r7, #1
   2aa40:	d50f      	bpl.n	2aa62 <cbvprintf+0x3e2>
   2aa42:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
   2aa46:	461f      	mov	r7, r3
			OUTC('0');
		}
		while (--data_len >= 0) {
   2aa48:	3f01      	subs	r7, #1
   2aa4a:	d511      	bpl.n	2aa70 <cbvprintf+0x3f0>
   2aa4c:	2b00      	cmp	r3, #0
   2aa4e:	bfa8      	it	ge
   2aa50:	449b      	addge	fp, r3
   2aa52:	4626      	mov	r6, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
   2aa54:	3e01      	subs	r6, #1
   2aa56:	d513      	bpl.n	2aa80 <cbvprintf+0x400>
   2aa58:	2c00      	cmp	r4, #0
   2aa5a:	bfa8      	it	ge
   2aa5c:	44a3      	addge	fp, r4
   2aa5e:	44d9      	add	r9, fp
   2aa60:	e618      	b.n	2a694 <cbvprintf+0x14>
   2aa62:	9303      	str	r3, [sp, #12]
			OUTC('0');
   2aa64:	4651      	mov	r1, sl
   2aa66:	9b01      	ldr	r3, [sp, #4]
   2aa68:	2030      	movs	r0, #48	; 0x30
   2aa6a:	4798      	blx	r3
   2aa6c:	9b03      	ldr	r3, [sp, #12]
   2aa6e:	e7e6      	b.n	2aa3e <cbvprintf+0x3be>
   2aa70:	9303      	str	r3, [sp, #12]
			OUTC(*data++);
   2aa72:	f816 0b01 	ldrb.w	r0, [r6], #1
   2aa76:	9b01      	ldr	r3, [sp, #4]
   2aa78:	4651      	mov	r1, sl
   2aa7a:	4798      	blx	r3
   2aa7c:	9b03      	ldr	r3, [sp, #12]
   2aa7e:	e7e3      	b.n	2aa48 <cbvprintf+0x3c8>
			OUTC(' ');
   2aa80:	9b01      	ldr	r3, [sp, #4]
   2aa82:	4651      	mov	r1, sl
   2aa84:	2020      	movs	r0, #32
   2aa86:	4798      	blx	r3
   2aa88:	e7e4      	b.n	2aa54 <cbvprintf+0x3d4>
				padding_mode = PAD_ZERO;
   2aa8a:	2301      	movs	r3, #1
   2aa8c:	e6de      	b.n	2a84c <cbvprintf+0x1cc>
				precision = va_arg(ap, int);
   2aa8e:	461f      	mov	r7, r3
   2aa90:	e610      	b.n	2a6b4 <cbvprintf+0x34>
   2aa92:	461c      	mov	r4, r3
   2aa94:	e60e      	b.n	2a6b4 <cbvprintf+0x34>
				length_mod = 'L';
   2aa96:	224c      	movs	r2, #76	; 0x4c
   2aa98:	e60c      	b.n	2a6b4 <cbvprintf+0x34>
		}

		goto start;
	}
}
   2aa9a:	4648      	mov	r0, r9
   2aa9c:	b00d      	add	sp, #52	; 0x34
   2aa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aaa2:	bf00      	nop
   2aaa4:	00053893 	.word	0x00053893
   2aaa8:	00053891 	.word	0x00053891
   2aaac:	00053895 	.word	0x00053895
   2aab0:	000538cb 	.word	0x000538cb
   2aab4:	00053897 	.word	0x00053897
   2aab8:	0005389a 	.word	0x0005389a
   2aabc:	0005389d 	.word	0x0005389d

0002aac0 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   2aac0:	b508      	push	{r3, lr}
   2aac2:	f04f 0220 	mov.w	r2, #32
   2aac6:	f3ef 8311 	mrs	r3, BASEPRI
   2aaca:	f382 8812 	msr	BASEPRI_MAX, r2
   2aace:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   2aad2:	f002 f903 	bl	2ccdc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   2aad6:	4803      	ldr	r0, [pc, #12]	; (2aae4 <sys_reboot+0x24>)
   2aad8:	f01e fdcc 	bl	49674 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   2aadc:	f001 fdbe 	bl	2c65c <arch_cpu_idle>
   2aae0:	e7fc      	b.n	2aadc <sys_reboot+0x1c>
   2aae2:	bf00      	nop
   2aae4:	000538a3 	.word	0x000538a3

0002aae8 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   2aae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   2aaea:	2407      	movs	r4, #7
   2aaec:	9402      	str	r4, [sp, #8]
   2aaee:	4c04      	ldr	r4, [pc, #16]	; (2ab00 <read_pnp_id+0x18>)
   2aaf0:	9401      	str	r4, [sp, #4]
   2aaf2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2aaf6:	9400      	str	r4, [sp, #0]
   2aaf8:	f023 facd 	bl	4e096 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   2aafc:	b004      	add	sp, #16
   2aafe:	bd10      	pop	{r4, pc}
   2ab00:	20000d77 	.word	0x20000d77

0002ab04 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   2ab04:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   2ab06:	4c08      	ldr	r4, [pc, #32]	; (2ab28 <read_blvl+0x24>)
{
   2ab08:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   2ab0a:	7824      	ldrb	r4, [r4, #0]
   2ab0c:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   2ab10:	2401      	movs	r4, #1
   2ab12:	9402      	str	r4, [sp, #8]
   2ab14:	f10d 0417 	add.w	r4, sp, #23
   2ab18:	9401      	str	r4, [sp, #4]
   2ab1a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2ab1e:	9400      	str	r4, [sp, #0]
   2ab20:	f023 fab9 	bl	4e096 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   2ab24:	b006      	add	sp, #24
   2ab26:	bd10      	pop	{r4, pc}
   2ab28:	20000d7e 	.word	0x20000d7e

0002ab2c <bt_bas_set_battery_level>:
{
	return battery_level;
}

int bt_bas_set_battery_level(uint8_t level)
{
   2ab2c:	b500      	push	{lr}
   2ab2e:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
   2ab30:	2864      	cmp	r0, #100	; 0x64
{
   2ab32:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
   2ab36:	d819      	bhi.n	2ab6c <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
   2ab38:	4b0e      	ldr	r3, [pc, #56]	; (2ab74 <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
   2ab3a:	2218      	movs	r2, #24
   2ab3c:	7018      	strb	r0, [r3, #0]
   2ab3e:	2100      	movs	r1, #0
   2ab40:	a802      	add	r0, sp, #8
   2ab42:	f020 fead 	bl	4b8a0 <memset>
	params.attr = attr;
   2ab46:	4b0c      	ldr	r3, [pc, #48]	; (2ab78 <bt_bas_set_battery_level+0x4c>)
   2ab48:	9303      	str	r3, [sp, #12]
	params.data = data;
   2ab4a:	f10d 0307 	add.w	r3, sp, #7
   2ab4e:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
   2ab50:	a902      	add	r1, sp, #8
	params.len = len;
   2ab52:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   2ab54:	2000      	movs	r0, #0
	params.len = len;
   2ab56:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   2ab5a:	f006 fecd 	bl	318f8 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   2ab5e:	f110 0f80 	cmn.w	r0, #128	; 0x80
   2ab62:	bf08      	it	eq
   2ab64:	2000      	moveq	r0, #0
}
   2ab66:	b009      	add	sp, #36	; 0x24
   2ab68:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2ab6c:	f06f 0015 	mvn.w	r0, #21
   2ab70:	e7f9      	b.n	2ab66 <bt_bas_set_battery_level+0x3a>
   2ab72:	bf00      	nop
   2ab74:	20000d7e 	.word	0x20000d7e
   2ab78:	00051e24 	.word	0x00051e24

0002ab7c <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   2ab7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2ab80:	460f      	mov	r7, r1
   2ab82:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab84:	2108      	movs	r1, #8
   2ab86:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   2ab88:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2abdc <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab8c:	f01f f90c 	bl	49da8 <nvs_al_size.isra.0>
	*addr -= ate_size;
   2ab90:	683c      	ldr	r4, [r7, #0]
   2ab92:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ab94:	4680      	mov	r8, r0
	*addr -= ate_size;
   2ab96:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   2ab98:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   2ab9c:	42ac      	cmp	r4, r5
   2ab9e:	d803      	bhi.n	2aba8 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   2aba0:	2000      	movs	r0, #0
}
   2aba2:	b003      	add	sp, #12
   2aba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2aba8:	2308      	movs	r3, #8
   2abaa:	466a      	mov	r2, sp
   2abac:	4621      	mov	r1, r4
   2abae:	4630      	mov	r0, r6
   2abb0:	f01f f86f 	bl	49c92 <nvs_flash_rd>
		if (rc) {
   2abb4:	2800      	cmp	r0, #0
   2abb6:	d1f4      	bne.n	2aba2 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   2abb8:	4669      	mov	r1, sp
   2abba:	4630      	mov	r0, r6
   2abbc:	f01f f8fe 	bl	49dbc <nvs_ate_valid>
   2abc0:	b140      	cbz	r0, 2abd4 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   2abc2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2abc6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   2abca:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   2abcc:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   2abd0:	4413      	add	r3, r2
   2abd2:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   2abd4:	eba4 0408 	sub.w	r4, r4, r8
   2abd8:	e7e0      	b.n	2ab9c <nvs_recover_last_ate+0x20>
   2abda:	bf00      	nop
   2abdc:	ffff0000 	.word	0xffff0000

0002abe0 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   2abe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2abe4:	4604      	mov	r4, r0
   2abe6:	b088      	sub	sp, #32
   2abe8:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   2abea:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   2abee:	4638      	mov	r0, r7
   2abf0:	f025 fca3 	bl	5053a <z_impl_k_mutex_init>
   2abf4:	4628      	mov	r0, r5
   2abf6:	f01c fc39 	bl	4746c <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   2abfa:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   2abfc:	2800      	cmp	r0, #0
   2abfe:	f000 8120 	beq.w	2ae42 <nvs_init+0x262>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   2ac02:	6883      	ldr	r3, [r0, #8]
   2ac04:	68db      	ldr	r3, [r3, #12]
   2ac06:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   2ac08:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   2ac0a:	b928      	cbnz	r0, 2ac18 <nvs_init+0x38>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
   2ac0c:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   2ac10:	4628      	mov	r0, r5
   2ac12:	b008      	add	sp, #32
   2ac14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   2ac18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   2ac1a:	6883      	ldr	r3, [r0, #8]
   2ac1c:	68db      	ldr	r3, [r3, #12]
   2ac1e:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   2ac20:	6803      	ldr	r3, [r0, #0]
   2ac22:	3b01      	subs	r3, #1
   2ac24:	2b1f      	cmp	r3, #31
   2ac26:	d8f1      	bhi.n	2ac0c <nvs_init+0x2c>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   2ac28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2ac2a:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   2ac2c:	aa05      	add	r2, sp, #20
   2ac2e:	f025 f84a 	bl	4fcc6 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   2ac32:	2800      	cmp	r0, #0
   2ac34:	d1ea      	bne.n	2ac0c <nvs_init+0x2c>
	if (!fs->sector_size || fs->sector_size % info.size) {
   2ac36:	89a5      	ldrh	r5, [r4, #12]
   2ac38:	2d00      	cmp	r5, #0
   2ac3a:	d0e7      	beq.n	2ac0c <nvs_init+0x2c>
   2ac3c:	9b06      	ldr	r3, [sp, #24]
   2ac3e:	fbb5 f2f3 	udiv	r2, r5, r3
   2ac42:	fb03 5512 	mls	r5, r3, r2, r5
   2ac46:	2d00      	cmp	r5, #0
   2ac48:	d1e0      	bne.n	2ac0c <nvs_init+0x2c>
	if (fs->sector_count < 2) {
   2ac4a:	89e3      	ldrh	r3, [r4, #14]
   2ac4c:	2b01      	cmp	r3, #1
   2ac4e:	d9dd      	bls.n	2ac0c <nvs_init+0x2c>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   2ac50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   2ac52:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   2ac54:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   2ac58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ac5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ac60:	4638      	mov	r0, r7
   2ac62:	f01c fedd 	bl	47a20 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ac66:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2ac68:	2108      	movs	r1, #8
   2ac6a:	f01f f89d 	bl	49da8 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   2ac6e:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ac70:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   2ac72:	89e3      	ldrh	r3, [r4, #14]
   2ac74:	fa1f fa85 	uxth.w	sl, r5
   2ac78:	4553      	cmp	r3, sl
   2ac7a:	d846      	bhi.n	2ad0a <nvs_init+0x12a>
	if (closed_sectors == fs->sector_count) {
   2ac7c:	89e3      	ldrh	r3, [r4, #14]
   2ac7e:	4543      	cmp	r3, r8
   2ac80:	f000 80d4 	beq.w	2ae2c <nvs_init+0x24c>
	if (i == fs->sector_count) {
   2ac84:	4553      	cmp	r3, sl
   2ac86:	d10b      	bne.n	2aca0 <nvs_init+0xc0>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   2ac88:	9900      	ldr	r1, [sp, #0]
   2ac8a:	2308      	movs	r3, #8
   2ac8c:	464a      	mov	r2, r9
   2ac8e:	1b89      	subs	r1, r1, r6
   2ac90:	4620      	mov	r0, r4
   2ac92:	f01f f836 	bl	49d02 <nvs_flash_cmp_const>
		if (!rc) {
   2ac96:	b918      	cbnz	r0, 2aca0 <nvs_init+0xc0>
			nvs_sector_advance(fs, &addr);
   2ac98:	89e0      	ldrh	r0, [r4, #14]
   2ac9a:	4669      	mov	r1, sp
   2ac9c:	f01f f879 	bl	49d92 <nvs_sector_advance.isra.0>
	rc = nvs_recover_last_ate(fs, &addr);
   2aca0:	4669      	mov	r1, sp
   2aca2:	4620      	mov	r0, r4
   2aca4:	f7ff ff6a 	bl	2ab7c <nvs_recover_last_ate>
	if (rc) {
   2aca8:	4605      	mov	r5, r0
   2acaa:	2800      	cmp	r0, #0
   2acac:	f040 80c0 	bne.w	2ae30 <nvs_init+0x250>
	fs->ate_wra = addr;
   2acb0:	9b00      	ldr	r3, [sp, #0]
   2acb2:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   2acb4:	ea4f 4813 	mov.w	r8, r3, lsr #16
   2acb8:	ea4f 4808 	mov.w	r8, r8, lsl #16
   2acbc:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   2acc0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   2acc4:	4299      	cmp	r1, r3
   2acc6:	d30e      	bcc.n	2ace6 <nvs_init+0x106>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2acc8:	2308      	movs	r3, #8
   2acca:	aa01      	add	r2, sp, #4
   2accc:	4620      	mov	r0, r4
   2acce:	f01e ffe0 	bl	49c92 <nvs_flash_rd>
		if (rc) {
   2acd2:	b9c0      	cbnz	r0, 2ad06 <nvs_init+0x126>
   2acd4:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   2acd6:	f813 2b01 	ldrb.w	r2, [r3], #1
   2acda:	4591      	cmp	r9, r2
   2acdc:	f040 80c1 	bne.w	2ae62 <nvs_init+0x282>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2ace0:	3001      	adds	r0, #1
   2ace2:	2808      	cmp	r0, #8
   2ace4:	d1f7      	bne.n	2acd6 <nvs_init+0xf6>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2ace6:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   2ace8:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2acea:	0c1b      	lsrs	r3, r3, #16
   2acec:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   2acee:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2acf0:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   2acf2:	f01f f84e 	bl	49d92 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   2acf6:	89a3      	ldrh	r3, [r4, #12]
   2acf8:	9900      	ldr	r1, [sp, #0]
   2acfa:	464a      	mov	r2, r9
   2acfc:	4620      	mov	r0, r4
   2acfe:	f01f f800 	bl	49d02 <nvs_flash_cmp_const>
	if (rc < 0) {
   2ad02:	2800      	cmp	r0, #0
   2ad04:	da25      	bge.n	2ad52 <nvs_init+0x172>
   2ad06:	4605      	mov	r5, r0
   2ad08:	e092      	b.n	2ae30 <nvs_init+0x250>
		       (uint16_t)(fs->sector_size - ate_size);
   2ad0a:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   2ad0c:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   2ad0e:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   2ad10:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2ad14:	464a      	mov	r2, r9
   2ad16:	2308      	movs	r3, #8
   2ad18:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   2ad1a:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2ad1c:	f01e fff1 	bl	49d02 <nvs_flash_cmp_const>
		if (rc) {
   2ad20:	b178      	cbz	r0, 2ad42 <nvs_init+0x162>
			nvs_sector_advance(fs, &addr);
   2ad22:	89e0      	ldrh	r0, [r4, #14]
   2ad24:	4669      	mov	r1, sp
   2ad26:	f01f f834 	bl	49d92 <nvs_sector_advance.isra.0>
			closed_sectors++;
   2ad2a:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2ad2e:	9900      	ldr	r1, [sp, #0]
   2ad30:	2308      	movs	r3, #8
   2ad32:	464a      	mov	r2, r9
   2ad34:	4620      	mov	r0, r4
			closed_sectors++;
   2ad36:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2ad3a:	f01e ffe2 	bl	49d02 <nvs_flash_cmp_const>
			if (!rc) {
   2ad3e:	2800      	cmp	r0, #0
   2ad40:	d09c      	beq.n	2ac7c <nvs_init+0x9c>
	for (i = 0; i < fs->sector_count; i++) {
   2ad42:	3501      	adds	r5, #1
   2ad44:	e795      	b.n	2ac72 <nvs_init+0x92>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2ad46:	2a00      	cmp	r2, #0
   2ad48:	f000 809f 	beq.w	2ae8a <nvs_init+0x2aa>
				rc = -ESPIPE;
   2ad4c:	f06f 051c 	mvn.w	r5, #28
   2ad50:	e06e      	b.n	2ae30 <nvs_init+0x250>
		addr = fs->ate_wra + ate_size;
   2ad52:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   2ad54:	d045      	beq.n	2ade2 <nvs_init+0x202>
		addr = fs->ate_wra + ate_size;
   2ad56:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   2ad5a:	f64f 79ff 	movw	r9, #65535	; 0xffff
   2ad5e:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   2ad60:	f8cd 8000 	str.w	r8, [sp]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   2ad64:	fa1f f288 	uxth.w	r2, r8
   2ad68:	1b9b      	subs	r3, r3, r6
   2ad6a:	429a      	cmp	r2, r3
   2ad6c:	d315      	bcc.n	2ad9a <nvs_init+0x1ba>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   2ad6e:	6861      	ldr	r1, [r4, #4]
   2ad70:	4620      	mov	r0, r4
   2ad72:	f01e ffeb 	bl	49d4c <nvs_flash_erase_sector>
		if (rc) {
   2ad76:	2800      	cmp	r0, #0
   2ad78:	d1c5      	bne.n	2ad06 <nvs_init+0x126>
		fs->ate_wra &= ADDR_SECT_MASK;
   2ad7a:	6863      	ldr	r3, [r4, #4]
   2ad7c:	4a45      	ldr	r2, [pc, #276]	; (2ae94 <nvs_init+0x2b4>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   2ad7e:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   2ad80:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   2ad82:	440b      	add	r3, r1
   2ad84:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   2ad88:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   2ad8a:	4013      	ands	r3, r2
   2ad8c:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   2ad8e:	4620      	mov	r0, r4
   2ad90:	f01f f909 	bl	49fa6 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2ad94:	2800      	cmp	r0, #0
   2ad96:	d03f      	beq.n	2ae18 <nvs_init+0x238>
   2ad98:	e7b5      	b.n	2ad06 <nvs_init+0x126>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ad9a:	2308      	movs	r3, #8
   2ad9c:	aa03      	add	r2, sp, #12
   2ad9e:	4641      	mov	r1, r8
   2ada0:	4620      	mov	r0, r4
   2ada2:	f01e ff76 	bl	49c92 <nvs_flash_rd>
			if (rc) {
   2ada6:	2800      	cmp	r0, #0
   2ada8:	d1ad      	bne.n	2ad06 <nvs_init+0x126>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   2adaa:	a903      	add	r1, sp, #12
   2adac:	4620      	mov	r0, r4
   2adae:	f01f f805 	bl	49dbc <nvs_ate_valid>
   2adb2:	b138      	cbz	r0, 2adc4 <nvs_init+0x1e4>
   2adb4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2adb8:	454b      	cmp	r3, r9
   2adba:	d103      	bne.n	2adc4 <nvs_init+0x1e4>
			    (gc_done_ate.id == 0xffff) &&
   2adbc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2adc0:	2b00      	cmp	r3, #0
   2adc2:	d041      	beq.n	2ae48 <nvs_init+0x268>
			addr += ate_size;
   2adc4:	44b0      	add	r8, r6
   2adc6:	e7ca      	b.n	2ad5e <nvs_init+0x17e>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   2adc8:	1a5b      	subs	r3, r3, r1
   2adca:	464a      	mov	r2, r9
   2adcc:	4620      	mov	r0, r4
   2adce:	f01e ff98 	bl	49d02 <nvs_flash_cmp_const>
		if (rc < 0) {
   2add2:	2800      	cmp	r0, #0
   2add4:	db97      	blt.n	2ad06 <nvs_init+0x126>
		if (!rc) {
   2add6:	d008      	beq.n	2adea <nvs_init+0x20a>
		fs->data_wra += fs->flash_parameters->write_block_size;
   2add8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2adda:	68a3      	ldr	r3, [r4, #8]
   2addc:	6812      	ldr	r2, [r2, #0]
   2adde:	4413      	add	r3, r2
   2ade0:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   2ade2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   2ade6:	428b      	cmp	r3, r1
   2ade8:	d8ee      	bhi.n	2adc8 <nvs_init+0x1e8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2adea:	6861      	ldr	r1, [r4, #4]
   2adec:	89a3      	ldrh	r3, [r4, #12]
   2adee:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   2adf2:	429a      	cmp	r2, r3
   2adf4:	d1ce      	bne.n	2ad94 <nvs_init+0x1b4>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   2adf6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2ae94 <nvs_init+0x2b4>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2adfa:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   2adfc:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2ae00:	4293      	cmp	r3, r2
   2ae02:	d0c7      	beq.n	2ad94 <nvs_init+0x1b4>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   2ae04:	4620      	mov	r0, r4
   2ae06:	f01e ffa1 	bl	49d4c <nvs_flash_erase_sector>
		if (rc) {
   2ae0a:	2800      	cmp	r0, #0
   2ae0c:	f47f af7b 	bne.w	2ad06 <nvs_init+0x126>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   2ae10:	6863      	ldr	r3, [r4, #4]
   2ae12:	ea03 0308 	and.w	r3, r3, r8
   2ae16:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   2ae18:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2ae1a:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   2ae1c:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2ae20:	429a      	cmp	r2, r3
   2ae22:	d105      	bne.n	2ae30 <nvs_init+0x250>
		rc = nvs_add_gc_done_ate(fs);
   2ae24:	4620      	mov	r0, r4
   2ae26:	f01f f8a9 	bl	49f7c <nvs_add_gc_done_ate>
   2ae2a:	e76c      	b.n	2ad06 <nvs_init+0x126>
		rc = -EDEADLK;
   2ae2c:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   2ae30:	4638      	mov	r0, r7
   2ae32:	f01c fe6d 	bl	47b10 <z_impl_k_mutex_unlock>
	if (rc) {
   2ae36:	2d00      	cmp	r5, #0
   2ae38:	f47f aeea 	bne.w	2ac10 <nvs_init+0x30>
	fs->ready = true;
   2ae3c:	2301      	movs	r3, #1
   2ae3e:	7423      	strb	r3, [r4, #16]
	return 0;
   2ae40:	e6e6      	b.n	2ac10 <nvs_init+0x30>
		return -ENXIO;
   2ae42:	f06f 0505 	mvn.w	r5, #5
   2ae46:	e6e3      	b.n	2ac10 <nvs_init+0x30>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2ae48:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   2ae4a:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2ae4c:	0c1b      	lsrs	r3, r3, #16
   2ae4e:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   2ae50:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2ae52:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   2ae54:	f01e ff9d 	bl	49d92 <nvs_sector_advance.isra.0>
			rc = nvs_flash_erase_sector(fs, addr);
   2ae58:	9900      	ldr	r1, [sp, #0]
   2ae5a:	4620      	mov	r0, r4
   2ae5c:	f01e ff76 	bl	49d4c <nvs_flash_erase_sector>
			goto end;
   2ae60:	e798      	b.n	2ad94 <nvs_init+0x1b4>
		if (nvs_ate_valid(fs, &last_ate)) {
   2ae62:	a901      	add	r1, sp, #4
   2ae64:	4620      	mov	r0, r4
   2ae66:	f01e ffa9 	bl	49dbc <nvs_ate_valid>
   2ae6a:	f8d4 a004 	ldr.w	sl, [r4, #4]
   2ae6e:	b160      	cbz	r0, 2ae8a <nvs_init+0x2aa>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   2ae70:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   2ae74:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2ae78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2ae7a:	4411      	add	r1, r2
   2ae7c:	f01e ff94 	bl	49da8 <nvs_al_size.isra.0>
   2ae80:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2ae82:	4550      	cmp	r0, sl
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   2ae84:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2ae86:	f43f af5e 	beq.w	2ad46 <nvs_init+0x166>
		fs->ate_wra -= ate_size;
   2ae8a:	ebaa 0306 	sub.w	r3, sl, r6
   2ae8e:	6063      	str	r3, [r4, #4]
   2ae90:	e716      	b.n	2acc0 <nvs_init+0xe0>
   2ae92:	bf00      	nop
   2ae94:	ffff0000 	.word	0xffff0000

0002ae98 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   2ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae9c:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   2ae9e:	7c03      	ldrb	r3, [r0, #16]
{
   2aea0:	b089      	sub	sp, #36	; 0x24
   2aea2:	4604      	mov	r4, r0
   2aea4:	4689      	mov	r9, r1
   2aea6:	4690      	mov	r8, r2
	if (!fs->ready) {
   2aea8:	2b00      	cmp	r3, #0
   2aeaa:	f000 80b2 	beq.w	2b012 <nvs_write+0x17a>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2aeae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   2aeb0:	2108      	movs	r1, #8
   2aeb2:	4610      	mov	r0, r2
   2aeb4:	f01e ff78 	bl	49da8 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   2aeb8:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2aeba:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   2aebc:	4610      	mov	r0, r2
   2aebe:	f01e ff73 	bl	49da8 <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   2aec2:	89a3      	ldrh	r3, [r4, #12]
   2aec4:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   2aec8:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   2aeca:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   2aecc:	f200 80a4 	bhi.w	2b018 <nvs_write+0x180>
   2aed0:	b11e      	cbz	r6, 2aeda <nvs_write+0x42>
	    ((len > 0) && (data == NULL))) {
   2aed2:	f1b8 0f00 	cmp.w	r8, #0
   2aed6:	f000 809f 	beq.w	2b018 <nvs_write+0x180>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   2aeda:	6863      	ldr	r3, [r4, #4]
   2aedc:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2aede:	aa04      	add	r2, sp, #16
   2aee0:	a903      	add	r1, sp, #12
   2aee2:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   2aee4:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2aee8:	f01e ffa0 	bl	49e2c <nvs_prev_ate>
		if (rc) {
   2aeec:	4605      	mov	r5, r0
   2aeee:	2800      	cmp	r0, #0
   2aef0:	d15a      	bne.n	2afa8 <nvs_write+0x110>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   2aef2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2aef6:	454b      	cmp	r3, r9
   2aef8:	d005      	beq.n	2af06 <nvs_write+0x6e>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   2aefa:	6862      	ldr	r2, [r4, #4]
   2aefc:	9b03      	ldr	r3, [sp, #12]
   2aefe:	429a      	cmp	r2, r3
   2af00:	d1ed      	bne.n	2aede <nvs_write+0x46>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   2af02:	b9de      	cbnz	r6, 2af3c <nvs_write+0xa4>
   2af04:	e050      	b.n	2afa8 <nvs_write+0x110>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   2af06:	a904      	add	r1, sp, #16
   2af08:	4620      	mov	r0, r4
   2af0a:	f01e ff57 	bl	49dbc <nvs_ate_valid>
   2af0e:	2800      	cmp	r0, #0
   2af10:	d0f3      	beq.n	2aefa <nvs_write+0x62>
		rd_addr += wlk_ate.offset;
   2af12:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
   2af16:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   2af1a:	b176      	cbz	r6, 2af3a <nvs_write+0xa2>
		} else if (len == wlk_ate.len) {
   2af1c:	429e      	cmp	r6, r3
   2af1e:	d10d      	bne.n	2af3c <nvs_write+0xa4>
		rd_addr &= ADDR_SECT_MASK;
   2af20:	ea4f 411b 	mov.w	r1, fp, lsr #16
   2af24:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   2af26:	4401      	add	r1, r0
   2af28:	4633      	mov	r3, r6
   2af2a:	4642      	mov	r2, r8
   2af2c:	4620      	mov	r0, r4
   2af2e:	f01e febe 	bl	49cae <nvs_flash_block_cmp>
			if (rc <= 0) {
   2af32:	2800      	cmp	r0, #0
   2af34:	dc02      	bgt.n	2af3c <nvs_write+0xa4>
   2af36:	4605      	mov	r5, r0
   2af38:	e036      	b.n	2afa8 <nvs_write+0x110>
			if (wlk_ate.len == 0U) {
   2af3a:	b3ab      	cbz	r3, 2afa8 <nvs_write+0x110>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   2af3c:	2f00      	cmp	r7, #0
   2af3e:	d137      	bne.n	2afb0 <nvs_write+0x118>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   2af40:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2af44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2af48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2af4c:	4650      	mov	r0, sl
   2af4e:	f01c fd67 	bl	47a20 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   2af52:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 2b020 <nvs_write+0x188>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   2af56:	89e3      	ldrh	r3, [r4, #14]
   2af58:	429d      	cmp	r5, r3
   2af5a:	d057      	beq.n	2b00c <nvs_write+0x174>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   2af5c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   2af60:	18f9      	adds	r1, r7, r3
   2af62:	428a      	cmp	r2, r1
   2af64:	d327      	bcc.n	2afb6 <nvs_write+0x11e>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2af66:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   2af6a:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   2af6c:	23ff      	movs	r3, #255	; 0xff
   2af6e:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   2af72:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   2af76:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
   2af7a:	f01e ff01 	bl	49d80 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   2af7e:	4632      	mov	r2, r6
   2af80:	4641      	mov	r1, r8
   2af82:	4620      	mov	r0, r4
   2af84:	f01e ffd6 	bl	49f34 <nvs_flash_data_wrt>
	if (rc) {
   2af88:	4603      	mov	r3, r0
   2af8a:	b938      	cbnz	r0, 2af9c <nvs_write+0x104>
	rc = nvs_flash_ate_wrt(fs, &entry);
   2af8c:	a906      	add	r1, sp, #24
   2af8e:	4620      	mov	r0, r4
   2af90:	f01e ffe3 	bl	49f5a <nvs_flash_ate_wrt>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   2af94:	2800      	cmp	r0, #0
   2af96:	bf14      	ite	ne
   2af98:	4603      	movne	r3, r0
   2af9a:	4633      	moveq	r3, r6
   2af9c:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   2af9e:	4650      	mov	r0, sl
   2afa0:	f01c fdb6 	bl	47b10 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
   2afa4:	9b01      	ldr	r3, [sp, #4]
   2afa6:	461d      	mov	r5, r3
}
   2afa8:	4628      	mov	r0, r5
   2afaa:	b009      	add	sp, #36	; 0x24
   2afac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
   2afb0:	4457      	add	r7, sl
   2afb2:	b2bf      	uxth	r7, r7
   2afb4:	e7c4      	b.n	2af40 <nvs_write+0xa8>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2afb6:	2108      	movs	r1, #8
   2afb8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2afba:	f01e fef5 	bl	49da8 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   2afbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2afc2:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   2afc6:	2300      	movs	r3, #0
   2afc8:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   2afcc:	1813      	adds	r3, r2, r0
   2afce:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   2afd2:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   2afd4:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   2afd8:	441a      	add	r2, r3
   2afda:	1a10      	subs	r0, r2, r0
   2afdc:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   2afde:	a806      	add	r0, sp, #24
   2afe0:	f01e fece 	bl	49d80 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   2afe4:	a906      	add	r1, sp, #24
   2afe6:	4620      	mov	r0, r4
   2afe8:	f01e ffb7 	bl	49f5a <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   2afec:	89e0      	ldrh	r0, [r4, #14]
   2afee:	1d21      	adds	r1, r4, #4
   2aff0:	f01e fecf 	bl	49d92 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   2aff4:	6863      	ldr	r3, [r4, #4]
   2aff6:	ea03 030b 	and.w	r3, r3, fp
   2affa:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   2affc:	4620      	mov	r0, r4
   2affe:	f01e ffd2 	bl	49fa6 <nvs_gc>
		if (rc) {
   2b002:	4603      	mov	r3, r0
   2b004:	2800      	cmp	r0, #0
   2b006:	d1c9      	bne.n	2af9c <nvs_write+0x104>
		gc_count++;
   2b008:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   2b00a:	e7a4      	b.n	2af56 <nvs_write+0xbe>
			rc = -ENOSPC;
   2b00c:	f06f 031b 	mvn.w	r3, #27
   2b010:	e7c4      	b.n	2af9c <nvs_write+0x104>
		return -EACCES;
   2b012:	f06f 050c 	mvn.w	r5, #12
   2b016:	e7c7      	b.n	2afa8 <nvs_write+0x110>
		return -EINVAL;
   2b018:	f06f 0515 	mvn.w	r5, #21
   2b01c:	e7c4      	b.n	2afa8 <nvs_write+0x110>
   2b01e:	bf00      	nop
   2b020:	ffff0000 	.word	0xffff0000

0002b024 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b024:	4b0c      	ldr	r3, [pc, #48]	; (2b058 <class_handler+0x34>)
{
   2b026:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b028:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b02a:	4e0c      	ldr	r6, [pc, #48]	; (2b05c <class_handler+0x38>)
   2b02c:	4b0c      	ldr	r3, [pc, #48]	; (2b060 <class_handler+0x3c>)
   2b02e:	42b3      	cmp	r3, r6
   2b030:	d303      	bcc.n	2b03a <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   2b032:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b036:	bcf0      	pop	{r4, r5, r6, r7}
   2b038:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   2b03a:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b03c:	42bd      	cmp	r5, r7
   2b03e:	d309      	bcc.n	2b054 <class_handler+0x30>
		if (iface->class_handler &&
   2b040:	691c      	ldr	r4, [r3, #16]
   2b042:	b13c      	cbz	r4, 2b054 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   2b044:	f895 c002 	ldrb.w	ip, [r5, #2]
   2b048:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   2b04a:	45ac      	cmp	ip, r5
   2b04c:	d102      	bne.n	2b054 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   2b04e:	4623      	mov	r3, r4
}
   2b050:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   2b052:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b054:	3324      	adds	r3, #36	; 0x24
   2b056:	e7ea      	b.n	2b02e <class_handler+0xa>
   2b058:	20003ce8 	.word	0x20003ce8
   2b05c:	20001244 	.word	0x20001244
   2b060:	20001220 	.word	0x20001220

0002b064 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   2b064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b068:	4c13      	ldr	r4, [pc, #76]	; (2b0b8 <custom_handler+0x54>)
   2b06a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2b0bc <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b06e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2b0c0 <custom_handler+0x5c>
{
   2b072:	4605      	mov	r5, r0
   2b074:	460e      	mov	r6, r1
   2b076:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b078:	4544      	cmp	r4, r8
   2b07a:	d303      	bcc.n	2b084 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   2b07c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   2b084:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b086:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   2b08a:	429a      	cmp	r2, r3
   2b08c:	d312      	bcc.n	2b0b4 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   2b08e:	69a3      	ldr	r3, [r4, #24]
   2b090:	b183      	cbz	r3, 2b0b4 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   2b092:	7890      	ldrb	r0, [r2, #2]
   2b094:	7929      	ldrb	r1, [r5, #4]
   2b096:	4288      	cmp	r0, r1
   2b098:	d105      	bne.n	2b0a6 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   2b09a:	463a      	mov	r2, r7
   2b09c:	4631      	mov	r1, r6
   2b09e:	4628      	mov	r0, r5
}
   2b0a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   2b0a4:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   2b0a6:	7952      	ldrb	r2, [r2, #5]
   2b0a8:	2a01      	cmp	r2, #1
   2b0aa:	d103      	bne.n	2b0b4 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   2b0ac:	463a      	mov	r2, r7
   2b0ae:	4631      	mov	r1, r6
   2b0b0:	4628      	mov	r0, r5
   2b0b2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b0b4:	3424      	adds	r4, #36	; 0x24
   2b0b6:	e7df      	b.n	2b078 <custom_handler+0x14>
   2b0b8:	20001220 	.word	0x20001220
   2b0bc:	20001244 	.word	0x20001244
   2b0c0:	20003ce8 	.word	0x20003ce8

0002b0c4 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   2b0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b0c8:	4c0b      	ldr	r4, [pc, #44]	; (2b0f8 <vendor_handler+0x34>)
   2b0ca:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2b0fc <vendor_handler+0x38>
{
   2b0ce:	4605      	mov	r5, r0
   2b0d0:	460e      	mov	r6, r1
   2b0d2:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b0d4:	4544      	cmp	r4, r8
   2b0d6:	d302      	bcc.n	2b0de <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   2b0d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b0dc:	e009      	b.n	2b0f2 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
   2b0de:	6963      	ldr	r3, [r4, #20]
   2b0e0:	b90b      	cbnz	r3, 2b0e6 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b0e2:	3424      	adds	r4, #36	; 0x24
   2b0e4:	e7f6      	b.n	2b0d4 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
   2b0e6:	463a      	mov	r2, r7
   2b0e8:	4631      	mov	r1, r6
   2b0ea:	4628      	mov	r0, r5
   2b0ec:	4798      	blx	r3
   2b0ee:	2800      	cmp	r0, #0
   2b0f0:	d1f7      	bne.n	2b0e2 <vendor_handler+0x1e>
}
   2b0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b0f6:	bf00      	nop
   2b0f8:	20001220 	.word	0x20001220
   2b0fc:	20001244 	.word	0x20001244

0002b100 <set_endpoint>:
{
   2b100:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   2b102:	7883      	ldrb	r3, [r0, #2]
   2b104:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   2b108:	7903      	ldrb	r3, [r0, #4]
   2b10a:	7942      	ldrb	r2, [r0, #5]
   2b10c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b110:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   2b114:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
   2b116:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   2b118:	f003 0303 	and.w	r3, r3, #3
   2b11c:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
   2b120:	f018 feb2 	bl	43e88 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   2b124:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2b128:	d004      	beq.n	2b134 <set_endpoint+0x34>
	} else if (ret) {
   2b12a:	b118      	cbz	r0, 2b134 <set_endpoint+0x34>
		return false;
   2b12c:	2000      	movs	r0, #0
}
   2b12e:	b003      	add	sp, #12
   2b130:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   2b134:	f89d 0000 	ldrb.w	r0, [sp]
   2b138:	f018 ff2c 	bl	43f94 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   2b13c:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2b140:	d001      	beq.n	2b146 <set_endpoint+0x46>
	} else if (ret) {
   2b142:	2800      	cmp	r0, #0
   2b144:	d1f2      	bne.n	2b12c <set_endpoint+0x2c>
	usb_dev.configured = true;
   2b146:	4b02      	ldr	r3, [pc, #8]	; (2b150 <set_endpoint+0x50>)
   2b148:	2001      	movs	r0, #1
   2b14a:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
   2b14e:	e7ee      	b.n	2b12e <set_endpoint+0x2e>
   2b150:	20003ce8 	.word	0x20003ce8

0002b154 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   2b154:	4802      	ldr	r0, [pc, #8]	; (2b160 <usb_reset_alt_setting+0xc>)
   2b156:	2208      	movs	r2, #8
   2b158:	2100      	movs	r1, #0
   2b15a:	f020 bba1 	b.w	4b8a0 <memset>
   2b15e:	bf00      	nop
   2b160:	20003da3 	.word	0x20003da3

0002b164 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
   2b164:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b166:	4b0b      	ldr	r3, [pc, #44]	; (2b194 <is_ep_valid.part.0+0x30>)
   2b168:	4c0b      	ldr	r4, [pc, #44]	; (2b198 <is_ep_valid.part.0+0x34>)
   2b16a:	42a3      	cmp	r3, r4
   2b16c:	d301      	bcc.n	2b172 <is_ep_valid.part.0+0xe>
	return false;
   2b16e:	2000      	movs	r0, #0
}
   2b170:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   2b172:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2b174:	7f1e      	ldrb	r6, [r3, #28]
   2b176:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   2b178:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2b17a:	b2d5      	uxtb	r5, r2
   2b17c:	42ae      	cmp	r6, r5
   2b17e:	d801      	bhi.n	2b184 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b180:	3324      	adds	r3, #36	; 0x24
   2b182:	e7f2      	b.n	2b16a <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
   2b184:	3201      	adds	r2, #1
   2b186:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   2b18a:	4285      	cmp	r5, r0
   2b18c:	d1f5      	bne.n	2b17a <is_ep_valid.part.0+0x16>
				return true;
   2b18e:	2001      	movs	r0, #1
   2b190:	e7ee      	b.n	2b170 <is_ep_valid.part.0+0xc>
   2b192:	bf00      	nop
   2b194:	20001220 	.word	0x20001220
   2b198:	20001244 	.word	0x20001244

0002b19c <usb_handle_request.constprop.0>:
	handler = usb_dev.req_handlers[type];
   2b19c:	4809      	ldr	r0, [pc, #36]	; (2b1c4 <usb_handle_request.constprop.0+0x28>)
static bool usb_handle_request(struct usb_setup_packet *setup,
   2b19e:	b508      	push	{r3, lr}
	uint32_t type = setup->RequestType.type;
   2b1a0:	7803      	ldrb	r3, [r0, #0]
   2b1a2:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   2b1a6:	330a      	adds	r3, #10
   2b1a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
   2b1ac:	b13b      	cbz	r3, 2b1be <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
   2b1ae:	f100 0208 	add.w	r2, r0, #8
   2b1b2:	f100 0110 	add.w	r1, r0, #16
   2b1b6:	4798      	blx	r3
   2b1b8:	43c0      	mvns	r0, r0
   2b1ba:	0fc0      	lsrs	r0, r0, #31
}
   2b1bc:	bd08      	pop	{r3, pc}
		return false;
   2b1be:	4618      	mov	r0, r3
   2b1c0:	e7fc      	b.n	2b1bc <usb_handle_request.constprop.0+0x20>
   2b1c2:	bf00      	nop
   2b1c4:	20003ce8 	.word	0x20003ce8

0002b1c8 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   2b1c8:	2804      	cmp	r0, #4
{
   2b1ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b1ce:	f8df 8088 	ldr.w	r8, [pc, #136]	; 2b258 <forward_status_cb+0x90>
   2b1d2:	4604      	mov	r4, r0
   2b1d4:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
   2b1d6:	d10e      	bne.n	2b1f6 <forward_status_cb+0x2e>
		usb_reset_alt_setting();
   2b1d8:	f7ff ffbc 	bl	2b154 <usb_reset_alt_setting>
		if (usb_dev.configured) {
   2b1dc:	f8df 907c 	ldr.w	r9, [pc, #124]	; 2b25c <forward_status_cb+0x94>
   2b1e0:	f899 30b9 	ldrb.w	r3, [r9, #185]	; 0xb9
   2b1e4:	b15b      	cbz	r3, 2b1fe <forward_status_cb+0x36>
			usb_cancel_transfers();
   2b1e6:	f000 fd0d 	bl	2bc04 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   2b1ea:	2c04      	cmp	r4, #4
   2b1ec:	d001      	beq.n	2b1f2 <forward_status_cb+0x2a>
   2b1ee:	2c01      	cmp	r4, #1
   2b1f0:	d105      	bne.n	2b1fe <forward_status_cb+0x36>
   2b1f2:	4d1b      	ldr	r5, [pc, #108]	; (2b260 <forward_status_cb+0x98>)
   2b1f4:	e016      	b.n	2b224 <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   2b1f6:	2805      	cmp	r0, #5
   2b1f8:	d0f0      	beq.n	2b1dc <forward_status_cb+0x14>
   2b1fa:	2801      	cmp	r0, #1
   2b1fc:	d0ee      	beq.n	2b1dc <forward_status_cb+0x14>
   2b1fe:	4d18      	ldr	r5, [pc, #96]	; (2b260 <forward_status_cb+0x98>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b200:	4545      	cmp	r5, r8
   2b202:	d31e      	bcc.n	2b242 <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
   2b204:	4b15      	ldr	r3, [pc, #84]	; (2b25c <forward_status_cb+0x94>)
   2b206:	6a1b      	ldr	r3, [r3, #32]
   2b208:	b31b      	cbz	r3, 2b252 <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
   2b20a:	4631      	mov	r1, r6
   2b20c:	4620      	mov	r0, r4
}
   2b20e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
   2b212:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
   2b214:	f8d5 a020 	ldr.w	sl, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2b218:	2700      	movs	r7, #0
   2b21a:	7f2a      	ldrb	r2, [r5, #28]
   2b21c:	b2fb      	uxtb	r3, r7
   2b21e:	429a      	cmp	r2, r3
   2b220:	d803      	bhi.n	2b22a <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b222:	3524      	adds	r5, #36	; 0x24
   2b224:	4545      	cmp	r5, r8
   2b226:	d3f5      	bcc.n	2b214 <forward_status_cb+0x4c>
   2b228:	e007      	b.n	2b23a <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
   2b22a:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			if (ret < 0) {
   2b22e:	3701      	adds	r7, #1
	return usb_dc_ep_disable(ep_data->ep_addr);
   2b230:	7918      	ldrb	r0, [r3, #4]
   2b232:	f018 fed9 	bl	43fe8 <usb_dc_ep_disable>
			if (ret < 0) {
   2b236:	2800      	cmp	r0, #0
   2b238:	daef      	bge.n	2b21a <forward_status_cb+0x52>
				usb_dev.configured = false;
   2b23a:	2300      	movs	r3, #0
   2b23c:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
   2b240:	e7dd      	b.n	2b1fe <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
   2b242:	68eb      	ldr	r3, [r5, #12]
   2b244:	b11b      	cbz	r3, 2b24e <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
   2b246:	4632      	mov	r2, r6
   2b248:	4621      	mov	r1, r4
   2b24a:	4628      	mov	r0, r5
   2b24c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b24e:	3524      	adds	r5, #36	; 0x24
   2b250:	e7d6      	b.n	2b200 <forward_status_cb+0x38>
}
   2b252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b256:	bf00      	nop
   2b258:	20001244 	.word	0x20001244
   2b25c:	20003ce8 	.word	0x20003ce8
   2b260:	20001220 	.word	0x20001220

0002b264 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   2b264:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   2b266:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   2b268:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   2b26a:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   2b26c:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   2b270:	d007      	beq.n	2b282 <usb_halt_endpoint_req.isra.0+0x1e>
   2b272:	4620      	mov	r0, r4
   2b274:	f7ff ff76 	bl	2b164 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   2b278:	b188      	cbz	r0, 2b29e <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
   2b27a:	4b0f      	ldr	r3, [pc, #60]	; (2b2b8 <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   2b27c:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   2b280:	b168      	cbz	r0, 2b29e <usb_halt_endpoint_req.isra.0+0x3a>
		if (halt) {
   2b282:	4e0d      	ldr	r6, [pc, #52]	; (2b2b8 <usb_halt_endpoint_req.isra.0+0x54>)
			usb_dc_ep_set_stall(ep);
   2b284:	4620      	mov	r0, r4
		if (halt) {
   2b286:	b165      	cbz	r5, 2b2a2 <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
   2b288:	f018 fe20 	bl	43ecc <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   2b28c:	69f3      	ldr	r3, [r6, #28]
   2b28e:	b90b      	cbnz	r3, 2b294 <usb_halt_endpoint_req.isra.0+0x30>
		return true;
   2b290:	2001      	movs	r0, #1
   2b292:	e004      	b.n	2b29e <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   2b294:	2008      	movs	r0, #8
   2b296:	f10d 0107 	add.w	r1, sp, #7
   2b29a:	4798      	blx	r3
		return true;
   2b29c:	4628      	mov	r0, r5
}
   2b29e:	b002      	add	sp, #8
   2b2a0:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   2b2a2:	f018 fe3b 	bl	43f1c <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   2b2a6:	69f3      	ldr	r3, [r6, #28]
   2b2a8:	2b00      	cmp	r3, #0
   2b2aa:	d0f1      	beq.n	2b290 <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   2b2ac:	f10d 0107 	add.w	r1, sp, #7
   2b2b0:	2009      	movs	r0, #9
   2b2b2:	4798      	blx	r3
   2b2b4:	e7ec      	b.n	2b290 <usb_halt_endpoint_req.isra.0+0x2c>
   2b2b6:	bf00      	nop
   2b2b8:	20003ce8 	.word	0x20003ce8

0002b2bc <usb_handle_standard_request>:
{
   2b2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   2b2c0:	4ea4      	ldr	r6, [pc, #656]	; (2b554 <usb_handle_standard_request+0x298>)
   2b2c2:	69b3      	ldr	r3, [r6, #24]
{
   2b2c4:	4605      	mov	r5, r0
   2b2c6:	460c      	mov	r4, r1
   2b2c8:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
   2b2ca:	b963      	cbnz	r3, 2b2e6 <usb_handle_standard_request+0x2a>
	switch (setup->RequestType.recipient) {
   2b2cc:	7828      	ldrb	r0, [r5, #0]
   2b2ce:	f000 001f 	and.w	r0, r0, #31
   2b2d2:	2801      	cmp	r0, #1
   2b2d4:	f000 80a6 	beq.w	2b424 <usb_handle_standard_request+0x168>
   2b2d8:	2802      	cmp	r0, #2
   2b2da:	f000 8110 	beq.w	2b4fe <usb_handle_standard_request+0x242>
   2b2de:	b138      	cbz	r0, 2b2f0 <usb_handle_standard_request+0x34>
		switch (setup->bRequest) {
   2b2e0:	f06f 0015 	mvn.w	r0, #21
   2b2e4:	e095      	b.n	2b412 <usb_handle_standard_request+0x156>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   2b2e6:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   2b2e8:	2800      	cmp	r0, #0
   2b2ea:	d1ef      	bne.n	2b2cc <usb_handle_standard_request+0x10>
	int rc = 0;
   2b2ec:	2000      	movs	r0, #0
   2b2ee:	e090      	b.n	2b412 <usb_handle_standard_request+0x156>
	if (usb_reqtype_is_to_host(setup)) {
   2b2f0:	f995 2000 	ldrsb.w	r2, [r5]
	uint8_t *data = *data_buf;
   2b2f4:	6839      	ldr	r1, [r7, #0]
		switch (setup->bRequest) {
   2b2f6:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2b2f8:	2a00      	cmp	r2, #0
   2b2fa:	da2e      	bge.n	2b35a <usb_handle_standard_request+0x9e>
		switch (setup->bRequest) {
   2b2fc:	2b06      	cmp	r3, #6
   2b2fe:	d00f      	beq.n	2b320 <usb_handle_standard_request+0x64>
   2b300:	2b08      	cmp	r3, #8
   2b302:	d024      	beq.n	2b34e <usb_handle_standard_request+0x92>
   2b304:	2b00      	cmp	r3, #0
   2b306:	d1eb      	bne.n	2b2e0 <usb_handle_standard_request+0x24>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   2b308:	2201      	movs	r2, #1
   2b30a:	700a      	strb	r2, [r1, #0]
	data[1] = 0U;
   2b30c:	704b      	strb	r3, [r1, #1]
		data[0] |= (usb_dev.remote_wakeup ?
   2b30e:	f896 20c3 	ldrb.w	r2, [r6, #195]	; 0xc3
   2b312:	0052      	lsls	r2, r2, #1
   2b314:	f042 0201 	orr.w	r2, r2, #1
   2b318:	700a      	strb	r2, [r1, #0]
	*len = 2;
   2b31a:	2202      	movs	r2, #2
   2b31c:	6022      	str	r2, [r4, #0]
	return true;
   2b31e:	e7e5      	b.n	2b2ec <usb_handle_standard_request+0x30>
			return usb_get_descriptor(setup, len, data_buf);
   2b320:	886b      	ldrh	r3, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   2b322:	0a19      	lsrs	r1, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   2b324:	1f0a      	subs	r2, r1, #4
   2b326:	2a01      	cmp	r2, #1
   2b328:	d9da      	bls.n	2b2e0 <usb_handle_standard_request+0x24>
   2b32a:	2907      	cmp	r1, #7
   2b32c:	d8d8      	bhi.n	2b2e0 <usb_handle_standard_request+0x24>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
   2b32e:	b2da      	uxtb	r2, r3
	p = (uint8_t *)usb_dev.descriptors;
   2b330:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
   2b332:	781d      	ldrb	r5, [r3, #0]
   2b334:	2d00      	cmp	r5, #0
   2b336:	d0d3      	beq.n	2b2e0 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == type) {
   2b338:	785e      	ldrb	r6, [r3, #1]
   2b33a:	428e      	cmp	r6, r1
   2b33c:	d103      	bne.n	2b346 <usb_handle_standard_request+0x8a>
			if (cur_index == index) {
   2b33e:	4282      	cmp	r2, r0
   2b340:	f000 8117 	beq.w	2b572 <usb_handle_standard_request+0x2b6>
			cur_index++;
   2b344:	3001      	adds	r0, #1
		p += p[DESC_bLength];
   2b346:	442b      	add	r3, r5
   2b348:	e7f3      	b.n	2b332 <usb_handle_standard_request+0x76>
			*len = p[DESC_bLength];
   2b34a:	781b      	ldrb	r3, [r3, #0]
   2b34c:	e116      	b.n	2b57c <usb_handle_standard_request+0x2c0>
			data[0] = usb_dev.configuration;
   2b34e:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2b352:	700b      	strb	r3, [r1, #0]
			*len = 1;
   2b354:	2301      	movs	r3, #1
		*len = 2;
   2b356:	6023      	str	r3, [r4, #0]
		return true;
   2b358:	e05b      	b.n	2b412 <usb_handle_standard_request+0x156>
		switch (setup->bRequest) {
   2b35a:	3b01      	subs	r3, #1
   2b35c:	2b08      	cmp	r3, #8
   2b35e:	d8bf      	bhi.n	2b2e0 <usb_handle_standard_request+0x24>
   2b360:	a201      	add	r2, pc, #4	; (adr r2, 2b368 <usb_handle_standard_request+0xac>)
   2b362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2b366:	bf00      	nop
   2b368:	0002b405 	.word	0x0002b405
   2b36c:	0002b2e1 	.word	0x0002b2e1
   2b370:	0002b417 	.word	0x0002b417
   2b374:	0002b2e1 	.word	0x0002b2e1
   2b378:	0002b38d 	.word	0x0002b38d
   2b37c:	0002b2e1 	.word	0x0002b2e1
   2b380:	0002b2e1 	.word	0x0002b2e1
   2b384:	0002b2e1 	.word	0x0002b2e1
   2b388:	0002b399 	.word	0x0002b399
			return !usb_dc_set_address(setup->wValue);
   2b38c:	78a8      	ldrb	r0, [r5, #2]
   2b38e:	f018 fd69 	bl	43e64 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   2b392:	2800      	cmp	r0, #0
   2b394:	d0aa      	beq.n	2b2ec <usb_handle_standard_request+0x30>
   2b396:	e7a3      	b.n	2b2e0 <usb_handle_standard_request+0x24>
	if (setup->wValue == 0U) {
   2b398:	886c      	ldrh	r4, [r5, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2b39a:	6a77      	ldr	r7, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
   2b39c:	bb6c      	cbnz	r4, 2b3fa <usb_handle_standard_request+0x13e>
		usb_reset_alt_setting();
   2b39e:	f7ff fed9 	bl	2b154 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   2b3a2:	886b      	ldrh	r3, [r5, #2]
   2b3a4:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
   2b3a8:	69f3      	ldr	r3, [r6, #28]
   2b3aa:	2b00      	cmp	r3, #0
   2b3ac:	d09e      	beq.n	2b2ec <usb_handle_standard_request+0x30>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   2b3ae:	496a      	ldr	r1, [pc, #424]	; (2b558 <usb_handle_standard_request+0x29c>)
   2b3b0:	2003      	movs	r0, #3
   2b3b2:	4798      	blx	r3
   2b3b4:	e79a      	b.n	2b2ec <usb_handle_standard_request+0x30>
		switch (p[DESC_bDescriptorType]) {
   2b3b6:	787b      	ldrb	r3, [r7, #1]
   2b3b8:	2b04      	cmp	r3, #4
   2b3ba:	d011      	beq.n	2b3e0 <usb_handle_standard_request+0x124>
   2b3bc:	2b05      	cmp	r3, #5
   2b3be:	d012      	beq.n	2b3e6 <usb_handle_standard_request+0x12a>
   2b3c0:	2b02      	cmp	r3, #2
   2b3c2:	d105      	bne.n	2b3d0 <usb_handle_standard_request+0x114>
			cur_config = p[CONF_DESC_bConfigurationValue];
   2b3c4:	f897 8005 	ldrb.w	r8, [r7, #5]
			if (cur_config == setup->wValue) {
   2b3c8:	886a      	ldrh	r2, [r5, #2]
				found = true;
   2b3ca:	4542      	cmp	r2, r8
   2b3cc:	bf08      	it	eq
   2b3ce:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   2b3d0:	783b      	ldrb	r3, [r7, #0]
   2b3d2:	441f      	add	r7, r3
	while (p[DESC_bLength] != 0U) {
   2b3d4:	783c      	ldrb	r4, [r7, #0]
   2b3d6:	2c00      	cmp	r4, #0
   2b3d8:	d1ed      	bne.n	2b3b6 <usb_handle_standard_request+0xfa>
	if (found) {
   2b3da:	2800      	cmp	r0, #0
   2b3dc:	d080      	beq.n	2b2e0 <usb_handle_standard_request+0x24>
   2b3de:	e7de      	b.n	2b39e <usb_handle_standard_request+0xe2>
			cur_alt_setting =
   2b3e0:	f897 9003 	ldrb.w	r9, [r7, #3]
			break;
   2b3e4:	e7f4      	b.n	2b3d0 <usb_handle_standard_request+0x114>
			if ((cur_config != setup->wValue) ||
   2b3e6:	886b      	ldrh	r3, [r5, #2]
   2b3e8:	4543      	cmp	r3, r8
   2b3ea:	d1f1      	bne.n	2b3d0 <usb_handle_standard_request+0x114>
   2b3ec:	f1b9 0f00 	cmp.w	r9, #0
   2b3f0:	d1ee      	bne.n	2b3d0 <usb_handle_standard_request+0x114>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   2b3f2:	4638      	mov	r0, r7
   2b3f4:	f7ff fe84 	bl	2b100 <set_endpoint>
			break;
   2b3f8:	e7ea      	b.n	2b3d0 <usb_handle_standard_request+0x114>
	uint8_t cur_config = 0xFF;
   2b3fa:	f04f 08ff 	mov.w	r8, #255	; 0xff
	bool found = false;
   2b3fe:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
   2b400:	46c1      	mov	r9, r8
   2b402:	e7e7      	b.n	2b3d4 <usb_handle_standard_request+0x118>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   2b404:	886b      	ldrh	r3, [r5, #2]
   2b406:	2b01      	cmp	r3, #1
   2b408:	f47f af6a 	bne.w	2b2e0 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = false;
   2b40c:	2000      	movs	r0, #0
   2b40e:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
   2b412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   2b416:	886b      	ldrh	r3, [r5, #2]
   2b418:	2b01      	cmp	r3, #1
   2b41a:	f47f af61 	bne.w	2b2e0 <usb_handle_standard_request+0x24>
					usb_dev.remote_wakeup = true;
   2b41e:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
   2b422:	e763      	b.n	2b2ec <usb_handle_standard_request+0x30>
	if (!is_device_configured() ||
   2b424:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2b428:	683a      	ldr	r2, [r7, #0]
   2b42a:	2b00      	cmp	r3, #0
   2b42c:	f43f af58 	beq.w	2b2e0 <usb_handle_standard_request+0x24>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2b430:	6a77      	ldr	r7, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   2b432:	f8b5 c004 	ldrh.w	ip, [r5, #4]
   2b436:	f895 e004 	ldrb.w	lr, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2b43a:	463b      	mov	r3, r7
	while (p[DESC_bLength] != 0U) {
   2b43c:	7818      	ldrb	r0, [r3, #0]
   2b43e:	2800      	cmp	r0, #0
   2b440:	f43f af4e 	beq.w	2b2e0 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   2b444:	7859      	ldrb	r1, [r3, #1]
   2b446:	2902      	cmp	r1, #2
   2b448:	d104      	bne.n	2b454 <usb_handle_standard_request+0x198>
			if (interface < cfg_descr->bNumInterfaces) {
   2b44a:	f893 8004 	ldrb.w	r8, [r3, #4]
   2b44e:	45f0      	cmp	r8, lr
   2b450:	f200 8096 	bhi.w	2b580 <usb_handle_standard_request+0x2c4>
		p += p[DESC_bLength];
   2b454:	4403      	add	r3, r0
   2b456:	e7f1      	b.n	2b43c <usb_handle_standard_request+0x180>
			data[0] = 0U;
   2b458:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
   2b45a:	7050      	strb	r0, [r2, #1]
			*len = 2;
   2b45c:	6021      	str	r1, [r4, #0]
			return true;
   2b45e:	e7d8      	b.n	2b412 <usb_handle_standard_request+0x156>
		p += p[DESC_bLength];
   2b460:	440f      	add	r7, r1
   2b462:	e099      	b.n	2b598 <usb_handle_standard_request+0x2dc>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   2b464:	280b      	cmp	r0, #11
   2b466:	f47f af3b 	bne.w	2b2e0 <usb_handle_standard_request+0x24>
	bool ret = false;
   2b46a:	2400      	movs	r4, #0
	uint8_t cur_iface = 0xFF;
   2b46c:	f04f 0aff 	mov.w	sl, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   2b470:	46d0      	mov	r8, sl
	const uint8_t *if_desc = NULL;
   2b472:	46a1      	mov	r9, r4
   2b474:	e006      	b.n	2b484 <usb_handle_standard_request+0x1c8>
		switch (p[DESC_bDescriptorType]) {
   2b476:	787b      	ldrb	r3, [r7, #1]
   2b478:	2b04      	cmp	r3, #4
   2b47a:	d00f      	beq.n	2b49c <usb_handle_standard_request+0x1e0>
   2b47c:	2b05      	cmp	r3, #5
   2b47e:	d022      	beq.n	2b4c6 <usb_handle_standard_request+0x20a>
		p += p[DESC_bLength];
   2b480:	783b      	ldrb	r3, [r7, #0]
   2b482:	441f      	add	r7, r3
	while (p[DESC_bLength] != 0U) {
   2b484:	783b      	ldrb	r3, [r7, #0]
   2b486:	2b00      	cmp	r3, #0
   2b488:	d1f5      	bne.n	2b476 <usb_handle_standard_request+0x1ba>
	if (usb_dev.status_callback) {
   2b48a:	69f3      	ldr	r3, [r6, #28]
   2b48c:	b113      	cbz	r3, 2b494 <usb_handle_standard_request+0x1d8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   2b48e:	4649      	mov	r1, r9
   2b490:	2007      	movs	r0, #7
   2b492:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   2b494:	2c00      	cmp	r4, #0
   2b496:	f47f af29 	bne.w	2b2ec <usb_handle_standard_request+0x30>
   2b49a:	e721      	b.n	2b2e0 <usb_handle_standard_request+0x24>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   2b49c:	f897 a002 	ldrb.w	sl, [r7, #2]
			if (cur_iface == setup->wIndex &&
   2b4a0:	88aa      	ldrh	r2, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   2b4a2:	f897 8003 	ldrb.w	r8, [r7, #3]
			if (cur_iface == setup->wIndex &&
   2b4a6:	4592      	cmp	sl, r2
   2b4a8:	4653      	mov	r3, sl
   2b4aa:	d1e9      	bne.n	2b480 <usb_handle_standard_request+0x1c4>
			    cur_alt_setting == setup->wValue) {
   2b4ac:	8869      	ldrh	r1, [r5, #2]
			if (cur_iface == setup->wIndex &&
   2b4ae:	4588      	cmp	r8, r1
   2b4b0:	fa1f f288 	uxth.w	r2, r8
   2b4b4:	d1e4      	bne.n	2b480 <usb_handle_standard_request+0x1c4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2b4b6:	2b07      	cmp	r3, #7
   2b4b8:	d81e      	bhi.n	2b4f8 <usb_handle_standard_request+0x23c>
		usb_dev.alt_setting[iface] = alt_setting;
   2b4ba:	4433      	add	r3, r6
		return true;
   2b4bc:	46b9      	mov	r9, r7
				ret = usb_set_alt_setting(setup->wIndex,
   2b4be:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
   2b4c2:	2401      	movs	r4, #1
   2b4c4:	e7dc      	b.n	2b480 <usb_handle_standard_request+0x1c4>
			if (cur_iface == setup->wIndex) {
   2b4c6:	88ab      	ldrh	r3, [r5, #4]
   2b4c8:	4553      	cmp	r3, sl
   2b4ca:	d1d9      	bne.n	2b480 <usb_handle_standard_request+0x1c4>
	if (cur_alt_setting != alt_setting) {
   2b4cc:	78ab      	ldrb	r3, [r5, #2]
   2b4ce:	4543      	cmp	r3, r8
   2b4d0:	d00d      	beq.n	2b4ee <usb_handle_standard_request+0x232>
		ret = reset_endpoint(ep_desc);
   2b4d2:	78bc      	ldrb	r4, [r7, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   2b4d4:	4620      	mov	r0, r4
   2b4d6:	f000 fb77 	bl	2bbc8 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
   2b4da:	4620      	mov	r0, r4
   2b4dc:	f018 fd84 	bl	43fe8 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   2b4e0:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2b4e4:	d0ed      	beq.n	2b4c2 <usb_handle_standard_request+0x206>
	} else if (ret) {
   2b4e6:	fab0 f480 	clz	r4, r0
   2b4ea:	0964      	lsrs	r4, r4, #5
   2b4ec:	e7c8      	b.n	2b480 <usb_handle_standard_request+0x1c4>
		ret = set_endpoint(ep_desc);
   2b4ee:	4638      	mov	r0, r7
   2b4f0:	f7ff fe06 	bl	2b100 <set_endpoint>
   2b4f4:	4604      	mov	r4, r0
   2b4f6:	e7c3      	b.n	2b480 <usb_handle_standard_request+0x1c4>
   2b4f8:	46b9      	mov	r9, r7
	return false;
   2b4fa:	2400      	movs	r4, #0
   2b4fc:	e7c0      	b.n	2b480 <usb_handle_standard_request+0x1c4>
	if (usb_reqtype_is_to_host(setup)) {
   2b4fe:	f995 2000 	ldrsb.w	r2, [r5]
		switch (setup->bRequest) {
   2b502:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2b504:	2a00      	cmp	r2, #0
   2b506:	da19      	bge.n	2b53c <usb_handle_standard_request+0x280>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   2b508:	2b00      	cmp	r3, #0
   2b50a:	f47f aee9 	bne.w	2b2e0 <usb_handle_standard_request+0x24>
	uint8_t ep = setup->wIndex;
   2b50e:	792d      	ldrb	r5, [r5, #4]
   2b510:	683f      	ldr	r7, [r7, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
   2b512:	066b      	lsls	r3, r5, #25
   2b514:	d00a      	beq.n	2b52c <usb_handle_standard_request+0x270>
   2b516:	4628      	mov	r0, r5
   2b518:	f7ff fe24 	bl	2b164 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
   2b51c:	2800      	cmp	r0, #0
   2b51e:	f43f aedf 	beq.w	2b2e0 <usb_handle_standard_request+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   2b522:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2b526:	2b00      	cmp	r3, #0
   2b528:	f43f aeda 	beq.w	2b2e0 <usb_handle_standard_request+0x24>
		usb_dc_ep_is_stalled(ep, &data[0]);
   2b52c:	4639      	mov	r1, r7
   2b52e:	4628      	mov	r0, r5
   2b530:	f018 fd14 	bl	43f5c <usb_dc_ep_is_stalled>
		data[1] = 0U;
   2b534:	2000      	movs	r0, #0
   2b536:	7078      	strb	r0, [r7, #1]
		*len = 2;
   2b538:	2302      	movs	r3, #2
   2b53a:	e70c      	b.n	2b356 <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
   2b53c:	2b01      	cmp	r3, #1
   2b53e:	d00d      	beq.n	2b55c <usb_handle_standard_request+0x2a0>
   2b540:	2b03      	cmp	r3, #3
   2b542:	f47f aecd 	bne.w	2b2e0 <usb_handle_standard_request+0x24>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2b546:	886b      	ldrh	r3, [r5, #2]
   2b548:	2b00      	cmp	r3, #0
   2b54a:	f47f aec9 	bne.w	2b2e0 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
   2b54e:	2101      	movs	r1, #1
   2b550:	e008      	b.n	2b564 <usb_handle_standard_request+0x2a8>
   2b552:	bf00      	nop
   2b554:	20003ce8 	.word	0x20003ce8
   2b558:	20003da2 	.word	0x20003da2
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2b55c:	8869      	ldrh	r1, [r5, #2]
   2b55e:	2900      	cmp	r1, #0
   2b560:	f47f aebe 	bne.w	2b2e0 <usb_handle_standard_request+0x24>
				return usb_halt_endpoint_req(setup, true);
   2b564:	88a8      	ldrh	r0, [r5, #4]
   2b566:	f7ff fe7d 	bl	2b264 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   2b56a:	2800      	cmp	r0, #0
   2b56c:	f47f aebe 	bne.w	2b2ec <usb_handle_standard_request+0x30>
   2b570:	e6b6      	b.n	2b2e0 <usb_handle_standard_request+0x24>
		if (type == USB_DESC_CONFIGURATION) {
   2b572:	2902      	cmp	r1, #2
		*data = p;
   2b574:	603b      	str	r3, [r7, #0]
		if (type == USB_DESC_CONFIGURATION) {
   2b576:	f47f aee8 	bne.w	2b34a <usb_handle_standard_request+0x8e>
			*len = (p[CONF_DESC_wTotalLength]) |
   2b57a:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
   2b57c:	6023      	str	r3, [r4, #0]
   2b57e:	e6b5      	b.n	2b2ec <usb_handle_standard_request+0x30>
	if (usb_reqtype_is_to_host(setup)) {
   2b580:	f995 3000 	ldrsb.w	r3, [r5]
		switch (setup->bRequest) {
   2b584:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2b586:	2b00      	cmp	r3, #0
   2b588:	f6bf af6c 	bge.w	2b464 <usb_handle_standard_request+0x1a8>
		switch (setup->bRequest) {
   2b58c:	2800      	cmp	r0, #0
   2b58e:	f43f af63 	beq.w	2b458 <usb_handle_standard_request+0x19c>
   2b592:	280a      	cmp	r0, #10
   2b594:	f47f aea4 	bne.w	2b2e0 <usb_handle_standard_request+0x24>
	while (p[DESC_bLength] != 0U) {
   2b598:	7839      	ldrb	r1, [r7, #0]
   2b59a:	2900      	cmp	r1, #0
   2b59c:	f43f aea0 	beq.w	2b2e0 <usb_handle_standard_request+0x24>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   2b5a0:	787b      	ldrb	r3, [r7, #1]
   2b5a2:	2b04      	cmp	r3, #4
   2b5a4:	f47f af5c 	bne.w	2b460 <usb_handle_standard_request+0x1a4>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   2b5a8:	78bb      	ldrb	r3, [r7, #2]
			if (cur_iface == setup->wIndex) {
   2b5aa:	459c      	cmp	ip, r3
   2b5ac:	f47f af58 	bne.w	2b460 <usb_handle_standard_request+0x1a4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2b5b0:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
   2b5b2:	bf96      	itet	ls
   2b5b4:	199b      	addls	r3, r3, r6
	return 0;
   2b5b6:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   2b5b8:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   2b5bc:	7013      	strb	r3, [r2, #0]
				*len = 1;
   2b5be:	2301      	movs	r3, #1
   2b5c0:	e7dc      	b.n	2b57c <usb_handle_standard_request+0x2c0>
   2b5c2:	bf00      	nop

0002b5c4 <usb_data_to_host>:
{
   2b5c4:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   2b5c6:	4c13      	ldr	r4, [pc, #76]	; (2b614 <usb_data_to_host+0x50>)
   2b5c8:	7d23      	ldrb	r3, [r4, #20]
   2b5ca:	b9cb      	cbnz	r3, 2b600 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
   2b5cc:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2b5ce:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   2b5d0:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2b5d2:	ab01      	add	r3, sp, #4
   2b5d4:	2080      	movs	r0, #128	; 0x80
   2b5d6:	f01e fdfe 	bl	4a1d6 <usb_write>
		usb_dev.data_buf += chunk;
   2b5da:	9a01      	ldr	r2, [sp, #4]
   2b5dc:	68a3      	ldr	r3, [r4, #8]
   2b5de:	4413      	add	r3, r2
   2b5e0:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2b5e2:	68e3      	ldr	r3, [r4, #12]
   2b5e4:	1a9b      	subs	r3, r3, r2
   2b5e6:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   2b5e8:	b943      	cbnz	r3, 2b5fc <usb_data_to_host+0x38>
   2b5ea:	b13a      	cbz	r2, 2b5fc <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   2b5ec:	6923      	ldr	r3, [r4, #16]
   2b5ee:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   2b5f0:	429a      	cmp	r2, r3
   2b5f2:	dd03      	ble.n	2b5fc <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   2b5f4:	069b      	lsls	r3, r3, #26
   2b5f6:	d101      	bne.n	2b5fc <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
   2b5f8:	2301      	movs	r3, #1
   2b5fa:	7523      	strb	r3, [r4, #20]
}
   2b5fc:	b002      	add	sp, #8
   2b5fe:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   2b600:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   2b602:	461a      	mov	r2, r3
   2b604:	4619      	mov	r1, r3
   2b606:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   2b608:	7523      	strb	r3, [r4, #20]
}
   2b60a:	b002      	add	sp, #8
   2b60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   2b610:	f018 bd10 	b.w	44034 <usb_dc_ep_write>
   2b614:	20003ce8 	.word	0x20003ce8

0002b618 <usb_handle_control_transfer>:
{
   2b618:	b530      	push	{r4, r5, lr}
   2b61a:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   2b61c:	2300      	movs	r3, #0
{
   2b61e:	4602      	mov	r2, r0
   2b620:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
   2b622:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   2b624:	2800      	cmp	r0, #0
   2b626:	d158      	bne.n	2b6da <usb_handle_control_transfer+0xc2>
   2b628:	2900      	cmp	r1, #0
   2b62a:	d135      	bne.n	2b698 <usb_handle_control_transfer+0x80>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   2b62c:	2208      	movs	r2, #8
   2b62e:	460b      	mov	r3, r1
   2b630:	eb0d 0102 	add.w	r1, sp, r2
   2b634:	f024 f99a 	bl	4f96c <usb_dc_ep_read>
   2b638:	2800      	cmp	r0, #0
   2b63a:	da04      	bge.n	2b646 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   2b63c:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2b63e:	f018 fc45 	bl	43ecc <usb_dc_ep_set_stall>
}
   2b642:	b005      	add	sp, #20
   2b644:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   2b646:	4c2a      	ldr	r4, [pc, #168]	; (2b6f0 <usb_handle_control_transfer+0xd8>)
   2b648:	9a02      	ldr	r2, [sp, #8]
   2b64a:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   2b64c:	9a03      	ldr	r2, [sp, #12]
   2b64e:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
   2b650:	f104 0238 	add.w	r2, r4, #56	; 0x38
   2b654:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
   2b656:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   2b65a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
   2b65e:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
   2b660:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
   2b662:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
   2b666:	db0a      	blt.n	2b67e <usb_handle_control_transfer+0x66>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   2b668:	2b80      	cmp	r3, #128	; 0x80
   2b66a:	d904      	bls.n	2b676 <usb_handle_control_transfer+0x5e>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   2b66c:	2080      	movs	r0, #128	; 0x80
   2b66e:	f018 fc2d 	bl	43ecc <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2b672:	2000      	movs	r0, #0
   2b674:	e7e3      	b.n	2b63e <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   2b676:	b113      	cbz	r3, 2b67e <usb_handle_control_transfer+0x66>
				usb_dev.data_buf_residue = setup->wLength;
   2b678:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
   2b67c:	e7e1      	b.n	2b642 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
   2b67e:	f7ff fd8d 	bl	2b19c <usb_handle_request.constprop.0>
   2b682:	2800      	cmp	r0, #0
   2b684:	d0da      	beq.n	2b63c <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   2b686:	88e2      	ldrh	r2, [r4, #6]
   2b688:	6923      	ldr	r3, [r4, #16]
   2b68a:	429a      	cmp	r2, r3
   2b68c:	bfd4      	ite	le
   2b68e:	60e2      	strle	r2, [r4, #12]
   2b690:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   2b692:	f7ff ff97 	bl	2b5c4 <usb_data_to_host>
   2b696:	e7d4      	b.n	2b642 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   2b698:	4c15      	ldr	r4, [pc, #84]	; (2b6f0 <usb_handle_control_transfer+0xd8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2b69a:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
   2b69e:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2b6a0:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   2b6a2:	dc04      	bgt.n	2b6ae <usb_handle_control_transfer+0x96>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2b6a4:	f024 f962 	bl	4f96c <usb_dc_ep_read>
   2b6a8:	2800      	cmp	r0, #0
   2b6aa:	daca      	bge.n	2b642 <usb_handle_control_transfer+0x2a>
   2b6ac:	e7c6      	b.n	2b63c <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2b6ae:	462a      	mov	r2, r5
   2b6b0:	f024 f95c 	bl	4f96c <usb_dc_ep_read>
   2b6b4:	2800      	cmp	r0, #0
   2b6b6:	dbd9      	blt.n	2b66c <usb_handle_control_transfer+0x54>
		usb_dev.data_buf += chunk;
   2b6b8:	9a01      	ldr	r2, [sp, #4]
   2b6ba:	68a3      	ldr	r3, [r4, #8]
   2b6bc:	4413      	add	r3, r2
   2b6be:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2b6c0:	68e3      	ldr	r3, [r4, #12]
   2b6c2:	1a9b      	subs	r3, r3, r2
   2b6c4:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   2b6c6:	2b00      	cmp	r3, #0
   2b6c8:	d1bb      	bne.n	2b642 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   2b6ca:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2b6ce:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
   2b6d0:	f7ff fd64 	bl	2b19c <usb_handle_request.constprop.0>
   2b6d4:	2800      	cmp	r0, #0
   2b6d6:	d1dc      	bne.n	2b692 <usb_handle_control_transfer+0x7a>
   2b6d8:	e7b0      	b.n	2b63c <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   2b6da:	2880      	cmp	r0, #128	; 0x80
   2b6dc:	d1b1      	bne.n	2b642 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   2b6de:	4b04      	ldr	r3, [pc, #16]	; (2b6f0 <usb_handle_control_transfer+0xd8>)
   2b6e0:	68da      	ldr	r2, [r3, #12]
   2b6e2:	2a00      	cmp	r2, #0
   2b6e4:	d1d5      	bne.n	2b692 <usb_handle_control_transfer+0x7a>
   2b6e6:	7d1b      	ldrb	r3, [r3, #20]
   2b6e8:	2b00      	cmp	r3, #0
   2b6ea:	d1d2      	bne.n	2b692 <usb_handle_control_transfer+0x7a>
   2b6ec:	e7a9      	b.n	2b642 <usb_handle_control_transfer+0x2a>
   2b6ee:	bf00      	nop
   2b6f0:	20003ce8 	.word	0x20003ce8

0002b6f4 <usb_wakeup_request>:
	return usb_dev.remote_wakeup;
   2b6f4:	4b04      	ldr	r3, [pc, #16]	; (2b708 <usb_wakeup_request+0x14>)
		if (usb_get_remote_wakeup_status()) {
   2b6f6:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
   2b6fa:	b10b      	cbz	r3, 2b700 <usb_wakeup_request+0xc>
			return usb_dc_wakeup_request();
   2b6fc:	f024 b945 	b.w	4f98a <usb_dc_wakeup_request>
}
   2b700:	f06f 000c 	mvn.w	r0, #12
   2b704:	4770      	bx	lr
   2b706:	bf00      	nop
   2b708:	20003ce8 	.word	0x20003ce8

0002b70c <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   2b70c:	4b05      	ldr	r3, [pc, #20]	; (2b724 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   2b70e:	4a06      	ldr	r2, [pc, #24]	; (2b728 <usb_set_config+0x1c>)
   2b710:	629a      	str	r2, [r3, #40]	; 0x28
   2b712:	4a06      	ldr	r2, [pc, #24]	; (2b72c <usb_set_config+0x20>)
   2b714:	62da      	str	r2, [r3, #44]	; 0x2c
   2b716:	4a06      	ldr	r2, [pc, #24]	; (2b730 <usb_set_config+0x24>)
   2b718:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   2b71a:	4a06      	ldr	r2, [pc, #24]	; (2b734 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   2b71c:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   2b71e:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
   2b720:	2000      	movs	r0, #0
   2b722:	4770      	bx	lr
   2b724:	20003ce8 	.word	0x20003ce8
   2b728:	0002b2bd 	.word	0x0002b2bd
   2b72c:	0002b025 	.word	0x0002b025
   2b730:	0002b0c5 	.word	0x0002b0c5
   2b734:	0002b065 	.word	0x0002b065

0002b738 <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   2b738:	4b08      	ldr	r3, [pc, #32]	; (2b75c <usb_device_init+0x24>)
{
   2b73a:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
   2b73c:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   2b740:	b934      	cbnz	r4, 2b750 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   2b742:	f000 f8cb 	bl	2b8dc <usb_get_device_descriptor>
	if (!device_descriptor) {
   2b746:	b130      	cbz	r0, 2b756 <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   2b748:	f7ff ffe0 	bl	2b70c <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
   2b74c:	4620      	mov	r0, r4
}
   2b74e:	bd10      	pop	{r4, pc}
		return -EALREADY;
   2b750:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2b754:	e7fb      	b.n	2b74e <usb_device_init+0x16>
		return -1;
   2b756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b75a:	e7f8      	b.n	2b74e <usb_device_init+0x16>
   2b75c:	20003ce8 	.word	0x20003ce8

0002b760 <usb_enable>:
{
   2b760:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b764:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
   2b766:	4d35      	ldr	r5, [pc, #212]	; (2b83c <usb_enable+0xdc>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2b768:	4835      	ldr	r0, [pc, #212]	; (2b840 <usb_enable+0xe0>)
   2b76a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b76e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b772:	f01c f955 	bl	47a20 <z_impl_k_mutex_lock>
   2b776:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   2b77a:	2e00      	cmp	r6, #0
   2b77c:	d15b      	bne.n	2b836 <usb_enable+0xd6>
	usb_dev.status_callback = cb;
   2b77e:	4831      	ldr	r0, [pc, #196]	; (2b844 <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
   2b780:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   2b782:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
   2b784:	f018 fd6c 	bl	44260 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
   2b788:	f018 fb2e 	bl	43de8 <usb_dc_attach>
	if (ret < 0) {
   2b78c:	1e04      	subs	r4, r0, #0
   2b78e:	db36      	blt.n	2b7fe <usb_enable+0x9e>
	ret = usb_transfer_init();
   2b790:	f000 fa60 	bl	2bc54 <usb_transfer_init>
	if (ret < 0) {
   2b794:	1e04      	subs	r4, r0, #0
   2b796:	db32      	blt.n	2b7fe <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   2b798:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
   2b79a:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   2b79c:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   2b7a0:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   2b7a4:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   2b7a8:	f018 fb6e 	bl	43e88 <usb_dc_ep_configure>
	if (ret < 0) {
   2b7ac:	1e04      	subs	r4, r0, #0
   2b7ae:	db26      	blt.n	2b7fe <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   2b7b0:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   2b7b2:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   2b7b4:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   2b7b8:	f018 fb66 	bl	43e88 <usb_dc_ep_configure>
	if (ret < 0) {
   2b7bc:	1e04      	subs	r4, r0, #0
   2b7be:	db1e      	blt.n	2b7fe <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   2b7c0:	4921      	ldr	r1, [pc, #132]	; (2b848 <usb_enable+0xe8>)
   2b7c2:	4630      	mov	r0, r6
   2b7c4:	f018 fd38 	bl	44238 <usb_dc_ep_set_callback>
	if (ret < 0) {
   2b7c8:	1e04      	subs	r4, r0, #0
   2b7ca:	db18      	blt.n	2b7fe <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   2b7cc:	491e      	ldr	r1, [pc, #120]	; (2b848 <usb_enable+0xe8>)
   2b7ce:	4638      	mov	r0, r7
   2b7d0:	f018 fd32 	bl	44238 <usb_dc_ep_set_callback>
	if (ret < 0) {
   2b7d4:	1e04      	subs	r4, r0, #0
   2b7d6:	db12      	blt.n	2b7fe <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b7d8:	4c1c      	ldr	r4, [pc, #112]	; (2b84c <usb_enable+0xec>)
   2b7da:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2b850 <usb_enable+0xf0>
   2b7de:	4544      	cmp	r4, r8
   2b7e0:	d314      	bcc.n	2b80c <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   2b7e2:	2000      	movs	r0, #0
   2b7e4:	f018 fbd6 	bl	43f94 <usb_dc_ep_enable>
	if (ret < 0) {
   2b7e8:	1e04      	subs	r4, r0, #0
   2b7ea:	db08      	blt.n	2b7fe <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   2b7ec:	2080      	movs	r0, #128	; 0x80
   2b7ee:	f018 fbd1 	bl	43f94 <usb_dc_ep_enable>
	if (ret < 0) {
   2b7f2:	1e04      	subs	r4, r0, #0
   2b7f4:	db03      	blt.n	2b7fe <usb_enable+0x9e>
	usb_dev.enabled = true;
   2b7f6:	2301      	movs	r3, #1
   2b7f8:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   2b7fc:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   2b7fe:	4810      	ldr	r0, [pc, #64]	; (2b840 <usb_enable+0xe0>)
   2b800:	f01c f986 	bl	47b10 <z_impl_k_mutex_unlock>
}
   2b804:	4620      	mov	r0, r4
   2b806:	b002      	add	sp, #8
   2b808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
   2b80c:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2b80e:	2600      	movs	r6, #0
   2b810:	7f22      	ldrb	r2, [r4, #28]
   2b812:	b2f3      	uxtb	r3, r6
   2b814:	429a      	cmp	r2, r3
   2b816:	d801      	bhi.n	2b81c <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b818:	3424      	adds	r4, #36	; 0x24
   2b81a:	e7e0      	b.n	2b7de <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   2b81c:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   2b820:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   2b824:	7910      	ldrb	r0, [r2, #4]
   2b826:	f018 fd07 	bl	44238 <usb_dc_ep_set_callback>
   2b82a:	3601      	adds	r6, #1
   2b82c:	2800      	cmp	r0, #0
   2b82e:	d0ef      	beq.n	2b810 <usb_enable+0xb0>
   2b830:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2b834:	e7e3      	b.n	2b7fe <usb_enable+0x9e>
		ret = -EALREADY;
   2b836:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2b83a:	e7e0      	b.n	2b7fe <usb_enable+0x9e>
   2b83c:	20003ce8 	.word	0x20003ce8
   2b840:	20000ed8 	.word	0x20000ed8
   2b844:	0002b1c9 	.word	0x0002b1c9
   2b848:	0002b619 	.word	0x0002b619
   2b84c:	20001220 	.word	0x20001220
   2b850:	20001244 	.word	0x20001244

0002b854 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   2b854:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   2b856:	4b1f      	ldr	r3, [pc, #124]	; (2b8d4 <usb_update_sn_string_descriptor+0x80>)
{
   2b858:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   2b85a:	aa05      	add	r2, sp, #20
   2b85c:	f103 0510 	add.w	r5, r3, #16
   2b860:	6818      	ldr	r0, [r3, #0]
   2b862:	6859      	ldr	r1, [r3, #4]
   2b864:	4614      	mov	r4, r2
   2b866:	c403      	stmia	r4!, {r0, r1}
   2b868:	3308      	adds	r3, #8
   2b86a:	42ab      	cmp	r3, r5
   2b86c:	4622      	mov	r2, r4
   2b86e:	d1f7      	bne.n	2b860 <usb_update_sn_string_descriptor+0xc>
   2b870:	781b      	ldrb	r3, [r3, #0]
   2b872:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   2b874:	2210      	movs	r2, #16
   2b876:	2100      	movs	r1, #0
   2b878:	a801      	add	r0, sp, #4
   2b87a:	f020 f811 	bl	4b8a0 <memset>
	memset(sn, 0, sizeof(sn));
   2b87e:	2212      	movs	r2, #18
   2b880:	2100      	movs	r1, #0
   2b882:	4815      	ldr	r0, [pc, #84]	; (2b8d8 <usb_update_sn_string_descriptor+0x84>)
   2b884:	f020 f80c 	bl	4b8a0 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   2b888:	2110      	movs	r1, #16
   2b88a:	a801      	add	r0, sp, #4
   2b88c:	f024 f982 	bl	4fb94 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   2b890:	2800      	cmp	r0, #0
   2b892:	dd1b      	ble.n	2b8cc <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   2b894:	2808      	cmp	r0, #8
   2b896:	bfb8      	it	lt
   2b898:	2008      	movlt	r0, #8
   2b89a:	3809      	subs	r0, #9
   2b89c:	ab01      	add	r3, sp, #4
   2b89e:	490e      	ldr	r1, [pc, #56]	; (2b8d8 <usb_update_sn_string_descriptor+0x84>)
   2b8a0:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   2b8a2:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2b8a4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2b8a8:	ac0a      	add	r4, sp, #40	; 0x28
   2b8aa:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2b8ae:	f003 030f 	and.w	r3, r3, #15
   2b8b2:	3328      	adds	r3, #40	; 0x28
   2b8b4:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
   2b8b6:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2b8b8:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2b8bc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2b8c0:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
   2b8c2:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2b8c4:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
   2b8c6:	f101 0102 	add.w	r1, r1, #2
   2b8ca:	d1eb      	bne.n	2b8a4 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   2b8cc:	4802      	ldr	r0, [pc, #8]	; (2b8d8 <usb_update_sn_string_descriptor+0x84>)
   2b8ce:	b00b      	add	sp, #44	; 0x2c
   2b8d0:	bd30      	pop	{r4, r5, pc}
   2b8d2:	bf00      	nop
   2b8d4:	000538e7 	.word	0x000538e7
   2b8d8:	20006d1a 	.word	0x20006d1a

0002b8dc <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
   2b8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b8e0:	4c65      	ldr	r4, [pc, #404]	; (2ba78 <usb_get_device_descriptor+0x19c>)
   2b8e2:	b085      	sub	sp, #20
	uint8_t str_descr_idx = 0U;
   2b8e4:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
   2b8e6:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   2b8ea:	46b1      	mov	r9, r6
	struct usb_cfg_data *cfg_data = NULL;
   2b8ec:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
   2b8ee:	46b2      	mov	sl, r6
	while (head->bLength != 0U) {
   2b8f0:	7823      	ldrb	r3, [r4, #0]
   2b8f2:	b92b      	cbnz	r3, 2b900 <usb_get_device_descriptor+0x24>
	if ((head + 1) != __usb_descriptor_end) {
   2b8f4:	4b61      	ldr	r3, [pc, #388]	; (2ba7c <usb_get_device_descriptor+0x1a0>)
   2b8f6:	3402      	adds	r4, #2
   2b8f8:	429c      	cmp	r4, r3
   2b8fa:	d1f3      	bne.n	2b8e4 <usb_get_device_descriptor+0x8>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   2b8fc:	485e      	ldr	r0, [pc, #376]	; (2ba78 <usb_get_device_descriptor+0x19c>)
   2b8fe:	e01d      	b.n	2b93c <usb_get_device_descriptor+0x60>
		switch (head->bDescriptorType) {
   2b900:	7863      	ldrb	r3, [r4, #1]
   2b902:	2b05      	cmp	r3, #5
   2b904:	d805      	bhi.n	2b912 <usb_get_device_descriptor+0x36>
   2b906:	e8df f003 	tbb	[pc, r3]
   2b90a:	0475      	.short	0x0475
   2b90c:	1f077503 	.word	0x1f077503
   2b910:	46a2      	mov	sl, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   2b912:	7823      	ldrb	r3, [r4, #0]
   2b914:	441c      	add	r4, r3
   2b916:	e7eb      	b.n	2b8f0 <usb_get_device_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
   2b918:	78e3      	ldrb	r3, [r4, #3]
   2b91a:	2b00      	cmp	r3, #0
   2b91c:	d1f9      	bne.n	2b912 <usb_get_device_descriptor+0x36>
			if (if_descr->bInterfaceNumber == 0U) {
   2b91e:	78a3      	ldrb	r3, [r4, #2]
   2b920:	b17b      	cbz	r3, 2b942 <usb_get_device_descriptor+0x66>
			numof_ifaces++;
   2b922:	f109 0901 	add.w	r9, r9, #1
   2b926:	fa5f f989 	uxtb.w	r9, r9
			break;
   2b92a:	e7f2      	b.n	2b912 <usb_get_device_descriptor+0x36>
		if (cfg_data->interface_descriptor == iface) {
   2b92c:	686a      	ldr	r2, [r5, #4]
   2b92e:	4294      	cmp	r4, r2
   2b930:	f000 809a 	beq.w	2ba68 <usb_get_device_descriptor+0x18c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b934:	3524      	adds	r5, #36	; 0x24
   2b936:	429d      	cmp	r5, r3
   2b938:	d3f8      	bcc.n	2b92c <usb_get_device_descriptor+0x50>
		return NULL;
   2b93a:	2000      	movs	r0, #0
}
   2b93c:	b005      	add	sp, #20
   2b93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b942:	4d4f      	ldr	r5, [pc, #316]	; (2ba80 <usb_get_device_descriptor+0x1a4>)
   2b944:	4b4f      	ldr	r3, [pc, #316]	; (2ba84 <usb_get_device_descriptor+0x1a8>)
   2b946:	e7f6      	b.n	2b936 <usb_get_device_descriptor+0x5a>
			if (!cfg_data) {
   2b948:	2d00      	cmp	r5, #0
   2b94a:	d0f6      	beq.n	2b93a <usb_get_device_descriptor+0x5e>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2b94c:	2300      	movs	r3, #0
   2b94e:	2101      	movs	r1, #1
   2b950:	7f2a      	ldrb	r2, [r5, #28]
   2b952:	4293      	cmp	r3, r2
   2b954:	d2f1      	bcs.n	2b93a <usb_get_device_descriptor+0x5e>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   2b956:	6a2a      	ldr	r2, [r5, #32]
   2b958:	78a7      	ldrb	r7, [r4, #2]
   2b95a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2b95e:	7910      	ldrb	r0, [r2, #4]
   2b960:	4287      	cmp	r7, r0
   2b962:	d001      	beq.n	2b968 <usb_get_device_descriptor+0x8c>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2b964:	3301      	adds	r3, #1
   2b966:	e7f3      	b.n	2b950 <usb_get_device_descriptor+0x74>
   2b968:	2701      	movs	r7, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   2b96a:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   2b96c:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   2b970:	f000 0003 	and.w	r0, r0, #3
   2b974:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   2b978:	7920      	ldrb	r0, [r4, #4]
   2b97a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   2b97e:	f8ad 000a 	strh.w	r0, [sp, #10]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2b982:	f994 0002 	ldrsb.w	r0, [r4, #2]
   2b986:	2800      	cmp	r0, #0
   2b988:	fa5f f887 	uxtb.w	r8, r7
   2b98c:	da27      	bge.n	2b9de <usb_get_device_descriptor+0x102>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   2b98e:	f107 0010 	add.w	r0, r7, #16
   2b992:	fa01 f000 	lsl.w	r0, r1, r0
   2b996:	ea10 0f0b 	tst.w	r0, fp
   2b99a:	d127      	bne.n	2b9ec <usb_get_device_descriptor+0x110>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   2b99c:	f048 0080 	orr.w	r0, r8, #128	; 0x80
   2b9a0:	f88d 0008 	strb.w	r0, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   2b9a4:	a802      	add	r0, sp, #8
   2b9a6:	e9cd 3200 	strd	r3, r2, [sp]
   2b9aa:	f023 ffc7 	bl	4f93c <usb_dc_ep_check_cap>
   2b9ae:	e9dd 3200 	ldrd	r3, r2, [sp]
   2b9b2:	2101      	movs	r1, #1
   2b9b4:	b9d0      	cbnz	r0, 2b9ec <usb_get_device_descriptor+0x110>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   2b9b6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2b9ba:	70a3      	strb	r3, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2b9bc:	f013 0f80 	tst.w	r3, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
   2b9c0:	bf18      	it	ne
   2b9c2:	f108 0810 	addne.w	r8, r8, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   2b9c6:	7113      	strb	r3, [r2, #4]
					*requested_ep |= (1U << (idx + 16U));
   2b9c8:	bf18      	it	ne
   2b9ca:	fa5f f888 	uxtbne.w	r8, r8
   2b9ce:	460b      	mov	r3, r1
					*requested_ep |= (1U << idx);
   2b9d0:	bf0c      	ite	eq
   2b9d2:	40bb      	lsleq	r3, r7
					*requested_ep |= (1U << (idx + 16U));
   2b9d4:	fa01 f308 	lslne.w	r3, r1, r8
					*requested_ep |= (1U << idx);
   2b9d8:	ea4b 0b03 	orr.w	fp, fp, r3
				return 0;
   2b9dc:	e799      	b.n	2b912 <usb_get_device_descriptor+0x36>
				if ((*requested_ep & (1U << (idx)))) {
   2b9de:	fa01 f007 	lsl.w	r0, r1, r7
   2b9e2:	ea10 0f0b 	tst.w	r0, fp
   2b9e6:	d101      	bne.n	2b9ec <usb_get_device_descriptor+0x110>
   2b9e8:	4640      	mov	r0, r8
   2b9ea:	e7d9      	b.n	2b9a0 <usb_get_device_descriptor+0xc4>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   2b9ec:	3701      	adds	r7, #1
   2b9ee:	2f10      	cmp	r7, #16
   2b9f0:	d1bb      	bne.n	2b96a <usb_get_device_descriptor+0x8e>
   2b9f2:	e7b7      	b.n	2b964 <usb_get_device_descriptor+0x88>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   2b9f4:	2e03      	cmp	r6, #3
   2b9f6:	d11d      	bne.n	2ba34 <usb_get_device_descriptor+0x158>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   2b9f8:	f7ff ff2c 	bl	2b854 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   2b9fc:	4607      	mov	r7, r0
   2b9fe:	b168      	cbz	r0, 2ba1c <usb_get_device_descriptor+0x140>
	runtime_sn_len = strlen(runtime_sn);
   2ba00:	f01f ff0f 	bl	4b822 <strlen>
	if (!runtime_sn_len) {
   2ba04:	4680      	mov	r8, r0
   2ba06:	b148      	cbz	r0, 2ba1c <usb_get_device_descriptor+0x140>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   2ba08:	481f      	ldr	r0, [pc, #124]	; (2ba88 <usb_get_device_descriptor+0x1ac>)
   2ba0a:	f01f ff0a 	bl	4b822 <strlen>
	if (runtime_sn_len != default_sn_len) {
   2ba0e:	4580      	cmp	r8, r0
   2ba10:	d104      	bne.n	2ba1c <usb_get_device_descriptor+0x140>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   2ba12:	4642      	mov	r2, r8
   2ba14:	4639      	mov	r1, r7
   2ba16:	1ca0      	adds	r0, r4, #2
   2ba18:	f01f ff37 	bl	4b88a <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   2ba1c:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   2ba1e:	f06f 0102 	mvn.w	r1, #2
   2ba22:	18e2      	adds	r2, r4, r3
   2ba24:	1b09      	subs	r1, r1, r4
   2ba26:	eb04 0353 	add.w	r3, r4, r3, lsr #1
   2ba2a:	42d1      	cmn	r1, r2
   2ba2c:	d513      	bpl.n	2ba56 <usb_get_device_descriptor+0x17a>
			str_descr_idx += 1U;
   2ba2e:	3601      	adds	r6, #1
   2ba30:	b2f6      	uxtb	r6, r6
			break;
   2ba32:	e76e      	b.n	2b912 <usb_get_device_descriptor+0x36>
			if (str_descr_idx) {
   2ba34:	2e00      	cmp	r6, #0
   2ba36:	d1f1      	bne.n	2ba1c <usb_get_device_descriptor+0x140>
				if (!cfg_descr) {
   2ba38:	f1ba 0f00 	cmp.w	sl, #0
   2ba3c:	f43f af7d 	beq.w	2b93a <usb_get_device_descriptor+0x5e>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   2ba40:	eba4 030a 	sub.w	r3, r4, sl
	dst[0] = val;
   2ba44:	f88a 3002 	strb.w	r3, [sl, #2]
	dst[1] = val >> 8;
   2ba48:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2ba4c:	f88a 3003 	strb.w	r3, [sl, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   2ba50:	f88a 9004 	strb.w	r9, [sl, #4]
   2ba54:	e7eb      	b.n	2ba2e <usb_get_device_descriptor+0x152>
		buf[i] = 0U;
   2ba56:	f04f 0000 	mov.w	r0, #0
   2ba5a:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   2ba5e:	f813 0901 	ldrb.w	r0, [r3], #-1
   2ba62:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
   2ba66:	e7e0      	b.n	2ba2a <usb_get_device_descriptor+0x14e>
				if (cfg_data->interface_config) {
   2ba68:	68ab      	ldr	r3, [r5, #8]
   2ba6a:	2b00      	cmp	r3, #0
   2ba6c:	f43f af59 	beq.w	2b922 <usb_get_device_descriptor+0x46>
					cfg_data->interface_config(head,
   2ba70:	4649      	mov	r1, r9
   2ba72:	4620      	mov	r0, r4
   2ba74:	4798      	blx	r3
   2ba76:	e754      	b.n	2b922 <usb_get_device_descriptor+0x46>
   2ba78:	2000118c 	.word	0x2000118c
   2ba7c:	2000121e 	.word	0x2000121e
   2ba80:	20001220 	.word	0x20001220
   2ba84:	20001244 	.word	0x20001244
   2ba88:	000538e7 	.word	0x000538e7

0002ba8c <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   2ba8c:	b510      	push	{r4, lr}
   2ba8e:	4b09      	ldr	r3, [pc, #36]	; (2bab4 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2ba90:	2100      	movs	r1, #0
   2ba92:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   2ba94:	781c      	ldrb	r4, [r3, #0]
   2ba96:	4284      	cmp	r4, r0
   2ba98:	d105      	bne.n	2baa6 <usb_ep_get_transfer+0x1a>
   2ba9a:	685c      	ldr	r4, [r3, #4]
   2ba9c:	b11c      	cbz	r4, 2baa6 <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
   2ba9e:	2348      	movs	r3, #72	; 0x48
   2baa0:	fb03 2001 	mla	r0, r3, r1, r2
		}
	}

	return NULL;
}
   2baa4:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2baa6:	3101      	adds	r1, #1
   2baa8:	2904      	cmp	r1, #4
   2baaa:	f103 0348 	add.w	r3, r3, #72	; 0x48
   2baae:	d1f1      	bne.n	2ba94 <usb_ep_get_transfer+0x8>
	return NULL;
   2bab0:	2000      	movs	r0, #0
   2bab2:	e7f7      	b.n	2baa4 <usb_ep_get_transfer+0x18>
   2bab4:	20003dac 	.word	0x20003dac

0002bab8 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   2bab8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   2babc:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
   2bac0:	f810 6c34 	ldrb.w	r6, [r0, #-52]
	if (trans->status != -EBUSY) {
   2bac4:	3310      	adds	r3, #16
{
   2bac6:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   2bac8:	d110      	bne.n	2baec <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   2baca:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
   2bacc:	f850 2c28 	ldr.w	r2, [r0, #-40]
	if (trans->flags & USB_TRANS_WRITE) {
   2bad0:	0799      	lsls	r1, r3, #30
   2bad2:	d53c      	bpl.n	2bb4e <usb_transfer_work+0x96>
		if (!trans->bsize) {
   2bad4:	bb02      	cbnz	r2, 2bb18 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   2bad6:	f013 0304 	ands.w	r3, r3, #4
   2bada:	d104      	bne.n	2bae6 <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   2badc:	461a      	mov	r2, r3
   2bade:	4619      	mov	r1, r3
   2bae0:	4630      	mov	r0, r6
   2bae2:	f01e fb78 	bl	4a1d6 <usb_write>
			}
			trans->status = 0;
   2bae6:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   2bae8:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   2baec:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2baf0:	3310      	adds	r3, #16
   2baf2:	d00e      	beq.n	2bb12 <usb_transfer_work+0x5a>
   2baf4:	f854 5c20 	ldr.w	r5, [r4, #-32]
   2baf8:	b15d      	cbz	r5, 2bb12 <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   2bafa:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   2bafe:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   2bb02:	f024 fd00 	bl	50506 <k_is_in_isr>
   2bb06:	2800      	cmp	r0, #0
   2bb08:	d04c      	beq.n	2bba4 <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2bb0a:	482e      	ldr	r0, [pc, #184]	; (2bbc4 <usb_transfer_work+0x10c>)
   2bb0c:	4621      	mov	r1, r4
   2bb0e:	f024 fe72 	bl	507f6 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
   2bb12:	b002      	add	sp, #8
   2bb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   2bb18:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   2bb1c:	ab01      	add	r3, sp, #4
   2bb1e:	4630      	mov	r0, r6
   2bb20:	f01e fb59 	bl	4a1d6 <usb_write>
		if (ret) {
   2bb24:	b110      	cbz	r0, 2bb2c <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   2bb26:	f06f 0315 	mvn.w	r3, #21
   2bb2a:	e7dd      	b.n	2bae8 <usb_transfer_work+0x30>
		trans->buffer += bytes;
   2bb2c:	9a01      	ldr	r2, [sp, #4]
   2bb2e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2bb32:	4413      	add	r3, r2
   2bb34:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   2bb38:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2bb3c:	1a9b      	subs	r3, r3, r2
   2bb3e:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   2bb42:	f854 3c24 	ldr.w	r3, [r4, #-36]
   2bb46:	4413      	add	r3, r2
   2bb48:	f844 3c24 	str.w	r3, [r4, #-36]
   2bb4c:	e7ce      	b.n	2baec <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   2bb4e:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   2bb52:	ab01      	add	r3, sp, #4
   2bb54:	4630      	mov	r0, r6
   2bb56:	f018 fae5 	bl	44124 <usb_dc_ep_read_wait>
		if (ret) {
   2bb5a:	2800      	cmp	r0, #0
   2bb5c:	d1e3      	bne.n	2bb26 <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   2bb5e:	9d01      	ldr	r5, [sp, #4]
   2bb60:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2bb64:	442b      	add	r3, r5
   2bb66:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   2bb6a:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2bb6e:	1b5b      	subs	r3, r3, r5
   2bb70:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   2bb74:	f854 3c24 	ldr.w	r3, [r4, #-36]
   2bb78:	442b      	add	r3, r5
   2bb7a:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   2bb7e:	2d00      	cmp	r5, #0
   2bb80:	d0b1      	beq.n	2bae6 <usb_transfer_work+0x2e>
   2bb82:	4630      	mov	r0, r6
   2bb84:	f018 fb72 	bl	4426c <usb_dc_ep_mps>
   2bb88:	fbb5 f3f0 	udiv	r3, r5, r0
   2bb8c:	fb03 5510 	mls	r5, r3, r0, r5
   2bb90:	2d00      	cmp	r5, #0
   2bb92:	d1a8      	bne.n	2bae6 <usb_transfer_work+0x2e>
   2bb94:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2bb98:	2b00      	cmp	r3, #0
   2bb9a:	d0a4      	beq.n	2bae6 <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   2bb9c:	4630      	mov	r0, r6
   2bb9e:	f018 fb09 	bl	441b4 <usb_dc_ep_read_continue>
   2bba2:	e7a3      	b.n	2baec <usb_transfer_work+0x34>
		trans->cb = NULL;
   2bba4:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
   2bba8:	f1a4 0018 	sub.w	r0, r4, #24
   2bbac:	f01c f826 	bl	47bfc <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
   2bbb0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2bbb4:	338c      	adds	r3, #140	; 0x8c
   2bbb6:	d0ac      	beq.n	2bb12 <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
   2bbb8:	4642      	mov	r2, r8
   2bbba:	4639      	mov	r1, r7
   2bbbc:	4630      	mov	r0, r6
   2bbbe:	47a8      	blx	r5
   2bbc0:	e7a7      	b.n	2bb12 <usb_transfer_work+0x5a>
   2bbc2:	bf00      	nop
   2bbc4:	20003af0 	.word	0x20003af0

0002bbc8 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
   2bbc8:	b510      	push	{r4, lr}
   2bbca:	f04f 0320 	mov.w	r3, #32
   2bbce:	f3ef 8411 	mrs	r4, BASEPRI
   2bbd2:	f383 8812 	msr	BASEPRI_MAX, r3
   2bbd6:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   2bbda:	f7ff ff57 	bl	2ba8c <usb_ep_get_transfer>
	if (!trans) {
   2bbde:	b150      	cbz	r0, 2bbf6 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   2bbe0:	6843      	ldr	r3, [r0, #4]
   2bbe2:	3310      	adds	r3, #16
   2bbe4:	d107      	bne.n	2bbf6 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   2bbe6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   2bbea:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2bbec:	f100 0134 	add.w	r1, r0, #52	; 0x34
   2bbf0:	4803      	ldr	r0, [pc, #12]	; (2bc00 <usb_cancel_transfer+0x38>)
   2bbf2:	f024 fe00 	bl	507f6 <k_work_submit_to_queue>
	__asm__ volatile(
   2bbf6:	f384 8811 	msr	BASEPRI, r4
   2bbfa:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   2bbfe:	bd10      	pop	{r4, pc}
   2bc00:	20003af0 	.word	0x20003af0

0002bc04 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   2bc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bc08:	4c10      	ldr	r4, [pc, #64]	; (2bc4c <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2bc0a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2bc50 <usb_cancel_transfers+0x4c>
{
   2bc0e:	2504      	movs	r5, #4
			trans->status = -ECANCELED;
   2bc10:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
   2bc14:	f04f 0320 	mov.w	r3, #32
   2bc18:	f3ef 8611 	mrs	r6, BASEPRI
   2bc1c:	f383 8812 	msr	BASEPRI_MAX, r3
   2bc20:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
   2bc24:	6863      	ldr	r3, [r4, #4]
   2bc26:	3310      	adds	r3, #16
   2bc28:	d105      	bne.n	2bc36 <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2bc2a:	f104 0134 	add.w	r1, r4, #52	; 0x34
   2bc2e:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
   2bc30:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2bc32:	f024 fde0 	bl	507f6 <k_work_submit_to_queue>
	__asm__ volatile(
   2bc36:	f386 8811 	msr	BASEPRI, r6
   2bc3a:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2bc3e:	3d01      	subs	r5, #1
   2bc40:	f104 0448 	add.w	r4, r4, #72	; 0x48
   2bc44:	d1e6      	bne.n	2bc14 <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   2bc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bc4a:	bf00      	nop
   2bc4c:	20003dac 	.word	0x20003dac
   2bc50:	20003af0 	.word	0x20003af0

0002bc54 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   2bc54:	b570      	push	{r4, r5, r6, lr}
   2bc56:	4c0a      	ldr	r4, [pc, #40]	; (2bc80 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   2bc58:	4e0a      	ldr	r6, [pc, #40]	; (2bc84 <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2bc5a:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   2bc5c:	4631      	mov	r1, r6
   2bc5e:	4620      	mov	r0, r4
   2bc60:	f024 fdc0 	bl	507e4 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2bc64:	2201      	movs	r2, #1
   2bc66:	f1a4 0018 	sub.w	r0, r4, #24
   2bc6a:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2bc6c:	3501      	adds	r5, #1
   2bc6e:	f024 fd39 	bl	506e4 <z_impl_k_sem_init>
   2bc72:	2d04      	cmp	r5, #4
   2bc74:	f104 0448 	add.w	r4, r4, #72	; 0x48
   2bc78:	d1f0      	bne.n	2bc5c <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   2bc7a:	2000      	movs	r0, #0
   2bc7c:	bd70      	pop	{r4, r5, r6, pc}
   2bc7e:	bf00      	nop
   2bc80:	20003de0 	.word	0x20003de0
   2bc84:	0002bab9 	.word	0x0002bab9

0002bc88 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   2bc88:	4b0c      	ldr	r3, [pc, #48]	; (2bcbc <flash_area_open+0x34>)
   2bc8a:	681b      	ldr	r3, [r3, #0]
{
   2bc8c:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   2bc8e:	b173      	cbz	r3, 2bcae <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   2bc90:	4a0b      	ldr	r2, [pc, #44]	; (2bcc0 <flash_area_open+0x38>)
   2bc92:	6815      	ldr	r5, [r2, #0]
   2bc94:	2200      	movs	r2, #0
   2bc96:	42aa      	cmp	r2, r5
   2bc98:	db02      	blt.n	2bca0 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   2bc9a:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   2bc9e:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   2bca0:	461c      	mov	r4, r3
   2bca2:	f813 6b10 	ldrb.w	r6, [r3], #16
   2bca6:	4286      	cmp	r6, r0
   2bca8:	d004      	beq.n	2bcb4 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   2bcaa:	3201      	adds	r2, #1
   2bcac:	e7f3      	b.n	2bc96 <flash_area_open+0xe>
		return -EACCES;
   2bcae:	f06f 000c 	mvn.w	r0, #12
   2bcb2:	e7f4      	b.n	2bc9e <flash_area_open+0x16>
	*fap = area;
   2bcb4:	600c      	str	r4, [r1, #0]
	return 0;
   2bcb6:	2000      	movs	r0, #0
   2bcb8:	e7f1      	b.n	2bc9e <flash_area_open+0x16>
   2bcba:	bf00      	nop
   2bcbc:	200004d0 	.word	0x200004d0
   2bcc0:	00051ea0 	.word	0x00051ea0

0002bcc4 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   2bcc4:	b570      	push	{r4, r5, r6, lr}
   2bcc6:	b088      	sub	sp, #32
   2bcc8:	4605      	mov	r5, r0
   2bcca:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   2bccc:	b2c0      	uxtb	r0, r0
   2bcce:	4669      	mov	r1, sp
{
   2bcd0:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   2bcd2:	f7ff ffd9 	bl	2bc88 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   2bcd6:	2800      	cmp	r0, #0
   2bcd8:	db1f      	blt.n	2bd1a <flash_area_get_sectors+0x56>
   2bcda:	9b00      	ldr	r3, [sp, #0]
   2bcdc:	b1eb      	cbz	r3, 2bd1a <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   2bcde:	685a      	ldr	r2, [r3, #4]
   2bce0:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   2bce2:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
   2bce4:	6821      	ldr	r1, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
   2bce6:	68d8      	ldr	r0, [r3, #12]
	cb_data->area_idx = idx;
   2bce8:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   2bcea:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   2bcee:	2200      	movs	r2, #0
	cb_data->status = 0;
   2bcf0:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   2bcf4:	9205      	str	r2, [sp, #20]
   2bcf6:	f01b fbb9 	bl	4746c <z_impl_device_get_binding>
   2bcfa:	4605      	mov	r5, r0
	flash_area_close(fa);
   2bcfc:	9800      	ldr	r0, [sp, #0]
   2bcfe:	f01e fab2 	bl	4a266 <flash_area_close>
	if (flash_dev == NULL) {
   2bd02:	b16d      	cbz	r5, 2bd20 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   2bd04:	4628      	mov	r0, r5
   2bd06:	4908      	ldr	r1, [pc, #32]	; (2bd28 <flash_area_get_sectors+0x64>)
   2bd08:	aa01      	add	r2, sp, #4
   2bd0a:	f023 ffe0 	bl	4fcce <flash_page_foreach>
	if (cb_data->status == 0) {
   2bd0e:	9807      	ldr	r0, [sp, #28]
   2bd10:	b908      	cbnz	r0, 2bd16 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   2bd12:	9b05      	ldr	r3, [sp, #20]
   2bd14:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   2bd16:	b008      	add	sp, #32
   2bd18:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2bd1a:	f06f 0015 	mvn.w	r0, #21
   2bd1e:	e7fa      	b.n	2bd16 <flash_area_get_sectors+0x52>
		return -ENODEV;
   2bd20:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   2bd24:	e7f7      	b.n	2bd16 <flash_area_get_sectors+0x52>
   2bd26:	bf00      	nop
   2bd28:	0004a269 	.word	0x0004a269

0002bd2c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   2bd2c:	4b10      	ldr	r3, [pc, #64]	; (2bd70 <settings_save_one+0x44>)
{
   2bd2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   2bd32:	681c      	ldr	r4, [r3, #0]
{
   2bd34:	4605      	mov	r5, r0
   2bd36:	460e      	mov	r6, r1
   2bd38:	4617      	mov	r7, r2
	if (!cs) {
   2bd3a:	b1ac      	cbz	r4, 2bd68 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   2bd3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bd40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bd44:	480b      	ldr	r0, [pc, #44]	; (2bd74 <settings_save_one+0x48>)
   2bd46:	f01b fe6b 	bl	47a20 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   2bd4a:	6863      	ldr	r3, [r4, #4]
   2bd4c:	4632      	mov	r2, r6
   2bd4e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2bd52:	4629      	mov	r1, r5
   2bd54:	463b      	mov	r3, r7
   2bd56:	4620      	mov	r0, r4
   2bd58:	47c0      	blx	r8
   2bd5a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2bd5c:	4805      	ldr	r0, [pc, #20]	; (2bd74 <settings_save_one+0x48>)
   2bd5e:	f01b fed7 	bl	47b10 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   2bd62:	4620      	mov	r0, r4
   2bd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   2bd68:	f06f 0401 	mvn.w	r4, #1
   2bd6c:	e7f9      	b.n	2bd62 <settings_save_one+0x36>
   2bd6e:	bf00      	nop
   2bd70:	20003ed4 	.word	0x20003ed4
   2bd74:	20000ec4 	.word	0x20000ec4

0002bd78 <settings_src_register>:
	parent->next = child;
   2bd78:	2300      	movs	r3, #0
   2bd7a:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   2bd7c:	4b04      	ldr	r3, [pc, #16]	; (2bd90 <settings_src_register+0x18>)
   2bd7e:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   2bd80:	b912      	cbnz	r2, 2bd88 <settings_src_register+0x10>
	list->head = node;
   2bd82:	e9c3 0000 	strd	r0, r0, [r3]
}
   2bd86:	4770      	bx	lr
	parent->next = child;
   2bd88:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2bd8a:	6058      	str	r0, [r3, #4]
}
   2bd8c:	4770      	bx	lr
   2bd8e:	bf00      	nop
   2bd90:	20003ecc 	.word	0x20003ecc

0002bd94 <settings_dst_register>:
	settings_save_dst = cs;
   2bd94:	4b01      	ldr	r3, [pc, #4]	; (2bd9c <settings_dst_register+0x8>)
   2bd96:	6018      	str	r0, [r3, #0]
}
   2bd98:	4770      	bx	lr
   2bd9a:	bf00      	nop
   2bd9c:	20003ed4 	.word	0x20003ed4

0002bda0 <settings_load_subtree>:
{
   2bda0:	b530      	push	{r4, r5, lr}
   2bda2:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   2bda4:	2300      	movs	r3, #0
{
   2bda6:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   2bda8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2bdac:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   2bdae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bdb2:	480c      	ldr	r0, [pc, #48]	; (2bde4 <settings_load_subtree+0x44>)
   2bdb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bdb8:	f01b fe32 	bl	47a20 <z_impl_k_mutex_lock>
	return list->head;
   2bdbc:	4b0a      	ldr	r3, [pc, #40]	; (2bde8 <settings_load_subtree+0x48>)
   2bdbe:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2bdc0:	b134      	cbz	r4, 2bdd0 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   2bdc2:	6863      	ldr	r3, [r4, #4]
   2bdc4:	4620      	mov	r0, r4
   2bdc6:	681b      	ldr	r3, [r3, #0]
   2bdc8:	a901      	add	r1, sp, #4
   2bdca:	4798      	blx	r3
	return node->next;
   2bdcc:	6824      	ldr	r4, [r4, #0]
   2bdce:	e7f7      	b.n	2bdc0 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   2bdd0:	4628      	mov	r0, r5
   2bdd2:	f000 f8c5 	bl	2bf60 <settings_commit_subtree>
   2bdd6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2bdd8:	4802      	ldr	r0, [pc, #8]	; (2bde4 <settings_load_subtree+0x44>)
   2bdda:	f01b fe99 	bl	47b10 <z_impl_k_mutex_unlock>
}
   2bdde:	4620      	mov	r0, r4
   2bde0:	b005      	add	sp, #20
   2bde2:	bd30      	pop	{r4, r5, pc}
   2bde4:	20000ec4 	.word	0x20000ec4
   2bde8:	20003ecc 	.word	0x20003ecc

0002bdec <settings_load_subtree_direct>:
{
   2bdec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   2bdee:	e9cd 0101 	strd	r0, r1, [sp, #4]
   2bdf2:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   2bdf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bdf8:	480a      	ldr	r0, [pc, #40]	; (2be24 <settings_load_subtree_direct+0x38>)
   2bdfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bdfe:	f01b fe0f 	bl	47a20 <z_impl_k_mutex_lock>
	return list->head;
   2be02:	4b09      	ldr	r3, [pc, #36]	; (2be28 <settings_load_subtree_direct+0x3c>)
   2be04:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2be06:	b134      	cbz	r4, 2be16 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   2be08:	6863      	ldr	r3, [r4, #4]
   2be0a:	4620      	mov	r0, r4
   2be0c:	681b      	ldr	r3, [r3, #0]
   2be0e:	a901      	add	r1, sp, #4
   2be10:	4798      	blx	r3
	return node->next;
   2be12:	6824      	ldr	r4, [r4, #0]
   2be14:	e7f7      	b.n	2be06 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   2be16:	4803      	ldr	r0, [pc, #12]	; (2be24 <settings_load_subtree_direct+0x38>)
   2be18:	f01b fe7a 	bl	47b10 <z_impl_k_mutex_unlock>
}
   2be1c:	2000      	movs	r0, #0
   2be1e:	b004      	add	sp, #16
   2be20:	bd10      	pop	{r4, pc}
   2be22:	bf00      	nop
   2be24:	20000ec4 	.word	0x20000ec4
   2be28:	20003ecc 	.word	0x20003ecc

0002be2c <settings_store_init>:
	list->head = NULL;
   2be2c:	4b02      	ldr	r3, [pc, #8]	; (2be38 <settings_store_init+0xc>)
   2be2e:	2200      	movs	r2, #0
	list->tail = NULL;
   2be30:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   2be34:	4770      	bx	lr
   2be36:	bf00      	nop
   2be38:	20003ecc 	.word	0x20003ecc

0002be3c <settings_init>:
	list->head = NULL;
   2be3c:	4b02      	ldr	r3, [pc, #8]	; (2be48 <settings_init+0xc>)
   2be3e:	2200      	movs	r2, #0
	list->tail = NULL;
   2be40:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   2be44:	f7ff bff2 	b.w	2be2c <settings_store_init>
   2be48:	20003ed8 	.word	0x20003ed8

0002be4c <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   2be4c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2be4e:	4c1b      	ldr	r4, [pc, #108]	; (2bebc <settings_register+0x70>)
   2be50:	4e1b      	ldr	r6, [pc, #108]	; (2bec0 <settings_register+0x74>)
{
   2be52:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2be54:	42b4      	cmp	r4, r6
   2be56:	d312      	bcc.n	2be7e <settings_register+0x32>
	return list->head;
   2be58:	4e1a      	ldr	r6, [pc, #104]	; (2bec4 <settings_register+0x78>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2be5a:	481b      	ldr	r0, [pc, #108]	; (2bec8 <settings_register+0x7c>)
   2be5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2be60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2be64:	f01b fddc 	bl	47a20 <z_impl_k_mutex_lock>
   2be68:	6834      	ldr	r4, [r6, #0]
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2be6a:	b17c      	cbz	r4, 2be8c <settings_register+0x40>
		if (strcmp(handler->name, ch->name) == 0) {
   2be6c:	6828      	ldr	r0, [r5, #0]
   2be6e:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2be72:	3c14      	subs	r4, #20
		if (strcmp(handler->name, ch->name) == 0) {
   2be74:	f01f fcdc 	bl	4b830 <strcmp>
   2be78:	b1c8      	cbz	r0, 2beae <settings_register+0x62>
	return node->next;
   2be7a:	6964      	ldr	r4, [r4, #20]
   2be7c:	e7f5      	b.n	2be6a <settings_register+0x1e>
		if (strcmp(handler->name, ch->name) == 0) {
   2be7e:	6821      	ldr	r1, [r4, #0]
   2be80:	6828      	ldr	r0, [r5, #0]
   2be82:	f01f fcd5 	bl	4b830 <strcmp>
   2be86:	b1a8      	cbz	r0, 2beb4 <settings_register+0x68>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2be88:	3414      	adds	r4, #20
   2be8a:	e7e3      	b.n	2be54 <settings_register+0x8>
	return list->tail;
   2be8c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   2be8e:	2400      	movs	r4, #0
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   2be90:	f105 0314 	add.w	r3, r5, #20
   2be94:	616c      	str	r4, [r5, #20]
Z_GENLIST_APPEND(slist, snode)
   2be96:	b93a      	cbnz	r2, 2bea8 <settings_register+0x5c>
	list->head = node;
   2be98:	e9c6 3300 	strd	r3, r3, [r6]
	int rc = 0;
   2be9c:	4614      	mov	r4, r2
	return z_impl_k_mutex_unlock(mutex);
   2be9e:	480a      	ldr	r0, [pc, #40]	; (2bec8 <settings_register+0x7c>)
   2bea0:	f01b fe36 	bl	47b10 <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   2bea4:	4620      	mov	r0, r4
   2bea6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   2bea8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2beaa:	6073      	str	r3, [r6, #4]
}
   2beac:	e7f7      	b.n	2be9e <settings_register+0x52>
			rc = -EEXIST;
   2beae:	f06f 0410 	mvn.w	r4, #16
   2beb2:	e7f4      	b.n	2be9e <settings_register+0x52>
			return -EEXIST;
   2beb4:	f06f 0410 	mvn.w	r4, #16
   2beb8:	e7f4      	b.n	2bea4 <settings_register+0x58>
   2beba:	bf00      	nop
   2bebc:	00051384 	.word	0x00051384
   2bec0:	000513fc 	.word	0x000513fc
   2bec4:	20003ed8 	.word	0x20003ed8
   2bec8:	20000ec4 	.word	0x20000ec4

0002becc <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   2becc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2bed0:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   2bed2:	460e      	mov	r6, r1
   2bed4:	b109      	cbz	r1, 2beda <settings_parse_and_lookup+0xe>
		*next = NULL;
   2bed6:	2300      	movs	r3, #0
   2bed8:	600b      	str	r3, [r1, #0]
   2beda:	4d1e      	ldr	r5, [pc, #120]	; (2bf54 <settings_parse_and_lookup+0x88>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2bedc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 2bf58 <settings_parse_and_lookup+0x8c>
   2bee0:	2400      	movs	r4, #0
   2bee2:	454d      	cmp	r5, r9
   2bee4:	d311      	bcc.n	2bf0a <settings_parse_and_lookup+0x3e>
	return list->head;
   2bee6:	4b1d      	ldr	r3, [pc, #116]	; (2bf5c <settings_parse_and_lookup+0x90>)
   2bee8:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2beea:	b375      	cbz	r5, 2bf4a <settings_parse_and_lookup+0x7e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2beec:	f855 8c14 	ldr.w	r8, [r5, #-20]
   2bef0:	aa01      	add	r2, sp, #4
   2bef2:	4641      	mov	r1, r8
   2bef4:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2bef6:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2bef8:	f01e f9d8 	bl	4a2ac <settings_name_steq>
   2befc:	b318      	cbz	r0, 2bf46 <settings_parse_and_lookup+0x7a>
			continue;
		}
		if (!bestmatch) {
   2befe:	b9dc      	cbnz	r4, 2bf38 <settings_parse_and_lookup+0x6c>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   2bf00:	b10e      	cbz	r6, 2bf06 <settings_parse_and_lookup+0x3a>
				*next = tmpnext;
   2bf02:	9b01      	ldr	r3, [sp, #4]
   2bf04:	6033      	str	r3, [r6, #0]
   2bf06:	462c      	mov	r4, r5
   2bf08:	e01d      	b.n	2bf46 <settings_parse_and_lookup+0x7a>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2bf0a:	f8d5 8000 	ldr.w	r8, [r5]
   2bf0e:	aa01      	add	r2, sp, #4
   2bf10:	4641      	mov	r1, r8
   2bf12:	4638      	mov	r0, r7
   2bf14:	f01e f9ca 	bl	4a2ac <settings_name_steq>
   2bf18:	b160      	cbz	r0, 2bf34 <settings_parse_and_lookup+0x68>
		if (!bestmatch) {
   2bf1a:	b924      	cbnz	r4, 2bf26 <settings_parse_and_lookup+0x5a>
			if (next) {
   2bf1c:	b10e      	cbz	r6, 2bf22 <settings_parse_and_lookup+0x56>
				*next = tmpnext;
   2bf1e:	9b01      	ldr	r3, [sp, #4]
   2bf20:	6033      	str	r3, [r6, #0]
   2bf22:	462c      	mov	r4, r5
   2bf24:	e006      	b.n	2bf34 <settings_parse_and_lookup+0x68>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2bf26:	6821      	ldr	r1, [r4, #0]
   2bf28:	2200      	movs	r2, #0
   2bf2a:	4640      	mov	r0, r8
   2bf2c:	f01e f9be 	bl	4a2ac <settings_name_steq>
   2bf30:	2800      	cmp	r0, #0
   2bf32:	d1f3      	bne.n	2bf1c <settings_parse_and_lookup+0x50>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2bf34:	3514      	adds	r5, #20
   2bf36:	e7d4      	b.n	2bee2 <settings_parse_and_lookup+0x16>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2bf38:	6821      	ldr	r1, [r4, #0]
   2bf3a:	2200      	movs	r2, #0
   2bf3c:	4640      	mov	r0, r8
   2bf3e:	f01e f9b5 	bl	4a2ac <settings_name_steq>
   2bf42:	2800      	cmp	r0, #0
   2bf44:	d1dc      	bne.n	2bf00 <settings_parse_and_lookup+0x34>
	return node->next;
   2bf46:	696d      	ldr	r5, [r5, #20]
   2bf48:	e7cf      	b.n	2beea <settings_parse_and_lookup+0x1e>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   2bf4a:	4620      	mov	r0, r4
   2bf4c:	b003      	add	sp, #12
   2bf4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2bf52:	bf00      	nop
   2bf54:	00051384 	.word	0x00051384
   2bf58:	000513fc 	.word	0x000513fc
   2bf5c:	20003ed8 	.word	0x20003ed8

0002bf60 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   2bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2bf62:	4c18      	ldr	r4, [pc, #96]	; (2bfc4 <settings_commit_subtree+0x64>)
   2bf64:	4f18      	ldr	r7, [pc, #96]	; (2bfc8 <settings_commit_subtree+0x68>)
{
   2bf66:	4606      	mov	r6, r0
	rc = 0;
   2bf68:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2bf6a:	42bc      	cmp	r4, r7
   2bf6c:	d308      	bcc.n	2bf80 <settings_commit_subtree+0x20>
	return list->head;
   2bf6e:	4b17      	ldr	r3, [pc, #92]	; (2bfcc <settings_commit_subtree+0x6c>)
   2bf70:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2bf72:	b324      	cbz	r4, 2bfbe <settings_commit_subtree+0x5e>
   2bf74:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2bf76:	b9ae      	cbnz	r6, 2bfa4 <settings_commit_subtree+0x44>
			continue;
		}
		if (ch->h_commit) {
   2bf78:	68e3      	ldr	r3, [r4, #12]
   2bf7a:	b9db      	cbnz	r3, 2bfb4 <settings_commit_subtree+0x54>
	return node->next;
   2bf7c:	6964      	ldr	r4, [r4, #20]
   2bf7e:	e7f8      	b.n	2bf72 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2bf80:	b91e      	cbnz	r6, 2bf8a <settings_commit_subtree+0x2a>
		if (ch->h_commit) {
   2bf82:	68e3      	ldr	r3, [r4, #12]
   2bf84:	b94b      	cbnz	r3, 2bf9a <settings_commit_subtree+0x3a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2bf86:	3414      	adds	r4, #20
   2bf88:	e7ef      	b.n	2bf6a <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2bf8a:	6820      	ldr	r0, [r4, #0]
   2bf8c:	2200      	movs	r2, #0
   2bf8e:	4631      	mov	r1, r6
   2bf90:	f01e f98c 	bl	4a2ac <settings_name_steq>
   2bf94:	2800      	cmp	r0, #0
   2bf96:	d1f4      	bne.n	2bf82 <settings_commit_subtree+0x22>
   2bf98:	e7f5      	b.n	2bf86 <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   2bf9a:	4798      	blx	r3
				rc = rc2;
   2bf9c:	2d00      	cmp	r5, #0
   2bf9e:	bf08      	it	eq
   2bfa0:	4605      	moveq	r5, r0
   2bfa2:	e7f0      	b.n	2bf86 <settings_commit_subtree+0x26>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2bfa4:	6820      	ldr	r0, [r4, #0]
   2bfa6:	2200      	movs	r2, #0
   2bfa8:	4631      	mov	r1, r6
   2bfaa:	f01e f97f 	bl	4a2ac <settings_name_steq>
   2bfae:	2800      	cmp	r0, #0
   2bfb0:	d1e2      	bne.n	2bf78 <settings_commit_subtree+0x18>
   2bfb2:	e7e3      	b.n	2bf7c <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   2bfb4:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   2bfb6:	2d00      	cmp	r5, #0
   2bfb8:	bf08      	it	eq
   2bfba:	4605      	moveq	r5, r0
   2bfbc:	e7de      	b.n	2bf7c <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   2bfbe:	4628      	mov	r0, r5
   2bfc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bfc2:	bf00      	nop
   2bfc4:	00051384 	.word	0x00051384
   2bfc8:	000513fc 	.word	0x000513fc
   2bfcc:	20003ed8 	.word	0x20003ed8

0002bfd0 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   2bfd0:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   2bfd2:	4c06      	ldr	r4, [pc, #24]	; (2bfec <settings_subsys_init+0x1c>)
   2bfd4:	7823      	ldrb	r3, [r4, #0]
   2bfd6:	b93b      	cbnz	r3, 2bfe8 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   2bfd8:	f7ff ff30 	bl	2be3c <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   2bfdc:	f000 f866 	bl	2c0ac <settings_backend_init>

	if (!err) {
   2bfe0:	b908      	cbnz	r0, 2bfe6 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   2bfe2:	2301      	movs	r3, #1
   2bfe4:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   2bfe6:	bd10      	pop	{r4, pc}
		return 0;
   2bfe8:	2000      	movs	r0, #0
   2bfea:	e7fc      	b.n	2bfe6 <settings_subsys_init+0x16>
   2bfec:	20006d2c 	.word	0x20006d2c

0002bff0 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   2bff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   2bff4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   2bff6:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2c0a8 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   2bffa:	3401      	adds	r4, #1
{
   2bffc:	b098      	sub	sp, #96	; 0x60
   2bffe:	4680      	mov	r8, r0
   2c000:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   2c002:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   2c004:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   2c008:	1e65      	subs	r5, r4, #1
   2c00a:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   2c00c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2c010:	d047      	beq.n	2c0a2 <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   2c012:	234a      	movs	r3, #74	; 0x4a
   2c014:	aa05      	add	r2, sp, #20
   2c016:	4629      	mov	r1, r5
   2c018:	4630      	mov	r0, r6
   2c01a:	f01e f8d5 	bl	4a1c8 <nvs_read>
   2c01e:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   2c022:	343f      	adds	r4, #63	; 0x3f
   2c024:	b2a4      	uxth	r4, r4
   2c026:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   2c028:	4621      	mov	r1, r4
   2c02a:	2301      	movs	r3, #1
   2c02c:	f10d 020b 	add.w	r2, sp, #11
   2c030:	4630      	mov	r0, r6
   2c032:	f01e f8c9 	bl	4a1c8 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   2c036:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   2c038:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   2c03a:	dc03      	bgt.n	2c044 <settings_nvs_load+0x54>
   2c03c:	2800      	cmp	r0, #0
   2c03e:	dc03      	bgt.n	2c048 <settings_nvs_load+0x58>
{
   2c040:	462c      	mov	r4, r5
   2c042:	e7e1      	b.n	2c008 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   2c044:	2800      	cmp	r0, #0
   2c046:	dc16      	bgt.n	2c076 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   2c048:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   2c04c:	42ab      	cmp	r3, r5
   2c04e:	d109      	bne.n	2c064 <settings_nvs_load+0x74>
				cf->last_name_id--;
   2c050:	4642      	mov	r2, r8
   2c052:	1e6b      	subs	r3, r5, #1
   2c054:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2c058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2c05c:	2302      	movs	r3, #2
   2c05e:	4630      	mov	r0, r6
   2c060:	f7fe ff1a 	bl	2ae98 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   2c064:	4629      	mov	r1, r5
   2c066:	4630      	mov	r0, r6
   2c068:	f01e f853 	bl	4a112 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   2c06c:	4621      	mov	r1, r4
   2c06e:	4630      	mov	r0, r6
   2c070:	f01e f84f 	bl	4a112 <nvs_delete>
			continue;
   2c074:	e7e4      	b.n	2c040 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   2c076:	f107 0360 	add.w	r3, r7, #96	; 0x60
   2c07a:	eb0d 0703 	add.w	r7, sp, r3
   2c07e:	2300      	movs	r3, #0
   2c080:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   2c084:	4652      	mov	r2, sl
   2c086:	f8cd 9000 	str.w	r9, [sp]
   2c08a:	ab03      	add	r3, sp, #12
   2c08c:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   2c08e:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   2c090:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   2c094:	f01e f943 	bl	4a31e <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   2c098:	2800      	cmp	r0, #0
   2c09a:	d0d1      	beq.n	2c040 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   2c09c:	b018      	add	sp, #96	; 0x60
   2c09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c0a2:	2000      	movs	r0, #0
	return ret;
   2c0a4:	e7fa      	b.n	2c09c <settings_nvs_load+0xac>
   2c0a6:	bf00      	nop
   2c0a8:	0004a389 	.word	0x0004a389

0002c0ac <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   2c0ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   2c0ae:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   2c0b0:	4669      	mov	r1, sp
   2c0b2:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
   2c0b4:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   2c0b6:	f7ff fde7 	bl	2bc88 <flash_area_open>
	if (rc) {
   2c0ba:	4604      	mov	r4, r0
   2c0bc:	2800      	cmp	r0, #0
   2c0be:	d136      	bne.n	2c12e <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   2c0c0:	aa02      	add	r2, sp, #8
   2c0c2:	a901      	add	r1, sp, #4
   2c0c4:	2002      	movs	r0, #2
   2c0c6:	f7ff fdfd 	bl	2bcc4 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   2c0ca:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   2c0ce:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   2c0d0:	d02d      	beq.n	2c12e <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   2c0d2:	b138      	cbz	r0, 2c0e4 <settings_backend_init+0x38>
   2c0d4:	340c      	adds	r4, #12
   2c0d6:	d005      	beq.n	2c0e4 <settings_backend_init+0x38>
		k_panic();
   2c0d8:	4040      	eors	r0, r0
   2c0da:	f380 8811 	msr	BASEPRI, r0
   2c0de:	f04f 0004 	mov.w	r0, #4
   2c0e2:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   2c0e4:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   2c0e6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   2c0ea:	d223      	bcs.n	2c134 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   2c0ec:	9a00      	ldr	r2, [sp, #0]
   2c0ee:	2300      	movs	r3, #0
   2c0f0:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   2c0f2:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   2c0f4:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   2c0f6:	4285      	cmp	r5, r0
   2c0f8:	b29c      	uxth	r4, r3
   2c0fa:	d303      	bcc.n	2c104 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   2c0fc:	3301      	adds	r3, #1
   2c0fe:	2b08      	cmp	r3, #8
   2c100:	d1f8      	bne.n	2c0f4 <settings_backend_init+0x48>
   2c102:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   2c104:	4d0d      	ldr	r5, [pc, #52]	; (2c13c <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   2c106:	6853      	ldr	r3, [r2, #4]
   2c108:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   2c10a:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   2c10c:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   2c10e:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   2c110:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   2c112:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   2c114:	f01e f9d1 	bl	4a4ba <settings_nvs_backend_init>
	if (rc) {
   2c118:	4604      	mov	r4, r0
   2c11a:	b940      	cbnz	r0, 2c12e <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   2c11c:	4e08      	ldr	r6, [pc, #32]	; (2c140 <settings_backend_init+0x94>)
   2c11e:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   2c120:	4628      	mov	r0, r5
   2c122:	f7ff fe29 	bl	2bd78 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   2c126:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   2c128:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   2c12a:	f7ff fe33 	bl	2bd94 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   2c12e:	4620      	mov	r0, r4
   2c130:	b004      	add	sp, #16
   2c132:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   2c134:	f06f 0420 	mvn.w	r4, #32
   2c138:	e7f9      	b.n	2c12e <settings_backend_init+0x82>
   2c13a:	bf00      	nop
   2c13c:	20003ee0 	.word	0x20003ee0
   2c140:	200004d4 	.word	0x200004d4

0002c144 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   2c144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c148:	4605      	mov	r5, r0
	__asm__ volatile(
   2c14a:	f04f 0320 	mov.w	r3, #32
   2c14e:	f3ef 8611 	mrs	r6, BASEPRI
   2c152:	f383 8812 	msr	BASEPRI_MAX, r3
   2c156:	f3bf 8f6f 	isb	sy
	return list->head;
   2c15a:	4b0e      	ldr	r3, [pc, #56]	; (2c194 <pm_state_notify+0x50>)
   2c15c:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   2c15e:	b19c      	cbz	r4, 2c188 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2c160:	4f0d      	ldr	r7, [pc, #52]	; (2c198 <pm_state_notify+0x54>)
   2c162:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2c19c <pm_state_notify+0x58>
   2c166:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   2c16a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   2c16e:	2d00      	cmp	r5, #0
   2c170:	bf08      	it	eq
   2c172:	4613      	moveq	r3, r2
		if (callback) {
   2c174:	b12b      	cbz	r3, 2c182 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2c176:	f898 2014 	ldrb.w	r2, [r8, #20]
   2c17a:	fb09 f202 	mul.w	r2, r9, r2
   2c17e:	5cb8      	ldrb	r0, [r7, r2]
   2c180:	4798      	blx	r3
	return node->next;
   2c182:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   2c184:	2c00      	cmp	r4, #0
   2c186:	d1f0      	bne.n	2c16a <pm_state_notify+0x26>
	__asm__ volatile(
   2c188:	f386 8811 	msr	BASEPRI, r6
   2c18c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   2c190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c194:	20003f20 	.word	0x20003f20
   2c198:	20003f28 	.word	0x20003f28
   2c19c:	20006b90 	.word	0x20006b90

0002c1a0 <atomic_clear_bit.constprop.0>:
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c1a0:	0941      	lsrs	r1, r0, #5
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c1a2:	4a0a      	ldr	r2, [pc, #40]	; (2c1cc <atomic_clear_bit.constprop.0+0x2c>)
   2c1a4:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c1a8:	f000 001f 	and.w	r0, r0, #31
   2c1ac:	2301      	movs	r3, #1
   2c1ae:	4083      	lsls	r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c1b0:	43db      	mvns	r3, r3
   2c1b2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   2c1b6:	e852 0f00 	ldrex	r0, [r2]
   2c1ba:	4018      	ands	r0, r3
   2c1bc:	e842 0100 	strex	r1, r0, [r2]
   2c1c0:	2900      	cmp	r1, #0
   2c1c2:	d1f8      	bne.n	2c1b6 <atomic_clear_bit.constprop.0+0x16>
   2c1c4:	f3bf 8f5b 	dmb	ish
}
   2c1c8:	4770      	bx	lr
   2c1ca:	bf00      	nop
   2c1cc:	20003f34 	.word	0x20003f34

0002c1d0 <pm_system_resume>:

void pm_system_resume(void)
{
   2c1d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
   2c1d2:	4b1c      	ldr	r3, [pc, #112]	; (2c244 <pm_system_resume+0x74>)
   2c1d4:	7d1c      	ldrb	r4, [r3, #20]
   2c1d6:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c1da:	f004 031f 	and.w	r3, r4, #31
   2c1de:	2201      	movs	r2, #1
   2c1e0:	409a      	lsls	r2, r3
   2c1e2:	4b19      	ldr	r3, [pc, #100]	; (2c248 <pm_system_resume+0x78>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c1e4:	0961      	lsrs	r1, r4, #5
   2c1e6:	43d0      	mvns	r0, r2
   2c1e8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   2c1ec:	e853 1f00 	ldrex	r1, [r3]
   2c1f0:	ea01 0500 	and.w	r5, r1, r0
   2c1f4:	e843 5600 	strex	r6, r5, [r3]
   2c1f8:	2e00      	cmp	r6, #0
   2c1fa:	d1f7      	bne.n	2c1ec <pm_system_resume+0x1c>
   2c1fc:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   2c200:	4211      	tst	r1, r2
   2c202:	d017      	beq.n	2c234 <pm_system_resume+0x64>
		exit_pos_ops(z_cpus_pm_state[id]);
   2c204:	4d11      	ldr	r5, [pc, #68]	; (2c24c <pm_system_resume+0x7c>)
   2c206:	220c      	movs	r2, #12
   2c208:	fb02 5204 	mla	r2, r2, r4, r5
   2c20c:	ca07      	ldmia	r2, {r0, r1, r2}
   2c20e:	ab01      	add	r3, sp, #4
   2c210:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   2c214:	4a0e      	ldr	r2, [pc, #56]	; (2c250 <pm_system_resume+0x80>)
   2c216:	b17a      	cbz	r2, 2c238 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
   2c218:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2c21c:	f01f fb69 	bl	4b8f2 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   2c220:	2000      	movs	r0, #0
   2c222:	f7ff ff8f 	bl	2c144 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   2c226:	230c      	movs	r3, #12
   2c228:	435c      	muls	r4, r3
   2c22a:	192a      	adds	r2, r5, r4
   2c22c:	2300      	movs	r3, #0
   2c22e:	512b      	str	r3, [r5, r4]
   2c230:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   2c234:	b004      	add	sp, #16
   2c236:	bd70      	pop	{r4, r5, r6, pc}
   2c238:	f382 8811 	msr	BASEPRI, r2
   2c23c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   2c240:	e7ee      	b.n	2c220 <pm_system_resume+0x50>
   2c242:	bf00      	nop
   2c244:	20006b90 	.word	0x20006b90
   2c248:	20003f38 	.word	0x20003f38
   2c24c:	20003f28 	.word	0x20003f28
   2c250:	0004b8f3 	.word	0x0004b8f3

0002c254 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   2c254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   2c258:	4b35      	ldr	r3, [pc, #212]	; (2c330 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c25a:	4a36      	ldr	r2, [pc, #216]	; (2c334 <pm_system_suspend+0xe0>)
   2c25c:	7d1c      	ldrb	r4, [r3, #20]
   2c25e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c262:	0963      	lsrs	r3, r4, #5
   2c264:	ea4f 0983 	mov.w	r9, r3, lsl #2
   2c268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2c26c:	4d32      	ldr	r5, [pc, #200]	; (2c338 <pm_system_suspend+0xe4>)
   2c26e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c272:	f004 081f 	and.w	r8, r4, #31
   2c276:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   2c27a:	f013 0f01 	tst.w	r3, #1
{
   2c27e:	b085      	sub	sp, #20
   2c280:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   2c282:	d10a      	bne.n	2c29a <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   2c284:	4601      	mov	r1, r0
   2c286:	4620      	mov	r0, r4
   2c288:	f000 f876 	bl	2c378 <pm_policy_next_state>
		if (info != NULL) {
   2c28c:	b128      	cbz	r0, 2c29a <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
   2c28e:	c807      	ldmia	r0, {r0, r1, r2}
   2c290:	230c      	movs	r3, #12
   2c292:	fb03 5304 	mla	r3, r3, r4, r5
   2c296:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   2c29a:	230c      	movs	r3, #12
   2c29c:	4363      	muls	r3, r4
   2c29e:	18ea      	adds	r2, r5, r3
   2c2a0:	5cee      	ldrb	r6, [r5, r3]
   2c2a2:	b936      	cbnz	r6, 2c2b2 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   2c2a4:	4620      	mov	r0, r4
   2c2a6:	f7ff ff7b 	bl	2c1a0 <atomic_clear_bit.constprop.0>
		ret = false;
   2c2aa:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   2c2ac:	b005      	add	sp, #20
   2c2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   2c2b2:	1c7b      	adds	r3, r7, #1
   2c2b4:	d00f      	beq.n	2c2d6 <pm_system_suspend+0x82>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2c2b6:	f8d2 c008 	ldr.w	ip, [r2, #8]
   2c2ba:	4820      	ldr	r0, [pc, #128]	; (2c33c <pm_system_suspend+0xe8>)
   2c2bc:	4a20      	ldr	r2, [pc, #128]	; (2c340 <pm_system_suspend+0xec>)
   2c2be:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2c2c2:	2100      	movs	r1, #0
   2c2c4:	2300      	movs	r3, #0
   2c2c6:	fbec 0106 	umlal	r0, r1, ip, r6
   2c2ca:	f7f9 ff19 	bl	26100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   2c2ce:	2101      	movs	r1, #1
   2c2d0:	1a38      	subs	r0, r7, r0
   2c2d2:	f024 fc2f 	bl	50b34 <z_set_timeout_expiry>
	k_sched_lock();
   2c2d6:	f01b ff01 	bl	480dc <k_sched_lock>
	pm_state_notify(true);
   2c2da:	2001      	movs	r0, #1
   2c2dc:	f7ff ff32 	bl	2c144 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c2e0:	f3bf 8f5b 	dmb	ish
   2c2e4:	4b17      	ldr	r3, [pc, #92]	; (2c344 <pm_system_suspend+0xf0>)
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c2e6:	2201      	movs	r2, #1
   2c2e8:	fa02 f208 	lsl.w	r2, r2, r8
   2c2ec:	444b      	add	r3, r9
   2c2ee:	e853 0f00 	ldrex	r0, [r3]
   2c2f2:	4310      	orrs	r0, r2
   2c2f4:	e843 0100 	strex	r1, r0, [r3]
   2c2f8:	2900      	cmp	r1, #0
   2c2fa:	d1f8      	bne.n	2c2ee <pm_system_suspend+0x9a>
   2c2fc:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
   2c300:	230c      	movs	r3, #12
   2c302:	fb03 5504 	mla	r5, r3, r4, r5
   2c306:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2c30a:	ab01      	add	r3, sp, #4
   2c30c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   2c310:	4a0d      	ldr	r2, [pc, #52]	; (2c348 <pm_system_suspend+0xf4>)
   2c312:	b11a      	cbz	r2, 2c31c <pm_system_suspend+0xc8>
		pm_power_state_set(info);
   2c314:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2c318:	f01f fad8 	bl	4b8cc <pm_power_state_set>
	pm_system_resume();
   2c31c:	f7ff ff58 	bl	2c1d0 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   2c320:	4620      	mov	r0, r4
   2c322:	f7ff ff3d 	bl	2c1a0 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   2c326:	f01c f8a1 	bl	4846c <k_sched_unlock>
	bool ret = true;
   2c32a:	2001      	movs	r0, #1
   2c32c:	e7be      	b.n	2c2ac <pm_system_suspend+0x58>
   2c32e:	bf00      	nop
   2c330:	20006b90 	.word	0x20006b90
   2c334:	20003f34 	.word	0x20003f34
   2c338:	20003f28 	.word	0x20003f28
   2c33c:	000f423f 	.word	0x000f423f
   2c340:	000f4240 	.word	0x000f4240
   2c344:	20003f38 	.word	0x20003f38
   2c348:	0004b8cd 	.word	0x0004b8cd

0002c34c <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c34c:	4b05      	ldr	r3, [pc, #20]	; (2c364 <pm_constraint_get+0x18>)
   2c34e:	f3bf 8f5b 	dmb	ish
   2c352:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2c356:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
   2c35a:	fab0 f080 	clz	r0, r0
   2c35e:	0940      	lsrs	r0, r0, #5
   2c360:	4770      	bx	lr
   2c362:	bf00      	nop
   2c364:	20003f3c 	.word	0x20003f3c

0002c368 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   2c368:	b908      	cbnz	r0, 2c36e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   2c36a:	4b02      	ldr	r3, [pc, #8]	; (2c374 <pm_state_cpu_get_all+0xc>)
   2c36c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   2c36e:	2000      	movs	r0, #0
   2c370:	4770      	bx	lr
   2c372:	bf00      	nop
   2c374:	00051ea4 	.word	0x00051ea4

0002c378 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   2c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c37c:	b085      	sub	sp, #20
   2c37e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   2c380:	a903      	add	r1, sp, #12
   2c382:	f7ff fff1 	bl	2c368 <pm_state_cpu_get_all>
   2c386:	f8df a074 	ldr.w	sl, [pc, #116]	; 2c3fc <pm_policy_next_state+0x84>
   2c38a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2c400 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2c38e:	1e44      	subs	r4, r0, #1
   2c390:	b224      	sxth	r4, r4
   2c392:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2c396:	f04f 0900 	mov.w	r9, #0
   2c39a:	1c63      	adds	r3, r4, #1
   2c39c:	d104      	bne.n	2c3a8 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   2c39e:	2500      	movs	r5, #0
}
   2c3a0:	4628      	mov	r0, r5
   2c3a2:	b005      	add	sp, #20
   2c3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   2c3a8:	9a03      	ldr	r2, [sp, #12]
   2c3aa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2c3ae:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
   2c3b2:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   2c3b6:	f7ff ffc9 	bl	2c34c <pm_constraint_get>
   2c3ba:	b1e0      	cbz	r0, 2c3f6 <pm_policy_next_state+0x7e>
   2c3bc:	6868      	ldr	r0, [r5, #4]
   2c3be:	f04f 0b00 	mov.w	fp, #0
   2c3c2:	46d4      	mov	ip, sl
   2c3c4:	4659      	mov	r1, fp
   2c3c6:	fbe0 c107 	umlal	ip, r1, r0, r7
   2c3ca:	4642      	mov	r2, r8
   2c3cc:	464b      	mov	r3, r9
   2c3ce:	4660      	mov	r0, ip
   2c3d0:	f7f9 fe96 	bl	26100 <__aeabi_uldivmod>
   2c3d4:	9001      	str	r0, [sp, #4]
   2c3d6:	68a8      	ldr	r0, [r5, #8]
   2c3d8:	46d4      	mov	ip, sl
   2c3da:	4659      	mov	r1, fp
   2c3dc:	fbe0 c107 	umlal	ip, r1, r0, r7
   2c3e0:	4642      	mov	r2, r8
   2c3e2:	464b      	mov	r3, r9
   2c3e4:	4660      	mov	r0, ip
   2c3e6:	f7f9 fe8b 	bl	26100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
   2c3ea:	1c72      	adds	r2, r6, #1
   2c3ec:	d0d8      	beq.n	2c3a0 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
   2c3ee:	9b01      	ldr	r3, [sp, #4]
   2c3f0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   2c3f2:	42b0      	cmp	r0, r6
   2c3f4:	d9d4      	bls.n	2c3a0 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2c3f6:	3c01      	subs	r4, #1
   2c3f8:	b224      	sxth	r4, r4
   2c3fa:	e7ce      	b.n	2c39a <pm_policy_next_state+0x22>
   2c3fc:	000f423f 	.word	0x000f423f
   2c400:	000f4240 	.word	0x000f4240

0002c404 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   2c404:	4b01      	ldr	r3, [pc, #4]	; (2c40c <uECC_get_rng+0x8>)
   2c406:	6818      	ldr	r0, [r3, #0]
   2c408:	4770      	bx	lr
   2c40a:	bf00      	nop
   2c40c:	200004e4 	.word	0x200004e4

0002c410 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   2c410:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2c412:	2208      	movs	r2, #8
{
   2c414:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2c416:	f01e fa1e 	bl	4a856 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   2c41a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   2c41c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   2c41e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   2c420:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   2c422:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   2c424:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   2c426:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   2c428:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   2c42a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   2c42c:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c42e:	4613      	mov	r3, r2
   2c430:	466a      	mov	r2, sp
{
   2c432:	460c      	mov	r4, r1
   2c434:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
   2c436:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c438:	4611      	mov	r1, r2
   2c43a:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
   2c43c:	e9cd 7701 	strd	r7, r7, [sp, #4]
   2c440:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c442:	f01e f91a 	bl	4a67a <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c446:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c448:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c44a:	4630      	mov	r0, r6
   2c44c:	f01e f915 	bl	4a67a <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   2c450:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2c452:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
   2c454:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2c456:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
   2c458:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2c45a:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
   2c45c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c45e:	4405      	add	r5, r0
	tmp[7] = 0;
   2c460:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c464:	4610      	mov	r0, r2
   2c466:	4611      	mov	r1, r2
   2c468:	f01e f907 	bl	4a67a <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c46c:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c46e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c470:	4630      	mov	r0, r6
   2c472:	f01e f902 	bl	4a67a <uECC_vli_add>
   2c476:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   2c478:	6a20      	ldr	r0, [r4, #32]
   2c47a:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
   2c47c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2c47e:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
   2c480:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2c482:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   2c484:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2c486:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
   2c488:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   2c48a:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c48c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2c48e:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2c492:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c494:	f01e f8f1 	bl	4a67a <uECC_vli_add>
   2c498:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   2c49a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2c49c:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
   2c49e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   2c4a0:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
   2c4a4:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
   2c4a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2c4a8:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
   2c4aa:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
   2c4ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
   2c4b0:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   2c4b4:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
   2c4b6:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
   2c4ba:	6a20      	ldr	r0, [r4, #32]
   2c4bc:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c4be:	4630      	mov	r0, r6
   2c4c0:	f01e f8db 	bl	4a67a <uECC_vli_add>
   2c4c4:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   2c4c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2c4c8:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
   2c4ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2c4cc:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
   2c4ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
   2c4d0:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   2c4d2:	6a20      	ldr	r0, [r4, #32]
   2c4d4:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
   2c4d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2c4d8:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c4da:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2c4dc:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2c4e0:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c4e2:	f01e f9eb 	bl	4a8bc <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   2c4e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c4e8:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   2c4ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2c4ec:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   2c4ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2c4f0:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   2c4f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2c4f4:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   2c4f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c4f8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   2c4fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c4fc:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c4fe:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c500:	2308      	movs	r3, #8
   2c502:	4630      	mov	r0, r6
   2c504:	f01e f9da 	bl	4a8bc <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   2c508:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2c50a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   2c50c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2c50e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   2c510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2c512:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   2c514:	6a23      	ldr	r3, [r4, #32]
   2c516:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   2c518:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c51a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   2c51c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   2c51e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   2c522:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c524:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c526:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c528:	2308      	movs	r3, #8
   2c52a:	4630      	mov	r0, r6
   2c52c:	f01e f9c6 	bl	4a8bc <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   2c530:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2c532:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   2c534:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   2c536:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   2c53a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c53c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   2c53e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c540:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   2c542:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c544:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
	tmp[7] = product[13];
   2c546:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2c548:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c54a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c54c:	2308      	movs	r3, #8
   2c54e:	4630      	mov	r0, r6
   2c550:	f01e f9b4 	bl	4a8bc <uECC_vli_sub>

	if (carry < 0) {
   2c554:	1a2d      	subs	r5, r5, r0
   2c556:	d410      	bmi.n	2c57a <vli_mmod_fast_secp256r1+0x16a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2c558:	4c0d      	ldr	r4, [pc, #52]	; (2c590 <vli_mmod_fast_secp256r1+0x180>)
		while (carry || 
   2c55a:	b935      	cbnz	r5, 2c56a <vli_mmod_fast_secp256r1+0x15a>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2c55c:	2208      	movs	r2, #8
   2c55e:	4631      	mov	r1, r6
   2c560:	4620      	mov	r0, r4
   2c562:	f01e f984 	bl	4a86e <uECC_vli_cmp_unsafe>
		while (carry || 
   2c566:	2801      	cmp	r0, #1
   2c568:	d00f      	beq.n	2c58a <vli_mmod_fast_secp256r1+0x17a>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2c56a:	2308      	movs	r3, #8
   2c56c:	4622      	mov	r2, r4
   2c56e:	4631      	mov	r1, r6
   2c570:	4630      	mov	r0, r6
   2c572:	f01e f9a3 	bl	4a8bc <uECC_vli_sub>
   2c576:	1a2d      	subs	r5, r5, r0
   2c578:	e7ef      	b.n	2c55a <vli_mmod_fast_secp256r1+0x14a>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2c57a:	4a05      	ldr	r2, [pc, #20]	; (2c590 <vli_mmod_fast_secp256r1+0x180>)
   2c57c:	2308      	movs	r3, #8
   2c57e:	4631      	mov	r1, r6
   2c580:	4630      	mov	r0, r6
   2c582:	f01e f87a 	bl	4a67a <uECC_vli_add>
		while (carry < 0);
   2c586:	182d      	adds	r5, r5, r0
   2c588:	d4f8      	bmi.n	2c57c <vli_mmod_fast_secp256r1+0x16c>
		}
	}
}
   2c58a:	b009      	add	sp, #36	; 0x24
   2c58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c58e:	bf00      	nop
   2c590:	00051ea8 	.word	0x00051ea8

0002c594 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   2c594:	4904      	ldr	r1, [pc, #16]	; (2c5a8 <sub_bytes+0x14>)
   2c596:	1e43      	subs	r3, r0, #1
   2c598:	300f      	adds	r0, #15
   2c59a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2c59e:	5c8a      	ldrb	r2, [r1, r2]
   2c5a0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   2c5a2:	4283      	cmp	r3, r0
   2c5a4:	d1f9      	bne.n	2c59a <sub_bytes+0x6>
	}
}
   2c5a6:	4770      	bx	lr
   2c5a8:	0005390b 	.word	0x0005390b

0002c5ac <tc_aes128_set_encrypt_key>:
{
   2c5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   2c5ae:	4e26      	ldr	r6, [pc, #152]	; (2c648 <tc_aes128_set_encrypt_key+0x9c>)
{
   2c5b0:	4607      	mov	r7, r0
   2c5b2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   2c5b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   2c5b6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   2c5b8:	ad01      	add	r5, sp, #4
   2c5ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2c5bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2c5be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2c5c0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2c5c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   2c5c8:	4638      	mov	r0, r7
   2c5ca:	2f00      	cmp	r7, #0
   2c5cc:	d038      	beq.n	2c640 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   2c5ce:	2c00      	cmp	r4, #0
   2c5d0:	d038      	beq.n	2c644 <tc_aes128_set_encrypt_key+0x98>
   2c5d2:	1f38      	subs	r0, r7, #4
   2c5d4:	4621      	mov	r1, r4
   2c5d6:	4602      	mov	r2, r0
   2c5d8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2c5da:	784b      	ldrb	r3, [r1, #1]
   2c5dc:	780d      	ldrb	r5, [r1, #0]
   2c5de:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2c5e0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   2c5e4:	78cd      	ldrb	r5, [r1, #3]
   2c5e6:	432b      	orrs	r3, r5
   2c5e8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   2c5ea:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2c5ec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   2c5f0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2c5f2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   2c5f6:	d1f0      	bne.n	2c5da <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2c5f8:	4c14      	ldr	r4, [pc, #80]	; (2c64c <tc_aes128_set_encrypt_key+0xa0>)
   2c5fa:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   2c5fc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   2c5fe:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   2c600:	d116      	bne.n	2c630 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2c602:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2c606:	5ca5      	ldrb	r5, [r4, r2]
   2c608:	0e1a      	lsrs	r2, r3, #24
   2c60a:	5ca2      	ldrb	r2, [r4, r2]
   2c60c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   2c610:	f3c3 2507 	ubfx	r5, r3, #8, #8
   2c614:	b2db      	uxtb	r3, r3
   2c616:	5d65      	ldrb	r5, [r4, r5]
   2c618:	5ce3      	ldrb	r3, [r4, r3]
   2c61a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   2c61e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   2c622:	f021 0303 	bic.w	r3, r1, #3
   2c626:	3330      	adds	r3, #48	; 0x30
   2c628:	446b      	add	r3, sp
   2c62a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   2c62e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   2c630:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   2c634:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   2c636:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   2c638:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   2c63a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   2c63c:	d1de      	bne.n	2c5fc <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   2c63e:	2001      	movs	r0, #1
}
   2c640:	b00d      	add	sp, #52	; 0x34
   2c642:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2c644:	4620      	mov	r0, r4
   2c646:	e7fb      	b.n	2c640 <tc_aes128_set_encrypt_key+0x94>
   2c648:	000514f8 	.word	0x000514f8
   2c64c:	0005390b 	.word	0x0005390b

0002c650 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   2c650:	4901      	ldr	r1, [pc, #4]	; (2c658 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   2c652:	2210      	movs	r2, #16
	str	r2, [r1]
   2c654:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   2c656:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   2c658:	e000ed10 	.word	0xe000ed10

0002c65c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   2c65c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   2c65e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   2c660:	f380 8811 	msr	BASEPRI, r0
	isb
   2c664:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   2c668:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   2c66c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   2c66e:	b662      	cpsie	i
	isb
   2c670:	f3bf 8f6f 	isb	sy

	bx	lr
   2c674:	4770      	bx	lr
   2c676:	bf00      	nop

0002c678 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   2c678:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   2c67a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   2c67c:	f381 8811 	msr	BASEPRI, r1

	wfe
   2c680:	bf20      	wfe

	msr	BASEPRI, r0
   2c682:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   2c686:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   2c688:	4770      	bx	lr
   2c68a:	bf00      	nop

0002c68c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   2c68c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2c68e:	2b00      	cmp	r3, #0
   2c690:	db07      	blt.n	2c6a2 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2c692:	4904      	ldr	r1, [pc, #16]	; (2c6a4 <arch_irq_enable+0x18>)
   2c694:	095b      	lsrs	r3, r3, #5
   2c696:	f000 001f 	and.w	r0, r0, #31
   2c69a:	2201      	movs	r2, #1
   2c69c:	4082      	lsls	r2, r0
   2c69e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   2c6a2:	4770      	bx	lr
   2c6a4:	e000e100 	.word	0xe000e100

0002c6a8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   2c6a8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2c6aa:	2b00      	cmp	r3, #0
   2c6ac:	db0c      	blt.n	2c6c8 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2c6ae:	095b      	lsrs	r3, r3, #5
   2c6b0:	4906      	ldr	r1, [pc, #24]	; (2c6cc <arch_irq_disable+0x24>)
   2c6b2:	f000 001f 	and.w	r0, r0, #31
   2c6b6:	3320      	adds	r3, #32
   2c6b8:	2201      	movs	r2, #1
   2c6ba:	4082      	lsls	r2, r0
   2c6bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2c6c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2c6c4:	f3bf 8f6f 	isb	sy
}
   2c6c8:	4770      	bx	lr
   2c6ca:	bf00      	nop
   2c6cc:	e000e100 	.word	0xe000e100

0002c6d0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   2c6d0:	4b05      	ldr	r3, [pc, #20]	; (2c6e8 <arch_irq_is_enabled+0x18>)
   2c6d2:	0942      	lsrs	r2, r0, #5
   2c6d4:	f000 001f 	and.w	r0, r0, #31
   2c6d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2c6dc:	2301      	movs	r3, #1
   2c6de:	fa03 f000 	lsl.w	r0, r3, r0
}
   2c6e2:	4010      	ands	r0, r2
   2c6e4:	4770      	bx	lr
   2c6e6:	bf00      	nop
   2c6e8:	e000e100 	.word	0xe000e100

0002c6ec <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   2c6ec:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2c6ee:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2c6f0:	bfa8      	it	ge
   2c6f2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   2c6f6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2c6fa:	bfb8      	it	lt
   2c6fc:	4b06      	ldrlt	r3, [pc, #24]	; (2c718 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2c6fe:	ea4f 1141 	mov.w	r1, r1, lsl #5
   2c702:	bfac      	ite	ge
   2c704:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2c708:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2c70c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2c70e:	bfb4      	ite	lt
   2c710:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2c712:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
   2c716:	4770      	bx	lr
   2c718:	e000ed14 	.word	0xe000ed14

0002c71c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   2c71c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2c71e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   2c720:	4b04      	ldr	r3, [pc, #16]	; (2c734 <_arch_isr_direct_pm+0x18>)
   2c722:	699a      	ldr	r2, [r3, #24]
   2c724:	b11a      	cbz	r2, 2c72e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   2c726:	2200      	movs	r2, #0
   2c728:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   2c72a:	f023 fef7 	bl	5051c <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2c72e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   2c730:	bd08      	pop	{r3, pc}
   2c732:	bf00      	nop
   2c734:	20006b90 	.word	0x20006b90

0002c738 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   2c738:	bf30      	wfi
    b z_SysNmiOnReset
   2c73a:	f7ff bffd 	b.w	2c738 <z_SysNmiOnReset>
   2c73e:	bf00      	nop

0002c740 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2c740:	4a0f      	ldr	r2, [pc, #60]	; (2c780 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   2c742:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2c744:	4b0f      	ldr	r3, [pc, #60]	; (2c784 <z_arm_prep_c+0x44>)
   2c746:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2c74a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   2c74c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2c750:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   2c754:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2c758:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   2c75c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   2c760:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   2c764:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   2c768:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   2c76c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   2c770:	f01a fef0 	bl	47554 <z_bss_zero>
	z_data_copy();
   2c774:	f01b ffb8 	bl	486e8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   2c778:	f000 f994 	bl	2caa4 <z_arm_interrupt_init>
	z_cstart();
   2c77c:	f01a fef4 	bl	47568 <z_cstart>
   2c780:	00026000 	.word	0x00026000
   2c784:	e000ed00 	.word	0xe000ed00

0002c788 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   2c788:	4a09      	ldr	r2, [pc, #36]	; (2c7b0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2c78a:	490a      	ldr	r1, [pc, #40]	; (2c7b4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   2c78c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2c78e:	6809      	ldr	r1, [r1, #0]
   2c790:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2c792:	4909      	ldr	r1, [pc, #36]	; (2c7b8 <arch_swap+0x30>)
	_current->arch.basepri = key;
   2c794:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2c796:	684b      	ldr	r3, [r1, #4]
   2c798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2c79c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   2c79e:	2300      	movs	r3, #0
   2c7a0:	f383 8811 	msr	BASEPRI, r3
   2c7a4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   2c7a8:	6893      	ldr	r3, [r2, #8]
}
   2c7aa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   2c7ac:	4770      	bx	lr
   2c7ae:	bf00      	nop
   2c7b0:	20006b90 	.word	0x20006b90
   2c7b4:	00053510 	.word	0x00053510
   2c7b8:	e000ed00 	.word	0xe000ed00

0002c7bc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   2c7bc:	490f      	ldr	r1, [pc, #60]	; (2c7fc <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2c7be:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   2c7c0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   2c7c4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2c7c6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2c7ca:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2c7ce:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   2c7d0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   2c7d4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   2c7d8:	4f09      	ldr	r7, [pc, #36]	; (2c800 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2c7da:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2c7de:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   2c7e0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2c7e2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   2c7e4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   2c7e6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   2c7e8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2c7ea:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2c7ee:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2c7f2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2c7f6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   2c7fa:	4770      	bx	lr
    ldr r1, =_kernel
   2c7fc:	20006b90 	.word	0x20006b90
    ldr v4, =_SCS_ICSR
   2c800:	e000ed04 	.word	0xe000ed04

0002c804 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   2c804:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   2c808:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2c80a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2c80e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2c812:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   2c814:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   2c818:	2902      	cmp	r1, #2
    beq _oops
   2c81a:	d0ff      	beq.n	2c81c <_oops>

0002c81c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   2c81c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   2c81e:	f01e ff6f 	bl	4b700 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   2c822:	bd01      	pop	{r0, pc}

0002c824 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   2c824:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2c828:	9b00      	ldr	r3, [sp, #0]
   2c82a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   2c82e:	490a      	ldr	r1, [pc, #40]	; (2c858 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   2c830:	9b01      	ldr	r3, [sp, #4]
   2c832:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2c836:	9b02      	ldr	r3, [sp, #8]
   2c838:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   2c83c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   2c840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2c844:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   2c848:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   2c84c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   2c84e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   2c850:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   2c852:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2c854:	4770      	bx	lr
   2c856:	bf00      	nop
   2c858:	000498bb 	.word	0x000498bb

0002c85c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   2c85c:	4b07      	ldr	r3, [pc, #28]	; (2c87c <arch_switch_to_main_thread+0x20>)
   2c85e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   2c860:	4610      	mov	r0, r2
   2c862:	f381 8809 	msr	PSP, r1
   2c866:	2100      	movs	r1, #0
   2c868:	b663      	cpsie	if
   2c86a:	f381 8811 	msr	BASEPRI, r1
   2c86e:	f3bf 8f6f 	isb	sy
   2c872:	2200      	movs	r2, #0
   2c874:	2300      	movs	r3, #0
   2c876:	f01d f820 	bl	498ba <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   2c87a:	bf00      	nop
   2c87c:	20006b90 	.word	0x20006b90

0002c880 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   2c880:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2c882:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2c884:	4a0b      	ldr	r2, [pc, #44]	; (2c8b4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2c886:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   2c888:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   2c88a:	bf1e      	ittt	ne
	movne	r1, #0
   2c88c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2c88e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   2c890:	f023 fe44 	blne	5051c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2c894:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2c896:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   2c89a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2c89e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   2c8a2:	4905      	ldr	r1, [pc, #20]	; (2c8b8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2c8a4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2c8a6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   2c8a8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   2c8aa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   2c8ae:	4903      	ldr	r1, [pc, #12]	; (2c8bc <_isr_wrapper+0x3c>)
	bx r1
   2c8b0:	4708      	bx	r1
   2c8b2:	0000      	.short	0x0000
	ldr r2, =_kernel
   2c8b4:	20006b90 	.word	0x20006b90
	ldr r1, =_sw_isr_table
   2c8b8:	000511b8 	.word	0x000511b8
	ldr r1, =z_arm_int_exit
   2c8bc:	0002c8c1 	.word	0x0002c8c1

0002c8c0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   2c8c0:	4b04      	ldr	r3, [pc, #16]	; (2c8d4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   2c8c2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   2c8c4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   2c8c6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   2c8c8:	d003      	beq.n	2c8d2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2c8ca:	4903      	ldr	r1, [pc, #12]	; (2c8d8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   2c8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   2c8d0:	600a      	str	r2, [r1, #0]

0002c8d2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   2c8d2:	4770      	bx	lr
	ldr r3, =_kernel
   2c8d4:	20006b90 	.word	0x20006b90
	ldr r1, =_SCS_ICSR
   2c8d8:	e000ed04 	.word	0xe000ed04

0002c8dc <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2c8dc:	4b0d      	ldr	r3, [pc, #52]	; (2c914 <bus_fault.constprop.0+0x38>)
   2c8de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   2c8e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   2c8e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2c8e4:	0592      	lsls	r2, r2, #22
   2c8e6:	d508      	bpl.n	2c8fa <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   2c8e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2c8ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2c8ec:	0412      	lsls	r2, r2, #16
   2c8ee:	d504      	bpl.n	2c8fa <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   2c8f0:	b118      	cbz	r0, 2c8fa <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2c8f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2c8f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   2c8f8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2c8fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2c8fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2c8fe:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2c900:	4a04      	ldr	r2, [pc, #16]	; (2c914 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2c902:	bf58      	it	pl
   2c904:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2c906:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   2c908:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2c90a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   2c90e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2c910:	7008      	strb	r0, [r1, #0]

	return reason;
}
   2c912:	4770      	bx	lr
   2c914:	e000ed00 	.word	0xe000ed00

0002c918 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2c918:	4b0e      	ldr	r3, [pc, #56]	; (2c954 <mem_manage_fault.constprop.0+0x3c>)
   2c91a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   2c91c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   2c91e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2c920:	0792      	lsls	r2, r2, #30
   2c922:	d508      	bpl.n	2c936 <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
   2c924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2c926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2c928:	0612      	lsls	r2, r2, #24
   2c92a:	d504      	bpl.n	2c936 <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
   2c92c:	b118      	cbz	r0, 2c936 <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2c92e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2c930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   2c934:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   2c936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2c938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2c93a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2c93c:	06d2      	lsls	r2, r2, #27
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2c93e:	4a05      	ldr	r2, [pc, #20]	; (2c954 <mem_manage_fault.constprop.0+0x3c>)
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   2c940:	bf58      	it	pl
   2c942:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2c944:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2c946:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2c948:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   2c94c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2c94e:	7008      	strb	r0, [r1, #0]
}
   2c950:	4770      	bx	lr
   2c952:	bf00      	nop
   2c954:	e000ed00 	.word	0xe000ed00

0002c958 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   2c958:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2c95a:	4b48      	ldr	r3, [pc, #288]	; (2ca7c <z_arm_fault+0x124>)
   2c95c:	685b      	ldr	r3, [r3, #4]
{
   2c95e:	b08a      	sub	sp, #40	; 0x28
   2c960:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2c962:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2c966:	2500      	movs	r5, #0
   2c968:	f385 8811 	msr	BASEPRI, r5
   2c96c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   2c970:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   2c974:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   2c978:	d111      	bne.n	2c99e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   2c97a:	f002 000c 	and.w	r0, r2, #12
   2c97e:	2808      	cmp	r0, #8
   2c980:	d00d      	beq.n	2c99e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   2c982:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   2c984:	bf4c      	ite	mi
   2c986:	460e      	movmi	r6, r1
			*nested_exc = true;
   2c988:	2501      	movpl	r5, #1
	*recoverable = false;
   2c98a:	2200      	movs	r2, #0
	switch (fault) {
   2c98c:	3b03      	subs	r3, #3
	*recoverable = false;
   2c98e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   2c992:	2b03      	cmp	r3, #3
   2c994:	d86a      	bhi.n	2ca6c <z_arm_fault+0x114>
   2c996:	e8df f003 	tbb	[pc, r3]
   2c99a:	5404      	.short	0x5404
   2c99c:	5c58      	.short	0x5c58
		return NULL;
   2c99e:	462e      	mov	r6, r5
   2c9a0:	e7f3      	b.n	2c98a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2c9a2:	4b36      	ldr	r3, [pc, #216]	; (2ca7c <z_arm_fault+0x124>)
   2c9a4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2c9a6:	f014 0402 	ands.w	r4, r4, #2
   2c9aa:	d15f      	bne.n	2ca6c <z_arm_fault+0x114>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   2c9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c9ae:	2a00      	cmp	r2, #0
   2c9b0:	db14      	blt.n	2c9dc <z_arm_fault+0x84>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2c9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c9b4:	0052      	lsls	r2, r2, #1
   2c9b6:	d511      	bpl.n	2c9dc <z_arm_fault+0x84>
	uint16_t fault_insn = *(ret_addr - 1);
   2c9b8:	69b2      	ldr	r2, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   2c9ba:	f832 1c02 	ldrh.w	r1, [r2, #-2]
   2c9be:	f64d 7202 	movw	r2, #57090	; 0xdf02
   2c9c2:	4291      	cmp	r1, r2
   2c9c4:	d009      	beq.n	2c9da <z_arm_fault+0x82>
		} else if (SCB_MMFSR != 0) {
   2c9c6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   2c9ca:	b302      	cbz	r2, 2ca0e <z_arm_fault+0xb6>
			reason = mem_manage_fault(esf, 1, recoverable);
   2c9cc:	f10d 0107 	add.w	r1, sp, #7
   2c9d0:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   2c9d2:	f7ff ffa1 	bl	2c918 <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
   2c9d6:	4604      	mov	r4, r0
		break;
   2c9d8:	e000      	b.n	2c9dc <z_arm_fault+0x84>
			reason = esf->basic.r0;
   2c9da:	6834      	ldr	r4, [r6, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2c9dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2c9e0:	b99b      	cbnz	r3, 2ca0a <z_arm_fault+0xb2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2c9e2:	2220      	movs	r2, #32
   2c9e4:	4631      	mov	r1, r6
   2c9e6:	a802      	add	r0, sp, #8
   2c9e8:	f01e ff4f 	bl	4b88a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2c9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2c9ee:	2d00      	cmp	r5, #0
   2c9f0:	d03e      	beq.n	2ca70 <z_arm_fault+0x118>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2c9f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2c9f6:	b922      	cbnz	r2, 2ca02 <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   2c9f8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2c9fc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2ca00:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   2ca02:	a902      	add	r1, sp, #8
   2ca04:	4620      	mov	r0, r4
   2ca06:	f01e fe79 	bl	4b6fc <z_arm_fatal_error>
}
   2ca0a:	b00a      	add	sp, #40	; 0x28
   2ca0c:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   2ca0e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   2ca12:	b12a      	cbz	r2, 2ca20 <z_arm_fault+0xc8>
			reason = bus_fault(esf, 1, recoverable);
   2ca14:	f10d 0107 	add.w	r1, sp, #7
   2ca18:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   2ca1a:	f7ff ff5f 	bl	2c8dc <bus_fault.constprop.0>
   2ca1e:	e7da      	b.n	2c9d6 <z_arm_fault+0x7e>
		} else if (SCB_UFSR != 0) {
   2ca20:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
   2ca22:	b292      	uxth	r2, r2
   2ca24:	2a00      	cmp	r2, #0
   2ca26:	d0d9      	beq.n	2c9dc <z_arm_fault+0x84>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2ca28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2ca2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2ca2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2ca2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2ca30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2ca32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2ca34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ca36:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2ca3a:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2ca3e:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
   2ca40:	e7cc      	b.n	2c9dc <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
   2ca42:	f10d 0107 	add.w	r1, sp, #7
   2ca46:	2000      	movs	r0, #0
   2ca48:	e7c3      	b.n	2c9d2 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
   2ca4a:	f10d 0107 	add.w	r1, sp, #7
   2ca4e:	2000      	movs	r0, #0
   2ca50:	e7e3      	b.n	2ca1a <z_arm_fault+0xc2>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2ca52:	4b0a      	ldr	r3, [pc, #40]	; (2ca7c <z_arm_fault+0x124>)
   2ca54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2ca56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2ca58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2ca5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2ca5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2ca5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2ca60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ca62:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2ca66:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2ca6a:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2ca6c:	2400      	movs	r4, #0
   2ca6e:	e7b5      	b.n	2c9dc <z_arm_fault+0x84>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2ca70:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2ca74:	f023 0301 	bic.w	r3, r3, #1
   2ca78:	e7c2      	b.n	2ca00 <z_arm_fault+0xa8>
   2ca7a:	bf00      	nop
   2ca7c:	e000ed00 	.word	0xe000ed00

0002ca80 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2ca80:	4a02      	ldr	r2, [pc, #8]	; (2ca8c <z_arm_fault_init+0xc>)
   2ca82:	6953      	ldr	r3, [r2, #20]
   2ca84:	f043 0310 	orr.w	r3, r3, #16
   2ca88:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2ca8a:	4770      	bx	lr
   2ca8c:	e000ed00 	.word	0xe000ed00

0002ca90 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   2ca90:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2ca94:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   2ca98:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   2ca9a:	4672      	mov	r2, lr
	bl z_arm_fault
   2ca9c:	f7ff ff5c 	bl	2c958 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   2caa0:	bd01      	pop	{r0, pc}
   2caa2:	bf00      	nop

0002caa4 <z_arm_interrupt_init>:
   2caa4:	4804      	ldr	r0, [pc, #16]	; (2cab8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2caa6:	2300      	movs	r3, #0
   2caa8:	2120      	movs	r1, #32
   2caaa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2caac:	3301      	adds	r3, #1
   2caae:	2b30      	cmp	r3, #48	; 0x30
   2cab0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2cab4:	d1f9      	bne.n	2caaa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2cab6:	4770      	bx	lr
   2cab8:	e000e100 	.word	0xe000e100

0002cabc <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   2cabc:	f024 fa12 	bl	50ee4 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2cac0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2cac2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2cac6:	4808      	ldr	r0, [pc, #32]	; (2cae8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2cac8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2cacc:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2cace:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2cad2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2cad6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2cad8:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2cada:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   2cade:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2cae2:	f7ff fe2d 	bl	2c740 <z_arm_prep_c>
   2cae6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   2cae8:	200095b0 	.word	0x200095b0

0002caec <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   2caec:	4b06      	ldr	r3, [pc, #24]	; (2cb08 <z_impl_k_thread_abort+0x1c>)
   2caee:	689b      	ldr	r3, [r3, #8]
   2caf0:	4283      	cmp	r3, r0
   2caf2:	d107      	bne.n	2cb04 <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2caf4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   2caf8:	b123      	cbz	r3, 2cb04 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2cafa:	4a04      	ldr	r2, [pc, #16]	; (2cb0c <z_impl_k_thread_abort+0x20>)
   2cafc:	6853      	ldr	r3, [r2, #4]
   2cafe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2cb02:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   2cb04:	f01b bd8c 	b.w	48620 <z_thread_abort>
   2cb08:	20006b90 	.word	0x20006b90
   2cb0c:	e000ed00 	.word	0xe000ed00

0002cb10 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2cb10:	4b02      	ldr	r3, [pc, #8]	; (2cb1c <z_arm_configure_static_mpu_regions+0xc>)
   2cb12:	4a03      	ldr	r2, [pc, #12]	; (2cb20 <z_arm_configure_static_mpu_regions+0x10>)
   2cb14:	4803      	ldr	r0, [pc, #12]	; (2cb24 <z_arm_configure_static_mpu_regions+0x14>)
   2cb16:	2101      	movs	r1, #1
   2cb18:	f000 b85e 	b.w	2cbd8 <arm_core_mpu_configure_static_mpu_regions>
   2cb1c:	20040000 	.word	0x20040000
   2cb20:	20000000 	.word	0x20000000
   2cb24:	00051f54 	.word	0x00051f54

0002cb28 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   2cb28:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   2cb2a:	4e1f      	ldr	r6, [pc, #124]	; (2cba8 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2cb2c:	2500      	movs	r5, #0
   2cb2e:	428d      	cmp	r5, r1
   2cb30:	db01      	blt.n	2cb36 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   2cb32:	4610      	mov	r0, r2
   2cb34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   2cb36:	6844      	ldr	r4, [r0, #4]
   2cb38:	b39c      	cbz	r4, 2cba2 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
   2cb3a:	b153      	cbz	r3, 2cb52 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   2cb3c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   2cb40:	ea14 0f0c 	tst.w	r4, ip
   2cb44:	d118      	bne.n	2cb78 <mpu_configure_regions+0x50>
		&&
   2cb46:	2c1f      	cmp	r4, #31
   2cb48:	d916      	bls.n	2cb78 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   2cb4a:	6807      	ldr	r7, [r0, #0]
		&&
   2cb4c:	ea1c 0f07 	tst.w	ip, r7
   2cb50:	d112      	bne.n	2cb78 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   2cb52:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   2cb54:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2cb56:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   2cb5a:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
   2cb5c:	d90f      	bls.n	2cb7e <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
   2cb5e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   2cb62:	d80e      	bhi.n	2cb82 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2cb64:	3c01      	subs	r4, #1
   2cb66:	fab4 f484 	clz	r4, r4
   2cb6a:	f1c4 041f 	rsb	r4, r4, #31
   2cb6e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   2cb70:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2cb72:	ea4c 0c04 	orr.w	ip, ip, r4
   2cb76:	d906      	bls.n	2cb86 <mpu_configure_regions+0x5e>
			return -EINVAL;
   2cb78:	f06f 0215 	mvn.w	r2, #21
   2cb7c:	e7d9      	b.n	2cb32 <mpu_configure_regions+0xa>
		return REGION_32B;
   2cb7e:	2408      	movs	r4, #8
   2cb80:	e7f6      	b.n	2cb70 <mpu_configure_regions+0x48>
		return REGION_4G;
   2cb82:	243e      	movs	r4, #62	; 0x3e
   2cb84:	e7f4      	b.n	2cb70 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2cb86:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   2cb8a:	4314      	orrs	r4, r2
   2cb8c:	f044 0410 	orr.w	r4, r4, #16
   2cb90:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2cb94:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2cb98:	f04c 0401 	orr.w	r4, ip, #1
   2cb9c:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
   2cba0:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   2cba2:	3501      	adds	r5, #1
   2cba4:	300c      	adds	r0, #12
   2cba6:	e7c2      	b.n	2cb2e <mpu_configure_regions+0x6>
   2cba8:	e000ed00 	.word	0xe000ed00

0002cbac <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2cbac:	4b04      	ldr	r3, [pc, #16]	; (2cbc0 <arm_core_mpu_enable+0x14>)
   2cbae:	2205      	movs	r2, #5
   2cbb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   2cbb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2cbb8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   2cbbc:	4770      	bx	lr
   2cbbe:	bf00      	nop
   2cbc0:	e000ed00 	.word	0xe000ed00

0002cbc4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   2cbc4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   2cbc8:	4b02      	ldr	r3, [pc, #8]	; (2cbd4 <arm_core_mpu_disable+0x10>)
   2cbca:	2200      	movs	r2, #0
   2cbcc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   2cbd0:	4770      	bx	lr
   2cbd2:	bf00      	nop
   2cbd4:	e000ed00 	.word	0xe000ed00

0002cbd8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   2cbd8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2cbda:	4c03      	ldr	r4, [pc, #12]	; (2cbe8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   2cbdc:	2301      	movs	r3, #1
   2cbde:	7822      	ldrb	r2, [r4, #0]
   2cbe0:	f7ff ffa2 	bl	2cb28 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2cbe4:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   2cbe6:	bd10      	pop	{r4, pc}
   2cbe8:	20006d2d 	.word	0x20006d2d

0002cbec <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2cbec:	4914      	ldr	r1, [pc, #80]	; (2cc40 <z_arm_mpu_init+0x54>)
   2cbee:	6808      	ldr	r0, [r1, #0]
   2cbf0:	2808      	cmp	r0, #8
{
   2cbf2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   2cbf4:	d821      	bhi.n	2cc3a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   2cbf6:	f7ff ffe5 	bl	2cbc4 <arm_core_mpu_disable>
   2cbfa:	4c12      	ldr	r4, [pc, #72]	; (2cc44 <z_arm_mpu_init+0x58>)
   2cbfc:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2cbfe:	2200      	movs	r2, #0
   2cc00:	4290      	cmp	r0, r2
   2cc02:	f101 010c 	add.w	r1, r1, #12
   2cc06:	d105      	bne.n	2cc14 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   2cc08:	4b0f      	ldr	r3, [pc, #60]	; (2cc48 <z_arm_mpu_init+0x5c>)
   2cc0a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   2cc0c:	f7ff ffce 	bl	2cbac <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   2cc10:	2000      	movs	r0, #0
}
   2cc12:	bd10      	pop	{r4, pc}
   2cc14:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2cc18:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   2cc1c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   2cc20:	4313      	orrs	r3, r2
   2cc22:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2cc26:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2cc2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2cc2e:	f043 0301 	orr.w	r3, r3, #1
   2cc32:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2cc36:	3201      	adds	r2, #1
   2cc38:	e7e2      	b.n	2cc00 <z_arm_mpu_init+0x14>
		return -1;
   2cc3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cc3e:	e7e8      	b.n	2cc12 <z_arm_mpu_init+0x26>
   2cc40:	00051f60 	.word	0x00051f60
   2cc44:	e000ed00 	.word	0xe000ed00
   2cc48:	20006d2d 	.word	0x20006d2d

0002cc4c <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   2cc4c:	b40c      	push	{r2, r3}
   2cc4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   2cc50:	b909      	cbnz	r1, 2cc56 <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   2cc52:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
   2cc56:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   2cc5a:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2cc5c:	9a06      	ldr	r2, [sp, #24]
   2cc5e:	4806      	ldr	r0, [pc, #24]	; (2cc78 <snprintf+0x2c>)
	va_start(vargs, format);
   2cc60:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2cc62:	a902      	add	r1, sp, #8
   2cc64:	f7fd fd0c 	bl	2a680 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   2cc68:	9b02      	ldr	r3, [sp, #8]
   2cc6a:	2200      	movs	r2, #0
   2cc6c:	701a      	strb	r2, [r3, #0]
	return r;
}
   2cc6e:	b005      	add	sp, #20
   2cc70:	f85d eb04 	ldr.w	lr, [sp], #4
   2cc74:	b002      	add	sp, #8
   2cc76:	4770      	bx	lr
   2cc78:	0004b8b3 	.word	0x0004b8b3

0002cc7c <sprintf>:

int sprintf(char *ZRESTRICT str, const char *ZRESTRICT format, ...)
{
   2cc7c:	b40e      	push	{r1, r2, r3}
   2cc7e:	b50f      	push	{r0, r1, r2, r3, lr}
   2cc80:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = str;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   2cc82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   2cc86:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = str;
   2cc8a:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   2cc8c:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2cc8e:	4806      	ldr	r0, [pc, #24]	; (2cca8 <sprintf+0x2c>)
	va_start(vargs, format);
   2cc90:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2cc92:	a902      	add	r1, sp, #8
   2cc94:	f7fd fcf4 	bl	2a680 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   2cc98:	9b02      	ldr	r3, [sp, #8]
   2cc9a:	2200      	movs	r2, #0
   2cc9c:	701a      	strb	r2, [r3, #0]
	return r;
}
   2cc9e:	b004      	add	sp, #16
   2cca0:	f85d eb04 	ldr.w	lr, [sp], #4
   2cca4:	b003      	add	sp, #12
   2cca6:	4770      	bx	lr
   2cca8:	0004b8b3 	.word	0x0004b8b3

0002ccac <nordicsemi_nrf52_init>:
	__asm__ volatile(
   2ccac:	f04f 0320 	mov.w	r3, #32
   2ccb0:	f3ef 8211 	mrs	r2, BASEPRI
   2ccb4:	f383 8812 	msr	BASEPRI_MAX, r3
   2ccb8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2ccbc:	4906      	ldr	r1, [pc, #24]	; (2ccd8 <nordicsemi_nrf52_init+0x2c>)
   2ccbe:	2301      	movs	r3, #1
   2ccc0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2ccc4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2ccc8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   2cccc:	f382 8811 	msr	BASEPRI, r2
   2ccd0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2ccd4:	2000      	movs	r0, #0
   2ccd6:	4770      	bx	lr
   2ccd8:	4001e000 	.word	0x4001e000

0002ccdc <sys_arch_reboot>:
    *p_gpregret = val;
   2ccdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2cce0:	b2c0      	uxtb	r0, r0
   2cce2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   2cce6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2ccea:	4905      	ldr	r1, [pc, #20]	; (2cd00 <sys_arch_reboot+0x24>)
   2ccec:	4b05      	ldr	r3, [pc, #20]	; (2cd04 <sys_arch_reboot+0x28>)
   2ccee:	68ca      	ldr	r2, [r1, #12]
   2ccf0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2ccf4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2ccf6:	60cb      	str	r3, [r1, #12]
   2ccf8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2ccfc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2ccfe:	e7fd      	b.n	2ccfc <sys_arch_reboot+0x20>
   2cd00:	e000ed00 	.word	0xe000ed00
   2cd04:	05fa0004 	.word	0x05fa0004

0002cd08 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   2cd08:	b120      	cbz	r0, 2cd14 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   2cd0a:	4b03      	ldr	r3, [pc, #12]	; (2cd18 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   2cd0c:	0180      	lsls	r0, r0, #6
   2cd0e:	f043 0301 	orr.w	r3, r3, #1
   2cd12:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   2cd14:	4770      	bx	lr
   2cd16:	bf00      	nop
   2cd18:	00051590 	.word	0x00051590

0002cd1c <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   2cd1c:	b570      	push	{r4, r5, r6, lr}
   2cd1e:	4c21      	ldr	r4, [pc, #132]	; (2cda4 <le_gen_dhkey+0x88>)
   2cd20:	f3bf 8f5b 	dmb	ish
   2cd24:	6823      	ldr	r3, [r4, #0]
   2cd26:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2cd2a:	07da      	lsls	r2, r3, #31
{
   2cd2c:	4606      	mov	r6, r0
   2cd2e:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2cd30:	d501      	bpl.n	2cd36 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   2cd32:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   2cd34:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2cd36:	2901      	cmp	r1, #1
   2cd38:	d831      	bhi.n	2cd9e <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cd3a:	f3bf 8f5b 	dmb	ish
   2cd3e:	e854 3f00 	ldrex	r3, [r4]
   2cd42:	f043 0202 	orr.w	r2, r3, #2
   2cd46:	e844 2100 	strex	r1, r2, [r4]
   2cd4a:	2900      	cmp	r1, #0
   2cd4c:	d1f7      	bne.n	2cd3e <le_gen_dhkey+0x22>
   2cd4e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   2cd52:	079b      	lsls	r3, r3, #30
   2cd54:	d4ed      	bmi.n	2cd32 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   2cd56:	4814      	ldr	r0, [pc, #80]	; (2cda8 <le_gen_dhkey+0x8c>)
   2cd58:	4631      	mov	r1, r6
   2cd5a:	f01e fe40 	bl	4b9de <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   2cd5e:	4813      	ldr	r0, [pc, #76]	; (2cdac <le_gen_dhkey+0x90>)
   2cd60:	f106 0120 	add.w	r1, r6, #32
   2cd64:	f01e fe3b 	bl	4b9de <sys_memcpy_swap.constprop.0>
   2cd68:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   2cd6c:	b175      	cbz	r5, 2cd8c <le_gen_dhkey+0x70>
   2cd6e:	e854 3f00 	ldrex	r3, [r4]
   2cd72:	f043 0304 	orr.w	r3, r3, #4
   2cd76:	e844 3200 	strex	r2, r3, [r4]
   2cd7a:	2a00      	cmp	r2, #0
   2cd7c:	d1f7      	bne.n	2cd6e <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2cd7e:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   2cd82:	480b      	ldr	r0, [pc, #44]	; (2cdb0 <le_gen_dhkey+0x94>)
   2cd84:	f01a ff3a 	bl	47bfc <z_impl_k_sem_give>
   2cd88:	2000      	movs	r0, #0
   2cd8a:	e7d3      	b.n	2cd34 <le_gen_dhkey+0x18>
   2cd8c:	e854 3f00 	ldrex	r3, [r4]
   2cd90:	f023 0304 	bic.w	r3, r3, #4
   2cd94:	e844 3200 	strex	r2, r3, [r4]
   2cd98:	2a00      	cmp	r2, #0
   2cd9a:	d0f0      	beq.n	2cd7e <le_gen_dhkey+0x62>
   2cd9c:	e7f6      	b.n	2cd8c <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   2cd9e:	2012      	movs	r0, #18
   2cda0:	e7c8      	b.n	2cd34 <le_gen_dhkey+0x18>
   2cda2:	bf00      	nop
   2cda4:	20003f58 	.word	0x20003f58
   2cda8:	20006d4e 	.word	0x20006d4e
   2cdac:	20006d6e 	.word	0x20006d6e
   2cdb0:	20000fdc 	.word	0x20000fdc

0002cdb4 <ecc_thread>:
{
   2cdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   2cdb8:	4f5f      	ldr	r7, [pc, #380]	; (2cf38 <ecc_thread+0x184>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2cdba:	4d60      	ldr	r5, [pc, #384]	; (2cf3c <ecc_thread+0x188>)
   2cdbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cdc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cdc4:	4638      	mov	r0, r7
   2cdc6:	f01a ff3f 	bl	47c48 <z_impl_k_sem_take>
   2cdca:	f3bf 8f5b 	dmb	ish
   2cdce:	682c      	ldr	r4, [r5, #0]
   2cdd0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2cdd4:	f014 0401 	ands.w	r4, r4, #1
   2cdd8:	d055      	beq.n	2ce86 <ecc_thread+0xd2>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2cdda:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2cf40 <ecc_thread+0x18c>
   2cdde:	4c59      	ldr	r4, [pc, #356]	; (2cf44 <ecc_thread+0x190>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2cde0:	4e59      	ldr	r6, [pc, #356]	; (2cf48 <ecc_thread+0x194>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2cde2:	485a      	ldr	r0, [pc, #360]	; (2cf4c <ecc_thread+0x198>)
   2cde4:	4642      	mov	r2, r8
   2cde6:	4621      	mov	r1, r4
   2cde8:	f01d fb9b 	bl	4a522 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   2cdec:	2800      	cmp	r0, #0
   2cdee:	d03e      	beq.n	2ce6e <ecc_thread+0xba>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2cdf0:	2220      	movs	r2, #32
   2cdf2:	4631      	mov	r1, r6
   2cdf4:	4620      	mov	r0, r4
   2cdf6:	f01e fd38 	bl	4b86a <memcmp>
   2cdfa:	2800      	cmp	r0, #0
   2cdfc:	d0f1      	beq.n	2cde2 <ecc_thread+0x2e>
	return 0;
   2cdfe:	f04f 0800 	mov.w	r8, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2ce02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ce06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ce0a:	2001      	movs	r0, #1
   2ce0c:	f000 fa6c 	bl	2d2e8 <bt_buf_get_rx>
   2ce10:	f100 0608 	add.w	r6, r0, #8
   2ce14:	2102      	movs	r1, #2
   2ce16:	4604      	mov	r4, r0
   2ce18:	4630      	mov	r0, r6
   2ce1a:	f022 fd05 	bl	4f828 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2ce1e:	233e      	movs	r3, #62	; 0x3e
   2ce20:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2ce22:	2342      	movs	r3, #66	; 0x42
   2ce24:	7043      	strb	r3, [r0, #1]
   2ce26:	2101      	movs	r1, #1
   2ce28:	4630      	mov	r0, r6
   2ce2a:	f022 fcfd 	bl	4f828 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   2ce2e:	2308      	movs	r3, #8
   2ce30:	7003      	strb	r3, [r0, #0]
   2ce32:	2141      	movs	r1, #65	; 0x41
   2ce34:	4630      	mov	r0, r6
   2ce36:	f022 fcf7 	bl	4f828 <net_buf_simple_add>
   2ce3a:	4606      	mov	r6, r0
	evt->status = status;
   2ce3c:	f800 8b01 	strb.w	r8, [r0], #1
	if (status) {
   2ce40:	f1b8 0f00 	cmp.w	r8, #0
   2ce44:	d016      	beq.n	2ce74 <ecc_thread+0xc0>
		(void)memset(evt->key, 0, sizeof(evt->key));
   2ce46:	2240      	movs	r2, #64	; 0x40
   2ce48:	2100      	movs	r1, #0
   2ce4a:	f01e fd29 	bl	4b8a0 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ce4e:	f3bf 8f5b 	dmb	ish
   2ce52:	e855 3f00 	ldrex	r3, [r5]
   2ce56:	f023 0301 	bic.w	r3, r3, #1
   2ce5a:	e845 3200 	strex	r2, r3, [r5]
   2ce5e:	2a00      	cmp	r2, #0
   2ce60:	d1f7      	bne.n	2ce52 <ecc_thread+0x9e>
   2ce62:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2ce66:	4620      	mov	r0, r4
	bt_recv(buf);
   2ce68:	f000 ff92 	bl	2dd90 <bt_recv>
	while (true) {
   2ce6c:	e7a6      	b.n	2cdbc <ecc_thread+0x8>
			return BT_HCI_ERR_UNSPECIFIED;
   2ce6e:	f04f 081f 	mov.w	r8, #31
   2ce72:	e7c6      	b.n	2ce02 <ecc_thread+0x4e>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   2ce74:	4935      	ldr	r1, [pc, #212]	; (2cf4c <ecc_thread+0x198>)
   2ce76:	f01e fdb2 	bl	4b9de <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   2ce7a:	3120      	adds	r1, #32
   2ce7c:	f106 0021 	add.w	r0, r6, #33	; 0x21
   2ce80:	f01e fdad 	bl	4b9de <sys_memcpy_swap.constprop.0>
   2ce84:	e7e3      	b.n	2ce4e <ecc_thread+0x9a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ce86:	f3bf 8f5b 	dmb	ish
   2ce8a:	682b      	ldr	r3, [r5, #0]
   2ce8c:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2ce90:	079b      	lsls	r3, r3, #30
   2ce92:	d593      	bpl.n	2cdbc <ecc_thread+0x8>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   2ce94:	492a      	ldr	r1, [pc, #168]	; (2cf40 <ecc_thread+0x18c>)
   2ce96:	482d      	ldr	r0, [pc, #180]	; (2cf4c <ecc_thread+0x198>)
   2ce98:	f01e f9fa 	bl	4b290 <uECC_valid_public_key>
	if (ret < 0) {
   2ce9c:	2800      	cmp	r0, #0
   2ce9e:	db11      	blt.n	2cec4 <ecc_thread+0x110>
   2cea0:	f3bf 8f5b 	dmb	ish
		ret = uECC_shared_secret(ecc.public_key_be,
   2cea4:	4927      	ldr	r1, [pc, #156]	; (2cf44 <ecc_thread+0x190>)
   2cea6:	682b      	ldr	r3, [r5, #0]
   2cea8:	4827      	ldr	r0, [pc, #156]	; (2cf48 <ecc_thread+0x194>)
   2ceaa:	f3bf 8f5b 	dmb	ish
   2ceae:	f013 0f04 	tst.w	r3, #4
   2ceb2:	f101 0220 	add.w	r2, r1, #32
   2ceb6:	4b22      	ldr	r3, [pc, #136]	; (2cf40 <ecc_thread+0x18c>)
   2ceb8:	bf18      	it	ne
   2ceba:	4601      	movne	r1, r0
   2cebc:	4610      	mov	r0, r2
   2cebe:	f01d fb7f 	bl	4a5c0 <uECC_shared_secret>
   2cec2:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2cec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cecc:	2001      	movs	r0, #1
   2cece:	f000 fa0b 	bl	2d2e8 <bt_buf_get_rx>
   2ced2:	f100 0808 	add.w	r8, r0, #8
   2ced6:	2102      	movs	r1, #2
   2ced8:	4606      	mov	r6, r0
   2ceda:	4640      	mov	r0, r8
   2cedc:	f022 fca4 	bl	4f828 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2cee0:	233e      	movs	r3, #62	; 0x3e
   2cee2:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2cee4:	2322      	movs	r3, #34	; 0x22
   2cee6:	7043      	strb	r3, [r0, #1]
   2cee8:	2101      	movs	r1, #1
   2ceea:	4640      	mov	r0, r8
   2ceec:	f022 fc9c 	bl	4f828 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2cef0:	2309      	movs	r3, #9
   2cef2:	7003      	strb	r3, [r0, #0]
   2cef4:	2121      	movs	r1, #33	; 0x21
   2cef6:	4640      	mov	r0, r8
   2cef8:	f022 fc96 	bl	4f828 <net_buf_simple_add>
   2cefc:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   2cefe:	3001      	adds	r0, #1
   2cf00:	b99c      	cbnz	r4, 2cf2a <ecc_thread+0x176>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   2cf02:	221f      	movs	r2, #31
   2cf04:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   2cf06:	21ff      	movs	r1, #255	; 0xff
   2cf08:	2220      	movs	r2, #32
   2cf0a:	f01e fcc9 	bl	4b8a0 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2cf0e:	f3bf 8f5b 	dmb	ish
   2cf12:	e855 3f00 	ldrex	r3, [r5]
   2cf16:	f023 0302 	bic.w	r3, r3, #2
   2cf1a:	e845 3200 	strex	r2, r3, [r5]
   2cf1e:	2a00      	cmp	r2, #0
   2cf20:	d1f7      	bne.n	2cf12 <ecc_thread+0x15e>
   2cf22:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2cf26:	4630      	mov	r0, r6
   2cf28:	e79e      	b.n	2ce68 <ecc_thread+0xb4>
		evt->status = 0U;
   2cf2a:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2cf2c:	4907      	ldr	r1, [pc, #28]	; (2cf4c <ecc_thread+0x198>)
		evt->status = 0U;
   2cf2e:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2cf30:	f01e fd55 	bl	4b9de <sys_memcpy_swap.constprop.0>
   2cf34:	e7eb      	b.n	2cf0e <ecc_thread+0x15a>
   2cf36:	bf00      	nop
   2cf38:	20000fdc 	.word	0x20000fdc
   2cf3c:	20003f58 	.word	0x20003f58
   2cf40:	00051f80 	.word	0x00051f80
   2cf44:	20006d2e 	.word	0x20006d2e
   2cf48:	00053a21 	.word	0x00053a21
   2cf4c:	20006d4e 	.word	0x20006d4e

0002cf50 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   2cf50:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2cf52:	7d06      	ldrb	r6, [r0, #20]
   2cf54:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   2cf56:	b976      	cbnz	r6, 2cf76 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   2cf58:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   2cf5a:	881d      	ldrh	r5, [r3, #0]
   2cf5c:	f242 0226 	movw	r2, #8230	; 0x2026
   2cf60:	4295      	cmp	r5, r2
   2cf62:	d045      	beq.n	2cff0 <bt_hci_ecc_send+0xa0>
   2cf64:	d80f      	bhi.n	2cf86 <bt_hci_ecc_send+0x36>
   2cf66:	f242 0201 	movw	r2, #8193	; 0x2001
   2cf6a:	4295      	cmp	r5, r2
   2cf6c:	d04f      	beq.n	2d00e <bt_hci_ecc_send+0xbe>
   2cf6e:	f242 0325 	movw	r3, #8229	; 0x2025
   2cf72:	429d      	cmp	r5, r3
   2cf74:	d013      	beq.n	2cf9e <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   2cf76:	4b2a      	ldr	r3, [pc, #168]	; (2d020 <bt_hci_ecc_send+0xd0>)
   2cf78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   2cf7c:	4620      	mov	r0, r4
   2cf7e:	691b      	ldr	r3, [r3, #16]
}
   2cf80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   2cf84:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   2cf86:	f242 035e 	movw	r3, #8286	; 0x205e
   2cf8a:	429d      	cmp	r5, r3
   2cf8c:	d1f3      	bne.n	2cf76 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   2cf8e:	2103      	movs	r1, #3
   2cf90:	3008      	adds	r0, #8
   2cf92:	f022 fc72 	bl	4f87a <net_buf_simple_pull>
	cmd = (void *)buf->data;
   2cf96:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2cf98:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2cf9c:	e02e      	b.n	2cffc <bt_hci_ecc_send+0xac>
   2cf9e:	2103      	movs	r1, #3
   2cfa0:	3008      	adds	r0, #8
   2cfa2:	f022 fc6a 	bl	4f87a <net_buf_simple_pull>
	net_buf_unref(buf);
   2cfa6:	4620      	mov	r0, r4
   2cfa8:	f016 fa96 	bl	434d8 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2cfac:	f3bf 8f5b 	dmb	ish
   2cfb0:	4b1c      	ldr	r3, [pc, #112]	; (2d024 <bt_hci_ecc_send+0xd4>)
   2cfb2:	681a      	ldr	r2, [r3, #0]
   2cfb4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2cfb8:	0792      	lsls	r2, r2, #30
   2cfba:	d507      	bpl.n	2cfcc <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   2cfbc:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   2cfbe:	4631      	mov	r1, r6
   2cfc0:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   2cfc4:	f01e fce7 	bl	4b996 <send_cmd_status>
}
   2cfc8:	2000      	movs	r0, #0
   2cfca:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cfcc:	f3bf 8f5b 	dmb	ish
   2cfd0:	e853 2f00 	ldrex	r2, [r3]
   2cfd4:	f042 0101 	orr.w	r1, r2, #1
   2cfd8:	e843 1000 	strex	r0, r1, [r3]
   2cfdc:	2800      	cmp	r0, #0
   2cfde:	d1f7      	bne.n	2cfd0 <bt_hci_ecc_send+0x80>
   2cfe0:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   2cfe4:	07d3      	lsls	r3, r2, #31
   2cfe6:	d4e9      	bmi.n	2cfbc <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
   2cfe8:	480f      	ldr	r0, [pc, #60]	; (2d028 <bt_hci_ecc_send+0xd8>)
   2cfea:	f01a fe07 	bl	47bfc <z_impl_k_sem_give>
}
   2cfee:	e7e6      	b.n	2cfbe <bt_hci_ecc_send+0x6e>
   2cff0:	2103      	movs	r1, #3
   2cff2:	3008      	adds	r0, #8
   2cff4:	f022 fc41 	bl	4f87a <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   2cff8:	68a0      	ldr	r0, [r4, #8]
   2cffa:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2cffc:	f7ff fe8e 	bl	2cd1c <le_gen_dhkey>
   2d000:	4606      	mov	r6, r0
	net_buf_unref(buf);
   2d002:	4620      	mov	r0, r4
   2d004:	f016 fa68 	bl	434d8 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   2d008:	4631      	mov	r1, r6
   2d00a:	4628      	mov	r0, r5
   2d00c:	e7da      	b.n	2cfc4 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   2d00e:	78da      	ldrb	r2, [r3, #3]
   2d010:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2d014:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   2d016:	791a      	ldrb	r2, [r3, #4]
   2d018:	f022 0201 	bic.w	r2, r2, #1
   2d01c:	711a      	strb	r2, [r3, #4]
}
   2d01e:	e7aa      	b.n	2cf76 <bt_hci_ecc_send+0x26>
   2d020:	20000000 	.word	0x20000000
   2d024:	20003f58 	.word	0x20003f58
   2d028:	20000fdc 	.word	0x20000fdc

0002d02c <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   2d02c:	b510      	push	{r4, lr}
   2d02e:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2d030:	4c0c      	ldr	r4, [pc, #48]	; (2d064 <bt_hci_ecc_init+0x38>)
   2d032:	490d      	ldr	r1, [pc, #52]	; (2d068 <bt_hci_ecc_init+0x3c>)
   2d034:	2200      	movs	r2, #0
   2d036:	2300      	movs	r3, #0
   2d038:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2d03c:	2300      	movs	r3, #0
   2d03e:	220a      	movs	r2, #10
   2d040:	e9cd 2303 	strd	r2, r3, [sp, #12]
   2d044:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2d048:	9300      	str	r3, [sp, #0]
   2d04a:	f44f 628f 	mov.w	r2, #1144	; 0x478
   2d04e:	4b07      	ldr	r3, [pc, #28]	; (2d06c <bt_hci_ecc_init+0x40>)
   2d050:	4620      	mov	r0, r4
   2d052:	f01a fb91 	bl	47778 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2d056:	4906      	ldr	r1, [pc, #24]	; (2d070 <bt_hci_ecc_init+0x44>)
   2d058:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   2d05a:	b008      	add	sp, #32
   2d05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d060:	f023 ba57 	b.w	50512 <z_impl_k_thread_name_set>
   2d064:	20001418 	.word	0x20001418
   2d068:	200071f0 	.word	0x200071f0
   2d06c:	0002cdb5 	.word	0x0002cdb5
   2d070:	00053a1a 	.word	0x00053a1a

0002d074 <save_id>:
static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   2d074:	4903      	ldr	r1, [pc, #12]	; (2d084 <save_id+0x10>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   2d076:	4804      	ldr	r0, [pc, #16]	; (2d088 <save_id+0x14>)
   2d078:	79ca      	ldrb	r2, [r1, #7]
   2d07a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   2d07e:	f7fe be55 	b.w	2bd2c <settings_save_one>
   2d082:	bf00      	nop
   2d084:	20000000 	.word	0x20000000
   2d088:	00053a41 	.word	0x00053a41

0002d08c <set>:
{
   2d08c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d08e:	4616      	mov	r6, r2
   2d090:	461f      	mov	r7, r3
	if (!name) {
   2d092:	4604      	mov	r4, r0
   2d094:	b920      	cbnz	r0, 2d0a0 <set+0x14>
		return -ENOENT;
   2d096:	f06f 0401 	mvn.w	r4, #1
}
   2d09a:	4620      	mov	r0, r4
   2d09c:	b003      	add	sp, #12
   2d09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = settings_name_next(name, &next);
   2d0a0:	a901      	add	r1, sp, #4
   2d0a2:	f01d f926 	bl	4a2f2 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   2d0a6:	4911      	ldr	r1, [pc, #68]	; (2d0ec <set+0x60>)
	len = settings_name_next(name, &next);
   2d0a8:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   2d0aa:	4620      	mov	r0, r4
   2d0ac:	f01e fbcc 	bl	4b848 <strncmp>
   2d0b0:	4604      	mov	r4, r0
   2d0b2:	2800      	cmp	r0, #0
   2d0b4:	d1ef      	bne.n	2d096 <set+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d0b6:	f3bf 8f5b 	dmb	ish
   2d0ba:	4d0d      	ldr	r5, [pc, #52]	; (2d0f0 <set+0x64>)
   2d0bc:	682b      	ldr	r3, [r5, #0]
   2d0be:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   2d0c2:	075b      	lsls	r3, r3, #29
   2d0c4:	d4e9      	bmi.n	2d09a <set+0xe>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   2d0c6:	3dcc      	subs	r5, #204	; 0xcc
   2d0c8:	2207      	movs	r2, #7
   2d0ca:	4629      	mov	r1, r5
   2d0cc:	4638      	mov	r0, r7
   2d0ce:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   2d0d0:	2806      	cmp	r0, #6
   2d0d2:	d806      	bhi.n	2d0e2 <set+0x56>
			(void)memset(bt_dev.id_addr, 0,
   2d0d4:	2207      	movs	r2, #7
   2d0d6:	4621      	mov	r1, r4
   2d0d8:	4628      	mov	r0, r5
   2d0da:	f01e fbe1 	bl	4b8a0 <memset>
			bt_dev.id_count = 0U;
   2d0de:	71ec      	strb	r4, [r5, #7]
   2d0e0:	e7db      	b.n	2d09a <set+0xe>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   2d0e2:	2307      	movs	r3, #7
   2d0e4:	fbb0 f0f3 	udiv	r0, r0, r3
   2d0e8:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   2d0ea:	e7d6      	b.n	2d09a <set+0xe>
   2d0ec:	000536f9 	.word	0x000536f9
   2d0f0:	200000cc 	.word	0x200000cc

0002d0f4 <bt_settings_encode_key>:
{
   2d0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d0f8:	b088      	sub	sp, #32
		snprintk(path, path_size,
   2d0fa:	799c      	ldrb	r4, [r3, #6]
{
   2d0fc:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   2d100:	795d      	ldrb	r5, [r3, #5]
   2d102:	791e      	ldrb	r6, [r3, #4]
   2d104:	78df      	ldrb	r7, [r3, #3]
   2d106:	f893 c002 	ldrb.w	ip, [r3, #2]
   2d10a:	f893 e001 	ldrb.w	lr, [r3, #1]
   2d10e:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   2d110:	f1b8 0f00 	cmp.w	r8, #0
   2d114:	d00e      	beq.n	2d134 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   2d116:	e9cd 3806 	strd	r3, r8, [sp, #24]
   2d11a:	e9cd ce04 	strd	ip, lr, [sp, #16]
   2d11e:	4613      	mov	r3, r2
   2d120:	e9cd 6702 	strd	r6, r7, [sp, #8]
   2d124:	e9cd 4500 	strd	r4, r5, [sp]
   2d128:	4a08      	ldr	r2, [pc, #32]	; (2d14c <bt_settings_encode_key+0x58>)
   2d12a:	f01c fab0 	bl	4968e <snprintk>
}
   2d12e:	b008      	add	sp, #32
   2d130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   2d134:	e9cd e305 	strd	lr, r3, [sp, #20]
   2d138:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   2d13c:	4613      	mov	r3, r2
   2d13e:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2d142:	4a03      	ldr	r2, [pc, #12]	; (2d150 <bt_settings_encode_key+0x5c>)
   2d144:	9400      	str	r4, [sp, #0]
   2d146:	f01c faa2 	bl	4968e <snprintk>
}
   2d14a:	e7f0      	b.n	2d12e <bt_settings_encode_key+0x3a>
   2d14c:	00053a47 	.word	0x00053a47
   2d150:	00053a6b 	.word	0x00053a6b

0002d154 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   2d154:	4801      	ldr	r0, [pc, #4]	; (2d15c <bt_settings_save_id+0x8>)
   2d156:	f01a bec7 	b.w	47ee8 <k_work_submit>
   2d15a:	bf00      	nop
   2d15c:	200004e8 	.word	0x200004e8

0002d160 <commit>:
}

static int commit(void)
{
   2d160:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   2d162:	4c15      	ldr	r4, [pc, #84]	; (2d1b8 <commit+0x58>)
   2d164:	79e3      	ldrb	r3, [r4, #7]
   2d166:	b1e3      	cbz	r3, 2d1a2 <commit+0x42>
   2d168:	f3bf 8f5b 	dmb	ish
   2d16c:	4c13      	ldr	r4, [pc, #76]	; (2d1bc <commit+0x5c>)
   2d16e:	6823      	ldr	r3, [r4, #0]
   2d170:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2d174:	079b      	lsls	r3, r3, #30
   2d176:	d401      	bmi.n	2d17c <commit+0x1c>
		bt_finalize_init();
   2d178:	f000 fec0 	bl	2defc <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d17c:	f3bf 8f5b 	dmb	ish
   2d180:	e854 0f00 	ldrex	r0, [r4]
   2d184:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   2d188:	e844 3200 	strex	r2, r3, [r4]
   2d18c:	2a00      	cmp	r2, #0
   2d18e:	d1f7      	bne.n	2d180 <commit+0x20>
   2d190:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   2d194:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
   2d198:	d00d      	beq.n	2d1b6 <commit+0x56>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
   2d19a:	f7ff ffdb 	bl	2d154 <bt_settings_save_id>
	}

	return 0;
   2d19e:	2000      	movs	r0, #0
   2d1a0:	e009      	b.n	2d1b6 <commit+0x56>
		err = bt_setup_public_id_addr();
   2d1a2:	f001 f987 	bl	2e4b4 <bt_setup_public_id_addr>
		if (err) {
   2d1a6:	b930      	cbnz	r0, 2d1b6 <commit+0x56>
	if (!bt_dev.id_count) {
   2d1a8:	79e3      	ldrb	r3, [r4, #7]
   2d1aa:	2b00      	cmp	r3, #0
   2d1ac:	d1dc      	bne.n	2d168 <commit+0x8>
		err = bt_setup_random_id_addr();
   2d1ae:	f001 f9c1 	bl	2e534 <bt_setup_random_id_addr>
		if (err) {
   2d1b2:	2800      	cmp	r0, #0
   2d1b4:	d0d8      	beq.n	2d168 <commit+0x8>
}
   2d1b6:	bd10      	pop	{r4, pc}
   2d1b8:	20000000 	.word	0x20000000
   2d1bc:	200000cc 	.word	0x200000cc

0002d1c0 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   2d1c0:	b430      	push	{r4, r5}
   2d1c2:	4603      	mov	r3, r0
   2d1c4:	4608      	mov	r0, r1
	switch (src->type) {
   2d1c6:	781a      	ldrb	r2, [r3, #0]
   2d1c8:	2a01      	cmp	r2, #1
   2d1ca:	d013      	beq.n	2d1f4 <uuid_to_uuid128+0x34>
   2d1cc:	2a02      	cmp	r2, #2
   2d1ce:	d026      	beq.n	2d21e <uuid_to_uuid128+0x5e>
   2d1d0:	b972      	cbnz	r2, 2d1f0 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   2d1d2:	4a15      	ldr	r2, [pc, #84]	; (2d228 <uuid_to_uuid128+0x68>)
   2d1d4:	f102 0410 	add.w	r4, r2, #16
   2d1d8:	f852 5b04 	ldr.w	r5, [r2], #4
   2d1dc:	f841 5b04 	str.w	r5, [r1], #4
   2d1e0:	42a2      	cmp	r2, r4
   2d1e2:	d1f9      	bne.n	2d1d8 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   2d1e4:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   2d1e6:	7812      	ldrb	r2, [r2, #0]
   2d1e8:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
   2d1ea:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   2d1ec:	0a1b      	lsrs	r3, r3, #8
   2d1ee:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   2d1f0:	bc30      	pop	{r4, r5}
   2d1f2:	4770      	bx	lr
		*dst = uuid128_base;
   2d1f4:	4a0c      	ldr	r2, [pc, #48]	; (2d228 <uuid_to_uuid128+0x68>)
   2d1f6:	f102 0410 	add.w	r4, r2, #16
   2d1fa:	f852 5b04 	ldr.w	r5, [r2], #4
   2d1fe:	f841 5b04 	str.w	r5, [r1], #4
   2d202:	42a2      	cmp	r2, r4
   2d204:	d1f9      	bne.n	2d1fa <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   2d206:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   2d208:	7812      	ldrb	r2, [r2, #0]
   2d20a:	700a      	strb	r2, [r1, #0]
   2d20c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   2d210:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
   2d212:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   2d214:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   2d216:	0a1b      	lsrs	r3, r3, #8
   2d218:	7382      	strb	r2, [r0, #14]
   2d21a:	7403      	strb	r3, [r0, #16]
}
   2d21c:	e7e8      	b.n	2d1f0 <uuid_to_uuid128+0x30>
}
   2d21e:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   2d220:	2211      	movs	r2, #17
   2d222:	4619      	mov	r1, r3
   2d224:	f01e bb31 	b.w	4b88a <memcpy>
   2d228:	00053aae 	.word	0x00053aae

0002d22c <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
   2d22c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
   2d22e:	7805      	ldrb	r5, [r0, #0]
   2d230:	2d01      	cmp	r5, #1
{
   2d232:	b08b      	sub	sp, #44	; 0x2c
   2d234:	4604      	mov	r4, r0
   2d236:	460e      	mov	r6, r1
   2d238:	4617      	mov	r7, r2
	switch (uuid->type) {
   2d23a:	d00c      	beq.n	2d256 <bt_uuid_to_str+0x2a>
   2d23c:	2d02      	cmp	r5, #2
   2d23e:	d00d      	beq.n	2d25c <bt_uuid_to_str+0x30>
   2d240:	2d00      	cmp	r5, #0
   2d242:	d144      	bne.n	2d2ce <bt_uuid_to_str+0xa2>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
   2d244:	8843      	ldrh	r3, [r0, #2]
   2d246:	4a25      	ldr	r2, [pc, #148]	; (2d2dc <bt_uuid_to_str+0xb0>)
		break;
	case BT_UUID_TYPE_32:
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   2d248:	4639      	mov	r1, r7
   2d24a:	4630      	mov	r0, r6
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
   2d24c:	b00b      	add	sp, #44	; 0x2c
   2d24e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   2d252:	f01c ba1c 	b.w	4968e <snprintk>
   2d256:	6843      	ldr	r3, [r0, #4]
   2d258:	4a21      	ldr	r2, [pc, #132]	; (2d2e0 <bt_uuid_to_str+0xb4>)
   2d25a:	e7f5      	b.n	2d248 <bt_uuid_to_str+0x1c>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
   2d25c:	462a      	mov	r2, r5
   2d25e:	1c41      	adds	r1, r0, #1
   2d260:	a806      	add	r0, sp, #24
   2d262:	f01e fb12 	bl	4b88a <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
   2d266:	1ce1      	adds	r1, r4, #3
   2d268:	2204      	movs	r2, #4
   2d26a:	a808      	add	r0, sp, #32
   2d26c:	f01e fb0d 	bl	4b88a <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
   2d270:	462a      	mov	r2, r5
   2d272:	1de1      	adds	r1, r4, #7
   2d274:	f10d 001a 	add.w	r0, sp, #26
   2d278:	f01e fb07 	bl	4b88a <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
   2d27c:	462a      	mov	r2, r5
   2d27e:	f104 0109 	add.w	r1, r4, #9
   2d282:	a807      	add	r0, sp, #28
   2d284:	f01e fb01 	bl	4b88a <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
   2d288:	462a      	mov	r2, r5
   2d28a:	f104 010b 	add.w	r1, r4, #11
   2d28e:	f10d 001e 	add.w	r0, sp, #30
   2d292:	f01e fafa 	bl	4b88a <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
   2d296:	f104 010d 	add.w	r1, r4, #13
   2d29a:	2204      	movs	r2, #4
   2d29c:	a809      	add	r0, sp, #36	; 0x24
   2d29e:	f01e faf4 	bl	4b88a <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
   2d2a2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2d2a6:	9304      	str	r3, [sp, #16]
   2d2a8:	9b08      	ldr	r3, [sp, #32]
   2d2aa:	9303      	str	r3, [sp, #12]
   2d2ac:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2d2b0:	9302      	str	r3, [sp, #8]
   2d2b2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2d2b6:	9301      	str	r3, [sp, #4]
   2d2b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2d2bc:	9300      	str	r3, [sp, #0]
   2d2be:	4a09      	ldr	r2, [pc, #36]	; (2d2e4 <bt_uuid_to_str+0xb8>)
   2d2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d2c2:	4639      	mov	r1, r7
   2d2c4:	4630      	mov	r0, r6
   2d2c6:	f01c f9e2 	bl	4968e <snprintk>
}
   2d2ca:	b00b      	add	sp, #44	; 0x2c
   2d2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)memset(str, 0, len);
   2d2ce:	2100      	movs	r1, #0
   2d2d0:	4630      	mov	r0, r6
}
   2d2d2:	b00b      	add	sp, #44	; 0x2c
   2d2d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		(void)memset(str, 0, len);
   2d2d8:	f01e bae2 	b.w	4b8a0 <memset>
   2d2dc:	00053aa9 	.word	0x00053aa9
   2d2e0:	00053a8c 	.word	0x00053a8c
   2d2e4:	00053a91 	.word	0x00053a91

0002d2e8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   2d2e8:	b538      	push	{r3, r4, r5, lr}
   2d2ea:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   2d2ec:	4805      	ldr	r0, [pc, #20]	; (2d304 <bt_buf_get_rx+0x1c>)
   2d2ee:	f022 fa33 	bl	4f758 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   2d2f2:	4604      	mov	r4, r0
   2d2f4:	b120      	cbz	r0, 2d300 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   2d2f6:	2100      	movs	r1, #0
   2d2f8:	3008      	adds	r0, #8
   2d2fa:	f022 fa52 	bl	4f7a2 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2d2fe:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   2d300:	4620      	mov	r0, r4
   2d302:	bd38      	pop	{r3, r4, r5, pc}
   2d304:	20001134 	.word	0x20001134

0002d308 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   2d308:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   2d30a:	490b      	ldr	r1, [pc, #44]	; (2d338 <bt_buf_get_cmd_complete+0x30>)
{
   2d30c:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   2d30e:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   2d312:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   2d314:	b920      	cbnz	r0, 2d320 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   2d316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2d31a:	2001      	movs	r0, #1
   2d31c:	f7ff bfe4 	b.w	2d2e8 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   2d320:	f022 fa50 	bl	4f7c4 <net_buf_ref>
   2d324:	2301      	movs	r3, #1
		buf->len = 0U;
   2d326:	2100      	movs	r1, #0
   2d328:	7503      	strb	r3, [r0, #20]
   2d32a:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   2d32c:	4604      	mov	r4, r0
   2d32e:	3008      	adds	r0, #8
   2d330:	f022 fa37 	bl	4f7a2 <net_buf_simple_reserve>
}
   2d334:	4620      	mov	r0, r4
   2d336:	bd10      	pop	{r4, pc}
   2d338:	20000000 	.word	0x20000000

0002d33c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   2d33c:	b570      	push	{r4, r5, r6, lr}
   2d33e:	4604      	mov	r4, r0
	switch (evt) {
   2d340:	2c0f      	cmp	r4, #15
{
   2d342:	460d      	mov	r5, r1
   2d344:	4610      	mov	r0, r2
   2d346:	4619      	mov	r1, r3
	switch (evt) {
   2d348:	d805      	bhi.n	2d356 <bt_buf_get_evt+0x1a>
   2d34a:	2c0d      	cmp	r4, #13
   2d34c:	d912      	bls.n	2d374 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   2d34e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   2d352:	f7ff bfd9 	b.w	2d308 <bt_buf_get_cmd_complete>
	switch (evt) {
   2d356:	2c13      	cmp	r4, #19
   2d358:	d10c      	bne.n	2d374 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   2d35a:	480b      	ldr	r0, [pc, #44]	; (2d388 <bt_buf_get_evt+0x4c>)
   2d35c:	f022 f9fc 	bl	4f758 <net_buf_alloc_fixed>
			if (buf) {
   2d360:	4604      	mov	r4, r0
   2d362:	b128      	cbz	r0, 2d370 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   2d364:	2100      	movs	r1, #0
   2d366:	3008      	adds	r0, #8
   2d368:	f022 fa1b 	bl	4f7a2 <net_buf_simple_reserve>
   2d36c:	2301      	movs	r3, #1
   2d36e:	7523      	strb	r3, [r4, #20]
}
   2d370:	4620      	mov	r0, r4
   2d372:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   2d374:	4602      	mov	r2, r0
   2d376:	460b      	mov	r3, r1
		if (discardable) {
   2d378:	b10d      	cbz	r5, 2d37e <bt_buf_get_evt+0x42>
   2d37a:	4804      	ldr	r0, [pc, #16]	; (2d38c <bt_buf_get_evt+0x50>)
   2d37c:	e7ee      	b.n	2d35c <bt_buf_get_evt+0x20>
}
   2d37e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2d382:	2001      	movs	r0, #1
   2d384:	f7ff bfb0 	b.w	2d2e8 <bt_buf_get_rx>
   2d388:	20001160 	.word	0x20001160
   2d38c:	200010b0 	.word	0x200010b0

0002d390 <unpair>:
{
   2d390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d394:	4606      	mov	r6, r0
   2d396:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   2d398:	f002 fae8 	bl	2f96c <bt_conn_lookup_addr_le>
	if (conn) {
   2d39c:	4604      	mov	r4, r0
   2d39e:	b9b0      	cbnz	r0, 2d3ce <unpair+0x3e>
			keys = bt_keys_find_addr(id, addr);
   2d3a0:	4639      	mov	r1, r7
   2d3a2:	4630      	mov	r0, r6
   2d3a4:	f006 fa04 	bl	337b0 <bt_keys_find_addr>
		if (keys) {
   2d3a8:	4605      	mov	r5, r0
   2d3aa:	b110      	cbz	r0, 2d3b2 <unpair+0x22>
			bt_keys_clear(keys);
   2d3ac:	4628      	mov	r0, r5
   2d3ae:	f006 fa1d 	bl	337ec <bt_keys_clear>
	bt_gatt_clear(id, addr);
   2d3b2:	4639      	mov	r1, r7
   2d3b4:	4630      	mov	r0, r6
   2d3b6:	f004 ff89 	bl	322cc <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
   2d3ba:	4b10      	ldr	r3, [pc, #64]	; (2d3fc <unpair+0x6c>)
   2d3bc:	681b      	ldr	r3, [r3, #0]
   2d3be:	b1db      	cbz	r3, 2d3f8 <unpair+0x68>
   2d3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2d3c2:	b1cb      	cbz	r3, 2d3f8 <unpair+0x68>
		bt_auth->bond_deleted(id, addr);
   2d3c4:	4639      	mov	r1, r7
   2d3c6:	4630      	mov	r0, r6
}
   2d3c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
   2d3cc:	4718      	bx	r3
		if (conn->type == BT_CONN_TYPE_LE) {
   2d3ce:	7883      	ldrb	r3, [r0, #2]
   2d3d0:	2b01      	cmp	r3, #1
   2d3d2:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
   2d3d6:	bf04      	itt	eq
   2d3d8:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   2d3dc:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   2d3e0:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
   2d3e4:	bf18      	it	ne
   2d3e6:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   2d3e8:	f01f fb81 	bl	4caee <bt_conn_disconnect>
		bt_conn_unref(conn);
   2d3ec:	4620      	mov	r0, r4
   2d3ee:	f01f fa85 	bl	4c8fc <bt_conn_unref>
		if (!keys) {
   2d3f2:	2d00      	cmp	r5, #0
   2d3f4:	d1da      	bne.n	2d3ac <unpair+0x1c>
   2d3f6:	e7d3      	b.n	2d3a0 <unpair+0x10>
}
   2d3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d3fc:	20003f94 	.word	0x20003f94

0002d400 <hci_disconn_complete_prio>:
{
   2d400:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2d402:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2d404:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   2d408:	781b      	ldrb	r3, [r3, #0]
   2d40a:	b98b      	cbnz	r3, 2d430 <hci_disconn_complete_prio+0x30>
	conn = bt_conn_lookup_handle(handle);
   2d40c:	4620      	mov	r0, r4
   2d40e:	f002 f8a3 	bl	2f558 <bt_conn_lookup_handle>
	if (!conn) {
   2d412:	4605      	mov	r5, r0
   2d414:	b968      	cbnz	r0, 2d432 <hci_disconn_complete_prio+0x32>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2d416:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   2d41a:	4a0a      	ldr	r2, [pc, #40]	; (2d444 <hci_disconn_complete_prio+0x44>)
	if (!conn) {
   2d41c:	2306      	movs	r3, #6
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2d41e:	ea6f 5010 	mvn.w	r0, r0, lsr #20
		if (!disconnected_handles[i]) {
   2d422:	f832 1b02 	ldrh.w	r1, [r2], #2
   2d426:	b909      	cbnz	r1, 2d42c <hci_disconn_complete_prio+0x2c>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2d428:	f822 0c02 	strh.w	r0, [r2, #-2]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2d42c:	3b01      	subs	r3, #1
   2d42e:	d1f8      	bne.n	2d422 <hci_disconn_complete_prio+0x22>
}
   2d430:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2d432:	2101      	movs	r1, #1
   2d434:	f002 f898 	bl	2f568 <bt_conn_set_state>
	bt_conn_unref(conn);
   2d438:	4628      	mov	r0, r5
}
   2d43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2d43e:	f01f ba5d 	b.w	4c8fc <bt_conn_unref>
   2d442:	bf00      	nop
   2d444:	20006bd0 	.word	0x20006bd0

0002d448 <hci_le_meta_event>:
{
   2d448:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   2d44a:	2101      	movs	r1, #1
   2d44c:	4604      	mov	r4, r0
   2d44e:	3008      	adds	r0, #8
   2d450:	f022 fa1b 	bl	4f88a <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2d454:	4621      	mov	r1, r4
   2d456:	4a03      	ldr	r2, [pc, #12]	; (2d464 <hci_le_meta_event+0x1c>)
   2d458:	7800      	ldrb	r0, [r0, #0]
}
   2d45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   2d45e:	230b      	movs	r3, #11
   2d460:	f01e bb6a 	b.w	4bb38 <handle_event>
   2d464:	00052060 	.word	0x00052060

0002d468 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2d468:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2d46a:	4c0c      	ldr	r4, [pc, #48]	; (2d49c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2d46c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2d46e:	2205      	movs	r2, #5
   2d470:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   2d474:	f002 fa9e 	bl	2f9b4 <bt_conn_lookup_state_le>
		if (!conn) {
   2d478:	b970      	cbnz	r0, 2d498 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   2d47a:	4b09      	ldr	r3, [pc, #36]	; (2d4a0 <find_pending_connect.part.0+0x38>)
   2d47c:	6818      	ldr	r0, [r3, #0]
   2d47e:	889a      	ldrh	r2, [r3, #4]
   2d480:	9000      	str	r0, [sp, #0]
   2d482:	799b      	ldrb	r3, [r3, #6]
   2d484:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2d488:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   2d48c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2d490:	2204      	movs	r2, #4
   2d492:	4669      	mov	r1, sp
   2d494:	f002 fa8e 	bl	2f9b4 <bt_conn_lookup_state_le>
}
   2d498:	b002      	add	sp, #8
   2d49a:	bd10      	pop	{r4, pc}
   2d49c:	20000000 	.word	0x20000000
   2d4a0:	0005153a 	.word	0x0005153a

0002d4a4 <hci_cmd_done>:
{
   2d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d4a6:	4607      	mov	r7, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2d4a8:	7990      	ldrb	r0, [r2, #6]
{
   2d4aa:	460e      	mov	r6, r1
   2d4ac:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2d4ae:	f015 ff4f 	bl	43350 <net_buf_pool_get>
   2d4b2:	4b28      	ldr	r3, [pc, #160]	; (2d554 <hci_cmd_done+0xb0>)
   2d4b4:	4283      	cmp	r3, r0
   2d4b6:	d14b      	bne.n	2d550 <hci_cmd_done+0xac>
	if (cmd(buf)->opcode != opcode) {
   2d4b8:	4620      	mov	r0, r4
   2d4ba:	f015 ff51 	bl	43360 <net_buf_id>
   2d4be:	4d26      	ldr	r5, [pc, #152]	; (2d558 <hci_cmd_done+0xb4>)
   2d4c0:	230c      	movs	r3, #12
   2d4c2:	fb03 5000 	mla	r0, r3, r0, r5
   2d4c6:	8843      	ldrh	r3, [r0, #2]
   2d4c8:	42bb      	cmp	r3, r7
   2d4ca:	d141      	bne.n	2d550 <hci_cmd_done+0xac>
	if (bt_dev.sent_cmd) {
   2d4cc:	4f23      	ldr	r7, [pc, #140]	; (2d55c <hci_cmd_done+0xb8>)
   2d4ce:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2d4d2:	b120      	cbz	r0, 2d4de <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   2d4d4:	f016 f800 	bl	434d8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2d4d8:	2300      	movs	r3, #0
   2d4da:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   2d4de:	4620      	mov	r0, r4
   2d4e0:	f015 ff3e 	bl	43360 <net_buf_id>
   2d4e4:	270c      	movs	r7, #12
   2d4e6:	fb07 5000 	mla	r0, r7, r0, r5
   2d4ea:	6843      	ldr	r3, [r0, #4]
   2d4ec:	b19b      	cbz	r3, 2d516 <hci_cmd_done+0x72>
   2d4ee:	b996      	cbnz	r6, 2d516 <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   2d4f0:	4620      	mov	r0, r4
   2d4f2:	f015 ff35 	bl	43360 <net_buf_id>
   2d4f6:	fb07 5000 	mla	r0, r7, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d4fa:	2101      	movs	r1, #1
   2d4fc:	6842      	ldr	r2, [r0, #4]
   2d4fe:	e9d2 0300 	ldrd	r0, r3, [r2]
	if (val) {
   2d502:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d504:	f003 071f 	and.w	r7, r3, #31
   2d508:	40b9      	lsls	r1, r7
	if (val) {
   2d50a:	095b      	lsrs	r3, r3, #5
   2d50c:	b1d2      	cbz	r2, 2d544 <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2d50e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2d512:	f01e fb41 	bl	4bb98 <atomic_or>
	if (cmd(buf)->sync) {
   2d516:	4620      	mov	r0, r4
   2d518:	f015 ff22 	bl	43360 <net_buf_id>
   2d51c:	270c      	movs	r7, #12
   2d51e:	fb07 5000 	mla	r0, r7, r0, r5
   2d522:	6883      	ldr	r3, [r0, #8]
   2d524:	b1a3      	cbz	r3, 2d550 <hci_cmd_done+0xac>
		cmd(buf)->status = status;
   2d526:	4620      	mov	r0, r4
   2d528:	f015 ff1a 	bl	43360 <net_buf_id>
   2d52c:	4378      	muls	r0, r7
   2d52e:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   2d530:	4620      	mov	r0, r4
   2d532:	f015 ff15 	bl	43360 <net_buf_id>
   2d536:	fb07 5500 	mla	r5, r7, r0, r5
   2d53a:	68a8      	ldr	r0, [r5, #8]
}
   2d53c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   2d540:	f01a bb5c 	b.w	47bfc <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2d544:	43c9      	mvns	r1, r1
   2d546:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2d54a:	f01e fb34 	bl	4bbb6 <atomic_and>
   2d54e:	e7e2      	b.n	2d516 <hci_cmd_done+0x72>
   2d550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d552:	bf00      	nop
   2d554:	20001108 	.word	0x20001108
   2d558:	20003f60 	.word	0x20003f60
   2d55c:	20000000 	.word	0x20000000

0002d560 <hci_cmd_status>:
{
   2d560:	b538      	push	{r3, r4, r5, lr}
   2d562:	2104      	movs	r1, #4
   2d564:	4604      	mov	r4, r0
   2d566:	3008      	adds	r0, #8
   2d568:	f022 f98f 	bl	4f88a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   2d56c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   2d56e:	7801      	ldrb	r1, [r0, #0]
   2d570:	8840      	ldrh	r0, [r0, #2]
   2d572:	4622      	mov	r2, r4
   2d574:	f7ff ff96 	bl	2d4a4 <hci_cmd_done>
	if (ncmd) {
   2d578:	b125      	cbz	r5, 2d584 <hci_cmd_status+0x24>
   2d57a:	4803      	ldr	r0, [pc, #12]	; (2d588 <hci_cmd_status+0x28>)
}
   2d57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2d580:	f01a bb3c 	b.w	47bfc <z_impl_k_sem_give>
   2d584:	bd38      	pop	{r3, r4, r5, pc}
   2d586:	bf00      	nop
   2d588:	20000120 	.word	0x20000120

0002d58c <hci_cmd_complete>:
{
   2d58c:	b538      	push	{r3, r4, r5, lr}
   2d58e:	2103      	movs	r1, #3
   2d590:	4604      	mov	r4, r0
   2d592:	3008      	adds	r0, #8
   2d594:	f022 f979 	bl	4f88a <net_buf_simple_pull_mem>
	status = buf->data[0];
   2d598:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   2d59a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   2d59c:	7819      	ldrb	r1, [r3, #0]
   2d59e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   2d5a2:	4622      	mov	r2, r4
   2d5a4:	f7ff ff7e 	bl	2d4a4 <hci_cmd_done>
	if (ncmd) {
   2d5a8:	b125      	cbz	r5, 2d5b4 <hci_cmd_complete+0x28>
   2d5aa:	4803      	ldr	r0, [pc, #12]	; (2d5b8 <hci_cmd_complete+0x2c>)
}
   2d5ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2d5b0:	f01a bb24 	b.w	47bfc <z_impl_k_sem_give>
   2d5b4:	bd38      	pop	{r3, r4, r5, pc}
   2d5b6:	bf00      	nop
   2d5b8:	20000120 	.word	0x20000120

0002d5bc <hci_tx_thread>:
{
   2d5bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   2d5c0:	f8df 8108 	ldr.w	r8, [pc, #264]	; 2d6cc <hci_tx_thread+0x110>
		BT_ASSERT(err == 0);
   2d5c4:	f8df a108 	ldr.w	sl, [pc, #264]	; 2d6d0 <hci_tx_thread+0x114>
		events[0].state = K_POLL_STATE_NOT_READY;
   2d5c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2d5cc:	4841      	ldr	r0, [pc, #260]	; (2d6d4 <hci_tx_thread+0x118>)
		events[0].state = K_POLL_STATE_NOT_READY;
   2d5ce:	f36f 3352 	bfc	r3, #13, #6
   2d5d2:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2d5d6:	f001 ff83 	bl	2f4e0 <bt_conn_prepare_events>
   2d5da:	1c45      	adds	r5, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   2d5dc:	483b      	ldr	r0, [pc, #236]	; (2d6cc <hci_tx_thread+0x110>)
   2d5de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d5e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d5e6:	4629      	mov	r1, r5
   2d5e8:	f01b fa62 	bl	48ab0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   2d5ec:	b160      	cbz	r0, 2d608 <hci_tx_thread+0x4c>
   2d5ee:	493a      	ldr	r1, [pc, #232]	; (2d6d8 <hci_tx_thread+0x11c>)
   2d5f0:	483a      	ldr	r0, [pc, #232]	; (2d6dc <hci_tx_thread+0x120>)
   2d5f2:	f640 1393 	movw	r3, #2451	; 0x993
   2d5f6:	4652      	mov	r2, sl
   2d5f8:	f01c f83c 	bl	49674 <printk>
   2d5fc:	4040      	eors	r0, r0
   2d5fe:	f380 8811 	msr	BASEPRI, r0
   2d602:	f04f 0003 	mov.w	r0, #3
   2d606:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2d608:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 2d6e0 <hci_tx_thread+0x124>
{
   2d60c:	4e2f      	ldr	r6, [pc, #188]	; (2d6cc <hci_tx_thread+0x110>)
	return z_impl_k_sem_take(sem, timeout);
   2d60e:	f5a9 779e 	sub.w	r7, r9, #316	; 0x13c
   2d612:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
   2d616:	b915      	cbnz	r5, 2d61e <hci_tx_thread+0x62>
	z_impl_k_yield();
   2d618:	f01a ff50 	bl	484bc <z_impl_k_yield>
	while (1) {
   2d61c:	e7d4      	b.n	2d5c8 <hci_tx_thread+0xc>
		switch (ev->state) {
   2d61e:	68f3      	ldr	r3, [r6, #12]
   2d620:	f3c3 3345 	ubfx	r3, r3, #13, #6
   2d624:	2b04      	cmp	r3, #4
   2d626:	d147      	bne.n	2d6b8 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   2d628:	7b33      	ldrb	r3, [r6, #12]
   2d62a:	2b00      	cmp	r3, #0
   2d62c:	d147      	bne.n	2d6be <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2d62e:	2200      	movs	r2, #0
   2d630:	2300      	movs	r3, #0
   2d632:	4648      	mov	r0, r9
   2d634:	f022 f895 	bl	4f762 <net_buf_get>
	BT_ASSERT(buf);
   2d638:	4604      	mov	r4, r0
   2d63a:	b960      	cbnz	r0, 2d656 <hci_tx_thread+0x9a>
   2d63c:	4929      	ldr	r1, [pc, #164]	; (2d6e4 <hci_tx_thread+0x128>)
   2d63e:	4827      	ldr	r0, [pc, #156]	; (2d6dc <hci_tx_thread+0x120>)
   2d640:	f640 132a 	movw	r3, #2346	; 0x92a
   2d644:	4652      	mov	r2, sl
   2d646:	f01c f815 	bl	49674 <printk>
   2d64a:	4040      	eors	r0, r0
   2d64c:	f380 8811 	msr	BASEPRI, r0
   2d650:	f04f 0003 	mov.w	r0, #3
   2d654:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   2d656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d65a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d65e:	4658      	mov	r0, fp
   2d660:	f01a faf2 	bl	47c48 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   2d664:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2d668:	b120      	cbz	r0, 2d674 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   2d66a:	f015 ff35 	bl	434d8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2d66e:	2300      	movs	r3, #0
   2d670:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   2d674:	4620      	mov	r0, r4
   2d676:	f022 f8a5 	bl	4f7c4 <net_buf_ref>
   2d67a:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   2d67e:	4620      	mov	r0, r4
   2d680:	f7ff fc66 	bl	2cf50 <bt_hci_ecc_send>
	if (err) {
   2d684:	b1c0      	cbz	r0, 2d6b8 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   2d686:	4818      	ldr	r0, [pc, #96]	; (2d6e8 <hci_tx_thread+0x12c>)
   2d688:	f01a fab8 	bl	47bfc <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   2d68c:	4620      	mov	r0, r4
   2d68e:	f015 fe67 	bl	43360 <net_buf_id>
   2d692:	4b16      	ldr	r3, [pc, #88]	; (2d6ec <hci_tx_thread+0x130>)
   2d694:	220c      	movs	r2, #12
   2d696:	fb02 3000 	mla	r0, r2, r0, r3
   2d69a:	211f      	movs	r1, #31
   2d69c:	8840      	ldrh	r0, [r0, #2]
   2d69e:	4622      	mov	r2, r4
   2d6a0:	f7ff ff00 	bl	2d4a4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   2d6a4:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   2d6a8:	f015 ff16 	bl	434d8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2d6ac:	2300      	movs	r3, #0
		net_buf_unref(buf);
   2d6ae:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   2d6b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		net_buf_unref(buf);
   2d6b4:	f015 ff10 	bl	434d8 <net_buf_unref>
	for (; count; ev++, count--) {
   2d6b8:	3614      	adds	r6, #20
   2d6ba:	3d01      	subs	r5, #1
   2d6bc:	e7ab      	b.n	2d616 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   2d6be:	2b01      	cmp	r3, #1
   2d6c0:	d1fa      	bne.n	2d6b8 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   2d6c2:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   2d6c4:	3838      	subs	r0, #56	; 0x38
   2d6c6:	f002 fba9 	bl	2fe1c <bt_conn_process_tx>
   2d6ca:	e7f5      	b.n	2d6b8 <hci_tx_thread+0xfc>
   2d6cc:	200004f8 	.word	0x200004f8
   2d6d0:	00053abf 	.word	0x00053abf
   2d6d4:	2000050c 	.word	0x2000050c
   2d6d8:	00053af3 	.word	0x00053af3
   2d6dc:	00053afc 	.word	0x00053afc
   2d6e0:	2000013c 	.word	0x2000013c
   2d6e4:	00053b19 	.word	0x00053b19
   2d6e8:	20000120 	.word	0x20000120
   2d6ec:	20003f60 	.word	0x20003f60

0002d6f0 <bt_hci_cmd_state_set_init>:
{
   2d6f0:	b510      	push	{r4, lr}
	state->bit = bit;
   2d6f2:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   2d6f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2d6fa:	720b      	strb	r3, [r1, #8]
{
   2d6fc:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   2d6fe:	f015 fe2f 	bl	43360 <net_buf_id>
   2d702:	4b03      	ldr	r3, [pc, #12]	; (2d710 <bt_hci_cmd_state_set_init+0x20>)
   2d704:	220c      	movs	r2, #12
   2d706:	fb02 3300 	mla	r3, r2, r0, r3
   2d70a:	605c      	str	r4, [r3, #4]
}
   2d70c:	bd10      	pop	{r4, pc}
   2d70e:	bf00      	nop
   2d710:	20003f60 	.word	0x20003f60

0002d714 <bt_hci_cmd_create>:
{
   2d714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   2d718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d71c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d720:	4606      	mov	r6, r0
   2d722:	4817      	ldr	r0, [pc, #92]	; (2d780 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   2d724:	4d17      	ldr	r5, [pc, #92]	; (2d784 <bt_hci_cmd_create+0x70>)
{
   2d726:	460f      	mov	r7, r1
   2d728:	f022 f816 	bl	4f758 <net_buf_alloc_fixed>
   2d72c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   2d72e:	f100 0a08 	add.w	sl, r0, #8
   2d732:	2100      	movs	r1, #0
   2d734:	f04f 0800 	mov.w	r8, #0
   2d738:	4650      	mov	r0, sl
   2d73a:	f022 f832 	bl	4f7a2 <net_buf_simple_reserve>
   2d73e:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   2d742:	4620      	mov	r0, r4
   2d744:	f015 fe0c 	bl	43360 <net_buf_id>
   2d748:	f04f 090c 	mov.w	r9, #12
   2d74c:	fb09 5000 	mla	r0, r9, r0, r5
   2d750:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   2d752:	4620      	mov	r0, r4
   2d754:	f015 fe04 	bl	43360 <net_buf_id>
   2d758:	fb09 5000 	mla	r0, r9, r0, r5
   2d75c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   2d760:	4620      	mov	r0, r4
   2d762:	f015 fdfd 	bl	43360 <net_buf_id>
   2d766:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   2d76a:	2103      	movs	r1, #3
   2d76c:	f8c5 8004 	str.w	r8, [r5, #4]
   2d770:	4650      	mov	r0, sl
   2d772:	f022 f859 	bl	4f828 <net_buf_simple_add>
	hdr->param_len = param_len;
   2d776:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   2d778:	8006      	strh	r6, [r0, #0]
}
   2d77a:	4620      	mov	r0, r4
   2d77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d780:	20001108 	.word	0x20001108
   2d784:	20003f60 	.word	0x20003f60

0002d788 <bt_hci_cmd_send>:
{
   2d788:	b538      	push	{r3, r4, r5, lr}
   2d78a:	4605      	mov	r5, r0
	if (!buf) {
   2d78c:	460c      	mov	r4, r1
   2d78e:	b919      	cbnz	r1, 2d798 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   2d790:	f7ff ffc0 	bl	2d714 <bt_hci_cmd_create>
		if (!buf) {
   2d794:	4604      	mov	r4, r0
   2d796:	b198      	cbz	r0, 2d7c0 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   2d798:	f640 4335 	movw	r3, #3125	; 0xc35
   2d79c:	429d      	cmp	r5, r3
   2d79e:	d109      	bne.n	2d7b4 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   2d7a0:	4620      	mov	r0, r4
   2d7a2:	f7ff fbd5 	bl	2cf50 <bt_hci_ecc_send>
		if (err) {
   2d7a6:	4605      	mov	r5, r0
   2d7a8:	b110      	cbz	r0, 2d7b0 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   2d7aa:	4620      	mov	r0, r4
   2d7ac:	f015 fe94 	bl	434d8 <net_buf_unref>
}
   2d7b0:	4628      	mov	r0, r5
   2d7b2:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   2d7b4:	4804      	ldr	r0, [pc, #16]	; (2d7c8 <bt_hci_cmd_send+0x40>)
   2d7b6:	4621      	mov	r1, r4
   2d7b8:	f021 fff7 	bl	4f7aa <net_buf_put>
	return 0;
   2d7bc:	2500      	movs	r5, #0
   2d7be:	e7f7      	b.n	2d7b0 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   2d7c0:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2d7c4:	e7f4      	b.n	2d7b0 <bt_hci_cmd_send+0x28>
   2d7c6:	bf00      	nop
   2d7c8:	2000013c 	.word	0x2000013c

0002d7cc <bt_hci_cmd_send_sync>:
{
   2d7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d7ce:	4615      	mov	r5, r2
   2d7d0:	b087      	sub	sp, #28
	if (!buf) {
   2d7d2:	460c      	mov	r4, r1
   2d7d4:	b921      	cbnz	r1, 2d7e0 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   2d7d6:	f7ff ff9d 	bl	2d714 <bt_hci_cmd_create>
		if (!buf) {
   2d7da:	4604      	mov	r4, r0
   2d7dc:	2800      	cmp	r0, #0
   2d7de:	d048      	beq.n	2d872 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2d7e0:	2201      	movs	r2, #1
   2d7e2:	2100      	movs	r1, #0
   2d7e4:	4668      	mov	r0, sp
   2d7e6:	f022 ff7d 	bl	506e4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   2d7ea:	4620      	mov	r0, r4
   2d7ec:	f015 fdb8 	bl	43360 <net_buf_id>
   2d7f0:	4f21      	ldr	r7, [pc, #132]	; (2d878 <bt_hci_cmd_send_sync+0xac>)
   2d7f2:	230c      	movs	r3, #12
   2d7f4:	fb03 7000 	mla	r0, r3, r0, r7
   2d7f8:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   2d7fc:	4620      	mov	r0, r4
   2d7fe:	f021 ffe1 	bl	4f7c4 <net_buf_ref>
   2d802:	4601      	mov	r1, r0
   2d804:	481d      	ldr	r0, [pc, #116]	; (2d87c <bt_hci_cmd_send_sync+0xb0>)
   2d806:	f021 ffd0 	bl	4f7aa <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   2d80a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2d80e:	2300      	movs	r3, #0
   2d810:	4668      	mov	r0, sp
   2d812:	f01a fa19 	bl	47c48 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   2d816:	4606      	mov	r6, r0
   2d818:	b180      	cbz	r0, 2d83c <bt_hci_cmd_send_sync+0x70>
   2d81a:	4a19      	ldr	r2, [pc, #100]	; (2d880 <bt_hci_cmd_send_sync+0xb4>)
   2d81c:	4919      	ldr	r1, [pc, #100]	; (2d884 <bt_hci_cmd_send_sync+0xb8>)
   2d81e:	481a      	ldr	r0, [pc, #104]	; (2d888 <bt_hci_cmd_send_sync+0xbc>)
   2d820:	f240 1331 	movw	r3, #305	; 0x131
   2d824:	f01b ff26 	bl	49674 <printk>
   2d828:	4818      	ldr	r0, [pc, #96]	; (2d88c <bt_hci_cmd_send_sync+0xc0>)
   2d82a:	4631      	mov	r1, r6
   2d82c:	f01b ff22 	bl	49674 <printk>
   2d830:	4040      	eors	r0, r0
   2d832:	f380 8811 	msr	BASEPRI, r0
   2d836:	f04f 0003 	mov.w	r0, #3
   2d83a:	df02      	svc	2
	status = cmd(buf)->status;
   2d83c:	4620      	mov	r0, r4
   2d83e:	f015 fd8f 	bl	43360 <net_buf_id>
   2d842:	230c      	movs	r3, #12
   2d844:	4358      	muls	r0, r3
   2d846:	5c3e      	ldrb	r6, [r7, r0]
	if (status) {
   2d848:	b156      	cbz	r6, 2d860 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   2d84a:	4620      	mov	r0, r4
   2d84c:	f015 fe44 	bl	434d8 <net_buf_unref>
			return -EIO;
   2d850:	2e09      	cmp	r6, #9
   2d852:	bf0c      	ite	eq
   2d854:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   2d858:	f06f 0004 	mvnne.w	r0, #4
}
   2d85c:	b007      	add	sp, #28
   2d85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   2d860:	b115      	cbz	r5, 2d868 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   2d862:	602c      	str	r4, [r5, #0]
	return 0;
   2d864:	4630      	mov	r0, r6
   2d866:	e7f9      	b.n	2d85c <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   2d868:	4620      	mov	r0, r4
   2d86a:	f015 fe35 	bl	434d8 <net_buf_unref>
	return 0;
   2d86e:	4628      	mov	r0, r5
   2d870:	e7f4      	b.n	2d85c <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   2d872:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d876:	e7f1      	b.n	2d85c <bt_hci_cmd_send_sync+0x90>
   2d878:	20003f60 	.word	0x20003f60
   2d87c:	2000013c 	.word	0x2000013c
   2d880:	00053abf 	.word	0x00053abf
   2d884:	00053af3 	.word	0x00053af3
   2d888:	00053afc 	.word	0x00053afc
   2d88c:	00053b1d 	.word	0x00053b1d

0002d890 <bt_get_phy>:
	switch (hci_phy) {
   2d890:	3801      	subs	r0, #1
   2d892:	b2c0      	uxtb	r0, r0
   2d894:	2802      	cmp	r0, #2
   2d896:	bf9a      	itte	ls
   2d898:	4b01      	ldrls	r3, [pc, #4]	; (2d8a0 <bt_get_phy+0x10>)
   2d89a:	5c18      	ldrbls	r0, [r3, r0]
{
   2d89c:	2000      	movhi	r0, #0
}
   2d89e:	4770      	bx	lr
   2d8a0:	00053bc6 	.word	0x00053bc6

0002d8a4 <bt_le_create_conn_legacy>:
{
   2d8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d8a8:	b086      	sub	sp, #24
   2d8aa:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   2d8ac:	f10d 010b 	add.w	r1, sp, #11
   2d8b0:	2000      	movs	r0, #0
   2d8b2:	f000 fe6d 	bl	2e590 <bt_id_set_create_conn_own_addr>
	if (err) {
   2d8b6:	4605      	mov	r5, r0
   2d8b8:	2800      	cmp	r0, #0
   2d8ba:	d147      	bne.n	2d94c <bt_le_create_conn_legacy+0xa8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   2d8bc:	2119      	movs	r1, #25
   2d8be:	f242 000d 	movw	r0, #8205	; 0x200d
   2d8c2:	f7ff ff27 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   2d8c6:	4607      	mov	r7, r0
   2d8c8:	2800      	cmp	r0, #0
   2d8ca:	d046      	beq.n	2d95a <bt_le_create_conn_legacy+0xb6>
   2d8cc:	2119      	movs	r1, #25
   2d8ce:	3008      	adds	r0, #8
   2d8d0:	f021 ffaa 	bl	4f828 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
   2d8d4:	4629      	mov	r1, r5
   2d8d6:	4604      	mov	r4, r0
   2d8d8:	2219      	movs	r2, #25
   2d8da:	f01d ffe1 	bl	4b8a0 <memset>
		if (!bt_dev.le.rl_size ||
   2d8de:	4d20      	ldr	r5, [pc, #128]	; (2d960 <bt_le_create_conn_legacy+0xbc>)
	cp->own_addr_type = own_addr_type;
   2d8e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2d8e4:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
   2d8e6:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   2d8ea:	b39b      	cbz	r3, 2d954 <bt_le_create_conn_legacy+0xb0>
   2d8ec:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   2d8f0:	429a      	cmp	r2, r3
   2d8f2:	d82f      	bhi.n	2d954 <bt_le_create_conn_legacy+0xb0>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   2d8f4:	f106 0188 	add.w	r1, r6, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   2d8f8:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   2d8fa:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   2d8fe:	f01e f948 	bl	4bb92 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   2d902:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   2d906:	89ab      	ldrh	r3, [r5, #12]
   2d908:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   2d90a:	89eb      	ldrh	r3, [r5, #14]
   2d90c:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   2d90e:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
   2d912:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   2d916:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
   2d91a:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   2d91e:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
   2d922:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   2d926:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
   2d92a:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   2d92e:	2301      	movs	r3, #1
   2d930:	4a0c      	ldr	r2, [pc, #48]	; (2d964 <bt_le_create_conn_legacy+0xc0>)
   2d932:	9300      	str	r3, [sp, #0]
   2d934:	a903      	add	r1, sp, #12
   2d936:	230b      	movs	r3, #11
   2d938:	4638      	mov	r0, r7
   2d93a:	f7ff fed9 	bl	2d6f0 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   2d93e:	4642      	mov	r2, r8
   2d940:	4639      	mov	r1, r7
   2d942:	f242 000d 	movw	r0, #8205	; 0x200d
   2d946:	f7ff ff41 	bl	2d7cc <bt_hci_cmd_send_sync>
   2d94a:	4605      	mov	r5, r0
}
   2d94c:	4628      	mov	r0, r5
   2d94e:	b006      	add	sp, #24
   2d950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
   2d954:	f106 0196 	add.w	r1, r6, #150	; 0x96
   2d958:	e7ce      	b.n	2d8f8 <bt_le_create_conn_legacy+0x54>
		return -ENOBUFS;
   2d95a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2d95e:	e7f5      	b.n	2d94c <bt_le_create_conn_legacy+0xa8>
   2d960:	20000000 	.word	0x20000000
   2d964:	200000cc 	.word	0x200000cc

0002d968 <bt_le_create_conn_cancel>:
{
   2d968:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2d96a:	2100      	movs	r1, #0
{
   2d96c:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2d96e:	f242 000e 	movw	r0, #8206	; 0x200e
   2d972:	f7ff fecf 	bl	2d714 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   2d976:	2500      	movs	r5, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2d978:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   2d97a:	230b      	movs	r3, #11
   2d97c:	a903      	add	r1, sp, #12
   2d97e:	4a06      	ldr	r2, [pc, #24]	; (2d998 <bt_le_create_conn_cancel+0x30>)
   2d980:	9500      	str	r5, [sp, #0]
   2d982:	f7ff feb5 	bl	2d6f0 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   2d986:	462a      	mov	r2, r5
   2d988:	4621      	mov	r1, r4
   2d98a:	f242 000e 	movw	r0, #8206	; 0x200e
   2d98e:	f7ff ff1d 	bl	2d7cc <bt_hci_cmd_send_sync>
}
   2d992:	b007      	add	sp, #28
   2d994:	bd30      	pop	{r4, r5, pc}
   2d996:	bf00      	nop
   2d998:	200000cc 	.word	0x200000cc

0002d99c <conn_auto_initiate>:
{
   2d99c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2d99e:	7b43      	ldrb	r3, [r0, #13]
   2d9a0:	2b07      	cmp	r3, #7
{
   2d9a2:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2d9a4:	d15a      	bne.n	2da5c <conn_auto_initiate+0xc0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d9a6:	f3bf 8f5b 	dmb	ish
   2d9aa:	6843      	ldr	r3, [r0, #4]
   2d9ac:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   2d9b0:	049b      	lsls	r3, r3, #18
   2d9b2:	f100 0604 	add.w	r6, r0, #4
   2d9b6:	d41b      	bmi.n	2d9f0 <conn_auto_initiate+0x54>
   2d9b8:	78c3      	ldrb	r3, [r0, #3]
   2d9ba:	b123      	cbz	r3, 2d9c6 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   2d9bc:	4b28      	ldr	r3, [pc, #160]	; (2da60 <conn_auto_initiate+0xc4>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   2d9be:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   2d9c2:	071d      	lsls	r5, r3, #28
   2d9c4:	d514      	bpl.n	2d9f0 <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2d9c6:	2102      	movs	r1, #2
   2d9c8:	f242 0016 	movw	r0, #8214	; 0x2016
   2d9cc:	f7ff fea2 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   2d9d0:	4605      	mov	r5, r0
   2d9d2:	b168      	cbz	r0, 2d9f0 <conn_auto_initiate+0x54>
   2d9d4:	2102      	movs	r1, #2
   2d9d6:	3008      	adds	r0, #8
   2d9d8:	f021 ff26 	bl	4f828 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2d9dc:	8823      	ldrh	r3, [r4, #0]
   2d9de:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2d9e0:	4629      	mov	r1, r5
   2d9e2:	f242 0016 	movw	r0, #8214	; 0x2016
}
   2d9e6:	b004      	add	sp, #16
   2d9e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2d9ec:	f7ff becc 	b.w	2d788 <bt_hci_cmd_send>
   2d9f0:	f3bf 8f5b 	dmb	ish
   2d9f4:	6863      	ldr	r3, [r4, #4]
   2d9f6:	4d1a      	ldr	r5, [pc, #104]	; (2da60 <conn_auto_initiate+0xc4>)
   2d9f8:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   2d9fc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2da00:	f3c3 3100 	ubfx	r1, r3, #12, #1
   2da04:	d111      	bne.n	2da2a <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   2da06:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   2da0a:	07d8      	lsls	r0, r3, #31
   2da0c:	d50d      	bpl.n	2da2a <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   2da0e:	2302      	movs	r3, #2
   2da10:	9100      	str	r1, [sp, #0]
   2da12:	461a      	mov	r2, r3
   2da14:	4620      	mov	r0, r4
   2da16:	f01e fac5 	bl	4bfa4 <bt_le_set_phy>
		if (!err) {
   2da1a:	b930      	cbnz	r0, 2da2a <conn_auto_initiate+0x8e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2da1c:	2180      	movs	r1, #128	; 0x80
   2da1e:	4630      	mov	r0, r6
}
   2da20:	b004      	add	sp, #16
   2da22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2da26:	f01e b8b7 	b.w	4bb98 <atomic_or>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   2da2a:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   2da2e:	069a      	lsls	r2, r3, #26
   2da30:	d514      	bpl.n	2da5c <conn_auto_initiate+0xc0>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   2da32:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2da36:	689b      	ldr	r3, [r3, #8]
   2da38:	079b      	lsls	r3, r3, #30
   2da3a:	d50f      	bpl.n	2da5c <conn_auto_initiate+0xc0>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   2da3c:	f10d 010e 	add.w	r1, sp, #14
   2da40:	a803      	add	r0, sp, #12
   2da42:	f01e fa5d 	bl	4bf00 <hci_le_read_max_data_len>
			if (!err) {
   2da46:	b948      	cbnz	r0, 2da5c <conn_auto_initiate+0xc0>
				err = bt_le_set_data_len(conn,
   2da48:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2da4c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2da50:	4620      	mov	r0, r4
}
   2da52:	b004      	add	sp, #16
   2da54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				err = bt_le_set_data_len(conn,
   2da58:	f01e ba87 	b.w	4bf6a <bt_le_set_data_len>
}
   2da5c:	b004      	add	sp, #16
   2da5e:	bd70      	pop	{r4, r5, r6, pc}
   2da60:	20000000 	.word	0x20000000

0002da64 <bt_hci_le_enh_conn_complete>:
{
   2da64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2da68:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   2da6c:	4985      	ldr	r1, [pc, #532]	; (2dc84 <bt_hci_le_enh_conn_complete+0x220>)
	handle |= ~BT_ACL_HANDLE_MASK;
   2da6e:	ea6f 5307 	mvn.w	r3, r7, lsl #20
   2da72:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   2da76:	4605      	mov	r5, r0
   2da78:	b085      	sub	sp, #20
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2da7a:	fa1f f887 	uxth.w	r8, r7
	handle |= ~BT_ACL_HANDLE_MASK;
   2da7e:	b29b      	uxth	r3, r3
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2da80:	2200      	movs	r2, #0
   2da82:	4608      	mov	r0, r1
		if (disconnected_handles[i] == handle) {
   2da84:	f831 4b02 	ldrh.w	r4, [r1], #2
   2da88:	42a3      	cmp	r3, r4
   2da8a:	d120      	bne.n	2dace <bt_hci_le_enh_conn_complete+0x6a>
			disconnected_handles[i] = 0;
   2da8c:	2300      	movs	r3, #0
   2da8e:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
			return true;
   2da92:	2601      	movs	r6, #1
	bt_id_pending_keys_update();
   2da94:	f000 fb36 	bl	2e104 <bt_id_pending_keys_update>
	if (evt->status) {
   2da98:	782c      	ldrb	r4, [r5, #0]
   2da9a:	2c00      	cmp	r4, #0
   2da9c:	d03d      	beq.n	2db1a <bt_hci_le_enh_conn_complete+0xb6>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2da9e:	2c3c      	cmp	r4, #60	; 0x3c
   2daa0:	d11a      	bne.n	2dad8 <bt_hci_le_enh_conn_complete+0x74>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2daa2:	f000 fe99 	bl	2e7d8 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2daa6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2daaa:	3010      	adds	r0, #16
   2daac:	f01e f883 	bl	4bbb6 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2dab0:	2000      	movs	r0, #0
   2dab2:	f7ff fcd9 	bl	2d468 <find_pending_connect.part.0>
		if (!conn) {
   2dab6:	4605      	mov	r5, r0
   2dab8:	b360      	cbz	r0, 2db14 <bt_hci_le_enh_conn_complete+0xb0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   2daba:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2dabc:	2100      	movs	r1, #0
   2dabe:	f001 fd53 	bl	2f568 <bt_conn_set_state>
		bt_conn_unref(conn);
   2dac2:	4628      	mov	r0, r5
}
   2dac4:	b005      	add	sp, #20
   2dac6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   2daca:	f01e bf17 	b.w	4c8fc <bt_conn_unref>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2dace:	3201      	adds	r2, #1
   2dad0:	2a06      	cmp	r2, #6
   2dad2:	d1d7      	bne.n	2da84 <bt_hci_le_enh_conn_complete+0x20>
	return false;
   2dad4:	2600      	movs	r6, #0
   2dad6:	e7dd      	b.n	2da94 <bt_hci_le_enh_conn_complete+0x30>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2dad8:	2c02      	cmp	r4, #2
   2dada:	d11b      	bne.n	2db14 <bt_hci_le_enh_conn_complete+0xb0>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   2dadc:	2100      	movs	r1, #0
   2dade:	2206      	movs	r2, #6
   2dae0:	4608      	mov	r0, r1
   2dae2:	f001 ff67 	bl	2f9b4 <bt_conn_lookup_state_le>
	if (!conn) {
   2dae6:	4605      	mov	r5, r0
   2dae8:	b188      	cbz	r0, 2db0e <bt_hci_le_enh_conn_complete+0xaa>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   2daea:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2daec:	2100      	movs	r1, #0
   2daee:	f001 fd3b 	bl	2f568 <bt_conn_set_state>
   2daf2:	f3bf 8f5b 	dmb	ish
   2daf6:	686b      	ldr	r3, [r5, #4]
   2daf8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   2dafc:	07da      	lsls	r2, r3, #31
   2dafe:	d503      	bpl.n	2db08 <bt_hci_le_enh_conn_complete+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   2db00:	4621      	mov	r1, r4
   2db02:	4628      	mov	r0, r5
   2db04:	f001 fd30 	bl	2f568 <bt_conn_set_state>
	bt_conn_unref(conn);
   2db08:	4628      	mov	r0, r5
   2db0a:	f01e fef7 	bl	4c8fc <bt_conn_unref>
			bt_le_scan_update(false);
   2db0e:	2000      	movs	r0, #0
   2db10:	f001 f8f2 	bl	2ecf8 <bt_le_scan_update>
}
   2db14:	b005      	add	sp, #20
   2db16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2db1a:	792b      	ldrb	r3, [r5, #4]
   2db1c:	3b02      	subs	r3, #2
   2db1e:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2db20:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2db24:	d834      	bhi.n	2db90 <bt_hci_le_enh_conn_complete+0x12c>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2db26:	4649      	mov	r1, r9
   2db28:	a802      	add	r0, sp, #8
   2db2a:	f01e f832 	bl	4bb92 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2db2e:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   2db32:	2206      	movs	r2, #6
   2db34:	3b02      	subs	r3, #2
   2db36:	f105 0111 	add.w	r1, r5, #17
   2db3a:	f10d 0001 	add.w	r0, sp, #1
   2db3e:	f88d 3008 	strb.w	r3, [sp, #8]
   2db42:	f01d fea2 	bl	4b88a <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   2db46:	2301      	movs	r3, #1
   2db48:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   2db4c:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   2db4e:	bb90      	cbnz	r0, 2dbb6 <bt_hci_le_enh_conn_complete+0x152>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   2db50:	2206      	movs	r2, #6
   2db52:	a902      	add	r1, sp, #8
   2db54:	f001 ff2e 	bl	2f9b4 <bt_conn_lookup_state_le>
   2db58:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2db5a:	78eb      	ldrb	r3, [r5, #3]
   2db5c:	2b01      	cmp	r3, #1
   2db5e:	d10a      	bne.n	2db76 <bt_hci_le_enh_conn_complete+0x112>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2db60:	f000 fe3a 	bl	2e7d8 <bt_le_adv_lookup_legacy>
   2db64:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2db68:	4681      	mov	r9, r0
   2db6a:	3010      	adds	r0, #16
   2db6c:	f01e f823 	bl	4bbb6 <atomic_and>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   2db70:	4648      	mov	r0, r9
   2db72:	f01e fdd4 	bl	4c71e <bt_le_lim_adv_cancel_timeout>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2db76:	78eb      	ldrb	r3, [r5, #3]
   2db78:	b923      	cbnz	r3, 2db84 <bt_hci_le_enh_conn_complete+0x120>
   2db7a:	4843      	ldr	r0, [pc, #268]	; (2dc88 <bt_hci_le_enh_conn_complete+0x224>)
   2db7c:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2db80:	f01e f819 	bl	4bbb6 <atomic_and>
	if (!conn) {
   2db84:	b9fc      	cbnz	r4, 2dbc6 <bt_hci_le_enh_conn_complete+0x162>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   2db86:	211f      	movs	r1, #31
   2db88:	4640      	mov	r0, r8
   2db8a:	f01e f9d3 	bl	4bf34 <bt_hci_disconnect>
		return;
   2db8e:	e7c1      	b.n	2db14 <bt_hci_le_enh_conn_complete+0xb0>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   2db90:	78eb      	ldrb	r3, [r5, #3]
   2db92:	2b01      	cmp	r3, #1
   2db94:	bf04      	itt	eq
   2db96:	4b3d      	ldreq	r3, [pc, #244]	; (2dc8c <bt_hci_le_enh_conn_complete+0x228>)
   2db98:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   2db9c:	4649      	mov	r1, r9
   2db9e:	4620      	mov	r0, r4
   2dba0:	f01e fc2c 	bl	4c3fc <bt_lookup_id_addr>
   2dba4:	4601      	mov	r1, r0
   2dba6:	a802      	add	r0, sp, #8
   2dba8:	f01d fff3 	bl	4bb92 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   2dbac:	4649      	mov	r1, r9
   2dbae:	4668      	mov	r0, sp
   2dbb0:	f01d ffef 	bl	4bb92 <bt_addr_le_copy>
   2dbb4:	e7ca      	b.n	2db4c <bt_hci_le_enh_conn_complete+0xe8>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2dbb6:	2801      	cmp	r0, #1
   2dbb8:	d103      	bne.n	2dbc2 <bt_hci_le_enh_conn_complete+0x15e>
   2dbba:	a802      	add	r0, sp, #8
   2dbbc:	f7ff fc54 	bl	2d468 <find_pending_connect.part.0>
   2dbc0:	e7ca      	b.n	2db58 <bt_hci_le_enh_conn_complete+0xf4>
	return NULL;
   2dbc2:	2400      	movs	r4, #0
   2dbc4:	e7c9      	b.n	2db5a <bt_hci_le_enh_conn_complete+0xf6>
	conn->handle = handle;
   2dbc6:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   2dbc8:	a902      	add	r1, sp, #8
	conn->handle = handle;
   2dbca:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   2dbce:	f01d ffe0 	bl	4bb92 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   2dbd2:	7e2a      	ldrb	r2, [r5, #24]
   2dbd4:	7deb      	ldrb	r3, [r5, #23]
   2dbd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2dbda:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   2dbde:	7eaa      	ldrb	r2, [r5, #26]
   2dbe0:	7e6b      	ldrb	r3, [r5, #25]
   2dbe2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2dbe6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   2dbea:	7f2a      	ldrb	r2, [r5, #28]
   2dbec:	7eeb      	ldrb	r3, [r5, #27]
   2dbee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2dbf2:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   2dbf6:	78eb      	ldrb	r3, [r5, #3]
   2dbf8:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   2dbfa:	2200      	movs	r2, #0
   2dbfc:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2dbfe:	2b01      	cmp	r3, #1
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   2dc00:	f240 1201 	movw	r2, #257	; 0x101
   2dc04:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2dc08:	d115      	bne.n	2dc36 <bt_hci_le_enh_conn_complete+0x1d2>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   2dc0a:	4669      	mov	r1, sp
   2dc0c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2dc10:	f01d ffbf 	bl	4bb92 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2dc14:	f000 fde0 	bl	2e7d8 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   2dc18:	7a21      	ldrb	r1, [r4, #8]
   2dc1a:	4d1c      	ldr	r5, [pc, #112]	; (2dc8c <bt_hci_le_enh_conn_complete+0x228>)
   2dc1c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   2dc20:	4429      	add	r1, r5
   2dc22:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2dc26:	f01d ffb4 	bl	4bb92 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   2dc2a:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   2dc2e:	065b      	lsls	r3, r3, #25
   2dc30:	d501      	bpl.n	2dc36 <bt_hci_le_enh_conn_complete+0x1d2>
			bt_le_adv_resume();
   2dc32:	f000 ff8f 	bl	2eb54 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2dc36:	78e3      	ldrb	r3, [r4, #3]
   2dc38:	b96b      	cbnz	r3, 2dc56 <bt_hci_le_enh_conn_complete+0x1f2>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   2dc3a:	4669      	mov	r1, sp
   2dc3c:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2dc40:	f01d ffa7 	bl	4bb92 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   2dc44:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   2dc46:	4b11      	ldr	r3, [pc, #68]	; (2dc8c <bt_hci_le_enh_conn_complete+0x228>)
					&bt_dev.id_addr[conn->id]);
   2dc48:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   2dc4c:	4419      	add	r1, r3
   2dc4e:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2dc52:	f01d ff9e 	bl	4bb92 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   2dc56:	2107      	movs	r1, #7
   2dc58:	4620      	mov	r0, r4
   2dc5a:	f001 fc85 	bl	2f568 <bt_conn_set_state>
	if (is_disconnected) {
   2dc5e:	b11e      	cbz	r6, 2dc68 <bt_hci_le_enh_conn_complete+0x204>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2dc60:	2101      	movs	r1, #1
   2dc62:	4620      	mov	r0, r4
   2dc64:	f001 fc80 	bl	2f568 <bt_conn_set_state>
	bt_conn_connected(conn);
   2dc68:	4620      	mov	r0, r4
   2dc6a:	f01e fe82 	bl	4c972 <bt_conn_connected>
	conn_auto_initiate(conn);
   2dc6e:	4620      	mov	r0, r4
   2dc70:	f7ff fe94 	bl	2d99c <conn_auto_initiate>
	bt_conn_unref(conn);
   2dc74:	4620      	mov	r0, r4
   2dc76:	f01e fe41 	bl	4c8fc <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2dc7a:	78e3      	ldrb	r3, [r4, #3]
   2dc7c:	2b00      	cmp	r3, #0
   2dc7e:	f47f af49 	bne.w	2db14 <bt_hci_le_enh_conn_complete+0xb0>
   2dc82:	e744      	b.n	2db0e <bt_hci_le_enh_conn_complete+0xaa>
   2dc84:	20006bd0 	.word	0x20006bd0
   2dc88:	200000cc 	.word	0x200000cc
   2dc8c:	20000000 	.word	0x20000000

0002dc90 <bt_unpair>:
{
   2dc90:	b530      	push	{r4, r5, lr}
   2dc92:	b085      	sub	sp, #20
   2dc94:	460d      	mov	r5, r1
   2dc96:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   2dc9a:	b9d0      	cbnz	r0, 2dcd2 <bt_unpair+0x42>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2dc9c:	b949      	cbnz	r1, 2dcb2 <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
   2dc9e:	490e      	ldr	r1, [pc, #56]	; (2dcd8 <bt_unpair+0x48>)
   2dca0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2dca4:	f10d 0207 	add.w	r2, sp, #7
   2dca8:	f005 fcca 	bl	33640 <bt_foreach_bond>
		return 0;
   2dcac:	2000      	movs	r0, #0
}
   2dcae:	b005      	add	sp, #20
   2dcb0:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2dcb2:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
   2dcb4:	2207      	movs	r2, #7
   2dcb6:	f8cd 000b 	str.w	r0, [sp, #11]
   2dcba:	a902      	add	r1, sp, #8
   2dcbc:	4628      	mov	r0, r5
   2dcbe:	f01d fdd4 	bl	4b86a <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2dcc2:	2800      	cmp	r0, #0
   2dcc4:	d0eb      	beq.n	2dc9e <bt_unpair+0xe>
	unpair(id, addr);
   2dcc6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2dcca:	4629      	mov	r1, r5
   2dccc:	f7ff fb60 	bl	2d390 <unpair>
	return 0;
   2dcd0:	e7ec      	b.n	2dcac <bt_unpair+0x1c>
		return -EINVAL;
   2dcd2:	f06f 0015 	mvn.w	r0, #21
   2dcd6:	e7ea      	b.n	2dcae <bt_unpair+0x1e>
   2dcd8:	0004bbd5 	.word	0x0004bbd5

0002dcdc <bt_security_err_get>:
	switch (hci_err) {
   2dcdc:	2829      	cmp	r0, #41	; 0x29
   2dcde:	bf9a      	itte	ls
   2dce0:	4b01      	ldrls	r3, [pc, #4]	; (2dce8 <bt_security_err_get+0xc>)
   2dce2:	5c18      	ldrbls	r0, [r3, r0]
{
   2dce4:	2009      	movhi	r0, #9
}
   2dce6:	4770      	bx	lr
   2dce8:	00053bc9 	.word	0x00053bc9

0002dcec <hci_event_prio>:
{
   2dcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dcf0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   2dcf2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   2dcf6:	4630      	mov	r0, r6
   2dcf8:	f021 fddf 	bl	4f8ba <net_buf_simple_headroom>
	state->len = buf->len;
   2dcfc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2dd00:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   2dd04:	4605      	mov	r5, r0
   2dd06:	d80c      	bhi.n	2dd22 <hci_event_prio+0x36>
   2dd08:	4a1c      	ldr	r2, [pc, #112]	; (2dd7c <hci_event_prio+0x90>)
   2dd0a:	491d      	ldr	r1, [pc, #116]	; (2dd80 <hci_event_prio+0x94>)
   2dd0c:	481d      	ldr	r0, [pc, #116]	; (2dd84 <hci_event_prio+0x98>)
   2dd0e:	f640 532f 	movw	r3, #3375	; 0xd2f
   2dd12:	f01b fcaf 	bl	49674 <printk>
   2dd16:	4040      	eors	r0, r0
   2dd18:	f380 8811 	msr	BASEPRI, r0
   2dd1c:	f04f 0003 	mov.w	r0, #3
   2dd20:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2dd22:	4630      	mov	r0, r6
   2dd24:	2102      	movs	r1, #2
   2dd26:	f021 fdb0 	bl	4f88a <net_buf_simple_pull_mem>
   2dd2a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2dd2c:	7800      	ldrb	r0, [r0, #0]
   2dd2e:	f01d fef1 	bl	4bb14 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2dd32:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2dd34:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2dd36:	d40c      	bmi.n	2dd52 <hci_event_prio+0x66>
   2dd38:	4a10      	ldr	r2, [pc, #64]	; (2dd7c <hci_event_prio+0x90>)
   2dd3a:	4913      	ldr	r1, [pc, #76]	; (2dd88 <hci_event_prio+0x9c>)
   2dd3c:	4811      	ldr	r0, [pc, #68]	; (2dd84 <hci_event_prio+0x98>)
   2dd3e:	f640 5333 	movw	r3, #3379	; 0xd33
   2dd42:	f01b fc97 	bl	49674 <printk>
   2dd46:	4040      	eors	r0, r0
   2dd48:	f380 8811 	msr	BASEPRI, r0
   2dd4c:	f04f 0003 	mov.w	r0, #3
   2dd50:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   2dd52:	2305      	movs	r3, #5
   2dd54:	4a0d      	ldr	r2, [pc, #52]	; (2dd8c <hci_event_prio+0xa0>)
   2dd56:	7838      	ldrb	r0, [r7, #0]
   2dd58:	4621      	mov	r1, r4
   2dd5a:	f01d feed 	bl	4bb38 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   2dd5e:	07b3      	lsls	r3, r6, #30
   2dd60:	d507      	bpl.n	2dd72 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   2dd62:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2dd64:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2dd68:	fa13 f585 	uxtah	r5, r3, r5
   2dd6c:	60a5      	str	r5, [r4, #8]
}
   2dd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2dd72:	4620      	mov	r0, r4
}
   2dd74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   2dd78:	f015 bbae 	b.w	434d8 <net_buf_unref>
   2dd7c:	00053abf 	.word	0x00053abf
   2dd80:	00053b3d 	.word	0x00053b3d
   2dd84:	00053afc 	.word	0x00053afc
   2dd88:	00053b56 	.word	0x00053b56
   2dd8c:	000520f8 	.word	0x000520f8

0002dd90 <bt_recv>:
{
   2dd90:	b570      	push	{r4, r5, r6, lr}
	if (bt_recv_thread_id == NULL) {
   2dd92:	4d3b      	ldr	r5, [pc, #236]	; (2de80 <bt_recv+0xf0>)
   2dd94:	682b      	ldr	r3, [r5, #0]
{
   2dd96:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
   2dd98:	b913      	cbnz	r3, 2dda0 <bt_recv+0x10>
	return z_impl_z_current_get();
   2dd9a:	f01a fc2b 	bl	485f4 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
   2dd9e:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2dda0:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
   2dda2:	2b01      	cmp	r3, #1
   2dda4:	d036      	beq.n	2de14 <bt_recv+0x84>
   2dda6:	2b03      	cmp	r3, #3
   2dda8:	d163      	bne.n	2de72 <bt_recv+0xe2>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2ddaa:	89a3      	ldrh	r3, [r4, #12]
   2ddac:	2b03      	cmp	r3, #3
   2ddae:	d80c      	bhi.n	2ddca <bt_recv+0x3a>
   2ddb0:	4a34      	ldr	r2, [pc, #208]	; (2de84 <bt_recv+0xf4>)
   2ddb2:	4935      	ldr	r1, [pc, #212]	; (2de88 <bt_recv+0xf8>)
   2ddb4:	4835      	ldr	r0, [pc, #212]	; (2de8c <bt_recv+0xfc>)
   2ddb6:	f240 13b5 	movw	r3, #437	; 0x1b5
   2ddba:	f01b fc5b 	bl	49674 <printk>
   2ddbe:	4040      	eors	r0, r0
   2ddc0:	f380 8811 	msr	BASEPRI, r0
   2ddc4:	f04f 0003 	mov.w	r0, #3
   2ddc8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2ddca:	2104      	movs	r1, #4
   2ddcc:	f104 0008 	add.w	r0, r4, #8
   2ddd0:	f021 fd5b 	bl	4f88a <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2ddd4:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   2ddd6:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   2ddd8:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2ddda:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   2dddc:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   2ddde:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   2dde2:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   2dde4:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   2dde6:	d003      	beq.n	2ddf0 <bt_recv+0x60>
	net_buf_unref(buf);
   2dde8:	4620      	mov	r0, r4
   2ddea:	f015 fb75 	bl	434d8 <net_buf_unref>
   2ddee:	e00f      	b.n	2de10 <bt_recv+0x80>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   2ddf0:	f001 fbb2 	bl	2f558 <bt_conn_lookup_handle>
	if (!conn) {
   2ddf4:	4605      	mov	r5, r0
   2ddf6:	2800      	cmp	r0, #0
   2ddf8:	d0f6      	beq.n	2dde8 <bt_recv+0x58>
	acl(buf)->index = bt_conn_index(conn);
   2ddfa:	f001 fc83 	bl	2f704 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   2ddfe:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   2de00:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   2de02:	4621      	mov	r1, r4
   2de04:	4628      	mov	r0, r5
   2de06:	f01e fd11 	bl	4c82c <bt_conn_recv>
	bt_conn_unref(conn);
   2de0a:	4628      	mov	r0, r5
   2de0c:	f01e fd76 	bl	4c8fc <bt_conn_unref>
		return 0;
   2de10:	2000      	movs	r0, #0
}
   2de12:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2de14:	89a3      	ldrh	r3, [r4, #12]
   2de16:	2b01      	cmp	r3, #1
   2de18:	d80c      	bhi.n	2de34 <bt_recv+0xa4>
   2de1a:	4a1a      	ldr	r2, [pc, #104]	; (2de84 <bt_recv+0xf4>)
   2de1c:	491a      	ldr	r1, [pc, #104]	; (2de88 <bt_recv+0xf8>)
   2de1e:	481b      	ldr	r0, [pc, #108]	; (2de8c <bt_recv+0xfc>)
   2de20:	f640 1317 	movw	r3, #2327	; 0x917
   2de24:	f01b fc26 	bl	49674 <printk>
   2de28:	4040      	eors	r0, r0
   2de2a:	f380 8811 	msr	BASEPRI, r0
   2de2e:	f04f 0003 	mov.w	r0, #3
   2de32:	df02      	svc	2
   2de34:	2102      	movs	r1, #2
   2de36:	f104 0008 	add.w	r0, r4, #8
   2de3a:	f021 fd26 	bl	4f88a <net_buf_simple_pull_mem>
   2de3e:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   2de40:	7800      	ldrb	r0, [r0, #0]
   2de42:	f01d fe67 	bl	4bb14 <bt_hci_evt_get_flags>
   2de46:	0783      	lsls	r3, r0, #30
   2de48:	d40c      	bmi.n	2de64 <bt_recv+0xd4>
   2de4a:	4a0e      	ldr	r2, [pc, #56]	; (2de84 <bt_recv+0xf4>)
   2de4c:	4910      	ldr	r1, [pc, #64]	; (2de90 <bt_recv+0x100>)
   2de4e:	480f      	ldr	r0, [pc, #60]	; (2de8c <bt_recv+0xfc>)
   2de50:	f640 131b 	movw	r3, #2331	; 0x91b
   2de54:	f01b fc0e 	bl	49674 <printk>
   2de58:	4040      	eors	r0, r0
   2de5a:	f380 8811 	msr	BASEPRI, r0
   2de5e:	f04f 0003 	mov.w	r0, #3
   2de62:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   2de64:	4a0b      	ldr	r2, [pc, #44]	; (2de94 <bt_recv+0x104>)
   2de66:	7828      	ldrb	r0, [r5, #0]
   2de68:	2306      	movs	r3, #6
   2de6a:	4621      	mov	r1, r4
   2de6c:	f01d fe64 	bl	4bb38 <handle_event>
   2de70:	e7ba      	b.n	2dde8 <bt_recv+0x58>
		net_buf_unref(buf);
   2de72:	4620      	mov	r0, r4
   2de74:	f015 fb30 	bl	434d8 <net_buf_unref>
		return -EINVAL;
   2de78:	f06f 0015 	mvn.w	r0, #21
   2de7c:	e7c9      	b.n	2de12 <bt_recv+0x82>
   2de7e:	bf00      	nop
   2de80:	20003f5c 	.word	0x20003f5c
   2de84:	00053abf 	.word	0x00053abf
   2de88:	00053b3d 	.word	0x00053b3d
   2de8c:	00053afc 	.word	0x00053afc
   2de90:	00053b6f 	.word	0x00053b6f
   2de94:	000520c8 	.word	0x000520c8

0002de98 <bt_recv_prio>:
{
   2de98:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2de9a:	7d03      	ldrb	r3, [r0, #20]
   2de9c:	2b01      	cmp	r3, #1
{
   2de9e:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2dea0:	d00c      	beq.n	2debc <bt_recv_prio+0x24>
   2dea2:	4a09      	ldr	r2, [pc, #36]	; (2dec8 <bt_recv_prio+0x30>)
   2dea4:	4909      	ldr	r1, [pc, #36]	; (2decc <bt_recv_prio+0x34>)
   2dea6:	480a      	ldr	r0, [pc, #40]	; (2ded0 <bt_recv_prio+0x38>)
   2dea8:	f640 537c 	movw	r3, #3452	; 0xd7c
   2deac:	f01b fbe2 	bl	49674 <printk>
   2deb0:	4040      	eors	r0, r0
   2deb2:	f380 8811 	msr	BASEPRI, r0
   2deb6:	f04f 0003 	mov.w	r0, #3
   2deba:	df02      	svc	2
	hci_event_prio(buf);
   2debc:	4620      	mov	r0, r4
   2debe:	f7ff ff15 	bl	2dcec <hci_event_prio>
}
   2dec2:	2000      	movs	r0, #0
   2dec4:	bd10      	pop	{r4, pc}
   2dec6:	bf00      	nop
   2dec8:	00053abf 	.word	0x00053abf
   2decc:	00053b9d 	.word	0x00053b9d
   2ded0:	00053afc 	.word	0x00053afc

0002ded4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   2ded4:	4a08      	ldr	r2, [pc, #32]	; (2def8 <bt_hci_driver_register+0x24>)
{
   2ded6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   2ded8:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   2dedc:	b930      	cbnz	r0, 2deec <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   2dede:	68d9      	ldr	r1, [r3, #12]
   2dee0:	b139      	cbz	r1, 2def2 <bt_hci_driver_register+0x1e>
   2dee2:	6919      	ldr	r1, [r3, #16]
   2dee4:	b129      	cbz	r1, 2def2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   2dee6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   2deea:	4770      	bx	lr
		return -EALREADY;
   2deec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2def0:	4770      	bx	lr
		return -EINVAL;
   2def2:	f06f 0015 	mvn.w	r0, #21
}
   2def6:	4770      	bx	lr
   2def8:	20000000 	.word	0x20000000

0002defc <bt_finalize_init>:
{
   2defc:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2defe:	4804      	ldr	r0, [pc, #16]	; (2df10 <bt_finalize_init+0x14>)
   2df00:	2102      	movs	r1, #2
   2df02:	f01d fe49 	bl	4bb98 <atomic_or>
}
   2df06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   2df0a:	2000      	movs	r0, #0
   2df0c:	f000 bef4 	b.w	2ecf8 <bt_le_scan_update>
   2df10:	200000cc 	.word	0x200000cc

0002df14 <init_work>:

static void init_work(struct k_work *work)
{
   2df14:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   2df16:	f7f8 f90f 	bl	26138 <bt_init>
	if (ready_cb) {
   2df1a:	4b03      	ldr	r3, [pc, #12]	; (2df28 <init_work+0x14>)
   2df1c:	681b      	ldr	r3, [r3, #0]
   2df1e:	b113      	cbz	r3, 2df26 <init_work+0x12>
		ready_cb(err);
	}
}
   2df20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   2df24:	4718      	bx	r3
}
   2df26:	bd10      	pop	{r4, pc}
   2df28:	20003f78 	.word	0x20003f78

0002df2c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   2df2c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   2df2e:	4d22      	ldr	r5, [pc, #136]	; (2dfb8 <bt_enable+0x8c>)
   2df30:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   2df34:	b088      	sub	sp, #32
   2df36:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   2df38:	2b00      	cmp	r3, #0
   2df3a:	d037      	beq.n	2dfac <bt_enable+0x80>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2df3c:	2101      	movs	r1, #1
   2df3e:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   2df42:	f01d fe29 	bl	4bb98 <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2df46:	07c3      	lsls	r3, r0, #31
   2df48:	d433      	bmi.n	2dfb2 <bt_enable+0x86>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   2df4a:	f01d fd8a 	bl	4ba62 <bt_settings_init>
		if (err) {
   2df4e:	4604      	mov	r4, r0
   2df50:	bb48      	cbnz	r0, 2dfa6 <bt_enable+0x7a>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   2df52:	4b1a      	ldr	r3, [pc, #104]	; (2dfbc <bt_enable+0x90>)
   2df54:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2df56:	2200      	movs	r2, #0
   2df58:	2300      	movs	r3, #0
   2df5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2df5e:	f06f 0308 	mvn.w	r3, #8
   2df62:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2df66:	e9cd 0000 	strd	r0, r0, [sp]
   2df6a:	9004      	str	r0, [sp, #16]
   2df6c:	4b14      	ldr	r3, [pc, #80]	; (2dfc0 <bt_enable+0x94>)
   2df6e:	4915      	ldr	r1, [pc, #84]	; (2dfc4 <bt_enable+0x98>)
   2df70:	4815      	ldr	r0, [pc, #84]	; (2dfc8 <bt_enable+0x9c>)
   2df72:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2df76:	f019 fbff 	bl	47778 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2df7a:	4914      	ldr	r1, [pc, #80]	; (2dfcc <bt_enable+0xa0>)
   2df7c:	4812      	ldr	r0, [pc, #72]	; (2dfc8 <bt_enable+0x9c>)
   2df7e:	f022 fac8 	bl	50512 <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
   2df82:	f7ff f853 	bl	2d02c <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
   2df86:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2df8a:	68db      	ldr	r3, [r3, #12]
   2df8c:	4798      	blx	r3
	if (err) {
   2df8e:	4604      	mov	r4, r0
   2df90:	b948      	cbnz	r0, 2dfa6 <bt_enable+0x7a>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   2df92:	b926      	cbnz	r6, 2df9e <bt_enable+0x72>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   2df94:	b008      	add	sp, #32
   2df96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   2df9a:	f7f8 b8cd 	b.w	26138 <bt_init>
	k_work_submit(&bt_dev.init);
   2df9e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   2dfa2:	f019 ffa1 	bl	47ee8 <k_work_submit>
}
   2dfa6:	4620      	mov	r0, r4
   2dfa8:	b008      	add	sp, #32
   2dfaa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2dfac:	f06f 0412 	mvn.w	r4, #18
   2dfb0:	e7f9      	b.n	2dfa6 <bt_enable+0x7a>
		return -EALREADY;
   2dfb2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2dfb6:	e7f6      	b.n	2dfa6 <bt_enable+0x7a>
   2dfb8:	20000000 	.word	0x20000000
   2dfbc:	20003f78 	.word	0x20003f78
   2dfc0:	0002d5bd 	.word	0x0002d5bd
   2dfc4:	20007668 	.word	0x20007668
   2dfc8:	20001498 	.word	0x20001498
   2dfcc:	00053bc0 	.word	0x00053bc0

0002dfd0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   2dfd0:	4800      	ldr	r0, [pc, #0]	; (2dfd4 <bt_get_name+0x4>)
   2dfd2:	4770      	bx	lr
   2dfd4:	00053767 	.word	0x00053767

0002dfd8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   2dfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   2dfda:	4f0b      	ldr	r7, [pc, #44]	; (2e008 <id_find+0x30>)
{
   2dfdc:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   2dfde:	2500      	movs	r5, #0
   2dfe0:	79fb      	ldrb	r3, [r7, #7]
   2dfe2:	b2ec      	uxtb	r4, r5
   2dfe4:	42a3      	cmp	r3, r4
   2dfe6:	d802      	bhi.n	2dfee <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   2dfe8:	f06f 0401 	mvn.w	r4, #1
   2dfec:	e009      	b.n	2e002 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   2dfee:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   2dff2:	2207      	movs	r2, #7
   2dff4:	4439      	add	r1, r7
   2dff6:	4630      	mov	r0, r6
   2dff8:	f01d fc37 	bl	4b86a <memcmp>
   2dffc:	3501      	adds	r5, #1
   2dffe:	2800      	cmp	r0, #0
   2e000:	d1ee      	bne.n	2dfe0 <id_find+0x8>
}
   2e002:	4620      	mov	r0, r4
   2e004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e006:	bf00      	nop
   2e008:	20000000 	.word	0x20000000

0002e00c <set_random_address>:
{
   2e00c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   2e00e:	4914      	ldr	r1, [pc, #80]	; (2e060 <set_random_address+0x54>)
   2e010:	2206      	movs	r2, #6
   2e012:	4605      	mov	r5, r0
   2e014:	f01d fc29 	bl	4b86a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   2e018:	4604      	mov	r4, r0
   2e01a:	b1e0      	cbz	r0, 2e056 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   2e01c:	2106      	movs	r1, #6
   2e01e:	f242 0005 	movw	r0, #8197	; 0x2005
   2e022:	f7ff fb77 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   2e026:	4604      	mov	r4, r0
   2e028:	b1b8      	cbz	r0, 2e05a <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2e02a:	2206      	movs	r2, #6
   2e02c:	4629      	mov	r1, r5
   2e02e:	3008      	adds	r0, #8
   2e030:	f021 fc00 	bl	4f834 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   2e034:	4621      	mov	r1, r4
   2e036:	2200      	movs	r2, #0
   2e038:	f242 0005 	movw	r0, #8197	; 0x2005
   2e03c:	f7ff fbc6 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   2e040:	4604      	mov	r4, r0
   2e042:	b940      	cbnz	r0, 2e056 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   2e044:	2206      	movs	r2, #6
   2e046:	4806      	ldr	r0, [pc, #24]	; (2e060 <set_random_address+0x54>)
   2e048:	4629      	mov	r1, r5
   2e04a:	f01d fc1e 	bl	4b88a <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   2e04e:	4b05      	ldr	r3, [pc, #20]	; (2e064 <set_random_address+0x58>)
   2e050:	2201      	movs	r2, #1
   2e052:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   2e056:	4620      	mov	r0, r4
   2e058:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2e05a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2e05e:	e7fa      	b.n	2e056 <set_random_address+0x4a>
   2e060:	20000061 	.word	0x20000061
   2e064:	20000000 	.word	0x20000000

0002e068 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   2e068:	b530      	push	{r4, r5, lr}
   2e06a:	4604      	mov	r4, r0
   2e06c:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2e06e:	460d      	mov	r5, r1
   2e070:	b1e1      	cbz	r1, 2e0ac <id_create.constprop.0+0x44>
   2e072:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2e074:	2207      	movs	r2, #7
   2e076:	a902      	add	r1, sp, #8
   2e078:	4628      	mov	r0, r5
   2e07a:	9302      	str	r3, [sp, #8]
   2e07c:	f8cd 300b 	str.w	r3, [sp, #11]
   2e080:	f01d fbf3 	bl	4b86a <memcmp>
   2e084:	b190      	cbz	r0, 2e0ac <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   2e086:	4816      	ldr	r0, [pc, #88]	; (2e0e0 <id_create.constprop.0+0x78>)
   2e088:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2e08c:	4629      	mov	r1, r5
   2e08e:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2e090:	f01e f923 	bl	4c2da <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e094:	4813      	ldr	r0, [pc, #76]	; (2e0e4 <id_create.constprop.0+0x7c>)
   2e096:	f01e f923 	bl	4c2e0 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2e09a:	0782      	lsls	r2, r0, #30
   2e09c:	f3c0 0340 	ubfx	r3, r0, #1, #1
   2e0a0:	d51b      	bpl.n	2e0da <id_create.constprop.0+0x72>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
   2e0a2:	f7ff f857 	bl	2d154 <bt_settings_save_id>
	}

	return 0;
   2e0a6:	2000      	movs	r0, #0
}
   2e0a8:	b005      	add	sp, #20
   2e0aa:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   2e0ac:	4668      	mov	r0, sp
   2e0ae:	f01d fd23 	bl	4baf8 <bt_addr_le_create_static>
			if (err) {
   2e0b2:	2800      	cmp	r0, #0
   2e0b4:	d1f8      	bne.n	2e0a8 <id_create.constprop.0+0x40>
		} while (id_find(&new_addr) >= 0);
   2e0b6:	4668      	mov	r0, sp
   2e0b8:	f7ff ff8e 	bl	2dfd8 <id_find>
   2e0bc:	2800      	cmp	r0, #0
   2e0be:	daf5      	bge.n	2e0ac <id_create.constprop.0+0x44>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   2e0c0:	4b07      	ldr	r3, [pc, #28]	; (2e0e0 <id_create.constprop.0+0x78>)
   2e0c2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2e0c6:	441c      	add	r4, r3
   2e0c8:	4669      	mov	r1, sp
   2e0ca:	4620      	mov	r0, r4
   2e0cc:	f01e f905 	bl	4c2da <bt_addr_le_copy>
		if (addr) {
   2e0d0:	2d00      	cmp	r5, #0
   2e0d2:	d0df      	beq.n	2e094 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2e0d4:	4621      	mov	r1, r4
   2e0d6:	4628      	mov	r0, r5
   2e0d8:	e7da      	b.n	2e090 <id_create.constprop.0+0x28>
	return 0;
   2e0da:	4618      	mov	r0, r3
   2e0dc:	e7e4      	b.n	2e0a8 <id_create.constprop.0+0x40>
   2e0de:	bf00      	nop
   2e0e0:	20000000 	.word	0x20000000
   2e0e4:	200000cc 	.word	0x200000cc

0002e0e8 <bt_id_adv_random_addr_check>:
{
   2e0e8:	b508      	push	{r3, lr}
   2e0ea:	4805      	ldr	r0, [pc, #20]	; (2e100 <bt_id_adv_random_addr_check+0x18>)
   2e0ec:	f01e f8f8 	bl	4c2e0 <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
   2e0f0:	0503      	lsls	r3, r0, #20
   2e0f2:	d402      	bmi.n	2e0fa <bt_id_adv_random_addr_check+0x12>
   2e0f4:	4802      	ldr	r0, [pc, #8]	; (2e100 <bt_id_adv_random_addr_check+0x18>)
   2e0f6:	f01e f8f3 	bl	4c2e0 <atomic_get>
}
   2e0fa:	2001      	movs	r0, #1
   2e0fc:	bd08      	pop	{r3, pc}
   2e0fe:	bf00      	nop
   2e100:	200000cc 	.word	0x200000cc

0002e104 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e104:	4b0a      	ldr	r3, [pc, #40]	; (2e130 <bt_id_pending_keys_update+0x2c>)
   2e106:	f3bf 8f5b 	dmb	ish
   2e10a:	e853 2f00 	ldrex	r2, [r3]
   2e10e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   2e112:	e843 1000 	strex	r0, r1, [r3]
   2e116:	2800      	cmp	r0, #0
   2e118:	d1f7      	bne.n	2e10a <bt_id_pending_keys_update+0x6>
   2e11a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   2e11e:	0493      	lsls	r3, r2, #18
   2e120:	d504      	bpl.n	2e12c <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   2e122:	4904      	ldr	r1, [pc, #16]	; (2e134 <bt_id_pending_keys_update+0x30>)
   2e124:	2200      	movs	r2, #0
   2e126:	2002      	movs	r0, #2
   2e128:	f005 baaa 	b.w	33680 <bt_keys_foreach>
}
   2e12c:	4770      	bx	lr
   2e12e:	bf00      	nop
   2e130:	200000cc 	.word	0x200000cc
   2e134:	0004c467 	.word	0x0004c467

0002e138 <bt_id_add>:
{
   2e138:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2e13c:	4c4e      	ldr	r4, [pc, #312]	; (2e278 <bt_id_add+0x140>)
   2e13e:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   2e142:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
{
   2e146:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2e148:	b10a      	cbz	r2, 2e14e <bt_id_add+0x16>
   2e14a:	429a      	cmp	r2, r3
   2e14c:	d209      	bcs.n	2e162 <bt_id_add+0x2a>
		bt_dev.le.rl_entries++;
   2e14e:	3301      	adds	r3, #1
   2e150:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2e154:	7a2b      	ldrb	r3, [r5, #8]
   2e156:	f043 0304 	orr.w	r3, r3, #4
   2e15a:	722b      	strb	r3, [r5, #8]
}
   2e15c:	b002      	add	sp, #8
   2e15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2e162:	2100      	movs	r1, #0
   2e164:	2206      	movs	r2, #6
   2e166:	4608      	mov	r0, r1
   2e168:	f001 fc24 	bl	2f9b4 <bt_conn_lookup_state_le>
	if (conn) {
   2e16c:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
   2e170:	4606      	mov	r6, r0
   2e172:	b1a0      	cbz	r0, 2e19e <bt_id_add+0x66>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e174:	f3bf 8f5b 	dmb	ish
   2e178:	e853 1f00 	ldrex	r1, [r3]
   2e17c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   2e180:	e843 1200 	strex	r2, r1, [r3]
   2e184:	2a00      	cmp	r2, #0
   2e186:	d1f7      	bne.n	2e178 <bt_id_add+0x40>
   2e188:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2e18c:	7a2b      	ldrb	r3, [r5, #8]
   2e18e:	f043 0301 	orr.w	r3, r3, #1
   2e192:	722b      	strb	r3, [r5, #8]
}
   2e194:	b002      	add	sp, #8
   2e196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   2e19a:	f01e bbaf 	b.w	4c8fc <bt_conn_unref>
   2e19e:	4618      	mov	r0, r3
   2e1a0:	f01e f89e 	bl	4c2e0 <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2e1a4:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2e1a6:	f3c0 1740 	ubfx	r7, r0, #5, #1
   2e1aa:	4834      	ldr	r0, [pc, #208]	; (2e27c <bt_id_add+0x144>)
   2e1ac:	f000 fb0e 	bl	2e7cc <bt_le_ext_adv_foreach>
	if (scan_enabled) {
   2e1b0:	b117      	cbz	r7, 2e1b8 <bt_id_add+0x80>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2e1b2:	4630      	mov	r0, r6
   2e1b4:	f01e fac7 	bl	4c746 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
   2e1b8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2e1bc:	b9b3      	cbnz	r3, 2e1ec <bt_id_add+0xb4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   2e1be:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
   2e1c2:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   2e1c6:	429a      	cmp	r2, r3
   2e1c8:	d123      	bne.n	2e212 <bt_id_add+0xda>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   2e1ca:	2200      	movs	r2, #0
   2e1cc:	4611      	mov	r1, r2
   2e1ce:	f242 0029 	movw	r0, #8233	; 0x2029
   2e1d2:	f7ff fafb 	bl	2d7cc <bt_hci_cmd_send_sync>
		if (err) {
   2e1d6:	b970      	cbnz	r0, 2e1f6 <bt_id_add+0xbe>
		bt_dev.le.rl_entries++;
   2e1d8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2e1dc:	3301      	adds	r3, #1
   2e1de:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2e1e2:	7a2b      	ldrb	r3, [r5, #8]
   2e1e4:	f043 0304 	orr.w	r3, r3, #4
   2e1e8:	722b      	strb	r3, [r5, #8]
		goto done;
   2e1ea:	e004      	b.n	2e1f6 <bt_id_add+0xbe>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2e1ec:	2000      	movs	r0, #0
   2e1ee:	f01e f8c7 	bl	4c380 <addr_res_enable>
		if (err) {
   2e1f2:	2800      	cmp	r0, #0
   2e1f4:	d0e3      	beq.n	2e1be <bt_id_add+0x86>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2e1f6:	2001      	movs	r0, #1
   2e1f8:	f01e f8c2 	bl	4c380 <addr_res_enable>
	if (scan_enabled) {
   2e1fc:	b117      	cbz	r7, 2e204 <bt_id_add+0xcc>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2e1fe:	2001      	movs	r0, #1
   2e200:	f01e faa1 	bl	4c746 <bt_le_scan_set_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2e204:	481e      	ldr	r0, [pc, #120]	; (2e280 <bt_id_add+0x148>)
   2e206:	2100      	movs	r1, #0
}
   2e208:	b002      	add	sp, #8
   2e20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2e20e:	f000 badd 	b.w	2e7cc <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2e212:	462a      	mov	r2, r5
   2e214:	f105 0801 	add.w	r8, r5, #1
   2e218:	f812 0b2a 	ldrb.w	r0, [r2], #42
   2e21c:	4641      	mov	r1, r8
   2e21e:	f01e f87c 	bl	4c31a <hci_id_add>
	if (err) {
   2e222:	4606      	mov	r6, r0
   2e224:	2800      	cmp	r0, #0
   2e226:	d1e6      	bne.n	2e1f6 <bt_id_add+0xbe>
	bt_dev.le.rl_entries++;
   2e228:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2e22c:	3301      	adds	r3, #1
   2e22e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   2e232:	7a2b      	ldrb	r3, [r5, #8]
   2e234:	f043 0304 	orr.w	r3, r3, #4
   2e238:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   2e23a:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
   2e23e:	075b      	lsls	r3, r3, #29
   2e240:	d5d9      	bpl.n	2e1f6 <bt_id_add+0xbe>
	bt_addr_le_copy(&cp.id_addr, addr);
   2e242:	4641      	mov	r1, r8
   2e244:	4668      	mov	r0, sp
   2e246:	f01e f848 	bl	4c2da <bt_addr_le_copy>
	cp.mode = mode;
   2e24a:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2e24c:	2108      	movs	r1, #8
   2e24e:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   2e252:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2e256:	f7ff fa5d 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   2e25a:	4604      	mov	r4, r0
   2e25c:	2800      	cmp	r0, #0
   2e25e:	d0ca      	beq.n	2e1f6 <bt_id_add+0xbe>
   2e260:	2208      	movs	r2, #8
   2e262:	4669      	mov	r1, sp
   2e264:	4410      	add	r0, r2
   2e266:	f021 fae5 	bl	4f834 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   2e26a:	4632      	mov	r2, r6
   2e26c:	4621      	mov	r1, r4
   2e26e:	f242 004e 	movw	r0, #8270	; 0x204e
   2e272:	f7ff faab 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   2e276:	e7be      	b.n	2e1f6 <bt_id_add+0xbe>
   2e278:	20000000 	.word	0x20000000
   2e27c:	0004c3c5 	.word	0x0004c3c5
   2e280:	0004c2ed 	.word	0x0004c2ed

0002e284 <bt_id_del>:
{
   2e284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
   2e288:	4d45      	ldr	r5, [pc, #276]	; (2e3a0 <bt_id_del+0x11c>)
   2e28a:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2e28e:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
{
   2e292:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
   2e294:	b112      	cbz	r2, 2e29c <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2e296:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   2e298:	4293      	cmp	r3, r2
   2e29a:	dd08      	ble.n	2e2ae <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
   2e29c:	3b01      	subs	r3, #1
   2e29e:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e2a2:	7a23      	ldrb	r3, [r4, #8]
   2e2a4:	f023 0304 	bic.w	r3, r3, #4
   2e2a8:	7223      	strb	r3, [r4, #8]
}
   2e2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2e2ae:	2100      	movs	r1, #0
   2e2b0:	2206      	movs	r2, #6
   2e2b2:	4608      	mov	r0, r1
   2e2b4:	f001 fb7e 	bl	2f9b4 <bt_conn_lookup_state_le>
	if (conn) {
   2e2b8:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   2e2bc:	4606      	mov	r6, r0
   2e2be:	b198      	cbz	r0, 2e2e8 <bt_id_del+0x64>
   2e2c0:	f3bf 8f5b 	dmb	ish
   2e2c4:	e853 1f00 	ldrex	r1, [r3]
   2e2c8:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   2e2cc:	e843 1200 	strex	r2, r1, [r3]
   2e2d0:	2a00      	cmp	r2, #0
   2e2d2:	d1f7      	bne.n	2e2c4 <bt_id_del+0x40>
   2e2d4:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2e2d8:	7a23      	ldrb	r3, [r4, #8]
   2e2da:	f043 0302 	orr.w	r3, r3, #2
   2e2de:	7223      	strb	r3, [r4, #8]
}
   2e2e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   2e2e4:	f01e bb0a 	b.w	4c8fc <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e2e8:	4618      	mov	r0, r3
   2e2ea:	f01d fff9 	bl	4c2e0 <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2e2ee:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2e2f0:	f3c0 1840 	ubfx	r8, r0, #5, #1
   2e2f4:	482b      	ldr	r0, [pc, #172]	; (2e3a4 <bt_id_del+0x120>)
   2e2f6:	f000 fa69 	bl	2e7cc <bt_le_ext_adv_foreach>
	if (scan_enabled) {
   2e2fa:	f1b8 0f00 	cmp.w	r8, #0
   2e2fe:	d002      	beq.n	2e306 <bt_id_del+0x82>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2e300:	4630      	mov	r0, r6
   2e302:	f01e fa20 	bl	4c746 <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2e306:	2000      	movs	r0, #0
   2e308:	f01e f83a 	bl	4c380 <addr_res_enable>
	if (err) {
   2e30c:	4607      	mov	r7, r0
   2e30e:	b988      	cbnz	r0, 2e334 <bt_id_del+0xb0>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2e310:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2e314:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   2e318:	429a      	cmp	r2, r3
   2e31a:	d21d      	bcs.n	2e358 <bt_id_del+0xd4>
		bt_dev.le.rl_entries--;
   2e31c:	3b01      	subs	r3, #1
   2e31e:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e322:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2e324:	4920      	ldr	r1, [pc, #128]	; (2e3a8 <bt_id_del+0x124>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e326:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2e32a:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e32c:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2e32e:	2002      	movs	r0, #2
   2e330:	f005 f9a6 	bl	33680 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   2e334:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2e338:	b113      	cbz	r3, 2e340 <bt_id_del+0xbc>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2e33a:	2001      	movs	r0, #1
   2e33c:	f01e f820 	bl	4c380 <addr_res_enable>
	if (scan_enabled) {
   2e340:	f1b8 0f00 	cmp.w	r8, #0
   2e344:	d002      	beq.n	2e34c <bt_id_del+0xc8>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2e346:	2001      	movs	r0, #1
   2e348:	f01e f9fd 	bl	4c746 <bt_le_scan_set_enable>
}
   2e34c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2e350:	4816      	ldr	r0, [pc, #88]	; (2e3ac <bt_id_del+0x128>)
   2e352:	2100      	movs	r1, #0
   2e354:	f000 ba3a 	b.w	2e7cc <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   2e358:	2107      	movs	r1, #7
   2e35a:	f242 0028 	movw	r0, #8232	; 0x2028
   2e35e:	f7ff f9d9 	bl	2d714 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   2e362:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   2e366:	4606      	mov	r6, r0
   2e368:	2800      	cmp	r0, #0
   2e36a:	d0e3      	beq.n	2e334 <bt_id_del+0xb0>
	return net_buf_simple_add(&buf->b, len);
   2e36c:	2107      	movs	r1, #7
   2e36e:	3008      	adds	r0, #8
   2e370:	f021 fa5a 	bl	4f828 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2e374:	4649      	mov	r1, r9
   2e376:	f01d ffb0 	bl	4c2da <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   2e37a:	463a      	mov	r2, r7
   2e37c:	4631      	mov	r1, r6
   2e37e:	f242 0028 	movw	r0, #8232	; 0x2028
   2e382:	f7ff fa23 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   2e386:	2800      	cmp	r0, #0
   2e388:	d1d4      	bne.n	2e334 <bt_id_del+0xb0>
	bt_dev.le.rl_entries--;
   2e38a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2e38e:	3b01      	subs	r3, #1
   2e390:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   2e394:	7a23      	ldrb	r3, [r4, #8]
   2e396:	f023 0304 	bic.w	r3, r3, #4
   2e39a:	7223      	strb	r3, [r4, #8]
   2e39c:	e7ca      	b.n	2e334 <bt_id_del+0xb0>
   2e39e:	bf00      	nop
   2e3a0:	20000000 	.word	0x20000000
   2e3a4:	0004c3c5 	.word	0x0004c3c5
   2e3a8:	0004c36b 	.word	0x0004c36b
   2e3ac:	0004c2ed 	.word	0x0004c2ed

0002e3b0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   2e3b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2e3b2:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2e3b4:	4605      	mov	r5, r0
   2e3b6:	b918      	cbnz	r0, 2e3c0 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   2e3b8:	b1ec      	cbz	r4, 2e3f6 <bt_id_create+0x46>
		return -EINVAL;
   2e3ba:	f06f 0015 	mvn.w	r0, #21
   2e3be:	e018      	b.n	2e3f2 <bt_id_create+0x42>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2e3c0:	2300      	movs	r3, #0
   2e3c2:	2207      	movs	r2, #7
   2e3c4:	4669      	mov	r1, sp
   2e3c6:	9300      	str	r3, [sp, #0]
   2e3c8:	f8cd 3003 	str.w	r3, [sp, #3]
   2e3cc:	f01d fa4d 	bl	4b86a <memcmp>
   2e3d0:	2800      	cmp	r0, #0
   2e3d2:	d0f1      	beq.n	2e3b8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   2e3d4:	782b      	ldrb	r3, [r5, #0]
   2e3d6:	2b01      	cmp	r3, #1
   2e3d8:	d1ef      	bne.n	2e3ba <bt_id_create+0xa>
   2e3da:	79ab      	ldrb	r3, [r5, #6]
   2e3dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2e3e0:	2bc0      	cmp	r3, #192	; 0xc0
   2e3e2:	d1ea      	bne.n	2e3ba <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   2e3e4:	4628      	mov	r0, r5
   2e3e6:	f7ff fdf7 	bl	2dfd8 <id_find>
   2e3ea:	2800      	cmp	r0, #0
   2e3ec:	dbe4      	blt.n	2e3b8 <bt_id_create+0x8>
			return -EALREADY;
   2e3ee:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   2e3f2:	b002      	add	sp, #8
   2e3f4:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   2e3f6:	4e12      	ldr	r6, [pc, #72]	; (2e440 <bt_id_create+0x90>)
   2e3f8:	79f3      	ldrb	r3, [r6, #7]
   2e3fa:	2b01      	cmp	r3, #1
   2e3fc:	d01c      	beq.n	2e438 <bt_id_create+0x88>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e3fe:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   2e402:	f01d ff6d 	bl	4c2e0 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2e406:	07c3      	lsls	r3, r0, #31
   2e408:	d40b      	bmi.n	2e422 <bt_id_create+0x72>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2e40a:	2d00      	cmp	r5, #0
   2e40c:	d0d5      	beq.n	2e3ba <bt_id_create+0xa>
   2e40e:	2207      	movs	r2, #7
   2e410:	4669      	mov	r1, sp
   2e412:	4628      	mov	r0, r5
   2e414:	9400      	str	r4, [sp, #0]
   2e416:	f8cd 4003 	str.w	r4, [sp, #3]
   2e41a:	f01d fa26 	bl	4b86a <memcmp>
   2e41e:	2800      	cmp	r0, #0
   2e420:	d0cb      	beq.n	2e3ba <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   2e422:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   2e424:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   2e426:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   2e428:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   2e42a:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   2e42c:	f7ff fe1c 	bl	2e068 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
   2e430:	2800      	cmp	r0, #0
   2e432:	bf08      	it	eq
   2e434:	4620      	moveq	r0, r4
   2e436:	e7dc      	b.n	2e3f2 <bt_id_create+0x42>
		return -ENOMEM;
   2e438:	f06f 000b 	mvn.w	r0, #11
   2e43c:	e7d9      	b.n	2e3f2 <bt_id_create+0x42>
   2e43e:	bf00      	nop
   2e440:	20000000 	.word	0x20000000

0002e444 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   2e444:	b570      	push	{r4, r5, r6, lr}
   2e446:	b086      	sub	sp, #24
   2e448:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   2e44a:	aa01      	add	r2, sp, #4
   2e44c:	2100      	movs	r1, #0
   2e44e:	f241 0009 	movw	r0, #4105	; 0x1009
   2e452:	f7ff f9bb 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   2e456:	4604      	mov	r4, r0
   2e458:	b970      	cbnz	r0, 2e478 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   2e45a:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2e45c:	9002      	str	r0, [sp, #8]
   2e45e:	689d      	ldr	r5, [r3, #8]
   2e460:	f8ad 000c 	strh.w	r0, [sp, #12]
   2e464:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   2e466:	2206      	movs	r2, #6
   2e468:	a902      	add	r1, sp, #8
   2e46a:	4628      	mov	r0, r5
   2e46c:	f01d f9fd 	bl	4b86a <memcmp>
   2e470:	b920      	cbnz	r0, 2e47c <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   2e472:	9801      	ldr	r0, [sp, #4]
   2e474:	f015 f830 	bl	434d8 <net_buf_unref>
		return 0U;
   2e478:	2000      	movs	r0, #0
   2e47a:	e016      	b.n	2e4aa <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   2e47c:	4b0c      	ldr	r3, [pc, #48]	; (2e4b0 <bt_id_read_public_addr+0x6c>)
   2e47e:	6818      	ldr	r0, [r3, #0]
   2e480:	9004      	str	r0, [sp, #16]
   2e482:	889b      	ldrh	r3, [r3, #4]
   2e484:	f8ad 3014 	strh.w	r3, [sp, #20]
   2e488:	2206      	movs	r2, #6
   2e48a:	a904      	add	r1, sp, #16
   2e48c:	4628      	mov	r0, r5
   2e48e:	f01d f9ec 	bl	4b86a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2e492:	2800      	cmp	r0, #0
   2e494:	d0ed      	beq.n	2e472 <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   2e496:	2206      	movs	r2, #6
   2e498:	4629      	mov	r1, r5
   2e49a:	1c70      	adds	r0, r6, #1
   2e49c:	f01d f9f5 	bl	4b88a <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   2e4a0:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   2e4a2:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   2e4a4:	f015 f818 	bl	434d8 <net_buf_unref>
	return 1U;
   2e4a8:	2001      	movs	r0, #1
}
   2e4aa:	b006      	add	sp, #24
   2e4ac:	bd70      	pop	{r4, r5, r6, pc}
   2e4ae:	bf00      	nop
   2e4b0:	00051541 	.word	0x00051541

0002e4b4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   2e4b4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   2e4b6:	4668      	mov	r0, sp
   2e4b8:	f7ff ffc4 	bl	2e444 <bt_id_read_public_addr>
   2e4bc:	4b04      	ldr	r3, [pc, #16]	; (2e4d0 <bt_setup_public_id_addr+0x1c>)
   2e4be:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   2e4c0:	b118      	cbz	r0, 2e4ca <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   2e4c2:	4669      	mov	r1, sp
   2e4c4:	2000      	movs	r0, #0
   2e4c6:	f7ff fdcf 	bl	2e068 <id_create.constprop.0>
}
   2e4ca:	b003      	add	sp, #12
   2e4cc:	f85d fb04 	ldr.w	pc, [sp], #4
   2e4d0:	20000000 	.word	0x20000000

0002e4d4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   2e4d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2e4d8:	4b15      	ldr	r3, [pc, #84]	; (2e530 <bt_read_static_addr+0x5c>)
   2e4da:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   2e4de:	f014 0401 	ands.w	r4, r4, #1
{
   2e4e2:	4607      	mov	r7, r0
   2e4e4:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2e4e6:	d015      	beq.n	2e514 <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   2e4e8:	aa01      	add	r2, sp, #4
   2e4ea:	2100      	movs	r1, #0
   2e4ec:	f64f 4009 	movw	r0, #64521	; 0xfc09
   2e4f0:	f7ff f96c 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   2e4f4:	4605      	mov	r5, r0
   2e4f6:	b9c8      	cbnz	r0, 2e52c <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   2e4f8:	9b01      	ldr	r3, [sp, #4]
   2e4fa:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   2e4fc:	785c      	ldrb	r4, [r3, #1]
   2e4fe:	42b4      	cmp	r4, r6
   2e500:	bf28      	it	cs
   2e502:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2e504:	f04f 0816 	mov.w	r8, #22
   2e508:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   2e50a:	42a5      	cmp	r5, r4
   2e50c:	db06      	blt.n	2e51c <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
   2e50e:	9801      	ldr	r0, [sp, #4]
   2e510:	f014 ffe2 	bl	434d8 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   2e514:	4620      	mov	r0, r4
   2e516:	b002      	add	sp, #8
   2e518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2e51c:	fb08 7005 	mla	r0, r8, r5, r7
   2e520:	2216      	movs	r2, #22
   2e522:	4631      	mov	r1, r6
   2e524:	f01d f9b1 	bl	4b88a <memcpy>
	for (i = 0; i < cnt; i++) {
   2e528:	3501      	adds	r5, #1
   2e52a:	e7ee      	b.n	2e50a <bt_read_static_addr+0x36>
		return 0;
   2e52c:	2400      	movs	r4, #0
   2e52e:	e7f1      	b.n	2e514 <bt_read_static_addr+0x40>
   2e530:	20000000 	.word	0x20000000

0002e534 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   2e534:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   2e536:	4e15      	ldr	r6, [pc, #84]	; (2e58c <bt_setup_random_id_addr+0x58>)
   2e538:	79f4      	ldrb	r4, [r6, #7]
{
   2e53a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   2e53c:	b9f4      	cbnz	r4, 2e57c <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   2e53e:	2101      	movs	r1, #1
   2e540:	a802      	add	r0, sp, #8
   2e542:	f7ff ffc7 	bl	2e4d4 <bt_read_static_addr>
   2e546:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   2e548:	b1c0      	cbz	r0, 2e57c <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   2e54a:	2716      	movs	r7, #22
   2e54c:	ab02      	add	r3, sp, #8
   2e54e:	b2e5      	uxtb	r5, r4
   2e550:	fb07 3105 	mla	r1, r7, r5, r3
   2e554:	2206      	movs	r2, #6
   2e556:	f10d 0001 	add.w	r0, sp, #1
   2e55a:	f01d f996 	bl	4b88a <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   2e55e:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
   2e560:	4669      	mov	r1, sp
   2e562:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   2e564:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   2e568:	f7ff fd7e 	bl	2e068 <id_create.constprop.0>
				if (err) {
   2e56c:	b920      	cbnz	r0, 2e578 <bt_setup_random_id_addr+0x44>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   2e56e:	79f2      	ldrb	r2, [r6, #7]
   2e570:	3401      	adds	r4, #1
   2e572:	b2e3      	uxtb	r3, r4
   2e574:	429a      	cmp	r2, r3
   2e576:	d8e9      	bhi.n	2e54c <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   2e578:	b009      	add	sp, #36	; 0x24
   2e57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   2e57c:	2100      	movs	r1, #0
   2e57e:	4608      	mov	r0, r1
}
   2e580:	b009      	add	sp, #36	; 0x24
   2e582:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   2e586:	f7ff bf13 	b.w	2e3b0 <bt_id_create>
   2e58a:	bf00      	nop
   2e58c:	20000000 	.word	0x20000000

0002e590 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   2e590:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   2e592:	4c07      	ldr	r4, [pc, #28]	; (2e5b0 <bt_id_set_create_conn_own_addr+0x20>)
   2e594:	7823      	ldrb	r3, [r4, #0]
   2e596:	2b01      	cmp	r3, #1
{
   2e598:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   2e59a:	d003      	beq.n	2e5a4 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   2e59c:	7823      	ldrb	r3, [r4, #0]
   2e59e:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   2e5a0:	2000      	movs	r0, #0
}
   2e5a2:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   2e5a4:	1c60      	adds	r0, r4, #1
   2e5a6:	f7ff fd31 	bl	2e00c <set_random_address>
			if (err) {
   2e5aa:	2800      	cmp	r0, #0
   2e5ac:	d0f6      	beq.n	2e59c <bt_id_set_create_conn_own_addr+0xc>
   2e5ae:	e7f8      	b.n	2e5a2 <bt_id_set_create_conn_own_addr+0x12>
   2e5b0:	20000000 	.word	0x20000000

0002e5b4 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   2e5b4:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   2e5b6:	4b0b      	ldr	r3, [pc, #44]	; (2e5e4 <bt_id_set_scan_own_addr+0x30>)
   2e5b8:	781b      	ldrb	r3, [r3, #0]
   2e5ba:	700b      	strb	r3, [r1, #0]
{
   2e5bc:	4606      	mov	r6, r0
   2e5be:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   2e5c0:	f01d fef6 	bl	4c3b0 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   2e5c4:	b928      	cbnz	r0, 2e5d2 <bt_id_set_scan_own_addr+0x1e>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   2e5c6:	f01d ff21 	bl	4c40c <bt_id_set_private_addr>
			if (err) {
   2e5ca:	4604      	mov	r4, r0
   2e5cc:	b918      	cbnz	r0, 2e5d6 <bt_id_set_scan_own_addr+0x22>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   2e5ce:	2301      	movs	r3, #1
   2e5d0:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
   2e5d2:	2400      	movs	r4, #0
   2e5d4:	e004      	b.n	2e5e0 <bt_id_set_scan_own_addr+0x2c>
				if (active_scan || !is_adv_using_rand_addr()) {
   2e5d6:	b91e      	cbnz	r6, 2e5e0 <bt_id_set_scan_own_addr+0x2c>
   2e5d8:	f01d feea 	bl	4c3b0 <is_adv_using_rand_addr>
   2e5dc:	2800      	cmp	r0, #0
   2e5de:	d1f6      	bne.n	2e5ce <bt_id_set_scan_own_addr+0x1a>
}
   2e5e0:	4620      	mov	r0, r4
   2e5e2:	bd70      	pop	{r4, r5, r6, pc}
   2e5e4:	20000000 	.word	0x20000000

0002e5e8 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   2e5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2e5ec:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   2e5f0:	7806      	ldrb	r6, [r0, #0]
{
   2e5f2:	4680      	mov	r8, r0
   2e5f4:	460d      	mov	r5, r1
   2e5f6:	4691      	mov	r9, r2
   2e5f8:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2e5fa:	d02b      	beq.n	2e654 <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2e5fc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2e6b4 <bt_id_set_adv_own_addr+0xcc>
   2e600:	b12a      	cbz	r2, 2e60e <bt_id_set_adv_own_addr+0x26>
   2e602:	0688      	lsls	r0, r1, #26
   2e604:	d503      	bpl.n	2e60e <bt_id_set_adv_own_addr+0x26>
   2e606:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
   2e60a:	0659      	lsls	r1, r3, #25
   2e60c:	d54f      	bpl.n	2e6ae <bt_id_set_adv_own_addr+0xc6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2e60e:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
   2e612:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   2e616:	f818 3003 	ldrb.w	r3, [r8, r3]
   2e61a:	2b01      	cmp	r3, #1
   2e61c:	d009      	beq.n	2e632 <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   2e61e:	ebaa 0a06 	sub.w	sl, sl, r6
   2e622:	f818 300a 	ldrb.w	r3, [r8, sl]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2e626:	f1b9 0f00 	cmp.w	r9, #0
   2e62a:	d10e      	bne.n	2e64a <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2e62c:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   2e62e:	2400      	movs	r4, #0
   2e630:	e008      	b.n	2e644 <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2e632:	2007      	movs	r0, #7
   2e634:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
   2e638:	4440      	add	r0, r8
   2e63a:	f7ff fce7 	bl	2e00c <set_random_address>
				if (err) {
   2e63e:	4604      	mov	r4, r0
   2e640:	2800      	cmp	r0, #0
   2e642:	d0ec      	beq.n	2e61e <bt_id_set_adv_own_addr+0x36>
}
   2e644:	4620      	mov	r0, r4
   2e646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2e64a:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2e64c:	bf48      	it	mi
   2e64e:	f043 0302 	orrmi.w	r3, r3, #2
   2e652:	e7eb      	b.n	2e62c <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   2e654:	f011 0504 	ands.w	r5, r1, #4
   2e658:	d014      	beq.n	2e684 <bt_id_set_adv_own_addr+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2e65a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2e6b4 <bt_id_set_adv_own_addr+0xcc>
   2e65e:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
   2e662:	00f5      	lsls	r5, r6, #3
   2e664:	f818 3003 	ldrb.w	r3, [r8, r3]
   2e668:	2b01      	cmp	r3, #1
   2e66a:	d106      	bne.n	2e67a <bt_id_set_adv_own_addr+0x92>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2e66c:	2007      	movs	r0, #7
   2e66e:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
   2e672:	4440      	add	r0, r8
   2e674:	f7ff fcca 	bl	2e00c <set_random_address>
   2e678:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
   2e67a:	1bad      	subs	r5, r5, r6
   2e67c:	f818 3005 	ldrb.w	r3, [r8, r5]
   2e680:	703b      	strb	r3, [r7, #0]
   2e682:	e7df      	b.n	2e644 <bt_id_set_adv_own_addr+0x5c>
   2e684:	480c      	ldr	r0, [pc, #48]	; (2e6b8 <bt_id_set_adv_own_addr+0xd0>)
   2e686:	f01d fe2b 	bl	4c2e0 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   2e68a:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2e68c:	f3c0 1640 	ubfx	r6, r0, #5, #1
   2e690:	d502      	bpl.n	2e698 <bt_id_set_adv_own_addr+0xb0>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2e692:	4628      	mov	r0, r5
   2e694:	f01e f857 	bl	4c746 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
   2e698:	4640      	mov	r0, r8
   2e69a:	f01d fec9 	bl	4c430 <bt_id_set_adv_private_addr>
   2e69e:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2e6a0:	2001      	movs	r0, #1
   2e6a2:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
   2e6a4:	2e00      	cmp	r6, #0
   2e6a6:	d0cd      	beq.n	2e644 <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2e6a8:	f01e f84d 	bl	4c746 <bt_le_scan_set_enable>
		if (err) {
   2e6ac:	e7ca      	b.n	2e644 <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
   2e6ae:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2e6b2:	e7c7      	b.n	2e644 <bt_id_set_adv_own_addr+0x5c>
   2e6b4:	20000000 	.word	0x20000000
   2e6b8:	200000cc 	.word	0x200000cc

0002e6bc <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2e6bc:	6843      	ldr	r3, [r0, #4]
{
   2e6be:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e6c0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2e6c2:	0558      	lsls	r0, r3, #21
   2e6c4:	d502      	bpl.n	2e6cc <valid_adv_param+0x10>
		return false;
   2e6c6:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   2e6c8:	b003      	add	sp, #12
   2e6ca:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2e6cc:	6922      	ldr	r2, [r4, #16]
   2e6ce:	b10a      	cbz	r2, 2e6d4 <valid_adv_param+0x18>
   2e6d0:	07d9      	lsls	r1, r3, #31
   2e6d2:	d5f8      	bpl.n	2e6c6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   2e6d4:	4d1a      	ldr	r5, [pc, #104]	; (2e740 <valid_adv_param+0x84>)
   2e6d6:	7820      	ldrb	r0, [r4, #0]
   2e6d8:	79eb      	ldrb	r3, [r5, #7]
   2e6da:	4283      	cmp	r3, r0
   2e6dc:	d9f3      	bls.n	2e6c6 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   2e6de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   2e6e2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2e6e4:	2207      	movs	r2, #7
   2e6e6:	4669      	mov	r1, sp
   2e6e8:	4428      	add	r0, r5
   2e6ea:	9300      	str	r3, [sp, #0]
   2e6ec:	f8cd 3003 	str.w	r3, [sp, #3]
   2e6f0:	f01d f8bb 	bl	4b86a <memcmp>
	if (param->id >= bt_dev.id_count ||
   2e6f4:	2800      	cmp	r0, #0
   2e6f6:	d0e6      	beq.n	2e6c6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2e6f8:	6860      	ldr	r0, [r4, #4]
   2e6fa:	07c2      	lsls	r2, r0, #31
   2e6fc:	d406      	bmi.n	2e70c <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   2e6fe:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   2e702:	2b08      	cmp	r3, #8
   2e704:	d802      	bhi.n	2e70c <valid_adv_param+0x50>
   2e706:	68a3      	ldr	r3, [r4, #8]
   2e708:	2b9f      	cmp	r3, #159	; 0x9f
   2e70a:	d9dc      	bls.n	2e6c6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   2e70c:	f010 0f30 	tst.w	r0, #48	; 0x30
   2e710:	d002      	beq.n	2e718 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   2e712:	6923      	ldr	r3, [r4, #16]
   2e714:	2b00      	cmp	r3, #0
   2e716:	d0d6      	beq.n	2e6c6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   2e718:	06c3      	lsls	r3, r0, #27
   2e71a:	d401      	bmi.n	2e720 <valid_adv_param+0x64>
   2e71c:	6923      	ldr	r3, [r4, #16]
   2e71e:	b943      	cbnz	r3, 2e732 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   2e720:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2e724:	429a      	cmp	r2, r3
   2e726:	d8ce      	bhi.n	2e6c6 <valid_adv_param+0xa>
   2e728:	2a1f      	cmp	r2, #31
   2e72a:	d9cc      	bls.n	2e6c6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   2e72c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2e730:	d8c9      	bhi.n	2e6c6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   2e732:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   2e736:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   2e73a:	bf18      	it	ne
   2e73c:	2001      	movne	r0, #1
   2e73e:	e7c3      	b.n	2e6c8 <valid_adv_param+0xc>
   2e740:	20000000 	.word	0x20000000

0002e744 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   2e744:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   2e746:	4606      	mov	r6, r0
   2e748:	4b1e      	ldr	r3, [pc, #120]	; (2e7c4 <le_adv_start_add_conn+0x80>)
   2e74a:	f816 2b09 	ldrb.w	r2, [r6], #9
   2e74e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   2e752:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2e754:	2300      	movs	r3, #0
{
   2e756:	4605      	mov	r5, r0
   2e758:	2207      	movs	r2, #7
   2e75a:	460f      	mov	r7, r1
   2e75c:	4630      	mov	r0, r6
   2e75e:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2e760:	9300      	str	r3, [sp, #0]
   2e762:	f8cd 3003 	str.w	r3, [sp, #3]
   2e766:	f01d f880 	bl	4b86a <memcmp>
   2e76a:	782a      	ldrb	r2, [r5, #0]
   2e76c:	4604      	mov	r4, r0
   2e76e:	b9a8      	cbnz	r0, 2e79c <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   2e770:	4b15      	ldr	r3, [pc, #84]	; (2e7c8 <le_adv_start_add_conn+0x84>)
   2e772:	6818      	ldr	r0, [r3, #0]
   2e774:	8899      	ldrh	r1, [r3, #4]
   2e776:	9002      	str	r0, [sp, #8]
   2e778:	799b      	ldrb	r3, [r3, #6]
   2e77a:	f8ad 100c 	strh.w	r1, [sp, #12]
   2e77e:	4610      	mov	r0, r2
   2e780:	a902      	add	r1, sp, #8
   2e782:	f88d 300e 	strb.w	r3, [sp, #14]
   2e786:	f001 f8d5 	bl	2f934 <bt_conn_add_le>
		if (!conn) {
   2e78a:	4605      	mov	r5, r0
   2e78c:	b1b8      	cbz	r0, 2e7be <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   2e78e:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2e790:	f000 feea 	bl	2f568 <bt_conn_set_state>
	*out_conn = conn;
   2e794:	603d      	str	r5, [r7, #0]
	return 0;
}
   2e796:	4620      	mov	r0, r4
   2e798:	b005      	add	sp, #20
   2e79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   2e79c:	4631      	mov	r1, r6
   2e79e:	4610      	mov	r0, r2
   2e7a0:	f01e f975 	bl	4ca8e <bt_conn_exists_le>
   2e7a4:	4604      	mov	r4, r0
   2e7a6:	b938      	cbnz	r0, 2e7b8 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   2e7a8:	7828      	ldrb	r0, [r5, #0]
   2e7aa:	4631      	mov	r1, r6
   2e7ac:	f001 f8c2 	bl	2f934 <bt_conn_add_le>
	if (!conn) {
   2e7b0:	4605      	mov	r5, r0
   2e7b2:	b120      	cbz	r0, 2e7be <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2e7b4:	2105      	movs	r1, #5
   2e7b6:	e7eb      	b.n	2e790 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   2e7b8:	f06f 0415 	mvn.w	r4, #21
   2e7bc:	e7eb      	b.n	2e796 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   2e7be:	f06f 040b 	mvn.w	r4, #11
   2e7c2:	e7e8      	b.n	2e796 <le_adv_start_add_conn+0x52>
   2e7c4:	20000000 	.word	0x20000000
   2e7c8:	00051547 	.word	0x00051547

0002e7cc <bt_le_ext_adv_foreach>:
{
   2e7cc:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   2e7ce:	4801      	ldr	r0, [pc, #4]	; (2e7d4 <bt_le_ext_adv_foreach+0x8>)
   2e7d0:	4718      	bx	r3
   2e7d2:	bf00      	nop
   2e7d4:	20000018 	.word	0x20000018

0002e7d8 <bt_le_adv_lookup_legacy>:
}
   2e7d8:	4800      	ldr	r0, [pc, #0]	; (2e7dc <bt_le_adv_lookup_legacy+0x4>)
   2e7da:	4770      	bx	lr
   2e7dc:	20000018 	.word	0x20000018

0002e7e0 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   2e7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   2e7e4:	690e      	ldr	r6, [r1, #16]
{
   2e7e6:	b08f      	sub	sp, #60	; 0x3c
   2e7e8:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   2e7ea:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   2e7ec:	ebb6 0903 	subs.w	r9, r6, r3
{
   2e7f0:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2e7f2:	488d      	ldr	r0, [pc, #564]	; (2ea28 <bt_le_adv_start_legacy+0x248>)
   2e7f4:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   2e7f6:	bf18      	it	ne
   2e7f8:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
   2e7fc:	9307      	str	r3, [sp, #28]
   2e7fe:	f01d fe53 	bl	4c4a8 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e802:	0787      	lsls	r7, r0, #30
{
   2e804:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e806:	f140 8103 	bpl.w	2ea10 <bt_le_adv_start_legacy+0x230>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   2e80a:	4608      	mov	r0, r1
   2e80c:	f7ff ff56 	bl	2e6bc <valid_adv_param>
   2e810:	b928      	cbnz	r0, 2e81e <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   2e812:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   2e816:	4658      	mov	r0, fp
   2e818:	b00f      	add	sp, #60	; 0x3c
   2e81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   2e81e:	4620      	mov	r0, r4
   2e820:	f7ff fc62 	bl	2e0e8 <bt_id_adv_random_addr_check>
   2e824:	4680      	mov	r8, r0
   2e826:	2800      	cmp	r0, #0
   2e828:	d0f3      	beq.n	2e812 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2e82a:	f105 0710 	add.w	r7, r5, #16
   2e82e:	4638      	mov	r0, r7
   2e830:	f01d fe3a 	bl	4c4a8 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2e834:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   2e838:	0640      	lsls	r0, r0, #25
   2e83a:	f100 80ec 	bmi.w	2ea16 <bt_le_adv_start_legacy+0x236>
	(void)memset(&set_param, 0, sizeof(set_param));
   2e83e:	220f      	movs	r2, #15
   2e840:	4659      	mov	r1, fp
   2e842:	a80a      	add	r0, sp, #40	; 0x28
   2e844:	f01d f82c 	bl	4b8a0 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   2e848:	68a3      	ldr	r3, [r4, #8]
   2e84a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   2e84e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   2e850:	68e3      	ldr	r3, [r4, #12]
   2e852:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   2e856:	f01d fe18 	bl	4c48a <get_adv_channel_map>
	if (adv->id != param->id) {
   2e85a:	782a      	ldrb	r2, [r5, #0]
   2e85c:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   2e85e:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   2e862:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   2e864:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   2e868:	d004      	beq.n	2e874 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2e86a:	486f      	ldr	r0, [pc, #444]	; (2ea28 <bt_le_adv_start_legacy+0x248>)
   2e86c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   2e870:	f01d fe20 	bl	4c4b4 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   2e874:	4a6d      	ldr	r2, [pc, #436]	; (2ea2c <bt_le_adv_start_legacy+0x24c>)
	adv->id = param->id;
   2e876:	7823      	ldrb	r3, [r4, #0]
   2e878:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   2e87a:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   2e87e:	6861      	ldr	r1, [r4, #4]
   2e880:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   2e884:	464a      	mov	r2, r9
   2e886:	4628      	mov	r0, r5
   2e888:	f7ff feae 	bl	2e5e8 <bt_id_set_adv_own_addr>
	if (err) {
   2e88c:	4683      	mov	fp, r0
   2e88e:	2800      	cmp	r0, #0
   2e890:	d1c1      	bne.n	2e816 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   2e892:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   2e896:	2e00      	cmp	r6, #0
   2e898:	d049      	beq.n	2e92e <bt_le_adv_start_legacy+0x14e>
	memcpy(dst, src, sizeof(*dst));
   2e89a:	6921      	ldr	r1, [r4, #16]
   2e89c:	2207      	movs	r2, #7
   2e89e:	f01c fff4 	bl	4b88a <memcpy>
	name_type = get_adv_name_type_param(param);
   2e8a2:	4620      	mov	r0, r4
   2e8a4:	f01d ff04 	bl	4c6b0 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2e8a8:	6863      	ldr	r3, [r4, #4]
   2e8aa:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   2e8ac:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2e8ae:	d547      	bpl.n	2e940 <bt_le_adv_start_legacy+0x160>
		if (dir_adv) {
   2e8b0:	2e00      	cmp	r6, #0
   2e8b2:	d042      	beq.n	2e93a <bt_le_adv_start_legacy+0x15a>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   2e8b4:	f013 0f10 	tst.w	r3, #16
   2e8b8:	bf14      	ite	ne
   2e8ba:	2304      	movne	r3, #4
   2e8bc:	2301      	moveq	r3, #1
   2e8be:	6921      	ldr	r1, [r4, #16]
   2e8c0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2e8c4:	2207      	movs	r2, #7
   2e8c6:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   2e8ca:	f01c ffde 	bl	4b88a <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   2e8ce:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   2e8d2:	210f      	movs	r1, #15
   2e8d4:	f242 0006 	movw	r0, #8198	; 0x2006
   2e8d8:	f7fe ff1c 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   2e8dc:	4683      	mov	fp, r0
   2e8de:	2800      	cmp	r0, #0
   2e8e0:	f000 809c 	beq.w	2ea1c <bt_le_adv_start_legacy+0x23c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2e8e4:	220f      	movs	r2, #15
   2e8e6:	a90a      	add	r1, sp, #40	; 0x28
   2e8e8:	3008      	adds	r0, #8
   2e8ea:	f020 ffa3 	bl	4f834 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   2e8ee:	2200      	movs	r2, #0
   2e8f0:	4659      	mov	r1, fp
   2e8f2:	f242 0006 	movw	r0, #8198	; 0x2006
   2e8f6:	f7fe ff69 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   2e8fa:	2800      	cmp	r0, #0
   2e8fc:	f040 8091 	bne.w	2ea22 <bt_le_adv_start_legacy+0x242>
	if (!dir_adv) {
   2e900:	b376      	cbz	r6, 2e960 <bt_le_adv_start_legacy+0x180>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2e902:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e904:	07db      	lsls	r3, r3, #31
   2e906:	d439      	bmi.n	2e97c <bt_le_adv_start_legacy+0x19c>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2e908:	4628      	mov	r0, r5
   2e90a:	2101      	movs	r1, #1
   2e90c:	f01d fee0 	bl	4c6d0 <bt_le_adv_set_enable_legacy>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2e910:	9d07      	ldr	r5, [sp, #28]
	if (err) {
   2e912:	4683      	mov	fp, r0
   2e914:	2800      	cmp	r0, #0
   2e916:	d074      	beq.n	2ea02 <bt_le_adv_start_legacy+0x222>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2e918:	2d00      	cmp	r5, #0
   2e91a:	f43f af7c 	beq.w	2e816 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2e91e:	4628      	mov	r0, r5
   2e920:	2100      	movs	r1, #0
   2e922:	f000 fe21 	bl	2f568 <bt_conn_set_state>
			bt_conn_unref(conn);
   2e926:	4628      	mov	r0, r5
   2e928:	f01d ffe8 	bl	4c8fc <bt_conn_unref>
   2e92c:	e773      	b.n	2e816 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   2e92e:	9608      	str	r6, [sp, #32]
   2e930:	2207      	movs	r2, #7
   2e932:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   2e936:	a908      	add	r1, sp, #32
   2e938:	e7b1      	b.n	2e89e <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
   2e93a:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   2e93e:	e7c8      	b.n	2e8d2 <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   2e940:	059a      	lsls	r2, r3, #22
   2e942:	d403      	bmi.n	2e94c <bt_le_adv_start_legacy+0x16c>
   2e944:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2e946:	b90b      	cbnz	r3, 2e94c <bt_le_adv_start_legacy+0x16c>
   2e948:	2802      	cmp	r0, #2
   2e94a:	d103      	bne.n	2e954 <bt_le_adv_start_legacy+0x174>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   2e94c:	2302      	movs	r3, #2
   2e94e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2e952:	e7be      	b.n	2e8d2 <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2e954:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   2e956:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2e95a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2e95e:	e7b8      	b.n	2e8d2 <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   2e960:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2e962:	9300      	str	r3, [sp, #0]
   2e964:	e9cd 8901 	strd	r8, r9, [sp, #4]
   2e968:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2e96a:	9905      	ldr	r1, [sp, #20]
   2e96c:	4652      	mov	r2, sl
   2e96e:	4628      	mov	r0, r5
   2e970:	f01d fe27 	bl	4c5c2 <le_adv_update.constprop.0>
		if (err) {
   2e974:	4683      	mov	fp, r0
   2e976:	2800      	cmp	r0, #0
   2e978:	d0c3      	beq.n	2e902 <bt_le_adv_start_legacy+0x122>
   2e97a:	e74c      	b.n	2e816 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   2e97c:	a907      	add	r1, sp, #28
   2e97e:	4628      	mov	r0, r5
   2e980:	f7ff fee0 	bl	2e744 <le_adv_start_add_conn>
		if (err) {
   2e984:	4683      	mov	fp, r0
   2e986:	2800      	cmp	r0, #0
   2e988:	d0be      	beq.n	2e908 <bt_le_adv_start_legacy+0x128>
			if (err == -ENOMEM && !dir_adv &&
   2e98a:	f110 0f0c 	cmn.w	r0, #12
   2e98e:	f47f af42 	bne.w	2e816 <bt_le_adv_start_legacy+0x36>
   2e992:	2e00      	cmp	r6, #0
   2e994:	f47f af3f 	bne.w	2e816 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   2e998:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   2e99a:	0798      	lsls	r0, r3, #30
   2e99c:	f53f af3b 	bmi.w	2e816 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2e9a0:	6862      	ldr	r2, [r4, #4]
   2e9a2:	f082 0202 	eor.w	r2, r2, #2
   2e9a6:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   2e9aa:	f00b 0201 	and.w	r2, fp, #1
   2e9ae:	210d      	movs	r1, #13
   2e9b0:	4638      	mov	r0, r7
   2e9b2:	f01d fdef 	bl	4c594 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   2e9b6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2e9ba:	425a      	negs	r2, r3
   2e9bc:	415a      	adcs	r2, r3
   2e9be:	2107      	movs	r1, #7
   2e9c0:	4638      	mov	r0, r7
   2e9c2:	f01d fde7 	bl	4c594 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   2e9c6:	f1a9 0102 	sub.w	r1, r9, #2
   2e9ca:	424a      	negs	r2, r1
   2e9cc:	414a      	adcs	r2, r1
   2e9ce:	4638      	mov	r0, r7
   2e9d0:	2108      	movs	r1, #8
   2e9d2:	f01d fddf 	bl	4c594 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   2e9d6:	6862      	ldr	r2, [r4, #4]
   2e9d8:	2109      	movs	r1, #9
   2e9da:	f002 0201 	and.w	r2, r2, #1
   2e9de:	4638      	mov	r0, r7
   2e9e0:	f01d fdd8 	bl	4c594 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   2e9e4:	4642      	mov	r2, r8
   2e9e6:	210a      	movs	r1, #10
   2e9e8:	4638      	mov	r0, r7
   2e9ea:	f01d fdd3 	bl	4c594 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   2e9ee:	6862      	ldr	r2, [r4, #4]
   2e9f0:	210c      	movs	r1, #12
   2e9f2:	f3c2 0280 	ubfx	r2, r2, #2, #1
   2e9f6:	4638      	mov	r0, r7
   2e9f8:	f01d fdcc 	bl	4c594 <atomic_set_bit_to>
	return 0;
   2e9fc:	f04f 0b00 	mov.w	fp, #0
   2ea00:	e709      	b.n	2e816 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2ea02:	b115      	cbz	r5, 2ea0a <bt_le_adv_start_legacy+0x22a>
		bt_conn_unref(conn);
   2ea04:	4628      	mov	r0, r5
   2ea06:	f01d ff79 	bl	4c8fc <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2ea0a:	2e00      	cmp	r6, #0
   2ea0c:	d1cd      	bne.n	2e9aa <bt_le_adv_start_legacy+0x1ca>
   2ea0e:	e7c7      	b.n	2e9a0 <bt_le_adv_start_legacy+0x1c0>
		return -EAGAIN;
   2ea10:	f06f 0b0a 	mvn.w	fp, #10
   2ea14:	e6ff      	b.n	2e816 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   2ea16:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   2ea1a:	e6fc      	b.n	2e816 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   2ea1c:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   2ea20:	e6f9      	b.n	2e816 <bt_le_adv_start_legacy+0x36>
   2ea22:	4683      	mov	fp, r0
   2ea24:	e6f7      	b.n	2e816 <bt_le_adv_start_legacy+0x36>
   2ea26:	bf00      	nop
   2ea28:	200000cc 	.word	0x200000cc
   2ea2c:	20000000 	.word	0x20000000

0002ea30 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   2ea30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ea32:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2ea34:	9a06      	ldr	r2, [sp, #24]
{
   2ea36:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2ea38:	e9cd 3200 	strd	r3, r2, [sp]
   2ea3c:	462b      	mov	r3, r5
   2ea3e:	460a      	mov	r2, r1
   2ea40:	4601      	mov	r1, r0
   2ea42:	4811      	ldr	r0, [pc, #68]	; (2ea88 <bt_le_adv_start+0x58>)
   2ea44:	f7ff fecc 	bl	2e7e0 <bt_le_adv_start_legacy>
   2ea48:	4621      	mov	r1, r4
   2ea4a:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   2ea4c:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   2ea4e:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   2ea52:	429d      	cmp	r5, r3
   2ea54:	d102      	bne.n	2ea5c <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   2ea56:	4630      	mov	r0, r6
   2ea58:	b002      	add	sp, #8
   2ea5a:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   2ea5c:	880a      	ldrh	r2, [r1, #0]
   2ea5e:	4282      	cmp	r2, r0
   2ea60:	d104      	bne.n	2ea6c <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   2ea62:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2ea64:	b112      	cbz	r2, 2ea6c <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2ea66:	7812      	ldrb	r2, [r2, #0]
   2ea68:	07d2      	lsls	r2, r2, #31
   2ea6a:	d402      	bmi.n	2ea72 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   2ea6c:	3301      	adds	r3, #1
   2ea6e:	3108      	adds	r1, #8
   2ea70:	e7ef      	b.n	2ea52 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   2ea72:	4906      	ldr	r1, [pc, #24]	; (2ea8c <bt_le_adv_start+0x5c>)
   2ea74:	4806      	ldr	r0, [pc, #24]	; (2ea90 <bt_le_adv_start+0x60>)
   2ea76:	f021 fedb 	bl	50830 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   2ea7a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ea7e:	2300      	movs	r3, #0
   2ea80:	4803      	ldr	r0, [pc, #12]	; (2ea90 <bt_le_adv_start+0x60>)
   2ea82:	f019 facd 	bl	48020 <k_work_reschedule>
   2ea86:	e7e6      	b.n	2ea56 <bt_le_adv_start+0x26>
   2ea88:	20000018 	.word	0x20000018
   2ea8c:	0004c725 	.word	0x0004c725
   2ea90:	20000030 	.word	0x20000030

0002ea94 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   2ea94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   2ea96:	4829      	ldr	r0, [pc, #164]	; (2eb3c <bt_le_adv_stop+0xa8>)
   2ea98:	f01d fe41 	bl	4c71e <bt_le_lim_adv_cancel_timeout>
   2ea9c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2eaa0:	4827      	ldr	r0, [pc, #156]	; (2eb40 <bt_le_adv_stop+0xac>)
   2eaa2:	f01d fd07 	bl	4c4b4 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2eaa6:	4826      	ldr	r0, [pc, #152]	; (2eb40 <bt_le_adv_stop+0xac>)
   2eaa8:	f01d fcfe 	bl	4c4a8 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2eaac:	0641      	lsls	r1, r0, #25
   2eaae:	d403      	bmi.n	2eab8 <bt_le_adv_stop+0x24>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
   2eab0:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   2eab2:	4620      	mov	r0, r4
   2eab4:	b004      	add	sp, #16
   2eab6:	bd10      	pop	{r4, pc}
   2eab8:	4821      	ldr	r0, [pc, #132]	; (2eb40 <bt_le_adv_stop+0xac>)
   2eaba:	f01d fcf5 	bl	4c4a8 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2eabe:	0582      	lsls	r2, r0, #22
   2eac0:	d521      	bpl.n	2eb06 <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2eac2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2eac4:	481f      	ldr	r0, [pc, #124]	; (2eb44 <bt_le_adv_stop+0xb0>)
   2eac6:	9300      	str	r3, [sp, #0]
   2eac8:	2207      	movs	r2, #7
   2eaca:	4669      	mov	r1, sp
   2eacc:	f8cd 3003 	str.w	r3, [sp, #3]
   2ead0:	f01c fecb 	bl	4b86a <memcmp>
   2ead4:	4b1c      	ldr	r3, [pc, #112]	; (2eb48 <bt_le_adv_stop+0xb4>)
   2ead6:	bb60      	cbnz	r0, 2eb32 <bt_le_adv_stop+0x9e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   2ead8:	4a1c      	ldr	r2, [pc, #112]	; (2eb4c <bt_le_adv_stop+0xb8>)
   2eada:	8891      	ldrh	r1, [r2, #4]
   2eadc:	6810      	ldr	r0, [r2, #0]
   2eade:	7992      	ldrb	r2, [r2, #6]
   2eae0:	f8ad 100c 	strh.w	r1, [sp, #12]
   2eae4:	f88d 200e 	strb.w	r2, [sp, #14]
   2eae8:	9002      	str	r0, [sp, #8]
   2eaea:	2204      	movs	r2, #4
   2eaec:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2eaee:	7e18      	ldrb	r0, [r3, #24]
   2eaf0:	f000 ff60 	bl	2f9b4 <bt_conn_lookup_state_le>
   2eaf4:	4604      	mov	r4, r0
	if (conn) {
   2eaf6:	b130      	cbz	r0, 2eb06 <bt_le_adv_stop+0x72>
		conn->err = status;
   2eaf8:	2100      	movs	r1, #0
   2eafa:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2eafc:	f000 fd34 	bl	2f568 <bt_conn_set_state>
		bt_conn_unref(conn);
   2eb00:	4620      	mov	r0, r4
   2eb02:	f01d fefb 	bl	4c8fc <bt_conn_unref>
		err = bt_le_adv_set_enable_legacy(adv, false);
   2eb06:	480d      	ldr	r0, [pc, #52]	; (2eb3c <bt_le_adv_stop+0xa8>)
   2eb08:	2100      	movs	r1, #0
   2eb0a:	f01d fde1 	bl	4c6d0 <bt_le_adv_set_enable_legacy>
		if (err) {
   2eb0e:	4604      	mov	r4, r0
   2eb10:	2800      	cmp	r0, #0
   2eb12:	d1ce      	bne.n	2eab2 <bt_le_adv_stop+0x1e>
   2eb14:	480e      	ldr	r0, [pc, #56]	; (2eb50 <bt_le_adv_stop+0xbc>)
   2eb16:	f01d fcc7 	bl	4c4a8 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2eb1a:	0683      	lsls	r3, r0, #26
   2eb1c:	d5c8      	bpl.n	2eab0 <bt_le_adv_stop+0x1c>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2eb1e:	4620      	mov	r0, r4
   2eb20:	f01d fe11 	bl	4c746 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
   2eb24:	4620      	mov	r0, r4
   2eb26:	f01d fc71 	bl	4c40c <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2eb2a:	2001      	movs	r0, #1
   2eb2c:	f01d fe0b 	bl	4c746 <bt_le_scan_set_enable>
   2eb30:	e7bf      	b.n	2eab2 <bt_le_adv_stop+0x1e>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2eb32:	2205      	movs	r2, #5
   2eb34:	f103 0121 	add.w	r1, r3, #33	; 0x21
   2eb38:	e7d9      	b.n	2eaee <bt_le_adv_stop+0x5a>
   2eb3a:	bf00      	nop
   2eb3c:	20000018 	.word	0x20000018
   2eb40:	20000028 	.word	0x20000028
   2eb44:	20000021 	.word	0x20000021
   2eb48:	20000000 	.word	0x20000000
   2eb4c:	00051547 	.word	0x00051547
   2eb50:	200000cc 	.word	0x200000cc

0002eb54 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   2eb54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2eb56:	481e      	ldr	r0, [pc, #120]	; (2ebd0 <bt_le_adv_resume+0x7c>)
   2eb58:	4c1d      	ldr	r4, [pc, #116]	; (2ebd0 <bt_le_adv_resume+0x7c>)
   2eb5a:	f01d fca5 	bl	4c4a8 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2eb5e:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   2eb62:	d033      	beq.n	2ebcc <bt_le_adv_resume+0x78>
   2eb64:	4620      	mov	r0, r4
   2eb66:	f01d fc9f 	bl	4c4a8 <atomic_get>
   2eb6a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2eb6c:	f3c0 1580 	ubfx	r5, r0, #6, #1
   2eb70:	d42c      	bmi.n	2ebcc <bt_le_adv_resume+0x78>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2eb72:	4620      	mov	r0, r4
   2eb74:	f01d fc98 	bl	4c4a8 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2eb78:	0583      	lsls	r3, r0, #22
   2eb7a:	d527      	bpl.n	2ebcc <bt_le_adv_resume+0x78>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   2eb7c:	a901      	add	r1, sp, #4
   2eb7e:	f1a4 0010 	sub.w	r0, r4, #16
   2eb82:	f7ff fddf 	bl	2e744 <le_adv_start_add_conn>
	if (err) {
   2eb86:	bb08      	cbnz	r0, 2ebcc <bt_le_adv_resume+0x78>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2eb88:	2101      	movs	r1, #1
   2eb8a:	f1a4 0010 	sub.w	r0, r4, #16
   2eb8e:	f01d fd9f 	bl	4c6d0 <bt_le_adv_set_enable_legacy>

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2eb92:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   2eb94:	b150      	cbz	r0, 2ebac <bt_le_adv_resume+0x58>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2eb96:	4629      	mov	r1, r5
   2eb98:	4630      	mov	r0, r6
   2eb9a:	f000 fce5 	bl	2f568 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2eb9e:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2eba2:	4620      	mov	r0, r4
   2eba4:	f01d fc86 	bl	4c4b4 <atomic_and>
	return (old & mask) != 0;
   2eba8:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   2ebac:	4630      	mov	r0, r6
   2ebae:	f01d fea5 	bl	4c8fc <bt_conn_unref>
	if (persist_paused) {
   2ebb2:	b15d      	cbz	r5, 2ebcc <bt_le_adv_resume+0x78>
   2ebb4:	f3bf 8f5b 	dmb	ish
   2ebb8:	e854 3f00 	ldrex	r3, [r4]
   2ebbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2ebc0:	e844 3200 	strex	r2, r3, [r4]
   2ebc4:	2a00      	cmp	r2, #0
   2ebc6:	d1f7      	bne.n	2ebb8 <bt_le_adv_resume+0x64>
   2ebc8:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   2ebcc:	b002      	add	sp, #8
   2ebce:	bd70      	pop	{r4, r5, r6, pc}
   2ebd0:	20000028 	.word	0x20000028

0002ebd4 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ebd4:	4b03      	ldr	r3, [pc, #12]	; (2ebe4 <atomic_get.constprop.0+0x10>)
   2ebd6:	f3bf 8f5b 	dmb	ish
   2ebda:	6818      	ldr	r0, [r3, #0]
   2ebdc:	f3bf 8f5b 	dmb	ish
}
   2ebe0:	4770      	bx	lr
   2ebe2:	bf00      	nop
   2ebe4:	200000cc 	.word	0x200000cc

0002ebe8 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   2ebe8:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   2ebea:	2102      	movs	r1, #2
{
   2ebec:	b087      	sub	sp, #28
   2ebee:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   2ebf0:	f242 000c 	movw	r0, #8204	; 0x200c
   2ebf4:	f7fe fd8e 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   2ebf8:	4605      	mov	r5, r0
   2ebfa:	b300      	cbz	r0, 2ec3e <bt_le_scan_set_enable_legacy+0x56>
	return net_buf_simple_add(&buf->b, len);
   2ebfc:	2102      	movs	r1, #2
   2ebfe:	3008      	adds	r0, #8
   2ec00:	f020 fe12 	bl	4f828 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   2ec04:	2c01      	cmp	r4, #1
   2ec06:	4602      	mov	r2, r0
   2ec08:	d117      	bne.n	2ec3a <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ec0a:	f7ff ffe3 	bl	2ebd4 <atomic_get.constprop.0>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   2ec0e:	f3c0 2000 	ubfx	r0, r0, #8, #1
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   2ec12:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   2ec14:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   2ec16:	425c      	negs	r4, r3
   2ec18:	415c      	adcs	r4, r3
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   2ec1a:	7050      	strb	r0, [r2, #1]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   2ec1c:	a903      	add	r1, sp, #12
   2ec1e:	4a09      	ldr	r2, [pc, #36]	; (2ec44 <bt_le_scan_set_enable_legacy+0x5c>)
   2ec20:	9400      	str	r4, [sp, #0]
   2ec22:	4628      	mov	r0, r5
   2ec24:	2305      	movs	r3, #5
   2ec26:	f7fe fd63 	bl	2d6f0 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   2ec2a:	2200      	movs	r2, #0
   2ec2c:	4629      	mov	r1, r5
   2ec2e:	f242 000c 	movw	r0, #8204	; 0x200c
   2ec32:	f7fe fdcb 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   2ec36:	b007      	add	sp, #28
   2ec38:	bd30      	pop	{r4, r5, pc}
   2ec3a:	2000      	movs	r0, #0
   2ec3c:	e7e9      	b.n	2ec12 <bt_le_scan_set_enable_legacy+0x2a>
		return -ENOBUFS;
   2ec3e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ec42:	e7f8      	b.n	2ec36 <bt_le_scan_set_enable_legacy+0x4e>
   2ec44:	200000cc 	.word	0x200000cc

0002ec48 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   2ec48:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ec4a:	4605      	mov	r5, r0
   2ec4c:	4614      	mov	r4, r2
   2ec4e:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   2ec50:	2207      	movs	r2, #7
   2ec52:	2100      	movs	r1, #0
   2ec54:	4668      	mov	r0, sp
   2ec56:	f01c fe23 	bl	4b8a0 <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   2ec5a:	2300      	movs	r3, #0
   2ec5c:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   2ec60:	1e6b      	subs	r3, r5, #1
   2ec62:	4258      	negs	r0, r3
   2ec64:	f10d 0105 	add.w	r1, sp, #5
   2ec68:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
   2ec6a:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   2ec6e:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   2ec72:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   2ec76:	f7ff fc9d 	bl	2e5b4 <bt_id_set_scan_own_addr>
	if (err) {
   2ec7a:	4604      	mov	r4, r0
   2ec7c:	bb38      	cbnz	r0, 2ecce <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   2ec7e:	2107      	movs	r1, #7
   2ec80:	f242 000b 	movw	r0, #8203	; 0x200b
   2ec84:	f7fe fd46 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   2ec88:	4606      	mov	r6, r0
   2ec8a:	b348      	cbz	r0, 2ece0 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2ec8c:	2207      	movs	r2, #7
   2ec8e:	4669      	mov	r1, sp
   2ec90:	3008      	adds	r0, #8
   2ec92:	f020 fdcf 	bl	4f834 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   2ec96:	4622      	mov	r2, r4
   2ec98:	4631      	mov	r1, r6
   2ec9a:	f242 000b 	movw	r0, #8203	; 0x200b
   2ec9e:	f7fe fd95 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   2eca2:	4604      	mov	r4, r0
   2eca4:	b998      	cbnz	r0, 2ecce <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   2eca6:	2001      	movs	r0, #1
   2eca8:	f7ff ff9e 	bl	2ebe8 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   2ecac:	4604      	mov	r4, r0
   2ecae:	b970      	cbnz	r0, 2ecce <start_le_scan_legacy+0x86>
	if (val) {
   2ecb0:	2d01      	cmp	r5, #1
   2ecb2:	d10f      	bne.n	2ecd4 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ecb4:	f3bf 8f5b 	dmb	ish
   2ecb8:	4b0b      	ldr	r3, [pc, #44]	; (2ece8 <start_le_scan_legacy+0xa0>)
   2ecba:	e853 1f00 	ldrex	r1, [r3]
   2ecbe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   2ecc2:	e843 1200 	strex	r2, r1, [r3]
   2ecc6:	2a00      	cmp	r2, #0
   2ecc8:	d1f7      	bne.n	2ecba <start_le_scan_legacy+0x72>
   2ecca:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   2ecce:	4620      	mov	r0, r4
   2ecd0:	b002      	add	sp, #8
   2ecd2:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ecd4:	f06f 0180 	mvn.w	r1, #128	; 0x80
   2ecd8:	4803      	ldr	r0, [pc, #12]	; (2ece8 <start_le_scan_legacy+0xa0>)
   2ecda:	f01d fd25 	bl	4c728 <atomic_and>
   2ecde:	e7f6      	b.n	2ecce <start_le_scan_legacy+0x86>
		return -ENOBUFS;
   2ece0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2ece4:	e7f3      	b.n	2ecce <start_le_scan_legacy+0x86>
   2ece6:	bf00      	nop
   2ece8:	200000cc 	.word	0x200000cc

0002ecec <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   2ecec:	4b01      	ldr	r3, [pc, #4]	; (2ecf4 <bt_scan_reset+0x8>)
   2ecee:	2200      	movs	r2, #0
   2ecf0:	601a      	str	r2, [r3, #0]
}
   2ecf2:	4770      	bx	lr
   2ecf4:	20003f84 	.word	0x20003f84

0002ecf8 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   2ecf8:	b538      	push	{r3, r4, r5, lr}
   2ecfa:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ecfc:	f7ff ff6a 	bl	2ebd4 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2ed00:	0641      	lsls	r1, r0, #25
   2ed02:	f3c0 1280 	ubfx	r2, r0, #6, #1
   2ed06:	d501      	bpl.n	2ed0c <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   2ed08:	2000      	movs	r0, #0
   2ed0a:	e031      	b.n	2ed70 <bt_le_scan_update+0x78>
   2ed0c:	f7ff ff62 	bl	2ebd4 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2ed10:	0683      	lsls	r3, r0, #26
   2ed12:	d428      	bmi.n	2ed66 <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   2ed14:	2100      	movs	r1, #0
   2ed16:	2206      	movs	r2, #6
   2ed18:	4608      	mov	r0, r1
   2ed1a:	f000 fe4b 	bl	2f9b4 <bt_conn_lookup_state_le>
		if (conn) {
   2ed1e:	4604      	mov	r4, r0
   2ed20:	bb38      	cbnz	r0, 2ed72 <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   2ed22:	2202      	movs	r2, #2
   2ed24:	4601      	mov	r1, r0
   2ed26:	f000 fe45 	bl	2f9b4 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   2ed2a:	2800      	cmp	r0, #0
   2ed2c:	d0ec      	beq.n	2ed08 <bt_le_scan_update+0x10>
   2ed2e:	f3bf 8f5b 	dmb	ish
   2ed32:	4b11      	ldr	r3, [pc, #68]	; (2ed78 <bt_le_scan_update+0x80>)
   2ed34:	e853 1f00 	ldrex	r1, [r3]
   2ed38:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   2ed3c:	e843 1200 	strex	r2, r1, [r3]
   2ed40:	2a00      	cmp	r2, #0
   2ed42:	d1f7      	bne.n	2ed34 <bt_le_scan_update+0x3c>
   2ed44:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   2ed48:	f01d fdd8 	bl	4c8fc <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   2ed4c:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   2ed4e:	4620      	mov	r0, r4
   2ed50:	bf18      	it	ne
   2ed52:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   2ed54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   2ed58:	bf0a      	itet	eq
   2ed5a:	2212      	moveq	r2, #18
   2ed5c:	2160      	movne	r1, #96	; 0x60
   2ed5e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   2ed62:	f7ff bf71 	b.w	2ec48 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   2ed66:	4610      	mov	r0, r2
   2ed68:	f7ff ff3e 	bl	2ebe8 <bt_le_scan_set_enable_legacy>
		if (err) {
   2ed6c:	2800      	cmp	r0, #0
   2ed6e:	d0d1      	beq.n	2ed14 <bt_le_scan_update+0x1c>
}
   2ed70:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   2ed72:	f01d fdc3 	bl	4c8fc <bt_conn_unref>
   2ed76:	e7c7      	b.n	2ed08 <bt_le_scan_update+0x10>
   2ed78:	200000cc 	.word	0x200000cc

0002ed7c <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   2ed7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   2ed80:	f100 0808 	add.w	r8, r0, #8
   2ed84:	b08d      	sub	sp, #52	; 0x34
   2ed86:	4604      	mov	r4, r0
   2ed88:	4640      	mov	r0, r8
   2ed8a:	f020 fd86 	bl	4f89a <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   2ed8e:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 2ef3c <bt_hci_le_adv_report+0x1c0>
   2ed92:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   2ed94:	b916      	cbnz	r6, 2ed9c <bt_hci_le_adv_report+0x20>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   2ed96:	b00d      	add	sp, #52	; 0x34
   2ed98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   2ed9c:	89a3      	ldrh	r3, [r4, #12]
   2ed9e:	2b08      	cmp	r3, #8
   2eda0:	d9f9      	bls.n	2ed96 <bt_hci_le_adv_report+0x1a>
	return net_buf_simple_pull_mem(&buf->b, len);
   2eda2:	2109      	movs	r1, #9
   2eda4:	4640      	mov	r0, r8
   2eda6:	f020 fd70 	bl	4f88a <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   2edaa:	7a01      	ldrb	r1, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   2edac:	237f      	movs	r3, #127	; 0x7f
   2edae:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   2edb2:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   2edb4:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   2edb6:	7a5b      	ldrb	r3, [r3, #9]
   2edb8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   2edbc:	23ff      	movs	r3, #255	; 0xff
   2edbe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   2edc2:	2300      	movs	r3, #0
   2edc4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   2edc8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
   2edcc:	7802      	ldrb	r2, [r0, #0]
   2edce:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   2edd2:	2a04      	cmp	r2, #4
   2edd4:	bf9c      	itt	ls
   2edd6:	4b5a      	ldrls	r3, [pc, #360]	; (2ef40 <bt_hci_le_adv_report+0x1c4>)
   2edd8:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   2edda:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   2edde:	b28b      	uxth	r3, r1
   2ede0:	4605      	mov	r5, r0
   2ede2:	f100 0901 	add.w	r9, r0, #1
   2ede6:	9301      	str	r3, [sp, #4]
   2ede8:	f7ff fef4 	bl	2ebd4 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   2edec:	0647      	lsls	r7, r0, #25
   2edee:	d50b      	bpl.n	2ee08 <bt_hci_le_adv_report+0x8c>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   2edf0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2edf4:	0758      	lsls	r0, r3, #29
   2edf6:	d507      	bpl.n	2ee08 <bt_hci_le_adv_report+0x8c>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   2edf8:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   2edfa:	4640      	mov	r0, r8
   2edfc:	3101      	adds	r1, #1
   2edfe:	3e01      	subs	r6, #1
   2ee00:	f020 fd3b 	bl	4f87a <net_buf_simple_pull>
   2ee04:	b2f6      	uxtb	r6, r6
   2ee06:	e7c5      	b.n	2ed94 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   2ee08:	786b      	ldrb	r3, [r5, #1]
   2ee0a:	1e9a      	subs	r2, r3, #2
   2ee0c:	2a01      	cmp	r2, #1
   2ee0e:	d848      	bhi.n	2eea2 <bt_hci_le_adv_report+0x126>
	memcpy(dst, src, sizeof(*dst));
   2ee10:	2207      	movs	r2, #7
   2ee12:	4649      	mov	r1, r9
   2ee14:	a804      	add	r0, sp, #16
   2ee16:	f01c fd38 	bl	4b88a <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2ee1a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2ee1e:	3b02      	subs	r3, #2
   2ee20:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   2ee24:	ab04      	add	r3, sp, #16
   2ee26:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   2ee28:	f8da 3000 	ldr.w	r3, [sl]
   2ee2c:	b1a3      	cbz	r3, 2ee58 <bt_hci_le_adv_report+0xdc>
	state->offset = net_buf_simple_headroom(buf);
   2ee2e:	4640      	mov	r0, r8
   2ee30:	f020 fd43 	bl	4f8ba <net_buf_simple_headroom>
		buf->len = len;
   2ee34:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
   2ee36:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   2ee38:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
   2ee3c:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   2ee3e:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   2ee40:	4643      	mov	r3, r8
   2ee42:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   2ee46:	f8da c000 	ldr.w	ip, [sl]
   2ee4a:	a804      	add	r0, sp, #16
   2ee4c:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   2ee4e:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2ee50:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2ee52:	fa13 f38b 	uxtah	r3, r3, fp
   2ee56:	60a3      	str	r3, [r4, #8]
	return list->head;
   2ee58:	4b3a      	ldr	r3, [pc, #232]	; (2ef44 <bt_hci_le_adv_report+0x1c8>)
   2ee5a:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2ee5c:	2a00      	cmp	r2, #0
   2ee5e:	d033      	beq.n	2eec8 <bt_hci_le_adv_report+0x14c>
	return node->next;
   2ee60:	f852 7908 	ldr.w	r7, [r2], #-8
   2ee64:	b107      	cbz	r7, 2ee68 <bt_hci_le_adv_report+0xec>
   2ee66:	3f08      	subs	r7, #8
		if (listener->recv) {
   2ee68:	6813      	ldr	r3, [r2, #0]
   2ee6a:	9203      	str	r2, [sp, #12]
   2ee6c:	b193      	cbz	r3, 2ee94 <bt_hci_le_adv_report+0x118>
	state->offset = net_buf_simple_headroom(buf);
   2ee6e:	4640      	mov	r0, r8
   2ee70:	f020 fd23 	bl	4f8ba <net_buf_simple_headroom>
	state->len = buf->len;
   2ee74:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
   2ee76:	9a03      	ldr	r2, [sp, #12]
   2ee78:	9302      	str	r3, [sp, #8]
			buf->len = len;
   2ee7a:	9b01      	ldr	r3, [sp, #4]
			listener->recv(info, buf);
   2ee7c:	6812      	ldr	r2, [r2, #0]
			buf->len = len;
   2ee7e:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   2ee80:	4683      	mov	fp, r0
			listener->recv(info, buf);
   2ee82:	4641      	mov	r1, r8
   2ee84:	a808      	add	r0, sp, #32
   2ee86:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   2ee88:	6922      	ldr	r2, [r4, #16]
	buf->len = state->len;
   2ee8a:	9b02      	ldr	r3, [sp, #8]
   2ee8c:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2ee8e:	fa12 f28b 	uxtah	r2, r2, fp
   2ee92:	60a2      	str	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2ee94:	b1c7      	cbz	r7, 2eec8 <bt_hci_le_adv_report+0x14c>
   2ee96:	68bb      	ldr	r3, [r7, #8]
   2ee98:	b103      	cbz	r3, 2ee9c <bt_hci_le_adv_report+0x120>
   2ee9a:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   2ee9c:	463a      	mov	r2, r7
   2ee9e:	461f      	mov	r7, r3
   2eea0:	e7e2      	b.n	2ee68 <bt_hci_le_adv_report+0xec>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   2eea2:	2bff      	cmp	r3, #255	; 0xff
   2eea4:	d109      	bne.n	2eeba <bt_hci_le_adv_report+0x13e>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   2eea6:	2300      	movs	r3, #0
   2eea8:	9306      	str	r3, [sp, #24]
   2eeaa:	2207      	movs	r2, #7
   2eeac:	f8cd 301b 	str.w	r3, [sp, #27]
   2eeb0:	a906      	add	r1, sp, #24
   2eeb2:	a804      	add	r0, sp, #16
   2eeb4:	f01c fce9 	bl	4b88a <memcpy>
}
   2eeb8:	e7b4      	b.n	2ee24 <bt_hci_le_adv_report+0xa8>
		bt_addr_le_copy(&id_addr,
   2eeba:	4649      	mov	r1, r9
   2eebc:	2000      	movs	r0, #0
   2eebe:	f01d fa9d 	bl	4c3fc <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   2eec2:	2207      	movs	r2, #7
   2eec4:	4601      	mov	r1, r0
   2eec6:	e7f4      	b.n	2eeb2 <bt_hci_le_adv_report+0x136>
	check_pending_conn(&id_addr, addr, info->adv_props);
   2eec8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2eecc:	f7ff fe82 	bl	2ebd4 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2eed0:	0641      	lsls	r1, r0, #25
   2eed2:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   2eed6:	d48f      	bmi.n	2edf8 <bt_hci_le_adv_report+0x7c>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   2eed8:	07d2      	lsls	r2, r2, #31
   2eeda:	d58d      	bpl.n	2edf8 <bt_hci_le_adv_report+0x7c>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   2eedc:	2202      	movs	r2, #2
   2eede:	a904      	add	r1, sp, #16
   2eee0:	4658      	mov	r0, fp
   2eee2:	f000 fd67 	bl	2f9b4 <bt_conn_lookup_state_le>
	if (!conn) {
   2eee6:	4607      	mov	r7, r0
   2eee8:	2800      	cmp	r0, #0
   2eeea:	d085      	beq.n	2edf8 <bt_hci_le_adv_report+0x7c>
   2eeec:	f7ff fe72 	bl	2ebd4 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   2eef0:	0683      	lsls	r3, r0, #26
   2eef2:	d411      	bmi.n	2ef18 <bt_hci_le_adv_report+0x19c>
   2eef4:	2207      	movs	r2, #7
   2eef6:	4649      	mov	r1, r9
   2eef8:	f107 0096 	add.w	r0, r7, #150	; 0x96
   2eefc:	f01c fcc5 	bl	4b88a <memcpy>
	if (bt_le_create_conn(conn)) {
   2ef00:	4638      	mov	r0, r7
   2ef02:	f01d f815 	bl	4bf30 <bt_le_create_conn>
   2ef06:	b960      	cbnz	r0, 2ef22 <bt_hci_le_adv_report+0x1a6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   2ef08:	4638      	mov	r0, r7
   2ef0a:	2106      	movs	r1, #6
   2ef0c:	f000 fb2c 	bl	2f568 <bt_conn_set_state>
	bt_conn_unref(conn);
   2ef10:	4638      	mov	r0, r7
   2ef12:	f01d fcf3 	bl	4c8fc <bt_conn_unref>
	return;
   2ef16:	e76f      	b.n	2edf8 <bt_hci_le_adv_report+0x7c>
	return bt_le_scan_set_enable_legacy(enable);
   2ef18:	4658      	mov	r0, fp
   2ef1a:	f7ff fe65 	bl	2ebe8 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   2ef1e:	2800      	cmp	r0, #0
   2ef20:	d0e8      	beq.n	2eef4 <bt_hci_le_adv_report+0x178>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   2ef22:	231f      	movs	r3, #31
   2ef24:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2ef26:	2100      	movs	r1, #0
   2ef28:	4638      	mov	r0, r7
   2ef2a:	f000 fb1d 	bl	2f568 <bt_conn_set_state>
	bt_conn_unref(conn);
   2ef2e:	4638      	mov	r0, r7
   2ef30:	f01d fce4 	bl	4c8fc <bt_conn_unref>
	bt_le_scan_update(false);
   2ef34:	2000      	movs	r0, #0
   2ef36:	f7ff fedf 	bl	2ecf8 <bt_le_scan_update>
   2ef3a:	e75d      	b.n	2edf8 <bt_hci_le_adv_report+0x7c>
   2ef3c:	20003f84 	.word	0x20003f84
   2ef40:	00053bf3 	.word	0x00053bf3
   2ef44:	20003f7c 	.word	0x20003f7c

0002ef48 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   2ef48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ef4a:	4605      	mov	r5, r0
   2ef4c:	f7ff fe42 	bl	2ebd4 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ef50:	0780      	lsls	r0, r0, #30
{
   2ef52:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ef54:	d56d      	bpl.n	2f032 <_flash_used+0x3e>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   2ef56:	782a      	ldrb	r2, [r5, #0]
   2ef58:	2a01      	cmp	r2, #1
   2ef5a:	d903      	bls.n	2ef64 <bt_le_scan_start+0x1c>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   2ef5c:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   2ef60:	4620      	mov	r0, r4
   2ef62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   2ef64:	686b      	ldr	r3, [r5, #4]
   2ef66:	f033 030f 	bics.w	r3, r3, #15
   2ef6a:	d1f7      	bne.n	2ef5c <bt_le_scan_start+0x14>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   2ef6c:	8928      	ldrh	r0, [r5, #8]
   2ef6e:	1f03      	subs	r3, r0, #4
   2ef70:	b29b      	uxth	r3, r3
   2ef72:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   2ef76:	42a3      	cmp	r3, r4
   2ef78:	d8f0      	bhi.n	2ef5c <bt_le_scan_start+0x14>
	if (param->window < 0x0004 || param->window > 0x4000) {
   2ef7a:	8969      	ldrh	r1, [r5, #10]
   2ef7c:	1f0b      	subs	r3, r1, #4
   2ef7e:	b29b      	uxth	r3, r3
   2ef80:	42a3      	cmp	r3, r4
   2ef82:	d8eb      	bhi.n	2ef5c <bt_le_scan_start+0x14>
	if (param->window > param->interval) {
   2ef84:	4288      	cmp	r0, r1
   2ef86:	d3e9      	bcc.n	2ef5c <bt_le_scan_start+0x14>
	if (param->type && !bt_id_scan_random_addr_check()) {
   2ef88:	b992      	cbnz	r2, 2efb0 <bt_le_scan_start+0x68>
   2ef8a:	f3bf 8f5b 	dmb	ish
   2ef8e:	4e2a      	ldr	r6, [pc, #168]	; (2f038 <_flash_used+0x44>)
   2ef90:	e856 0f00 	ldrex	r0, [r6]
   2ef94:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   2ef98:	e846 3200 	strex	r2, r3, [r6]
   2ef9c:	2a00      	cmp	r2, #0
   2ef9e:	d1f7      	bne.n	2ef90 <bt_le_scan_start+0x48>
   2efa0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2efa4:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   2efa8:	d007      	beq.n	2efba <bt_le_scan_start+0x72>
		return -EALREADY;
   2efaa:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2efae:	e7d7      	b.n	2ef60 <bt_le_scan_start+0x18>
	if (param->type && !bt_id_scan_random_addr_check()) {
   2efb0:	f01d fa50 	bl	4c454 <bt_id_scan_random_addr_check>
   2efb4:	2800      	cmp	r0, #0
   2efb6:	d1e8      	bne.n	2ef8a <bt_le_scan_start+0x42>
   2efb8:	e7d0      	b.n	2ef5c <bt_le_scan_start+0x14>
   2efba:	f7ff fe0b 	bl	2ebd4 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2efbe:	0681      	lsls	r1, r0, #26
   2efc0:	d50a      	bpl.n	2efd8 <bt_le_scan_start+0x90>
	return bt_le_scan_set_enable_legacy(enable);
   2efc2:	4610      	mov	r0, r2
   2efc4:	f7ff fe10 	bl	2ebe8 <bt_le_scan_set_enable_legacy>
		if (err) {
   2efc8:	4604      	mov	r4, r0
   2efca:	b128      	cbz	r0, 2efd8 <bt_le_scan_start+0x90>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2efcc:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2efd0:	4630      	mov	r0, r6
   2efd2:	f01d fba9 	bl	4c728 <atomic_and>
		return err;
   2efd6:	e7c3      	b.n	2ef60 <bt_le_scan_start+0x18>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   2efd8:	686b      	ldr	r3, [r5, #4]
	if (val) {
   2efda:	07db      	lsls	r3, r3, #31
   2efdc:	d515      	bpl.n	2f00a <_flash_used+0x16>
   2efde:	f3bf 8f5b 	dmb	ish
   2efe2:	e856 3f00 	ldrex	r3, [r6]
   2efe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2efea:	e846 3200 	strex	r2, r3, [r6]
   2efee:	2a00      	cmp	r2, #0
   2eff0:	d1f7      	bne.n	2efe2 <bt_le_scan_start+0x9a>
   2eff2:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   2eff6:	89ab      	ldrh	r3, [r5, #12]
   2eff8:	b16b      	cbz	r3, 2f016 <_flash_used+0x22>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2effa:	480f      	ldr	r0, [pc, #60]	; (2f038 <_flash_used+0x44>)
   2effc:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f000:	f01d fb92 	bl	4c728 <atomic_and>
			return -ENOTSUP;
   2f004:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2f008:	e7aa      	b.n	2ef60 <bt_le_scan_start+0x18>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f00a:	f46f 7180 	mvn.w	r1, #256	; 0x100
   2f00e:	480a      	ldr	r0, [pc, #40]	; (2f038 <_flash_used+0x44>)
   2f010:	f01d fb8a 	bl	4c728 <atomic_and>
   2f014:	e7ef      	b.n	2eff6 <_flash_used+0x2>
		err = start_le_scan_legacy(param->type, param->interval,
   2f016:	896a      	ldrh	r2, [r5, #10]
   2f018:	8929      	ldrh	r1, [r5, #8]
   2f01a:	7828      	ldrb	r0, [r5, #0]
   2f01c:	f7ff fe14 	bl	2ec48 <start_le_scan_legacy>
	if (err) {
   2f020:	4604      	mov	r4, r0
   2f022:	b118      	cbz	r0, 2f02c <_flash_used+0x38>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f024:	4804      	ldr	r0, [pc, #16]	; (2f038 <_flash_used+0x44>)
   2f026:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f02a:	e7d2      	b.n	2efd2 <bt_le_scan_start+0x8a>
	scan_dev_found_cb = cb;
   2f02c:	4b03      	ldr	r3, [pc, #12]	; (2f03c <_flash_used+0x48>)
   2f02e:	601f      	str	r7, [r3, #0]
	return 0;
   2f030:	e796      	b.n	2ef60 <bt_le_scan_start+0x18>
		return -EAGAIN;
   2f032:	f06f 040a 	mvn.w	r4, #10
   2f036:	e793      	b.n	2ef60 <bt_le_scan_start+0x18>
   2f038:	200000cc 	.word	0x200000cc
   2f03c:	20003f84 	.word	0x20003f84

0002f040 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   2f040:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f042:	4808      	ldr	r0, [pc, #32]	; (2f064 <bt_le_scan_stop+0x24>)
   2f044:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f048:	f01d fb6e 	bl	4c728 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f04c:	0643      	lsls	r3, r0, #25
   2f04e:	d506      	bpl.n	2f05e <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   2f050:	4b05      	ldr	r3, [pc, #20]	; (2f068 <bt_le_scan_stop+0x28>)
   2f052:	2000      	movs	r0, #0
   2f054:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   2f056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   2f05a:	f7ff be4d 	b.w	2ecf8 <bt_le_scan_update>
}
   2f05e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f062:	bd08      	pop	{r3, pc}
   2f064:	200000cc 	.word	0x200000cc
   2f068:	20003f84 	.word	0x20003f84

0002f06c <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   2f06c:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   2f06e:	4904      	ldr	r1, [pc, #16]	; (2f080 <bt_pub_key_is_debug+0x14>)
   2f070:	2240      	movs	r2, #64	; 0x40
   2f072:	f01c fbfa 	bl	4b86a <memcmp>
}
   2f076:	fab0 f080 	clz	r0, r0
   2f07a:	0940      	lsrs	r0, r0, #5
   2f07c:	bd08      	pop	{r3, pc}
   2f07e:	bf00      	nop
   2f080:	00053bf8 	.word	0x00053bf8

0002f084 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   2f084:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   2f086:	4b31      	ldr	r3, [pc, #196]	; (2f14c <bt_pub_key_gen+0xc8>)
   2f088:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2f08c:	f003 0306 	and.w	r3, r3, #6
   2f090:	2b06      	cmp	r3, #6
   2f092:	d152      	bne.n	2f13a <bt_pub_key_gen+0xb6>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   2f094:	2800      	cmp	r0, #0
   2f096:	d053      	beq.n	2f140 <bt_pub_key_gen+0xbc>
	return list->head;
   2f098:	4e2d      	ldr	r6, [pc, #180]	; (2f150 <bt_pub_key_gen+0xcc>)
   2f09a:	6832      	ldr	r2, [r6, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f09c:	b132      	cbz	r2, 2f0ac <bt_pub_key_gen+0x28>
   2f09e:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   2f0a0:	4298      	cmp	r0, r3
   2f0a2:	d050      	beq.n	2f146 <bt_pub_key_gen+0xc2>
	return node->next;
   2f0a4:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f0a6:	b10b      	cbz	r3, 2f0ac <bt_pub_key_gen+0x28>
   2f0a8:	3b04      	subs	r3, #4
   2f0aa:	e7f9      	b.n	2f0a0 <bt_pub_key_gen+0x1c>
	parent->next = child;
   2f0ac:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   2f0ae:	6872      	ldr	r2, [r6, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   2f0b0:	1d03      	adds	r3, r0, #4
	list->head = node;
   2f0b2:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f0b4:	b902      	cbnz	r2, 2f0b8 <bt_pub_key_gen+0x34>
	list->tail = node;
   2f0b6:	6073      	str	r3, [r6, #4]
   2f0b8:	4c26      	ldr	r4, [pc, #152]	; (2f154 <bt_pub_key_gen+0xd0>)
   2f0ba:	f3bf 8f5b 	dmb	ish
   2f0be:	e854 2f00 	ldrex	r2, [r4]
   2f0c2:	f042 0310 	orr.w	r3, r2, #16
   2f0c6:	e844 3100 	strex	r1, r3, [r4]
   2f0ca:	2900      	cmp	r1, #0
   2f0cc:	d1f7      	bne.n	2f0be <bt_pub_key_gen+0x3a>
   2f0ce:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2f0d2:	f012 0210 	ands.w	r2, r2, #16
   2f0d6:	d002      	beq.n	2f0de <bt_pub_key_gen+0x5a>
		return 0;
   2f0d8:	2500      	movs	r5, #0
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   2f0da:	4628      	mov	r0, r5
   2f0dc:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f0de:	f3bf 8f5b 	dmb	ish
   2f0e2:	e854 3f00 	ldrex	r3, [r4]
   2f0e6:	f023 0308 	bic.w	r3, r3, #8
   2f0ea:	e844 3100 	strex	r1, r3, [r4]
   2f0ee:	2900      	cmp	r1, #0
   2f0f0:	d1f7      	bne.n	2f0e2 <bt_pub_key_gen+0x5e>
   2f0f2:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   2f0f6:	4611      	mov	r1, r2
   2f0f8:	f242 0025 	movw	r0, #8229	; 0x2025
   2f0fc:	f7fe fb66 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   2f100:	4605      	mov	r5, r0
   2f102:	2800      	cmp	r0, #0
   2f104:	d0e8      	beq.n	2f0d8 <bt_pub_key_gen+0x54>
   2f106:	f3bf 8f5b 	dmb	ish
   2f10a:	e854 3f00 	ldrex	r3, [r4]
   2f10e:	f023 0310 	bic.w	r3, r3, #16
   2f112:	e844 3200 	strex	r2, r3, [r4]
   2f116:	2a00      	cmp	r2, #0
   2f118:	d1f7      	bne.n	2f10a <bt_pub_key_gen+0x86>
   2f11a:	f3bf 8f5b 	dmb	ish
	return list->head;
   2f11e:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f120:	b13c      	cbz	r4, 2f132 <bt_pub_key_gen+0xae>
			if (cb->func) {
   2f122:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f126:	3c04      	subs	r4, #4
			if (cb->func) {
   2f128:	b10b      	cbz	r3, 2f12e <bt_pub_key_gen+0xaa>
				cb->func(NULL);
   2f12a:	2000      	movs	r0, #0
   2f12c:	4798      	blx	r3
	return node->next;
   2f12e:	6864      	ldr	r4, [r4, #4]
   2f130:	e7f6      	b.n	2f120 <bt_pub_key_gen+0x9c>
	list->head = NULL;
   2f132:	2300      	movs	r3, #0
	list->tail = NULL;
   2f134:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   2f138:	e7cf      	b.n	2f0da <bt_pub_key_gen+0x56>
		return -ENOTSUP;
   2f13a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2f13e:	e7cc      	b.n	2f0da <bt_pub_key_gen+0x56>
		return -EINVAL;
   2f140:	f06f 0515 	mvn.w	r5, #21
   2f144:	e7c9      	b.n	2f0da <bt_pub_key_gen+0x56>
			return -EALREADY;
   2f146:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2f14a:	e7c6      	b.n	2f0da <bt_pub_key_gen+0x56>
   2f14c:	20000000 	.word	0x20000000
   2f150:	20003f8c 	.word	0x20003f8c
   2f154:	200000cc 	.word	0x200000cc

0002f158 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f158:	4b05      	ldr	r3, [pc, #20]	; (2f170 <bt_pub_key_get+0x18>)
   2f15a:	f3bf 8f5b 	dmb	ish
   2f15e:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   2f160:	4804      	ldr	r0, [pc, #16]	; (2f174 <bt_pub_key_get+0x1c>)
   2f162:	f3bf 8f5b 	dmb	ish
		return pub_key;
   2f166:	f013 0f08 	tst.w	r3, #8
}
   2f16a:	bf08      	it	eq
   2f16c:	2000      	moveq	r0, #0
   2f16e:	4770      	bx	lr
   2f170:	200000cc 	.word	0x200000cc
   2f174:	20006d8e 	.word	0x20006d8e

0002f178 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   2f178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   2f17a:	4d1f      	ldr	r5, [pc, #124]	; (2f1f8 <bt_dh_key_gen+0x80>)
   2f17c:	682b      	ldr	r3, [r5, #0]
   2f17e:	428b      	cmp	r3, r1
{
   2f180:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   2f182:	d032      	beq.n	2f1ea <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2f184:	b113      	cbz	r3, 2f18c <bt_dh_key_gen+0x14>
		return -EBUSY;
   2f186:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   2f18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f18c:	4b1b      	ldr	r3, [pc, #108]	; (2f1fc <bt_dh_key_gen+0x84>)
   2f18e:	f3bf 8f5b 	dmb	ish
   2f192:	681a      	ldr	r2, [r3, #0]
   2f194:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2f198:	f3c2 1700 	ubfx	r7, r2, #4, #1
   2f19c:	06d2      	lsls	r2, r2, #27
   2f19e:	d4f2      	bmi.n	2f186 <bt_dh_key_gen+0xe>
   2f1a0:	f3bf 8f5b 	dmb	ish
   2f1a4:	681b      	ldr	r3, [r3, #0]
   2f1a6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   2f1aa:	071b      	lsls	r3, r3, #28
   2f1ac:	d520      	bpl.n	2f1f0 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   2f1ae:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   2f1b0:	f242 0026 	movw	r0, #8230	; 0x2026
   2f1b4:	2140      	movs	r1, #64	; 0x40
   2f1b6:	f7fe faad 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   2f1ba:	4604      	mov	r4, r0
   2f1bc:	b190      	cbz	r0, 2f1e4 <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   2f1be:	2140      	movs	r1, #64	; 0x40
   2f1c0:	3008      	adds	r0, #8
   2f1c2:	f020 fb31 	bl	4f828 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   2f1c6:	2240      	movs	r2, #64	; 0x40
   2f1c8:	4631      	mov	r1, r6
   2f1ca:	f01c fb5e 	bl	4b88a <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   2f1ce:	463a      	mov	r2, r7
   2f1d0:	4621      	mov	r1, r4
   2f1d2:	f242 0026 	movw	r0, #8230	; 0x2026
   2f1d6:	f7fe faf9 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   2f1da:	2800      	cmp	r0, #0
   2f1dc:	d0d5      	beq.n	2f18a <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   2f1de:	2300      	movs	r3, #0
   2f1e0:	602b      	str	r3, [r5, #0]
		return err;
   2f1e2:	e7d2      	b.n	2f18a <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   2f1e4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2f1e8:	e7f9      	b.n	2f1de <bt_dh_key_gen+0x66>
		return -EALREADY;
   2f1ea:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f1ee:	e7cc      	b.n	2f18a <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   2f1f0:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   2f1f4:	e7c9      	b.n	2f18a <bt_dh_key_gen+0x12>
   2f1f6:	bf00      	nop
   2f1f8:	20003f88 	.word	0x20003f88
   2f1fc:	200000cc 	.word	0x200000cc

0002f200 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   2f200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f202:	4c1b      	ldr	r4, [pc, #108]	; (2f270 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   2f204:	6886      	ldr	r6, [r0, #8]
   2f206:	f3bf 8f5b 	dmb	ish
   2f20a:	e854 3f00 	ldrex	r3, [r4]
   2f20e:	f023 0310 	bic.w	r3, r3, #16
   2f212:	e844 3200 	strex	r2, r3, [r4]
   2f216:	2a00      	cmp	r2, #0
   2f218:	d1f7      	bne.n	2f20a <bt_hci_evt_le_pkey_complete+0xa>
   2f21a:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   2f21e:	7833      	ldrb	r3, [r6, #0]
   2f220:	b983      	cbnz	r3, 2f244 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   2f222:	4814      	ldr	r0, [pc, #80]	; (2f274 <bt_hci_evt_le_pkey_complete+0x74>)
   2f224:	2240      	movs	r2, #64	; 0x40
   2f226:	1c71      	adds	r1, r6, #1
   2f228:	f01c fb2f 	bl	4b88a <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2f22c:	f3bf 8f5b 	dmb	ish
   2f230:	e854 3f00 	ldrex	r3, [r4]
   2f234:	f043 0308 	orr.w	r3, r3, #8
   2f238:	e844 3200 	strex	r2, r3, [r4]
   2f23c:	2a00      	cmp	r2, #0
   2f23e:	d1f7      	bne.n	2f230 <bt_hci_evt_le_pkey_complete+0x30>
   2f240:	f3bf 8f5b 	dmb	ish
	return list->head;
   2f244:	4d0c      	ldr	r5, [pc, #48]	; (2f278 <bt_hci_evt_le_pkey_complete+0x78>)
   2f246:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f248:	b16c      	cbz	r4, 2f266 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   2f24a:	4f0a      	ldr	r7, [pc, #40]	; (2f274 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f24c:	3c04      	subs	r4, #4
		if (cb->func) {
   2f24e:	6823      	ldr	r3, [r4, #0]
   2f250:	b12b      	cbz	r3, 2f25e <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   2f252:	7832      	ldrb	r2, [r6, #0]
   2f254:	2a00      	cmp	r2, #0
   2f256:	bf0c      	ite	eq
   2f258:	4638      	moveq	r0, r7
   2f25a:	2000      	movne	r0, #0
   2f25c:	4798      	blx	r3
	return node->next;
   2f25e:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f260:	b10c      	cbz	r4, 2f266 <bt_hci_evt_le_pkey_complete+0x66>
   2f262:	3c04      	subs	r4, #4
   2f264:	e7f3      	b.n	2f24e <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   2f266:	2300      	movs	r3, #0
	list->tail = NULL;
   2f268:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   2f26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f26e:	bf00      	nop
   2f270:	200000cc 	.word	0x200000cc
   2f274:	20006d8e 	.word	0x20006d8e
   2f278:	20003f8c 	.word	0x20003f8c

0002f27c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   2f27c:	4905      	ldr	r1, [pc, #20]	; (2f294 <bt_hci_evt_le_dhkey_complete+0x18>)
   2f27e:	680b      	ldr	r3, [r1, #0]
   2f280:	b133      	cbz	r3, 2f290 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   2f282:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   2f284:	2000      	movs	r0, #0
   2f286:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   2f288:	7811      	ldrb	r1, [r2, #0]
   2f28a:	b901      	cbnz	r1, 2f28e <bt_hci_evt_le_dhkey_complete+0x12>
   2f28c:	1c50      	adds	r0, r2, #1
   2f28e:	4718      	bx	r3
	}
}
   2f290:	4770      	bx	lr
   2f292:	bf00      	nop
   2f294:	20003f88 	.word	0x20003f88

0002f298 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   2f298:	2300      	movs	r3, #0
	tx->user_data = NULL;
   2f29a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   2f29e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   2f2a0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   2f2a2:	4801      	ldr	r0, [pc, #4]	; (2f2a8 <tx_free+0x10>)
   2f2a4:	f021 b9cd 	b.w	50642 <k_queue_append>
   2f2a8:	2000103c 	.word	0x2000103c

0002f2ac <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2f2ac:	4b0e      	ldr	r3, [pc, #56]	; (2f2e8 <notify_connected+0x3c>)
{
   2f2ae:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   2f2b0:	681d      	ldr	r5, [r3, #0]
{
   2f2b2:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   2f2b4:	b955      	cbnz	r5, 2f2cc <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f2b6:	4d0d      	ldr	r5, [pc, #52]	; (2f2ec <notify_connected+0x40>)
   2f2b8:	4e0d      	ldr	r6, [pc, #52]	; (2f2f0 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
   2f2ba:	7b21      	ldrb	r1, [r4, #12]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f2bc:	42b5      	cmp	r5, r6
   2f2be:	d30c      	bcc.n	2f2da <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
   2f2c0:	b989      	cbnz	r1, 2f2e6 <notify_connected+0x3a>
		bt_gatt_connected(conn);
   2f2c2:	4620      	mov	r0, r4
	}
}
   2f2c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
   2f2c8:	f002 bf0c 	b.w	320e4 <bt_gatt_connected>
		if (cb->connected) {
   2f2cc:	682b      	ldr	r3, [r5, #0]
   2f2ce:	b113      	cbz	r3, 2f2d6 <notify_connected+0x2a>
			cb->connected(conn, conn->err);
   2f2d0:	7b21      	ldrb	r1, [r4, #12]
   2f2d2:	4620      	mov	r0, r4
   2f2d4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2f2d6:	69ed      	ldr	r5, [r5, #28]
   2f2d8:	e7ec      	b.n	2f2b4 <notify_connected+0x8>
		if (cb->connected) {
   2f2da:	682b      	ldr	r3, [r5, #0]
   2f2dc:	b10b      	cbz	r3, 2f2e2 <notify_connected+0x36>
			cb->connected(conn, conn->err);
   2f2de:	4620      	mov	r0, r4
   2f2e0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f2e2:	3520      	adds	r5, #32
   2f2e4:	e7e9      	b.n	2f2ba <notify_connected+0xe>
}
   2f2e6:	bd70      	pop	{r4, r5, r6, pc}
   2f2e8:	20003f98 	.word	0x20003f98
   2f2ec:	0005135c 	.word	0x0005135c
   2f2f0:	0005135c 	.word	0x0005135c

0002f2f4 <send_frag>:
{
   2f2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   2f2f8:	694d      	ldr	r5, [r1, #20]
{
   2f2fa:	4604      	mov	r4, r0
   2f2fc:	460e      	mov	r6, r1
   2f2fe:	4690      	mov	r8, r2
   2f300:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   2f302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f306:	483e      	ldr	r0, [pc, #248]	; (2f400 <send_frag+0x10c>)
   2f308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f30c:	f018 fc9c 	bl	47c48 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   2f310:	7b63      	ldrb	r3, [r4, #13]
   2f312:	2b07      	cmp	r3, #7
   2f314:	d146      	bne.n	2f3a4 <send_frag+0xb0>
	__asm__ volatile(
   2f316:	f04f 0320 	mov.w	r3, #32
   2f31a:	f3ef 8211 	mrs	r2, BASEPRI
   2f31e:	f383 8812 	msr	BASEPRI_MAX, r3
   2f322:	f3bf 8f6f 	isb	sy
	if (tx) {
   2f326:	69a3      	ldr	r3, [r4, #24]
   2f328:	2d00      	cmp	r5, #0
   2f32a:	d04d      	beq.n	2f3c8 <send_frag+0xd4>
	parent->next = child;
   2f32c:	2100      	movs	r1, #0
   2f32e:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   2f330:	2b00      	cmp	r3, #0
   2f332:	d146      	bne.n	2f3c2 <send_frag+0xce>
	list->head = node;
   2f334:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   2f338:	f382 8811 	msr	BASEPRI, r2
   2f33c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   2f340:	2104      	movs	r1, #4
   2f342:	f106 0008 	add.w	r0, r6, #8
   2f346:	f020 fa90 	bl	4f86a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2f34a:	8823      	ldrh	r3, [r4, #0]
   2f34c:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   2f350:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2f354:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2f356:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2f35a:	3b04      	subs	r3, #4
   2f35c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2f35e:	2302      	movs	r3, #2
   2f360:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   2f362:	4630      	mov	r0, r6
   2f364:	f01c ff50 	bl	4c208 <bt_send>
	if (err) {
   2f368:	2800      	cmp	r0, #0
   2f36a:	d047      	beq.n	2f3fc <send_frag+0x108>
	__asm__ volatile(
   2f36c:	f04f 0320 	mov.w	r3, #32
   2f370:	f3ef 8011 	mrs	r0, BASEPRI
   2f374:	f383 8812 	msr	BASEPRI_MAX, r3
   2f378:	f3bf 8f6f 	isb	sy
		if (tx) {
   2f37c:	2d00      	cmp	r5, #0
   2f37e:	d037      	beq.n	2f3f0 <send_frag+0xfc>
	return list->head;
   2f380:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f382:	2200      	movs	r2, #0
   2f384:	b153      	cbz	r3, 2f39c <send_frag+0xa8>
   2f386:	429d      	cmp	r5, r3
   2f388:	d12f      	bne.n	2f3ea <send_frag+0xf6>
	return node->next;
   2f38a:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   2f38c:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   2f38e:	bb3a      	cbnz	r2, 2f3e0 <send_frag+0xec>
   2f390:	42a9      	cmp	r1, r5
	list->head = node;
   2f392:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   2f394:	d100      	bne.n	2f398 <send_frag+0xa4>
	list->tail = node;
   2f396:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   2f398:	2300      	movs	r3, #0
   2f39a:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   2f39c:	f380 8811 	msr	BASEPRI, r0
   2f3a0:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2f3a4:	4816      	ldr	r0, [pc, #88]	; (2f400 <send_frag+0x10c>)
   2f3a6:	f018 fc29 	bl	47bfc <z_impl_k_sem_give>
	if (tx) {
   2f3aa:	b115      	cbz	r5, 2f3b2 <send_frag+0xbe>
		tx_free(tx);
   2f3ac:	4628      	mov	r0, r5
   2f3ae:	f7ff ff73 	bl	2f298 <tx_free>
	if (always_consume) {
   2f3b2:	b11f      	cbz	r7, 2f3bc <send_frag+0xc8>
		net_buf_unref(buf);
   2f3b4:	4630      	mov	r0, r6
   2f3b6:	f014 f88f 	bl	434d8 <net_buf_unref>
	return false;
   2f3ba:	2700      	movs	r7, #0
}
   2f3bc:	4638      	mov	r0, r7
   2f3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2f3c2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2f3c4:	61a5      	str	r5, [r4, #24]
}
   2f3c6:	e7b7      	b.n	2f338 <send_frag+0x44>
		if (tail_tx) {
   2f3c8:	b133      	cbz	r3, 2f3d8 <send_frag+0xe4>
			pending_no_cb = &tail_tx->pending_no_cb;
   2f3ca:	f103 090c 	add.w	r9, r3, #12
   2f3ce:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   2f3d0:	3301      	adds	r3, #1
   2f3d2:	f8c9 3000 	str.w	r3, [r9]
   2f3d6:	e7af      	b.n	2f338 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   2f3d8:	69e3      	ldr	r3, [r4, #28]
   2f3da:	f104 091c 	add.w	r9, r4, #28
   2f3de:	e7f7      	b.n	2f3d0 <send_frag+0xdc>
Z_GENLIST_REMOVE(slist, snode)
   2f3e0:	42a9      	cmp	r1, r5
	parent->next = child;
   2f3e2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2f3e4:	bf08      	it	eq
   2f3e6:	61a2      	streq	r2, [r4, #24]
}
   2f3e8:	e7d6      	b.n	2f398 <send_frag+0xa4>
	return node->next;
   2f3ea:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f3ec:	681b      	ldr	r3, [r3, #0]
   2f3ee:	e7c9      	b.n	2f384 <send_frag+0x90>
			(*pending_no_cb)--;
   2f3f0:	f8d9 3000 	ldr.w	r3, [r9]
   2f3f4:	3b01      	subs	r3, #1
   2f3f6:	f8c9 3000 	str.w	r3, [r9]
   2f3fa:	e7cf      	b.n	2f39c <send_frag+0xa8>
	return true;
   2f3fc:	2701      	movs	r7, #1
   2f3fe:	e7dd      	b.n	2f3bc <send_frag+0xc8>
   2f400:	20000100 	.word	0x20000100

0002f404 <bt_conn_get_pkts>:
}
   2f404:	4800      	ldr	r0, [pc, #0]	; (2f408 <bt_conn_get_pkts+0x4>)
   2f406:	4770      	bx	lr
   2f408:	20000100 	.word	0x20000100

0002f40c <bt_conn_new>:
{
   2f40c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   2f40e:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2f410:	2501      	movs	r5, #1
   2f412:	428b      	cmp	r3, r1
   2f414:	d102      	bne.n	2f41c <bt_conn_new+0x10>
		return NULL;
   2f416:	2400      	movs	r4, #0
}
   2f418:	4620      	mov	r0, r4
   2f41a:	bd38      	pop	{r3, r4, r5, pc}
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2f41c:	4604      	mov	r4, r0
   2f41e:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   2f422:	f3bf 8f5b 	dmb	ish
   2f426:	e852 0f00 	ldrex	r0, [r2]
   2f42a:	2800      	cmp	r0, #0
   2f42c:	d104      	bne.n	2f438 <bt_conn_new+0x2c>
   2f42e:	e842 5c00 	strex	ip, r5, [r2]
   2f432:	f1bc 0f00 	cmp.w	ip, #0
   2f436:	d1f6      	bne.n	2f426 <bt_conn_new+0x1a>
   2f438:	f3bf 8f5b 	dmb	ish
   2f43c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   2f440:	d001      	beq.n	2f446 <bt_conn_new+0x3a>
	for (i = 0; i < size; i++) {
   2f442:	3301      	adds	r3, #1
   2f444:	e7e5      	b.n	2f412 <bt_conn_new+0x6>
	if (!conn) {
   2f446:	2c00      	cmp	r4, #0
   2f448:	d0e6      	beq.n	2f418 <bt_conn_new+0xc>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   2f44a:	22bc      	movs	r2, #188	; 0xbc
   2f44c:	2100      	movs	r1, #0
   2f44e:	4620      	mov	r0, r4
   2f450:	f01c fa26 	bl	4b8a0 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   2f454:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2f458:	4904      	ldr	r1, [pc, #16]	; (2f46c <bt_conn_new+0x60>)
   2f45a:	f021 f9e9 	bl	50830 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   2f45e:	4904      	ldr	r1, [pc, #16]	; (2f470 <bt_conn_new+0x64>)
   2f460:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2f464:	f021 f9be 	bl	507e4 <k_work_init>
	return conn;
   2f468:	e7d6      	b.n	2f418 <bt_conn_new+0xc>
   2f46a:	bf00      	nop
   2f46c:	0002fced 	.word	0x0002fced
   2f470:	0004c7d9 	.word	0x0004c7d9

0002f474 <bt_conn_send_cb>:
{
   2f474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f476:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   2f478:	7b43      	ldrb	r3, [r0, #13]
   2f47a:	2b07      	cmp	r3, #7
{
   2f47c:	4604      	mov	r4, r0
   2f47e:	460e      	mov	r6, r1
   2f480:	4615      	mov	r5, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2f482:	d114      	bne.n	2f4ae <bt_conn_send_cb+0x3a>
	if (cb) {
   2f484:	b312      	cbz	r2, 2f4cc <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   2f486:	f019 f8b5 	bl	485f4 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   2f48a:	4b13      	ldr	r3, [pc, #76]	; (2f4d8 <bt_conn_send_cb+0x64>)
   2f48c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   2f48e:	4813      	ldr	r0, [pc, #76]	; (2f4dc <bt_conn_send_cb+0x68>)
   2f490:	bf07      	ittee	eq
   2f492:	2200      	moveq	r2, #0
   2f494:	2300      	moveq	r3, #0
   2f496:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2f49a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2f49e:	f018 fb79 	bl	47b94 <z_impl_k_queue_get>
		if (!tx) {
   2f4a2:	b1a8      	cbz	r0, 2f4d0 <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   2f4a4:	7b63      	ldrb	r3, [r4, #13]
   2f4a6:	2b07      	cmp	r3, #7
   2f4a8:	d004      	beq.n	2f4b4 <bt_conn_send_cb+0x40>
			tx_free(tx);
   2f4aa:	f7ff fef5 	bl	2f298 <tx_free>
		return -ENOTCONN;
   2f4ae:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2f4b2:	e00a      	b.n	2f4ca <bt_conn_send_cb+0x56>
		tx->user_data = user_data;
   2f4b4:	e9c0 5701 	strd	r5, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   2f4b8:	2300      	movs	r3, #0
   2f4ba:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   2f4bc:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   2f4be:	4631      	mov	r1, r6
   2f4c0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2f4c4:	f020 f971 	bl	4f7aa <net_buf_put>
	return 0;
   2f4c8:	2000      	movs	r0, #0
}
   2f4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f4cc:	4610      	mov	r0, r2
   2f4ce:	e7f5      	b.n	2f4bc <bt_conn_send_cb+0x48>
			return -ENOBUFS;
   2f4d0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2f4d4:	e7f9      	b.n	2f4ca <bt_conn_send_cb+0x56>
   2f4d6:	bf00      	nop
   2f4d8:	20003af0 	.word	0x20003af0
   2f4dc:	2000103c 	.word	0x2000103c

0002f4e0 <bt_conn_prepare_events>:
{
   2f4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	conn_change.signaled = 0U;
   2f4e4:	4b1a      	ldr	r3, [pc, #104]	; (2f550 <bt_conn_prepare_events+0x70>)
   2f4e6:	4c1b      	ldr	r4, [pc, #108]	; (2f554 <bt_conn_prepare_events+0x74>)
   2f4e8:	2500      	movs	r5, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2f4ea:	462a      	mov	r2, r5
   2f4ec:	2101      	movs	r1, #1
{
   2f4ee:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   2f4f0:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2f4f2:	f021 fcba 	bl	50e6a <k_poll_event_init>
   2f4f6:	2601      	movs	r6, #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2f4f8:	f04f 0914 	mov.w	r9, #20
	if (!atomic_get(&conn->ref)) {
   2f4fc:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2f500:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   2f504:	f01d f930 	bl	4c768 <atomic_get>
   2f508:	b158      	cbz	r0, 2f522 <bt_conn_prepare_events+0x42>
	if (conn->state == BT_CONN_DISCONNECTED &&
   2f50a:	7b63      	ldrb	r3, [r4, #13]
   2f50c:	b98b      	cbnz	r3, 2f532 <bt_conn_prepare_events+0x52>
   2f50e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f512:	1d20      	adds	r0, r4, #4
   2f514:	f01d f919 	bl	4c74a <atomic_and>
   2f518:	0643      	lsls	r3, r0, #25
   2f51a:	d50a      	bpl.n	2f532 <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   2f51c:	4620      	mov	r0, r4
   2f51e:	f01d f967 	bl	4c7f0 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2f522:	3501      	adds	r5, #1
   2f524:	2d06      	cmp	r5, #6
   2f526:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   2f52a:	d1e7      	bne.n	2f4fc <bt_conn_prepare_events+0x1c>
}
   2f52c:	4630      	mov	r0, r6
   2f52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   2f532:	7b63      	ldrb	r3, [r4, #13]
   2f534:	2b07      	cmp	r3, #7
   2f536:	d1f4      	bne.n	2f522 <bt_conn_prepare_events+0x42>
	k_poll_event_init(&events[0],
   2f538:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2f53c:	2200      	movs	r2, #0
   2f53e:	2104      	movs	r1, #4
   2f540:	4640      	mov	r0, r8
   2f542:	f021 fc92 	bl	50e6a <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2f546:	2301      	movs	r3, #1
   2f548:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   2f54c:	441e      	add	r6, r3
   2f54e:	e7e8      	b.n	2f522 <bt_conn_prepare_events+0x42>
   2f550:	20000598 	.word	0x20000598
   2f554:	20001518 	.word	0x20001518

0002f558 <bt_conn_lookup_handle>:
{
   2f558:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   2f55a:	2106      	movs	r1, #6
   2f55c:	4801      	ldr	r0, [pc, #4]	; (2f564 <bt_conn_lookup_handle+0xc>)
   2f55e:	f01d b9e6 	b.w	4c92e <conn_lookup_handle>
   2f562:	bf00      	nop
   2f564:	20001518 	.word	0x20001518

0002f568 <bt_conn_set_state>:
{
   2f568:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   2f56a:	7b45      	ldrb	r5, [r0, #13]
   2f56c:	428d      	cmp	r5, r1
{
   2f56e:	4604      	mov	r4, r0
	if (conn->state == state) {
   2f570:	f000 80c1 	beq.w	2f6f6 <bt_conn_set_state+0x18e>
	conn->state = state;
   2f574:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   2f576:	b15d      	cbz	r5, 2f590 <bt_conn_set_state+0x28>
   2f578:	2d06      	cmp	r5, #6
   2f57a:	d00f      	beq.n	2f59c <bt_conn_set_state+0x34>
	switch (conn->state) {
   2f57c:	7b63      	ldrb	r3, [r4, #13]
   2f57e:	2b07      	cmp	r3, #7
   2f580:	f200 80b9 	bhi.w	2f6f6 <bt_conn_set_state+0x18e>
   2f584:	e8df f003 	tbb	[pc, r3]
   2f588:	b7b71143 	.word	0xb7b71143
   2f58c:	2879b7b7 	.word	0x2879b7b7
		if (conn->type != BT_CONN_TYPE_ISO) {
   2f590:	7883      	ldrb	r3, [r0, #2]
   2f592:	2b08      	cmp	r3, #8
   2f594:	d0f2      	beq.n	2f57c <bt_conn_set_state+0x14>
			bt_conn_ref(conn);
   2f596:	f01d f996 	bl	4c8c6 <bt_conn_ref>
   2f59a:	e7ef      	b.n	2f57c <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2f59c:	7883      	ldrb	r3, [r0, #2]
   2f59e:	2b01      	cmp	r3, #1
   2f5a0:	d1ec      	bne.n	2f57c <bt_conn_set_state+0x14>
			k_work_cancel_delayable(&conn->deferred_work);
   2f5a2:	3058      	adds	r0, #88	; 0x58
   2f5a4:	f021 f950 	bl	50848 <k_work_cancel_delayable>
   2f5a8:	e7e8      	b.n	2f57c <bt_conn_set_state+0x14>
	z_impl_k_sem_give(sem);
   2f5aa:	4d53      	ldr	r5, [pc, #332]	; (2f6f8 <bt_conn_set_state+0x190>)
		tx->pending_no_cb = 0U;
   2f5ac:	2600      	movs	r6, #0
	__asm__ volatile(
   2f5ae:	f04f 0320 	mov.w	r3, #32
   2f5b2:	f3ef 8211 	mrs	r2, BASEPRI
   2f5b6:	f383 8812 	msr	BASEPRI_MAX, r3
   2f5ba:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2f5be:	69e3      	ldr	r3, [r4, #28]
   2f5c0:	2b00      	cmp	r3, #0
   2f5c2:	d079      	beq.n	2f6b8 <bt_conn_set_state+0x150>
			conn->pending_no_cb--;
   2f5c4:	3b01      	subs	r3, #1
   2f5c6:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   2f5c8:	f382 8811 	msr	BASEPRI, r2
   2f5cc:	f3bf 8f6f 	isb	sy
   2f5d0:	4628      	mov	r0, r5
   2f5d2:	f018 fb13 	bl	47bfc <z_impl_k_sem_give>
}
   2f5d6:	e7ea      	b.n	2f5ae <bt_conn_set_state+0x46>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2f5d8:	78a3      	ldrb	r3, [r4, #2]
   2f5da:	2b04      	cmp	r3, #4
   2f5dc:	f000 808b 	beq.w	2f6f6 <bt_conn_set_state+0x18e>
	z_impl_k_queue_init(queue);
   2f5e0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2f5e4:	f021 f821 	bl	5062a <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   2f5e8:	4844      	ldr	r0, [pc, #272]	; (2f6fc <bt_conn_set_state+0x194>)
   2f5ea:	2100      	movs	r1, #0
   2f5ec:	f019 fabc 	bl	48b68 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   2f5f0:	2300      	movs	r3, #0
	list->tail = NULL;
   2f5f2:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2f5f6:	78e3      	ldrb	r3, [r4, #3]
   2f5f8:	2b01      	cmp	r3, #1
   2f5fa:	d17c      	bne.n	2f6f6 <bt_conn_set_state+0x18e>
			k_work_schedule(&conn->deferred_work,
   2f5fc:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   2f600:	2300      	movs	r3, #0
   2f602:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
   2f606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   2f60a:	f018 bcd5 	b.w	47fb8 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2f60e:	78a3      	ldrb	r3, [r4, #2]
   2f610:	2b04      	cmp	r3, #4
   2f612:	d104      	bne.n	2f61e <bt_conn_set_state+0xb6>
			bt_conn_unref(conn);
   2f614:	4620      	mov	r0, r4
}
   2f616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2f61a:	f01d b96f 	b.w	4c8fc <bt_conn_unref>
		switch (old_state) {
   2f61e:	3d01      	subs	r5, #1
   2f620:	2d05      	cmp	r5, #5
   2f622:	d868      	bhi.n	2f6f6 <bt_conn_set_state+0x18e>
   2f624:	a301      	add	r3, pc, #4	; (adr r3, 2f62c <bt_conn_set_state+0xc4>)
   2f626:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   2f62a:	bf00      	nop
   2f62c:	0002f645 	.word	0x0002f645
   2f630:	0002f66d 	.word	0x0002f66d
   2f634:	0002f615 	.word	0x0002f615
   2f638:	0002f615 	.word	0x0002f615
   2f63c:	0002f66d 	.word	0x0002f66d
   2f640:	0002f66d 	.word	0x0002f66d
			tx_notify(conn);
   2f644:	4620      	mov	r0, r4
   2f646:	f01d f8a4 	bl	4c792 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   2f64a:	78a3      	ldrb	r3, [r4, #2]
   2f64c:	2b01      	cmp	r3, #1
   2f64e:	d103      	bne.n	2f658 <bt_conn_set_state+0xf0>
				k_work_cancel_delayable(&conn->deferred_work);
   2f650:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2f654:	f021 f8f8 	bl	50848 <k_work_cancel_delayable>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2f658:	2140      	movs	r1, #64	; 0x40
   2f65a:	1d20      	adds	r0, r4, #4
   2f65c:	f01d f88a 	bl	4c774 <atomic_or>
   2f660:	4826      	ldr	r0, [pc, #152]	; (2f6fc <bt_conn_set_state+0x194>)
}
   2f662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2f666:	2100      	movs	r1, #0
   2f668:	f019 ba7e 	b.w	48b68 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   2f66c:	7b23      	ldrb	r3, [r4, #12]
   2f66e:	2b00      	cmp	r3, #0
   2f670:	d0d0      	beq.n	2f614 <bt_conn_set_state+0xac>
				notify_connected(conn);
   2f672:	4620      	mov	r0, r4
   2f674:	f7ff fe1a 	bl	2f2ac <notify_connected>
   2f678:	e7cc      	b.n	2f614 <bt_conn_set_state+0xac>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2f67a:	78a3      	ldrb	r3, [r4, #2]
   2f67c:	2b01      	cmp	r3, #1
   2f67e:	d13a      	bne.n	2f6f6 <bt_conn_set_state+0x18e>
					K_MSEC(10 * bt_dev.create_param.timeout));
   2f680:	4b1f      	ldr	r3, [pc, #124]	; (2f700 <bt_conn_set_state+0x198>)
   2f682:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
   2f684:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
   2f686:	b1a8      	cbz	r0, 2f6b4 <bt_conn_set_state+0x14c>
   2f688:	230a      	movs	r3, #10
   2f68a:	4358      	muls	r0, r3
   2f68c:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
   2f68e:	03c9      	lsls	r1, r1, #15
   2f690:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2f694:	f240 33e7 	movw	r3, #999	; 0x3e7
   2f698:	03c0      	lsls	r0, r0, #15
   2f69a:	18c0      	adds	r0, r0, r3
   2f69c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2f6a0:	f04f 0300 	mov.w	r3, #0
   2f6a4:	f141 0100 	adc.w	r1, r1, #0
   2f6a8:	f7f6 fd2a 	bl	26100 <__aeabi_uldivmod>
   2f6ac:	4602      	mov	r2, r0
   2f6ae:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   2f6b0:	4620      	mov	r0, r4
   2f6b2:	e7a8      	b.n	2f606 <bt_conn_set_state+0x9e>
					K_MSEC(10 * bt_dev.create_param.timeout));
   2f6b4:	4601      	mov	r1, r0
   2f6b6:	e7ea      	b.n	2f68e <bt_conn_set_state+0x126>
	return list->head;
   2f6b8:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2f6ba:	b128      	cbz	r0, 2f6c8 <bt_conn_set_state+0x160>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2f6bc:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   2f6be:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   2f6c0:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2f6c2:	4288      	cmp	r0, r1
	list->tail = node;
   2f6c4:	bf08      	it	eq
   2f6c6:	61a3      	streq	r3, [r4, #24]
   2f6c8:	f382 8811 	msr	BASEPRI, r2
   2f6cc:	f3bf 8f6f 	isb	sy
		if (!node) {
   2f6d0:	b188      	cbz	r0, 2f6f6 <bt_conn_set_state+0x18e>
	__asm__ volatile(
   2f6d2:	f04f 0220 	mov.w	r2, #32
   2f6d6:	f3ef 8311 	mrs	r3, BASEPRI
   2f6da:	f382 8812 	msr	BASEPRI_MAX, r2
   2f6de:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2f6e2:	68c2      	ldr	r2, [r0, #12]
   2f6e4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2f6e6:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   2f6e8:	f383 8811 	msr	BASEPRI, r3
   2f6ec:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   2f6f0:	f7ff fdd2 	bl	2f298 <tx_free>
   2f6f4:	e76c      	b.n	2f5d0 <bt_conn_set_state+0x68>
}
   2f6f6:	bd70      	pop	{r4, r5, r6, pc}
   2f6f8:	20000100 	.word	0x20000100
   2f6fc:	20000598 	.word	0x20000598
   2f700:	20000000 	.word	0x20000000

0002f704 <bt_conn_index>:
		index = conn - acl_conns;
   2f704:	4b03      	ldr	r3, [pc, #12]	; (2f714 <bt_conn_index+0x10>)
   2f706:	1ac0      	subs	r0, r0, r3
   2f708:	4b03      	ldr	r3, [pc, #12]	; (2f718 <bt_conn_index+0x14>)
   2f70a:	1180      	asrs	r0, r0, #6
   2f70c:	4358      	muls	r0, r3
}
   2f70e:	b2c0      	uxtb	r0, r0
   2f710:	4770      	bx	lr
   2f712:	bf00      	nop
   2f714:	20001518 	.word	0x20001518
   2f718:	aaaaaaab 	.word	0xaaaaaaab

0002f71c <bt_conn_create_pdu_timeout>:
{
   2f71c:	b538      	push	{r3, r4, r5, lr}
   2f71e:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   2f720:	4906      	ldr	r1, [pc, #24]	; (2f73c <bt_conn_create_pdu_timeout+0x20>)
   2f722:	2800      	cmp	r0, #0
   2f724:	bf08      	it	eq
   2f726:	4608      	moveq	r0, r1
   2f728:	f020 f816 	bl	4f758 <net_buf_alloc_fixed>
	if (!buf) {
   2f72c:	4604      	mov	r4, r0
   2f72e:	b118      	cbz	r0, 2f738 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   2f730:	1d29      	adds	r1, r5, #4
   2f732:	3008      	adds	r0, #8
   2f734:	f020 f835 	bl	4f7a2 <net_buf_simple_reserve>
}
   2f738:	4620      	mov	r0, r4
   2f73a:	bd38      	pop	{r3, r4, r5, pc}
   2f73c:	20001084 	.word	0x20001084

0002f740 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   2f740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2f742:	1d03      	adds	r3, r0, #4
{
   2f744:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2f746:	4618      	mov	r0, r3
   2f748:	f01d f80e 	bl	4c768 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2f74c:	0582      	lsls	r2, r0, #22
   2f74e:	d512      	bpl.n	2f776 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   2f750:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2f754:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   2f758:	4291      	cmp	r1, r2
   2f75a:	d80c      	bhi.n	2f776 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   2f75c:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   2f760:	4291      	cmp	r1, r2
   2f762:	d308      	bcc.n	2f776 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   2f764:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   2f768:	4291      	cmp	r1, r2
   2f76a:	d104      	bne.n	2f776 <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f76c:	f46f 7100 	mvn.w	r1, #512	; 0x200
   2f770:	4618      	mov	r0, r3
   2f772:	f01c ffea 	bl	4c74a <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2f776:	4b10      	ldr	r3, [pc, #64]	; (2f7b8 <notify_le_param_updated+0x78>)
   2f778:	681d      	ldr	r5, [r3, #0]
   2f77a:	b925      	cbnz	r5, 2f786 <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f77c:	4d0f      	ldr	r5, [pc, #60]	; (2f7bc <notify_le_param_updated+0x7c>)
   2f77e:	4f10      	ldr	r7, [pc, #64]	; (2f7c0 <notify_le_param_updated+0x80>)
   2f780:	42bd      	cmp	r5, r7
   2f782:	d30c      	bcc.n	2f79e <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   2f784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   2f786:	68ee      	ldr	r6, [r5, #12]
   2f788:	b13e      	cbz	r6, 2f79a <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
   2f78a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2f78e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2f792:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2f796:	4620      	mov	r0, r4
   2f798:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   2f79a:	69ed      	ldr	r5, [r5, #28]
   2f79c:	e7ed      	b.n	2f77a <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
   2f79e:	68ee      	ldr	r6, [r5, #12]
   2f7a0:	b13e      	cbz	r6, 2f7b2 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
   2f7a2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2f7a6:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2f7aa:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2f7ae:	4620      	mov	r0, r4
   2f7b0:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f7b2:	3520      	adds	r5, #32
   2f7b4:	e7e4      	b.n	2f780 <notify_le_param_updated+0x40>
   2f7b6:	bf00      	nop
   2f7b8:	20003f98 	.word	0x20003f98
   2f7bc:	0005135c 	.word	0x0005135c
   2f7c0:	0005135c 	.word	0x0005135c

0002f7c4 <notify_le_phy_updated>:
}
#endif

#if defined(CONFIG_BT_USER_PHY_UPDATE)
void notify_le_phy_updated(struct bt_conn *conn)
{
   2f7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2f7c6:	4b0d      	ldr	r3, [pc, #52]	; (2f7fc <notify_le_phy_updated+0x38>)
   2f7c8:	681d      	ldr	r5, [r3, #0]
{
   2f7ca:	4604      	mov	r4, r0
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2f7cc:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
	for (cb = callback_list; cb; cb = cb->_next) {
   2f7d0:	b935      	cbnz	r5, 2f7e0 <notify_le_phy_updated+0x1c>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f7d2:	4d0b      	ldr	r5, [pc, #44]	; (2f800 <notify_le_phy_updated+0x3c>)
   2f7d4:	4e0b      	ldr	r6, [pc, #44]	; (2f804 <notify_le_phy_updated+0x40>)
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2f7d6:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f7da:	42b5      	cmp	r5, r6
   2f7dc:	d307      	bcc.n	2f7ee <notify_le_phy_updated+0x2a>
		}
	}
}
   2f7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_phy_updated) {
   2f7e0:	69ab      	ldr	r3, [r5, #24]
   2f7e2:	b113      	cbz	r3, 2f7ea <notify_le_phy_updated+0x26>
			cb->le_phy_updated(conn, &conn->le.phy);
   2f7e4:	4631      	mov	r1, r6
   2f7e6:	4620      	mov	r0, r4
   2f7e8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2f7ea:	69ed      	ldr	r5, [r5, #28]
   2f7ec:	e7f0      	b.n	2f7d0 <notify_le_phy_updated+0xc>
		if (cb->le_phy_updated) {
   2f7ee:	69ab      	ldr	r3, [r5, #24]
   2f7f0:	b113      	cbz	r3, 2f7f8 <notify_le_phy_updated+0x34>
			cb->le_phy_updated(conn, &conn->le.phy);
   2f7f2:	4639      	mov	r1, r7
   2f7f4:	4620      	mov	r0, r4
   2f7f6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f7f8:	3520      	adds	r5, #32
   2f7fa:	e7ee      	b.n	2f7da <notify_le_phy_updated+0x16>
   2f7fc:	20003f98 	.word	0x20003f98
   2f800:	0005135c 	.word	0x0005135c
   2f804:	0005135c 	.word	0x0005135c

0002f808 <le_param_req>:
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   2f808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f80c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   2f80e:	4608      	mov	r0, r1
{
   2f810:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   2f812:	f01c fc71 	bl	4c0f8 <bt_le_conn_params_valid>
   2f816:	4605      	mov	r5, r0
   2f818:	b918      	cbnz	r0, 2f822 <le_param_req+0x1a>
		return false;
   2f81a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   2f81c:	4628      	mov	r0, r5
   2f81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   2f822:	4b13      	ldr	r3, [pc, #76]	; (2f870 <le_param_req+0x68>)
   2f824:	681e      	ldr	r6, [r3, #0]
   2f826:	b946      	cbnz	r6, 2f83a <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f828:	4e12      	ldr	r6, [pc, #72]	; (2f874 <le_param_req+0x6c>)
   2f82a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 2f878 <le_param_req+0x70>
   2f82e:	4546      	cmp	r6, r8
   2f830:	d2f4      	bcs.n	2f81c <le_param_req+0x14>
		if (!cb->le_param_req) {
   2f832:	68b3      	ldr	r3, [r6, #8]
   2f834:	b983      	cbnz	r3, 2f858 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f836:	3620      	adds	r6, #32
   2f838:	e7f9      	b.n	2f82e <le_param_req+0x26>
		if (!cb->le_param_req) {
   2f83a:	68b3      	ldr	r3, [r6, #8]
   2f83c:	b90b      	cbnz	r3, 2f842 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   2f83e:	69f6      	ldr	r6, [r6, #28]
   2f840:	e7f1      	b.n	2f826 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   2f842:	4621      	mov	r1, r4
   2f844:	4638      	mov	r0, r7
   2f846:	4798      	blx	r3
   2f848:	2800      	cmp	r0, #0
   2f84a:	d0e6      	beq.n	2f81a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2f84c:	4620      	mov	r0, r4
   2f84e:	f01c fc53 	bl	4c0f8 <bt_le_conn_params_valid>
   2f852:	2800      	cmp	r0, #0
   2f854:	d1f3      	bne.n	2f83e <le_param_req+0x36>
   2f856:	e7e0      	b.n	2f81a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   2f858:	4621      	mov	r1, r4
   2f85a:	4638      	mov	r0, r7
   2f85c:	4798      	blx	r3
   2f85e:	2800      	cmp	r0, #0
   2f860:	d0db      	beq.n	2f81a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2f862:	4620      	mov	r0, r4
   2f864:	f01c fc48 	bl	4c0f8 <bt_le_conn_params_valid>
   2f868:	2800      	cmp	r0, #0
   2f86a:	d1e4      	bne.n	2f836 <le_param_req+0x2e>
   2f86c:	e7d5      	b.n	2f81a <le_param_req+0x12>
   2f86e:	bf00      	nop
   2f870:	20003f98 	.word	0x20003f98
   2f874:	0005135c 	.word	0x0005135c
   2f878:	0005135c 	.word	0x0005135c

0002f87c <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   2f87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2f880:	78c3      	ldrb	r3, [r0, #3]
{
   2f882:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2f884:	b973      	cbnz	r3, 2f8a4 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   2f886:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2f88a:	4b10      	ldr	r3, [pc, #64]	; (2f8cc <bt_conn_identity_resolved+0x50>)
   2f88c:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2f88e:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   2f892:	b955      	cbnz	r5, 2f8aa <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f894:	4d0e      	ldr	r5, [pc, #56]	; (2f8d0 <bt_conn_identity_resolved+0x54>)
   2f896:	4f0f      	ldr	r7, [pc, #60]	; (2f8d4 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2f898:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f89c:	42bd      	cmp	r5, r7
   2f89e:	d30c      	bcc.n	2f8ba <bt_conn_identity_resolved+0x3e>
		}
	}
}
   2f8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   2f8a4:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   2f8a8:	e7ef      	b.n	2f88a <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   2f8aa:	692b      	ldr	r3, [r5, #16]
   2f8ac:	b11b      	cbz	r3, 2f8b6 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2f8ae:	463a      	mov	r2, r7
   2f8b0:	4631      	mov	r1, r6
   2f8b2:	4620      	mov	r0, r4
   2f8b4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2f8b6:	69ed      	ldr	r5, [r5, #28]
   2f8b8:	e7eb      	b.n	2f892 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   2f8ba:	692b      	ldr	r3, [r5, #16]
   2f8bc:	b11b      	cbz	r3, 2f8c6 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2f8be:	4642      	mov	r2, r8
   2f8c0:	4631      	mov	r1, r6
   2f8c2:	4620      	mov	r0, r4
   2f8c4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f8c6:	3520      	adds	r5, #32
   2f8c8:	e7e8      	b.n	2f89c <bt_conn_identity_resolved+0x20>
   2f8ca:	bf00      	nop
   2f8cc:	20003f98 	.word	0x20003f98
   2f8d0:	0005135c 	.word	0x0005135c
   2f8d4:	0005135c 	.word	0x0005135c

0002f8d8 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   2f8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   2f8da:	7a43      	ldrb	r3, [r0, #9]
   2f8dc:	7283      	strb	r3, [r0, #10]
{
   2f8de:	4604      	mov	r4, r0
   2f8e0:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   2f8e2:	f01d f9d0 	bl	4cc86 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   2f8e6:	4b0c      	ldr	r3, [pc, #48]	; (2f918 <bt_conn_security_changed+0x40>)
   2f8e8:	681d      	ldr	r5, [r3, #0]
   2f8ea:	b925      	cbnz	r5, 2f8f6 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f8ec:	4d0b      	ldr	r5, [pc, #44]	; (2f91c <bt_conn_security_changed+0x44>)
   2f8ee:	4f0c      	ldr	r7, [pc, #48]	; (2f920 <bt_conn_security_changed+0x48>)
   2f8f0:	42bd      	cmp	r5, r7
   2f8f2:	d308      	bcc.n	2f906 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   2f8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   2f8f6:	696b      	ldr	r3, [r5, #20]
   2f8f8:	b11b      	cbz	r3, 2f902 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   2f8fa:	7a61      	ldrb	r1, [r4, #9]
   2f8fc:	4632      	mov	r2, r6
   2f8fe:	4620      	mov	r0, r4
   2f900:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2f902:	69ed      	ldr	r5, [r5, #28]
   2f904:	e7f1      	b.n	2f8ea <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   2f906:	696b      	ldr	r3, [r5, #20]
   2f908:	b11b      	cbz	r3, 2f912 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   2f90a:	7a61      	ldrb	r1, [r4, #9]
   2f90c:	4632      	mov	r2, r6
   2f90e:	4620      	mov	r0, r4
   2f910:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f912:	3520      	adds	r5, #32
   2f914:	e7ec      	b.n	2f8f0 <bt_conn_security_changed+0x18>
   2f916:	bf00      	nop
   2f918:	20003f98 	.word	0x20003f98
   2f91c:	0005135c 	.word	0x0005135c
   2f920:	0005135c 	.word	0x0005135c

0002f924 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   2f924:	4b02      	ldr	r3, [pc, #8]	; (2f930 <bt_conn_cb_register+0xc>)
   2f926:	681a      	ldr	r2, [r3, #0]
   2f928:	61c2      	str	r2, [r0, #28]
	callback_list = cb;
   2f92a:	6018      	str	r0, [r3, #0]
}
   2f92c:	4770      	bx	lr
   2f92e:	bf00      	nop
   2f930:	20003f98 	.word	0x20003f98

0002f934 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   2f934:	b570      	push	{r4, r5, r6, lr}
   2f936:	4606      	mov	r6, r0
   2f938:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   2f93a:	480a      	ldr	r0, [pc, #40]	; (2f964 <bt_conn_add_le+0x30>)
   2f93c:	2106      	movs	r1, #6
   2f93e:	f7ff fd65 	bl	2f40c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   2f942:	4604      	mov	r4, r0
   2f944:	b160      	cbz	r0, 2f960 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   2f946:	7206      	strb	r6, [r0, #8]
   2f948:	2207      	movs	r2, #7
   2f94a:	4629      	mov	r1, r5
   2f94c:	3088      	adds	r0, #136	; 0x88
   2f94e:	f01b ff9c 	bl	4b88a <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   2f952:	2301      	movs	r3, #1
   2f954:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   2f956:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   2f958:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2f95a:	4b03      	ldr	r3, [pc, #12]	; (2f968 <bt_conn_add_le+0x34>)
   2f95c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   2f960:	4620      	mov	r0, r4
   2f962:	bd70      	pop	{r4, r5, r6, pc}
   2f964:	20001518 	.word	0x20001518
   2f968:	00280018 	.word	0x00280018

0002f96c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   2f96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f970:	4e0f      	ldr	r6, [pc, #60]	; (2f9b0 <bt_conn_lookup_addr_le+0x44>)
   2f972:	4607      	mov	r7, r0
   2f974:	4688      	mov	r8, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2f976:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2f978:	4630      	mov	r0, r6
   2f97a:	f01c ffa4 	bl	4c8c6 <bt_conn_ref>

		if (!conn) {
   2f97e:	4604      	mov	r4, r0
   2f980:	b120      	cbz	r0, 2f98c <bt_conn_lookup_addr_le+0x20>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2f982:	7883      	ldrb	r3, [r0, #2]
   2f984:	2b01      	cmp	r3, #1
   2f986:	d00a      	beq.n	2f99e <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   2f988:	f01c ffb8 	bl	4c8fc <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2f98c:	3501      	adds	r5, #1
   2f98e:	2d06      	cmp	r5, #6
   2f990:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   2f994:	d1f0      	bne.n	2f978 <bt_conn_lookup_addr_le+0xc>
		}

		return conn;
	}

	return NULL;
   2f996:	2400      	movs	r4, #0
}
   2f998:	4620      	mov	r0, r4
   2f99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   2f99e:	4642      	mov	r2, r8
   2f9a0:	4639      	mov	r1, r7
   2f9a2:	f01d f854 	bl	4ca4e <bt_conn_is_peer_addr_le>
   2f9a6:	2800      	cmp	r0, #0
   2f9a8:	d1f6      	bne.n	2f998 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   2f9aa:	4620      	mov	r0, r4
   2f9ac:	e7ec      	b.n	2f988 <bt_conn_lookup_addr_le+0x1c>
   2f9ae:	bf00      	nop
   2f9b0:	20001518 	.word	0x20001518

0002f9b4 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   2f9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2f9b8:	f8df a050 	ldr.w	sl, [pc, #80]	; 2fa0c <bt_conn_lookup_state_le+0x58>
{
   2f9bc:	4606      	mov	r6, r0
   2f9be:	460f      	mov	r7, r1
   2f9c0:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2f9c2:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2f9c4:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   2f9c8:	fb09 a005 	mla	r0, r9, r5, sl
   2f9cc:	f01c ff7b 	bl	4c8c6 <bt_conn_ref>

		if (!conn) {
   2f9d0:	4604      	mov	r4, r0
   2f9d2:	b120      	cbz	r0, 2f9de <bt_conn_lookup_state_le+0x2a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2f9d4:	7883      	ldrb	r3, [r0, #2]
   2f9d6:	2b01      	cmp	r3, #1
   2f9d8:	d006      	beq.n	2f9e8 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   2f9da:	f01c ff8f 	bl	4c8fc <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2f9de:	3501      	adds	r5, #1
   2f9e0:	2d06      	cmp	r5, #6
   2f9e2:	d1f1      	bne.n	2f9c8 <bt_conn_lookup_state_le+0x14>
		}

		return conn;
	}

	return NULL;
   2f9e4:	2400      	movs	r4, #0
   2f9e6:	e00d      	b.n	2fa04 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   2f9e8:	b137      	cbz	r7, 2f9f8 <bt_conn_lookup_state_le+0x44>
   2f9ea:	463a      	mov	r2, r7
   2f9ec:	4631      	mov	r1, r6
   2f9ee:	f01d f82e 	bl	4ca4e <bt_conn_is_peer_addr_le>
   2f9f2:	b908      	cbnz	r0, 2f9f8 <bt_conn_lookup_state_le+0x44>
			bt_conn_unref(conn);
   2f9f4:	4620      	mov	r0, r4
   2f9f6:	e7f0      	b.n	2f9da <bt_conn_lookup_state_le+0x26>
		if (!(conn->state == state && conn->id == id)) {
   2f9f8:	7b63      	ldrb	r3, [r4, #13]
   2f9fa:	4543      	cmp	r3, r8
   2f9fc:	d1fa      	bne.n	2f9f4 <bt_conn_lookup_state_le+0x40>
   2f9fe:	7a23      	ldrb	r3, [r4, #8]
   2fa00:	42b3      	cmp	r3, r6
   2fa02:	d1f7      	bne.n	2f9f4 <bt_conn_lookup_state_le+0x40>
}
   2fa04:	4620      	mov	r0, r4
   2fa06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2fa0a:	bf00      	nop
   2fa0c:	20001518 	.word	0x20001518

0002fa10 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   2fa10:	b570      	push	{r4, r5, r6, lr}
	info->type = conn->type;
   2fa12:	7882      	ldrb	r2, [r0, #2]
   2fa14:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   2fa16:	78c5      	ldrb	r5, [r0, #3]
   2fa18:	704d      	strb	r5, [r1, #1]
	info->id = conn->id;
   2fa1a:	7a03      	ldrb	r3, [r0, #8]
   2fa1c:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   2fa1e:	2a01      	cmp	r2, #1
   2fa20:	d11e      	bne.n	2fa60 <bt_conn_get_info+0x50>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
		info->le.src = &bt_dev.id_addr[conn->id];
   2fa22:	4a11      	ldr	r2, [pc, #68]	; (2fa68 <bt_conn_get_info+0x58>)
   2fa24:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   2fa28:	4413      	add	r3, r2
		info->le.dst = &conn->le.dst;
   2fa2a:	f100 0688 	add.w	r6, r0, #136	; 0x88
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   2fa2e:	f100 0496 	add.w	r4, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   2fa32:	f100 028f 	add.w	r2, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2fa36:	b915      	cbnz	r5, 2fa3e <bt_conn_get_info+0x2e>
   2fa38:	4615      	mov	r5, r2
   2fa3a:	4622      	mov	r2, r4
   2fa3c:	462c      	mov	r4, r5
		info->le.src = &bt_dev.id_addr[conn->id];
   2fa3e:	e9c1 3601 	strd	r3, r6, [r1, #4]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   2fa42:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   2fa46:	828b      	strh	r3, [r1, #20]
			info->le.remote = &conn->le.resp_addr;
   2fa48:	e9c1 4203 	strd	r4, r2, [r1, #12]
		info->le.latency = conn->le.latency;
   2fa4c:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   2fa50:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
#if defined(CONFIG_BT_USER_PHY_UPDATE)
		info->le.phy = &conn->le.phy;
   2fa52:	30b8      	adds	r0, #184	; 0xb8
		info->le.timeout = conn->le.timeout;
   2fa54:	f830 3c12 	ldrh.w	r3, [r0, #-18]
   2fa58:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
   2fa5a:	61c8      	str	r0, [r1, #28]
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   2fa5c:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   2fa5e:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
   2fa60:	f06f 0015 	mvn.w	r0, #21
   2fa64:	e7fb      	b.n	2fa5e <bt_conn_get_info+0x4e>
   2fa66:	bf00      	nop
   2fa68:	20000000 	.word	0x20000000

0002fa6c <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   2fa6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2fa70:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2fa72:	4850      	ldr	r0, [pc, #320]	; (2fbb4 <bt_conn_le_create+0x148>)
   2fa74:	f01c fe78 	bl	4c768 <atomic_get>
   2fa78:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2fa7a:	0781      	lsls	r1, r0, #30
{
   2fa7c:	4615      	mov	r5, r2
   2fa7e:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2fa80:	d405      	bmi.n	2fa8e <bt_conn_le_create+0x22>
		return -EAGAIN;
   2fa82:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   2fa86:	4628      	mov	r0, r5
   2fa88:	b002      	add	sp, #8
   2fa8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   2fa8e:	4610      	mov	r0, r2
   2fa90:	f01c fb32 	bl	4c0f8 <bt_le_conn_params_valid>
   2fa94:	b910      	cbnz	r0, 2fa9c <bt_conn_le_create+0x30>
		return -EINVAL;
   2fa96:	f06f 0515 	mvn.w	r5, #21
   2fa9a:	e7f4      	b.n	2fa86 <bt_conn_le_create+0x1a>
   2fa9c:	4845      	ldr	r0, [pc, #276]	; (2fbb4 <bt_conn_le_create+0x148>)
   2fa9e:	f01c fe63 	bl	4c768 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2faa2:	0642      	lsls	r2, r0, #25
   2faa4:	d4ed      	bmi.n	2fa82 <bt_conn_le_create+0x16>
   2faa6:	4843      	ldr	r0, [pc, #268]	; (2fbb4 <bt_conn_le_create+0x148>)
   2faa8:	f01c fe5e 	bl	4c768 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   2faac:	0503      	lsls	r3, r0, #20
   2faae:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   2fab2:	d478      	bmi.n	2fba6 <bt_conn_le_create+0x13a>
	if (!bt_id_scan_random_addr_check()) {
   2fab4:	f01c fcce 	bl	4c454 <bt_id_scan_random_addr_check>
   2fab8:	2800      	cmp	r0, #0
   2faba:	d0ec      	beq.n	2fa96 <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   2fabc:	4621      	mov	r1, r4
   2fabe:	4640      	mov	r0, r8
   2fac0:	f01c ffe5 	bl	4ca8e <bt_conn_exists_le>
   2fac4:	2800      	cmp	r0, #0
   2fac6:	d1e6      	bne.n	2fa96 <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   2fac8:	7823      	ldrb	r3, [r4, #0]
   2faca:	3b02      	subs	r3, #2
   2facc:	2b01      	cmp	r3, #1
   2face:	d849      	bhi.n	2fb64 <bt_conn_le_create+0xf8>
   2fad0:	2207      	movs	r2, #7
   2fad2:	4621      	mov	r1, r4
   2fad4:	4668      	mov	r0, sp
   2fad6:	f01b fed8 	bl	4b88a <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   2fada:	f89d 3000 	ldrb.w	r3, [sp]
   2fade:	3b02      	subs	r3, #2
   2fae0:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   2fae4:	4669      	mov	r1, sp
   2fae6:	2000      	movs	r0, #0
   2fae8:	f7ff ff24 	bl	2f934 <bt_conn_add_le>
	if (!conn) {
   2faec:	4604      	mov	r4, r0
   2faee:	2800      	cmp	r0, #0
   2faf0:	d05c      	beq.n	2fbac <bt_conn_le_create+0x140>
	conn->le.interval_min = param->interval_min;
   2faf2:	882b      	ldrh	r3, [r5, #0]
   2faf4:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   2faf8:	886b      	ldrh	r3, [r5, #2]
   2fafa:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   2fafe:	88ab      	ldrh	r3, [r5, #4]
   2fb00:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   2fb04:	88eb      	ldrh	r3, [r5, #6]
   2fb06:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   2fb0a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   2fb0e:	4d2a      	ldr	r5, [pc, #168]	; (2fbb8 <bt_conn_le_create+0x14c>)
   2fb10:	f105 0c08 	add.w	ip, r5, #8
   2fb14:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   2fb18:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   2fb1a:	2b00      	cmp	r3, #0
   2fb1c:	bf08      	it	eq
   2fb1e:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   2fb22:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   2fb24:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   2fb26:	b903      	cbnz	r3, 2fb2a <bt_conn_le_create+0xbe>
   2fb28:	89ab      	ldrh	r3, [r5, #12]
   2fb2a:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   2fb2c:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   2fb2e:	b903      	cbnz	r3, 2fb32 <bt_conn_le_create+0xc6>
   2fb30:	89eb      	ldrh	r3, [r5, #14]
   2fb32:	826b      	strh	r3, [r5, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2fb34:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   2fb38:	b11b      	cbz	r3, 2fb42 <bt_conn_le_create+0xd6>
   2fb3a:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   2fb3e:	429a      	cmp	r2, r3
   2fb40:	d919      	bls.n	2fb76 <bt_conn_le_create+0x10a>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   2fb42:	2102      	movs	r1, #2
   2fb44:	4620      	mov	r0, r4
   2fb46:	f7ff fd0f 	bl	2f568 <bt_conn_set_state>
		err = bt_le_scan_update(true);
   2fb4a:	2001      	movs	r0, #1
   2fb4c:	f7ff f8d4 	bl	2ecf8 <bt_le_scan_update>
		if (err) {
   2fb50:	4605      	mov	r5, r0
   2fb52:	b330      	cbz	r0, 2fba2 <bt_conn_le_create+0x136>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2fb54:	4620      	mov	r0, r4
   2fb56:	2100      	movs	r1, #0
   2fb58:	f7ff fd06 	bl	2f568 <bt_conn_set_state>
			bt_conn_unref(conn);
   2fb5c:	4620      	mov	r0, r4
   2fb5e:	f01c fecd 	bl	4c8fc <bt_conn_unref>
			return err;
   2fb62:	e790      	b.n	2fa86 <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   2fb64:	4621      	mov	r1, r4
   2fb66:	f01c fc49 	bl	4c3fc <bt_lookup_id_addr>
   2fb6a:	2207      	movs	r2, #7
   2fb6c:	4601      	mov	r1, r0
   2fb6e:	4668      	mov	r0, sp
   2fb70:	f01b fe8b 	bl	4b88a <memcpy>
}
   2fb74:	e7b6      	b.n	2fae4 <bt_conn_le_create+0x78>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   2fb76:	2106      	movs	r1, #6
   2fb78:	4620      	mov	r0, r4
   2fb7a:	f7ff fcf5 	bl	2f568 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   2fb7e:	4620      	mov	r0, r4
   2fb80:	f01c f9d6 	bl	4bf30 <bt_le_create_conn>
	if (err) {
   2fb84:	4605      	mov	r5, r0
   2fb86:	b160      	cbz	r0, 2fba2 <bt_conn_le_create+0x136>
		conn->err = 0;
   2fb88:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2fb8a:	4631      	mov	r1, r6
   2fb8c:	4620      	mov	r0, r4
		conn->err = 0;
   2fb8e:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2fb90:	f7ff fcea 	bl	2f568 <bt_conn_set_state>
		bt_conn_unref(conn);
   2fb94:	4620      	mov	r0, r4
   2fb96:	f01c feb1 	bl	4c8fc <bt_conn_unref>
		bt_le_scan_update(false);
   2fb9a:	4630      	mov	r0, r6
   2fb9c:	f7ff f8ac 	bl	2ecf8 <bt_le_scan_update>
		return err;
   2fba0:	e771      	b.n	2fa86 <bt_conn_le_create+0x1a>
	*ret_conn = conn;
   2fba2:	603c      	str	r4, [r7, #0]
	return 0;
   2fba4:	e76f      	b.n	2fa86 <bt_conn_le_create+0x1a>
		return -EALREADY;
   2fba6:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2fbaa:	e76c      	b.n	2fa86 <bt_conn_le_create+0x1a>
		return -ENOMEM;
   2fbac:	f06f 050b 	mvn.w	r5, #11
   2fbb0:	e769      	b.n	2fa86 <bt_conn_le_create+0x1a>
   2fbb2:	bf00      	nop
   2fbb4:	200000cc 	.word	0x200000cc
   2fbb8:	20000000 	.word	0x20000000

0002fbbc <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   2fbbc:	b570      	push	{r4, r5, r6, lr}
   2fbbe:	4606      	mov	r6, r0
   2fbc0:	482f      	ldr	r0, [pc, #188]	; (2fc80 <bt_le_set_auto_conn+0xc4>)
   2fbc2:	f01c fdd1 	bl	4c768 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2fbc6:	0780      	lsls	r0, r0, #30
{
   2fbc8:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2fbca:	d553      	bpl.n	2fc74 <bt_le_set_auto_conn+0xb8>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   2fbcc:	b929      	cbnz	r1, 2fbda <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   2fbce:	f01c fc41 	bl	4c454 <bt_id_scan_random_addr_check>
   2fbd2:	b940      	cbnz	r0, 2fbe6 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   2fbd4:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   2fbd8:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   2fbda:	4608      	mov	r0, r1
   2fbdc:	f01c fa8c 	bl	4c0f8 <bt_le_conn_params_valid>
   2fbe0:	2800      	cmp	r0, #0
   2fbe2:	d1f4      	bne.n	2fbce <bt_le_set_auto_conn+0x12>
   2fbe4:	e7f6      	b.n	2fbd4 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   2fbe6:	4631      	mov	r1, r6
   2fbe8:	2000      	movs	r0, #0
   2fbea:	f7ff febf 	bl	2f96c <bt_conn_lookup_addr_le>
	if (!conn) {
   2fbee:	4604      	mov	r4, r0
   2fbf0:	b928      	cbnz	r0, 2fbfe <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   2fbf2:	4631      	mov	r1, r6
   2fbf4:	f7ff fe9e 	bl	2f934 <bt_conn_add_le>
		if (!conn) {
   2fbf8:	4604      	mov	r4, r0
   2fbfa:	2800      	cmp	r0, #0
   2fbfc:	d03d      	beq.n	2fc7a <bt_le_set_auto_conn+0xbe>
		if (!atomic_test_and_set_bit(conn->flags,
   2fbfe:	1d20      	adds	r0, r4, #4
	if (param) {
   2fc00:	b33d      	cbz	r5, 2fc52 <bt_le_set_auto_conn+0x96>
	conn->le.interval_min = param->interval_min;
   2fc02:	882b      	ldrh	r3, [r5, #0]
   2fc04:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   2fc08:	886b      	ldrh	r3, [r5, #2]
   2fc0a:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   2fc0e:	88ab      	ldrh	r3, [r5, #4]
   2fc10:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   2fc14:	88eb      	ldrh	r3, [r5, #6]
   2fc16:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2fc1a:	2101      	movs	r1, #1
   2fc1c:	f01c fdaa 	bl	4c774 <atomic_or>
		if (!atomic_test_and_set_bit(conn->flags,
   2fc20:	07c1      	lsls	r1, r0, #31
   2fc22:	d402      	bmi.n	2fc2a <bt_le_set_auto_conn+0x6e>
			bt_conn_ref(conn);
   2fc24:	4620      	mov	r0, r4
   2fc26:	f01c fe4e 	bl	4c8c6 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   2fc2a:	7b63      	ldrb	r3, [r4, #13]
   2fc2c:	b963      	cbnz	r3, 2fc48 <bt_le_set_auto_conn+0x8c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2fc2e:	4814      	ldr	r0, [pc, #80]	; (2fc80 <bt_le_set_auto_conn+0xc4>)
   2fc30:	f01c fd9a 	bl	4c768 <atomic_get>
   2fc34:	0783      	lsls	r3, r0, #30
   2fc36:	d507      	bpl.n	2fc48 <bt_le_set_auto_conn+0x8c>
		if (param) {
   2fc38:	b11d      	cbz	r5, 2fc42 <bt_le_set_auto_conn+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   2fc3a:	2102      	movs	r1, #2
   2fc3c:	4620      	mov	r0, r4
   2fc3e:	f7ff fc93 	bl	2f568 <bt_conn_set_state>
		bt_le_scan_update(false);
   2fc42:	2000      	movs	r0, #0
   2fc44:	f7ff f858 	bl	2ecf8 <bt_le_scan_update>
	bt_conn_unref(conn);
   2fc48:	4620      	mov	r0, r4
   2fc4a:	f01c fe57 	bl	4c8fc <bt_conn_unref>
	return 0;
   2fc4e:	2000      	movs	r0, #0
   2fc50:	e7c2      	b.n	2fbd8 <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2fc52:	f06f 0101 	mvn.w	r1, #1
   2fc56:	f01c fd78 	bl	4c74a <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
   2fc5a:	07c2      	lsls	r2, r0, #31
   2fc5c:	d5e5      	bpl.n	2fc2a <bt_le_set_auto_conn+0x6e>
			bt_conn_unref(conn);
   2fc5e:	4620      	mov	r0, r4
   2fc60:	f01c fe4c 	bl	4c8fc <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   2fc64:	7b63      	ldrb	r3, [r4, #13]
   2fc66:	2b02      	cmp	r3, #2
   2fc68:	d1df      	bne.n	2fc2a <bt_le_set_auto_conn+0x6e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2fc6a:	4629      	mov	r1, r5
   2fc6c:	4620      	mov	r0, r4
   2fc6e:	f7ff fc7b 	bl	2f568 <bt_conn_set_state>
   2fc72:	e7da      	b.n	2fc2a <bt_le_set_auto_conn+0x6e>
		return -EAGAIN;
   2fc74:	f06f 000a 	mvn.w	r0, #10
   2fc78:	e7ae      	b.n	2fbd8 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   2fc7a:	f06f 000b 	mvn.w	r0, #11
   2fc7e:	e7ab      	b.n	2fbd8 <bt_le_set_auto_conn+0x1c>
   2fc80:	200000cc 	.word	0x200000cc

0002fc84 <send_conn_le_param_update>:
{
   2fc84:	b538      	push	{r3, r4, r5, lr}
   2fc86:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   2fc88:	4608      	mov	r0, r1
{
   2fc8a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   2fc8c:	f01c fa34 	bl	4c0f8 <bt_le_conn_params_valid>
   2fc90:	b338      	cbz	r0, 2fce2 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   2fc92:	4b15      	ldr	r3, [pc, #84]	; (2fce8 <send_conn_le_param_update+0x64>)
   2fc94:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   2fc98:	0799      	lsls	r1, r3, #30
   2fc9a:	d407      	bmi.n	2fcac <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   2fc9c:	78e3      	ldrb	r3, [r4, #3]
   2fc9e:	b173      	cbz	r3, 2fcbe <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   2fca0:	4629      	mov	r1, r5
   2fca2:	4620      	mov	r0, r4
}
   2fca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   2fca8:	f000 b9e2 	b.w	30070 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   2fcac:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   2fcb0:	079a      	lsls	r2, r3, #30
   2fcb2:	d5f3      	bpl.n	2fc9c <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2fcb4:	1d20      	adds	r0, r4, #4
   2fcb6:	f01c fd57 	bl	4c768 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   2fcba:	0543      	lsls	r3, r0, #21
   2fcbc:	d4ee      	bmi.n	2fc9c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   2fcbe:	4629      	mov	r1, r5
   2fcc0:	4620      	mov	r0, r4
   2fcc2:	f01c ff4d 	bl	4cb60 <bt_conn_le_conn_update>
		if (rc == 0) {
   2fcc6:	b958      	cbnz	r0, 2fce0 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   2fcc8:	882b      	ldrh	r3, [r5, #0]
   2fcca:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   2fcce:	886b      	ldrh	r3, [r5, #2]
   2fcd0:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   2fcd4:	88ab      	ldrh	r3, [r5, #4]
   2fcd6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   2fcda:	88eb      	ldrh	r3, [r5, #6]
   2fcdc:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   2fce0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2fce2:	f06f 0015 	mvn.w	r0, #21
   2fce6:	e7fb      	b.n	2fce0 <send_conn_le_param_update+0x5c>
   2fce8:	20000000 	.word	0x20000000

0002fcec <deferred_work>:
{
   2fcec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   2fcee:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   2fcf2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   2fcf4:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   2fcf8:	b9fb      	cbnz	r3, 2fd3a <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   2fcfa:	4628      	mov	r0, r5
   2fcfc:	f01c ffb2 	bl	4cc64 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   2fd00:	4b24      	ldr	r3, [pc, #144]	; (2fd94 <deferred_work+0xa8>)
   2fd02:	681e      	ldr	r6, [r3, #0]
   2fd04:	b94e      	cbnz	r6, 2fd1a <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fd06:	4e24      	ldr	r6, [pc, #144]	; (2fd98 <deferred_work+0xac>)
   2fd08:	4f24      	ldr	r7, [pc, #144]	; (2fd9c <deferred_work+0xb0>)
   2fd0a:	42be      	cmp	r6, r7
   2fd0c:	d30d      	bcc.n	2fd2a <deferred_work+0x3e>
		bt_conn_unref(conn);
   2fd0e:	4628      	mov	r0, r5
}
   2fd10:	b003      	add	sp, #12
   2fd12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   2fd16:	f01c bdf1 	b.w	4c8fc <bt_conn_unref>
		if (cb->disconnected) {
   2fd1a:	6873      	ldr	r3, [r6, #4]
   2fd1c:	b11b      	cbz	r3, 2fd26 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   2fd1e:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   2fd22:	4628      	mov	r0, r5
   2fd24:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2fd26:	69f6      	ldr	r6, [r6, #28]
   2fd28:	e7ec      	b.n	2fd04 <deferred_work+0x18>
		if (cb->disconnected) {
   2fd2a:	6873      	ldr	r3, [r6, #4]
   2fd2c:	b11b      	cbz	r3, 2fd36 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   2fd2e:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   2fd32:	4628      	mov	r0, r5
   2fd34:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fd36:	3620      	adds	r6, #32
   2fd38:	e7e7      	b.n	2fd0a <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   2fd3a:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   2fd3e:	2b01      	cmp	r3, #1
   2fd40:	d126      	bne.n	2fd90 <deferred_work+0xa4>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2fd42:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   2fd46:	b923      	cbnz	r3, 2fd52 <deferred_work+0x66>
}
   2fd48:	b003      	add	sp, #12
   2fd4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
   2fd4e:	f7fd be0b 	b.w	2d968 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   2fd52:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2fd56:	f46f 7100 	mvn.w	r1, #512	; 0x200
   2fd5a:	4630      	mov	r0, r6
   2fd5c:	f01c fcf5 	bl	4c74a <atomic_and>
   2fd60:	0583      	lsls	r3, r0, #22
   2fd62:	d50f      	bpl.n	2fd84 <deferred_work+0x98>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   2fd64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2fd66:	9300      	str	r3, [sp, #0]
   2fd68:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2fd6a:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   2fd6c:	4669      	mov	r1, sp
   2fd6e:	4628      	mov	r0, r5
   2fd70:	f7ff ff88 	bl	2fc84 <send_conn_le_param_update>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2fd74:	f44f 7180 	mov.w	r1, #256	; 0x100
   2fd78:	4630      	mov	r0, r6
}
   2fd7a:	b003      	add	sp, #12
   2fd7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2fd80:	f01c bcf8 	b.w	4c774 <atomic_or>
		param = BT_LE_CONN_PARAM(
   2fd84:	4a06      	ldr	r2, [pc, #24]	; (2fda0 <deferred_work+0xb4>)
   2fd86:	6810      	ldr	r0, [r2, #0]
   2fd88:	6851      	ldr	r1, [r2, #4]
   2fd8a:	466b      	mov	r3, sp
   2fd8c:	c303      	stmia	r3!, {r0, r1}
   2fd8e:	e7ed      	b.n	2fd6c <deferred_work+0x80>
}
   2fd90:	b003      	add	sp, #12
   2fd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fd94:	20003f98 	.word	0x20003f98
   2fd98:	0005135c 	.word	0x0005135c
   2fd9c:	0005135c 	.word	0x0005135c
   2fda0:	00051532 	.word	0x00051532

0002fda4 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   2fda4:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   2fda6:	4801      	ldr	r0, [pc, #4]	; (2fdac <bt_conn_create_frag_timeout+0x8>)
   2fda8:	f7ff bcb8 	b.w	2f71c <bt_conn_create_pdu_timeout>
   2fdac:	200010dc 	.word	0x200010dc

0002fdb0 <create_frag>:
{
   2fdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fdb4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   2fdb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2fdba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2fdbe:	2000      	movs	r0, #0
{
   2fdc0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   2fdc2:	f7ff ffef 	bl	2fda4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   2fdc6:	7b73      	ldrb	r3, [r6, #13]
   2fdc8:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   2fdca:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2fdcc:	f04f 0600 	mov.w	r6, #0
   2fdd0:	d005      	beq.n	2fdde <create_frag+0x2e>
		net_buf_unref(frag);
   2fdd2:	f013 fb81 	bl	434d8 <net_buf_unref>
		return NULL;
   2fdd6:	4635      	mov	r5, r6
}
   2fdd8:	4628      	mov	r0, r5
   2fdda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   2fdde:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   2fde0:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   2fde4:	4e0c      	ldr	r6, [pc, #48]	; (2fe18 <create_frag+0x68>)
   2fde6:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   2fde8:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   2fdec:	f01f fd69 	bl	4f8c2 <net_buf_simple_tailroom>
   2fdf0:	4580      	cmp	r8, r0
   2fdf2:	d20c      	bcs.n	2fe0e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   2fdf4:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2fdf8:	f854 1f08 	ldr.w	r1, [r4, #8]!
   2fdfc:	4632      	mov	r2, r6
   2fdfe:	4638      	mov	r0, r7
   2fe00:	f01f fd18 	bl	4f834 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   2fe04:	4631      	mov	r1, r6
   2fe06:	4620      	mov	r0, r4
   2fe08:	f01f fd37 	bl	4f87a <net_buf_simple_pull>
   2fe0c:	e7e4      	b.n	2fdd8 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   2fe0e:	4638      	mov	r0, r7
   2fe10:	f01f fd57 	bl	4f8c2 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   2fe14:	b286      	uxth	r6, r0
   2fe16:	e7ef      	b.n	2fdf8 <create_frag+0x48>
   2fe18:	20000000 	.word	0x20000000

0002fe1c <bt_conn_process_tx>:
{
   2fe1c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   2fe1e:	7b43      	ldrb	r3, [r0, #13]
{
   2fe20:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   2fe22:	b95b      	cbnz	r3, 2fe3c <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2fe24:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2fe28:	3004      	adds	r0, #4
   2fe2a:	f01c fc8e 	bl	4c74a <atomic_and>
   2fe2e:	0643      	lsls	r3, r0, #25
   2fe30:	d504      	bpl.n	2fe3c <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   2fe32:	4620      	mov	r0, r4
}
   2fe34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   2fe38:	f01c bcda 	b.w	4c7f0 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   2fe3c:	2200      	movs	r2, #0
   2fe3e:	2300      	movs	r3, #0
   2fe40:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2fe44:	f01f fc8d 	bl	4f762 <net_buf_get>
	BT_ASSERT(buf);
   2fe48:	4605      	mov	r5, r0
   2fe4a:	b960      	cbnz	r0, 2fe66 <bt_conn_process_tx+0x4a>
   2fe4c:	4a1f      	ldr	r2, [pc, #124]	; (2fecc <bt_conn_process_tx+0xb0>)
   2fe4e:	4920      	ldr	r1, [pc, #128]	; (2fed0 <bt_conn_process_tx+0xb4>)
   2fe50:	4820      	ldr	r0, [pc, #128]	; (2fed4 <bt_conn_process_tx+0xb8>)
   2fe52:	f240 23e7 	movw	r3, #743	; 0x2e7
   2fe56:	f019 fc0d 	bl	49674 <printk>
   2fe5a:	4040      	eors	r0, r0
   2fe5c:	f380 8811 	msr	BASEPRI, r0
   2fe60:	f04f 0003 	mov.w	r0, #3
   2fe64:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   2fe66:	4e1c      	ldr	r6, [pc, #112]	; (2fed8 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   2fe68:	89aa      	ldrh	r2, [r5, #12]
   2fe6a:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   2fe6e:	429a      	cmp	r2, r3
   2fe70:	d807      	bhi.n	2fe82 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   2fe72:	2300      	movs	r3, #0
   2fe74:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   2fe76:	4629      	mov	r1, r5
   2fe78:	4620      	mov	r0, r4
   2fe7a:	f7ff fa3b 	bl	2f2f4 <send_frag>
	if (!send_buf(conn, buf)) {
   2fe7e:	b130      	cbz	r0, 2fe8e <bt_conn_process_tx+0x72>
}
   2fe80:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   2fe82:	4629      	mov	r1, r5
   2fe84:	4620      	mov	r0, r4
   2fe86:	f7ff ff93 	bl	2fdb0 <create_frag>
	if (!frag) {
   2fe8a:	4601      	mov	r1, r0
   2fe8c:	b920      	cbnz	r0, 2fe98 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
   2fe8e:	4628      	mov	r0, r5
}
   2fe90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   2fe94:	f013 bb20 	b.w	434d8 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   2fe98:	2301      	movs	r3, #1
   2fe9a:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   2fe9c:	4620      	mov	r0, r4
   2fe9e:	f7ff fa29 	bl	2f2f4 <send_frag>
   2fea2:	2800      	cmp	r0, #0
   2fea4:	d0f3      	beq.n	2fe8e <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
   2fea6:	89aa      	ldrh	r2, [r5, #12]
   2fea8:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   2feac:	429a      	cmp	r2, r3
   2feae:	d802      	bhi.n	2feb6 <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
   2feb0:	2300      	movs	r3, #0
   2feb2:	2203      	movs	r2, #3
   2feb4:	e7df      	b.n	2fe76 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
   2feb6:	4629      	mov	r1, r5
   2feb8:	4620      	mov	r0, r4
   2feba:	f7ff ff79 	bl	2fdb0 <create_frag>
		if (!frag) {
   2febe:	4601      	mov	r1, r0
   2fec0:	2800      	cmp	r0, #0
   2fec2:	d0e4      	beq.n	2fe8e <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   2fec4:	2301      	movs	r3, #1
   2fec6:	461a      	mov	r2, r3
   2fec8:	e7e8      	b.n	2fe9c <bt_conn_process_tx+0x80>
   2feca:	bf00      	nop
   2fecc:	00053c38 	.word	0x00053c38
   2fed0:	00053b19 	.word	0x00053b19
   2fed4:	00053afc 	.word	0x00053afc
   2fed8:	20000000 	.word	0x20000000

0002fedc <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   2fedc:	4b0c      	ldr	r3, [pc, #48]	; (2ff10 <bt_conn_auth_cb_register+0x34>)
   2fede:	b908      	cbnz	r0, 2fee4 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   2fee0:	6018      	str	r0, [r3, #0]
		return 0;
   2fee2:	4770      	bx	lr
	}

	if (bt_auth) {
   2fee4:	681a      	ldr	r2, [r3, #0]
   2fee6:	b962      	cbnz	r2, 2ff02 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   2fee8:	6942      	ldr	r2, [r0, #20]
   2feea:	b93a      	cbnz	r2, 2fefc <bt_conn_auth_cb_register+0x20>
   2feec:	6842      	ldr	r2, [r0, #4]
   2feee:	b95a      	cbnz	r2, 2ff08 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   2fef0:	6882      	ldr	r2, [r0, #8]
   2fef2:	b94a      	cbnz	r2, 2ff08 <bt_conn_auth_cb_register+0x2c>
   2fef4:	68c2      	ldr	r2, [r0, #12]
   2fef6:	b93a      	cbnz	r2, 2ff08 <bt_conn_auth_cb_register+0x2c>
   2fef8:	6982      	ldr	r2, [r0, #24]
   2fefa:	b92a      	cbnz	r2, 2ff08 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   2fefc:	6018      	str	r0, [r3, #0]
	return 0;
   2fefe:	2000      	movs	r0, #0
   2ff00:	4770      	bx	lr
		return -EALREADY;
   2ff02:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2ff06:	4770      	bx	lr
		return -EINVAL;
   2ff08:	f06f 0015 	mvn.w	r0, #21
}
   2ff0c:	4770      	bx	lr
   2ff0e:	bf00      	nop
   2ff10:	20003f94 	.word	0x20003f94

0002ff14 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   2ff14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   2ff16:	4917      	ldr	r1, [pc, #92]	; (2ff74 <bt_conn_init+0x60>)
   2ff18:	4817      	ldr	r0, [pc, #92]	; (2ff78 <bt_conn_init+0x64>)
   2ff1a:	f020 fb92 	bl	50642 <k_queue_append>
   2ff1e:	4917      	ldr	r1, [pc, #92]	; (2ff7c <bt_conn_init+0x68>)
   2ff20:	4815      	ldr	r0, [pc, #84]	; (2ff78 <bt_conn_init+0x64>)
   2ff22:	f020 fb8e 	bl	50642 <k_queue_append>
   2ff26:	4916      	ldr	r1, [pc, #88]	; (2ff80 <bt_conn_init+0x6c>)
   2ff28:	4813      	ldr	r0, [pc, #76]	; (2ff78 <bt_conn_init+0x64>)
   2ff2a:	f020 fb8a 	bl	50642 <k_queue_append>
	}

	bt_att_init();
   2ff2e:	f01d fb99 	bl	4d664 <bt_att_init>

	err = bt_smp_init();
   2ff32:	f003 fb25 	bl	33580 <bt_smp_init>
	if (err) {
   2ff36:	4605      	mov	r5, r0
   2ff38:	b9d0      	cbnz	r0, 2ff70 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   2ff3a:	f01c ff8b 	bl	4ce54 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2ff3e:	4f11      	ldr	r7, [pc, #68]	; (2ff84 <bt_conn_init+0x70>)
   2ff40:	462e      	mov	r6, r5
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   2ff42:	4638      	mov	r0, r7
   2ff44:	f01c fcbf 	bl	4c8c6 <bt_conn_ref>

			if (!conn) {
   2ff48:	4604      	mov	r4, r0
   2ff4a:	b160      	cbz	r0, 2ff66 <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2ff4c:	3004      	adds	r0, #4
   2ff4e:	f01c fc0b 	bl	4c768 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   2ff52:	07c3      	lsls	r3, r0, #31
   2ff54:	d504      	bpl.n	2ff60 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   2ff56:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   2ff58:	2102      	movs	r1, #2
   2ff5a:	4620      	mov	r0, r4
   2ff5c:	f7ff fb04 	bl	2f568 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   2ff60:	4620      	mov	r0, r4
   2ff62:	f01c fccb 	bl	4c8fc <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2ff66:	3601      	adds	r6, #1
   2ff68:	2e06      	cmp	r6, #6
   2ff6a:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   2ff6e:	d1e8      	bne.n	2ff42 <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   2ff70:	4628      	mov	r0, r5
   2ff72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ff74:	20003f9c 	.word	0x20003f9c
   2ff78:	2000103c 	.word	0x2000103c
   2ff7c:	20003fac 	.word	0x20003fac
   2ff80:	20003fbc 	.word	0x20003fbc
   2ff84:	20001518 	.word	0x20001518

0002ff88 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   2ff88:	4b09      	ldr	r3, [pc, #36]	; (2ffb0 <l2cap_accept+0x28>)
{
   2ff8a:	b530      	push	{r4, r5, lr}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   2ff8c:	2200      	movs	r2, #0
   2ff8e:	25e8      	movs	r5, #232	; 0xe8
		if (l2cap->chan.chan.conn) {
   2ff90:	fb05 f402 	mul.w	r4, r5, r2
   2ff94:	58e0      	ldr	r0, [r4, r3]
   2ff96:	b128      	cbz	r0, 2ffa4 <l2cap_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   2ff98:	3201      	adds	r2, #1
   2ff9a:	2a06      	cmp	r2, #6
   2ff9c:	d1f8      	bne.n	2ff90 <l2cap_accept+0x8>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   2ff9e:	f06f 000b 	mvn.w	r0, #11
}
   2ffa2:	bd30      	pop	{r4, r5, pc}
		l2cap->chan.chan.ops = &ops;
   2ffa4:	4423      	add	r3, r4
   2ffa6:	4a03      	ldr	r2, [pc, #12]	; (2ffb4 <l2cap_accept+0x2c>)
   2ffa8:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   2ffaa:	600b      	str	r3, [r1, #0]
		return 0;
   2ffac:	e7f9      	b.n	2ffa2 <l2cap_accept+0x1a>
   2ffae:	bf00      	nop
   2ffb0:	20001998 	.word	0x20001998
   2ffb4:	00052140 	.word	0x00052140

0002ffb8 <bt_l2cap_connected>:
{
   2ffb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2ffbc:	4e29      	ldr	r6, [pc, #164]	; (30064 <bt_l2cap_connected+0xac>)
   2ffbe:	4f2a      	ldr	r7, [pc, #168]	; (30068 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   2ffc0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 3006c <bt_l2cap_connected+0xb4>
{
   2ffc4:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2ffc6:	42be      	cmp	r6, r7
   2ffc8:	d302      	bcc.n	2ffd0 <bt_l2cap_connected+0x18>
}
   2ffca:	b003      	add	sp, #12
   2ffcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   2ffd0:	6873      	ldr	r3, [r6, #4]
   2ffd2:	a901      	add	r1, sp, #4
   2ffd4:	4620      	mov	r0, r4
   2ffd6:	4798      	blx	r3
   2ffd8:	2800      	cmp	r0, #0
   2ffda:	db3d      	blt.n	30058 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   2ffdc:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   2ffde:	8833      	ldrh	r3, [r6, #0]
   2ffe0:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   2ffe4:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   2ffe8:	4641      	mov	r1, r8
   2ffea:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   2ffee:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   2fff2:	f020 fc1d 	bl	50830 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2fff6:	f3bf 8f5b 	dmb	ish
   2fffa:	f105 0368 	add.w	r3, r5, #104	; 0x68
   2fffe:	2200      	movs	r2, #0
   30000:	e853 1f00 	ldrex	r1, [r3]
   30004:	e843 2000 	strex	r0, r2, [r3]
   30008:	2800      	cmp	r0, #0
   3000a:	d1f9      	bne.n	30000 <bt_l2cap_connected+0x48>
   3000c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   30010:	60aa      	str	r2, [r5, #8]
	return list->tail;
   30012:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   30014:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   30018:	bb02      	cbnz	r2, 3005c <bt_l2cap_connected+0xa4>
	list->head = node;
   3001a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   3001e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   30020:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   30022:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   30024:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   30028:	681b      	ldr	r3, [r3, #0]
   3002a:	b103      	cbz	r3, 3002e <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   3002c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3002e:	9b01      	ldr	r3, [sp, #4]
   30030:	f3bf 8f5b 	dmb	ish
   30034:	3368      	adds	r3, #104	; 0x68
   30036:	e853 1f00 	ldrex	r1, [r3]
   3003a:	f041 0101 	orr.w	r1, r1, #1
   3003e:	e843 1200 	strex	r2, r1, [r3]
   30042:	2a00      	cmp	r2, #0
   30044:	d1f7      	bne.n	30036 <bt_l2cap_connected+0x7e>
   30046:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   3004a:	9801      	ldr	r0, [sp, #4]
   3004c:	6843      	ldr	r3, [r0, #4]
   3004e:	699b      	ldr	r3, [r3, #24]
   30050:	b113      	cbz	r3, 30058 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   30052:	f100 0168 	add.w	r1, r0, #104	; 0x68
   30056:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   30058:	360c      	adds	r6, #12
   3005a:	e7b4      	b.n	2ffc6 <bt_l2cap_connected+0xe>
	parent->next = child;
   3005c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   3005e:	6563      	str	r3, [r4, #84]	; 0x54
}
   30060:	e7dd      	b.n	3001e <bt_l2cap_connected+0x66>
   30062:	bf00      	nop
   30064:	00051338 	.word	0x00051338
   30068:	0005135c 	.word	0x0005135c
   3006c:	0004cc4b 	.word	0x0004cc4b

00030070 <bt_l2cap_update_conn_param>:
{
   30070:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30072:	460d      	mov	r5, r1
	ident++;
   30074:	4916      	ldr	r1, [pc, #88]	; (300d0 <bt_l2cap_update_conn_param+0x60>)
   30076:	780b      	ldrb	r3, [r1, #0]
   30078:	3301      	adds	r3, #1
	if (!ident) {
   3007a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   3007e:	bf08      	it	eq
   30080:	2301      	moveq	r3, #1
   30082:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   30084:	7809      	ldrb	r1, [r1, #0]
{
   30086:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   30088:	2208      	movs	r2, #8
   3008a:	2012      	movs	r0, #18
   3008c:	f01c fd94 	bl	4cbb8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   30090:	4604      	mov	r4, r0
   30092:	b1d0      	cbz	r0, 300ca <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   30094:	2108      	movs	r1, #8
   30096:	4408      	add	r0, r1
   30098:	f01f fbc6 	bl	4f828 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   3009c:	882b      	ldrh	r3, [r5, #0]
   3009e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   300a0:	886b      	ldrh	r3, [r5, #2]
   300a2:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   300a4:	88ab      	ldrh	r3, [r5, #4]
   300a6:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   300a8:	88eb      	ldrh	r3, [r5, #6]
   300aa:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   300ac:	2300      	movs	r3, #0
   300ae:	9300      	str	r3, [sp, #0]
   300b0:	4622      	mov	r2, r4
   300b2:	2105      	movs	r1, #5
   300b4:	4630      	mov	r0, r6
   300b6:	f01c fdfe 	bl	4ccb6 <bt_l2cap_send_cb>
	if (err) {
   300ba:	4605      	mov	r5, r0
   300bc:	b110      	cbz	r0, 300c4 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   300be:	4620      	mov	r0, r4
   300c0:	f013 fa0a 	bl	434d8 <net_buf_unref>
}
   300c4:	4628      	mov	r0, r5
   300c6:	b002      	add	sp, #8
   300c8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   300ca:	f06f 050b 	mvn.w	r5, #11
   300ce:	e7f9      	b.n	300c4 <bt_l2cap_update_conn_param+0x54>
   300d0:	20006dce 	.word	0x20006dce

000300d4 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   300d4:	4b02      	ldr	r3, [pc, #8]	; (300e0 <att_cfm_sent+0xc>)
   300d6:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   300da:	f01c bece 	b.w	4ce7a <att_sent>
   300de:	bf00      	nop
   300e0:	0004d3d5 	.word	0x0004d3d5

000300e4 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   300e4:	4b02      	ldr	r3, [pc, #8]	; (300f0 <att_rsp_sent+0xc>)
   300e6:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   300ea:	f01c bec6 	b.w	4ce7a <att_sent>
   300ee:	bf00      	nop
   300f0:	0004d3b9 	.word	0x0004d3b9

000300f4 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   300f4:	4b02      	ldr	r3, [pc, #8]	; (30100 <att_req_sent+0xc>)
   300f6:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   300fa:	f01c bebe 	b.w	4ce7a <att_sent>
   300fe:	bf00      	nop
   30100:	0004d16b 	.word	0x0004d16b

00030104 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   30104:	281d      	cmp	r0, #29
{
   30106:	4603      	mov	r3, r0
	switch (op) {
   30108:	d01e      	beq.n	30148 <att_op_get_type+0x44>
   3010a:	d815      	bhi.n	30138 <att_op_get_type+0x34>
   3010c:	2819      	cmp	r0, #25
   3010e:	d80f      	bhi.n	30130 <att_op_get_type+0x2c>
   30110:	b140      	cbz	r0, 30124 <att_op_get_type+0x20>
   30112:	4a10      	ldr	r2, [pc, #64]	; (30154 <att_op_get_type+0x50>)
   30114:	2001      	movs	r0, #1
   30116:	fa00 f103 	lsl.w	r1, r0, r3
   3011a:	400a      	ands	r2, r1
   3011c:	b9b2      	cbnz	r2, 3014c <att_op_get_type+0x48>
   3011e:	4a0e      	ldr	r2, [pc, #56]	; (30158 <att_op_get_type+0x54>)
   30120:	400a      	ands	r2, r1
   30122:	b982      	cbnz	r2, 30146 <att_op_get_type+0x42>
	case BT_ATT_OP_INDICATE:
		return ATT_INDICATION;
	}

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
   30124:	f013 0f40 	tst.w	r3, #64	; 0x40
   30128:	bf0c      	ite	eq
   3012a:	2006      	moveq	r0, #6
   3012c:	2000      	movne	r0, #0
   3012e:	4770      	bx	lr
	switch (op) {
   30130:	281b      	cmp	r0, #27
   30132:	d1f7      	bne.n	30124 <att_op_get_type+0x20>
		return ATT_NOTIFICATION;
   30134:	2003      	movs	r0, #3
   30136:	4770      	bx	lr
	switch (op) {
   30138:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   3013c:	2a52      	cmp	r2, #82	; 0x52
   3013e:	d007      	beq.n	30150 <att_op_get_type+0x4c>
   30140:	281e      	cmp	r0, #30
   30142:	d1ef      	bne.n	30124 <att_op_get_type+0x20>
   30144:	2004      	movs	r0, #4
	}

	return ATT_UNKNOWN;
}
   30146:	4770      	bx	lr
		return ATT_INDICATION;
   30148:	2005      	movs	r0, #5
   3014a:	4770      	bx	lr
		return ATT_RESPONSE;
   3014c:	2002      	movs	r0, #2
   3014e:	4770      	bx	lr
		return ATT_COMMAND;
   30150:	2000      	movs	r0, #0
   30152:	4770      	bx	lr
   30154:	028aaaaa 	.word	0x028aaaaa
   30158:	01455554 	.word	0x01455554

0003015c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   3015c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   3015e:	3808      	subs	r0, #8
   30160:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   30162:	a901      	add	r1, sp, #4
   30164:	4802      	ldr	r0, [pc, #8]	; (30170 <bt_att_released+0x14>)
   30166:	f020 f9a5 	bl	504b4 <k_mem_slab_free>
}
   3016a:	b003      	add	sp, #12
   3016c:	f85d fb04 	ldr.w	pc, [sp], #4
   30170:	20000e5c 	.word	0x20000e5c

00030174 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   30174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   30176:	2300      	movs	r3, #0
{
   30178:	4607      	mov	r7, r0
   3017a:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   3017c:	481e      	ldr	r0, [pc, #120]	; (301f8 <bt_att_accept+0x84>)
   3017e:	2200      	movs	r2, #0
   30180:	4669      	mov	r1, sp
   30182:	f017 fa9b 	bl	476bc <k_mem_slab_alloc>
   30186:	4604      	mov	r4, r0
   30188:	b120      	cbz	r0, 30194 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   3018a:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   3018e:	4620      	mov	r0, r4
   30190:	b003      	add	sp, #12
   30192:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   30194:	4601      	mov	r1, r0
   30196:	222c      	movs	r2, #44	; 0x2c
   30198:	9800      	ldr	r0, [sp, #0]
   3019a:	f01b fb81 	bl	4b8a0 <memset>
	att->conn = conn;
   3019e:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   301a0:	4816      	ldr	r0, [pc, #88]	; (301fc <bt_att_accept+0x88>)
	list->tail = NULL;
   301a2:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   301a4:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   301a8:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   301ac:	2200      	movs	r2, #0
   301ae:	2300      	movs	r3, #0
   301b0:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   301b2:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   301b4:	f017 fa82 	bl	476bc <k_mem_slab_alloc>
   301b8:	4604      	mov	r4, r0
   301ba:	2800      	cmp	r0, #0
   301bc:	d1e5      	bne.n	3018a <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
   301be:	4601      	mov	r1, r0
   301c0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   301c4:	9801      	ldr	r0, [sp, #4]
   301c6:	f01b fb6b 	bl	4b8a0 <memset>
	chan->chan.chan.ops = &ops;
   301ca:	9801      	ldr	r0, [sp, #4]
   301cc:	4b0c      	ldr	r3, [pc, #48]	; (30200 <bt_att_accept+0x8c>)
   301ce:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   301d0:	30f8      	adds	r0, #248	; 0xf8
   301d2:	f020 fa2a 	bl	5062a <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   301d6:	9b01      	ldr	r3, [sp, #4]
   301d8:	f3bf 8f5b 	dmb	ish
   301dc:	33f0      	adds	r3, #240	; 0xf0
   301de:	e853 2f00 	ldrex	r2, [r3]
   301e2:	e843 4100 	strex	r1, r4, [r3]
   301e6:	2900      	cmp	r1, #0
   301e8:	d1f9      	bne.n	301de <bt_att_accept+0x6a>
   301ea:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   301ee:	9b01      	ldr	r3, [sp, #4]
   301f0:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   301f4:	6033      	str	r3, [r6, #0]
	return 0;
   301f6:	e7ca      	b.n	3018e <bt_att_accept+0x1a>
   301f8:	20000e40 	.word	0x20000e40
   301fc:	20000e5c 	.word	0x20000e5c
   30200:	200005a8 	.word	0x200005a8

00030204 <read_group_cb>:
{
   30204:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30208:	4605      	mov	r5, r0
   3020a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   3020c:	f04f 0800 	mov.w	r8, #0
   30210:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   30214:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   30216:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   30218:	f88d 8008 	strb.w	r8, [sp, #8]
   3021c:	a902      	add	r1, sp, #8
{
   3021e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   30220:	f8ad 300a 	strh.w	r3, [sp, #10]
   30224:	f01b fc1f 	bl	4ba66 <bt_uuid_cmp>
   30228:	b1a0      	cbz	r0, 30254 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   3022a:	f642 0301 	movw	r3, #10241	; 0x2801
   3022e:	6828      	ldr	r0, [r5, #0]
   30230:	f88d 800c 	strb.w	r8, [sp, #12]
   30234:	a903      	add	r1, sp, #12
   30236:	f8ad 300e 	strh.w	r3, [sp, #14]
   3023a:	f01b fc14 	bl	4ba66 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   3023e:	b148      	cbz	r0, 30254 <read_group_cb+0x50>
		if (data->group &&
   30240:	6923      	ldr	r3, [r4, #16]
   30242:	b11b      	cbz	r3, 3024c <read_group_cb+0x48>
   30244:	885a      	ldrh	r2, [r3, #2]
   30246:	42b2      	cmp	r2, r6
   30248:	d200      	bcs.n	3024c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   3024a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   3024c:	2001      	movs	r0, #1
}
   3024e:	b004      	add	sp, #16
   30250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   30254:	6861      	ldr	r1, [r4, #4]
   30256:	6828      	ldr	r0, [r5, #0]
   30258:	f01b fc05 	bl	4ba66 <bt_uuid_cmp>
   3025c:	b110      	cbz	r0, 30264 <read_group_cb+0x60>
		data->group = NULL;
   3025e:	2300      	movs	r3, #0
   30260:	6123      	str	r3, [r4, #16]
   30262:	e7f3      	b.n	3024c <read_group_cb+0x48>
	if (data->rsp->len &&
   30264:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   30266:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   30268:	781a      	ldrb	r2, [r3, #0]
   3026a:	b13a      	cbz	r2, 3027c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   3026c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   30270:	8981      	ldrh	r1, [r0, #12]
   30272:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   30274:	4293      	cmp	r3, r2
   30276:	da01      	bge.n	3027c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   30278:	2000      	movs	r0, #0
   3027a:	e7e8      	b.n	3024e <read_group_cb+0x4a>
   3027c:	2104      	movs	r1, #4
   3027e:	3008      	adds	r0, #8
   30280:	f01f fad2 	bl	4f828 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   30284:	4b09      	ldr	r3, [pc, #36]	; (302ac <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   30286:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   30288:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   3028a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   3028c:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   3028e:	4629      	mov	r1, r5
   30290:	9300      	str	r3, [sp, #0]
   30292:	9401      	str	r4, [sp, #4]
   30294:	2300      	movs	r3, #0
   30296:	4638      	mov	r0, r7
   30298:	f01c ffa5 	bl	4d1e6 <att_chan_read>
	if (read < 0) {
   3029c:	2800      	cmp	r0, #0
   3029e:	dbeb      	blt.n	30278 <read_group_cb+0x74>
	if (!data->group) {
   302a0:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   302a2:	3800      	subs	r0, #0
   302a4:	bf18      	it	ne
   302a6:	2001      	movne	r0, #1
   302a8:	e7d1      	b.n	3024e <read_group_cb+0x4a>
   302aa:	bf00      	nop
   302ac:	0004d11f 	.word	0x0004d11f

000302b0 <chan_send>:
{
   302b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   302b4:	688b      	ldr	r3, [r1, #8]
   302b6:	781b      	ldrb	r3, [r3, #0]
   302b8:	2bd2      	cmp	r3, #210	; 0xd2
{
   302ba:	4606      	mov	r6, r0
   302bc:	460c      	mov	r4, r1
   302be:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   302c0:	d10c      	bne.n	302dc <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   302c2:	6803      	ldr	r3, [r0, #0]
   302c4:	6818      	ldr	r0, [r3, #0]
   302c6:	f01e ff8c 	bl	4f1e2 <bt_smp_sign>
		if (err) {
   302ca:	4605      	mov	r5, r0
   302cc:	b130      	cbz	r0, 302dc <chan_send+0x2c>
			net_buf_unref(buf);
   302ce:	4620      	mov	r0, r4
   302d0:	f013 f902 	bl	434d8 <net_buf_unref>
}
   302d4:	4628      	mov	r0, r5
   302d6:	b003      	add	sp, #12
   302d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   302dc:	f104 0008 	add.w	r0, r4, #8
   302e0:	f01f faeb 	bl	4f8ba <net_buf_simple_headroom>
	state->len = buf->len;
   302e4:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   302e8:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   302ea:	b957      	cbnz	r7, 30302 <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   302ec:	68a3      	ldr	r3, [r4, #8]
   302ee:	7818      	ldrb	r0, [r3, #0]
   302f0:	f7ff ff08 	bl	30104 <att_op_get_type>
   302f4:	3801      	subs	r0, #1
   302f6:	b2c0      	uxtb	r0, r0
   302f8:	2804      	cmp	r0, #4
   302fa:	bf9c      	itt	ls
   302fc:	4b13      	ldrls	r3, [pc, #76]	; (3034c <chan_send+0x9c>)
   302fe:	f853 7020 	ldrls.w	r7, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   30302:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   30304:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   30308:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   3030a:	4b11      	ldr	r3, [pc, #68]	; (30350 <chan_send+0xa0>)
   3030c:	429f      	cmp	r7, r3
   3030e:	d018      	beq.n	30342 <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   30310:	4b10      	ldr	r3, [pc, #64]	; (30354 <chan_send+0xa4>)
   30312:	429f      	cmp	r7, r3
   30314:	d017      	beq.n	30346 <chan_send+0x96>
		return att_sent;
   30316:	4910      	ldr	r1, [pc, #64]	; (30358 <chan_send+0xa8>)
   30318:	4b10      	ldr	r3, [pc, #64]	; (3035c <chan_send+0xac>)
   3031a:	4a11      	ldr	r2, [pc, #68]	; (30360 <chan_send+0xb0>)
   3031c:	428f      	cmp	r7, r1
   3031e:	bf18      	it	ne
   30320:	4613      	movne	r3, r2
			       &chan->chan.chan);
   30322:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   30324:	9600      	str	r6, [sp, #0]
   30326:	4622      	mov	r2, r4
   30328:	2104      	movs	r1, #4
   3032a:	f01c fcc4 	bl	4ccb6 <bt_l2cap_send_cb>
	if (err) {
   3032e:	4605      	mov	r5, r0
   30330:	2800      	cmp	r0, #0
   30332:	d0cf      	beq.n	302d4 <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   30334:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   30336:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   3033a:	fa13 f388 	uxtah	r3, r3, r8
   3033e:	60a3      	str	r3, [r4, #8]
}
   30340:	e7c8      	b.n	302d4 <chan_send+0x24>
		return att_rsp_sent;
   30342:	4b08      	ldr	r3, [pc, #32]	; (30364 <chan_send+0xb4>)
   30344:	e7ed      	b.n	30322 <chan_send+0x72>
		return att_cfm_sent;
   30346:	4b08      	ldr	r3, [pc, #32]	; (30368 <chan_send+0xb8>)
   30348:	e7eb      	b.n	30322 <chan_send+0x72>
   3034a:	bf00      	nop
   3034c:	00052164 	.word	0x00052164
   30350:	0004d3b9 	.word	0x0004d3b9
   30354:	0004d3d5 	.word	0x0004d3d5
   30358:	0004d16b 	.word	0x0004d16b
   3035c:	000300f5 	.word	0x000300f5
   30360:	0004ce7b 	.word	0x0004ce7b
   30364:	000300e5 	.word	0x000300e5
   30368:	000300d5 	.word	0x000300d5

0003036c <read_type_cb>:
{
   3036c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   30370:	f8d2 8000 	ldr.w	r8, [r2]
{
   30374:	4606      	mov	r6, r0
   30376:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   30378:	6800      	ldr	r0, [r0, #0]
   3037a:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   3037c:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   30380:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   30382:	f01b fb70 	bl	4ba66 <bt_uuid_cmp>
   30386:	4607      	mov	r7, r0
   30388:	2800      	cmp	r0, #0
   3038a:	d13e      	bne.n	3040a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   3038c:	4628      	mov	r0, r5
   3038e:	2215      	movs	r2, #21
   30390:	4631      	mov	r1, r6
   30392:	f01d fef0 	bl	4e176 <bt_gatt_check_perm>
   30396:	4605      	mov	r5, r0
   30398:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   3039a:	b148      	cbz	r0, 303b0 <read_type_cb+0x44>
		if (data->rsp->len) {
   3039c:	68e3      	ldr	r3, [r4, #12]
   3039e:	781b      	ldrb	r3, [r3, #0]
   303a0:	b923      	cbnz	r3, 303ac <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   303a2:	2500      	movs	r5, #0
}
   303a4:	4628      	mov	r0, r5
   303a6:	b003      	add	sp, #12
   303a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   303ac:	7527      	strb	r7, [r4, #20]
   303ae:	e7f8      	b.n	303a2 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   303b0:	68a0      	ldr	r0, [r4, #8]
   303b2:	f01f fa0b 	bl	4f7cc <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   303b6:	2102      	movs	r1, #2
   303b8:	3008      	adds	r0, #8
   303ba:	f01f fa35 	bl	4f828 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   303be:	4b14      	ldr	r3, [pc, #80]	; (30410 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   303c0:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   303c2:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   303c4:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   303c8:	4631      	mov	r1, r6
   303ca:	9300      	str	r3, [sp, #0]
   303cc:	9401      	str	r4, [sp, #4]
   303ce:	462b      	mov	r3, r5
   303d0:	4640      	mov	r0, r8
   303d2:	f01c ff08 	bl	4d1e6 <att_chan_read>
	if (read < 0) {
   303d6:	2800      	cmp	r0, #0
   303d8:	da07      	bge.n	303ea <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   303da:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   303de:	bf26      	itte	cs
   303e0:	4240      	negcs	r0, r0
   303e2:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   303e4:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   303e6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   303e8:	e7dc      	b.n	303a4 <read_type_cb+0x38>
	if (!data->item) {
   303ea:	6923      	ldr	r3, [r4, #16]
   303ec:	2b00      	cmp	r3, #0
   303ee:	d0d8      	beq.n	303a2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   303f0:	68a0      	ldr	r0, [r4, #8]
   303f2:	f01c fd3a 	bl	4ce6a <net_buf_frags_len>
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   303f6:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   303f8:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   303fc:	781b      	ldrb	r3, [r3, #0]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   303fe:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   30400:	429d      	cmp	r5, r3
   30402:	bf94      	ite	ls
   30404:	2500      	movls	r5, #0
   30406:	2501      	movhi	r5, #1
   30408:	e7cc      	b.n	303a4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   3040a:	2501      	movs	r5, #1
   3040c:	e7ca      	b.n	303a4 <read_type_cb+0x38>
   3040e:	bf00      	nop
   30410:	0004ce87 	.word	0x0004ce87

00030414 <bt_att_connected>:
{
   30414:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   30416:	4606      	mov	r6, r0
{
   30418:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   3041a:	2104      	movs	r1, #4
   3041c:	f856 0908 	ldr.w	r0, [r6], #-8
   30420:	f01c fce7 	bl	4cdf2 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   30424:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   30428:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3042a:	b91b      	cbnz	r3, 30434 <bt_att_connected+0x20>
   3042c:	f105 000c 	add.w	r0, r5, #12
   30430:	f020 f8fb 	bl	5062a <z_impl_k_queue_init>
	parent->next = child;
   30434:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   30436:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   3043a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   3043c:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   30440:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   30442:	b902      	cbnz	r2, 30446 <bt_att_connected+0x32>
	list->tail = node;
   30444:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   30446:	f3bf 8f5b 	dmb	ish
   3044a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   3044e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   30452:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   30454:	bf58      	it	pl
   30456:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   30458:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   3045a:	bf5c      	itt	pl
   3045c:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   30460:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   30464:	f01c fd3a 	bl	4cedc <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   30468:	f504 7084 	add.w	r0, r4, #264	; 0x108
   3046c:	4902      	ldr	r1, [pc, #8]	; (30478 <bt_att_connected+0x64>)
}
   3046e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   30472:	f020 b9dd 	b.w	50830 <k_work_init_delayable>
   30476:	bf00      	nop
   30478:	0004d753 	.word	0x0004d753

0003047c <att_indicate>:
{
   3047c:	b570      	push	{r4, r5, r6, lr}
   3047e:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   30480:	f101 0008 	add.w	r0, r1, #8
   30484:	460d      	mov	r5, r1
   30486:	f01f fa10 	bl	4f8aa <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   3048a:	6826      	ldr	r6, [r4, #0]
   3048c:	89ab      	ldrh	r3, [r5, #12]
   3048e:	68aa      	ldr	r2, [r5, #8]
   30490:	4601      	mov	r1, r0
   30492:	6830      	ldr	r0, [r6, #0]
   30494:	f01e f98b 	bl	4e7ae <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   30498:	211e      	movs	r1, #30
   3049a:	2200      	movs	r2, #0
   3049c:	4620      	mov	r0, r4
   3049e:	f01d f85a 	bl	4d556 <bt_att_chan_create_pdu>
	if (!buf) {
   304a2:	4601      	mov	r1, r0
   304a4:	b118      	cbz	r0, 304ae <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   304a6:	4a03      	ldr	r2, [pc, #12]	; (304b4 <att_indicate+0x38>)
   304a8:	4620      	mov	r0, r4
   304aa:	f01c ff5d 	bl	4d368 <bt_att_chan_send_rsp>
}
   304ae:	2000      	movs	r0, #0
   304b0:	bd70      	pop	{r4, r5, r6, pc}
   304b2:	bf00      	nop
   304b4:	0004d3d5 	.word	0x0004d3d5

000304b8 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   304b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   304bc:	4688      	mov	r8, r1
   304be:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   304c0:	2101      	movs	r1, #1
   304c2:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   304c4:	4605      	mov	r5, r0
   304c6:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   304c8:	f01d f845 	bl	4d556 <bt_att_chan_create_pdu>
	if (!buf) {
   304cc:	4604      	mov	r4, r0
   304ce:	b178      	cbz	r0, 304f0 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   304d0:	2104      	movs	r1, #4
   304d2:	3008      	adds	r0, #8
   304d4:	f01f f9a8 	bl	4f828 <net_buf_simple_add>
	rsp->request = req;
   304d8:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   304dc:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   304de:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   304e2:	4621      	mov	r1, r4
   304e4:	4628      	mov	r0, r5
   304e6:	4a03      	ldr	r2, [pc, #12]	; (304f4 <send_err_rsp.part.0+0x3c>)
}
   304e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   304ec:	f01c bf3c 	b.w	4d368 <bt_att_chan_send_rsp>
}
   304f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   304f4:	0004d3b9 	.word	0x0004d3b9

000304f8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   304f8:	898b      	ldrh	r3, [r1, #12]
{
   304fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   304fe:	4604      	mov	r4, r0
   30500:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   30502:	2b00      	cmp	r3, #0
   30504:	d040      	beq.n	30588 <bt_att_recv+0x90>
	return net_buf_simple_pull_mem(&buf->b, len);
   30506:	2101      	movs	r1, #1
   30508:	f105 0008 	add.w	r0, r5, #8
   3050c:	f01f f9bd 	bl	4f88a <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   30510:	f854 3c08 	ldr.w	r3, [r4, #-8]
   30514:	4607      	mov	r7, r0
   30516:	b3bb      	cbz	r3, 30588 <bt_att_recv+0x90>
		if (hdr->code == handlers[i].op) {
   30518:	f890 8000 	ldrb.w	r8, [r0]
   3051c:	4a31      	ldr	r2, [pc, #196]	; (305e4 <bt_att_recv+0xec>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   3051e:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   30522:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   30524:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   30528:	4541      	cmp	r1, r8
   3052a:	d11b      	bne.n	30564 <bt_att_recv+0x6c>
		if (handler->type == ATT_REQUEST &&
   3052c:	00d9      	lsls	r1, r3, #3
   3052e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   30532:	f893 8002 	ldrb.w	r8, [r3, #2]
   30536:	f1b8 0f01 	cmp.w	r8, #1
   3053a:	d028      	beq.n	3058e <bt_att_recv+0x96>
		} else if (handler->type == ATT_INDICATION &&
   3053c:	f1b8 0f05 	cmp.w	r8, #5
   30540:	d136      	bne.n	305b0 <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   30542:	f3bf 8f5b 	dmb	ish
   30546:	34e8      	adds	r4, #232	; 0xe8
   30548:	e854 3f00 	ldrex	r3, [r4]
   3054c:	f043 0002 	orr.w	r0, r3, #2
   30550:	e844 0c00 	strex	ip, r0, [r4]
   30554:	f1bc 0f00 	cmp.w	ip, #0
   30558:	d1f6      	bne.n	30548 <bt_att_recv+0x50>
   3055a:	f3bf 8f5b 	dmb	ish
   3055e:	f013 0f02 	tst.w	r3, #2
   30562:	e024      	b.n	305ae <bt_att_recv+0xb6>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   30564:	3301      	adds	r3, #1
   30566:	2b1c      	cmp	r3, #28
   30568:	d1dc      	bne.n	30524 <bt_att_recv+0x2c>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   3056a:	4640      	mov	r0, r8
   3056c:	f7ff fdca 	bl	30104 <att_op_get_type>
   30570:	b150      	cbz	r0, 30588 <bt_att_recv+0x90>
   30572:	2805      	cmp	r0, #5
   30574:	d008      	beq.n	30588 <bt_att_recv+0x90>
	if (!req) {
   30576:	f1b8 0f00 	cmp.w	r8, #0
   3057a:	d005      	beq.n	30588 <bt_att_recv+0x90>
   3057c:	2306      	movs	r3, #6
   3057e:	2200      	movs	r2, #0
   30580:	4641      	mov	r1, r8
   30582:	4630      	mov	r0, r6
   30584:	f7ff ff98 	bl	304b8 <send_err_rsp.part.0>
}
   30588:	2000      	movs	r0, #0
   3058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3058e:	34e8      	adds	r4, #232	; 0xe8
   30590:	f3bf 8f5b 	dmb	ish
   30594:	e854 3f00 	ldrex	r3, [r4]
   30598:	f043 0001 	orr.w	r0, r3, #1
   3059c:	e844 0c00 	strex	ip, r0, [r4]
   305a0:	f1bc 0f00 	cmp.w	ip, #0
   305a4:	d1f6      	bne.n	30594 <bt_att_recv+0x9c>
   305a6:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   305aa:	f013 0f01 	tst.w	r3, #1
   305ae:	d1eb      	bne.n	30588 <bt_att_recv+0x90>
	if (buf->len < handler->expect_len) {
   305b0:	440a      	add	r2, r1
   305b2:	89a9      	ldrh	r1, [r5, #12]
   305b4:	7853      	ldrb	r3, [r2, #1]
   305b6:	4299      	cmp	r1, r3
   305b8:	d30e      	bcc.n	305d8 <bt_att_recv+0xe0>
		err = handler->func(att_chan, buf);
   305ba:	6853      	ldr	r3, [r2, #4]
   305bc:	4629      	mov	r1, r5
   305be:	4630      	mov	r0, r6
   305c0:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   305c2:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   305c6:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   305c8:	d1de      	bne.n	30588 <bt_att_recv+0x90>
   305ca:	2800      	cmp	r0, #0
   305cc:	d0dc      	beq.n	30588 <bt_att_recv+0x90>
		send_err_rsp(att_chan, hdr->code, 0, err);
   305ce:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
   305d0:	2900      	cmp	r1, #0
   305d2:	d0d9      	beq.n	30588 <bt_att_recv+0x90>
   305d4:	2200      	movs	r2, #0
   305d6:	e7d4      	b.n	30582 <bt_att_recv+0x8a>
	if (handler->type == ATT_REQUEST && err) {
   305d8:	f1b8 0f01 	cmp.w	r8, #1
   305dc:	d1d4      	bne.n	30588 <bt_att_recv+0x90>
		err = BT_ATT_ERR_INVALID_PDU;
   305de:	2304      	movs	r3, #4
   305e0:	e7f5      	b.n	305ce <bt_att_recv+0xd6>
   305e2:	bf00      	nop
   305e4:	00052178 	.word	0x00052178

000305e8 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   305e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   305ec:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   305ee:	6803      	ldr	r3, [r0, #0]
   305f0:	460e      	mov	r6, r1
   305f2:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   305f4:	b087      	sub	sp, #28
   305f6:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   305f8:	bf18      	it	ne
   305fa:	2101      	movne	r1, #1
   305fc:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   305fe:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   30600:	f01e f945 	bl	4e88e <bt_gatt_change_aware>
   30604:	2800      	cmp	r0, #0
   30606:	d04b      	beq.n	306a0 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   30608:	2f00      	cmp	r7, #0
   3060a:	d04b      	beq.n	306a4 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   3060c:	2218      	movs	r2, #24
   3060e:	2100      	movs	r1, #0
   30610:	4668      	mov	r0, sp
   30612:	f01b f945 	bl	4b8a0 <memset>
	if (rsp) {
   30616:	f1b8 0f00 	cmp.w	r8, #0
   3061a:	d122      	bne.n	30662 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   3061c:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   3061e:	4a22      	ldr	r2, [pc, #136]	; (306a8 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
   30620:	681b      	ldr	r3, [r3, #0]
   30622:	9300      	str	r3, [sp, #0]
	data.value = value;
   30624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   30626:	9303      	str	r3, [sp, #12]
	data.len = len;
   30628:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   3062c:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   30630:	2301      	movs	r3, #1
   30632:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   30636:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   3063a:	466b      	mov	r3, sp
   3063c:	4639      	mov	r1, r7
   3063e:	4638      	mov	r0, r7
	data.req = req;
   30640:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   30644:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   30648:	f01c fc7e 	bl	4cf48 <bt_gatt_foreach_attr>
	if (data.err) {
   3064c:	f89d 4014 	ldrb.w	r4, [sp, #20]
   30650:	b1f4      	cbz	r4, 30690 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   30652:	f1b8 0f00 	cmp.w	r8, #0
   30656:	d10e      	bne.n	30676 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   30658:	2400      	movs	r4, #0
}
   3065a:	4620      	mov	r0, r4
   3065c:	b007      	add	sp, #28
   3065e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   30662:	2200      	movs	r2, #0
   30664:	4641      	mov	r1, r8
   30666:	4628      	mov	r0, r5
   30668:	f01c ff75 	bl	4d556 <bt_att_chan_create_pdu>
   3066c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   3066e:	2800      	cmp	r0, #0
   30670:	d1d4      	bne.n	3061c <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   30672:	240e      	movs	r4, #14
   30674:	e7f1      	b.n	3065a <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   30676:	9801      	ldr	r0, [sp, #4]
   30678:	f012 ff2e 	bl	434d8 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   3067c:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   30680:	2e00      	cmp	r6, #0
   30682:	d0e9      	beq.n	30658 <att_write_rsp.constprop.0+0x70>
   30684:	463a      	mov	r2, r7
   30686:	4631      	mov	r1, r6
   30688:	4628      	mov	r0, r5
   3068a:	f7ff ff15 	bl	304b8 <send_err_rsp.part.0>
   3068e:	e7e3      	b.n	30658 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   30690:	9901      	ldr	r1, [sp, #4]
   30692:	2900      	cmp	r1, #0
   30694:	d0e0      	beq.n	30658 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30696:	4a05      	ldr	r2, [pc, #20]	; (306ac <att_write_rsp.constprop.0+0xc4>)
   30698:	4628      	mov	r0, r5
   3069a:	f01c fe65 	bl	4d368 <bt_att_chan_send_rsp>
   3069e:	e7dc      	b.n	3065a <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   306a0:	2412      	movs	r4, #18
   306a2:	e7da      	b.n	3065a <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   306a4:	2401      	movs	r4, #1
   306a6:	e7d8      	b.n	3065a <att_write_rsp.constprop.0+0x72>
   306a8:	0004d181 	.word	0x0004d181
   306ac:	0004d3b9 	.word	0x0004d3b9

000306b0 <att_read_group_req>:
{
   306b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   306b4:	898c      	ldrh	r4, [r1, #12]
   306b6:	3c04      	subs	r4, #4
   306b8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   306ba:	2c02      	cmp	r4, #2
{
   306bc:	4605      	mov	r5, r0
   306be:	b08c      	sub	sp, #48	; 0x30
   306c0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   306c2:	d001      	beq.n	306c8 <att_read_group_req+0x18>
   306c4:	2c10      	cmp	r4, #16
   306c6:	d16f      	bne.n	307a8 <att_read_group_req+0xf8>
   306c8:	2104      	movs	r1, #4
   306ca:	3008      	adds	r0, #8
   306cc:	f01f f8dd 	bl	4f88a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   306d0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   306d4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   306d6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   306d8:	1d01      	adds	r1, r0, #4
   306da:	4622      	mov	r2, r4
   306dc:	4640      	mov	r0, r8
   306de:	f01b f9f0 	bl	4bac2 <bt_uuid_create>
   306e2:	2800      	cmp	r0, #0
   306e4:	d062      	beq.n	307ac <att_read_group_req+0xfc>
	if (!start || !end) {
   306e6:	2e00      	cmp	r6, #0
   306e8:	d03a      	beq.n	30760 <att_read_group_req+0xb0>
   306ea:	2400      	movs	r4, #0
   306ec:	2f00      	cmp	r7, #0
   306ee:	d036      	beq.n	3075e <att_read_group_req+0xae>
	if (start > end) {
   306f0:	42be      	cmp	r6, r7
   306f2:	d835      	bhi.n	30760 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   306f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   306f8:	a901      	add	r1, sp, #4
   306fa:	4640      	mov	r0, r8
   306fc:	f88d 4004 	strb.w	r4, [sp, #4]
   30700:	f8ad 3006 	strh.w	r3, [sp, #6]
   30704:	f01b f9af 	bl	4ba66 <bt_uuid_cmp>
   30708:	2800      	cmp	r0, #0
   3070a:	d134      	bne.n	30776 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   3070c:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   3070e:	2214      	movs	r2, #20
   30710:	2100      	movs	r1, #0
   30712:	a807      	add	r0, sp, #28
   30714:	f01b f8c4 	bl	4b8a0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   30718:	2201      	movs	r2, #1
   3071a:	2111      	movs	r1, #17
   3071c:	4620      	mov	r0, r4
   3071e:	f01c ff65 	bl	4d5ec <bt_att_create_pdu>
   30722:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   30724:	2800      	cmp	r0, #0
   30726:	d041      	beq.n	307ac <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   30728:	2101      	movs	r1, #1
   3072a:	3008      	adds	r0, #8
	data.uuid = uuid;
   3072c:	e9cd 5807 	strd	r5, r8, [sp, #28]
   30730:	f01f f87a 	bl	4f828 <net_buf_simple_add>
	data.rsp->len = 0U;
   30734:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   30738:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   3073a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   3073c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   30740:	4a1b      	ldr	r2, [pc, #108]	; (307b0 <att_read_group_req+0x100>)
	data.group = NULL;
   30742:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   30746:	4639      	mov	r1, r7
   30748:	4630      	mov	r0, r6
   3074a:	f01c fbfd 	bl	4cf48 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   3074e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30750:	781c      	ldrb	r4, [r3, #0]
   30752:	bb1c      	cbnz	r4, 3079c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   30754:	9809      	ldr	r0, [sp, #36]	; 0x24
   30756:	f012 febf 	bl	434d8 <net_buf_unref>
	if (!req) {
   3075a:	230a      	movs	r3, #10
   3075c:	e018      	b.n	30790 <att_read_group_req+0xe0>
			*err = 0U;
   3075e:	463e      	mov	r6, r7
	if (!req) {
   30760:	2301      	movs	r3, #1
   30762:	4632      	mov	r2, r6
   30764:	2110      	movs	r1, #16
   30766:	4628      	mov	r0, r5
   30768:	f7ff fea6 	bl	304b8 <send_err_rsp.part.0>
		return 0;
   3076c:	2400      	movs	r4, #0
}
   3076e:	4620      	mov	r0, r4
   30770:	b00c      	add	sp, #48	; 0x30
   30772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   30776:	f642 0301 	movw	r3, #10241	; 0x2801
   3077a:	a907      	add	r1, sp, #28
   3077c:	4640      	mov	r0, r8
   3077e:	f88d 401c 	strb.w	r4, [sp, #28]
   30782:	f8ad 301e 	strh.w	r3, [sp, #30]
   30786:	f01b f96e 	bl	4ba66 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   3078a:	2800      	cmp	r0, #0
   3078c:	d0be      	beq.n	3070c <att_read_group_req+0x5c>
	if (!req) {
   3078e:	2310      	movs	r3, #16
   30790:	4632      	mov	r2, r6
   30792:	2110      	movs	r1, #16
   30794:	4628      	mov	r0, r5
   30796:	f7ff fe8f 	bl	304b8 <send_err_rsp.part.0>
		return 0;
   3079a:	e7e8      	b.n	3076e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   3079c:	4a05      	ldr	r2, [pc, #20]	; (307b4 <att_read_group_req+0x104>)
   3079e:	9909      	ldr	r1, [sp, #36]	; 0x24
   307a0:	4628      	mov	r0, r5
   307a2:	f01c fde1 	bl	4d368 <bt_att_chan_send_rsp>
	return 0;
   307a6:	e7e1      	b.n	3076c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   307a8:	2404      	movs	r4, #4
   307aa:	e7e0      	b.n	3076e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   307ac:	240e      	movs	r4, #14
   307ae:	e7de      	b.n	3076e <att_read_group_req+0xbe>
   307b0:	00030205 	.word	0x00030205
   307b4:	0004d3b9 	.word	0x0004d3b9

000307b8 <att_read_mult_req>:
{
   307b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   307bc:	6886      	ldr	r6, [r0, #8]
{
   307be:	b085      	sub	sp, #20
   307c0:	4604      	mov	r4, r0
   307c2:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   307c4:	4630      	mov	r0, r6
   307c6:	2101      	movs	r1, #1
   307c8:	f01e f861 	bl	4e88e <bt_gatt_change_aware>
   307cc:	2800      	cmp	r0, #0
   307ce:	d038      	beq.n	30842 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   307d0:	2210      	movs	r2, #16
   307d2:	2100      	movs	r1, #0
   307d4:	4668      	mov	r0, sp
   307d6:	f01b f863 	bl	4b8a0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   307da:	2200      	movs	r2, #0
   307dc:	210f      	movs	r1, #15
   307de:	4630      	mov	r0, r6
   307e0:	f01c ff04 	bl	4d5ec <bt_att_create_pdu>
   307e4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   307e6:	b370      	cbz	r0, 30846 <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   307e8:	f8df 9060 	ldr.w	r9, [pc, #96]	; 3084c <att_read_mult_req+0x94>
	data.chan = chan;
   307ec:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   307ee:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   307f2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   307f6:	89ab      	ldrh	r3, [r5, #12]
   307f8:	2b01      	cmp	r3, #1
   307fa:	d805      	bhi.n	30808 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   307fc:	4a14      	ldr	r2, [pc, #80]	; (30850 <att_read_mult_req+0x98>)
   307fe:	9902      	ldr	r1, [sp, #8]
   30800:	4620      	mov	r0, r4
   30802:	f01c fdb1 	bl	4d368 <bt_att_chan_send_rsp>
   30806:	e018      	b.n	3083a <att_read_mult_req+0x82>
   30808:	4638      	mov	r0, r7
   3080a:	f01f f84e 	bl	4f8aa <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   3080e:	466b      	mov	r3, sp
   30810:	464a      	mov	r2, r9
   30812:	4601      	mov	r1, r0
   30814:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   30816:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   3081a:	f01c fb95 	bl	4cf48 <bt_gatt_foreach_attr>
		if (data.err) {
   3081e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   30822:	2b00      	cmp	r3, #0
   30824:	d0e7      	beq.n	307f6 <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   30826:	9802      	ldr	r0, [sp, #8]
   30828:	f012 fe56 	bl	434d8 <net_buf_unref>
	if (!req) {
   3082c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   30830:	4632      	mov	r2, r6
   30832:	210e      	movs	r1, #14
   30834:	4620      	mov	r0, r4
   30836:	f7ff fe3f 	bl	304b8 <send_err_rsp.part.0>
	return 0;
   3083a:	2000      	movs	r0, #0
}
   3083c:	b005      	add	sp, #20
   3083e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   30842:	2012      	movs	r0, #18
   30844:	e7fa      	b.n	3083c <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   30846:	200e      	movs	r0, #14
   30848:	e7f8      	b.n	3083c <att_read_mult_req+0x84>
   3084a:	bf00      	nop
   3084c:	0004d3f1 	.word	0x0004d3f1
   30850:	0004d3b9 	.word	0x0004d3b9

00030854 <att_read_rsp>:
{
   30854:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   30858:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   3085c:	4605      	mov	r5, r0
   3085e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   30860:	4640      	mov	r0, r8
   30862:	2101      	movs	r1, #1
{
   30864:	4614      	mov	r4, r2
   30866:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   30868:	f01e f811 	bl	4e88e <bt_gatt_change_aware>
   3086c:	b390      	cbz	r0, 308d4 <att_read_rsp+0x80>
	if (!handle) {
   3086e:	b39e      	cbz	r6, 308d8 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   30870:	2210      	movs	r2, #16
   30872:	2100      	movs	r1, #0
   30874:	4668      	mov	r0, sp
   30876:	f01b f813 	bl	4b8a0 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   3087a:	2200      	movs	r2, #0
   3087c:	4621      	mov	r1, r4
   3087e:	4640      	mov	r0, r8
   30880:	f01c feb4 	bl	4d5ec <bt_att_create_pdu>
   30884:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   30886:	b348      	cbz	r0, 308dc <att_read_rsp+0x88>
	data.offset = offset;
   30888:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   3088c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   30890:	2301      	movs	r3, #1
   30892:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30896:	4a12      	ldr	r2, [pc, #72]	; (308e0 <att_read_rsp+0x8c>)
	data.chan = chan;
   30898:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   3089a:	466b      	mov	r3, sp
   3089c:	4631      	mov	r1, r6
   3089e:	4630      	mov	r0, r6
   308a0:	f01c fb52 	bl	4cf48 <bt_gatt_foreach_attr>
	if (data.err) {
   308a4:	f89d 400c 	ldrb.w	r4, [sp, #12]
   308a8:	b174      	cbz	r4, 308c8 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   308aa:	9802      	ldr	r0, [sp, #8]
   308ac:	f012 fe14 	bl	434d8 <net_buf_unref>
	if (!req) {
   308b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   308b4:	4632      	mov	r2, r6
   308b6:	4639      	mov	r1, r7
   308b8:	4628      	mov	r0, r5
   308ba:	f7ff fdfd 	bl	304b8 <send_err_rsp.part.0>
		return 0;
   308be:	2400      	movs	r4, #0
}
   308c0:	4620      	mov	r0, r4
   308c2:	b004      	add	sp, #16
   308c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   308c8:	4a06      	ldr	r2, [pc, #24]	; (308e4 <att_read_rsp+0x90>)
   308ca:	9902      	ldr	r1, [sp, #8]
   308cc:	4628      	mov	r0, r5
   308ce:	f01c fd4b 	bl	4d368 <bt_att_chan_send_rsp>
	return 0;
   308d2:	e7f5      	b.n	308c0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   308d4:	2412      	movs	r4, #18
   308d6:	e7f3      	b.n	308c0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   308d8:	2401      	movs	r4, #1
   308da:	e7f1      	b.n	308c0 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   308dc:	240e      	movs	r4, #14
   308de:	e7ef      	b.n	308c0 <att_read_rsp+0x6c>
   308e0:	0004d3f1 	.word	0x0004d3f1
   308e4:	0004d3b9 	.word	0x0004d3b9

000308e8 <att_read_type_req>:
{
   308e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   308ec:	898c      	ldrh	r4, [r1, #12]
   308ee:	3c04      	subs	r4, #4
   308f0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   308f2:	2c02      	cmp	r4, #2
{
   308f4:	4605      	mov	r5, r0
   308f6:	b08c      	sub	sp, #48	; 0x30
   308f8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   308fa:	d001      	beq.n	30900 <att_read_type_req+0x18>
   308fc:	2c10      	cmp	r4, #16
   308fe:	d150      	bne.n	309a2 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   30900:	2104      	movs	r1, #4
   30902:	3008      	adds	r0, #8
   30904:	f01e ffc1 	bl	4f88a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30908:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   3090c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   3090e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30910:	1d01      	adds	r1, r0, #4
   30912:	4622      	mov	r2, r4
   30914:	4640      	mov	r0, r8
   30916:	f01b f8d4 	bl	4bac2 <bt_uuid_create>
   3091a:	b188      	cbz	r0, 30940 <att_read_type_req+0x58>
	if (!start || !end) {
   3091c:	b19e      	cbz	r6, 30946 <att_read_type_req+0x5e>
   3091e:	b18f      	cbz	r7, 30944 <att_read_type_req+0x5c>
	if (start > end) {
   30920:	42b7      	cmp	r7, r6
   30922:	d310      	bcc.n	30946 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   30924:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   30926:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   30928:	2100      	movs	r1, #0
   3092a:	eb0d 0002 	add.w	r0, sp, r2
   3092e:	f01a ffb7 	bl	4b8a0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   30932:	2201      	movs	r2, #1
   30934:	2109      	movs	r1, #9
   30936:	4620      	mov	r0, r4
   30938:	f01c fe58 	bl	4d5ec <bt_att_create_pdu>
   3093c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   3093e:	b968      	cbnz	r0, 3095c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   30940:	240e      	movs	r4, #14
   30942:	e007      	b.n	30954 <att_read_type_req+0x6c>
			*err = 0U;
   30944:	463e      	mov	r6, r7
	if (!req) {
   30946:	2301      	movs	r3, #1
   30948:	4632      	mov	r2, r6
   3094a:	2108      	movs	r1, #8
   3094c:	4628      	mov	r0, r5
   3094e:	f7ff fdb3 	bl	304b8 <send_err_rsp.part.0>
		return 0;
   30952:	2400      	movs	r4, #0
}
   30954:	4620      	mov	r0, r4
   30956:	b00c      	add	sp, #48	; 0x30
   30958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   3095c:	2101      	movs	r1, #1
   3095e:	3008      	adds	r0, #8
	data.uuid = uuid;
   30960:	e9cd 5806 	strd	r5, r8, [sp, #24]
   30964:	f01e ff60 	bl	4f828 <net_buf_simple_add>
	data.rsp->len = 0U;
   30968:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   3096c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   3096e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   30970:	4a0d      	ldr	r2, [pc, #52]	; (309a8 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   30972:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   30976:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   30978:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   3097c:	4630      	mov	r0, r6
   3097e:	ab06      	add	r3, sp, #24
   30980:	f01c fae2 	bl	4cf48 <bt_gatt_foreach_attr>
	if (data.err) {
   30984:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   30988:	b12c      	cbz	r4, 30996 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   3098a:	9808      	ldr	r0, [sp, #32]
   3098c:	f012 fda4 	bl	434d8 <net_buf_unref>
	if (!req) {
   30990:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   30994:	e7d8      	b.n	30948 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30996:	4a05      	ldr	r2, [pc, #20]	; (309ac <att_read_type_req+0xc4>)
   30998:	9908      	ldr	r1, [sp, #32]
   3099a:	4628      	mov	r0, r5
   3099c:	f01c fce4 	bl	4d368 <bt_att_chan_send_rsp>
	return 0;
   309a0:	e7d8      	b.n	30954 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   309a2:	2404      	movs	r4, #4
   309a4:	e7d6      	b.n	30954 <att_read_type_req+0x6c>
   309a6:	bf00      	nop
   309a8:	0003036d 	.word	0x0003036d
   309ac:	0004d3b9 	.word	0x0004d3b9

000309b0 <att_find_type_req>:
{
   309b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   309b4:	4688      	mov	r8, r1
   309b6:	b086      	sub	sp, #24
   309b8:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   309ba:	2106      	movs	r1, #6
   309bc:	f108 0008 	add.w	r0, r8, #8
   309c0:	f01e ff63 	bl	4f88a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   309c4:	8807      	ldrh	r7, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   309c6:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   309ca:	8883      	ldrh	r3, [r0, #4]
	value = buf->data;
   309cc:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (!start || !end) {
   309d0:	b1ef      	cbz	r7, 30a0e <att_find_type_req+0x5e>
   309d2:	2400      	movs	r4, #0
   309d4:	f1b9 0f00 	cmp.w	r9, #0
   309d8:	d018      	beq.n	30a0c <att_find_type_req+0x5c>
	if (start > end) {
   309da:	454f      	cmp	r7, r9
   309dc:	d817      	bhi.n	30a0e <att_find_type_req+0x5e>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   309de:	f8ad 3002 	strh.w	r3, [sp, #2]
   309e2:	a901      	add	r1, sp, #4
   309e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   309e8:	4668      	mov	r0, sp
   309ea:	f88d 4000 	strb.w	r4, [sp]
   309ee:	f88d 4004 	strb.w	r4, [sp, #4]
   309f2:	f8ad 3006 	strh.w	r3, [sp, #6]
   309f6:	f01b f836 	bl	4ba66 <bt_uuid_cmp>
   309fa:	4606      	mov	r6, r0
   309fc:	b190      	cbz	r0, 30a24 <att_find_type_req+0x74>
	if (!req) {
   309fe:	230a      	movs	r3, #10
   30a00:	463a      	mov	r2, r7
   30a02:	2106      	movs	r1, #6
   30a04:	4628      	mov	r0, r5
   30a06:	f7ff fd57 	bl	304b8 <send_err_rsp.part.0>
		return 0;
   30a0a:	e007      	b.n	30a1c <att_find_type_req+0x6c>
			*err = 0U;
   30a0c:	464f      	mov	r7, r9
	if (!req) {
   30a0e:	2301      	movs	r3, #1
   30a10:	463a      	mov	r2, r7
   30a12:	2106      	movs	r1, #6
   30a14:	4628      	mov	r0, r5
   30a16:	f7ff fd4f 	bl	304b8 <send_err_rsp.part.0>
		return 0;
   30a1a:	2400      	movs	r4, #0
}
   30a1c:	4620      	mov	r0, r4
   30a1e:	b006      	add	sp, #24
   30a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   30a24:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   30a28:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   30a2c:	4601      	mov	r1, r0
   30a2e:	2214      	movs	r2, #20
   30a30:	a801      	add	r0, sp, #4
   30a32:	f01a ff35 	bl	4b8a0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   30a36:	4632      	mov	r2, r6
   30a38:	2107      	movs	r1, #7
   30a3a:	4640      	mov	r0, r8
   30a3c:	f01c fdd6 	bl	4d5ec <bt_att_create_pdu>
   30a40:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   30a42:	b1e0      	cbz	r0, 30a7e <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   30a44:	230a      	movs	r3, #10
   30a46:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   30a4a:	4a0e      	ldr	r2, [pc, #56]	; (30a84 <att_find_type_req+0xd4>)
	data.value_len = value_len;
   30a4c:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   30a50:	ab01      	add	r3, sp, #4
   30a52:	4649      	mov	r1, r9
   30a54:	4638      	mov	r0, r7
	data.value = value;
   30a56:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   30a5a:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   30a5c:	f01c fa74 	bl	4cf48 <bt_gatt_foreach_attr>
	if (data.err) {
   30a60:	f89d 4015 	ldrb.w	r4, [sp, #21]
   30a64:	b12c      	cbz	r4, 30a72 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   30a66:	9802      	ldr	r0, [sp, #8]
   30a68:	f012 fd36 	bl	434d8 <net_buf_unref>
	if (!req) {
   30a6c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   30a70:	e7ce      	b.n	30a10 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30a72:	4a05      	ldr	r2, [pc, #20]	; (30a88 <att_find_type_req+0xd8>)
   30a74:	9902      	ldr	r1, [sp, #8]
   30a76:	4628      	mov	r0, r5
   30a78:	f01c fc76 	bl	4d368 <bt_att_chan_send_rsp>
	return 0;
   30a7c:	e7ce      	b.n	30a1c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   30a7e:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   30a80:	e7cc      	b.n	30a1c <att_find_type_req+0x6c>
   30a82:	bf00      	nop
   30a84:	0004cf5f 	.word	0x0004cf5f
   30a88:	0004d3b9 	.word	0x0004d3b9

00030a8c <att_find_info_req>:
{
   30a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   30a8e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   30a90:	881e      	ldrh	r6, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   30a92:	885c      	ldrh	r4, [r3, #2]
{
   30a94:	b085      	sub	sp, #20
   30a96:	4605      	mov	r5, r0
	if (!start || !end) {
   30a98:	b196      	cbz	r6, 30ac0 <att_find_info_req+0x34>
   30a9a:	b184      	cbz	r4, 30abe <att_find_info_req+0x32>
	if (start > end) {
   30a9c:	42b4      	cmp	r4, r6
   30a9e:	d30f      	bcc.n	30ac0 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   30aa0:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   30aa2:	2210      	movs	r2, #16
   30aa4:	2100      	movs	r1, #0
   30aa6:	4668      	mov	r0, sp
   30aa8:	f01a fefa 	bl	4b8a0 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   30aac:	2200      	movs	r2, #0
   30aae:	2105      	movs	r1, #5
   30ab0:	4638      	mov	r0, r7
   30ab2:	f01c fd9b 	bl	4d5ec <bt_att_create_pdu>
   30ab6:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   30ab8:	b958      	cbnz	r0, 30ad2 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   30aba:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   30abc:	e007      	b.n	30ace <att_find_info_req+0x42>
			*err = 0U;
   30abe:	4626      	mov	r6, r4
	if (!req) {
   30ac0:	2301      	movs	r3, #1
   30ac2:	4632      	mov	r2, r6
   30ac4:	2104      	movs	r1, #4
   30ac6:	4628      	mov	r0, r5
   30ac8:	f7ff fcf6 	bl	304b8 <send_err_rsp.part.0>
	return 0;
   30acc:	2000      	movs	r0, #0
}
   30ace:	b005      	add	sp, #20
   30ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   30ad2:	4621      	mov	r1, r4
   30ad4:	4a09      	ldr	r2, [pc, #36]	; (30afc <att_find_info_req+0x70>)
	data.chan = chan;
   30ad6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   30ad8:	466b      	mov	r3, sp
   30ada:	4630      	mov	r0, r6
   30adc:	f01c fa34 	bl	4cf48 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   30ae0:	9c02      	ldr	r4, [sp, #8]
   30ae2:	b924      	cbnz	r4, 30aee <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   30ae4:	9801      	ldr	r0, [sp, #4]
   30ae6:	f012 fcf7 	bl	434d8 <net_buf_unref>
	if (!req) {
   30aea:	230a      	movs	r3, #10
   30aec:	e7e9      	b.n	30ac2 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30aee:	4a04      	ldr	r2, [pc, #16]	; (30b00 <att_find_info_req+0x74>)
   30af0:	9901      	ldr	r1, [sp, #4]
   30af2:	4628      	mov	r0, r5
   30af4:	f01c fc38 	bl	4d368 <bt_att_chan_send_rsp>
   30af8:	e7e8      	b.n	30acc <att_find_info_req+0x40>
   30afa:	bf00      	nop
   30afc:	0004d087 	.word	0x0004d087
   30b00:	0004d3b9 	.word	0x0004d3b9

00030b04 <att_mtu_req>:
{
   30b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   30b06:	6803      	ldr	r3, [r0, #0]
{
   30b08:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   30b0a:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   30b0c:	f3bf 8f5b 	dmb	ish
   30b10:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   30b14:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   30b18:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   30b1c:	071b      	lsls	r3, r3, #28
   30b1e:	d421      	bmi.n	30b64 <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
   30b20:	688b      	ldr	r3, [r1, #8]
   30b22:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   30b24:	2e16      	cmp	r6, #22
   30b26:	d91f      	bls.n	30b68 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   30b28:	2202      	movs	r2, #2
   30b2a:	2103      	movs	r1, #3
   30b2c:	f01c fd5e 	bl	4d5ec <bt_att_create_pdu>
	if (!pdu) {
   30b30:	4607      	mov	r7, r0
   30b32:	b1d8      	cbz	r0, 30b6c <att_mtu_req+0x68>
	return net_buf_simple_add(&buf->b, len);
   30b34:	2102      	movs	r1, #2
   30b36:	3008      	adds	r0, #8
   30b38:	f01e fe76 	bl	4f828 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   30b3c:	2341      	movs	r3, #65	; 0x41
   30b3e:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   30b40:	4a0b      	ldr	r2, [pc, #44]	; (30b70 <att_mtu_req+0x6c>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   30b42:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   30b44:	4639      	mov	r1, r7
   30b46:	4620      	mov	r0, r4
   30b48:	f01c fc0e 	bl	4d368 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   30b4c:	2e41      	cmp	r6, #65	; 0x41
   30b4e:	bf28      	it	cs
   30b50:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   30b52:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   30b54:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   30b58:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   30b5c:	f01c f9be 	bl	4cedc <att_chan_mtu_updated>
	return 0;
   30b60:	4628      	mov	r0, r5
}
   30b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   30b64:	2006      	movs	r0, #6
   30b66:	e7fc      	b.n	30b62 <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   30b68:	2004      	movs	r0, #4
   30b6a:	e7fa      	b.n	30b62 <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   30b6c:	200e      	movs	r0, #14
   30b6e:	e7f8      	b.n	30b62 <att_mtu_req+0x5e>
   30b70:	0004d3b9 	.word	0x0004d3b9

00030b74 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   30b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   30b76:	2300      	movs	r3, #0
{
   30b78:	4605      	mov	r5, r0
   30b7a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   30b7c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   30b7e:	f017 fd39 	bl	485f4 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
   30b82:	4b0b      	ldr	r3, [pc, #44]	; (30bb0 <bt_att_req_alloc+0x3c>)
   30b84:	681b      	ldr	r3, [r3, #0]
   30b86:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   30b88:	bf04      	itt	eq
   30b8a:	2500      	moveq	r5, #0
   30b8c:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   30b8e:	a901      	add	r1, sp, #4
   30b90:	4808      	ldr	r0, [pc, #32]	; (30bb4 <bt_att_req_alloc+0x40>)
   30b92:	462a      	mov	r2, r5
   30b94:	4623      	mov	r3, r4
   30b96:	f016 fd91 	bl	476bc <k_mem_slab_alloc>
   30b9a:	4601      	mov	r1, r0
   30b9c:	b930      	cbnz	r0, 30bac <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   30b9e:	9801      	ldr	r0, [sp, #4]
   30ba0:	221c      	movs	r2, #28
   30ba2:	f01a fe7d 	bl	4b8a0 <memset>

	return req;
   30ba6:	9801      	ldr	r0, [sp, #4]
}
   30ba8:	b003      	add	sp, #12
   30baa:	bd30      	pop	{r4, r5, pc}
		return NULL;
   30bac:	2000      	movs	r0, #0
   30bae:	e7fb      	b.n	30ba8 <bt_att_req_alloc+0x34>
   30bb0:	20003f5c 	.word	0x20003f5c
   30bb4:	20000e94 	.word	0x20000e94

00030bb8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   30bb8:	b507      	push	{r0, r1, r2, lr}
   30bba:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   30bbc:	6880      	ldr	r0, [r0, #8]
   30bbe:	b120      	cbz	r0, 30bca <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   30bc0:	f012 fc8a 	bl	434d8 <net_buf_unref>
		req->buf = NULL;
   30bc4:	9b01      	ldr	r3, [sp, #4]
   30bc6:	2200      	movs	r2, #0
   30bc8:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   30bca:	4803      	ldr	r0, [pc, #12]	; (30bd8 <bt_att_req_free+0x20>)
   30bcc:	a901      	add	r1, sp, #4
   30bce:	f01f fc71 	bl	504b4 <k_mem_slab_free>
}
   30bd2:	b003      	add	sp, #12
   30bd4:	f85d fb04 	ldr.w	pc, [sp], #4
   30bd8:	20000e94 	.word	0x20000e94

00030bdc <att_handle_rsp>:
{
   30bdc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   30be0:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   30be2:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   30be6:	4688      	mov	r8, r1
   30be8:	4691      	mov	r9, r2
   30bea:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   30bec:	f01f fe2c 	bl	50848 <k_work_cancel_delayable>
	if (!chan->req) {
   30bf0:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   30bf4:	2600      	movs	r6, #0
   30bf6:	b1f0      	cbz	r0, 30c36 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   30bf8:	4b10      	ldr	r3, [pc, #64]	; (30c3c <att_handle_rsp+0x60>)
   30bfa:	4298      	cmp	r0, r3
   30bfc:	d112      	bne.n	30c24 <att_handle_rsp+0x48>
		chan->req = NULL;
   30bfe:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   30c02:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   30c04:	6820      	ldr	r0, [r4, #0]
   30c06:	f01c fc5a 	bl	4d4be <att_req_send_process>
	if (func) {
   30c0a:	b13d      	cbz	r5, 30c1c <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   30c0c:	6820      	ldr	r0, [r4, #0]
   30c0e:	f8cd a000 	str.w	sl, [sp]
   30c12:	6800      	ldr	r0, [r0, #0]
   30c14:	464b      	mov	r3, r9
   30c16:	4642      	mov	r2, r8
   30c18:	4639      	mov	r1, r7
   30c1a:	47a8      	blx	r5
}
   30c1c:	2000      	movs	r0, #0
   30c1e:	b002      	add	sp, #8
   30c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   30c24:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   30c26:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   30c28:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   30c2c:	f7ff ffc4 	bl	30bb8 <bt_att_req_free>
	chan->req = NULL;
   30c30:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
   30c34:	e7e6      	b.n	30c04 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   30c36:	4605      	mov	r5, r0
   30c38:	e7e4      	b.n	30c04 <att_handle_rsp+0x28>
   30c3a:	bf00      	nop
   30c3c:	20003fcc 	.word	0x20003fcc

00030c40 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   30c40:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
	rsp = (void *)buf->data;
   30c44:	688a      	ldr	r2, [r1, #8]
{
   30c46:	b570      	push	{r4, r5, r6, lr}
   30c48:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
   30c4a:	b30b      	cbz	r3, 30c90 <att_error_rsp+0x50>
   30c4c:	4915      	ldr	r1, [pc, #84]	; (30ca4 <att_error_rsp+0x64>)
   30c4e:	428b      	cmp	r3, r1
   30c50:	d01e      	beq.n	30c90 <att_error_rsp+0x50>
	err = rsp->error;
   30c52:	78d5      	ldrb	r5, [r2, #3]
	if (!att_change_security(chan->chan.chan.conn, err)) {
   30c54:	6880      	ldr	r0, [r0, #8]
	switch (err) {
   30c56:	2d05      	cmp	r5, #5
   30c58:	d006      	beq.n	30c68 <att_error_rsp+0x28>
   30c5a:	2d0f      	cmp	r5, #15
   30c5c:	d119      	bne.n	30c92 <att_error_rsp+0x52>
		if (conn->sec_level >= BT_SECURITY_L2)
   30c5e:	7a43      	ldrb	r3, [r0, #9]
   30c60:	2b01      	cmp	r3, #1
   30c62:	d816      	bhi.n	30c92 <att_error_rsp+0x52>
		sec = BT_SECURITY_L2;
   30c64:	2102      	movs	r1, #2
   30c66:	e007      	b.n	30c78 <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
   30c68:	7a43      	ldrb	r3, [r0, #9]
   30c6a:	2b01      	cmp	r3, #1
   30c6c:	d9fa      	bls.n	30c64 <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   30c6e:	2b02      	cmp	r3, #2
   30c70:	d00c      	beq.n	30c8c <att_error_rsp+0x4c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   30c72:	2b03      	cmp	r3, #3
   30c74:	d10d      	bne.n	30c92 <att_error_rsp+0x52>
			sec = BT_SECURITY_L4;
   30c76:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   30c78:	f01b febf 	bl	4c9fa <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   30c7c:	b948      	cbnz	r0, 30c92 <att_error_rsp+0x52>
		chan->req->retrying = true;
   30c7e:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
   30c82:	7c13      	ldrb	r3, [r2, #16]
   30c84:	f043 0301 	orr.w	r3, r3, #1
   30c88:	7413      	strb	r3, [r2, #16]
}
   30c8a:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   30c8c:	2103      	movs	r1, #3
   30c8e:	e7f3      	b.n	30c78 <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
   30c90:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
   30c92:	2200      	movs	r2, #0
   30c94:	462b      	mov	r3, r5
   30c96:	4620      	mov	r0, r4
   30c98:	4611      	mov	r1, r2
}
   30c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   30c9e:	f7ff bf9d 	b.w	30bdc <att_handle_rsp>
   30ca2:	bf00      	nop
   30ca4:	20003fcc 	.word	0x20003fcc

00030ca8 <bt_att_disconnected>:
{
   30ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   30caa:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   30cae:	b085      	sub	sp, #20
   30cb0:	4604      	mov	r4, r0
	if (!att_chan->att) {
   30cb2:	2d00      	cmp	r5, #0
   30cb4:	d04d      	beq.n	30d52 <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   30cb6:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   30cba:	f105 0024 	add.w	r0, r5, #36	; 0x24
   30cbe:	f01c fb61 	bl	4d384 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   30cc2:	f1a4 0608 	sub.w	r6, r4, #8
   30cc6:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   30cca:	2200      	movs	r2, #0
   30ccc:	2300      	movs	r3, #0
   30cce:	4638      	mov	r0, r7
   30cd0:	f01e fd47 	bl	4f762 <net_buf_get>
   30cd4:	4602      	mov	r2, r0
   30cd6:	bb18      	cbnz	r0, 30d20 <bt_att_disconnected+0x78>
	if (chan->req) {
   30cd8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   30cdc:	b123      	cbz	r3, 30ce8 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   30cde:	4601      	mov	r1, r0
   30ce0:	230e      	movs	r3, #14
   30ce2:	4630      	mov	r0, r6
   30ce4:	f7ff ff7a 	bl	30bdc <att_handle_rsp>
	chan->att = NULL;
   30ce8:	2300      	movs	r3, #0
   30cea:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   30cee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   30cf0:	2b00      	cmp	r3, #0
   30cf2:	d12e      	bne.n	30d52 <bt_att_disconnected+0xaa>
	att_reset(att);
   30cf4:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   30cf6:	9803      	ldr	r0, [sp, #12]
   30cf8:	2200      	movs	r2, #0
   30cfa:	2300      	movs	r3, #0
   30cfc:	300c      	adds	r0, #12
   30cfe:	f01e fd30 	bl	4f762 <net_buf_get>
   30d02:	b980      	cbnz	r0, 30d26 <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
   30d04:	9803      	ldr	r0, [sp, #12]
	return list->head;
   30d06:	6845      	ldr	r5, [r0, #4]
   30d08:	b985      	cbnz	r5, 30d2c <bt_att_disconnected+0x84>
	att->conn = NULL;
   30d0a:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   30d0c:	a903      	add	r1, sp, #12
   30d0e:	4812      	ldr	r0, [pc, #72]	; (30d58 <bt_att_disconnected+0xb0>)
   30d10:	f01f fbd0 	bl	504b4 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   30d14:	6820      	ldr	r0, [r4, #0]
}
   30d16:	b005      	add	sp, #20
   30d18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   30d1c:	f001 bb52 	b.w	323c4 <bt_gatt_disconnected>
		net_buf_unref(buf);
   30d20:	f012 fbda 	bl	434d8 <net_buf_unref>
   30d24:	e7d1      	b.n	30cca <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   30d26:	f012 fbd7 	bl	434d8 <net_buf_unref>
   30d2a:	e7e4      	b.n	30cf6 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   30d2c:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   30d2e:	686e      	ldr	r6, [r5, #4]
	return node->next;
   30d30:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   30d32:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   30d34:	4295      	cmp	r5, r2
	list->tail = node;
   30d36:	bf08      	it	eq
   30d38:	6083      	streq	r3, [r0, #8]
   30d3a:	b136      	cbz	r6, 30d4a <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   30d3c:	69ab      	ldr	r3, [r5, #24]
   30d3e:	9300      	str	r3, [sp, #0]
   30d40:	2300      	movs	r3, #0
   30d42:	6800      	ldr	r0, [r0, #0]
   30d44:	461a      	mov	r2, r3
   30d46:	210e      	movs	r1, #14
   30d48:	47b0      	blx	r6
		bt_att_req_free(req);
   30d4a:	4628      	mov	r0, r5
   30d4c:	f7ff ff34 	bl	30bb8 <bt_att_req_free>
   30d50:	e7d8      	b.n	30d04 <bt_att_disconnected+0x5c>
}
   30d52:	b005      	add	sp, #20
   30d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30d56:	bf00      	nop
   30d58:	20000e40 	.word	0x20000e40

00030d5c <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   30d5c:	b510      	push	{r4, lr}
   30d5e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   30d60:	b330      	cbz	r0, 30db0 <bt_att_req_cancel+0x54>
   30d62:	b329      	cbz	r1, 30db0 <bt_att_req_cancel+0x54>
		return;
	}

	att = att_get(conn);
   30d64:	f01c f9eb 	bl	4d13e <att_get>
	if (!att) {
   30d68:	b310      	cbz	r0, 30db0 <bt_att_req_cancel+0x54>
	return list->head;
   30d6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   30d6c:	b153      	cbz	r3, 30d84 <bt_att_req_cancel+0x28>
   30d6e:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
	return node->next;
   30d72:	681b      	ldr	r3, [r3, #0]
   30d74:	b10b      	cbz	r3, 30d7a <bt_att_req_cancel+0x1e>
   30d76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
	if (chan->req != req) {
   30d7a:	f8d1 20f4 	ldr.w	r2, [r1, #244]	; 0xf4
   30d7e:	4294      	cmp	r4, r2
   30d80:	d006      	beq.n	30d90 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   30d82:	b96b      	cbnz	r3, 30da0 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   30d84:	3004      	adds	r0, #4
   30d86:	4621      	mov	r1, r4
   30d88:	f01c fafc 	bl	4d384 <sys_slist_find_and_remove.isra.0>

	bt_att_req_free(req);
   30d8c:	4620      	mov	r0, r4
   30d8e:	e003      	b.n	30d98 <bt_att_req_cancel+0x3c>
	chan->req = &cancel;
   30d90:	4b08      	ldr	r3, [pc, #32]	; (30db4 <bt_att_req_cancel+0x58>)
   30d92:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4
	bt_att_req_free(req);
   30d96:	4620      	mov	r0, r4
}
   30d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   30d9c:	f7ff bf0c 	b.w	30bb8 <bt_att_req_free>
   30da0:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   30da4:	b10a      	cbz	r2, 30daa <bt_att_req_cancel+0x4e>
   30da6:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   30daa:	4619      	mov	r1, r3
   30dac:	4613      	mov	r3, r2
   30dae:	e7e4      	b.n	30d7a <bt_att_req_cancel+0x1e>
}
   30db0:	bd10      	pop	{r4, pc}
   30db2:	bf00      	nop
   30db4:	20003fcc 	.word	0x20003fcc

00030db8 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   30db8:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   30dba:	4904      	ldr	r1, [pc, #16]	; (30dcc <db_hash_set+0x14>)
{
   30dbc:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   30dbe:	4618      	mov	r0, r3
   30dc0:	2210      	movs	r2, #16
   30dc2:	47a0      	blx	r4

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   30dc4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   30dc8:	bd10      	pop	{r4, pc}
   30dca:	bf00      	nop
   30dcc:	20001f18 	.word	0x20001f18

00030dd0 <find_cf_cfg>:
{
   30dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   30dd2:	4d0f      	ldr	r5, [pc, #60]	; (30e10 <find_cf_cfg+0x40>)
   30dd4:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   30dd6:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   30dd8:	462f      	mov	r7, r5
		if (!conn) {
   30dda:	1c6a      	adds	r2, r5, #1
   30ddc:	b954      	cbnz	r4, 30df4 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   30dde:	4669      	mov	r1, sp
   30de0:	4610      	mov	r0, r2
   30de2:	9400      	str	r4, [sp, #0]
   30de4:	f8cd 4003 	str.w	r4, [sp, #3]
   30de8:	f01c fdc7 	bl	4d97a <bt_addr_le_cmp>
   30dec:	b940      	cbnz	r0, 30e00 <find_cf_cfg+0x30>
}
   30dee:	4638      	mov	r0, r7
   30df0:	b003      	add	sp, #12
   30df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   30df4:	7829      	ldrb	r1, [r5, #0]
   30df6:	4620      	mov	r0, r4
   30df8:	f01b fe29 	bl	4ca4e <bt_conn_is_peer_addr_le>
   30dfc:	2800      	cmp	r0, #0
   30dfe:	d1f6      	bne.n	30dee <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   30e00:	3601      	adds	r6, #1
   30e02:	2e0c      	cmp	r6, #12
   30e04:	f105 0510 	add.w	r5, r5, #16
   30e08:	d1e6      	bne.n	30dd8 <find_cf_cfg+0x8>
	return NULL;
   30e0a:	2700      	movs	r7, #0
   30e0c:	e7ef      	b.n	30dee <find_cf_cfg+0x1e>
   30e0e:	bf00      	nop
   30e10:	20003ff0 	.word	0x20003ff0

00030e14 <find_sc_cfg>:
{
   30e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30e16:	4d0b      	ldr	r5, [pc, #44]	; (30e44 <find_sc_cfg+0x30>)
   30e18:	4606      	mov	r6, r0
   30e1a:	460f      	mov	r7, r1
   30e1c:	2400      	movs	r4, #0
		if (id == sc_cfg[i].id &&
   30e1e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   30e22:	42b3      	cmp	r3, r6
   30e24:	d107      	bne.n	30e36 <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   30e26:	4639      	mov	r1, r7
   30e28:	4628      	mov	r0, r5
   30e2a:	f01c fda6 	bl	4d97a <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   30e2e:	b910      	cbnz	r0, 30e36 <find_sc_cfg+0x22>
			return &sc_cfg[i];
   30e30:	4805      	ldr	r0, [pc, #20]	; (30e48 <find_sc_cfg+0x34>)
   30e32:	4420      	add	r0, r4
}
   30e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   30e36:	340c      	adds	r4, #12
   30e38:	2c90      	cmp	r4, #144	; 0x90
   30e3a:	f105 050c 	add.w	r5, r5, #12
   30e3e:	d1ee      	bne.n	30e1e <find_sc_cfg+0xa>
	return NULL;
   30e40:	2000      	movs	r0, #0
   30e42:	e7f7      	b.n	30e34 <find_sc_cfg+0x20>
   30e44:	20006be3 	.word	0x20006be3
   30e48:	20006be2 	.word	0x20006be2

00030e4c <gatt_sub_find>:
{
   30e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   30e4e:	4d0f      	ldr	r5, [pc, #60]	; (30e8c <gatt_sub_find+0x40>)
   30e50:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   30e52:	2600      	movs	r6, #0
		struct gatt_sub *sub = &subscriptions[i];
   30e54:	462f      	mov	r7, r5
		if (!conn) {
   30e56:	1c6a      	adds	r2, r5, #1
   30e58:	b954      	cbnz	r4, 30e70 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   30e5a:	4669      	mov	r1, sp
   30e5c:	4610      	mov	r0, r2
   30e5e:	9400      	str	r4, [sp, #0]
   30e60:	f8cd 4003 	str.w	r4, [sp, #3]
   30e64:	f01c fd89 	bl	4d97a <bt_addr_le_cmp>
   30e68:	b940      	cbnz	r0, 30e7c <gatt_sub_find+0x30>
}
   30e6a:	4638      	mov	r0, r7
   30e6c:	b003      	add	sp, #12
   30e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   30e70:	7829      	ldrb	r1, [r5, #0]
   30e72:	4620      	mov	r0, r4
   30e74:	f01b fdeb 	bl	4ca4e <bt_conn_is_peer_addr_le>
   30e78:	2800      	cmp	r0, #0
   30e7a:	d1f6      	bne.n	30e6a <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   30e7c:	3601      	adds	r6, #1
   30e7e:	2e0c      	cmp	r6, #12
   30e80:	f105 0510 	add.w	r5, r5, #16
   30e84:	d1e6      	bne.n	30e54 <gatt_sub_find+0x8>
	return NULL;
   30e86:	2700      	movs	r7, #0
   30e88:	e7ef      	b.n	30e6a <gatt_sub_find+0x1e>
   30e8a:	bf00      	nop
   30e8c:	20004148 	.word	0x20004148

00030e90 <find_cf_cfg_by_addr>:
{
   30e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30e92:	4d0b      	ldr	r5, [pc, #44]	; (30ec0 <find_cf_cfg_by_addr+0x30>)
   30e94:	4606      	mov	r6, r0
   30e96:	460f      	mov	r7, r1
   30e98:	2400      	movs	r4, #0
			if (id == cf_cfg[i].id &&
   30e9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   30e9e:	42b3      	cmp	r3, r6
   30ea0:	d107      	bne.n	30eb2 <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   30ea2:	4629      	mov	r1, r5
   30ea4:	4638      	mov	r0, r7
   30ea6:	f01c fd68 	bl	4d97a <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   30eaa:	b910      	cbnz	r0, 30eb2 <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   30eac:	4805      	ldr	r0, [pc, #20]	; (30ec4 <find_cf_cfg_by_addr+0x34>)
   30eae:	4420      	add	r0, r4
}
   30eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   30eb2:	3410      	adds	r4, #16
   30eb4:	2cc0      	cmp	r4, #192	; 0xc0
   30eb6:	f105 0510 	add.w	r5, r5, #16
   30eba:	d1ee      	bne.n	30e9a <find_cf_cfg_by_addr+0xa>
	return NULL;
   30ebc:	2000      	movs	r0, #0
   30ebe:	e7f7      	b.n	30eb0 <find_cf_cfg_by_addr+0x20>
   30ec0:	20003ff1 	.word	0x20003ff1
   30ec4:	20003ff0 	.word	0x20003ff0

00030ec8 <sc_store>:
{
   30ec8:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   30eca:	4605      	mov	r5, r0
{
   30ecc:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   30ece:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   30ed2:	4604      	mov	r4, r0
	if (cfg->id) {
   30ed4:	b19a      	cbz	r2, 30efe <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   30ed6:	ae02      	add	r6, sp, #8
   30ed8:	2104      	movs	r1, #4
   30eda:	4630      	mov	r0, r6
   30edc:	f018 fb17 	bl	4950e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   30ee0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   30ee2:	462b      	mov	r3, r5
   30ee4:	a803      	add	r0, sp, #12
   30ee6:	4a07      	ldr	r2, [pc, #28]	; (30f04 <sc_store+0x3c>)
   30ee8:	2124      	movs	r1, #36	; 0x24
   30eea:	f7fc f903 	bl	2d0f4 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   30eee:	2204      	movs	r2, #4
   30ef0:	f104 0108 	add.w	r1, r4, #8
   30ef4:	a803      	add	r0, sp, #12
   30ef6:	f7fa ff19 	bl	2bd2c <settings_save_one>
}
   30efa:	b00c      	add	sp, #48	; 0x30
   30efc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   30efe:	9200      	str	r2, [sp, #0]
   30f00:	e7ef      	b.n	30ee2 <sc_store+0x1a>
   30f02:	bf00      	nop
   30f04:	00053c80 	.word	0x00053c80

00030f08 <db_hash_commit>:

static int db_hash_commit(void)
{
   30f08:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   30f0a:	2108      	movs	r1, #8
   30f0c:	4804      	ldr	r0, [pc, #16]	; (30f20 <db_hash_commit+0x18>)
   30f0e:	f01c fd25 	bl	4d95c <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   30f12:	2200      	movs	r2, #0
   30f14:	2300      	movs	r3, #0
   30f16:	4803      	ldr	r0, [pc, #12]	; (30f24 <db_hash_commit+0x1c>)
   30f18:	f017 f882 	bl	48020 <k_work_reschedule>

	return 0;
}
   30f1c:	2000      	movs	r0, #0
   30f1e:	bd08      	pop	{r3, pc}
   30f20:	20002018 	.word	0x20002018
   30f24:	20001f28 	.word	0x20001f28

00030f28 <bt_gatt_attr_write_ccc>:
{
   30f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30f2c:	4698      	mov	r8, r3
   30f2e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   30f32:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   30f36:	4606      	mov	r6, r0
   30f38:	4689      	mov	r9, r1
	if (offset) {
   30f3a:	2b00      	cmp	r3, #0
   30f3c:	d15e      	bne.n	30ffc <bt_gatt_attr_write_ccc+0xd4>
	if (!len || len > sizeof(uint16_t)) {
   30f3e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   30f42:	2b01      	cmp	r3, #1
   30f44:	d85d      	bhi.n	31002 <bt_gatt_attr_write_ccc+0xda>
		value = *(uint8_t *)buf;
   30f46:	7817      	ldrb	r7, [r2, #0]
	if (len < sizeof(uint16_t)) {
   30f48:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   30f4c:	4651      	mov	r1, sl
   30f4e:	bf14      	ite	ne
   30f50:	8817      	ldrhne	r7, [r2, #0]
		value = *(uint8_t *)buf;
   30f52:	b2bf      	uxtheq	r7, r7
	cfg = find_ccc_cfg(conn, ccc);
   30f54:	f01c fd14 	bl	4d980 <find_ccc_cfg>
	if (!cfg) {
   30f58:	4605      	mov	r5, r0
   30f5a:	b980      	cbnz	r0, 30f7e <bt_gatt_attr_write_ccc+0x56>
		if (!value) {
   30f5c:	b917      	cbnz	r7, 30f64 <bt_gatt_attr_write_ccc+0x3c>
			return len;
   30f5e:	4640      	mov	r0, r8
}
   30f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   30f64:	4651      	mov	r1, sl
   30f66:	f01c fd0b 	bl	4d980 <find_ccc_cfg>
		if (!cfg) {
   30f6a:	4605      	mov	r5, r0
   30f6c:	2800      	cmp	r0, #0
   30f6e:	d04b      	beq.n	31008 <bt_gatt_attr_write_ccc+0xe0>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   30f70:	f106 0188 	add.w	r1, r6, #136	; 0x88
   30f74:	3001      	adds	r0, #1
   30f76:	f01c fd3c 	bl	4d9f2 <bt_addr_le_copy>
		cfg->id = conn->id;
   30f7a:	7a33      	ldrb	r3, [r6, #8]
   30f7c:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   30f7e:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
   30f82:	bb7b      	cbnz	r3, 30fe4 <bt_gatt_attr_write_ccc+0xbc>
	if (cfg->value != ccc->value) {
   30f84:	f8ba 303c 	ldrh.w	r3, [sl, #60]	; 0x3c
	value_changed = cfg->value != value;
   30f88:	892c      	ldrh	r4, [r5, #8]
	cfg->value = value;
   30f8a:	812f      	strh	r7, [r5, #8]
	if (cfg->value != ccc->value) {
   30f8c:	42bb      	cmp	r3, r7
   30f8e:	d003      	beq.n	30f98 <bt_gatt_attr_write_ccc+0x70>
		gatt_ccc_changed(attr, ccc);
   30f90:	4651      	mov	r1, sl
   30f92:	4648      	mov	r0, r9
   30f94:	f01c fc57 	bl	4d846 <gatt_ccc_changed>
	if (value_changed) {
   30f98:	42bc      	cmp	r4, r7
   30f9a:	d01d      	beq.n	30fd8 <bt_gatt_attr_write_ccc+0xb0>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   30f9c:	4630      	mov	r0, r6
   30f9e:	f7fe fbb1 	bl	2f704 <bt_conn_index>
   30fa2:	4c1b      	ldr	r4, [pc, #108]	; (31010 <bt_gatt_attr_write_ccc+0xe8>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   30fa4:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   30fa8:	429e      	cmp	r6, r3
   30faa:	d015      	beq.n	30fd8 <bt_gatt_attr_write_ccc+0xb0>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   30fac:	7a30      	ldrb	r0, [r6, #8]
   30fae:	f106 0188 	add.w	r1, r6, #136	; 0x88
   30fb2:	f01b f92b 	bl	4c20c <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   30fb6:	b178      	cbz	r0, 30fd8 <bt_gatt_attr_write_ccc+0xb0>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   30fb8:	4630      	mov	r0, r6
   30fba:	f7fe fba3 	bl	2f704 <bt_conn_index>
   30fbe:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   30fc0:	4630      	mov	r0, r6
   30fc2:	f01b fc80 	bl	4c8c6 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   30fc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   30fca:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   30fce:	2300      	movs	r3, #0
   30fd0:	f104 0018 	add.w	r0, r4, #24
   30fd4:	f017 f824 	bl	48020 <k_work_reschedule>
	if (!value) {
   30fd8:	2f00      	cmp	r7, #0
   30fda:	d1c0      	bne.n	30f5e <bt_gatt_attr_write_ccc+0x36>
		clear_ccc_cfg(cfg);
   30fdc:	4628      	mov	r0, r5
   30fde:	f01c fd51 	bl	4da84 <clear_ccc_cfg>
   30fe2:	e7bc      	b.n	30f5e <bt_gatt_attr_write_ccc+0x36>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   30fe4:	463a      	mov	r2, r7
   30fe6:	4649      	mov	r1, r9
   30fe8:	4630      	mov	r0, r6
   30fea:	4798      	blx	r3
		if (write < 0) {
   30fec:	2800      	cmp	r0, #0
   30fee:	dbb7      	blt.n	30f60 <bt_gatt_attr_write_ccc+0x38>
		if (write != sizeof(value) && write != 1) {
   30ff0:	1e44      	subs	r4, r0, #1
   30ff2:	2c01      	cmp	r4, #1
   30ff4:	d9c6      	bls.n	30f84 <bt_gatt_attr_write_ccc+0x5c>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   30ff6:	f06f 000d 	mvn.w	r0, #13
   30ffa:	e7b1      	b.n	30f60 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   30ffc:	f06f 0006 	mvn.w	r0, #6
   31000:	e7ae      	b.n	30f60 <bt_gatt_attr_write_ccc+0x38>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   31002:	f06f 000c 	mvn.w	r0, #12
   31006:	e7ab      	b.n	30f60 <bt_gatt_attr_write_ccc+0x38>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   31008:	f06f 0010 	mvn.w	r0, #16
   3100c:	e7a8      	b.n	30f60 <bt_gatt_attr_write_ccc+0x38>
   3100e:	bf00      	nop
   31010:	20001f80 	.word	0x20001f80

00031014 <gatt_write_ccc>:
{
   31014:	b507      	push	{r0, r1, r2, lr}
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   31016:	2312      	movs	r3, #18
{
   31018:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   3101a:	2104      	movs	r1, #4
   3101c:	e9cd 3100 	strd	r3, r1, [sp]
   31020:	4b03      	ldr	r3, [pc, #12]	; (31030 <gatt_write_ccc+0x1c>)
   31022:	4904      	ldr	r1, [pc, #16]	; (31034 <gatt_write_ccc+0x20>)
   31024:	f01c fddf 	bl	4dbe6 <gatt_req_send>
}
   31028:	b003      	add	sp, #12
   3102a:	f85d fb04 	ldr.w	pc, [sp], #4
   3102e:	bf00      	nop
   31030:	0004e02d 	.word	0x0004e02d
   31034:	0004db7d 	.word	0x0004db7d

00031038 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   31038:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   3103a:	6881      	ldr	r1, [r0, #8]
{
   3103c:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   3103e:	4a07      	ldr	r2, [pc, #28]	; (3105c <remove_peer_from_attr+0x24>)
   31040:	4291      	cmp	r1, r2
   31042:	d109      	bne.n	31058 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   31044:	791a      	ldrb	r2, [r3, #4]
   31046:	6819      	ldr	r1, [r3, #0]
   31048:	68c0      	ldr	r0, [r0, #12]
   3104a:	f01c fcb8 	bl	4d9be <ccc_find_cfg>
	if (cfg) {
   3104e:	b118      	cbz	r0, 31058 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   31050:	220a      	movs	r2, #10
   31052:	2100      	movs	r1, #0
   31054:	f01a fc24 	bl	4b8a0 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   31058:	2001      	movs	r0, #1
   3105a:	bd08      	pop	{r3, pc}
   3105c:	00030f29 	.word	0x00030f29

00031060 <ccc_load>:
{
   31060:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31062:	4b21      	ldr	r3, [pc, #132]	; (310e8 <ccc_load+0x88>)
{
   31064:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31066:	6882      	ldr	r2, [r0, #8]
   31068:	429a      	cmp	r2, r3
   3106a:	d002      	beq.n	31072 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   3106c:	2001      	movs	r0, #1
}
   3106e:	b002      	add	sp, #8
   31070:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   31072:	68a3      	ldr	r3, [r4, #8]
   31074:	68c6      	ldr	r6, [r0, #12]
   31076:	b94b      	cbnz	r3, 3108c <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   31078:	7922      	ldrb	r2, [r4, #4]
   3107a:	6821      	ldr	r1, [r4, #0]
   3107c:	4630      	mov	r0, r6
   3107e:	f01c fc9e 	bl	4d9be <ccc_find_cfg>
	if (!cfg) {
   31082:	2800      	cmp	r0, #0
   31084:	d0f2      	beq.n	3106c <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   31086:	f01c fcfd 	bl	4da84 <clear_ccc_cfg>
   3108a:	e7ef      	b.n	3106c <ccc_load+0xc>
	} else if (!load->count) {
   3108c:	68e0      	ldr	r0, [r4, #12]
   3108e:	2800      	cmp	r0, #0
   31090:	d0ed      	beq.n	3106e <ccc_load+0xe>
	if (load->entry->handle != handle) {
   31092:	881b      	ldrh	r3, [r3, #0]
   31094:	4299      	cmp	r1, r3
   31096:	d00a      	beq.n	310ae <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   31098:	d9e8      	bls.n	3106c <ccc_load+0xc>
	load->count--;
   3109a:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   3109c:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   3109e:	3801      	subs	r0, #1
	load->entry++;
   310a0:	3304      	adds	r3, #4
	load->count--;
   310a2:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   310a4:	3800      	subs	r0, #0
	load->entry++;
   310a6:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   310a8:	bf18      	it	ne
   310aa:	2001      	movne	r0, #1
   310ac:	e7df      	b.n	3106e <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   310ae:	7922      	ldrb	r2, [r4, #4]
   310b0:	6821      	ldr	r1, [r4, #0]
   310b2:	4630      	mov	r0, r6
   310b4:	f01c fc83 	bl	4d9be <ccc_find_cfg>
	if (!cfg) {
   310b8:	4605      	mov	r5, r0
   310ba:	b980      	cbnz	r0, 310de <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   310bc:	9000      	str	r0, [sp, #0]
   310be:	4602      	mov	r2, r0
   310c0:	f8cd 0003 	str.w	r0, [sp, #3]
   310c4:	4669      	mov	r1, sp
   310c6:	4630      	mov	r0, r6
   310c8:	f01c fc79 	bl	4d9be <ccc_find_cfg>
		if (!cfg) {
   310cc:	4605      	mov	r5, r0
   310ce:	2800      	cmp	r0, #0
   310d0:	d0e3      	beq.n	3109a <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   310d2:	6821      	ldr	r1, [r4, #0]
   310d4:	3001      	adds	r0, #1
   310d6:	f01c fc8c 	bl	4d9f2 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   310da:	7923      	ldrb	r3, [r4, #4]
   310dc:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   310de:	68a3      	ldr	r3, [r4, #8]
   310e0:	885b      	ldrh	r3, [r3, #2]
   310e2:	812b      	strh	r3, [r5, #8]
   310e4:	e7d9      	b.n	3109a <ccc_load+0x3a>
   310e6:	bf00      	nop
   310e8:	00030f29 	.word	0x00030f29

000310ec <convert_to_id_on_match>:
{
   310ec:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   310ee:	4b0b      	ldr	r3, [pc, #44]	; (3111c <convert_to_id_on_match+0x30>)
{
   310f0:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   310f2:	6882      	ldr	r2, [r0, #8]
   310f4:	429a      	cmp	r2, r3
   310f6:	d10e      	bne.n	31116 <convert_to_id_on_match+0x2a>
   310f8:	68c5      	ldr	r5, [r0, #12]
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   310fa:	1c6c      	adds	r4, r5, #1
   310fc:	353d      	adds	r5, #61	; 0x3d
		if (bt_addr_le_cmp(&ccc->cfg[i].peer, match->private_addr) == 0) {
   310fe:	6831      	ldr	r1, [r6, #0]
   31100:	4620      	mov	r0, r4
   31102:	f01c fc3a 	bl	4d97a <bt_addr_le_cmp>
   31106:	b918      	cbnz	r0, 31110 <convert_to_id_on_match+0x24>
			bt_addr_le_copy(&ccc->cfg[i].peer, match->id_addr);
   31108:	6871      	ldr	r1, [r6, #4]
   3110a:	4620      	mov	r0, r4
   3110c:	f01c fc71 	bl	4d9f2 <bt_addr_le_copy>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31110:	340a      	adds	r4, #10
   31112:	42ac      	cmp	r4, r5
   31114:	d1f3      	bne.n	310fe <convert_to_id_on_match+0x12>
}
   31116:	2001      	movs	r0, #1
   31118:	bd70      	pop	{r4, r5, r6, pc}
   3111a:	bf00      	nop
   3111c:	00030f29 	.word	0x00030f29

00031120 <ccc_save>:
{
   31120:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31122:	4b0c      	ldr	r3, [pc, #48]	; (31154 <ccc_save+0x34>)
{
   31124:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31126:	6882      	ldr	r2, [r0, #8]
   31128:	429a      	cmp	r2, r3
{
   3112a:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   3112c:	d10f      	bne.n	3114e <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   3112e:	7922      	ldrb	r2, [r4, #4]
   31130:	6821      	ldr	r1, [r4, #0]
   31132:	68c0      	ldr	r0, [r0, #12]
   31134:	f01c fc43 	bl	4d9be <ccc_find_cfg>
	if (!cfg) {
   31138:	b148      	cbz	r0, 3114e <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   3113a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   3113e:	8901      	ldrh	r1, [r0, #8]
   31140:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   31144:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   31146:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   31148:	8151      	strh	r1, [r2, #10]
	save->count++;
   3114a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   3114e:	2001      	movs	r0, #1
   31150:	bd38      	pop	{r3, r4, r5, pc}
   31152:	bf00      	nop
   31154:	00030f29 	.word	0x00030f29

00031158 <bt_gatt_store_cf.isra.0>:
static int bt_gatt_store_cf(struct bt_conn *conn)
   31158:	b5f0      	push	{r4, r5, r6, r7, lr}
   3115a:	b08d      	sub	sp, #52	; 0x34
   3115c:	4605      	mov	r5, r0
	cfg = find_cf_cfg(conn);
   3115e:	f7ff fe37 	bl	30dd0 <find_cf_cfg>
					       &conn->le.dst, id_str);
   31162:	f105 0688 	add.w	r6, r5, #136	; 0x88
	if (!cfg) {
   31166:	4604      	mov	r4, r0
   31168:	b300      	cbz	r0, 311ac <bt_gatt_store_cf.isra.0+0x54>
		if (conn->id) {
   3116a:	7a2a      	ldrb	r2, [r5, #8]
		str = (char *)cfg->data;
   3116c:	3408      	adds	r4, #8
		if (conn->id) {
   3116e:	b1fa      	cbz	r2, 311b0 <bt_gatt_store_cf.isra.0+0x58>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   31170:	af02      	add	r7, sp, #8
   31172:	2104      	movs	r1, #4
   31174:	4638      	mov	r0, r7
   31176:	f018 f9ca 	bl	4950e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   3117a:	4633      	mov	r3, r6
   3117c:	4a0d      	ldr	r2, [pc, #52]	; (311b4 <bt_gatt_store_cf.isra.0+0x5c>)
   3117e:	9700      	str	r7, [sp, #0]
   31180:	2124      	movs	r1, #36	; 0x24
   31182:	a803      	add	r0, sp, #12
   31184:	f7fb ffb6 	bl	2d0f4 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   31188:	7a2b      	ldrb	r3, [r5, #8]
   3118a:	2501      	movs	r5, #1
   3118c:	b93b      	cbnz	r3, 3119e <bt_gatt_store_cf.isra.0+0x46>
		bt_settings_encode_key(key, sizeof(key), "cf",
   3118e:	2300      	movs	r3, #0
   31190:	9300      	str	r3, [sp, #0]
   31192:	4a08      	ldr	r2, [pc, #32]	; (311b4 <bt_gatt_store_cf.isra.0+0x5c>)
   31194:	4633      	mov	r3, r6
   31196:	2124      	movs	r1, #36	; 0x24
   31198:	a803      	add	r0, sp, #12
   3119a:	f7fb ffab 	bl	2d0f4 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   3119e:	462a      	mov	r2, r5
   311a0:	4621      	mov	r1, r4
   311a2:	a803      	add	r0, sp, #12
   311a4:	f7fa fdc2 	bl	2bd2c <settings_save_one>
}
   311a8:	b00d      	add	sp, #52	; 0x34
   311aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   311ac:	4605      	mov	r5, r0
   311ae:	e7ee      	b.n	3118e <bt_gatt_store_cf.isra.0+0x36>
   311b0:	2501      	movs	r5, #1
   311b2:	e7ec      	b.n	3118e <bt_gatt_store_cf.isra.0+0x36>
   311b4:	00053c7a 	.word	0x00053c7a

000311b8 <bt_gatt_clear_sc>:
{
   311b8:	b570      	push	{r4, r5, r6, lr}
   311ba:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   311bc:	f7ff fe2a 	bl	30e14 <find_sc_cfg>
	if (!cfg) {
   311c0:	4604      	mov	r4, r0
   311c2:	b1b8      	cbz	r0, 311f4 <bt_gatt_clear_sc+0x3c>
		if (cfg->id) {
   311c4:	4605      	mov	r5, r0
   311c6:	f815 2b01 	ldrb.w	r2, [r5], #1
   311ca:	b1b2      	cbz	r2, 311fa <bt_gatt_clear_sc+0x42>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   311cc:	ae02      	add	r6, sp, #8
   311ce:	2104      	movs	r1, #4
   311d0:	4630      	mov	r0, r6
   311d2:	f018 f99c 	bl	4950e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   311d6:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   311d8:	4a09      	ldr	r2, [pc, #36]	; (31200 <bt_gatt_clear_sc+0x48>)
   311da:	2124      	movs	r1, #36	; 0x24
   311dc:	462b      	mov	r3, r5
   311de:	a803      	add	r0, sp, #12
   311e0:	f7fb ff88 	bl	2d0f4 <bt_settings_encode_key>
		err = settings_delete(key);
   311e4:	a803      	add	r0, sp, #12
   311e6:	f019 f85d 	bl	4a2a4 <settings_delete>
	memset(cfg, 0, sizeof(*cfg));
   311ea:	220c      	movs	r2, #12
   311ec:	2100      	movs	r1, #0
   311ee:	4620      	mov	r0, r4
   311f0:	f01a fb56 	bl	4b8a0 <memset>
}
   311f4:	2000      	movs	r0, #0
   311f6:	b00c      	add	sp, #48	; 0x30
   311f8:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   311fa:	9200      	str	r2, [sp, #0]
   311fc:	e7ec      	b.n	311d8 <bt_gatt_clear_sc+0x20>
   311fe:	bf00      	nop
   31200:	00053c80 	.word	0x00053c80

00031204 <disconnected_cb>:
{
   31204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31208:	4b25      	ldr	r3, [pc, #148]	; (312a0 <disconnected_cb+0x9c>)
{
   3120a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   3120c:	6882      	ldr	r2, [r0, #8]
   3120e:	429a      	cmp	r2, r3
{
   31210:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   31212:	d12f      	bne.n	31274 <disconnected_cb+0x70>
	ccc = attr->user_data;
   31214:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   31216:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
   31218:	b363      	cbz	r3, 31274 <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
   3121a:	f8df b088 	ldr.w	fp, [pc, #136]	; 312a4 <disconnected_cb+0xa0>
   3121e:	1c6c      	adds	r4, r5, #1
   31220:	f105 0a3d 	add.w	sl, r5, #61	; 0x3d
	value_used = false;
   31224:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   31228:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   3122c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   31230:	b19b      	cbz	r3, 3125a <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   31232:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   31236:	4622      	mov	r2, r4
   31238:	4630      	mov	r0, r6
   3123a:	f01b fc08 	bl	4ca4e <bt_conn_is_peer_addr_le>
   3123e:	b9e0      	cbnz	r0, 3127a <disconnected_cb+0x76>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   31240:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   31244:	4621      	mov	r1, r4
   31246:	f7fe fb91 	bl	2f96c <bt_conn_lookup_addr_le>
			if (tmp) {
   3124a:	b130      	cbz	r0, 3125a <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   3124c:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   3124e:	2b07      	cmp	r3, #7
   31250:	bf08      	it	eq
   31252:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   31256:	f01b fb51 	bl	4c8fc <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   3125a:	340a      	adds	r4, #10
   3125c:	45a2      	cmp	sl, r4
   3125e:	d1e5      	bne.n	3122c <disconnected_cb+0x28>
	if (!value_used) {
   31260:	f1b8 0f00 	cmp.w	r8, #0
   31264:	d106      	bne.n	31274 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
   31266:	6c2b      	ldr	r3, [r5, #64]	; 0x40
		ccc->value = 0U;
   31268:	f8a5 803c 	strh.w	r8, [r5, #60]	; 0x3c
		if (ccc->cfg_changed) {
   3126c:	b113      	cbz	r3, 31274 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   3126e:	4641      	mov	r1, r8
   31270:	4638      	mov	r0, r7
   31272:	4798      	blx	r3
}
   31274:	2001      	movs	r0, #1
   31276:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   3127a:	7a30      	ldrb	r0, [r6, #8]
   3127c:	4649      	mov	r1, r9
   3127e:	f01a ffc5 	bl	4c20c <bt_addr_le_is_bonded>
   31282:	b940      	cbnz	r0, 31296 <disconnected_cb+0x92>
				if (ccc == &sc_ccc) {
   31284:	455d      	cmp	r5, fp
   31286:	d102      	bne.n	3128e <disconnected_cb+0x8a>
					sc_clear(conn);
   31288:	4630      	mov	r0, r6
   3128a:	f01c fe00 	bl	4de8e <sc_clear>
				clear_ccc_cfg(cfg);
   3128e:	1e60      	subs	r0, r4, #1
   31290:	f01c fbf8 	bl	4da84 <clear_ccc_cfg>
   31294:	e7e1      	b.n	3125a <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   31296:	4649      	mov	r1, r9
   31298:	4620      	mov	r0, r4
   3129a:	f01c fbaa 	bl	4d9f2 <bt_addr_le_copy>
   3129e:	e7dc      	b.n	3125a <disconnected_cb+0x56>
   312a0:	00030f29 	.word	0x00030f29
   312a4:	2000061c 	.word	0x2000061c

000312a8 <read_ppcp>:
{
   312a8:	b513      	push	{r0, r1, r4, lr}
   312aa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   312ae:	4c0b      	ldr	r4, [pc, #44]	; (312dc <read_ppcp+0x34>)
{
   312b0:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   312b2:	4a0b      	ldr	r2, [pc, #44]	; (312e0 <read_ppcp+0x38>)
	if (offset > value_len) {
   312b4:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   312b6:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   312ba:	d80b      	bhi.n	312d4 <read_ppcp+0x2c>
	len = MIN(buf_len, value_len - offset);
   312bc:	f1c1 0408 	rsb	r4, r1, #8
   312c0:	429c      	cmp	r4, r3
   312c2:	bfa8      	it	ge
   312c4:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   312c6:	4622      	mov	r2, r4
   312c8:	4469      	add	r1, sp
   312ca:	f01a fade 	bl	4b88a <memcpy>
}
   312ce:	4620      	mov	r0, r4
   312d0:	b002      	add	sp, #8
   312d2:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   312d4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   312d8:	e7f9      	b.n	312ce <read_ppcp+0x26>
   312da:	bf00      	nop
   312dc:	000c0006 	.word	0x000c0006
   312e0:	0190001e 	.word	0x0190001e

000312e4 <sc_commit>:
{
   312e4:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   312e6:	4809      	ldr	r0, [pc, #36]	; (3130c <sc_commit+0x28>)
   312e8:	f06f 0102 	mvn.w	r1, #2
   312ec:	f01c fc37 	bl	4db5e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   312f0:	4806      	ldr	r0, [pc, #24]	; (3130c <sc_commit+0x28>)
   312f2:	f01c fad8 	bl	4d8a6 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   312f6:	07c3      	lsls	r3, r0, #31
   312f8:	d505      	bpl.n	31306 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   312fa:	4805      	ldr	r0, [pc, #20]	; (31310 <sc_commit+0x2c>)
   312fc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   31300:	2300      	movs	r3, #0
   31302:	f016 fe8d 	bl	48020 <k_work_reschedule>
}
   31306:	2000      	movs	r0, #0
   31308:	bd08      	pop	{r3, pc}
   3130a:	bf00      	nop
   3130c:	20002018 	.word	0x20002018
   31310:	20001fe8 	.word	0x20001fe8

00031314 <sc_indicate_rsp>:
{
   31314:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31316:	f06f 0102 	mvn.w	r1, #2
   3131a:	4604      	mov	r4, r0
   3131c:	480d      	ldr	r0, [pc, #52]	; (31354 <sc_indicate_rsp+0x40>)
   3131e:	f01c fc1e 	bl	4db5e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   31322:	480c      	ldr	r0, [pc, #48]	; (31354 <sc_indicate_rsp+0x40>)
   31324:	f01c fabf 	bl	4d8a6 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   31328:	07c2      	lsls	r2, r0, #31
   3132a:	d504      	bpl.n	31336 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   3132c:	480a      	ldr	r0, [pc, #40]	; (31358 <sc_indicate_rsp+0x44>)
   3132e:	2200      	movs	r2, #0
   31330:	2300      	movs	r3, #0
   31332:	f016 fe75 	bl	48020 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   31336:	4620      	mov	r0, r4
   31338:	f7ff fd4a 	bl	30dd0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   3133c:	b140      	cbz	r0, 31350 <sc_indicate_rsp+0x3c>
   3133e:	7a03      	ldrb	r3, [r0, #8]
   31340:	07db      	lsls	r3, r3, #31
   31342:	d505      	bpl.n	31350 <sc_indicate_rsp+0x3c>
}
   31344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   31348:	2101      	movs	r1, #1
   3134a:	300c      	adds	r0, #12
   3134c:	f01c bb06 	b.w	4d95c <atomic_or>
   31350:	bd10      	pop	{r4, pc}
   31352:	bf00      	nop
   31354:	20002018 	.word	0x20002018
   31358:	20001fe8 	.word	0x20001fe8

0003135c <bt_gatt_init>:
{
   3135c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3135e:	4b26      	ldr	r3, [pc, #152]	; (313f8 <bt_gatt_init+0x9c>)
   31360:	f3bf 8f5b 	dmb	ish
   31364:	2201      	movs	r2, #1
   31366:	e853 1f00 	ldrex	r1, [r3]
   3136a:	2900      	cmp	r1, #0
   3136c:	d103      	bne.n	31376 <bt_gatt_init+0x1a>
   3136e:	e843 2000 	strex	r0, r2, [r3]
   31372:	2800      	cmp	r0, #0
   31374:	d1f7      	bne.n	31366 <bt_gatt_init+0xa>
   31376:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   3137a:	d13b      	bne.n	313f4 <bt_gatt_init+0x98>
   3137c:	f3bf 8f5b 	dmb	ish
   31380:	4b1e      	ldr	r3, [pc, #120]	; (313fc <bt_gatt_init+0xa0>)
   31382:	e853 1f00 	ldrex	r1, [r3]
   31386:	2900      	cmp	r1, #0
   31388:	d103      	bne.n	31392 <bt_gatt_init+0x36>
   3138a:	e843 2000 	strex	r0, r2, [r3]
   3138e:	2800      	cmp	r0, #0
   31390:	d1f7      	bne.n	31382 <bt_gatt_init+0x26>
   31392:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   31396:	d108      	bne.n	313aa <bt_gatt_init+0x4e>
   31398:	4919      	ldr	r1, [pc, #100]	; (31400 <bt_gatt_init+0xa4>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   3139a:	4a1a      	ldr	r2, [pc, #104]	; (31404 <bt_gatt_init+0xa8>)
   3139c:	880b      	ldrh	r3, [r1, #0]
   3139e:	4c1a      	ldr	r4, [pc, #104]	; (31408 <bt_gatt_init+0xac>)
	if (!atomic_cas(&service_init, 0, 1)) {
   313a0:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   313a2:	42a2      	cmp	r2, r4
   313a4:	d320      	bcc.n	313e8 <bt_gatt_init+0x8c>
   313a6:	b100      	cbz	r0, 313aa <bt_gatt_init+0x4e>
   313a8:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   313aa:	4b18      	ldr	r3, [pc, #96]	; (3140c <bt_gatt_init+0xb0>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   313ac:	4918      	ldr	r1, [pc, #96]	; (31410 <bt_gatt_init+0xb4>)
   313ae:	4819      	ldr	r0, [pc, #100]	; (31414 <bt_gatt_init+0xb8>)
   313b0:	2200      	movs	r2, #0
	list->tail = NULL;
   313b2:	e9c3 2200 	strd	r2, r2, [r3]
   313b6:	f01f fa3b 	bl	50830 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   313ba:	f44f 72a4 	mov.w	r2, #328	; 0x148
   313be:	2300      	movs	r3, #0
   313c0:	4814      	ldr	r0, [pc, #80]	; (31414 <bt_gatt_init+0xb8>)
   313c2:	f016 fdf9 	bl	47fb8 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   313c6:	4914      	ldr	r1, [pc, #80]	; (31418 <bt_gatt_init+0xbc>)
   313c8:	4814      	ldr	r0, [pc, #80]	; (3141c <bt_gatt_init+0xc0>)
   313ca:	f01f fa31 	bl	50830 <k_work_init_delayable>
   313ce:	2102      	movs	r1, #2
   313d0:	4813      	ldr	r0, [pc, #76]	; (31420 <bt_gatt_init+0xc4>)
   313d2:	f01c fac3 	bl	4d95c <atomic_or>
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   313d6:	4813      	ldr	r0, [pc, #76]	; (31424 <bt_gatt_init+0xc8>)
   313d8:	4913      	ldr	r1, [pc, #76]	; (31428 <bt_gatt_init+0xcc>)
   313da:	f01f fa29 	bl	50830 <k_work_init_delayable>
}
   313de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&gatt_conn_cb);
   313e2:	4812      	ldr	r0, [pc, #72]	; (3142c <bt_gatt_init+0xd0>)
   313e4:	f7fe ba9e 	b.w	2f924 <bt_conn_cb_register>
		last_static_handle += svc->attr_count;
   313e8:	6850      	ldr	r0, [r2, #4]
   313ea:	4403      	add	r3, r0
   313ec:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   313ee:	3208      	adds	r2, #8
   313f0:	2001      	movs	r0, #1
   313f2:	e7d6      	b.n	313a2 <bt_gatt_init+0x46>
}
   313f4:	bd10      	pop	{r4, pc}
   313f6:	bf00      	nop
   313f8:	200040b0 	.word	0x200040b0
   313fc:	20004144 	.word	0x20004144
   31400:	20006be0 	.word	0x20006be0
   31404:	0005135c 	.word	0x0005135c
   31408:	00051384 	.word	0x00051384
   3140c:	20003fe8 	.word	0x20003fe8
   31410:	000315b9 	.word	0x000315b9
   31414:	20001f28 	.word	0x20001f28
   31418:	0003189d 	.word	0x0003189d
   3141c:	20001fe8 	.word	0x20001fe8
   31420:	20002018 	.word	0x20002018
   31424:	20001f98 	.word	0x20001f98
   31428:	0004e8dd 	.word	0x0004e8dd
   3142c:	200005fc 	.word	0x200005fc

00031430 <bt_gatt_attr_get_handle>:
{
   31430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   31434:	4603      	mov	r3, r0
   31436:	b148      	cbz	r0, 3144c <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   31438:	8a00      	ldrh	r0, [r0, #16]
   3143a:	b938      	cbnz	r0, 3144c <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   3143c:	4912      	ldr	r1, [pc, #72]	; (31488 <bt_gatt_attr_get_handle+0x58>)
   3143e:	f8df e04c 	ldr.w	lr, [pc, #76]	; 3148c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   31442:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   31444:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31448:	4571      	cmp	r1, lr
   3144a:	d301      	bcc.n	31450 <bt_gatt_attr_get_handle+0x20>
}
   3144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   31450:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   31454:	42bb      	cmp	r3, r7
   31456:	d304      	bcc.n	31462 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   31458:	fb0c 7206 	mla	r2, ip, r6, r7
   3145c:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   3145e:	4293      	cmp	r3, r2
   31460:	d90e      	bls.n	31480 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   31462:	4434      	add	r4, r6
   31464:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31466:	3108      	adds	r1, #8
   31468:	4614      	mov	r4, r2
   3146a:	e7ed      	b.n	31448 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   3146c:	fb0c 7805 	mla	r8, ip, r5, r7
   31470:	4543      	cmp	r3, r8
   31472:	d007      	beq.n	31484 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   31474:	3501      	adds	r5, #1
   31476:	1962      	adds	r2, r4, r5
   31478:	42b5      	cmp	r5, r6
   3147a:	b292      	uxth	r2, r2
   3147c:	d1f6      	bne.n	3146c <bt_gatt_attr_get_handle+0x3c>
   3147e:	e7f2      	b.n	31466 <bt_gatt_attr_get_handle+0x36>
   31480:	2500      	movs	r5, #0
   31482:	e7f8      	b.n	31476 <bt_gatt_attr_get_handle+0x46>
   31484:	4610      	mov	r0, r2
   31486:	e7e1      	b.n	3144c <bt_gatt_attr_get_handle+0x1c>
   31488:	0005135c 	.word	0x0005135c
   3148c:	00051384 	.word	0x00051384

00031490 <bt_gatt_foreach_attr_type>:
{
   31490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31494:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   31498:	9100      	str	r1, [sp, #0]
   3149a:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   3149c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   314a0:	2d00      	cmp	r5, #0
   314a2:	bf08      	it	eq
   314a4:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   314a6:	4b24      	ldr	r3, [pc, #144]	; (31538 <bt_gatt_foreach_attr_type+0xa8>)
   314a8:	881b      	ldrh	r3, [r3, #0]
   314aa:	4283      	cmp	r3, r0
{
   314ac:	4607      	mov	r7, r0
   314ae:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   314b0:	d23c      	bcs.n	3152c <bt_gatt_foreach_attr_type+0x9c>
}
   314b2:	b003      	add	sp, #12
   314b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   314b8:	6873      	ldr	r3, [r6, #4]
   314ba:	4423      	add	r3, r4
   314bc:	42bb      	cmp	r3, r7
   314be:	d232      	bcs.n	31526 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   314c0:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   314c2:	3608      	adds	r6, #8
   314c4:	4b1d      	ldr	r3, [pc, #116]	; (3153c <bt_gatt_foreach_attr_type+0xac>)
   314c6:	429e      	cmp	r6, r3
   314c8:	d3f6      	bcc.n	314b8 <bt_gatt_foreach_attr_type+0x28>
   314ca:	e7f2      	b.n	314b2 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   314cc:	5889      	ldr	r1, [r1, r2]
   314ce:	9301      	str	r3, [sp, #4]
   314d0:	4640      	mov	r0, r8
   314d2:	f01a fac8 	bl	4ba66 <bt_uuid_cmp>
   314d6:	9b01      	ldr	r3, [sp, #4]
   314d8:	b190      	cbz	r0, 31500 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   314da:	3401      	adds	r4, #1
   314dc:	f10a 0a01 	add.w	sl, sl, #1
   314e0:	b2a4      	uxth	r4, r4
   314e2:	6873      	ldr	r3, [r6, #4]
   314e4:	4553      	cmp	r3, sl
   314e6:	d9ec      	bls.n	314c2 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   314e8:	9b00      	ldr	r3, [sp, #0]
   314ea:	429c      	cmp	r4, r3
   314ec:	d8e1      	bhi.n	314b2 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   314ee:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   314f0:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   314f2:	d3f2      	bcc.n	314da <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   314f4:	fb0b f20a 	mul.w	r2, fp, sl
   314f8:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   314fa:	f1b8 0f00 	cmp.w	r8, #0
   314fe:	d1e5      	bne.n	314cc <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   31500:	f1b9 0f00 	cmp.w	r9, #0
   31504:	d10b      	bne.n	3151e <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   31506:	3d01      	subs	r5, #1
   31508:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   3150a:	4618      	mov	r0, r3
   3150c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3150e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   31510:	4621      	mov	r1, r4
   31512:	4798      	blx	r3
	if (!*num_matches) {
   31514:	2d00      	cmp	r5, #0
   31516:	d0cc      	beq.n	314b2 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   31518:	2800      	cmp	r0, #0
   3151a:	d1de      	bne.n	314da <bt_gatt_foreach_attr_type+0x4a>
   3151c:	e7c9      	b.n	314b2 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   3151e:	68da      	ldr	r2, [r3, #12]
   31520:	4591      	cmp	r9, r2
   31522:	d1da      	bne.n	314da <bt_gatt_foreach_attr_type+0x4a>
   31524:	e7ef      	b.n	31506 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   31526:	f04f 0a00 	mov.w	sl, #0
   3152a:	e7da      	b.n	314e2 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   3152c:	4e04      	ldr	r6, [pc, #16]	; (31540 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   3152e:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   31530:	f04f 0b14 	mov.w	fp, #20
   31534:	e7c6      	b.n	314c4 <bt_gatt_foreach_attr_type+0x34>
   31536:	bf00      	nop
   31538:	20006be0 	.word	0x20006be0
   3153c:	00051384 	.word	0x00051384
   31540:	0005135c 	.word	0x0005135c

00031544 <db_hash_gen>:
{
   31544:	b530      	push	{r4, r5, lr}
   31546:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   31548:	2300      	movs	r3, #0
{
   3154a:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   3154c:	aa1c      	add	r2, sp, #112	; 0x70
   3154e:	4669      	mov	r1, sp
   31550:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   31552:	e9cd 3300 	strd	r3, r3, [sp]
   31556:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   3155a:	f01a f804 	bl	4b566 <tc_cmac_setup>
   3155e:	b308      	cbz	r0, 315a4 <db_hash_gen+0x60>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   31560:	f64f 71ff 	movw	r1, #65535	; 0xffff
   31564:	2001      	movs	r0, #1
   31566:	4a10      	ldr	r2, [pc, #64]	; (315a8 <db_hash_gen+0x64>)
   31568:	ab04      	add	r3, sp, #16
   3156a:	f01c fdf9 	bl	4e160 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   3156e:	480f      	ldr	r0, [pc, #60]	; (315ac <db_hash_gen+0x68>)
   31570:	a904      	add	r1, sp, #16
   31572:	f01a f88e 	bl	4b692 <tc_cmac_final>
   31576:	b1a8      	cbz	r0, 315a4 <db_hash_gen+0x60>
   31578:	4b0c      	ldr	r3, [pc, #48]	; (315ac <db_hash_gen+0x68>)
   3157a:	2208      	movs	r2, #8
   3157c:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   31580:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   31582:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
   31586:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   3158a:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   3158c:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   3158e:	d1f7      	bne.n	31580 <db_hash_gen+0x3c>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   31590:	b124      	cbz	r4, 3159c <db_hash_gen+0x58>
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   31592:	4906      	ldr	r1, [pc, #24]	; (315ac <db_hash_gen+0x68>)
   31594:	4806      	ldr	r0, [pc, #24]	; (315b0 <db_hash_gen+0x6c>)
   31596:	2210      	movs	r2, #16
   31598:	f7fa fbc8 	bl	2bd2c <settings_save_one>
   3159c:	4805      	ldr	r0, [pc, #20]	; (315b4 <db_hash_gen+0x70>)
   3159e:	2104      	movs	r1, #4
   315a0:	f01c f9dc 	bl	4d95c <atomic_or>
}
   315a4:	b049      	add	sp, #292	; 0x124
   315a6:	bd30      	pop	{r4, r5, pc}
   315a8:	0004d8b3 	.word	0x0004d8b3
   315ac:	20001f08 	.word	0x20001f08
   315b0:	00053c68 	.word	0x00053c68
   315b4:	20002018 	.word	0x20002018

000315b8 <db_hash_process>:
{
   315b8:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   315ba:	4829      	ldr	r0, [pc, #164]	; (31660 <db_hash_process+0xa8>)
   315bc:	f06f 0108 	mvn.w	r1, #8
   315c0:	f01c facd 	bl	4db5e <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   315c4:	0700      	lsls	r0, r0, #28
   315c6:	d545      	bpl.n	31654 <db_hash_process+0x9c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   315c8:	4825      	ldr	r0, [pc, #148]	; (31660 <db_hash_process+0xa8>)
   315ca:	f01c f96c 	bl	4d8a6 <atomic_get>
   315ce:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   315d0:	0759      	lsls	r1, r3, #29
   315d2:	f3c0 0080 	ubfx	r0, r0, #2, #1
   315d6:	d401      	bmi.n	315dc <db_hash_process+0x24>
			db_hash_gen(false);
   315d8:	f7ff ffb4 	bl	31544 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   315dc:	4921      	ldr	r1, [pc, #132]	; (31664 <db_hash_process+0xac>)
   315de:	2210      	movs	r2, #16
   315e0:	1888      	adds	r0, r1, r2
   315e2:	f01a f942 	bl	4b86a <memcmp>
   315e6:	b948      	cbnz	r0, 315fc <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   315e8:	481f      	ldr	r0, [pc, #124]	; (31668 <db_hash_process+0xb0>)
   315ea:	f01f f92d 	bl	50848 <k_work_cancel_delayable>
}
   315ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   315f2:	481b      	ldr	r0, [pc, #108]	; (31660 <db_hash_process+0xa8>)
   315f4:	f06f 0101 	mvn.w	r1, #1
   315f8:	f01c bab1 	b.w	4db5e <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   315fc:	4c1b      	ldr	r4, [pc, #108]	; (3166c <db_hash_process+0xb4>)
   315fe:	2101      	movs	r1, #1
   31600:	f104 0050 	add.w	r0, r4, #80	; 0x50
   31604:	f01c f9aa 	bl	4d95c <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   31608:	07c2      	lsls	r2, r0, #31
   3160a:	d413      	bmi.n	31634 <db_hash_process+0x7c>
		gatt_sc.start = start;
   3160c:	4b18      	ldr	r3, [pc, #96]	; (31670 <db_hash_process+0xb8>)
   3160e:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   31610:	4813      	ldr	r0, [pc, #76]	; (31660 <db_hash_process+0xa8>)
   31612:	f01c f948 	bl	4d8a6 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   31616:	0783      	lsls	r3, r0, #30
   31618:	d405      	bmi.n	31626 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   3161a:	4813      	ldr	r0, [pc, #76]	; (31668 <db_hash_process+0xb0>)
   3161c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   31620:	2300      	movs	r3, #0
   31622:	f016 fcfd 	bl	48020 <k_work_reschedule>
}
   31626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   3162a:	490e      	ldr	r1, [pc, #56]	; (31664 <db_hash_process+0xac>)
   3162c:	4811      	ldr	r0, [pc, #68]	; (31674 <db_hash_process+0xbc>)
   3162e:	2210      	movs	r2, #16
   31630:	f7fa bb7c 	b.w	2bd2c <settings_save_one>
	if (new_start >= *start && new_end <= *end) {
   31634:	8b23      	ldrh	r3, [r4, #24]
   31636:	8b62      	ldrh	r2, [r4, #26]
   31638:	2b01      	cmp	r3, #1
   3163a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3163e:	d805      	bhi.n	3164c <db_hash_process+0x94>
   31640:	429a      	cmp	r2, r3
   31642:	d0f0      	beq.n	31626 <db_hash_process+0x6e>
		*end = new_end;
   31644:	f64f 73ff 	movw	r3, #65535	; 0xffff
   31648:	8363      	strh	r3, [r4, #26]
   3164a:	e7e1      	b.n	31610 <db_hash_process+0x58>
	if (*end < new_end) {
   3164c:	429a      	cmp	r2, r3
		*start = new_start;
   3164e:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   31650:	d0de      	beq.n	31610 <db_hash_process+0x58>
   31652:	e7f7      	b.n	31644 <db_hash_process+0x8c>
}
   31654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   31658:	2001      	movs	r0, #1
   3165a:	f7ff bf73 	b.w	31544 <db_hash_gen>
   3165e:	bf00      	nop
   31660:	20002018 	.word	0x20002018
   31664:	20001f08 	.word	0x20001f08
   31668:	20001fe8 	.word	0x20001fe8
   3166c:	20001fc8 	.word	0x20001fc8
   31670:	ffff0001 	.word	0xffff0001
   31674:	00053c68 	.word	0x00053c68

00031678 <ccc_set_direct>:
{
   31678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3167c:	b0b8      	sub	sp, #224	; 0xe0
   3167e:	460c      	mov	r4, r1
   31680:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   31682:	4921      	ldr	r1, [pc, #132]	; (31708 <ccc_set_direct+0x90>)
   31684:	983e      	ldr	r0, [sp, #248]	; 0xf8
   31686:	466a      	mov	r2, sp
{
   31688:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   3168a:	f018 fe0f 	bl	4a2ac <settings_name_steq>
   3168e:	2800      	cmp	r0, #0
   31690:	d037      	beq.n	31702 <ccc_set_direct+0x8a>
		return ccc_set(name, len, read_cb, cb_arg);
   31692:	9d00      	ldr	r5, [sp, #0]
		settings_name_next(name, &next);
   31694:	a901      	add	r1, sp, #4
   31696:	4628      	mov	r0, r5
   31698:	f018 fe2b 	bl	4a2f2 <settings_name_next>
		if (!name) {
   3169c:	b165      	cbz	r5, 316b8 <ccc_set_direct+0x40>
		} else if (!next) {
   3169e:	9801      	ldr	r0, [sp, #4]
   316a0:	b970      	cbnz	r0, 316c0 <ccc_set_direct+0x48>
		err = bt_settings_decode_key(name, &addr);
   316a2:	f10d 0808 	add.w	r8, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   316a6:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   316a8:	4628      	mov	r0, r5
   316aa:	4641      	mov	r1, r8
			load.addr_with_id.id = BT_ID_DEFAULT;
   316ac:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   316b0:	f01a f9b3 	bl	4ba1a <bt_settings_decode_key>
		if (err) {
   316b4:	4605      	mov	r5, r0
   316b6:	b150      	cbz	r0, 316ce <ccc_set_direct+0x56>
			return -EINVAL;
   316b8:	f06f 0415 	mvn.w	r4, #21
   316bc:	4625      	mov	r5, r4
   316be:	e01a      	b.n	316f6 <ccc_set_direct+0x7e>
			unsigned long next_id = strtoul(next, NULL, 10);
   316c0:	220a      	movs	r2, #10
   316c2:	2100      	movs	r1, #0
   316c4:	f01a f82b 	bl	4b71e <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   316c8:	2800      	cmp	r0, #0
   316ca:	d0ea      	beq.n	316a2 <ccc_set_direct+0x2a>
   316cc:	e7f4      	b.n	316b8 <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   316ce:	f8cd 8010 	str.w	r8, [sp, #16]
		if (len_rd) {
   316d2:	b1a4      	cbz	r4, 316fe <ccc_set_direct+0x86>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   316d4:	22c0      	movs	r2, #192	; 0xc0
   316d6:	a908      	add	r1, sp, #32
   316d8:	4638      	mov	r0, r7
   316da:	47b0      	blx	r6
			if (len < 0) {
   316dc:	1e04      	subs	r4, r0, #0
   316de:	dbed      	blt.n	316bc <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   316e0:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   316e2:	ab08      	add	r3, sp, #32
			load.count = len / sizeof(*ccc_store);
   316e4:	e9cd 3406 	strd	r3, r4, [sp, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   316e8:	4a08      	ldr	r2, [pc, #32]	; (3170c <ccc_set_direct+0x94>)
   316ea:	ab04      	add	r3, sp, #16
   316ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   316f0:	2001      	movs	r0, #1
   316f2:	f01c fd35 	bl	4e160 <bt_gatt_foreach_attr>
}
   316f6:	4628      	mov	r0, r5
   316f8:	b038      	add	sp, #224	; 0xe0
   316fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   316fe:	4623      	mov	r3, r4
   31700:	e7f0      	b.n	316e4 <ccc_set_direct+0x6c>
			return -EINVAL;
   31702:	f06f 0515 	mvn.w	r5, #21
   31706:	e7f6      	b.n	316f6 <ccc_set_direct+0x7e>
   31708:	00053c70 	.word	0x00053c70
   3170c:	00031061 	.word	0x00031061

00031710 <gatt_indicate>:
{
   31710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31714:	4615      	mov	r5, r2
   31716:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   31718:	2214      	movs	r2, #20
   3171a:	6869      	ldr	r1, [r5, #4]
{
   3171c:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   3171e:	f01c fd2a 	bl	4e176 <bt_gatt_check_perm>
   31722:	4607      	mov	r7, r0
   31724:	2800      	cmp	r0, #0
   31726:	d13c      	bne.n	317a2 <gatt_indicate+0x92>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   31728:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   3172c:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   3172e:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   31730:	f7ff fa20 	bl	30b74 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   31734:	3602      	adds	r6, #2
	if (!req) {
   31736:	4604      	mov	r4, r0
   31738:	b920      	cbnz	r0, 31744 <gatt_indicate+0x34>
		return -ENOMEM;
   3173a:	f06f 050b 	mvn.w	r5, #11
}
   3173e:	4628      	mov	r0, r5
   31740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   31744:	4b18      	ldr	r3, [pc, #96]	; (317a8 <gatt_indicate+0x98>)
	req->len = len;
   31746:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   31748:	211d      	movs	r1, #29
   3174a:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   3174c:	60c7      	str	r7, [r0, #12]
	req->func = func;
   3174e:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   31750:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   31752:	4632      	mov	r2, r6
   31754:	4640      	mov	r0, r8
   31756:	f01b ff49 	bl	4d5ec <bt_att_create_pdu>
	if (!buf) {
   3175a:	4606      	mov	r6, r0
   3175c:	b918      	cbnz	r0, 31766 <gatt_indicate+0x56>
		bt_att_req_free(req);
   3175e:	4620      	mov	r0, r4
   31760:	f7ff fa2a 	bl	30bb8 <bt_att_req_free>
   31764:	e7e9      	b.n	3173a <gatt_indicate+0x2a>
   31766:	f100 0a08 	add.w	sl, r0, #8
   3176a:	2102      	movs	r1, #2
   3176c:	4650      	mov	r0, sl
   3176e:	f01e f85b 	bl	4f828 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   31772:	4607      	mov	r7, r0
   31774:	8aa9      	ldrh	r1, [r5, #20]
   31776:	f827 9b02 	strh.w	r9, [r7], #2
   3177a:	4650      	mov	r0, sl
   3177c:	f01e f854 	bl	4f828 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   31780:	8aaa      	ldrh	r2, [r5, #20]
   31782:	6929      	ldr	r1, [r5, #16]
   31784:	4638      	mov	r0, r7
   31786:	f01a f880 	bl	4b88a <memcpy>
	req->buf = buf;
   3178a:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   3178c:	4621      	mov	r1, r4
   3178e:	4640      	mov	r0, r8
   31790:	f01c f82a 	bl	4d7e8 <bt_att_req_send>
	if (err) {
   31794:	4605      	mov	r5, r0
   31796:	2800      	cmp	r0, #0
   31798:	d0d1      	beq.n	3173e <gatt_indicate+0x2e>
		bt_att_req_free(req);
   3179a:	4620      	mov	r0, r4
   3179c:	f7ff fa0c 	bl	30bb8 <bt_att_req_free>
   317a0:	e7cd      	b.n	3173e <gatt_indicate+0x2e>
		return -EPERM;
   317a2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   317a6:	e7ca      	b.n	3173e <gatt_indicate+0x2e>
   317a8:	0004d875 	.word	0x0004d875

000317ac <bt_gatt_indicate>:
{
   317ac:	b530      	push	{r4, r5, lr}
   317ae:	4604      	mov	r4, r0
   317b0:	b08b      	sub	sp, #44	; 0x2c
   317b2:	4837      	ldr	r0, [pc, #220]	; (31890 <bt_gatt_indicate+0xe4>)
   317b4:	f01c f877 	bl	4d8a6 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   317b8:	0782      	lsls	r2, r0, #30
{
   317ba:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   317bc:	d561      	bpl.n	31882 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   317be:	b114      	cbz	r4, 317c6 <bt_gatt_indicate+0x1a>
   317c0:	7b63      	ldrb	r3, [r4, #13]
   317c2:	2b07      	cmp	r3, #7
   317c4:	d160      	bne.n	31888 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   317c6:	6868      	ldr	r0, [r5, #4]
   317c8:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   317ca:	f7ff fe31 	bl	31430 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   317ce:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   317d0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   317d4:	b33a      	cbz	r2, 31826 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   317d6:	a905      	add	r1, sp, #20
   317d8:	9102      	str	r1, [sp, #8]
   317da:	492e      	ldr	r1, [pc, #184]	; (31894 <bt_gatt_indicate+0xe8>)
   317dc:	9101      	str	r1, [sp, #4]
   317de:	2101      	movs	r1, #1
	found->attr = NULL;
   317e0:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   317e2:	9100      	str	r1, [sp, #0]
   317e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   317e8:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   317ea:	f7ff fe51 	bl	31490 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   317ee:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   317f0:	b91b      	cbnz	r3, 317fa <bt_gatt_indicate+0x4e>
			return -ENOENT;
   317f2:	f06f 0001 	mvn.w	r0, #1
}
   317f6:	b00b      	add	sp, #44	; 0x2c
   317f8:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   317fa:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   317fc:	9b05      	ldr	r3, [sp, #20]
   317fe:	6818      	ldr	r0, [r3, #0]
   31800:	2300      	movs	r3, #0
   31802:	f88d 3010 	strb.w	r3, [sp, #16]
   31806:	a904      	add	r1, sp, #16
   31808:	f642 0303 	movw	r3, #10243	; 0x2803
   3180c:	f8ad 3012 	strh.w	r3, [sp, #18]
   31810:	f01a f929 	bl	4ba66 <bt_uuid_cmp>
   31814:	b970      	cbnz	r0, 31834 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   31816:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   31818:	68c3      	ldr	r3, [r0, #12]
   3181a:	799b      	ldrb	r3, [r3, #6]
   3181c:	069b      	lsls	r3, r3, #26
   3181e:	d405      	bmi.n	3182c <bt_gatt_indicate+0x80>
			return -EINVAL;
   31820:	f06f 0015 	mvn.w	r0, #21
   31824:	e7e7      	b.n	317f6 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   31826:	2800      	cmp	r0, #0
   31828:	d1e8      	bne.n	317fc <bt_gatt_indicate+0x50>
   3182a:	e7e2      	b.n	317f2 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   3182c:	f01c fc4a 	bl	4e0c4 <bt_gatt_attr_value_handle>
   31830:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   31834:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   31838:	b13c      	cbz	r4, 3184a <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   3183a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   3183c:	4601      	mov	r1, r0
		params->_ref = 1;
   3183e:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   31840:	462a      	mov	r2, r5
   31842:	4620      	mov	r0, r4
   31844:	f7ff ff64 	bl	31710 <gatt_indicate>
   31848:	e7d5      	b.n	317f6 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   3184a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   3184e:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   31850:	2302      	movs	r3, #2
   31852:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31856:	f642 1302 	movw	r3, #10498	; 0x2902
   3185a:	f8ad 3012 	strh.w	r3, [sp, #18]
   3185e:	ab05      	add	r3, sp, #20
   31860:	9302      	str	r3, [sp, #8]
   31862:	4b0d      	ldr	r3, [pc, #52]	; (31898 <bt_gatt_indicate+0xec>)
   31864:	9301      	str	r3, [sp, #4]
   31866:	2301      	movs	r3, #1
   31868:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   3186a:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   3186c:	4623      	mov	r3, r4
   3186e:	aa04      	add	r2, sp, #16
   31870:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   31874:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31876:	f88d 4010 	strb.w	r4, [sp, #16]
   3187a:	f7ff fe09 	bl	31490 <bt_gatt_foreach_attr_type>
	return data.err;
   3187e:	9807      	ldr	r0, [sp, #28]
   31880:	e7b9      	b.n	317f6 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   31882:	f06f 000a 	mvn.w	r0, #10
   31886:	e7b6      	b.n	317f6 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   31888:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3188c:	e7b3      	b.n	317f6 <bt_gatt_indicate+0x4a>
   3188e:	bf00      	nop
   31890:	200000cc 	.word	0x200000cc
   31894:	0004d89b 	.word	0x0004d89b
   31898:	000319e1 	.word	0x000319e1

0003189c <sc_process>:
{
   3189c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   3189e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   318a2:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   318a4:	f850 3c08 	ldr.w	r3, [r0, #-8]
   318a8:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   318aa:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   318ae:	f06f 0101 	mvn.w	r1, #1
   318b2:	4628      	mov	r0, r5
   318b4:	f01c f953 	bl	4db5e <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   318b8:	4b0d      	ldr	r3, [pc, #52]	; (318f0 <sc_process+0x54>)
   318ba:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   318be:	4b0d      	ldr	r3, [pc, #52]	; (318f4 <sc_process+0x58>)
   318c0:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   318c4:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   318c6:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   318c8:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   318cc:	2304      	movs	r3, #4
	sc->start = 0U;
   318ce:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   318d2:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   318d6:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   318da:	4631      	mov	r1, r6
   318dc:	f7ff ff66 	bl	317ac <bt_gatt_indicate>
   318e0:	b918      	cbnz	r0, 318ea <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   318e2:	2102      	movs	r1, #2
   318e4:	4628      	mov	r0, r5
   318e6:	f01c f839 	bl	4d95c <atomic_or>
}
   318ea:	b002      	add	sp, #8
   318ec:	bd70      	pop	{r4, r5, r6, pc}
   318ee:	bf00      	nop
   318f0:	00052280 	.word	0x00052280
   318f4:	00031315 	.word	0x00031315

000318f8 <bt_gatt_notify_cb>:
{
   318f8:	b530      	push	{r4, r5, lr}
   318fa:	4604      	mov	r4, r0
   318fc:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   318fe:	4835      	ldr	r0, [pc, #212]	; (319d4 <bt_gatt_notify_cb+0xdc>)
   31900:	f01b ffd1 	bl	4d8a6 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   31904:	0782      	lsls	r2, r0, #30
{
   31906:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   31908:	d55d      	bpl.n	319c6 <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   3190a:	b114      	cbz	r4, 31912 <bt_gatt_notify_cb+0x1a>
   3190c:	7b63      	ldrb	r3, [r4, #13]
   3190e:	2b07      	cmp	r3, #7
   31910:	d15c      	bne.n	319cc <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   31912:	6868      	ldr	r0, [r5, #4]
   31914:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   31916:	f7ff fd8b 	bl	31430 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   3191a:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   3191c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   31920:	b33a      	cbz	r2, 31972 <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31922:	a905      	add	r1, sp, #20
   31924:	9102      	str	r1, [sp, #8]
   31926:	492c      	ldr	r1, [pc, #176]	; (319d8 <bt_gatt_notify_cb+0xe0>)
   31928:	9101      	str	r1, [sp, #4]
   3192a:	2101      	movs	r1, #1
	found->attr = NULL;
   3192c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   3192e:	9100      	str	r1, [sp, #0]
   31930:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   31934:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31936:	f7ff fdab 	bl	31490 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   3193a:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   3193c:	b91b      	cbnz	r3, 31946 <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   3193e:	f06f 0001 	mvn.w	r0, #1
}
   31942:	b00b      	add	sp, #44	; 0x2c
   31944:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   31946:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   31948:	9b05      	ldr	r3, [sp, #20]
   3194a:	6818      	ldr	r0, [r3, #0]
   3194c:	2300      	movs	r3, #0
   3194e:	f88d 3010 	strb.w	r3, [sp, #16]
   31952:	a904      	add	r1, sp, #16
   31954:	f642 0303 	movw	r3, #10243	; 0x2803
   31958:	f8ad 3012 	strh.w	r3, [sp, #18]
   3195c:	f01a f883 	bl	4ba66 <bt_uuid_cmp>
   31960:	b970      	cbnz	r0, 31980 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   31962:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   31964:	68c3      	ldr	r3, [r0, #12]
   31966:	799b      	ldrb	r3, [r3, #6]
   31968:	06db      	lsls	r3, r3, #27
   3196a:	d405      	bmi.n	31978 <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   3196c:	f06f 0015 	mvn.w	r0, #21
   31970:	e7e7      	b.n	31942 <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   31972:	2800      	cmp	r0, #0
   31974:	d1e8      	bne.n	31948 <bt_gatt_notify_cb+0x50>
   31976:	e7e2      	b.n	3193e <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   31978:	f01c fba4 	bl	4e0c4 <bt_gatt_attr_value_handle>
   3197c:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   31980:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   31984:	b12c      	cbz	r4, 31992 <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   31986:	4601      	mov	r1, r0
   31988:	462a      	mov	r2, r5
   3198a:	4620      	mov	r0, r4
   3198c:	f01c fc1e 	bl	4e1cc <gatt_notify>
   31990:	e7d7      	b.n	31942 <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31992:	f642 1202 	movw	r2, #10498	; 0x2902
   31996:	f8ad 2012 	strh.w	r2, [sp, #18]
   3199a:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   3199c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   319a0:	9202      	str	r2, [sp, #8]
   319a2:	4a0e      	ldr	r2, [pc, #56]	; (319dc <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   319a4:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   319a6:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   319a8:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   319ac:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   319b0:	aa04      	add	r2, sp, #16
   319b2:	4623      	mov	r3, r4
   319b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   319b8:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   319ba:	f88d 4010 	strb.w	r4, [sp, #16]
   319be:	f7ff fd67 	bl	31490 <bt_gatt_foreach_attr_type>
	return data.err;
   319c2:	9807      	ldr	r0, [sp, #28]
   319c4:	e7bd      	b.n	31942 <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   319c6:	f06f 000a 	mvn.w	r0, #10
   319ca:	e7ba      	b.n	31942 <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   319cc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   319d0:	e7b7      	b.n	31942 <bt_gatt_notify_cb+0x4a>
   319d2:	bf00      	nop
   319d4:	200000cc 	.word	0x200000cc
   319d8:	0004d89b 	.word	0x0004d89b
   319dc:	000319e1 	.word	0x000319e1

000319e0 <notify_cb>:
{
   319e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   319e4:	4b3e      	ldr	r3, [pc, #248]	; (31ae0 <notify_cb+0x100>)
{
   319e6:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   319e8:	6882      	ldr	r2, [r0, #8]
   319ea:	429a      	cmp	r2, r3
{
   319ec:	b085      	sub	sp, #20
   319ee:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   319f0:	d005      	beq.n	319fe <notify_cb+0x1e>
		return BT_GATT_ITER_CONTINUE;
   319f2:	f04f 0801 	mov.w	r8, #1
}
   319f6:	4640      	mov	r0, r8
   319f8:	b005      	add	sp, #20
   319fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   319fe:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   31a02:	4b38      	ldr	r3, [pc, #224]	; (31ae4 <notify_cb+0x104>)
   31a04:	4599      	cmp	r9, r3
   31a06:	d01a      	beq.n	31a3e <notify_cb+0x5e>
   31a08:	f109 0601 	add.w	r6, r9, #1
   31a0c:	f109 0a3d 	add.w	sl, r9, #61	; 0x3d
		data->err = 0;
   31a10:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
   31a14:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   31a18:	89a3      	ldrh	r3, [r4, #12]
   31a1a:	429a      	cmp	r2, r3
   31a1c:	d10b      	bne.n	31a36 <notify_cb+0x56>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   31a1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   31a22:	4631      	mov	r1, r6
   31a24:	f7fd ffa2 	bl	2f96c <bt_conn_lookup_addr_le>
		if (!conn) {
   31a28:	4605      	mov	r5, r0
   31a2a:	b120      	cbz	r0, 31a36 <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
   31a2c:	7b43      	ldrb	r3, [r0, #13]
   31a2e:	2b07      	cmp	r3, #7
   31a30:	d02a      	beq.n	31a88 <notify_cb+0xa8>
			bt_conn_unref(conn);
   31a32:	f01a ff63 	bl	4c8fc <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31a36:	360a      	adds	r6, #10
   31a38:	4556      	cmp	r6, sl
   31a3a:	d1eb      	bne.n	31a14 <notify_cb+0x34>
   31a3c:	e7d9      	b.n	319f2 <notify_cb+0x12>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   31a3e:	2600      	movs	r6, #0
   31a40:	4d29      	ldr	r5, [pc, #164]	; (31ae8 <notify_cb+0x108>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   31a42:	46b0      	mov	r8, r6
   31a44:	a902      	add	r1, sp, #8
   31a46:	4628      	mov	r0, r5
   31a48:	f8cd 8008 	str.w	r8, [sp, #8]
   31a4c:	f8cd 800b 	str.w	r8, [sp, #11]
   31a50:	f01b ff93 	bl	4d97a <bt_addr_le_cmp>
   31a54:	b178      	cbz	r0, 31a76 <notify_cb+0x96>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   31a56:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   31a5a:	2207      	movs	r2, #7
   31a5c:	4629      	mov	r1, r5
   31a5e:	f7fd ffa9 	bl	2f9b4 <bt_conn_lookup_state_le>
			if (!conn) {
   31a62:	b970      	cbnz	r0, 31a82 <notify_cb+0xa2>
				sc = (struct sc_data *)data->ind_params->data;
   31a64:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   31a66:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   31a6a:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   31a6c:	4629      	mov	r1, r5
   31a6e:	8853      	ldrh	r3, [r2, #2]
   31a70:	8812      	ldrh	r2, [r2, #0]
   31a72:	f01c f840 	bl	4daf6 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   31a76:	3601      	adds	r6, #1
   31a78:	2e0c      	cmp	r6, #12
   31a7a:	f105 050c 	add.w	r5, r5, #12
   31a7e:	d1e1      	bne.n	31a44 <notify_cb+0x64>
   31a80:	e7c2      	b.n	31a08 <notify_cb+0x28>
			bt_conn_unref(conn);
   31a82:	f01a ff3b 	bl	4c8fc <bt_conn_unref>
   31a86:	e7f6      	b.n	31a76 <notify_cb+0x96>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   31a88:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
   31a8c:	b123      	cbz	r3, 31a98 <notify_cb+0xb8>
   31a8e:	4639      	mov	r1, r7
   31a90:	4798      	blx	r3
   31a92:	b908      	cbnz	r0, 31a98 <notify_cb+0xb8>
			bt_conn_unref(conn);
   31a94:	4628      	mov	r0, r5
   31a96:	e7cc      	b.n	31a32 <notify_cb+0x52>
		if (bt_gatt_check_perm(conn, attr,
   31a98:	2214      	movs	r2, #20
   31a9a:	4639      	mov	r1, r7
   31a9c:	4628      	mov	r0, r5
   31a9e:	f01c fb6a 	bl	4e176 <bt_gatt_check_perm>
   31aa2:	4680      	mov	r8, r0
   31aa4:	2800      	cmp	r0, #0
   31aa6:	d1c6      	bne.n	31a36 <notify_cb+0x56>
		if (data->type == BT_GATT_CCC_INDICATE) {
   31aa8:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   31aaa:	88a1      	ldrh	r1, [r4, #4]
   31aac:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   31aae:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   31ab0:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   31ab2:	d111      	bne.n	31ad8 <notify_cb+0xf8>
			err = gatt_indicate(conn, data->handle,
   31ab4:	f7ff fe2c 	bl	31710 <gatt_indicate>
			if (err == 0) {
   31ab8:	4603      	mov	r3, r0
   31aba:	b918      	cbnz	r0, 31ac4 <notify_cb+0xe4>
				data->ind_params->_ref++;
   31abc:	6921      	ldr	r1, [r4, #16]
   31abe:	7d8a      	ldrb	r2, [r1, #22]
   31ac0:	3201      	adds	r2, #1
   31ac2:	758a      	strb	r2, [r1, #22]
		bt_conn_unref(conn);
   31ac4:	4628      	mov	r0, r5
   31ac6:	9301      	str	r3, [sp, #4]
   31ac8:	f01a ff18 	bl	4c8fc <bt_conn_unref>
		if (err < 0) {
   31acc:	9b01      	ldr	r3, [sp, #4]
   31ace:	2b00      	cmp	r3, #0
   31ad0:	db91      	blt.n	319f6 <notify_cb+0x16>
		data->err = 0;
   31ad2:	f8c4 b008 	str.w	fp, [r4, #8]
   31ad6:	e7ae      	b.n	31a36 <notify_cb+0x56>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   31ad8:	f01c fb78 	bl	4e1cc <gatt_notify>
   31adc:	4603      	mov	r3, r0
   31ade:	e7f1      	b.n	31ac4 <notify_cb+0xe4>
   31ae0:	00030f29 	.word	0x00030f29
   31ae4:	2000061c 	.word	0x2000061c
   31ae8:	20006be3 	.word	0x20006be3

00031aec <update_ccc>:
{
   31aec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31af0:	4b31      	ldr	r3, [pc, #196]	; (31bb8 <update_ccc+0xcc>)
	struct bt_conn *conn = data->conn;
   31af2:	6814      	ldr	r4, [r2, #0]
{
   31af4:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31af6:	6882      	ldr	r2, [r0, #8]
   31af8:	429a      	cmp	r2, r3
{
   31afa:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   31afc:	d158      	bne.n	31bb0 <update_ccc+0xc4>
	ccc = attr->user_data;
   31afe:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31b02:	f108 0501 	add.w	r5, r8, #1
   31b06:	f108 093d 	add.w	r9, r8, #61	; 0x3d
		if (!cfg->value ||
   31b0a:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   31b0e:	b1f3      	cbz	r3, 31b4e <update_ccc+0x62>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   31b10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   31b14:	462a      	mov	r2, r5
   31b16:	4620      	mov	r0, r4
   31b18:	f01a ff99 	bl	4ca4e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   31b1c:	b1b8      	cbz	r0, 31b4e <update_ccc+0x62>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   31b1e:	222a      	movs	r2, #42	; 0x2a
   31b20:	4631      	mov	r1, r6
   31b22:	4620      	mov	r0, r4
   31b24:	f01c fb27 	bl	4e176 <bt_gatt_check_perm>
		if (err) {
   31b28:	b1a8      	cbz	r0, 31b56 <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   31b2a:	2803      	cmp	r0, #3
   31b2c:	d00f      	beq.n	31b4e <update_ccc+0x62>
				sec = BT_SECURITY_L3;
   31b2e:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   31b30:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   31b32:	bf14      	ite	ne
   31b34:	f04f 0a02 	movne.w	sl, #2
   31b38:	f04f 0a03 	moveq.w	sl, #3
			    bt_conn_get_security(conn) < sec) {
   31b3c:	f01a ff85 	bl	4ca4a <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   31b40:	4582      	cmp	sl, r0
   31b42:	d908      	bls.n	31b56 <update_ccc+0x6a>
				if (data->sec < sec) {
   31b44:	793b      	ldrb	r3, [r7, #4]
   31b46:	4553      	cmp	r3, sl
   31b48:	d201      	bcs.n	31b4e <update_ccc+0x62>
					data->sec = sec;
   31b4a:	f887 a004 	strb.w	sl, [r7, #4]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31b4e:	350a      	adds	r5, #10
   31b50:	454d      	cmp	r5, r9
   31b52:	d1da      	bne.n	31b0a <update_ccc+0x1e>
   31b54:	e02c      	b.n	31bb0 <update_ccc+0xc4>
		gatt_ccc_changed(attr, ccc);
   31b56:	4641      	mov	r1, r8
   31b58:	4630      	mov	r0, r6
   31b5a:	f01b fe74 	bl	4d846 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   31b5e:	4b17      	ldr	r3, [pc, #92]	; (31bbc <update_ccc+0xd0>)
   31b60:	4598      	cmp	r8, r3
   31b62:	d125      	bne.n	31bb0 <update_ccc+0xc4>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   31b64:	7a20      	ldrb	r0, [r4, #8]
   31b66:	f104 0188 	add.w	r1, r4, #136	; 0x88
   31b6a:	f7ff f953 	bl	30e14 <find_sc_cfg>
	if (!cfg) {
   31b6e:	b1f8      	cbz	r0, 31bb0 <update_ccc+0xc4>
	if (!(cfg->data.start || cfg->data.end)) {
   31b70:	8902      	ldrh	r2, [r0, #8]
   31b72:	8943      	ldrh	r3, [r0, #10]
   31b74:	ea52 0103 	orrs.w	r1, r2, r3
   31b78:	d01a      	beq.n	31bb0 <update_ccc+0xc4>
	index = bt_conn_index(conn);
   31b7a:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   31b7c:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   31b80:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   31b84:	f7fd fdbe 	bl	2f704 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   31b88:	490d      	ldr	r1, [pc, #52]	; (31bc0 <update_ccc+0xd4>)
   31b8a:	4a0e      	ldr	r2, [pc, #56]	; (31bc4 <update_ccc+0xd8>)
   31b8c:	2318      	movs	r3, #24
   31b8e:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   31b92:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   31b94:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   31b96:	4a0c      	ldr	r2, [pc, #48]	; (31bc8 <update_ccc+0xdc>)
   31b98:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   31b9a:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   31b9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   31ba0:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   31ba2:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   31ba4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   31ba8:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   31baa:	4620      	mov	r0, r4
   31bac:	f7ff fdfe 	bl	317ac <bt_gatt_indicate>
}
   31bb0:	2001      	movs	r0, #1
   31bb2:	b002      	add	sp, #8
   31bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   31bb8:	00030f29 	.word	0x00030f29
   31bbc:	2000061c 	.word	0x2000061c
   31bc0:	200040b4 	.word	0x200040b4
   31bc4:	00052280 	.word	0x00052280
   31bc8:	0004e057 	.word	0x0004e057

00031bcc <bt_gatt_discover>:
{
   31bcc:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   31bce:	7b43      	ldrb	r3, [r0, #13]
   31bd0:	2b07      	cmp	r3, #7
{
   31bd2:	b086      	sub	sp, #24
   31bd4:	4605      	mov	r5, r0
   31bd6:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
   31bd8:	f040 809a 	bne.w	31d10 <bt_gatt_discover+0x144>
	switch (params->type) {
   31bdc:	7c0b      	ldrb	r3, [r1, #16]
   31bde:	2b06      	cmp	r3, #6
   31be0:	d823      	bhi.n	31c2a <bt_gatt_discover+0x5e>
   31be2:	e8df f003 	tbb	[pc, r3]
   31be6:	0404      	.short	0x0404
   31be8:	8e5c5454 	.word	0x8e5c5454
   31bec:	20          	.byte	0x20
   31bed:	00          	.byte	0x00
		if (params->uuid) {
   31bee:	680b      	ldr	r3, [r1, #0]
   31bf0:	b18b      	cbz	r3, 31c16 <bt_gatt_discover+0x4a>
	switch (params->uuid->type) {
   31bf2:	781b      	ldrb	r3, [r3, #0]
   31bf4:	b16b      	cbz	r3, 31c12 <bt_gatt_discover+0x46>
   31bf6:	2b02      	cmp	r3, #2
   31bf8:	d117      	bne.n	31c2a <bt_gatt_discover+0x5e>
   31bfa:	2316      	movs	r3, #22
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   31bfc:	9301      	str	r3, [sp, #4]
   31bfe:	2306      	movs	r3, #6
   31c00:	9300      	str	r3, [sp, #0]
   31c02:	4945      	ldr	r1, [pc, #276]	; (31d18 <bt_gatt_discover+0x14c>)
   31c04:	4b45      	ldr	r3, [pc, #276]	; (31d1c <bt_gatt_discover+0x150>)
   31c06:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   31c08:	4628      	mov	r0, r5
   31c0a:	f01b ffec 	bl	4dbe6 <gatt_req_send>
}
   31c0e:	b006      	add	sp, #24
   31c10:	bd70      	pop	{r4, r5, r6, pc}
		len += BT_UUID_SIZE_16;
   31c12:	2308      	movs	r3, #8
   31c14:	e7f2      	b.n	31bfc <bt_gatt_discover+0x30>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   31c16:	2310      	movs	r3, #16
   31c18:	2104      	movs	r1, #4
   31c1a:	e9cd 3100 	strd	r3, r1, [sp]
   31c1e:	4622      	mov	r2, r4
   31c20:	4b3f      	ldr	r3, [pc, #252]	; (31d20 <bt_gatt_discover+0x154>)
   31c22:	4940      	ldr	r1, [pc, #256]	; (31d24 <bt_gatt_discover+0x158>)
   31c24:	e7f0      	b.n	31c08 <bt_gatt_discover+0x3c>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   31c26:	6808      	ldr	r0, [r1, #0]
   31c28:	b910      	cbnz	r0, 31c30 <bt_gatt_discover+0x64>
	switch (params->uuid->type) {
   31c2a:	f06f 0015 	mvn.w	r0, #21
   31c2e:	e7ee      	b.n	31c0e <bt_gatt_discover+0x42>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   31c30:	7806      	ldrb	r6, [r0, #0]
   31c32:	2e00      	cmp	r6, #0
   31c34:	d1f9      	bne.n	31c2a <bt_gatt_discover+0x5e>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   31c36:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   31c3a:	a902      	add	r1, sp, #8
   31c3c:	f88d 6008 	strb.w	r6, [sp, #8]
   31c40:	f8ad 300a 	strh.w	r3, [sp, #10]
   31c44:	f019 ff0f 	bl	4ba66 <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   31c48:	b308      	cbz	r0, 31c8e <bt_gatt_discover+0xc2>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   31c4a:	f642 1302 	movw	r3, #10498	; 0x2902
   31c4e:	6820      	ldr	r0, [r4, #0]
   31c50:	f88d 600c 	strb.w	r6, [sp, #12]
   31c54:	a903      	add	r1, sp, #12
   31c56:	f8ad 300e 	strh.w	r3, [sp, #14]
   31c5a:	f019 ff04 	bl	4ba66 <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   31c5e:	b1b0      	cbz	r0, 31c8e <bt_gatt_discover+0xc2>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   31c60:	f642 1303 	movw	r3, #10499	; 0x2903
   31c64:	6820      	ldr	r0, [r4, #0]
   31c66:	f88d 6010 	strb.w	r6, [sp, #16]
   31c6a:	a904      	add	r1, sp, #16
   31c6c:	f8ad 3012 	strh.w	r3, [sp, #18]
   31c70:	f019 fef9 	bl	4ba66 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   31c74:	b158      	cbz	r0, 31c8e <bt_gatt_discover+0xc2>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   31c76:	f642 1304 	movw	r3, #10500	; 0x2904
   31c7a:	6820      	ldr	r0, [r4, #0]
   31c7c:	f88d 6014 	strb.w	r6, [sp, #20]
   31c80:	a905      	add	r1, sp, #20
   31c82:	f8ad 3016 	strh.w	r3, [sp, #22]
   31c86:	f019 feee 	bl	4ba66 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   31c8a:	2800      	cmp	r0, #0
   31c8c:	d1cd      	bne.n	31c2a <bt_gatt_discover+0x5e>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   31c8e:	2308      	movs	r3, #8
   31c90:	2204      	movs	r2, #4
   31c92:	e9cd 3200 	strd	r3, r2, [sp]
   31c96:	4924      	ldr	r1, [pc, #144]	; (31d28 <bt_gatt_discover+0x15c>)
   31c98:	4b24      	ldr	r3, [pc, #144]	; (31d2c <bt_gatt_discover+0x160>)
   31c9a:	4622      	mov	r2, r4
   31c9c:	e7b4      	b.n	31c08 <bt_gatt_discover+0x3c>
		if (params->uuid &&
   31c9e:	6808      	ldr	r0, [r1, #0]
   31ca0:	b378      	cbz	r0, 31d02 <bt_gatt_discover+0x136>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   31ca2:	2600      	movs	r6, #0
   31ca4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   31ca8:	a902      	add	r1, sp, #8
   31caa:	f88d 6008 	strb.w	r6, [sp, #8]
   31cae:	f8ad 300a 	strh.w	r3, [sp, #10]
   31cb2:	f019 fed8 	bl	4ba66 <bt_uuid_cmp>
		if (params->uuid &&
   31cb6:	2800      	cmp	r0, #0
   31cb8:	d0b7      	beq.n	31c2a <bt_gatt_discover+0x5e>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   31cba:	f642 0301 	movw	r3, #10241	; 0x2801
   31cbe:	6820      	ldr	r0, [r4, #0]
   31cc0:	f88d 600c 	strb.w	r6, [sp, #12]
   31cc4:	a903      	add	r1, sp, #12
   31cc6:	f8ad 300e 	strh.w	r3, [sp, #14]
   31cca:	f019 fecc 	bl	4ba66 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   31cce:	2800      	cmp	r0, #0
   31cd0:	d0ab      	beq.n	31c2a <bt_gatt_discover+0x5e>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   31cd2:	f642 0302 	movw	r3, #10242	; 0x2802
   31cd6:	6820      	ldr	r0, [r4, #0]
   31cd8:	f88d 6010 	strb.w	r6, [sp, #16]
   31cdc:	a904      	add	r1, sp, #16
   31cde:	f8ad 3012 	strh.w	r3, [sp, #18]
   31ce2:	f019 fec0 	bl	4ba66 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   31ce6:	2800      	cmp	r0, #0
   31ce8:	d09f      	beq.n	31c2a <bt_gatt_discover+0x5e>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   31cea:	f642 0303 	movw	r3, #10243	; 0x2803
   31cee:	6820      	ldr	r0, [r4, #0]
   31cf0:	f88d 6014 	strb.w	r6, [sp, #20]
   31cf4:	a905      	add	r1, sp, #20
   31cf6:	f8ad 3016 	strh.w	r3, [sp, #22]
   31cfa:	f019 feb4 	bl	4ba66 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   31cfe:	2800      	cmp	r0, #0
   31d00:	d093      	beq.n	31c2a <bt_gatt_discover+0x5e>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   31d02:	2304      	movs	r3, #4
   31d04:	e9cd 3300 	strd	r3, r3, [sp]
   31d08:	4909      	ldr	r1, [pc, #36]	; (31d30 <bt_gatt_discover+0x164>)
   31d0a:	4b0a      	ldr	r3, [pc, #40]	; (31d34 <bt_gatt_discover+0x168>)
   31d0c:	4622      	mov	r2, r4
   31d0e:	e77b      	b.n	31c08 <bt_gatt_discover+0x3c>
		return -ENOTCONN;
   31d10:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   31d14:	e77b      	b.n	31c0e <bt_gatt_discover+0x42>
   31d16:	bf00      	nop
   31d18:	0004e26f 	.word	0x0004e26f
   31d1c:	0004de43 	.word	0x0004de43
   31d20:	0004dc87 	.word	0x0004dc87
   31d24:	0004e30d 	.word	0x0004e30d
   31d28:	00031d39 	.word	0x00031d39
   31d2c:	0004dcb7 	.word	0x0004dcb7
   31d30:	0004e48b 	.word	0x0004e48b
   31d34:	0004dc6f 	.word	0x0004dc6f

00031d38 <gatt_read_type_rsp>:
{
   31d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31d3c:	b093      	sub	sp, #76	; 0x4c
   31d3e:	4680      	mov	r8, r0
   31d40:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   31d42:	4617      	mov	r7, r2
	if (err) {
   31d44:	b131      	cbz	r1, 31d54 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   31d46:	686b      	ldr	r3, [r5, #4]
   31d48:	462a      	mov	r2, r5
   31d4a:	2100      	movs	r1, #0
}
   31d4c:	b013      	add	sp, #76	; 0x4c
   31d4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   31d52:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   31d54:	7c2a      	ldrb	r2, [r5, #16]
   31d56:	2a02      	cmp	r2, #2
   31d58:	d175      	bne.n	31e46 <gatt_read_type_rsp+0x10e>
	switch (rsp->len) {
   31d5a:	7838      	ldrb	r0, [r7, #0]
   31d5c:	2806      	cmp	r0, #6
   31d5e:	d018      	beq.n	31d92 <gatt_read_type_rsp+0x5a>
   31d60:	2808      	cmp	r0, #8
   31d62:	d110      	bne.n	31d86 <gatt_read_type_rsp+0x4e>
	for (length--, pdu = rsp->data; length >= rsp->len;
   31d64:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
   31d66:	2600      	movs	r6, #0
		u.uuid.type = BT_UUID_TYPE_16;
   31d68:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   31d6c:	b2a4      	uxth	r4, r4
   31d6e:	f107 0901 	add.w	r9, r7, #1
			value.uuid = &u.uuid;
   31d72:	f10d 0a20 	add.w	sl, sp, #32
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   31d76:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   31d78:	783b      	ldrb	r3, [r7, #0]
   31d7a:	42a3      	cmp	r3, r4
   31d7c:	d90b      	bls.n	31d96 <gatt_read_type_rsp+0x5e>
	if (length == 0U && handle) {
   31d7e:	b914      	cbnz	r4, 31d86 <gatt_read_type_rsp+0x4e>
   31d80:	2e00      	cmp	r6, #0
   31d82:	f040 8122 	bne.w	31fca <gatt_read_type_rsp+0x292>
	params->func(conn, NULL, params);
   31d86:	686b      	ldr	r3, [r5, #4]
   31d88:	462a      	mov	r2, r5
   31d8a:	2100      	movs	r1, #0
   31d8c:	4640      	mov	r0, r8
   31d8e:	4798      	blx	r3
	if (!handle) {
   31d90:	e03d      	b.n	31e0e <gatt_read_type_rsp+0xd6>
	switch (rsp->len) {
   31d92:	4611      	mov	r1, r2
   31d94:	e7e6      	b.n	31d64 <gatt_read_type_rsp+0x2c>
		handle = sys_le16_to_cpu(data->handle);
   31d96:	f8b9 3000 	ldrh.w	r3, [r9]
   31d9a:	b29e      	uxth	r6, r3
		if (!handle) {
   31d9c:	2e00      	cmp	r6, #0
   31d9e:	d0f2      	beq.n	31d86 <gatt_read_type_rsp+0x4e>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   31da0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   31da4:	f8ad 201c 	strh.w	r2, [sp, #28]
   31da8:	b291      	uxth	r1, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   31daa:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   31dae:	f8ad 201e 	strh.w	r2, [sp, #30]
   31db2:	b290      	uxth	r0, r2
		switch (u.uuid.type) {
   31db4:	f89d 2020 	ldrb.w	r2, [sp, #32]
   31db8:	b172      	cbz	r2, 31dd8 <gatt_read_type_rsp+0xa0>
   31dba:	2a02      	cmp	r2, #2
   31dbc:	d017      	beq.n	31dee <gatt_read_type_rsp+0xb6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   31dbe:	6829      	ldr	r1, [r5, #0]
   31dc0:	b341      	cbz	r1, 31e14 <gatt_read_type_rsp+0xdc>
   31dc2:	4650      	mov	r0, sl
   31dc4:	9303      	str	r3, [sp, #12]
   31dc6:	f019 fe4e 	bl	4ba66 <bt_uuid_cmp>
   31dca:	9b03      	ldr	r3, [sp, #12]
   31dcc:	b310      	cbz	r0, 31e14 <gatt_read_type_rsp+0xdc>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   31dce:	783b      	ldrb	r3, [r7, #0]
   31dd0:	1ae4      	subs	r4, r4, r3
   31dd2:	b2a4      	uxth	r4, r4
   31dd4:	4499      	add	r9, r3
   31dd6:	e7cf      	b.n	31d78 <gatt_read_type_rsp+0x40>
			value.uuid = &u.uuid;
   31dd8:	f8cd a018 	str.w	sl, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   31ddc:	f899 2006 	ldrb.w	r2, [r9, #6]
   31de0:	f899 1007 	ldrb.w	r1, [r9, #7]
   31de4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   31de8:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   31dec:	e7e7      	b.n	31dbe <gatt_read_type_rsp+0x86>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   31dee:	230a      	movs	r3, #10
			params->_included.attr_handle = handle;
   31df0:	812e      	strh	r6, [r5, #8]
			params->_included.start_handle = value.start_handle;
   31df2:	8169      	strh	r1, [r5, #10]
			params->_included.end_handle = value.end_handle;
   31df4:	81a8      	strh	r0, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   31df6:	4979      	ldr	r1, [pc, #484]	; (31fdc <gatt_read_type_rsp+0x2a4>)
   31df8:	9201      	str	r2, [sp, #4]
   31dfa:	9300      	str	r3, [sp, #0]
   31dfc:	462a      	mov	r2, r5
   31dfe:	4b78      	ldr	r3, [pc, #480]	; (31fe0 <gatt_read_type_rsp+0x2a8>)
   31e00:	4640      	mov	r0, r8
   31e02:	f01b fef0 	bl	4dbe6 <gatt_req_send>
			return read_included_uuid(conn, params);
   31e06:	b286      	uxth	r6, r0
	if (!handle) {
   31e08:	2e00      	cmp	r6, #0
   31e0a:	f040 80de 	bne.w	31fca <gatt_read_type_rsp+0x292>
}
   31e0e:	b013      	add	sp, #76	; 0x4c
   31e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   31e14:	f642 0202 	movw	r2, #10242	; 0x2802
   31e18:	f8ad 2016 	strh.w	r2, [sp, #22]
   31e1c:	aa05      	add	r2, sp, #20
   31e1e:	e9cd 2b0d 	strd	r2, fp, [sp, #52]	; 0x34
   31e22:	aa06      	add	r2, sp, #24
   31e24:	9210      	str	r2, [sp, #64]	; 0x40
		attr.handle = handle;
   31e26:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   31e2a:	f88d b014 	strb.w	fp, [sp, #20]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   31e2e:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   31e30:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   31e34:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   31e38:	462a      	mov	r2, r5
   31e3a:	a90d      	add	r1, sp, #52	; 0x34
   31e3c:	4640      	mov	r0, r8
   31e3e:	4798      	blx	r3
   31e40:	2800      	cmp	r0, #0
   31e42:	d1c4      	bne.n	31dce <gatt_read_type_rsp+0x96>
   31e44:	e7e3      	b.n	31e0e <gatt_read_type_rsp+0xd6>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   31e46:	2a03      	cmp	r2, #3
   31e48:	d15b      	bne.n	31f02 <gatt_read_type_rsp+0x1ca>
	switch (rsp->len) {
   31e4a:	783a      	ldrb	r2, [r7, #0]
   31e4c:	2a07      	cmp	r2, #7
   31e4e:	d002      	beq.n	31e56 <gatt_read_type_rsp+0x11e>
   31e50:	2a15      	cmp	r2, #21
   31e52:	d198      	bne.n	31d86 <gatt_read_type_rsp+0x4e>
   31e54:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   31e56:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   31e58:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   31e5c:	b2a4      	uxth	r4, r4
   31e5e:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
   31e62:	2600      	movs	r6, #0
   31e64:	f10d 0a20 	add.w	sl, sp, #32
	for (length--, pdu = rsp->data; length >= rsp->len;
   31e68:	783b      	ldrb	r3, [r7, #0]
   31e6a:	42a3      	cmp	r3, r4
   31e6c:	d887      	bhi.n	31d7e <gatt_read_type_rsp+0x46>
		handle = sys_le16_to_cpu(data->handle);
   31e6e:	f8b9 b000 	ldrh.w	fp, [r9]
   31e72:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   31e76:	2e00      	cmp	r6, #0
   31e78:	d085      	beq.n	31d86 <gatt_read_type_rsp+0x4e>
		switch (u.uuid.type) {
   31e7a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   31e7e:	b163      	cbz	r3, 31e9a <gatt_read_type_rsp+0x162>
   31e80:	2b02      	cmp	r3, #2
   31e82:	d013      	beq.n	31eac <gatt_read_type_rsp+0x174>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   31e84:	6829      	ldr	r1, [r5, #0]
   31e86:	b1c9      	cbz	r1, 31ebc <gatt_read_type_rsp+0x184>
   31e88:	4650      	mov	r0, sl
   31e8a:	f019 fdec 	bl	4ba66 <bt_uuid_cmp>
   31e8e:	b1a8      	cbz	r0, 31ebc <gatt_read_type_rsp+0x184>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   31e90:	783b      	ldrb	r3, [r7, #0]
   31e92:	1ae4      	subs	r4, r4, r3
   31e94:	b2a4      	uxth	r4, r4
   31e96:	4499      	add	r9, r3
   31e98:	e7e6      	b.n	31e68 <gatt_read_type_rsp+0x130>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   31e9a:	f899 3005 	ldrb.w	r3, [r9, #5]
   31e9e:	f899 2006 	ldrb.w	r2, [r9, #6]
   31ea2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   31ea6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   31eaa:	e7eb      	b.n	31e84 <gatt_read_type_rsp+0x14c>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   31eac:	2210      	movs	r2, #16
   31eae:	f109 0105 	add.w	r1, r9, #5
   31eb2:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   31eb6:	f019 fce8 	bl	4b88a <memcpy>
			break;
   31eba:	e7e3      	b.n	31e84 <gatt_read_type_rsp+0x14c>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   31ebc:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   31ec0:	f899 3002 	ldrb.w	r3, [r9, #2]
   31ec4:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   31ec8:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   31ecc:	f88d 301e 	strb.w	r3, [sp, #30]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   31ed0:	f8ad 2016 	strh.w	r2, [sp, #22]
   31ed4:	2300      	movs	r3, #0
   31ed6:	aa05      	add	r2, sp, #20
   31ed8:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
   31edc:	aa06      	add	r2, sp, #24
   31ede:	f88d 3014 	strb.w	r3, [sp, #20]
   31ee2:	930f      	str	r3, [sp, #60]	; 0x3c
   31ee4:	9210      	str	r2, [sp, #64]	; 0x40
   31ee6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   31eea:	f8cd a018 	str.w	sl, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   31eee:	686b      	ldr	r3, [r5, #4]
		attr.handle = handle;
   31ef0:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   31ef4:	462a      	mov	r2, r5
   31ef6:	a90d      	add	r1, sp, #52	; 0x34
   31ef8:	4640      	mov	r0, r8
   31efa:	4798      	blx	r3
   31efc:	2800      	cmp	r0, #0
   31efe:	d1c7      	bne.n	31e90 <gatt_read_type_rsp+0x158>
   31f00:	e785      	b.n	31e0e <gatt_read_type_rsp+0xd6>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   31f02:	682a      	ldr	r2, [r5, #0]
   31f04:	7816      	ldrb	r6, [r2, #0]
   31f06:	b96e      	cbnz	r6, 31f24 <gatt_read_type_rsp+0x1ec>
	uuid_val = BT_UUID_16(params->uuid)->val;
   31f08:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   31f0a:	1e5c      	subs	r4, r3, #1
   31f0c:	b2a4      	uxth	r4, r4
   31f0e:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
   31f12:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   31f16:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   31f18:	783b      	ldrb	r3, [r7, #0]
   31f1a:	42a3      	cmp	r3, r4
   31f1c:	d907      	bls.n	31f2e <gatt_read_type_rsp+0x1f6>
	if (length == 0U && handle) {
   31f1e:	b90c      	cbnz	r4, 31f24 <gatt_read_type_rsp+0x1ec>
   31f20:	2e00      	cmp	r6, #0
   31f22:	d152      	bne.n	31fca <gatt_read_type_rsp+0x292>
	params->func(conn, NULL, params);
   31f24:	686b      	ldr	r3, [r5, #4]
   31f26:	462a      	mov	r2, r5
   31f28:	2100      	movs	r1, #0
   31f2a:	4640      	mov	r0, r8
   31f2c:	e70e      	b.n	31d4c <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
   31f2e:	f8b9 2000 	ldrh.w	r2, [r9]
   31f32:	b296      	uxth	r6, r2
		if (!handle) {
   31f34:	2e00      	cmp	r6, #0
   31f36:	d0f5      	beq.n	31f24 <gatt_read_type_rsp+0x1ec>
		switch (uuid_val) {
   31f38:	f1bb 0f04 	cmp.w	fp, #4
   31f3c:	d8f2      	bhi.n	31f24 <gatt_read_type_rsp+0x1ec>
   31f3e:	a301      	add	r3, pc, #4	; (adr r3, 31f44 <gatt_read_type_rsp+0x20c>)
   31f40:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
   31f44:	00031f59 	.word	0x00031f59
   31f48:	00031f25 	.word	0x00031f25
   31f4c:	00031f59 	.word	0x00031f59
   31f50:	00031f59 	.word	0x00031f59
   31f54:	00031f91 	.word	0x00031f91
			value.scc.flags = sys_get_le16(data->value);
   31f58:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   31f5c:	f8ad 3020 	strh.w	r3, [sp, #32]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   31f60:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
   31f62:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   31f66:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	; 0x34
   31f6a:	ab08      	add	r3, sp, #32
   31f6c:	9310      	str	r3, [sp, #64]	; 0x40
   31f6e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   31f72:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   31f74:	f88d a046 	strb.w	sl, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   31f78:	462a      	mov	r2, r5
   31f7a:	a90d      	add	r1, sp, #52	; 0x34
   31f7c:	4640      	mov	r0, r8
   31f7e:	4798      	blx	r3
   31f80:	2800      	cmp	r0, #0
   31f82:	f43f af44 	beq.w	31e0e <gatt_read_type_rsp+0xd6>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   31f86:	783b      	ldrb	r3, [r7, #0]
   31f88:	1ae4      	subs	r4, r4, r3
   31f8a:	b2a4      	uxth	r4, r4
   31f8c:	4499      	add	r9, r3
   31f8e:	e7c3      	b.n	31f18 <gatt_read_type_rsp+0x1e0>
			value.cpf.format = cpf->format;
   31f90:	f899 3002 	ldrb.w	r3, [r9, #2]
   31f94:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
   31f98:	f899 3003 	ldrb.w	r3, [r9, #3]
   31f9c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   31fa0:	f899 1005 	ldrb.w	r1, [r9, #5]
   31fa4:	f899 3004 	ldrb.w	r3, [r9, #4]
   31fa8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   31fac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
   31fb0:	f899 3006 	ldrb.w	r3, [r9, #6]
   31fb4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   31fb8:	f899 3007 	ldrb.w	r3, [r9, #7]
   31fbc:	f899 1008 	ldrb.w	r1, [r9, #8]
   31fc0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   31fc4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
   31fc8:	e7ca      	b.n	31f60 <gatt_read_type_rsp+0x228>
	gatt_discover_next(conn, handle, params);
   31fca:	462a      	mov	r2, r5
   31fcc:	4631      	mov	r1, r6
   31fce:	4640      	mov	r0, r8
}
   31fd0:	b013      	add	sp, #76	; 0x4c
   31fd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   31fd6:	f01c b92c 	b.w	4e232 <gatt_discover_next>
   31fda:	bf00      	nop
   31fdc:	0004e401 	.word	0x0004e401
   31fe0:	0004dc5b 	.word	0x0004dc5b

00031fe4 <bt_gatt_subscribe>:
{
   31fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   31fe6:	7b43      	ldrb	r3, [r0, #13]
   31fe8:	2b07      	cmp	r3, #7
{
   31fea:	4605      	mov	r5, r0
   31fec:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   31fee:	d16c      	bne.n	320ca <bt_gatt_subscribe+0xe6>
	sub = gatt_sub_find(conn);
   31ff0:	f7fe ff2c 	bl	30e4c <gatt_sub_find>
	if (!sub) {
   31ff4:	4604      	mov	r4, r0
   31ff6:	b958      	cbnz	r0, 32010 <bt_gatt_subscribe+0x2c>
		sub = gatt_sub_find(NULL);
   31ff8:	f7fe ff28 	bl	30e4c <gatt_sub_find>
		if (sub) {
   31ffc:	4604      	mov	r4, r0
   31ffe:	2800      	cmp	r0, #0
   32000:	d066      	beq.n	320d0 <bt_gatt_subscribe+0xec>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   32002:	f105 0188 	add.w	r1, r5, #136	; 0x88
   32006:	3001      	adds	r0, #1
   32008:	f01b fcf3 	bl	4d9f2 <bt_addr_le_copy>
			sub->id = conn->id;
   3200c:	7a2b      	ldrb	r3, [r5, #8]
   3200e:	7023      	strb	r3, [r4, #0]
	return list->head;
   32010:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   32012:	b90a      	cbnz	r2, 32018 <bt_gatt_subscribe+0x34>
   32014:	4613      	mov	r3, r2
   32016:	e001      	b.n	3201c <bt_gatt_subscribe+0x38>
   32018:	f1a2 031c 	sub.w	r3, r2, #28
   3201c:	2700      	movs	r7, #0
   3201e:	e014      	b.n	3204a <bt_gatt_subscribe+0x66>
		if (tmp == params) {
   32020:	42b3      	cmp	r3, r6
   32022:	d106      	bne.n	32032 <bt_gatt_subscribe+0x4e>
	if (gatt_sub_is_empty(sub)) {
   32024:	b912      	cbnz	r2, 3202c <bt_gatt_subscribe+0x48>
		gatt_sub_free(sub);
   32026:	4620      	mov	r0, r4
   32028:	f01b fd3a 	bl	4daa0 <gatt_sub_free>
			return -EALREADY;
   3202c:	f06f 0577 	mvn.w	r5, #119	; 0x77
   32030:	e032      	b.n	32098 <bt_gatt_subscribe+0xb4>
		if (tmp->value_handle == params->value_handle &&
   32032:	8918      	ldrh	r0, [r3, #8]
   32034:	8931      	ldrh	r1, [r6, #8]
   32036:	4288      	cmp	r0, r1
   32038:	d104      	bne.n	32044 <bt_gatt_subscribe+0x60>
   3203a:	8a98      	ldrh	r0, [r3, #20]
   3203c:	8ab1      	ldrh	r1, [r6, #20]
			has_subscription = true;
   3203e:	4288      	cmp	r0, r1
   32040:	bf28      	it	cs
   32042:	2701      	movcs	r7, #1
	return node->next;
   32044:	69db      	ldr	r3, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   32046:	b113      	cbz	r3, 3204e <bt_gatt_subscribe+0x6a>
   32048:	3b1c      	subs	r3, #28
   3204a:	2b00      	cmp	r3, #0
   3204c:	d1e8      	bne.n	32020 <bt_gatt_subscribe+0x3c>
	if (!has_subscription) {
   3204e:	2f00      	cmp	r7, #0
   32050:	d132      	bne.n	320b8 <bt_gatt_subscribe+0xd4>
		if (!params->ccc_handle) {
   32052:	8973      	ldrh	r3, [r6, #10]
   32054:	bb1b      	cbnz	r3, 3209e <bt_gatt_subscribe+0xba>
	memcpy(&ccc_uuid, BT_UUID_GATT_CCC, sizeof(ccc_uuid));
   32056:	4c21      	ldr	r4, [pc, #132]	; (320dc <bt_gatt_subscribe+0xf8>)
   32058:	f88d 7004 	strb.w	r7, [sp, #4]
   3205c:	2204      	movs	r2, #4
   3205e:	f642 1302 	movw	r3, #10498	; 0x2902
   32062:	eb0d 0102 	add.w	r1, sp, r2
   32066:	4620      	mov	r0, r4
   32068:	f8ad 3006 	strh.w	r3, [sp, #6]
   3206c:	f019 fc0d 	bl	4b88a <memcpy>
	memset(params->disc_params, 0, sizeof(*params->disc_params));
   32070:	2218      	movs	r2, #24
   32072:	4639      	mov	r1, r7
   32074:	6930      	ldr	r0, [r6, #16]
   32076:	f019 fc13 	bl	4b8a0 <memset>
	params->disc_params->sub_params = params;
   3207a:	6931      	ldr	r1, [r6, #16]
	params->disc_params->type = BT_GATT_DISCOVER_DESCRIPTOR;
   3207c:	2304      	movs	r3, #4
   3207e:	740b      	strb	r3, [r1, #16]
	params->disc_params->start_handle = params->value_handle;
   32080:	8933      	ldrh	r3, [r6, #8]
   32082:	810b      	strh	r3, [r1, #8]
	params->disc_params->end_handle = params->end_handle;
   32084:	89b3      	ldrh	r3, [r6, #12]
   32086:	81cb      	strh	r3, [r1, #14]
	params->disc_params->func = gatt_ccc_discover_cb;
   32088:	4b15      	ldr	r3, [pc, #84]	; (320e0 <bt_gatt_subscribe+0xfc>)
	params->disc_params->sub_params = params;
   3208a:	614e      	str	r6, [r1, #20]
	err = bt_gatt_discover(conn, params->disc_params);
   3208c:	4628      	mov	r0, r5
	params->disc_params->uuid = &ccc_uuid.uuid;
   3208e:	600c      	str	r4, [r1, #0]
	params->disc_params->func = gatt_ccc_discover_cb;
   32090:	604b      	str	r3, [r1, #4]
	err = bt_gatt_discover(conn, params->disc_params);
   32092:	f7ff fd9b 	bl	31bcc <bt_gatt_discover>
   32096:	4605      	mov	r5, r0
}
   32098:	4628      	mov	r0, r5
   3209a:	b003      	add	sp, #12
   3209c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = gatt_write_ccc(conn, params);
   3209e:	4628      	mov	r0, r5
   320a0:	4631      	mov	r1, r6
   320a2:	f7fe ffb7 	bl	31014 <gatt_write_ccc>
		if (err) {
   320a6:	4605      	mov	r5, r0
   320a8:	b130      	cbz	r0, 320b8 <bt_gatt_subscribe+0xd4>
	if (gatt_sub_is_empty(sub)) {
   320aa:	68a3      	ldr	r3, [r4, #8]
   320ac:	2b00      	cmp	r3, #0
   320ae:	d1f3      	bne.n	32098 <bt_gatt_subscribe+0xb4>
		gatt_sub_free(sub);
   320b0:	4620      	mov	r0, r4
   320b2:	f01b fcf5 	bl	4daa0 <gatt_sub_free>
   320b6:	e7ef      	b.n	32098 <bt_gatt_subscribe+0xb4>
Z_GENLIST_PREPEND(slist, snode)
   320b8:	68e5      	ldr	r5, [r4, #12]
	parent->next = child;
   320ba:	68a2      	ldr	r2, [r4, #8]
   320bc:	61f2      	str	r2, [r6, #28]
	sys_slist_prepend(&sub->list, &params->node);
   320be:	f106 031c 	add.w	r3, r6, #28
	list->head = node;
   320c2:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   320c4:	b93d      	cbnz	r5, 320d6 <bt_gatt_subscribe+0xf2>
	list->tail = node;
   320c6:	60e3      	str	r3, [r4, #12]
}
   320c8:	e7e6      	b.n	32098 <bt_gatt_subscribe+0xb4>
		return -ENOTCONN;
   320ca:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   320ce:	e7e3      	b.n	32098 <bt_gatt_subscribe+0xb4>
		return -ENOMEM;
   320d0:	f06f 050b 	mvn.w	r5, #11
   320d4:	e7e0      	b.n	32098 <bt_gatt_subscribe+0xb4>
	return 0;
   320d6:	2500      	movs	r5, #0
   320d8:	e7de      	b.n	32098 <bt_gatt_subscribe+0xb4>
   320da:	bf00      	nop
   320dc:	20006bdc 	.word	0x20006bdc
   320e0:	0004e655 	.word	0x0004e655

000320e4 <bt_gatt_connected>:
{
   320e4:	b570      	push	{r4, r5, r6, lr}
   320e6:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   320e8:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   320ec:	4604      	mov	r4, r0
	data.conn = conn;
   320ee:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   320f0:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   320f2:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   320f4:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   320f8:	4631      	mov	r1, r6
   320fa:	f01a f887 	bl	4c20c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   320fe:	b198      	cbz	r0, 32128 <bt_gatt_connected+0x44>
		if (conn->id) {
   32100:	7a22      	ldrb	r2, [r4, #8]
   32102:	2a00      	cmp	r2, #0
   32104:	d03b      	beq.n	3217e <bt_gatt_connected+0x9a>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   32106:	ad02      	add	r5, sp, #8
   32108:	2104      	movs	r1, #4
   3210a:	4628      	mov	r0, r5
   3210c:	f017 f9ff 	bl	4950e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32110:	9500      	str	r5, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   32112:	4a1d      	ldr	r2, [pc, #116]	; (32188 <bt_gatt_connected+0xa4>)
   32114:	2124      	movs	r1, #36	; 0x24
   32116:	a805      	add	r0, sp, #20
   32118:	4633      	mov	r3, r6
   3211a:	f7fa ffeb 	bl	2d0f4 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   3211e:	aa05      	add	r2, sp, #20
   32120:	491a      	ldr	r1, [pc, #104]	; (3218c <bt_gatt_connected+0xa8>)
   32122:	4610      	mov	r0, r2
   32124:	f7f9 fe62 	bl	2bdec <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   32128:	ab03      	add	r3, sp, #12
   3212a:	4a19      	ldr	r2, [pc, #100]	; (32190 <bt_gatt_connected+0xac>)
   3212c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32130:	2001      	movs	r0, #1
   32132:	f01c f815 	bl	4e160 <bt_gatt_foreach_attr>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   32136:	78e3      	ldrb	r3, [r4, #3]
   32138:	b94b      	cbnz	r3, 3214e <bt_gatt_connected+0x6a>
	    bt_conn_get_security(conn) < data.sec) {
   3213a:	4620      	mov	r0, r4
   3213c:	f01a fc85 	bl	4ca4a <bt_conn_get_security>
   32140:	f89d 1010 	ldrb.w	r1, [sp, #16]
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
   32144:	4288      	cmp	r0, r1
   32146:	d202      	bcs.n	3214e <bt_gatt_connected+0x6a>
		int err = bt_conn_set_security(conn, data.sec);
   32148:	4620      	mov	r0, r4
   3214a:	f01a fc56 	bl	4c9fa <bt_conn_set_security>
	sub = gatt_sub_find(conn);
   3214e:	4620      	mov	r0, r4
   32150:	f7fe fe7c 	bl	30e4c <gatt_sub_find>
	if (!sub) {
   32154:	b1a8      	cbz	r0, 32182 <bt_gatt_connected+0x9e>
	return list->head;
   32156:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   32158:	b19d      	cbz	r5, 32182 <bt_gatt_connected+0x9e>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   3215a:	7a20      	ldrb	r0, [r4, #8]
   3215c:	4631      	mov	r1, r6
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   3215e:	3d1c      	subs	r5, #28
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   32160:	f01a f854 	bl	4c20c <bt_addr_le_is_bonded>
   32164:	b148      	cbz	r0, 3217a <bt_gatt_connected+0x96>
   32166:	f105 0018 	add.w	r0, r5, #24
   3216a:	f01b fb9c 	bl	4d8a6 <atomic_get>
   3216e:	0783      	lsls	r3, r0, #30
   32170:	d403      	bmi.n	3217a <bt_gatt_connected+0x96>
			gatt_write_ccc(conn, params);
   32172:	4629      	mov	r1, r5
   32174:	4620      	mov	r0, r4
   32176:	f7fe ff4d 	bl	31014 <gatt_write_ccc>
	return node->next;
   3217a:	69ed      	ldr	r5, [r5, #28]
   3217c:	e7ec      	b.n	32158 <bt_gatt_connected+0x74>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   3217e:	9200      	str	r2, [sp, #0]
   32180:	e7c7      	b.n	32112 <bt_gatt_connected+0x2e>
}
   32182:	b00e      	add	sp, #56	; 0x38
   32184:	bd70      	pop	{r4, r5, r6, pc}
   32186:	bf00      	nop
   32188:	00053c73 	.word	0x00053c73
   3218c:	00031679 	.word	0x00031679
   32190:	00031aed 	.word	0x00031aed

00032194 <bt_gatt_att_max_mtu_changed>:
{
   32194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   32196:	4b08      	ldr	r3, [pc, #32]	; (321b8 <bt_gatt_att_max_mtu_changed+0x24>)
   32198:	681c      	ldr	r4, [r3, #0]
   3219a:	4605      	mov	r5, r0
   3219c:	460e      	mov	r6, r1
   3219e:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   321a0:	b14c      	cbz	r4, 321b6 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   321a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   321a6:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   321a8:	b11b      	cbz	r3, 321b2 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   321aa:	463a      	mov	r2, r7
   321ac:	4631      	mov	r1, r6
   321ae:	4628      	mov	r0, r5
   321b0:	4798      	blx	r3
	return node->next;
   321b2:	6864      	ldr	r4, [r4, #4]
   321b4:	e7f4      	b.n	321a0 <bt_gatt_att_max_mtu_changed+0xc>
}
   321b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   321b8:	20003fe8 	.word	0x20003fe8

000321bc <bt_gatt_encrypt_change>:
{
   321bc:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   321be:	4a06      	ldr	r2, [pc, #24]	; (321d8 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   321c0:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   321c2:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   321c4:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   321c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   321ca:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   321ce:	f01b ffc7 	bl	4e160 <bt_gatt_foreach_attr>
}
   321d2:	b003      	add	sp, #12
   321d4:	f85d fb04 	ldr.w	pc, [sp], #4
   321d8:	00031aed 	.word	0x00031aed

000321dc <db_hash_read>:
{
   321dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   321de:	4914      	ldr	r1, [pc, #80]	; (32230 <db_hash_read+0x54>)
{
   321e0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   321e4:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   321e6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   321ea:	461f      	mov	r7, r3
   321ec:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   321ee:	f01e fb3f 	bl	50870 <k_work_cancel_delayable_sync>
   321f2:	4810      	ldr	r0, [pc, #64]	; (32234 <db_hash_read+0x58>)
   321f4:	f01b fb57 	bl	4d8a6 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   321f8:	0743      	lsls	r3, r0, #29
   321fa:	d402      	bmi.n	32202 <db_hash_read+0x26>
		db_hash_gen(true);
   321fc:	2001      	movs	r0, #1
   321fe:	f7ff f9a1 	bl	31544 <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   32202:	2101      	movs	r1, #1
   32204:	4620      	mov	r0, r4
   32206:	f01c fb42 	bl	4e88e <bt_gatt_change_aware>
	if (offset > value_len) {
   3220a:	2e10      	cmp	r6, #16
   3220c:	d80c      	bhi.n	32228 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   3220e:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   32212:	4909      	ldr	r1, [pc, #36]	; (32238 <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   32214:	42bc      	cmp	r4, r7
   32216:	bfa8      	it	ge
   32218:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   3221a:	4622      	mov	r2, r4
   3221c:	4431      	add	r1, r6
   3221e:	4628      	mov	r0, r5
   32220:	f019 fb33 	bl	4b88a <memcpy>
}
   32224:	4620      	mov	r0, r4
   32226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   32228:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   3222c:	e7fa      	b.n	32224 <db_hash_read+0x48>
   3222e:	bf00      	nop
   32230:	20001f58 	.word	0x20001f58
   32234:	20002018 	.word	0x20002018
   32238:	20001f08 	.word	0x20001f08

0003223c <bt_gatt_store_ccc>:
{
   3223c:	b570      	push	{r4, r5, r6, lr}
   3223e:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   32240:	2300      	movs	r3, #0
{
   32242:	4604      	mov	r4, r0
   32244:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   32246:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   32248:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   3224c:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   3224e:	4a11      	ldr	r2, [pc, #68]	; (32294 <bt_gatt_store_ccc+0x58>)
   32250:	ab0d      	add	r3, sp, #52	; 0x34
   32252:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32256:	2001      	movs	r0, #1
   32258:	f01b ff82 	bl	4e160 <bt_gatt_foreach_attr>
	if (id) {
   3225c:	b1ac      	cbz	r4, 3228a <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
   3225e:	ae03      	add	r6, sp, #12
   32260:	4622      	mov	r2, r4
   32262:	2104      	movs	r1, #4
   32264:	4630      	mov	r0, r6
   32266:	f017 f952 	bl	4950e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   3226a:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   3226c:	4a0a      	ldr	r2, [pc, #40]	; (32298 <bt_gatt_store_ccc+0x5c>)
   3226e:	462b      	mov	r3, r5
   32270:	2124      	movs	r1, #36	; 0x24
   32272:	a804      	add	r0, sp, #16
   32274:	f7fa ff3e 	bl	2d0f4 <bt_settings_encode_key>
	if (save.count) {
   32278:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   3227a:	b142      	cbz	r2, 3228e <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
   3227c:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   3227e:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   32280:	a804      	add	r0, sp, #16
   32282:	f7f9 fd53 	bl	2bd2c <settings_save_one>
}
   32286:	b040      	add	sp, #256	; 0x100
   32288:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   3228a:	9400      	str	r4, [sp, #0]
   3228c:	e7ee      	b.n	3226c <bt_gatt_store_ccc+0x30>
		str = NULL;
   3228e:	4611      	mov	r1, r2
   32290:	e7f6      	b.n	32280 <bt_gatt_store_ccc+0x44>
   32292:	bf00      	nop
   32294:	00031121 	.word	0x00031121
   32298:	00053c73 	.word	0x00053c73

0003229c <bt_gatt_identity_resolved>:
{
   3229c:	b513      	push	{r0, r1, r4, lr}
   3229e:	4604      	mov	r4, r0
	struct addr_match user_data = {
   322a0:	e9cd 1200 	strd	r1, r2, [sp]
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   322a4:	466b      	mov	r3, sp
   322a6:	4a08      	ldr	r2, [pc, #32]	; (322c8 <bt_gatt_identity_resolved+0x2c>)
   322a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   322ac:	2001      	movs	r0, #1
   322ae:	f01b ff57 	bl	4e160 <bt_gatt_foreach_attr>
	bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   322b2:	f104 0188 	add.w	r1, r4, #136	; 0x88
   322b6:	7a20      	ldrb	r0, [r4, #8]
   322b8:	f7ff ffc0 	bl	3223c <bt_gatt_store_ccc>
	bt_gatt_store_cf(conn);
   322bc:	4620      	mov	r0, r4
   322be:	f7fe ff4b 	bl	31158 <bt_gatt_store_cf.isra.0>
}
   322c2:	b002      	add	sp, #8
   322c4:	bd10      	pop	{r4, pc}
   322c6:	bf00      	nop
   322c8:	000310ed 	.word	0x000310ed

000322cc <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   322cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   322ce:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   322d0:	ae03      	add	r6, sp, #12
{
   322d2:	4604      	mov	r4, r0
   322d4:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   322d6:	9103      	str	r1, [sp, #12]
   322d8:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   322dc:	4a34      	ldr	r2, [pc, #208]	; (323b0 <bt_gatt_clear+0xe4>)
   322de:	4633      	mov	r3, r6
   322e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   322e4:	2001      	movs	r0, #1
   322e6:	f01b ff3b 	bl	4e160 <bt_gatt_foreach_attr>
		if (id) {
   322ea:	2c00      	cmp	r4, #0
   322ec:	d03e      	beq.n	3236c <bt_gatt_clear+0xa0>
			u8_to_dec(id_str, sizeof(id_str), id);
   322ee:	af02      	add	r7, sp, #8
   322f0:	4622      	mov	r2, r4
   322f2:	2104      	movs	r1, #4
   322f4:	4638      	mov	r0, r7
   322f6:	f017 f90a 	bl	4950e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   322fa:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   322fc:	4a2d      	ldr	r2, [pc, #180]	; (323b4 <bt_gatt_clear+0xe8>)
   322fe:	462b      	mov	r3, r5
   32300:	2124      	movs	r1, #36	; 0x24
   32302:	a805      	add	r0, sp, #20
   32304:	f7fa fef6 	bl	2d0f4 <bt_settings_encode_key>
		return settings_delete(key);
   32308:	a805      	add	r0, sp, #20
   3230a:	f017 ffcb 	bl	4a2a4 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   3230e:	2800      	cmp	r0, #0
   32310:	db2a      	blt.n	32368 <bt_gatt_clear+0x9c>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   32312:	4629      	mov	r1, r5
   32314:	4620      	mov	r0, r4
   32316:	f7fe ff4f 	bl	311b8 <bt_gatt_clear_sc>
		if (err < 0) {
   3231a:	2800      	cmp	r0, #0
   3231c:	db24      	blt.n	32368 <bt_gatt_clear+0x9c>
	cfg = find_cf_cfg_by_addr(id, addr);
   3231e:	4629      	mov	r1, r5
   32320:	4620      	mov	r0, r4
   32322:	f7fe fdb5 	bl	30e90 <find_cf_cfg_by_addr>
	if (cfg) {
   32326:	b108      	cbz	r0, 3232c <bt_gatt_clear+0x60>
		clear_cf_cfg(cfg);
   32328:	f01b fd2c 	bl	4dd84 <clear_cf_cfg>
		if (id) {
   3232c:	b304      	cbz	r4, 32370 <bt_gatt_clear+0xa4>
			u8_to_dec(id_str, sizeof(id_str), id);
   3232e:	4622      	mov	r2, r4
   32330:	2104      	movs	r1, #4
   32332:	4630      	mov	r0, r6
   32334:	f017 f8eb 	bl	4950e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   32338:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   3233a:	4a1f      	ldr	r2, [pc, #124]	; (323b8 <bt_gatt_clear+0xec>)
   3233c:	462b      	mov	r3, r5
   3233e:	2124      	movs	r1, #36	; 0x24
   32340:	a805      	add	r0, sp, #20
   32342:	f7fa fed7 	bl	2d0f4 <bt_settings_encode_key>
		return settings_delete(key);
   32346:	a805      	add	r0, sp, #20
   32348:	f017 ffac 	bl	4a2a4 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   3234c:	2800      	cmp	r0, #0
   3234e:	db0b      	blt.n	32368 <bt_gatt_clear+0x9c>
   32350:	4f1a      	ldr	r7, [pc, #104]	; (323bc <bt_gatt_clear+0xf0>)
   32352:	2600      	movs	r6, #0
		if (id == sub->id &&
   32354:	f817 3c01 	ldrb.w	r3, [r7, #-1]
   32358:	42a3      	cmp	r3, r4
   3235a:	d00b      	beq.n	32374 <bt_gatt_clear+0xa8>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   3235c:	3610      	adds	r6, #16
   3235e:	2ec0      	cmp	r6, #192	; 0xc0
   32360:	f107 0710 	add.w	r7, r7, #16
   32364:	d1f6      	bne.n	32354 <bt_gatt_clear+0x88>

	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
   32366:	2000      	movs	r0, #0
}
   32368:	b00f      	add	sp, #60	; 0x3c
   3236a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   3236c:	9400      	str	r4, [sp, #0]
   3236e:	e7c5      	b.n	322fc <bt_gatt_clear+0x30>
			bt_settings_encode_key(key, sizeof(key), "cf",
   32370:	9400      	str	r4, [sp, #0]
   32372:	e7e2      	b.n	3233a <bt_gatt_clear+0x6e>
		    !bt_addr_le_cmp(addr, &sub->peer)) {
   32374:	4639      	mov	r1, r7
   32376:	4628      	mov	r0, r5
   32378:	f01b faff 	bl	4d97a <bt_addr_le_cmp>
		if (id == sub->id &&
   3237c:	2800      	cmp	r0, #0
   3237e:	d1ed      	bne.n	3235c <bt_gatt_clear+0x90>
		struct gatt_sub *sub = &subscriptions[i];
   32380:	4d0f      	ldr	r5, [pc, #60]	; (323c0 <bt_gatt_clear+0xf4>)
   32382:	4435      	add	r5, r6
	return list->head;
   32384:	68ab      	ldr	r3, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   32386:	2b00      	cmp	r3, #0
   32388:	d0ed      	beq.n	32366 <bt_gatt_clear+0x9a>
	return node->next;
   3238a:	f853 491c 	ldr.w	r4, [r3], #-28
   3238e:	b104      	cbz	r4, 32392 <bt_gatt_clear+0xc6>
   32390:	3c1c      	subs	r4, #28
		params->value = 0U;
   32392:	2600      	movs	r6, #0
		gatt_sub_remove(NULL, sub, prev, params);
   32394:	2200      	movs	r2, #0
		params->value = 0U;
   32396:	829e      	strh	r6, [r3, #20]
		gatt_sub_remove(NULL, sub, prev, params);
   32398:	4629      	mov	r1, r5
   3239a:	4610      	mov	r0, r2
   3239c:	f01b fb8c 	bl	4dab8 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   323a0:	2c00      	cmp	r4, #0
   323a2:	d0e0      	beq.n	32366 <bt_gatt_clear+0x9a>
   323a4:	69e2      	ldr	r2, [r4, #28]
   323a6:	b102      	cbz	r2, 323aa <bt_gatt_clear+0xde>
   323a8:	3a1c      	subs	r2, #28
		if (err < 0) {
   323aa:	4623      	mov	r3, r4
   323ac:	4614      	mov	r4, r2
   323ae:	e7f1      	b.n	32394 <bt_gatt_clear+0xc8>
   323b0:	00031039 	.word	0x00031039
   323b4:	00053c73 	.word	0x00053c73
   323b8:	00053c7a 	.word	0x00053c7a
   323bc:	20004149 	.word	0x20004149
   323c0:	20004148 	.word	0x20004148

000323c4 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   323c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   323c8:	4603      	mov	r3, r0
   323ca:	4a48      	ldr	r2, [pc, #288]	; (324ec <bt_gatt_disconnected+0x128>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   323cc:	4e48      	ldr	r6, [pc, #288]	; (324f0 <bt_gatt_disconnected+0x12c>)
{
   323ce:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   323d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   323d4:	2001      	movs	r0, #1
   323d6:	f01b fec3 	bl	4e160 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   323da:	4620      	mov	r0, r4
   323dc:	f7fd f992 	bl	2f704 <bt_conn_index>
   323e0:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   323e2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   323e6:	b120      	cbz	r0, 323f2 <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   323e8:	f01a fa88 	bl	4c8fc <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   323ec:	2300      	movs	r3, #0
   323ee:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   323f2:	4a3f      	ldr	r2, [pc, #252]	; (324f0 <bt_gatt_disconnected+0x12c>)
   323f4:	2300      	movs	r3, #0
		if (gatt_ccc_store.conn_list[i]) {
   323f6:	f852 1b04 	ldr.w	r1, [r2], #4
   323fa:	b929      	cbnz	r1, 32408 <bt_gatt_disconnected+0x44>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   323fc:	3301      	adds	r3, #1
   323fe:	2b06      	cmp	r3, #6
   32400:	d1f9      	bne.n	323f6 <bt_gatt_disconnected+0x32>

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   32402:	483c      	ldr	r0, [pc, #240]	; (324f4 <bt_gatt_disconnected+0x130>)
   32404:	f01e fa20 	bl	50848 <k_work_cancel_delayable>
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32408:	f104 0688 	add.w	r6, r4, #136	; 0x88
   3240c:	7a20      	ldrb	r0, [r4, #8]
   3240e:	4631      	mov	r1, r6
   32410:	f019 fefc 	bl	4c20c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   32414:	b130      	cbz	r0, 32424 <bt_gatt_disconnected+0x60>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   32416:	7a20      	ldrb	r0, [r4, #8]
   32418:	4631      	mov	r1, r6
   3241a:	f7ff ff0f 	bl	3223c <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
   3241e:	4620      	mov	r0, r4
   32420:	f7fe fe9a 	bl	31158 <bt_gatt_store_cf.isra.0>
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32424:	7a20      	ldrb	r0, [r4, #8]
   32426:	4631      	mov	r1, r6
   32428:	f019 fef0 	bl	4c20c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   3242c:	b150      	cbz	r0, 32444 <bt_gatt_disconnected+0x80>
		struct addr_with_id addr_with_id = {
   3242e:	7a23      	ldrb	r3, [r4, #8]
   32430:	f88d 3004 	strb.w	r3, [sp, #4]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   32434:	4a30      	ldr	r2, [pc, #192]	; (324f8 <bt_gatt_disconnected+0x134>)
		struct addr_with_id addr_with_id = {
   32436:	9600      	str	r6, [sp, #0]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   32438:	466b      	mov	r3, sp
   3243a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3243e:	2001      	movs	r0, #1
   32440:	f01b fe8e 	bl	4e160 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   32444:	4620      	mov	r0, r4
   32446:	f7fe fd01 	bl	30e4c <gatt_sub_find>
	if (!sub) {
   3244a:	4680      	mov	r8, r0
   3244c:	b370      	cbz	r0, 324ac <bt_gatt_disconnected+0xe8>
	return list->head;
   3244e:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   32450:	b365      	cbz	r5, 324ac <bt_gatt_disconnected+0xe8>
	return node->next;
   32452:	f855 791c 	ldr.w	r7, [r5], #-28
   32456:	b107      	cbz	r7, 3245a <bt_gatt_disconnected+0x96>
   32458:	3f1c      	subs	r7, #28
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   3245a:	f04f 0900 	mov.w	r9, #0
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   3245e:	f108 0a01 	add.w	sl, r8, #1
			params->value = 0U;
   32462:	46cb      	mov	fp, r9
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   32464:	7a20      	ldrb	r0, [r4, #8]
   32466:	4631      	mov	r1, r6
   32468:	f019 fed0 	bl	4c20c <bt_addr_le_is_bonded>
   3246c:	b970      	cbnz	r0, 3248c <bt_gatt_disconnected+0xc8>
			params->value = 0U;
   3246e:	f8a5 b014 	strh.w	fp, [r5, #20]
			gatt_sub_remove(conn, sub, prev, params);
   32472:	462b      	mov	r3, r5
   32474:	464a      	mov	r2, r9
   32476:	4641      	mov	r1, r8
   32478:	4620      	mov	r0, r4
   3247a:	f01b fb1d 	bl	4dab8 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   3247e:	b1af      	cbz	r7, 324ac <bt_gatt_disconnected+0xe8>
   32480:	69fb      	ldr	r3, [r7, #28]
   32482:	b103      	cbz	r3, 32486 <bt_gatt_disconnected+0xc2>
   32484:	3b1c      	subs	r3, #28
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   32486:	463d      	mov	r5, r7
   32488:	461f      	mov	r7, r3
   3248a:	e7eb      	b.n	32464 <bt_gatt_disconnected+0xa0>
   3248c:	f105 0018 	add.w	r0, r5, #24
   32490:	f01b fa09 	bl	4d8a6 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   32494:	07c3      	lsls	r3, r0, #31
   32496:	d4ea      	bmi.n	3246e <bt_gatt_disconnected+0xaa>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   32498:	f898 3001 	ldrb.w	r3, [r8, #1]
   3249c:	b11b      	cbz	r3, 324a6 <bt_gatt_disconnected+0xe2>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   3249e:	4631      	mov	r1, r6
   324a0:	4650      	mov	r0, sl
   324a2:	f01b faa6 	bl	4d9f2 <bt_addr_le_copy>
			prev = &params->node;
   324a6:	f105 091c 	add.w	r9, r5, #28
   324aa:	e7e8      	b.n	3247e <bt_gatt_disconnected+0xba>
	cfg = find_cf_cfg(conn);
   324ac:	4620      	mov	r0, r4
   324ae:	f7fe fc8f 	bl	30dd0 <find_cf_cfg>
	if (!cfg) {
   324b2:	4605      	mov	r5, r0
   324b4:	b1b8      	cbz	r0, 324e6 <bt_gatt_disconnected+0x122>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   324b6:	7a20      	ldrb	r0, [r4, #8]
   324b8:	4631      	mov	r1, r6
   324ba:	f019 fea7 	bl	4c20c <bt_addr_le_is_bonded>
   324be:	b928      	cbnz	r0, 324cc <bt_gatt_disconnected+0x108>
		clear_cf_cfg(cfg);
   324c0:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   324c2:	b003      	add	sp, #12
   324c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   324c8:	f01b bc5c 	b.w	4dd84 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   324cc:	4631      	mov	r1, r6
   324ce:	1c68      	adds	r0, r5, #1
   324d0:	f01b fa8f 	bl	4d9f2 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   324d4:	f06f 0102 	mvn.w	r1, #2
   324d8:	f105 000c 	add.w	r0, r5, #12
}
   324dc:	b003      	add	sp, #12
   324de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   324e2:	f01b bb3c 	b.w	4db5e <atomic_and>
   324e6:	b003      	add	sp, #12
   324e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   324ec:	00031205 	.word	0x00031205
   324f0:	20001f80 	.word	0x20001f80
   324f4:	20001f98 	.word	0x20001f98
   324f8:	00031039 	.word	0x00031039

000324fc <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   324fc:	4b10      	ldr	r3, [pc, #64]	; (32540 <get_io_capa+0x44>)
   324fe:	681b      	ldr	r3, [r3, #0]
   32500:	b1bb      	cbz	r3, 32532 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   32502:	685a      	ldr	r2, [r3, #4]
   32504:	b142      	cbz	r2, 32518 <get_io_capa+0x1c>
   32506:	6899      	ldr	r1, [r3, #8]
   32508:	b131      	cbz	r1, 32518 <get_io_capa+0x1c>
   3250a:	68d9      	ldr	r1, [r3, #12]
   3250c:	b911      	cbnz	r1, 32514 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   3250e:	490d      	ldr	r1, [pc, #52]	; (32544 <get_io_capa+0x48>)
   32510:	7809      	ldrb	r1, [r1, #0]
   32512:	b939      	cbnz	r1, 32524 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   32514:	2004      	movs	r0, #4
   32516:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   32518:	490a      	ldr	r1, [pc, #40]	; (32544 <get_io_capa+0x48>)
   3251a:	7809      	ldrb	r1, [r1, #0]
   3251c:	b111      	cbz	r1, 32524 <get_io_capa+0x28>
   3251e:	b10a      	cbz	r2, 32524 <get_io_capa+0x28>
   32520:	68d9      	ldr	r1, [r3, #12]
   32522:	b941      	cbnz	r1, 32536 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   32524:	689b      	ldr	r3, [r3, #8]
   32526:	b943      	cbnz	r3, 3253a <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   32528:	2a00      	cmp	r2, #0
   3252a:	bf0c      	ite	eq
   3252c:	2003      	moveq	r0, #3
   3252e:	2000      	movne	r0, #0
   32530:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   32532:	2003      	movs	r0, #3
   32534:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   32536:	2001      	movs	r0, #1
   32538:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   3253a:	2002      	movs	r0, #2
	}
}
   3253c:	4770      	bx	lr
   3253e:	bf00      	nop
   32540:	20003f94 	.word	0x20003f94
   32544:	20006dd0 	.word	0x20006dd0

00032548 <get_pair_method>:

	return true;
}

static uint8_t get_pair_method(struct bt_smp *smp, uint8_t remote_io)
{
   32548:	b510      	push	{r4, lr}
   3254a:	460c      	mov	r4, r1
	struct bt_smp_pairing *req, *rsp;

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   3254c:	7b03      	ldrb	r3, [r0, #12]
   3254e:	7cc1      	ldrb	r1, [r0, #19]
   32550:	ea03 0201 	and.w	r2, r3, r1
   32554:	0712      	lsls	r2, r2, #28
   32556:	d504      	bpl.n	32562 <get_pair_method+0x1a>
		/* if one side has OOB data use OOB */
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   32558:	7ac2      	ldrb	r2, [r0, #11]
   3255a:	7c80      	ldrb	r0, [r0, #18]
   3255c:	4302      	orrs	r2, r0
   3255e:	07d2      	lsls	r2, r2, #31
   32560:	d40e      	bmi.n	32580 <get_pair_method+0x38>
			return LE_SC_OOB;
		}
	}

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   32562:	2c04      	cmp	r4, #4
   32564:	d80e      	bhi.n	32584 <get_pair_method+0x3c>
		return JUST_WORKS;
	}

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   32566:	ea43 0001 	orr.w	r0, r3, r1
   3256a:	f010 0004 	ands.w	r0, r0, #4
   3256e:	d006      	beq.n	3257e <get_pair_method+0x36>
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
   32570:	f7ff ffc4 	bl	324fc <get_io_capa>
   32574:	4b04      	ldr	r3, [pc, #16]	; (32588 <get_pair_method+0x40>)
   32576:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   3257a:	4423      	add	r3, r4
   3257c:	5c18      	ldrb	r0, [r3, r0]
#else
	return JUST_WORKS;
#endif
}
   3257e:	bd10      	pop	{r4, pc}
			return LE_SC_OOB;
   32580:	2005      	movs	r0, #5
   32582:	e7fc      	b.n	3257e <get_pair_method+0x36>
		return JUST_WORKS;
   32584:	2000      	movs	r0, #0
   32586:	e7fa      	b.n	3257e <get_pair_method+0x36>
   32588:	00053ca3 	.word	0x00053ca3

0003258c <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   3258c:	b530      	push	{r4, r5, lr}
   3258e:	4c0c      	ldr	r4, [pc, #48]	; (325c0 <bt_smp_accept+0x34>)
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   32590:	2300      	movs	r3, #0
   32592:	4622      	mov	r2, r4
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   32594:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   32598:	b138      	cbz	r0, 325aa <bt_smp_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   3259a:	3301      	adds	r3, #1
   3259c:	2b06      	cmp	r3, #6
   3259e:	f504 7402 	add.w	r4, r4, #520	; 0x208
   325a2:	d1f7      	bne.n	32594 <bt_smp_accept+0x8>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   325a4:	f06f 000b 	mvn.w	r0, #11
}
   325a8:	bd30      	pop	{r4, r5, pc}
		smp->chan.chan.ops = &ops;
   325aa:	f44f 7402 	mov.w	r4, #520	; 0x208
   325ae:	4363      	muls	r3, r4
   325b0:	18d4      	adds	r4, r2, r3
		*chan = &smp->chan.chan;
   325b2:	33f0      	adds	r3, #240	; 0xf0
		smp->chan.chan.ops = &ops;
   325b4:	4d03      	ldr	r5, [pc, #12]	; (325c4 <bt_smp_accept+0x38>)
   325b6:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		*chan = &smp->chan.chan;
   325ba:	441a      	add	r2, r3
   325bc:	600a      	str	r2, [r1, #0]
		return 0;
   325be:	e7f3      	b.n	325a8 <bt_smp_accept+0x1c>
   325c0:	20002020 	.word	0x20002020
   325c4:	000523fc 	.word	0x000523fc

000325c8 <smp_find>:
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   325c8:	4a08      	ldr	r2, [pc, #32]	; (325ec <smp_find+0x24>)
{
   325ca:	b510      	push	{r4, lr}
   325cc:	4601      	mov	r1, r0
   325ce:	2300      	movs	r3, #0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   325d0:	1d14      	adds	r4, r2, #4
   325d2:	18e0      	adds	r0, r4, r3
   325d4:	f01c f9ce 	bl	4e974 <atomic_test_bit>
   325d8:	b108      	cbz	r0, 325de <smp_find+0x16>
			return &bt_smp_pool[i];
   325da:	18d0      	adds	r0, r2, r3
}
   325dc:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   325de:	f503 7302 	add.w	r3, r3, #520	; 0x208
   325e2:	f5b3 6f43 	cmp.w	r3, #3120	; 0xc30
   325e6:	d1f4      	bne.n	325d2 <smp_find+0xa>
   325e8:	e7f8      	b.n	325dc <smp_find+0x14>
   325ea:	bf00      	nop
   325ec:	20002020 	.word	0x20002020

000325f0 <smp_g2>:
{
   325f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   325f2:	b099      	sub	sp, #100	; 0x64
   325f4:	4614      	mov	r4, r2
   325f6:	460f      	mov	r7, r1
	sys_memcpy_swap(m, u, 32);
   325f8:	2220      	movs	r2, #32
   325fa:	4601      	mov	r1, r0
   325fc:	a804      	add	r0, sp, #16
{
   325fe:	461e      	mov	r6, r3
   32600:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   32602:	f01c f989 	bl	4e918 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   32606:	2220      	movs	r2, #32
   32608:	4639      	mov	r1, r7
   3260a:	a80c      	add	r0, sp, #48	; 0x30
   3260c:	f01c f984 	bl	4e918 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   32610:	2210      	movs	r2, #16
   32612:	4631      	mov	r1, r6
   32614:	a814      	add	r0, sp, #80	; 0x50
   32616:	f01c f97f 	bl	4e918 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   3261a:	4621      	mov	r1, r4
   3261c:	2210      	movs	r2, #16
   3261e:	4668      	mov	r0, sp
   32620:	f01c f97a 	bl	4e918 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   32624:	466b      	mov	r3, sp
   32626:	2250      	movs	r2, #80	; 0x50
   32628:	a904      	add	r1, sp, #16
   3262a:	4618      	mov	r0, r3
   3262c:	f01c fa02 	bl	4ea34 <bt_smp_aes_cmac>
	if (err) {
   32630:	4604      	mov	r4, r0
   32632:	b960      	cbnz	r0, 3264e <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
   32634:	2204      	movs	r2, #4
   32636:	a903      	add	r1, sp, #12
   32638:	4628      	mov	r0, r5
   3263a:	f019 f926 	bl	4b88a <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   3263e:	682b      	ldr	r3, [r5, #0]
   32640:	4a04      	ldr	r2, [pc, #16]	; (32654 <smp_g2+0x64>)
   32642:	ba1b      	rev	r3, r3
   32644:	fbb3 f1f2 	udiv	r1, r3, r2
   32648:	fb02 3311 	mls	r3, r2, r1, r3
   3264c:	602b      	str	r3, [r5, #0]
}
   3264e:	4620      	mov	r0, r4
   32650:	b019      	add	sp, #100	; 0x64
   32652:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32654:	000f4240 	.word	0x000f4240

00032658 <get_auth.constprop.0>:
	if (sc_supported) {
   32658:	4b0c      	ldr	r3, [pc, #48]	; (3268c <get_auth.constprop.0+0x34>)
   3265a:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   3265c:	b510      	push	{r4, lr}
	if (sc_supported) {
   3265e:	b17b      	cbz	r3, 32680 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   32660:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   32664:	f7ff ff4a 	bl	324fc <get_io_capa>
	if (bondable) {
   32668:	4b09      	ldr	r3, [pc, #36]	; (32690 <get_auth.constprop.0+0x38>)
   3266a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   3266c:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   3266e:	bf0c      	ite	eq
   32670:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   32674:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   32678:	b12b      	cbz	r3, 32686 <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   3267a:	f044 0001 	orr.w	r0, r4, #1
}
   3267e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   32680:	f000 0407 	and.w	r4, r0, #7
   32684:	e7ee      	b.n	32664 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   32686:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   3268a:	e7f8      	b.n	3267e <get_auth.constprop.0+0x26>
   3268c:	20006dd0 	.word	0x20006dd0
   32690:	20000d7f 	.word	0x20000d7f

00032694 <smp_f5>:
{
   32694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32698:	b09a      	sub	sp, #104	; 0x68
   3269a:	461d      	mov	r5, r3
   3269c:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	uint8_t m[53] = { 0x00, /* counter */
   326a0:	4b2e      	ldr	r3, [pc, #184]	; (3275c <smp_f5+0xc8>)
{
   326a2:	4616      	mov	r6, r2
	uint8_t m[53] = { 0x00, /* counter */
   326a4:	aa0c      	add	r2, sp, #48	; 0x30
{
   326a6:	4684      	mov	ip, r0
   326a8:	468a      	mov	sl, r1
	uint8_t m[53] = { 0x00, /* counter */
   326aa:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   326ae:	4690      	mov	r8, r2
   326b0:	6818      	ldr	r0, [r3, #0]
   326b2:	6859      	ldr	r1, [r3, #4]
   326b4:	4614      	mov	r4, r2
   326b6:	c403      	stmia	r4!, {r0, r1}
   326b8:	3308      	adds	r3, #8
   326ba:	4573      	cmp	r3, lr
   326bc:	4622      	mov	r2, r4
   326be:	d1f7      	bne.n	326b0 <smp_f5+0x1c>
   326c0:	6818      	ldr	r0, [r3, #0]
   326c2:	791b      	ldrb	r3, [r3, #4]
   326c4:	6020      	str	r0, [r4, #0]
   326c6:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
   326c8:	4661      	mov	r1, ip
   326ca:	2220      	movs	r2, #32
   326cc:	a804      	add	r0, sp, #16
   326ce:	f01c f923 	bl	4e918 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   326d2:	4823      	ldr	r0, [pc, #140]	; (32760 <smp_f5+0xcc>)
   326d4:	466b      	mov	r3, sp
   326d6:	2220      	movs	r2, #32
   326d8:	a904      	add	r1, sp, #16
   326da:	f01c f9ab 	bl	4ea34 <bt_smp_aes_cmac>
	if (err) {
   326de:	4604      	mov	r4, r0
   326e0:	bbc0      	cbnz	r0, 32754 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
   326e2:	2210      	movs	r2, #16
   326e4:	4651      	mov	r1, sl
   326e6:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   326ea:	f01c f915 	bl	4e918 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   326ee:	2210      	movs	r2, #16
   326f0:	4631      	mov	r1, r6
   326f2:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   326f6:	f01c f90f 	bl	4e918 <sys_memcpy_swap>
	m[37] = a1->type;
   326fa:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   326fc:	2206      	movs	r2, #6
	m[37] = a1->type;
   326fe:	f811 3b01 	ldrb.w	r3, [r1], #1
   32702:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   32706:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   3270a:	f01c f905 	bl	4e918 <sys_memcpy_swap>
	m[44] = a2->type;
   3270e:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   32710:	2206      	movs	r2, #6
	m[44] = a2->type;
   32712:	f811 3b01 	ldrb.w	r3, [r1], #1
   32716:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   3271a:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   3271e:	f01c f8fb 	bl	4e918 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   32722:	464b      	mov	r3, r9
   32724:	2235      	movs	r2, #53	; 0x35
   32726:	4641      	mov	r1, r8
   32728:	4668      	mov	r0, sp
   3272a:	f01c f983 	bl	4ea34 <bt_smp_aes_cmac>
	if (err) {
   3272e:	4604      	mov	r4, r0
   32730:	b980      	cbnz	r0, 32754 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
   32732:	4648      	mov	r0, r9
   32734:	f01c f9e6 	bl	4eb04 <sys_mem_swap.constprop.0>
	m[0] = 0x01;
   32738:	2301      	movs	r3, #1
   3273a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   3273e:	2235      	movs	r2, #53	; 0x35
   32740:	463b      	mov	r3, r7
   32742:	4641      	mov	r1, r8
   32744:	4668      	mov	r0, sp
   32746:	f01c f975 	bl	4ea34 <bt_smp_aes_cmac>
	if (err) {
   3274a:	4604      	mov	r4, r0
   3274c:	b910      	cbnz	r0, 32754 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
   3274e:	4638      	mov	r0, r7
   32750:	f01c f9d8 	bl	4eb04 <sys_mem_swap.constprop.0>
}
   32754:	4620      	mov	r0, r4
   32756:	b01a      	add	sp, #104	; 0x68
   32758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3275c:	0005154e 	.word	0x0005154e
   32760:	00053cbc 	.word	0x00053cbc

00032764 <sc_smp_check_confirm>:
{
   32764:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
   32766:	7a03      	ldrb	r3, [r0, #8]
{
   32768:	b087      	sub	sp, #28
   3276a:	4604      	mov	r4, r0
	switch (smp->method) {
   3276c:	2b05      	cmp	r3, #5
   3276e:	d828      	bhi.n	327c2 <sc_smp_check_confirm+0x5e>
   32770:	e8df f003 	tbb	[pc, r3]
   32774:	23030323 	.word	0x23030323
   32778:	2527      	.short	0x2527
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   3277a:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   3277e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
   32782:	40d3      	lsrs	r3, r2
   32784:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   32788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   3278c:	490e      	ldr	r1, [pc, #56]	; (327c8 <sc_smp_check_confirm+0x64>)
   3278e:	ad02      	add	r5, sp, #8
   32790:	9500      	str	r5, [sp, #0]
   32792:	6809      	ldr	r1, [r1, #0]
   32794:	f104 0237 	add.w	r2, r4, #55	; 0x37
   32798:	f104 0057 	add.w	r0, r4, #87	; 0x57
   3279c:	f01c fa0c 	bl	4ebb8 <smp_f4>
   327a0:	b978      	cbnz	r0, 327c2 <sc_smp_check_confirm+0x5e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   327a2:	2210      	movs	r2, #16
   327a4:	4629      	mov	r1, r5
   327a6:	f104 0017 	add.w	r0, r4, #23
   327aa:	f019 f85e 	bl	4b86a <memcmp>
   327ae:	3800      	subs	r0, #0
   327b0:	bf18      	it	ne
   327b2:	2001      	movne	r0, #1
   327b4:	0080      	lsls	r0, r0, #2
}
   327b6:	b007      	add	sp, #28
   327b8:	bd30      	pop	{r4, r5, pc}
	switch (smp->method) {
   327ba:	2300      	movs	r3, #0
   327bc:	e7e6      	b.n	3278c <sc_smp_check_confirm+0x28>
		return 0;
   327be:	2000      	movs	r0, #0
   327c0:	e7f9      	b.n	327b6 <sc_smp_check_confirm+0x52>
		return BT_SMP_ERR_UNSPECIFIED;
   327c2:	2008      	movs	r0, #8
   327c4:	e7f7      	b.n	327b6 <sc_smp_check_confirm+0x52>
   327c6:	bf00      	nop
   327c8:	20004208 	.word	0x20004208

000327cc <sec_level_reachable.isra.0>:
	switch (conn->required_sec_level) {
   327cc:	2803      	cmp	r0, #3
static bool sec_level_reachable(struct bt_conn *conn)
   327ce:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
   327d0:	d00a      	beq.n	327e8 <sec_level_reachable.isra.0+0x1c>
   327d2:	d805      	bhi.n	327e0 <sec_level_reachable.isra.0+0x14>
   327d4:	3801      	subs	r0, #1
   327d6:	2801      	cmp	r0, #1
   327d8:	bf8c      	ite	hi
   327da:	2000      	movhi	r0, #0
   327dc:	2001      	movls	r0, #1
}
   327de:	bd08      	pop	{r3, pc}
	switch (conn->required_sec_level) {
   327e0:	2804      	cmp	r0, #4
   327e2:	d010      	beq.n	32806 <sec_level_reachable.isra.0+0x3a>
   327e4:	2000      	movs	r0, #0
   327e6:	e7fa      	b.n	327de <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   327e8:	f7ff fe88 	bl	324fc <get_io_capa>
   327ec:	2803      	cmp	r0, #3
   327ee:	d108      	bne.n	32802 <sec_level_reachable.isra.0+0x36>
		       (bt_auth && bt_auth->oob_data_request);
   327f0:	4b0c      	ldr	r3, [pc, #48]	; (32824 <sec_level_reachable.isra.0+0x58>)
   327f2:	6818      	ldr	r0, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   327f4:	2800      	cmp	r0, #0
   327f6:	d0f2      	beq.n	327de <sec_level_reachable.isra.0+0x12>
		       (bt_auth && bt_auth->oob_data_request);
   327f8:	6900      	ldr	r0, [r0, #16]
   327fa:	3800      	subs	r0, #0
   327fc:	bf18      	it	ne
   327fe:	2001      	movne	r0, #1
   32800:	e7ed      	b.n	327de <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32802:	2001      	movs	r0, #1
   32804:	e7eb      	b.n	327de <sec_level_reachable.isra.0+0x12>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32806:	f7ff fe79 	bl	324fc <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   3280a:	2803      	cmp	r0, #3
   3280c:	d104      	bne.n	32818 <sec_level_reachable.isra.0+0x4c>
   3280e:	4b05      	ldr	r3, [pc, #20]	; (32824 <sec_level_reachable.isra.0+0x58>)
   32810:	6818      	ldr	r0, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32812:	b118      	cbz	r0, 3281c <sec_level_reachable.isra.0+0x50>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   32814:	6900      	ldr	r0, [r0, #16]
   32816:	b108      	cbz	r0, 3281c <sec_level_reachable.isra.0+0x50>
   32818:	4b03      	ldr	r3, [pc, #12]	; (32828 <sec_level_reachable.isra.0+0x5c>)
   3281a:	7818      	ldrb	r0, [r3, #0]
   3281c:	f000 0001 	and.w	r0, r0, #1
   32820:	e7dd      	b.n	327de <sec_level_reachable.isra.0+0x12>
   32822:	bf00      	nop
   32824:	20003f94 	.word	0x20003f94
   32828:	20006dd0 	.word	0x20006dd0

0003282c <display_passkey>:
{
   3282c:	b570      	push	{r4, r5, r6, lr}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   3282e:	2104      	movs	r1, #4
{
   32830:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   32832:	30d8      	adds	r0, #216	; 0xd8
   32834:	f004 f946 	bl	36ac4 <bt_rand>
   32838:	4605      	mov	r5, r0
   3283a:	b9e0      	cbnz	r0, 32876 <display_passkey+0x4a>
	if (bt_auth && bt_auth->passkey_display) {
   3283c:	4e0f      	ldr	r6, [pc, #60]	; (3287c <display_passkey+0x50>)
		smp->passkey %= 1000000;
   3283e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   32842:	4a0f      	ldr	r2, [pc, #60]	; (32880 <display_passkey+0x54>)
	smp->passkey_round = 0U;
   32844:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   32848:	6830      	ldr	r0, [r6, #0]
		smp->passkey %= 1000000;
   3284a:	fbb3 f1f2 	udiv	r1, r3, r2
   3284e:	fb02 3311 	mls	r3, r2, r1, r3
   32852:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   32856:	b168      	cbz	r0, 32874 <display_passkey+0x48>
   32858:	6840      	ldr	r0, [r0, #4]
   3285a:	b158      	cbz	r0, 32874 <display_passkey+0x48>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   3285c:	210b      	movs	r1, #11
   3285e:	1d20      	adds	r0, r4, #4
   32860:	f01c f9cf 	bl	4ec02 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   32864:	6833      	ldr	r3, [r6, #0]
   32866:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   3286a:	685b      	ldr	r3, [r3, #4]
   3286c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   32870:	4798      	blx	r3
	return 0;
   32872:	4628      	mov	r0, r5
}
   32874:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   32876:	2008      	movs	r0, #8
   32878:	e7fc      	b.n	32874 <display_passkey+0x48>
   3287a:	bf00      	nop
   3287c:	20003f94 	.word	0x20003f94
   32880:	000f4240 	.word	0x000f4240

00032884 <smp_init>:
{
   32884:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   32886:	22f0      	movs	r2, #240	; 0xf0
{
   32888:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   3288a:	2100      	movs	r1, #0
   3288c:	f019 f808 	bl	4b8a0 <memset>
	if (bt_rand(smp->prnd, 16)) {
   32890:	2110      	movs	r1, #16
   32892:	f105 0027 	add.w	r0, r5, #39	; 0x27
   32896:	f004 f915 	bl	36ac4 <bt_rand>
   3289a:	4604      	mov	r4, r0
   3289c:	b948      	cbnz	r0, 328b2 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   3289e:	2105      	movs	r1, #5
   328a0:	4628      	mov	r0, r5
   328a2:	f01c f9ae 	bl	4ec02 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   328a6:	f7fc fc57 	bl	2f158 <bt_pub_key_get>
   328aa:	4b03      	ldr	r3, [pc, #12]	; (328b8 <smp_init+0x34>)
   328ac:	6018      	str	r0, [r3, #0]
}
   328ae:	4620      	mov	r0, r4
   328b0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   328b2:	2408      	movs	r4, #8
   328b4:	e7fb      	b.n	328ae <smp_init+0x2a>
   328b6:	bf00      	nop
   328b8:	20004208 	.word	0x20004208

000328bc <smp_dhkey_generate>:
{
   328bc:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   328be:	1d05      	adds	r5, r0, #4
{
   328c0:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   328c2:	2108      	movs	r1, #8
   328c4:	4628      	mov	r0, r5
   328c6:	f01c f99c 	bl	4ec02 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   328ca:	4906      	ldr	r1, [pc, #24]	; (328e4 <smp_dhkey_generate+0x28>)
   328cc:	f104 0057 	add.w	r0, r4, #87	; 0x57
   328d0:	f7fc fc52 	bl	2f178 <bt_dh_key_gen>
	if (err) {
   328d4:	b120      	cbz	r0, 328e0 <smp_dhkey_generate+0x24>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   328d6:	4628      	mov	r0, r5
   328d8:	2108      	movs	r1, #8
   328da:	f01c f89c 	bl	4ea16 <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
   328de:	2008      	movs	r0, #8
}
   328e0:	bd38      	pop	{r3, r4, r5, pc}
   328e2:	bf00      	nop
   328e4:	0004f3a5 	.word	0x0004f3a5

000328e8 <smp_send_pairing_req>:
{
   328e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   328ec:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   328ee:	f01c f83a 	bl	4e966 <smp_chan_get>
	if (!smp) {
   328f2:	4606      	mov	r6, r0
   328f4:	2800      	cmp	r0, #0
   328f6:	d071      	beq.n	329dc <smp_send_pairing_req+0xf4>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   328f8:	1d07      	adds	r7, r0, #4
   328fa:	2104      	movs	r1, #4
   328fc:	4638      	mov	r0, r7
   328fe:	f01c f839 	bl	4e974 <atomic_test_bit>
   32902:	4604      	mov	r4, r0
   32904:	2800      	cmp	r0, #0
   32906:	d16c      	bne.n	329e2 <smp_send_pairing_req+0xfa>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   32908:	2102      	movs	r1, #2
   3290a:	4638      	mov	r0, r7
   3290c:	f01c f832 	bl	4e974 <atomic_test_bit>
   32910:	b930      	cbnz	r0, 32920 <smp_send_pairing_req+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   32912:	2103      	movs	r1, #3
   32914:	4638      	mov	r0, r7
   32916:	f01c f82d 	bl	4e974 <atomic_test_bit>
   3291a:	b120      	cbz	r0, 32926 <smp_send_pairing_req+0x3e>
		return -EBUSY;
   3291c:	f06f 040f 	mvn.w	r4, #15
}
   32920:	4620      	mov	r0, r4
   32922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   32926:	2101      	movs	r1, #1
   32928:	4638      	mov	r0, r7
   3292a:	f01c f823 	bl	4e974 <atomic_test_bit>
   3292e:	2800      	cmp	r0, #0
   32930:	d1f4      	bne.n	3291c <smp_send_pairing_req+0x34>
	if (!sec_level_reachable(conn)) {
   32932:	7aa8      	ldrb	r0, [r5, #10]
   32934:	f7ff ff4a 	bl	327cc <sec_level_reachable.isra.0>
   32938:	2800      	cmp	r0, #0
   3293a:	d055      	beq.n	329e8 <smp_send_pairing_req+0x100>
	if (!conn->le.keys) {
   3293c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   32940:	b13b      	cbz	r3, 32952 <smp_send_pairing_req+0x6a>
	if (smp_init(smp)) {
   32942:	4630      	mov	r0, r6
   32944:	f7ff ff9e 	bl	32884 <smp_init>
   32948:	4604      	mov	r4, r0
   3294a:	b170      	cbz	r0, 3296a <smp_send_pairing_req+0x82>
		return -ENOBUFS;
   3294c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   32950:	e7e6      	b.n	32920 <smp_send_pairing_req+0x38>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   32952:	7a28      	ldrb	r0, [r5, #8]
   32954:	f105 0188 	add.w	r1, r5, #136	; 0x88
   32958:	f000 fe2e 	bl	335b8 <bt_keys_get_addr>
   3295c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   32960:	2800      	cmp	r0, #0
   32962:	d1ee      	bne.n	32942 <smp_send_pairing_req+0x5a>
			return -ENOMEM;
   32964:	f06f 040b 	mvn.w	r4, #11
   32968:	e7da      	b.n	32920 <smp_send_pairing_req+0x38>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   3296a:	2101      	movs	r1, #1
   3296c:	4630      	mov	r0, r6
   3296e:	f01c f98c 	bl	4ec8a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   32972:	4680      	mov	r8, r0
   32974:	2800      	cmp	r0, #0
   32976:	d0e9      	beq.n	3294c <smp_send_pairing_req+0x64>
   32978:	2106      	movs	r1, #6
   3297a:	3008      	adds	r0, #8
   3297c:	f01c ff54 	bl	4f828 <net_buf_simple_add>
   32980:	4605      	mov	r5, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   32982:	2009      	movs	r0, #9
   32984:	f7ff fe68 	bl	32658 <get_auth.constprop.0>
   32988:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
   3298a:	f7ff fdb7 	bl	324fc <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   3298e:	4b18      	ldr	r3, [pc, #96]	; (329f0 <smp_send_pairing_req+0x108>)
	req->io_capability = get_io_capa();
   32990:	7028      	strb	r0, [r5, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   32992:	781b      	ldrb	r3, [r3, #0]
   32994:	706b      	strb	r3, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   32996:	2310      	movs	r3, #16
   32998:	70eb      	strb	r3, [r5, #3]
	req->resp_key_dist = RECV_KEYS;
   3299a:	f04f 0903 	mov.w	r9, #3
	req->init_key_dist = SEND_KEYS;
   3299e:	2301      	movs	r3, #1
	smp->local_dist = SEND_KEYS;
   329a0:	f240 3201 	movw	r2, #769	; 0x301
	req->init_key_dist = SEND_KEYS;
   329a4:	712b      	strb	r3, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
   329a6:	f885 9005 	strb.w	r9, [r5, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
   329aa:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   329ac:	7273      	strb	r3, [r6, #9]
	smp->local_dist = SEND_KEYS;
   329ae:	f8a6 20e8 	strh.w	r2, [r6, #232]	; 0xe8
	memcpy(smp->preq + 1, req, sizeof(*req));
   329b2:	f106 000a 	add.w	r0, r6, #10
   329b6:	2206      	movs	r2, #6
   329b8:	f018 ff67 	bl	4b88a <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   329bc:	4641      	mov	r1, r8
   329be:	4630      	mov	r0, r6
   329c0:	f01c f884 	bl	4eacc <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   329c4:	4630      	mov	r0, r6
   329c6:	2102      	movs	r1, #2
   329c8:	f01c f91b 	bl	4ec02 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   329cc:	210b      	movs	r1, #11
   329ce:	f01c f918 	bl	4ec02 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   329d2:	4649      	mov	r1, r9
   329d4:	4638      	mov	r0, r7
   329d6:	f01c f914 	bl	4ec02 <atomic_set_bit>
	return 0;
   329da:	e7a1      	b.n	32920 <smp_send_pairing_req+0x38>
		return -ENOTCONN;
   329dc:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   329e0:	e79e      	b.n	32920 <smp_send_pairing_req+0x38>
		return -EIO;
   329e2:	f06f 0404 	mvn.w	r4, #4
   329e6:	e79b      	b.n	32920 <smp_send_pairing_req+0x38>
		return -EINVAL;
   329e8:	f06f 0415 	mvn.w	r4, #21
   329ec:	e798      	b.n	32920 <smp_send_pairing_req+0x38>
   329ee:	bf00      	nop
   329f0:	20006dcf 	.word	0x20006dcf

000329f4 <smp_security_request>:
{
   329f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   329f6:	1d04      	adds	r4, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   329f8:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	struct bt_smp_security_request *req = (void *)buf->data;
   329fc:	688b      	ldr	r3, [r1, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   329fe:	4620      	mov	r0, r4
   32a00:	2102      	movs	r1, #2
   32a02:	f01b ffb7 	bl	4e974 <atomic_test_bit>
   32a06:	b108      	cbz	r0, 32a0c <smp_security_request+0x18>
	return 0;
   32a08:	2000      	movs	r0, #0
   32a0a:	e04a      	b.n	32aa2 <smp_security_request+0xae>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   32a0c:	2103      	movs	r1, #3
   32a0e:	4620      	mov	r0, r4
   32a10:	f01b ffb0 	bl	4e974 <atomic_test_bit>
   32a14:	2800      	cmp	r0, #0
   32a16:	d1f7      	bne.n	32a08 <smp_security_request+0x14>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   32a18:	2101      	movs	r1, #1
   32a1a:	4620      	mov	r0, r4
   32a1c:	f01b ffaa 	bl	4e974 <atomic_test_bit>
   32a20:	2800      	cmp	r0, #0
   32a22:	d1f1      	bne.n	32a08 <smp_security_request+0x14>
	if (sc_supported) {
   32a24:	4a23      	ldr	r2, [pc, #140]	; (32ab4 <smp_security_request+0xc0>)
   32a26:	7812      	ldrb	r2, [r2, #0]
   32a28:	2a00      	cmp	r2, #0
   32a2a:	d041      	beq.n	32ab0 <smp_security_request+0xbc>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   32a2c:	781e      	ldrb	r6, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   32a2e:	0737      	lsls	r7, r6, #28
   32a30:	d53e      	bpl.n	32ab0 <smp_security_request+0xbc>
	if (conn->le.keys) {
   32a32:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   32a36:	b153      	cbz	r3, 32a4e <smp_security_request+0x5a>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   32a38:	89db      	ldrh	r3, [r3, #14]
   32a3a:	f003 0324 	and.w	r3, r3, #36	; 0x24
   32a3e:	b9bb      	cbnz	r3, 32a70 <smp_security_request+0x7c>
	if (smp_send_pairing_req(conn) < 0) {
   32a40:	4628      	mov	r0, r5
   32a42:	f7ff ff51 	bl	328e8 <smp_send_pairing_req>
   32a46:	2800      	cmp	r0, #0
   32a48:	db2a      	blt.n	32aa0 <smp_security_request+0xac>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   32a4a:	210f      	movs	r1, #15
   32a4c:	e02c      	b.n	32aa8 <smp_security_request+0xb4>
					     &conn->le.dst);
   32a4e:	f105 0788 	add.w	r7, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   32a52:	7a29      	ldrb	r1, [r5, #8]
   32a54:	463a      	mov	r2, r7
   32a56:	2020      	movs	r0, #32
   32a58:	f000 fe32 	bl	336c0 <bt_keys_find>
   32a5c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   32a60:	b930      	cbnz	r0, 32a70 <smp_security_request+0x7c>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   32a62:	7a29      	ldrb	r1, [r5, #8]
   32a64:	463a      	mov	r2, r7
   32a66:	2004      	movs	r0, #4
   32a68:	f000 fe2a 	bl	336c0 <bt_keys_find>
   32a6c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys) {
   32a70:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
   32a74:	2900      	cmp	r1, #0
   32a76:	d0e3      	beq.n	32a40 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_MITM) &&
   32a78:	0770      	lsls	r0, r6, #29
   32a7a:	d502      	bpl.n	32a82 <smp_security_request+0x8e>
   32a7c:	7b4b      	ldrb	r3, [r1, #13]
   32a7e:	07da      	lsls	r2, r3, #31
   32a80:	d5de      	bpl.n	32a40 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_SC) &&
   32a82:	89cb      	ldrh	r3, [r1, #14]
   32a84:	069b      	lsls	r3, r3, #26
   32a86:	d5db      	bpl.n	32a40 <smp_security_request+0x4c>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   32a88:	7b0b      	ldrb	r3, [r1, #12]
   32a8a:	9300      	str	r3, [sp, #0]
   32a8c:	f101 0218 	add.w	r2, r1, #24
   32a90:	f101 031a 	add.w	r3, r1, #26
   32a94:	4628      	mov	r0, r5
   32a96:	3110      	adds	r1, #16
   32a98:	f019 ff74 	bl	4c984 <bt_conn_le_start_encryption>
   32a9c:	2800      	cmp	r0, #0
   32a9e:	da02      	bge.n	32aa6 <smp_security_request+0xb2>
		return BT_SMP_ERR_UNSPECIFIED;
   32aa0:	2008      	movs	r0, #8
}
   32aa2:	b003      	add	sp, #12
   32aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   32aa6:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   32aa8:	4620      	mov	r0, r4
   32aaa:	f01c f8aa 	bl	4ec02 <atomic_set_bit>
   32aae:	e7ab      	b.n	32a08 <smp_security_request+0x14>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   32ab0:	2003      	movs	r0, #3
   32ab2:	e7f6      	b.n	32aa2 <smp_security_request+0xae>
   32ab4:	20006dd0 	.word	0x20006dd0

00032ab8 <sc_send_public_key>:
{
   32ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   32aba:	210c      	movs	r1, #12
{
   32abc:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   32abe:	f01c f8e4 	bl	4ec8a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   32ac2:	4604      	mov	r4, r0
   32ac4:	b1a8      	cbz	r0, 32af2 <sc_send_public_key+0x3a>
   32ac6:	2140      	movs	r1, #64	; 0x40
   32ac8:	3008      	adds	r0, #8
   32aca:	f01c fead 	bl	4f828 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   32ace:	4f0a      	ldr	r7, [pc, #40]	; (32af8 <sc_send_public_key+0x40>)
   32ad0:	2220      	movs	r2, #32
   32ad2:	6839      	ldr	r1, [r7, #0]
   32ad4:	4606      	mov	r6, r0
   32ad6:	f018 fed8 	bl	4b88a <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   32ada:	6839      	ldr	r1, [r7, #0]
   32adc:	2220      	movs	r2, #32
   32ade:	4411      	add	r1, r2
   32ae0:	18b0      	adds	r0, r6, r2
   32ae2:	f018 fed2 	bl	4b88a <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   32ae6:	4628      	mov	r0, r5
   32ae8:	4621      	mov	r1, r4
   32aea:	f01b ffef 	bl	4eacc <smp_send.constprop.0>
	return 0;
   32aee:	2000      	movs	r0, #0
}
   32af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   32af2:	2008      	movs	r0, #8
   32af4:	e7fc      	b.n	32af0 <sc_send_public_key+0x38>
   32af6:	bf00      	nop
   32af8:	20004208 	.word	0x20004208

00032afc <smp_send_pairing_confirm>:
{
   32afc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   32afe:	7a04      	ldrb	r4, [r0, #8]
   32b00:	2c02      	cmp	r4, #2
{
   32b02:	4605      	mov	r5, r0
	switch (smp->method) {
   32b04:	d823      	bhi.n	32b4e <smp_send_pairing_confirm+0x52>
   32b06:	b144      	cbz	r4, 32b1a <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   32b08:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   32b0c:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   32b10:	40dc      	lsrs	r4, r3
   32b12:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   32b16:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   32b1a:	2103      	movs	r1, #3
   32b1c:	4628      	mov	r0, r5
   32b1e:	f01c f8b4 	bl	4ec8a <smp_create_pdu.constprop.0>
	if (!buf) {
   32b22:	4606      	mov	r6, r0
   32b24:	b1a8      	cbz	r0, 32b52 <smp_send_pairing_confirm+0x56>
   32b26:	2110      	movs	r1, #16
   32b28:	3008      	adds	r0, #8
   32b2a:	f01c fe7d 	bl	4f828 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   32b2e:	9000      	str	r0, [sp, #0]
   32b30:	480f      	ldr	r0, [pc, #60]	; (32b70 <smp_send_pairing_confirm+0x74>)
   32b32:	4623      	mov	r3, r4
   32b34:	6800      	ldr	r0, [r0, #0]
   32b36:	f105 0227 	add.w	r2, r5, #39	; 0x27
   32b3a:	f105 0157 	add.w	r1, r5, #87	; 0x57
   32b3e:	f01c f83b 	bl	4ebb8 <smp_f4>
   32b42:	4604      	mov	r4, r0
   32b44:	b148      	cbz	r0, 32b5a <smp_send_pairing_confirm+0x5e>
		net_buf_unref(buf);
   32b46:	4630      	mov	r0, r6
   32b48:	f010 fcc6 	bl	434d8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   32b4c:	e001      	b.n	32b52 <smp_send_pairing_confirm+0x56>
	switch (smp->method) {
   32b4e:	2c03      	cmp	r4, #3
   32b50:	d001      	beq.n	32b56 <smp_send_pairing_confirm+0x5a>
		return BT_SMP_ERR_UNSPECIFIED;
   32b52:	2008      	movs	r0, #8
   32b54:	e00a      	b.n	32b6c <smp_send_pairing_confirm+0x70>
	switch (smp->method) {
   32b56:	2400      	movs	r4, #0
   32b58:	e7df      	b.n	32b1a <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   32b5a:	4631      	mov	r1, r6
   32b5c:	4628      	mov	r0, r5
   32b5e:	f01b ffb5 	bl	4eacc <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   32b62:	1d28      	adds	r0, r5, #4
   32b64:	4621      	mov	r1, r4
   32b66:	f01b ff56 	bl	4ea16 <atomic_clear_bit>
	return 0;
   32b6a:	4620      	mov	r0, r4
}
   32b6c:	b002      	add	sp, #8
   32b6e:	bd70      	pop	{r4, r5, r6, pc}
   32b70:	20004208 	.word	0x20004208

00032b74 <smp_pairing_random>:
{
   32b74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   32b76:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   32b78:	f100 0637 	add.w	r6, r0, #55	; 0x37
   32b7c:	6889      	ldr	r1, [r1, #8]
   32b7e:	2210      	movs	r2, #16
   32b80:	4630      	mov	r0, r6
   32b82:	f018 fe82 	bl	4b88a <memcpy>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   32b86:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   32b8a:	78db      	ldrb	r3, [r3, #3]
   32b8c:	2b00      	cmp	r3, #0
   32b8e:	d154      	bne.n	32c3a <smp_pairing_random+0xc6>
		err = sc_smp_check_confirm(smp);
   32b90:	4620      	mov	r0, r4
   32b92:	f7ff fde7 	bl	32764 <sc_smp_check_confirm>
		if (err) {
   32b96:	4605      	mov	r5, r0
   32b98:	b9a0      	cbnz	r0, 32bc4 <smp_pairing_random+0x50>
		switch (smp->method) {
   32b9a:	7a23      	ldrb	r3, [r4, #8]
   32b9c:	2b05      	cmp	r3, #5
   32b9e:	d810      	bhi.n	32bc2 <smp_pairing_random+0x4e>
   32ba0:	e8df f003 	tbb	[pc, r3]
   32ba4:	0322223a 	.word	0x0322223a
   32ba8:	3a0f      	.short	0x3a0f
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
   32baa:	ab03      	add	r3, sp, #12
   32bac:	4865      	ldr	r0, [pc, #404]	; (32d44 <smp_pairing_random+0x1d0>)
   32bae:	9300      	str	r3, [sp, #0]
   32bb0:	6800      	ldr	r0, [r0, #0]
   32bb2:	4633      	mov	r3, r6
   32bb4:	f104 0227 	add.w	r2, r4, #39	; 0x27
   32bb8:	f104 0157 	add.w	r1, r4, #87	; 0x57
   32bbc:	f7ff fd18 	bl	325f0 <smp_g2>
   32bc0:	b118      	cbz	r0, 32bca <smp_pairing_random+0x56>
				return BT_SMP_ERR_UNSPECIFIED;
   32bc2:	2508      	movs	r5, #8
}
   32bc4:	4628      	mov	r0, r5
   32bc6:	b004      	add	sp, #16
   32bc8:	bd70      	pop	{r4, r5, r6, pc}
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   32bca:	210a      	movs	r1, #10
   32bcc:	1d20      	adds	r0, r4, #4
   32bce:	f01c f818 	bl	4ec02 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   32bd2:	2109      	movs	r1, #9
   32bd4:	f01c f815 	bl	4ec02 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   32bd8:	4b5b      	ldr	r3, [pc, #364]	; (32d48 <smp_pairing_random+0x1d4>)
   32bda:	9903      	ldr	r1, [sp, #12]
   32bdc:	681b      	ldr	r3, [r3, #0]
   32bde:	68db      	ldr	r3, [r3, #12]
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   32be0:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   32be4:	4798      	blx	r3
			return 0;
   32be6:	e7ed      	b.n	32bc4 <smp_pairing_random+0x50>
			smp->passkey_round++;
   32be8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   32bec:	3301      	adds	r3, #1
   32bee:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   32bf0:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   32bf2:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   32bf6:	d00f      	beq.n	32c18 <smp_pairing_random+0xa4>
			if (bt_rand(smp->prnd, 16)) {
   32bf8:	2110      	movs	r1, #16
   32bfa:	f104 0027 	add.w	r0, r4, #39	; 0x27
   32bfe:	f003 ff61 	bl	36ac4 <bt_rand>
   32c02:	2800      	cmp	r0, #0
   32c04:	d1dd      	bne.n	32bc2 <smp_pairing_random+0x4e>
			atomic_set_bit(smp->allowed_cmds,
   32c06:	2103      	movs	r1, #3
   32c08:	4620      	mov	r0, r4
   32c0a:	f01b fffa 	bl	4ec02 <atomic_set_bit>
}
   32c0e:	b004      	add	sp, #16
   32c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			return smp_send_pairing_confirm(smp);
   32c14:	f7ff bf72 	b.w	32afc <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   32c18:	1d23      	adds	r3, r4, #4
   32c1a:	2107      	movs	r1, #7
   32c1c:	4618      	mov	r0, r3
   32c1e:	f01b fea9 	bl	4e974 <atomic_test_bit>
   32c22:	b120      	cbz	r0, 32c2e <smp_pairing_random+0xba>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   32c24:	2109      	movs	r1, #9
   32c26:	4618      	mov	r0, r3
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   32c28:	f01b ffeb 	bl	4ec02 <atomic_set_bit>
			return 0;
   32c2c:	e7ca      	b.n	32bc4 <smp_pairing_random+0x50>
		return compute_and_send_central_dhcheck(smp);
   32c2e:	4620      	mov	r0, r4
}
   32c30:	b004      	add	sp, #16
   32c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_send_central_dhcheck(smp);
   32c36:	f01c b877 	b.w	4ed28 <compute_and_send_central_dhcheck>
	switch (smp->method) {
   32c3a:	7a23      	ldrb	r3, [r4, #8]
   32c3c:	2b05      	cmp	r3, #5
   32c3e:	d8c0      	bhi.n	32bc2 <smp_pairing_random+0x4e>
   32c40:	a201      	add	r2, pc, #4	; (adr r2, 32c48 <smp_pairing_random+0xd4>)
   32c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   32c46:	bf00      	nop
   32c48:	00032c91 	.word	0x00032c91
   32c4c:	00032cab 	.word	0x00032cab
   32c50:	00032cab 	.word	0x00032cab
   32c54:	00032c61 	.word	0x00032c61
   32c58:	00032bc3 	.word	0x00032bc3
   32c5c:	00032cfd 	.word	0x00032cfd
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   32c60:	ab03      	add	r3, sp, #12
   32c62:	4938      	ldr	r1, [pc, #224]	; (32d44 <smp_pairing_random+0x1d0>)
   32c64:	9300      	str	r3, [sp, #0]
   32c66:	6809      	ldr	r1, [r1, #0]
   32c68:	f104 0327 	add.w	r3, r4, #39	; 0x27
   32c6c:	4632      	mov	r2, r6
   32c6e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   32c72:	f7ff fcbd 	bl	325f0 <smp_g2>
   32c76:	2800      	cmp	r0, #0
   32c78:	d1a3      	bne.n	32bc2 <smp_pairing_random+0x4e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   32c7a:	210a      	movs	r1, #10
   32c7c:	1d20      	adds	r0, r4, #4
   32c7e:	f01b ffc0 	bl	4ec02 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   32c82:	4b31      	ldr	r3, [pc, #196]	; (32d48 <smp_pairing_random+0x1d4>)
   32c84:	9903      	ldr	r1, [sp, #12]
   32c86:	681b      	ldr	r3, [r3, #0]
   32c88:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   32c8c:	68db      	ldr	r3, [r3, #12]
   32c8e:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   32c90:	210d      	movs	r1, #13
   32c92:	4620      	mov	r0, r4
   32c94:	f01b ffb5 	bl	4ec02 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   32c98:	2110      	movs	r1, #16
   32c9a:	1d20      	adds	r0, r4, #4
   32c9c:	f01b ffb1 	bl	4ec02 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   32ca0:	4620      	mov	r0, r4
   32ca2:	f01c f811 	bl	4ecc8 <smp_send_pairing_random>
   32ca6:	4605      	mov	r5, r0
   32ca8:	e78c      	b.n	32bc4 <smp_pairing_random+0x50>
		err = sc_smp_check_confirm(smp);
   32caa:	4620      	mov	r0, r4
   32cac:	f7ff fd5a 	bl	32764 <sc_smp_check_confirm>
		if (err) {
   32cb0:	4605      	mov	r5, r0
   32cb2:	2800      	cmp	r0, #0
   32cb4:	d186      	bne.n	32bc4 <smp_pairing_random+0x50>
		atomic_set_bit(smp->allowed_cmds,
   32cb6:	2103      	movs	r1, #3
   32cb8:	4620      	mov	r0, r4
   32cba:	f01b ffa2 	bl	4ec02 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   32cbe:	f01c f803 	bl	4ecc8 <smp_send_pairing_random>
		if (err) {
   32cc2:	4605      	mov	r5, r0
   32cc4:	2800      	cmp	r0, #0
   32cc6:	f47f af7d 	bne.w	32bc4 <smp_pairing_random+0x50>
		smp->passkey_round++;
   32cca:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   32cce:	3301      	adds	r3, #1
   32cd0:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   32cd2:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   32cd4:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   32cd8:	d106      	bne.n	32ce8 <smp_pairing_random+0x174>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   32cda:	210d      	movs	r1, #13
   32cdc:	4620      	mov	r0, r4
   32cde:	f01b ff90 	bl	4ec02 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   32ce2:	2110      	movs	r1, #16
   32ce4:	1d20      	adds	r0, r4, #4
   32ce6:	e79f      	b.n	32c28 <smp_pairing_random+0xb4>
		if (bt_rand(smp->prnd, 16)) {
   32ce8:	2110      	movs	r1, #16
   32cea:	f104 0027 	add.w	r0, r4, #39	; 0x27
   32cee:	f003 fee9 	bl	36ac4 <bt_rand>
   32cf2:	1e05      	subs	r5, r0, #0
   32cf4:	bf18      	it	ne
   32cf6:	2501      	movne	r5, #1
   32cf8:	00ed      	lsls	r5, r5, #3
   32cfa:	e763      	b.n	32bc4 <smp_pairing_random+0x50>
		if (bt_rand(smp->prnd, 16)) {
   32cfc:	2110      	movs	r1, #16
   32cfe:	f104 0027 	add.w	r0, r4, #39	; 0x27
   32d02:	f003 fedf 	bl	36ac4 <bt_rand>
   32d06:	4605      	mov	r5, r0
   32d08:	2800      	cmp	r0, #0
   32d0a:	f47f af5a 	bne.w	32bc2 <smp_pairing_random+0x4e>
		if (bt_auth && bt_auth->oob_data_request) {
   32d0e:	4e0e      	ldr	r6, [pc, #56]	; (32d48 <smp_pairing_random+0x1d4>)
   32d10:	6833      	ldr	r3, [r6, #0]
   32d12:	b1a3      	cbz	r3, 32d3e <smp_pairing_random+0x1ca>
   32d14:	691b      	ldr	r3, [r3, #16]
   32d16:	b193      	cbz	r3, 32d3e <smp_pairing_random+0x1ca>
			struct bt_conn_oob_info info = {
   32d18:	4b0c      	ldr	r3, [pc, #48]	; (32d4c <smp_pairing_random+0x1d8>)
			le_sc_oob_config_set(smp, &info);
   32d1a:	a903      	add	r1, sp, #12
			struct bt_conn_oob_info info = {
   32d1c:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   32d20:	f8ad 300c 	strh.w	r3, [sp, #12]
			le_sc_oob_config_set(smp, &info);
   32d24:	4620      	mov	r0, r4
   32d26:	f01b fe03 	bl	4e930 <le_sc_oob_config_set>
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   32d2a:	210c      	movs	r1, #12
			smp->oobd_remote = NULL;
   32d2c:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   32d30:	1d20      	adds	r0, r4, #4
   32d32:	f01b ff66 	bl	4ec02 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   32d36:	6833      	ldr	r3, [r6, #0]
   32d38:	a903      	add	r1, sp, #12
   32d3a:	691b      	ldr	r3, [r3, #16]
   32d3c:	e750      	b.n	32be0 <smp_pairing_random+0x6c>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   32d3e:	2502      	movs	r5, #2
   32d40:	e740      	b.n	32bc4 <smp_pairing_random+0x50>
   32d42:	bf00      	nop
   32d44:	20004208 	.word	0x20004208
   32d48:	20003f94 	.word	0x20003f94
   32d4c:	0005154e 	.word	0x0005154e

00032d50 <smp_public_key_periph>:
{
   32d50:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   32d52:	1d05      	adds	r5, r0, #4
{
   32d54:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   32d56:	210e      	movs	r1, #14
   32d58:	4628      	mov	r0, r5
   32d5a:	f01b fe0b 	bl	4e974 <atomic_test_bit>
   32d5e:	b120      	cbz	r0, 32d6a <smp_public_key_periph+0x1a>
	err = sc_send_public_key(smp);
   32d60:	4620      	mov	r0, r4
   32d62:	f7ff fea9 	bl	32ab8 <sc_send_public_key>
	if (err) {
   32d66:	b158      	cbz	r0, 32d80 <smp_public_key_periph+0x30>
}
   32d68:	bd38      	pop	{r3, r4, r5, pc}
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   32d6a:	4b26      	ldr	r3, [pc, #152]	; (32e04 <smp_public_key_periph+0xb4>)
   32d6c:	2220      	movs	r2, #32
   32d6e:	6819      	ldr	r1, [r3, #0]
   32d70:	f104 0057 	add.w	r0, r4, #87	; 0x57
   32d74:	f018 fd79 	bl	4b86a <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   32d78:	2800      	cmp	r0, #0
   32d7a:	d1f1      	bne.n	32d60 <smp_public_key_periph+0x10>
	switch (smp->method) {
   32d7c:	2008      	movs	r0, #8
   32d7e:	e7f3      	b.n	32d68 <smp_public_key_periph+0x18>
   32d80:	7a23      	ldrb	r3, [r4, #8]
   32d82:	2b05      	cmp	r3, #5
   32d84:	d8fa      	bhi.n	32d7c <smp_public_key_periph+0x2c>
   32d86:	a201      	add	r2, pc, #4	; (adr r2, 32d8c <smp_public_key_periph+0x3c>)
   32d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   32d8c:	00032da5 	.word	0x00032da5
   32d90:	00032dd9 	.word	0x00032dd9
   32d94:	00032dbf 	.word	0x00032dbf
   32d98:	00032da5 	.word	0x00032da5
   32d9c:	00032d7d 	.word	0x00032d7d
   32da0:	00032dfd 	.word	0x00032dfd
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   32da4:	2104      	movs	r1, #4
   32da6:	4620      	mov	r0, r4
   32da8:	f01b ff2b 	bl	4ec02 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   32dac:	f7ff fea6 	bl	32afc <smp_send_pairing_confirm>
		if (err) {
   32db0:	2800      	cmp	r0, #0
   32db2:	d1d9      	bne.n	32d68 <smp_public_key_periph+0x18>
	return generate_dhkey(smp);
   32db4:	4620      	mov	r0, r4
}
   32db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return generate_dhkey(smp);
   32dba:	f01b bf36 	b.w	4ec2a <generate_dhkey>
		err = display_passkey(smp);
   32dbe:	4620      	mov	r0, r4
   32dc0:	f7ff fd34 	bl	3282c <display_passkey>
		if (err) {
   32dc4:	2800      	cmp	r0, #0
   32dc6:	d1cf      	bne.n	32d68 <smp_public_key_periph+0x18>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   32dc8:	2103      	movs	r1, #3
   32dca:	4620      	mov	r0, r4
   32dcc:	f01b ff19 	bl	4ec02 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   32dd0:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   32dd2:	f01b ff16 	bl	4ec02 <atomic_set_bit>
		break;
   32dd6:	e7ed      	b.n	32db4 <smp_public_key_periph+0x64>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   32dd8:	4620      	mov	r0, r4
   32dda:	2103      	movs	r1, #3
   32ddc:	f01b ff11 	bl	4ec02 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   32de0:	210e      	movs	r1, #14
   32de2:	f01b ff0e 	bl	4ec02 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   32de6:	4628      	mov	r0, r5
   32de8:	210a      	movs	r1, #10
   32dea:	f01b ff0a 	bl	4ec02 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   32dee:	4b06      	ldr	r3, [pc, #24]	; (32e08 <smp_public_key_periph+0xb8>)
   32df0:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   32df4:	681b      	ldr	r3, [r3, #0]
   32df6:	689b      	ldr	r3, [r3, #8]
   32df8:	4798      	blx	r3
		break;
   32dfa:	e7db      	b.n	32db4 <smp_public_key_periph+0x64>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   32dfc:	2104      	movs	r1, #4
   32dfe:	4620      	mov	r0, r4
   32e00:	e7e7      	b.n	32dd2 <smp_public_key_periph+0x82>
   32e02:	bf00      	nop
   32e04:	20004208 	.word	0x20004208
   32e08:	20003f94 	.word	0x20003f94

00032e0c <smp_public_key>:
{
   32e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   32e0e:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   32e10:	f100 0757 	add.w	r7, r0, #87	; 0x57
{
   32e14:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   32e16:	2220      	movs	r2, #32
   32e18:	4629      	mov	r1, r5
   32e1a:	4638      	mov	r0, r7
   32e1c:	f018 fd35 	bl	4b88a <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   32e20:	2220      	movs	r2, #32
   32e22:	18a9      	adds	r1, r5, r2
   32e24:	f104 0077 	add.w	r0, r4, #119	; 0x77
   32e28:	f018 fd2f 	bl	4b88a <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   32e2c:	4638      	mov	r0, r7
   32e2e:	f7fc f91d 	bl	2f06c <bt_pub_key_is_debug>
   32e32:	b998      	cbnz	r0, 32e5c <smp_public_key+0x50>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   32e34:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   32e38:	78db      	ldrb	r3, [r3, #3]
   32e3a:	2b00      	cmp	r3, #0
   32e3c:	f040 8081 	bne.w	32f42 <smp_public_key+0x136>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   32e40:	1d26      	adds	r6, r4, #4
   32e42:	210e      	movs	r1, #14
   32e44:	4630      	mov	r0, r6
   32e46:	f01b fd95 	bl	4e974 <atomic_test_bit>
   32e4a:	b330      	cbz	r0, 32e9a <smp_public_key+0x8e>
		switch (smp->method) {
   32e4c:	7a23      	ldrb	r3, [r4, #8]
   32e4e:	2b05      	cmp	r3, #5
   32e50:	d82b      	bhi.n	32eaa <smp_public_key+0x9e>
   32e52:	e8df f003 	tbb	[pc, r3]
   32e56:	472c      	.short	0x472c
   32e58:	532a2c31 	.word	0x532a2c31
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   32e5c:	210e      	movs	r1, #14
   32e5e:	1d20      	adds	r0, r4, #4
   32e60:	f01b fecf 	bl	4ec02 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   32e64:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   32e68:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   32e6c:	b933      	cbnz	r3, 32e7c <smp_public_key+0x70>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   32e6e:	7a28      	ldrb	r0, [r5, #8]
   32e70:	f105 0188 	add.w	r1, r5, #136	; 0x88
   32e74:	f000 fba0 	bl	335b8 <bt_keys_get_addr>
   32e78:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   32e7c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   32e80:	2b00      	cmp	r3, #0
   32e82:	d0d7      	beq.n	32e34 <smp_public_key+0x28>
   32e84:	89da      	ldrh	r2, [r3, #14]
   32e86:	f002 0224 	and.w	r2, r2, #36	; 0x24
   32e8a:	2a00      	cmp	r2, #0
   32e8c:	d0d2      	beq.n	32e34 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   32e8e:	7b5b      	ldrb	r3, [r3, #13]
   32e90:	079b      	lsls	r3, r3, #30
   32e92:	d4cf      	bmi.n	32e34 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   32e94:	2003      	movs	r0, #3
}
   32e96:	b003      	add	sp, #12
   32e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   32e9a:	4b32      	ldr	r3, [pc, #200]	; (32f64 <smp_public_key+0x158>)
   32e9c:	2220      	movs	r2, #32
   32e9e:	6819      	ldr	r1, [r3, #0]
   32ea0:	4638      	mov	r0, r7
   32ea2:	f018 fce2 	bl	4b86a <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   32ea6:	2800      	cmp	r0, #0
   32ea8:	d1d0      	bne.n	32e4c <smp_public_key+0x40>
		switch (smp->method) {
   32eaa:	2008      	movs	r0, #8
   32eac:	e7f3      	b.n	32e96 <smp_public_key+0x8a>
			atomic_set_bit(smp->allowed_cmds,
   32eae:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   32eb0:	4620      	mov	r0, r4
   32eb2:	f01b fea6 	bl	4ec02 <atomic_set_bit>
			break;
   32eb6:	e00f      	b.n	32ed8 <smp_public_key+0xcc>
			err = display_passkey(smp);
   32eb8:	4620      	mov	r0, r4
   32eba:	f7ff fcb7 	bl	3282c <display_passkey>
			if (err) {
   32ebe:	2800      	cmp	r0, #0
   32ec0:	d1e9      	bne.n	32e96 <smp_public_key+0x8a>
			atomic_set_bit(smp->allowed_cmds,
   32ec2:	2103      	movs	r1, #3
   32ec4:	4620      	mov	r0, r4
   32ec6:	f01b fe9c 	bl	4ec02 <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   32eca:	210e      	movs	r1, #14
   32ecc:	f01b fe99 	bl	4ec02 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   32ed0:	f7ff fe14 	bl	32afc <smp_send_pairing_confirm>
			if (err) {
   32ed4:	2800      	cmp	r0, #0
   32ed6:	d1de      	bne.n	32e96 <smp_public_key+0x8a>
		return generate_dhkey(smp);
   32ed8:	4620      	mov	r0, r4
}
   32eda:	b003      	add	sp, #12
   32edc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return generate_dhkey(smp);
   32ee0:	f01b bea3 	b.w	4ec2a <generate_dhkey>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   32ee4:	210a      	movs	r1, #10
   32ee6:	4630      	mov	r0, r6
   32ee8:	f01b fe8b 	bl	4ec02 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   32eec:	4b1e      	ldr	r3, [pc, #120]	; (32f68 <smp_public_key+0x15c>)
   32eee:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   32ef2:	681b      	ldr	r3, [r3, #0]
   32ef4:	689b      	ldr	r3, [r3, #8]
   32ef6:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   32ef8:	210e      	movs	r1, #14
   32efa:	e7d9      	b.n	32eb0 <smp_public_key+0xa4>
			if (bt_rand(smp->prnd, 16)) {
   32efc:	2110      	movs	r1, #16
   32efe:	f104 0027 	add.w	r0, r4, #39	; 0x27
   32f02:	f003 fddf 	bl	36ac4 <bt_rand>
   32f06:	4605      	mov	r5, r0
   32f08:	2800      	cmp	r0, #0
   32f0a:	d1ce      	bne.n	32eaa <smp_public_key+0x9e>
			if (bt_auth && bt_auth->oob_data_request) {
   32f0c:	4f16      	ldr	r7, [pc, #88]	; (32f68 <smp_public_key+0x15c>)
   32f0e:	683b      	ldr	r3, [r7, #0]
   32f10:	b333      	cbz	r3, 32f60 <smp_public_key+0x154>
   32f12:	691b      	ldr	r3, [r3, #16]
   32f14:	b323      	cbz	r3, 32f60 <smp_public_key+0x154>
				struct bt_conn_oob_info info = {
   32f16:	4b15      	ldr	r3, [pc, #84]	; (32f6c <smp_public_key+0x160>)
				le_sc_oob_config_set(smp, &info);
   32f18:	a901      	add	r1, sp, #4
				struct bt_conn_oob_info info = {
   32f1a:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   32f1e:	f8ad 3004 	strh.w	r3, [sp, #4]
				le_sc_oob_config_set(smp, &info);
   32f22:	4620      	mov	r0, r4
   32f24:	f01b fd04 	bl	4e930 <le_sc_oob_config_set>
				atomic_set_bit(smp->flags,
   32f28:	4630      	mov	r0, r6
				smp->oobd_remote = NULL;
   32f2a:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
				atomic_set_bit(smp->flags,
   32f2e:	210c      	movs	r1, #12
   32f30:	f01b fe67 	bl	4ec02 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
   32f34:	683b      	ldr	r3, [r7, #0]
   32f36:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   32f3a:	691b      	ldr	r3, [r3, #16]
   32f3c:	a901      	add	r1, sp, #4
   32f3e:	4798      	blx	r3
			break;
   32f40:	e7ca      	b.n	32ed8 <smp_public_key+0xcc>
	if (!sc_public_key) {
   32f42:	4b08      	ldr	r3, [pc, #32]	; (32f64 <smp_public_key+0x158>)
   32f44:	681d      	ldr	r5, [r3, #0]
   32f46:	b92d      	cbnz	r5, 32f54 <smp_public_key+0x148>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   32f48:	1d20      	adds	r0, r4, #4
   32f4a:	2106      	movs	r1, #6
   32f4c:	f01b fe59 	bl	4ec02 <atomic_set_bit>
		return 0;
   32f50:	4628      	mov	r0, r5
   32f52:	e7a0      	b.n	32e96 <smp_public_key+0x8a>
	err = smp_public_key_periph(smp);
   32f54:	4620      	mov	r0, r4
}
   32f56:	b003      	add	sp, #12
   32f58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = smp_public_key_periph(smp);
   32f5c:	f7ff bef8 	b.w	32d50 <smp_public_key_periph>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   32f60:	2002      	movs	r0, #2
   32f62:	e798      	b.n	32e96 <smp_public_key+0x8a>
   32f64:	20004208 	.word	0x20004208
   32f68:	20003f94 	.word	0x20003f94
   32f6c:	0005154e 	.word	0x0005154e

00032f70 <bt_smp_connected>:
{
   32f70:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   32f72:	4905      	ldr	r1, [pc, #20]	; (32f88 <bt_smp_connected+0x18>)
   32f74:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   32f78:	30e8      	adds	r0, #232	; 0xe8
   32f7a:	f01d fc59 	bl	50830 <k_work_init_delayable>
	smp_reset(smp);
   32f7e:	4620      	mov	r0, r4
}
   32f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   32f84:	f01c b883 	b.w	4f08e <smp_reset>
   32f88:	0004f5a1 	.word	0x0004f5a1

00032f8c <smp_pairing_accept_query>:
	if (bt_auth && bt_auth->pairing_accept) {
   32f8c:	4b13      	ldr	r3, [pc, #76]	; (32fdc <smp_pairing_accept_query+0x50>)
   32f8e:	681b      	ldr	r3, [r3, #0]
{
   32f90:	b507      	push	{r0, r1, r2, lr}
	if (bt_auth && bt_auth->pairing_accept) {
   32f92:	b1f3      	cbz	r3, 32fd2 <smp_pairing_accept_query+0x46>
   32f94:	681b      	ldr	r3, [r3, #0]
   32f96:	b1f3      	cbz	r3, 32fd6 <smp_pairing_accept_query+0x4a>
		const struct bt_conn_pairing_feat feat = {
   32f98:	780a      	ldrb	r2, [r1, #0]
   32f9a:	f88d 2000 	strb.w	r2, [sp]
   32f9e:	784a      	ldrb	r2, [r1, #1]
   32fa0:	f88d 2001 	strb.w	r2, [sp, #1]
   32fa4:	788a      	ldrb	r2, [r1, #2]
   32fa6:	f88d 2002 	strb.w	r2, [sp, #2]
   32faa:	78ca      	ldrb	r2, [r1, #3]
   32fac:	f88d 2003 	strb.w	r2, [sp, #3]
   32fb0:	790a      	ldrb	r2, [r1, #4]
   32fb2:	f88d 2004 	strb.w	r2, [sp, #4]
   32fb6:	794a      	ldrb	r2, [r1, #5]
   32fb8:	f88d 2005 	strb.w	r2, [sp, #5]
		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
   32fbc:	4669      	mov	r1, sp
   32fbe:	4798      	blx	r3
	switch (auth_err) {
   32fc0:	3801      	subs	r0, #1
   32fc2:	b2c0      	uxtb	r0, r0
   32fc4:	2808      	cmp	r0, #8
   32fc6:	d804      	bhi.n	32fd2 <smp_pairing_accept_query+0x46>
   32fc8:	4b05      	ldr	r3, [pc, #20]	; (32fe0 <smp_pairing_accept_query+0x54>)
   32fca:	5c18      	ldrb	r0, [r3, r0]
}
   32fcc:	b003      	add	sp, #12
   32fce:	f85d fb04 	ldr.w	pc, [sp], #4
		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
   32fd2:	2000      	movs	r0, #0
   32fd4:	e7fa      	b.n	32fcc <smp_pairing_accept_query+0x40>
	return 0;
   32fd6:	4618      	mov	r0, r3
   32fd8:	e7f8      	b.n	32fcc <smp_pairing_accept_query+0x40>
   32fda:	bf00      	nop
   32fdc:	20003f94 	.word	0x20003f94
   32fe0:	00053c92 	.word	0x00053c92

00032fe4 <smp_pairing_rsp>:
{
   32fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
   32fe8:	688e      	ldr	r6, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   32fea:	78f3      	ldrb	r3, [r6, #3]
   32fec:	3b07      	subs	r3, #7
   32fee:	2b09      	cmp	r3, #9
{
   32ff0:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   32ff2:	f200 8086 	bhi.w	33102 <smp_pairing_rsp+0x11e>
	smp->local_dist &= rsp->init_key_dist;
   32ff6:	7932      	ldrb	r2, [r6, #4]
   32ff8:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
	struct bt_conn *conn = smp->chan.chan.conn;
   32ffc:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	smp->local_dist &= rsp->init_key_dist;
   33000:	4013      	ands	r3, r2
   33002:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   33006:	7972      	ldrb	r2, [r6, #5]
   33008:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   3300c:	4013      	ands	r3, r2
   3300e:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   33012:	2302      	movs	r3, #2
   33014:	7403      	strb	r3, [r0, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   33016:	2206      	movs	r2, #6
   33018:	4631      	mov	r1, r6
   3301a:	3011      	adds	r0, #17
   3301c:	f018 fc35 	bl	4b88a <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   33020:	78b3      	ldrb	r3, [r6, #2]
   33022:	071f      	lsls	r7, r3, #28
   33024:	d506      	bpl.n	33034 <smp_pairing_rsp+0x50>
   33026:	7b23      	ldrb	r3, [r4, #12]
   33028:	071d      	lsls	r5, r3, #28
   3302a:	d503      	bpl.n	33034 <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   3302c:	2105      	movs	r1, #5
   3302e:	1d20      	adds	r0, r4, #4
   33030:	f01b fde7 	bl	4ec02 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   33034:	78b3      	ldrb	r3, [r6, #2]
   33036:	0698      	lsls	r0, r3, #26
   33038:	d506      	bpl.n	33048 <smp_pairing_rsp+0x64>
   3303a:	7b23      	ldrb	r3, [r4, #12]
   3303c:	0699      	lsls	r1, r3, #26
   3303e:	d503      	bpl.n	33048 <smp_pairing_rsp+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   33040:	2114      	movs	r1, #20
   33042:	1d20      	adds	r0, r4, #4
   33044:	f01b fddd 	bl	4ec02 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   33048:	78b3      	ldrb	r3, [r6, #2]
   3304a:	07da      	lsls	r2, r3, #31
   3304c:	d506      	bpl.n	3305c <smp_pairing_rsp+0x78>
   3304e:	7b23      	ldrb	r3, [r4, #12]
   33050:	07db      	lsls	r3, r3, #31
   33052:	d503      	bpl.n	3305c <smp_pairing_rsp+0x78>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   33054:	210d      	movs	r1, #13
   33056:	1d20      	adds	r0, r4, #4
   33058:	f01b fdd3 	bl	4ec02 <atomic_set_bit>
	smp->method = get_pair_method(smp, rsp->io_capability);
   3305c:	7831      	ldrb	r1, [r6, #0]
   3305e:	4620      	mov	r0, r4
   33060:	f7ff fa72 	bl	32548 <get_pair_method>
   33064:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   33066:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   3306a:	4620      	mov	r0, r4
   3306c:	f01b fc8b 	bl	4e986 <update_keys_check>
   33070:	b918      	cbnz	r0, 3307a <smp_pairing_rsp+0x96>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   33072:	2503      	movs	r5, #3
}
   33074:	4628      	mov	r0, r5
   33076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = remote_sec_level_reachable(smp);
   3307a:	4620      	mov	r0, r4
   3307c:	f01b fca4 	bl	4e9c8 <remote_sec_level_reachable>
	if (err) {
   33080:	4605      	mov	r5, r0
   33082:	2800      	cmp	r0, #0
   33084:	d1f6      	bne.n	33074 <smp_pairing_rsp+0x90>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   33086:	1d27      	adds	r7, r4, #4
   33088:	2105      	movs	r1, #5
   3308a:	4638      	mov	r0, r7
   3308c:	f01b fc72 	bl	4e974 <atomic_test_bit>
   33090:	2800      	cmp	r0, #0
   33092:	d0ee      	beq.n	33072 <smp_pairing_rsp+0x8e>
	smp->remote_dist &= RECV_KEYS_SC;
   33094:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	smp->local_dist &= SEND_KEYS_SC;
   33098:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
	smp->remote_dist &= RECV_KEYS_SC;
   3309c:	f003 0302 	and.w	r3, r3, #2
   330a0:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		err = smp_pairing_accept_query(conn, rsp);
   330a4:	4631      	mov	r1, r6
   330a6:	4640      	mov	r0, r8
   330a8:	f7ff ff70 	bl	32f8c <smp_pairing_accept_query>
		if (err) {
   330ac:	4605      	mov	r5, r0
   330ae:	2800      	cmp	r0, #0
   330b0:	d1e0      	bne.n	33074 <smp_pairing_rsp+0x90>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   330b2:	7a23      	ldrb	r3, [r4, #8]
   330b4:	b993      	cbnz	r3, 330dc <smp_pairing_rsp+0xf8>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   330b6:	210f      	movs	r1, #15
   330b8:	4638      	mov	r0, r7
   330ba:	f01b fc5b 	bl	4e974 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   330be:	b168      	cbz	r0, 330dc <smp_pairing_rsp+0xf8>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   330c0:	4e11      	ldr	r6, [pc, #68]	; (33108 <smp_pairing_rsp+0x124>)
   330c2:	6833      	ldr	r3, [r6, #0]
   330c4:	b153      	cbz	r3, 330dc <smp_pairing_rsp+0xf8>
	    bt_auth && bt_auth->pairing_confirm) {
   330c6:	699b      	ldr	r3, [r3, #24]
   330c8:	b143      	cbz	r3, 330dc <smp_pairing_rsp+0xf8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   330ca:	4638      	mov	r0, r7
   330cc:	210a      	movs	r1, #10
   330ce:	f01b fd98 	bl	4ec02 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   330d2:	6833      	ldr	r3, [r6, #0]
   330d4:	4640      	mov	r0, r8
   330d6:	699b      	ldr	r3, [r3, #24]
   330d8:	4798      	blx	r3
		return 0;
   330da:	e7cb      	b.n	33074 <smp_pairing_rsp+0x90>
	if (!sc_public_key) {
   330dc:	4b0b      	ldr	r3, [pc, #44]	; (3310c <smp_pairing_rsp+0x128>)
   330de:	681b      	ldr	r3, [r3, #0]
   330e0:	b923      	cbnz	r3, 330ec <smp_pairing_rsp+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   330e2:	2106      	movs	r1, #6
   330e4:	4638      	mov	r0, r7
   330e6:	f01b fd8c 	bl	4ec02 <atomic_set_bit>
		return 0;
   330ea:	e7c3      	b.n	33074 <smp_pairing_rsp+0x90>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   330ec:	4620      	mov	r0, r4
   330ee:	210c      	movs	r1, #12
   330f0:	f01b fd87 	bl	4ec02 <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   330f4:	210b      	movs	r1, #11
   330f6:	f01b fc8e 	bl	4ea16 <atomic_clear_bit>
}
   330fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   330fe:	f7ff bcdb 	b.w	32ab8 <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   33102:	2506      	movs	r5, #6
   33104:	e7b6      	b.n	33074 <smp_pairing_rsp+0x90>
   33106:	bf00      	nop
   33108:	20003f94 	.word	0x20003f94
   3310c:	20004208 	.word	0x20004208

00033110 <smp_pairing_req>:
{
   33110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   33114:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   33116:	78f3      	ldrb	r3, [r6, #3]
   33118:	3b07      	subs	r3, #7
   3311a:	2b09      	cmp	r3, #9
{
   3311c:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   3311e:	f200 80b9 	bhi.w	33294 <smp_pairing_req+0x184>
	struct bt_conn *conn = smp->chan.chan.conn;
   33122:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   33126:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   3312a:	b15b      	cbz	r3, 33144 <smp_pairing_req+0x34>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   3312c:	1d27      	adds	r7, r4, #4
   3312e:	210f      	movs	r1, #15
   33130:	4638      	mov	r0, r7
   33132:	f01b fc1f 	bl	4e974 <atomic_test_bit>
   33136:	b998      	cbnz	r0, 33160 <smp_pairing_req+0x50>
		int ret = smp_init(smp);
   33138:	4620      	mov	r0, r4
   3313a:	f7ff fba3 	bl	32884 <smp_init>
		if (ret) {
   3313e:	b178      	cbz	r0, 33160 <smp_pairing_req+0x50>
			return ret;
   33140:	b2c5      	uxtb	r5, r0
   33142:	e00a      	b.n	3315a <smp_pairing_req+0x4a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   33144:	f898 0008 	ldrb.w	r0, [r8, #8]
   33148:	f108 0188 	add.w	r1, r8, #136	; 0x88
   3314c:	f000 fa34 	bl	335b8 <bt_keys_get_addr>
   33150:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
   33154:	2800      	cmp	r0, #0
   33156:	d1e9      	bne.n	3312c <smp_pairing_req+0x1c>
			return BT_SMP_ERR_UNSPECIFIED;
   33158:	2508      	movs	r5, #8
}
   3315a:	4628      	mov	r0, r5
   3315c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   33160:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   33162:	2206      	movs	r2, #6
   33164:	4631      	mov	r1, r6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   33166:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   33168:	f104 000a 	add.w	r0, r4, #10
   3316c:	f018 fb8d 	bl	4b88a <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   33170:	2302      	movs	r3, #2
   33172:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   33174:	78b0      	ldrb	r0, [r6, #2]
   33176:	f7ff fa6f 	bl	32658 <get_auth.constprop.0>
   3317a:	74e0      	strb	r0, [r4, #19]
   3317c:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
   3317e:	f7ff f9bd 	bl	324fc <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   33182:	4b45      	ldr	r3, [pc, #276]	; (33298 <smp_pairing_req+0x188>)
	rsp->io_capability = get_io_capa();
   33184:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   33186:	781b      	ldrb	r3, [r3, #0]
   33188:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   3318a:	2310      	movs	r3, #16
   3318c:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   3318e:	7933      	ldrb	r3, [r6, #4]
   33190:	f003 0303 	and.w	r3, r3, #3
   33194:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   33196:	7973      	ldrb	r3, [r6, #5]
   33198:	f003 0301 	and.w	r3, r3, #1
   3319c:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   3319e:	072b      	lsls	r3, r5, #28
   331a0:	d50c      	bpl.n	331bc <smp_pairing_req+0xac>
   331a2:	78b3      	ldrb	r3, [r6, #2]
   331a4:	071d      	lsls	r5, r3, #28
   331a6:	d509      	bpl.n	331bc <smp_pairing_req+0xac>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   331a8:	2105      	movs	r1, #5
   331aa:	4638      	mov	r0, r7
   331ac:	f01b fd29 	bl	4ec02 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   331b0:	7d63      	ldrb	r3, [r4, #21]
   331b2:	f003 0302 	and.w	r3, r3, #2
   331b6:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   331b8:	2300      	movs	r3, #0
   331ba:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   331bc:	7ce3      	ldrb	r3, [r4, #19]
   331be:	0698      	lsls	r0, r3, #26
   331c0:	d506      	bpl.n	331d0 <smp_pairing_req+0xc0>
   331c2:	78b3      	ldrb	r3, [r6, #2]
   331c4:	0699      	lsls	r1, r3, #26
   331c6:	d503      	bpl.n	331d0 <smp_pairing_req+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   331c8:	2114      	movs	r1, #20
   331ca:	4638      	mov	r0, r7
   331cc:	f01b fd19 	bl	4ec02 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   331d0:	7da3      	ldrb	r3, [r4, #22]
   331d2:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   331d6:	7d63      	ldrb	r3, [r4, #21]
   331d8:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   331dc:	7ce3      	ldrb	r3, [r4, #19]
   331de:	07da      	lsls	r2, r3, #31
   331e0:	d506      	bpl.n	331f0 <smp_pairing_req+0xe0>
   331e2:	78b3      	ldrb	r3, [r6, #2]
   331e4:	07db      	lsls	r3, r3, #31
   331e6:	d503      	bpl.n	331f0 <smp_pairing_req+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   331e8:	210d      	movs	r1, #13
   331ea:	4638      	mov	r0, r7
   331ec:	f01b fd09 	bl	4ec02 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   331f0:	2103      	movs	r1, #3
   331f2:	4638      	mov	r0, r7
   331f4:	f01b fd05 	bl	4ec02 <atomic_set_bit>
	smp->method = get_pair_method(smp, req->io_capability);
   331f8:	7831      	ldrb	r1, [r6, #0]
   331fa:	4620      	mov	r0, r4
   331fc:	f7ff f9a4 	bl	32548 <get_pair_method>
   33200:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   33202:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   33206:	4620      	mov	r0, r4
   33208:	f01b fbbd 	bl	4e986 <update_keys_check>
   3320c:	b908      	cbnz	r0, 33212 <smp_pairing_req+0x102>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   3320e:	2503      	movs	r5, #3
   33210:	e7a3      	b.n	3315a <smp_pairing_req+0x4a>
	err = remote_sec_level_reachable(smp);
   33212:	4620      	mov	r0, r4
   33214:	f01b fbd8 	bl	4e9c8 <remote_sec_level_reachable>
	if (err) {
   33218:	4605      	mov	r5, r0
   3321a:	2800      	cmp	r0, #0
   3321c:	d19d      	bne.n	3315a <smp_pairing_req+0x4a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   3321e:	2105      	movs	r1, #5
   33220:	4638      	mov	r0, r7
   33222:	f01b fba7 	bl	4e974 <atomic_test_bit>
   33226:	2800      	cmp	r0, #0
   33228:	d0f1      	beq.n	3320e <smp_pairing_req+0xfe>
		err = smp_pairing_accept_query(conn, req);
   3322a:	4631      	mov	r1, r6
   3322c:	4640      	mov	r0, r8
   3322e:	f7ff fead 	bl	32f8c <smp_pairing_accept_query>
		if (err) {
   33232:	4605      	mov	r5, r0
   33234:	2800      	cmp	r0, #0
   33236:	d190      	bne.n	3315a <smp_pairing_req+0x4a>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   33238:	7a23      	ldrb	r3, [r4, #8]
   3323a:	b993      	cbnz	r3, 33262 <smp_pairing_req+0x152>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   3323c:	210f      	movs	r1, #15
   3323e:	4638      	mov	r0, r7
   33240:	f01b fb98 	bl	4e974 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   33244:	b968      	cbnz	r0, 33262 <smp_pairing_req+0x152>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   33246:	4e15      	ldr	r6, [pc, #84]	; (3329c <smp_pairing_req+0x18c>)
   33248:	6833      	ldr	r3, [r6, #0]
   3324a:	b153      	cbz	r3, 33262 <smp_pairing_req+0x152>
	    bt_auth && bt_auth->pairing_confirm) {
   3324c:	699b      	ldr	r3, [r3, #24]
   3324e:	b143      	cbz	r3, 33262 <smp_pairing_req+0x152>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   33250:	4638      	mov	r0, r7
   33252:	210a      	movs	r1, #10
   33254:	f01b fcd5 	bl	4ec02 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   33258:	6833      	ldr	r3, [r6, #0]
   3325a:	4640      	mov	r0, r8
   3325c:	699b      	ldr	r3, [r3, #24]
   3325e:	4798      	blx	r3
		return 0;
   33260:	e77b      	b.n	3315a <smp_pairing_req+0x4a>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   33262:	210c      	movs	r1, #12
   33264:	4620      	mov	r0, r4
   33266:	f01b fccc 	bl	4ec02 <atomic_set_bit>
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   3326a:	2102      	movs	r1, #2
   3326c:	f01b fd0d 	bl	4ec8a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   33270:	4606      	mov	r6, r0
   33272:	2800      	cmp	r0, #0
   33274:	f43f af70 	beq.w	33158 <smp_pairing_req+0x48>
   33278:	2106      	movs	r1, #6
   3327a:	3008      	adds	r0, #8
   3327c:	f01c fad4 	bl	4f828 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   33280:	f104 0111 	add.w	r1, r4, #17
   33284:	2206      	movs	r2, #6
   33286:	f018 fb00 	bl	4b88a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   3328a:	4631      	mov	r1, r6
   3328c:	4620      	mov	r0, r4
   3328e:	f01b fc1d 	bl	4eacc <smp_send.constprop.0>
	return 0;
   33292:	e762      	b.n	3315a <smp_pairing_req+0x4a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   33294:	2506      	movs	r5, #6
   33296:	e760      	b.n	3315a <smp_pairing_req+0x4a>
   33298:	20006dcf 	.word	0x20006dcf
   3329c:	20003f94 	.word	0x20003f94

000332a0 <smp_pairing_complete>:
{
   332a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   332a2:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   332a6:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   332a8:	1d07      	adds	r7, r0, #4
	if (!status) {
   332aa:	b9e9      	cbnz	r1, 332e8 <smp_pairing_complete+0x48>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   332ac:	210d      	movs	r1, #13
   332ae:	4638      	mov	r0, r7
   332b0:	f01b fb60 	bl	4e974 <atomic_test_bit>
		if (bond_flag) {
   332b4:	4606      	mov	r6, r0
   332b6:	b118      	cbz	r0, 332c0 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   332b8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   332bc:	f000 fabe 	bl	3383c <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   332c0:	4b24      	ldr	r3, [pc, #144]	; (33354 <smp_pairing_complete+0xb4>)
   332c2:	681b      	ldr	r3, [r3, #0]
   332c4:	b123      	cbz	r3, 332d0 <smp_pairing_complete+0x30>
   332c6:	69db      	ldr	r3, [r3, #28]
		    bt_auth && bt_auth->pairing_failed) {
   332c8:	b113      	cbz	r3, 332d0 <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(conn, security_err);
   332ca:	4631      	mov	r1, r6
   332cc:	4620      	mov	r0, r4
   332ce:	4798      	blx	r3
	smp_reset(smp);
   332d0:	4628      	mov	r0, r5
   332d2:	f01b fedc 	bl	4f08e <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   332d6:	7a62      	ldrb	r2, [r4, #9]
   332d8:	7aa3      	ldrb	r3, [r4, #10]
   332da:	429a      	cmp	r2, r3
   332dc:	d039      	beq.n	33352 <smp_pairing_complete+0xb2>
		bt_smp_start_security(conn);
   332de:	4620      	mov	r0, r4
}
   332e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   332e4:	f01b bf80 	b.w	4f1e8 <bt_smp_start_security>
	switch (smp_err) {
   332e8:	3901      	subs	r1, #1
   332ea:	b2c9      	uxtb	r1, r1
   332ec:	290e      	cmp	r1, #14
   332ee:	bf9c      	itt	ls
   332f0:	4b19      	ldrls	r3, [pc, #100]	; (33358 <smp_pairing_complete+0xb8>)
   332f2:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   332f4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   332f8:	bf88      	it	hi
   332fa:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   332fc:	b143      	cbz	r3, 33310 <smp_pairing_complete+0x70>
   332fe:	7b1b      	ldrb	r3, [r3, #12]
   33300:	bb03      	cbnz	r3, 33344 <smp_pairing_complete+0xa4>
			bt_keys_clear(conn->le.keys);
   33302:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   33306:	f000 fa71 	bl	337ec <bt_keys_clear>
			conn->le.keys = NULL;
   3330a:	2300      	movs	r3, #0
   3330c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   33310:	2102      	movs	r1, #2
   33312:	4638      	mov	r0, r7
   33314:	f01b fb2e 	bl	4e974 <atomic_test_bit>
   33318:	b940      	cbnz	r0, 3332c <smp_pairing_complete+0x8c>
	switch (err) {
   3331a:	2e07      	cmp	r6, #7
   3331c:	bf96      	itet	ls
   3331e:	4b0f      	ldrls	r3, [pc, #60]	; (3335c <smp_pairing_complete+0xbc>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   33320:	211f      	movhi	r1, #31
   33322:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   33324:	4632      	mov	r2, r6
   33326:	4620      	mov	r0, r4
   33328:	f7fc fad6 	bl	2f8d8 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   3332c:	2103      	movs	r1, #3
   3332e:	4638      	mov	r0, r7
   33330:	f01b fb20 	bl	4e974 <atomic_test_bit>
   33334:	2800      	cmp	r0, #0
   33336:	d0cb      	beq.n	332d0 <smp_pairing_complete+0x30>
   33338:	4b06      	ldr	r3, [pc, #24]	; (33354 <smp_pairing_complete+0xb4>)
   3333a:	681b      	ldr	r3, [r3, #0]
   3333c:	2b00      	cmp	r3, #0
   3333e:	d0c7      	beq.n	332d0 <smp_pairing_complete+0x30>
		    bt_auth && bt_auth->pairing_failed) {
   33340:	6a1b      	ldr	r3, [r3, #32]
   33342:	e7c1      	b.n	332c8 <smp_pairing_complete+0x28>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   33344:	2102      	movs	r1, #2
   33346:	4638      	mov	r0, r7
   33348:	f01b fb14 	bl	4e974 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   3334c:	2800      	cmp	r0, #0
   3334e:	d1d8      	bne.n	33302 <smp_pairing_complete+0x62>
   33350:	e7de      	b.n	33310 <smp_pairing_complete+0x70>
}
   33352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33354:	20003f94 	.word	0x20003f94
   33358:	00053c83 	.word	0x00053c83
   3335c:	00053c9b 	.word	0x00053c9b

00033360 <bt_smp_recv>:
{
   33360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   33362:	898b      	ldrh	r3, [r1, #12]
{
   33364:	4607      	mov	r7, r0
   33366:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   33368:	b393      	cbz	r3, 333d0 <bt_smp_recv+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
   3336a:	2101      	movs	r1, #1
   3336c:	f105 0008 	add.w	r0, r5, #8
   33370:	f01c fa8b 	bl	4f88a <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   33374:	2104      	movs	r1, #4
   33376:	4606      	mov	r6, r0
   33378:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   3337c:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   33380:	f01b faf8 	bl	4e974 <atomic_test_bit>
   33384:	bb20      	cbnz	r0, 333d0 <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   33386:	7831      	ldrb	r1, [r6, #0]
   33388:	290e      	cmp	r1, #14
   3338a:	d821      	bhi.n	333d0 <bt_smp_recv+0x70>
	if (!handlers[hdr->code].func) {
   3338c:	4f11      	ldr	r7, [pc, #68]	; (333d4 <bt_smp_recv+0x74>)
   3338e:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   33392:	b923      	cbnz	r3, 3339e <bt_smp_recv+0x3e>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   33394:	2107      	movs	r1, #7
		smp_error(smp, err);
   33396:	4620      	mov	r0, r4
   33398:	f01b ffcc 	bl	4f334 <smp_error>
   3339c:	e018      	b.n	333d0 <bt_smp_recv+0x70>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   3339e:	4620      	mov	r0, r4
   333a0:	f01b fe5f 	bl	4f062 <atomic_test_and_clear_bit>
   333a4:	7833      	ldrb	r3, [r6, #0]
   333a6:	b918      	cbnz	r0, 333b0 <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   333a8:	2b05      	cmp	r3, #5
   333aa:	d011      	beq.n	333d0 <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   333ac:	2108      	movs	r1, #8
   333ae:	e7f2      	b.n	33396 <bt_smp_recv+0x36>
	if (buf->len != handlers[hdr->code].expect_len) {
   333b0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   333b4:	89a9      	ldrh	r1, [r5, #12]
   333b6:	7912      	ldrb	r2, [r2, #4]
   333b8:	4291      	cmp	r1, r2
   333ba:	d001      	beq.n	333c0 <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   333bc:	210a      	movs	r1, #10
   333be:	e7ea      	b.n	33396 <bt_smp_recv+0x36>
	err = handlers[hdr->code].func(smp, buf);
   333c0:	4629      	mov	r1, r5
   333c2:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   333c6:	4620      	mov	r0, r4
   333c8:	4798      	blx	r3
	if (err) {
   333ca:	4601      	mov	r1, r0
   333cc:	2800      	cmp	r0, #0
   333ce:	d1e2      	bne.n	33396 <bt_smp_recv+0x36>
}
   333d0:	2000      	movs	r0, #0
   333d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   333d4:	00052384 	.word	0x00052384

000333d8 <bt_smp_pkey_ready>:
{
   333d8:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   333da:	4b16      	ldr	r3, [pc, #88]	; (33434 <bt_smp_pkey_ready+0x5c>)
   333dc:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   333de:	b1f0      	cbz	r0, 3341e <bt_smp_pkey_ready+0x46>
	z_impl_k_sem_give(sem);
   333e0:	4815      	ldr	r0, [pc, #84]	; (33438 <bt_smp_pkey_ready+0x60>)
   333e2:	4c16      	ldr	r4, [pc, #88]	; (3343c <bt_smp_pkey_ready+0x64>)
   333e4:	f014 fc0a 	bl	47bfc <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   333e8:	2500      	movs	r5, #0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   333ea:	2106      	movs	r1, #6
   333ec:	1d20      	adds	r0, r4, #4
   333ee:	f01b fac1 	bl	4e974 <atomic_test_bit>
   333f2:	b178      	cbz	r0, 33414 <bt_smp_pkey_ready+0x3c>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   333f4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   333f8:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
   333fa:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   333fc:	b983      	cbnz	r3, 33420 <bt_smp_pkey_ready+0x48>
			err = sc_send_public_key(smp);
   333fe:	f7ff fb5b 	bl	32ab8 <sc_send_public_key>
			if (err) {
   33402:	4601      	mov	r1, r0
   33404:	b110      	cbz	r0, 3340c <bt_smp_pkey_ready+0x34>
				smp_error(smp, err);
   33406:	4620      	mov	r0, r4
   33408:	f01b ff94 	bl	4f334 <smp_error>
			atomic_set_bit(smp->allowed_cmds,
   3340c:	210c      	movs	r1, #12
   3340e:	4620      	mov	r0, r4
   33410:	f01b fbf7 	bl	4ec02 <atomic_set_bit>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   33414:	3501      	adds	r5, #1
   33416:	2d06      	cmp	r5, #6
   33418:	f504 7402 	add.w	r4, r4, #520	; 0x208
   3341c:	d1e5      	bne.n	333ea <bt_smp_pkey_ready+0x12>
}
   3341e:	bd38      	pop	{r3, r4, r5, pc}
		err = smp_public_key_periph(smp);
   33420:	f7ff fc96 	bl	32d50 <smp_public_key_periph>
		if (err) {
   33424:	4601      	mov	r1, r0
   33426:	2800      	cmp	r0, #0
   33428:	d0f4      	beq.n	33414 <bt_smp_pkey_ready+0x3c>
			smp_error(smp, err);
   3342a:	4620      	mov	r0, r4
   3342c:	f01b ff82 	bl	4f334 <smp_error>
   33430:	e7f0      	b.n	33414 <bt_smp_pkey_ready+0x3c>
   33432:	bf00      	nop
   33434:	20004208 	.word	0x20004208
   33438:	2000100c 	.word	0x2000100c
   3343c:	20002020 	.word	0x20002020

00033440 <smp_pairing_failed>:
{
   33440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   33442:	1d05      	adds	r5, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   33444:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   33448:	688e      	ldr	r6, [r1, #8]
{
   3344a:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   3344c:	210a      	movs	r1, #10
   3344e:	4628      	mov	r0, r5
   33450:	f01b fe07 	bl	4f062 <atomic_test_and_clear_bit>
   33454:	b140      	cbz	r0, 33468 <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
   33456:	4b0b      	ldr	r3, [pc, #44]	; (33484 <smp_pairing_failed+0x44>)
   33458:	681b      	ldr	r3, [r3, #0]
   3345a:	b963      	cbnz	r3, 33476 <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
   3345c:	4620      	mov	r0, r4
   3345e:	7831      	ldrb	r1, [r6, #0]
   33460:	f7ff ff1e 	bl	332a0 <smp_pairing_complete>
}
   33464:	2000      	movs	r0, #0
   33466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   33468:	210b      	movs	r1, #11
   3346a:	4628      	mov	r0, r5
   3346c:	f01b fdf9 	bl	4f062 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   33470:	2800      	cmp	r0, #0
   33472:	d1f0      	bne.n	33456 <smp_pairing_failed+0x16>
   33474:	e7f2      	b.n	3345c <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
   33476:	695b      	ldr	r3, [r3, #20]
   33478:	2b00      	cmp	r3, #0
   3347a:	d0ef      	beq.n	3345c <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
   3347c:	4638      	mov	r0, r7
   3347e:	4798      	blx	r3
   33480:	e7ec      	b.n	3345c <smp_pairing_failed+0x1c>
   33482:	bf00      	nop
   33484:	20003f94 	.word	0x20003f94

00033488 <bt_smp_encrypt_change>:
{
   33488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   3348c:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   3348e:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   33492:	4604      	mov	r4, r0
   33494:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   33496:	4630      	mov	r0, r6
   33498:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   3349a:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   3349e:	f01b fde0 	bl	4f062 <atomic_test_and_clear_bit>
   334a2:	2800      	cmp	r0, #0
   334a4:	d05f      	beq.n	33566 <bt_smp_encrypt_change+0xde>
	if (hci_status) {
   334a6:	b1cf      	cbz	r7, 334dc <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   334a8:	2103      	movs	r1, #3
   334aa:	4630      	mov	r0, r6
   334ac:	f01b fa62 	bl	4e974 <atomic_test_bit>
   334b0:	2800      	cmp	r0, #0
   334b2:	d058      	beq.n	33566 <bt_smp_encrypt_change+0xde>
			uint8_t smp_err = smp_err_get(
   334b4:	4638      	mov	r0, r7
   334b6:	f7fa fc11 	bl	2dcdc <bt_security_err_get>
	switch (auth_err) {
   334ba:	3801      	subs	r0, #1
   334bc:	b2c0      	uxtb	r0, r0
   334be:	2808      	cmp	r0, #8
   334c0:	bf9a      	itte	ls
   334c2:	4b2e      	ldrls	r3, [pc, #184]	; (3357c <bt_smp_encrypt_change+0xf4>)
   334c4:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   334c6:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   334c8:	2102      	movs	r1, #2
   334ca:	4630      	mov	r0, r6
   334cc:	f01b fb99 	bl	4ec02 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   334d0:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   334d2:	4628      	mov	r0, r5
}
   334d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   334d8:	f7ff bee2 	b.w	332a0 <smp_pairing_complete>
	if (!conn->encrypt) {
   334dc:	f898 300b 	ldrb.w	r3, [r8, #11]
   334e0:	2b00      	cmp	r3, #0
   334e2:	d040      	beq.n	33566 <bt_smp_encrypt_change+0xde>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   334e4:	2103      	movs	r1, #3
   334e6:	4630      	mov	r0, r6
   334e8:	f01b fa44 	bl	4e974 <atomic_test_bit>
   334ec:	b920      	cbnz	r0, 334f8 <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   334ee:	4628      	mov	r0, r5
}
   334f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   334f4:	f01b bdcb 	b.w	4f08e <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   334f8:	2105      	movs	r1, #5
   334fa:	4630      	mov	r0, r6
   334fc:	f01b fa3a 	bl	4e974 <atomic_test_bit>
   33500:	b1b8      	cbz	r0, 33532 <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   33502:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   33506:	071f      	lsls	r7, r3, #28
   33508:	d507      	bpl.n	3351a <bt_smp_encrypt_change+0x92>
   3350a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3350e:	0718      	lsls	r0, r3, #28
   33510:	d503      	bpl.n	3351a <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   33512:	2111      	movs	r1, #17
   33514:	4630      	mov	r0, r6
   33516:	f01b fb74 	bl	4ec02 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   3351a:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   3351e:	f023 0308 	bic.w	r3, r3, #8
   33522:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   33526:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3352a:	f023 0308 	bic.w	r3, r3, #8
   3352e:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   33532:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33536:	07d9      	lsls	r1, r3, #31
   33538:	d517      	bpl.n	3356a <bt_smp_encrypt_change+0xe2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   3353a:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   3353c:	4628      	mov	r0, r5
   3353e:	f01b fb60 	bl	4ec02 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   33542:	2102      	movs	r1, #2
   33544:	4630      	mov	r0, r6
   33546:	f01b fb5c 	bl	4ec02 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   3354a:	f898 3003 	ldrb.w	r3, [r8, #3]
   3354e:	b913      	cbnz	r3, 33556 <bt_smp_encrypt_change+0xce>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   33550:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33554:	b93b      	cbnz	r3, 33566 <bt_smp_encrypt_change+0xde>
	struct bt_keys *keys = conn->le.keys;
   33556:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   33558:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   3355c:	b11b      	cbz	r3, 33566 <bt_smp_encrypt_change+0xde>
	if (!smp->local_dist && !smp->remote_dist) {
   3355e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   33562:	2900      	cmp	r1, #0
   33564:	d0b5      	beq.n	334d2 <bt_smp_encrypt_change+0x4a>
}
   33566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   3356a:	079a      	lsls	r2, r3, #30
   3356c:	d501      	bpl.n	33572 <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   3356e:	2108      	movs	r1, #8
   33570:	e7e4      	b.n	3353c <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   33572:	075b      	lsls	r3, r3, #29
   33574:	d5e5      	bpl.n	33542 <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   33576:	210a      	movs	r1, #10
   33578:	e7e0      	b.n	3353c <bt_smp_encrypt_change+0xb4>
   3357a:	bf00      	nop
   3357c:	00053c92 	.word	0x00053c92

00033580 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   33580:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   33582:	4b0a      	ldr	r3, [pc, #40]	; (335ac <bt_smp_init+0x2c>)
   33584:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   33588:	f003 0306 	and.w	r3, r3, #6
   3358c:	2b06      	cmp	r3, #6
   3358e:	4b08      	ldr	r3, [pc, #32]	; (335b0 <bt_smp_init+0x30>)
   33590:	bf0c      	ite	eq
   33592:	2201      	moveq	r2, #1
   33594:	2200      	movne	r2, #0
   33596:	701a      	strb	r2, [r3, #0]
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
   33598:	d104      	bne.n	335a4 <bt_smp_init+0x24>
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   3359a:	4806      	ldr	r0, [pc, #24]	; (335b4 <bt_smp_init+0x34>)
   3359c:	f7fb fd72 	bl	2f084 <bt_pub_key_gen>
	}

	return smp_self_test();
   335a0:	2000      	movs	r0, #0
}
   335a2:	bd08      	pop	{r3, pc}
		return -ENOENT;
   335a4:	f06f 0001 	mvn.w	r0, #1
   335a8:	e7fb      	b.n	335a2 <bt_smp_init+0x22>
   335aa:	bf00      	nop
   335ac:	20000000 	.word	0x20000000
   335b0:	20006dd0 	.word	0x20006dd0
   335b4:	20000668 	.word	0x20000668

000335b8 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   335b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   335bc:	2500      	movs	r5, #0
   335be:	4e1e      	ldr	r6, [pc, #120]	; (33638 <bt_keys_get_addr+0x80>)
{
   335c0:	4680      	mov	r8, r0
   335c2:	460f      	mov	r7, r1
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   335c4:	2406      	movs	r4, #6

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   335c6:	46a9      	mov	r9, r5
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   335c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   335cc:	4543      	cmp	r3, r8
   335ce:	ea4f 1a85 	mov.w	sl, r5, lsl #6
   335d2:	d021      	beq.n	33618 <bt_keys_get_addr+0x60>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   335d4:	2c06      	cmp	r4, #6
   335d6:	d10b      	bne.n	335f0 <bt_keys_get_addr+0x38>
	return memcmp(a, b, sizeof(*a));
   335d8:	2207      	movs	r2, #7
   335da:	4669      	mov	r1, sp
   335dc:	4630      	mov	r0, r6
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   335de:	f8cd 9000 	str.w	r9, [sp]
   335e2:	f8cd 9003 	str.w	r9, [sp, #3]
   335e6:	f018 f940 	bl	4b86a <memcmp>
			first_free_slot = i;
   335ea:	2800      	cmp	r0, #0
   335ec:	bf08      	it	eq
   335ee:	462c      	moveq	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   335f0:	3501      	adds	r5, #1
   335f2:	2d06      	cmp	r5, #6
   335f4:	f106 0640 	add.w	r6, r6, #64	; 0x40
   335f8:	d1e6      	bne.n	335c8 <bt_keys_get_addr+0x10>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   335fa:	2c06      	cmp	r4, #6
   335fc:	d019      	beq.n	33632 <bt_keys_get_addr+0x7a>
		keys = &key_pool[first_free_slot];
   335fe:	480f      	ldr	r0, [pc, #60]	; (3363c <bt_keys_get_addr+0x84>)
   33600:	01a3      	lsls	r3, r4, #6
	memcpy(dst, src, sizeof(*dst));
   33602:	2207      	movs	r2, #7
		keys->id = id;
   33604:	f800 8003 	strb.w	r8, [r0, r3]
		bt_addr_le_copy(&keys->addr, addr);
   33608:	3301      	adds	r3, #1
		keys = &key_pool[first_free_slot];
   3360a:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   3360e:	4639      	mov	r1, r7
   33610:	4418      	add	r0, r3
   33612:	f018 f93a 	bl	4b88a <memcpy>
}
   33616:	e008      	b.n	3362a <bt_keys_get_addr+0x72>
	return memcmp(a, b, sizeof(*a));
   33618:	2207      	movs	r2, #7
   3361a:	4639      	mov	r1, r7
   3361c:	4630      	mov	r0, r6
   3361e:	f018 f924 	bl	4b86a <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   33622:	2800      	cmp	r0, #0
   33624:	d1d6      	bne.n	335d4 <bt_keys_get_addr+0x1c>
		keys = &key_pool[i];
   33626:	4c05      	ldr	r4, [pc, #20]	; (3363c <bt_keys_get_addr+0x84>)
   33628:	4454      	add	r4, sl
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   3362a:	4620      	mov	r0, r4
   3362c:	b002      	add	sp, #8
   3362e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return NULL;
   33632:	2400      	movs	r4, #0
   33634:	e7f9      	b.n	3362a <bt_keys_get_addr+0x72>
   33636:	bf00      	nop
   33638:	2000420d 	.word	0x2000420d
   3363c:	2000420c 	.word	0x2000420c

00033640 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   33640:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   33644:	4c0d      	ldr	r4, [pc, #52]	; (3367c <bt_foreach_bond+0x3c>)
   33646:	4605      	mov	r5, r0
   33648:	460e      	mov	r6, r1
   3364a:	4617      	mov	r7, r2
   3364c:	f504 78c0 	add.w	r8, r4, #384	; 0x180
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   33650:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   33654:	b15b      	cbz	r3, 3366e <bt_foreach_bond+0x2e>
   33656:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   3365a:	42ab      	cmp	r3, r5
   3365c:	d107      	bne.n	3366e <bt_foreach_bond+0x2e>
	memcpy(dst, src, sizeof(*dst));
   3365e:	4621      	mov	r1, r4
   33660:	2207      	movs	r2, #7
   33662:	4668      	mov	r0, sp
   33664:	f018 f911 	bl	4b88a <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   33668:	4639      	mov	r1, r7
   3366a:	4668      	mov	r0, sp
   3366c:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   3366e:	3440      	adds	r4, #64	; 0x40
   33670:	4544      	cmp	r4, r8
   33672:	d1ed      	bne.n	33650 <bt_foreach_bond+0x10>
		}
	}
}
   33674:	b002      	add	sp, #8
   33676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3367a:	bf00      	nop
   3367c:	2000420d 	.word	0x2000420d

00033680 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   33680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33684:	4c08      	ldr	r4, [pc, #32]	; (336a8 <bt_keys_foreach+0x28>)
   33686:	4605      	mov	r5, r0
   33688:	460e      	mov	r6, r1
   3368a:	4617      	mov	r7, r2
   3368c:	f504 78c0 	add.w	r8, r4, #384	; 0x180
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   33690:	89e3      	ldrh	r3, [r4, #14]
   33692:	422b      	tst	r3, r5
   33694:	d002      	beq.n	3369c <bt_keys_foreach+0x1c>
			func(&key_pool[i], data);
   33696:	4639      	mov	r1, r7
   33698:	4620      	mov	r0, r4
   3369a:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   3369c:	3440      	adds	r4, #64	; 0x40
   3369e:	4544      	cmp	r4, r8
   336a0:	d1f6      	bne.n	33690 <bt_keys_foreach+0x10>
		}
	}
}
   336a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   336a6:	bf00      	nop
   336a8:	2000420c 	.word	0x2000420c

000336ac <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   336ac:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   336ae:	4903      	ldr	r1, [pc, #12]	; (336bc <keys_commit+0x10>)
   336b0:	2200      	movs	r2, #0
   336b2:	2002      	movs	r0, #2
   336b4:	f7ff ffe4 	bl	33680 <bt_keys_foreach>
	}

	return 0;
}
   336b8:	2000      	movs	r0, #0
   336ba:	bd08      	pop	{r3, pc}
   336bc:	0004f6a3 	.word	0x0004f6a3

000336c0 <bt_keys_find>:
{
   336c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   336c4:	4c0f      	ldr	r4, [pc, #60]	; (33704 <bt_keys_find+0x44>)
   336c6:	4606      	mov	r6, r0
   336c8:	460f      	mov	r7, r1
   336ca:	4690      	mov	r8, r2
   336cc:	2500      	movs	r5, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   336ce:	f8b4 300d 	ldrh.w	r3, [r4, #13]
   336d2:	4233      	tst	r3, r6
   336d4:	d00d      	beq.n	336f2 <bt_keys_find+0x32>
   336d6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   336da:	42bb      	cmp	r3, r7
   336dc:	d109      	bne.n	336f2 <bt_keys_find+0x32>
	return memcmp(a, b, sizeof(*a));
   336de:	2207      	movs	r2, #7
   336e0:	4641      	mov	r1, r8
   336e2:	4620      	mov	r0, r4
   336e4:	f018 f8c1 	bl	4b86a <memcmp>
   336e8:	b918      	cbnz	r0, 336f2 <bt_keys_find+0x32>
			return &key_pool[i];
   336ea:	4807      	ldr	r0, [pc, #28]	; (33708 <bt_keys_find+0x48>)
   336ec:	4428      	add	r0, r5
}
   336ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   336f2:	3540      	adds	r5, #64	; 0x40
   336f4:	f5b5 7fc0 	cmp.w	r5, #384	; 0x180
   336f8:	f104 0440 	add.w	r4, r4, #64	; 0x40
   336fc:	d1e7      	bne.n	336ce <bt_keys_find+0xe>
	return NULL;
   336fe:	2000      	movs	r0, #0
   33700:	e7f5      	b.n	336ee <bt_keys_find+0x2e>
   33702:	bf00      	nop
   33704:	2000420d 	.word	0x2000420d
   33708:	2000420c 	.word	0x2000420c

0003370c <bt_keys_find_irk>:
{
   3370c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   33710:	780b      	ldrb	r3, [r1, #0]
   33712:	2b01      	cmp	r3, #1
   33714:	4607      	mov	r7, r0
   33716:	460c      	mov	r4, r1
   33718:	d002      	beq.n	33720 <bt_keys_find_irk+0x14>
		return NULL;
   3371a:	2000      	movs	r0, #0
}
   3371c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   33720:	798b      	ldrb	r3, [r1, #6]
   33722:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   33726:	2b40      	cmp	r3, #64	; 0x40
   33728:	d1f7      	bne.n	3371a <bt_keys_find_irk+0xe>
   3372a:	4d1e      	ldr	r5, [pc, #120]	; (337a4 <bt_keys_find_irk+0x98>)
   3372c:	2600      	movs	r6, #0
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   3372e:	f101 0801 	add.w	r8, r1, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   33732:	f835 3c2c 	ldrh.w	r3, [r5, #-44]
   33736:	079a      	lsls	r2, r3, #30
   33738:	d50c      	bpl.n	33754 <bt_keys_find_irk+0x48>
		if (key_pool[i].id == id &&
   3373a:	f815 3c3a 	ldrb.w	r3, [r5, #-58]
   3373e:	42bb      	cmp	r3, r7
   33740:	d108      	bne.n	33754 <bt_keys_find_irk+0x48>
	return memcmp(a, b, sizeof(*a));
   33742:	2206      	movs	r2, #6
   33744:	4629      	mov	r1, r5
   33746:	4640      	mov	r0, r8
   33748:	f018 f88f 	bl	4b86a <memcmp>
   3374c:	b910      	cbnz	r0, 33754 <bt_keys_find_irk+0x48>
			return &key_pool[i];
   3374e:	4816      	ldr	r0, [pc, #88]	; (337a8 <bt_keys_find_irk+0x9c>)
   33750:	4430      	add	r0, r6
   33752:	e7e3      	b.n	3371c <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33754:	3640      	adds	r6, #64	; 0x40
   33756:	f5b6 7fc0 	cmp.w	r6, #384	; 0x180
   3375a:	f105 0540 	add.w	r5, r5, #64	; 0x40
   3375e:	d1e8      	bne.n	33732 <bt_keys_find_irk+0x26>
   33760:	4d12      	ldr	r5, [pc, #72]	; (337ac <bt_keys_find_irk+0xa0>)
   33762:	2600      	movs	r6, #0
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   33764:	3401      	adds	r4, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   33766:	f835 3c1c 	ldrh.w	r3, [r5, #-28]
   3376a:	079b      	lsls	r3, r3, #30
   3376c:	d512      	bpl.n	33794 <bt_keys_find_irk+0x88>
		if (key_pool[i].id != id) {
   3376e:	f815 3c2a 	ldrb.w	r3, [r5, #-42]
   33772:	42bb      	cmp	r3, r7
   33774:	d10e      	bne.n	33794 <bt_keys_find_irk+0x88>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   33776:	4621      	mov	r1, r4
   33778:	4628      	mov	r0, r5
   3377a:	f018 f8e2 	bl	4b942 <bt_rpa_irk_matches>
   3377e:	b148      	cbz	r0, 33794 <bt_keys_find_irk+0x88>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   33780:	4d09      	ldr	r5, [pc, #36]	; (337a8 <bt_keys_find_irk+0x9c>)
   33782:	f106 003a 	add.w	r0, r6, #58	; 0x3a
	memcpy(dst, src, sizeof(*dst));
   33786:	2206      	movs	r2, #6
   33788:	4621      	mov	r1, r4
   3378a:	4428      	add	r0, r5
   3378c:	f018 f87d 	bl	4b88a <memcpy>
			return &key_pool[i];
   33790:	19a8      	adds	r0, r5, r6
   33792:	e7c3      	b.n	3371c <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33794:	3640      	adds	r6, #64	; 0x40
   33796:	f5b6 7fc0 	cmp.w	r6, #384	; 0x180
   3379a:	f105 0540 	add.w	r5, r5, #64	; 0x40
   3379e:	d1e2      	bne.n	33766 <bt_keys_find_irk+0x5a>
   337a0:	e7bb      	b.n	3371a <bt_keys_find_irk+0xe>
   337a2:	bf00      	nop
   337a4:	20004246 	.word	0x20004246
   337a8:	2000420c 	.word	0x2000420c
   337ac:	20004236 	.word	0x20004236

000337b0 <bt_keys_find_addr>:
{
   337b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   337b2:	4d0c      	ldr	r5, [pc, #48]	; (337e4 <bt_keys_find_addr+0x34>)
   337b4:	4606      	mov	r6, r0
   337b6:	460f      	mov	r7, r1
   337b8:	2400      	movs	r4, #0
		if (key_pool[i].id == id &&
   337ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   337be:	42b3      	cmp	r3, r6
   337c0:	d108      	bne.n	337d4 <bt_keys_find_addr+0x24>
	return memcmp(a, b, sizeof(*a));
   337c2:	2207      	movs	r2, #7
   337c4:	4639      	mov	r1, r7
   337c6:	4628      	mov	r0, r5
   337c8:	f018 f84f 	bl	4b86a <memcmp>
   337cc:	b910      	cbnz	r0, 337d4 <bt_keys_find_addr+0x24>
			return &key_pool[i];
   337ce:	4806      	ldr	r0, [pc, #24]	; (337e8 <bt_keys_find_addr+0x38>)
   337d0:	4420      	add	r0, r4
}
   337d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   337d4:	3440      	adds	r4, #64	; 0x40
   337d6:	f5b4 7fc0 	cmp.w	r4, #384	; 0x180
   337da:	f105 0540 	add.w	r5, r5, #64	; 0x40
   337de:	d1ec      	bne.n	337ba <bt_keys_find_addr+0xa>
	return NULL;
   337e0:	2000      	movs	r0, #0
   337e2:	e7f6      	b.n	337d2 <bt_keys_find_addr+0x22>
   337e4:	2000420d 	.word	0x2000420d
   337e8:	2000420c 	.word	0x2000420c

000337ec <bt_keys_clear>:
{
   337ec:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   337ee:	7a03      	ldrb	r3, [r0, #8]
   337f0:	075b      	lsls	r3, r3, #29
{
   337f2:	b08c      	sub	sp, #48	; 0x30
   337f4:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   337f6:	d501      	bpl.n	337fc <bt_keys_clear+0x10>
		bt_id_del(keys);
   337f8:	f7fa fd44 	bl	2e284 <bt_id_del>
		if (keys->id) {
   337fc:	4625      	mov	r5, r4
   337fe:	f815 2b01 	ldrb.w	r2, [r5], #1
   33802:	b1b2      	cbz	r2, 33832 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   33804:	ae02      	add	r6, sp, #8
   33806:	2104      	movs	r1, #4
   33808:	4630      	mov	r0, r6
   3380a:	f015 fe80 	bl	4950e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   3380e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   33810:	4a09      	ldr	r2, [pc, #36]	; (33838 <bt_keys_clear+0x4c>)
   33812:	462b      	mov	r3, r5
   33814:	2124      	movs	r1, #36	; 0x24
   33816:	a803      	add	r0, sp, #12
   33818:	f7f9 fc6c 	bl	2d0f4 <bt_settings_encode_key>
		settings_delete(key);
   3381c:	a803      	add	r0, sp, #12
   3381e:	f016 fd41 	bl	4a2a4 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   33822:	2240      	movs	r2, #64	; 0x40
   33824:	2100      	movs	r1, #0
   33826:	4620      	mov	r0, r4
}
   33828:	b00c      	add	sp, #48	; 0x30
   3382a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   3382e:	f018 b837 	b.w	4b8a0 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   33832:	9200      	str	r2, [sp, #0]
   33834:	e7ec      	b.n	33810 <bt_keys_clear+0x24>
   33836:	bf00      	nop
   33838:	00053ccf 	.word	0x00053ccf

0003383c <bt_keys_store>:
{
   3383c:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   3383e:	4605      	mov	r5, r0
{
   33840:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   33842:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   33846:	4604      	mov	r4, r0
	if (keys->id) {
   33848:	b19a      	cbz	r2, 33872 <bt_keys_store+0x36>
		u8_to_dec(id, sizeof(id), keys->id);
   3384a:	ae02      	add	r6, sp, #8
   3384c:	2104      	movs	r1, #4
   3384e:	4630      	mov	r0, r6
   33850:	f015 fe5d 	bl	4950e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   33854:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   33856:	462b      	mov	r3, r5
   33858:	a803      	add	r0, sp, #12
   3385a:	4a07      	ldr	r2, [pc, #28]	; (33878 <bt_keys_store+0x3c>)
   3385c:	2124      	movs	r1, #36	; 0x24
   3385e:	f7f9 fc49 	bl	2d0f4 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   33862:	2234      	movs	r2, #52	; 0x34
   33864:	f104 010c 	add.w	r1, r4, #12
   33868:	a803      	add	r0, sp, #12
   3386a:	f7f8 fa5f 	bl	2bd2c <settings_save_one>
}
   3386e:	b00c      	add	sp, #48	; 0x30
   33870:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   33872:	9200      	str	r2, [sp, #0]
   33874:	e7ef      	b.n	33856 <bt_keys_store+0x1a>
   33876:	bf00      	nop
   33878:	00053ccf 	.word	0x00053ccf

0003387c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   3387c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33880:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   33882:	1dc2      	adds	r2, r0, #7
   33884:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   33888:	1e75      	subs	r5, r6, #1
{
   3388a:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   3388c:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   3388e:	6018      	str	r0, [r3, #0]
{
   33890:	b082      	sub	sp, #8
   33892:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   33894:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   33896:	2100      	movs	r1, #0
   33898:	2204      	movs	r2, #4
   3389a:	fb07 0005 	mla	r0, r7, r5, r0
   3389e:	f017 ffff 	bl	4b8a0 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   338a2:	b1bd      	cbz	r5, 338d4 <mem_init+0x58>
   338a4:	3e02      	subs	r6, #2
   338a6:	b2b6      	uxth	r6, r6
   338a8:	fb06 7307 	mla	r3, r6, r7, r7
   338ac:	fb06 f807 	mul.w	r8, r6, r7
   338b0:	441c      	add	r4, r3
   338b2:	eba8 0803 	sub.w	r8, r8, r3
   338b6:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   338b8:	2204      	movs	r2, #4
   338ba:	eb04 0008 	add.w	r0, r4, r8
   338be:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   338c2:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   338c4:	f017 ffe1 	bl	4b88a <memcpy>
	while (mem_count--) {
   338c8:	42b5      	cmp	r5, r6
   338ca:	eba4 0407 	sub.w	r4, r4, r7
   338ce:	f105 0501 	add.w	r5, r5, #1
   338d2:	d1f1      	bne.n	338b8 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   338d4:	b002      	add	sp, #8
   338d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   338da:	bf00      	nop

000338dc <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   338dc:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   338de:	6805      	ldr	r5, [r0, #0]
{
   338e0:	b082      	sub	sp, #8
	if (*mem_head) {
   338e2:	b195      	cbz	r5, 3390a <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   338e4:	1deb      	adds	r3, r5, #7
   338e6:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   338ea:	2204      	movs	r2, #4
   338ec:	4604      	mov	r4, r0
   338ee:	4629      	mov	r1, r5
   338f0:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   338f4:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   338f6:	f017 ffc8 	bl	4b88a <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   338fa:	9b01      	ldr	r3, [sp, #4]
   338fc:	b123      	cbz	r3, 33908 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   338fe:	1dda      	adds	r2, r3, #7
   33900:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   33904:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   33906:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   33908:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   3390a:	4628      	mov	r0, r5
   3390c:	b002      	add	sp, #8
   3390e:	bd70      	pop	{r4, r5, r6, pc}

00033910 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   33910:	680b      	ldr	r3, [r1, #0]
{
   33912:	b570      	push	{r4, r5, r6, lr}
   33914:	460c      	mov	r4, r1
   33916:	4605      	mov	r5, r0
	if (*mem_head) {
   33918:	b183      	cbz	r3, 3393c <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   3391a:	3307      	adds	r3, #7
   3391c:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   33920:	881e      	ldrh	r6, [r3, #0]
   33922:	3601      	adds	r6, #1
   33924:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   33926:	2204      	movs	r2, #4
   33928:	4621      	mov	r1, r4
   3392a:	4628      	mov	r0, r5
   3392c:	f017 ffad 	bl	4b88a <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   33930:	1deb      	adds	r3, r5, #7
   33932:	f023 0303 	bic.w	r3, r3, #3
   33936:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   33938:	6025      	str	r5, [r4, #0]
}
   3393a:	bd70      	pop	{r4, r5, r6, pc}
   3393c:	2601      	movs	r6, #1
   3393e:	e7f2      	b.n	33926 <mem_release+0x16>

00033940 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   33940:	fb02 0001 	mla	r0, r2, r1, r0
   33944:	4770      	bx	lr
   33946:	bf00      	nop

00033948 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   33948:	1a40      	subs	r0, r0, r1
   3394a:	b280      	uxth	r0, r0
}
   3394c:	fbb0 f0f2 	udiv	r0, r0, r2
   33950:	4770      	bx	lr
   33952:	bf00      	nop

00033954 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   33954:	1e53      	subs	r3, r2, #1
	src += len;
   33956:	4411      	add	r1, r2
	while (len--) {
   33958:	b29b      	uxth	r3, r3
   3395a:	b142      	cbz	r2, 3396e <mem_rcopy+0x1a>
   3395c:	43db      	mvns	r3, r3
   3395e:	3801      	subs	r0, #1
   33960:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   33962:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   33966:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   3396a:	4291      	cmp	r1, r2
   3396c:	d1f9      	bne.n	33962 <mem_rcopy+0xe>
	}
}
   3396e:	4770      	bx	lr

00033970 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   33970:	4401      	add	r1, r0
   33972:	e002      	b.n	3397a <mem_nz+0xa>
		if (*src++) {
   33974:	f810 3b01 	ldrb.w	r3, [r0], #1
   33978:	b91b      	cbnz	r3, 33982 <mem_nz+0x12>
	while (len--) {
   3397a:	4288      	cmp	r0, r1
   3397c:	d1fa      	bne.n	33974 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   3397e:	2000      	movs	r0, #0
   33980:	4770      	bx	lr
			return 1;
   33982:	2001      	movs	r0, #1
}
   33984:	4770      	bx	lr
   33986:	bf00      	nop

00033988 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   33988:	6010      	str	r0, [r2, #0]
   3398a:	6008      	str	r0, [r1, #0]

	return link;
}
   3398c:	4770      	bx	lr
   3398e:	bf00      	nop

00033990 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   33990:	680a      	ldr	r2, [r1, #0]
{
   33992:	4603      	mov	r3, r0
	if (*head != *tail) {
   33994:	6800      	ldr	r0, [r0, #0]
   33996:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   33998:	bf05      	ittet	eq
   3399a:	2200      	moveq	r2, #0
   3399c:	600a      	streq	r2, [r1, #0]
		return NULL;
   3399e:	2000      	movne	r0, #0
	*head = *tail = NULL;
   339a0:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   339a2:	4770      	bx	lr

000339a4 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   339a4:	f8d2 c000 	ldr.w	ip, [r2]
   339a8:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   339ac:	f8d2 c000 	ldr.w	ip, [r2]
   339b0:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   339b4:	6010      	str	r0, [r2, #0]

	return link;
}
   339b6:	4770      	bx	lr

000339b8 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   339b8:	4288      	cmp	r0, r1
   339ba:	d003      	beq.n	339c4 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   339bc:	b11a      	cbz	r2, 339c6 <memq_peek+0xe>
		*mem = head->mem;
   339be:	6843      	ldr	r3, [r0, #4]
   339c0:	6013      	str	r3, [r2, #0]
   339c2:	4770      	bx	lr
		return NULL;
   339c4:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   339c6:	4770      	bx	lr

000339c8 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   339c8:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   339ca:	4283      	cmp	r3, r0
   339cc:	d009      	beq.n	339e2 <memq_dequeue+0x1a>
	if (mem) {
   339ce:	b12a      	cbz	r2, 339dc <memq_dequeue+0x14>
		*mem = head->mem;
   339d0:	6858      	ldr	r0, [r3, #4]
   339d2:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   339d4:	681a      	ldr	r2, [r3, #0]
   339d6:	600a      	str	r2, [r1, #0]

	return old_head;
}
   339d8:	4618      	mov	r0, r3
   339da:	4770      	bx	lr
	if (old_head == NULL) {
   339dc:	2b00      	cmp	r3, #0
   339de:	d1f9      	bne.n	339d4 <memq_dequeue+0xc>
   339e0:	e7fa      	b.n	339d8 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   339e2:	2300      	movs	r3, #0
   339e4:	e7f8      	b.n	339d8 <memq_dequeue+0x10>
   339e6:	bf00      	nop

000339e8 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   339e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   339ec:	f8df 8030 	ldr.w	r8, [pc, #48]	; 33a20 <mayfly_init+0x38>
   339f0:	4e0c      	ldr	r6, [pc, #48]	; (33a24 <mayfly_init+0x3c>)
   339f2:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   339f4:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   339f8:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   339fa:	1d22      	adds	r2, r4, #4
   339fc:	4621      	mov	r1, r4
   339fe:	4628      	mov	r0, r5
		while (caller_id--) {
   33a00:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   33a02:	f7ff ffc1 	bl	33988 <memq_init>
		while (caller_id--) {
   33a06:	42b4      	cmp	r4, r6
   33a08:	f1a5 0508 	sub.w	r5, r5, #8
   33a0c:	d1f5      	bne.n	339fa <mayfly_init+0x12>
	while (callee_id--) {
   33a0e:	3f04      	subs	r7, #4
   33a10:	1d3b      	adds	r3, r7, #4
   33a12:	f1a8 0820 	sub.w	r8, r8, #32
   33a16:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   33a1a:	d1eb      	bne.n	339f4 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   33a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33a20:	20004404 	.word	0x20004404
   33a24:	20004494 	.word	0x20004494

00033a28 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   33a28:	b410      	push	{r4}
   33a2a:	4603      	mov	r3, r0
   33a2c:	468c      	mov	ip, r1
	if (enable) {
   33a2e:	b19a      	cbz	r2, 33a58 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   33a30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   33a34:	4814      	ldr	r0, [pc, #80]	; (33a88 <mayfly_enable+0x60>)
   33a36:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   33a3a:	0109      	lsls	r1, r1, #4
   33a3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   33a40:	4401      	add	r1, r0
   33a42:	7a48      	ldrb	r0, [r1, #9]
   33a44:	7a0c      	ldrb	r4, [r1, #8]
   33a46:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   33a48:	bf04      	itt	eq
   33a4a:	3001      	addeq	r0, #1
   33a4c:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   33a4e:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   33a50:	4661      	mov	r1, ip
   33a52:	4618      	mov	r0, r3
   33a54:	f00f ba64 	b.w	42f20 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   33a58:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   33a5c:	4c0a      	ldr	r4, [pc, #40]	; (33a88 <mayfly_enable+0x60>)
   33a5e:	0112      	lsls	r2, r2, #4
   33a60:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   33a64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   33a68:	4423      	add	r3, r4
   33a6a:	7a9c      	ldrb	r4, [r3, #10]
   33a6c:	7ada      	ldrb	r2, [r3, #11]
   33a6e:	42a2      	cmp	r2, r4
   33a70:	d001      	beq.n	33a76 <mayfly_enable+0x4e>
}
   33a72:	bc10      	pop	{r4}
   33a74:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   33a76:	3201      	adds	r2, #1
   33a78:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   33a7a:	4b04      	ldr	r3, [pc, #16]	; (33a8c <mayfly_enable+0x64>)
   33a7c:	2201      	movs	r2, #1
   33a7e:	545a      	strb	r2, [r3, r1]
}
   33a80:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   33a82:	f00f baa3 	b.w	42fcc <mayfly_pend>
   33a86:	bf00      	nop
   33a88:	20004410 	.word	0x20004410
   33a8c:	2000440c 	.word	0x2000440c

00033a90 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   33a90:	b570      	push	{r4, r5, r6, lr}
   33a92:	4606      	mov	r6, r0
   33a94:	461c      	mov	r4, r3
   33a96:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   33a98:	b322      	cbz	r2, 33ae4 <mayfly_enqueue+0x54>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   33a9a:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   33a9c:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   33a9e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   33aa0:	f012 0203 	ands.w	r2, r2, #3
   33aa4:	d005      	beq.n	33ab2 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
   33aa6:	2a01      	cmp	r2, #1
   33aa8:	d040      	beq.n	33b2c <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
   33aaa:	3301      	adds	r3, #1
   33aac:	b2db      	uxtb	r3, r3
   33aae:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   33ab0:	e00f      	b.n	33ad2 <mayfly_enqueue+0x42>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   33ab2:	3301      	adds	r3, #1
   33ab4:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   33ab6:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   33ab8:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   33aba:	2304      	movs	r3, #4
   33abc:	fb11 3105 	smlabb	r1, r1, r5, r3
   33ac0:	4a1b      	ldr	r2, [pc, #108]	; (33b30 <mayfly_enqueue+0xa0>)
   33ac2:	6860      	ldr	r0, [r4, #4]
   33ac4:	230c      	movs	r3, #12
   33ac6:	fb13 1306 	smlabb	r3, r3, r6, r1
   33aca:	441a      	add	r2, r3
   33acc:	4621      	mov	r1, r4
   33ace:	f7ff ff69 	bl	339a4 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   33ad2:	4b18      	ldr	r3, [pc, #96]	; (33b34 <mayfly_enqueue+0xa4>)
   33ad4:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   33ad6:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   33ad8:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   33ada:	4629      	mov	r1, r5
   33adc:	f00f fa76 	bl	42fcc <mayfly_pend>

	return 0;
   33ae0:	2000      	movs	r0, #0
}
   33ae2:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   33ae4:	f00f fa5c 	bl	42fa0 <mayfly_prio_is_equal>
   33ae8:	2800      	cmp	r0, #0
   33aea:	d0d6      	beq.n	33a9a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   33aec:	4629      	mov	r1, r5
   33aee:	4630      	mov	r0, r6
   33af0:	f00f fa36 	bl	42f60 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   33af4:	2800      	cmp	r0, #0
   33af6:	d0d0      	beq.n	33a9a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   33af8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   33afc:	4a0c      	ldr	r2, [pc, #48]	; (33b30 <mayfly_enqueue+0xa0>)
   33afe:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   33b02:	011b      	lsls	r3, r3, #4
   33b04:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   33b08:	4413      	add	r3, r2
		!mayfly_is_enabled(caller_id, callee_id) ||
   33b0a:	7a9a      	ldrb	r2, [r3, #10]
   33b0c:	7adb      	ldrb	r3, [r3, #11]
   33b0e:	429a      	cmp	r2, r3
   33b10:	d1c3      	bne.n	33a9a <mayfly_enqueue+0xa>
	state = (m->_req - ack) & 0x03;
   33b12:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   33b14:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   33b16:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   33b18:	0792      	lsls	r2, r2, #30
   33b1a:	d002      	beq.n	33b22 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
   33b1c:	3302      	adds	r3, #2
   33b1e:	b2db      	uxtb	r3, r3
   33b20:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   33b22:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   33b26:	4798      	blx	r3
		return 0;
   33b28:	2000      	movs	r0, #0
}
   33b2a:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   33b2c:	4610      	mov	r0, r2
}
   33b2e:	bd70      	pop	{r4, r5, r6, pc}
   33b30:	20004410 	.word	0x20004410
   33b34:	2000440c 	.word	0x2000440c

00033b38 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   33b38:	4a50      	ldr	r2, [pc, #320]	; (33c7c <mayfly_run+0x144>)
   33b3a:	5c13      	ldrb	r3, [r2, r0]
   33b3c:	2b00      	cmp	r3, #0
   33b3e:	f000 8093 	beq.w	33c68 <mayfly_run+0x130>
{
   33b42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   33b46:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   33b48:	4f4d      	ldr	r7, [pc, #308]	; (33c80 <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
   33b4a:	5413      	strb	r3, [r2, r0]
{
   33b4c:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   33b4e:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   33b50:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   33b54:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   33b58:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   33b5c:	9303      	str	r3, [sp, #12]
   33b5e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   33b62:	f10b 0804 	add.w	r8, fp, #4
   33b66:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   33b6a:	f04f 0903 	mov.w	r9, #3

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   33b6e:	463e      	mov	r6, r7
		struct mayfly *m = 0;
   33b70:	2300      	movs	r3, #0
		link = memq_peek(mft[callee_id][caller_id].head,
   33b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   33b74:	f856 0f24 	ldr.w	r0, [r6, #36]!
		struct mayfly *m = 0;
   33b78:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   33b7a:	aa05      	add	r2, sp, #20
   33b7c:	f7ff ff1c 	bl	339b8 <memq_peek>
   33b80:	4683      	mov	fp, r0
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   33b82:	f1bb 0f00 	cmp.w	fp, #0
   33b86:	d035      	beq.n	33bf4 <mayfly_run+0xbc>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   33b88:	9c05      	ldr	r4, [sp, #20]
   33b8a:	7863      	ldrb	r3, [r4, #1]
   33b8c:	7825      	ldrb	r5, [r4, #0]
   33b8e:	1aed      	subs	r5, r5, r3
   33b90:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   33b94:	2d01      	cmp	r5, #1
   33b96:	d106      	bne.n	33ba6 <mayfly_run+0x6e>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   33b98:	3b01      	subs	r3, #1
   33b9a:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   33b9c:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   33ba0:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   33ba2:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   33ba4:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   33ba6:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   33ba8:	1ac3      	subs	r3, r0, r3
   33baa:	f003 0303 	and.w	r3, r3, #3
   33bae:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   33bb0:	f04f 0200 	mov.w	r2, #0
   33bb4:	4631      	mov	r1, r6
	req = m->_req;
   33bb6:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   33bba:	d00f      	beq.n	33bdc <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
   33bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   33bbe:	f7ff ff03 	bl	339c8 <memq_dequeue>
		ack = m->_ack;
   33bc2:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   33bc6:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   33bc8:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   33bcc:	eba3 030c 	sub.w	r3, r3, ip
   33bd0:	f003 0303 	and.w	r3, r3, #3
   33bd4:	2b01      	cmp	r3, #1
		m->_ack = req;
   33bd6:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   33bda:	d030      	beq.n	33c3e <mayfly_run+0x106>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   33bdc:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   33be0:	aa05      	add	r2, sp, #20
   33be2:	f7ff fee9 	bl	339b8 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   33be6:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   33be8:	4683      	mov	fp, r0
			if (state == 1U) {
   33bea:	d1ca      	bne.n	33b82 <mayfly_run+0x4a>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
   33bec:	f1b9 0f00 	cmp.w	r9, #0
   33bf0:	d12d      	bne.n	33c4e <mayfly_run+0x116>
   33bf2:	bb60      	cbnz	r0, 33c4e <mayfly_run+0x116>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   33bf4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   33bf8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   33bfc:	429a      	cmp	r2, r3
   33bfe:	d003      	beq.n	33c08 <mayfly_run+0xd0>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   33c00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   33c04:	2301      	movs	r3, #1
   33c06:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   33c08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   33c0c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   33c10:	429a      	cmp	r2, r3
   33c12:	d003      	beq.n	33c1c <mayfly_run+0xe4>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   33c14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   33c18:	2301      	movs	r3, #1
   33c1a:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   33c1c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   33c20:	fa5f f989 	uxtb.w	r9, r9
   33c24:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   33c28:	f1a7 070c 	sub.w	r7, r7, #12
   33c2c:	d19f      	bne.n	33b6e <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   33c2e:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   33c32:	b10b      	cbz	r3, 33c38 <mayfly_run+0x100>
   33c34:	9b03      	ldr	r3, [sp, #12]
   33c36:	b1c3      	cbz	r3, 33c6a <mayfly_run+0x132>
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
   33c38:	b007      	add	sp, #28
   33c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   33c3e:	4642      	mov	r2, r8
   33c40:	4621      	mov	r1, r4
   33c42:	4658      	mov	r0, fp
			m->_ack = ack;
   33c44:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   33c48:	f7ff feac 	bl	339a4 <memq_enqueue>
   33c4c:	e7c6      	b.n	33bdc <mayfly_run+0xa4>
					mfp[callee_id] = 1U;
   33c4e:	f8dd a008 	ldr.w	sl, [sp, #8]
   33c52:	4a0a      	ldr	r2, [pc, #40]	; (33c7c <mayfly_run+0x144>)
   33c54:	2301      	movs	r3, #1
   33c56:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   33c5a:	4651      	mov	r1, sl
   33c5c:	4650      	mov	r0, sl
   33c5e:	f00f f9b5 	bl	42fcc <mayfly_pend>
}
   33c62:	b007      	add	sp, #28
   33c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c68:	4770      	bx	lr
		mayfly_enable_cb(callee_id, callee_id, 0);
   33c6a:	461a      	mov	r2, r3
   33c6c:	4651      	mov	r1, sl
   33c6e:	4650      	mov	r0, sl
}
   33c70:	b007      	add	sp, #28
   33c72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   33c76:	f00f b953 	b.w	42f20 <mayfly_enable_cb>
   33c7a:	bf00      	nop
   33c7c:	2000440c 	.word	0x2000440c
   33c80:	20004410 	.word	0x20004410

00033c84 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   33c84:	1e4b      	subs	r3, r1, #1
   33c86:	b2db      	uxtb	r3, r3
   33c88:	b171      	cbz	r1, 33ca8 <util_ones_count_get+0x24>
   33c8a:	1e41      	subs	r1, r0, #1
   33c8c:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   33c90:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   33c92:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   33c96:	b123      	cbz	r3, 33ca2 <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   33c98:	1e5a      	subs	r2, r3, #1
			one_count++;
   33c9a:	3001      	adds	r0, #1
		while (bite) {
   33c9c:	4013      	ands	r3, r2
			one_count++;
   33c9e:	b2c0      	uxtb	r0, r0
		while (bite) {
   33ca0:	d1fa      	bne.n	33c98 <util_ones_count_get+0x14>
	while (octets_len--) {
   33ca2:	4561      	cmp	r1, ip
   33ca4:	d1f5      	bne.n	33c92 <util_ones_count_get+0xe>
   33ca6:	4770      	bx	lr
	uint8_t one_count = 0U;
   33ca8:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   33caa:	4770      	bx	lr

00033cac <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   33cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   33cb0:	4e4a      	ldr	r6, [pc, #296]	; (33ddc <util_aa_le32+0x130>)
{
   33cb2:	b082      	sub	sp, #8
   33cb4:	4680      	mov	r8, r0
   33cb6:	2703      	movs	r7, #3
	consecutive_cnt = 1U;
   33cb8:	2501      	movs	r5, #1
   33cba:	ac02      	add	r4, sp, #8
	lll_csrand_get(dst, sizeof(uint32_t));
   33cbc:	2104      	movs	r1, #4
   33cbe:	4640      	mov	r0, r8
   33cc0:	f00c f912 	bl	3fee8 <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   33cc4:	f8d8 0000 	ldr.w	r0, [r8]
	consecutive_bit = (aa >> bit_idx) & 0x01;
   33cc8:	231e      	movs	r3, #30
   33cca:	ea4f 79d0 	mov.w	r9, r0, lsr #31
	transitions = 0U;
   33cce:	f04f 0c00 	mov.w	ip, #0
	consecutive_cnt = 1U;
   33cd2:	f04f 0a01 	mov.w	sl, #1
   33cd6:	e00e      	b.n	33cf6 <util_aa_le32+0x4a>
			transitions++;
   33cd8:	f10c 0101 	add.w	r1, ip, #1
   33cdc:	b2c9      	uxtb	r1, r1
			consecutive_cnt = 1U;
   33cde:	f04f 0e01 	mov.w	lr, #1
		    ((consecutive_cnt < 6) &&
   33ce2:	2b1c      	cmp	r3, #28
   33ce4:	d972      	bls.n	33dcc <util_aa_le32+0x120>
   33ce6:	468c      	mov	ip, r1
		if ((transitions > 24) ||
   33ce8:	f1bc 0f19 	cmp.w	ip, #25
		bit = (aa >> bit_idx) & 0x01;
   33cec:	4691      	mov	r9, r2
   33cee:	46f2      	mov	sl, lr
		if ((transitions > 24) ||
   33cf0:	d022      	beq.n	33d38 <util_aa_le32+0x8c>
	while (bit_idx--) {
   33cf2:	3b01      	subs	r3, #1
   33cf4:	d328      	bcc.n	33d48 <util_aa_le32+0x9c>
		bit = (aa >> bit_idx) & 0x01;
   33cf6:	fa20 f203 	lsr.w	r2, r0, r3
   33cfa:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   33cfe:	4591      	cmp	r9, r2
   33d00:	d1ea      	bne.n	33cd8 <util_aa_le32+0x2c>
			consecutive_cnt++;
   33d02:	f10a 0e01 	add.w	lr, sl, #1
   33d06:	fa5f fe8e 	uxtb.w	lr, lr
		if ((consecutive_cnt > 6) ||
   33d0a:	f1be 0f06 	cmp.w	lr, #6
   33d0e:	d946      	bls.n	33d9e <util_aa_le32+0xf2>
   33d10:	4661      	mov	r1, ip
			if (consecutive_bit) {
   33d12:	2a00      	cmp	r2, #0
   33d14:	d03d      	beq.n	33d92 <util_aa_le32+0xe6>
				aa &= ~BIT(bit_idx);
   33d16:	fa05 f203 	lsl.w	r2, r5, r3
   33d1a:	ea20 0002 	bic.w	r0, r0, r2
				consecutive_bit = 0U;
   33d1e:	f04f 0900 	mov.w	r9, #0
			if (transitions != transitions_prev) {
   33d22:	4561      	cmp	r1, ip
   33d24:	d1e5      	bne.n	33cf2 <util_aa_le32+0x46>
				transitions++;
   33d26:	f10c 0c01 	add.w	ip, ip, #1
   33d2a:	fa5f fc8c 	uxtb.w	ip, ip
		if ((transitions > 24) ||
   33d2e:	f1bc 0f19 	cmp.w	ip, #25
				consecutive_cnt = 1U;
   33d32:	f04f 0a01 	mov.w	sl, #1
		if ((transitions > 24) ||
   33d36:	d1dc      	bne.n	33cf2 <util_aa_le32+0x46>
				aa &= ~(BIT(bit_idx + 1) - 1);
   33d38:	3301      	adds	r3, #1
   33d3a:	fa05 f303 	lsl.w	r3, r5, r3
			if (consecutive_bit) {
   33d3e:	f1b9 0f00 	cmp.w	r9, #0
   33d42:	d031      	beq.n	33da8 <util_aa_le32+0xfc>
				aa &= ~(BIT(bit_idx + 1) - 1);
   33d44:	425b      	negs	r3, r3
   33d46:	4018      	ands	r0, r3
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   33d48:	ea80 0306 	eor.w	r3, r0, r6
   33d4c:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   33d4e:	f10d 0c04 	add.w	ip, sp, #4
	uint8_t one_count = 0U;
   33d52:	2200      	movs	r2, #0
		bite = *octets;
   33d54:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   33d58:	b123      	cbz	r3, 33d64 <util_aa_le32+0xb8>
			bite &= (bite - 1);
   33d5a:	1e59      	subs	r1, r3, #1
			one_count++;
   33d5c:	3201      	adds	r2, #1
		while (bite) {
   33d5e:	400b      	ands	r3, r1
			one_count++;
   33d60:	b2d2      	uxtb	r2, r2
		while (bite) {
   33d62:	d1fa      	bne.n	33d5a <util_aa_le32+0xae>
	while (octets_len--) {
   33d64:	4564      	cmp	r4, ip
   33d66:	d1f5      	bne.n	33d54 <util_aa_le32+0xa8>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   33d68:	2a01      	cmp	r2, #1
   33d6a:	d909      	bls.n	33d80 <util_aa_le32+0xd4>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   33d6c:	b283      	uxth	r3, r0
   33d6e:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   33d72:	ea4f 4210 	mov.w	r2, r0, lsr #16
   33d76:	d11a      	bne.n	33dae <util_aa_le32+0x102>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   33d78:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   33d7a:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   33d7e:	d116      	bne.n	33dae <util_aa_le32+0x102>
	if (!retry) {
   33d80:	3f01      	subs	r7, #1
   33d82:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   33d86:	d199      	bne.n	33cbc <util_aa_le32+0x10>
		return -EFAULT;
   33d88:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   33d8c:	b002      	add	sp, #8
   33d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				aa |= BIT(bit_idx);
   33d92:	fa05 f203 	lsl.w	r2, r5, r3
   33d96:	4310      	orrs	r0, r2
				consecutive_bit = 1U;
   33d98:	f04f 0901 	mov.w	r9, #1
   33d9c:	e7c1      	b.n	33d22 <util_aa_le32+0x76>
   33d9e:	bf08      	it	eq
   33da0:	46f2      	moveq	sl, lr
		if ((consecutive_cnt > 6) ||
   33da2:	d0a6      	beq.n	33cf2 <util_aa_le32+0x46>
   33da4:	4661      	mov	r1, ip
   33da6:	e79c      	b.n	33ce2 <util_aa_le32+0x36>
				aa |= (BIT(bit_idx + 1) - 1);
   33da8:	3b01      	subs	r3, #1
   33daa:	4318      	orrs	r0, r3
   33dac:	e7cc      	b.n	33d48 <util_aa_le32+0x9c>
	dst[1] = val >> 8;
   33dae:	f3c0 2107 	ubfx	r1, r0, #8, #8
   33db2:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
   33db4:	f888 0000 	strb.w	r0, [r8]
	return 0;
   33db8:	2000      	movs	r0, #0
	dst[1] = val >> 8;
   33dba:	f888 1001 	strb.w	r1, [r8, #1]
	dst[0] = val;
   33dbe:	f888 2002 	strb.w	r2, [r8, #2]
	dst[1] = val >> 8;
   33dc2:	f888 3003 	strb.w	r3, [r8, #3]
}
   33dc6:	b002      	add	sp, #8
   33dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		     (((bit_idx < 29) && (transitions < 1)) ||
   33dcc:	2900      	cmp	r1, #0
   33dce:	d0a0      	beq.n	33d12 <util_aa_le32+0x66>
   33dd0:	2b1b      	cmp	r3, #27
   33dd2:	d888      	bhi.n	33ce6 <util_aa_le32+0x3a>
		      ((bit_idx < 28) && (transitions < 2))))) {
   33dd4:	2901      	cmp	r1, #1
   33dd6:	d886      	bhi.n	33ce6 <util_aa_le32+0x3a>
   33dd8:	e79b      	b.n	33d12 <util_aa_le32+0x66>
   33dda:	bf00      	nop
   33ddc:	8e89bed6 	.word	0x8e89bed6

00033de0 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   33de0:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   33de2:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   33de4:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   33de6:	2bff      	cmp	r3, #255	; 0xff
   33de8:	d014      	beq.n	33e14 <ticker_dequeue+0x34>
		ticker_current = &node[current];
   33dea:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   33dee:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   33df0:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   33df4:	d028      	beq.n	33e48 <ticker_dequeue+0x68>
	total = 0U;
   33df6:	f04f 0c00 	mov.w	ip, #0
   33dfa:	e001      	b.n	33e00 <ticker_dequeue+0x20>
		if (current == id) {
   33dfc:	4299      	cmp	r1, r3
   33dfe:	d00b      	beq.n	33e18 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   33e00:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   33e02:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   33e04:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   33e06:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   33e08:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   33e0c:	44a4      	add	ip, r4
		ticker_current = &node[current];
   33e0e:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   33e12:	d1f3      	bne.n	33dfc <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   33e14:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   33e16:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   33e18:	4571      	cmp	r1, lr
   33e1a:	d018      	beq.n	33e4e <ticker_dequeue+0x6e>
		instance->ticker_id_head = ticker_current->next;
   33e1c:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   33e1e:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   33e20:	fa0f fe8e 	sxth.w	lr, lr
   33e24:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   33e28:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   33e2c:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   33e30:	7813      	ldrb	r3, [r2, #0]
   33e32:	2bff      	cmp	r3, #255	; 0xff
   33e34:	d006      	beq.n	33e44 <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
   33e36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   33e3a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   33e3e:	689a      	ldr	r2, [r3, #8]
   33e40:	4402      	add	r2, r0
   33e42:	609a      	str	r2, [r3, #8]
	return (total + timeout);
   33e44:	4460      	add	r0, ip
}
   33e46:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
   33e48:	469e      	mov	lr, r3
	total = 0U;
   33e4a:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   33e4e:	7813      	ldrb	r3, [r2, #0]
   33e50:	7743      	strb	r3, [r0, #29]
   33e52:	e7e4      	b.n	33e1e <ticker_dequeue+0x3e>

00033e54 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   33e54:	eba2 0c01 	sub.w	ip, r2, r1
   33e58:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   33e5c:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   33e5e:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   33e60:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   33e62:	d10a      	bne.n	33e7a <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   33e64:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   33e68:	4463      	add	r3, ip
	if (ticks_to_expire > ticks_to_expire_minus) {
   33e6a:	42a3      	cmp	r3, r4
   33e6c:	d914      	bls.n	33e98 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   33e6e:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   33e70:	2400      	movs	r4, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   33e72:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   33e74:	6083      	str	r3, [r0, #8]
}
   33e76:	bc10      	pop	{r4}
   33e78:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   33e7a:	1a89      	subs	r1, r1, r2
   33e7c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   33e80:	428b      	cmp	r3, r1
   33e82:	d806      	bhi.n	33e92 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   33e84:	440c      	add	r4, r1
   33e86:	1ae4      	subs	r4, r4, r3
		ticks_to_expire = 0U;
   33e88:	2300      	movs	r3, #0
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   33e8a:	6144      	str	r4, [r0, #20]
	ticker->ticks_to_expire = ticks_to_expire;
   33e8c:	6083      	str	r3, [r0, #8]
}
   33e8e:	bc10      	pop	{r4}
   33e90:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   33e92:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   33e94:	42a3      	cmp	r3, r4
   33e96:	d8ea      	bhi.n	33e6e <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   33e98:	1ae4      	subs	r4, r4, r3
   33e9a:	e7f5      	b.n	33e88 <ticks_to_expire_prep+0x34>

00033e9c <ticker_job_list_insert>:
{
   33e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ea0:	b087      	sub	sp, #28
   33ea2:	4603      	mov	r3, r0
	count_user = instance->count_user;
   33ea4:	7a42      	ldrb	r2, [r0, #9]
{
   33ea6:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   33ea8:	6800      	ldr	r0, [r0, #0]
   33eaa:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   33eac:	6858      	ldr	r0, [r3, #4]
   33eae:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   33eb0:	2a00      	cmp	r2, #0
   33eb2:	f000 80f7 	beq.w	340a4 <ticker_job_list_insert+0x208>
   33eb6:	1e53      	subs	r3, r2, #1
   33eb8:	b2db      	uxtb	r3, r3
   33eba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   33ebe:	4688      	mov	r8, r1
   33ec0:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   33ec2:	9b03      	ldr	r3, [sp, #12]
   33ec4:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   33ec6:	785f      	ldrb	r7, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   33ec8:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   33eca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   33ece:	d05e      	beq.n	33f8e <ticker_job_list_insert+0xf2>
				ticker = &node[id_insert];
   33ed0:	9b02      	ldr	r3, [sp, #8]
   33ed2:	eb08 0448 	add.w	r4, r8, r8, lsl #1
   33ed6:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   33eda:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   33ede:	4646      	mov	r6, r8
	ticker->req = ticker->ack + 1;
   33ee0:	78a2      	ldrb	r2, [r4, #2]
				insert_head = ticker->next;
   33ee2:	f813 800a 	ldrb.w	r8, [r3, sl]
	ticker->req = ticker->ack + 1;
   33ee6:	9200      	str	r2, [sp, #0]
				user_op = NULL;
   33ee8:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   33eea:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   33eec:	f04f 09ff 	mov.w	r9, #255	; 0xff
   33ef0:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   33ef4:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   33ef8:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   33efa:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   33efe:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   33f00:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   33f04:	d10f      	bne.n	33f26 <ticker_job_list_insert+0x8a>
   33f06:	e0c9      	b.n	3409c <ticker_job_list_insert+0x200>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   33f08:	1a09      	subs	r1, r1, r0
   33f0a:	d106      	bne.n	33f1a <ticker_job_list_insert+0x7e>
   33f0c:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   33f10:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   33f14:	45e2      	cmp	sl, ip
   33f16:	f200 8084 	bhi.w	34022 <ticker_job_list_insert+0x186>
		current = ticker_current->next;
   33f1a:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   33f1e:	2bff      	cmp	r3, #255	; 0xff
   33f20:	4691      	mov	r9, r2
   33f22:	d070      	beq.n	34006 <ticker_job_list_insert+0x16a>
   33f24:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   33f26:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   33f2a:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   33f2e:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   33f30:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   33f34:	4281      	cmp	r1, r0
   33f36:	d2e7      	bcs.n	33f08 <ticker_job_list_insert+0x6c>
	if (previous == TICKER_NULL) {
   33f38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   33f3c:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   33f40:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   33f44:	d164      	bne.n	34010 <ticker_job_list_insert+0x174>
		instance->ticker_id_head = id;
   33f46:	9b01      	ldr	r3, [sp, #4]
   33f48:	775e      	strb	r6, [r3, #29]
	if (current != TICKER_NULL) {
   33f4a:	2aff      	cmp	r2, #255	; 0xff
   33f4c:	d006      	beq.n	33f5c <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   33f4e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   33f52:	eb0e 1202 	add.w	r2, lr, r2, lsl #4
   33f56:	6893      	ldr	r3, [r2, #8]
   33f58:	1a5b      	subs	r3, r3, r1
   33f5a:	6093      	str	r3, [r2, #8]
	ticker->req = ticker->ack + 1;
   33f5c:	9b00      	ldr	r3, [sp, #0]
   33f5e:	3301      	adds	r3, #1
   33f60:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   33f62:	2d00      	cmp	r5, #0
   33f64:	d0b1      	beq.n	33eca <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   33f66:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   33f6a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   33f6c:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   33f6e:	2200      	movs	r2, #0
   33f70:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   33f72:	b113      	cbz	r3, 33f7a <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   33f74:	6b29      	ldr	r1, [r5, #48]	; 0x30
   33f76:	4610      	mov	r0, r2
   33f78:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   33f7a:	6863      	ldr	r3, [r4, #4]
   33f7c:	2b00      	cmp	r3, #0
   33f7e:	d1a4      	bne.n	33eca <ticker_job_list_insert+0x2e>
					ticker->op_context =
   33f80:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   33f84:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
					ticker->op_context =
   33f88:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   33f8c:	d1a0      	bne.n	33ed0 <ticker_job_list_insert+0x34>
   33f8e:	9b03      	ldr	r3, [sp, #12]
   33f90:	7898      	ldrb	r0, [r3, #2]
   33f92:	42b8      	cmp	r0, r7
   33f94:	d02f      	beq.n	33ff6 <ticker_job_list_insert+0x15a>
   33f96:	e9dd b903 	ldrd	fp, r9, [sp, #12]
   33f9a:	9c02      	ldr	r4, [sp, #8]
				if (first == user->count_user_op) {
   33f9c:	f89b 2000 	ldrb.w	r2, [fp]
				user_op = &user_ops[user_ops_first];
   33fa0:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   33fa4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   33fa8:	eb09 0583 	add.w	r5, r9, r3, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   33fac:	f819 c023 	ldrb.w	ip, [r9, r3, lsl #2]
				id_insert = user_op->id;
   33fb0:	786e      	ldrb	r6, [r5, #1]
				first = user_ops_first + 1;
   33fb2:	3701      	adds	r7, #1
   33fb4:	b2ff      	uxtb	r7, r7
					first = 0U;
   33fb6:	42ba      	cmp	r2, r7
   33fb8:	bf08      	it	eq
   33fba:	2700      	moveq	r7, #0
				ticker = &node[id_insert];
   33fbc:	eb06 0246 	add.w	r2, r6, r6, lsl #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   33fc0:	f1bc 0f04 	cmp.w	ip, #4
				ticker = &node[id_insert];
   33fc4:	eb04 1102 	add.w	r1, r4, r2, lsl #4
   33fc8:	ea4f 1a02 	mov.w	sl, r2, lsl #4
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   33fcc:	d111      	bne.n	33ff2 <ticker_job_list_insert+0x156>
				      ticker->ack) & 0xff) != 0U) {
   33fce:	7888      	ldrb	r0, [r1, #2]
				if (((ticker->req -
   33fd0:	784a      	ldrb	r2, [r1, #1]
   33fd2:	1a12      	subs	r2, r2, r0
   33fd4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   33fd8:	d025      	beq.n	34026 <ticker_job_list_insert+0x18a>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   33fda:	f04f 0200 	mov.w	r2, #0
   33fde:	f809 2023 	strb.w	r2, [r9, r3, lsl #2]
	if (user_op->fp_op_func) {
   33fe2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   33fe4:	2001      	movs	r0, #1
	user_op->status = status;
   33fe6:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   33fe8:	b10b      	cbz	r3, 33fee <ticker_job_list_insert+0x152>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   33fea:	6b29      	ldr	r1, [r5, #48]	; 0x30
   33fec:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   33fee:	f89b 0002 	ldrb.w	r0, [fp, #2]
   33ff2:	42b8      	cmp	r0, r7
   33ff4:	d1d2      	bne.n	33f9c <ticker_job_list_insert+0x100>
	while (count_user--) {
   33ff6:	9a03      	ldr	r2, [sp, #12]
   33ff8:	9905      	ldr	r1, [sp, #20]
   33ffa:	4291      	cmp	r1, r2
   33ffc:	f1a2 0308 	sub.w	r3, r2, #8
   34000:	d050      	beq.n	340a4 <ticker_job_list_insert+0x208>
   34002:	9303      	str	r3, [sp, #12]
   34004:	e75d      	b.n	33ec2 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   34006:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   3400a:	f88b 3000 	strb.w	r3, [fp]
   3400e:	461a      	mov	r2, r3
		node[previous].next = id;
   34010:	fa0f f989 	sxth.w	r9, r9
   34014:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   34018:	ea4f 1909 	mov.w	r9, r9, lsl #4
   3401c:	f80e 6009 	strb.w	r6, [lr, r9]
   34020:	e793      	b.n	33f4a <ticker_job_list_insert+0xae>
   34022:	4601      	mov	r1, r0
   34024:	e788      	b.n	33f38 <ticker_job_list_insert+0x9c>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   34026:	8aab      	ldrh	r3, [r5, #20]
   34028:	9000      	str	r0, [sp, #0]
   3402a:	460c      	mov	r4, r1
   3402c:	f64f 70fe 	movw	r0, #65534	; 0xfffe
				ticker_job_op_start(ticker, user_op,
   34030:	9901      	ldr	r1, [sp, #4]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   34032:	4283      	cmp	r3, r0
				ticker_job_op_start(ticker, user_op,
   34034:	6949      	ldr	r1, [r1, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   34036:	d02a      	beq.n	3408e <ticker_job_list_insert+0x1f2>
		ticker->must_expire =
   34038:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3403c:	1a9a      	subs	r2, r3, r2
   3403e:	fab2 f282 	clz	r2, r2
   34042:	0952      	lsrs	r2, r2, #5
   34044:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   34048:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   3404a:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   3404c:	68ea      	ldr	r2, [r5, #12]
   3404e:	6062      	str	r2, [r4, #4]
	ticker->lazy_periodic =
   34050:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   34054:	4293      	cmp	r3, r2
   34056:	bf88      	it	hi
   34058:	2300      	movhi	r3, #0
	ticker->remainder_periodic = start->remainder_periodic;
   3405a:	692a      	ldr	r2, [r5, #16]
	ticker->lazy_periodic =
   3405c:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   3405e:	69ab      	ldr	r3, [r5, #24]
   34060:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   34062:	69eb      	ldr	r3, [r5, #28]
   34064:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   34066:	6a2b      	ldr	r3, [r5, #32]
   34068:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   3406a:	68ab      	ldr	r3, [r5, #8]
   3406c:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   3406e:	2300      	movs	r3, #0
	ticker->remainder_periodic = start->remainder_periodic;
   34070:	6222      	str	r2, [r4, #32]
	ticker->ticks_to_expire_minus = 0U;
   34072:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   34074:	686a      	ldr	r2, [r5, #4]
   34076:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   34078:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   3407a:	f7ff feeb 	bl	33e54 <ticks_to_expire_prep>
	ticker->force = 1U;
   3407e:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   34082:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   34086:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   3408a:	70e3      	strb	r3, [r4, #3]
}
   3408c:	e72d      	b.n	33eea <ticker_job_list_insert+0x4e>
	ticker->lazy_periodic =
   3408e:	4613      	mov	r3, r2
	ticker->ext_data = start->ext_data;
   34090:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   34092:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   34094:	68ea      	ldr	r2, [r5, #12]
   34096:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   34098:	692a      	ldr	r2, [r5, #16]
	ticker->lazy_periodic =
   3409a:	e7df      	b.n	3405c <ticker_job_list_insert+0x1c0>
	ticker_new->next = current;
   3409c:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   340a0:	775e      	strb	r6, [r3, #29]
	if (current != TICKER_NULL) {
   340a2:	e75b      	b.n	33f5c <ticker_job_list_insert+0xc0>
}
   340a4:	b007      	add	sp, #28
   340a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   340aa:	bf00      	nop

000340ac <ticker_worker>:
{
   340ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   340b0:	7f82      	ldrb	r2, [r0, #30]
{
   340b2:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
   340b4:	2301      	movs	r3, #1
	if (instance->job_guard) {
   340b6:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   340b8:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   340ba:	2a00      	cmp	r2, #0
   340bc:	d15a      	bne.n	34174 <ticker_worker+0xc8>
	if (instance->ticker_id_head == TICKER_NULL) {
   340be:	7f43      	ldrb	r3, [r0, #29]
   340c0:	2bff      	cmp	r3, #255	; 0xff
   340c2:	4682      	mov	sl, r0
   340c4:	d055      	beq.n	34172 <ticker_worker+0xc6>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   340c6:	f00e fa2b 	bl	42520 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   340ca:	f8da 2014 	ldr.w	r2, [sl, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   340ce:	f89a 301c 	ldrb.w	r3, [sl, #28]
	ticker_id_head = instance->ticker_id_head;
   340d2:	f89a 701d 	ldrb.w	r7, [sl, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   340d6:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   340d8:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   340da:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   340de:	f000 8123 	beq.w	34328 <ticker_worker+0x27c>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   340e2:	f8da 3018 	ldr.w	r3, [sl, #24]
	uint8_t slot_reserved = 0;
   340e6:	4543      	cmp	r3, r8
   340e8:	bf94      	ite	ls
   340ea:	2300      	movls	r3, #0
   340ec:	2301      	movhi	r3, #1
   340ee:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   340f0:	2fff      	cmp	r7, #255	; 0xff
	node = &instance->nodes[0];
   340f2:	f8da b000 	ldr.w	fp, [sl]
	ticks_expired = 0U;
   340f6:	f04f 0900 	mov.w	r9, #0
	while (ticker_id_head != TICKER_NULL) {
   340fa:	d044      	beq.n	34186 <ticker_worker+0xda>
			must_expire_skip = 1U;
   340fc:	f8cd a010 	str.w	sl, [sp, #16]
		ticker = &node[ticker_id_head];
   34100:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   34104:	eb0b 1407 	add.w	r4, fp, r7, lsl #4
   34108:	013f      	lsls	r7, r7, #4
		ticks_to_expire = ticker->ticks_to_expire;
   3410a:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   3410c:	4543      	cmp	r3, r8
   3410e:	d838      	bhi.n	34182 <ticker_worker+0xd6>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   34110:	78a2      	ldrb	r2, [r4, #2]
		ticker_id_head = ticker->next;
   34112:	f81b 7007 	ldrb.w	r7, [fp, r7]
		ticks_elapsed -= ticks_to_expire;
   34116:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
   3411a:	4499      	add	r9, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   3411c:	7863      	ldrb	r3, [r4, #1]
   3411e:	1a9b      	subs	r3, r3, r2
   34120:	b2db      	uxtb	r3, r3
   34122:	2b01      	cmp	r3, #1
   34124:	d12b      	bne.n	3417e <ticker_worker+0xd2>
		if (ticker->ticks_slot != 0U &&
   34126:	f8d4 a018 	ldr.w	sl, [r4, #24]
   3412a:	f1ba 0f00 	cmp.w	sl, #0
   3412e:	d052      	beq.n	341d6 <ticker_worker+0x12a>
   34130:	9b03      	ldr	r3, [sp, #12]
   34132:	2b00      	cmp	r3, #0
   34134:	d04a      	beq.n	341cc <ticker_worker+0x120>
		int32_t lazy_current = ticker->lazy_current;
   34136:	8be3      	ldrh	r3, [r4, #30]
   34138:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   3413a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   3413c:	b13b      	cbz	r3, 3414e <ticker_worker+0xa2>
   3413e:	6819      	ldr	r1, [r3, #0]
   34140:	b119      	cbz	r1, 3414a <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   34142:	7a19      	ldrb	r1, [r3, #8]
   34144:	2900      	cmp	r1, #0
   34146:	f000 80d9 	beq.w	342fc <ticker_worker+0x250>
				ext_data->reschedule_state =
   3414a:	2100      	movs	r1, #0
   3414c:	7219      	strb	r1, [r3, #8]
			ticker->lazy_current++;
   3414e:	9905      	ldr	r1, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   34150:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   34154:	3101      	adds	r1, #1
   34156:	b289      	uxth	r1, r1
   34158:	83e1      	strh	r1, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   3415a:	b170      	cbz	r0, 3417a <ticker_worker+0xce>
   3415c:	8ba0      	ldrh	r0, [r4, #28]
   3415e:	4288      	cmp	r0, r1
   34160:	d20b      	bcs.n	3417a <ticker_worker+0xce>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   34162:	2b00      	cmp	r3, #0
   34164:	f000 80e3 	beq.w	3432e <ticker_worker+0x282>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   34168:	7a19      	ldrb	r1, [r3, #8]
   3416a:	2901      	cmp	r1, #1
   3416c:	d005      	beq.n	3417a <ticker_worker+0xce>
			must_expire_skip = 1U;
   3416e:	2601      	movs	r6, #1
   34170:	e034      	b.n	341dc <ticker_worker+0x130>
		instance->worker_trigger = 0U;
   34172:	77c2      	strb	r2, [r0, #31]
}
   34174:	b00d      	add	sp, #52	; 0x34
   34176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   3417a:	3a01      	subs	r2, #1
   3417c:	70a2      	strb	r2, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   3417e:	2fff      	cmp	r7, #255	; 0xff
   34180:	d1be      	bne.n	34100 <ticker_worker+0x54>
   34182:	f8dd a010 	ldr.w	sl, [sp, #16]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   34186:	f89a 300b 	ldrb.w	r3, [sl, #11]
   3418a:	f89a 200a 	ldrb.w	r2, [sl, #10]
   3418e:	429a      	cmp	r2, r3
   34190:	d10a      	bne.n	341a8 <ticker_worker+0xfc>
	uint8_t idx = *ticks_elapsed_index + 1;
   34192:	3201      	adds	r2, #1
   34194:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   34196:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   34198:	bf1c      	itt	ne
   3419a:	4613      	movne	r3, r2
   3419c:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
   3419e:	9a06      	ldr	r2, [sp, #24]
   341a0:	f88a 200b 	strb.w	r2, [sl, #11]
   341a4:	bf08      	it	eq
   341a6:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   341a8:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   341ac:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   341b0:	f8c3 900c 	str.w	r9, [r3, #12]
	instance->worker_trigger = 0U;
   341b4:	2200      	movs	r2, #0
   341b6:	f88a 201f 	strb.w	r2, [sl, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   341ba:	4653      	mov	r3, sl
   341bc:	2201      	movs	r2, #1
   341be:	2104      	movs	r1, #4
   341c0:	2003      	movs	r0, #3
   341c2:	46a4      	mov	ip, r4
}
   341c4:	b00d      	add	sp, #52	; 0x34
   341c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   341ca:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   341cc:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   341d0:	9307      	str	r3, [sp, #28]
   341d2:	3380      	adds	r3, #128	; 0x80
   341d4:	d13c      	bne.n	34250 <ticker_worker+0x1a4>
		if (ticker->ext_data) {
   341d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   341d8:	b1db      	cbz	r3, 34212 <ticker_worker+0x166>
   341da:	2600      	movs	r6, #0
			ticker->ext_data->ticks_drift = 0U;
   341dc:	2000      	movs	r0, #0
			ticker->ext_data->reschedule_state =
   341de:	7218      	strb	r0, [r3, #8]
		if (ticker->timeout_func) {
   341e0:	68e5      	ldr	r5, [r4, #12]
			ticks_drift = ticker->ext_data->ticks_drift;
   341e2:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   341e4:	6058      	str	r0, [r3, #4]
		ticker->ack--;
   341e6:	3a01      	subs	r2, #1
   341e8:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   341ea:	2d00      	cmp	r5, #0
   341ec:	d0c7      	beq.n	3417e <ticker_worker+0xd2>
					   ticks_expired -
   341ee:	9b04      	ldr	r3, [sp, #16]
   341f0:	6960      	ldr	r0, [r4, #20]
   341f2:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   341f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
					   ticks_expired -
   341f6:	eba9 0000 	sub.w	r0, r9, r0
   341fa:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   341fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   34200:	b1b6      	cbz	r6, 34230 <ticker_worker+0x184>
   34202:	6923      	ldr	r3, [r4, #16]
   34204:	9301      	str	r3, [sp, #4]
   34206:	78e3      	ldrb	r3, [r4, #3]
   34208:	9300      	str	r3, [sp, #0]
   3420a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3420e:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34210:	e7b5      	b.n	3417e <ticker_worker+0xd2>
		if (ticker->timeout_func) {
   34212:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   34214:	3a01      	subs	r2, #1
   34216:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   34218:	2d00      	cmp	r5, #0
   3421a:	d0b0      	beq.n	3417e <ticker_worker+0xd2>
			ticks_drift = 0U;
   3421c:	4619      	mov	r1, r3
					   ticks_expired -
   3421e:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   34220:	6a62      	ldr	r2, [r4, #36]	; 0x24
					   ticks_expired -
   34222:	eba9 0003 	sub.w	r0, r9, r3
   34226:	9b04      	ldr	r3, [sp, #16]
   34228:	695b      	ldr	r3, [r3, #20]
   3422a:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   3422c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   34230:	6926      	ldr	r6, [r4, #16]
   34232:	8be3      	ldrh	r3, [r4, #30]
   34234:	9601      	str	r6, [sp, #4]
   34236:	78e6      	ldrb	r6, [r4, #3]
   34238:	9600      	str	r6, [sp, #0]
   3423a:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   3423c:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   3423e:	2b00      	cmp	r3, #0
   34240:	9b03      	ldr	r3, [sp, #12]
   34242:	bf18      	it	ne
   34244:	2301      	movne	r3, #1
   34246:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
   34248:	2300      	movs	r3, #0
   3424a:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   3424c:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   3424e:	e796      	b.n	3417e <ticker_worker+0xd2>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   34250:	2fff      	cmp	r7, #255	; 0xff
   34252:	d0c0      	beq.n	341d6 <ticker_worker+0x12a>
		int32_t lazy_current = ticker->lazy_current;
   34254:	8be1      	ldrh	r1, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   34256:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   34258:	6865      	ldr	r5, [r4, #4]
				(lazy_current - ticker->priority);
   3425a:	9807      	ldr	r0, [sp, #28]
		int32_t lazy_current = ticker->lazy_current;
   3425c:	9105      	str	r1, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   3425e:	4299      	cmp	r1, r3
			lazy_current -= ticker->lazy_periodic;
   34260:	bf28      	it	cs
   34262:	1ac9      	subcs	r1, r1, r3
		uint32_t current_age = ticker->ticks_periodic +
   34264:	fb01 5e05 	mla	lr, r1, r5, r5
				(lazy_current - ticker->priority);
   34268:	1a09      	subs	r1, r1, r0
		uint32_t acc_ticks_to_expire = 0U;
   3426a:	e9cd 8909 	strd	r8, r9, [sp, #36]	; 0x24
		uint32_t current_age = ticker->ticks_periodic +
   3426e:	463b      	mov	r3, r7
		uint32_t acc_ticks_to_expire = 0U;
   34270:	970b      	str	r7, [sp, #44]	; 0x2c
   34272:	46f1      	mov	r9, lr
   34274:	2600      	movs	r6, #0
   34276:	9208      	str	r2, [sp, #32]
   34278:	46a4      	mov	ip, r4
   3427a:	462f      	mov	r7, r5
   3427c:	468e      	mov	lr, r1
			struct ticker_node *ticker_next = &nodes[id_head];
   3427e:	b21b      	sxth	r3, r3
   34280:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   34284:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
   34288:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   3428a:	6891      	ldr	r1, [r2, #8]
   3428c:	440e      	add	r6, r1
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   3428e:	45b2      	cmp	sl, r6
   34290:	d32e      	bcc.n	342f0 <ticker_worker+0x244>
			if (ticker_next->ticks_slot == 0U) {
   34292:	6990      	ldr	r0, [r2, #24]
   34294:	b340      	cbz	r0, 342e8 <ticker_worker+0x23c>
			int32_t lazy_next = ticker_next->lazy_current;
   34296:	8bd0      	ldrh	r0, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   34298:	8b95      	ldrh	r5, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   3429a:	6854      	ldr	r4, [r2, #4]
			if (!lazy_next_periodic_skip) {
   3429c:	42a8      	cmp	r0, r5
			int32_t lazy_next = ticker_next->lazy_current;
   3429e:	4680      	mov	r8, r0
				lazy_next -= ticker_next->lazy_periodic;
   342a0:	bf28      	it	cs
   342a2:	eba0 0805 	subcs.w	r8, r0, r5
					  0U :
   342a6:	2c00      	cmp	r4, #0
   342a8:	d034      	beq.n	34314 <ticker_worker+0x268>
   342aa:	1a61      	subs	r1, r4, r1
				(ticker->ticks_periodic == 0U) ||
   342ac:	b37f      	cbz	r7, 3430e <ticker_worker+0x262>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   342ae:	fb04 1108 	mla	r1, r4, r8, r1
				(ticker->ticks_periodic == 0U) ||
   342b2:	4589      	cmp	r9, r1
   342b4:	bf8c      	ite	hi
   342b6:	2101      	movhi	r1, #1
   342b8:	2100      	movls	r1, #0
					(ticker->ticks_periodic != 0U) &&
   342ba:	bf34      	ite	cc
   342bc:	2401      	movcc	r4, #1
   342be:	2400      	movcs	r4, #0
			if (!lazy_next_periodic_skip &&
   342c0:	42a8      	cmp	r0, r5
   342c2:	d311      	bcc.n	342e8 <ticker_worker+0x23c>
   342c4:	78d5      	ldrb	r5, [r2, #3]
   342c6:	f89c 0003 	ldrb.w	r0, [ip, #3]
   342ca:	4285      	cmp	r5, r0
   342cc:	d826      	bhi.n	3431c <ticker_worker+0x270>
				ticker_next->priority;
   342ce:	f992 202d 	ldrsb.w	r2, [r2, #45]	; 0x2d
			    (next_force ||
   342d2:	f112 0f80 	cmn.w	r2, #128	; 0x80
   342d6:	d021      	beq.n	3431c <ticker_worker+0x270>
				(lazy_next - ticker_next->priority) >
   342d8:	eba8 0802 	sub.w	r8, r8, r2
			     next_is_critical ||
   342dc:	45f0      	cmp	r8, lr
   342de:	dd00      	ble.n	342e2 <ticker_worker+0x236>
			     (next_has_priority && !current_is_older) ||
   342e0:	b1e1      	cbz	r1, 3431c <ticker_worker+0x270>
   342e2:	9907      	ldr	r1, [sp, #28]
   342e4:	4291      	cmp	r1, r2
   342e6:	d017      	beq.n	34318 <ticker_worker+0x26c>
			id_head = ticker_next->next;
   342e8:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
   342ec:	2bff      	cmp	r3, #255	; 0xff
   342ee:	d1c6      	bne.n	3427e <ticker_worker+0x1d2>
   342f0:	e9dd 8909 	ldrd	r8, r9, [sp, #36]	; 0x24
   342f4:	9a08      	ldr	r2, [sp, #32]
   342f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   342f8:	4664      	mov	r4, ip
   342fa:	e76c      	b.n	341d6 <ticker_worker+0x12a>
			    TICKER_RESCHEDULE_STATE_NONE &&
   342fc:	8ba1      	ldrh	r1, [r4, #28]
   342fe:	9805      	ldr	r0, [sp, #20]
   34300:	4281      	cmp	r1, r0
   34302:	f63f af22 	bhi.w	3414a <ticker_worker+0x9e>
				ext_data->reschedule_state =
   34306:	f04f 0101 	mov.w	r1, #1
   3430a:	7219      	strb	r1, [r3, #8]
   3430c:	e71f      	b.n	3414e <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
   3430e:	2101      	movs	r1, #1
					(ticker->ticks_periodic != 0U) &&
   34310:	463c      	mov	r4, r7
   34312:	e7d5      	b.n	342c0 <ticker_worker+0x214>
					  0U :
   34314:	4621      	mov	r1, r4
   34316:	e7c9      	b.n	342ac <ticker_worker+0x200>
			     (equal_priority && next_is_older))) {
   34318:	2c00      	cmp	r4, #0
   3431a:	d0e5      	beq.n	342e8 <ticker_worker+0x23c>
   3431c:	e9dd 8909 	ldrd	r8, r9, [sp, #36]	; 0x24
   34320:	9a08      	ldr	r2, [sp, #32]
   34322:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   34324:	4664      	mov	r4, ip
   34326:	e708      	b.n	3413a <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
   34328:	9b06      	ldr	r3, [sp, #24]
   3432a:	9303      	str	r3, [sp, #12]
   3432c:	e6e0      	b.n	340f0 <ticker_worker+0x44>
		if (ticker->timeout_func) {
   3432e:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   34330:	3a01      	subs	r2, #1
   34332:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
   34334:	2d00      	cmp	r5, #0
   34336:	f43f af22 	beq.w	3417e <ticker_worker+0xd2>
			ticks_drift = 0U;
   3433a:	4619      	mov	r1, r3
					   ticks_expired -
   3433c:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   3433e:	6a62      	ldr	r2, [r4, #36]	; 0x24
					   ticks_expired -
   34340:	eba9 0003 	sub.w	r0, r9, r3
   34344:	9b04      	ldr	r3, [sp, #16]
   34346:	695b      	ldr	r3, [r3, #20]
   34348:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   3434a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   3434e:	e758      	b.n	34202 <ticker_worker+0x156>

00034350 <ticker_job>:
	if (instance->worker_trigger) {
   34350:	7fc3      	ldrb	r3, [r0, #31]
   34352:	2b00      	cmp	r3, #0
   34354:	f040 843f 	bne.w	34bd6 <ticker_job+0x886>
{
   34358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   3435c:	7f82      	ldrb	r2, [r0, #30]
{
   3435e:	b08d      	sub	sp, #52	; 0x34
   34360:	4683      	mov	fp, r0
	if (instance->job_guard) {
   34362:	2a00      	cmp	r2, #0
   34364:	f040 808b 	bne.w	3447e <ticker_job+0x12e>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   34368:	7a83      	ldrb	r3, [r0, #10]
   3436a:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
   3436c:	2001      	movs	r0, #1
   3436e:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   34372:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   34374:	f8db 0014 	ldr.w	r0, [fp, #20]
   34378:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   3437a:	f000 8451 	beq.w	34c20 <ticker_job+0x8d0>
	uint8_t idx = *ticks_elapsed_index + 1;
   3437e:	3301      	adds	r3, #1
   34380:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   34382:	2b02      	cmp	r3, #2
		idx = 0U;
   34384:	bf08      	it	eq
   34386:	4613      	moveq	r3, r2
		ticks_elapsed =
   34388:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   3438c:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   34390:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   34394:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   34396:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
   34398:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
   3439a:	9202      	str	r2, [sp, #8]
		instance->ticks_current += ticks_elapsed;
   3439c:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   3439e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   343a2:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   343a6:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   343aa:	f8db 3000 	ldr.w	r3, [fp]
   343ae:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   343b0:	f8db 3004 	ldr.w	r3, [fp, #4]
   343b4:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   343b6:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   343b8:	9206      	str	r2, [sp, #24]
	while (count_user--) {
   343ba:	b2db      	uxtb	r3, r3
   343bc:	2a00      	cmp	r2, #0
   343be:	f000 81d7 	beq.w	34770 <ticker_job+0x420>
		flag_elapsed = 1U;
   343c2:	2201      	movs	r2, #1
   343c4:	920b      	str	r2, [sp, #44]	; 0x2c
   343c6:	9a05      	ldr	r2, [sp, #20]
   343c8:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
	pending = 0U;
   343cc:	2300      	movs	r3, #0
   343ce:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   343d0:	23ff      	movs	r3, #255	; 0xff
   343d2:	9301      	str	r3, [sp, #4]
   343d4:	465b      	mov	r3, fp
   343d6:	46d3      	mov	fp, sl
   343d8:	469a      	mov	sl, r3
		user_ops = &user->user_op[0];
   343da:	f8db 9004 	ldr.w	r9, [fp, #4]
		while (user->middle != user->last) {
   343de:	f89b c003 	ldrb.w	ip, [fp, #3]
   343e2:	f89b 7002 	ldrb.w	r7, [fp, #2]
   343e6:	4567      	cmp	r7, ip
   343e8:	d041      	beq.n	3446e <ticker_job+0x11e>
			if (middle == user->count_user_op) {
   343ea:	f89b 1000 	ldrb.w	r1, [fp]
			middle = user->middle + 1;
   343ee:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   343f0:	b23a      	sxth	r2, r7
			middle = user->middle + 1;
   343f2:	b2db      	uxtb	r3, r3
				middle = 0U;
   343f4:	4299      	cmp	r1, r3
   343f6:	bf08      	it	eq
   343f8:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   343fa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   343fe:	eb02 0881 	add.w	r8, r2, r1, lsl #2
			user->middle = middle;
   34402:	f88b 3002 	strb.w	r3, [fp, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   34406:	f819 6028 	ldrb.w	r6, [r9, r8, lsl #2]
			user_op = &user_ops[user->middle];
   3440a:	eb09 0588 	add.w	r5, r9, r8, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   3440e:	2e04      	cmp	r6, #4
			ticker = &node[user_op->id];
   34410:	7869      	ldrb	r1, [r5, #1]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   34412:	d93e      	bls.n	34492 <ticker_job+0x142>
			ticker = &node[user_op->id];
   34414:	9a00      	ldr	r2, [sp, #0]
   34416:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   3441a:	eb02 1404 	add.w	r4, r2, r4, lsl #4
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   3441e:	2e08      	cmp	r6, #8
			state = (ticker->req - ticker->ack) & 0xff;
   34420:	7862      	ldrb	r2, [r4, #1]
   34422:	78a0      	ldrb	r0, [r4, #2]
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   34424:	d837      	bhi.n	34496 <ticker_job+0x146>
			state = (ticker->req - ticker->ack) & 0xff;
   34426:	1a12      	subs	r2, r2, r0
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   34428:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   3442c:	d033      	beq.n	34496 <ticker_job+0x146>
			    (state == 0U) ||
   3442e:	2e05      	cmp	r6, #5
   34430:	d059      	beq.n	344e6 <ticker_job+0x196>
			if (state == 1U) {
   34432:	2a01      	cmp	r2, #1
   34434:	f040 8119 	bne.w	3466a <ticker_job+0x31a>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   34438:	2e06      	cmp	r6, #6
   3443a:	d03b      	beq.n	344b4 <ticker_job+0x164>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   3443c:	4650      	mov	r0, sl
   3443e:	f7ff fccf 	bl	33de0 <ticker_dequeue>
			ticker->req = ticker->ack;
   34442:	78a3      	ldrb	r3, [r4, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   34444:	60a0      	str	r0, [r4, #8]
			ticker->req = ticker->ack;
   34446:	7063      	strb	r3, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   34448:	f89a 301c 	ldrb.w	r3, [sl, #28]
   3444c:	428b      	cmp	r3, r1
   3444e:	f000 80ee 	beq.w	3462e <ticker_job+0x2de>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   34452:	2000      	movs	r0, #0
   34454:	f809 0028 	strb.w	r0, [r9, r8, lsl #2]
	if (user_op->fp_op_func) {
   34458:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   3445a:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   3445c:	b10b      	cbz	r3, 34462 <ticker_job+0x112>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   3445e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   34460:	4798      	blx	r3
		while (user->middle != user->last) {
   34462:	f89b c003 	ldrb.w	ip, [fp, #3]
   34466:	f89b 7002 	ldrb.w	r7, [fp, #2]
   3446a:	4567      	cmp	r7, ip
   3446c:	d1bd      	bne.n	343ea <ticker_job+0x9a>
	while (count_user--) {
   3446e:	9a05      	ldr	r2, [sp, #20]
   34470:	455a      	cmp	r2, fp
   34472:	f1ab 0308 	sub.w	r3, fp, #8
   34476:	f000 8109 	beq.w	3468c <ticker_job+0x33c>
   3447a:	469b      	mov	fp, r3
   3447c:	e7ad      	b.n	343da <ticker_job+0x8a>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   3447e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   34480:	2104      	movs	r1, #4
   34482:	4603      	mov	r3, r0
   34484:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   34486:	2004      	movs	r0, #4
   34488:	46a4      	mov	ip, r4
}
   3448a:	b00d      	add	sp, #52	; 0x34
   3448c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   34490:	4760      	bx	ip
   34492:	461f      	mov	r7, r3
   34494:	e7a7      	b.n	343e6 <ticker_job+0x96>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   34496:	2200      	movs	r2, #0
   34498:	f809 2028 	strb.w	r2, [r9, r8, lsl #2]
	if (user_op->fp_op_func) {
   3449c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->status = status;
   3449e:	2001      	movs	r0, #1
   344a0:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   344a2:	2a00      	cmp	r2, #0
   344a4:	d0f5      	beq.n	34492 <ticker_job+0x142>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   344a6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   344a8:	4790      	blx	r2
		while (user->middle != user->last) {
   344aa:	f89b c003 	ldrb.w	ip, [fp, #3]
   344ae:	f89b 7002 	ldrb.w	r7, [fp, #2]
   344b2:	e798      	b.n	343e6 <ticker_job+0x96>
		if (instance->ticker_id_slot_previous == user_op->id) {
   344b4:	f89a 301c 	ldrb.w	r3, [sl, #28]
   344b8:	428b      	cmp	r3, r1
   344ba:	d1ca      	bne.n	34452 <ticker_job+0x102>
			instance->ticker_id_slot_previous = TICKER_NULL;
   344bc:	23ff      	movs	r3, #255	; 0xff
   344be:	f88a 301c 	strb.w	r3, [sl, #28]
				ticks_at_yield =
   344c2:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
   344c4:	f8da 2014 	ldr.w	r2, [sl, #20]
			if (!((ticks_at_yield - ticks_current) &
   344c8:	1a83      	subs	r3, r0, r2
   344ca:	021c      	lsls	r4, r3, #8
   344cc:	f100 80bd 	bmi.w	3464a <ticker_job+0x2fa>
				ticks_used = ticks_elapsed +
   344d0:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   344d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   344d6:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   344d8:	f8da 2018 	ldr.w	r2, [sl, #24]
   344dc:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   344de:	bf88      	it	hi
   344e0:	f8ca 3018 	strhi.w	r3, [sl, #24]
   344e4:	e7b5      	b.n	34452 <ticker_job+0x102>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   344e6:	6868      	ldr	r0, [r5, #4]
   344e8:	b948      	cbnz	r0, 344fe <ticker_job+0x1ae>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   344ea:	68a8      	ldr	r0, [r5, #8]
   344ec:	b938      	cbnz	r0, 344fe <ticker_job+0x1ae>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   344ee:	68e8      	ldr	r0, [r5, #12]
   344f0:	b928      	cbnz	r0, 344fe <ticker_job+0x1ae>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   344f2:	6928      	ldr	r0, [r5, #16]
   344f4:	b918      	cbnz	r0, 344fe <ticker_job+0x1ae>
			     (user_op->params.update.lazy == 0U) &&
   344f6:	6968      	ldr	r0, [r5, #20]
   344f8:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   344fc:	d0cb      	beq.n	34496 <ticker_job+0x146>
			if (state == 1U) {
   344fe:	2a01      	cmp	r2, #1
   34500:	f040 80b3 	bne.w	3466a <ticker_job+0x31a>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   34504:	4650      	mov	r0, sl
   34506:	f7ff fc6b 	bl	33de0 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   3450a:	f8da 7014 	ldr.w	r7, [sl, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   3450e:	60a0      	str	r0, [r4, #8]
   34510:	4606      	mov	r6, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   34512:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   34514:	f00e f804 	bl	42520 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   34518:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3451a:	1bc2      	subs	r2, r0, r7
   3451c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   34520:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   34522:	4296      	cmp	r6, r2
	ticks_now = cntr_cnt_get();
   34524:	4686      	mov	lr, r0
	if (ticks_to_expire > ticks_elapsed) {
   34526:	f240 8099 	bls.w	3465c <ticker_job+0x30c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   3452a:	6963      	ldr	r3, [r4, #20]
   3452c:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
   3452e:	1ab0      	subs	r0, r6, r2
	if ((ticker->ticks_periodic != 0U) &&
   34530:	6867      	ldr	r7, [r4, #4]
   34532:	2f00      	cmp	r7, #0
   34534:	d050      	beq.n	345d8 <ticker_job+0x288>
	    (user_op->params.update.lazy != 0U)) {
   34536:	8aab      	ldrh	r3, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   34538:	2b00      	cmp	r3, #0
   3453a:	d04d      	beq.n	345d8 <ticker_job+0x288>
		user_op->params.update.lazy--;
   3453c:	3b01      	subs	r3, #1
   3453e:	b29e      	uxth	r6, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   34540:	4287      	cmp	r7, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34542:	8be3      	ldrh	r3, [r4, #30]
		user_op->params.update.lazy--;
   34544:	82ae      	strh	r6, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   34546:	d223      	bcs.n	34590 <ticker_job+0x240>
			ticks_to_expire += ticker->ticks_periodic +
   34548:	1c7a      	adds	r2, r7, #1
   3454a:	f8cd 9018 	str.w	r9, [sp, #24]
   3454e:	950a      	str	r5, [sp, #40]	; 0x28
   34550:	4694      	mov	ip, r2
   34552:	e018      	b.n	34586 <ticker_job+0x236>
	if ((ticker->remainder_current >= BIT(31)) ||
   34554:	6a62      	ldr	r2, [r4, #36]	; 0x24
   34556:	f8df 9204 	ldr.w	r9, [pc, #516]	; 3475c <ticker_job+0x40c>
   3455a:	4d81      	ldr	r5, [pc, #516]	; (34760 <ticker_job+0x410>)
   3455c:	4491      	add	r9, r2
   3455e:	45a9      	cmp	r9, r5
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   34560:	bf84      	itt	hi
   34562:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
   34566:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
			ticks_to_expire += ticker->ticks_periodic +
   3456a:	4661      	mov	r1, ip
	ticker->remainder_current -= ticker->remainder_periodic;
   3456c:	6a25      	ldr	r5, [r4, #32]
   3456e:	bf94      	ite	ls
   34570:	4639      	movls	r1, r7
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   34572:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
			ticker->lazy_current--;
   34576:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   34578:	1a40      	subs	r0, r0, r1
	ticker->remainder_current -= ticker->remainder_periodic;
   3457a:	1b52      	subs	r2, r2, r5
			ticker->lazy_current--;
   3457c:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   3457e:	4287      	cmp	r7, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   34580:	6262      	str	r2, [r4, #36]	; 0x24
			ticker->lazy_current--;
   34582:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   34584:	d201      	bcs.n	3458a <ticker_job+0x23a>
   34586:	429e      	cmp	r6, r3
   34588:	d3e4      	bcc.n	34554 <ticker_job+0x204>
   3458a:	f8dd 9018 	ldr.w	r9, [sp, #24]
   3458e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34590:	429e      	cmp	r6, r3
   34592:	d920      	bls.n	345d6 <ticker_job+0x286>
			ticks_to_expire += ticker->ticks_periodic +
   34594:	1c79      	adds	r1, r7, #1
	ticker->remainder_current += ticker->remainder_periodic;
   34596:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
			ticks_to_expire += ticker->ticks_periodic +
   3459a:	9106      	str	r1, [sp, #24]
   3459c:	940a      	str	r4, [sp, #40]	; 0x28
   3459e:	e005      	b.n	345ac <ticker_job+0x25c>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   345a0:	3301      	adds	r3, #1
   345a2:	b29b      	uxth	r3, r3
   345a4:	4639      	mov	r1, r7
   345a6:	429e      	cmp	r6, r3
			ticks_to_expire += ticker->ticks_periodic +
   345a8:	4408      	add	r0, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
   345aa:	d011      	beq.n	345d0 <ticker_job+0x280>
	if ((ticker->remainder_current < BIT(31)) &&
   345ac:	496b      	ldr	r1, [pc, #428]	; (3475c <ticker_job+0x40c>)
   345ae:	4c6c      	ldr	r4, [pc, #432]	; (34760 <ticker_job+0x410>)
	ticker->remainder_current += ticker->remainder_periodic;
   345b0:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   345b2:	1851      	adds	r1, r2, r1
   345b4:	42a1      	cmp	r1, r4
   345b6:	d8f3      	bhi.n	345a0 <ticker_job+0x250>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   345b8:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   345ba:	9906      	ldr	r1, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   345bc:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   345c0:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   345c2:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   345c6:	429e      	cmp	r6, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   345c8:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   345cc:	4408      	add	r0, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
   345ce:	d1ed      	bne.n	345ac <ticker_job+0x25c>
   345d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   345d2:	6262      	str	r2, [r4, #36]	; 0x24
   345d4:	83e6      	strh	r6, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   345d6:	83a6      	strh	r6, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   345d8:	686a      	ldr	r2, [r5, #4]
	ticker->ticks_to_expire_minus +=
   345da:	9b04      	ldr	r3, [sp, #16]
	struct ticker_ext *ext_data = ticker->ext_data;
   345dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   345de:	4410      	add	r0, r2
   345e0:	60a0      	str	r0, [r4, #8]
				user_op->params.update.ticks_drift_minus;
   345e2:	68a8      	ldr	r0, [r5, #8]
	ticker->ticks_to_expire_minus +=
   345e4:	4403      	add	r3, r0
   345e6:	6163      	str	r3, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   345e8:	b119      	cbz	r1, 345f2 <ticker_job+0x2a2>
   345ea:	680b      	ldr	r3, [r1, #0]
   345ec:	b10b      	cbz	r3, 345f2 <ticker_job+0x2a2>
			user_op->params.update.ticks_drift_plus -
   345ee:	1a12      	subs	r2, r2, r0
		ext_data->ticks_drift =
   345f0:	604a      	str	r2, [r1, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   345f2:	4672      	mov	r2, lr
   345f4:	9903      	ldr	r1, [sp, #12]
   345f6:	4620      	mov	r0, r4
   345f8:	f7ff fc2c 	bl	33e54 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   345fc:	68ea      	ldr	r2, [r5, #12]
   345fe:	69a3      	ldr	r3, [r4, #24]
   34600:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   34602:	692a      	ldr	r2, [r5, #16]
   34604:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   34606:	bf8c      	ite	hi
   34608:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   3460a:	2300      	movls	r3, #0
   3460c:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   3460e:	7dab      	ldrb	r3, [r5, #22]
   34610:	b103      	cbz	r3, 34614 <ticker_job+0x2c4>
		ticker->force = user_op->params.update.force;
   34612:	70e3      	strb	r3, [r4, #3]
	if (user_op->params.update.must_expire) {
   34614:	7deb      	ldrb	r3, [r5, #23]
   34616:	b113      	cbz	r3, 3461e <ticker_job+0x2ce>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   34618:	3b01      	subs	r3, #1
   3461a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
   3461e:	9b01      	ldr	r3, [sp, #4]
   34620:	7023      	strb	r3, [r4, #0]
		ticker->req++;
   34622:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   34624:	786a      	ldrb	r2, [r5, #1]
   34626:	9201      	str	r2, [sp, #4]
		ticker->req++;
   34628:	3301      	adds	r3, #1
   3462a:	7063      	strb	r3, [r4, #1]
   3462c:	e711      	b.n	34452 <ticker_job+0x102>
			instance->ticker_id_slot_previous = TICKER_NULL;
   3462e:	23ff      	movs	r3, #255	; 0xff
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   34630:	2e08      	cmp	r6, #8
			instance->ticker_id_slot_previous = TICKER_NULL;
   34632:	f88a 301c 	strb.w	r3, [sl, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   34636:	f43f af44 	beq.w	344c2 <ticker_job+0x172>
				ticks_at_yield = cntr_cnt_get();
   3463a:	f00d ff71 	bl	42520 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
   3463e:	f8da 2014 	ldr.w	r2, [sl, #20]
			if (!((ticks_at_yield - ticks_current) &
   34642:	1a83      	subs	r3, r0, r2
   34644:	021c      	lsls	r4, r3, #8
   34646:	f57f af43 	bpl.w	344d0 <ticker_job+0x180>
				if (ticks_elapsed > ticks_used) {
   3464a:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3464c:	1a12      	subs	r2, r2, r0
   3464e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   34652:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
   34654:	bf34      	ite	cc
   34656:	1a9b      	subcc	r3, r3, r2
					ticks_used = 0;
   34658:	2300      	movcs	r3, #0
   3465a:	e73d      	b.n	344d8 <ticker_job+0x188>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   3465c:	6963      	ldr	r3, [r4, #20]
   3465e:	1b9b      	subs	r3, r3, r6
   34660:	4413      	add	r3, r2
   34662:	9304      	str	r3, [sp, #16]
   34664:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
   34666:	2000      	movs	r0, #0
   34668:	e762      	b.n	34530 <ticker_job+0x1e0>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   3466a:	2104      	movs	r1, #4
   3466c:	4653      	mov	r3, sl
   3466e:	2201      	movs	r2, #1
   34670:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
   34674:	4608      	mov	r0, r1
   34676:	47a0      	blx	r4
	while (count_user--) {
   34678:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
   3467a:	f88b 7002 	strb.w	r7, [fp, #2]
				pending = 1U;
   3467e:	2301      	movs	r3, #1
	while (count_user--) {
   34680:	455a      	cmp	r2, fp
				pending = 1U;
   34682:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   34684:	f1ab 0308 	sub.w	r3, fp, #8
   34688:	f47f aef7 	bne.w	3447a <ticker_job+0x12a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   3468c:	f89a 301d 	ldrb.w	r3, [sl, #29]
	flag_compare_update = 0U;
   34690:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34692:	1a9b      	subs	r3, r3, r2
   34694:	bf18      	it	ne
   34696:	2301      	movne	r3, #1
   34698:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
   3469a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	if (instance->ticker_id_head != ticker_id_old_head) {
   3469c:	46d3      	mov	fp, sl
	if (flag_elapsed) {
   3469e:	2b00      	cmp	r3, #0
   346a0:	d16a      	bne.n	34778 <ticker_job+0x428>
		ticker_job_list_insert(instance, insert_head);
   346a2:	9901      	ldr	r1, [sp, #4]
   346a4:	4658      	mov	r0, fp
   346a6:	f7ff fbf9 	bl	33e9c <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   346aa:	f89b 301d 	ldrb.w	r3, [fp, #29]
   346ae:	9300      	str	r3, [sp, #0]
   346b0:	9b00      	ldr	r3, [sp, #0]
   346b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   346b4:	4293      	cmp	r3, r2
   346b6:	f000 8278 	beq.w	34baa <ticker_job+0x85a>
	if (!pending) {
   346ba:	9b08      	ldr	r3, [sp, #32]
   346bc:	2b00      	cmp	r3, #0
   346be:	f000 81e4 	beq.w	34a8a <ticker_job+0x73a>
	if (instance->ticker_id_head == TICKER_NULL) {
   346c2:	f89b 301d 	ldrb.w	r3, [fp, #29]
   346c6:	9300      	str	r3, [sp, #0]
   346c8:	9b00      	ldr	r3, [sp, #0]
   346ca:	2bff      	cmp	r3, #255	; 0xff
   346cc:	f000 82d3 	beq.w	34c76 <ticker_job+0x926>
	if (ticker_id_old_head == TICKER_NULL) {
   346d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   346d2:	2bff      	cmp	r3, #255	; 0xff
   346d4:	f000 82e6 	beq.w	34ca4 <ticker_job+0x954>
	ticker = &instance->nodes[instance->ticker_id_head];
   346d8:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   346da:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   346de:	f8df 9084 	ldr.w	r9, [pc, #132]	; 34764 <ticker_job+0x414>
   346e2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 34768 <ticker_job+0x418>
   346e6:	4f21      	ldr	r7, [pc, #132]	; (3476c <ticker_job+0x41c>)
	ticker = &instance->nodes[instance->ticker_id_head];
   346e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   346ec:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   346f0:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   346f2:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   346f4:	f00d ff14 	bl	42520 <cntr_cnt_get>
		cc = instance->ticks_current;
   346f8:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   346fc:	1b03      	subs	r3, r0, r4
   346fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   34702:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   34704:	42b3      	cmp	r3, r6
   34706:	bf2c      	ite	cs
   34708:	18e4      	addcs	r4, r4, r3
   3470a:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   3470c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   34710:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   34714:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   34716:	4620      	mov	r0, r4
   34718:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   3471a:	f00d ff01 	bl	42520 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3471e:	eba0 030a 	sub.w	r3, r0, sl
   34722:	eba4 040a 	sub.w	r4, r4, sl
   34726:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   3472a:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3472c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   34730:	42a3      	cmp	r3, r4
		i--;
   34732:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  HAL_TICKER_CNTR_CMP_OFFSET_MIN) >
   34736:	f240 823f 	bls.w	34bb8 <ticker_job+0x868>
		LL_ASSERT(i);
   3473a:	2d00      	cmp	r5, #0
   3473c:	d1da      	bne.n	346f4 <ticker_job+0x3a4>
   3473e:	f640 133e 	movw	r3, #2366	; 0x93e
   34742:	464a      	mov	r2, r9
   34744:	4641      	mov	r1, r8
   34746:	4638      	mov	r0, r7
   34748:	f014 ff94 	bl	49674 <printk>
   3474c:	4040      	eors	r0, r0
   3474e:	f380 8811 	msr	BASEPRI, r0
   34752:	f04f 0003 	mov.w	r0, #3
   34756:	df02      	svc	2
   34758:	e7cc      	b.n	346f4 <ticker_job+0x3a4>
   3475a:	bf00      	nop
   3475c:	ff172b5a 	.word	0xff172b5a
   34760:	7f172b59 	.word	0x7f172b59
   34764:	00052420 	.word	0x00052420
   34768:	000524cc 	.word	0x000524cc
   3476c:	00052460 	.word	0x00052460
	pending = 0U;
   34770:	9b06      	ldr	r3, [sp, #24]
   34772:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   34774:	23ff      	movs	r3, #255	; 0xff
   34776:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   34778:	f00d fed2 	bl	42520 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3477c:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   3477e:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34782:	1ac3      	subs	r3, r0, r3
   34784:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   34788:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   3478a:	f8db 3000 	ldr.w	r3, [fp]
   3478e:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   34790:	d052      	beq.n	34838 <ticker_job+0x4e8>
	ticks_expired = 0U;
   34792:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   34794:	f8df 8288 	ldr.w	r8, [pc, #648]	; 34a20 <ticker_job+0x6d0>
   34798:	f8df 9288 	ldr.w	r9, [pc, #648]	; 34a24 <ticker_job+0x6d4>
	while (instance->ticker_id_head != TICKER_NULL) {
   3479c:	9f02      	ldr	r7, [sp, #8]
	ticks_expired = 0U;
   3479e:	9303      	str	r3, [sp, #12]
		ticker = &node[id_expired];
   347a0:	9a00      	ldr	r2, [sp, #0]
   347a2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   347a6:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   347aa:	011b      	lsls	r3, r3, #4
   347ac:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
   347ae:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   347b0:	429f      	cmp	r7, r3
   347b2:	f0c0 8253 	bcc.w	34c5c <ticker_job+0x90c>
		ticks_expired += ticks_to_expire;
   347b6:	9a03      	ldr	r2, [sp, #12]
		skip_collision = (ticker->lazy_current != 0U);
   347b8:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		ticks_expired += ticks_to_expire;
   347bc:	441a      	add	r2, r3
   347be:	9203      	str	r2, [sp, #12]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   347c0:	f8db 2018 	ldr.w	r2, [fp, #24]
   347c4:	4293      	cmp	r3, r2
			instance->ticks_slot_previous -= ticks_to_expire;
   347c6:	bf38      	it	cc
   347c8:	1ad2      	subcc	r2, r2, r3
		ticks_elapsed -= ticks_to_expire;
   347ca:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
   347ce:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   347d2:	bf22      	ittt	cs
   347d4:	2200      	movcs	r2, #0
   347d6:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   347da:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   347de:	f8cb 2018 	str.w	r2, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   347e2:	78a3      	ldrb	r3, [r4, #2]
   347e4:	7861      	ldrb	r1, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   347e6:	69a2      	ldr	r2, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   347e8:	1ac9      	subs	r1, r1, r3
   347ea:	b2c9      	uxtb	r1, r1
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   347ec:	b112      	cbz	r2, 347f4 <ticker_job+0x4a4>
   347ee:	2902      	cmp	r1, #2
   347f0:	f000 8139 	beq.w	34a66 <ticker_job+0x716>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   347f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		instance->ticker_id_head = ticker->next;
   347f6:	9d04      	ldr	r5, [sp, #16]
		ticker->ticks_to_expire = 0U;
   347f8:	2200      	movs	r2, #0
   347fa:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
   347fc:	9a00      	ldr	r2, [sp, #0]
   347fe:	5d52      	ldrb	r2, [r2, r5]
   34800:	f88b 201d 	strb.w	r2, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   34804:	6865      	ldr	r5, [r4, #4]
   34806:	2d00      	cmp	r5, #0
   34808:	d153      	bne.n	348b2 <ticker_job+0x562>
   3480a:	b110      	cbz	r0, 34812 <ticker_job+0x4c2>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   3480c:	7a02      	ldrb	r2, [r0, #8]
   3480e:	2a01      	cmp	r2, #1
   34810:	d056      	beq.n	348c0 <ticker_job+0x570>
			if (state && ((state == 1U) || skip_collision) &&
   34812:	2900      	cmp	r1, #0
   34814:	d066      	beq.n	348e4 <ticker_job+0x594>
   34816:	2901      	cmp	r1, #1
   34818:	d002      	beq.n	34820 <ticker_job+0x4d0>
   3481a:	f1be 0f00 	cmp.w	lr, #0
   3481e:	d061      	beq.n	348e4 <ticker_job+0x594>
			    ticker->fp_op_func) {
   34820:	6a22      	ldr	r2, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   34822:	2a00      	cmp	r2, #0
   34824:	d05e      	beq.n	348e4 <ticker_job+0x594>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   34826:	6a61      	ldr	r1, [r4, #36]	; 0x24
   34828:	2001      	movs	r0, #1
   3482a:	4790      	blx	r2
			ticker->req = ticker->ack;
   3482c:	78a3      	ldrb	r3, [r4, #2]
   3482e:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   34830:	f89b 601d 	ldrb.w	r6, [fp, #29]
   34834:	2eff      	cmp	r6, #255	; 0xff
   34836:	d1b3      	bne.n	347a0 <ticker_job+0x450>
			flag_compare_update = 1U;
   34838:	9b06      	ldr	r3, [sp, #24]
   3483a:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   3483c:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
   3483e:	4296      	cmp	r6, r2
   34840:	bf18      	it	ne
   34842:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   34844:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   34846:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
   34848:	f7ff fb28 	bl	33e9c <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   3484c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   34850:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
   34854:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
   34858:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   3485a:	9b00      	ldr	r3, [sp, #0]
   3485c:	2bff      	cmp	r3, #255	; 0xff
   3485e:	d00f      	beq.n	34880 <ticker_job+0x530>
   34860:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
   34862:	b233      	sxth	r3, r6
   34864:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   34868:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
   3486c:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   3486e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   34870:	b117      	cbz	r7, 34878 <ticker_job+0x528>
   34872:	7a39      	ldrb	r1, [r7, #8]
   34874:	2901      	cmp	r1, #1
   34876:	d03c      	beq.n	348f2 <ticker_job+0x5a2>
			ticker_id_head = ticker->next;
   34878:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
   3487c:	2eff      	cmp	r6, #255	; 0xff
   3487e:	d1f0      	bne.n	34862 <ticker_job+0x512>
	return rescheduled;
   34880:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   34884:	2a00      	cmp	r2, #0
   34886:	f43f af13 	beq.w	346b0 <ticker_job+0x360>
	if (instance->ticker_id_head != ticker_id_old_head) {
   3488a:	9b00      	ldr	r3, [sp, #0]
   3488c:	9909      	ldr	r1, [sp, #36]	; 0x24
   3488e:	428b      	cmp	r3, r1
   34890:	f47f af13 	bne.w	346ba <ticker_job+0x36a>
	if (!pending) {
   34894:	9b08      	ldr	r3, [sp, #32]
   34896:	2b00      	cmp	r3, #0
   34898:	f47f af16 	bne.w	346c8 <ticker_job+0x378>
	count_user = instance->count_user;
   3489c:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   348a0:	f8db 5004 	ldr.w	r5, [fp, #4]
	while (count_user--) {
   348a4:	1e5f      	subs	r7, r3, #1
   348a6:	b2ff      	uxtb	r7, r7
   348a8:	2b00      	cmp	r3, #0
   348aa:	f43f af0d 	beq.w	346c8 <ticker_job+0x378>
			flag_compare_update = 1U;
   348ae:	9206      	str	r2, [sp, #24]
   348b0:	e0f6      	b.n	34aa0 <ticker_job+0x750>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   348b2:	2800      	cmp	r0, #0
   348b4:	f000 80a7 	beq.w	34a06 <ticker_job+0x6b6>
   348b8:	7a02      	ldrb	r2, [r0, #8]
   348ba:	2a01      	cmp	r2, #1
   348bc:	f040 80a3 	bne.w	34a06 <ticker_job+0x6b6>
				ticker->req = ticker->ack;
   348c0:	7063      	strb	r3, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   348c2:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   348c4:	9b07      	ldr	r3, [sp, #28]
   348c6:	9a03      	ldr	r2, [sp, #12]
   348c8:	f8db 1014 	ldr.w	r1, [fp, #20]
   348cc:	189a      	adds	r2, r3, r2
   348ce:	4620      	mov	r0, r4
   348d0:	f7ff fac0 	bl	33e54 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   348d4:	9a00      	ldr	r2, [sp, #0]
   348d6:	9904      	ldr	r1, [sp, #16]
   348d8:	9b01      	ldr	r3, [sp, #4]
   348da:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   348dc:	7863      	ldrb	r3, [r4, #1]
   348de:	9601      	str	r6, [sp, #4]
   348e0:	3301      	adds	r3, #1
   348e2:	b2db      	uxtb	r3, r3
			ticker->req = ticker->ack;
   348e4:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   348e6:	f89b 601d 	ldrb.w	r6, [fp, #29]
   348ea:	2eff      	cmp	r6, #255	; 0xff
   348ec:	f47f af58 	bne.w	347a0 <ticker_job+0x450>
   348f0:	e7a2      	b.n	34838 <ticker_job+0x4e8>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   348f2:	9b01      	ldr	r3, [sp, #4]
   348f4:	7f1b      	ldrb	r3, [r3, #28]
   348f6:	2bff      	cmp	r3, #255	; 0xff
   348f8:	d044      	beq.n	34984 <ticker_job+0x634>
			instance->ticks_slot_previous > ticks_elapsed) {
   348fa:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   348fc:	9a02      	ldr	r2, [sp, #8]
			instance->ticks_slot_previous > ticks_elapsed) {
   348fe:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   34900:	4293      	cmp	r3, r2
   34902:	d93f      	bls.n	34984 <ticker_job+0x634>
			window_start_ticks = instance->ticks_slot_previous -
   34904:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   34908:	e9d7 3b00 	ldrd	r3, fp, [r7]
		ticker_id_iter = nodes[ticker_id_head].next;
   3490c:	782a      	ldrb	r2, [r5, #0]
   3490e:	9203      	str	r2, [sp, #12]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   34910:	459b      	cmp	fp, r3
   34912:	d23f      	bcs.n	34994 <ticker_job+0x644>
		while (ticker_id_iter != TICKER_NULL &&
   34914:	2aff      	cmp	r2, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   34916:	eba3 080b 	sub.w	r8, r3, fp
		while (ticker_id_iter != TICKER_NULL &&
   3491a:	d03b      	beq.n	34994 <ticker_job+0x644>
		       ticks_start_offset + ticker->ticks_slot <=
   3491c:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
   34920:	45f0      	cmp	r8, lr
   34922:	f04f 0300 	mov.w	r3, #0
   34926:	d33c      	bcc.n	349a2 <ticker_job+0x652>
   34928:	46f1      	mov	r9, lr
   3492a:	461c      	mov	r4, r3
   3492c:	e01c      	b.n	34968 <ticker_job+0x618>
			if (node->ticks_to_expire >
   3492e:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
   34930:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   34932:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   34934:	4423      	add	r3, r4
			if (node->ticks_to_expire >
   34936:	d909      	bls.n	3494c <ticker_job+0x5fc>
				window_end_ticks =
   34938:	4543      	cmp	r3, r8
   3493a:	bf28      	it	cs
   3493c:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   3493e:	454b      	cmp	r3, r9
   34940:	d904      	bls.n	3494c <ticker_job+0x5fc>
			if (ticks_to_expire != 0U &&
   34942:	ebb3 030e 	subs.w	r3, r3, lr
   34946:	d001      	beq.n	3494c <ticker_job+0x5fc>
   34948:	459c      	cmp	ip, r3
   3494a:	d92a      	bls.n	349a2 <ticker_job+0x652>
			window_start_ticks  = node->ticks_to_expire +
   3494c:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
   3494e:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
   34952:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   34956:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
   34958:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   3495c:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   3495e:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
   34962:	d01e      	beq.n	349a2 <ticker_job+0x652>
   34964:	45c8      	cmp	r8, r9
   34966:	d31c      	bcc.n	349a2 <ticker_job+0x652>
			node = &nodes[ticker_id_iter];
   34968:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3496c:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
   34970:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   34972:	6a81      	ldr	r1, [r0, #40]	; 0x28
   34974:	2900      	cmp	r1, #0
   34976:	d0da      	beq.n	3492e <ticker_job+0x5de>
   34978:	7a09      	ldrb	r1, [r1, #8]
   3497a:	2901      	cmp	r1, #1
   3497c:	d1d7      	bne.n	3492e <ticker_job+0x5de>
				ticker_id_iter = node->next;
   3497e:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
   34982:	e7eb      	b.n	3495c <ticker_job+0x60c>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   34984:	e9d7 3b00 	ldrd	r3, fp, [r7]
		ticker_id_iter = nodes[ticker_id_head].next;
   34988:	782a      	ldrb	r2, [r5, #0]
   3498a:	9203      	str	r2, [sp, #12]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   3498c:	459b      	cmp	fp, r3
		window_start_ticks = 0U;
   3498e:	f04f 0c00 	mov.w	ip, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   34992:	d3bf      	bcc.n	34914 <ticker_job+0x5c4>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   34994:	68ab      	ldr	r3, [r5, #8]
   34996:	ebab 0303 	sub.w	r3, fp, r3
   3499a:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   3499c:	2300      	movs	r3, #0
   3499e:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   349a0:	e029      	b.n	349f6 <ticker_job+0x6a6>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   349a2:	68aa      	ldr	r2, [r5, #8]
		ticker->ticks_to_expire = ticks_to_expire;
   349a4:	9c03      	ldr	r4, [sp, #12]
		ticker->ext_data->ticks_drift += ticks_to_expire -
   349a6:	ebab 0b02 	sub.w	fp, fp, r2
   349aa:	eb0b 0203 	add.w	r2, fp, r3
   349ae:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   349b0:	f04f 0eff 	mov.w	lr, #255	; 0xff
   349b4:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   349b6:	e000      	b.n	349ba <ticker_job+0x66a>
   349b8:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
   349ba:	b221      	sxth	r1, r4
   349bc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   349c0:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
   349c4:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   349c6:	f8dc 0008 	ldr.w	r0, [ip, #8]
   349ca:	4298      	cmp	r0, r3
   349cc:	f080 813c 	bcs.w	34c48 <ticker_job+0x8f8>
				ticker->ticks_to_expire -=
   349d0:	1a1b      	subs	r3, r3, r0
   349d2:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
   349d4:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
   349d8:	2aff      	cmp	r2, #255	; 0xff
   349da:	46a6      	mov	lr, r4
   349dc:	d1ec      	bne.n	349b8 <ticker_job+0x668>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   349de:	9a01      	ldr	r2, [sp, #4]
   349e0:	9b03      	ldr	r3, [sp, #12]
   349e2:	7753      	strb	r3, [r2, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   349e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   349e8:	0109      	lsls	r1, r1, #4
			nodes[ticker_id_prev].next = ticker_id_head;
   349ea:	9300      	str	r3, [sp, #0]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   349ec:	f81a 3001 	ldrb.w	r3, [sl, r1]
   349f0:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   349f2:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
   349f6:	8beb      	ldrh	r3, [r5, #30]
   349f8:	3b01      	subs	r3, #1
   349fa:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   349fc:	f04f 0302 	mov.w	r3, #2
   34a00:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   34a02:	2201      	movs	r2, #1
   34a04:	e729      	b.n	3485a <ticker_job+0x50a>
				if (!ticker->lazy_current) {
   34a06:	f1be 0f00 	cmp.w	lr, #0
   34a0a:	d13b      	bne.n	34a84 <ticker_job+0x734>
					lazy_periodic = ticker->lazy_periodic;
   34a0c:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
   34a10:	4672      	mov	r2, lr
				while (count--) {
   34a12:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   34a14:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   34a18:	2100      	movs	r1, #0
   34a1a:	9005      	str	r0, [sp, #20]
   34a1c:	e009      	b.n	34a32 <ticker_job+0x6e2>
   34a1e:	bf00      	nop
   34a20:	ff172b5a 	.word	0xff172b5a
   34a24:	7f172b59 	.word	0x7f172b59
   34a28:	4628      	mov	r0, r5
				while (count--) {
   34a2a:	3a01      	subs	r2, #1
					ticks_to_expire +=
   34a2c:	4401      	add	r1, r0
				while (count--) {
   34a2e:	1c50      	adds	r0, r2, #1
   34a30:	d00f      	beq.n	34a52 <ticker_job+0x702>
	ticker->remainder_current += ticker->remainder_periodic;
   34a32:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   34a34:	eb03 0008 	add.w	r0, r3, r8
   34a38:	4548      	cmp	r0, r9
   34a3a:	d8f5      	bhi.n	34a28 <ticker_job+0x6d8>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34a3c:	9805      	ldr	r0, [sp, #20]
   34a3e:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   34a42:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34a44:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   34a48:	4401      	add	r1, r0
				while (count--) {
   34a4a:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34a4c:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   34a50:	d1ef      	bne.n	34a32 <ticker_job+0x6e2>
				} else if (!ticker->must_expire) {
   34a52:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   34a56:	6263      	str	r3, [r4, #36]	; 0x24
   34a58:	2a00      	cmp	r2, #0
   34a5a:	f000 80bd 	beq.w	34bd8 <ticker_job+0x888>
				ticker->ticks_to_expire = ticks_to_expire;
   34a5e:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   34a60:	f8a4 e01e 	strh.w	lr, [r4, #30]
   34a64:	e72e      	b.n	348c4 <ticker_job+0x574>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   34a66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   34a68:	f1be 0f00 	cmp.w	lr, #0
   34a6c:	f47f aec3 	bne.w	347f6 <ticker_job+0x4a6>
   34a70:	b118      	cbz	r0, 34a7a <ticker_job+0x72a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   34a72:	7a05      	ldrb	r5, [r0, #8]
   34a74:	2d01      	cmp	r5, #1
   34a76:	f000 8109 	beq.w	34c8c <ticker_job+0x93c>
			instance->ticks_slot_previous = ticker->ticks_slot;
   34a7a:	f8cb 2018 	str.w	r2, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   34a7e:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   34a82:	e6b8      	b.n	347f6 <ticker_job+0x4a6>
					ticker->req = ticker->ack;
   34a84:	7063      	strb	r3, [r4, #1]
   34a86:	2200      	movs	r2, #0
   34a88:	e7c3      	b.n	34a12 <ticker_job+0x6c2>
	count_user = instance->count_user;
   34a8a:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   34a8e:	f8db 5004 	ldr.w	r5, [fp, #4]
	while (count_user--) {
   34a92:	1e5f      	subs	r7, r3, #1
   34a94:	b2ff      	uxtb	r7, r7
   34a96:	2b00      	cmp	r3, #0
   34a98:	f43f ae13 	beq.w	346c2 <ticker_job+0x372>
		flag_compare_update = 1U;
   34a9c:	2301      	movs	r3, #1
   34a9e:	9306      	str	r3, [sp, #24]
   34aa0:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   34aa4:	2600      	movs	r6, #0
		while (user->first != user->last) {
   34aa6:	787b      	ldrb	r3, [r7, #1]
   34aa8:	78f9      	ldrb	r1, [r7, #3]
		user_op = &user->user_op[0];
   34aaa:	687c      	ldr	r4, [r7, #4]
		while (user->first != user->last) {
   34aac:	4299      	cmp	r1, r3
   34aae:	d10c      	bne.n	34aca <ticker_job+0x77a>
   34ab0:	e06f      	b.n	34b92 <ticker_job+0x842>
	switch (uop->op) {
   34ab2:	2b01      	cmp	r3, #1
   34ab4:	d03a      	beq.n	34b2c <ticker_job+0x7dc>
			first = user->first + 1;
   34ab6:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   34ab8:	783a      	ldrb	r2, [r7, #0]
			first = user->first + 1;
   34aba:	3301      	adds	r3, #1
   34abc:	b2db      	uxtb	r3, r3
				first = 0U;
   34abe:	429a      	cmp	r2, r3
   34ac0:	bf08      	it	eq
   34ac2:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   34ac4:	4299      	cmp	r1, r3
			user->first = first;
   34ac6:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   34ac8:	d063      	beq.n	34b92 <ticker_job+0x842>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   34aca:	b21b      	sxth	r3, r3
   34acc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   34ad0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   34ad4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
	switch (uop->op) {
   34ad8:	f814 3023 	ldrb.w	r3, [r4, r3, lsl #2]
   34adc:	2b02      	cmp	r3, #2
   34ade:	d02a      	beq.n	34b36 <ticker_job+0x7e6>
   34ae0:	2b03      	cmp	r3, #3
   34ae2:	d1e6      	bne.n	34ab2 <ticker_job+0x762>
		if (uop->id < instance->count_node) {
   34ae4:	f89c 3001 	ldrb.w	r3, [ip, #1]
   34ae8:	f89b 2008 	ldrb.w	r2, [fp, #8]
   34aec:	429a      	cmp	r2, r3
   34aee:	d94e      	bls.n	34b8e <ticker_job+0x83e>
			node[uop->id].priority =
   34af0:	f8db 2000 	ldr.w	r2, [fp]
   34af4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   34af8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   34afc:	f89c 3004 	ldrb.w	r3, [ip, #4]
   34b00:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   34b04:	2200      	movs	r2, #0
		fp_op_func = uop->fp_op_func;
   34b06:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
			uop->status = TICKER_STATUS_SUCCESS;
   34b0a:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	if (fp_op_func) {
   34b0e:	b123      	cbz	r3, 34b1a <ticker_job+0x7ca>
		fp_op_func(uop->status, uop->op_context);
   34b10:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
   34b14:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
   34b18:	4798      	blx	r3
   34b1a:	78f9      	ldrb	r1, [r7, #3]
   34b1c:	e7cb      	b.n	34ab6 <ticker_job+0x766>
		_ticks_to_expire += ticker->ticks_to_expire;
   34b1e:	f8da 3008 	ldr.w	r3, [sl, #8]
	*ticker_id_head = _ticker_id_head;
   34b22:	f888 2000 	strb.w	r2, [r8]
		_ticks_to_expire += ticker->ticks_to_expire;
   34b26:	4419      	add	r1, r3
	*ticks_to_expire = _ticks_to_expire;
   34b28:	f8c9 1000 	str.w	r1, [r9]
		fp_op_func = uop->fp_op_func;
   34b2c:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   34b30:	f8cc 6028 	str.w	r6, [ip, #40]	; 0x28
		break;
   34b34:	e7eb      	b.n	34b0e <ticker_job+0x7be>
		ticker_by_next_slot_get(instance,
   34b36:	e9dc 8001 	ldrd	r8, r0, [ip, #4]
	_ticker_id_head = *ticker_id_head;
   34b3a:	f898 2000 	ldrb.w	r2, [r8]
		ticker_by_next_slot_get(instance,
   34b3e:	f8dc 900c 	ldr.w	r9, [ip, #12]
	node = instance->nodes;
   34b42:	f8db e000 	ldr.w	lr, [fp]
	_ticks_to_expire = *ticks_to_expire;
   34b46:	f8d9 1000 	ldr.w	r1, [r9]
	    (*ticks_current != instance->ticks_current)) {
   34b4a:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   34b4e:	2aff      	cmp	r2, #255	; 0xff
   34b50:	d003      	beq.n	34b5a <ticker_job+0x80a>
   34b52:	f8d0 a000 	ldr.w	sl, [r0]
   34b56:	459a      	cmp	sl, r3
   34b58:	d021      	beq.n	34b9e <ticker_job+0x84e>
		_ticker_id_head = instance->ticker_id_head;
   34b5a:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   34b5e:	6003      	str	r3, [r0, #0]
		_ticks_to_expire = 0U;
   34b60:	2100      	movs	r1, #0
   34b62:	e00d      	b.n	34b80 <ticker_job+0x830>
		ticker = &node[_ticker_id_head];
   34b64:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   34b68:	eb0e 1a03 	add.w	sl, lr, r3, lsl #4
   34b6c:	011b      	lsls	r3, r3, #4
			if (ticker->ticks_slot) {
   34b6e:	f8da 0018 	ldr.w	r0, [sl, #24]
   34b72:	2800      	cmp	r0, #0
   34b74:	d1d3      	bne.n	34b1e <ticker_job+0x7ce>
		_ticks_to_expire += ticker->ticks_to_expire;
   34b76:	f8da 0008 	ldr.w	r0, [sl, #8]
		_ticker_id_head = ticker->next;
   34b7a:	f81e 2003 	ldrb.w	r2, [lr, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
   34b7e:	4401      	add	r1, r0
	while (_ticker_id_head != TICKER_NULL) {
   34b80:	2aff      	cmp	r2, #255	; 0xff
   34b82:	d1ef      	bne.n	34b64 <ticker_job+0x814>
	*ticker_id_head = _ticker_id_head;
   34b84:	f888 2000 	strb.w	r2, [r8]
	*ticks_to_expire = _ticks_to_expire;
   34b88:	f8c9 1000 	str.w	r1, [r9]
   34b8c:	e7ce      	b.n	34b2c <ticker_job+0x7dc>
   34b8e:	2201      	movs	r2, #1
   34b90:	e7b9      	b.n	34b06 <ticker_job+0x7b6>
	while (count_user--) {
   34b92:	42bd      	cmp	r5, r7
   34b94:	f1a7 0308 	sub.w	r3, r7, #8
   34b98:	d00a      	beq.n	34bb0 <ticker_job+0x860>
   34b9a:	461f      	mov	r7, r3
   34b9c:	e783      	b.n	34aa6 <ticker_job+0x756>
		ticker = &node[_ticker_id_head];
   34b9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   34ba2:	0113      	lsls	r3, r2, #4
		_ticker_id_head = ticker->next;
   34ba4:	f81e 2003 	ldrb.w	r2, [lr, r3]
	while (_ticker_id_head != TICKER_NULL) {
   34ba8:	e7ea      	b.n	34b80 <ticker_job+0x830>
	if (!pending) {
   34baa:	9b08      	ldr	r3, [sp, #32]
   34bac:	2b00      	cmp	r3, #0
   34bae:	d058      	beq.n	34c62 <ticker_job+0x912>
	if (flag_compare_update) {
   34bb0:	9b06      	ldr	r3, [sp, #24]
   34bb2:	2b00      	cmp	r3, #0
   34bb4:	f47f ad85 	bne.w	346c2 <ticker_job+0x372>
	if (instance->worker_trigger) {
   34bb8:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
   34bbc:	2200      	movs	r2, #0
   34bbe:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
   34bc2:	b12b      	cbz	r3, 34bd0 <ticker_job+0x880>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   34bc4:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   34bc8:	465b      	mov	r3, fp
   34bca:	2201      	movs	r2, #1
   34bcc:	2103      	movs	r1, #3
   34bce:	e45a      	b.n	34486 <ticker_job+0x136>
}
   34bd0:	b00d      	add	sp, #52	; 0x34
   34bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34bd6:	4770      	bx	lr
					while (ticks_to_expire <
   34bd8:	458a      	cmp	sl, r1
   34bda:	f67f af40 	bls.w	34a5e <ticker_job+0x70e>
   34bde:	1c68      	adds	r0, r5, #1
   34be0:	9405      	str	r4, [sp, #20]
   34be2:	4604      	mov	r4, r0
   34be4:	e005      	b.n	34bf2 <ticker_job+0x8a2>
   34be6:	4628      	mov	r0, r5
						ticks_to_expire +=
   34be8:	4401      	add	r1, r0
						lazy++;
   34bea:	3201      	adds	r2, #1
					while (ticks_to_expire <
   34bec:	458a      	cmp	sl, r1
						lazy++;
   34bee:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   34bf0:	d910      	bls.n	34c14 <ticker_job+0x8c4>
	ticker->remainder_current += ticker->remainder_periodic;
   34bf2:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   34bf4:	eb03 0008 	add.w	r0, r3, r8
   34bf8:	4548      	cmp	r0, r9
   34bfa:	d8f4      	bhi.n	34be6 <ticker_job+0x896>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34bfc:	4620      	mov	r0, r4
   34bfe:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   34c02:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34c04:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   34c08:	3201      	adds	r2, #1
					while (ticks_to_expire <
   34c0a:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34c0c:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   34c10:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   34c12:	d8ee      	bhi.n	34bf2 <ticker_job+0x8a2>
				ticker->lazy_current += (lazy_periodic + lazy);
   34c14:	9c05      	ldr	r4, [sp, #20]
   34c16:	4472      	add	r2, lr
   34c18:	6263      	str	r3, [r4, #36]	; 0x24
   34c1a:	fa1f fe82 	uxth.w	lr, r2
   34c1e:	e71e      	b.n	34a5e <ticker_job+0x70e>
	ticker_id_old_head = instance->ticker_id_head;
   34c20:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   34c24:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   34c28:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
   34c2a:	f8db 3000 	ldr.w	r3, [fp]
   34c2e:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   34c30:	f8db 3004 	ldr.w	r3, [fp, #4]
   34c34:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   34c36:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   34c38:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   34c3a:	b2db      	uxtb	r3, r3
   34c3c:	2900      	cmp	r1, #0
   34c3e:	d03f      	beq.n	34cc0 <ticker_job+0x970>
		flag_elapsed = 0U;
   34c40:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
   34c42:	9202      	str	r2, [sp, #8]
   34c44:	f7ff bbbf 	b.w	343c6 <ticker_job+0x76>
				node->ticks_to_expire -=
   34c48:	1ac0      	subs	r0, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
   34c4a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   34c4e:	f8cc 0008 	str.w	r0, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   34c52:	f43f aed0 	beq.w	349f6 <ticker_job+0x6a6>
   34c56:	fa0f f18e 	sxth.w	r1, lr
   34c5a:	e6c0      	b.n	349de <ticker_job+0x68e>
			ticker->ticks_to_expire -= ticks_elapsed;
   34c5c:	1bdb      	subs	r3, r3, r7
   34c5e:	60a3      	str	r3, [r4, #8]
			break;
   34c60:	e5ea      	b.n	34838 <ticker_job+0x4e8>
	count_user = instance->count_user;
   34c62:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   34c66:	f8db 5004 	ldr.w	r5, [fp, #4]
	while (count_user--) {
   34c6a:	1e5f      	subs	r7, r3, #1
   34c6c:	b2ff      	uxtb	r7, r7
   34c6e:	2b00      	cmp	r3, #0
   34c70:	f47f af16 	bne.w	34aa0 <ticker_job+0x750>
   34c74:	e79c      	b.n	34bb0 <ticker_job+0x860>
		if (cntr_stop() == 0) {
   34c76:	f00d fc2d 	bl	424d4 <cntr_stop>
   34c7a:	2800      	cmp	r0, #0
   34c7c:	d19c      	bne.n	34bb8 <ticker_job+0x868>
			instance->ticks_slot_previous = 0U;
   34c7e:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   34c82:	f00d fc4d 	bl	42520 <cntr_cnt_get>
   34c86:	f8cb 0014 	str.w	r0, [fp, #20]
   34c8a:	e795      	b.n	34bb8 <ticker_job+0x868>
		instance->ticker_id_head = ticker->next;
   34c8c:	9a00      	ldr	r2, [sp, #0]
   34c8e:	9d04      	ldr	r5, [sp, #16]
		ticker->ticks_to_expire = 0U;
   34c90:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   34c94:	5d52      	ldrb	r2, [r2, r5]
   34c96:	f88b 201d 	strb.w	r2, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   34c9a:	6862      	ldr	r2, [r4, #4]
   34c9c:	2a00      	cmp	r2, #0
   34c9e:	f43f adb5 	beq.w	3480c <ticker_job+0x4bc>
   34ca2:	e60d      	b.n	348c0 <ticker_job+0x570>
		ticks_current = cntr_cnt_get();
   34ca4:	f00d fc3c 	bl	42520 <cntr_cnt_get>
   34ca8:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   34caa:	f00d fc03 	bl	424b4 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   34cae:	f89b 301d 	ldrb.w	r3, [fp, #29]
   34cb2:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   34cb4:	2800      	cmp	r0, #0
   34cb6:	f47f ad0f 	bne.w	346d8 <ticker_job+0x388>
			instance->ticks_current = ticks_current;
   34cba:	f8cb 4014 	str.w	r4, [fp, #20]
   34cbe:	e50b      	b.n	346d8 <ticker_job+0x388>
	insert_head = TICKER_NULL;
   34cc0:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   34cc2:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
   34cc4:	9301      	str	r3, [sp, #4]
   34cc6:	e4ec      	b.n	346a2 <ticker_job+0x352>

00034cc8 <ticker_init>:
{
   34cc8:	b4f0      	push	{r4, r5, r6, r7}
   34cca:	9d04      	ldr	r5, [sp, #16]
   34ccc:	f89d 7014 	ldrb.w	r7, [sp, #20]
   34cd0:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   34cd2:	2800      	cmp	r0, #0
   34cd4:	d137      	bne.n	34d46 <ticker_init+0x7e>
	instance->count_node = count_node;
   34cd6:	4e1d      	ldr	r6, [pc, #116]	; (34d4c <ticker_init+0x84>)
	while (count_node--) {
   34cd8:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   34cdc:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   34cde:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   34ce0:	fa5f fc8c 	uxtb.w	ip, ip
   34ce4:	b149      	cbz	r1, 34cfa <ticker_init+0x32>
   34ce6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   34cea:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   34cee:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   34cf0:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   34cf4:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   34cf8:	d1f9      	bne.n	34cee <ticker_init+0x26>
	while (count_user--) {
   34cfa:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   34cfc:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   34cfe:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   34d00:	b2d2      	uxtb	r2, r2
   34d02:	b183      	cbz	r3, 34d26 <ticker_init+0x5e>
   34d04:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   34d08:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   34d0a:	4610      	mov	r0, r2
   34d0c:	f812 3908 	ldrb.w	r3, [r2], #-8
   34d10:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   34d14:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   34d18:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   34d1a:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   34d1e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   34d22:	b2df      	uxtb	r7, r3
	while (count_user--) {
   34d24:	d1f0      	bne.n	34d08 <ticker_init+0x40>
	if (count_op) {
   34d26:	b977      	cbnz	r7, 34d46 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   34d28:	9a07      	ldr	r2, [sp, #28]
   34d2a:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   34d2c:	9a08      	ldr	r2, [sp, #32]
   34d2e:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   34d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   34d34:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34d36:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   34d38:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   34d3a:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   34d3e:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   34d40:	8177      	strh	r7, [r6, #10]
}
   34d42:	bcf0      	pop	{r4, r5, r6, r7}
   34d44:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   34d46:	2001      	movs	r0, #1
}
   34d48:	bcf0      	pop	{r4, r5, r6, r7}
   34d4a:	4770      	bx	lr
   34d4c:	200044d0 	.word	0x200044d0

00034d50 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   34d50:	4b04      	ldr	r3, [pc, #16]	; (34d64 <ticker_is_initialized+0x14>)
   34d52:	222c      	movs	r2, #44	; 0x2c
   34d54:	fb02 3300 	mla	r3, r2, r0, r3
   34d58:	7a18      	ldrb	r0, [r3, #8]
}
   34d5a:	3800      	subs	r0, #0
   34d5c:	bf18      	it	ne
   34d5e:	2001      	movne	r0, #1
   34d60:	4770      	bx	lr
   34d62:	bf00      	nop
   34d64:	200044d0 	.word	0x200044d0

00034d68 <ticker_trigger>:
	if (instance->sched_cb) {
   34d68:	4b0a      	ldr	r3, [pc, #40]	; (34d94 <ticker_trigger+0x2c>)
   34d6a:	222c      	movs	r2, #44	; 0x2c
   34d6c:	fb02 3200 	mla	r2, r2, r0, r3
{
   34d70:	b410      	push	{r4}
	if (instance->sched_cb) {
   34d72:	6a54      	ldr	r4, [r2, #36]	; 0x24
   34d74:	b15c      	cbz	r4, 34d8e <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   34d76:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   34d7a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   34d7e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   34d82:	46a4      	mov	ip, r4
   34d84:	2201      	movs	r2, #1
}
   34d86:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   34d88:	2103      	movs	r1, #3
   34d8a:	2002      	movs	r0, #2
   34d8c:	4760      	bx	ip
}
   34d8e:	bc10      	pop	{r4}
   34d90:	4770      	bx	lr
   34d92:	bf00      	nop
   34d94:	200044d0 	.word	0x200044d0

00034d98 <ticker_start_ext>:
{
   34d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   34d9c:	4e28      	ldr	r6, [pc, #160]	; (34e40 <ticker_start_ext+0xa8>)
{
   34d9e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   34da2:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   34da4:	252c      	movs	r5, #44	; 0x2c
   34da6:	fb05 6504 	mla	r5, r5, r4, r6
{
   34daa:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   34dac:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   34db0:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   34db4:	6869      	ldr	r1, [r5, #4]
   34db6:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   34dba:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   34dbe:	78fc      	ldrb	r4, [r7, #3]
	if (last >= user->count_user_op) {
   34dc0:	f811 e030 	ldrb.w	lr, [r1, r0, lsl #3]
	if (last == user->first) {
   34dc4:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   34dc6:	f104 0c01 	add.w	ip, r4, #1
   34dca:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   34dce:	45e6      	cmp	lr, ip
   34dd0:	bf98      	it	ls
   34dd2:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   34dd6:	4561      	cmp	r1, ip
   34dd8:	d02e      	beq.n	34e38 <ticker_start_ext+0xa0>
	user_op = &user->user_op[user->last];
   34dda:	6879      	ldr	r1, [r7, #4]
   34ddc:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
   34de0:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
   34de4:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   34de8:	f04f 0904 	mov.w	r9, #4
   34dec:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   34df0:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   34df2:	9b08      	ldr	r3, [sp, #32]
   34df4:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   34df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   34df8:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   34dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   34dfc:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   34dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   34e00:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   34e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
   34e04:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   34e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   34e08:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   34e0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   34e0c:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   34e0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   34e10:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   34e12:	9b10      	ldr	r3, [sp, #64]	; 0x40
   34e14:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   34e16:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   34e18:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   34e1a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   34e1c:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   34e20:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   34e24:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   34e28:	4798      	blx	r3
   34e2a:	4633      	mov	r3, r6
   34e2c:	4649      	mov	r1, r9
   34e2e:	2200      	movs	r2, #0
   34e30:	47a8      	blx	r5
	return user_op->status;
   34e32:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   34e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   34e38:	2001      	movs	r0, #1
}
   34e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   34e3e:	bf00      	nop
   34e40:	200044d0 	.word	0x200044d0

00034e44 <ticker_start>:
{
   34e44:	b510      	push	{r4, lr}
   34e46:	b08a      	sub	sp, #40	; 0x28
   34e48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   34e4a:	9400      	str	r4, [sp, #0]
{
   34e4c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   34e4e:	9401      	str	r4, [sp, #4]
{
   34e50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   34e52:	9402      	str	r4, [sp, #8]
{
   34e54:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   34e58:	9403      	str	r4, [sp, #12]
{
   34e5a:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   34e5c:	9404      	str	r4, [sp, #16]
{
   34e5e:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   34e60:	9405      	str	r4, [sp, #20]
{
   34e62:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   34e64:	9406      	str	r4, [sp, #24]
{
   34e66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   34e68:	9407      	str	r4, [sp, #28]
{
   34e6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   34e6c:	9408      	str	r4, [sp, #32]
   34e6e:	2400      	movs	r4, #0
   34e70:	9409      	str	r4, [sp, #36]	; 0x24
   34e72:	f7ff ff91 	bl	34d98 <ticker_start_ext>
}
   34e76:	b00a      	add	sp, #40	; 0x28
   34e78:	bd10      	pop	{r4, pc}
   34e7a:	bf00      	nop

00034e7c <ticker_update_ext>:
{
   34e7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   34e80:	4d29      	ldr	r5, [pc, #164]	; (34f28 <ticker_update_ext+0xac>)
{
   34e82:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   34e86:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   34e8a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   34e8c:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
   34e90:	fb0e 5e04 	mla	lr, lr, r4, r5
{
   34e94:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   34e96:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   34e9a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   34e9e:	f8de 1004 	ldr.w	r1, [lr, #4]
   34ea2:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   34ea6:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	last = user->last + 1;
   34eaa:	78f4      	ldrb	r4, [r6, #3]
	if (last >= user->count_user_op) {
   34eac:	f811 9030 	ldrb.w	r9, [r1, r0, lsl #3]
	if (last == user->first) {
   34eb0:	7871      	ldrb	r1, [r6, #1]
	last = user->last + 1;
   34eb2:	f104 0c01 	add.w	ip, r4, #1
   34eb6:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   34eba:	45e1      	cmp	r9, ip
   34ebc:	bf98      	it	ls
   34ebe:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   34ec2:	4561      	cmp	r1, ip
{
   34ec4:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   34ec8:	d02a      	beq.n	34f20 <ticker_update_ext+0xa4>
	user_op = &user->user_op[user->last];
   34eca:	f8d6 a004 	ldr.w	sl, [r6, #4]
   34ece:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   34ed2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   34ed6:	eb0a 0481 	add.w	r4, sl, r1, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   34eda:	f04f 0b05 	mov.w	fp, #5
   34ede:	f80a b021 	strb.w	fp, [sl, r1, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   34ee2:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   34ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   34ee6:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   34ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   34eea:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   34eec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   34eee:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   34ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   34ef2:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   34ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   34ef6:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   34ef8:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   34efa:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   34efc:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   34efe:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   34f00:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   34f04:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   34f08:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   34f0c:	e9de 3608 	ldrd	r3, r6, [lr, #32]
   34f10:	4798      	blx	r3
   34f12:	462b      	mov	r3, r5
   34f14:	2200      	movs	r2, #0
   34f16:	2104      	movs	r1, #4
   34f18:	47b0      	blx	r6
	return user_op->status;
   34f1a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   34f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   34f20:	2001      	movs	r0, #1
}
   34f22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34f26:	bf00      	nop
   34f28:	200044d0 	.word	0x200044d0

00034f2c <ticker_update>:
{
   34f2c:	b510      	push	{r4, lr}
   34f2e:	b088      	sub	sp, #32
   34f30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   34f32:	9400      	str	r4, [sp, #0]
{
   34f34:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   34f36:	9401      	str	r4, [sp, #4]
{
   34f38:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   34f3a:	9402      	str	r4, [sp, #8]
{
   34f3c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   34f40:	9403      	str	r4, [sp, #12]
{
   34f42:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   34f46:	9404      	str	r4, [sp, #16]
{
   34f48:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   34f4a:	9405      	str	r4, [sp, #20]
{
   34f4c:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   34f4e:	9406      	str	r4, [sp, #24]
   34f50:	2400      	movs	r4, #0
   34f52:	9407      	str	r4, [sp, #28]
   34f54:	f7ff ff92 	bl	34e7c <ticker_update_ext>
}
   34f58:	b008      	add	sp, #32
   34f5a:	bd10      	pop	{r4, pc}

00034f5c <ticker_stop>:
{
   34f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   34f60:	4c1e      	ldr	r4, [pc, #120]	; (34fdc <ticker_stop+0x80>)
{
   34f62:	4684      	mov	ip, r0
   34f64:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   34f66:	212c      	movs	r1, #44	; 0x2c
   34f68:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   34f6c:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   34f70:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   34f74:	684d      	ldr	r5, [r1, #4]
   34f76:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   34f7a:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   34f7e:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   34f82:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   34f84:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   34f88:	f10e 0c01 	add.w	ip, lr, #1
   34f8c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   34f90:	4567      	cmp	r7, ip
   34f92:	bf98      	it	ls
   34f94:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   34f98:	4565      	cmp	r5, ip
   34f9a:	d01c      	beq.n	34fd6 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   34f9c:	6877      	ldr	r7, [r6, #4]
   34f9e:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   34fa2:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   34fa6:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   34faa:	f04f 0807 	mov.w	r8, #7
   34fae:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   34fb2:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   34fb4:	9b06      	ldr	r3, [sp, #24]
   34fb6:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   34fb8:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   34fba:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   34fbc:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   34fbe:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   34fc2:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   34fc6:	4798      	blx	r3
   34fc8:	4623      	mov	r3, r4
   34fca:	2200      	movs	r2, #0
   34fcc:	2104      	movs	r1, #4
   34fce:	47b0      	blx	r6
	return user_op->status;
   34fd0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   34fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   34fd6:	2001      	movs	r0, #1
}
   34fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34fdc:	200044d0 	.word	0x200044d0

00034fe0 <ticker_next_slot_get>:
{
   34fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   34fe4:	4d20      	ldr	r5, [pc, #128]	; (35068 <ticker_next_slot_get+0x88>)
{
   34fe6:	4684      	mov	ip, r0
   34fe8:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   34fea:	212c      	movs	r1, #44	; 0x2c
   34fec:	fb01 510c 	mla	r1, r1, ip, r5
	struct ticker_instance *instance = &_instance[instance_index];
   34ff0:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
   34ff4:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
	user = &instance->users[user_id];
   34ff8:	684c      	ldr	r4, [r1, #4]
   34ffa:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   34ffe:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
   35002:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   35006:	7874      	ldrb	r4, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   35008:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
   3500c:	f10e 0c01 	add.w	ip, lr, #1
   35010:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   35014:	4567      	cmp	r7, ip
   35016:	bf98      	it	ls
   35018:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   3501c:	4564      	cmp	r4, ip
   3501e:	d020      	beq.n	35062 <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
   35020:	6877      	ldr	r7, [r6, #4]
   35022:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   35026:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   3502a:	eb07 048e 	add.w	r4, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   3502e:	f64f 7802 	movw	r8, #65282	; 0xff02
   35032:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
   35036:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   3503a:	9b06      	ldr	r3, [sp, #24]
   3503c:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
   3503e:	9b07      	ldr	r3, [sp, #28]
   35040:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   35042:	9b08      	ldr	r3, [sp, #32]
   35044:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   35046:	2302      	movs	r3, #2
   35048:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
   3504a:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   3504e:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   35052:	4798      	blx	r3
   35054:	462b      	mov	r3, r5
   35056:	2200      	movs	r2, #0
   35058:	2104      	movs	r1, #4
   3505a:	47b0      	blx	r6
	return user_op->status;
   3505c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   3505e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   35062:	2001      	movs	r0, #1
}
   35064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35068:	200044d0 	.word	0x200044d0

0003506c <ticker_job_sched>:
{
   3506c:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   3506e:	4d0a      	ldr	r5, [pc, #40]	; (35098 <ticker_job_sched+0x2c>)
   35070:	222c      	movs	r2, #44	; 0x2c
   35072:	fb02 5200 	mla	r2, r2, r0, r5
   35076:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   3507a:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   3507c:	4608      	mov	r0, r1
   3507e:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   35080:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   35084:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35088:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   3508c:	46b4      	mov	ip, r6
   3508e:	2200      	movs	r2, #0
}
   35090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35094:	2104      	movs	r1, #4
   35096:	4760      	bx	ip
   35098:	200044d0 	.word	0x200044d0

0003509c <ticker_ticks_now_get>:
	return cntr_cnt_get();
   3509c:	f00d ba40 	b.w	42520 <cntr_cnt_get>

000350a0 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   350a0:	1a40      	subs	r0, r0, r1
}
   350a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   350a6:	4770      	bx	lr

000350a8 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   350a8:	b570      	push	{r4, r5, r6, lr}
   350aa:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   350ac:	2000      	movs	r0, #0
{
   350ae:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   350b0:	f003 fba2 	bl	387f8 <ull_adv_is_enabled>
   350b4:	b998      	cbnz	r0, 350de <ll_addr_set+0x36>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   350b6:	f003 fdc3 	bl	38c40 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   350ba:	f010 0606 	ands.w	r6, r0, #6
   350be:	d10e      	bne.n	350de <ll_addr_set+0x36>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   350c0:	b134      	cbz	r4, 350d0 <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   350c2:	2206      	movs	r2, #6
   350c4:	4629      	mov	r1, r5
   350c6:	4807      	ldr	r0, [pc, #28]	; (350e4 <ll_addr_set+0x3c>)
   350c8:	f016 fbdf 	bl	4b88a <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   350cc:	4630      	mov	r0, r6
}
   350ce:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   350d0:	2206      	movs	r2, #6
   350d2:	4629      	mov	r1, r5
   350d4:	4804      	ldr	r0, [pc, #16]	; (350e8 <ll_addr_set+0x40>)
   350d6:	f016 fbd8 	bl	4b88a <memcpy>
	return 0;
   350da:	4620      	mov	r0, r4
}
   350dc:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   350de:	200c      	movs	r0, #12
}
   350e0:	bd70      	pop	{r4, r5, r6, pc}
   350e2:	bf00      	nop
   350e4:	20004504 	.word	0x20004504
   350e8:	200044fc 	.word	0x200044fc

000350ec <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   350ec:	2801      	cmp	r0, #1
{
   350ee:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   350f0:	d805      	bhi.n	350fe <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   350f2:	4a04      	ldr	r2, [pc, #16]	; (35104 <ll_addr_get+0x18>)
   350f4:	4804      	ldr	r0, [pc, #16]	; (35108 <ll_addr_get+0x1c>)
   350f6:	2b00      	cmp	r3, #0
   350f8:	bf18      	it	ne
   350fa:	4610      	movne	r0, r2
   350fc:	4770      	bx	lr
		return NULL;
   350fe:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   35100:	4770      	bx	lr
   35102:	bf00      	nop
   35104:	20004504 	.word	0x20004504
   35108:	200044fc 	.word	0x200044fc

0003510c <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   3510c:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   3510e:	b510      	push	{r4, lr}
   35110:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   35112:	d80b      	bhi.n	3512c <ll_addr_read+0x20>
	if (addr_type) {
   35114:	4608      	mov	r0, r1
		return rnd_addr;
   35116:	4c07      	ldr	r4, [pc, #28]	; (35134 <ll_addr_read+0x28>)
   35118:	4907      	ldr	r1, [pc, #28]	; (35138 <ll_addr_read+0x2c>)
   3511a:	2b00      	cmp	r3, #0
   3511c:	bf18      	it	ne
   3511e:	460c      	movne	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   35120:	2206      	movs	r2, #6
   35122:	4621      	mov	r1, r4
   35124:	f016 fbb1 	bl	4b88a <memcpy>
	}

	return addr;
}
   35128:	4620      	mov	r0, r4
   3512a:	bd10      	pop	{r4, pc}
		return NULL;
   3512c:	2400      	movs	r4, #0
}
   3512e:	4620      	mov	r0, r4
   35130:	bd10      	pop	{r4, pc}
   35132:	bf00      	nop
   35134:	200044fc 	.word	0x200044fc
   35138:	20004504 	.word	0x20004504

0003513c <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   3513c:	2802      	cmp	r0, #2
   3513e:	d001      	beq.n	35144 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   35140:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   35142:	4770      	bx	lr
{
   35144:	b538      	push	{r3, r4, r5, lr}
   35146:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   35148:	4608      	mov	r0, r1
   3514a:	461d      	mov	r5, r3
   3514c:	f004 fc4e 	bl	399ec <ll_connected_get>
			if (!conn) {
   35150:	b110      	cbz	r0, 35158 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   35152:	2000      	movs	r0, #0
   35154:	7028      	strb	r0, [r5, #0]
}
   35156:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   35158:	4620      	mov	r0, r4
}
   3515a:	bd38      	pop	{r3, r4, r5, pc}

0003515c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   3515c:	2300      	movs	r3, #0
   3515e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   35160:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   35162:	4770      	bx	lr

00035164 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   35164:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   35166:	4802      	ldr	r0, [pc, #8]	; (35170 <hci_driver_init+0xc>)
   35168:	f7f8 feb4 	bl	2ded4 <bt_hci_driver_register>

	return 0;
}
   3516c:	2000      	movs	r0, #0
   3516e:	bd08      	pop	{r3, pc}
   35170:	000524e4 	.word	0x000524e4

00035174 <hci_driver_send>:
{
   35174:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   35176:	8983      	ldrh	r3, [r0, #12]
{
   35178:	b083      	sub	sp, #12
	if (!buf->len) {
   3517a:	b123      	cbz	r3, 35186 <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   3517c:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   3517e:	4604      	mov	r4, r0
   35180:	b1c3      	cbz	r3, 351b4 <hci_driver_send+0x40>
   35182:	2b02      	cmp	r3, #2
   35184:	d004      	beq.n	35190 <hci_driver_send+0x1c>
   35186:	f06f 0515 	mvn.w	r5, #21
}
   3518a:	4628      	mov	r0, r5
   3518c:	b003      	add	sp, #12
   3518e:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   35190:	a901      	add	r1, sp, #4
   35192:	f000 ff83 	bl	3609c <hci_acl_handle>
	if (evt) {
   35196:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   35198:	4605      	mov	r5, r0
	if (evt) {
   3519a:	b113      	cbz	r3, 351a2 <hci_driver_send+0x2e>
		bt_recv_prio(evt);
   3519c:	4618      	mov	r0, r3
   3519e:	f7f8 fe7b 	bl	2de98 <bt_recv_prio>
	if (!err) {
   351a2:	2d00      	cmp	r5, #0
   351a4:	d1f1      	bne.n	3518a <hci_driver_send+0x16>
		net_buf_unref(buf);
   351a6:	4620      	mov	r0, r4
   351a8:	f00e f996 	bl	434d8 <net_buf_unref>
   351ac:	2500      	movs	r5, #0
}
   351ae:	4628      	mov	r0, r5
   351b0:	b003      	add	sp, #12
   351b2:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   351b4:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   351b6:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   351b8:	f000 fa9c 	bl	356f4 <hci_cmd_handle>
	if (evt) {
   351bc:	2800      	cmp	r0, #0
   351be:	d0f2      	beq.n	351a6 <hci_driver_send+0x32>
		bt_recv_prio(evt);
   351c0:	f7f8 fe6a 	bl	2de98 <bt_recv_prio>
		if (node_rx) {
   351c4:	9d01      	ldr	r5, [sp, #4]
   351c6:	2d00      	cmp	r5, #0
   351c8:	d0ed      	beq.n	351a6 <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   351ca:	4628      	mov	r0, r5
   351cc:	f001 fc3e 	bl	36a4c <hci_get_class>
   351d0:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   351d2:	9901      	ldr	r1, [sp, #4]
   351d4:	4801      	ldr	r0, [pc, #4]	; (351dc <hci_driver_send+0x68>)
   351d6:	f01b fa34 	bl	50642 <k_queue_append>
	if (!err) {
   351da:	e7e4      	b.n	351a6 <hci_driver_send+0x32>
   351dc:	20001054 	.word	0x20001054

000351e0 <recv_thread>:
{
   351e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   351e2:	4e41      	ldr	r6, [pc, #260]	; (352e8 <recv_thread+0x108>)
		LL_ASSERT(0);
   351e4:	4f41      	ldr	r7, [pc, #260]	; (352ec <recv_thread+0x10c>)
{
   351e6:	b083      	sub	sp, #12
   351e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   351ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   351f0:	4630      	mov	r0, r6
   351f2:	f012 fccf 	bl	47b94 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   351f6:	2800      	cmp	r0, #0
   351f8:	d0f6      	beq.n	351e8 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   351fa:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   351fc:	9001      	str	r0, [sp, #4]
	switch (class) {
   351fe:	2b04      	cmp	r3, #4
   35200:	d821      	bhi.n	35246 <recv_thread+0x66>
   35202:	2b00      	cmp	r3, #0
   35204:	d14b      	bne.n	3529e <recv_thread+0xbe>
		LL_ASSERT(0);
   35206:	493a      	ldr	r1, [pc, #232]	; (352f0 <recv_thread+0x110>)
   35208:	483a      	ldr	r0, [pc, #232]	; (352f4 <recv_thread+0x114>)
   3520a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   3520e:	463a      	mov	r2, r7
   35210:	f014 fa30 	bl	49674 <printk>
   35214:	4040      	eors	r0, r0
   35216:	f380 8811 	msr	BASEPRI, r0
   3521a:	f04f 0003 	mov.w	r0, #3
   3521e:	df02      	svc	2
	node_rx->hdr.next = NULL;
   35220:	9b01      	ldr	r3, [sp, #4]
   35222:	2200      	movs	r2, #0
   35224:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   35226:	a801      	add	r0, sp, #4
   35228:	f002 f8b4 	bl	37394 <ll_rx_mem_release>
   3522c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35234:	4630      	mov	r0, r6
   35236:	f012 fcad 	bl	47b94 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   3523a:	2800      	cmp	r0, #0
   3523c:	d0d4      	beq.n	351e8 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   3523e:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   35240:	9001      	str	r0, [sp, #4]
	switch (class) {
   35242:	2b04      	cmp	r3, #4
   35244:	d9dd      	bls.n	35202 <recv_thread+0x22>
   35246:	2b05      	cmp	r3, #5
   35248:	d1dd      	bne.n	35206 <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   3524a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3524e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35252:	2003      	movs	r0, #3
   35254:	f7f8 f848 	bl	2d2e8 <bt_buf_get_rx>
   35258:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   3525a:	4621      	mov	r1, r4
   3525c:	9801      	ldr	r0, [sp, #4]
   3525e:	f000 ffa9 	bl	361b4 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   35262:	9b01      	ldr	r3, [sp, #4]
   35264:	2200      	movs	r2, #0
   35266:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   35268:	a801      	add	r0, sp, #4
   3526a:	f002 f893 	bl	37394 <ll_rx_mem_release>
		while (buf) {
   3526e:	2c00      	cmp	r4, #0
   35270:	d0ba      	beq.n	351e8 <recv_thread+0x8>
			frag = net_buf_ref(buf);
   35272:	4620      	mov	r0, r4
   35274:	f01a faa6 	bl	4f7c4 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   35278:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   3527a:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   3527c:	2000      	movs	r0, #0
   3527e:	f01a fac7 	bl	4f810 <net_buf_frag_del>
			if (frag->len) {
   35282:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   35284:	4604      	mov	r4, r0
				bt_recv(frag);
   35286:	4628      	mov	r0, r5
			if (frag->len) {
   35288:	b133      	cbz	r3, 35298 <recv_thread+0xb8>
				bt_recv(frag);
   3528a:	f7f8 fd81 	bl	2dd90 <bt_recv>
	z_impl_k_yield();
   3528e:	f013 f915 	bl	484bc <z_impl_k_yield>
		while (buf) {
   35292:	2c00      	cmp	r4, #0
   35294:	d1ed      	bne.n	35272 <recv_thread+0x92>
   35296:	e7a7      	b.n	351e8 <recv_thread+0x8>
				net_buf_unref(frag);
   35298:	f00e f91e 	bl	434d8 <net_buf_unref>
   3529c:	e7f7      	b.n	3528e <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   3529e:	2b02      	cmp	r3, #2
   352a0:	d013      	beq.n	352ca <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   352a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   352a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   352aa:	2001      	movs	r0, #1
   352ac:	f7f8 f81c 	bl	2d2e8 <bt_buf_get_rx>
   352b0:	4604      	mov	r4, r0
		if (buf) {
   352b2:	b19c      	cbz	r4, 352dc <recv_thread+0xfc>
			hci_evt_encode(node_rx, buf);
   352b4:	9801      	ldr	r0, [sp, #4]
   352b6:	4621      	mov	r1, r4
   352b8:	f000 ffb6 	bl	36228 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   352bc:	9b01      	ldr	r3, [sp, #4]
   352be:	2200      	movs	r2, #0
   352c0:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   352c2:	a801      	add	r0, sp, #4
   352c4:	f002 f866 	bl	37394 <ll_rx_mem_release>
		while (buf) {
   352c8:	e7d3      	b.n	35272 <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   352ca:	2200      	movs	r2, #0
   352cc:	2300      	movs	r3, #0
   352ce:	2101      	movs	r1, #1
   352d0:	2000      	movs	r0, #0
   352d2:	f7f8 f833 	bl	2d33c <bt_buf_get_evt>
   352d6:	4604      	mov	r4, r0
		if (buf) {
   352d8:	2c00      	cmp	r4, #0
   352da:	d1eb      	bne.n	352b4 <recv_thread+0xd4>
	node_rx->hdr.next = NULL;
   352dc:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   352de:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   352e0:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   352e2:	f002 f857 	bl	37394 <ll_rx_mem_release>
		while (buf) {
   352e6:	e77f      	b.n	351e8 <recv_thread+0x8>
   352e8:	20001054 	.word	0x20001054
   352ec:	00052480 	.word	0x00052480
   352f0:	000524c0 	.word	0x000524c0
   352f4:	00052460 	.word	0x00052460

000352f8 <prio_recv_thread>:
{
   352f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   352fc:	4f2e      	ldr	r7, [pc, #184]	; (353b8 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   352fe:	4e2f      	ldr	r6, [pc, #188]	; (353bc <prio_recv_thread+0xc4>)
{
   35300:	b082      	sub	sp, #8
   35302:	e00c      	b.n	3531e <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   35304:	f7f8 f81a 	bl	2d33c <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   35308:	4622      	mov	r2, r4
   3530a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   3530e:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   35310:	f001 fb84 	bl	36a1c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   35314:	4620      	mov	r0, r4
   35316:	f7f8 fdbf 	bl	2de98 <bt_recv_prio>
	z_impl_k_yield();
   3531a:	f013 f8cf 	bl	484bc <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   3531e:	f10d 0102 	add.w	r1, sp, #2
   35322:	a801      	add	r0, sp, #4
   35324:	f001 fe8c 	bl	37040 <ll_rx_get>
   35328:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   3532a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3532e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35332:	2100      	movs	r1, #0
   35334:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   35336:	2c00      	cmp	r4, #0
   35338:	d1e4      	bne.n	35304 <prio_recv_thread+0xc>
		if (node_rx) {
   3533a:	9b01      	ldr	r3, [sp, #4]
   3533c:	b1b3      	cbz	r3, 3536c <prio_recv_thread+0x74>
			ll_rx_dequeue();
   3533e:	f001 ff61 	bl	37204 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   35342:	f8dd 8004 	ldr.w	r8, [sp, #4]
   35346:	4640      	mov	r0, r8
   35348:	f001 fb80 	bl	36a4c <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   3534c:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   3534e:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   35352:	796b      	ldrb	r3, [r5, #5]
   35354:	2b03      	cmp	r3, #3
   35356:	d102      	bne.n	3535e <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   35358:	792b      	ldrb	r3, [r5, #4]
   3535a:	2b17      	cmp	r3, #23
   3535c:	d00e      	beq.n	3537c <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   3535e:	4629      	mov	r1, r5
   35360:	4630      	mov	r0, r6
   35362:	f01b f96e 	bl	50642 <k_queue_append>
		if (iso_received || node_rx) {
   35366:	9b01      	ldr	r3, [sp, #4]
   35368:	2b00      	cmp	r3, #0
   3536a:	d1d8      	bne.n	3531e <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   3536c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35374:	4638      	mov	r0, r7
   35376:	f012 fc67 	bl	47c48 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   3537a:	e7d0      	b.n	3531e <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   3537c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35380:	4621      	mov	r1, r4
   35382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35386:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   35388:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   3538c:	f7f7 ffd6 	bl	2d33c <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   35390:	4641      	mov	r1, r8
   35392:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   35394:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   35396:	f105 001c 	add.w	r0, r5, #28
   3539a:	f000 fee3 	bl	36164 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   3539e:	4640      	mov	r0, r8
   353a0:	f000 ff00 	bl	361a4 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   353a4:	4620      	mov	r0, r4
			if (buf) {
   353a6:	b124      	cbz	r4, 353b2 <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   353a8:	f7f8 fd76 	bl	2de98 <bt_recv_prio>
					net_buf_unref(buf);
   353ac:	4620      	mov	r0, r4
   353ae:	f00e f893 	bl	434d8 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   353b2:	9d01      	ldr	r5, [sp, #4]
   353b4:	e7d3      	b.n	3535e <prio_recv_thread+0x66>
   353b6:	bf00      	nop
   353b8:	20001024 	.word	0x20001024
   353bc:	20001054 	.word	0x20001054

000353c0 <hci_driver_open>:
{
   353c0:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   353c2:	481a      	ldr	r0, [pc, #104]	; (3542c <hci_driver_open+0x6c>)
{
   353c4:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   353c6:	f002 fc67 	bl	37c98 <ll_init>
	if (err) {
   353ca:	4604      	mov	r4, r0
   353cc:	bb58      	cbnz	r0, 35426 <hci_driver_open+0x66>
	hci_init(NULL);
   353ce:	f001 fb53 	bl	36a78 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   353d2:	2600      	movs	r6, #0
   353d4:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   353d6:	f06f 0209 	mvn.w	r2, #9
   353da:	e9cd 2403 	strd	r2, r4, [sp, #12]
   353de:	e9cd 6706 	strd	r6, r7, [sp, #24]
   353e2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   353e6:	4b12      	ldr	r3, [pc, #72]	; (35430 <hci_driver_open+0x70>)
   353e8:	4912      	ldr	r1, [pc, #72]	; (35434 <hci_driver_open+0x74>)
   353ea:	9400      	str	r4, [sp, #0]
   353ec:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   353f0:	4811      	ldr	r0, [pc, #68]	; (35438 <hci_driver_open+0x78>)
   353f2:	f012 f9c1 	bl	47778 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   353f6:	4911      	ldr	r1, [pc, #68]	; (3543c <hci_driver_open+0x7c>)
   353f8:	480f      	ldr	r0, [pc, #60]	; (35438 <hci_driver_open+0x78>)
   353fa:	f01b f88a 	bl	50512 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   353fe:	f06f 0207 	mvn.w	r2, #7
   35402:	e9cd 2403 	strd	r2, r4, [sp, #12]
   35406:	e9cd 6706 	strd	r6, r7, [sp, #24]
   3540a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3540e:	4b0c      	ldr	r3, [pc, #48]	; (35440 <hci_driver_open+0x80>)
   35410:	490c      	ldr	r1, [pc, #48]	; (35444 <hci_driver_open+0x84>)
   35412:	9400      	str	r4, [sp, #0]
   35414:	f640 0298 	movw	r2, #2200	; 0x898
   35418:	480b      	ldr	r0, [pc, #44]	; (35448 <hci_driver_open+0x88>)
   3541a:	f012 f9ad 	bl	47778 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   3541e:	490b      	ldr	r1, [pc, #44]	; (3544c <hci_driver_open+0x8c>)
   35420:	4809      	ldr	r0, [pc, #36]	; (35448 <hci_driver_open+0x88>)
   35422:	f01b f876 	bl	50512 <z_impl_k_thread_name_set>
}
   35426:	4620      	mov	r0, r4
   35428:	b008      	add	sp, #32
   3542a:	bdd0      	pop	{r4, r6, r7, pc}
   3542c:	20001024 	.word	0x20001024
   35430:	000352f9 	.word	0x000352f9
   35434:	20008218 	.word	0x20008218
   35438:	20002c50 	.word	0x20002c50
   3543c:	000524c4 	.word	0x000524c4
   35440:	000351e1 	.word	0x000351e1
   35444:	200083d8 	.word	0x200083d8
   35448:	20002cd0 	.word	0x20002cd0
   3544c:	000524d0 	.word	0x000524d0

00035450 <dup_found.part.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   35450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
   35454:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 354f8 <dup_found.part.0+0xa8>
   35458:	f8d9 3000 	ldr.w	r3, [r9]
   3545c:	2b00      	cmp	r3, #0
static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   3545e:	4680      	mov	r8, r0
   35460:	460f      	mov	r7, r1
   35462:	4616      	mov	r6, r2
		for (int32_t i = 0; i < dup_count; i++) {
   35464:	dd12      	ble.n	3548c <dup_found.part.0+0x3c>
   35466:	4c25      	ldr	r4, [pc, #148]	; (354fc <dup_found.part.0+0xac>)
   35468:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
   3546a:	4621      	mov	r1, r4
   3546c:	2206      	movs	r2, #6
   3546e:	4630      	mov	r0, r6
   35470:	f016 f9fb 	bl	4b86a <memcmp>
   35474:	b918      	cbnz	r0, 3547e <dup_found.part.0+0x2e>
				   sizeof(bt_addr_t)) ||
   35476:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   3547a:	42bb      	cmp	r3, r7
   3547c:	d028      	beq.n	354d0 <dup_found.part.0+0x80>
		for (int32_t i = 0; i < dup_count; i++) {
   3547e:	f8d9 3000 	ldr.w	r3, [r9]
   35482:	3501      	adds	r5, #1
   35484:	429d      	cmp	r5, r3
   35486:	f104 0408 	add.w	r4, r4, #8
   3548a:	dbee      	blt.n	3546a <dup_found.part.0+0x1a>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
   3548c:	4c1c      	ldr	r4, [pc, #112]	; (35500 <dup_found.part.0+0xb0>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   3548e:	4d1d      	ldr	r5, [pc, #116]	; (35504 <dup_found.part.0+0xb4>)
		dup = &dup_filter[dup_curr];
   35490:	f8d4 a000 	ldr.w	sl, [r4]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   35494:	4631      	mov	r1, r6
   35496:	ea4f 06ca 	mov.w	r6, sl, lsl #3
   3549a:	1c70      	adds	r0, r6, #1
   3549c:	4428      	add	r0, r5
   3549e:	2206      	movs	r2, #6
   354a0:	f016 f9f3 	bl	4b88a <memcpy>
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   354a4:	f8d9 3000 	ldr.w	r3, [r9]
		dup->addr.type = addr_type;
   354a8:	f805 703a 	strb.w	r7, [r5, sl, lsl #3]
		dup->mask = BIT(adv_type);
   354ac:	2201      	movs	r2, #1
   354ae:	4435      	add	r5, r6
   354b0:	fa02 f208 	lsl.w	r2, r2, r8
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   354b4:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
   354b6:	71ea      	strb	r2, [r5, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   354b8:	dc1b      	bgt.n	354f2 <dup_found.part.0+0xa2>
			dup_count++;
   354ba:	3301      	adds	r3, #1
   354bc:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
		} else {
			dup_curr++;
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   354c0:	2b10      	cmp	r3, #16
			dup_curr = 0U;
   354c2:	bf0d      	iteet	eq
   354c4:	2000      	moveq	r0, #0
			dup_curr = dup_count;
   354c6:	6023      	strne	r3, [r4, #0]
		}
	}

	return false;
   354c8:	2000      	movne	r0, #0
			dup_curr = 0U;
   354ca:	6020      	streq	r0, [r4, #0]
}
   354cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(dup->mask & BIT(adv_type))) {
   354d0:	4a0c      	ldr	r2, [pc, #48]	; (35504 <dup_found.part.0+0xb4>)
   354d2:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
		dup->mask |= BIT(adv_type);
   354d6:	2001      	movs	r0, #1
	if (!(dup->mask & BIT(adv_type))) {
   354d8:	79d1      	ldrb	r1, [r2, #7]
   354da:	fa21 f308 	lsr.w	r3, r1, r8
   354de:	f013 0301 	ands.w	r3, r3, #1
   354e2:	d1f3      	bne.n	354cc <dup_found.part.0+0x7c>
		dup->mask |= BIT(adv_type);
   354e4:	fa00 f008 	lsl.w	r0, r0, r8
   354e8:	4301      	orrs	r1, r0
   354ea:	71d1      	strb	r1, [r2, #7]
		return false;
   354ec:	4618      	mov	r0, r3
}
   354ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
   354f2:	6823      	ldr	r3, [r4, #0]
   354f4:	3301      	adds	r3, #1
   354f6:	e7e3      	b.n	354c0 <dup_found.part.0+0x70>
   354f8:	20004510 	.word	0x20004510
   354fc:	20004519 	.word	0x20004519
   35500:	20004514 	.word	0x20004514
   35504:	20004518 	.word	0x20004518

00035508 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   35508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3550a:	4c19      	ldr	r4, [pc, #100]	; (35570 <le_remote_feat_complete+0x68>)
   3550c:	6864      	ldr	r4, [r4, #4]
   3550e:	00a4      	lsls	r4, r4, #2
   35510:	d504      	bpl.n	3551c <le_remote_feat_complete+0x14>
   35512:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   35514:	4a17      	ldr	r2, [pc, #92]	; (35574 <le_remote_feat_complete+0x6c>)
   35516:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   35518:	0712      	lsls	r2, r2, #28
   3551a:	d400      	bmi.n	3551e <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   3551c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   3551e:	f103 0408 	add.w	r4, r3, #8
   35522:	4607      	mov	r7, r0
   35524:	460e      	mov	r6, r1
   35526:	4620      	mov	r0, r4
   35528:	2102      	movs	r1, #2
   3552a:	f01a f97d 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   3552e:	233e      	movs	r3, #62	; 0x3e
   35530:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   35532:	230c      	movs	r3, #12
   35534:	7043      	strb	r3, [r0, #1]
   35536:	2101      	movs	r1, #1
   35538:	4620      	mov	r0, r4
   3553a:	f01a f975 	bl	4f828 <net_buf_simple_add>
   3553e:	4603      	mov	r3, r0
	me->subevent = subevt;
   35540:	2204      	movs	r2, #4
   35542:	701a      	strb	r2, [r3, #0]
   35544:	4620      	mov	r0, r4
   35546:	210b      	movs	r1, #11
   35548:	f01a f96e 	bl	4f828 <net_buf_simple_add>
		memcpy(&sep->features[0],
   3554c:	2208      	movs	r2, #8
	sep->status = status;
   3554e:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   35550:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   35554:	b92f      	cbnz	r7, 35562 <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   35556:	1d31      	adds	r1, r6, #4
   35558:	3003      	adds	r0, #3
}
   3555a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   3555e:	f016 b994 	b.w	4b88a <memcpy>
}
   35562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   35566:	2100      	movs	r1, #0
   35568:	3003      	adds	r0, #3
   3556a:	f016 b999 	b.w	4b8a0 <memset>
   3556e:	bf00      	nop
   35570:	20000158 	.word	0x20000158
   35574:	20000160 	.word	0x20000160

00035578 <hci_vendor_cmd_handle_common>:
{
   35578:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   3557a:	3801      	subs	r0, #1
{
   3557c:	b087      	sub	sp, #28
   3557e:	4615      	mov	r5, r2
	switch (ocf) {
   35580:	2809      	cmp	r0, #9
   35582:	d806      	bhi.n	35592 <hci_vendor_cmd_handle_common+0x1a>
   35584:	e8df f000 	tbb	[pc, r0]
   35588:	05432609 	.word	0x05432609
   3558c:	6b055705 	.word	0x6b055705
   35590:	9d88      	.short	0x9d88
   35592:	f06f 0015 	mvn.w	r0, #21
}
   35596:	b007      	add	sp, #28
   35598:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3559a:	4b54      	ldr	r3, [pc, #336]	; (356ec <hci_vendor_cmd_handle_common+0x174>)
   3559c:	210d      	movs	r1, #13
   3559e:	8818      	ldrh	r0, [r3, #0]
   355a0:	f016 fe77 	bl	4c292 <bt_hci_cmd_complete_create>
   355a4:	210d      	movs	r1, #13
   355a6:	6028      	str	r0, [r5, #0]
   355a8:	3008      	adds	r0, #8
   355aa:	f01a f93d 	bl	4f828 <net_buf_simple_add>
   355ae:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   355b0:	2202      	movs	r2, #2
	rp->status = 0x00;
   355b2:	2000      	movs	r0, #0
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   355b4:	2103      	movs	r1, #3
	rp->status = 0x00;
   355b6:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   355b8:	705a      	strb	r2, [r3, #1]
   355ba:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   355bc:	70da      	strb	r2, [r3, #3]
   355be:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   355c0:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   355c2:	7199      	strb	r1, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   355c4:	71d8      	strb	r0, [r3, #7]
   355c6:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   355c8:	7258      	strb	r0, [r3, #9]
   355ca:	7298      	strb	r0, [r3, #10]
   355cc:	72d8      	strb	r0, [r3, #11]
   355ce:	7318      	strb	r0, [r3, #12]
}
   355d0:	b007      	add	sp, #28
   355d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   355d4:	4b45      	ldr	r3, [pc, #276]	; (356ec <hci_vendor_cmd_handle_common+0x174>)
   355d6:	2141      	movs	r1, #65	; 0x41
   355d8:	8818      	ldrh	r0, [r3, #0]
   355da:	f016 fe5a 	bl	4c292 <bt_hci_cmd_complete_create>
   355de:	2141      	movs	r1, #65	; 0x41
   355e0:	6028      	str	r0, [r5, #0]
   355e2:	3008      	adds	r0, #8
   355e4:	f01a f920 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   355e8:	2400      	movs	r4, #0
   355ea:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   355ec:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   355ee:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   355f2:	4621      	mov	r1, r4
   355f4:	f016 f954 	bl	4b8a0 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   355f8:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   355fa:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   355fc:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   35600:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   35604:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   35606:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   35608:	70ab      	strb	r3, [r5, #2]
}
   3560a:	b007      	add	sp, #28
   3560c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3560e:	4b37      	ldr	r3, [pc, #220]	; (356ec <hci_vendor_cmd_handle_common+0x174>)
   35610:	2109      	movs	r1, #9
   35612:	8818      	ldrh	r0, [r3, #0]
   35614:	f016 fe3d 	bl	4c292 <bt_hci_cmd_complete_create>
   35618:	2109      	movs	r1, #9
   3561a:	6028      	str	r0, [r5, #0]
   3561c:	3008      	adds	r0, #8
   3561e:	f01a f903 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   35622:	2400      	movs	r4, #0
   35624:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   35628:	2208      	movs	r2, #8
   3562a:	4621      	mov	r1, r4
   3562c:	f016 f938 	bl	4b8a0 <memset>
	return 0;
   35630:	4620      	mov	r0, r4
}
   35632:	b007      	add	sp, #28
   35634:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   35636:	6889      	ldr	r1, [r1, #8]
   35638:	2000      	movs	r0, #0
   3563a:	f7ff fd35 	bl	350a8 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   3563e:	4b2b      	ldr	r3, [pc, #172]	; (356ec <hci_vendor_cmd_handle_common+0x174>)
   35640:	2101      	movs	r1, #1
   35642:	8818      	ldrh	r0, [r3, #0]
   35644:	f016 fe25 	bl	4c292 <bt_hci_cmd_complete_create>
   35648:	2101      	movs	r1, #1
   3564a:	4604      	mov	r4, r0
   3564c:	3008      	adds	r0, #8
   3564e:	f01a f8eb 	bl	4f828 <net_buf_simple_add>
	ccst->status = status;
   35652:	2100      	movs	r1, #0
   35654:	7001      	strb	r1, [r0, #0]
	return 0;
   35656:	4608      	mov	r0, r1
	*evt = cmd_complete_status(0x00);
   35658:	602c      	str	r4, [r5, #0]
}
   3565a:	b007      	add	sp, #28
   3565c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   3565e:	4e24      	ldr	r6, [pc, #144]	; (356f0 <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35660:	4f22      	ldr	r7, [pc, #136]	; (356ec <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   35662:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   35664:	f10d 0c04 	add.w	ip, sp, #4
   35668:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   3566c:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3566e:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   35670:	f88c 3000 	strb.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35674:	2112      	movs	r1, #18
   35676:	f016 fe0c 	bl	4c292 <bt_hci_cmd_complete_create>
   3567a:	2112      	movs	r1, #18
   3567c:	6028      	str	r0, [r5, #0]
   3567e:	3008      	adds	r0, #8
   35680:	f01a f8d2 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   35684:	2400      	movs	r4, #0
   35686:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   3568a:	2211      	movs	r2, #17
   3568c:	a901      	add	r1, sp, #4
   3568e:	f016 f8fc 	bl	4b88a <memcpy>
	return 0;
   35692:	4620      	mov	r0, r4
}
   35694:	b007      	add	sp, #28
   35696:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35698:	4b14      	ldr	r3, [pc, #80]	; (356ec <hci_vendor_cmd_handle_common+0x174>)
   3569a:	2118      	movs	r1, #24
   3569c:	8818      	ldrh	r0, [r3, #0]
   3569e:	f016 fdf8 	bl	4c292 <bt_hci_cmd_complete_create>
   356a2:	2118      	movs	r1, #24
   356a4:	6028      	str	r0, [r5, #0]
   356a6:	3008      	adds	r0, #8
   356a8:	f01a f8be 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   356ac:	2400      	movs	r4, #0
   356ae:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   356b0:	2101      	movs	r1, #1
	rp->status = 0x00;
   356b2:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   356b6:	f00d fd8f 	bl	431d8 <hci_vendor_read_static_addr>
   356ba:	7068      	strb	r0, [r5, #1]
	return 0;
   356bc:	4620      	mov	r0, r4
}
   356be:	b007      	add	sp, #28
   356c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   356c2:	4b0a      	ldr	r3, [pc, #40]	; (356ec <hci_vendor_cmd_handle_common+0x174>)
   356c4:	2121      	movs	r1, #33	; 0x21
   356c6:	8818      	ldrh	r0, [r3, #0]
   356c8:	f016 fde3 	bl	4c292 <bt_hci_cmd_complete_create>
   356cc:	2121      	movs	r1, #33	; 0x21
   356ce:	6028      	str	r0, [r5, #0]
   356d0:	3008      	adds	r0, #8
   356d2:	f01a f8a9 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   356d6:	4601      	mov	r1, r0
   356d8:	2400      	movs	r4, #0
   356da:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   356de:	3001      	adds	r0, #1
   356e0:	f00d fdee 	bl	432c0 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   356e4:	4620      	mov	r0, r4
}
   356e6:	b007      	add	sp, #28
   356e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   356ea:	bf00      	nop
   356ec:	20006c72 	.word	0x20006c72
   356f0:	000524f8 	.word	0x000524f8

000356f4 <hci_cmd_handle>:
{
   356f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (cmd->len < sizeof(*chdr)) {
   356f8:	8983      	ldrh	r3, [r0, #12]
{
   356fa:	b08e      	sub	sp, #56	; 0x38
	struct net_buf *evt = NULL;
   356fc:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
   356fe:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   35700:	9209      	str	r2, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
   35702:	d92f      	bls.n	35764 <hci_cmd_handle+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
   35704:	4604      	mov	r4, r0
   35706:	460e      	mov	r6, r1
   35708:	3008      	adds	r0, #8
   3570a:	2103      	movs	r1, #3
   3570c:	f01a f8bd 	bl	4f88a <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   35710:	89a2      	ldrh	r2, [r4, #12]
   35712:	7883      	ldrb	r3, [r0, #2]
   35714:	429a      	cmp	r2, r3
   35716:	d325      	bcc.n	35764 <hci_cmd_handle+0x70>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   35718:	8802      	ldrh	r2, [r0, #0]
   3571a:	4fb1      	ldr	r7, [pc, #708]	; (359e0 <hci_cmd_handle+0x2ec>)
	switch (BT_OGF(_opcode)) {
   3571c:	f3c2 2385 	ubfx	r3, r2, #10, #6
   35720:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   35722:	b290      	uxth	r0, r2
   35724:	803a      	strh	r2, [r7, #0]
	ocf = BT_OCF(_opcode);
   35726:	f3c2 0509 	ubfx	r5, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   3572a:	d809      	bhi.n	35740 <hci_cmd_handle+0x4c>
   3572c:	b1a3      	cbz	r3, 35758 <hci_cmd_handle+0x64>
   3572e:	3b01      	subs	r3, #1
   35730:	2b07      	cmp	r3, #7
   35732:	d811      	bhi.n	35758 <hci_cmd_handle+0x64>
   35734:	e8df f003 	tbb	[pc, r3]
   35738:	4a27101b 	.word	0x4a27101b
   3573c:	62101010 	.word	0x62101010
   35740:	2b3f      	cmp	r3, #63	; 0x3f
   35742:	d109      	bne.n	35758 <hci_cmd_handle+0x64>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   35744:	4621      	mov	r1, r4
   35746:	aa09      	add	r2, sp, #36	; 0x24
   35748:	4628      	mov	r0, r5
   3574a:	f7ff ff15 	bl	35578 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   3574e:	3016      	adds	r0, #22
	return evt;
   35750:	bf18      	it	ne
   35752:	9c09      	ldrne	r4, [sp, #36]	; 0x24
	if (err == -EINVAL) {
   35754:	d107      	bne.n	35766 <hci_cmd_handle+0x72>
	return bt_hci_cmd_status_create(_opcode, status);
   35756:	8838      	ldrh	r0, [r7, #0]
   35758:	2101      	movs	r1, #1
}
   3575a:	b00e      	add	sp, #56	; 0x38
   3575c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_status_create(_opcode, status);
   35760:	f016 bda9 	b.w	4c2b6 <bt_hci_cmd_status_create>
		return NULL;
   35764:	2400      	movs	r4, #0
}
   35766:	4620      	mov	r0, r4
   35768:	b00e      	add	sp, #56	; 0x38
   3576a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (ocf) {
   3576e:	2d06      	cmp	r5, #6
   35770:	f000 842c 	beq.w	35fcc <hci_cmd_handle+0x8d8>
   35774:	2d1d      	cmp	r5, #29
   35776:	d1ef      	bne.n	35758 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
   35778:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   3577a:	8818      	ldrh	r0, [r3, #0]
   3577c:	f004 fac6 	bl	39d0c <ll_version_ind_send>
   35780:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   35782:	8838      	ldrh	r0, [r7, #0]
   35784:	e7e9      	b.n	3575a <hci_cmd_handle+0x66>
	switch (ocf) {
   35786:	2d63      	cmp	r5, #99	; 0x63
   35788:	f000 8456 	beq.w	36038 <hci_cmd_handle+0x944>
   3578c:	f200 80ec 	bhi.w	35968 <hci_cmd_handle+0x274>
   35790:	2d03      	cmp	r5, #3
   35792:	f000 842b 	beq.w	35fec <hci_cmd_handle+0x8f8>
   35796:	2d2d      	cmp	r5, #45	; 0x2d
   35798:	f040 80d2 	bne.w	35940 <hci_cmd_handle+0x24c>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   3579c:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3579e:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   357a0:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   357a2:	f893 8002 	ldrb.w	r8, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   357a6:	f016 fd74 	bl	4c292 <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   357aa:	2104      	movs	r1, #4
   357ac:	4604      	mov	r4, r0
   357ae:	3008      	adds	r0, #8
   357b0:	f01a f83a 	bl	4f828 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   357b4:	b2b7      	uxth	r7, r6
   357b6:	4605      	mov	r5, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   357b8:	1cc3      	adds	r3, r0, #3
   357ba:	4642      	mov	r2, r8
   357bc:	4639      	mov	r1, r7
   357be:	2002      	movs	r0, #2
   357c0:	f7ff fcbc 	bl	3513c <ll_tx_pwr_lvl_get>
	rp->handle = sys_cpu_to_le16(handle);
   357c4:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
   357c8:	7028      	strb	r0, [r5, #0]
}
   357ca:	e7cc      	b.n	35766 <hci_cmd_handle+0x72>
	switch (ocf) {
   357cc:	1e6a      	subs	r2, r5, #1
   357ce:	2a08      	cmp	r2, #8
   357d0:	d8c2      	bhi.n	35758 <hci_cmd_handle+0x64>
   357d2:	a301      	add	r3, pc, #4	; (adr r3, 357d8 <hci_cmd_handle+0xe4>)
   357d4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   357d8:	00035a97 	.word	0x00035a97
   357dc:	000359e9 	.word	0x000359e9
   357e0:	000359bb 	.word	0x000359bb
   357e4:	00035759 	.word	0x00035759
   357e8:	00035759 	.word	0x00035759
   357ec:	00035759 	.word	0x00035759
   357f0:	00035759 	.word	0x00035759
   357f4:	00035759 	.word	0x00035759
   357f8:	0003599d 	.word	0x0003599d
	switch (ocf) {
   357fc:	1e6a      	subs	r2, r5, #1
   357fe:	2a4d      	cmp	r2, #77	; 0x4d
   35800:	d8aa      	bhi.n	35758 <hci_cmd_handle+0x64>
   35802:	a301      	add	r3, pc, #4	; (adr r3, 35808 <hci_cmd_handle+0x114>)
   35804:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   35808:	00035cf1 	.word	0x00035cf1
   3580c:	00035cd1 	.word	0x00035cd1
   35810:	00035e13 	.word	0x00035e13
   35814:	00035759 	.word	0x00035759
   35818:	00035e09 	.word	0x00035e09
   3581c:	00035ded 	.word	0x00035ded
   35820:	00035dd5 	.word	0x00035dd5
   35824:	00035dc9 	.word	0x00035dc9
   35828:	00035dbd 	.word	0x00035dbd
   3582c:	00035db3 	.word	0x00035db3
   35830:	00035d9b 	.word	0x00035d9b
   35834:	00035fa1 	.word	0x00035fa1
   35838:	00035f71 	.word	0x00035f71
   3583c:	00035f69 	.word	0x00035f69
   35840:	00035f49 	.word	0x00035f49
   35844:	00035f43 	.word	0x00035f43
   35848:	00035f3b 	.word	0x00035f3b
   3584c:	00035f33 	.word	0x00035f33
   35850:	00035f13 	.word	0x00035f13
   35854:	00035f0b 	.word	0x00035f0b
   35858:	00035ee5 	.word	0x00035ee5
   3585c:	00035ed7 	.word	0x00035ed7
   35860:	00035ea7 	.word	0x00035ea7
   35864:	00035e89 	.word	0x00035e89
   35868:	00035e71 	.word	0x00035e71
   3586c:	00035e67 	.word	0x00035e67
   35870:	00035e57 	.word	0x00035e57
   35874:	00035ca5 	.word	0x00035ca5
   35878:	00035759 	.word	0x00035759
   3587c:	00035759 	.word	0x00035759
   35880:	00035759 	.word	0x00035759
   35884:	00035c87 	.word	0x00035c87
   35888:	00035c6f 	.word	0x00035c6f
   3588c:	00035c5f 	.word	0x00035c5f
   35890:	00035c2d 	.word	0x00035c2d
   35894:	00035c21 	.word	0x00035c21
   35898:	00035759 	.word	0x00035759
   3589c:	00035759 	.word	0x00035759
   358a0:	00035c13 	.word	0x00035c13
   358a4:	00035c0b 	.word	0x00035c0b
   358a8:	00035c05 	.word	0x00035c05
   358ac:	00035be7 	.word	0x00035be7
   358b0:	00035bbd 	.word	0x00035bbd
   358b4:	00035b93 	.word	0x00035b93
   358b8:	00035b73 	.word	0x00035b73
   358bc:	00035b65 	.word	0x00035b65
   358c0:	00035b1d 	.word	0x00035b1d
   358c4:	00035ac9 	.word	0x00035ac9
   358c8:	00035d7d 	.word	0x00035d7d
   358cc:	00035d27 	.word	0x00035d27
   358d0:	00035759 	.word	0x00035759
   358d4:	00035759 	.word	0x00035759
   358d8:	00035759 	.word	0x00035759
   358dc:	00035759 	.word	0x00035759
   358e0:	00035759 	.word	0x00035759
   358e4:	00035759 	.word	0x00035759
   358e8:	00035759 	.word	0x00035759
   358ec:	00035759 	.word	0x00035759
   358f0:	00035759 	.word	0x00035759
   358f4:	00035759 	.word	0x00035759
   358f8:	00035759 	.word	0x00035759
   358fc:	00035759 	.word	0x00035759
   35900:	00035759 	.word	0x00035759
   35904:	00035759 	.word	0x00035759
   35908:	00035759 	.word	0x00035759
   3590c:	00035759 	.word	0x00035759
   35910:	00035759 	.word	0x00035759
   35914:	00035759 	.word	0x00035759
   35918:	00035759 	.word	0x00035759
   3591c:	00035759 	.word	0x00035759
   35920:	00035759 	.word	0x00035759
   35924:	00035759 	.word	0x00035759
   35928:	00035759 	.word	0x00035759
   3592c:	00035759 	.word	0x00035759
   35930:	00035d07 	.word	0x00035d07
   35934:	00035759 	.word	0x00035759
   35938:	00035759 	.word	0x00035759
   3593c:	00035cfd 	.word	0x00035cfd
	switch (ocf) {
   35940:	2d01      	cmp	r5, #1
   35942:	f47f af09 	bne.w	35758 <hci_cmd_handle+0x64>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   35946:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   35948:	4b26      	ldr	r3, [pc, #152]	; (359e4 <hci_cmd_handle+0x2f0>)
   3594a:	6811      	ldr	r1, [r2, #0]
   3594c:	6852      	ldr	r2, [r2, #4]
   3594e:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   35950:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   35952:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   35954:	f016 fc9d 	bl	4c292 <bt_hci_cmd_complete_create>
   35958:	2101      	movs	r1, #1
   3595a:	4604      	mov	r4, r0
   3595c:	3008      	adds	r0, #8
   3595e:	f019 ff63 	bl	4f828 <net_buf_simple_add>
	ccst->status = status;
   35962:	2300      	movs	r3, #0
   35964:	7003      	strb	r3, [r0, #0]
}
   35966:	e6fe      	b.n	35766 <hci_cmd_handle+0x72>
	switch (ocf) {
   35968:	2d7b      	cmp	r5, #123	; 0x7b
   3596a:	f000 8368 	beq.w	3603e <hci_cmd_handle+0x94a>
   3596e:	2d7c      	cmp	r5, #124	; 0x7c
   35970:	f47f aef2 	bne.w	35758 <hci_cmd_handle+0x64>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   35974:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   35976:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   35978:	8859      	ldrh	r1, [r3, #2]
   3597a:	b2b0      	uxth	r0, r6
   3597c:	f004 fb0e 	bl	39f9c <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   35980:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35982:	2103      	movs	r1, #3
   35984:	8838      	ldrh	r0, [r7, #0]
   35986:	f016 fc84 	bl	4c292 <bt_hci_cmd_complete_create>
   3598a:	2103      	movs	r1, #3
   3598c:	4604      	mov	r4, r0
   3598e:	3008      	adds	r0, #8
   35990:	f019 ff4a 	bl	4f828 <net_buf_simple_add>
	rp->status = status;
   35994:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   35996:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (err == -EINVAL) {
   3599a:	e6e4      	b.n	35766 <hci_cmd_handle+0x72>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3599c:	2107      	movs	r1, #7
   3599e:	f016 fc78 	bl	4c292 <bt_hci_cmd_complete_create>
   359a2:	2107      	movs	r1, #7
   359a4:	4604      	mov	r4, r0
   359a6:	3008      	adds	r0, #8
   359a8:	f019 ff3e 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   359ac:	4601      	mov	r1, r0
   359ae:	2000      	movs	r0, #0
   359b0:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   359b4:	f7ff fbaa 	bl	3510c <ll_addr_read>
}
   359b8:	e6d5      	b.n	35766 <hci_cmd_handle+0x72>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   359ba:	2109      	movs	r1, #9
   359bc:	f016 fc69 	bl	4c292 <bt_hci_cmd_complete_create>
   359c0:	2109      	movs	r1, #9
   359c2:	4604      	mov	r4, r0
   359c4:	3008      	adds	r0, #8
   359c6:	f019 ff2f 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   359ca:	2100      	movs	r1, #0
   359cc:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   359ce:	2208      	movs	r2, #8
	rp->status = 0x00;
   359d0:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   359d4:	f015 ff64 	bl	4b8a0 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   359d8:	2360      	movs	r3, #96	; 0x60
   359da:	716b      	strb	r3, [r5, #5]
}
   359dc:	e6c3      	b.n	35766 <hci_cmd_handle+0x72>
   359de:	bf00      	nop
   359e0:	20006c72 	.word	0x20006c72
   359e4:	20000158 	.word	0x20000158
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   359e8:	2141      	movs	r1, #65	; 0x41
   359ea:	f016 fc52 	bl	4c292 <bt_hci_cmd_complete_create>
   359ee:	2141      	movs	r1, #65	; 0x41
   359f0:	4604      	mov	r4, r0
   359f2:	3008      	adds	r0, #8
   359f4:	f019 ff18 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   359f8:	2100      	movs	r1, #0
   359fa:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   359fc:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   359fe:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   35a02:	f015 ff4d 	bl	4b8a0 <memset>
	rp->commands[10] |= BIT(2);
   35a06:	7aeb      	ldrb	r3, [r5, #11]
	rp->commands[5] |= BIT(6) | BIT(7);
   35a08:	79aa      	ldrb	r2, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   35a0a:	7be9      	ldrb	r1, [r5, #15]
	rp->commands[10] |= BIT(2);
   35a0c:	f043 0304 	orr.w	r3, r3, #4
   35a10:	72eb      	strb	r3, [r5, #11]
	rp->commands[15] |= BIT(1);
   35a12:	7c2b      	ldrb	r3, [r5, #16]
   35a14:	f043 0302 	orr.w	r3, r3, #2
   35a18:	742b      	strb	r3, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   35a1a:	7eab      	ldrb	r3, [r5, #26]
   35a1c:	f063 0308 	orn	r3, r3, #8
   35a20:	76ab      	strb	r3, [r5, #26]
	rp->commands[0] |= BIT(5);
   35a22:	786b      	ldrb	r3, [r5, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   35a24:	f062 023f 	orn	r2, r2, #63	; 0x3f
	rp->commands[0] |= BIT(5);
   35a28:	f043 0320 	orr.w	r3, r3, #32
	rp->commands[5] |= BIT(6) | BIT(7);
   35a2c:	71aa      	strb	r2, [r5, #6]
	rp->commands[0] |= BIT(5);
   35a2e:	706b      	strb	r3, [r5, #1]
	rp->commands[22] |= BIT(2);
   35a30:	7dea      	ldrb	r2, [r5, #23]
	rp->commands[32] |= BIT(4) | BIT(5);
   35a32:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	rp->commands[14] |= BIT(3) | BIT(5);
   35a36:	f041 0128 	orr.w	r1, r1, #40	; 0x28
	rp->commands[22] |= BIT(2);
   35a3a:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[32] |= BIT(4) | BIT(5);
   35a3e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
	rp->commands[14] |= BIT(3) | BIT(5);
   35a42:	73e9      	strb	r1, [r5, #15]
	rp->commands[22] |= BIT(2);
   35a44:	75ea      	strb	r2, [r5, #23]
	rp->commands[28] |= BIT(3);
   35a46:	7f69      	ldrb	r1, [r5, #29]
	rp->commands[33] |= BIT(4) | BIT(5);
   35a48:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
   35a4c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   35a50:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
   35a54:	f041 010f 	orr.w	r1, r1, #15
	rp->commands[33] |= BIT(6) | BIT(7);
   35a58:	f062 020f 	orn	r2, r2, #15
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   35a5c:	f063 0306 	orn	r3, r3, #6
	rp->commands[28] |= BIT(1) | BIT(2);
   35a60:	7769      	strb	r1, [r5, #29]
	rp->commands[33] |= BIT(6) | BIT(7);
   35a62:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
	rp->commands[35] |= BIT(3);
   35a66:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   35a6a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   35a6e:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	rp->commands[38] |= BIT(7);
   35a72:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
	rp->commands[26] |= BIT(4) | BIT(5);
   35a76:	20ff      	movs	r0, #255	; 0xff
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   35a78:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[39] |= BIT(2);
   35a7c:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   35a80:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(4) | BIT(5);
   35a84:	76e8      	strb	r0, [r5, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   35a86:	7728      	strb	r0, [r5, #28]
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   35a88:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   35a8c:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   35a90:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
}
   35a94:	e667      	b.n	35766 <hci_cmd_handle+0x72>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35a96:	2109      	movs	r1, #9
   35a98:	f016 fbfb 	bl	4c292 <bt_hci_cmd_complete_create>
   35a9c:	2109      	movs	r1, #9
   35a9e:	4604      	mov	r4, r0
   35aa0:	3008      	adds	r0, #8
   35aa2:	f019 fec1 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   35aa6:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   35aa8:	220c      	movs	r2, #12
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   35aaa:	f06f 010e 	mvn.w	r1, #14
	rp->status = 0x00;
   35aae:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   35ab0:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
   35ab2:	7083      	strb	r3, [r0, #2]
   35ab4:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = LL_VERSION_NUMBER;
   35ab6:	7102      	strb	r2, [r0, #4]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   35ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   35abc:	2205      	movs	r2, #5
   35abe:	7141      	strb	r1, [r0, #5]
   35ac0:	7182      	strb	r2, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   35ac2:	71c3      	strb	r3, [r0, #7]
   35ac4:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   35ac6:	e64e      	b.n	35766 <hci_cmd_handle+0x72>
	handle = sys_le16_to_cpu(cmd->handle);
   35ac8:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35aca:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   35acc:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35ace:	f016 fbe0 	bl	4c292 <bt_hci_cmd_complete_create>
   35ad2:	2105      	movs	r1, #5
   35ad4:	4604      	mov	r4, r0
   35ad6:	3008      	adds	r0, #8
   35ad8:	f019 fea6 	bl	4f828 <net_buf_simple_add>
   35adc:	4605      	mov	r5, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   35ade:	1d2a      	adds	r2, r5, #4
	handle = sys_le16_to_cpu(cmd->handle);
   35ae0:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   35ae2:	1ce9      	adds	r1, r5, #3
   35ae4:	f004 f9b2 	bl	39e4c <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   35ae8:	78eb      	ldrb	r3, [r5, #3]
   35aea:	792a      	ldrb	r2, [r5, #4]
	rp->status = status;
   35aec:	7028      	strb	r0, [r5, #0]
   35aee:	2b00      	cmp	r3, #0
   35af0:	fa93 f3a3 	rbit	r3, r3
   35af4:	fab3 f383 	clz	r3, r3
   35af8:	bf08      	it	eq
   35afa:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   35afe:	3301      	adds	r3, #1
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   35b00:	70eb      	strb	r3, [r5, #3]
   35b02:	2a00      	cmp	r2, #0
   35b04:	fa92 f3a2 	rbit	r3, r2
   35b08:	fab3 f383 	clz	r3, r3
   35b0c:	bf08      	it	eq
   35b0e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   35b12:	3301      	adds	r3, #1
	rp->handle = sys_cpu_to_le16(handle);
   35b14:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   35b18:	712b      	strb	r3, [r5, #4]
	if (err == -EINVAL) {
   35b1a:	e624      	b.n	35766 <hci_cmd_handle+0x72>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35b1c:	2109      	movs	r1, #9
   35b1e:	f016 fbb8 	bl	4c292 <bt_hci_cmd_complete_create>
   35b22:	2109      	movs	r1, #9
   35b24:	4604      	mov	r4, r0
   35b26:	3008      	adds	r0, #8
   35b28:	f019 fe7e 	bl	4f828 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   35b2c:	ab0a      	add	r3, sp, #40	; 0x28
   35b2e:	4605      	mov	r5, r0
   35b30:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   35b34:	a908      	add	r1, sp, #32
   35b36:	f10d 001e 	add.w	r0, sp, #30
   35b3a:	f004 f97b 	bl	39e34 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   35b3e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   35b42:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   35b46:	f8a5 2001 	strh.w	r2, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   35b4a:	f8a5 3003 	strh.w	r3, [r5, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   35b4e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   35b52:	f8a5 3005 	strh.w	r3, [r5, #5]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   35b56:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   35b5a:	f8a5 2007 	strh.w	r2, [r5, #7]
	rp->status = 0x00;
   35b5e:	2300      	movs	r3, #0
   35b60:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   35b62:	e600      	b.n	35766 <hci_cmd_handle+0x72>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   35b64:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   35b66:	8818      	ldrh	r0, [r3, #0]
   35b68:	f009 f9fc 	bl	3ef64 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   35b6c:	8838      	ldrh	r0, [r7, #0]
   35b6e:	2101      	movs	r1, #1
   35b70:	e6f0      	b.n	35954 <hci_cmd_handle+0x260>
	status = ll_rl_enable(cmd->enable);
   35b72:	68a3      	ldr	r3, [r4, #8]
   35b74:	7818      	ldrb	r0, [r3, #0]
   35b76:	f009 f9d9 	bl	3ef2c <ll_rl_enable>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   35b7a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   35b7c:	8838      	ldrh	r0, [r7, #0]
   35b7e:	2101      	movs	r1, #1
   35b80:	f016 fb87 	bl	4c292 <bt_hci_cmd_complete_create>
   35b84:	2101      	movs	r1, #1
   35b86:	4604      	mov	r4, r0
   35b88:	3008      	adds	r0, #8
   35b8a:	f019 fe4d 	bl	4f828 <net_buf_simple_add>
	ccst->status = status;
   35b8e:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
   35b90:	e5e9      	b.n	35766 <hci_cmd_handle+0x72>
	memcpy(dst, src, sizeof(*dst));
   35b92:	2207      	movs	r2, #7
   35b94:	68a1      	ldr	r1, [r4, #8]
   35b96:	a80a      	add	r0, sp, #40	; 0x28
   35b98:	f015 fe77 	bl	4b88a <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35b9c:	2107      	movs	r1, #7
   35b9e:	8838      	ldrh	r0, [r7, #0]
   35ba0:	f016 fb77 	bl	4c292 <bt_hci_cmd_complete_create>
   35ba4:	2107      	movs	r1, #7
   35ba6:	4604      	mov	r4, r0
   35ba8:	3008      	adds	r0, #8
   35baa:	f019 fe3d 	bl	4f828 <net_buf_simple_add>
   35bae:	4605      	mov	r5, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   35bb0:	1c41      	adds	r1, r0, #1
   35bb2:	a80a      	add	r0, sp, #40	; 0x28
   35bb4:	f009 f988 	bl	3eec8 <ll_rl_lrpa_get>
   35bb8:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   35bba:	e5d4      	b.n	35766 <hci_cmd_handle+0x72>
   35bbc:	2207      	movs	r2, #7
   35bbe:	68a1      	ldr	r1, [r4, #8]
   35bc0:	a80a      	add	r0, sp, #40	; 0x28
   35bc2:	f015 fe62 	bl	4b88a <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35bc6:	2107      	movs	r1, #7
   35bc8:	8838      	ldrh	r0, [r7, #0]
   35bca:	f016 fb62 	bl	4c292 <bt_hci_cmd_complete_create>
   35bce:	2107      	movs	r1, #7
   35bd0:	4604      	mov	r4, r0
   35bd2:	3008      	adds	r0, #8
   35bd4:	f019 fe28 	bl	4f828 <net_buf_simple_add>
   35bd8:	4605      	mov	r5, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   35bda:	1c41      	adds	r1, r0, #1
   35bdc:	a80a      	add	r0, sp, #40	; 0x28
   35bde:	f009 f939 	bl	3ee54 <ll_rl_crpa_get>
   35be2:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   35be4:	e5bf      	b.n	35766 <hci_cmd_handle+0x72>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35be6:	2102      	movs	r1, #2
   35be8:	f016 fb53 	bl	4c292 <bt_hci_cmd_complete_create>
   35bec:	2102      	movs	r1, #2
   35bee:	4604      	mov	r4, r0
   35bf0:	3008      	adds	r0, #8
   35bf2:	f019 fe19 	bl	4f828 <net_buf_simple_add>
   35bf6:	4605      	mov	r5, r0
	rp->rl_size = ll_rl_size_get();
   35bf8:	f008 ffca 	bl	3eb90 <ll_rl_size_get>
	rp->status = 0x00;
   35bfc:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   35bfe:	7068      	strb	r0, [r5, #1]
	rp->status = 0x00;
   35c00:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   35c02:	e5b0      	b.n	35766 <hci_cmd_handle+0x72>
	status = ll_rl_clear();
   35c04:	f008 ffc6 	bl	3eb94 <ll_rl_clear>
   35c08:	e7b7      	b.n	35b7a <hci_cmd_handle+0x486>
	status = ll_rl_remove(&cmd->peer_id_addr);
   35c0a:	68a0      	ldr	r0, [r4, #8]
   35c0c:	f009 f804 	bl	3ec18 <ll_rl_remove>
   35c10:	e7b3      	b.n	35b7a <hci_cmd_handle+0x486>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   35c12:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   35c14:	f100 0217 	add.w	r2, r0, #23
   35c18:	1dc1      	adds	r1, r0, #7
   35c1a:	f009 fc67 	bl	3f4ec <ll_rl_add>
   35c1e:	e7ac      	b.n	35b7a <hci_cmd_handle+0x486>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   35c20:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   35c22:	8859      	ldrh	r1, [r3, #2]
   35c24:	8818      	ldrh	r0, [r3, #0]
   35c26:	f004 f8fb 	bl	39e20 <ll_length_default_set>
   35c2a:	e7a6      	b.n	35b7a <hci_cmd_handle+0x486>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35c2c:	2105      	movs	r1, #5
   35c2e:	f016 fb30 	bl	4c292 <bt_hci_cmd_complete_create>
   35c32:	2105      	movs	r1, #5
   35c34:	4604      	mov	r4, r0
   35c36:	3008      	adds	r0, #8
   35c38:	f019 fdf6 	bl	4f828 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   35c3c:	a90a      	add	r1, sp, #40	; 0x28
   35c3e:	4605      	mov	r5, r0
   35c40:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   35c44:	f004 f8e0 	bl	39e08 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   35c48:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   35c4c:	f8a5 3001 	strh.w	r3, [r5, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   35c50:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   35c54:	f8a5 2003 	strh.w	r2, [r5, #3]
	rp->status = 0x00;
   35c58:	2300      	movs	r3, #0
   35c5a:	702b      	strb	r3, [r5, #0]
	if (err == -EINVAL) {
   35c5c:	e583      	b.n	35766 <hci_cmd_handle+0x72>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   35c5e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   35c60:	881e      	ldrh	r6, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   35c62:	889a      	ldrh	r2, [r3, #4]
   35c64:	8859      	ldrh	r1, [r3, #2]
   35c66:	b2b0      	uxth	r0, r6
   35c68:	f004 f878 	bl	39d5c <ll_length_req_send>
   35c6c:	e688      	b.n	35980 <hci_cmd_handle+0x28c>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   35c6e:	68a2      	ldr	r2, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   35c70:	8816      	ldrh	r6, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   35c72:	7892      	ldrb	r2, [r2, #2]
   35c74:	2300      	movs	r3, #0
   35c76:	e9cd 3301 	strd	r3, r3, [sp, #4]
   35c7a:	9300      	str	r3, [sp, #0]
   35c7c:	2102      	movs	r1, #2
   35c7e:	b2b0      	uxth	r0, r6
   35c80:	f003 ff22 	bl	39ac8 <ll_conn_update>
   35c84:	e67c      	b.n	35980 <hci_cmd_handle+0x28c>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   35c86:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   35c88:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   35c8a:	8816      	ldrh	r6, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   35c8c:	8853      	ldrh	r3, [r2, #2]
   35c8e:	9102      	str	r1, [sp, #8]
   35c90:	88d1      	ldrh	r1, [r2, #6]
   35c92:	9101      	str	r1, [sp, #4]
   35c94:	8891      	ldrh	r1, [r2, #4]
   35c96:	9100      	str	r1, [sp, #0]
   35c98:	2200      	movs	r2, #0
   35c9a:	2102      	movs	r1, #2
   35c9c:	b2b0      	uxth	r0, r6
   35c9e:	f003 ff13 	bl	39ac8 <ll_conn_update>
   35ca2:	e66d      	b.n	35980 <hci_cmd_handle+0x28c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35ca4:	2109      	movs	r1, #9
   35ca6:	f016 faf4 	bl	4c292 <bt_hci_cmd_complete_create>
   35caa:	2109      	movs	r1, #9
   35cac:	4604      	mov	r4, r0
   35cae:	3008      	adds	r0, #8
   35cb0:	f019 fdba 	bl	4f828 <net_buf_simple_add>
	dst[0] = val;
   35cb4:	213f      	movs	r1, #63	; 0x3f
   35cb6:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
   35cb8:	2200      	movs	r2, #0
   35cba:	70c1      	strb	r1, [r0, #3]
	dst[1] = val >> 8;
   35cbc:	2103      	movs	r1, #3
   35cbe:	7002      	strb	r2, [r0, #0]
	dst[0] = val;
   35cc0:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
   35cc2:	7083      	strb	r3, [r0, #2]
   35cc4:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
   35cc6:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
   35cc8:	7181      	strb	r1, [r0, #6]
	dst[0] = val;
   35cca:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
   35ccc:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   35cce:	e54a      	b.n	35766 <hci_cmd_handle+0x72>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35cd0:	2104      	movs	r1, #4
   35cd2:	f016 fade 	bl	4c292 <bt_hci_cmd_complete_create>
   35cd6:	2104      	movs	r1, #4
   35cd8:	4604      	mov	r4, r0
   35cda:	3008      	adds	r0, #8
   35cdc:	f019 fda4 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   35ce0:	2300      	movs	r3, #0
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   35ce2:	211b      	movs	r1, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   35ce4:	2203      	movs	r2, #3
	rp->status = 0x00;
   35ce6:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   35ce8:	7041      	strb	r1, [r0, #1]
   35cea:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   35cec:	70c2      	strb	r2, [r0, #3]
	if (err == -EINVAL) {
   35cee:	e53a      	b.n	35766 <hci_cmd_handle+0x72>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   35cf0:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   35cf2:	4bbb      	ldr	r3, [pc, #748]	; (35fe0 <hci_cmd_handle+0x8ec>)
   35cf4:	6811      	ldr	r1, [r2, #0]
   35cf6:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   35cf8:	6019      	str	r1, [r3, #0]
   35cfa:	e629      	b.n	35950 <hci_cmd_handle+0x25c>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   35cfc:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   35cfe:	79c1      	ldrb	r1, [r0, #7]
   35d00:	f009 f93a 	bl	3ef78 <ll_priv_mode_set>
   35d04:	e739      	b.n	35b7a <hci_cmd_handle+0x486>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35d06:	2103      	movs	r1, #3
   35d08:	f016 fac3 	bl	4c292 <bt_hci_cmd_complete_create>
   35d0c:	2103      	movs	r1, #3
   35d0e:	4604      	mov	r4, r0
   35d10:	3008      	adds	r0, #8
   35d12:	f019 fd89 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   35d16:	4601      	mov	r1, r0
   35d18:	2300      	movs	r3, #0
   35d1a:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   35d1e:	3001      	adds	r0, #1
   35d20:	f7ff fa1c 	bl	3515c <ll_tx_pwr_get>
	if (err == -EINVAL) {
   35d24:	e51f      	b.n	35766 <hci_cmd_handle+0x72>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   35d26:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   35d28:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
   35d2a:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   35d2c:	8815      	ldrh	r5, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   35d2e:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   35d32:	07de      	lsls	r6, r3, #31
		cmd->tx_phys |= mask_phys;
   35d34:	bf44      	itt	mi
   35d36:	f041 0103 	orrmi.w	r1, r1, #3
   35d3a:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   35d3c:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
   35d40:	7913      	ldrb	r3, [r2, #4]
   35d42:	bf1c      	itt	ne
   35d44:	f043 0303 	orrne.w	r3, r3, #3
   35d48:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   35d4a:	ea41 0203 	orr.w	r2, r1, r3
   35d4e:	f012 0ffc 	tst.w	r2, #252	; 0xfc
   35d52:	f040 8195 	bne.w	36080 <hci_cmd_handle+0x98c>
	if (!(cmd->tx_phys & 0x07) ||
   35d56:	074e      	lsls	r6, r1, #29
   35d58:	f000 818f 	beq.w	3607a <hci_cmd_handle+0x986>
   35d5c:	075a      	lsls	r2, r3, #29
   35d5e:	f000 818c 	beq.w	3607a <hci_cmd_handle+0x986>
	if (phy_opts & 0x03) {
   35d62:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   35d66:	bf1c      	itt	ne
   35d68:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   35d6c:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   35d70:	4628      	mov	r0, r5
   35d72:	f004 f897 	bl	39ea4 <ll_phy_req_send>
   35d76:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   35d78:	8838      	ldrh	r0, [r7, #0]
   35d7a:	e4ee      	b.n	3575a <hci_cmd_handle+0x66>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   35d7c:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   35d7e:	781a      	ldrb	r2, [r3, #0]
   35d80:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   35d82:	bf4a      	itet	mi
   35d84:	2007      	movmi	r0, #7
	return ((uint16_t)src[1] << 8) | src[0];
   35d86:	7858      	ldrbpl	r0, [r3, #1]
   35d88:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   35d8a:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   35d8c:	bf4a      	itet	mi
   35d8e:	2107      	movmi	r1, #7
	status = ll_terminate_ind_send(handle, cmd->reason);
   35d90:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   35d92:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   35d94:	f004 f87c 	bl	39e90 <ll_phy_default_set>
   35d98:	e6ef      	b.n	35b7a <hci_cmd_handle+0x486>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
   35d9a:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   35d9c:	7963      	ldrb	r3, [r4, #5]
   35d9e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   35da2:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   35da6:	7820      	ldrb	r0, [r4, #0]
   35da8:	79a4      	ldrb	r4, [r4, #6]
   35daa:	9400      	str	r4, [sp, #0]
   35dac:	f7f0 fed0 	bl	26b50 <ll_scan_params_set>
   35db0:	e6e3      	b.n	35b7a <hci_cmd_handle+0x486>
	status = ll_adv_enable(cmd->enable);
   35db2:	68a3      	ldr	r3, [r4, #8]
   35db4:	7818      	ldrb	r0, [r3, #0]
   35db6:	f7f0 fc1f 	bl	265f8 <ll_adv_enable>
   35dba:	e6de      	b.n	35b7a <hci_cmd_handle+0x486>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   35dbc:	68a1      	ldr	r1, [r4, #8]
   35dbe:	f811 0b01 	ldrb.w	r0, [r1], #1
   35dc2:	f002 fe13 	bl	389ec <ll_adv_scan_rsp_set>
   35dc6:	e6d8      	b.n	35b7a <hci_cmd_handle+0x486>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   35dc8:	68a1      	ldr	r1, [r4, #8]
   35dca:	f811 0b01 	ldrb.w	r0, [r1], #1
   35dce:	f002 fdc1 	bl	38954 <ll_adv_data_set>
   35dd2:	e6d2      	b.n	35b7a <hci_cmd_handle+0x486>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35dd4:	2102      	movs	r1, #2
   35dd6:	f016 fa5c 	bl	4c292 <bt_hci_cmd_complete_create>
   35dda:	2102      	movs	r1, #2
   35ddc:	4604      	mov	r4, r0
   35dde:	3008      	adds	r0, #8
   35de0:	f019 fd22 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   35de4:	2300      	movs	r3, #0
   35de6:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   35de8:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   35dea:	e4bc      	b.n	35766 <hci_cmd_handle+0x72>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   35dec:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   35dee:	7ba5      	ldrb	r5, [r4, #14]
   35df0:	79a3      	ldrb	r3, [r4, #6]
   35df2:	7962      	ldrb	r2, [r4, #5]
   35df4:	7921      	ldrb	r1, [r4, #4]
   35df6:	8820      	ldrh	r0, [r4, #0]
   35df8:	9502      	str	r5, [sp, #8]
   35dfa:	7b65      	ldrb	r5, [r4, #13]
   35dfc:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   35dfe:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   35e00:	9400      	str	r4, [sp, #0]
   35e02:	f002 fb9f 	bl	38544 <ll_adv_params_set>
   35e06:	e6b8      	b.n	35b7a <hci_cmd_handle+0x486>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   35e08:	68a1      	ldr	r1, [r4, #8]
   35e0a:	2001      	movs	r0, #1
   35e0c:	f7ff f94c 	bl	350a8 <ll_addr_set>
   35e10:	e6b3      	b.n	35b7a <hci_cmd_handle+0x486>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35e12:	2109      	movs	r1, #9
   35e14:	f016 fa3d 	bl	4c292 <bt_hci_cmd_complete_create>
   35e18:	2109      	movs	r1, #9
   35e1a:	4604      	mov	r4, r0
   35e1c:	3008      	adds	r0, #8
   35e1e:	f019 fd03 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   35e22:	2100      	movs	r1, #0
   35e24:	4605      	mov	r5, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   35e26:	2208      	movs	r2, #8
	rp->status = 0x00;
   35e28:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   35e2c:	f015 fd38 	bl	4b8a0 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   35e30:	f000 fe50 	bl	36ad4 <ll_feat_get>
	dst[1] = val >> 8;
   35e34:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   35e38:	7068      	strb	r0, [r5, #1]
	sys_put_le16(val >> 16, &dst[2]);
   35e3a:	0c00      	lsrs	r0, r0, #16
	dst[1] = val >> 8;
   35e3c:	70ab      	strb	r3, [r5, #2]
   35e3e:	0a03      	lsrs	r3, r0, #8
   35e40:	712b      	strb	r3, [r5, #4]
	sys_put_le16(val >> 16, &dst[2]);
   35e42:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   35e44:	70e8      	strb	r0, [r5, #3]
	dst[1] = val >> 8;
   35e46:	0a1a      	lsrs	r2, r3, #8
   35e48:	f3c1 2007 	ubfx	r0, r1, #8, #8
	dst[0] = val;
   35e4c:	7169      	strb	r1, [r5, #5]
	dst[1] = val >> 8;
   35e4e:	71a8      	strb	r0, [r5, #6]
	dst[0] = val;
   35e50:	71eb      	strb	r3, [r5, #7]
	dst[1] = val >> 8;
   35e52:	722a      	strb	r2, [r5, #8]
	if (err == -EINVAL) {
   35e54:	e487      	b.n	35766 <hci_cmd_handle+0x72>
	handle = sys_le16_to_cpu(cmd->handle);
   35e56:	68a3      	ldr	r3, [r4, #8]
   35e58:	881e      	ldrh	r6, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   35e5a:	2200      	movs	r2, #0
   35e5c:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   35e5e:	b2b0      	uxth	r0, r6
   35e60:	f008 f80c 	bl	3de7c <ll_start_enc_req_send>
   35e64:	e58c      	b.n	35980 <hci_cmd_handle+0x28c>
	handle = sys_le16_to_cpu(cmd->handle);
   35e66:	68a2      	ldr	r2, [r4, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   35e68:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   35e6a:	f832 6b02 	ldrh.w	r6, [r2], #2
   35e6e:	e7f6      	b.n	35e5e <hci_cmd_handle+0x76a>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
   35e70:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
   35e72:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   35e74:	f102 030c 	add.w	r3, r2, #12
   35e78:	f831 0b02 	ldrh.w	r0, [r1], #2
   35e7c:	320a      	adds	r2, #10
   35e7e:	f008 f913 	bl	3e0a8 <ll_enc_req_send>
   35e82:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   35e84:	8838      	ldrh	r0, [r7, #0]
   35e86:	e468      	b.n	3575a <hci_cmd_handle+0x66>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35e88:	2109      	movs	r1, #9
   35e8a:	f016 fa02 	bl	4c292 <bt_hci_cmd_complete_create>
   35e8e:	2109      	movs	r1, #9
   35e90:	4604      	mov	r4, r0
   35e92:	3008      	adds	r0, #8
   35e94:	f019 fcc8 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   35e98:	2300      	movs	r3, #0
   35e9a:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   35e9e:	2108      	movs	r1, #8
   35ea0:	f00a f822 	bl	3fee8 <lll_csrand_get>
	if (err == -EINVAL) {
   35ea4:	e45f      	b.n	35766 <hci_cmd_handle+0x72>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   35ea6:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   35ea8:	aa0a      	add	r2, sp, #40	; 0x28
   35eaa:	2300      	movs	r3, #0
   35eac:	f100 0110 	add.w	r1, r0, #16
   35eb0:	f00c fb6c 	bl	4258c <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35eb4:	8838      	ldrh	r0, [r7, #0]
   35eb6:	2111      	movs	r1, #17
   35eb8:	f016 f9eb 	bl	4c292 <bt_hci_cmd_complete_create>
   35ebc:	2111      	movs	r1, #17
   35ebe:	4604      	mov	r4, r0
   35ec0:	3008      	adds	r0, #8
   35ec2:	f019 fcb1 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   35ec6:	2300      	movs	r3, #0
   35ec8:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   35ecc:	2210      	movs	r2, #16
   35ece:	a90a      	add	r1, sp, #40	; 0x28
   35ed0:	f015 fcdb 	bl	4b88a <memcpy>
	if (err == -EINVAL) {
   35ed4:	e447      	b.n	35766 <hci_cmd_handle+0x72>
	handle = sys_le16_to_cpu(cmd->handle);
   35ed6:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   35ed8:	8818      	ldrh	r0, [r3, #0]
   35eda:	f003 feef 	bl	39cbc <ll_feature_req_send>
   35ede:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   35ee0:	8838      	ldrh	r0, [r7, #0]
   35ee2:	e43a      	b.n	3575a <hci_cmd_handle+0x66>
	handle = sys_le16_to_cpu(cmd->handle);
   35ee4:	68a3      	ldr	r3, [r4, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35ee6:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   35ee8:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35eea:	f016 f9d2 	bl	4c292 <bt_hci_cmd_complete_create>
   35eee:	2108      	movs	r1, #8
   35ef0:	4604      	mov	r4, r0
   35ef2:	4408      	add	r0, r1
   35ef4:	f019 fc98 	bl	4f828 <net_buf_simple_add>
   35ef8:	4605      	mov	r5, r0
	status = ll_chm_get(handle, rp->ch_map);
   35efa:	1ce9      	adds	r1, r5, #3
	handle = sys_le16_to_cpu(cmd->handle);
   35efc:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   35efe:	f003 fe79 	bl	39bf4 <ll_chm_get>
	rp->handle = sys_le16_to_cpu(handle);
   35f02:	f8a5 6001 	strh.w	r6, [r5, #1]
	rp->status = status;
   35f06:	7028      	strb	r0, [r5, #0]
	if (err == -EINVAL) {
   35f08:	e42d      	b.n	35766 <hci_cmd_handle+0x72>
	status = ll_chm_update(&cmd->ch_map[0]);
   35f0a:	68a0      	ldr	r0, [r4, #8]
   35f0c:	f008 fb96 	bl	3e63c <ll_chm_update>
   35f10:	e633      	b.n	35b7a <hci_cmd_handle+0x486>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   35f12:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   35f14:	8911      	ldrh	r1, [r2, #8]
   35f16:	8853      	ldrh	r3, [r2, #2]
   35f18:	8810      	ldrh	r0, [r2, #0]
   35f1a:	9102      	str	r1, [sp, #8]
   35f1c:	88d1      	ldrh	r1, [r2, #6]
   35f1e:	9101      	str	r1, [sp, #4]
   35f20:	8891      	ldrh	r1, [r2, #4]
   35f22:	9100      	str	r1, [sp, #0]
   35f24:	2200      	movs	r2, #0
   35f26:	4611      	mov	r1, r2
   35f28:	f003 fdce 	bl	39ac8 <ll_conn_update>
   35f2c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   35f2e:	8838      	ldrh	r0, [r7, #0]
   35f30:	e413      	b.n	3575a <hci_cmd_handle+0x66>
	status = ll_fal_remove(&cmd->addr);
   35f32:	68a0      	ldr	r0, [r4, #8]
   35f34:	f008 fd98 	bl	3ea68 <ll_fal_remove>
   35f38:	e61f      	b.n	35b7a <hci_cmd_handle+0x486>
	status = ll_fal_add(&cmd->addr);
   35f3a:	68a0      	ldr	r0, [r4, #8]
   35f3c:	f008 fcfa 	bl	3e934 <ll_fal_add>
   35f40:	e61b      	b.n	35b7a <hci_cmd_handle+0x486>
	status = ll_fal_clear();
   35f42:	f008 fccd 	bl	3e8e0 <ll_fal_clear>
   35f46:	e618      	b.n	35b7a <hci_cmd_handle+0x486>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35f48:	2102      	movs	r1, #2
   35f4a:	f016 f9a2 	bl	4c292 <bt_hci_cmd_complete_create>
   35f4e:	2102      	movs	r1, #2
   35f50:	4604      	mov	r4, r0
   35f52:	3008      	adds	r0, #8
   35f54:	f019 fc68 	bl	4f828 <net_buf_simple_add>
	rp->status = 0x00;
   35f58:	2300      	movs	r3, #0
   35f5a:	7003      	strb	r3, [r0, #0]
   35f5c:	4605      	mov	r5, r0
	rp->fal_size = ll_fal_size_get();
   35f5e:	f008 fcbd 	bl	3e8dc <ll_fal_size_get>
   35f62:	7068      	strb	r0, [r5, #1]
	if (err == -EINVAL) {
   35f64:	f7ff bbff 	b.w	35766 <hci_cmd_handle+0x72>
	status = ll_connect_disable(node_rx);
   35f68:	4630      	mov	r0, r6
   35f6a:	f008 f84f 	bl	3e00c <ll_connect_disable>
   35f6e:	e604      	b.n	35b7a <hci_cmd_handle+0x486>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
   35f70:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
   35f72:	f8b4 5013 	ldrh.w	r5, [r4, #19]
   35f76:	8861      	ldrh	r1, [r4, #2]
   35f78:	7963      	ldrb	r3, [r4, #5]
   35f7a:	7922      	ldrb	r2, [r4, #4]
   35f7c:	8820      	ldrh	r0, [r4, #0]
   35f7e:	9504      	str	r5, [sp, #16]
   35f80:	f8b4 5011 	ldrh.w	r5, [r4, #17]
   35f84:	9503      	str	r5, [sp, #12]
   35f86:	f8b4 500f 	ldrh.w	r5, [r4, #15]
   35f8a:	9502      	str	r5, [sp, #8]
   35f8c:	7b25      	ldrb	r5, [r4, #12]
   35f8e:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   35f90:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   35f92:	9400      	str	r4, [sp, #0]
   35f94:	f7f1 fd0c 	bl	279b0 <ll_create_connection>
   35f98:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   35f9a:	8838      	ldrh	r0, [r7, #0]
   35f9c:	f7ff bbdd 	b.w	3575a <hci_cmd_handle+0x66>
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
   35fa0:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
   35fa2:	7818      	ldrb	r0, [r3, #0]
   35fa4:	2800      	cmp	r0, #0
   35fa6:	d063      	beq.n	36070 <hci_cmd_handle+0x97c>
   35fa8:	785b      	ldrb	r3, [r3, #1]
   35faa:	2b00      	cmp	r3, #0
   35fac:	d060      	beq.n	36070 <hci_cmd_handle+0x97c>
			dup_count = 0;
   35fae:	490d      	ldr	r1, [pc, #52]	; (35fe4 <hci_cmd_handle+0x8f0>)
			dup_curr = 0U;
   35fb0:	4a0d      	ldr	r2, [pc, #52]	; (35fe8 <hci_cmd_handle+0x8f4>)
			dup_count = 0;
   35fb2:	2300      	movs	r3, #0
   35fb4:	600b      	str	r3, [r1, #0]
			dup_curr = 0U;
   35fb6:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   35fb8:	f002 fd92 	bl	38ae0 <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
   35fbc:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
   35fbe:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   35fc0:	f04f 0101 	mov.w	r1, #1
   35fc4:	8838      	ldrh	r0, [r7, #0]
		status = BT_HCI_ERR_SUCCESS;
   35fc6:	bf08      	it	eq
   35fc8:	2500      	moveq	r5, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   35fca:	e5d9      	b.n	35b80 <hci_cmd_handle+0x48c>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   35fcc:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   35fce:	7899      	ldrb	r1, [r3, #2]
   35fd0:	8818      	ldrh	r0, [r3, #0]
   35fd2:	f003 fe33 	bl	39c3c <ll_terminate_ind_send>
   35fd6:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   35fd8:	8838      	ldrh	r0, [r7, #0]
   35fda:	f7ff bbbe 	b.w	3575a <hci_cmd_handle+0x66>
   35fde:	bf00      	nop
   35fe0:	20000160 	.word	0x20000160
   35fe4:	20004510 	.word	0x20004510
   35fe8:	20004514 	.word	0x20004514
	dup_count = DUP_FILTER_DISABLED;
   35fec:	4826      	ldr	r0, [pc, #152]	; (36088 <hci_cmd_handle+0x994>)
	event_mask = DEFAULT_EVENT_MASK;
   35fee:	4927      	ldr	r1, [pc, #156]	; (3608c <hci_cmd_handle+0x998>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   35ff0:	4a27      	ldr	r2, [pc, #156]	; (36090 <hci_cmd_handle+0x99c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   35ff2:	4b28      	ldr	r3, [pc, #160]	; (36094 <hci_cmd_handle+0x9a0>)
	dup_count = DUP_FILTER_DISABLED;
   35ff4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   35ff8:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   35ffa:	f641 75ff 	movw	r5, #8191	; 0x1fff
   35ffe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   36002:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   36006:	2000      	movs	r0, #0
   36008:	2100      	movs	r1, #0
   3600a:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   3600e:	201f      	movs	r0, #31
   36010:	2100      	movs	r1, #0
   36012:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   36016:	f001 feb9 	bl	37d8c <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   3601a:	2101      	movs	r1, #1
   3601c:	8838      	ldrh	r0, [r7, #0]
   3601e:	f016 f938 	bl	4c292 <bt_hci_cmd_complete_create>
   36022:	2101      	movs	r1, #1
   36024:	4604      	mov	r4, r0
   36026:	3008      	adds	r0, #8
   36028:	f019 fbfe 	bl	4f828 <net_buf_simple_add>
	conn_count = 0U;
   3602c:	4a1a      	ldr	r2, [pc, #104]	; (36098 <hci_cmd_handle+0x9a4>)
	ccst->status = status;
   3602e:	2300      	movs	r3, #0
   36030:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   36032:	6013      	str	r3, [r2, #0]
}
   36034:	f7ff bb97 	b.w	35766 <hci_cmd_handle+0x72>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   36038:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   3603a:	4b15      	ldr	r3, [pc, #84]	; (36090 <hci_cmd_handle+0x99c>)
   3603c:	e65a      	b.n	35cf4 <hci_cmd_handle+0x600>
	handle = sys_le16_to_cpu(cmd->handle);
   3603e:	68a3      	ldr	r3, [r4, #8]
   36040:	881e      	ldrh	r6, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   36042:	a90a      	add	r1, sp, #40	; 0x28
   36044:	b2b0      	uxth	r0, r6
   36046:	f003 ff83 	bl	39f50 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3604a:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   3604c:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   3604e:	8838      	ldrh	r0, [r7, #0]
   36050:	f016 f91f 	bl	4c292 <bt_hci_cmd_complete_create>
   36054:	2105      	movs	r1, #5
   36056:	4604      	mov	r4, r0
   36058:	3008      	adds	r0, #8
   3605a:	f019 fbe5 	bl	4f828 <net_buf_simple_add>
	rp->status = status;
   3605e:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   36060:	f8a0 6001 	strh.w	r6, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   36064:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   36068:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   3606c:	f7ff bb7b 	b.w	35766 <hci_cmd_handle+0x72>
		dup_count = DUP_FILTER_DISABLED;
   36070:	4b05      	ldr	r3, [pc, #20]	; (36088 <hci_cmd_handle+0x994>)
   36072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   36076:	601a      	str	r2, [r3, #0]
   36078:	e79e      	b.n	35fb8 <hci_cmd_handle+0x8c4>
	return bt_hci_cmd_status_create(_opcode, status);
   3607a:	2112      	movs	r1, #18
   3607c:	f7ff bb6d 	b.w	3575a <hci_cmd_handle+0x66>
   36080:	2111      	movs	r1, #17
   36082:	f7ff bb6a 	b.w	3575a <hci_cmd_handle+0x66>
   36086:	bf00      	nop
   36088:	20004510 	.word	0x20004510
   3608c:	20000158 	.word	0x20000158
   36090:	20002d50 	.word	0x20002d50
   36094:	20000160 	.word	0x20000160
   36098:	2000450c 	.word	0x2000450c

0003609c <hci_acl_handle>:
{
   3609c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   360a0:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   360a2:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   360a4:	2b03      	cmp	r3, #3
	*evt = NULL;
   360a6:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   360a8:	d92a      	bls.n	36100 <hci_acl_handle+0x64>
	return net_buf_simple_pull_mem(&buf->b, len);
   360aa:	4605      	mov	r5, r0
   360ac:	4688      	mov	r8, r1
   360ae:	3008      	adds	r0, #8
   360b0:	2104      	movs	r1, #4
   360b2:	f019 fbea 	bl	4f88a <net_buf_simple_pull_mem>
	if (buf->len < len) {
   360b6:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   360b8:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   360ba:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   360be:	42bb      	cmp	r3, r7
   360c0:	d31e      	bcc.n	36100 <hci_acl_handle+0x64>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   360c2:	2f1b      	cmp	r7, #27
   360c4:	d81c      	bhi.n	36100 <hci_acl_handle+0x64>
	node_tx = ll_tx_mem_acquire();
   360c6:	f003 fca5 	bl	39a14 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   360ca:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if (!node_tx) {
   360ce:	4604      	mov	r4, r0
   360d0:	b310      	cbz	r0, 36118 <hci_acl_handle+0x7c>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   360d2:	08b3      	lsrs	r3, r6, #2
   360d4:	d114      	bne.n	36100 <hci_acl_handle+0x64>
	switch (bt_acl_flags_pb(flags)) {
   360d6:	b1be      	cbz	r6, 36108 <hci_acl_handle+0x6c>
   360d8:	2e01      	cmp	r6, #1
   360da:	d111      	bne.n	36100 <hci_acl_handle+0x64>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   360dc:	7923      	ldrb	r3, [r4, #4]
	pdu_data->len = len;
   360de:	7167      	strb	r7, [r4, #5]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   360e0:	f366 0301 	bfi	r3, r6, #0, #2
	memcpy(&pdu_data->lldata[0], buf->data, len);
   360e4:	68a9      	ldr	r1, [r5, #8]
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   360e6:	7123      	strb	r3, [r4, #4]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   360e8:	463a      	mov	r2, r7
   360ea:	1de0      	adds	r0, r4, #7
   360ec:	f015 fbcd 	bl	4b88a <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   360f0:	4621      	mov	r1, r4
   360f2:	f3c9 000b 	ubfx	r0, r9, #0, #12
   360f6:	f003 fc99 	bl	39a2c <ll_tx_mem_enqueue>
   360fa:	b938      	cbnz	r0, 3610c <hci_acl_handle+0x70>
}
   360fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (bt_acl_flags_pb(flags)) {
   36100:	f06f 0015 	mvn.w	r0, #21
}
   36104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (bt_acl_flags_pb(flags)) {
   36108:	2602      	movs	r6, #2
   3610a:	e7e7      	b.n	360dc <hci_acl_handle+0x40>
		ll_tx_mem_release(node_tx);
   3610c:	4620      	mov	r0, r4
   3610e:	f003 fc87 	bl	39a20 <ll_tx_mem_release>
		return -EINVAL;
   36112:	f06f 0015 	mvn.w	r0, #21
   36116:	e7f1      	b.n	360fc <hci_acl_handle+0x60>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   36118:	4b11      	ldr	r3, [pc, #68]	; (36160 <hci_acl_handle+0xc4>)
   3611a:	681b      	ldr	r3, [r3, #0]
   3611c:	019b      	lsls	r3, r3, #6
   3611e:	d402      	bmi.n	36126 <hci_acl_handle+0x8a>
		return -ENOBUFS;
   36120:	f06f 0068 	mvn.w	r0, #104	; 0x68
   36124:	e7ea      	b.n	360fc <hci_acl_handle+0x60>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   36126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3612a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3612e:	2001      	movs	r0, #1
   36130:	f7f7 f8da 	bl	2d2e8 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   36134:	2102      	movs	r1, #2
   36136:	f8c8 0000 	str.w	r0, [r8]
   3613a:	3008      	adds	r0, #8
   3613c:	f019 fb74 	bl	4f828 <net_buf_simple_add>
	hdr->len = len;
   36140:	2401      	movs	r4, #1
	hdr->evt = evt;
   36142:	221a      	movs	r2, #26
   36144:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   36146:	7044      	strb	r4, [r0, #1]
   36148:	f8d8 0000 	ldr.w	r0, [r8]
   3614c:	4621      	mov	r1, r4
   3614e:	3008      	adds	r0, #8
   36150:	f019 fb6a 	bl	4f828 <net_buf_simple_add>
   36154:	4603      	mov	r3, r0
		return -ENOBUFS;
   36156:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   3615a:	701c      	strb	r4, [r3, #0]
   3615c:	e7ce      	b.n	360fc <hci_acl_handle+0x60>
   3615e:	bf00      	nop
   36160:	20000158 	.word	0x20000158

00036164 <hci_disconn_complete_encode>:
{
   36164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   36166:	4b0e      	ldr	r3, [pc, #56]	; (361a0 <hci_disconn_complete_encode+0x3c>)
   36168:	681b      	ldr	r3, [r3, #0]
   3616a:	06db      	lsls	r3, r3, #27
   3616c:	d400      	bmi.n	36170 <hci_disconn_complete_encode+0xc>
}
   3616e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36170:	f102 0408 	add.w	r4, r2, #8
   36174:	4605      	mov	r5, r0
   36176:	460e      	mov	r6, r1
   36178:	4620      	mov	r0, r4
   3617a:	2102      	movs	r1, #2
   3617c:	f019 fb54 	bl	4f828 <net_buf_simple_add>
   36180:	4603      	mov	r3, r0
	hdr->len = len;
   36182:	2104      	movs	r1, #4
	hdr->evt = evt;
   36184:	2205      	movs	r2, #5
	hdr->len = len;
   36186:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   36188:	701a      	strb	r2, [r3, #0]
   3618a:	4620      	mov	r0, r4
   3618c:	f019 fb4c 	bl	4f828 <net_buf_simple_add>
   36190:	2700      	movs	r7, #0
	ep->status = 0x00;
   36192:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   36194:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   36198:	782b      	ldrb	r3, [r5, #0]
   3619a:	70c3      	strb	r3, [r0, #3]
}
   3619c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3619e:	bf00      	nop
   361a0:	20000158 	.word	0x20000158

000361a4 <hci_disconn_complete_process>:
	conn_count--;
   361a4:	4a02      	ldr	r2, [pc, #8]	; (361b0 <hci_disconn_complete_process+0xc>)
   361a6:	6813      	ldr	r3, [r2, #0]
   361a8:	3b01      	subs	r3, #1
   361aa:	6013      	str	r3, [r2, #0]
}
   361ac:	4770      	bx	lr
   361ae:	bf00      	nop
   361b0:	2000450c 	.word	0x2000450c

000361b4 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   361b4:	7f03      	ldrb	r3, [r0, #28]
   361b6:	f003 0303 	and.w	r3, r3, #3
   361ba:	3b01      	subs	r3, #1
   361bc:	2b01      	cmp	r3, #1
{
   361be:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
   361c0:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
   361c2:	d90d      	bls.n	361e0 <hci_acl_encode+0x2c>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   361c4:	4a15      	ldr	r2, [pc, #84]	; (3621c <hci_acl_encode+0x68>)
   361c6:	4916      	ldr	r1, [pc, #88]	; (36220 <hci_acl_encode+0x6c>)
   361c8:	4816      	ldr	r0, [pc, #88]	; (36224 <hci_acl_encode+0x70>)
   361ca:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   361ce:	f013 fa51 	bl	49674 <printk>
   361d2:	4040      	eors	r0, r0
   361d4:	f380 8811 	msr	BASEPRI, r0
   361d8:	f04f 0003 	mov.w	r0, #3
   361dc:	df02      	svc	2
		break;
	}
}
   361de:	bd70      	pop	{r4, r5, r6, pc}
   361e0:	4604      	mov	r4, r0
   361e2:	f101 0508 	add.w	r5, r1, #8
   361e6:	4628      	mov	r0, r5
   361e8:	2104      	movs	r1, #4
   361ea:	f019 fb1d 	bl	4f828 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   361ee:	7f23      	ldrb	r3, [r4, #28]
   361f0:	f003 0303 	and.w	r3, r3, #3
   361f4:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   361f6:	bf0c      	ite	eq
   361f8:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   361fc:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   36200:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   36202:	7f61      	ldrb	r1, [r4, #29]
   36204:	8041      	strh	r1, [r0, #2]
   36206:	4628      	mov	r0, r5
   36208:	f019 fb0e 	bl	4f828 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   3620c:	7f62      	ldrb	r2, [r4, #29]
   3620e:	f104 011f 	add.w	r1, r4, #31
}
   36212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   36216:	f015 bb38 	b.w	4b88a <memcpy>
   3621a:	bf00      	nop
   3621c:	0005250c 	.word	0x0005250c
   36220:	000524c0 	.word	0x000524c0
   36224:	00052460 	.word	0x00052460

00036228 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   36228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   3622c:	f890 c004 	ldrb.w	ip, [r0, #4]
   36230:	f1bc 0f03 	cmp.w	ip, #3
{
   36234:	b089      	sub	sp, #36	; 0x24
   36236:	4604      	mov	r4, r0
   36238:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   3623a:	f100 061c 	add.w	r6, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   3623e:	d01f      	beq.n	36280 <hci_evt_encode+0x58>
	switch (node_rx->hdr.type) {
   36240:	f1ac 0c05 	sub.w	ip, ip, #5
	handle = node_rx->hdr.handle;
   36244:	88c7      	ldrh	r7, [r0, #6]
	switch (node_rx->hdr.type) {
   36246:	f1bc 0f17 	cmp.w	ip, #23
   3624a:	d834      	bhi.n	362b6 <hci_evt_encode+0x8e>
   3624c:	e8df f01c 	tbh	[pc, ip, lsl #1]
   36250:	00330043 	.word	0x00330043
   36254:	00330033 	.word	0x00330033
   36258:	00330033 	.word	0x00330033
   3625c:	00330033 	.word	0x00330033
   36260:	00330033 	.word	0x00330033
   36264:	00330033 	.word	0x00330033
   36268:	00330033 	.word	0x00330033
   3626c:	00330033 	.word	0x00330033
   36270:	00bc0033 	.word	0x00bc0033
   36274:	01210119 	.word	0x01210119
   36278:	01680151 	.word	0x01680151
   3627c:	01ae017b 	.word	0x01ae017b
	switch (pdu_data->llctrl.opcode) {
   36280:	7fc3      	ldrb	r3, [r0, #31]
   36282:	88c7      	ldrh	r7, [r0, #6]
   36284:	3b03      	subs	r3, #3
   36286:	2b12      	cmp	r3, #18
   36288:	f200 81c8 	bhi.w	3661c <hci_evt_encode+0x3f4>
   3628c:	e8df f013 	tbh	[pc, r3, lsl #1]
   36290:	01c60246 	.word	0x01c60246
   36294:	027501c6 	.word	0x027501c6
   36298:	01c6028e 	.word	0x01c6028e
   3629c:	01c601fb 	.word	0x01c601fb
   362a0:	01c601c6 	.word	0x01c601c6
   362a4:	01c60204 	.word	0x01c60204
   362a8:	01c6021f 	.word	0x01c6021f
   362ac:	01c60020 	.word	0x01c60020
   362b0:	01d401c6 	.word	0x01d401c6
   362b4:	01d4      	.short	0x01d4
		LL_ASSERT(0);
   362b6:	4ab4      	ldr	r2, [pc, #720]	; (36588 <hci_evt_encode+0x360>)
   362b8:	49b4      	ldr	r1, [pc, #720]	; (3658c <hci_evt_encode+0x364>)
   362ba:	48b5      	ldr	r0, [pc, #724]	; (36590 <hci_evt_encode+0x368>)
   362bc:	f641 43af 	movw	r3, #7343	; 0x1caf
   362c0:	f013 f9d8 	bl	49674 <printk>
   362c4:	4040      	eors	r0, r0
   362c6:	f380 8811 	msr	BASEPRI, r0
   362ca:	f04f 0003 	mov.w	r0, #3
   362ce:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   362d0:	b009      	add	sp, #36	; 0x24
   362d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   362d6:	4aaf      	ldr	r2, [pc, #700]	; (36594 <hci_evt_encode+0x36c>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   362d8:	7e03      	ldrb	r3, [r0, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
   362da:	7ea6      	ldrb	r6, [r4, #26]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   362dc:	f894 8019 	ldrb.w	r8, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   362e0:	e892 0003 	ldmia.w	r2, {r0, r1}
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   362e4:	425b      	negs	r3, r3
   362e6:	b25f      	sxtb	r7, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   362e8:	0c0b      	lsrs	r3, r1, #16
   362ea:	f88d 301e 	strb.w	r3, [sp, #30]
	if (adv->tx_addr) {
   362ee:	7f23      	ldrb	r3, [r4, #28]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   362f0:	9006      	str	r0, [sp, #24]
	if (adv->tx_addr) {
   362f2:	0658      	lsls	r0, r3, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   362f4:	f8ad 101c 	strh.w	r1, [sp, #28]
	direct_report = node_rx->hdr.rx_ftr.direct;
   362f8:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (adv->tx_addr) {
   362fc:	f100 8277 	bmi.w	367ee <hci_evt_encode+0x5c6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36300:	4ba5      	ldr	r3, [pc, #660]	; (36598 <hci_evt_encode+0x370>)
   36302:	685b      	ldr	r3, [r3, #4]
	if (direct_report) {
   36304:	2e00      	cmp	r6, #0
   36306:	f040 82af 	bne.w	36868 <hci_evt_encode+0x640>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3630a:	009b      	lsls	r3, r3, #2
   3630c:	d5e0      	bpl.n	362d0 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   3630e:	4ba3      	ldr	r3, [pc, #652]	; (3659c <hci_evt_encode+0x374>)
   36310:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36312:	079e      	lsls	r6, r3, #30
   36314:	d5dc      	bpl.n	362d0 <hci_evt_encode+0xa8>
	if (dup_count >= 0) {
   36316:	4aa2      	ldr	r2, [pc, #648]	; (365a0 <hci_evt_encode+0x378>)
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   36318:	7f23      	ldrb	r3, [r4, #28]
	if (dup_count >= 0) {
   3631a:	6812      	ldr	r2, [r2, #0]
   3631c:	2a00      	cmp	r2, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   3631e:	f003 000f 	and.w	r0, r3, #15
   36322:	f3c3 1180 	ubfx	r1, r3, #6, #1
   36326:	f104 0a1e 	add.w	sl, r4, #30
	if (dup_count >= 0) {
   3632a:	db05      	blt.n	36338 <hci_evt_encode+0x110>
   3632c:	4652      	mov	r2, sl
   3632e:	f7ff f88f 	bl	35450 <dup_found.part.0>
	if (dup_scan &&
   36332:	2800      	cmp	r0, #0
   36334:	d1cc      	bne.n	362d0 <hci_evt_encode+0xa8>
   36336:	7f23      	ldrb	r3, [r4, #28]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   36338:	f003 030f 	and.w	r3, r3, #15
   3633c:	2b01      	cmp	r3, #1
   3633e:	f000 834f 	beq.w	369e0 <hci_evt_encode+0x7b8>
		data_len = (adv->len - BDADDR_SIZE);
   36342:	7f63      	ldrb	r3, [r4, #29]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   36344:	f103 0b06 	add.w	fp, r3, #6
		data_len = (adv->len - BDADDR_SIZE);
   36348:	1f9e      	subs	r6, r3, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   3634a:	fa5f f28b 	uxtb.w	r2, fp
		data_len = (adv->len - BDADDR_SIZE);
   3634e:	b2f6      	uxtb	r6, r6
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   36350:	3305      	adds	r3, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   36352:	9205      	str	r2, [sp, #20]
	return net_buf_add(buf, melen);
   36354:	fa5f fb83 	uxtb.w	fp, r3
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   36358:	46b1      	mov	r9, r6
   3635a:	3508      	adds	r5, #8
   3635c:	2102      	movs	r1, #2
   3635e:	4628      	mov	r0, r5
   36360:	f019 fa62 	bl	4f828 <net_buf_simple_add>
	hdr->len = len;
   36364:	9b05      	ldr	r3, [sp, #20]
   36366:	7043      	strb	r3, [r0, #1]
	hdr->evt = evt;
   36368:	223e      	movs	r2, #62	; 0x3e
   3636a:	7002      	strb	r2, [r0, #0]
   3636c:	2101      	movs	r1, #1
   3636e:	4628      	mov	r0, r5
   36370:	f019 fa5a 	bl	4f828 <net_buf_simple_add>
   36374:	4602      	mov	r2, r0
	me->subevent = subevt;
   36376:	2302      	movs	r3, #2
   36378:	7013      	strb	r3, [r2, #0]
   3637a:	4659      	mov	r1, fp
   3637c:	4628      	mov	r0, r5
   3637e:	f019 fa53 	bl	4f828 <net_buf_simple_add>
	sep->num_reports = 1U;
   36382:	2301      	movs	r3, #1
   36384:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   36386:	7f23      	ldrb	r3, [r4, #28]
   36388:	f003 030f 	and.w	r3, r3, #15
   3638c:	3320      	adds	r3, #32
   3638e:	446b      	add	r3, sp
   36390:	4605      	mov	r5, r0
   36392:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   36396:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   36398:	f008 fbfa 	bl	3eb90 <ll_rl_size_get>
   3639c:	4580      	cmp	r8, r0
   3639e:	f080 82f0 	bcs.w	36982 <hci_evt_encode+0x75a>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   363a2:	4640      	mov	r0, r8
   363a4:	1cea      	adds	r2, r5, #3
   363a6:	1ca9      	adds	r1, r5, #2
   363a8:	f008 fbac 	bl	3eb04 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   363ac:	78ab      	ldrb	r3, [r5, #2]
   363ae:	3302      	adds	r3, #2
   363b0:	70ab      	strb	r3, [r5, #2]
	adv_info->length = data_len;
   363b2:	726e      	strb	r6, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   363b4:	350a      	adds	r5, #10
   363b6:	f104 0124 	add.w	r1, r4, #36	; 0x24
   363ba:	464a      	mov	r2, r9
   363bc:	4628      	mov	r0, r5
   363be:	f015 fa64 	bl	4b88a <memcpy>
	*prssi = rssi;
   363c2:	f805 7009 	strb.w	r7, [r5, r9]
   363c6:	e783      	b.n	362d0 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   363c8:	07f0      	lsls	r0, r6, #31
   363ca:	f100 8202 	bmi.w	367d2 <hci_evt_encode+0x5aa>
	status = cc->status;
   363ce:	7f26      	ldrb	r6, [r4, #28]
	if (!status) {
   363d0:	2e00      	cmp	r6, #0
   363d2:	f000 81f5 	beq.w	367c0 <hci_evt_encode+0x598>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   363d6:	4b70      	ldr	r3, [pc, #448]	; (36598 <hci_evt_encode+0x370>)
   363d8:	685b      	ldr	r3, [r3, #4]
   363da:	0099      	lsls	r1, r3, #2
   363dc:	f57f af78 	bpl.w	362d0 <hci_evt_encode+0xa8>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   363e0:	4b6e      	ldr	r3, [pc, #440]	; (3659c <hci_evt_encode+0x374>)
   363e2:	681b      	ldr	r3, [r3, #0]
   363e4:	f240 2201 	movw	r2, #513	; 0x201
   363e8:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   363ea:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   363ee:	f43f af6f 	beq.w	362d0 <hci_evt_encode+0xa8>
	if (!status) {
   363f2:	2e00      	cmp	r6, #0
   363f4:	f040 820d 	bne.w	36812 <hci_evt_encode+0x5ea>
		conn_count++;
   363f8:	4a6a      	ldr	r2, [pc, #424]	; (365a4 <hci_evt_encode+0x37c>)
   363fa:	6813      	ldr	r3, [r2, #0]
   363fc:	3301      	adds	r3, #1
   363fe:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   36400:	f1b8 0f00 	cmp.w	r8, #0
   36404:	f000 828c 	beq.w	36920 <hci_evt_encode+0x6f8>
   36408:	3508      	adds	r5, #8
   3640a:	2102      	movs	r1, #2
   3640c:	4628      	mov	r0, r5
   3640e:	f019 fa0b 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   36412:	233e      	movs	r3, #62	; 0x3e
   36414:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   36416:	231f      	movs	r3, #31
   36418:	7043      	strb	r3, [r0, #1]
   3641a:	2101      	movs	r1, #1
   3641c:	4628      	mov	r0, r5
   3641e:	f019 fa03 	bl	4f828 <net_buf_simple_add>
   36422:	4603      	mov	r3, r0
	me->subevent = subevt;
   36424:	220a      	movs	r2, #10
   36426:	701a      	strb	r2, [r3, #0]
   36428:	4628      	mov	r0, r5
   3642a:	211e      	movs	r1, #30
   3642c:	f019 f9fc 	bl	4f828 <net_buf_simple_add>
		leecc->status = 0x00;
   36430:	7006      	strb	r6, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   36432:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = cc->role;
   36436:	7f63      	ldrb	r3, [r4, #29]
   36438:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   3643a:	7fa3      	ldrb	r3, [r4, #30]
   3643c:	7103      	strb	r3, [r0, #4]
   3643e:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   36440:	2206      	movs	r2, #6
   36442:	f104 011f 	add.w	r1, r4, #31
   36446:	3005      	adds	r0, #5
   36448:	f015 fa1f 	bl	4b88a <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   3644c:	2206      	movs	r2, #6
   3644e:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   36452:	f105 000b 	add.w	r0, r5, #11
   36456:	f015 fa18 	bl	4b88a <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   3645a:	2206      	movs	r2, #6
   3645c:	f104 0125 	add.w	r1, r4, #37	; 0x25
   36460:	f105 0011 	add.w	r0, r5, #17
   36464:	f015 fa11 	bl	4b88a <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   36468:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   3646a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   3646c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   3646e:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   36472:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   36476:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   3647a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   3647e:	776b      	strb	r3, [r5, #29]
		return;
   36480:	e726      	b.n	362d0 <hci_evt_encode+0xa8>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   36482:	460a      	mov	r2, r1
   36484:	4630      	mov	r0, r6
   36486:	4639      	mov	r1, r7
}
   36488:	b009      	add	sp, #36	; 0x24
   3648a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   3648e:	f7ff be69 	b.w	36164 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36492:	4b41      	ldr	r3, [pc, #260]	; (36598 <hci_evt_encode+0x370>)
   36494:	685b      	ldr	r3, [r3, #4]
   36496:	009a      	lsls	r2, r3, #2
   36498:	f57f af1a 	bpl.w	362d0 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   3649c:	4b3f      	ldr	r3, [pc, #252]	; (3659c <hci_evt_encode+0x374>)
   3649e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   364a0:	075b      	lsls	r3, r3, #29
   364a2:	f57f af15 	bpl.w	362d0 <hci_evt_encode+0xa8>
   364a6:	3508      	adds	r5, #8
   364a8:	2102      	movs	r1, #2
   364aa:	4628      	mov	r0, r5
   364ac:	f019 f9bc 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   364b0:	233e      	movs	r3, #62	; 0x3e
   364b2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   364b4:	230a      	movs	r3, #10
   364b6:	7043      	strb	r3, [r0, #1]
   364b8:	2101      	movs	r1, #1
   364ba:	4628      	mov	r0, r5
   364bc:	f019 f9b4 	bl	4f828 <net_buf_simple_add>
   364c0:	4603      	mov	r3, r0
	me->subevent = subevt;
   364c2:	2203      	movs	r2, #3
   364c4:	4628      	mov	r0, r5
   364c6:	701a      	strb	r2, [r3, #0]
   364c8:	2109      	movs	r1, #9
   364ca:	f019 f9ad 	bl	4f828 <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   364ce:	07f6      	lsls	r6, r6, #31
   364d0:	4605      	mov	r5, r0
   364d2:	f100 8277 	bmi.w	369c4 <hci_evt_encode+0x79c>
	sep->status = cu->status;
   364d6:	7f23      	ldrb	r3, [r4, #28]
   364d8:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   364da:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   364dc:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   364de:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   364e0:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   364e4:	f8a5 7001 	strh.w	r7, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   364e8:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   364ec:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   364f0:	e6ee      	b.n	362d0 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   364f2:	4b29      	ldr	r3, [pc, #164]	; (36598 <hci_evt_encode+0x370>)
   364f4:	685b      	ldr	r3, [r3, #4]
   364f6:	0418      	lsls	r0, r3, #16
   364f8:	f04f 0400 	mov.w	r4, #0
   364fc:	f57f aee8 	bpl.w	362d0 <hci_evt_encode+0xa8>
   36500:	3508      	adds	r5, #8
   36502:	2102      	movs	r1, #2
   36504:	4628      	mov	r0, r5
   36506:	f019 f98f 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   3650a:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
   3650c:	2103      	movs	r1, #3
	hdr->evt = evt;
   3650e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   36510:	7041      	strb	r1, [r0, #1]
   36512:	4628      	mov	r0, r5
   36514:	f019 f988 	bl	4f828 <net_buf_simple_add>
	ep->status = 0x00;
   36518:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   3651a:	f8a0 7001 	strh.w	r7, [r0, #1]
   3651e:	e6d7      	b.n	362d0 <hci_evt_encode+0xa8>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   36520:	4b21      	ldr	r3, [pc, #132]	; (365a8 <hci_evt_encode+0x380>)
   36522:	681b      	ldr	r3, [r3, #0]
   36524:	0219      	lsls	r1, r3, #8
   36526:	f57f aed3 	bpl.w	362d0 <hci_evt_encode+0xa8>
   3652a:	3508      	adds	r5, #8
   3652c:	2102      	movs	r1, #2
   3652e:	4628      	mov	r0, r5
   36530:	f019 f97a 	bl	4f828 <net_buf_simple_add>
	hdr->len = len;
   36534:	2102      	movs	r1, #2
	hdr->evt = evt;
   36536:	2357      	movs	r3, #87	; 0x57
   36538:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   3653a:	7041      	strb	r1, [r0, #1]
   3653c:	4628      	mov	r0, r5
   3653e:	f019 f973 	bl	4f828 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   36542:	8007      	strh	r7, [r0, #0]
   36544:	e6c4      	b.n	362d0 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36546:	4b14      	ldr	r3, [pc, #80]	; (36598 <hci_evt_encode+0x370>)
   36548:	685b      	ldr	r3, [r3, #4]
   3654a:	009a      	lsls	r2, r3, #2
   3654c:	f57f aec0 	bpl.w	362d0 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   36550:	4b12      	ldr	r3, [pc, #72]	; (3659c <hci_evt_encode+0x374>)
   36552:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36554:	031b      	lsls	r3, r3, #12
   36556:	f57f aebb 	bpl.w	362d0 <hci_evt_encode+0xa8>
   3655a:	3508      	adds	r5, #8
   3655c:	2102      	movs	r1, #2
   3655e:	4628      	mov	r0, r5
   36560:	f019 f962 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   36564:	233e      	movs	r3, #62	; 0x3e
   36566:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   36568:	2304      	movs	r3, #4
   3656a:	7043      	strb	r3, [r0, #1]
   3656c:	2101      	movs	r1, #1
   3656e:	4628      	mov	r0, r5
   36570:	f019 f95a 	bl	4f828 <net_buf_simple_add>
	me->subevent = subevt;
   36574:	2314      	movs	r3, #20
   36576:	7003      	strb	r3, [r0, #0]
   36578:	2103      	movs	r1, #3
   3657a:	4628      	mov	r0, r5
   3657c:	f019 f954 	bl	4f828 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   36580:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   36582:	7f23      	ldrb	r3, [r4, #28]
   36584:	7083      	strb	r3, [r0, #2]
   36586:	e6a3      	b.n	362d0 <hci_evt_encode+0xa8>
   36588:	0005250c 	.word	0x0005250c
   3658c:	000524c0 	.word	0x000524c0
   36590:	00052460 	.word	0x00052460
   36594:	00051524 	.word	0x00051524
   36598:	20000158 	.word	0x20000158
   3659c:	20000160 	.word	0x20000160
   365a0:	20004510 	.word	0x20004510
   365a4:	2000450c 	.word	0x2000450c
   365a8:	20002d50 	.word	0x20002d50
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   365ac:	4ba8      	ldr	r3, [pc, #672]	; (36850 <hci_evt_encode+0x628>)
   365ae:	685b      	ldr	r3, [r3, #4]
   365b0:	009e      	lsls	r6, r3, #2
   365b2:	f57f ae8d 	bpl.w	362d0 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   365b6:	4ba7      	ldr	r3, [pc, #668]	; (36854 <hci_evt_encode+0x62c>)
   365b8:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   365ba:	0518      	lsls	r0, r3, #20
   365bc:	f57f ae88 	bpl.w	362d0 <hci_evt_encode+0xa8>
   365c0:	3508      	adds	r5, #8
   365c2:	2102      	movs	r1, #2
   365c4:	4628      	mov	r0, r5
   365c6:	f019 f92f 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   365ca:	233e      	movs	r3, #62	; 0x3e
   365cc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   365ce:	2306      	movs	r3, #6
   365d0:	7043      	strb	r3, [r0, #1]
   365d2:	2101      	movs	r1, #1
   365d4:	4628      	mov	r0, r5
   365d6:	f019 f927 	bl	4f828 <net_buf_simple_add>
	me->subevent = subevt;
   365da:	230c      	movs	r3, #12
   365dc:	7003      	strb	r3, [r0, #0]
   365de:	2105      	movs	r1, #5
   365e0:	4628      	mov	r0, r5
   365e2:	f019 f921 	bl	4f828 <net_buf_simple_add>
	sep->status = pu->status;
   365e6:	7f23      	ldrb	r3, [r4, #28]
   365e8:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   365ea:	f8a0 7001 	strh.w	r7, [r0, #1]
   365ee:	7f62      	ldrb	r2, [r4, #29]
   365f0:	2a00      	cmp	r2, #0
   365f2:	fa92 f3a2 	rbit	r3, r2
   365f6:	fab3 f383 	clz	r3, r3
   365fa:	bf08      	it	eq
   365fc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   36600:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   36602:	70c3      	strb	r3, [r0, #3]
   36604:	7fa2      	ldrb	r2, [r4, #30]
   36606:	fa92 f3a2 	rbit	r3, r2
   3660a:	2a00      	cmp	r2, #0
   3660c:	fab3 f383 	clz	r3, r3
   36610:	bf08      	it	eq
   36612:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   36616:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   36618:	7103      	strb	r3, [r0, #4]
   3661a:	e659      	b.n	362d0 <hci_evt_encode+0xa8>
		LL_ASSERT(0);
   3661c:	4a8e      	ldr	r2, [pc, #568]	; (36858 <hci_evt_encode+0x630>)
   3661e:	498f      	ldr	r1, [pc, #572]	; (3685c <hci_evt_encode+0x634>)
   36620:	488f      	ldr	r0, [pc, #572]	; (36860 <hci_evt_encode+0x638>)
   36622:	f641 538f 	movw	r3, #7567	; 0x1d8f
   36626:	f013 f825 	bl	49674 <printk>
   3662a:	4040      	eors	r0, r0
   3662c:	f380 8811 	msr	BASEPRI, r0
   36630:	f04f 0003 	mov.w	r0, #3
   36634:	df02      	svc	2
}
   36636:	e64b      	b.n	362d0 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36638:	4b85      	ldr	r3, [pc, #532]	; (36850 <hci_evt_encode+0x628>)
   3663a:	685b      	ldr	r3, [r3, #4]
   3663c:	009a      	lsls	r2, r3, #2
   3663e:	f57f ae47 	bpl.w	362d0 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   36642:	4b84      	ldr	r3, [pc, #528]	; (36854 <hci_evt_encode+0x62c>)
   36644:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36646:	065b      	lsls	r3, r3, #25
   36648:	f57f ae42 	bpl.w	362d0 <hci_evt_encode+0xa8>
   3664c:	3508      	adds	r5, #8
   3664e:	2102      	movs	r1, #2
   36650:	4628      	mov	r0, r5
   36652:	f019 f8e9 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   36656:	233e      	movs	r3, #62	; 0x3e
   36658:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   3665a:	230b      	movs	r3, #11
   3665c:	7043      	strb	r3, [r0, #1]
   3665e:	2101      	movs	r1, #1
   36660:	4628      	mov	r0, r5
   36662:	f019 f8e1 	bl	4f828 <net_buf_simple_add>
	me->subevent = subevt;
   36666:	2307      	movs	r3, #7
   36668:	7003      	strb	r3, [r0, #0]
   3666a:	210a      	movs	r1, #10
   3666c:	4628      	mov	r0, r5
   3666e:	f019 f8db 	bl	4f828 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   36672:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   36674:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   36676:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   36678:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   3667a:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   3667c:	8c23      	ldrh	r3, [r4, #32]
   3667e:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   36680:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   36682:	8103      	strh	r3, [r0, #8]
   36684:	e624      	b.n	362d0 <hci_evt_encode+0xa8>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   36686:	460b      	mov	r3, r1
   36688:	463a      	mov	r2, r7
   3668a:	4631      	mov	r1, r6
   3668c:	2000      	movs	r0, #0
}
   3668e:	b009      	add	sp, #36	; 0x24
   36690:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   36694:	f7fe bf38 	b.w	35508 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   36698:	4b6d      	ldr	r3, [pc, #436]	; (36850 <hci_evt_encode+0x628>)
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   3669a:	f890 4020 	ldrb.w	r4, [r0, #32]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   3669e:	681b      	ldr	r3, [r3, #0]
   366a0:	061e      	lsls	r6, r3, #24
   366a2:	f57f ae15 	bpl.w	362d0 <hci_evt_encode+0xa8>
   366a6:	3508      	adds	r5, #8
   366a8:	2102      	movs	r1, #2
   366aa:	4628      	mov	r0, r5
   366ac:	f019 f8bc 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   366b0:	2308      	movs	r3, #8
	hdr->len = len;
   366b2:	2104      	movs	r1, #4
	hdr->evt = evt;
   366b4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   366b6:	7041      	strb	r1, [r0, #1]
   366b8:	4628      	mov	r0, r5
   366ba:	f019 f8b5 	bl	4f828 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   366be:	fab4 f384 	clz	r3, r4
   366c2:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   366c4:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   366c6:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   366ca:	70c3      	strb	r3, [r0, #3]
   366cc:	e600      	b.n	362d0 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   366ce:	4b60      	ldr	r3, [pc, #384]	; (36850 <hci_evt_encode+0x628>)
   366d0:	685b      	ldr	r3, [r3, #4]
   366d2:	0098      	lsls	r0, r3, #2
   366d4:	f140 8093 	bpl.w	367fe <hci_evt_encode+0x5d6>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   366d8:	4b5e      	ldr	r3, [pc, #376]	; (36854 <hci_evt_encode+0x62c>)
   366da:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   366dc:	0699      	lsls	r1, r3, #26
   366de:	f140 808e 	bpl.w	367fe <hci_evt_encode+0x5d6>
   366e2:	3508      	adds	r5, #8
   366e4:	2102      	movs	r1, #2
   366e6:	4628      	mov	r0, r5
   366e8:	f019 f89e 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   366ec:	233e      	movs	r3, #62	; 0x3e
   366ee:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   366f0:	230b      	movs	r3, #11
   366f2:	7043      	strb	r3, [r0, #1]
   366f4:	2101      	movs	r1, #1
   366f6:	4628      	mov	r0, r5
   366f8:	f019 f896 	bl	4f828 <net_buf_simple_add>
	me->subevent = subevt;
   366fc:	2306      	movs	r3, #6
   366fe:	7003      	strb	r3, [r0, #0]
   36700:	210a      	movs	r1, #10
   36702:	4628      	mov	r0, r5
   36704:	f019 f890 	bl	4f828 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   36708:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   3670a:	8c23      	ldrh	r3, [r4, #32]
   3670c:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   3670e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   36710:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   36712:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   36714:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   36716:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   36718:	8103      	strh	r3, [r0, #8]
   3671a:	e5d9      	b.n	362d0 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3671c:	4b4c      	ldr	r3, [pc, #304]	; (36850 <hci_evt_encode+0x628>)
   3671e:	685b      	ldr	r3, [r3, #4]
   36720:	0099      	lsls	r1, r3, #2
   36722:	f57f add5 	bpl.w	362d0 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   36726:	4b4b      	ldr	r3, [pc, #300]	; (36854 <hci_evt_encode+0x62c>)
   36728:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   3672a:	06da      	lsls	r2, r3, #27
   3672c:	f57f add0 	bpl.w	362d0 <hci_evt_encode+0xa8>
   36730:	3508      	adds	r5, #8
   36732:	2102      	movs	r1, #2
   36734:	4628      	mov	r0, r5
   36736:	f019 f877 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   3673a:	233e      	movs	r3, #62	; 0x3e
   3673c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   3673e:	230d      	movs	r3, #13
   36740:	7043      	strb	r3, [r0, #1]
   36742:	2101      	movs	r1, #1
   36744:	4628      	mov	r0, r5
   36746:	f019 f86f 	bl	4f828 <net_buf_simple_add>
	me->subevent = subevt;
   3674a:	2305      	movs	r3, #5
   3674c:	7003      	strb	r3, [r0, #0]
   3674e:	210c      	movs	r1, #12
   36750:	4628      	mov	r0, r5
   36752:	f019 f869 	bl	4f828 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   36756:	f104 0120 	add.w	r1, r4, #32
   3675a:	4605      	mov	r5, r0
   3675c:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   3675e:	f820 7b02 	strh.w	r7, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   36762:	f015 f892 	bl	4b88a <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   36766:	2202      	movs	r2, #2
   36768:	f104 0128 	add.w	r1, r4, #40	; 0x28
   3676c:	f105 000a 	add.w	r0, r5, #10
}
   36770:	b009      	add	sp, #36	; 0x24
   36772:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   36776:	f015 b888 	b.w	4b88a <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   3677a:	4b35      	ldr	r3, [pc, #212]	; (36850 <hci_evt_encode+0x628>)
   3677c:	681b      	ldr	r3, [r3, #0]
   3677e:	061b      	lsls	r3, r3, #24
   36780:	f04f 0400 	mov.w	r4, #0
   36784:	f57f ada4 	bpl.w	362d0 <hci_evt_encode+0xa8>
   36788:	3508      	adds	r5, #8
   3678a:	2102      	movs	r1, #2
   3678c:	4628      	mov	r0, r5
   3678e:	f019 f84b 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   36792:	2308      	movs	r3, #8
	hdr->len = len;
   36794:	2104      	movs	r1, #4
	hdr->evt = evt;
   36796:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   36798:	7041      	strb	r1, [r0, #1]
   3679a:	4628      	mov	r0, r5
   3679c:	f019 f844 	bl	4f828 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   367a0:	2301      	movs	r3, #1
	ep->status = err;
   367a2:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   367a4:	f8a0 7001 	strh.w	r7, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   367a8:	70c3      	strb	r3, [r0, #3]
   367aa:	e591      	b.n	362d0 <hci_evt_encode+0xa8>
	switch (pdu_data->llctrl.unknown_rsp.type) {
   367ac:	f890 3020 	ldrb.w	r3, [r0, #32]
   367b0:	2b0e      	cmp	r3, #14
   367b2:	f47f ad8d 	bne.w	362d0 <hci_evt_encode+0xa8>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   367b6:	460b      	mov	r3, r1
   367b8:	463a      	mov	r2, r7
   367ba:	2100      	movs	r1, #0
   367bc:	201a      	movs	r0, #26
   367be:	e766      	b.n	3668e <hci_evt_encode+0x466>
		ll_rl_crpa_set(cc->peer_addr_type,
   367c0:	7fa0      	ldrb	r0, [r4, #30]
   367c2:	f104 0325 	add.w	r3, r4, #37	; 0x25
   367c6:	22ff      	movs	r2, #255	; 0xff
   367c8:	f104 011f 	add.w	r1, r4, #31
   367cc:	f008 fae0 	bl	3ed90 <ll_rl_crpa_set>
   367d0:	e601      	b.n	363d6 <hci_evt_encode+0x1ae>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   367d2:	4a21      	ldr	r2, [pc, #132]	; (36858 <hci_evt_encode+0x630>)
   367d4:	4923      	ldr	r1, [pc, #140]	; (36864 <hci_evt_encode+0x63c>)
   367d6:	4822      	ldr	r0, [pc, #136]	; (36860 <hci_evt_encode+0x638>)
   367d8:	f641 23f5 	movw	r3, #6901	; 0x1af5
   367dc:	f012 ff4a 	bl	49674 <printk>
   367e0:	4040      	eors	r0, r0
   367e2:	f380 8811 	msr	BASEPRI, r0
   367e6:	f04f 0003 	mov.w	r0, #3
   367ea:	df02      	svc	2
   367ec:	e5ef      	b.n	363ce <hci_evt_encode+0x1a6>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   367ee:	2100      	movs	r1, #0
   367f0:	f104 031e 	add.w	r3, r4, #30
   367f4:	4642      	mov	r2, r8
   367f6:	4608      	mov	r0, r1
   367f8:	f008 faca 	bl	3ed90 <ll_rl_crpa_set>
   367fc:	e580      	b.n	36300 <hci_evt_encode+0xd8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   367fe:	2300      	movs	r3, #0
   36800:	e9cd 3301 	strd	r3, r3, [sp, #4]
   36804:	9300      	str	r3, [sp, #0]
   36806:	221a      	movs	r2, #26
   36808:	2102      	movs	r1, #2
   3680a:	4638      	mov	r0, r7
   3680c:	f003 f95c 	bl	39ac8 <ll_conn_update>
		return;
   36810:	e55e      	b.n	362d0 <hci_evt_encode+0xa8>
   36812:	3508      	adds	r5, #8
   36814:	2102      	movs	r1, #2
   36816:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   36818:	f1b8 0f00 	cmp.w	r8, #0
   3681c:	f040 80bb 	bne.w	36996 <hci_evt_encode+0x76e>
   36820:	f019 f802 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   36824:	233e      	movs	r3, #62	; 0x3e
   36826:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   36828:	2313      	movs	r3, #19
   3682a:	7043      	strb	r3, [r0, #1]
   3682c:	2101      	movs	r1, #1
   3682e:	4628      	mov	r0, r5
   36830:	f018 fffa 	bl	4f828 <net_buf_simple_add>
	me->subevent = subevt;
   36834:	2301      	movs	r3, #1
   36836:	7003      	strb	r3, [r0, #0]
   36838:	2112      	movs	r1, #18
   3683a:	4628      	mov	r0, r5
   3683c:	f018 fff4 	bl	4f828 <net_buf_simple_add>
   36840:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   36842:	2212      	movs	r2, #18
   36844:	4641      	mov	r1, r8
   36846:	f015 f82b 	bl	4b8a0 <memset>
		lecc->status = status;
   3684a:	7026      	strb	r6, [r4, #0]
		return;
   3684c:	e540      	b.n	362d0 <hci_evt_encode+0xa8>
   3684e:	bf00      	nop
   36850:	20000158 	.word	0x20000158
   36854:	20000160 	.word	0x20000160
   36858:	0005250c 	.word	0x0005250c
   3685c:	000524c0 	.word	0x000524c0
   36860:	00052460 	.word	0x00052460
   36864:	00052570 	.word	0x00052570
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36868:	0099      	lsls	r1, r3, #2
   3686a:	f57f ad31 	bpl.w	362d0 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   3686e:	4b65      	ldr	r3, [pc, #404]	; (36a04 <hci_evt_encode+0x7dc>)
   36870:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36872:	055a      	lsls	r2, r3, #21
   36874:	f57f ad2c 	bpl.w	362d0 <hci_evt_encode+0xa8>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   36878:	7f23      	ldrb	r3, [r4, #28]
   3687a:	f003 020f 	and.w	r2, r3, #15
   3687e:	2a01      	cmp	r2, #1
   36880:	d00d      	beq.n	3689e <hci_evt_encode+0x676>
   36882:	4a61      	ldr	r2, [pc, #388]	; (36a08 <hci_evt_encode+0x7e0>)
   36884:	4961      	ldr	r1, [pc, #388]	; (36a0c <hci_evt_encode+0x7e4>)
   36886:	4862      	ldr	r0, [pc, #392]	; (36a10 <hci_evt_encode+0x7e8>)
   36888:	f241 435a 	movw	r3, #5210	; 0x145a
   3688c:	f012 fef2 	bl	49674 <printk>
   36890:	4040      	eors	r0, r0
   36892:	f380 8811 	msr	BASEPRI, r0
   36896:	f04f 0003 	mov.w	r0, #3
   3689a:	df02      	svc	2
   3689c:	7f23      	ldrb	r3, [r4, #28]
	if (dup_count >= 0) {
   3689e:	4a5d      	ldr	r2, [pc, #372]	; (36a14 <hci_evt_encode+0x7ec>)
   368a0:	6812      	ldr	r2, [r2, #0]
   368a2:	2a00      	cmp	r2, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   368a4:	f003 000f 	and.w	r0, r3, #15
   368a8:	f3c3 1180 	ubfx	r1, r3, #6, #1
   368ac:	f104 061e 	add.w	r6, r4, #30
	if (dup_count >= 0) {
   368b0:	db05      	blt.n	368be <hci_evt_encode+0x696>
   368b2:	4632      	mov	r2, r6
   368b4:	f7fe fdcc 	bl	35450 <dup_found.part.0>
	if (dup_scan &&
   368b8:	2800      	cmp	r0, #0
   368ba:	f47f ad09 	bne.w	362d0 <hci_evt_encode+0xa8>
   368be:	3508      	adds	r5, #8
   368c0:	2102      	movs	r1, #2
   368c2:	4628      	mov	r0, r5
   368c4:	f018 ffb0 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   368c8:	233e      	movs	r3, #62	; 0x3e
   368ca:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   368cc:	2312      	movs	r3, #18
   368ce:	7043      	strb	r3, [r0, #1]
   368d0:	2101      	movs	r1, #1
   368d2:	4628      	mov	r0, r5
   368d4:	f018 ffa8 	bl	4f828 <net_buf_simple_add>
   368d8:	4603      	mov	r3, r0
	me->subevent = subevt;
   368da:	220b      	movs	r2, #11
   368dc:	701a      	strb	r2, [r3, #0]
   368de:	4628      	mov	r0, r5
   368e0:	2111      	movs	r1, #17
   368e2:	f018 ffa1 	bl	4f828 <net_buf_simple_add>
	drp->num_reports = 1U;
   368e6:	2301      	movs	r3, #1
   368e8:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   368ea:	7043      	strb	r3, [r0, #1]
   368ec:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   368ee:	f008 f94f 	bl	3eb90 <ll_rl_size_get>
   368f2:	4580      	cmp	r8, r0
   368f4:	d27c      	bcs.n	369f0 <hci_evt_encode+0x7c8>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   368f6:	1cea      	adds	r2, r5, #3
   368f8:	4640      	mov	r0, r8
   368fa:	1ca9      	adds	r1, r5, #2
   368fc:	f008 f902 	bl	3eb04 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   36900:	78ab      	ldrb	r3, [r5, #2]
   36902:	3302      	adds	r3, #2
   36904:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   36906:	7f23      	ldrb	r3, [r4, #28]
   36908:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	memcpy(&dir_info->dir_addr.a.val[0],
   3690c:	2206      	movs	r2, #6
	dir_info->dir_addr.type = adv->rx_addr;
   3690e:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   36910:	f104 0124 	add.w	r1, r4, #36	; 0x24
   36914:	f105 000a 	add.w	r0, r5, #10
   36918:	f014 ffb7 	bl	4b88a <memcpy>
	dir_info->rssi = rssi;
   3691c:	742f      	strb	r7, [r5, #16]
   3691e:	e4d7      	b.n	362d0 <hci_evt_encode+0xa8>
   36920:	3508      	adds	r5, #8
   36922:	2102      	movs	r1, #2
   36924:	4628      	mov	r0, r5
   36926:	f018 ff7f 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   3692a:	233e      	movs	r3, #62	; 0x3e
   3692c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   3692e:	2313      	movs	r3, #19
   36930:	7043      	strb	r3, [r0, #1]
   36932:	2101      	movs	r1, #1
   36934:	4628      	mov	r0, r5
   36936:	f018 ff77 	bl	4f828 <net_buf_simple_add>
   3693a:	4603      	mov	r3, r0
	me->subevent = subevt;
   3693c:	2201      	movs	r2, #1
   3693e:	701a      	strb	r2, [r3, #0]
   36940:	4628      	mov	r0, r5
   36942:	2112      	movs	r1, #18
   36944:	f018 ff70 	bl	4f828 <net_buf_simple_add>
	lecc->status = 0x00;
   36948:	7006      	strb	r6, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   3694a:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
   3694e:	7f63      	ldrb	r3, [r4, #29]
   36950:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   36952:	7fa3      	ldrb	r3, [r4, #30]
   36954:	f003 0301 	and.w	r3, r3, #1
   36958:	4605      	mov	r5, r0
   3695a:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   3695c:	2206      	movs	r2, #6
   3695e:	f104 011f 	add.w	r1, r4, #31
   36962:	3005      	adds	r0, #5
   36964:	f014 ff91 	bl	4b88a <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   36968:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   3696a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   3696c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   3696e:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   36972:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   36976:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   3697a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   3697e:	746b      	strb	r3, [r5, #17]
   36980:	e4a6      	b.n	362d0 <hci_evt_encode+0xa8>
		adv_info->addr.type = adv->tx_addr;
   36982:	7f23      	ldrb	r3, [r4, #28]
   36984:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   36988:	4651      	mov	r1, sl
		adv_info->addr.type = adv->tx_addr;
   3698a:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   3698c:	2206      	movs	r2, #6
   3698e:	1ce8      	adds	r0, r5, #3
   36990:	f014 ff7b 	bl	4b88a <memcpy>
   36994:	e50d      	b.n	363b2 <hci_evt_encode+0x18a>
   36996:	f018 ff47 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   3699a:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   3699c:	231f      	movs	r3, #31
	hdr->evt = evt;
   3699e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   369a0:	7043      	strb	r3, [r0, #1]
   369a2:	2101      	movs	r1, #1
   369a4:	4628      	mov	r0, r5
   369a6:	f018 ff3f 	bl	4f828 <net_buf_simple_add>
	me->subevent = subevt;
   369aa:	230a      	movs	r3, #10
   369ac:	7003      	strb	r3, [r0, #0]
   369ae:	211e      	movs	r1, #30
   369b0:	4628      	mov	r0, r5
   369b2:	f018 ff39 	bl	4f828 <net_buf_simple_add>
   369b6:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   369b8:	221e      	movs	r2, #30
   369ba:	2100      	movs	r1, #0
   369bc:	f014 ff70 	bl	4b8a0 <memset>
			leecc->status = status;
   369c0:	7026      	strb	r6, [r4, #0]
			return;
   369c2:	e485      	b.n	362d0 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   369c4:	4a10      	ldr	r2, [pc, #64]	; (36a08 <hci_evt_encode+0x7e0>)
   369c6:	4914      	ldr	r1, [pc, #80]	; (36a18 <hci_evt_encode+0x7f0>)
   369c8:	4811      	ldr	r0, [pc, #68]	; (36a10 <hci_evt_encode+0x7e8>)
   369ca:	f641 337a 	movw	r3, #7034	; 0x1b7a
   369ce:	f012 fe51 	bl	49674 <printk>
   369d2:	4040      	eors	r0, r0
   369d4:	f380 8811 	msr	BASEPRI, r0
   369d8:	f04f 0003 	mov.w	r0, #3
   369dc:	df02      	svc	2
   369de:	e57a      	b.n	364d6 <hci_evt_encode+0x2ae>
   369e0:	f04f 0900 	mov.w	r9, #0
   369e4:	230c      	movs	r3, #12
   369e6:	f04f 0b0b 	mov.w	fp, #11
   369ea:	9305      	str	r3, [sp, #20]
		data_len = 0U;
   369ec:	464e      	mov	r6, r9
   369ee:	e4b4      	b.n	3635a <hci_evt_encode+0x132>
		dir_info->addr.type = adv->tx_addr;
   369f0:	7f23      	ldrb	r3, [r4, #28]
   369f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   369f6:	4631      	mov	r1, r6
		dir_info->addr.type = adv->tx_addr;
   369f8:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   369fa:	2206      	movs	r2, #6
   369fc:	1ce8      	adds	r0, r5, #3
   369fe:	f014 ff44 	bl	4b88a <memcpy>
   36a02:	e780      	b.n	36906 <hci_evt_encode+0x6de>
   36a04:	20000160 	.word	0x20000160
   36a08:	0005250c 	.word	0x0005250c
   36a0c:	00052548 	.word	0x00052548
   36a10:	00052460 	.word	0x00052460
   36a14:	20004510 	.word	0x20004510
   36a18:	000525ac 	.word	0x000525ac

00036a1c <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   36a1c:	b570      	push	{r4, r5, r6, lr}
   36a1e:	f100 0408 	add.w	r4, r0, #8
   36a22:	460e      	mov	r6, r1
   36a24:	4620      	mov	r0, r4
   36a26:	2102      	movs	r1, #2
   36a28:	4615      	mov	r5, r2
   36a2a:	f018 fefd 	bl	4f828 <net_buf_simple_add>
	hdr->evt = evt;
   36a2e:	2313      	movs	r3, #19
	hdr->len = len;
   36a30:	2105      	movs	r1, #5
	hdr->evt = evt;
   36a32:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   36a34:	7041      	strb	r1, [r0, #1]
   36a36:	4620      	mov	r0, r4
   36a38:	f018 fef6 	bl	4f828 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   36a3c:	2301      	movs	r3, #1
   36a3e:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   36a40:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   36a44:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   36a48:	bd70      	pop	{r4, r5, r6, pc}
   36a4a:	bf00      	nop

00036a4c <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   36a4c:	7903      	ldrb	r3, [r0, #4]
   36a4e:	2b03      	cmp	r3, #3
   36a50:	d008      	beq.n	36a64 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   36a52:	3b05      	subs	r3, #5
   36a54:	b2db      	uxtb	r3, r3
   36a56:	2b17      	cmp	r3, #23
   36a58:	d901      	bls.n	36a5e <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   36a5a:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   36a5c:	4770      	bx	lr
   36a5e:	4a05      	ldr	r2, [pc, #20]	; (36a74 <hci_get_class+0x28>)
   36a60:	5cd0      	ldrb	r0, [r2, r3]
   36a62:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   36a64:	7f03      	ldrb	r3, [r0, #28]
   36a66:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   36a6a:	2b03      	cmp	r3, #3
   36a6c:	bf0c      	ite	eq
   36a6e:	2004      	moveq	r0, #4
   36a70:	2005      	movne	r0, #5
   36a72:	4770      	bx	lr
   36a74:	000525e8 	.word	0x000525e8

00036a78 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   36a78:	480d      	ldr	r0, [pc, #52]	; (36ab0 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   36a7a:	4a0e      	ldr	r2, [pc, #56]	; (36ab4 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   36a7c:	490e      	ldr	r1, [pc, #56]	; (36ab8 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
   36a7e:	4b0f      	ldr	r3, [pc, #60]	; (36abc <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   36a80:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   36a82:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   36a86:	f641 75ff 	movw	r5, #8191	; 0x1fff
   36a8a:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   36a8e:	2400      	movs	r4, #0
   36a90:	2500      	movs	r5, #0
   36a92:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
   36a96:	4a0a      	ldr	r2, [pc, #40]	; (36ac0 <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   36a98:	241f      	movs	r4, #31
   36a9a:	2500      	movs	r5, #0
   36a9c:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   36aa0:	2100      	movs	r1, #0
   36aa2:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
   36aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   36aa8:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
   36aaa:	601a      	str	r2, [r3, #0]
}
   36aac:	4770      	bx	lr
   36aae:	bf00      	nop
   36ab0:	20000158 	.word	0x20000158
   36ab4:	20002d50 	.word	0x20002d50
   36ab8:	20000160 	.word	0x20000160
   36abc:	20004510 	.word	0x20004510
   36ac0:	2000450c 	.word	0x2000450c

00036ac4 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   36ac4:	f009 ba10 	b.w	3fee8 <lll_csrand_get>

00036ac8 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   36ac8:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   36aca:	2300      	movs	r3, #0
   36acc:	f00b fd5e 	bl	4258c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   36ad0:	2000      	movs	r0, #0
   36ad2:	bd08      	pop	{r3, pc}

00036ad4 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   36ad4:	4801      	ldr	r0, [pc, #4]	; (36adc <ll_feat_get+0x8>)
   36ad6:	2100      	movs	r1, #0
   36ad8:	4770      	bx	lr
   36ada:	bf00      	nop
   36adc:	000141ff 	.word	0x000141ff

00036ae0 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   36ae0:	b510      	push	{r4, lr}
   36ae2:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   36ae4:	f009 fa36 	bl	3ff54 <lll_reset>
	LL_ASSERT(!err);
   36ae8:	b970      	cbnz	r0, 36b08 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   36aea:	f009 fe45 	bl	40778 <lll_adv_reset>
	LL_ASSERT(!err);
   36aee:	b9e0      	cbnz	r0, 36b2a <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   36af0:	f00a fdbc 	bl	4166c <lll_scan_reset>
	LL_ASSERT(!err);
   36af4:	bb50      	cbnz	r0, 36b4c <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   36af6:	f00a fef7 	bl	418e8 <lll_conn_reset>
	LL_ASSERT(!err);
   36afa:	2800      	cmp	r0, #0
   36afc:	d137      	bne.n	36b6e <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
   36afe:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   36b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   36b04:	f011 b87a 	b.w	47bfc <z_impl_k_sem_give>
	LL_ASSERT(!err);
   36b08:	4a22      	ldr	r2, [pc, #136]	; (36b94 <perform_lll_reset+0xb4>)
   36b0a:	4923      	ldr	r1, [pc, #140]	; (36b98 <perform_lll_reset+0xb8>)
   36b0c:	4823      	ldr	r0, [pc, #140]	; (36b9c <perform_lll_reset+0xbc>)
   36b0e:	f640 0324 	movw	r3, #2084	; 0x824
   36b12:	f012 fdaf 	bl	49674 <printk>
   36b16:	4040      	eors	r0, r0
   36b18:	f380 8811 	msr	BASEPRI, r0
   36b1c:	f04f 0003 	mov.w	r0, #3
   36b20:	df02      	svc	2
	err = lll_adv_reset();
   36b22:	f009 fe29 	bl	40778 <lll_adv_reset>
	LL_ASSERT(!err);
   36b26:	2800      	cmp	r0, #0
   36b28:	d0e2      	beq.n	36af0 <perform_lll_reset+0x10>
   36b2a:	4a1a      	ldr	r2, [pc, #104]	; (36b94 <perform_lll_reset+0xb4>)
   36b2c:	491a      	ldr	r1, [pc, #104]	; (36b98 <perform_lll_reset+0xb8>)
   36b2e:	481b      	ldr	r0, [pc, #108]	; (36b9c <perform_lll_reset+0xbc>)
   36b30:	f640 0329 	movw	r3, #2089	; 0x829
   36b34:	f012 fd9e 	bl	49674 <printk>
   36b38:	4040      	eors	r0, r0
   36b3a:	f380 8811 	msr	BASEPRI, r0
   36b3e:	f04f 0003 	mov.w	r0, #3
   36b42:	df02      	svc	2
	err = lll_scan_reset();
   36b44:	f00a fd92 	bl	4166c <lll_scan_reset>
	LL_ASSERT(!err);
   36b48:	2800      	cmp	r0, #0
   36b4a:	d0d4      	beq.n	36af6 <perform_lll_reset+0x16>
   36b4c:	4a11      	ldr	r2, [pc, #68]	; (36b94 <perform_lll_reset+0xb4>)
   36b4e:	4912      	ldr	r1, [pc, #72]	; (36b98 <perform_lll_reset+0xb8>)
   36b50:	4812      	ldr	r0, [pc, #72]	; (36b9c <perform_lll_reset+0xbc>)
   36b52:	f640 032f 	movw	r3, #2095	; 0x82f
   36b56:	f012 fd8d 	bl	49674 <printk>
   36b5a:	4040      	eors	r0, r0
   36b5c:	f380 8811 	msr	BASEPRI, r0
   36b60:	f04f 0003 	mov.w	r0, #3
   36b64:	df02      	svc	2
	err = lll_conn_reset();
   36b66:	f00a febf 	bl	418e8 <lll_conn_reset>
	LL_ASSERT(!err);
   36b6a:	2800      	cmp	r0, #0
   36b6c:	d0c7      	beq.n	36afe <perform_lll_reset+0x1e>
   36b6e:	4a09      	ldr	r2, [pc, #36]	; (36b94 <perform_lll_reset+0xb4>)
   36b70:	4909      	ldr	r1, [pc, #36]	; (36b98 <perform_lll_reset+0xb8>)
   36b72:	480a      	ldr	r0, [pc, #40]	; (36b9c <perform_lll_reset+0xbc>)
   36b74:	f640 0335 	movw	r3, #2101	; 0x835
   36b78:	f012 fd7c 	bl	49674 <printk>
   36b7c:	4040      	eors	r0, r0
   36b7e:	f380 8811 	msr	BASEPRI, r0
   36b82:	f04f 0003 	mov.w	r0, #3
   36b86:	df02      	svc	2
   36b88:	4620      	mov	r0, r4
}
   36b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   36b8e:	f011 b835 	b.w	47bfc <z_impl_k_sem_give>
   36b92:	bf00      	nop
   36b94:	00052600 	.word	0x00052600
   36b98:	0005263c 	.word	0x0005263c
   36b9c:	00052460 	.word	0x00052460

00036ba0 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   36ba0:	6008      	str	r0, [r1, #0]
   36ba2:	4801      	ldr	r0, [pc, #4]	; (36ba8 <ull_ticker_status_give+0x8>)
   36ba4:	f011 b82a 	b.w	47bfc <z_impl_k_sem_give>
   36ba8:	20004bf8 	.word	0x20004bf8

00036bac <disabled_cb>:
   36bac:	f011 b826 	b.w	47bfc <z_impl_k_sem_give>

00036bb0 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   36bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   36bb4:	4d2c      	ldr	r5, [pc, #176]	; (36c68 <tx_cmplt_get+0xb8>)
{
   36bb6:	460c      	mov	r4, r1
   36bb8:	4691      	mov	r9, r2
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
   36bba:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   36bbc:	7822      	ldrb	r2, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   36bbe:	782b      	ldrb	r3, [r5, #0]
   36bc0:	4291      	cmp	r1, r2
   36bc2:	bf9c      	itt	ls
   36bc4:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
   36bc6:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   36bc8:	4591      	cmp	r9, r2
{
   36bca:	4682      	mov	sl, r0
   36bcc:	d043      	beq.n	36c56 <tx_cmplt_get+0xa6>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   36bce:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   36bd2:	3201      	adds	r2, #1
   36bd4:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   36bd6:	4f25      	ldr	r7, [pc, #148]	; (36c6c <tx_cmplt_get+0xbc>)
		i = 0U;
   36bd8:	4291      	cmp	r1, r2
   36bda:	bf08      	it	eq
   36bdc:	2200      	moveq	r2, #0

	*idx = i;
   36bde:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   36be0:	5afa      	ldrh	r2, [r7, r3]
   36be2:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   36be4:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   36be6:	443b      	add	r3, r7
   36be8:	f04f 0802 	mov.w	r8, #2
   36bec:	f04f 0b01 	mov.w	fp, #1
   36bf0:	e01d      	b.n	36c2e <tx_cmplt_get+0x7e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
   36bf2:	3601      	adds	r6, #1
   36bf4:	f8c3 b004 	str.w	fp, [r3, #4]
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
   36bf8:	f030 0303 	bics.w	r3, r0, #3
			cmplt++;
   36bfc:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   36bfe:	d124      	bne.n	36c4a <tx_cmplt_get+0x9a>
	if (*idx >= count) {
   36c00:	7823      	ldrb	r3, [r4, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
   36c02:	7869      	ldrb	r1, [r5, #1]
		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   36c04:	7828      	ldrb	r0, [r5, #0]
   36c06:	4299      	cmp	r1, r3
   36c08:	bf9c      	itt	ls
   36c0a:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
   36c0c:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   36c0e:	454b      	cmp	r3, r9
   36c10:	d022      	beq.n	36c58 <tx_cmplt_get+0xa8>
	i = *idx + 1;
   36c12:	1c5a      	adds	r2, r3, #1
   36c14:	b2d2      	uxtb	r2, r2
		i = 0U;
   36c16:	4291      	cmp	r1, r2
   36c18:	bf08      	it	eq
   36c1a:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   36c1c:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   36c20:	7022      	strb	r2, [r4, #0]
					    last, first);
	} while (tx && tx->handle == *handle);
   36c22:	5af9      	ldrh	r1, [r7, r3]
   36c24:	f8ba 2000 	ldrh.w	r2, [sl]
   36c28:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   36c2a:	443b      	add	r3, r7
   36c2c:	d114      	bne.n	36c58 <tx_cmplt_get+0xa8>
		node_tx = tx->node;
   36c2e:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   36c30:	2801      	cmp	r0, #1
   36c32:	d9de      	bls.n	36bf2 <tx_cmplt_get+0x42>
   36c34:	f030 0203 	bics.w	r2, r0, #3
   36c38:	d00a      	beq.n	36c50 <tx_cmplt_get+0xa0>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   36c3a:	7902      	ldrb	r2, [r0, #4]
   36c3c:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   36c40:	3a01      	subs	r2, #1
   36c42:	2a01      	cmp	r2, #1
   36c44:	d90b      	bls.n	36c5e <tx_cmplt_get+0xae>
   36c46:	f8c3 8004 	str.w	r8, [r3, #4]
			ll_tx_mem_release(node_tx);
   36c4a:	f002 fee9 	bl	39a20 <ll_tx_mem_release>
   36c4e:	e7d7      	b.n	36c00 <tx_cmplt_get+0x50>
   36c50:	f8c3 8004 	str.w	r8, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   36c54:	e7d4      	b.n	36c00 <tx_cmplt_get+0x50>
		return 0;
   36c56:	2600      	movs	r6, #0

	return cmplt;
}
   36c58:	4630      	mov	r0, r6
   36c5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   36c5e:	3601      	adds	r6, #1
   36c60:	f8c3 b004 	str.w	fp, [r3, #4]
   36c64:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   36c66:	e7f0      	b.n	36c4a <tx_cmplt_get+0x9a>
   36c68:	200008b4 	.word	0x200008b4
   36c6c:	200008b8 	.word	0x200008b8

00036c70 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   36c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36c74:	4e3c      	ldr	r6, [pc, #240]	; (36d68 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   36c76:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 36d6c <ull_done+0xfc>
   36c7a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 36d70 <ull_done+0x100>
{
   36c7e:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   36c80:	e9d6 0100 	ldrd	r0, r1, [r6]
   36c84:	aa01      	add	r2, sp, #4
   36c86:	f7fc fe97 	bl	339b8 <memq_peek>
		if (link) {
   36c8a:	4604      	mov	r4, r0
   36c8c:	2800      	cmp	r0, #0
   36c8e:	d03e      	beq.n	36d0e <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   36c90:	6870      	ldr	r0, [r6, #4]
   36c92:	2200      	movs	r2, #0
   36c94:	4631      	mov	r1, r6
   36c96:	f7fc fe97 	bl	339c8 <memq_dequeue>
			rx_demux_event_done(link, done);
   36c9a:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   36c9c:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   36c9e:	b135      	cbz	r5, 36cae <ull_done+0x3e>
	return hdr->ref;
   36ca0:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   36ca2:	2b00      	cmp	r3, #0
   36ca4:	d052      	beq.n	36d4c <ull_done+0xdc>
	return hdr->ref--;
   36ca6:	782b      	ldrb	r3, [r5, #0]
   36ca8:	3b01      	subs	r3, #1
   36caa:	b2db      	uxtb	r3, r3
   36cac:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   36cae:	f897 3020 	ldrb.w	r3, [r7, #32]
   36cb2:	b123      	cbz	r3, 36cbe <ull_done+0x4e>
   36cb4:	2b01      	cmp	r3, #1
   36cb6:	d13b      	bne.n	36d30 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   36cb8:	4638      	mov	r0, r7
   36cba:	f006 faa1 	bl	3d200 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   36cbe:	4a2d      	ldr	r2, [pc, #180]	; (36d74 <ull_done+0x104>)
	last = last + 1;
   36cc0:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   36cc2:	f892 c001 	ldrb.w	ip, [r2, #1]
   36cc6:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   36cc8:	3301      	adds	r3, #1
	done->extra.type = 0U;
   36cca:	2100      	movs	r1, #0
   36ccc:	b2db      	uxtb	r3, r3
		last = 0U;
   36cce:	459c      	cmp	ip, r3
   36cd0:	bf08      	it	eq
   36cd2:	460b      	moveq	r3, r1
	if (last == first) {
   36cd4:	4298      	cmp	r0, r3
   36cd6:	f887 1020 	strb.w	r1, [r7, #32]
	release = RXFIFO_RELEASE(done, link, done);
   36cda:	7811      	ldrb	r1, [r2, #0]
   36cdc:	d01a      	beq.n	36d14 <ull_done+0xa4>

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   36cde:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   36ce0:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   36ce2:	fb00 2101 	mla	r1, r0, r1, r2
   36ce6:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   36ce8:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   36cea:	2d00      	cmp	r5, #0
   36cec:	d0c8      	beq.n	36c80 <ull_done+0x10>
	return hdr->ref;
   36cee:	782b      	ldrb	r3, [r5, #0]
   36cf0:	2b00      	cmp	r3, #0
   36cf2:	d1c5      	bne.n	36c80 <ull_done+0x10>
   36cf4:	696b      	ldr	r3, [r5, #20]
   36cf6:	2b00      	cmp	r3, #0
   36cf8:	d0c2      	beq.n	36c80 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   36cfa:	69a8      	ldr	r0, [r5, #24]
   36cfc:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   36cfe:	e9d6 0100 	ldrd	r0, r1, [r6]
   36d02:	aa01      	add	r2, sp, #4
   36d04:	f7fc fe58 	bl	339b8 <memq_peek>
		if (link) {
   36d08:	4604      	mov	r4, r0
   36d0a:	2800      	cmp	r0, #0
   36d0c:	d1c0      	bne.n	36c90 <ull_done+0x20>
}
   36d0e:	b003      	add	sp, #12
   36d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   36d14:	4918      	ldr	r1, [pc, #96]	; (36d78 <ull_done+0x108>)
   36d16:	4819      	ldr	r0, [pc, #100]	; (36d7c <ull_done+0x10c>)
   36d18:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   36d1c:	4642      	mov	r2, r8
   36d1e:	f012 fca9 	bl	49674 <printk>
   36d22:	4040      	eors	r0, r0
   36d24:	f380 8811 	msr	BASEPRI, r0
   36d28:	f04f 0003 	mov.w	r0, #3
   36d2c:	df02      	svc	2
   36d2e:	e7dc      	b.n	36cea <ull_done+0x7a>
		LL_ASSERT(0);
   36d30:	4913      	ldr	r1, [pc, #76]	; (36d80 <ull_done+0x110>)
   36d32:	4812      	ldr	r0, [pc, #72]	; (36d7c <ull_done+0x10c>)
   36d34:	f640 2369 	movw	r3, #2665	; 0xa69
   36d38:	4642      	mov	r2, r8
   36d3a:	f012 fc9b 	bl	49674 <printk>
   36d3e:	4040      	eors	r0, r0
   36d40:	f380 8811 	msr	BASEPRI, r0
   36d44:	f04f 0003 	mov.w	r0, #3
   36d48:	df02      	svc	2
		break;
   36d4a:	e7b8      	b.n	36cbe <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   36d4c:	480b      	ldr	r0, [pc, #44]	; (36d7c <ull_done+0x10c>)
   36d4e:	f640 2312 	movw	r3, #2578	; 0xa12
   36d52:	4642      	mov	r2, r8
   36d54:	4649      	mov	r1, r9
   36d56:	f012 fc8d 	bl	49674 <printk>
   36d5a:	4040      	eors	r0, r0
   36d5c:	f380 8811 	msr	BASEPRI, r0
   36d60:	f04f 0003 	mov.w	r0, #3
   36d64:	df02      	svc	2
   36d66:	e79e      	b.n	36ca6 <ull_done+0x36>
   36d68:	20004be4 	.word	0x20004be4
   36d6c:	00052600 	.word	0x00052600
   36d70:	00052644 	.word	0x00052644
   36d74:	20000748 	.word	0x20000748
   36d78:	0005265c 	.word	0x0005265c
   36d7c:	00052460 	.word	0x00052460
   36d80:	000524c0 	.word	0x000524c0

00036d84 <rx_alloc>:
{
   36d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   36d88:	4f33      	ldr	r7, [pc, #204]	; (36e58 <rx_alloc+0xd4>)
   36d8a:	783e      	ldrb	r6, [r7, #0]
   36d8c:	4286      	cmp	r6, r0
   36d8e:	bf28      	it	cs
   36d90:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   36d92:	b34e      	cbz	r6, 36de8 <rx_alloc+0x64>
   36d94:	4d31      	ldr	r5, [pc, #196]	; (36e5c <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   36d96:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 36e60 <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   36d9a:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
   36d9c:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
   36da0:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   36da2:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   36da4:	3401      	adds	r4, #1
   36da6:	b2e4      	uxtb	r4, r4
		last = 0U;
   36da8:	42a2      	cmp	r2, r4
   36daa:	bf08      	it	eq
   36dac:	2400      	moveq	r4, #0
	if (last == first) {
   36dae:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   36db0:	4640      	mov	r0, r8
   36db2:	d01b      	beq.n	36dec <rx_alloc+0x68>
   36db4:	f7fc fd92 	bl	338dc <mem_acquire>
   36db8:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   36dba:	4648      	mov	r0, r9
		if (!link) {
   36dbc:	f1ba 0f00 	cmp.w	sl, #0
   36dc0:	d012      	beq.n	36de8 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   36dc2:	f7fc fd8b 	bl	338dc <mem_acquire>
		if (!rx) {
   36dc6:	2800      	cmp	r0, #0
   36dc8:	d03f      	beq.n	36e4a <rx_alloc+0xc6>
		rx->link = link;
   36dca:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   36dce:	78ea      	ldrb	r2, [r5, #3]
   36dd0:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   36dd2:	fb02 5303 	mla	r3, r2, r3, r5
   36dd6:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   36dd8:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   36dda:	70ec      	strb	r4, [r5, #3]
		max--;
   36ddc:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   36dde:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   36de0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   36de4:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   36de6:	d1db      	bne.n	36da0 <rx_alloc+0x1c>
}
   36de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
   36dec:	783b      	ldrb	r3, [r7, #0]
   36dee:	2b00      	cmp	r3, #0
   36df0:	d0fa      	beq.n	36de8 <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   36df2:	4d1c      	ldr	r5, [pc, #112]	; (36e64 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
   36df4:	4e1c      	ldr	r6, [pc, #112]	; (36e68 <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   36df6:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   36df8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 36e60 <rx_alloc+0xdc>
		link->mem = NULL;
   36dfc:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   36e00:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   36e02:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   36e04:	3401      	adds	r4, #1
   36e06:	b2e4      	uxtb	r4, r4
		last = 0U;
   36e08:	42a2      	cmp	r2, r4
   36e0a:	bf08      	it	eq
   36e0c:	2400      	moveq	r4, #0
	if (last == first) {
   36e0e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   36e10:	4630      	mov	r0, r6
   36e12:	d0e9      	beq.n	36de8 <rx_alloc+0x64>
   36e14:	f7fc fd62 	bl	338dc <mem_acquire>
   36e18:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   36e1a:	4640      	mov	r0, r8
		if (!link) {
   36e1c:	f1ba 0f00 	cmp.w	sl, #0
   36e20:	d0e2      	beq.n	36de8 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   36e22:	f7fc fd5b 	bl	338dc <mem_acquire>
		if (!rx) {
   36e26:	b180      	cbz	r0, 36e4a <rx_alloc+0xc6>
		link->mem = NULL;
   36e28:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   36e2c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   36e30:	78ea      	ldrb	r2, [r5, #3]
   36e32:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   36e34:	fb02 5303 	mla	r3, r2, r3, r5
   36e38:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   36e3a:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   36e3c:	70ec      	strb	r4, [r5, #3]
   36e3e:	3b01      	subs	r3, #1
   36e40:	b2db      	uxtb	r3, r3
   36e42:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   36e44:	2b00      	cmp	r3, #0
   36e46:	d1db      	bne.n	36e00 <rx_alloc+0x7c>
   36e48:	e7ce      	b.n	36de8 <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
   36e4a:	4650      	mov	r0, sl
   36e4c:	4906      	ldr	r1, [pc, #24]	; (36e68 <rx_alloc+0xe4>)
}
   36e4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   36e52:	f7fc bd5d 	b.w	33910 <mem_release>
   36e56:	bf00      	nop
   36e58:	200045fc 	.word	0x200045fc
   36e5c:	20000798 	.word	0x20000798
   36e60:	200046cc 	.word	0x200046cc
   36e64:	20000760 	.word	0x20000760
   36e68:	20004600 	.word	0x20004600

00036e6c <rx_demux>:
{
   36e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36e70:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 37020 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   36e74:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 37024 <rx_demux+0x1b8>
		LL_ASSERT(0);
   36e78:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 37028 <rx_demux+0x1bc>
   36e7c:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 3702c <rx_demux+0x1c0>
{
   36e80:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   36e82:	e9d8 0100 	ldrd	r0, r1, [r8]
   36e86:	aa03      	add	r2, sp, #12
   36e88:	f7fc fd96 	bl	339b8 <memq_peek>
		if (link) {
   36e8c:	4605      	mov	r5, r0
   36e8e:	2800      	cmp	r0, #0
   36e90:	d035      	beq.n	36efe <rx_demux+0x92>
			LL_ASSERT(rx);
   36e92:	9b03      	ldr	r3, [sp, #12]
   36e94:	2b00      	cmp	r3, #0
   36e96:	f000 80a6 	beq.w	36fe6 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   36e9a:	7818      	ldrb	r0, [r3, #0]
   36e9c:	aa04      	add	r2, sp, #16
   36e9e:	a902      	add	r1, sp, #8
   36ea0:	f006 fc78 	bl	3d794 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   36ea4:	4604      	mov	r4, r0
   36ea6:	2800      	cmp	r0, #0
   36ea8:	d055      	beq.n	36f56 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   36eaa:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   36eae:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   36eb2:	780f      	ldrb	r7, [r1, #0]
   36eb4:	f8ad 200a 	strh.w	r2, [sp, #10]
   36eb8:	ae05      	add	r6, sp, #20
   36eba:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   36ebc:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   36ec0:	f006 fc82 	bl	3d7c8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   36ec4:	4621      	mov	r1, r4
   36ec6:	9a05      	ldr	r2, [sp, #20]
   36ec8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   36ecc:	f006 fcc6 	bl	3d85c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   36ed0:	4620      	mov	r0, r4
   36ed2:	f006 fc37 	bl	3d744 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   36ed6:	4632      	mov	r2, r6
   36ed8:	4629      	mov	r1, r5
   36eda:	4638      	mov	r0, r7
   36edc:	f006 fc5a 	bl	3d794 <ull_conn_ack_by_last_peek>
	} while (link);
   36ee0:	4604      	mov	r4, r0
   36ee2:	2800      	cmp	r0, #0
   36ee4:	d1ec      	bne.n	36ec0 <rx_demux+0x54>
	k_sem_give(sem_recv);
   36ee6:	f8d9 0000 	ldr.w	r0, [r9]
   36eea:	f010 fe87 	bl	47bfc <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   36eee:	e9d8 0100 	ldrd	r0, r1, [r8]
   36ef2:	aa03      	add	r2, sp, #12
   36ef4:	f7fc fd60 	bl	339b8 <memq_peek>
		if (link) {
   36ef8:	4605      	mov	r5, r0
   36efa:	2800      	cmp	r0, #0
   36efc:	d1c9      	bne.n	36e92 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   36efe:	aa04      	add	r2, sp, #16
   36f00:	a902      	add	r1, sp, #8
   36f02:	f10d 0007 	add.w	r0, sp, #7
   36f06:	f006 fc29 	bl	3d75c <ull_conn_ack_peek>
			if (link) {
   36f0a:	4604      	mov	r4, r0
   36f0c:	2800      	cmp	r0, #0
   36f0e:	d067      	beq.n	36fe0 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   36f10:	9b04      	ldr	r3, [sp, #16]
   36f12:	9305      	str	r3, [sp, #20]
   36f14:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   36f18:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   36f1c:	f8ad 300a 	strh.w	r3, [sp, #10]
   36f20:	ae05      	add	r6, sp, #20
   36f22:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   36f26:	f006 fc4f 	bl	3d7c8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   36f2a:	4621      	mov	r1, r4
   36f2c:	9a05      	ldr	r2, [sp, #20]
   36f2e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   36f32:	f006 fc93 	bl	3d85c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   36f36:	4620      	mov	r0, r4
   36f38:	f006 fc04 	bl	3d744 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   36f3c:	4632      	mov	r2, r6
   36f3e:	4629      	mov	r1, r5
   36f40:	4638      	mov	r0, r7
   36f42:	f006 fc27 	bl	3d794 <ull_conn_ack_by_last_peek>
	} while (link);
   36f46:	4604      	mov	r4, r0
   36f48:	2800      	cmp	r0, #0
   36f4a:	d1ec      	bne.n	36f26 <rx_demux+0xba>
	k_sem_give(sem_recv);
   36f4c:	f8d9 0000 	ldr.w	r0, [r9]
   36f50:	f010 fe54 	bl	47bfc <z_impl_k_sem_give>
			if (nack) {
   36f54:	e7cb      	b.n	36eee <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   36f56:	9b03      	ldr	r3, [sp, #12]
   36f58:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   36f5a:	791b      	ldrb	r3, [r3, #4]
   36f5c:	3b01      	subs	r3, #1
   36f5e:	2b16      	cmp	r3, #22
   36f60:	d80d      	bhi.n	36f7e <rx_demux+0x112>
   36f62:	e8df f003 	tbb	[pc, r3]
   36f66:	0c1a      	.short	0x0c1a
   36f68:	0c1a0c38 	.word	0x0c1a0c38
   36f6c:	0c0c0c0c 	.word	0x0c0c0c0c
   36f70:	0c0c0c0c 	.word	0x0c0c0c0c
   36f74:	0c0c0c0c 	.word	0x0c0c0c0c
   36f78:	2d0c0c0c 	.word	0x2d0c0c0c
   36f7c:	1a          	.byte	0x1a
   36f7d:	00          	.byte	0x00
		LL_ASSERT(0);
   36f7e:	482c      	ldr	r0, [pc, #176]	; (37030 <rx_demux+0x1c4>)
   36f80:	f640 13ff 	movw	r3, #2559	; 0x9ff
   36f84:	4652      	mov	r2, sl
   36f86:	4659      	mov	r1, fp
   36f88:	f012 fb74 	bl	49674 <printk>
   36f8c:	4040      	eors	r0, r0
   36f8e:	f380 8811 	msr	BASEPRI, r0
   36f92:	f04f 0003 	mov.w	r0, #3
   36f96:	df02      	svc	2
			if (nack) {
   36f98:	e773      	b.n	36e82 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   36f9a:	4921      	ldr	r1, [pc, #132]	; (37020 <rx_demux+0x1b4>)
   36f9c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   36fa0:	2200      	movs	r2, #0
   36fa2:	f7fc fd11 	bl	339c8 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   36fa6:	4b23      	ldr	r3, [pc, #140]	; (37034 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
   36fa8:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   36faa:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   36fac:	4628      	mov	r0, r5
   36fae:	4a22      	ldr	r2, [pc, #136]	; (37038 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   36fb0:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   36fb2:	f7fc fcf7 	bl	339a4 <memq_enqueue>
	k_sem_give(sem_recv);
   36fb6:	f8d9 0000 	ldr.w	r0, [r9]
   36fba:	f010 fe1f 	bl	47bfc <z_impl_k_sem_give>
			if (nack) {
   36fbe:	e796      	b.n	36eee <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   36fc0:	4917      	ldr	r1, [pc, #92]	; (37020 <rx_demux+0x1b4>)
   36fc2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   36fc6:	2200      	movs	r2, #0
   36fc8:	f7fc fcfe 	bl	339c8 <memq_dequeue>
		ull_conn_setup(link, rx);
   36fcc:	9905      	ldr	r1, [sp, #20]
   36fce:	4628      	mov	r0, r5
   36fd0:	f003 f8a6 	bl	3a120 <ull_conn_setup>
			if (nack) {
   36fd4:	e755      	b.n	36e82 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   36fd6:	a905      	add	r1, sp, #20
   36fd8:	4628      	mov	r0, r5
   36fda:	f003 f8c9 	bl	3a170 <ull_conn_rx>
		if (nack) {
   36fde:	b188      	cbz	r0, 37004 <rx_demux+0x198>
}
   36fe0:	b007      	add	sp, #28
   36fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   36fe6:	4915      	ldr	r1, [pc, #84]	; (3703c <rx_demux+0x1d0>)
   36fe8:	4811      	ldr	r0, [pc, #68]	; (37030 <rx_demux+0x1c4>)
   36fea:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   36fee:	4652      	mov	r2, sl
   36ff0:	f012 fb40 	bl	49674 <printk>
   36ff4:	4040      	eors	r0, r0
   36ff6:	f380 8811 	msr	BASEPRI, r0
   36ffa:	f04f 0003 	mov.w	r0, #3
   36ffe:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   37000:	9b03      	ldr	r3, [sp, #12]
   37002:	e74a      	b.n	36e9a <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   37004:	4906      	ldr	r1, [pc, #24]	; (37020 <rx_demux+0x1b4>)
   37006:	4602      	mov	r2, r0
   37008:	f8d8 0004 	ldr.w	r0, [r8, #4]
   3700c:	f7fc fcdc 	bl	339c8 <memq_dequeue>
		if (rx) {
   37010:	9905      	ldr	r1, [sp, #20]
   37012:	2900      	cmp	r1, #0
   37014:	f43f af35 	beq.w	36e82 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37018:	4b06      	ldr	r3, [pc, #24]	; (37034 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   3701a:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   3701c:	78db      	ldrb	r3, [r3, #3]
   3701e:	e7c6      	b.n	36fae <rx_demux+0x142>
   37020:	20004bec 	.word	0x20004bec
   37024:	20004bf4 	.word	0x20004bf4
   37028:	00052600 	.word	0x00052600
   3702c:	000524c0 	.word	0x000524c0
   37030:	00052460 	.word	0x00052460
   37034:	200008b4 	.word	0x200008b4
   37038:	20004be0 	.word	0x20004be0
   3703c:	0005266c 	.word	0x0005266c

00037040 <ll_rx_get>:
{
   37040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37044:	b085      	sub	sp, #20
   37046:	e9cd 0100 	strd	r0, r1, [sp]
   3704a:	4c63      	ldr	r4, [pc, #396]	; (371d8 <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
   3704c:	4d63      	ldr	r5, [pc, #396]	; (371dc <ll_rx_get+0x19c>)
   3704e:	4e64      	ldr	r6, [pc, #400]	; (371e0 <ll_rx_get+0x1a0>)
	*node_rx = NULL;
   37050:	9a00      	ldr	r2, [sp, #0]
   37052:	2300      	movs	r3, #0
   37054:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   37056:	e9d6 0100 	ldrd	r0, r1, [r6]
   3705a:	aa03      	add	r2, sp, #12
   3705c:	f7fc fcac 	bl	339b8 <memq_peek>
	if (link) {
   37060:	4680      	mov	r8, r0
   37062:	2800      	cmp	r0, #0
   37064:	f000 809f 	beq.w	371a6 <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   37068:	9b03      	ldr	r3, [sp, #12]
   3706a:	495e      	ldr	r1, [pc, #376]	; (371e4 <ll_rx_get+0x1a4>)
   3706c:	781a      	ldrb	r2, [r3, #0]
   3706e:	9801      	ldr	r0, [sp, #4]
   37070:	f7ff fd9e 	bl	36bb0 <tx_cmplt_get>
		if (!cmplt) {
   37074:	2800      	cmp	r0, #0
   37076:	f040 809b 	bne.w	371b0 <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
   3707a:	78a3      	ldrb	r3, [r4, #2]
   3707c:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   37080:	78e2      	ldrb	r2, [r4, #3]
   37082:	4607      	mov	r7, r0
   37084:	f10d 0109 	add.w	r1, sp, #9
   37088:	f10d 000a 	add.w	r0, sp, #10
   3708c:	f7ff fd90 	bl	36bb0 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   37090:	ea47 0200 	orr.w	r2, r7, r0
   37094:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   37098:	d1f2      	bne.n	37080 <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   3709a:	9b03      	ldr	r3, [sp, #12]
   3709c:	7919      	ldrb	r1, [r3, #4]
   3709e:	2901      	cmp	r1, #1
   370a0:	f040 8093 	bne.w	371ca <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
   370a4:	494e      	ldr	r1, [pc, #312]	; (371e0 <ll_rx_get+0x1a0>)
   370a6:	6870      	ldr	r0, [r6, #4]
   370a8:	f7fc fc8e 	bl	339c8 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   370ac:	494e      	ldr	r1, [pc, #312]	; (371e8 <ll_rx_get+0x1a8>)
   370ae:	4640      	mov	r0, r8
   370b0:	f7fc fc2e 	bl	33910 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   370b4:	782b      	ldrb	r3, [r5, #0]
   370b6:	2b0f      	cmp	r3, #15
   370b8:	d866      	bhi.n	37188 <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
   370ba:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   370bc:	494b      	ldr	r1, [pc, #300]	; (371ec <ll_rx_get+0x1ac>)
   370be:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   370c0:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   370c2:	f7fc fc25 	bl	33910 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   370c6:	782b      	ldrb	r3, [r5, #0]
   370c8:	2b00      	cmp	r3, #0
   370ca:	d0c1      	beq.n	37050 <ll_rx_get+0x10>
   370cc:	f8df 8120 	ldr.w	r8, [pc, #288]	; 371f0 <ll_rx_get+0x1b0>
	last = last + 1;
   370d0:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   370d4:	f898 2001 	ldrb.w	r2, [r8, #1]
   370d8:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   370dc:	3701      	adds	r7, #1
   370de:	b2ff      	uxtb	r7, r7
		last = 0U;
   370e0:	42ba      	cmp	r2, r7
   370e2:	bf08      	it	eq
   370e4:	2700      	moveq	r7, #0
	if (last == first) {
   370e6:	429f      	cmp	r7, r3
   370e8:	d019      	beq.n	3711e <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
   370ea:	483f      	ldr	r0, [pc, #252]	; (371e8 <ll_rx_get+0x1a8>)
   370ec:	f7fc fbf6 	bl	338dc <mem_acquire>
		if (!link) {
   370f0:	4681      	mov	r9, r0
   370f2:	2800      	cmp	r0, #0
   370f4:	d0ac      	beq.n	37050 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   370f6:	483d      	ldr	r0, [pc, #244]	; (371ec <ll_rx_get+0x1ac>)
   370f8:	f7fc fbf0 	bl	338dc <mem_acquire>
		if (!rx) {
   370fc:	2800      	cmp	r0, #0
   370fe:	d05a      	beq.n	371b6 <ll_rx_get+0x176>
		rx->link = link;
   37100:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37104:	f898 2003 	ldrb.w	r2, [r8, #3]
   37108:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   3710c:	fb02 8303 	mla	r3, r2, r3, r8
   37110:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   37112:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   37114:	f888 7003 	strb.w	r7, [r8, #3]
   37118:	3b01      	subs	r3, #1
   3711a:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   3711c:	e798      	b.n	37050 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   3711e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 371f4 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
   37122:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 371e8 <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37126:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   3712a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 371ec <ll_rx_get+0x1ac>
	if (last == count) {
   3712e:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37132:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   37136:	3701      	adds	r7, #1
   37138:	b2ff      	uxtb	r7, r7
		last = 0U;
   3713a:	42ba      	cmp	r2, r7
   3713c:	bf08      	it	eq
   3713e:	2700      	moveq	r7, #0
	if (last == first) {
   37140:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   37142:	4648      	mov	r0, r9
   37144:	d084      	beq.n	37050 <ll_rx_get+0x10>
   37146:	f7fc fbc9 	bl	338dc <mem_acquire>
   3714a:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   3714c:	4650      	mov	r0, sl
		if (!link) {
   3714e:	f1bb 0f00 	cmp.w	fp, #0
   37152:	f43f af7d 	beq.w	37050 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   37156:	f7fc fbc1 	bl	338dc <mem_acquire>
		if (!rx) {
   3715a:	2800      	cmp	r0, #0
   3715c:	d030      	beq.n	371c0 <ll_rx_get+0x180>
		link->mem = NULL;
   3715e:	2300      	movs	r3, #0
   37160:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   37164:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37168:	f898 2003 	ldrb.w	r2, [r8, #3]
   3716c:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37170:	fb02 8303 	mla	r3, r2, r3, r8
   37174:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   37176:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   37178:	f888 7003 	strb.w	r7, [r8, #3]
   3717c:	3b01      	subs	r3, #1
   3717e:	b2db      	uxtb	r3, r3
   37180:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   37182:	2b00      	cmp	r3, #0
   37184:	d1d3      	bne.n	3712e <ll_rx_get+0xee>
   37186:	e763      	b.n	37050 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   37188:	4a1b      	ldr	r2, [pc, #108]	; (371f8 <ll_rx_get+0x1b8>)
   3718a:	491c      	ldr	r1, [pc, #112]	; (371fc <ll_rx_get+0x1bc>)
   3718c:	481c      	ldr	r0, [pc, #112]	; (37200 <ll_rx_get+0x1c0>)
   3718e:	f240 6306 	movw	r3, #1542	; 0x606
   37192:	f012 fa6f 	bl	49674 <printk>
   37196:	4040      	eors	r0, r0
   37198:	f380 8811 	msr	BASEPRI, r0
   3719c:	f04f 0003 	mov.w	r0, #3
   371a0:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   371a2:	782b      	ldrb	r3, [r5, #0]
   371a4:	e789      	b.n	370ba <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   371a6:	78e2      	ldrb	r2, [r4, #3]
   371a8:	490e      	ldr	r1, [pc, #56]	; (371e4 <ll_rx_get+0x1a4>)
   371aa:	9801      	ldr	r0, [sp, #4]
   371ac:	f7ff fd00 	bl	36bb0 <tx_cmplt_get>
}
   371b0:	b005      	add	sp, #20
   371b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   371b6:	490c      	ldr	r1, [pc, #48]	; (371e8 <ll_rx_get+0x1a8>)
   371b8:	4648      	mov	r0, r9
   371ba:	f7fc fba9 	bl	33910 <mem_release>
			return;
   371be:	e747      	b.n	37050 <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
   371c0:	4909      	ldr	r1, [pc, #36]	; (371e8 <ll_rx_get+0x1a8>)
   371c2:	4658      	mov	r0, fp
   371c4:	f7fc fba4 	bl	33910 <mem_release>
			return;
   371c8:	e742      	b.n	37050 <ll_rx_get+0x10>
			*node_rx = rx;
   371ca:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   371cc:	4610      	mov	r0, r2
			*node_rx = rx;
   371ce:	600b      	str	r3, [r1, #0]
}
   371d0:	b005      	add	sp, #20
   371d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   371d6:	bf00      	nop
   371d8:	200008b4 	.word	0x200008b4
   371dc:	200045fc 	.word	0x200045fc
   371e0:	20004bdc 	.word	0x20004bdc
   371e4:	200008b6 	.word	0x200008b6
   371e8:	20004600 	.word	0x20004600
   371ec:	200046cc 	.word	0x200046cc
   371f0:	20000798 	.word	0x20000798
   371f4:	20000760 	.word	0x20000760
   371f8:	00052600 	.word	0x00052600
   371fc:	00052670 	.word	0x00052670
   37200:	00052460 	.word	0x00052460

00037204 <ll_rx_dequeue>:
{
   37204:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   37206:	4958      	ldr	r1, [pc, #352]	; (37368 <ll_rx_dequeue+0x164>)
{
   37208:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   3720a:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   3720c:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   3720e:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   37210:	aa01      	add	r2, sp, #4
   37212:	f7fc fbd9 	bl	339c8 <memq_dequeue>
	LL_ASSERT(link);
   37216:	4604      	mov	r4, r0
   37218:	2800      	cmp	r0, #0
   3721a:	d059      	beq.n	372d0 <ll_rx_dequeue+0xcc>
	mem_release(link, &mem_link_rx.free);
   3721c:	4953      	ldr	r1, [pc, #332]	; (3736c <ll_rx_dequeue+0x168>)
   3721e:	4620      	mov	r0, r4
   37220:	f7fc fb76 	bl	33910 <mem_release>
	switch (rx->type) {
   37224:	9901      	ldr	r1, [sp, #4]
   37226:	790a      	ldrb	r2, [r1, #4]
   37228:	2a1c      	cmp	r2, #28
   3722a:	d806      	bhi.n	3723a <ll_rx_dequeue+0x36>
   3722c:	4850      	ldr	r0, [pc, #320]	; (37370 <ll_rx_dequeue+0x16c>)
   3722e:	2301      	movs	r3, #1
   37230:	4093      	lsls	r3, r2
   37232:	4003      	ands	r3, r0
   37234:	d131      	bne.n	3729a <ll_rx_dequeue+0x96>
   37236:	2a16      	cmp	r2, #22
   37238:	d00e      	beq.n	37258 <ll_rx_dequeue+0x54>
		LL_ASSERT(0);
   3723a:	4a4e      	ldr	r2, [pc, #312]	; (37374 <ll_rx_dequeue+0x170>)
   3723c:	494e      	ldr	r1, [pc, #312]	; (37378 <ll_rx_dequeue+0x174>)
   3723e:	484f      	ldr	r0, [pc, #316]	; (3737c <ll_rx_dequeue+0x178>)
   37240:	f240 43c7 	movw	r3, #1223	; 0x4c7
   37244:	f012 fa16 	bl	49674 <printk>
   37248:	4040      	eors	r0, r0
   3724a:	f380 8811 	msr	BASEPRI, r0
   3724e:	f04f 0003 	mov.w	r0, #3
   37252:	df02      	svc	2
}
   37254:	b002      	add	sp, #8
   37256:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   37258:	7f0a      	ldrb	r2, [r1, #28]
   3725a:	2a3c      	cmp	r2, #60	; 0x3c
   3725c:	d046      	beq.n	372ec <ll_rx_dequeue+0xe8>
   3725e:	7f4a      	ldrb	r2, [r1, #29]
   37260:	b362      	cbz	r2, 372bc <ll_rx_dequeue+0xb8>
			adv = HDR_LLL2ULL(lll);
   37262:	688a      	ldr	r2, [r1, #8]
   37264:	6814      	ldr	r4, [r2, #0]
				if (adv->node_rx_cc_free) {
   37266:	6e60      	ldr	r0, [r4, #100]	; 0x64
   37268:	b118      	cbz	r0, 37272 <ll_rx_dequeue+0x6e>
					mem_release(rx_free, &mem_pdu_rx.free);
   3726a:	4945      	ldr	r1, [pc, #276]	; (37380 <ll_rx_dequeue+0x17c>)
					adv->node_rx_cc_free = NULL;
   3726c:	6663      	str	r3, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
   3726e:	f7fc fb4f 	bl	33910 <mem_release>
			adv->is_enabled = 0U;
   37272:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   37276:	f36f 0300 	bfc	r3, #0, #1
   3727a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      (ull_scan_is_enabled(0) << 1)) |
   3727e:	2000      	movs	r0, #0
   37280:	f001 fcde 	bl	38c40 <ull_scan_is_enabled>
   37284:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
   37286:	2000      	movs	r0, #0
   37288:	f001 fab6 	bl	387f8 <ull_adv_is_enabled>
			if (!bm) {
   3728c:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
   37290:	d1e0      	bne.n	37254 <ll_rx_dequeue+0x50>
				ull_filter_adv_scan_state_cb(0);
   37292:	f007 ff39 	bl	3f108 <ull_filter_adv_scan_state_cb>
}
   37296:	b002      	add	sp, #8
   37298:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   3729a:	2a00      	cmp	r2, #0
   3729c:	d1da      	bne.n	37254 <ll_rx_dequeue+0x50>
   3729e:	4a35      	ldr	r2, [pc, #212]	; (37374 <ll_rx_dequeue+0x170>)
   372a0:	4938      	ldr	r1, [pc, #224]	; (37384 <ll_rx_dequeue+0x180>)
   372a2:	4836      	ldr	r0, [pc, #216]	; (3737c <ll_rx_dequeue+0x178>)
   372a4:	f240 43c3 	movw	r3, #1219	; 0x4c3
   372a8:	f012 f9e4 	bl	49674 <printk>
   372ac:	4040      	eors	r0, r0
   372ae:	f380 8811 	msr	BASEPRI, r0
   372b2:	f04f 0003 	mov.w	r0, #3
   372b6:	df02      	svc	2
}
   372b8:	b002      	add	sp, #8
   372ba:	bd70      	pop	{r4, r5, r6, pc}
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
   372bc:	688b      	ldr	r3, [r1, #8]
   372be:	681b      	ldr	r3, [r3, #0]
			scan->is_enabled = 0U;
   372c0:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
			scan->lll.conn = NULL;
   372c4:	621a      	str	r2, [r3, #32]
			scan->is_enabled = 0U;
   372c6:	f362 0100 	bfi	r1, r2, #0, #1
   372ca:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
   372ce:	e7d6      	b.n	3727e <ll_rx_dequeue+0x7a>
	LL_ASSERT(link);
   372d0:	4a28      	ldr	r2, [pc, #160]	; (37374 <ll_rx_dequeue+0x170>)
   372d2:	492d      	ldr	r1, [pc, #180]	; (37388 <ll_rx_dequeue+0x184>)
   372d4:	4829      	ldr	r0, [pc, #164]	; (3737c <ll_rx_dequeue+0x178>)
   372d6:	f240 33a1 	movw	r3, #929	; 0x3a1
   372da:	f012 f9cb 	bl	49674 <printk>
   372de:	4040      	eors	r0, r0
   372e0:	f380 8811 	msr	BASEPRI, r0
   372e4:	f04f 0003 	mov.w	r0, #3
   372e8:	df02      	svc	2
   372ea:	e797      	b.n	3721c <ll_rx_dequeue+0x18>
			lll = ftr->param;
   372ec:	688e      	ldr	r6, [r1, #8]
			adv = HDR_LLL2ULL(lll);
   372ee:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   372f2:	b1ed      	cbz	r5, 37330 <ll_rx_dequeue+0x12c>
				LL_ASSERT(!conn_lll->link_tx_free);
   372f4:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
   372f6:	2200      	movs	r2, #0
   372f8:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   372fa:	b163      	cbz	r3, 37316 <ll_rx_dequeue+0x112>
   372fc:	4a1d      	ldr	r2, [pc, #116]	; (37374 <ll_rx_dequeue+0x170>)
   372fe:	4923      	ldr	r1, [pc, #140]	; (3738c <ll_rx_dequeue+0x188>)
   37300:	481e      	ldr	r0, [pc, #120]	; (3737c <ll_rx_dequeue+0x178>)
   37302:	f240 431a 	movw	r3, #1050	; 0x41a
   37306:	f012 f9b5 	bl	49674 <printk>
   3730a:	4040      	eors	r0, r0
   3730c:	f380 8811 	msr	BASEPRI, r0
   37310:	f04f 0003 	mov.w	r0, #3
   37314:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   37316:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   3731a:	f105 0048 	add.w	r0, r5, #72	; 0x48
   3731e:	f7fc fb37 	bl	33990 <memq_deinit>
				LL_ASSERT(link);
   37322:	4606      	mov	r6, r0
   37324:	b190      	cbz	r0, 3734c <ll_rx_dequeue+0x148>
				ll_conn_release(conn);
   37326:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   37328:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
   3732a:	f002 fb49 	bl	399c0 <ll_conn_release>
   3732e:	e7a0      	b.n	37272 <ll_rx_dequeue+0x6e>
				LL_ASSERT(conn_lll);
   37330:	4a10      	ldr	r2, [pc, #64]	; (37374 <ll_rx_dequeue+0x170>)
   37332:	4917      	ldr	r1, [pc, #92]	; (37390 <ll_rx_dequeue+0x18c>)
   37334:	4811      	ldr	r0, [pc, #68]	; (3737c <ll_rx_dequeue+0x178>)
   37336:	f240 4317 	movw	r3, #1047	; 0x417
   3733a:	f012 f99b 	bl	49674 <printk>
   3733e:	4040      	eors	r0, r0
   37340:	f380 8811 	msr	BASEPRI, r0
   37344:	f04f 0003 	mov.w	r0, #3
   37348:	df02      	svc	2
   3734a:	e7d3      	b.n	372f4 <ll_rx_dequeue+0xf0>
				LL_ASSERT(link);
   3734c:	4a09      	ldr	r2, [pc, #36]	; (37374 <ll_rx_dequeue+0x170>)
   3734e:	490e      	ldr	r1, [pc, #56]	; (37388 <ll_rx_dequeue+0x184>)
   37350:	480a      	ldr	r0, [pc, #40]	; (3737c <ll_rx_dequeue+0x178>)
   37352:	f240 431d 	movw	r3, #1053	; 0x41d
   37356:	f012 f98d 	bl	49674 <printk>
   3735a:	4040      	eors	r0, r0
   3735c:	f380 8811 	msr	BASEPRI, r0
   37360:	f04f 0003 	mov.w	r0, #3
   37364:	df02      	svc	2
   37366:	e7de      	b.n	37326 <ll_rx_dequeue+0x122>
   37368:	20004bdc 	.word	0x20004bdc
   3736c:	20004600 	.word	0x20004600
   37370:	1f800029 	.word	0x1f800029
   37374:	00052600 	.word	0x00052600
   37378:	000524c0 	.word	0x000524c0
   3737c:	00052460 	.word	0x00052460
   37380:	200046cc 	.word	0x200046cc
   37384:	000526d4 	.word	0x000526d4
   37388:	000529c8 	.word	0x000529c8
   3738c:	000526bc 	.word	0x000526bc
   37390:	000526b0 	.word	0x000526b0

00037394 <ll_rx_mem_release>:
{
   37394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   37398:	6804      	ldr	r4, [r0, #0]
{
   3739a:	4680      	mov	r8, r0
	while (rx) {
   3739c:	b30c      	cbz	r4, 373e2 <ll_rx_mem_release+0x4e>
			LL_ASSERT(0);
   3739e:	4f5b      	ldr	r7, [pc, #364]	; (3750c <ll_rx_mem_release+0x178>)
   373a0:	f8df 916c 	ldr.w	r9, [pc, #364]	; 37510 <ll_rx_mem_release+0x17c>
   373a4:	4e5b      	ldr	r6, [pc, #364]	; (37514 <ll_rx_mem_release+0x180>)
		rx = rx->next;
   373a6:	4625      	mov	r5, r4
   373a8:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   373aa:	792a      	ldrb	r2, [r5, #4]
   373ac:	2a1c      	cmp	r2, #28
   373ae:	d809      	bhi.n	373c4 <ll_rx_mem_release+0x30>
   373b0:	4959      	ldr	r1, [pc, #356]	; (37518 <ll_rx_mem_release+0x184>)
   373b2:	2301      	movs	r3, #1
   373b4:	4093      	lsls	r3, r2
   373b6:	ea13 0a01 	ands.w	sl, r3, r1
   373ba:	d12e      	bne.n	3741a <ll_rx_mem_release+0x86>
   373bc:	2a17      	cmp	r2, #23
   373be:	d04a      	beq.n	37456 <ll_rx_mem_release+0xc2>
   373c0:	2a16      	cmp	r2, #22
   373c2:	d016      	beq.n	373f2 <ll_rx_mem_release+0x5e>
			LL_ASSERT(0);
   373c4:	f240 53fa 	movw	r3, #1530	; 0x5fa
   373c8:	463a      	mov	r2, r7
   373ca:	4649      	mov	r1, r9
   373cc:	4630      	mov	r0, r6
   373ce:	f012 f951 	bl	49674 <printk>
   373d2:	4040      	eors	r0, r0
   373d4:	f380 8811 	msr	BASEPRI, r0
   373d8:	f04f 0003 	mov.w	r0, #3
   373dc:	df02      	svc	2
	while (rx) {
   373de:	2c00      	cmp	r4, #0
   373e0:	d1e1      	bne.n	373a6 <ll_rx_mem_release+0x12>
	*node_rx = rx;
   373e2:	2300      	movs	r3, #0
   373e4:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   373e8:	20ff      	movs	r0, #255	; 0xff
}
   373ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   373ee:	f7ff bcc9 	b.w	36d84 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   373f2:	7f2b      	ldrb	r3, [r5, #28]
   373f4:	2b3c      	cmp	r3, #60	; 0x3c
   373f6:	d063      	beq.n	374c0 <ll_rx_mem_release+0x12c>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   373f8:	2b02      	cmp	r3, #2
   373fa:	d069      	beq.n	374d0 <ll_rx_mem_release+0x13c>
				LL_ASSERT(!cc->status);
   373fc:	b1db      	cbz	r3, 37436 <ll_rx_mem_release+0xa2>
   373fe:	4947      	ldr	r1, [pc, #284]	; (3751c <ll_rx_mem_release+0x188>)
   37400:	f240 532b 	movw	r3, #1323	; 0x52b
   37404:	463a      	mov	r2, r7
   37406:	4630      	mov	r0, r6
   37408:	f012 f934 	bl	49674 <printk>
   3740c:	4040      	eors	r0, r0
   3740e:	f380 8811 	msr	BASEPRI, r0
   37412:	f04f 0003 	mov.w	r0, #3
   37416:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   37418:	792a      	ldrb	r2, [r5, #4]
   3741a:	b962      	cbnz	r2, 37436 <ll_rx_mem_release+0xa2>
   3741c:	4940      	ldr	r1, [pc, #256]	; (37520 <ll_rx_mem_release+0x18c>)
   3741e:	f240 537d 	movw	r3, #1405	; 0x57d
   37422:	463a      	mov	r2, r7
   37424:	4630      	mov	r0, r6
   37426:	f012 f925 	bl	49674 <printk>
   3742a:	4040      	eors	r0, r0
   3742c:	f380 8811 	msr	BASEPRI, r0
   37430:	f04f 0003 	mov.w	r0, #3
   37434:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   37436:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 37524 <ll_rx_mem_release+0x190>
   3743a:	f89a 3000 	ldrb.w	r3, [sl]
   3743e:	2b0f      	cmp	r3, #15
   37440:	d82e      	bhi.n	374a0 <ll_rx_mem_release+0x10c>
	mem_link_rx.quota_pdu += delta;
   37442:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   37444:	4938      	ldr	r1, [pc, #224]	; (37528 <ll_rx_mem_release+0x194>)
	mem_link_rx.quota_pdu += delta;
   37446:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   3744a:	4628      	mov	r0, r5
   3744c:	f7fc fa60 	bl	33910 <mem_release>
	while (rx) {
   37450:	2c00      	cmp	r4, #0
   37452:	d1a8      	bne.n	373a6 <ll_rx_mem_release+0x12>
   37454:	e7c5      	b.n	373e2 <ll_rx_mem_release+0x4e>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   37456:	88e8      	ldrh	r0, [r5, #6]
   37458:	2805      	cmp	r0, #5
   3745a:	d8c0      	bhi.n	373de <ll_rx_mem_release+0x4a>
				conn = ll_conn_get(rx_free->handle);
   3745c:	f002 fabe 	bl	399dc <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   37460:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
   37462:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   37464:	b163      	cbz	r3, 37480 <ll_rx_mem_release+0xec>
   37466:	4931      	ldr	r1, [pc, #196]	; (3752c <ll_rx_mem_release+0x198>)
   37468:	f240 53ec 	movw	r3, #1516	; 0x5ec
   3746c:	463a      	mov	r2, r7
   3746e:	4630      	mov	r0, r6
   37470:	f012 f900 	bl	49674 <printk>
   37474:	4040      	eors	r0, r0
   37476:	f380 8811 	msr	BASEPRI, r0
   3747a:	f04f 0003 	mov.w	r0, #3
   3747e:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   37480:	f105 0168 	add.w	r1, r5, #104	; 0x68
   37484:	f105 0064 	add.w	r0, r5, #100	; 0x64
   37488:	f7fc fa82 	bl	33990 <memq_deinit>
				LL_ASSERT(link);
   3748c:	4682      	mov	sl, r0
   3748e:	b370      	cbz	r0, 374ee <ll_rx_mem_release+0x15a>
				conn->lll.link_tx_free = link;
   37490:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
   37494:	4628      	mov	r0, r5
   37496:	f002 fa93 	bl	399c0 <ll_conn_release>
	while (rx) {
   3749a:	2c00      	cmp	r4, #0
   3749c:	d183      	bne.n	373a6 <ll_rx_mem_release+0x12>
   3749e:	e7a0      	b.n	373e2 <ll_rx_mem_release+0x4e>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   374a0:	4923      	ldr	r1, [pc, #140]	; (37530 <ll_rx_mem_release+0x19c>)
   374a2:	f240 6306 	movw	r3, #1542	; 0x606
   374a6:	463a      	mov	r2, r7
   374a8:	4630      	mov	r0, r6
   374aa:	f012 f8e3 	bl	49674 <printk>
   374ae:	4040      	eors	r0, r0
   374b0:	f380 8811 	msr	BASEPRI, r0
   374b4:	f04f 0003 	mov.w	r0, #3
   374b8:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   374ba:	f89a 3000 	ldrb.w	r3, [sl]
   374be:	e7c0      	b.n	37442 <ll_rx_mem_release+0xae>
				mem_release(rx_free, &mem_pdu_rx.free);
   374c0:	4919      	ldr	r1, [pc, #100]	; (37528 <ll_rx_mem_release+0x194>)
   374c2:	4628      	mov	r0, r5
   374c4:	f7fc fa24 	bl	33910 <mem_release>
	while (rx) {
   374c8:	2c00      	cmp	r4, #0
   374ca:	f47f af6c 	bne.w	373a6 <ll_rx_mem_release+0x12>
   374ce:	e788      	b.n	373e2 <ll_rx_mem_release+0x4e>
				ull_central_cleanup(rx_free);
   374d0:	4628      	mov	r0, r5
   374d2:	f006 fe8f 	bl	3e1f4 <ull_central_cleanup>
				if (!ull_adv_is_enabled_get(0))
   374d6:	4650      	mov	r0, sl
   374d8:	f001 f980 	bl	387dc <ull_adv_is_enabled_get>
   374dc:	2800      	cmp	r0, #0
   374de:	f47f af7e 	bne.w	373de <ll_rx_mem_release+0x4a>
					ull_filter_adv_scan_state_cb(0);
   374e2:	f007 fe11 	bl	3f108 <ull_filter_adv_scan_state_cb>
	while (rx) {
   374e6:	2c00      	cmp	r4, #0
   374e8:	f47f af5d 	bne.w	373a6 <ll_rx_mem_release+0x12>
   374ec:	e779      	b.n	373e2 <ll_rx_mem_release+0x4e>
				LL_ASSERT(link);
   374ee:	4911      	ldr	r1, [pc, #68]	; (37534 <ll_rx_mem_release+0x1a0>)
   374f0:	f240 53ef 	movw	r3, #1519	; 0x5ef
   374f4:	463a      	mov	r2, r7
   374f6:	4630      	mov	r0, r6
   374f8:	f012 f8bc 	bl	49674 <printk>
   374fc:	4040      	eors	r0, r0
   374fe:	f380 8811 	msr	BASEPRI, r0
   37502:	f04f 0003 	mov.w	r0, #3
   37506:	df02      	svc	2
   37508:	e7c2      	b.n	37490 <ll_rx_mem_release+0xfc>
   3750a:	bf00      	nop
   3750c:	00052600 	.word	0x00052600
   37510:	000524c0 	.word	0x000524c0
   37514:	00052460 	.word	0x00052460
   37518:	1f000029 	.word	0x1f000029
   3751c:	000526f4 	.word	0x000526f4
   37520:	00052700 	.word	0x00052700
   37524:	200045fc 	.word	0x200045fc
   37528:	200046cc 	.word	0x200046cc
   3752c:	00052724 	.word	0x00052724
   37530:	00052670 	.word	0x00052670
   37534:	000529c8 	.word	0x000529c8

00037538 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   37538:	4801      	ldr	r0, [pc, #4]	; (37540 <ll_rx_link_alloc+0x8>)
   3753a:	f7fc b9cf 	b.w	338dc <mem_acquire>
   3753e:	bf00      	nop
   37540:	20004600 	.word	0x20004600

00037544 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   37544:	4901      	ldr	r1, [pc, #4]	; (3754c <ll_rx_link_release+0x8>)
   37546:	f7fc b9e3 	b.w	33910 <mem_release>
   3754a:	bf00      	nop
   3754c:	20004600 	.word	0x20004600

00037550 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   37550:	4801      	ldr	r0, [pc, #4]	; (37558 <ll_rx_alloc+0x8>)
   37552:	f7fc b9c3 	b.w	338dc <mem_acquire>
   37556:	bf00      	nop
   37558:	200046cc 	.word	0x200046cc

0003755c <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   3755c:	4901      	ldr	r1, [pc, #4]	; (37564 <ll_rx_release+0x8>)
   3755e:	f7fc b9d7 	b.w	33910 <mem_release>
   37562:	bf00      	nop
   37564:	200046cc 	.word	0x200046cc

00037568 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37568:	4b02      	ldr	r3, [pc, #8]	; (37574 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   3756a:	4a03      	ldr	r2, [pc, #12]	; (37578 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   3756c:	78db      	ldrb	r3, [r3, #3]
   3756e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37570:	f7fc ba18 	b.w	339a4 <memq_enqueue>
   37574:	200008b4 	.word	0x200008b4
   37578:	20004be0 	.word	0x20004be0

0003757c <ll_rx_sched>:
	k_sem_give(sem_recv);
   3757c:	4b01      	ldr	r3, [pc, #4]	; (37584 <ll_rx_sched+0x8>)
   3757e:	6818      	ldr	r0, [r3, #0]
   37580:	f010 bb3c 	b.w	47bfc <z_impl_k_sem_give>
   37584:	20004bf4 	.word	0x20004bf4

00037588 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   37588:	4b0d      	ldr	r3, [pc, #52]	; (375c0 <ll_pdu_rx_alloc_peek+0x38>)
   3758a:	7899      	ldrb	r1, [r3, #2]
   3758c:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   3758e:	4291      	cmp	r1, r2
   37590:	d80c      	bhi.n	375ac <ll_pdu_rx_alloc_peek+0x24>
		return last - first;
   37592:	eba2 0c01 	sub.w	ip, r2, r1
   37596:	fa5f fc8c 	uxtb.w	ip, ip
   3759a:	4560      	cmp	r0, ip
   3759c:	d80d      	bhi.n	375ba <ll_pdu_rx_alloc_peek+0x32>
	if (first == last) {
   3759e:	4291      	cmp	r1, r2
   375a0:	d00b      	beq.n	375ba <ll_pdu_rx_alloc_peek+0x32>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   375a2:	781a      	ldrb	r2, [r3, #0]
	return *((void **)(fifo + first * size));
   375a4:	fb01 3302 	mla	r3, r1, r2, r3
   375a8:	6858      	ldr	r0, [r3, #4]
   375aa:	4770      	bx	lr
		return count - first + last;
   375ac:	f893 c001 	ldrb.w	ip, [r3, #1]
   375b0:	4462      	add	r2, ip
   375b2:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   375b4:	b2d2      	uxtb	r2, r2
   375b6:	4290      	cmp	r0, r2
   375b8:	d9f3      	bls.n	375a2 <ll_pdu_rx_alloc_peek+0x1a>
		return NULL;
   375ba:	2000      	movs	r0, #0
}
   375bc:	4770      	bx	lr
   375be:	bf00      	nop
   375c0:	20000760 	.word	0x20000760

000375c4 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   375c4:	4b09      	ldr	r3, [pc, #36]	; (375ec <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   375c6:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   375c8:	78da      	ldrb	r2, [r3, #3]
   375ca:	7818      	ldrb	r0, [r3, #0]
   375cc:	f893 c001 	ldrb.w	ip, [r3, #1]
   375d0:	428a      	cmp	r2, r1
   375d2:	d009      	beq.n	375e8 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   375d4:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   375d6:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   375da:	b2d2      	uxtb	r2, r2
	if (_first == count) {
		_first = 0U;
   375dc:	4594      	cmp	ip, r2
   375de:	bf08      	it	eq
   375e0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   375e2:	6840      	ldr	r0, [r0, #4]
	}

	*first = _first; /* Write back read-index */
   375e4:	709a      	strb	r2, [r3, #2]

	return mem;
   375e6:	4770      	bx	lr
		return NULL;
   375e8:	2000      	movs	r0, #0
}
   375ea:	4770      	bx	lr
   375ec:	20000760 	.word	0x20000760

000375f0 <ll_tx_ack_put>:
{
   375f0:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   375f2:	4a15      	ldr	r2, [pc, #84]	; (37648 <ll_tx_ack_put+0x58>)
   375f4:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   375f8:	7854      	ldrb	r4, [r2, #1]
   375fa:	f892 e002 	ldrb.w	lr, [r2, #2]
   375fe:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   37600:	f10c 0301 	add.w	r3, ip, #1
   37604:	b2db      	uxtb	r3, r3
		last = 0U;
   37606:	429c      	cmp	r4, r3
   37608:	bf08      	it	eq
   3760a:	2300      	moveq	r3, #0
	if (last == first) {
   3760c:	459e      	cmp	lr, r3
   3760e:	d00a      	beq.n	37626 <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   37610:	fb1c fc05 	smulbb	ip, ip, r5
   37614:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
   37618:	f82e 000c 	strh.w	r0, [lr, ip]
   3761c:	44e6      	add	lr, ip
	tx->node = node_tx;
   3761e:	f8ce 1004 	str.w	r1, [lr, #4]
	*last = idx; /* Commit: Update write index */
   37622:	70d3      	strb	r3, [r2, #3]
}
   37624:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   37626:	4a09      	ldr	r2, [pc, #36]	; (3764c <ll_tx_ack_put+0x5c>)
   37628:	4909      	ldr	r1, [pc, #36]	; (37650 <ll_tx_ack_put+0x60>)
   3762a:	480a      	ldr	r0, [pc, #40]	; (37654 <ll_tx_ack_put+0x64>)
   3762c:	f240 634e 	movw	r3, #1614	; 0x64e
   37630:	f012 f820 	bl	49674 <printk>
   37634:	4040      	eors	r0, r0
   37636:	f380 8811 	msr	BASEPRI, r0
   3763a:	f04f 0003 	mov.w	r0, #3
   3763e:	df02      	svc	2
	tx->handle = handle;
   37640:	2300      	movs	r3, #0
   37642:	801b      	strh	r3, [r3, #0]
   37644:	deff      	udf	#255	; 0xff
   37646:	bf00      	nop
   37648:	200008b4 	.word	0x200008b4
   3764c:	00052600 	.word	0x00052600
   37650:	000529bc 	.word	0x000529bc
   37654:	00052460 	.word	0x00052460

00037658 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   37658:	2200      	movs	r2, #0
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   3765a:	230b      	movs	r3, #11
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   3765c:	7002      	strb	r2, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   3765e:	700b      	strb	r3, [r1, #0]
}
   37660:	4770      	bx	lr
   37662:	bf00      	nop

00037664 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   37664:	2200      	movs	r2, #0
{
   37666:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   37668:	4611      	mov	r1, r2
   3766a:	4b0a      	ldr	r3, [pc, #40]	; (37694 <ll_radio_state_abort+0x30>)
   3766c:	2001      	movs	r0, #1
   3766e:	f7fc fa0f 	bl	33a90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   37672:	b900      	cbnz	r0, 37676 <ll_radio_state_abort+0x12>
}
   37674:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   37676:	4a08      	ldr	r2, [pc, #32]	; (37698 <ll_radio_state_abort+0x34>)
   37678:	4908      	ldr	r1, [pc, #32]	; (3769c <ll_radio_state_abort+0x38>)
   3767a:	4809      	ldr	r0, [pc, #36]	; (376a0 <ll_radio_state_abort+0x3c>)
   3767c:	f240 6366 	movw	r3, #1638	; 0x666
   37680:	f011 fff8 	bl	49674 <printk>
   37684:	4040      	eors	r0, r0
   37686:	f380 8811 	msr	BASEPRI, r0
   3768a:	f04f 0003 	mov.w	r0, #3
   3768e:	df02      	svc	2
}
   37690:	bd08      	pop	{r3, pc}
   37692:	bf00      	nop
   37694:	20000928 	.word	0x20000928
   37698:	00052600 	.word	0x00052600
   3769c:	0005273c 	.word	0x0005273c
   376a0:	00052460 	.word	0x00052460

000376a4 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   376a4:	f030 0302 	bics.w	r3, r0, #2
{
   376a8:	b510      	push	{r4, lr}
   376aa:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   376ac:	d002      	beq.n	376b4 <ull_ticker_status_take+0x10>
   376ae:	680b      	ldr	r3, [r1, #0]
   376b0:	2b02      	cmp	r3, #2
   376b2:	d008      	beq.n	376c6 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   376b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   376b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   376bc:	4809      	ldr	r0, [pc, #36]	; (376e4 <ull_ticker_status_take+0x40>)
   376be:	f010 fac3 	bl	47c48 <z_impl_k_sem_take>
	return *ret_cb;
   376c2:	6820      	ldr	r0, [r4, #0]
}
   376c4:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   376c6:	4a08      	ldr	r2, [pc, #32]	; (376e8 <ull_ticker_status_take+0x44>)
   376c8:	4908      	ldr	r1, [pc, #32]	; (376ec <ull_ticker_status_take+0x48>)
   376ca:	4809      	ldr	r0, [pc, #36]	; (376f0 <ull_ticker_status_take+0x4c>)
   376cc:	f240 6382 	movw	r3, #1666	; 0x682
   376d0:	f011 ffd0 	bl	49674 <printk>
   376d4:	4040      	eors	r0, r0
   376d6:	f380 8811 	msr	BASEPRI, r0
   376da:	f04f 0003 	mov.w	r0, #3
   376de:	df02      	svc	2
   376e0:	e7e8      	b.n	376b4 <ull_ticker_status_take+0x10>
   376e2:	bf00      	nop
   376e4:	20004bf8 	.word	0x20004bf8
   376e8:	00052600 	.word	0x00052600
   376ec:	00052744 	.word	0x00052744
   376f0:	00052460 	.word	0x00052460

000376f4 <ull_disable_mark>:
	if (!*m) {
   376f4:	4904      	ldr	r1, [pc, #16]	; (37708 <ull_disable_mark+0x14>)
   376f6:	680a      	ldr	r2, [r1, #0]
   376f8:	b10a      	cbz	r2, 376fe <ull_disable_mark+0xa>
}
   376fa:	4610      	mov	r0, r2
   376fc:	4770      	bx	lr
		*m = param;
   376fe:	4602      	mov	r2, r0
   37700:	6008      	str	r0, [r1, #0]
}
   37702:	4610      	mov	r0, r2
   37704:	4770      	bx	lr
   37706:	bf00      	nop
   37708:	200045c8 	.word	0x200045c8

0003770c <ull_disable_unmark>:
	if (*m && *m == param) {
   3770c:	4a04      	ldr	r2, [pc, #16]	; (37720 <ull_disable_unmark+0x14>)
   3770e:	6813      	ldr	r3, [r2, #0]
   37710:	b123      	cbz	r3, 3771c <ull_disable_unmark+0x10>
   37712:	4298      	cmp	r0, r3
		*m = NULL;
   37714:	bf06      	itte	eq
   37716:	2100      	moveq	r1, #0
   37718:	6011      	streq	r1, [r2, #0]
	return NULL;
   3771a:	2300      	movne	r3, #0
}
   3771c:	4618      	mov	r0, r3
   3771e:	4770      	bx	lr
   37720:	200045c8 	.word	0x200045c8

00037724 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   37724:	4b01      	ldr	r3, [pc, #4]	; (3772c <ull_disable_mark_get+0x8>)
}
   37726:	6818      	ldr	r0, [r3, #0]
   37728:	4770      	bx	lr
   3772a:	bf00      	nop
   3772c:	200045c8 	.word	0x200045c8

00037730 <ull_update_mark>:
	if (!*m) {
   37730:	4904      	ldr	r1, [pc, #16]	; (37744 <ull_update_mark+0x14>)
   37732:	680a      	ldr	r2, [r1, #0]
   37734:	b10a      	cbz	r2, 3773a <ull_update_mark+0xa>
}
   37736:	4610      	mov	r0, r2
   37738:	4770      	bx	lr
		*m = param;
   3773a:	4602      	mov	r2, r0
   3773c:	6008      	str	r0, [r1, #0]
}
   3773e:	4610      	mov	r0, r2
   37740:	4770      	bx	lr
   37742:	bf00      	nop
   37744:	200045cc 	.word	0x200045cc

00037748 <ull_update_unmark>:
	if (*m && *m == param) {
   37748:	4a04      	ldr	r2, [pc, #16]	; (3775c <ull_update_unmark+0x14>)
   3774a:	6813      	ldr	r3, [r2, #0]
   3774c:	b123      	cbz	r3, 37758 <ull_update_unmark+0x10>
   3774e:	4298      	cmp	r0, r3
		*m = NULL;
   37750:	bf06      	itte	eq
   37752:	2100      	moveq	r1, #0
   37754:	6011      	streq	r1, [r2, #0]
	return NULL;
   37756:	2300      	movne	r3, #0
}
   37758:	4618      	mov	r0, r3
   3775a:	4770      	bx	lr
   3775c:	200045cc 	.word	0x200045cc

00037760 <ull_update_mark_get>:
	return mark_get(mark_update);
   37760:	4b01      	ldr	r3, [pc, #4]	; (37768 <ull_update_mark_get+0x8>)
}
   37762:	6818      	ldr	r0, [r3, #0]
   37764:	4770      	bx	lr
   37766:	bf00      	nop
   37768:	200045cc 	.word	0x200045cc

0003776c <ull_disable>:
{
   3776c:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   3776e:	6805      	ldr	r5, [r0, #0]
   37770:	782b      	ldrb	r3, [r5, #0]
{
   37772:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   37774:	b353      	cbz	r3, 377cc <ull_disable+0x60>
	compiler_barrier();
   37776:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   37778:	2201      	movs	r2, #1
   3777a:	2100      	movs	r1, #0
   3777c:	4668      	mov	r0, sp
   3777e:	f018 ffb1 	bl	506e4 <z_impl_k_sem_init>
   37782:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   37784:	4a13      	ldr	r2, [pc, #76]	; (377d4 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   37786:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   3778a:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   3778c:	b1f3      	cbz	r3, 377cc <ull_disable+0x60>
	mfy.param = lll;
   3778e:	4b12      	ldr	r3, [pc, #72]	; (377d8 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   37790:	2200      	movs	r2, #0
   37792:	4611      	mov	r1, r2
   37794:	2003      	movs	r0, #3
	mfy.param = lll;
   37796:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   37798:	f7fc f97a 	bl	33a90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   3779c:	b940      	cbnz	r0, 377b0 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   3779e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   377a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   377a6:	4668      	mov	r0, sp
   377a8:	f010 fa4e 	bl	47c48 <z_impl_k_sem_take>
}
   377ac:	b007      	add	sp, #28
   377ae:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   377b0:	4a0a      	ldr	r2, [pc, #40]	; (377dc <ull_disable+0x70>)
   377b2:	490b      	ldr	r1, [pc, #44]	; (377e0 <ull_disable+0x74>)
   377b4:	480b      	ldr	r0, [pc, #44]	; (377e4 <ull_disable+0x78>)
   377b6:	f240 63ff 	movw	r3, #1791	; 0x6ff
   377ba:	f011 ff5b 	bl	49674 <printk>
   377be:	4040      	eors	r0, r0
   377c0:	f380 8811 	msr	BASEPRI, r0
   377c4:	f04f 0003 	mov.w	r0, #3
   377c8:	df02      	svc	2
   377ca:	e7e8      	b.n	3779e <ull_disable+0x32>
		return -EALREADY;
   377cc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   377d0:	e7ec      	b.n	377ac <ull_disable+0x40>
   377d2:	bf00      	nop
   377d4:	00036bad 	.word	0x00036bad
   377d8:	20000918 	.word	0x20000918
   377dc:	00052600 	.word	0x00052600
   377e0:	0005273c 	.word	0x0005273c
   377e4:	00052460 	.word	0x00052460

000377e8 <ull_ticker_stop_with_mark>:
{
   377e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   377ea:	4e20      	ldr	r6, [pc, #128]	; (3786c <ull_ticker_stop_with_mark+0x84>)
   377ec:	6833      	ldr	r3, [r6, #0]
{
   377ee:	b085      	sub	sp, #20
   377f0:	460c      	mov	r4, r1
   377f2:	4617      	mov	r7, r2
	if (!*m) {
   377f4:	b353      	cbz	r3, 3784c <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   377f6:	4299      	cmp	r1, r3
   377f8:	d113      	bne.n	37822 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   377fa:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   377fc:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   377fe:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   37800:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   37802:	9500      	str	r5, [sp, #0]
   37804:	4b1a      	ldr	r3, [pc, #104]	; (37870 <ull_ticker_stop_with_mark+0x88>)
   37806:	2103      	movs	r1, #3
   37808:	2000      	movs	r0, #0
   3780a:	f7fd fba7 	bl	34f5c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   3780e:	4629      	mov	r1, r5
   37810:	f7ff ff48 	bl	376a4 <ull_ticker_status_take>
	if (ret) {
   37814:	4605      	mov	r5, r0
   37816:	b140      	cbz	r0, 3782a <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   37818:	6833      	ldr	r3, [r6, #0]
   3781a:	b10b      	cbz	r3, 37820 <ull_ticker_stop_with_mark+0x38>
   3781c:	429c      	cmp	r4, r3
   3781e:	d017      	beq.n	37850 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   37820:	b304      	cbz	r4, 37864 <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
   37822:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   37826:	b005      	add	sp, #20
   37828:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   3782a:	4638      	mov	r0, r7
   3782c:	f7ff ff9e 	bl	3776c <ull_disable>
	if (*m && *m == param) {
   37830:	6833      	ldr	r3, [r6, #0]
   37832:	b10b      	cbz	r3, 37838 <ull_ticker_stop_with_mark+0x50>
   37834:	429c      	cmp	r4, r3
   37836:	d011      	beq.n	3785c <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   37838:	2c00      	cmp	r4, #0
   3783a:	d1f2      	bne.n	37822 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   3783c:	2800      	cmp	r0, #0
   3783e:	d0f2      	beq.n	37826 <ull_ticker_stop_with_mark+0x3e>
	return 0;
   37840:	f110 0f78 	cmn.w	r0, #120	; 0x78
   37844:	bf08      	it	eq
   37846:	2000      	moveq	r0, #0
}
   37848:	b005      	add	sp, #20
   3784a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   3784c:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   3784e:	e7d4      	b.n	377fa <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   37850:	2300      	movs	r3, #0
		return -EALREADY;
   37852:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   37856:	6033      	str	r3, [r6, #0]
}
   37858:	b005      	add	sp, #20
   3785a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   3785c:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   3785e:	2800      	cmp	r0, #0
   37860:	d0e1      	beq.n	37826 <ull_ticker_stop_with_mark+0x3e>
   37862:	e7ed      	b.n	37840 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   37864:	f06f 0077 	mvn.w	r0, #119	; 0x77
   37868:	e7dd      	b.n	37826 <ull_ticker_stop_with_mark+0x3e>
   3786a:	bf00      	nop
   3786c:	200045c8 	.word	0x200045c8
   37870:	00036ba1 	.word	0x00036ba1

00037874 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   37874:	4b0d      	ldr	r3, [pc, #52]	; (378ac <ull_pdu_rx_alloc_peek+0x38>)
   37876:	7899      	ldrb	r1, [r3, #2]
   37878:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   3787a:	4291      	cmp	r1, r2
   3787c:	d80c      	bhi.n	37898 <ull_pdu_rx_alloc_peek+0x24>
		return last - first;
   3787e:	eba2 0c01 	sub.w	ip, r2, r1
   37882:	fa5f fc8c 	uxtb.w	ip, ip
   37886:	4560      	cmp	r0, ip
   37888:	d80d      	bhi.n	378a6 <ull_pdu_rx_alloc_peek+0x32>
	if (first == last) {
   3788a:	4291      	cmp	r1, r2
   3788c:	d00b      	beq.n	378a6 <ull_pdu_rx_alloc_peek+0x32>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   3788e:	781a      	ldrb	r2, [r3, #0]
	return *((void **)(fifo + first * size));
   37890:	fb01 3302 	mla	r3, r1, r2, r3
   37894:	6858      	ldr	r0, [r3, #4]
   37896:	4770      	bx	lr
		return count - first + last;
   37898:	f893 c001 	ldrb.w	ip, [r3, #1]
   3789c:	4462      	add	r2, ip
   3789e:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   378a0:	b2d2      	uxtb	r2, r2
   378a2:	4290      	cmp	r0, r2
   378a4:	d9f3      	bls.n	3788e <ull_pdu_rx_alloc_peek+0x1a>
		return NULL;
   378a6:	2000      	movs	r0, #0
}
   378a8:	4770      	bx	lr
   378aa:	bf00      	nop
   378ac:	20000798 	.word	0x20000798

000378b0 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   378b0:	4b09      	ldr	r3, [pc, #36]	; (378d8 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   378b2:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   378b4:	78da      	ldrb	r2, [r3, #3]
   378b6:	7818      	ldrb	r0, [r3, #0]
   378b8:	f893 c001 	ldrb.w	ip, [r3, #1]
   378bc:	428a      	cmp	r2, r1
   378be:	d009      	beq.n	378d4 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   378c0:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   378c2:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   378c6:	b2d2      	uxtb	r2, r2
		_first = 0U;
   378c8:	4594      	cmp	ip, r2
   378ca:	bf08      	it	eq
   378cc:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   378ce:	6840      	ldr	r0, [r0, #4]
	*first = _first; /* Write back read-index */
   378d0:	709a      	strb	r2, [r3, #2]
	return mem;
   378d2:	4770      	bx	lr
		return NULL;
   378d4:	2000      	movs	r0, #0
}
   378d6:	4770      	bx	lr
   378d8:	20000798 	.word	0x20000798

000378dc <ull_rx_put>:
{
   378dc:	b538      	push	{r3, r4, r5, lr}
   378de:	460c      	mov	r4, r1
   378e0:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   378e2:	f005 ff35 	bl	3d750 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   378e6:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   378e8:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   378ea:	4a03      	ldr	r2, [pc, #12]	; (378f8 <ull_rx_put+0x1c>)
   378ec:	4628      	mov	r0, r5
}
   378ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   378f2:	f7fc b857 	b.w	339a4 <memq_enqueue>
   378f6:	bf00      	nop
   378f8:	20004bf0 	.word	0x20004bf0

000378fc <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   378fc:	2201      	movs	r2, #1
   378fe:	4b02      	ldr	r3, [pc, #8]	; (37908 <ull_rx_sched+0xc>)
   37900:	4611      	mov	r1, r2
   37902:	2000      	movs	r0, #0
   37904:	f7fc b8c4 	b.w	33a90 <mayfly_enqueue>
   37908:	20000908 	.word	0x20000908

0003790c <ull_prepare_enqueue>:
{
   3790c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   37910:	4e15      	ldr	r6, [pc, #84]	; (37968 <ull_prepare_enqueue+0x5c>)
{
   37912:	f89d a020 	ldrb.w	sl, [sp, #32]
   37916:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   37918:	78f3      	ldrb	r3, [r6, #3]
{
   3791a:	460f      	mov	r7, r1
	last = last + 1;
   3791c:	1c5d      	adds	r5, r3, #1
   3791e:	4611      	mov	r1, r2
	if (last == count) {
   37920:	7872      	ldrb	r2, [r6, #1]
	last = last + 1;
   37922:	b2ed      	uxtb	r5, r5
		last = 0U;
   37924:	42aa      	cmp	r2, r5
   37926:	bf08      	it	eq
   37928:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   3792a:	78b2      	ldrb	r2, [r6, #2]
	if (last == first) {
   3792c:	42aa      	cmp	r2, r5
{
   3792e:	4680      	mov	r8, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   37930:	7830      	ldrb	r0, [r6, #0]
   37932:	d015      	beq.n	37960 <ull_prepare_enqueue+0x54>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   37934:	1d34      	adds	r4, r6, #4
   37936:	fb03 4400 	mla	r4, r3, r0, r4
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   3793a:	2210      	movs	r2, #16
   3793c:	4620      	mov	r0, r4
   3793e:	f013 ffa4 	bl	4b88a <memcpy>
	e->is_resume = is_resume;
   37942:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   37944:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   37946:	f00a 0a01 	and.w	sl, sl, #1
   3794a:	f023 0303 	bic.w	r3, r3, #3
   3794e:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   37952:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   37956:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   37958:	70f5      	strb	r5, [r6, #3]
}
   3795a:	4620      	mov	r0, r4
   3795c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   37960:	2400      	movs	r4, #0
}
   37962:	4620      	mov	r0, r4
   37964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37968:	200007b0 	.word	0x200007b0

0003796c <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   3796c:	4805      	ldr	r0, [pc, #20]	; (37984 <ull_prepare_dequeue_get+0x18>)
   3796e:	7882      	ldrb	r2, [r0, #2]
	if (first == last) {
   37970:	78c1      	ldrb	r1, [r0, #3]
   37972:	f890 c000 	ldrb.w	ip, [r0]
   37976:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   37978:	bf1a      	itte	ne
   3797a:	3004      	addne	r0, #4
   3797c:	fb02 000c 	mlane	r0, r2, ip, r0
		return NULL;
   37980:	2000      	moveq	r0, #0
}
   37982:	4770      	bx	lr
   37984:	200007b0 	.word	0x200007b0

00037988 <ull_prepare_dequeue_iter>:
{
   37988:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   3798a:	4b0d      	ldr	r3, [pc, #52]	; (379c0 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   3798c:	7802      	ldrb	r2, [r0, #0]
   3798e:	7859      	ldrb	r1, [r3, #1]
   37990:	f893 c003 	ldrb.w	ip, [r3, #3]
   37994:	f893 e000 	ldrb.w	lr, [r3]
   37998:	4291      	cmp	r1, r2
   3799a:	bf9c      	itt	ls
   3799c:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   3799e:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   379a0:	4594      	cmp	ip, r2
   379a2:	d00a      	beq.n	379ba <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   379a4:	1c53      	adds	r3, r2, #1
   379a6:	b2db      	uxtb	r3, r3
		i = 0U;
   379a8:	4299      	cmp	r1, r3
   379aa:	bf08      	it	eq
   379ac:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   379ae:	4905      	ldr	r1, [pc, #20]	; (379c4 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   379b0:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   379b2:	fb02 100e 	mla	r0, r2, lr, r1
}
   379b6:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   379ba:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   379bc:	e7fb      	b.n	379b6 <ull_prepare_dequeue_iter+0x2e>
   379be:	bf00      	nop
   379c0:	200007b0 	.word	0x200007b0
   379c4:	200007b4 	.word	0x200007b4

000379c8 <ull_prepare_dequeue>:
{
   379c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   379cc:	4c23      	ldr	r4, [pc, #140]	; (37a5c <ull_prepare_dequeue+0x94>)
   379ce:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   379d0:	78e1      	ldrb	r1, [r4, #3]
   379d2:	7823      	ldrb	r3, [r4, #0]
   379d4:	4291      	cmp	r1, r2
   379d6:	d027      	beq.n	37a28 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   379d8:	1d27      	adds	r7, r4, #4
			mfy.param = next;
   379da:	f8df 9084 	ldr.w	r9, [pc, #132]	; 37a60 <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
   379de:	f8df b084 	ldr.w	fp, [pc, #132]	; 37a64 <ull_prepare_dequeue+0x9c>
   379e2:	f8df a084 	ldr.w	sl, [pc, #132]	; 37a68 <ull_prepare_dequeue+0xa0>
   379e6:	4680      	mov	r8, r0
   379e8:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
   379ec:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   379ee:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   379f0:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   379f4:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   379f8:	d518      	bpl.n	37a2c <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
   379fa:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
   379fc:	78e1      	ldrb	r1, [r4, #3]
   379fe:	7820      	ldrb	r0, [r4, #0]
   37a00:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
   37a04:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   37a06:	4291      	cmp	r1, r2
	_first += 1U;
   37a08:	b2db      	uxtb	r3, r3
	if (_first == last) {
   37a0a:	d00d      	beq.n	37a28 <ull_prepare_dequeue+0x60>
		_first = 0U;
   37a0c:	459c      	cmp	ip, r3
   37a0e:	bf08      	it	eq
   37a10:	2300      	moveq	r3, #0
	if (first == last) {
   37a12:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   37a14:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   37a16:	d007      	beq.n	37a28 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   37a18:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   37a1c:	2d00      	cmp	r5, #0
   37a1e:	d1e5      	bne.n	379ec <ull_prepare_dequeue+0x24>
   37a20:	b116      	cbz	r6, 37a28 <ull_prepare_dequeue+0x60>
   37a22:	7f03      	ldrb	r3, [r0, #28]
   37a24:	07db      	lsls	r3, r3, #31
   37a26:	d5e1      	bpl.n	379ec <ull_prepare_dequeue+0x24>
}
   37a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   37a2c:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   37a30:	4b0b      	ldr	r3, [pc, #44]	; (37a60 <ull_prepare_dequeue+0x98>)
   37a32:	462a      	mov	r2, r5
   37a34:	4629      	mov	r1, r5
   37a36:	4640      	mov	r0, r8
   37a38:	f7fc f82a 	bl	33a90 <mayfly_enqueue>
			LL_ASSERT(!ret);
   37a3c:	2800      	cmp	r0, #0
   37a3e:	d0dc      	beq.n	379fa <ull_prepare_dequeue+0x32>
   37a40:	480a      	ldr	r0, [pc, #40]	; (37a6c <ull_prepare_dequeue+0xa4>)
   37a42:	f240 7376 	movw	r3, #1910	; 0x776
   37a46:	465a      	mov	r2, fp
   37a48:	4651      	mov	r1, sl
   37a4a:	f011 fe13 	bl	49674 <printk>
   37a4e:	4040      	eors	r0, r0
   37a50:	f380 8811 	msr	BASEPRI, r0
   37a54:	f04f 0003 	mov.w	r0, #3
   37a58:	df02      	svc	2
   37a5a:	e7ce      	b.n	379fa <ull_prepare_dequeue+0x32>
   37a5c:	200007b0 	.word	0x200007b0
   37a60:	200008d8 	.word	0x200008d8
   37a64:	00052600 	.word	0x00052600
   37a68:	0005273c 	.word	0x0005273c
   37a6c:	00052460 	.word	0x00052460

00037a70 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   37a70:	4b06      	ldr	r3, [pc, #24]	; (37a8c <ull_event_done_extra_get+0x1c>)
   37a72:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   37a74:	78d9      	ldrb	r1, [r3, #3]
   37a76:	7818      	ldrb	r0, [r3, #0]
   37a78:	4291      	cmp	r1, r2
   37a7a:	d005      	beq.n	37a88 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   37a7c:	fb02 3300 	mla	r3, r2, r0, r3
   37a80:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   37a82:	b110      	cbz	r0, 37a8a <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   37a84:	3020      	adds	r0, #32
   37a86:	4770      	bx	lr
		return NULL;
   37a88:	2000      	movs	r0, #0
}
   37a8a:	4770      	bx	lr
   37a8c:	20000748 	.word	0x20000748

00037a90 <ull_event_done>:
{
   37a90:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   37a92:	4a13      	ldr	r2, [pc, #76]	; (37ae0 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   37a94:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   37a96:	78d4      	ldrb	r4, [r2, #3]
   37a98:	7811      	ldrb	r1, [r2, #0]
   37a9a:	429c      	cmp	r4, r3
{
   37a9c:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   37a9e:	7850      	ldrb	r0, [r2, #1]
   37aa0:	d01b      	beq.n	37ada <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   37aa2:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   37aa6:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   37aa8:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   37aaa:	b2db      	uxtb	r3, r3
		_first = 0U;
   37aac:	4298      	cmp	r0, r3
   37aae:	bf08      	it	eq
   37ab0:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   37ab2:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   37ab4:	b17c      	cbz	r4, 37ad6 <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   37ab6:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   37ab8:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   37aba:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   37abc:	4a09      	ldr	r2, [pc, #36]	; (37ae4 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   37abe:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   37ac0:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   37ac2:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   37ac4:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   37ac6:	f7fb ff6d 	bl	339a4 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   37aca:	2201      	movs	r2, #1
   37acc:	4b06      	ldr	r3, [pc, #24]	; (37ae8 <ull_event_done+0x58>)
   37ace:	4611      	mov	r1, r2
   37ad0:	4628      	mov	r0, r5
   37ad2:	f7fb ffdd 	bl	33a90 <mayfly_enqueue>
}
   37ad6:	4620      	mov	r0, r4
   37ad8:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   37ada:	2400      	movs	r4, #0
   37adc:	e7fb      	b.n	37ad6 <ull_event_done+0x46>
   37ade:	bf00      	nop
   37ae0:	20000748 	.word	0x20000748
   37ae4:	20004be8 	.word	0x20004be8
   37ae8:	200008f8 	.word	0x200008f8

00037aec <ull_rxfifo_alloc>:
{
   37aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37af0:	b083      	sub	sp, #12
   37af2:	461d      	mov	r5, r3
   37af4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   37af6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   37afa:	e9cd 0400 	strd	r0, r4, [sp]
   37afe:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   37b02:	b33b      	cbz	r3, 37b54 <ull_rxfifo_alloc+0x68>
   37b04:	1e5c      	subs	r4, r3, #1
   37b06:	f895 b000 	ldrb.w	fp, [r5]
   37b0a:	4688      	mov	r8, r1
   37b0c:	4617      	mov	r7, r2
   37b0e:	b2e4      	uxtb	r4, r4
	last = last + 1;
   37b10:	f10b 0301 	add.w	r3, fp, #1
   37b14:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
   37b18:	45d8      	cmp	r8, fp
   37b1a:	bf08      	it	eq
   37b1c:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
   37b20:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
   37b22:	4648      	mov	r0, r9
   37b24:	d016      	beq.n	37b54 <ull_rxfifo_alloc+0x68>
   37b26:	f7fb fed9 	bl	338dc <mem_acquire>
   37b2a:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
   37b2c:	4650      	mov	r0, sl
		if (!link) {
   37b2e:	b18e      	cbz	r6, 37b54 <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
   37b30:	f7fb fed4 	bl	338dc <mem_acquire>
		if (!rx) {
   37b34:	b188      	cbz	r0, 37b5a <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
   37b36:	2300      	movs	r3, #0
   37b38:	6073      	str	r3, [r6, #4]
		rx->link = link;
   37b3a:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37b3c:	782a      	ldrb	r2, [r5, #0]
   37b3e:	9b00      	ldr	r3, [sp, #0]
   37b40:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37b44:	9b01      	ldr	r3, [sp, #4]
   37b46:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   37b48:	3c01      	subs	r4, #1
   37b4a:	b2e4      	uxtb	r4, r4
   37b4c:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   37b4e:	f885 b000 	strb.w	fp, [r5]
   37b52:	d1dd      	bne.n	37b10 <ull_rxfifo_alloc+0x24>
}
   37b54:	b003      	add	sp, #12
   37b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   37b5a:	4649      	mov	r1, r9
   37b5c:	4630      	mov	r0, r6
}
   37b5e:	b003      	add	sp, #12
   37b60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   37b64:	f7fb bed4 	b.w	33910 <mem_release>

00037b68 <init_reset>:
{
   37b68:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   37b6a:	4c3f      	ldr	r4, [pc, #252]	; (37c68 <init_reset+0x100>)
   37b6c:	4d3f      	ldr	r5, [pc, #252]	; (37c6c <init_reset+0x104>)
   37b6e:	79a2      	ldrb	r2, [r4, #6]
   37b70:	88a1      	ldrh	r1, [r4, #4]
   37b72:	4e3f      	ldr	r6, [pc, #252]	; (37c70 <init_reset+0x108>)
   37b74:	2000      	movs	r0, #0
{
   37b76:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   37b78:	4623      	mov	r3, r4
   37b7a:	8068      	strh	r0, [r5, #2]
   37b7c:	f104 0008 	add.w	r0, r4, #8
   37b80:	f7fb fe7c 	bl	3387c <mem_init>
   37b84:	79e3      	ldrb	r3, [r4, #7]
   37b86:	79a2      	ldrb	r2, [r4, #6]
   37b88:	1d30      	adds	r0, r6, #4
   37b8a:	441a      	add	r2, r3
   37b8c:	2108      	movs	r1, #8
   37b8e:	4633      	mov	r3, r6
   37b90:	f7fb fe74 	bl	3387c <mem_init>
   37b94:	9602      	str	r6, [sp, #8]
   37b96:	462e      	mov	r6, r5
   37b98:	79a3      	ldrb	r3, [r4, #6]
   37b9a:	f816 0b04 	ldrb.w	r0, [r6], #4
   37b9e:	78aa      	ldrb	r2, [r5, #2]
   37ba0:	7869      	ldrb	r1, [r5, #1]
   37ba2:	9303      	str	r3, [sp, #12]
   37ba4:	e9cd 6400 	strd	r6, r4, [sp]
   37ba8:	1ceb      	adds	r3, r5, #3
   37baa:	f7ff ff9f 	bl	37aec <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   37bae:	4b31      	ldr	r3, [pc, #196]	; (37c74 <init_reset+0x10c>)
   37bb0:	2213      	movs	r2, #19
   37bb2:	1d18      	adds	r0, r3, #4
   37bb4:	2144      	movs	r1, #68	; 0x44
   37bb6:	f7fb fe61 	bl	3387c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   37bba:	4b2f      	ldr	r3, [pc, #188]	; (37c78 <init_reset+0x110>)
   37bbc:	2219      	movs	r2, #25
   37bbe:	1d18      	adds	r0, r3, #4
   37bc0:	2108      	movs	r1, #8
   37bc2:	f7fb fe5b 	bl	3387c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   37bc6:	482c      	ldr	r0, [pc, #176]	; (37c78 <init_reset+0x110>)
   37bc8:	f7fb fe88 	bl	338dc <mem_acquire>
	LL_ASSERT(link);
   37bcc:	4604      	mov	r4, r0
   37bce:	b308      	cbz	r0, 37c14 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   37bd0:	4a2a      	ldr	r2, [pc, #168]	; (37c7c <init_reset+0x114>)
   37bd2:	4620      	mov	r0, r4
   37bd4:	1f11      	subs	r1, r2, #4
   37bd6:	f7fb fed7 	bl	33988 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   37bda:	4825      	ldr	r0, [pc, #148]	; (37c70 <init_reset+0x108>)
   37bdc:	f7fb fe7e 	bl	338dc <mem_acquire>
	LL_ASSERT(link);
   37be0:	4604      	mov	r4, r0
   37be2:	b328      	cbz	r0, 37c30 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   37be4:	4a26      	ldr	r2, [pc, #152]	; (37c80 <init_reset+0x118>)
   37be6:	4620      	mov	r0, r4
   37be8:	1f11      	subs	r1, r2, #4
   37bea:	f7fb fecd 	bl	33988 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   37bee:	4822      	ldr	r0, [pc, #136]	; (37c78 <init_reset+0x110>)
   37bf0:	f7fb fe74 	bl	338dc <mem_acquire>
	LL_ASSERT(link);
   37bf4:	4604      	mov	r4, r0
   37bf6:	b348      	cbz	r0, 37c4c <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   37bf8:	4a22      	ldr	r2, [pc, #136]	; (37c84 <init_reset+0x11c>)
   37bfa:	4620      	mov	r0, r4
   37bfc:	1f11      	subs	r1, r2, #4
   37bfe:	f7fb fec3 	bl	33988 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   37c02:	4b21      	ldr	r3, [pc, #132]	; (37c88 <init_reset+0x120>)
   37c04:	2210      	movs	r2, #16
	rx_alloc(UINT8_MAX);
   37c06:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   37c08:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   37c0a:	f7ff f8bb 	bl	36d84 <rx_alloc>
}
   37c0e:	2000      	movs	r0, #0
   37c10:	b004      	add	sp, #16
   37c12:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   37c14:	4a1d      	ldr	r2, [pc, #116]	; (37c8c <init_reset+0x124>)
   37c16:	491e      	ldr	r1, [pc, #120]	; (37c90 <init_reset+0x128>)
   37c18:	481e      	ldr	r0, [pc, #120]	; (37c94 <init_reset+0x12c>)
   37c1a:	f640 0302 	movw	r3, #2050	; 0x802
   37c1e:	f011 fd29 	bl	49674 <printk>
   37c22:	4040      	eors	r0, r0
   37c24:	f380 8811 	msr	BASEPRI, r0
   37c28:	f04f 0003 	mov.w	r0, #3
   37c2c:	df02      	svc	2
   37c2e:	e7cf      	b.n	37bd0 <init_reset+0x68>
	LL_ASSERT(link);
   37c30:	4a16      	ldr	r2, [pc, #88]	; (37c8c <init_reset+0x124>)
   37c32:	4917      	ldr	r1, [pc, #92]	; (37c90 <init_reset+0x128>)
   37c34:	4817      	ldr	r0, [pc, #92]	; (37c94 <init_reset+0x12c>)
   37c36:	f640 030a 	movw	r3, #2058	; 0x80a
   37c3a:	f011 fd1b 	bl	49674 <printk>
   37c3e:	4040      	eors	r0, r0
   37c40:	f380 8811 	msr	BASEPRI, r0
   37c44:	f04f 0003 	mov.w	r0, #3
   37c48:	df02      	svc	2
   37c4a:	e7cb      	b.n	37be4 <init_reset+0x7c>
	LL_ASSERT(link);
   37c4c:	4a0f      	ldr	r2, [pc, #60]	; (37c8c <init_reset+0x124>)
   37c4e:	4910      	ldr	r1, [pc, #64]	; (37c90 <init_reset+0x128>)
   37c50:	4810      	ldr	r0, [pc, #64]	; (37c94 <init_reset+0x12c>)
   37c52:	f640 0312 	movw	r3, #2066	; 0x812
   37c56:	f011 fd0d 	bl	49674 <printk>
   37c5a:	4040      	eors	r0, r0
   37c5c:	f380 8811 	msr	BASEPRI, r0
   37c60:	f04f 0003 	mov.w	r0, #3
   37c64:	df02      	svc	2
   37c66:	e7c7      	b.n	37bf8 <init_reset+0x90>
   37c68:	20000670 	.word	0x20000670
   37c6c:	20000748 	.word	0x20000748
   37c70:	200045d0 	.word	0x200045d0
   37c74:	200046cc 	.word	0x200046cc
   37c78:	20004600 	.word	0x20004600
   37c7c:	20004bf0 	.word	0x20004bf0
   37c80:	20004be8 	.word	0x20004be8
   37c84:	20004be0 	.word	0x20004be0
   37c88:	200045fc 	.word	0x200045fc
   37c8c:	00052600 	.word	0x00052600
   37c90:	000529c8 	.word	0x000529c8
   37c94:	00052460 	.word	0x00052460

00037c98 <ll_init>:
{
   37c98:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   37c9a:	4b31      	ldr	r3, [pc, #196]	; (37d60 <ll_init+0xc8>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   37c9c:	4c31      	ldr	r4, [pc, #196]	; (37d64 <ll_init+0xcc>)
	sem_recv = sem_rx;
   37c9e:	6018      	str	r0, [r3, #0]
{
   37ca0:	b087      	sub	sp, #28
	cntr_init();
   37ca2:	f00a fbf9 	bl	42498 <cntr_init>
	mayfly_init();
   37ca6:	f7fb fe9f 	bl	339e8 <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   37caa:	4a2f      	ldr	r2, [pc, #188]	; (37d68 <ll_init+0xd0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   37cac:	4d2f      	ldr	r5, [pc, #188]	; (37d6c <ll_init+0xd4>)
   37cae:	9505      	str	r5, [sp, #20]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   37cb0:	f04f 0c05 	mov.w	ip, #5
   37cb4:	f882 c008 	strb.w	ip, [r2, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   37cb8:	9404      	str	r4, [sp, #16]
   37cba:	4c2d      	ldr	r4, [pc, #180]	; (37d70 <ll_init+0xd8>)
   37cbc:	9403      	str	r4, [sp, #12]
   37cbe:	4c2d      	ldr	r4, [pc, #180]	; (37d74 <ll_init+0xdc>)
   37cc0:	9200      	str	r2, [sp, #0]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   37cc2:	2002      	movs	r0, #2
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   37cc4:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   37cc6:	210d      	movs	r1, #13
   37cc8:	e9cd 1401 	strd	r1, r4, [sp, #4]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   37ccc:	7410      	strb	r0, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   37cce:	7610      	strb	r0, [r2, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   37cd0:	7013      	strb	r3, [r2, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   37cd2:	2000      	movs	r0, #0
   37cd4:	4a28      	ldr	r2, [pc, #160]	; (37d78 <ll_init+0xe0>)
   37cd6:	f7fc fff7 	bl	34cc8 <ticker_init>
	LL_ASSERT(!err);
   37cda:	2800      	cmp	r0, #0
   37cdc:	d132      	bne.n	37d44 <ll_init+0xac>
	return z_impl_k_sem_init(sem, initial_count, limit);
   37cde:	2201      	movs	r2, #1
   37ce0:	2100      	movs	r1, #0
   37ce2:	4826      	ldr	r0, [pc, #152]	; (37d7c <ll_init+0xe4>)
   37ce4:	f018 fcfe 	bl	506e4 <z_impl_k_sem_init>
	err = lll_init();
   37ce8:	f008 f8ca 	bl	3fe80 <lll_init>
	if (err) {
   37cec:	4604      	mov	r4, r0
   37cee:	b110      	cbz	r0, 37cf6 <ll_init+0x5e>
}
   37cf0:	4620      	mov	r0, r4
   37cf2:	b007      	add	sp, #28
   37cf4:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   37cf6:	f7ff ff37 	bl	37b68 <init_reset>
	if (err) {
   37cfa:	4604      	mov	r4, r0
   37cfc:	2800      	cmp	r0, #0
   37cfe:	d1f7      	bne.n	37cf0 <ll_init+0x58>
	err = lll_adv_init();
   37d00:	f008 fd22 	bl	40748 <lll_adv_init>
	if (err) {
   37d04:	4604      	mov	r4, r0
   37d06:	2800      	cmp	r0, #0
   37d08:	d1f2      	bne.n	37cf0 <ll_init+0x58>
	err = ull_adv_init();
   37d0a:	f000 fd0b 	bl	38724 <ull_adv_init>
	if (err) {
   37d0e:	4604      	mov	r4, r0
   37d10:	2800      	cmp	r0, #0
   37d12:	d1ed      	bne.n	37cf0 <ll_init+0x58>
	err = lll_scan_init();
   37d14:	f009 fca8 	bl	41668 <lll_scan_init>
	if (err) {
   37d18:	4604      	mov	r4, r0
   37d1a:	2800      	cmp	r0, #0
   37d1c:	d1e8      	bne.n	37cf0 <ll_init+0x58>
	err = ull_scan_init();
   37d1e:	f000 febb 	bl	38a98 <ull_scan_init>
	if (err) {
   37d22:	4604      	mov	r4, r0
   37d24:	2800      	cmp	r0, #0
   37d26:	d1e3      	bne.n	37cf0 <ll_init+0x58>
	err = lll_conn_init();
   37d28:	f009 fdd2 	bl	418d0 <lll_conn_init>
	if (err) {
   37d2c:	4604      	mov	r4, r0
   37d2e:	2800      	cmp	r0, #0
   37d30:	d1de      	bne.n	37cf0 <ll_init+0x58>
	err = ull_conn_init();
   37d32:	f002 f959 	bl	39fe8 <ull_conn_init>
	if (err) {
   37d36:	4604      	mov	r4, r0
   37d38:	2800      	cmp	r0, #0
   37d3a:	d1d9      	bne.n	37cf0 <ll_init+0x58>
		ull_filter_reset(true);
   37d3c:	2001      	movs	r0, #1
   37d3e:	f007 f963 	bl	3f008 <ull_filter_reset>
	return  0;
   37d42:	e7d5      	b.n	37cf0 <ll_init+0x58>
	LL_ASSERT(!err);
   37d44:	4a0e      	ldr	r2, [pc, #56]	; (37d80 <ll_init+0xe8>)
   37d46:	490f      	ldr	r1, [pc, #60]	; (37d84 <ll_init+0xec>)
   37d48:	480f      	ldr	r0, [pc, #60]	; (37d88 <ll_init+0xf0>)
   37d4a:	f240 230d 	movw	r3, #525	; 0x20d
   37d4e:	f011 fc91 	bl	49674 <printk>
   37d52:	4040      	eors	r0, r0
   37d54:	f380 8811 	msr	BASEPRI, r0
   37d58:	f04f 0003 	mov.w	r0, #3
   37d5c:	df02      	svc	2
   37d5e:	e7be      	b.n	37cde <ll_init+0x46>
   37d60:	20004bf4 	.word	0x20004bf4
   37d64:	00043081 	.word	0x00043081
   37d68:	20005124 	.word	0x20005124
   37d6c:	000431d1 	.word	0x000431d1
   37d70:	0004301d 	.word	0x0004301d
   37d74:	20004e80 	.word	0x20004e80
   37d78:	20004c10 	.word	0x20004c10
   37d7c:	20004bf8 	.word	0x20004bf8
   37d80:	00052600 	.word	0x00052600
   37d84:	0005263c 	.word	0x0005263c
   37d88:	00052460 	.word	0x00052460

00037d8c <ll_reset>:
{
   37d8c:	b510      	push	{r4, lr}
   37d8e:	b086      	sub	sp, #24
	err = ull_adv_reset();
   37d90:	f000 fcd8 	bl	38744 <ull_adv_reset>
	LL_ASSERT(!err);
   37d94:	2800      	cmp	r0, #0
   37d96:	d133      	bne.n	37e00 <ll_reset+0x74>
	err = ull_scan_reset();
   37d98:	f000 ff00 	bl	38b9c <ull_scan_reset>
	LL_ASSERT(!err);
   37d9c:	2800      	cmp	r0, #0
   37d9e:	d140      	bne.n	37e22 <ll_reset+0x96>
	err = ull_conn_reset();
   37da0:	f002 f924 	bl	39fec <ull_conn_reset>
	LL_ASSERT(!err);
   37da4:	2800      	cmp	r0, #0
   37da6:	d14d      	bne.n	37e44 <ll_reset+0xb8>
	MFIFO_INIT(tx_ack);
   37da8:	4b43      	ldr	r3, [pc, #268]	; (37eb8 <ll_reset+0x12c>)
   37daa:	2400      	movs	r4, #0
   37dac:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   37dae:	4620      	mov	r0, r4
   37db0:	f007 f92a 	bl	3f008 <ull_filter_reset>
	MFIFO_INIT(prep);
   37db4:	4941      	ldr	r1, [pc, #260]	; (37ebc <ll_reset+0x130>)
	MFIFO_INIT(pdu_rx_free);
   37db6:	4a42      	ldr	r2, [pc, #264]	; (37ec0 <ll_reset+0x134>)
	MFIFO_INIT(ll_pdu_rx_free);
   37db8:	4b42      	ldr	r3, [pc, #264]	; (37ec4 <ll_reset+0x138>)
	MFIFO_INIT(prep);
   37dba:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   37dbc:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   37dbe:	805c      	strh	r4, [r3, #2]
   37dc0:	2201      	movs	r2, #1
   37dc2:	4621      	mov	r1, r4
   37dc4:	4668      	mov	r0, sp
   37dc6:	f018 fc8d 	bl	506e4 <z_impl_k_sem_init>
		mfy.param = &sem;
   37dca:	4b3f      	ldr	r3, [pc, #252]	; (37ec8 <ll_reset+0x13c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   37dcc:	4622      	mov	r2, r4
   37dce:	4621      	mov	r1, r4
   37dd0:	2003      	movs	r0, #3
		mfy.param = &sem;
   37dd2:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   37dd6:	f7fb fe5b 	bl	33a90 <mayfly_enqueue>
		LL_ASSERT(!retval);
   37dda:	2800      	cmp	r0, #0
   37ddc:	d15d      	bne.n	37e9a <ll_reset+0x10e>
	return z_impl_k_sem_take(sem, timeout);
   37dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   37de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37de6:	4668      	mov	r0, sp
   37de8:	f00f ff2e 	bl	47c48 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   37dec:	f000 fcc4 	bl	38778 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   37df0:	2800      	cmp	r0, #0
   37df2:	d144      	bne.n	37e7e <ll_reset+0xf2>
	err = init_reset();
   37df4:	f7ff feb8 	bl	37b68 <init_reset>
	LL_ASSERT(!err);
   37df8:	2800      	cmp	r0, #0
   37dfa:	d131      	bne.n	37e60 <ll_reset+0xd4>
}
   37dfc:	b006      	add	sp, #24
   37dfe:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   37e00:	4a32      	ldr	r2, [pc, #200]	; (37ecc <ll_reset+0x140>)
   37e02:	4933      	ldr	r1, [pc, #204]	; (37ed0 <ll_reset+0x144>)
   37e04:	4833      	ldr	r0, [pc, #204]	; (37ed4 <ll_reset+0x148>)
   37e06:	f240 23ad 	movw	r3, #685	; 0x2ad
   37e0a:	f011 fc33 	bl	49674 <printk>
   37e0e:	4040      	eors	r0, r0
   37e10:	f380 8811 	msr	BASEPRI, r0
   37e14:	f04f 0003 	mov.w	r0, #3
   37e18:	df02      	svc	2
	err = ull_scan_reset();
   37e1a:	f000 febf 	bl	38b9c <ull_scan_reset>
	LL_ASSERT(!err);
   37e1e:	2800      	cmp	r0, #0
   37e20:	d0be      	beq.n	37da0 <ll_reset+0x14>
   37e22:	4a2a      	ldr	r2, [pc, #168]	; (37ecc <ll_reset+0x140>)
   37e24:	492a      	ldr	r1, [pc, #168]	; (37ed0 <ll_reset+0x144>)
   37e26:	482b      	ldr	r0, [pc, #172]	; (37ed4 <ll_reset+0x148>)
   37e28:	f240 23b3 	movw	r3, #691	; 0x2b3
   37e2c:	f011 fc22 	bl	49674 <printk>
   37e30:	4040      	eors	r0, r0
   37e32:	f380 8811 	msr	BASEPRI, r0
   37e36:	f04f 0003 	mov.w	r0, #3
   37e3a:	df02      	svc	2
	err = ull_conn_reset();
   37e3c:	f002 f8d6 	bl	39fec <ull_conn_reset>
	LL_ASSERT(!err);
   37e40:	2800      	cmp	r0, #0
   37e42:	d0b1      	beq.n	37da8 <ll_reset+0x1c>
   37e44:	4a21      	ldr	r2, [pc, #132]	; (37ecc <ll_reset+0x140>)
   37e46:	4922      	ldr	r1, [pc, #136]	; (37ed0 <ll_reset+0x144>)
   37e48:	4822      	ldr	r0, [pc, #136]	; (37ed4 <ll_reset+0x148>)
   37e4a:	f240 23de 	movw	r3, #734	; 0x2de
   37e4e:	f011 fc11 	bl	49674 <printk>
   37e52:	4040      	eors	r0, r0
   37e54:	f380 8811 	msr	BASEPRI, r0
   37e58:	f04f 0003 	mov.w	r0, #3
   37e5c:	df02      	svc	2
   37e5e:	e7a3      	b.n	37da8 <ll_reset+0x1c>
	LL_ASSERT(!err);
   37e60:	4a1a      	ldr	r2, [pc, #104]	; (37ecc <ll_reset+0x140>)
   37e62:	491b      	ldr	r1, [pc, #108]	; (37ed0 <ll_reset+0x144>)
   37e64:	481b      	ldr	r0, [pc, #108]	; (37ed4 <ll_reset+0x148>)
   37e66:	f240 3327 	movw	r3, #807	; 0x327
   37e6a:	f011 fc03 	bl	49674 <printk>
   37e6e:	4040      	eors	r0, r0
   37e70:	f380 8811 	msr	BASEPRI, r0
   37e74:	f04f 0003 	mov.w	r0, #3
   37e78:	df02      	svc	2
}
   37e7a:	b006      	add	sp, #24
   37e7c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   37e7e:	4a13      	ldr	r2, [pc, #76]	; (37ecc <ll_reset+0x140>)
   37e80:	4913      	ldr	r1, [pc, #76]	; (37ed0 <ll_reset+0x144>)
   37e82:	4814      	ldr	r0, [pc, #80]	; (37ed4 <ll_reset+0x148>)
   37e84:	f240 331a 	movw	r3, #794	; 0x31a
   37e88:	f011 fbf4 	bl	49674 <printk>
   37e8c:	4040      	eors	r0, r0
   37e8e:	f380 8811 	msr	BASEPRI, r0
   37e92:	f04f 0003 	mov.w	r0, #3
   37e96:	df02      	svc	2
   37e98:	e7ac      	b.n	37df4 <ll_reset+0x68>
		LL_ASSERT(!retval);
   37e9a:	4a0c      	ldr	r2, [pc, #48]	; (37ecc <ll_reset+0x140>)
   37e9c:	490e      	ldr	r1, [pc, #56]	; (37ed8 <ll_reset+0x14c>)
   37e9e:	480d      	ldr	r0, [pc, #52]	; (37ed4 <ll_reset+0x148>)
   37ea0:	f240 330d 	movw	r3, #781	; 0x30d
   37ea4:	f011 fbe6 	bl	49674 <printk>
   37ea8:	4040      	eors	r0, r0
   37eaa:	f380 8811 	msr	BASEPRI, r0
   37eae:	f04f 0003 	mov.w	r0, #3
   37eb2:	df02      	svc	2
   37eb4:	e793      	b.n	37dde <ll_reset+0x52>
   37eb6:	bf00      	nop
   37eb8:	200008b4 	.word	0x200008b4
   37ebc:	200007b0 	.word	0x200007b0
   37ec0:	20000798 	.word	0x20000798
   37ec4:	20000760 	.word	0x20000760
   37ec8:	200008e8 	.word	0x200008e8
   37ecc:	00052600 	.word	0x00052600
   37ed0:	0005263c 	.word	0x0005263c
   37ed4:	00052460 	.word	0x00052460
   37ed8:	00052764 	.word	0x00052764

00037edc <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   37edc:	b510      	push	{r4, lr}
   37ede:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   37ee0:	2400      	movs	r4, #0
   37ee2:	e9cd 4400 	strd	r4, r4, [sp]
   37ee6:	9b04      	ldr	r3, [sp, #16]
   37ee8:	f008 f9ee 	bl	402c8 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   37eec:	b002      	add	sp, #8
   37eee:	bd10      	pop	{r4, pc}

00037ef0 <lll_resume>:

void lll_resume(void *param)
{
   37ef0:	b510      	push	{r4, lr}
   37ef2:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   37ef4:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   37ef6:	691a      	ldr	r2, [r3, #16]
   37ef8:	6999      	ldr	r1, [r3, #24]
   37efa:	2401      	movs	r4, #1
{
   37efc:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   37efe:	4020      	ands	r0, r4
   37f00:	e9cd 0400 	strd	r0, r4, [sp]
   37f04:	6958      	ldr	r0, [r3, #20]
   37f06:	f008 f9df 	bl	402c8 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   37f0a:	b108      	cbz	r0, 37f10 <lll_resume+0x20>
   37f0c:	3077      	adds	r0, #119	; 0x77
   37f0e:	d101      	bne.n	37f14 <lll_resume+0x24>
}
   37f10:	b002      	add	sp, #8
   37f12:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   37f14:	4a06      	ldr	r2, [pc, #24]	; (37f30 <lll_resume+0x40>)
   37f16:	4907      	ldr	r1, [pc, #28]	; (37f34 <lll_resume+0x44>)
   37f18:	4807      	ldr	r0, [pc, #28]	; (37f38 <lll_resume+0x48>)
   37f1a:	234f      	movs	r3, #79	; 0x4f
   37f1c:	f011 fbaa 	bl	49674 <printk>
   37f20:	4040      	eors	r0, r0
   37f22:	f380 8811 	msr	BASEPRI, r0
   37f26:	f04f 0003 	mov.w	r0, #3
   37f2a:	df02      	svc	2
}
   37f2c:	b002      	add	sp, #8
   37f2e:	bd10      	pop	{r4, pc}
   37f30:	0005276c 	.word	0x0005276c
   37f34:	000527b0 	.word	0x000527b0
   37f38:	00052460 	.word	0x00052460

00037f3c <ticker_stop_cb>:
{
   37f3c:	b530      	push	{r4, r5, lr}
   37f3e:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   37f40:	4b19      	ldr	r3, [pc, #100]	; (37fa8 <ticker_stop_cb+0x6c>)
{
   37f42:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   37f44:	4a19      	ldr	r2, [pc, #100]	; (37fac <ticker_stop_cb+0x70>)
   37f46:	1aeb      	subs	r3, r5, r3
   37f48:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   37f4c:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
   37f50:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   37f54:	d119      	bne.n	37f8a <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   37f56:	1ca2      	adds	r2, r4, #2
   37f58:	4b15      	ldr	r3, [pc, #84]	; (37fb0 <ticker_stop_cb+0x74>)
   37f5a:	9500      	str	r5, [sp, #0]
   37f5c:	b2d2      	uxtb	r2, r2
   37f5e:	2101      	movs	r1, #1
   37f60:	2000      	movs	r0, #0
   37f62:	f7fc fffb 	bl	34f5c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   37f66:	f030 0302 	bics.w	r3, r0, #2
   37f6a:	d00c      	beq.n	37f86 <ticker_stop_cb+0x4a>
   37f6c:	4a11      	ldr	r2, [pc, #68]	; (37fb4 <ticker_stop_cb+0x78>)
   37f6e:	4912      	ldr	r1, [pc, #72]	; (37fb8 <ticker_stop_cb+0x7c>)
   37f70:	4812      	ldr	r0, [pc, #72]	; (37fbc <ticker_stop_cb+0x80>)
   37f72:	f640 03d2 	movw	r3, #2258	; 0x8d2
   37f76:	f011 fb7d 	bl	49674 <printk>
   37f7a:	4040      	eors	r0, r0
   37f7c:	f380 8811 	msr	BASEPRI, r0
   37f80:	f04f 0003 	mov.w	r0, #3
   37f84:	df02      	svc	2
}
   37f86:	b003      	add	sp, #12
   37f88:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   37f8a:	4a0a      	ldr	r2, [pc, #40]	; (37fb4 <ticker_stop_cb+0x78>)
   37f8c:	490c      	ldr	r1, [pc, #48]	; (37fc0 <ticker_stop_cb+0x84>)
   37f8e:	480b      	ldr	r0, [pc, #44]	; (37fbc <ticker_stop_cb+0x80>)
   37f90:	f640 03cd 	movw	r3, #2253	; 0x8cd
   37f94:	f011 fb6e 	bl	49674 <printk>
   37f98:	4040      	eors	r0, r0
   37f9a:	f380 8811 	msr	BASEPRI, r0
   37f9e:	f04f 0003 	mov.w	r0, #3
   37fa2:	df02      	svc	2
   37fa4:	e7d7      	b.n	37f56 <ticker_stop_cb+0x1a>
   37fa6:	bf00      	nop
   37fa8:	2000515c 	.word	0x2000515c
   37fac:	88888889 	.word	0x88888889
   37fb0:	00038059 	.word	0x00038059
   37fb4:	000527c4 	.word	0x000527c4
   37fb8:	00052810 	.word	0x00052810
   37fbc:	00052460 	.word	0x00052460
   37fc0:	00052804 	.word	0x00052804

00037fc4 <disabled_cb>:
{
   37fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   37fc6:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   37fc8:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   37fca:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   37fcc:	b1d7      	cbz	r7, 38004 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   37fce:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   37fd0:	2300      	movs	r3, #0
   37fd2:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   37fd4:	b34c      	cbz	r4, 3802a <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   37fd6:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   37fd8:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
   37fda:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   37fdc:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   37fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
   37fe2:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   37fe4:	221e      	movs	r2, #30
   37fe6:	f104 001c 	add.w	r0, r4, #28
   37fea:	f013 fc59 	bl	4b8a0 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   37fee:	233c      	movs	r3, #60	; 0x3c
   37ff0:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   37ff2:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   37ff4:	4621      	mov	r1, r4
   37ff6:	4638      	mov	r0, r7
   37ff8:	f7ff fab6 	bl	37568 <ll_rx_put>
}
   37ffc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   38000:	f7ff babc 	b.w	3757c <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   38004:	4a10      	ldr	r2, [pc, #64]	; (38048 <disabled_cb+0x84>)
   38006:	4911      	ldr	r1, [pc, #68]	; (3804c <disabled_cb+0x88>)
   38008:	4811      	ldr	r0, [pc, #68]	; (38050 <disabled_cb+0x8c>)
   3800a:	f640 131a 	movw	r3, #2330	; 0x91a
   3800e:	f011 fb31 	bl	49674 <printk>
   38012:	4040      	eors	r0, r0
   38014:	f380 8811 	msr	BASEPRI, r0
   38018:	f04f 0003 	mov.w	r0, #3
   3801c:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   3801e:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   38020:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   38022:	2300      	movs	r3, #0
   38024:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   38026:	2c00      	cmp	r4, #0
   38028:	d1d5      	bne.n	37fd6 <disabled_cb+0x12>
   3802a:	4a07      	ldr	r2, [pc, #28]	; (38048 <disabled_cb+0x84>)
   3802c:	4909      	ldr	r1, [pc, #36]	; (38054 <disabled_cb+0x90>)
   3802e:	4808      	ldr	r0, [pc, #32]	; (38050 <disabled_cb+0x8c>)
   38030:	f640 131e 	movw	r3, #2334	; 0x91e
   38034:	f011 fb1e 	bl	49674 <printk>
   38038:	4040      	eors	r0, r0
   3803a:	f380 8811 	msr	BASEPRI, r0
   3803e:	f04f 0003 	mov.w	r0, #3
   38042:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   38044:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   38046:	e7c6      	b.n	37fd6 <disabled_cb+0x12>
   38048:	000527c4 	.word	0x000527c4
   3804c:	0005282c 	.word	0x0005282c
   38050:	00052460 	.word	0x00052460
   38054:	00052840 	.word	0x00052840

00038058 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   38058:	b100      	cbz	r0, 3805c <ticker_stop_op_cb+0x4>
   3805a:	4770      	bx	lr
	mfy.param = param;
   3805c:	4b0c      	ldr	r3, [pc, #48]	; (38090 <ticker_stop_op_cb+0x38>)
{
   3805e:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   38060:	4602      	mov	r2, r0
   38062:	460c      	mov	r4, r1
   38064:	2002      	movs	r0, #2
   38066:	2101      	movs	r1, #1
	mfy.param = param;
   38068:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   3806a:	f7fb fd11 	bl	33a90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   3806e:	b900      	cbnz	r0, 38072 <ticker_stop_op_cb+0x1a>
}
   38070:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   38072:	4a08      	ldr	r2, [pc, #32]	; (38094 <ticker_stop_op_cb+0x3c>)
   38074:	4908      	ldr	r1, [pc, #32]	; (38098 <ticker_stop_op_cb+0x40>)
   38076:	4809      	ldr	r0, [pc, #36]	; (3809c <ticker_stop_op_cb+0x44>)
   38078:	f640 03ee 	movw	r3, #2286	; 0x8ee
   3807c:	f011 fafa 	bl	49674 <printk>
   38080:	4040      	eors	r0, r0
   38082:	f380 8811 	msr	BASEPRI, r0
   38086:	f04f 0003 	mov.w	r0, #3
   3808a:	df02      	svc	2
}
   3808c:	bd10      	pop	{r4, pc}
   3808e:	bf00      	nop
   38090:	20000958 	.word	0x20000958
   38094:	000527c4 	.word	0x000527c4
   38098:	0005273c 	.word	0x0005273c
   3809c:	00052460 	.word	0x00052460

000380a0 <adv_disable>:
{
   380a0:	b538      	push	{r3, r4, r5, lr}
   380a2:	7803      	ldrb	r3, [r0, #0]
   380a4:	4604      	mov	r4, r0
	if (ull_ref_get(hdr)) {
   380a6:	2b00      	cmp	r3, #0
   380a8:	d02c      	beq.n	38104 <adv_disable+0x64>
		mfy.param = &adv->lll;
   380aa:	4d19      	ldr	r5, [pc, #100]	; (38110 <adv_disable+0x70>)
		LL_ASSERT(!hdr->disabled_cb);
   380ac:	6943      	ldr	r3, [r0, #20]
		mfy.param = &adv->lll;
   380ae:	f100 011c 	add.w	r1, r0, #28
   380b2:	60a9      	str	r1, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   380b4:	b16b      	cbz	r3, 380d2 <adv_disable+0x32>
   380b6:	4a17      	ldr	r2, [pc, #92]	; (38114 <adv_disable+0x74>)
   380b8:	4917      	ldr	r1, [pc, #92]	; (38118 <adv_disable+0x78>)
   380ba:	4818      	ldr	r0, [pc, #96]	; (3811c <adv_disable+0x7c>)
   380bc:	f640 1303 	movw	r3, #2307	; 0x903
   380c0:	f011 fad8 	bl	49674 <printk>
   380c4:	4040      	eors	r0, r0
   380c6:	f380 8811 	msr	BASEPRI, r0
   380ca:	f04f 0003 	mov.w	r0, #3
   380ce:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   380d0:	68a9      	ldr	r1, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   380d2:	4813      	ldr	r0, [pc, #76]	; (38120 <adv_disable+0x80>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   380d4:	4b0e      	ldr	r3, [pc, #56]	; (38110 <adv_disable+0x70>)
   380d6:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   380d8:	e9c4 0105 	strd	r0, r1, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   380dc:	4611      	mov	r1, r2
   380de:	2001      	movs	r0, #1
   380e0:	f7fb fcd6 	bl	33a90 <mayfly_enqueue>
		LL_ASSERT(!ret);
   380e4:	b900      	cbnz	r0, 380e8 <adv_disable+0x48>
}
   380e6:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   380e8:	4a0a      	ldr	r2, [pc, #40]	; (38114 <adv_disable+0x74>)
   380ea:	490e      	ldr	r1, [pc, #56]	; (38124 <adv_disable+0x84>)
   380ec:	480b      	ldr	r0, [pc, #44]	; (3811c <adv_disable+0x7c>)
   380ee:	f640 130a 	movw	r3, #2314	; 0x90a
   380f2:	f011 fabf 	bl	49674 <printk>
   380f6:	4040      	eors	r0, r0
   380f8:	f380 8811 	msr	BASEPRI, r0
   380fc:	f04f 0003 	mov.w	r0, #3
   38100:	df02      	svc	2
}
   38102:	bd38      	pop	{r3, r4, r5, pc}
   38104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   38108:	301c      	adds	r0, #28
   3810a:	f7ff bf5b 	b.w	37fc4 <disabled_cb>
   3810e:	bf00      	nop
   38110:	20000948 	.word	0x20000948
   38114:	000527c4 	.word	0x000527c4
   38118:	00052858 	.word	0x00052858
   3811c:	00052460 	.word	0x00052460
   38120:	00037fc5 	.word	0x00037fc5
   38124:	0005273c 	.word	0x0005273c

00038128 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   38128:	b900      	cbnz	r0, 3812c <ticker_update_op_cb+0x4>
   3812a:	4770      	bx	lr
{
   3812c:	b510      	push	{r4, lr}
   3812e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   38130:	f7ff faf8 	bl	37724 <ull_disable_mark_get>
   38134:	4284      	cmp	r4, r0
   38136:	d00c      	beq.n	38152 <ticker_update_op_cb+0x2a>
   38138:	4a06      	ldr	r2, [pc, #24]	; (38154 <ticker_update_op_cb+0x2c>)
   3813a:	4907      	ldr	r1, [pc, #28]	; (38158 <ticker_update_op_cb+0x30>)
   3813c:	4807      	ldr	r0, [pc, #28]	; (3815c <ticker_update_op_cb+0x34>)
   3813e:	f640 03bf 	movw	r3, #2239	; 0x8bf
   38142:	f011 fa97 	bl	49674 <printk>
   38146:	4040      	eors	r0, r0
   38148:	f380 8811 	msr	BASEPRI, r0
   3814c:	f04f 0003 	mov.w	r0, #3
   38150:	df02      	svc	2
}
   38152:	bd10      	pop	{r4, pc}
   38154:	000527c4 	.word	0x000527c4
   38158:	0005286c 	.word	0x0005286c
   3815c:	00052460 	.word	0x00052460

00038160 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   38160:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   38162:	4b13      	ldr	r3, [pc, #76]	; (381b0 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   38164:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   38166:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   3816a:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
   3816e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   38172:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   38176:	f022 0202 	bic.w	r2, r2, #2
   3817a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   3817c:	f042 020e 	orr.w	r2, r2, #14
   38180:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   38182:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   38184:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   38186:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   3818a:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   3818e:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   38192:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
   38196:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   38198:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   3819a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   3819e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   381a2:	2204      	movs	r2, #4
   381a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   381a6:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   381a8:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   381aa:	f85d fb04 	ldr.w	pc, [sp], #4
   381ae:	bf00      	nop
   381b0:	2000515c 	.word	0x2000515c

000381b4 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   381b4:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   381b6:	4c1b      	ldr	r4, [pc, #108]	; (38224 <conn_release.constprop.0+0x70>)
   381b8:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   381ba:	6dab      	ldr	r3, [r5, #88]	; 0x58
   381bc:	b163      	cbz	r3, 381d8 <conn_release.constprop.0+0x24>
   381be:	4a1a      	ldr	r2, [pc, #104]	; (38228 <conn_release.constprop.0+0x74>)
   381c0:	491a      	ldr	r1, [pc, #104]	; (3822c <conn_release.constprop.0+0x78>)
   381c2:	481b      	ldr	r0, [pc, #108]	; (38230 <conn_release.constprop.0+0x7c>)
   381c4:	f640 1348 	movw	r3, #2376	; 0x948
   381c8:	f011 fa54 	bl	49674 <printk>
   381cc:	4040      	eors	r0, r0
   381ce:	f380 8811 	msr	BASEPRI, r0
   381d2:	f04f 0003 	mov.w	r0, #3
   381d6:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   381d8:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   381dc:	f105 0048 	add.w	r0, r5, #72	; 0x48
   381e0:	f7fb fbd6 	bl	33990 <memq_deinit>
	LL_ASSERT(link);
   381e4:	4606      	mov	r6, r0
   381e6:	b170      	cbz	r0, 38206 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   381e8:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   381ea:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   381ec:	f001 fbe8 	bl	399c0 <ll_conn_release>
	adv->lll.conn = NULL;
   381f0:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   381f2:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   381f4:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   381f6:	f7ff f9b1 	bl	3755c <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   381fa:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   381fc:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   381fe:	f7ff f9a1 	bl	37544 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   38202:	6625      	str	r5, [r4, #96]	; 0x60
}
   38204:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   38206:	4a08      	ldr	r2, [pc, #32]	; (38228 <conn_release.constprop.0+0x74>)
   38208:	490a      	ldr	r1, [pc, #40]	; (38234 <conn_release.constprop.0+0x80>)
   3820a:	4809      	ldr	r0, [pc, #36]	; (38230 <conn_release.constprop.0+0x7c>)
   3820c:	f640 134a 	movw	r3, #2378	; 0x94a
   38210:	f011 fa30 	bl	49674 <printk>
   38214:	4040      	eors	r0, r0
   38216:	f380 8811 	msr	BASEPRI, r0
   3821a:	f04f 0003 	mov.w	r0, #3
   3821e:	df02      	svc	2
   38220:	e7e2      	b.n	381e8 <conn_release.constprop.0+0x34>
   38222:	bf00      	nop
   38224:	2000515c 	.word	0x2000515c
   38228:	000527c4 	.word	0x000527c4
   3822c:	0005289c 	.word	0x0005289c
   38230:	00052460 	.word	0x00052460
   38234:	000529c8 	.word	0x000529c8

00038238 <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
   38238:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
   3823a:	4c50      	ldr	r4, [pc, #320]	; (3837c <disable.part.0+0x144>)
static inline uint8_t disable(uint8_t handle)
   3823c:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   3823e:	4620      	mov	r0, r4
   38240:	f7ff fa58 	bl	376f4 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   38244:	4284      	cmp	r4, r0
   38246:	d00c      	beq.n	38262 <disable.part.0+0x2a>
   38248:	4a4d      	ldr	r2, [pc, #308]	; (38380 <disable.part.0+0x148>)
   3824a:	494e      	ldr	r1, [pc, #312]	; (38384 <disable.part.0+0x14c>)
   3824c:	484e      	ldr	r0, [pc, #312]	; (38388 <disable.part.0+0x150>)
   3824e:	f640 13ff 	movw	r3, #2559	; 0x9ff
   38252:	f011 fa0f 	bl	49674 <printk>
   38256:	4040      	eors	r0, r0
   38258:	f380 8811 	msr	BASEPRI, r0
   3825c:	f04f 0003 	mov.w	r0, #3
   38260:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   38262:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   38266:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   38268:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   3826a:	d50d      	bpl.n	38288 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   3826c:	2102      	movs	r1, #2
   3826e:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   38270:	4b46      	ldr	r3, [pc, #280]	; (3838c <disable.part.0+0x154>)
   38272:	9500      	str	r5, [sp, #0]
   38274:	2103      	movs	r1, #3
   38276:	2201      	movs	r2, #1
   38278:	2000      	movs	r0, #0
   3827a:	f7fc fe6f 	bl	34f5c <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   3827e:	4629      	mov	r1, r5
   38280:	f7ff fa10 	bl	376a4 <ull_ticker_status_take>
		if (ret) {
   38284:	2800      	cmp	r0, #0
   38286:	d15e      	bne.n	38346 <disable.part.0+0x10e>
	ret_cb = TICKER_STATUS_BUSY;
   38288:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   3828a:	2103      	movs	r1, #3
   3828c:	4b3f      	ldr	r3, [pc, #252]	; (3838c <disable.part.0+0x154>)
   3828e:	9500      	str	r5, [sp, #0]
   38290:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   38292:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   38294:	f7fc fe62 	bl	34f5c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   38298:	4629      	mov	r1, r5
   3829a:	f7ff fa03 	bl	376a4 <ull_ticker_status_take>
	if (ret) {
   3829e:	bb50      	cbnz	r0, 382f6 <disable.part.0+0xbe>
	err = ull_disable(&adv->lll);
   382a0:	483b      	ldr	r0, [pc, #236]	; (38390 <disable.part.0+0x158>)
   382a2:	f7ff fa63 	bl	3776c <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   382a6:	b108      	cbz	r0, 382ac <disable.part.0+0x74>
   382a8:	3078      	adds	r0, #120	; 0x78
   382aa:	d139      	bne.n	38320 <disable.part.0+0xe8>
	mark = ull_disable_unmark(adv);
   382ac:	4833      	ldr	r0, [pc, #204]	; (3837c <disable.part.0+0x144>)
   382ae:	f7ff fa2d 	bl	3770c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   382b2:	4284      	cmp	r4, r0
   382b4:	d00c      	beq.n	382d0 <disable.part.0+0x98>
   382b6:	4a32      	ldr	r2, [pc, #200]	; (38380 <disable.part.0+0x148>)
   382b8:	4932      	ldr	r1, [pc, #200]	; (38384 <disable.part.0+0x14c>)
   382ba:	4833      	ldr	r0, [pc, #204]	; (38388 <disable.part.0+0x150>)
   382bc:	f640 2321 	movw	r3, #2593	; 0xa21
   382c0:	f011 f9d8 	bl	49674 <printk>
   382c4:	4040      	eors	r0, r0
   382c6:	f380 8811 	msr	BASEPRI, r0
   382ca:	f04f 0003 	mov.w	r0, #3
   382ce:	df02      	svc	2
	if (adv->lll.conn) {
   382d0:	6a23      	ldr	r3, [r4, #32]
   382d2:	b10b      	cbz	r3, 382d8 <disable.part.0+0xa0>
		conn_release(adv);
   382d4:	f7ff ff6e 	bl	381b4 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   382d8:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   382dc:	f36f 0300 	bfc	r3, #0, #1
   382e0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   382e4:	2000      	movs	r0, #0
   382e6:	f000 fc91 	bl	38c0c <ull_scan_is_enabled_get>
   382ea:	4604      	mov	r4, r0
   382ec:	2800      	cmp	r0, #0
   382ee:	d03f      	beq.n	38370 <disable.part.0+0x138>
	return 0;
   382f0:	2000      	movs	r0, #0
}
   382f2:	b005      	add	sp, #20
   382f4:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   382f6:	4821      	ldr	r0, [pc, #132]	; (3837c <disable.part.0+0x144>)
   382f8:	f7ff fa08 	bl	3770c <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   382fc:	4284      	cmp	r4, r0
   382fe:	d034      	beq.n	3836a <disable.part.0+0x132>
   38300:	4a1f      	ldr	r2, [pc, #124]	; (38380 <disable.part.0+0x148>)
   38302:	4920      	ldr	r1, [pc, #128]	; (38384 <disable.part.0+0x14c>)
   38304:	4820      	ldr	r0, [pc, #128]	; (38388 <disable.part.0+0x150>)
   38306:	f640 2318 	movw	r3, #2584	; 0xa18
   3830a:	f011 f9b3 	bl	49674 <printk>
   3830e:	4040      	eors	r0, r0
   38310:	f380 8811 	msr	BASEPRI, r0
   38314:	f04f 0003 	mov.w	r0, #3
   38318:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   3831a:	200c      	movs	r0, #12
}
   3831c:	b005      	add	sp, #20
   3831e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || (err == -EALREADY));
   38320:	4a17      	ldr	r2, [pc, #92]	; (38380 <disable.part.0+0x148>)
   38322:	491c      	ldr	r1, [pc, #112]	; (38394 <disable.part.0+0x15c>)
   38324:	4818      	ldr	r0, [pc, #96]	; (38388 <disable.part.0+0x150>)
   38326:	f640 231e 	movw	r3, #2590	; 0xa1e
   3832a:	f011 f9a3 	bl	49674 <printk>
   3832e:	4040      	eors	r0, r0
   38330:	f380 8811 	msr	BASEPRI, r0
   38334:	f04f 0003 	mov.w	r0, #3
   38338:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   3833a:	4810      	ldr	r0, [pc, #64]	; (3837c <disable.part.0+0x144>)
   3833c:	f7ff f9e6 	bl	3770c <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   38340:	4284      	cmp	r4, r0
   38342:	d1b8      	bne.n	382b6 <disable.part.0+0x7e>
   38344:	e7c4      	b.n	382d0 <disable.part.0+0x98>
			mark = ull_disable_unmark(adv);
   38346:	480d      	ldr	r0, [pc, #52]	; (3837c <disable.part.0+0x144>)
   38348:	f7ff f9e0 	bl	3770c <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   3834c:	4284      	cmp	r4, r0
   3834e:	d00c      	beq.n	3836a <disable.part.0+0x132>
   38350:	4a0b      	ldr	r2, [pc, #44]	; (38380 <disable.part.0+0x148>)
   38352:	490c      	ldr	r1, [pc, #48]	; (38384 <disable.part.0+0x14c>)
   38354:	480c      	ldr	r0, [pc, #48]	; (38388 <disable.part.0+0x150>)
   38356:	f640 230a 	movw	r3, #2570	; 0xa0a
   3835a:	f011 f98b 	bl	49674 <printk>
   3835e:	4040      	eors	r0, r0
   38360:	f380 8811 	msr	BASEPRI, r0
   38364:	f04f 0003 	mov.w	r0, #3
   38368:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   3836a:	200c      	movs	r0, #12
}
   3836c:	b005      	add	sp, #20
   3836e:	bd30      	pop	{r4, r5, pc}
		ull_filter_adv_scan_state_cb(0);
   38370:	f006 feca 	bl	3f108 <ull_filter_adv_scan_state_cb>
	return 0;
   38374:	4620      	mov	r0, r4
}
   38376:	b005      	add	sp, #20
   38378:	bd30      	pop	{r4, r5, pc}
   3837a:	bf00      	nop
   3837c:	2000515c 	.word	0x2000515c
   38380:	000527c4 	.word	0x000527c4
   38384:	000528b0 	.word	0x000528b0
   38388:	00052460 	.word	0x00052460
   3838c:	00036ba1 	.word	0x00036ba1
   38390:	20005178 	.word	0x20005178
   38394:	000528bc 	.word	0x000528bc

00038398 <adv_time_get.constprop.0.isra.0>:
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   38398:	7803      	ldrb	r3, [r0, #0]
   3839a:	f003 030f 	and.w	r3, r3, #15
   3839e:	2b02      	cmp	r3, #2
   383a0:	d025      	beq.n	383ee <adv_time_get.constprop.0.isra.0+0x56>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   383a2:	2b01      	cmp	r3, #1
   383a4:	d00d      	beq.n	383c2 <adv_time_get.constprop.0.isra.0+0x2a>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   383a6:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   383a8:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   383aa:	b19b      	cbz	r3, 383d4 <adv_time_get.constprop.0.isra.0+0x3c>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   383ac:	2b06      	cmp	r3, #6
   383ae:	d011      	beq.n	383d4 <adv_time_get.constprop.0.isra.0+0x3c>
   383b0:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   383b4:	3a01      	subs	r2, #1
   383b6:	f44f 702a 	mov.w	r0, #680	; 0x2a8
			time_us += (BYTES2US(adv_size, PHY_1M) +
   383ba:	fb02 0001 	mla	r0, r2, r1, r0
   383be:	b280      	uxth	r0, r0
}
   383c0:	4770      	bx	lr
			time_us += (BYTES2US(adv_size, PHY_1M) +
   383c2:	f240 2116 	movw	r1, #534	; 0x216
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   383c6:	3a01      	subs	r2, #1
   383c8:	f44f 6087 	mov.w	r0, #1080	; 0x438
			time_us += (BYTES2US(adv_size, PHY_1M) +
   383cc:	fb02 0001 	mla	r0, r2, r1, r0
   383d0:	b280      	uxth	r0, r0
}
   383d2:	4770      	bx	lr
				adv_size += pdu->len;
   383d4:	7843      	ldrb	r3, [r0, #1]
   383d6:	3310      	adds	r3, #16
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   383d8:	00db      	lsls	r3, r3, #3
   383da:	f501 705c 	add.w	r0, r1, #880	; 0x370
   383de:	4418      	add	r0, r3
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   383e0:	f503 71b3 	add.w	r1, r3, #358	; 0x166
   383e4:	3a01      	subs	r2, #1
			time_us += (BYTES2US(adv_size, PHY_1M) +
   383e6:	fb02 0001 	mla	r0, r2, r1, r0
   383ea:	b280      	uxth	r0, r0
}
   383ec:	4770      	bx	lr
				   rxtx_turn_us * (adv_chn_cnt - 1);
   383ee:	1e53      	subs	r3, r2, #1
			adv_size += pdu->len;
   383f0:	7841      	ldrb	r1, [r0, #1]
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   383f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   383f6:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
   383fa:	0040      	lsls	r0, r0, #1
   383fc:	f101 0310 	add.w	r3, r1, #16
   38400:	00db      	lsls	r3, r3, #3
   38402:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   38406:	fb03 0202 	mla	r2, r3, r2, r0
   3840a:	b290      	uxth	r0, r2
   3840c:	4770      	bx	lr
   3840e:	bf00      	nop

00038410 <ticker_cb>:
{
   38410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38414:	461d      	mov	r5, r3
   38416:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   38418:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3841c:	429d      	cmp	r5, r3
{
   3841e:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   38422:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   38424:	d018      	beq.n	38458 <ticker_cb+0x48>
	return ++hdr->ref;
   38426:	7823      	ldrb	r3, [r4, #0]
   38428:	3301      	adds	r3, #1
   3842a:	b2db      	uxtb	r3, r3
   3842c:	4607      	mov	r7, r0
   3842e:	4616      	mov	r6, r2
   38430:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   38432:	2b00      	cmp	r3, #0
   38434:	d061      	beq.n	384fa <ticker_cb+0xea>
		p.ticks_at_expire = ticks_at_expire;
   38436:	4938      	ldr	r1, [pc, #224]	; (38518 <ticker_cb+0x108>)
		mfy.param = &p;
   38438:	4b38      	ldr	r3, [pc, #224]	; (3851c <ticker_cb+0x10c>)
		p.lazy = lazy;
   3843a:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   3843c:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38440:	2200      	movs	r2, #0
		p.param = lll;
   38442:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   38444:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   38448:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   3844c:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3844e:	2001      	movs	r0, #1
   38450:	4611      	mov	r1, r2
   38452:	f7fb fb1d 	bl	33a90 <mayfly_enqueue>
		LL_ASSERT(!ret);
   38456:	b938      	cbnz	r0, 38468 <ticker_cb+0x58>
	if (!lll->is_hdcd)
   38458:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   3845c:	f010 0501 	ands.w	r5, r0, #1
   38460:	d014      	beq.n	3848c <ticker_cb+0x7c>
}
   38462:	b00a      	add	sp, #40	; 0x28
   38464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   38468:	4a2d      	ldr	r2, [pc, #180]	; (38520 <ticker_cb+0x110>)
   3846a:	492e      	ldr	r1, [pc, #184]	; (38524 <ticker_cb+0x114>)
   3846c:	482e      	ldr	r0, [pc, #184]	; (38528 <ticker_cb+0x118>)
   3846e:	f640 0392 	movw	r3, #2194	; 0x892
   38472:	f011 f8ff 	bl	49674 <printk>
   38476:	4040      	eors	r0, r0
   38478:	f380 8811 	msr	BASEPRI, r0
   3847c:	f04f 0003 	mov.w	r0, #3
   38480:	df02      	svc	2
	if (!lll->is_hdcd)
   38482:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   38486:	f010 0501 	ands.w	r5, r0, #1
   3848a:	d1ea      	bne.n	38462 <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   3848c:	2104      	movs	r1, #4
   3848e:	a809      	add	r0, sp, #36	; 0x24
   38490:	f007 fd4c 	bl	3ff2c <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   38494:	9b09      	ldr	r3, [sp, #36]	; 0x24
   38496:	4a25      	ldr	r2, [pc, #148]	; (3852c <ticker_cb+0x11c>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38498:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   3849a:	fba2 1203 	umull	r1, r2, r2, r3
   3849e:	1a99      	subs	r1, r3, r2
   384a0:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   384a4:	0a12      	lsrs	r2, r2, #8
   384a6:	f240 1147 	movw	r1, #327	; 0x147
   384aa:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   384ae:	4a20      	ldr	r2, [pc, #128]	; (38530 <ticker_cb+0x120>)
   384b0:	4920      	ldr	r1, [pc, #128]	; (38534 <ticker_cb+0x124>)
   384b2:	1aa2      	subs	r2, r4, r2
   384b4:	fba1 1202 	umull	r1, r2, r1, r2
   384b8:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   384ba:	491f      	ldr	r1, [pc, #124]	; (38538 <ticker_cb+0x128>)
   384bc:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   384be:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   384c0:	e9cd 5104 	strd	r5, r1, [sp, #16]
   384c4:	e9cd 5502 	strd	r5, r5, [sp, #8]
   384c8:	e9cd 5500 	strd	r5, r5, [sp]
   384cc:	b2d2      	uxtb	r2, r2
   384ce:	2101      	movs	r1, #1
   384d0:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   384d2:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   384d4:	f7fc fd2a 	bl	34f2c <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   384d8:	f030 0302 	bics.w	r3, r0, #2
   384dc:	d0c1      	beq.n	38462 <ticker_cb+0x52>
   384de:	4a10      	ldr	r2, [pc, #64]	; (38520 <ticker_cb+0x110>)
   384e0:	4916      	ldr	r1, [pc, #88]	; (3853c <ticker_cb+0x12c>)
   384e2:	4811      	ldr	r0, [pc, #68]	; (38528 <ticker_cb+0x118>)
   384e4:	f240 732c 	movw	r3, #1836	; 0x72c
   384e8:	f011 f8c4 	bl	49674 <printk>
   384ec:	4040      	eors	r0, r0
   384ee:	f380 8811 	msr	BASEPRI, r0
   384f2:	f04f 0003 	mov.w	r0, #3
   384f6:	df02      	svc	2
}
   384f8:	e7b3      	b.n	38462 <ticker_cb+0x52>
		LL_ASSERT(ref);
   384fa:	4a09      	ldr	r2, [pc, #36]	; (38520 <ticker_cb+0x110>)
   384fc:	4910      	ldr	r1, [pc, #64]	; (38540 <ticker_cb+0x130>)
   384fe:	480a      	ldr	r0, [pc, #40]	; (38528 <ticker_cb+0x118>)
   38500:	f640 0385 	movw	r3, #2181	; 0x885
   38504:	f011 f8b6 	bl	49674 <printk>
   38508:	4040      	eors	r0, r0
   3850a:	f380 8811 	msr	BASEPRI, r0
   3850e:	f04f 0003 	mov.w	r0, #3
   38512:	df02      	svc	2
   38514:	e78f      	b.n	38436 <ticker_cb+0x26>
   38516:	bf00      	nop
   38518:	200051e0 	.word	0x200051e0
   3851c:	20000938 	.word	0x20000938
   38520:	000527c4 	.word	0x000527c4
   38524:	0005273c 	.word	0x0005273c
   38528:	00052460 	.word	0x00052460
   3852c:	90d4f121 	.word	0x90d4f121
   38530:	2000515c 	.word	0x2000515c
   38534:	88888889 	.word	0x88888889
   38538:	00038129 	.word	0x00038129
   3853c:	00052810 	.word	0x00052810
   38540:	000528d4 	.word	0x000528d4

00038544 <ll_adv_params_set>:
{
   38544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!adv || adv->is_enabled) {
   38548:	4c6f      	ldr	r4, [pc, #444]	; (38708 <ll_adv_params_set+0x1c4>)
{
   3854a:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   3854c:	4b6f      	ldr	r3, [pc, #444]	; (3870c <ll_adv_params_set+0x1c8>)
	if (!adv || adv->is_enabled) {
   3854e:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   38552:	4680      	mov	r8, r0
   38554:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   38556:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   3855a:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
   3855c:	f016 0601 	ands.w	r6, r6, #1
{
   38560:	4615      	mov	r5, r2
   38562:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
   38566:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   3856a:	9000      	str	r0, [sp, #0]
   3856c:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   38570:	f040 808b 	bne.w	3868a <ll_adv_params_set+0x146>
	adv->lll.chan_map = chan_map;
   38574:	f00c 0c07 	and.w	ip, ip, #7
   38578:	f002 0203 	and.w	r2, r2, #3
   3857c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   38580:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   38584:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
   38588:	f1be 0f01 	cmp.w	lr, #1
   3858c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   38590:	bf08      	it	eq
   38592:	f04f 0800 	moveq.w	r8, #0
	pdu->type = pdu_adv_type[adv_type];
   38596:	f10e 0308 	add.w	r3, lr, #8
   3859a:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
   3859e:	eb0d 0e03 	add.w	lr, sp, r3
   385a2:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   385a6:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   385a8:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
   385ac:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   385b0:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   385b4:	f013 0f0e 	tst.w	r3, #14
	adv->lll.chan_map = chan_map;
   385b8:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   385bc:	f029 011f 	bic.w	r1, r9, #31
   385c0:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
   385c4:	ea4c 0c02 	orr.w	ip, ip, r2
   385c8:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   385cc:	bf0c      	ite	eq
   385ce:	2201      	moveq	r2, #1
   385d0:	2200      	movne	r2, #0
   385d2:	f362 1345 	bfi	r3, r2, #5, #1
	adv->lll.chan_map = chan_map;
   385d6:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   385da:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   385de:	f003 030f 	and.w	r3, r3, #15
   385e2:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   385e4:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   385e8:	d046      	beq.n	38678 <ll_adv_params_set+0x134>
	adv->own_addr_type = own_addr_type;
   385ea:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   385ee:	f365 0342 	bfi	r3, r5, #1, #2
   385f2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   385f6:	b2da      	uxtb	r2, r3
   385f8:	075b      	lsls	r3, r3, #29
   385fa:	d508      	bpl.n	3860e <ll_adv_params_set+0xca>
		adv->peer_addr_type = direct_addr_type;
   385fc:	f367 02c3 	bfi	r2, r7, #3, #1
   38600:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   38604:	4842      	ldr	r0, [pc, #264]	; (38710 <ll_adv_params_set+0x1cc>)
   38606:	990a      	ldr	r1, [sp, #40]	; 0x28
   38608:	2206      	movs	r2, #6
   3860a:	f013 f93e 	bl	4b88a <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   3860e:	f898 3000 	ldrb.w	r3, [r8]
   38612:	f003 020f 	and.w	r2, r3, #15
   38616:	2a01      	cmp	r2, #1
   38618:	d03c      	beq.n	38694 <ll_adv_params_set+0x150>
	} else if (pdu->len == 0) {
   3861a:	f898 2001 	ldrb.w	r2, [r8, #1]
   3861e:	b1fa      	cbz	r2, 38660 <ll_adv_params_set+0x11c>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   38620:	f1b9 0f01 	cmp.w	r9, #1
   38624:	d053      	beq.n	386ce <ll_adv_params_set+0x18a>
		pdu->tx_addr = own_addr_type & 0x1;
   38626:	f898 3000 	ldrb.w	r3, [r8]
   3862a:	f005 0501 	and.w	r5, r5, #1
   3862e:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
   38632:	f36f 13c7 	bfc	r3, #7, #1
   38636:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   3863a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	hdr->parent = parent;
   3863e:	61e4      	str	r4, [r4, #28]
   38640:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   38644:	01ad      	lsls	r5, r5, #6
   38646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (pdu->len == 0) {
   38648:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   3864a:	f045 0504 	orr.w	r5, r5, #4
   3864e:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   38650:	b912      	cbnz	r2, 38658 <ll_adv_params_set+0x114>
			pdu->len = BDADDR_SIZE;
   38652:	2106      	movs	r1, #6
   38654:	7059      	strb	r1, [r3, #1]
	return 0;
   38656:	4616      	mov	r6, r2
}
   38658:	4630      	mov	r0, r6
   3865a:	b003      	add	sp, #12
   3865c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   38660:	f005 0501 	and.w	r5, r5, #1
   38664:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
   38668:	f362 13c7 	bfi	r3, r2, #7, #1
   3866c:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   38670:	2306      	movs	r3, #6
   38672:	f888 3001 	strb.w	r3, [r8, #1]
   38676:	e7e0      	b.n	3863a <ll_adv_params_set+0xf6>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   38678:	f1b9 0f01 	cmp.w	r9, #1
   3867c:	d0b5      	beq.n	385ea <ll_adv_params_set+0xa6>
		if (pdu->len == 0U) {
   3867e:	f898 2001 	ldrb.w	r2, [r8, #1]
   38682:	b9c2      	cbnz	r2, 386b6 <ll_adv_params_set+0x172>
			adv->ad_data_backup.len = 0U;
   38684:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
   38688:	e7af      	b.n	385ea <ll_adv_params_set+0xa6>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3868a:	260c      	movs	r6, #12
}
   3868c:	4630      	mov	r0, r6
   3868e:	b003      	add	sp, #12
   38690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   38694:	f005 0501 	and.w	r5, r5, #1
		pdu->rx_addr = direct_addr_type;
   38698:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   3869a:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
   3869e:	f367 13c7 	bfi	r3, r7, #7, #1
   386a2:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   386a6:	990a      	ldr	r1, [sp, #40]	; 0x28
   386a8:	2206      	movs	r2, #6
   386aa:	f013 f8ee 	bl	4b88a <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   386ae:	230c      	movs	r3, #12
   386b0:	f888 3001 	strb.w	r3, [r8, #1]
   386b4:	e7c1      	b.n	3863a <ll_adv_params_set+0xf6>
			LL_ASSERT(pdu->len >=
   386b6:	2a05      	cmp	r2, #5
   386b8:	d916      	bls.n	386e8 <ll_adv_params_set+0x1a4>
			adv->ad_data_backup.len = pdu->len -
   386ba:	3a06      	subs	r2, #6
   386bc:	b2d2      	uxtb	r2, r2
   386be:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   386c2:	f108 0108 	add.w	r1, r8, #8
   386c6:	4813      	ldr	r0, [pc, #76]	; (38714 <ll_adv_params_set+0x1d0>)
   386c8:	f013 f8df 	bl	4b88a <memcpy>
   386cc:	e78d      	b.n	385ea <ll_adv_params_set+0xa6>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   386ce:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   386d2:	4910      	ldr	r1, [pc, #64]	; (38714 <ll_adv_params_set+0x1d0>)
   386d4:	f108 0008 	add.w	r0, r8, #8
   386d8:	f013 f8d7 	bl	4b88a <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   386dc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   386e0:	3306      	adds	r3, #6
   386e2:	f888 3001 	strb.w	r3, [r8, #1]
   386e6:	e79e      	b.n	38626 <ll_adv_params_set+0xe2>
			LL_ASSERT(pdu->len >=
   386e8:	4a0b      	ldr	r2, [pc, #44]	; (38718 <ll_adv_params_set+0x1d4>)
   386ea:	490c      	ldr	r1, [pc, #48]	; (3871c <ll_adv_params_set+0x1d8>)
   386ec:	480c      	ldr	r0, [pc, #48]	; (38720 <ll_adv_params_set+0x1dc>)
   386ee:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   386f2:	f010 ffbf 	bl	49674 <printk>
   386f6:	4040      	eors	r0, r0
   386f8:	f380 8811 	msr	BASEPRI, r0
   386fc:	f04f 0003 	mov.w	r0, #3
   38700:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   38702:	f898 2001 	ldrb.w	r2, [r8, #1]
   38706:	e7d8      	b.n	386ba <ll_adv_params_set+0x176>
   38708:	2000515c 	.word	0x2000515c
   3870c:	0005152c 	.word	0x0005152c
   38710:	200051c7 	.word	0x200051c7
   38714:	2000519d 	.word	0x2000519d
   38718:	000527c4 	.word	0x000527c4
   3871c:	000528d8 	.word	0x000528d8
   38720:	00052460 	.word	0x00052460

00038724 <ull_adv_init>:
{
   38724:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   38726:	4c06      	ldr	r4, [pc, #24]	; (38740 <ull_adv_init+0x1c>)
   38728:	f104 0028 	add.w	r0, r4, #40	; 0x28
   3872c:	f008 f83c 	bl	407a8 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   38730:	f104 0034 	add.w	r0, r4, #52	; 0x34
   38734:	f008 f838 	bl	407a8 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   38738:	f7ff fd12 	bl	38160 <init_set.constprop.0>
}
   3873c:	2000      	movs	r0, #0
   3873e:	bd10      	pop	{r4, pc}
   38740:	2000515c 	.word	0x2000515c

00038744 <ull_adv_reset>:
{
   38744:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   38746:	4b0b      	ldr	r3, [pc, #44]	; (38774 <ull_adv_reset+0x30>)
   38748:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   3874c:	07d2      	lsls	r2, r2, #31
   3874e:	d50e      	bpl.n	3876e <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
   38750:	6a1a      	ldr	r2, [r3, #32]
   38752:	b152      	cbz	r2, 3876a <ull_adv_reset+0x26>
		adv->lll.conn->periph.cancelled = 1U;
   38754:	f892 1020 	ldrb.w	r1, [r2, #32]
   38758:	f041 0102 	orr.w	r1, r1, #2
   3875c:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   38760:	6a1b      	ldr	r3, [r3, #32]
   38762:	f893 3020 	ldrb.w	r3, [r3, #32]
   38766:	07db      	lsls	r3, r3, #31
   38768:	d401      	bmi.n	3876e <ull_adv_reset+0x2a>
   3876a:	f7ff fd65 	bl	38238 <disable.part.0>
}
   3876e:	2000      	movs	r0, #0
   38770:	bd08      	pop	{r3, pc}
   38772:	bf00      	nop
   38774:	2000515c 	.word	0x2000515c

00038778 <ull_adv_reset_finalize>:
{
   38778:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   3877a:	4c0a      	ldr	r4, [pc, #40]	; (387a4 <ull_adv_reset_finalize+0x2c>)
   3877c:	f104 0528 	add.w	r5, r4, #40	; 0x28
   38780:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
   38782:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
   38784:	f008 f820 	bl	407c8 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   38788:	4620      	mov	r0, r4
   3878a:	f008 f81d 	bl	407c8 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   3878e:	4628      	mov	r0, r5
   38790:	f008 f80a 	bl	407a8 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   38794:	4620      	mov	r0, r4
   38796:	f008 f807 	bl	407a8 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   3879a:	f7ff fce1 	bl	38160 <init_set.constprop.0>
}
   3879e:	2000      	movs	r0, #0
   387a0:	bd38      	pop	{r3, r4, r5, pc}
   387a2:	bf00      	nop
   387a4:	2000515c 	.word	0x2000515c

000387a8 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   387a8:	4a03      	ldr	r2, [pc, #12]	; (387b8 <ull_adv_handle_get+0x10>)
   387aa:	4b04      	ldr	r3, [pc, #16]	; (387bc <ull_adv_handle_get+0x14>)
   387ac:	1a80      	subs	r0, r0, r2
   387ae:	fba3 3000 	umull	r3, r0, r3, r0
}
   387b2:	f3c0 108f 	ubfx	r0, r0, #6, #16
   387b6:	4770      	bx	lr
   387b8:	2000515c 	.word	0x2000515c
   387bc:	88888889 	.word	0x88888889

000387c0 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   387c0:	4a04      	ldr	r2, [pc, #16]	; (387d4 <ull_adv_lll_handle_get+0x14>)
   387c2:	6800      	ldr	r0, [r0, #0]
   387c4:	4b04      	ldr	r3, [pc, #16]	; (387d8 <ull_adv_lll_handle_get+0x18>)
   387c6:	1a80      	subs	r0, r0, r2
   387c8:	fba3 3000 	umull	r3, r0, r3, r0
}
   387cc:	f3c0 108f 	ubfx	r0, r0, #6, #16
   387d0:	4770      	bx	lr
   387d2:	bf00      	nop
   387d4:	2000515c 	.word	0x2000515c
   387d8:	88888889 	.word	0x88888889

000387dc <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   387dc:	b938      	cbnz	r0, 387ee <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   387de:	4805      	ldr	r0, [pc, #20]	; (387f4 <ull_adv_is_enabled_get+0x18>)
   387e0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
   387e4:	f013 0f01 	tst.w	r3, #1
   387e8:	bf08      	it	eq
   387ea:	2000      	moveq	r0, #0
   387ec:	4770      	bx	lr
		return NULL;
   387ee:	2000      	movs	r0, #0
}
   387f0:	4770      	bx	lr
   387f2:	bf00      	nop
   387f4:	2000515c 	.word	0x2000515c

000387f8 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   387f8:	b928      	cbnz	r0, 38806 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   387fa:	4b04      	ldr	r3, [pc, #16]	; (3880c <ull_adv_is_enabled+0x14>)
   387fc:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   38800:	f000 0001 	and.w	r0, r0, #1
   38804:	4770      	bx	lr
   38806:	2000      	movs	r0, #0
}
   38808:	4770      	bx	lr
   3880a:	bf00      	nop
   3880c:	2000515c 	.word	0x2000515c

00038810 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   38810:	b950      	cbnz	r0, 38828 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   38812:	4b06      	ldr	r3, [pc, #24]	; (3882c <ull_adv_filter_pol_get+0x1c>)
   38814:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   38818:	f010 0001 	ands.w	r0, r0, #1
   3881c:	d005      	beq.n	3882a <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   3881e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   38822:	f000 0003 	and.w	r0, r0, #3
   38826:	4770      	bx	lr
		return 0;
   38828:	2000      	movs	r0, #0
}
   3882a:	4770      	bx	lr
   3882c:	2000515c 	.word	0x2000515c

00038830 <ull_adv_pdu_update_addrs>:
{
   38830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38832:	460c      	mov	r4, r1
   38834:	4606      	mov	r6, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   38836:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   3883a:	f006 fdd5 	bl	3f3e8 <ull_filter_adva_get>
			own_id_addr = ll_addr_get(pdu->tx_addr);
   3883e:	7823      	ldrb	r3, [r4, #0]
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   38840:	4605      	mov	r5, r0
			own_id_addr = ll_addr_get(pdu->tx_addr);
   38842:	f3c3 1080 	ubfx	r0, r3, #6, #1
   38846:	f7fc fc51 	bl	350ec <ll_addr_get>
	(void)memcpy(adv->own_id_addr, own_id_addr, BDADDR_SIZE);
   3884a:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
   3884c:	4607      	mov	r7, r0
	(void)memcpy(adv->own_id_addr, own_id_addr, BDADDR_SIZE);
   3884e:	4601      	mov	r1, r0
   38850:	f106 0071 	add.w	r0, r6, #113	; 0x71
   38854:	f013 f819 	bl	4b88a <memcpy>
	if (rpa) {
   38858:	b185      	cbz	r5, 3887c <ull_adv_pdu_update_addrs+0x4c>
		pdu->tx_addr = 1;
   3885a:	7823      	ldrb	r3, [r4, #0]
   3885c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   38860:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   38862:	1ca7      	adds	r7, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   38864:	2206      	movs	r2, #6
   38866:	4629      	mov	r1, r5
   38868:	4638      	mov	r0, r7
   3886a:	f013 f80e 	bl	4b88a <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   3886e:	7823      	ldrb	r3, [r4, #0]
   38870:	f003 030f 	and.w	r3, r3, #15
   38874:	2b01      	cmp	r3, #1
   38876:	d003      	beq.n	38880 <ull_adv_pdu_update_addrs+0x50>
}
   38878:	4638      	mov	r0, r7
   3887a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_addr = own_id_addr;
   3887c:	463d      	mov	r5, r7
   3887e:	e7f0      	b.n	38862 <ull_adv_pdu_update_addrs+0x32>
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   38880:	f896 0026 	ldrb.w	r0, [r6, #38]	; 0x26
   38884:	f006 fdde 	bl	3f444 <ull_filter_tgta_get>
	if (rx_addr) {
   38888:	4601      	mov	r1, r0
   3888a:	2800      	cmp	r0, #0
   3888c:	d0f4      	beq.n	38878 <ull_adv_pdu_update_addrs+0x48>
		pdu->rx_addr = 1;
   3888e:	7823      	ldrb	r3, [r4, #0]
   38890:	4620      	mov	r0, r4
   38892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   38896:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   3889a:	2206      	movs	r2, #6
   3889c:	f012 fff5 	bl	4b88a <memcpy>
}
   388a0:	4638      	mov	r0, r7
   388a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000388a4 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   388a4:	291f      	cmp	r1, #31
   388a6:	d849      	bhi.n	3893c <ull_adv_data_set+0x98>
{
   388a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   388aa:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   388ae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   388b2:	b083      	sub	sp, #12
   388b4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   388b6:	7833      	ldrb	r3, [r6, #0]
   388b8:	f003 030f 	and.w	r3, r3, #15
   388bc:	2b01      	cmp	r3, #1
   388be:	460d      	mov	r5, r1
   388c0:	4604      	mov	r4, r0
   388c2:	4617      	mov	r7, r2
   388c4:	d03c      	beq.n	38940 <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   388c6:	f10d 0107 	add.w	r1, sp, #7
   388ca:	3028      	adds	r0, #40	; 0x28
   388cc:	f007 fffa 	bl	408c4 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   388d0:	4631      	mov	r1, r6
   388d2:	4606      	mov	r6, r0
   388d4:	f811 2b02 	ldrb.w	r2, [r1], #2
   388d8:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   388dc:	f3c2 0303 	ubfx	r3, r2, #0, #4
   388e0:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   388e4:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   388e8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   388ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
   388f0:	4630      	mov	r0, r6
   388f2:	4313      	orrs	r3, r2
   388f4:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   388f8:	2206      	movs	r2, #6
   388fa:	f012 ffc6 	bl	4b88a <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   388fe:	462a      	mov	r2, r5
   38900:	4639      	mov	r1, r7
   38902:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   38906:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   38908:	f012 ffbf 	bl	4b88a <memcpy>
	pdu->len = BDADDR_SIZE + len;
   3890c:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   3890e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   38912:	07db      	lsls	r3, r3, #31
   38914:	d406      	bmi.n	38924 <ull_adv_data_set+0x80>
	pdu->last = idx;
   38916:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3891a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return 0;
   3891e:	2000      	movs	r0, #0
}
   38920:	b003      	add	sp, #12
   38922:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   38924:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   38928:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   3892c:	4631      	mov	r1, r6
   3892e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   38930:	4620      	mov	r0, r4
   38932:	f7ee f8b5 	bl	26aa0 <ull_adv_time_update>
		if (err) {
   38936:	2800      	cmp	r0, #0
   38938:	d0ed      	beq.n	38916 <ull_adv_data_set+0x72>
   3893a:	e7f1      	b.n	38920 <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
   3893c:	2012      	movs	r0, #18
}
   3893e:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   38940:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   38944:	460a      	mov	r2, r1
   38946:	3041      	adds	r0, #65	; 0x41
   38948:	4639      	mov	r1, r7
   3894a:	f012 ff9e 	bl	4b88a <memcpy>
		return 0;
   3894e:	2000      	movs	r0, #0
}
   38950:	b003      	add	sp, #12
   38952:	bdf0      	pop	{r4, r5, r6, r7, pc}

00038954 <ll_adv_data_set>:
{
   38954:	4603      	mov	r3, r0
   38956:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   38958:	4801      	ldr	r0, [pc, #4]	; (38960 <ll_adv_data_set+0xc>)
   3895a:	4619      	mov	r1, r3
   3895c:	f7ff bfa2 	b.w	388a4 <ull_adv_data_set>
   38960:	2000515c 	.word	0x2000515c

00038964 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   38964:	b5f0      	push	{r4, r5, r6, r7, lr}
   38966:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   3896a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   3896e:	b083      	sub	sp, #12
   38970:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   38972:	460e      	mov	r6, r1
   38974:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   38976:	f10d 0107 	add.w	r1, sp, #7
   3897a:	3034      	adds	r0, #52	; 0x34
   3897c:	4617      	mov	r7, r2
   3897e:	f007 ffa1 	bl	408c4 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   38982:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   38984:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   38986:	f811 3b02 	ldrb.w	r3, [r1], #2
   3898a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   3898e:	019b      	lsls	r3, r3, #6
   38990:	f043 0304 	orr.w	r3, r3, #4
   38994:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   38996:	1db3      	adds	r3, r6, #6
   38998:	7043      	strb	r3, [r0, #1]
   3899a:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   3899c:	3002      	adds	r0, #2
   3899e:	f012 ff74 	bl	4b88a <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   389a2:	4632      	mov	r2, r6
   389a4:	4639      	mov	r1, r7
   389a6:	f105 0008 	add.w	r0, r5, #8
   389aa:	f012 ff6e 	bl	4b88a <memcpy>
	if (adv->is_enabled) {
   389ae:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   389b2:	07da      	lsls	r2, r3, #31
   389b4:	d50b      	bpl.n	389ce <ull_scan_rsp_set.part.0+0x6a>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   389b6:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   389ba:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   389be:	2341      	movs	r3, #65	; 0x41
   389c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   389c2:	780a      	ldrb	r2, [r1, #0]
   389c4:	f002 020f 	and.w	r2, r2, #15
   389c8:	40d3      	lsrs	r3, r2
   389ca:	07db      	lsls	r3, r3, #31
   389cc:	d406      	bmi.n	389dc <ull_scan_rsp_set.part.0+0x78>
	pdu->last = idx;
   389ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   389d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   389d6:	2000      	movs	r0, #0
}
   389d8:	b003      	add	sp, #12
   389da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   389dc:	462a      	mov	r2, r5
   389de:	4620      	mov	r0, r4
   389e0:	f7ee f85e 	bl	26aa0 <ull_adv_time_update>
			if (err) {
   389e4:	2800      	cmp	r0, #0
   389e6:	d0f2      	beq.n	389ce <ull_scan_rsp_set.part.0+0x6a>
   389e8:	e7f6      	b.n	389d8 <ull_scan_rsp_set.part.0+0x74>
   389ea:	bf00      	nop

000389ec <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   389ec:	281f      	cmp	r0, #31
{
   389ee:	4603      	mov	r3, r0
   389f0:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
   389f2:	d803      	bhi.n	389fc <ll_adv_scan_rsp_set+0x10>
   389f4:	4802      	ldr	r0, [pc, #8]	; (38a00 <ll_adv_scan_rsp_set+0x14>)
   389f6:	4619      	mov	r1, r3
   389f8:	f7ff bfb4 	b.w	38964 <ull_scan_rsp_set.part.0>
}
   389fc:	2012      	movs	r0, #18
   389fe:	4770      	bx	lr
   38a00:	2000515c 	.word	0x2000515c

00038a04 <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   38a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38a08:	9c09      	ldr	r4, [sp, #36]	; 0x24
   38a0a:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   38a0e:	4625      	mov	r5, r4
{
   38a10:	4680      	mov	r8, r0
   38a12:	f815 1b1c 	ldrb.w	r1, [r5], #28
   38a16:	3101      	adds	r1, #1
   38a18:	b2c9      	uxtb	r1, r1
   38a1a:	4617      	mov	r7, r2
   38a1c:	461e      	mov	r6, r3
   38a1e:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   38a20:	b181      	cbz	r1, 38a44 <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   38a22:	4c17      	ldr	r4, [pc, #92]	; (38a80 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
   38a24:	4b17      	ldr	r3, [pc, #92]	; (38a84 <ticker_cb+0x80>)
	p.lazy = lazy;
   38a26:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   38a28:	2200      	movs	r2, #0
   38a2a:	4611      	mov	r1, r2
   38a2c:	2001      	movs	r0, #1
	p.remainder = remainder;
   38a2e:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
   38a32:	60e5      	str	r5, [r4, #12]
	p.force = force;
   38a34:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
   38a38:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   38a3a:	f7fb f829 	bl	33a90 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   38a3e:	b978      	cbnz	r0, 38a60 <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   38a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
   38a44:	4a10      	ldr	r2, [pc, #64]	; (38a88 <ticker_cb+0x84>)
   38a46:	4911      	ldr	r1, [pc, #68]	; (38a8c <ticker_cb+0x88>)
   38a48:	4811      	ldr	r0, [pc, #68]	; (38a90 <ticker_cb+0x8c>)
   38a4a:	f240 23db 	movw	r3, #731	; 0x2db
   38a4e:	f010 fe11 	bl	49674 <printk>
   38a52:	4040      	eors	r0, r0
   38a54:	f380 8811 	msr	BASEPRI, r0
   38a58:	f04f 0003 	mov.w	r0, #3
   38a5c:	df02      	svc	2
   38a5e:	e7e0      	b.n	38a22 <ticker_cb+0x1e>
	LL_ASSERT(!ret);
   38a60:	4a09      	ldr	r2, [pc, #36]	; (38a88 <ticker_cb+0x84>)
   38a62:	490c      	ldr	r1, [pc, #48]	; (38a94 <ticker_cb+0x90>)
   38a64:	480a      	ldr	r0, [pc, #40]	; (38a90 <ticker_cb+0x8c>)
   38a66:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   38a6a:	f010 fe03 	bl	49674 <printk>
   38a6e:	4040      	eors	r0, r0
   38a70:	f380 8811 	msr	BASEPRI, r0
   38a74:	f04f 0003 	mov.w	r0, #3
   38a78:	df02      	svc	2
}
   38a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   38a7e:	bf00      	nop
   38a80:	20005240 	.word	0x20005240
   38a84:	20000968 	.word	0x20000968
   38a88:	00052918 	.word	0x00052918
   38a8c:	000528d4 	.word	0x000528d4
   38a90:	00052460 	.word	0x00052460
   38a94:	0005273c 	.word	0x0005273c

00038a98 <ull_scan_init>:
}
   38a98:	2000      	movs	r0, #0
   38a9a:	4770      	bx	lr

00038a9c <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   38a9c:	3004      	adds	r0, #4
{
   38a9e:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   38aa0:	f101 021c 	add.w	r2, r1, #28
   38aa4:	b2c0      	uxtb	r0, r0
   38aa6:	f7fe fe9f 	bl	377e8 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   38aaa:	b110      	cbz	r0, 38ab2 <ull_scan_disable+0x16>
   38aac:	3078      	adds	r0, #120	; 0x78
   38aae:	d101      	bne.n	38ab4 <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   38ab0:	200c      	movs	r0, #12
}
   38ab2:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   38ab4:	4a07      	ldr	r2, [pc, #28]	; (38ad4 <ull_scan_disable+0x38>)
   38ab6:	4908      	ldr	r1, [pc, #32]	; (38ad8 <ull_scan_disable+0x3c>)
   38ab8:	4808      	ldr	r0, [pc, #32]	; (38adc <ull_scan_disable+0x40>)
   38aba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   38abe:	f010 fdd9 	bl	49674 <printk>
   38ac2:	4040      	eors	r0, r0
   38ac4:	f380 8811 	msr	BASEPRI, r0
   38ac8:	f04f 0003 	mov.w	r0, #3
   38acc:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   38ace:	200c      	movs	r0, #12
}
   38ad0:	bd08      	pop	{r3, pc}
   38ad2:	bf00      	nop
   38ad4:	00052918 	.word	0x00052918
   38ad8:	00052958 	.word	0x00052958
   38adc:	00052460 	.word	0x00052460

00038ae0 <ll_scan_enable>:
{
   38ae0:	b538      	push	{r3, r4, r5, lr}
	if (!enable) {
   38ae2:	b378      	cbz	r0, 38b44 <ll_scan_enable+0x64>
	if (!scan || scan->is_enabled) {
   38ae4:	4c2c      	ldr	r4, [pc, #176]	; (38b98 <ll_scan_enable+0xb8>)
   38ae6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   38aea:	07d9      	lsls	r1, r3, #31
   38aec:	d42f      	bmi.n	38b4e <ll_scan_enable+0x6e>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   38aee:	079a      	lsls	r2, r3, #30
   38af0:	f3c3 0541 	ubfx	r5, r3, #1, #2
   38af4:	d50b      	bpl.n	38b0e <ll_scan_enable+0x2e>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   38af6:	2001      	movs	r0, #1
   38af8:	f7fc faf8 	bl	350ec <ll_addr_get>
   38afc:	2106      	movs	r1, #6
   38afe:	f7fa ff37 	bl	33970 <mem_nz>
   38b02:	2800      	cmp	r0, #0
   38b04:	d046      	beq.n	38b94 <ll_scan_enable+0xb4>
		own_addr_type = scan->own_addr_type;
   38b06:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
   38b0a:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   38b0e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   38b12:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   38b16:	f006 fb37 	bl	3f188 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   38b1a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   38b1e:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   38b22:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
   38b26:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   38b28:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   38b2c:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
   38b2e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   38b32:	d502      	bpl.n	38b3a <ll_scan_enable+0x5a>
   38b34:	3d02      	subs	r5, #2
   38b36:	2d01      	cmp	r5, #1
   38b38:	d922      	bls.n	38b80 <ll_scan_enable+0xa0>
}
   38b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   38b3e:	4816      	ldr	r0, [pc, #88]	; (38b98 <ll_scan_enable+0xb8>)
   38b40:	f7ee b86a 	b.w	26c18 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
   38b44:	4d14      	ldr	r5, [pc, #80]	; (38b98 <ll_scan_enable+0xb8>)
   38b46:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   38b4a:	07dc      	lsls	r4, r3, #31
   38b4c:	d402      	bmi.n	38b54 <ll_scan_enable+0x74>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   38b4e:	240c      	movs	r4, #12
}
   38b50:	4620      	mov	r0, r4
   38b52:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   38b54:	6a2b      	ldr	r3, [r5, #32]
   38b56:	2b00      	cmp	r3, #0
   38b58:	d1f9      	bne.n	38b4e <ll_scan_enable+0x6e>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   38b5a:	4629      	mov	r1, r5
   38b5c:	f7ff ff9e 	bl	38a9c <ull_scan_disable>
	if (ret) {
   38b60:	4604      	mov	r4, r0
   38b62:	2800      	cmp	r0, #0
   38b64:	d1f4      	bne.n	38b50 <ll_scan_enable+0x70>
		return ret;
	}

	scan->is_enabled = 0U;
   38b66:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   38b6a:	f360 0300 	bfi	r3, r0, #0, #1
   38b6e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
   38b72:	f7ff fe33 	bl	387dc <ull_adv_is_enabled_get>
   38b76:	2800      	cmp	r0, #0
   38b78:	d1ea      	bne.n	38b50 <ll_scan_enable+0x70>
#endif
	{
		ull_filter_adv_scan_state_cb(0);
   38b7a:	f006 fac5 	bl	3f108 <ull_filter_adv_scan_state_cb>
   38b7e:	e7e7      	b.n	38b50 <ll_scan_enable+0x70>
		ull_filter_rpa_update(false);
   38b80:	2000      	movs	r0, #0
   38b82:	f006 fb25 	bl	3f1d0 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   38b86:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   38b8a:	f043 0302 	orr.w	r3, r3, #2
   38b8e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   38b92:	e7d2      	b.n	38b3a <ll_scan_enable+0x5a>
			return BT_HCI_ERR_INVALID_PARAM;
   38b94:	2412      	movs	r4, #18
   38b96:	e7db      	b.n	38b50 <ll_scan_enable+0x70>
   38b98:	200051f8 	.word	0x200051f8

00038b9c <ull_scan_reset>:
{
   38b9c:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
   38b9e:	4c0d      	ldr	r4, [pc, #52]	; (38bd4 <ull_scan_reset+0x38>)
   38ba0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   38ba4:	07db      	lsls	r3, r3, #31
   38ba6:	d501      	bpl.n	38bac <ull_scan_reset+0x10>
	if (scan->lll.conn) {
   38ba8:	6a20      	ldr	r0, [r4, #32]
   38baa:	b108      	cbz	r0, 38bb0 <ull_scan_reset+0x14>
}
   38bac:	2000      	movs	r0, #0
   38bae:	bd10      	pop	{r4, pc}
	ret = ull_scan_disable(handle, scan);
   38bb0:	4621      	mov	r1, r4
   38bb2:	f7ff ff73 	bl	38a9c <ull_scan_disable>
	if (ret) {
   38bb6:	2800      	cmp	r0, #0
   38bb8:	d1f8      	bne.n	38bac <ull_scan_reset+0x10>
	scan->is_enabled = 0U;
   38bba:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   38bbe:	f360 0200 	bfi	r2, r0, #0, #1
   38bc2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
   38bc6:	f7ff fe09 	bl	387dc <ull_adv_is_enabled_get>
   38bca:	2800      	cmp	r0, #0
   38bcc:	d1ee      	bne.n	38bac <ull_scan_reset+0x10>
		ull_filter_adv_scan_state_cb(0);
   38bce:	f006 fa9b 	bl	3f108 <ull_filter_adv_scan_state_cb>
	for (handle = 0U; handle < BT_CTLR_SCAN_SET; handle++) {
   38bd2:	e7eb      	b.n	38bac <ull_scan_reset+0x10>
   38bd4:	200051f8 	.word	0x200051f8

00038bd8 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   38bd8:	4a03      	ldr	r2, [pc, #12]	; (38be8 <ull_scan_handle_get+0x10>)
   38bda:	4b04      	ldr	r3, [pc, #16]	; (38bec <ull_scan_handle_get+0x14>)
   38bdc:	1a80      	subs	r0, r0, r2
   38bde:	fba3 3000 	umull	r3, r0, r3, r0
}
   38be2:	f3c0 1007 	ubfx	r0, r0, #4, #8
   38be6:	4770      	bx	lr
   38be8:	200051f8 	.word	0x200051f8
   38bec:	38e38e39 	.word	0x38e38e39

00038bf0 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   38bf0:	4a04      	ldr	r2, [pc, #16]	; (38c04 <ull_scan_lll_handle_get+0x14>)
   38bf2:	6800      	ldr	r0, [r0, #0]
   38bf4:	4b04      	ldr	r3, [pc, #16]	; (38c08 <ull_scan_lll_handle_get+0x18>)
   38bf6:	1a80      	subs	r0, r0, r2
   38bf8:	fba3 3000 	umull	r3, r0, r3, r0
}
   38bfc:	f3c0 1007 	ubfx	r0, r0, #4, #8
   38c00:	4770      	bx	lr
   38c02:	bf00      	nop
   38c04:	200051f8 	.word	0x200051f8
   38c08:	38e38e39 	.word	0x38e38e39

00038c0c <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   38c0c:	b938      	cbnz	r0, 38c1e <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   38c0e:	4805      	ldr	r0, [pc, #20]	; (38c24 <ull_scan_is_enabled_get+0x18>)
   38c10:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	return &ll_scan[handle];
   38c14:	f013 0f01 	tst.w	r3, #1
   38c18:	bf08      	it	eq
   38c1a:	2000      	moveq	r0, #0
   38c1c:	4770      	bx	lr
		return NULL;
   38c1e:	2000      	movs	r0, #0
}
   38c20:	4770      	bx	lr
   38c22:	bf00      	nop
   38c24:	200051f8 	.word	0x200051f8

00038c28 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   38c28:	4a04      	ldr	r2, [pc, #16]	; (38c3c <ull_scan_is_disabled_get+0x14>)
   38c2a:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   38c2e:	f003 0301 	and.w	r3, r3, #1
		return NULL;
   38c32:	4318      	orrs	r0, r3
}
   38c34:	bf0c      	ite	eq
   38c36:	4610      	moveq	r0, r2
   38c38:	2000      	movne	r0, #0
   38c3a:	4770      	bx	lr
   38c3c:	200051f8 	.word	0x200051f8

00038c40 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   38c40:	b9a0      	cbnz	r0, 38c6c <ull_scan_is_enabled+0x2c>
	if (!scan || !scan->is_enabled) {
   38c42:	4a0b      	ldr	r2, [pc, #44]	; (38c70 <ull_scan_is_enabled+0x30>)
   38c44:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   38c48:	f013 0001 	ands.w	r0, r3, #1
   38c4c:	d00f      	beq.n	38c6e <ull_scan_is_enabled+0x2e>
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   38c4e:	6a10      	ldr	r0, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   38c50:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   38c54:	3800      	subs	r0, #0
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   38c56:	f3c1 1240 	ubfx	r2, r1, #5, #1
   38c5a:	f003 0301 	and.w	r3, r3, #1
   38c5e:	fa03 f302 	lsl.w	r3, r3, r2
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   38c62:	bf18      	it	ne
   38c64:	2001      	movne	r0, #1
   38c66:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
   38c6a:	4770      	bx	lr
		return 0U;
   38c6c:	2000      	movs	r0, #0
}
   38c6e:	4770      	bx	lr
   38c70:	200051f8 	.word	0x200051f8

00038c74 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   38c74:	b950      	cbnz	r0, 38c8c <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   38c76:	4b06      	ldr	r3, [pc, #24]	; (38c90 <ull_scan_filter_pol_get+0x1c>)
   38c78:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
   38c7c:	f010 0001 	ands.w	r0, r0, #1
   38c80:	d005      	beq.n	38c8e <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   38c82:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   38c86:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   38c8a:	4770      	bx	lr
		return 0;
   38c8c:	2000      	movs	r0, #0
}
   38c8e:	4770      	bx	lr
   38c90:	200051f8 	.word	0x200051f8

00038c94 <init_reset>:
{
   38c94:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   38c96:	4b15      	ldr	r3, [pc, #84]	; (38cec <init_reset+0x58>)
   38c98:	4815      	ldr	r0, [pc, #84]	; (38cf0 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   38c9a:	4c16      	ldr	r4, [pc, #88]	; (38cf4 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   38c9c:	2206      	movs	r2, #6
   38c9e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   38ca2:	f7fa fdeb 	bl	3387c <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   38ca6:	4b14      	ldr	r3, [pc, #80]	; (38cf8 <init_reset+0x64>)
   38ca8:	2203      	movs	r2, #3
   38caa:	1d18      	adds	r0, r3, #4
   38cac:	2124      	movs	r1, #36	; 0x24
   38cae:	f7fa fde5 	bl	3387c <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   38cb2:	4b12      	ldr	r3, [pc, #72]	; (38cfc <init_reset+0x68>)
   38cb4:	2218      	movs	r2, #24
   38cb6:	1d18      	adds	r0, r3, #4
   38cb8:	212c      	movs	r1, #44	; 0x2c
   38cba:	f7fa fddf 	bl	3387c <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   38cbe:	4b10      	ldr	r3, [pc, #64]	; (38d00 <init_reset+0x6c>)
   38cc0:	221b      	movs	r2, #27
   38cc2:	1d18      	adds	r0, r3, #4
   38cc4:	2108      	movs	r1, #8
   38cc6:	f7fa fdd9 	bl	3387c <mem_init>
	default_phy_tx |= PHY_2M;
   38cca:	490e      	ldr	r1, [pc, #56]	; (38d04 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   38ccc:	4a0e      	ldr	r2, [pc, #56]	; (38d08 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   38cce:	480f      	ldr	r0, [pc, #60]	; (38d0c <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   38cd0:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   38cd2:	f04f 0c1b 	mov.w	ip, #27
   38cd6:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   38cda:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   38cdc:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   38ce0:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   38ce2:	f8a0 c000 	strh.w	ip, [r0]
}
   38ce6:	2000      	movs	r0, #0
   38ce8:	bd10      	pop	{r4, pc}
   38cea:	bf00      	nop
   38cec:	20005250 	.word	0x20005250
   38cf0:	20002d58 	.word	0x20002d58
   38cf4:	20006c74 	.word	0x20006c74
   38cf8:	20005278 	.word	0x20005278
   38cfc:	200052e8 	.word	0x200052e8
   38d00:	2000570c 	.word	0x2000570c
   38d04:	20006dd2 	.word	0x20006dd2
   38d08:	20006dd1 	.word	0x20006dd1
   38d0c:	20006c76 	.word	0x20006c76

00038d10 <ctrl_tx_pause_enqueue>:
{
   38d10:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
   38d12:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
{
   38d16:	4604      	mov	r4, r0
   38d18:	460d      	mov	r5, r1
	if (
   38d1a:	b11b      	cbz	r3, 38d24 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   38d1c:	f890 1176 	ldrb.w	r1, [r0, #374]	; 0x176
	    conn->tx_head &&
   38d20:	0788      	lsls	r0, r1, #30
   38d22:	d50e      	bpl.n	38d42 <ctrl_tx_pause_enqueue+0x32>
		if (!conn->tx_ctrl) {
   38d24:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   38d28:	b351      	cbz	r1, 38d80 <ctrl_tx_pause_enqueue+0x70>
			LL_ASSERT(!pause);
   38d2a:	2a00      	cmp	r2, #0
   38d2c:	d132      	bne.n	38d94 <ctrl_tx_pause_enqueue+0x84>
	tx->next = conn->tx_ctrl_last->next;
   38d2e:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   38d32:	681a      	ldr	r2, [r3, #0]
   38d34:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   38d36:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   38d38:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   38d3a:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
	if (!tx->next) {
   38d3e:	b1e3      	cbz	r3, 38d7a <ctrl_tx_pause_enqueue+0x6a>
}
   38d40:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   38d42:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   38d46:	07c9      	lsls	r1, r1, #31
   38d48:	d4ec      	bmi.n	38d24 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   38d4a:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   38d4e:	428b      	cmp	r3, r1
   38d50:	d02e      	beq.n	38db0 <ctrl_tx_pause_enqueue+0xa0>
		} else if (!conn->tx_ctrl) {
   38d52:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   38d56:	2900      	cmp	r1, #0
   38d58:	d038      	beq.n	38dcc <ctrl_tx_pause_enqueue+0xbc>
			LL_ASSERT(!pause);
   38d5a:	2a00      	cmp	r2, #0
   38d5c:	d0e7      	beq.n	38d2e <ctrl_tx_pause_enqueue+0x1e>
   38d5e:	4a23      	ldr	r2, [pc, #140]	; (38dec <ctrl_tx_pause_enqueue+0xdc>)
   38d60:	4923      	ldr	r1, [pc, #140]	; (38df0 <ctrl_tx_pause_enqueue+0xe0>)
   38d62:	4824      	ldr	r0, [pc, #144]	; (38df4 <ctrl_tx_pause_enqueue+0xe4>)
   38d64:	f640 236e 	movw	r3, #2670	; 0xa6e
   38d68:	f010 fc84 	bl	49674 <printk>
   38d6c:	4040      	eors	r0, r0
   38d6e:	f380 8811 	msr	BASEPRI, r0
   38d72:	f04f 0003 	mov.w	r0, #3
   38d76:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   38d78:	e7d9      	b.n	38d2e <ctrl_tx_pause_enqueue+0x1e>
		conn->tx_data_last = tx;
   38d7a:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
}
   38d7e:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   38d80:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   38d82:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
			if (!pause) {
   38d86:	2a00      	cmp	r2, #0
   38d88:	d1d9      	bne.n	38d3e <ctrl_tx_pause_enqueue+0x2e>
				conn->tx_ctrl_last = tx;
   38d8a:	e9c4 5576 	strd	r5, r5, [r4, #472]	; 0x1d8
	if (!tx->next) {
   38d8e:	2b00      	cmp	r3, #0
   38d90:	d1d6      	bne.n	38d40 <ctrl_tx_pause_enqueue+0x30>
   38d92:	e7f2      	b.n	38d7a <ctrl_tx_pause_enqueue+0x6a>
			LL_ASSERT(!pause);
   38d94:	4a15      	ldr	r2, [pc, #84]	; (38dec <ctrl_tx_pause_enqueue+0xdc>)
   38d96:	4916      	ldr	r1, [pc, #88]	; (38df0 <ctrl_tx_pause_enqueue+0xe0>)
   38d98:	4816      	ldr	r0, [pc, #88]	; (38df4 <ctrl_tx_pause_enqueue+0xe4>)
   38d9a:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   38d9e:	f010 fc69 	bl	49674 <printk>
   38da2:	4040      	eors	r0, r0
   38da4:	f380 8811 	msr	BASEPRI, r0
   38da8:	f04f 0003 	mov.w	r0, #3
   38dac:	df02      	svc	2
   38dae:	e7be      	b.n	38d2e <ctrl_tx_pause_enqueue+0x1e>
			conn->tx_data = conn->tx_data->next;
   38db0:	6819      	ldr	r1, [r3, #0]
   38db2:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   38db6:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   38dba:	2900      	cmp	r1, #0
   38dbc:	d1cd      	bne.n	38d5a <ctrl_tx_pause_enqueue+0x4a>
			tx->next = conn->tx_head->next;
   38dbe:	6819      	ldr	r1, [r3, #0]
   38dc0:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   38dc2:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   38dc4:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   38dc6:	2a00      	cmp	r2, #0
   38dc8:	d0df      	beq.n	38d8a <ctrl_tx_pause_enqueue+0x7a>
   38dca:	e7b8      	b.n	38d3e <ctrl_tx_pause_enqueue+0x2e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38dcc:	7919      	ldrb	r1, [r3, #4]
   38dce:	f001 0103 	and.w	r1, r1, #3
   38dd2:	2903      	cmp	r1, #3
   38dd4:	d004      	beq.n	38de0 <ctrl_tx_pause_enqueue+0xd0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   38dd6:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
			LL_ASSERT(!pause);
   38dda:	2a00      	cmp	r2, #0
   38ddc:	d0a7      	beq.n	38d2e <ctrl_tx_pause_enqueue+0x1e>
   38dde:	e7be      	b.n	38d5e <ctrl_tx_pause_enqueue+0x4e>
	    ((pdu_data_tx->llctrl.opcode !=
   38de0:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   38de2:	2903      	cmp	r1, #3
   38de4:	d0eb      	beq.n	38dbe <ctrl_tx_pause_enqueue+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   38de6:	290a      	cmp	r1, #10
   38de8:	d1f5      	bne.n	38dd6 <ctrl_tx_pause_enqueue+0xc6>
   38dea:	e7e8      	b.n	38dbe <ctrl_tx_pause_enqueue+0xae>
   38dec:	00052970 	.word	0x00052970
   38df0:	000529b0 	.word	0x000529b0
   38df4:	00052460 	.word	0x00052460

00038df8 <tx_lll_flush>:
{
   38df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   38dfc:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   38e00:	4934      	ldr	r1, [pc, #208]	; (38ed4 <tx_lll_flush+0xdc>)
{
   38e02:	b083      	sub	sp, #12
   38e04:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   38e06:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   38e0a:	4640      	mov	r0, r8
   38e0c:	f7fa fd9c 	bl	33948 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   38e10:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   38e14:	4629      	mov	r1, r5
   38e16:	f008 fd69 	bl	418ec <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   38e1a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   38e1c:	aa01      	add	r2, sp, #4
   38e1e:	4631      	mov	r1, r6
   38e20:	f7fa fdd2 	bl	339c8 <memq_dequeue>
	while (link) {
   38e24:	b328      	cbz	r0, 38e72 <tx_lll_flush+0x7a>
   38e26:	4c2c      	ldr	r4, [pc, #176]	; (38ed8 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   38e28:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   38e2c:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   38e30:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   38e32:	f894 c001 	ldrb.w	ip, [r4, #1]
   38e36:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   38e38:	1c53      	adds	r3, r2, #1
   38e3a:	b2db      	uxtb	r3, r3
		last = 0U;
   38e3c:	459c      	cmp	ip, r3
   38e3e:	bf08      	it	eq
   38e40:	2300      	moveq	r3, #0
	if (last == first) {
   38e42:	4299      	cmp	r1, r3
   38e44:	f894 c000 	ldrb.w	ip, [r4]
   38e48:	d033      	beq.n	38eb2 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   38e4a:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   38e4c:	fb12 f20c 	smulbb	r2, r2, ip
   38e50:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
   38e54:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   38e58:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   38e5a:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   38e5e:	6002      	str	r2, [r0, #0]
		tx->next = link;
   38e60:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   38e62:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   38e64:	70e3      	strb	r3, [r4, #3]
   38e66:	aa01      	add	r2, sp, #4
   38e68:	4631      	mov	r1, r6
   38e6a:	f7fa fdad 	bl	339c8 <memq_dequeue>
	while (link) {
   38e6e:	2800      	cmp	r0, #0
   38e70:	d1de      	bne.n	38e30 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   38e72:	f8d8 0154 	ldr.w	r0, [r8, #340]	; 0x154
	rx = (void *)&conn->llcp_terminate.node_rx;
   38e76:	f508 74aa 	add.w	r4, r8, #340	; 0x154
	LL_ASSERT(rx->hdr.link);
   38e7a:	b150      	cbz	r0, 38e92 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   38e7c:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   38e7e:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   38e80:	f8c8 3154 	str.w	r3, [r8, #340]	; 0x154
	ull_rx_put(link, rx);
   38e84:	f7fe fd2a 	bl	378dc <ull_rx_put>
	ull_rx_sched();
   38e88:	f7fe fd38 	bl	378fc <ull_rx_sched>
}
   38e8c:	b003      	add	sp, #12
   38e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   38e92:	4a12      	ldr	r2, [pc, #72]	; (38edc <tx_lll_flush+0xe4>)
   38e94:	4912      	ldr	r1, [pc, #72]	; (38ee0 <tx_lll_flush+0xe8>)
   38e96:	4813      	ldr	r0, [pc, #76]	; (38ee4 <tx_lll_flush+0xec>)
   38e98:	f640 13da 	movw	r3, #2522	; 0x9da
   38e9c:	f010 fbea 	bl	49674 <printk>
   38ea0:	4040      	eors	r0, r0
   38ea2:	f380 8811 	msr	BASEPRI, r0
   38ea6:	f04f 0003 	mov.w	r0, #3
   38eaa:	df02      	svc	2
	link = rx->hdr.link;
   38eac:	f8d8 0154 	ldr.w	r0, [r8, #340]	; 0x154
   38eb0:	e7e4      	b.n	38e7c <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   38eb2:	4a0a      	ldr	r2, [pc, #40]	; (38edc <tx_lll_flush+0xe4>)
   38eb4:	490c      	ldr	r1, [pc, #48]	; (38ee8 <tx_lll_flush+0xf0>)
   38eb6:	480b      	ldr	r0, [pc, #44]	; (38ee4 <tx_lll_flush+0xec>)
   38eb8:	f640 13c6 	movw	r3, #2502	; 0x9c6
   38ebc:	f010 fbda 	bl	49674 <printk>
   38ec0:	4040      	eors	r0, r0
   38ec2:	f380 8811 	msr	BASEPRI, r0
   38ec6:	f04f 0003 	mov.w	r0, #3
   38eca:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   38ecc:	2300      	movs	r3, #0
   38ece:	801b      	strh	r3, [r3, #0]
   38ed0:	deff      	udf	#255	; 0xff
   38ed2:	bf00      	nop
   38ed4:	20002d58 	.word	0x20002d58
   38ed8:	20000978 	.word	0x20000978
   38edc:	00052970 	.word	0x00052970
   38ee0:	000529c0 	.word	0x000529c0
   38ee4:	00052460 	.word	0x00052460
   38ee8:	000529b8 	.word	0x000529b8

00038eec <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   38eec:	f890 2176 	ldrb.w	r2, [r0, #374]	; 0x176
   38ef0:	f012 0202 	ands.w	r2, r2, #2
   38ef4:	d00a      	beq.n	38f0c <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   38ef6:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
   38efa:	b1d3      	cbz	r3, 38f32 <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   38efc:	f8d0 31dc 	ldr.w	r3, [r0, #476]	; 0x1dc
   38f00:	681a      	ldr	r2, [r3, #0]
   38f02:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   38f04:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   38f06:	680b      	ldr	r3, [r1, #0]
   38f08:	b1d3      	cbz	r3, 38f40 <ctrl_tx_sec_enqueue+0x54>
   38f0a:	4770      	bx	lr
		if (conn->tx_head) {
   38f0c:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
   38f10:	b1cb      	cbz	r3, 38f46 <ctrl_tx_sec_enqueue+0x5a>
{
   38f12:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   38f14:	f890 c0f1 	ldrb.w	ip, [r0, #241]	; 0xf1
   38f18:	f890 e0f0 	ldrb.w	lr, [r0, #240]	; 0xf0
   38f1c:	45e6      	cmp	lr, ip
   38f1e:	d004      	beq.n	38f2a <ctrl_tx_sec_enqueue+0x3e>
   38f20:	f890 c0f2 	ldrb.w	ip, [r0, #242]	; 0xf2
   38f24:	f1bc 0f03 	cmp.w	ip, #3
   38f28:	d010      	beq.n	38f4c <ctrl_tx_sec_enqueue+0x60>
}
   38f2a:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   38f2e:	f7ff beef 	b.w	38d10 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   38f32:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
   38f36:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   38f38:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
		if (!tx->next) {
   38f3c:	2b00      	cmp	r3, #0
   38f3e:	d1e4      	bne.n	38f0a <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   38f40:	f8c0 11e4 	str.w	r1, [r0, #484]	; 0x1e4
   38f44:	4770      	bx	lr
	bool pause = false;
   38f46:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   38f48:	f7ff bee2 	b.w	38d10 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   38f4c:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   38f50:	f00c 0c03 	and.w	ip, ip, #3
   38f54:	f1bc 0f03 	cmp.w	ip, #3
   38f58:	d1e7      	bne.n	38f2a <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   38f5a:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   38f5c:	2a03      	cmp	r2, #3
   38f5e:	d005      	beq.n	38f6c <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   38f60:	f1a2 020a 	sub.w	r2, r2, #10
   38f64:	fab2 f282 	clz	r2, r2
   38f68:	0952      	lsrs	r2, r2, #5
   38f6a:	e7de      	b.n	38f2a <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   38f6c:	2201      	movs	r2, #1
   38f6e:	e7dc      	b.n	38f2a <ctrl_tx_sec_enqueue+0x3e>

00038f70 <ticker_stop_op_cb>:
{
   38f70:	b510      	push	{r4, lr}
   38f72:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   38f74:	b9b0      	cbnz	r0, 38fa4 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   38f76:	4b12      	ldr	r3, [pc, #72]	; (38fc0 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   38f78:	2200      	movs	r2, #0
   38f7a:	2101      	movs	r1, #1
   38f7c:	2002      	movs	r0, #2
	mfy.param = param;
   38f7e:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   38f80:	f7fa fd86 	bl	33a90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   38f84:	b900      	cbnz	r0, 38f88 <ticker_stop_op_cb+0x18>
}
   38f86:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   38f88:	4a0e      	ldr	r2, [pc, #56]	; (38fc4 <ticker_stop_op_cb+0x54>)
   38f8a:	490f      	ldr	r1, [pc, #60]	; (38fc8 <ticker_stop_op_cb+0x58>)
   38f8c:	480f      	ldr	r0, [pc, #60]	; (38fcc <ticker_stop_op_cb+0x5c>)
   38f8e:	f44f 6318 	mov.w	r3, #2432	; 0x980
   38f92:	f010 fb6f 	bl	49674 <printk>
   38f96:	4040      	eors	r0, r0
   38f98:	f380 8811 	msr	BASEPRI, r0
   38f9c:	f04f 0003 	mov.w	r0, #3
   38fa0:	df02      	svc	2
}
   38fa2:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   38fa4:	4a07      	ldr	r2, [pc, #28]	; (38fc4 <ticker_stop_op_cb+0x54>)
   38fa6:	490a      	ldr	r1, [pc, #40]	; (38fd0 <ticker_stop_op_cb+0x60>)
   38fa8:	4808      	ldr	r0, [pc, #32]	; (38fcc <ticker_stop_op_cb+0x5c>)
   38faa:	f640 137a 	movw	r3, #2426	; 0x97a
   38fae:	f010 fb61 	bl	49674 <printk>
   38fb2:	4040      	eors	r0, r0
   38fb4:	f380 8811 	msr	BASEPRI, r0
   38fb8:	f04f 0003 	mov.w	r0, #3
   38fbc:	df02      	svc	2
   38fbe:	e7da      	b.n	38f76 <ticker_stop_op_cb+0x6>
   38fc0:	20000ab0 	.word	0x20000ab0
   38fc4:	00052970 	.word	0x00052970
   38fc8:	0005273c 	.word	0x0005273c
   38fcc:	00052460 	.word	0x00052460
   38fd0:	000529d0 	.word	0x000529d0

00038fd4 <disabled_cb>:
{
   38fd4:	b508      	push	{r3, lr}
	mfy.param = param;
   38fd6:	4b0b      	ldr	r3, [pc, #44]	; (39004 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38fd8:	2200      	movs	r2, #0
	mfy.param = param;
   38fda:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38fdc:	4611      	mov	r1, r2
   38fde:	2001      	movs	r0, #1
   38fe0:	f7fa fd56 	bl	33a90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   38fe4:	b900      	cbnz	r0, 38fe8 <disabled_cb+0x14>
}
   38fe6:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   38fe8:	4a07      	ldr	r2, [pc, #28]	; (39008 <disabled_cb+0x34>)
   38fea:	4908      	ldr	r1, [pc, #32]	; (3900c <disabled_cb+0x38>)
   38fec:	4808      	ldr	r0, [pc, #32]	; (39010 <disabled_cb+0x3c>)
   38fee:	f640 13ac 	movw	r3, #2476	; 0x9ac
   38ff2:	f010 fb3f 	bl	49674 <printk>
   38ff6:	4040      	eors	r0, r0
   38ff8:	f380 8811 	msr	BASEPRI, r0
   38ffc:	f04f 0003 	mov.w	r0, #3
   39000:	df02      	svc	2
}
   39002:	bd08      	pop	{r3, pc}
   39004:	20000a80 	.word	0x20000a80
   39008:	00052970 	.word	0x00052970
   3900c:	0005273c 	.word	0x0005273c
   39010:	00052460 	.word	0x00052460

00039014 <conn_disable>:
{
   39014:	b538      	push	{r3, r4, r5, lr}
	return hdr->ref;
   39016:	7803      	ldrb	r3, [r0, #0]
   39018:	4604      	mov	r4, r0
	if (ull_ref_get(hdr)) {
   3901a:	2b00      	cmp	r3, #0
   3901c:	d02c      	beq.n	39078 <conn_disable+0x64>
		mfy.param = &conn->lll;
   3901e:	4d19      	ldr	r5, [pc, #100]	; (39084 <conn_disable+0x70>)
		LL_ASSERT(!hdr->disabled_cb);
   39020:	6943      	ldr	r3, [r0, #20]
		mfy.param = &conn->lll;
   39022:	f100 011c 	add.w	r1, r0, #28
   39026:	60a9      	str	r1, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   39028:	b16b      	cbz	r3, 39046 <conn_disable+0x32>
   3902a:	4a17      	ldr	r2, [pc, #92]	; (39088 <conn_disable+0x74>)
   3902c:	4917      	ldr	r1, [pc, #92]	; (3908c <conn_disable+0x78>)
   3902e:	4818      	ldr	r0, [pc, #96]	; (39090 <conn_disable+0x7c>)
   39030:	f640 1395 	movw	r3, #2453	; 0x995
   39034:	f010 fb1e 	bl	49674 <printk>
   39038:	4040      	eors	r0, r0
   3903a:	f380 8811 	msr	BASEPRI, r0
   3903e:	f04f 0003 	mov.w	r0, #3
   39042:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   39044:	68a9      	ldr	r1, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   39046:	4813      	ldr	r0, [pc, #76]	; (39094 <conn_disable+0x80>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   39048:	4b0e      	ldr	r3, [pc, #56]	; (39084 <conn_disable+0x70>)
   3904a:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   3904c:	e9c4 0105 	strd	r0, r1, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   39050:	4611      	mov	r1, r2
   39052:	2001      	movs	r0, #1
   39054:	f7fa fd1c 	bl	33a90 <mayfly_enqueue>
		LL_ASSERT(!ret);
   39058:	b900      	cbnz	r0, 3905c <conn_disable+0x48>
}
   3905a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   3905c:	4a0a      	ldr	r2, [pc, #40]	; (39088 <conn_disable+0x74>)
   3905e:	490e      	ldr	r1, [pc, #56]	; (39098 <conn_disable+0x84>)
   39060:	480b      	ldr	r0, [pc, #44]	; (39090 <conn_disable+0x7c>)
   39062:	f640 139c 	movw	r3, #2460	; 0x99c
   39066:	f010 fb05 	bl	49674 <printk>
   3906a:	4040      	eors	r0, r0
   3906c:	f380 8811 	msr	BASEPRI, r0
   39070:	f04f 0003 	mov.w	r0, #3
   39074:	df02      	svc	2
}
   39076:	bd38      	pop	{r3, r4, r5, pc}
   39078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   3907c:	301c      	adds	r0, #28
   3907e:	f7ff bfa9 	b.w	38fd4 <disabled_cb>
   39082:	bf00      	nop
   39084:	20000aa0 	.word	0x20000aa0
   39088:	00052970 	.word	0x00052970
   3908c:	00052858 	.word	0x00052858
   39090:	00052460 	.word	0x00052460
   39094:	00038fd5 	.word	0x00038fd5
   39098:	0005273c 	.word	0x0005273c

0003909c <conn_setup_adv_scan_disabled_cb>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   3909c:	6883      	ldr	r3, [r0, #8]
   3909e:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   390a0:	7f53      	ldrb	r3, [r2, #29]
   390a2:	09db      	lsrs	r3, r3, #7
	ftr = &(rx->rx_ftr);
   390a4:	f100 0108 	add.w	r1, r0, #8
	switch (lll->role) {
   390a8:	d001      	beq.n	390ae <conn_setup_adv_scan_disabled_cb+0x12>
		ull_periph_setup(rx, ftr, lll);
   390aa:	f7ee ba15 	b.w	274d8 <ull_periph_setup>
		ull_central_setup(rx, ftr, lll);
   390ae:	f7ee bee7 	b.w	27e80 <ull_central_setup>
   390b2:	bf00      	nop

000390b4 <ticker_start_conn_op_cb>:
{
   390b4:	b510      	push	{r4, lr}
   390b6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   390b8:	b990      	cbnz	r0, 390e0 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   390ba:	4620      	mov	r0, r4
   390bc:	f7fe fb44 	bl	37748 <ull_update_unmark>
	LL_ASSERT(p == param);
   390c0:	4284      	cmp	r4, r0
   390c2:	d00c      	beq.n	390de <ticker_start_conn_op_cb+0x2a>
   390c4:	4a0d      	ldr	r2, [pc, #52]	; (390fc <ticker_start_conn_op_cb+0x48>)
   390c6:	490e      	ldr	r1, [pc, #56]	; (39100 <ticker_start_conn_op_cb+0x4c>)
   390c8:	480e      	ldr	r0, [pc, #56]	; (39104 <ticker_start_conn_op_cb+0x50>)
   390ca:	f640 03b7 	movw	r3, #2231	; 0x8b7
   390ce:	f010 fad1 	bl	49674 <printk>
   390d2:	4040      	eors	r0, r0
   390d4:	f380 8811 	msr	BASEPRI, r0
   390d8:	f04f 0003 	mov.w	r0, #3
   390dc:	df02      	svc	2
}
   390de:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   390e0:	4a06      	ldr	r2, [pc, #24]	; (390fc <ticker_start_conn_op_cb+0x48>)
   390e2:	4909      	ldr	r1, [pc, #36]	; (39108 <ticker_start_conn_op_cb+0x54>)
   390e4:	4807      	ldr	r0, [pc, #28]	; (39104 <ticker_start_conn_op_cb+0x50>)
   390e6:	f640 03b4 	movw	r3, #2228	; 0x8b4
   390ea:	f010 fac3 	bl	49674 <printk>
   390ee:	4040      	eors	r0, r0
   390f0:	f380 8811 	msr	BASEPRI, r0
   390f4:	f04f 0003 	mov.w	r0, #3
   390f8:	df02      	svc	2
   390fa:	e7de      	b.n	390ba <ticker_start_conn_op_cb+0x6>
   390fc:	00052970 	.word	0x00052970
   39100:	000529dc 	.word	0x000529dc
   39104:	00052460 	.word	0x00052460
   39108:	000529d0 	.word	0x000529d0

0003910c <ticker_stop_conn_op_cb>:
{
   3910c:	b510      	push	{r4, lr}
   3910e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39110:	b990      	cbnz	r0, 39138 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   39112:	4620      	mov	r0, r4
   39114:	f7fe fb0c 	bl	37730 <ull_update_mark>
	LL_ASSERT(p == param);
   39118:	4284      	cmp	r4, r0
   3911a:	d00c      	beq.n	39136 <ticker_stop_conn_op_cb+0x2a>
   3911c:	4a0d      	ldr	r2, [pc, #52]	; (39154 <ticker_stop_conn_op_cb+0x48>)
   3911e:	490e      	ldr	r1, [pc, #56]	; (39158 <ticker_stop_conn_op_cb+0x4c>)
   39120:	480e      	ldr	r0, [pc, #56]	; (3915c <ticker_stop_conn_op_cb+0x50>)
   39122:	f640 03ad 	movw	r3, #2221	; 0x8ad
   39126:	f010 faa5 	bl	49674 <printk>
   3912a:	4040      	eors	r0, r0
   3912c:	f380 8811 	msr	BASEPRI, r0
   39130:	f04f 0003 	mov.w	r0, #3
   39134:	df02      	svc	2
}
   39136:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39138:	4a06      	ldr	r2, [pc, #24]	; (39154 <ticker_stop_conn_op_cb+0x48>)
   3913a:	4909      	ldr	r1, [pc, #36]	; (39160 <ticker_stop_conn_op_cb+0x54>)
   3913c:	4807      	ldr	r0, [pc, #28]	; (3915c <ticker_stop_conn_op_cb+0x50>)
   3913e:	f640 03aa 	movw	r3, #2218	; 0x8aa
   39142:	f010 fa97 	bl	49674 <printk>
   39146:	4040      	eors	r0, r0
   39148:	f380 8811 	msr	BASEPRI, r0
   3914c:	f04f 0003 	mov.w	r0, #3
   39150:	df02      	svc	2
   39152:	e7de      	b.n	39112 <ticker_stop_conn_op_cb+0x6>
   39154:	00052970 	.word	0x00052970
   39158:	000529dc 	.word	0x000529dc
   3915c:	00052460 	.word	0x00052460
   39160:	000529d0 	.word	0x000529d0

00039164 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   39164:	b900      	cbnz	r0, 39168 <ticker_update_conn_op_cb+0x4>
   39166:	4770      	bx	lr
{
   39168:	b510      	push	{r4, lr}
   3916a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   3916c:	f7fe faf8 	bl	37760 <ull_update_mark_get>
   39170:	4284      	cmp	r4, r0
   39172:	d010      	beq.n	39196 <ticker_update_conn_op_cb+0x32>
   39174:	f7fe fad6 	bl	37724 <ull_disable_mark_get>
   39178:	4284      	cmp	r4, r0
   3917a:	d00c      	beq.n	39196 <ticker_update_conn_op_cb+0x32>
   3917c:	4a06      	ldr	r2, [pc, #24]	; (39198 <ticker_update_conn_op_cb+0x34>)
   3917e:	4907      	ldr	r1, [pc, #28]	; (3919c <ticker_update_conn_op_cb+0x38>)
   39180:	4807      	ldr	r0, [pc, #28]	; (391a0 <ticker_update_conn_op_cb+0x3c>)
   39182:	f640 03a1 	movw	r3, #2209	; 0x8a1
   39186:	f010 fa75 	bl	49674 <printk>
   3918a:	4040      	eors	r0, r0
   3918c:	f380 8811 	msr	BASEPRI, r0
   39190:	f04f 0003 	mov.w	r0, #3
   39194:	df02      	svc	2
}
   39196:	bd10      	pop	{r4, pc}
   39198:	00052970 	.word	0x00052970
   3919c:	000529e8 	.word	0x000529e8
   391a0:	00052460 	.word	0x00052460

000391a4 <tx_ull_dequeue>:
{
   391a4:	4603      	mov	r3, r0
   391a6:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   391a8:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
   391ac:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
{
   391b0:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   391b2:	b164      	cbz	r4, 391ce <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
   391b4:	4294      	cmp	r4, r2
   391b6:	d022      	beq.n	391fe <tx_ull_dequeue+0x5a>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   391b8:	f8d3 11e0 	ldr.w	r1, [r3, #480]	; 0x1e0
		if (conn->tx_head == conn->tx_data) {
   391bc:	428a      	cmp	r2, r1
   391be:	d00b      	beq.n	391d8 <tx_ull_dequeue+0x34>
		conn->tx_head = conn->tx_head->next;
   391c0:	6812      	ldr	r2, [r2, #0]
   391c2:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
   391c6:	2300      	movs	r3, #0
}
   391c8:	bc10      	pop	{r4}
		tx->next = tx;
   391ca:	6003      	str	r3, [r0, #0]
}
   391cc:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   391ce:	f8d3 11e0 	ldr.w	r1, [r3, #480]	; 0x1e0
   391d2:	428a      	cmp	r2, r1
   391d4:	d104      	bne.n	391e0 <tx_ull_dequeue+0x3c>
	if (conn->tx_head == conn->tx_ctrl) {
   391d6:	b192      	cbz	r2, 391fe <tx_ull_dequeue+0x5a>
			conn->tx_data = conn->tx_data->next;
   391d8:	6809      	ldr	r1, [r1, #0]
   391da:	f8c3 11e0 	str.w	r1, [r3, #480]	; 0x1e0
   391de:	e7ef      	b.n	391c0 <tx_ull_dequeue+0x1c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   391e0:	7911      	ldrb	r1, [r2, #4]
   391e2:	f001 0103 	and.w	r1, r1, #3
   391e6:	2903      	cmp	r1, #3
   391e8:	d015      	beq.n	39216 <tx_ull_dequeue+0x72>
		conn->tx_head = conn->tx_head->next;
   391ea:	6812      	ldr	r2, [r2, #0]
   391ec:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			conn->tx_ctrl = NULL;
   391f0:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   391f2:	e9c3 2276 	strd	r2, r2, [r3, #472]	; 0x1d8
		tx->next = tx;
   391f6:	4603      	mov	r3, r0
}
   391f8:	bc10      	pop	{r4}
		tx->next = tx;
   391fa:	6003      	str	r3, [r0, #0]
}
   391fc:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   391fe:	f8d3 11dc 	ldr.w	r1, [r3, #476]	; 0x1dc
		conn->tx_head = conn->tx_head->next;
   39202:	6812      	ldr	r2, [r2, #0]
   39204:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   39208:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   3920a:	bf18      	it	ne
   3920c:	f8c3 21d8 	strne.w	r2, [r3, #472]	; 0x1d8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   39210:	d0ee      	beq.n	391f0 <tx_ull_dequeue+0x4c>
		tx->next = tx;
   39212:	4603      	mov	r3, r0
   39214:	e7f0      	b.n	391f8 <tx_ull_dequeue+0x54>
	    ((pdu_data_tx->llctrl.opcode !=
   39216:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39218:	2903      	cmp	r1, #3
   3921a:	d0d1      	beq.n	391c0 <tx_ull_dequeue+0x1c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3921c:	290a      	cmp	r1, #10
   3921e:	d1e4      	bne.n	391ea <tx_ull_dequeue+0x46>
   39220:	e7ce      	b.n	391c0 <tx_ull_dequeue+0x1c>
   39222:	bf00      	nop

00039224 <feature_rsp_send>:

#if defined(CONFIG_BT_PERIPHERAL) || \
	(defined(CONFIG_BT_CENTRAL) && defined(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG))
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			    struct pdu_data *pdu_rx)
{
   39224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->common.txn_lock) {
   39228:	f890 60e4 	ldrb.w	r6, [r0, #228]	; 0xe4
   3922c:	f016 0602 	ands.w	r6, r6, #2
{
   39230:	4688      	mov	r8, r1
	if (conn->common.txn_lock) {
   39232:	d16a      	bne.n	3930a <feature_rsp_send+0xe6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   39234:	4605      	mov	r5, r0
   39236:	4839      	ldr	r0, [pc, #228]	; (3931c <feature_rsp_send+0xf8>)
   39238:	4691      	mov	r9, r2
   3923a:	f7fa fb4f 	bl	338dc <mem_acquire>
	if (!tx) {
   3923e:	4604      	mov	r4, r0
   39240:	2800      	cmp	r0, #0
   39242:	d067      	beq.n	39314 <feature_rsp_send+0xf0>
	conn->common.txn_lock = 1U;
   39244:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
	feat &= LL_FEAT_BIT_MASK;
   39248:	4935      	ldr	r1, [pc, #212]	; (39320 <feature_rsp_send+0xfc>)
	conn->common.txn_lock = 1U;
   3924a:	f043 0302 	orr.w	r3, r3, #2
   3924e:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
   39252:	f8d9 2004 	ldr.w	r2, [r9, #4]
   39256:	f8d9 3008 	ldr.w	r3, [r9, #8]
	feat &= LL_FEAT_BIT_MASK;
   3925a:	4311      	orrs	r1, r2
		return err;
	}

	/* AND the feature set to get Feature USED */
	req = &pdu_rx->llctrl.feature_req;
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   3925c:	f8d5 2138 	ldr.w	r2, [r5, #312]	; 0x138
   39260:	400a      	ands	r2, r1
   39262:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
	feat &= LL_FEAT_BIT_MASK;
   39266:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   3926a:	f8d5 213c 	ldr.w	r2, [r5, #316]	; 0x13c
	feat &= LL_FEAT_BIT_MASK;
   3926e:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   39272:	401a      	ands	r2, r3
   39274:	f8c5 213c 	str.w	r2, [r5, #316]	; 0x13c
   39278:	f8d9 7004 	ldr.w	r7, [r9, #4]
   3927c:	f8d9 9008 	ldr.w	r9, [r9, #8]
	return feat;
   39280:	f009 09ff 	and.w	r9, r9, #255	; 0xff
	 * Get all the features of peer, except octet 0.
	 * Octet 0 is the actual features used on the link
	 * See BTCore V5.2, Vol. 6, Part B, chapter 5.1.4
	 */
	conn->llcp_feature.features_peer =
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   39284:	f7fd fc26 	bl	36ad4 <ll_feat_get>
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   39288:	f049 0310 	orr.w	r3, r9, #16
	conn->llcp_feature.features_peer =
   3928c:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
	feat &= LL_FEAT_BIT_MASK;
   39290:	4b23      	ldr	r3, [pc, #140]	; (39320 <feature_rsp_send+0xfc>)
   39292:	433b      	orrs	r3, r7
	feat_result = feat_to_keep & feat_octet0;
   39294:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   39296:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   3929a:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
   3929e:	4303      	orrs	r3, r0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   392a0:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   392a4:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   392a8:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140

	/* features exchanged */
	conn->common.fex_valid = 1U;
   392ac:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
   392b0:	f043 0301 	orr.w	r3, r3, #1
   392b4:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
	/* Enqueue feature response */
	pdu_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_tx);

	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   392b8:	7923      	ldrb	r3, [r4, #4]
   392ba:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   392be:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   392c0:	7123      	strb	r3, [r4, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   392c2:	2309      	movs	r3, #9
   392c4:	7163      	strb	r3, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   392c6:	71e3      	strb	r3, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   392c8:	18a0      	adds	r0, r4, r2
   392ca:	4631      	mov	r1, r6
   392cc:	f012 fae8 	bl	4b8a0 <memset>
		     sizeof(pdu_tx->llctrl.feature_rsp.features));
	/*
	 * On feature response we send the local supported features.
	 * See BTCore V5.2 VOl 6 Part B, chapter 5.1.4
	 */
	feat = feat_land_octet0(ll_feat_get(),
   392d0:	f7fd fc00 	bl	36ad4 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   392d4:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
	dst[0] = val;
   392d8:	7321      	strb	r1, [r4, #12]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   392da:	f063 03ff 	orn	r3, r3, #255	; 0xff
   392de:	4003      	ands	r3, r0
	sys_put_le16(val >> 16, &dst[2]);
   392e0:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   392e2:	7223      	strb	r3, [r4, #8]
   392e4:	72a2      	strb	r2, [r4, #10]
	dst[1] = val >> 8;
   392e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   392ea:	0a12      	lsrs	r2, r2, #8
				conn->llcp_feature.features_conn);
	sys_put_le64(feat, pdu_tx->llctrl.feature_rsp.features);

	ctrl_tx_sec_enqueue(conn, tx);
   392ec:	4628      	mov	r0, r5
   392ee:	7263      	strb	r3, [r4, #9]
   392f0:	7366      	strb	r6, [r4, #13]
	dst[0] = val;
   392f2:	73a6      	strb	r6, [r4, #14]
	dst[1] = val >> 8;
   392f4:	73e6      	strb	r6, [r4, #15]
   392f6:	72e2      	strb	r2, [r4, #11]
   392f8:	4621      	mov	r1, r4
   392fa:	f7ff fdf7 	bl	38eec <ctrl_tx_sec_enqueue>

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   392fe:	2301      	movs	r3, #1
   39300:	f888 3004 	strb.w	r3, [r8, #4]

	return 0;
   39304:	4630      	mov	r0, r6
}
   39306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3930a:	2301      	movs	r3, #1
   3930c:	710b      	strb	r3, [r1, #4]
		*err = 0U;
   3930e:	2000      	movs	r0, #0
}
   39310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		*err = -ENOBUFS;
   39314:	f06f 0068 	mvn.w	r0, #104	; 0x68
   39318:	e7f5      	b.n	39306 <feature_rsp_send+0xe2>
   3931a:	bf00      	nop
   3931c:	200052e8 	.word	0x200052e8
   39320:	087830d0 	.word	0x087830d0

00039324 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   39324:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
   39328:	4605      	mov	r5, r0
	if (conn->common.txn_lock) {
   3932a:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
   3932e:	0780      	lsls	r0, r0, #30
{
   39330:	460e      	mov	r6, r1
	if (conn->common.txn_lock) {
   39332:	d434      	bmi.n	3939e <reject_ext_ind_send+0x7a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   39334:	4831      	ldr	r0, [pc, #196]	; (393fc <reject_ext_ind_send+0xd8>)
   39336:	4690      	mov	r8, r2
   39338:	461f      	mov	r7, r3
   3933a:	f7fa facf 	bl	338dc <mem_acquire>
	if (!tx) {
   3933e:	2800      	cmp	r0, #0
   39340:	d03c      	beq.n	393bc <reject_ext_ind_send+0x98>
	conn->common.txn_lock = 1U;
   39342:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
   39346:	f043 0302 	orr.w	r3, r3, #2
   3934a:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   3934e:	2303      	movs	r3, #3
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   39350:	2211      	movs	r2, #17
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   39352:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   39354:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   39358:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3935a:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   3935c:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39360:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   39364:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39366:	7102      	strb	r2, [r0, #4]
	if (
   39368:	b1f3      	cbz	r3, 393a8 <reject_ext_ind_send+0x84>
	    !conn->llcp_enc.pause_tx &&
   3936a:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
	    conn->tx_head &&
   3936e:	0791      	lsls	r1, r2, #30
   39370:	d41a      	bmi.n	393a8 <reject_ext_ind_send+0x84>
	    !conn->llcp_phy.pause_tx &&
   39372:	f895 21cf 	ldrb.w	r2, [r5, #463]	; 0x1cf
   39376:	07d2      	lsls	r2, r2, #31
   39378:	d416      	bmi.n	393a8 <reject_ext_ind_send+0x84>
		if (conn->tx_head == conn->tx_data) {
   3937a:	f8d5 21e0 	ldr.w	r2, [r5, #480]	; 0x1e0
   3937e:	4293      	cmp	r3, r2
   39380:	d027      	beq.n	393d2 <reject_ext_ind_send+0xae>
		} else if (!conn->tx_ctrl) {
   39382:	f8d5 21d8 	ldr.w	r2, [r5, #472]	; 0x1d8
   39386:	b1e2      	cbz	r2, 393c2 <reject_ext_ind_send+0x9e>
	tx->next = conn->tx_ctrl_last->next;
   39388:	f8d5 31dc 	ldr.w	r3, [r5, #476]	; 0x1dc
   3938c:	681a      	ldr	r2, [r3, #0]
   3938e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   39390:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   39392:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   39394:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
	if (!tx->next) {
   39398:	b90b      	cbnz	r3, 3939e <reject_ext_ind_send+0x7a>
		conn->tx_data_last = tx;
   3939a:	f8c5 01e4 	str.w	r0, [r5, #484]	; 0x1e4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3939e:	2301      	movs	r3, #1
   393a0:	7133      	strb	r3, [r6, #4]
		*err = 0U;
   393a2:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   393a4:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
		if (!conn->tx_ctrl) {
   393a8:	f8d5 21d8 	ldr.w	r2, [r5, #472]	; 0x1d8
   393ac:	2a00      	cmp	r2, #0
   393ae:	d1eb      	bne.n	39388 <reject_ext_ind_send+0x64>
			tx->next = conn->tx_head;
   393b0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   393b2:	e9c5 0075 	strd	r0, r0, [r5, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   393b6:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
   393ba:	e7ed      	b.n	39398 <reject_ext_ind_send+0x74>
		*err = -ENOBUFS;
   393bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   393c0:	e7f0      	b.n	393a4 <reject_ext_ind_send+0x80>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   393c2:	791a      	ldrb	r2, [r3, #4]
   393c4:	f002 0203 	and.w	r2, r2, #3
   393c8:	2a03      	cmp	r2, #3
   393ca:	d010      	beq.n	393ee <reject_ext_ind_send+0xca>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   393cc:	f8c5 31d8 	str.w	r3, [r5, #472]	; 0x1d8
   393d0:	e7dc      	b.n	3938c <reject_ext_ind_send+0x68>
			conn->tx_data = conn->tx_data->next;
   393d2:	681a      	ldr	r2, [r3, #0]
   393d4:	f8c5 21e0 	str.w	r2, [r5, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   393d8:	f8d5 21d8 	ldr.w	r2, [r5, #472]	; 0x1d8
   393dc:	2a00      	cmp	r2, #0
   393de:	d1d3      	bne.n	39388 <reject_ext_ind_send+0x64>
			tx->next = conn->tx_head->next;
   393e0:	681a      	ldr	r2, [r3, #0]
   393e2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   393e4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   393e6:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   393e8:	e9c5 0076 	strd	r0, r0, [r5, #472]	; 0x1d8
   393ec:	e7d4      	b.n	39398 <reject_ext_ind_send+0x74>
	    ((pdu_data_tx->llctrl.opcode !=
   393ee:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   393f0:	2a03      	cmp	r2, #3
   393f2:	d0f5      	beq.n	393e0 <reject_ext_ind_send+0xbc>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   393f4:	2a0a      	cmp	r2, #10
   393f6:	d1e9      	bne.n	393cc <reject_ext_ind_send+0xa8>
   393f8:	e7f2      	b.n	393e0 <reject_ext_ind_send+0xbc>
   393fa:	bf00      	nop
   393fc:	200052e8 	.word	0x200052e8

00039400 <event_len_prep>:
{
   39400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   39402:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   39406:	f003 0207 	and.w	r2, r3, #7
{
   3940a:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   3940c:	2a06      	cmp	r2, #6
   3940e:	f200 80d7 	bhi.w	395c0 <event_len_prep+0x1c0>
   39412:	e8df f002 	tbb	[pc, r2]
   39416:	4804      	.short	0x4804
   39418:	49494848 	.word	0x49494848
   3941c:	48          	.byte	0x48
   3941d:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3941e:	486f      	ldr	r0, [pc, #444]	; (395dc <event_len_prep+0x1dc>)
   39420:	f7fa fa5c 	bl	338dc <mem_acquire>
		if (!tx) {
   39424:	2800      	cmp	r0, #0
   39426:	d03e      	beq.n	394a6 <event_len_prep+0xa6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   39428:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   3942c:	f8b4 21c2 	ldrh.w	r2, [r4, #450]	; 0x1c2
		conn->default_tx_time = conn->llcp_length.tx_time;
   39430:	f8b4 51c6 	ldrh.w	r5, [r4, #454]	; 0x1c6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   39434:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   39438:	2301      	movs	r3, #1
   3943a:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   3943e:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   39442:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   39446:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   39448:	72c3      	strb	r3, [r0, #11]
   3944a:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   3944c:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   3944e:	2309      	movs	r3, #9
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   39450:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   39452:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->len =
   39454:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   39456:	2214      	movs	r2, #20
	    conn->tx_head &&
   39458:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   3945c:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   3945e:	221b      	movs	r2, #27
   39460:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39462:	7902      	ldrb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   39464:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39466:	f042 0203 	orr.w	r2, r2, #3
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   3946a:	7241      	strb	r1, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3946c:	7102      	strb	r2, [r0, #4]
	if (
   3946e:	b13b      	cbz	r3, 39480 <event_len_prep+0x80>
	    !conn->llcp_enc.pause_tx &&
   39470:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   39474:	0791      	lsls	r1, r2, #30
   39476:	d403      	bmi.n	39480 <event_len_prep+0x80>
	    !conn->llcp_phy.pause_tx &&
   39478:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3947c:	07d2      	lsls	r2, r2, #31
   3947e:	d576      	bpl.n	3956e <event_len_prep+0x16e>
		if (!conn->tx_ctrl) {
   39480:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   39484:	2a00      	cmp	r2, #0
   39486:	f000 8082 	beq.w	3958e <event_len_prep+0x18e>
	tx->next = conn->tx_ctrl_last->next;
   3948a:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3948e:	681a      	ldr	r2, [r3, #0]
   39490:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   39492:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   39494:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   39496:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3949a:	2b00      	cmp	r3, #0
   3949c:	d056      	beq.n	3954c <event_len_prep+0x14c>
		conn->procedure_expire = conn->procedure_reload;
   3949e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   394a2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   394a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   394a8:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   394ac:	f8b0 c1c0 	ldrh.w	ip, [r0, #448]	; 0x1c0
		lll->max_rx_time = conn->llcp_length.rx_time;
   394b0:	f8b0 11c4 	ldrh.w	r1, [r0, #452]	; 0x1c4
		tx_octets = conn->llcp_length.tx_octets;
   394b4:	f8b0 71c2 	ldrh.w	r7, [r0, #450]	; 0x1c2
		uint16_t tx_time = conn->llcp_length.tx_time;
   394b8:	f8b0 61c6 	ldrh.w	r6, [r0, #454]	; 0x1c6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   394bc:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   394c0:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   394c2:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   394c6:	d024      	beq.n	39512 <event_len_prep+0x112>
			conn->llcp_length.state =
   394c8:	2206      	movs	r2, #6
   394ca:	f362 0302 	bfi	r3, r2, #0, #3
   394ce:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
		rx = conn->llcp_rx;
   394d2:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
		LL_ASSERT(rx && rx->hdr.link);
   394d6:	b335      	cbz	r5, 39526 <event_len_prep+0x126>
   394d8:	6828      	ldr	r0, [r5, #0]
   394da:	b320      	cbz	r0, 39526 <event_len_prep+0x126>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   394dc:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   394de:	6842      	ldr	r2, [r0, #4]
   394e0:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   394e4:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   394e8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   394ea:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   394ec:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   394ee:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   394f0:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   394f2:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   394f4:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   394f6:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   394f8:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   394fc:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   394fe:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   39500:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   39502:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   39504:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   39506:	f7fe f82f 	bl	37568 <ll_rx_put>
}
   3950a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   3950e:	f7fe b835 	b.w	3757c <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   39512:	f8b0 21c8 	ldrh.w	r2, [r0, #456]	; 0x1c8
   39516:	b9e2      	cbnz	r2, 39552 <event_len_prep+0x152>
				conn->llcp_length.ack = conn->llcp_length.req;
   39518:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
				conn->procedure_expire = 0U;
   3951c:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   39520:	f880 31bd 	strb.w	r3, [r0, #445]	; 0x1bd
				conn->procedure_expire = 0U;
   39524:	e7d5      	b.n	394d2 <event_len_prep+0xd2>
		LL_ASSERT(rx && rx->hdr.link);
   39526:	4a2e      	ldr	r2, [pc, #184]	; (395e0 <event_len_prep+0x1e0>)
   39528:	492e      	ldr	r1, [pc, #184]	; (395e4 <event_len_prep+0x1e4>)
   3952a:	482f      	ldr	r0, [pc, #188]	; (395e8 <event_len_prep+0x1e8>)
   3952c:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   39530:	f010 f8a0 	bl	49674 <printk>
   39534:	4040      	eors	r0, r0
   39536:	f380 8811 	msr	BASEPRI, r0
   3953a:	f04f 0003 	mov.w	r0, #3
   3953e:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   39540:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   39542:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   39546:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   3954a:	e7c7      	b.n	394dc <event_len_prep+0xdc>
		conn->tx_data_last = tx;
   3954c:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   39550:	e7a5      	b.n	3949e <event_len_prep+0x9e>
				conn->llcp_length.tx_octets =
   39552:	f8a0 21c2 	strh.w	r2, [r0, #450]	; 0x1c2
				conn->llcp_length.cache.tx_octets = 0;
   39556:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   39558:	f362 0302 	bfi	r3, r2, #0, #3
   3955c:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
				conn->llcp_length.tx_time =
   39560:	f8b0 31ca 	ldrh.w	r3, [r0, #458]	; 0x1ca
				conn->llcp_length.cache.tx_octets = 0;
   39564:	f8a0 21c8 	strh.w	r2, [r0, #456]	; 0x1c8
				conn->llcp_length.tx_time =
   39568:	f8a0 31c6 	strh.w	r3, [r0, #454]	; 0x1c6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3956c:	e7b1      	b.n	394d2 <event_len_prep+0xd2>
		if (conn->tx_head == conn->tx_data) {
   3956e:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   39572:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   39574:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   39578:	d00f      	beq.n	3959a <event_len_prep+0x19a>
		} else if (!conn->tx_ctrl) {
   3957a:	2a00      	cmp	r2, #0
   3957c:	d185      	bne.n	3948a <event_len_prep+0x8a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3957e:	791a      	ldrb	r2, [r3, #4]
   39580:	f002 0203 	and.w	r2, r2, #3
   39584:	2a03      	cmp	r2, #3
   39586:	d015      	beq.n	395b4 <event_len_prep+0x1b4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   39588:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   3958c:	e77f      	b.n	3948e <event_len_prep+0x8e>
			tx->next = conn->tx_head;
   3958e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   39590:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   39594:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   39598:	e77f      	b.n	3949a <event_len_prep+0x9a>
			conn->tx_data = conn->tx_data->next;
   3959a:	6819      	ldr	r1, [r3, #0]
   3959c:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   395a0:	2a00      	cmp	r2, #0
   395a2:	f47f af72 	bne.w	3948a <event_len_prep+0x8a>
			tx->next = conn->tx_head->next;
   395a6:	681a      	ldr	r2, [r3, #0]
   395a8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   395aa:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   395ac:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   395ae:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   395b2:	e772      	b.n	3949a <event_len_prep+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   395b4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   395b6:	2a03      	cmp	r2, #3
   395b8:	d0f5      	beq.n	395a6 <event_len_prep+0x1a6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   395ba:	2a0a      	cmp	r2, #10
   395bc:	d1e4      	bne.n	39588 <event_len_prep+0x188>
   395be:	e7f2      	b.n	395a6 <event_len_prep+0x1a6>
		LL_ASSERT(0);
   395c0:	4a07      	ldr	r2, [pc, #28]	; (395e0 <event_len_prep+0x1e0>)
   395c2:	490a      	ldr	r1, [pc, #40]	; (395ec <event_len_prep+0x1ec>)
   395c4:	4808      	ldr	r0, [pc, #32]	; (395e8 <event_len_prep+0x1e8>)
   395c6:	f241 03ea 	movw	r3, #4330	; 0x10ea
   395ca:	f010 f853 	bl	49674 <printk>
   395ce:	4040      	eors	r0, r0
   395d0:	f380 8811 	msr	BASEPRI, r0
   395d4:	f04f 0003 	mov.w	r0, #3
   395d8:	df02      	svc	2
}
   395da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   395dc:	200052e8 	.word	0x200052e8
   395e0:	00052970 	.word	0x00052970
   395e4:	00052a3c 	.word	0x00052a3c
   395e8:	00052460 	.word	0x00052460
   395ec:	000524c0 	.word	0x000524c0

000395f0 <event_phy_upd_ind_prep>:
{
   395f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   395f4:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
   395f8:	f013 0601 	ands.w	r6, r3, #1
{
   395fc:	4604      	mov	r4, r0
   395fe:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   39600:	f040 808b 	bne.w	3971a <event_phy_upd_ind_prep+0x12a>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   39604:	f8b0 10f6 	ldrh.w	r1, [r0, #246]	; 0xf6
   39608:	1a69      	subs	r1, r5, r1
   3960a:	040a      	lsls	r2, r1, #16
   3960c:	f100 808c 	bmi.w	39728 <event_phy_upd_ind_prep+0x138>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   39610:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   39614:	2900      	cmp	r1, #0
   39616:	f2c0 8127 	blt.w	39868 <event_phy_upd_ind_prep+0x278>
		rx = conn->llcp_rx;
   3961a:	f8d0 5114 	ldr.w	r5, [r0, #276]	; 0x114
   3961e:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   39620:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
   39624:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
		old_tx = lll->phy_tx;
   39628:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   3962c:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_tx_time = lll->max_tx_time;
   39630:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		uint16_t eff_rx_time = lll->max_rx_time;
   39634:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   39638:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   3963c:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   39640:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   39644:	d007      	beq.n	39656 <event_phy_upd_ind_prep+0x66>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   39646:	f3c3 0082 	ubfx	r0, r3, #2, #3
   3964a:	f360 0102 	bfi	r1, r0, #0, #3
   3964e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   39652:	f44f 76a4 	mov.w	r6, #328	; 0x148
		if (conn->llcp.phy_upd_ind.rx) {
   39656:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   3965a:	d167      	bne.n	3972c <event_phy_upd_ind_prep+0x13c>
		LL_ASSERT(rx && rx->hdr.link);
   3965c:	2d00      	cmp	r5, #0
   3965e:	f000 80e3 	beq.w	39828 <event_phy_upd_ind_prep+0x238>
   39662:	6828      	ldr	r0, [r5, #0]
   39664:	2800      	cmp	r0, #0
   39666:	f000 80df 	beq.w	39828 <event_phy_upd_ind_prep+0x238>
		conn->llcp_rx = rx->hdr.link->mem;
   3966a:	6843      	ldr	r3, [r0, #4]
   3966c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39670:	f012 0f02 	tst.w	r2, #2
   39674:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   39678:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   3967c:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   39680:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39684:	d102      	bne.n	3968c <event_phy_upd_ind_prep+0x9c>
   39686:	4599      	cmp	r9, r3
   39688:	f000 80b1 	beq.w	397ee <event_phy_upd_ind_prep+0x1fe>
		rx->hdr.handle = lll->handle;
   3968c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		upd->tx = lll->phy_tx;
   3968e:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   39690:	231c      	movs	r3, #28
   39692:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   39694:	2300      	movs	r3, #0
		rx->hdr.handle = lll->handle;
   39696:	80e9      	strh	r1, [r5, #6]
		upd->rx = lll->phy_rx;
   39698:	77aa      	strb	r2, [r5, #30]
		upd->status = 0U;
   3969a:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   3969c:	4629      	mov	r1, r5
   3969e:	f7fd ff63 	bl	37568 <ll_rx_put>
		rx = conn->llcp_rx;
   396a2:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
		LL_ASSERT(rx && rx->hdr.link);
   396a6:	2d00      	cmp	r5, #0
   396a8:	f000 80cf 	beq.w	3984a <event_phy_upd_ind_prep+0x25a>
   396ac:	6828      	ldr	r0, [r5, #0]
   396ae:	2800      	cmp	r0, #0
   396b0:	f000 80cb 	beq.w	3984a <event_phy_upd_ind_prep+0x25a>
		if ((eff_tx_time <= lll->max_tx_time) &&
   396b4:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   396b8:	6842      	ldr	r2, [r0, #4]
   396ba:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		if ((eff_tx_time <= lll->max_tx_time) &&
   396be:	42b3      	cmp	r3, r6
   396c0:	d30a      	bcc.n	396d8 <event_phy_upd_ind_prep+0xe8>
   396c2:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   396c6:	d807      	bhi.n	396d8 <event_phy_upd_ind_prep+0xe8>
		    (eff_rx_time <= lll->max_rx_time) &&
   396c8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   396cc:	42bb      	cmp	r3, r7
   396ce:	d303      	bcc.n	396d8 <event_phy_upd_ind_prep+0xe8>
		    (eff_rx_time <= lll->max_rx_time) &&
   396d0:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   396d4:	f240 8103 	bls.w	398de <event_phy_upd_ind_prep+0x2ee>
		lll->max_tx_time = eff_tx_time;
   396d8:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   396dc:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   396e0:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   396e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   396e4:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   396e6:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   396ea:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   396ee:	2109      	movs	r1, #9
   396f0:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   396f2:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   396f6:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   396f8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   396fc:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   396fe:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   39702:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   39704:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   39706:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   39708:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   3970a:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3970c:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   3970e:	f7fd ff2b 	bl	37568 <ll_rx_put>
}
   39712:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   39716:	f7fd bf31 	b.w	3757c <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   3971a:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   3971e:	2200      	movs	r2, #0
   39720:	f7fa f94a 	bl	339b8 <memq_peek>
   39724:	4606      	mov	r6, r0
   39726:	b158      	cbz	r0, 39740 <event_phy_upd_ind_prep+0x150>
}
   39728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   3972c:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   39730:	095b      	lsrs	r3, r3, #5
   39732:	f363 0102 	bfi	r1, r3, #0, #3
   39736:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   3973a:	f44f 77a4 	mov.w	r7, #328	; 0x148
   3973e:	e78d      	b.n	3965c <event_phy_upd_ind_prep+0x6c>
		rx = ll_pdu_rx_alloc_peek(2);
   39740:	2002      	movs	r0, #2
   39742:	f7fd ff21 	bl	37588 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   39746:	4680      	mov	r8, r0
   39748:	2800      	cmp	r0, #0
   3974a:	d0ed      	beq.n	39728 <event_phy_upd_ind_prep+0x138>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3974c:	4895      	ldr	r0, [pc, #596]	; (399a4 <event_phy_upd_ind_prep+0x3b4>)
   3974e:	f7fa f8c5 	bl	338dc <mem_acquire>
		if (!tx) {
   39752:	4607      	mov	r7, r0
   39754:	2800      	cmp	r0, #0
   39756:	d0e7      	beq.n	39728 <event_phy_upd_ind_prep+0x138>
		conn->llcp.phy_upd_ind.initiate = 0U;
   39758:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   3975c:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   39760:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   39764:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   39768:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   3976c:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		if (!((conn->llcp.phy_upd_ind.tx |
   39770:	b2db      	uxtb	r3, r3
   39772:	f040 8096 	bne.w	398a2 <event_phy_upd_ind_prep+0x2b2>
			conn->llcp_ack = conn->llcp_req;
   39776:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
			conn->llcp.phy_upd_ind.instant = 0U;
   3977a:	f8a4 60f6 	strh.w	r6, [r4, #246]	; 0xf6
			if (conn->llcp.phy_upd_ind.cmd) {
   3977e:	079d      	lsls	r5, r3, #30
			conn->llcp_ack = conn->llcp_req;
   39780:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			if (conn->llcp.phy_upd_ind.cmd) {
   39784:	f100 80bf 	bmi.w	39906 <event_phy_upd_ind_prep+0x316>
   39788:	4633      	mov	r3, r6
   3978a:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   3978c:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
   3978e:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   39790:	723e      	strb	r6, [r7, #8]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   39792:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->len =
   39794:	717b      	strb	r3, [r7, #5]
		pdu_ctrl_tx->llctrl.opcode =
   39796:	2218      	movs	r2, #24
	    conn->tx_head &&
   39798:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
		pdu_ctrl_tx->llctrl.opcode =
   3979c:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3979e:	793a      	ldrb	r2, [r7, #4]
   397a0:	f042 0203 	orr.w	r2, r2, #3
   397a4:	713a      	strb	r2, [r7, #4]
	if (
   397a6:	2b00      	cmp	r3, #0
   397a8:	f000 80a2 	beq.w	398f0 <event_phy_upd_ind_prep+0x300>
	    !conn->llcp_enc.pause_tx &&
   397ac:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   397b0:	0790      	lsls	r0, r2, #30
   397b2:	f100 809d 	bmi.w	398f0 <event_phy_upd_ind_prep+0x300>
	    !conn->llcp_phy.pause_tx &&
   397b6:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   397ba:	07d1      	lsls	r1, r2, #31
   397bc:	f100 8098 	bmi.w	398f0 <event_phy_upd_ind_prep+0x300>
		if (conn->tx_head == conn->tx_data) {
   397c0:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   397c4:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   397c6:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   397ca:	f000 80d0 	beq.w	3996e <event_phy_upd_ind_prep+0x37e>
		} else if (!conn->tx_ctrl) {
   397ce:	2a00      	cmp	r2, #0
   397d0:	f000 80da 	beq.w	39988 <event_phy_upd_ind_prep+0x398>
	tx->next = conn->tx_ctrl_last->next;
   397d4:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   397d8:	681a      	ldr	r2, [r3, #0]
   397da:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   397dc:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   397de:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   397e0:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   397e4:	2b00      	cmp	r3, #0
   397e6:	d19f      	bne.n	39728 <event_phy_upd_ind_prep+0x138>
		conn->tx_data_last = tx;
   397e8:	f8c4 71e4 	str.w	r7, [r4, #484]	; 0x1e4
   397ec:	e79c      	b.n	39728 <event_phy_upd_ind_prep+0x138>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   397ee:	4590      	cmp	r8, r2
   397f0:	f47f af4c 	bne.w	3968c <event_phy_upd_ind_prep+0x9c>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   397f4:	2301      	movs	r3, #1
   397f6:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   397f8:	4629      	mov	r1, r5
   397fa:	f7fd feb5 	bl	37568 <ll_rx_put>
				rx = conn->llcp_rx;
   397fe:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
				LL_ASSERT(rx && rx->hdr.link);
   39802:	2d00      	cmp	r5, #0
   39804:	f000 80a4 	beq.w	39950 <event_phy_upd_ind_prep+0x360>
   39808:	6828      	ldr	r0, [r5, #0]
   3980a:	2800      	cmp	r0, #0
   3980c:	f000 80a0 	beq.w	39950 <event_phy_upd_ind_prep+0x360>
				conn->llcp_rx = rx->hdr.link->mem;
   39810:	6842      	ldr	r2, [r0, #4]
   39812:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39816:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   39818:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3981a:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   3981c:	f7fd fea4 	bl	37568 <ll_rx_put>
}
   39820:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   39824:	f7fd beaa 	b.w	3757c <ll_rx_sched>
		LL_ASSERT(rx && rx->hdr.link);
   39828:	4a5f      	ldr	r2, [pc, #380]	; (399a8 <event_phy_upd_ind_prep+0x3b8>)
   3982a:	4960      	ldr	r1, [pc, #384]	; (399ac <event_phy_upd_ind_prep+0x3bc>)
   3982c:	4860      	ldr	r0, [pc, #384]	; (399b0 <event_phy_upd_ind_prep+0x3c0>)
   3982e:	f241 231a 	movw	r3, #4634	; 0x121a
   39832:	f00f ff1f 	bl	49674 <printk>
   39836:	4040      	eors	r0, r0
   39838:	f380 8811 	msr	BASEPRI, r0
   3983c:	f04f 0003 	mov.w	r0, #3
   39840:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   39842:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   39844:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   39848:	e70f      	b.n	3966a <event_phy_upd_ind_prep+0x7a>
		LL_ASSERT(rx && rx->hdr.link);
   3984a:	4a57      	ldr	r2, [pc, #348]	; (399a8 <event_phy_upd_ind_prep+0x3b8>)
   3984c:	4957      	ldr	r1, [pc, #348]	; (399ac <event_phy_upd_ind_prep+0x3bc>)
   3984e:	4858      	ldr	r0, [pc, #352]	; (399b0 <event_phy_upd_ind_prep+0x3c0>)
   39850:	f241 2349 	movw	r3, #4681	; 0x1249
   39854:	f00f ff0e 	bl	49674 <printk>
   39858:	4040      	eors	r0, r0
   3985a:	f380 8811 	msr	BASEPRI, r0
   3985e:	f04f 0003 	mov.w	r0, #3
   39862:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   39864:	6828      	ldr	r0, [r5, #0]
   39866:	e725      	b.n	396b4 <event_phy_upd_ind_prep+0xc4>
			rx = ll_pdu_rx_alloc();
   39868:	f7fd feac 	bl	375c4 <ll_pdu_rx_alloc>
			if (!rx) {
   3986c:	4605      	mov	r5, r0
   3986e:	2800      	cmp	r0, #0
   39870:	f43f af5a 	beq.w	39728 <event_phy_upd_ind_prep+0x138>
			rx->hdr.link->mem = conn->llcp_rx;
   39874:	6803      	ldr	r3, [r0, #0]
   39876:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   3987a:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3987c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   39880:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   39884:	2b00      	cmp	r3, #0
   39886:	da02      	bge.n	3988e <event_phy_upd_ind_prep+0x29e>
   39888:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   3988c:	b91b      	cbnz	r3, 39896 <event_phy_upd_ind_prep+0x2a6>
		if (conn->llcp.phy_upd_ind.tx) {
   3988e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   39892:	461a      	mov	r2, r3
   39894:	e6c4      	b.n	39620 <event_phy_upd_ind_prep+0x30>
   39896:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->periph.llcp_type = LLCP_NONE;
   3989a:	f884 60e5 	strb.w	r6, [r4, #229]	; 0xe5
		if (conn->llcp.phy_upd_ind.tx) {
   3989e:	461a      	mov	r2, r3
			conn->periph.llcp_type = LLCP_NONE;
   398a0:	e6c2      	b.n	39628 <event_phy_upd_ind_prep+0x38>
							 lll->latency +
   398a2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   398a4:	1da9      	adds	r1, r5, #6
   398a6:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   398a8:	f8a4 10f6 	strh.w	r1, [r4, #246]	; 0xf6
			(void)ll_pdu_rx_alloc();
   398ac:	f7fd fe8a 	bl	375c4 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   398b0:	f8d8 3000 	ldr.w	r3, [r8]
   398b4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   398b8:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   398ba:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
				rx = ll_pdu_rx_alloc();
   398be:	f7fd fe81 	bl	375c4 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   398c2:	6803      	ldr	r3, [r0, #0]
   398c4:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   398c8:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   398ca:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   398ce:	f8b4 20f6 	ldrh.w	r2, [r4, #246]	; 0xf6
				conn->llcp_rx = rx;
   398d2:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   398d6:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   398da:	095b      	lsrs	r3, r3, #5
   398dc:	e756      	b.n	3978c <event_phy_upd_ind_prep+0x19c>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   398de:	2301      	movs	r3, #1
   398e0:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   398e2:	4629      	mov	r1, r5
   398e4:	f7fd fe40 	bl	37568 <ll_rx_put>
}
   398e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   398ec:	f7fd be46 	b.w	3757c <ll_rx_sched>
		if (!conn->tx_ctrl) {
   398f0:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   398f4:	2a00      	cmp	r2, #0
   398f6:	f47f af6d 	bne.w	397d4 <event_phy_upd_ind_prep+0x1e4>
			tx->next = conn->tx_head;
   398fa:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   398fc:	e9c4 7775 	strd	r7, r7, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   39900:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
   39904:	e76e      	b.n	397e4 <event_phy_upd_ind_prep+0x1f4>
				(void)ll_pdu_rx_alloc();
   39906:	f7fd fe5d 	bl	375c4 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   3990a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3990c:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   39910:	231c      	movs	r3, #28
				upd->status = 0U;
   39912:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   39916:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   3991a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   3991e:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   39922:	f3c3 0302 	ubfx	r3, r3, #0, #3
   39926:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   3992a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3992e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   39932:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   39936:	4641      	mov	r1, r8
   39938:	f7fd fe16 	bl	37568 <ll_rx_put>
				ll_rx_sched();
   3993c:	f7fd fe1e 	bl	3757c <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   39940:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   39944:	f8b4 20f6 	ldrh.w	r2, [r4, #246]	; 0xf6
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   39948:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   3994c:	095b      	lsrs	r3, r3, #5
   3994e:	e71d      	b.n	3978c <event_phy_upd_ind_prep+0x19c>
				LL_ASSERT(rx && rx->hdr.link);
   39950:	4a15      	ldr	r2, [pc, #84]	; (399a8 <event_phy_upd_ind_prep+0x3b8>)
   39952:	4916      	ldr	r1, [pc, #88]	; (399ac <event_phy_upd_ind_prep+0x3bc>)
   39954:	4816      	ldr	r0, [pc, #88]	; (399b0 <event_phy_upd_ind_prep+0x3c0>)
   39956:	f241 232c 	movw	r3, #4652	; 0x122c
   3995a:	f00f fe8b 	bl	49674 <printk>
   3995e:	4040      	eors	r0, r0
   39960:	f380 8811 	msr	BASEPRI, r0
   39964:	f04f 0003 	mov.w	r0, #3
   39968:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   3996a:	6828      	ldr	r0, [r5, #0]
   3996c:	e750      	b.n	39810 <event_phy_upd_ind_prep+0x220>
			conn->tx_data = conn->tx_data->next;
   3996e:	6819      	ldr	r1, [r3, #0]
   39970:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   39974:	2a00      	cmp	r2, #0
   39976:	f47f af2d 	bne.w	397d4 <event_phy_upd_ind_prep+0x1e4>
			tx->next = conn->tx_head->next;
   3997a:	681a      	ldr	r2, [r3, #0]
   3997c:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   3997e:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   39980:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   39982:	e9c4 7776 	strd	r7, r7, [r4, #472]	; 0x1d8
   39986:	e72d      	b.n	397e4 <event_phy_upd_ind_prep+0x1f4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39988:	791a      	ldrb	r2, [r3, #4]
   3998a:	f002 0203 	and.w	r2, r2, #3
   3998e:	2a03      	cmp	r2, #3
   39990:	d002      	beq.n	39998 <event_phy_upd_ind_prep+0x3a8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   39992:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   39996:	e71d      	b.n	397d4 <event_phy_upd_ind_prep+0x1e4>
	    ((pdu_data_tx->llctrl.opcode !=
   39998:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3999a:	2a03      	cmp	r2, #3
   3999c:	d0ed      	beq.n	3997a <event_phy_upd_ind_prep+0x38a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3999e:	2a0a      	cmp	r2, #10
   399a0:	d1f7      	bne.n	39992 <event_phy_upd_ind_prep+0x3a2>
   399a2:	e7ea      	b.n	3997a <event_phy_upd_ind_prep+0x38a>
   399a4:	200052e8 	.word	0x200052e8
   399a8:	00052970 	.word	0x00052970
   399ac:	00052a3c 	.word	0x00052a3c
   399b0:	00052460 	.word	0x00052460

000399b4 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   399b4:	4801      	ldr	r0, [pc, #4]	; (399bc <ll_conn_acquire+0x8>)
   399b6:	f7f9 bf91 	b.w	338dc <mem_acquire>
   399ba:	bf00      	nop
   399bc:	20005250 	.word	0x20005250

000399c0 <ll_conn_release>:
	mem_release(conn, &conn_free);
   399c0:	4901      	ldr	r1, [pc, #4]	; (399c8 <ll_conn_release+0x8>)
   399c2:	f7f9 bfa5 	b.w	33910 <mem_release>
   399c6:	bf00      	nop
   399c8:	20005250 	.word	0x20005250

000399cc <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   399cc:	4902      	ldr	r1, [pc, #8]	; (399d8 <ll_conn_handle_get+0xc>)
   399ce:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   399d2:	f7f9 bfb9 	b.w	33948 <mem_index_get>
   399d6:	bf00      	nop
   399d8:	20002d58 	.word	0x20002d58

000399dc <ll_conn_get>:
{
   399dc:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   399de:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   399e2:	4801      	ldr	r0, [pc, #4]	; (399e8 <ll_conn_get+0xc>)
   399e4:	f7f9 bfac 	b.w	33940 <mem_get>
   399e8:	20002d58 	.word	0x20002d58

000399ec <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   399ec:	2805      	cmp	r0, #5
   399ee:	d80c      	bhi.n	39a0a <ll_connected_get+0x1e>
{
   399f0:	b510      	push	{r4, lr}
   399f2:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   399f4:	4622      	mov	r2, r4
   399f6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   399fa:	4805      	ldr	r0, [pc, #20]	; (39a10 <ll_connected_get+0x24>)
   399fc:	f7f9 ffa0 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   39a00:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   39a02:	42a3      	cmp	r3, r4
		return NULL;
   39a04:	bf18      	it	ne
   39a06:	2000      	movne	r0, #0
}
   39a08:	bd10      	pop	{r4, pc}
		return NULL;
   39a0a:	2000      	movs	r0, #0
}
   39a0c:	4770      	bx	lr
   39a0e:	bf00      	nop
   39a10:	20002d58 	.word	0x20002d58

00039a14 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   39a14:	4801      	ldr	r0, [pc, #4]	; (39a1c <ll_tx_mem_acquire+0x8>)
   39a16:	f7f9 bf61 	b.w	338dc <mem_acquire>
   39a1a:	bf00      	nop
   39a1c:	20005278 	.word	0x20005278

00039a20 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   39a20:	4901      	ldr	r1, [pc, #4]	; (39a28 <ll_tx_mem_release+0x8>)
   39a22:	f7f9 bf75 	b.w	33910 <mem_release>
   39a26:	bf00      	nop
   39a28:	20005278 	.word	0x20005278

00039a2c <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   39a2c:	2805      	cmp	r0, #5
   39a2e:	d841      	bhi.n	39ab4 <ll_tx_mem_enqueue+0x88>
{
   39a30:	b570      	push	{r4, r5, r6, lr}
   39a32:	4604      	mov	r4, r0
   39a34:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39a36:	4821      	ldr	r0, [pc, #132]	; (39abc <ll_tx_mem_enqueue+0x90>)
   39a38:	4622      	mov	r2, r4
   39a3a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39a3e:	f7f9 ff7f 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   39a42:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   39a44:	42a3      	cmp	r3, r4
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39a46:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   39a48:	d11d      	bne.n	39a86 <ll_tx_mem_enqueue+0x5a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   39a4a:	4a1d      	ldr	r2, [pc, #116]	; (39ac0 <ll_tx_mem_enqueue+0x94>)
   39a4c:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   39a50:	7851      	ldrb	r1, [r2, #1]
   39a52:	7810      	ldrb	r0, [r2, #0]
	last = last + 1;
   39a54:	f10c 0301 	add.w	r3, ip, #1
   39a58:	b2db      	uxtb	r3, r3
		last = 0U;
   39a5a:	4299      	cmp	r1, r3
   39a5c:	bf08      	it	eq
   39a5e:	2300      	moveq	r3, #0
   39a60:	7891      	ldrb	r1, [r2, #2]
	if (last == first) {
   39a62:	4299      	cmp	r1, r3
   39a64:	d023      	beq.n	39aae <ll_tx_mem_enqueue+0x82>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   39a66:	fb1c fc00 	smulbb	ip, ip, r0
   39a6a:	1d10      	adds	r0, r2, #4
	lll_tx->handle = handle;
   39a6c:	f820 400c 	strh.w	r4, [r0, ip]
   39a70:	4460      	add	r0, ip
	lll_tx->node = tx;
   39a72:	6046      	str	r6, [r0, #4]
	*last = idx; /* Commit: Update write index */
   39a74:	70d3      	strb	r3, [r2, #3]
   39a76:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   39a78:	b943      	cbnz	r3, 39a8c <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39a7a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   39a7e:	2b00      	cmp	r3, #0
   39a80:	db0f      	blt.n	39aa2 <ll_tx_mem_enqueue+0x76>
	return 0;
   39a82:	2000      	movs	r0, #0
}
   39a84:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   39a86:	f06f 0015 	mvn.w	r0, #21
}
   39a8a:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   39a8c:	4b0d      	ldr	r3, [pc, #52]	; (39ac4 <ll_tx_mem_enqueue+0x98>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   39a8e:	2200      	movs	r2, #0
   39a90:	2101      	movs	r1, #1
   39a92:	2003      	movs	r0, #3
		mfy.param = conn;
   39a94:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   39a96:	f7f9 fffb 	bl	33a90 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39a9a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   39a9e:	2b00      	cmp	r3, #0
   39aa0:	daef      	bge.n	39a82 <ll_tx_mem_enqueue+0x56>
		ull_periph_latency_cancel(conn, handle);
   39aa2:	4628      	mov	r0, r5
   39aa4:	4621      	mov	r1, r4
   39aa6:	f004 f9b1 	bl	3de0c <ull_periph_latency_cancel>
	return 0;
   39aaa:	2000      	movs	r0, #0
}
   39aac:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   39aae:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   39ab2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   39ab4:	f06f 0015 	mvn.w	r0, #21
}
   39ab8:	4770      	bx	lr
   39aba:	bf00      	nop
   39abc:	20002d58 	.word	0x20002d58
   39ac0:	20000a5c 	.word	0x20000a5c
   39ac4:	20000a90 	.word	0x20000a90

00039ac8 <ll_conn_update>:
{
   39ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   39acc:	2805      	cmp	r0, #5
{
   39ace:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   39ad2:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   39ad6:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   39ada:	d836      	bhi.n	39b4a <ll_conn_update+0x82>
   39adc:	4682      	mov	sl, r0
   39ade:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39ae0:	4843      	ldr	r0, [pc, #268]	; (39bf0 <ll_conn_update+0x128>)
   39ae2:	4615      	mov	r5, r2
   39ae4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39ae8:	4652      	mov	r2, sl
   39aea:	461e      	mov	r6, r3
   39aec:	f7f9 ff28 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   39af0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   39af2:	4553      	cmp	r3, sl
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39af4:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   39af6:	d128      	bne.n	39b4a <ll_conn_update+0x82>
	if (!cmd) {
   39af8:	bb54      	cbnz	r4, 39b50 <ll_conn_update+0x88>
		if (!conn->llcp_conn_param.disabled &&
   39afa:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
   39afe:	0699      	lsls	r1, r3, #26
   39b00:	d44b      	bmi.n	39b9a <ll_conn_update+0xd2>
		    (!conn->common.fex_valid ||
   39b02:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
		if (!conn->llcp_conn_param.disabled &&
   39b06:	07da      	lsls	r2, r3, #31
   39b08:	d443      	bmi.n	39b92 <ll_conn_update+0xca>
			if (conn->llcp_conn_param.req !=
   39b0a:	f89c 2194 	ldrb.w	r2, [ip, #404]	; 0x194
   39b0e:	f89c 3195 	ldrb.w	r3, [ip, #405]	; 0x195
   39b12:	4293      	cmp	r3, r2
   39b14:	d13a      	bne.n	39b8c <ll_conn_update+0xc4>
			conn->llcp_conn_param.state = cmd;
   39b16:	f8bc 2196 	ldrh.w	r2, [ip, #406]	; 0x196
			conn->llcp_conn_param.interval_min = interval_min;
   39b1a:	f8ac 6198 	strh.w	r6, [ip, #408]	; 0x198
			conn->llcp_conn_param.state = cmd;
   39b1e:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   39b22:	f042 0210 	orr.w	r2, r2, #16
   39b26:	f8ac 2196 	strh.w	r2, [ip, #406]	; 0x196
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   39b2a:	f99c 2039 	ldrsb.w	r2, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_max = interval_max;
   39b2e:	f8ac 919a 	strh.w	r9, [ip, #410]	; 0x19a
			conn->llcp_conn_param.req++;
   39b32:	3301      	adds	r3, #1
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   39b34:	2a00      	cmp	r2, #0
			conn->llcp_conn_param.latency = latency;
   39b36:	f8ac 819c 	strh.w	r8, [ip, #412]	; 0x19c
			conn->llcp_conn_param.timeout = timeout;
   39b3a:	f8ac 719e 	strh.w	r7, [ip, #414]	; 0x19e
			conn->llcp_conn_param.req++;
   39b3e:	f88c 3194 	strb.w	r3, [ip, #404]	; 0x194
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   39b42:	db4f      	blt.n	39be4 <ll_conn_update+0x11c>
	return 0;
   39b44:	2000      	movs	r0, #0
}
   39b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39b4a:	2002      	movs	r0, #2
}
   39b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cmd--;
   39b50:	3c01      	subs	r4, #1
		if (cmd) {
   39b52:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   39b56:	d0d8      	beq.n	39b0a <ll_conn_update+0x42>
			if ((conn->llcp_conn_param.req ==
   39b58:	f890 2194 	ldrb.w	r2, [r0, #404]	; 0x194
   39b5c:	f890 3195 	ldrb.w	r3, [r0, #405]	; 0x195
   39b60:	429a      	cmp	r2, r3
   39b62:	d013      	beq.n	39b8c <ll_conn_update+0xc4>
			    (conn->llcp_conn_param.state !=
   39b64:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
			     conn->llcp_conn_param.ack) ||
   39b68:	f003 020f 	and.w	r2, r3, #15
   39b6c:	2a03      	cmp	r2, #3
   39b6e:	d10d      	bne.n	39b8c <ll_conn_update+0xc4>
			conn->llcp_conn_param.state = cmd;
   39b70:	f004 040f 	and.w	r4, r4, #15
   39b74:	f023 031f 	bic.w	r3, r3, #31
   39b78:	f044 0410 	orr.w	r4, r4, #16
   39b7c:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   39b7e:	f880 5197 	strb.w	r5, [r0, #407]	; 0x197
			conn->llcp_conn_param.state = cmd;
   39b82:	f880 4196 	strb.w	r4, [r0, #406]	; 0x196
	return 0;
   39b86:	2000      	movs	r0, #0
}
   39b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   39b8c:	200c      	movs	r0, #12
}
   39b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		     (conn->llcp_feature.features_conn &
   39b92:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
		    (!conn->common.fex_valid ||
   39b96:	079b      	lsls	r3, r3, #30
   39b98:	d4b7      	bmi.n	39b0a <ll_conn_update+0x42>
		} else if (conn->lll.role) {
   39b9a:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   39b9e:	2b00      	cmp	r3, #0
   39ba0:	db1e      	blt.n	39be0 <ll_conn_update+0x118>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   39ba2:	f89c 2118 	ldrb.w	r2, [ip, #280]	; 0x118
   39ba6:	f89c 3119 	ldrb.w	r3, [ip, #281]	; 0x119
   39baa:	4293      	cmp	r3, r2
   39bac:	d1ee      	bne.n	39b8c <ll_conn_update+0xc4>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   39bae:	f89c 211a 	ldrb.w	r2, [ip, #282]	; 0x11a
		conn->llcp_cu.interval = interval_max;
   39bb2:	f8ac 911c 	strh.w	r9, [ip, #284]	; 0x11c
		conn->llcp_cu.req++;
   39bb6:	3301      	adds	r3, #1
   39bb8:	f88c 3118 	strb.w	r3, [ip, #280]	; 0x118
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   39bbc:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   39bc0:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   39bc2:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   39bc6:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   39bc8:	f88c 3128 	strb.w	r3, [ip, #296]	; 0x128
		conn->llcp_cu.latency = latency;
   39bcc:	f8ac 811e 	strh.w	r8, [ip, #286]	; 0x11e
		conn->llcp_cu.timeout = timeout;
   39bd0:	f8ac 7120 	strh.w	r7, [ip, #288]	; 0x120
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   39bd4:	f88c 211a 	strb.w	r2, [ip, #282]	; 0x11a
		conn->llcp_cu.win_offset_us = 0U;
   39bd8:	f8cc 0124 	str.w	r0, [ip, #292]	; 0x124
}
   39bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   39be0:	201a      	movs	r0, #26
   39be2:	e7b3      	b.n	39b4c <ll_conn_update+0x84>
				ull_periph_latency_cancel(conn, handle);
   39be4:	4660      	mov	r0, ip
   39be6:	4651      	mov	r1, sl
   39be8:	f004 f910 	bl	3de0c <ull_periph_latency_cancel>
	return 0;
   39bec:	2000      	movs	r0, #0
   39bee:	e7ad      	b.n	39b4c <ll_conn_update+0x84>
   39bf0:	20002d58 	.word	0x20002d58

00039bf4 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   39bf4:	2805      	cmp	r0, #5
   39bf6:	d81d      	bhi.n	39c34 <ll_chm_get+0x40>
{
   39bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39bfa:	4606      	mov	r6, r0
   39bfc:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39bfe:	480e      	ldr	r0, [pc, #56]	; (39c38 <ll_chm_get+0x44>)
   39c00:	4632      	mov	r2, r6
   39c02:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39c06:	f7f9 fe9b 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   39c0a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   39c0c:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39c0e:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   39c10:	d10e      	bne.n	39c30 <ll_chm_get+0x3c>
		memcpy(chm, conn->lll.data_chan_map,
   39c12:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   39c16:	2600      	movs	r6, #0
   39c18:	f884 61e8 	strb.w	r6, [r4, #488]	; 0x1e8
		memcpy(chm, conn->lll.data_chan_map,
   39c1c:	2205      	movs	r2, #5
   39c1e:	4639      	mov	r1, r7
   39c20:	4628      	mov	r0, r5
   39c22:	f011 fe32 	bl	4b88a <memcpy>
	} while (conn->chm_updated);
   39c26:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
   39c2a:	2800      	cmp	r0, #0
   39c2c:	d1f4      	bne.n	39c18 <ll_chm_get+0x24>
}
   39c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39c30:	2002      	movs	r0, #2
}
   39c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39c34:	2002      	movs	r0, #2
}
   39c36:	4770      	bx	lr
   39c38:	20002d58 	.word	0x20002d58

00039c3c <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   39c3c:	2805      	cmp	r0, #5
   39c3e:	d832      	bhi.n	39ca6 <ll_terminate_ind_send+0x6a>
{
   39c40:	b538      	push	{r3, r4, r5, lr}
   39c42:	4605      	mov	r5, r0
   39c44:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39c46:	481b      	ldr	r0, [pc, #108]	; (39cb4 <ll_terminate_ind_send+0x78>)
   39c48:	462a      	mov	r2, r5
   39c4a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39c4e:	f7f9 fe77 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   39c52:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   39c54:	42ab      	cmp	r3, r5
   39c56:	d122      	bne.n	39c9e <ll_terminate_ind_send+0x62>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   39c58:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
   39c5c:	f890 2151 	ldrb.w	r2, [r0, #337]	; 0x151
   39c60:	429a      	cmp	r2, r3
   39c62:	d11e      	bne.n	39ca2 <ll_terminate_ind_send+0x66>
	switch (reason) {
   39c64:	2c1a      	cmp	r4, #26
   39c66:	d803      	bhi.n	39c70 <ll_terminate_ind_send+0x34>
   39c68:	2c04      	cmp	r4, #4
   39c6a:	d810      	bhi.n	39c8e <ll_terminate_ind_send+0x52>
   39c6c:	2012      	movs	r0, #18
}
   39c6e:	bd38      	pop	{r3, r4, r5, pc}
	switch (reason) {
   39c70:	2c29      	cmp	r4, #41	; 0x29
   39c72:	d001      	beq.n	39c78 <ll_terminate_ind_send+0x3c>
   39c74:	2c3b      	cmp	r4, #59	; 0x3b
   39c76:	d1f9      	bne.n	39c6c <ll_terminate_ind_send+0x30>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39c78:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   39c7c:	f880 4152 	strb.w	r4, [r0, #338]	; 0x152
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   39c80:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39c82:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   39c84:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39c88:	db0f      	blt.n	39caa <ll_terminate_ind_send+0x6e>
	return 0;
   39c8a:	2000      	movs	r0, #0
}
   39c8c:	bd38      	pop	{r3, r4, r5, pc}
	switch (reason) {
   39c8e:	490a      	ldr	r1, [pc, #40]	; (39cb8 <ll_terminate_ind_send+0x7c>)
   39c90:	fa21 fc04 	lsr.w	ip, r1, r4
   39c94:	f01c 0f01 	tst.w	ip, #1
   39c98:	d1ee      	bne.n	39c78 <ll_terminate_ind_send+0x3c>
   39c9a:	2012      	movs	r0, #18
   39c9c:	e7e7      	b.n	39c6e <ll_terminate_ind_send+0x32>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39c9e:	2002      	movs	r0, #2
}
   39ca0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39ca2:	200c      	movs	r0, #12
}
   39ca4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39ca6:	2002      	movs	r0, #2
}
   39ca8:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   39caa:	4629      	mov	r1, r5
   39cac:	f004 f8ae 	bl	3de0c <ull_periph_latency_cancel>
	return 0;
   39cb0:	2000      	movs	r0, #0
}
   39cb2:	bd38      	pop	{r3, r4, r5, pc}
   39cb4:	20002d58 	.word	0x20002d58
   39cb8:	04380020 	.word	0x04380020

00039cbc <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   39cbc:	2805      	cmp	r0, #5
   39cbe:	d821      	bhi.n	39d04 <ll_feature_req_send+0x48>
{
   39cc0:	b510      	push	{r4, lr}
   39cc2:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39cc4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39cc8:	480f      	ldr	r0, [pc, #60]	; (39d08 <ll_feature_req_send+0x4c>)
   39cca:	4622      	mov	r2, r4
   39ccc:	f7f9 fe38 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   39cd0:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   39cd2:	42a1      	cmp	r1, r4
   39cd4:	d10e      	bne.n	39cf4 <ll_feature_req_send+0x38>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   39cd6:	f890 4130 	ldrb.w	r4, [r0, #304]	; 0x130
   39cda:	f890 2131 	ldrb.w	r2, [r0, #305]	; 0x131
   39cde:	42a2      	cmp	r2, r4
   39ce0:	d10a      	bne.n	39cf8 <ll_feature_req_send+0x3c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   39ce2:	f990 4039 	ldrsb.w	r4, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   39ce6:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   39ce8:	2c00      	cmp	r4, #0
	conn->llcp_feature.req++;
   39cea:	f880 2130 	strb.w	r2, [r0, #304]	; 0x130
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   39cee:	db05      	blt.n	39cfc <ll_feature_req_send+0x40>
	return 0;
   39cf0:	2000      	movs	r0, #0
}
   39cf2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39cf4:	2002      	movs	r0, #2
}
   39cf6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39cf8:	200c      	movs	r0, #12
}
   39cfa:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   39cfc:	f004 f886 	bl	3de0c <ull_periph_latency_cancel>
	return 0;
   39d00:	2000      	movs	r0, #0
}
   39d02:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39d04:	2002      	movs	r0, #2
}
   39d06:	4770      	bx	lr
   39d08:	20002d58 	.word	0x20002d58

00039d0c <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   39d0c:	2805      	cmp	r0, #5
   39d0e:	d821      	bhi.n	39d54 <ll_version_ind_send+0x48>
{
   39d10:	b510      	push	{r4, lr}
   39d12:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39d14:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39d18:	480f      	ldr	r0, [pc, #60]	; (39d58 <ll_version_ind_send+0x4c>)
   39d1a:	4622      	mov	r2, r4
   39d1c:	f7f9 fe10 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   39d20:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   39d22:	42a1      	cmp	r1, r4
   39d24:	d10e      	bne.n	39d44 <ll_version_ind_send+0x38>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   39d26:	f890 4148 	ldrb.w	r4, [r0, #328]	; 0x148
   39d2a:	f890 2149 	ldrb.w	r2, [r0, #329]	; 0x149
   39d2e:	42a2      	cmp	r2, r4
   39d30:	d10a      	bne.n	39d48 <ll_version_ind_send+0x3c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39d32:	f990 4039 	ldrsb.w	r4, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   39d36:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39d38:	2c00      	cmp	r4, #0
	conn->llcp_version.req++;
   39d3a:	f880 2148 	strb.w	r2, [r0, #328]	; 0x148
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39d3e:	db05      	blt.n	39d4c <ll_version_ind_send+0x40>
	return 0;
   39d40:	2000      	movs	r0, #0
}
   39d42:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39d44:	2002      	movs	r0, #2
}
   39d46:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39d48:	200c      	movs	r0, #12
}
   39d4a:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   39d4c:	f004 f85e 	bl	3de0c <ull_periph_latency_cancel>
	return 0;
   39d50:	2000      	movs	r0, #0
}
   39d52:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39d54:	2002      	movs	r0, #2
}
   39d56:	4770      	bx	lr
   39d58:	20002d58 	.word	0x20002d58

00039d5c <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   39d5c:	2805      	cmp	r0, #5
   39d5e:	d84f      	bhi.n	39e00 <ll_length_req_send+0xa4>
{
   39d60:	b570      	push	{r4, r5, r6, lr}
   39d62:	4604      	mov	r4, r0
   39d64:	460d      	mov	r5, r1
   39d66:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39d68:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39d6c:	4602      	mov	r2, r0
   39d6e:	4825      	ldr	r0, [pc, #148]	; (39e04 <ll_length_req_send+0xa8>)
   39d70:	f7f9 fde6 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   39d74:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   39d76:	42a2      	cmp	r2, r4
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39d78:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   39d7a:	d135      	bne.n	39de8 <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   39d7c:	f890 01be 	ldrb.w	r0, [r0, #446]	; 0x1be
   39d80:	0702      	lsls	r2, r0, #28
   39d82:	d433      	bmi.n	39dec <ll_length_req_send+0x90>
	    (conn->common.fex_valid &&
   39d84:	f893 20e4 	ldrb.w	r2, [r3, #228]	; 0xe4
	if (conn->llcp_length.disabled ||
   39d88:	07d1      	lsls	r1, r2, #31
   39d8a:	d503      	bpl.n	39d94 <ll_length_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   39d8c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
	    (conn->common.fex_valid &&
   39d90:	0692      	lsls	r2, r2, #26
   39d92:	d52b      	bpl.n	39dec <ll_length_req_send+0x90>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   39d94:	f893 11bc 	ldrb.w	r1, [r3, #444]	; 0x1bc
   39d98:	f893 21bd 	ldrb.w	r2, [r3, #445]	; 0x1bd
   39d9c:	428a      	cmp	r2, r1
   39d9e:	d010      	beq.n	39dc2 <ll_length_req_send+0x66>
		switch (conn->llcp_length.state) {
   39da0:	f000 0007 	and.w	r0, r0, #7
   39da4:	2803      	cmp	r0, #3
   39da6:	d004      	beq.n	39db2 <ll_length_req_send+0x56>
   39da8:	3003      	adds	r0, #3
   39daa:	f000 0007 	and.w	r0, r0, #7
   39dae:	2801      	cmp	r0, #1
   39db0:	d824      	bhi.n	39dfc <ll_length_req_send+0xa0>
			if (!conn->llcp_length.cache.tx_octets) {
   39db2:	f8b3 01c8 	ldrh.w	r0, [r3, #456]	; 0x1c8
   39db6:	bb08      	cbnz	r0, 39dfc <ll_length_req_send+0xa0>
				conn->llcp_length.cache.tx_octets = tx_octets;
   39db8:	f8a3 51c8 	strh.w	r5, [r3, #456]	; 0x1c8
				conn->llcp_length.cache.tx_time = tx_time;
   39dbc:	f8a3 61ca 	strh.w	r6, [r3, #458]	; 0x1ca
}
   39dc0:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_length.req++;
   39dc2:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39dc4:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
	conn->llcp_length.req++;
   39dc8:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   39dcc:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
	conn->llcp_length.tx_octets = tx_octets;
   39dd0:	f8a3 51c2 	strh.w	r5, [r3, #450]	; 0x1c2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   39dd4:	f36f 0202 	bfc	r2, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39dd8:	2900      	cmp	r1, #0
	conn->llcp_length.tx_time = tx_time;
   39dda:	f8a3 61c6 	strh.w	r6, [r3, #454]	; 0x1c6
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   39dde:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39de2:	db05      	blt.n	39df0 <ll_length_req_send+0x94>
	return 0;
   39de4:	2000      	movs	r0, #0
}
   39de6:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39de8:	2002      	movs	r0, #2
}
   39dea:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   39dec:	201a      	movs	r0, #26
}
   39dee:	bd70      	pop	{r4, r5, r6, pc}
		ull_periph_latency_cancel(conn, handle);
   39df0:	4618      	mov	r0, r3
   39df2:	4621      	mov	r1, r4
   39df4:	f004 f80a 	bl	3de0c <ull_periph_latency_cancel>
	return 0;
   39df8:	2000      	movs	r0, #0
}
   39dfa:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   39dfc:	200c      	movs	r0, #12
}
   39dfe:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39e00:	2002      	movs	r0, #2
}
   39e02:	4770      	bx	lr
   39e04:	20002d58 	.word	0x20002d58

00039e08 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   39e08:	4a03      	ldr	r2, [pc, #12]	; (39e18 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   39e0a:	4b04      	ldr	r3, [pc, #16]	; (39e1c <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   39e0c:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   39e0e:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   39e10:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   39e12:	800b      	strh	r3, [r1, #0]
}
   39e14:	4770      	bx	lr
   39e16:	bf00      	nop
   39e18:	20006c74 	.word	0x20006c74
   39e1c:	20006c76 	.word	0x20006c76

00039e20 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   39e20:	4a02      	ldr	r2, [pc, #8]	; (39e2c <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   39e22:	4b03      	ldr	r3, [pc, #12]	; (39e30 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   39e24:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   39e26:	8019      	strh	r1, [r3, #0]
}
   39e28:	2000      	movs	r0, #0
   39e2a:	4770      	bx	lr
   39e2c:	20006c74 	.word	0x20006c74
   39e30:	20006c76 	.word	0x20006c76

00039e34 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   39e34:	f04f 0c1b 	mov.w	ip, #27
   39e38:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   39e3c:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   39e40:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   39e44:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   39e46:	8018      	strh	r0, [r3, #0]
}
   39e48:	4770      	bx	lr
   39e4a:	bf00      	nop

00039e4c <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   39e4c:	2805      	cmp	r0, #5
   39e4e:	d81b      	bhi.n	39e88 <ll_phy_get+0x3c>
{
   39e50:	b570      	push	{r4, r5, r6, lr}
   39e52:	4604      	mov	r4, r0
   39e54:	460e      	mov	r6, r1
   39e56:	4615      	mov	r5, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39e58:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39e5c:	4602      	mov	r2, r0
   39e5e:	480b      	ldr	r0, [pc, #44]	; (39e8c <ll_phy_get+0x40>)
   39e60:	f7f9 fd6e 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   39e64:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   39e66:	42a2      	cmp	r2, r4
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39e68:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   39e6a:	d10b      	bne.n	39e84 <ll_phy_get+0x38>
	*tx = conn->lll.phy_tx;
   39e6c:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
   39e70:	f3c4 0402 	ubfx	r4, r4, #0, #3
   39e74:	7034      	strb	r4, [r6, #0]
	*rx = conn->lll.phy_rx;
   39e76:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   39e7a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   39e7e:	702b      	strb	r3, [r5, #0]
	return 0;
   39e80:	2000      	movs	r0, #0
}
   39e82:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39e84:	2002      	movs	r0, #2
}
   39e86:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39e88:	2002      	movs	r0, #2
}
   39e8a:	4770      	bx	lr
   39e8c:	20002d58 	.word	0x20002d58

00039e90 <ll_phy_default_set>:
	default_phy_tx = tx;
   39e90:	4a02      	ldr	r2, [pc, #8]	; (39e9c <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   39e92:	4b03      	ldr	r3, [pc, #12]	; (39ea0 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   39e94:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   39e96:	7019      	strb	r1, [r3, #0]
}
   39e98:	2000      	movs	r0, #0
   39e9a:	4770      	bx	lr
   39e9c:	20006dd2 	.word	0x20006dd2
   39ea0:	20006dd1 	.word	0x20006dd1

00039ea4 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   39ea4:	2805      	cmp	r0, #5
{
   39ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   39eaa:	d843      	bhi.n	39f34 <ll_phy_req_send+0x90>
   39eac:	4606      	mov	r6, r0
   39eae:	460c      	mov	r4, r1
   39eb0:	4617      	mov	r7, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39eb2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39eb6:	4602      	mov	r2, r0
   39eb8:	4824      	ldr	r0, [pc, #144]	; (39f4c <ll_phy_req_send+0xa8>)
   39eba:	4698      	mov	r8, r3
   39ebc:	f7f9 fd40 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   39ec0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   39ec2:	42b3      	cmp	r3, r6
   39ec4:	d136      	bne.n	39f34 <ll_phy_req_send+0x90>
	if (conn->llcp_phy.disabled ||
   39ec6:	f890 51cf 	ldrb.w	r5, [r0, #463]	; 0x1cf
   39eca:	f015 0508 	ands.w	r5, r5, #8
   39ece:	d139      	bne.n	39f44 <ll_phy_req_send+0xa0>
	    (conn->common.fex_valid &&
   39ed0:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
	if (conn->llcp_phy.disabled ||
   39ed4:	07db      	lsls	r3, r3, #31
   39ed6:	d504      	bpl.n	39ee2 <ll_phy_req_send+0x3e>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   39ed8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   39edc:	f413 6f10 	tst.w	r3, #2304	; 0x900
   39ee0:	d030      	beq.n	39f44 <ll_phy_req_send+0xa0>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   39ee2:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
   39ee6:	f890 21cd 	ldrb.w	r2, [r0, #461]	; 0x1cd
   39eea:	429a      	cmp	r2, r3
   39eec:	d126      	bne.n	39f3c <ll_phy_req_send+0x98>
	conn->llcp_phy.req++;
   39eee:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   39ef0:	f004 0407 	and.w	r4, r4, #7
   39ef4:	00a4      	lsls	r4, r4, #2
	conn->llcp_phy.req++;
   39ef6:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   39efa:	f8b0 21ce 	ldrh.w	r2, [r0, #462]	; 0x1ce
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39efe:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   39f02:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   39f06:	f008 0807 	and.w	r8, r8, #7
   39f0a:	ea44 1348 	orr.w	r3, r4, r8, lsl #5
   39f0e:	f007 0701 	and.w	r7, r7, #1
   39f12:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   39f16:	ea43 2347 	orr.w	r3, r3, r7, lsl #9
   39f1a:	f022 0207 	bic.w	r2, r2, #7
   39f1e:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39f20:	2900      	cmp	r1, #0
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   39f22:	f8a0 31ce 	strh.w	r3, [r0, #462]	; 0x1ce
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39f26:	da06      	bge.n	39f36 <ll_phy_req_send+0x92>
		ull_periph_latency_cancel(conn, handle);
   39f28:	4631      	mov	r1, r6
   39f2a:	f003 ff6f 	bl	3de0c <ull_periph_latency_cancel>
}
   39f2e:	4628      	mov	r0, r5
   39f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39f34:	2502      	movs	r5, #2
}
   39f36:	4628      	mov	r0, r5
   39f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   39f3c:	250c      	movs	r5, #12
}
   39f3e:	4628      	mov	r0, r5
   39f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   39f44:	251a      	movs	r5, #26
}
   39f46:	4628      	mov	r0, r5
   39f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39f4c:	20002d58 	.word	0x20002d58

00039f50 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   39f50:	2805      	cmp	r0, #5
   39f52:	d81d      	bhi.n	39f90 <ll_apto_get+0x40>
{
   39f54:	b538      	push	{r3, r4, r5, lr}
   39f56:	4604      	mov	r4, r0
   39f58:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39f5a:	480e      	ldr	r0, [pc, #56]	; (39f94 <ll_apto_get+0x44>)
   39f5c:	4622      	mov	r2, r4
   39f5e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39f62:	f7f9 fced 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   39f66:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   39f68:	42a3      	cmp	r3, r4
   39f6a:	d10f      	bne.n	39f8c <ll_apto_get+0x3c>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   39f6c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   39f6e:	f8b0 30ce 	ldrh.w	r3, [r0, #206]	; 0xce
   39f72:	4a09      	ldr	r2, [pc, #36]	; (39f98 <ll_apto_get+0x48>)
   39f74:	fb01 f303 	mul.w	r3, r1, r3
   39f78:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   39f7c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   39f80:	fba2 2303 	umull	r2, r3, r2, r3
   39f84:	099b      	lsrs	r3, r3, #6
   39f86:	802b      	strh	r3, [r5, #0]
	return 0;
   39f88:	2000      	movs	r0, #0
}
   39f8a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39f8c:	2002      	movs	r0, #2
}
   39f8e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39f90:	2002      	movs	r0, #2
}
   39f92:	4770      	bx	lr
   39f94:	20002d58 	.word	0x20002d58
   39f98:	10624dd3 	.word	0x10624dd3

00039f9c <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   39f9c:	2805      	cmp	r0, #5
   39f9e:	d81e      	bhi.n	39fde <ll_apto_set+0x42>
{
   39fa0:	b538      	push	{r3, r4, r5, lr}
   39fa2:	4605      	mov	r5, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39fa4:	462a      	mov	r2, r5
   39fa6:	480f      	ldr	r0, [pc, #60]	; (39fe4 <ll_apto_set+0x48>)
   39fa8:	460c      	mov	r4, r1
   39faa:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39fae:	f7f9 fcc7 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   39fb2:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   39fb4:	42aa      	cmp	r2, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39fb6:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   39fb8:	d10f      	bne.n	39fda <ll_apto_set+0x3e>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   39fba:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   39fbc:	f240 41e2 	movw	r1, #1250	; 0x4e2
   39fc0:	fb01 f202 	mul.w	r2, r1, r2
   39fc4:	f242 7110 	movw	r1, #10000	; 0x2710
   39fc8:	fb01 2104 	mla	r1, r1, r4, r2
   39fcc:	3901      	subs	r1, #1
	return 0;
   39fce:	2000      	movs	r0, #0
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   39fd0:	fbb1 f1f2 	udiv	r1, r1, r2
   39fd4:	f8a3 10ce 	strh.w	r1, [r3, #206]	; 0xce
}
   39fd8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39fda:	2002      	movs	r0, #2
}
   39fdc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39fde:	2002      	movs	r0, #2
}
   39fe0:	4770      	bx	lr
   39fe2:	bf00      	nop
   39fe4:	20002d58 	.word	0x20002d58

00039fe8 <ull_conn_init>:
	err = init_reset();
   39fe8:	f7fe be54 	b.w	38c94 <init_reset>

00039fec <ull_conn_reset>:
{
   39fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)ull_central_reset();
   39ff0:	f004 f8d2 	bl	3e198 <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39ff4:	4e1a      	ldr	r6, [pc, #104]	; (3a060 <ull_conn_reset+0x74>)
	LL_ASSERT(err == 0 || err == -EALREADY);
   39ff6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 3a064 <ull_conn_reset+0x78>
   39ffa:	4f1b      	ldr	r7, [pc, #108]	; (3a068 <ull_conn_reset+0x7c>)
	(void)ull_central_reset();
   39ffc:	2500      	movs	r5, #0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39ffe:	b2aa      	uxth	r2, r5
   3a000:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a004:	4630      	mov	r0, r6
   3a006:	f7f9 fc9b 	bl	33940 <mem_get>
   3a00a:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   3a00c:	1d68      	adds	r0, r5, #5
   3a00e:	f104 021c 	add.w	r2, r4, #28
   3a012:	4621      	mov	r1, r4
   3a014:	b2c0      	uxtb	r0, r0
   3a016:	f7fd fbe7 	bl	377e8 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   3a01a:	b170      	cbz	r0, 3a03a <ull_conn_reset+0x4e>
   3a01c:	3078      	adds	r0, #120	; 0x78
   3a01e:	d00c      	beq.n	3a03a <ull_conn_reset+0x4e>
   3a020:	4812      	ldr	r0, [pc, #72]	; (3a06c <ull_conn_reset+0x80>)
   3a022:	f640 03e3 	movw	r3, #2275	; 0x8e3
   3a026:	4642      	mov	r2, r8
   3a028:	4639      	mov	r1, r7
   3a02a:	f00f fb23 	bl	49674 <printk>
   3a02e:	4040      	eors	r0, r0
   3a030:	f380 8811 	msr	BASEPRI, r0
   3a034:	f04f 0003 	mov.w	r0, #3
   3a038:	df02      	svc	2
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a03a:	3501      	adds	r5, #1
	conn->lll.handle = LLL_HANDLE_INVALID;
   3a03c:	f64f 72ff 	movw	r2, #65535	; 0xffff
	conn->lll.link_tx_free = NULL;
   3a040:	2300      	movs	r3, #0
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a042:	2d06      	cmp	r5, #6
	conn->lll.handle = LLL_HANDLE_INVALID;
   3a044:	8522      	strh	r2, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   3a046:	6763      	str	r3, [r4, #116]	; 0x74
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a048:	d1d9      	bne.n	39ffe <ull_conn_reset+0x12>
	MFIFO_INIT(conn_tx);
   3a04a:	4809      	ldr	r0, [pc, #36]	; (3a070 <ull_conn_reset+0x84>)
	MFIFO_INIT(conn_ack);
   3a04c:	4909      	ldr	r1, [pc, #36]	; (3a074 <ull_conn_reset+0x88>)
	conn_upd_curr = NULL;
   3a04e:	4a0a      	ldr	r2, [pc, #40]	; (3a078 <ull_conn_reset+0x8c>)
	MFIFO_INIT(conn_tx);
   3a050:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   3a052:	804b      	strh	r3, [r1, #2]
}
   3a054:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	conn_upd_curr = NULL;
   3a058:	6013      	str	r3, [r2, #0]
	err = init_reset();
   3a05a:	f7fe be1b 	b.w	38c94 <init_reset>
   3a05e:	bf00      	nop
   3a060:	20002d58 	.word	0x20002d58
   3a064:	00052970 	.word	0x00052970
   3a068:	00052958 	.word	0x00052958
   3a06c:	00052460 	.word	0x00052460
   3a070:	20000a5c 	.word	0x20000a5c
   3a074:	20000978 	.word	0x20000978
   3a078:	20005254 	.word	0x20005254

0003a07c <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   3a07c:	4b01      	ldr	r3, [pc, #4]	; (3a084 <ull_conn_default_tx_octets_get+0x8>)
}
   3a07e:	8818      	ldrh	r0, [r3, #0]
   3a080:	4770      	bx	lr
   3a082:	bf00      	nop
   3a084:	20006c74 	.word	0x20006c74

0003a088 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   3a088:	4b01      	ldr	r3, [pc, #4]	; (3a090 <ull_conn_default_tx_time_get+0x8>)
}
   3a08a:	8818      	ldrh	r0, [r3, #0]
   3a08c:	4770      	bx	lr
   3a08e:	bf00      	nop
   3a090:	20006c76 	.word	0x20006c76

0003a094 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   3a094:	4b01      	ldr	r3, [pc, #4]	; (3a09c <ull_conn_default_phy_tx_get+0x8>)
}
   3a096:	7818      	ldrb	r0, [r3, #0]
   3a098:	4770      	bx	lr
   3a09a:	bf00      	nop
   3a09c:	20006dd2 	.word	0x20006dd2

0003a0a0 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   3a0a0:	4b01      	ldr	r3, [pc, #4]	; (3a0a8 <ull_conn_default_phy_rx_get+0x8>)
}
   3a0a2:	7818      	ldrb	r0, [r3, #0]
   3a0a4:	4770      	bx	lr
   3a0a6:	bf00      	nop
   3a0a8:	20006dd1 	.word	0x20006dd1

0003a0ac <ull_conn_peer_connected>:
{
   3a0ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a0b0:	f8df 8068 	ldr.w	r8, [pc, #104]	; 3a11c <ull_conn_peer_connected+0x70>
{
   3a0b4:	4682      	mov	sl, r0
   3a0b6:	468b      	mov	fp, r1
   3a0b8:	4617      	mov	r7, r2
   3a0ba:	4699      	mov	r9, r3
   3a0bc:	2500      	movs	r5, #0
   3a0be:	b2ae      	uxth	r6, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a0c0:	4632      	mov	r2, r6
   3a0c2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a0c6:	4640      	mov	r0, r8
   3a0c8:	f7f9 fc3a 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   3a0cc:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a0ce:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a0d0:	4604      	mov	r4, r0
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a0d2:	f105 0501 	add.w	r5, r5, #1
	if (conn->lll.handle != handle) {
   3a0d6:	d105      	bne.n	3a0e4 <ull_conn_peer_connected+0x38>
		    conn->peer_id_addr_type == peer_id_addr_type &&
   3a0d8:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
   3a0dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
		if (conn &&
   3a0e0:	42bb      	cmp	r3, r7
   3a0e2:	d004      	beq.n	3a0ee <ull_conn_peer_connected+0x42>
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a0e4:	2d06      	cmp	r5, #6
   3a0e6:	d1ea      	bne.n	3a0be <ull_conn_peer_connected+0x12>
	return false;
   3a0e8:	2000      	movs	r0, #0
}
   3a0ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !memcmp(conn->peer_id_addr, peer_id_addr, BDADDR_SIZE) &&
   3a0ee:	2206      	movs	r2, #6
   3a0f0:	4649      	mov	r1, r9
   3a0f2:	30dd      	adds	r0, #221	; 0xdd
   3a0f4:	f011 fbb9 	bl	4b86a <memcmp>
		    conn->peer_id_addr_type == peer_id_addr_type &&
   3a0f8:	2800      	cmp	r0, #0
   3a0fa:	d1f3      	bne.n	3a0e4 <ull_conn_peer_connected+0x38>
		    conn->own_id_addr_type == own_id_addr_type &&
   3a0fc:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   3a100:	f003 0301 	and.w	r3, r3, #1
		    !memcmp(conn->peer_id_addr, peer_id_addr, BDADDR_SIZE) &&
   3a104:	4553      	cmp	r3, sl
   3a106:	d1ed      	bne.n	3a0e4 <ull_conn_peer_connected+0x38>
		    !memcmp(conn->own_id_addr, own_id_addr, BDADDR_SIZE)) {
   3a108:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   3a10c:	2206      	movs	r2, #6
   3a10e:	4659      	mov	r1, fp
   3a110:	f011 fbab 	bl	4b86a <memcmp>
		    conn->own_id_addr_type == own_id_addr_type &&
   3a114:	2800      	cmp	r0, #0
   3a116:	d1e5      	bne.n	3a0e4 <ull_conn_peer_connected+0x38>
			return true;
   3a118:	2001      	movs	r0, #1
   3a11a:	e7e6      	b.n	3a0ea <ull_conn_peer_connected+0x3e>
   3a11c:	20002d58 	.word	0x20002d58

0003a120 <ull_conn_setup>:
{
   3a120:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   3a122:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   3a124:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   3a126:	681d      	ldr	r5, [r3, #0]
   3a128:	782b      	ldrb	r3, [r5, #0]
{
   3a12a:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   3a12c:	b193      	cbz	r3, 3a154 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   3a12e:	696b      	ldr	r3, [r5, #20]
   3a130:	b163      	cbz	r3, 3a14c <ull_conn_setup+0x2c>
   3a132:	4a0b      	ldr	r2, [pc, #44]	; (3a160 <ull_conn_setup+0x40>)
   3a134:	490b      	ldr	r1, [pc, #44]	; (3a164 <ull_conn_setup+0x44>)
   3a136:	480c      	ldr	r0, [pc, #48]	; (3a168 <ull_conn_setup+0x48>)
   3a138:	f240 33ed 	movw	r3, #1005	; 0x3ed
   3a13c:	f00f fa9a 	bl	49674 <printk>
   3a140:	4040      	eors	r0, r0
   3a142:	f380 8811 	msr	BASEPRI, r0
   3a146:	f04f 0003 	mov.w	r0, #3
   3a14a:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   3a14c:	4b07      	ldr	r3, [pc, #28]	; (3a16c <ull_conn_setup+0x4c>)
   3a14e:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   3a152:	bd38      	pop	{r3, r4, r5, pc}
   3a154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   3a158:	4608      	mov	r0, r1
   3a15a:	f7fe bf9f 	b.w	3909c <conn_setup_adv_scan_disabled_cb>
   3a15e:	bf00      	nop
   3a160:	00052970 	.word	0x00052970
   3a164:	00052858 	.word	0x00052858
   3a168:	00052460 	.word	0x00052460
   3a16c:	0003909d 	.word	0x0003909d

0003a170 <ull_conn_rx>:
{
   3a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	conn = ll_connected_get((*rx)->hdr.handle);
   3a174:	680b      	ldr	r3, [r1, #0]
   3a176:	88dd      	ldrh	r5, [r3, #6]
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a178:	2d05      	cmp	r5, #5
{
   3a17a:	b085      	sub	sp, #20
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a17c:	d869      	bhi.n	3a252 <ull_conn_rx+0xe2>
   3a17e:	460e      	mov	r6, r1
   3a180:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a182:	462a      	mov	r2, r5
   3a184:	489f      	ldr	r0, [pc, #636]	; (3a404 <ull_conn_rx+0x294>)
   3a186:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a18a:	f7f9 fbd9 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   3a18e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a190:	42ab      	cmp	r3, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a192:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   3a194:	d15c      	bne.n	3a250 <ull_conn_rx+0xe0>
	pdu_rx = (void *)(*rx)->pdu;
   3a196:	6835      	ldr	r5, [r6, #0]
	switch (pdu_rx->ll_id) {
   3a198:	7f2b      	ldrb	r3, [r5, #28]
   3a19a:	f003 0303 	and.w	r3, r3, #3
   3a19e:	2b03      	cmp	r3, #3
   3a1a0:	d13b      	bne.n	3a21a <ull_conn_rx+0xaa>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3a1a2:	f890 0176 	ldrb.w	r0, [r0, #374]	; 0x176
	opcode = pdu_rx->llctrl.opcode;
   3a1a6:	f895 801f 	ldrb.w	r8, [r5, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3a1aa:	07c3      	lsls	r3, r0, #31
	pdu_rx = (void *)(*rx)->pdu;
   3a1ac:	f105 021c 	add.w	r2, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3a1b0:	d552      	bpl.n	3a258 <ull_conn_rx+0xe8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   3a1b2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3a1b6:	2b00      	cmp	r3, #0
   3a1b8:	f2c0 865e 	blt.w	3ae78 <ull_conn_rx+0xd08>
	return (!conn->lll.role &&
   3a1bc:	0741      	lsls	r1, r0, #29
   3a1be:	f100 80bc 	bmi.w	3a33a <ull_conn_rx+0x1ca>
		((!conn->llcp_enc.refresh &&
   3a1c2:	f1b8 0f02 	cmp.w	r8, #2
   3a1c6:	f000 82af 	beq.w	3a728 <ull_conn_rx+0x5b8>
   3a1ca:	f1b8 0f11 	cmp.w	r8, #17
   3a1ce:	d836      	bhi.n	3a23e <ull_conn_rx+0xce>
   3a1d0:	498d      	ldr	r1, [pc, #564]	; (3a408 <ull_conn_rx+0x298>)
   3a1d2:	fa21 fc08 	lsr.w	ip, r1, r8
   3a1d6:	f01c 0f01 	tst.w	ip, #1
   3a1da:	d030      	beq.n	3a23e <ull_conn_rx+0xce>

		return 0;
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   3a1dc:	f1b8 0f19 	cmp.w	r8, #25
   3a1e0:	d85e      	bhi.n	3a2a0 <ull_conn_rx+0x130>
   3a1e2:	e8df f018 	tbh	[pc, r8, lsl #1]
   3a1e6:	042c      	.short	0x042c
   3a1e8:	02a103f6 	.word	0x02a103f6
   3a1ec:	053a0558 	.word	0x053a0558
   3a1f0:	026f0499 	.word	0x026f0499
   3a1f4:	005a0245 	.word	0x005a0245
   3a1f8:	037d0208 	.word	0x037d0208
   3a1fc:	01be05a6 	.word	0x01be05a6
   3a200:	0367017b 	.word	0x0367017b
   3a204:	02d301ed 	.word	0x02d301ed
   3a208:	02ad0146 	.word	0x02ad0146
   3a20c:	00d501fe 	.word	0x00d501fe
   3a210:	011500d5 	.word	0x011500d5
   3a214:	04b804f5 	.word	0x04b804f5
   3a218:	03c0      	.short	0x03c0
	switch (pdu_rx->ll_id) {
   3a21a:	b963      	cbnz	r3, 3a236 <ull_conn_rx+0xc6>
		if (conn->llcp_enc.pause_rx) {
   3a21c:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
   3a220:	07db      	lsls	r3, r3, #31
			conn->llcp_terminate.reason_final =
   3a222:	bf44      	itt	mi
   3a224:	233d      	movmi	r3, #61	; 0x3d
   3a226:	f880 3153 	strbmi.w	r3, [r0, #339]	; 0x153
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a22a:	2301      	movs	r3, #1
   3a22c:	712b      	strb	r3, [r5, #4]
	return 0;
   3a22e:	2000      	movs	r0, #0
}
   3a230:	b005      	add	sp, #20
   3a232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   3a236:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
   3a23a:	07da      	lsls	r2, r3, #31
   3a23c:	d5f7      	bpl.n	3a22e <ull_conn_rx+0xbe>
		conn->llcp_terminate.reason_final =
   3a23e:	223d      	movs	r2, #61	; 0x3d
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a240:	2301      	movs	r3, #1
		return 0;
   3a242:	2000      	movs	r0, #0
		conn->llcp_terminate.reason_final =
   3a244:	f884 2153 	strb.w	r2, [r4, #339]	; 0x153
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a248:	712b      	strb	r3, [r5, #4]
}
   3a24a:	b005      	add	sp, #20
   3a24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_rx = (void *)(*rx)->pdu;
   3a250:	6833      	ldr	r3, [r6, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a252:	2201      	movs	r2, #1
   3a254:	711a      	strb	r2, [r3, #4]
		return 0;
   3a256:	e7ea      	b.n	3a22e <ull_conn_rx+0xbe>
	switch (opcode) {
   3a258:	f1b8 0f19 	cmp.w	r8, #25
   3a25c:	d820      	bhi.n	3a2a0 <ull_conn_rx+0x130>
   3a25e:	e8df f018 	tbh	[pc, r8, lsl #1]
   3a262:	03ec      	.short	0x03ec
   3a264:	026303b6 	.word	0x026303b6
   3a268:	04f7051a 	.word	0x04f7051a
   3a26c:	02310459 	.word	0x02310459
   3a270:	001a0207 	.word	0x001a0207
   3a274:	033d01ca 	.word	0x033d01ca
   3a278:	01800568 	.word	0x01800568
   3a27c:	0327013d 	.word	0x0327013d
   3a280:	029301af 	.word	0x029301af
   3a284:	026f0108 	.word	0x026f0108
   3a288:	009701c0 	.word	0x009701c0
   3a28c:	00d70097 	.word	0x00d70097
   3a290:	047804b5 	.word	0x047804b5
   3a294:	0380      	.short	0x0380
   3a296:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		break;
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_FEATURE_REQ:
		if (!conn->lll.role ||
   3a29a:	2b00      	cmp	r3, #0
   3a29c:	f2c0 830d 	blt.w	3a8ba <ull_conn_rx+0x74a>
	if (conn->common.txn_lock) {
   3a2a0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3a2a4:	079f      	lsls	r7, r3, #30
   3a2a6:	d4c0      	bmi.n	3a22a <ull_conn_rx+0xba>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3a2a8:	4858      	ldr	r0, [pc, #352]	; (3a40c <ull_conn_rx+0x29c>)
   3a2aa:	f7f9 fb17 	bl	338dc <mem_acquire>
	if (!tx) {
   3a2ae:	2800      	cmp	r0, #0
   3a2b0:	f000 8632 	beq.w	3af18 <ull_conn_rx+0xda8>
	conn->common.txn_lock = 1U;
   3a2b4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3a2b8:	f043 0302 	orr.w	r3, r3, #2
   3a2bc:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3a2c0:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   3a2c2:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3a2c6:	f043 0303 	orr.w	r3, r3, #3
   3a2ca:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   3a2cc:	2302      	movs	r3, #2
   3a2ce:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   3a2d0:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   3a2d4:	2307      	movs	r3, #7
   3a2d6:	71c3      	strb	r3, [r0, #7]
	if (
   3a2d8:	b1f2      	cbz	r2, 3a318 <ull_conn_rx+0x1a8>
	    !conn->llcp_enc.pause_tx &&
   3a2da:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	    conn->tx_head &&
   3a2de:	079e      	lsls	r6, r3, #30
   3a2e0:	d41a      	bmi.n	3a318 <ull_conn_rx+0x1a8>
	    !conn->llcp_phy.pause_tx &&
   3a2e2:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3a2e6:	07d9      	lsls	r1, r3, #31
   3a2e8:	d416      	bmi.n	3a318 <ull_conn_rx+0x1a8>
		if (conn->tx_head == conn->tx_data) {
   3a2ea:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
   3a2ee:	429a      	cmp	r2, r3
   3a2f0:	f000 8616 	beq.w	3af20 <ull_conn_rx+0xdb0>
		} else if (!conn->tx_ctrl) {
   3a2f4:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3a2f8:	2b00      	cmp	r3, #0
   3a2fa:	f000 8664 	beq.w	3afc6 <ull_conn_rx+0xe56>
	tx->next = conn->tx_ctrl_last->next;
   3a2fe:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3a302:	6813      	ldr	r3, [r2, #0]
   3a304:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3a306:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   3a308:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   3a30a:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3a30e:	2a00      	cmp	r2, #0
   3a310:	d18b      	bne.n	3a22a <ull_conn_rx+0xba>
		conn->tx_data_last = tx;
   3a312:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3a316:	e788      	b.n	3a22a <ull_conn_rx+0xba>
		if (!conn->tx_ctrl) {
   3a318:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3a31c:	2b00      	cmp	r3, #0
   3a31e:	f000 85f1 	beq.w	3af04 <ull_conn_rx+0xd94>
	tx->next = conn->tx_ctrl_last->next;
   3a322:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3a326:	681a      	ldr	r2, [r3, #0]
   3a328:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3a32a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3a32c:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   3a32e:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3a332:	2a00      	cmp	r2, #0
   3a334:	f47f af79 	bne.w	3a22a <ull_conn_rx+0xba>
   3a338:	e7eb      	b.n	3a312 <ull_conn_rx+0x1a2>
   3a33a:	f1a8 0c02 	sub.w	ip, r8, #2
   3a33e:	fa5f fc8c 	uxtb.w	ip, ip
   3a342:	f1bc 0f09 	cmp.w	ip, #9
   3a346:	f63f af40 	bhi.w	3a1ca <ull_conn_rx+0x5a>
   3a34a:	f240 2e05 	movw	lr, #517	; 0x205
   3a34e:	fa2e fc0c 	lsr.w	ip, lr, ip
   3a352:	f01c 0f01 	tst.w	ip, #1
   3a356:	f43f af3b 	beq.w	3a1d0 <ull_conn_rx+0x60>
	switch (opcode) {
   3a35a:	f1a8 0703 	sub.w	r7, r8, #3
   3a35e:	2f08      	cmp	r7, #8
   3a360:	f200 81e2 	bhi.w	3a728 <ull_conn_rx+0x5b8>
   3a364:	f20f 0c04 	addw	ip, pc, #4
   3a368:	f85c f027 	ldr.w	pc, [ip, r7, lsl #2]
   3a36c:	0003ac97 	.word	0x0003ac97
   3a370:	0003ac55 	.word	0x0003ac55
   3a374:	0003ab19 	.word	0x0003ab19
   3a378:	0003a6c5 	.word	0x0003a6c5
   3a37c:	0003a671 	.word	0x0003a671
   3a380:	0003a29b 	.word	0x0003a29b
   3a384:	0003a5f7 	.word	0x0003a5f7
   3a388:	0003a8e1 	.word	0x0003a8e1
   3a38c:	0003ad33 	.word	0x0003ad33
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   3a390:	7f6b      	ldrb	r3, [r5, #29]
   3a392:	2b09      	cmp	r3, #9
   3a394:	d184      	bne.n	3a2a0 <ull_conn_rx+0x130>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   3a396:	f1b8 0f14 	cmp.w	r8, #20
   3a39a:	f000 8625 	beq.w	3afe8 <ull_conn_rx+0xe78>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3a39e:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
	if (/* Local idle, and Peer request then complete the Peer procedure
   3a3a2:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
	eff_rx_octets = conn->lll.max_rx_octets;
   3a3a6:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   3a3aa:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   3a3ae:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   3a3b2:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	if (/* Local idle, and Peer request then complete the Peer procedure
   3a3b6:	4293      	cmp	r3, r2
	eff_rx_octets = conn->lll.max_rx_octets;
   3a3b8:	468e      	mov	lr, r1
	if (/* Local idle, and Peer request then complete the Peer procedure
   3a3ba:	f001 81cd 	beq.w	3b758 <ull_conn_rx+0x15e8>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   3a3be:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	struct node_tx *tx = NULL;
   3a3c2:	2300      	movs	r3, #0
	       tx) ||
   3a3c4:	f001 0107 	and.w	r1, r1, #7
   3a3c8:	2902      	cmp	r1, #2
   3a3ca:	f000 862e 	beq.w	3b02a <ull_conn_rx+0xeba>
   3a3ce:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   3a3d2:	f1b8 0f15 	cmp.w	r8, #21
   3a3d6:	f43f af2a 	beq.w	3a22e <ull_conn_rx+0xbe>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3a3da:	4618      	mov	r0, r3
   3a3dc:	490b      	ldr	r1, [pc, #44]	; (3a40c <ull_conn_rx+0x29c>)
   3a3de:	f7f9 fa97 	bl	33910 <mem_release>
			if (conn->llcp_length.state ==
   3a3e2:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
			conn->common.txn_lock = 0U;
   3a3e6:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			if (conn->llcp_length.state ==
   3a3ea:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   3a3ee:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   3a3f2:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   3a3f4:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
			if (conn->llcp_length.state ==
   3a3f8:	f47f af19 	bne.w	3a22e <ull_conn_rx+0xbe>
				return -EBUSY;
   3a3fc:	f06f 000f 	mvn.w	r0, #15
   3a400:	e716      	b.n	3a230 <ull_conn_rx+0xc0>
   3a402:	bf00      	nop
   3a404:	20002d58 	.word	0x20002d58
   3a408:	00022060 	.word	0x00022060
   3a40c:	200052e8 	.word	0x200052e8
		break;
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

#if defined(CONFIG_BT_CTLR_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   3a410:	7f6b      	ldrb	r3, [r5, #29]
   3a412:	2b03      	cmp	r3, #3
   3a414:	f47f af44 	bne.w	3a2a0 <ull_conn_rx+0x130>
			goto ull_conn_rx_unknown_rsp_send;
		}

		if (!conn->lll.role) {
   3a418:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3a41c:	2b00      	cmp	r3, #0
   3a41e:	f2c0 86f3 	blt.w	3b208 <ull_conn_rx+0x1098>
			if ((conn->llcp_phy.ack !=
   3a422:	f894 11cd 	ldrb.w	r1, [r4, #461]	; 0x1cd
			     conn->llcp_phy.req) &&
   3a426:	f894 21cc 	ldrb.w	r2, [r4, #460]	; 0x1cc
			if ((conn->llcp_phy.ack !=
   3a42a:	4291      	cmp	r1, r2
   3a42c:	d007      	beq.n	3a43e <ull_conn_rx+0x2ce>
			    ((conn->llcp_phy.state ==
			      LLCP_PHY_STATE_ACK_WAIT) ||
			     (conn->llcp_phy.state ==
			      LLCP_PHY_STATE_RSP_WAIT) ||
   3a42e:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3a432:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   3a436:	3b01      	subs	r3, #1
   3a438:	2b02      	cmp	r3, #2
   3a43a:	f241 802e 	bls.w	3b49a <ull_conn_rx+0x132a>
				nack = reject_ext_ind_send(conn, *rx,
					PDU_DATA_LLCTRL_TYPE_PHY_REQ,
					BT_HCI_ERR_LL_PROC_COLLISION);
#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
#if defined(CONFIG_BT_CTLR_LE_ENC)
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   3a43e:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3a442:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
   3a446:	1a1b      	subs	r3, r3, r0
   3a448:	f003 0303 	and.w	r3, r3, #3
   3a44c:	2b02      	cmp	r3, #2
   3a44e:	f000 87d4 	beq.w	3b3fa <ull_conn_rx+0x128a>
				      0x03) == 0x02) &&
				    (conn->llcp_type !=
				     LLCP_ENCRYPTION)) ||
   3a452:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
   3a456:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3a45a:	4298      	cmp	r0, r3
   3a45c:	f001 8021 	beq.w	3b4a2 <ull_conn_rx+0x1332>
			} else if (((conn->llcp_req - conn->llcp_ack) &
				    0x03) == 0x02) {
#endif /* !CONFIG_BT_CTLR_LE_ENC */
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */
				/* Different procedure collision */
				nack = reject_ext_ind_send(conn, *rx,
   3a460:	232a      	movs	r3, #42	; 0x2a
   3a462:	2216      	movs	r2, #22
			nack = reject_ext_ind_send(conn, *rx,
   3a464:	4629      	mov	r1, r5
   3a466:	4620      	mov	r0, r4
}
   3a468:	b005      	add	sp, #20
   3a46a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   3a46e:	f7fe bf59 	b.w	39324 <reject_ext_ind_send>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   3a472:	7f6b      	ldrb	r3, [r5, #29]
   3a474:	2b03      	cmp	r3, #3
   3a476:	f47f af13 	bne.w	3a2a0 <ull_conn_rx+0x130>
	switch (rej_ext_ind->reject_opcode) {
   3a47a:	f895 3020 	ldrb.w	r3, [r5, #32]
   3a47e:	3b03      	subs	r3, #3
   3a480:	2b13      	cmp	r3, #19
   3a482:	f63f aed2 	bhi.w	3a22a <ull_conn_rx+0xba>
   3a486:	a101      	add	r1, pc, #4	; (adr r1, 3a48c <ull_conn_rx+0x31c>)
   3a488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   3a48c:	0003ae1d 	.word	0x0003ae1d
   3a490:	0003a22b 	.word	0x0003a22b
   3a494:	0003a22b 	.word	0x0003a22b
   3a498:	0003a22b 	.word	0x0003a22b
   3a49c:	0003a22b 	.word	0x0003a22b
   3a4a0:	0003a22b 	.word	0x0003a22b
   3a4a4:	0003a22b 	.word	0x0003a22b
   3a4a8:	0003a22b 	.word	0x0003a22b
   3a4ac:	0003a22b 	.word	0x0003a22b
   3a4b0:	0003a22b 	.word	0x0003a22b
   3a4b4:	0003a22b 	.word	0x0003a22b
   3a4b8:	0003a22b 	.word	0x0003a22b
   3a4bc:	0003ada5 	.word	0x0003ada5
   3a4c0:	0003a22b 	.word	0x0003a22b
   3a4c4:	0003a22b 	.word	0x0003a22b
   3a4c8:	0003a22b 	.word	0x0003a22b
   3a4cc:	0003a22b 	.word	0x0003a22b
   3a4d0:	0003ad67 	.word	0x0003ad67
   3a4d4:	0003a22b 	.word	0x0003a22b
   3a4d8:	0003ae5d 	.word	0x0003ae5d
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   3a4dc:	7f6b      	ldrb	r3, [r5, #29]
   3a4de:	2b02      	cmp	r3, #2
   3a4e0:	f47f aede 	bne.w	3a2a0 <ull_conn_rx+0x130>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   3a4e4:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
   3a4e8:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3a4ec:	428b      	cmp	r3, r1
   3a4ee:	d004      	beq.n	3a4fa <ull_conn_rx+0x38a>
   3a4f0:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3a4f4:	2b03      	cmp	r3, #3
   3a4f6:	f001 8043 	beq.w	3b580 <ull_conn_rx+0x1410>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3a4fa:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3a4fe:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
   3a502:	428b      	cmp	r3, r1
   3a504:	f000 8701 	beq.w	3b30a <ull_conn_rx+0x119a>
		rej_ext_ind->error_code = rej_ind->error_code;
   3a508:	f895 2020 	ldrb.w	r2, [r5, #32]
   3a50c:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3a510:	2a23      	cmp	r2, #35	; 0x23
   3a512:	d012      	beq.n	3a53a <ull_conn_rx+0x3ca>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3a514:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3a518:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3a51c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3a520:	f36f 0100 	bfc	r1, #0, #1
   3a524:	f884 11cf 	strb.w	r1, [r4, #463]	; 0x1cf
		conn->procedure_expire = 0U;
   3a528:	2100      	movs	r1, #0
   3a52a:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3a52e:	f3c3 0102 	ubfx	r1, r3, #0, #3
   3a532:	f361 1306 	bfi	r3, r1, #4, #3
   3a536:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   3a53a:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3a53e:	075e      	lsls	r6, r3, #29
   3a540:	f57f ae73 	bpl.w	3a22a <ull_conn_rx+0xba>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3a544:	231c      	movs	r3, #28
   3a546:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   3a548:	772a      	strb	r2, [r5, #28]
	p->tx = conn->lll.phy_tx;
   3a54a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   3a54e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3a552:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   3a554:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3a558:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   3a55c:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   3a55e:	77ab      	strb	r3, [r5, #30]
	if (err) {
   3a560:	e666      	b.n	3a230 <ull_conn_rx+0xc0>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   3a562:	7f6e      	ldrb	r6, [r5, #29]
   3a564:	2e06      	cmp	r6, #6
   3a566:	f47f ae9b 	bne.w	3a2a0 <ull_conn_rx+0x130>
	if (!conn->llcp_version.tx) {
   3a56a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3a56e:	07d8      	lsls	r0, r3, #31
   3a570:	f140 874a 	bpl.w	3b408 <ull_conn_rx+0x1298>
	} else if (!conn->llcp_version.rx) {
   3a574:	f013 0302 	ands.w	r3, r3, #2
   3a578:	f47f ae57 	bne.w	3a22a <ull_conn_rx+0xba>
		conn->llcp_version.ack = conn->llcp_version.req;
   3a57c:	f894 2148 	ldrb.w	r2, [r4, #328]	; 0x148
   3a580:	f884 2149 	strb.w	r2, [r4, #329]	; 0x149
		conn->procedure_expire = 0U;
   3a584:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   3a588:	f895 3020 	ldrb.w	r3, [r5, #32]
   3a58c:	f884 314b 	strb.w	r3, [r4, #331]	; 0x14b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   3a590:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   3a594:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   3a598:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   3a59c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   3a5a0:	f8a4 214c 	strh.w	r2, [r4, #332]	; 0x14c
		sys_le16_to_cpu(v->sub_version_number);
   3a5a4:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   3a5a8:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   3a5ac:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   3a5b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   3a5b4:	f8a4 214e 	strh.w	r2, [r4, #334]	; 0x14e
	conn->llcp_version.rx = 1U;
   3a5b8:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
	return 0;
   3a5bc:	2000      	movs	r0, #0
   3a5be:	e637      	b.n	3a230 <ull_conn_rx+0xc0>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   3a5c0:	7f6b      	ldrb	r3, [r5, #29]
   3a5c2:	2b18      	cmp	r3, #24
   3a5c4:	f47f ae6c 	bne.w	3a2a0 <ull_conn_rx+0x130>
	return conn_upd_curr && (conn_upd_curr != conn);
   3a5c8:	f8df a304 	ldr.w	sl, [pc, #772]	; 3a8d0 <ull_conn_rx+0x760>
   3a5cc:	f8da 3000 	ldr.w	r3, [sl]
   3a5d0:	2b00      	cmp	r3, #0
   3a5d2:	f000 84c4 	beq.w	3af5e <ull_conn_rx+0xdee>
   3a5d6:	429c      	cmp	r4, r3
   3a5d8:	f000 84c1 	beq.w	3af5e <ull_conn_rx+0xdee>
			nack = reject_ext_ind_send(conn, *rx,
   3a5dc:	2320      	movs	r3, #32
   3a5de:	220f      	movs	r2, #15
   3a5e0:	e740      	b.n	3a464 <ull_conn_rx+0x2f4>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   3a5e2:	7f6a      	ldrb	r2, [r5, #29]
   3a5e4:	2a01      	cmp	r2, #1
   3a5e6:	f47f ae5b 	bne.w	3a2a0 <ull_conn_rx+0x130>
		conn->procedure_expire = 0U;
   3a5ea:	2300      	movs	r3, #0
   3a5ec:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   3a5f0:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a5f2:	712a      	strb	r2, [r5, #4]
		break;
   3a5f4:	e61c      	b.n	3a230 <ull_conn_rx+0xc0>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   3a5f6:	7f6b      	ldrb	r3, [r5, #29]
   3a5f8:	2b09      	cmp	r3, #9
   3a5fa:	f47f ae51 	bne.w	3a2a0 <ull_conn_rx+0x130>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   3a5fe:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   3a600:	49b4      	ldr	r1, [pc, #720]	; (3a8d4 <ull_conn_rx+0x764>)
   3a602:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3a604:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3a606:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   3a60a:	400a      	ands	r2, r1
   3a60c:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
	feat &= LL_FEAT_BIT_MASK;
   3a610:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3a614:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
	feat &= LL_FEAT_BIT_MASK;
   3a618:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3a61c:	401a      	ands	r2, r3
   3a61e:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
   3a622:	6a2e      	ldr	r6, [r5, #32]
   3a624:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   3a626:	f7fc fa55 	bl	36ad4 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   3a62a:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3a62e:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   3a632:	4aa8      	ldr	r2, [pc, #672]	; (3a8d4 <ull_conn_rx+0x764>)
	conn->llcp_feature.features_peer =
   3a634:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	conn->common.fex_valid = 1U;
   3a638:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
	feat &= LL_FEAT_BIT_MASK;
   3a63c:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   3a63e:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   3a642:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   3a644:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	conn->llcp_feature.ack = conn->llcp_feature.req;
   3a648:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   3a64c:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
	feat_result &= 0xFF;
   3a650:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   3a654:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   3a658:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3a65a:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   3a65e:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3a660:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   3a664:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
	conn->procedure_expire = 0U;
   3a668:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   3a66c:	4618      	mov	r0, r3
}
   3a66e:	e5df      	b.n	3a230 <ull_conn_rx+0xc0>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   3a670:	7f6b      	ldrb	r3, [r5, #29]
   3a672:	2b02      	cmp	r3, #2
   3a674:	f47f ae14 	bne.w	3a2a0 <ull_conn_rx+0x130>
		} else if ((conn->llcp_conn_param.ack !=
   3a678:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
			    conn->llcp_conn_param.req) &&
   3a67c:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
		} else if ((conn->llcp_conn_param.ack !=
   3a680:	428b      	cmp	r3, r1
			   (llctrl->unknown_rsp.type ==
   3a682:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   3a686:	d002      	beq.n	3a68e <ull_conn_rx+0x51e>
			    conn->llcp_conn_param.req) &&
   3a688:	2b0f      	cmp	r3, #15
   3a68a:	f000 8667 	beq.w	3b35c <ull_conn_rx+0x11ec>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   3a68e:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   3a692:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   3a696:	4291      	cmp	r1, r2
   3a698:	d002      	beq.n	3a6a0 <ull_conn_rx+0x530>
   3a69a:	2b14      	cmp	r3, #20
   3a69c:	f000 86e1 	beq.w	3b462 <ull_conn_rx+0x12f2>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   3a6a0:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3a6a4:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3a6a8:	428a      	cmp	r2, r1
   3a6aa:	d002      	beq.n	3a6b2 <ull_conn_rx+0x542>
   3a6ac:	2b16      	cmp	r3, #22
   3a6ae:	f000 8743 	beq.w	3b538 <ull_conn_rx+0x13c8>
			switch (llctrl->unknown_rsp.type) {
   3a6b2:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a6b4:	bf04      	itt	eq
   3a6b6:	2301      	moveq	r3, #1
   3a6b8:	712b      	strbeq	r3, [r5, #4]
		conn->procedure_expire = 0U;
   3a6ba:	2300      	movs	r3, #0
   3a6bc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   3a6c0:	4618      	mov	r0, r3
		break;
   3a6c2:	e5b5      	b.n	3a230 <ull_conn_rx+0xc0>
		if ((conn->llcp_req == conn->llcp_ack) ||
   3a6c4:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3a6c8:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3a6cc:	429a      	cmp	r2, r3
   3a6ce:	f43f ade7 	beq.w	3a2a0 <ull_conn_rx+0x130>
   3a6d2:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3a6d6:	2a03      	cmp	r2, #3
   3a6d8:	f47f ade2 	bne.w	3a2a0 <ull_conn_rx+0x130>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   3a6dc:	7f6a      	ldrb	r2, [r5, #29]
   3a6de:	2a01      	cmp	r2, #1
   3a6e0:	f47f adde 	bne.w	3a2a0 <ull_conn_rx+0x130>
		if (conn->lll.role) {
   3a6e4:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3a6e8:	2a00      	cmp	r2, #0
   3a6ea:	f2c0 871d 	blt.w	3b528 <ull_conn_rx+0x13b8>
			conn->llcp_enc.pause_rx = 0U;
   3a6ee:	f894 0176 	ldrb.w	r0, [r4, #374]	; 0x176
			conn->llcp_ack = conn->llcp_req;
   3a6f2:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
			conn->procedure_expire = 0U;
   3a6f6:	2200      	movs	r2, #0
			conn->llcp_enc.pause_rx = 0U;
   3a6f8:	f020 0003 	bic.w	r0, r0, #3
   3a6fc:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
			conn->procedure_expire = 0U;
   3a700:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   3a704:	0743      	lsls	r3, r0, #29
   3a706:	f57f ad92 	bpl.w	3a22e <ull_conn_rx+0xbe>
			conn->llcp_enc.refresh = 0U;
   3a70a:	f36f 0082 	bfc	r0, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   3a70e:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   3a710:	f884 0176 	strb.w	r0, [r4, #374]	; 0x176
	int nack = 0;
   3a714:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   3a716:	712b      	strb	r3, [r5, #4]
   3a718:	e58a      	b.n	3a230 <ull_conn_rx+0xc0>
		((!conn->llcp_enc.refresh &&
   3a71a:	f1b8 0f07 	cmp.w	r8, #7
   3a71e:	d0a7      	beq.n	3a670 <ull_conn_rx+0x500>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   3a720:	f1b8 0f02 	cmp.w	r8, #2
   3a724:	f040 83b6 	bne.w	3ae94 <ull_conn_rx+0xd24>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   3a728:	7f6b      	ldrb	r3, [r5, #29]
   3a72a:	2b02      	cmp	r3, #2
   3a72c:	f47f adb8 	bne.w	3a2a0 <ull_conn_rx+0x130>
	conn->llcp_terminate.reason_final =
   3a730:	f895 2020 	ldrb.w	r2, [r5, #32]
   3a734:	f884 2153 	strb.w	r2, [r4, #339]	; 0x153
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3a738:	2301      	movs	r3, #1
	int nack = 0;
   3a73a:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3a73c:	712b      	strb	r3, [r5, #4]
}
   3a73e:	e577      	b.n	3a230 <ull_conn_rx+0xc0>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   3a740:	7f6f      	ldrb	r7, [r5, #29]
   3a742:	2f01      	cmp	r7, #1
   3a744:	f47f adac 	bne.w	3a2a0 <ull_conn_rx+0x130>
	if (conn->common.txn_lock) {
   3a748:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
   3a74c:	f010 0602 	ands.w	r6, r0, #2
   3a750:	f040 864f 	bne.w	3b3f2 <ull_conn_rx+0x1282>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3a754:	4860      	ldr	r0, [pc, #384]	; (3a8d8 <ull_conn_rx+0x768>)
   3a756:	f7f9 f8c1 	bl	338dc <mem_acquire>
	if (!tx) {
   3a75a:	4601      	mov	r1, r0
   3a75c:	2800      	cmp	r0, #0
   3a75e:	f000 83db 	beq.w	3af18 <ull_conn_rx+0xda8>
	conn->common.txn_lock = 1U;
   3a762:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3a766:	f043 0302 	orr.w	r3, r3, #2
   3a76a:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3a76e:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   3a770:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3a772:	f043 0303 	orr.w	r3, r3, #3
   3a776:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   3a778:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   3a77a:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   3a77c:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   3a77e:	f7fe fbb5 	bl	38eec <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3a782:	712f      	strb	r7, [r5, #4]
	return 0;
   3a784:	4630      	mov	r0, r6
   3a786:	e553      	b.n	3a230 <ull_conn_rx+0xc0>
   3a788:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role ||
   3a78c:	2b00      	cmp	r3, #0
   3a78e:	f6ff ad87 	blt.w	3a2a0 <ull_conn_rx+0x130>
   3a792:	7f6b      	ldrb	r3, [r5, #29]
   3a794:	2b18      	cmp	r3, #24
   3a796:	f47f ad83 	bne.w	3a2a0 <ull_conn_rx+0x130>
		if (!conn->lll.role &&
   3a79a:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3a79e:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3a7a2:	429a      	cmp	r2, r3
   3a7a4:	f43f ad41 	beq.w	3a22a <ull_conn_rx+0xba>
		    (conn->llcp_conn_param.state ==
   3a7a8:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		     conn->llcp_conn_param.ack) &&
   3a7ac:	f003 030f 	and.w	r3, r3, #15
   3a7b0:	2b04      	cmp	r3, #4
   3a7b2:	f47f ad3a 	bne.w	3a22a <ull_conn_rx+0xba>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   3a7b6:	f8b5 e020 	ldrh.w	lr, [r5, #32]
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   3a7ba:	f8b5 c022 	ldrh.w	ip, [r5, #34]	; 0x22
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   3a7be:	8caf      	ldrh	r7, [r5, #36]	; 0x24
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   3a7c0:	8cee      	ldrh	r6, [r5, #38]	; 0x26
				cpr->preferred_periodicity;
   3a7c2:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   3a7c6:	fa1f f18e 	uxth.w	r1, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3a7ca:	2905      	cmp	r1, #5
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   3a7cc:	fa1f f28c 	uxth.w	r2, ip
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   3a7d0:	b2bb      	uxth	r3, r7
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   3a7d2:	fa1f f886 	uxth.w	r8, r6
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3a7d6:	f240 865c 	bls.w	3b492 <ull_conn_rx+0x1322>
   3a7da:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   3a7de:	f200 8658 	bhi.w	3b492 <ull_conn_rx+0x1322>
			    (interval_max > 3200) ||
   3a7e2:	4291      	cmp	r1, r2
   3a7e4:	f200 8655 	bhi.w	3b492 <ull_conn_rx+0x1322>
			    (interval_min > interval_max) ||
   3a7e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   3a7ec:	f080 8651 	bcs.w	3b492 <ull_conn_rx+0x1322>
			    (latency > 499) ||
   3a7f0:	f1a8 010a 	sub.w	r1, r8, #10
   3a7f4:	b289      	uxth	r1, r1
   3a7f6:	f640 4976 	movw	r9, #3190	; 0xc76
   3a7fa:	4549      	cmp	r1, r9
   3a7fc:	f200 8649 	bhi.w	3b492 <ull_conn_rx+0x1322>
			     ((latency + 1) * interval_max)) ||
   3a800:	3301      	adds	r3, #1
   3a802:	b29b      	uxth	r3, r3
   3a804:	fb02 f303 	mul.w	r3, r2, r3
			    (timeout < 10) || (timeout > 3200) ||
   3a808:	ebb3 0f88 	cmp.w	r3, r8, lsl #2
   3a80c:	f080 8641 	bcs.w	3b492 <ull_conn_rx+0x1322>
			     ((latency + 1) * interval_max)) ||
   3a810:	4282      	cmp	r2, r0
   3a812:	f0c0 863e 	bcc.w	3b492 <ull_conn_rx+0x1322>
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3a816:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
			conn->llcp_conn_param.interval_min = interval_min;
   3a81a:	f8a4 e198 	strh.w	lr, [r4, #408]	; 0x198
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3a81e:	2301      	movs	r3, #1
   3a820:	f363 0203 	bfi	r2, r3, #0, #4
			conn->procedure_expire = 0U;
   3a824:	2300      	movs	r3, #0
			conn->llcp_conn_param.interval_max = interval_max;
   3a826:	f8a4 c19a 	strh.w	ip, [r4, #410]	; 0x19a
			conn->llcp_conn_param.latency =	latency;
   3a82a:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
			conn->llcp_conn_param.timeout =	timeout;
   3a82e:	f8a4 619e 	strh.w	r6, [r4, #414]	; 0x19e
			conn->llcp_conn_param.preferred_periodicity =
   3a832:	f884 01a0 	strb.w	r0, [r4, #416]	; 0x1a0
			conn->procedure_expire = 0U;
   3a836:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   3a83a:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   3a83e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   3a842:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   3a846:	f8a4 31a2 	strh.w	r3, [r4, #418]	; 0x1a2
				sys_le16_to_cpu(cpr->offset0);
   3a84a:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   3a84e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   3a852:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   3a856:	f8a4 31a4 	strh.w	r3, [r4, #420]	; 0x1a4
				sys_le16_to_cpu(cpr->offset1);
   3a85a:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   3a85e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   3a862:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   3a866:	f8a4 31a6 	strh.w	r3, [r4, #422]	; 0x1a6
				sys_le16_to_cpu(cpr->offset2);
   3a86a:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   3a86e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   3a872:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   3a876:	f8a4 31a8 	strh.w	r3, [r4, #424]	; 0x1a8
				sys_le16_to_cpu(cpr->offset3);
   3a87a:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
   3a87e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   3a882:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   3a886:	f8a4 31aa 	strh.w	r3, [r4, #426]	; 0x1aa
				sys_le16_to_cpu(cpr->offset4);
   3a88a:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   3a88e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   3a892:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   3a896:	f8a4 31ac 	strh.w	r3, [r4, #428]	; 0x1ac
				sys_le16_to_cpu(cpr->offset5);
   3a89a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   3a89e:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3a8a2:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset5);
   3a8a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   3a8aa:	f8a4 31ae 	strh.w	r3, [r4, #430]	; 0x1ae
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a8ae:	e4bc      	b.n	3a22a <ull_conn_rx+0xba>
   3a8b0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role ||
   3a8b4:	2b00      	cmp	r3, #0
   3a8b6:	f6ff acf3 	blt.w	3a2a0 <ull_conn_rx+0x130>
   3a8ba:	7f6b      	ldrb	r3, [r5, #29]
   3a8bc:	2b09      	cmp	r3, #9
   3a8be:	f47f acef 	bne.w	3a2a0 <ull_conn_rx+0x130>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   3a8c2:	4629      	mov	r1, r5
   3a8c4:	4620      	mov	r0, r4
}
   3a8c6:	b005      	add	sp, #20
   3a8c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   3a8cc:	f7fe bcaa 	b.w	39224 <feature_rsp_send>
   3a8d0:	20005254 	.word	0x20005254
   3a8d4:	087830d0 	.word	0x087830d0
   3a8d8:	200052e8 	.word	0x200052e8
   3a8dc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3a8e0:	2b00      	cmp	r3, #0
   3a8e2:	f6bf acdd 	bge.w	3a2a0 <ull_conn_rx+0x130>
   3a8e6:	7f6e      	ldrb	r6, [r5, #29]
   3a8e8:	2e01      	cmp	r6, #1
   3a8ea:	f47f acd9 	bne.w	3a2a0 <ull_conn_rx+0x130>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3a8ee:	48d6      	ldr	r0, [pc, #856]	; (3ac48 <ull_conn_rx+0xad8>)
   3a8f0:	f7f8 fff4 	bl	338dc <mem_acquire>
		if (!tx) {
   3a8f4:	2800      	cmp	r0, #0
   3a8f6:	f000 830f 	beq.w	3af18 <ull_conn_rx+0xda8>
	conn->llcp_enc.pause_rx = 1U;
   3a8fa:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   3a8fe:	f022 0205 	bic.w	r2, r2, #5
   3a902:	f042 0205 	orr.w	r2, r2, #5
   3a906:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->lll.enc_rx = 0;
   3a90a:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   3a90e:	f36f 02c3 	bfc	r2, #3, #1
   3a912:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3a916:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3a918:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3a91a:	f042 0203 	orr.w	r2, r2, #3
   3a91e:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   3a920:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   3a924:	210b      	movs	r1, #11
   3a926:	71c1      	strb	r1, [r0, #7]
	if (
   3a928:	2a00      	cmp	r2, #0
   3a92a:	f000 8342 	beq.w	3afb2 <ull_conn_rx+0xe42>
	    !conn->llcp_enc.pause_tx &&
   3a92e:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3a932:	078f      	lsls	r7, r1, #30
   3a934:	f100 833d 	bmi.w	3afb2 <ull_conn_rx+0xe42>
	    !conn->llcp_phy.pause_tx &&
   3a938:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3a93c:	07ce      	lsls	r6, r1, #31
   3a93e:	f100 8338 	bmi.w	3afb2 <ull_conn_rx+0xe42>
		if (conn->tx_head == conn->tx_data) {
   3a942:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3a946:	428a      	cmp	r2, r1
   3a948:	f000 87df 	beq.w	3b90a <ull_conn_rx+0x179a>
		} else if (!conn->tx_ctrl) {
   3a94c:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3a950:	2900      	cmp	r1, #0
   3a952:	f000 87f4 	beq.w	3b93e <ull_conn_rx+0x17ce>
	tx->next = conn->tx_ctrl_last->next;
   3a956:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3a95a:	6811      	ldr	r1, [r2, #0]
   3a95c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3a95e:	6010      	str	r0, [r2, #0]
}
   3a960:	e4e4      	b.n	3a32c <ull_conn_rx+0x1bc>
   3a962:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   3a966:	2b00      	cmp	r3, #0
   3a968:	f6ff ac9a 	blt.w	3a2a0 <ull_conn_rx+0x130>
   3a96c:	7f6b      	ldrb	r3, [r5, #29]
   3a96e:	2b03      	cmp	r3, #3
   3a970:	f47f ac96 	bne.w	3a2a0 <ull_conn_rx+0x130>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   3a974:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
					 conn->lll.phy_rx))) {
   3a978:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
			if (!(p->phys & (conn->lll.phy_tx |
   3a97c:	f895 2020 	ldrb.w	r2, [r5, #32]
   3a980:	430b      	orrs	r3, r1
   3a982:	f003 0307 	and.w	r3, r3, #7
   3a986:	4213      	tst	r3, r2
   3a988:	f43f ac51 	beq.w	3a22e <ull_conn_rx+0xbe>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   3a98c:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3a990:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3a994:	1a9b      	subs	r3, r3, r2
   3a996:	f003 0303 	and.w	r3, r3, #3
   3a99a:	2b02      	cmp	r3, #2
   3a99c:	f43f ac47 	beq.w	3a22e <ull_conn_rx+0xbe>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   3a9a0:	f104 00f5 	add.w	r0, r4, #245	; 0xf5
   3a9a4:	f003 fe60 	bl	3e668 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   3a9a8:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
			conn->llcp.chan_map.initiate = 1U;
   3a9ac:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_CHAN_MAP;
   3a9b0:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   3a9b2:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   3a9b4:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
			conn->llcp_ack -= 2U;
   3a9b8:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a9bc:	6832      	ldr	r2, [r6, #0]
			conn->llcp.chan_map.initiate = 1U;
   3a9be:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a9c2:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   3a9c4:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
	int nack = 0;
   3a9c8:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a9ca:	7111      	strb	r1, [r2, #4]

		break;
   3a9cc:	e430      	b.n	3a230 <ull_conn_rx+0xc0>
   3a9ce:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3a9d2:	2b00      	cmp	r3, #0
   3a9d4:	f6bf ac64 	bge.w	3a2a0 <ull_conn_rx+0x130>
   3a9d8:	7f6b      	ldrb	r3, [r5, #29]
   3a9da:	2b08      	cmp	r3, #8
   3a9dc:	f47f ac60 	bne.w	3a2a0 <ull_conn_rx+0x130>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   3a9e0:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   3a9e4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3a9e6:	1af3      	subs	r3, r6, r3
   3a9e8:	041a      	lsls	r2, r3, #16
   3a9ea:	f100 8605 	bmi.w	3b5f8 <ull_conn_rx+0x1488>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3a9ee:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3a9f2:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3a9f6:	1a9b      	subs	r3, r3, r2
   3a9f8:	f003 0303 	and.w	r3, r3, #3
   3a9fc:	2b02      	cmp	r3, #2
   3a9fe:	f000 85f3 	beq.w	3b5e8 <ull_conn_rx+0x1478>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   3aa02:	2205      	movs	r2, #5
   3aa04:	f105 0120 	add.w	r1, r5, #32
   3aa08:	f104 00f5 	add.w	r0, r4, #245	; 0xf5
   3aa0c:	f010 ff3d 	bl	4b88a <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   3aa10:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
	conn->llcp_ack -= 2U;
   3aa14:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
	conn->llcp.chan_map.instant = instant;
   3aa18:	f8a4 60fa 	strh.w	r6, [r4, #250]	; 0xfa
	conn->llcp.chan_map.initiate = 0U;
   3aa1c:	f36f 0200 	bfc	r2, #0, #1
   3aa20:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
	conn->llcp_type = LLCP_CHAN_MAP;
   3aa24:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   3aa26:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3aa28:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   3aa2a:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
	conn->llcp_ack -= 2U;
   3aa2e:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	int nack = 0;
   3aa32:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3aa34:	712a      	strb	r2, [r5, #4]
		if (err) {
   3aa36:	f7ff bbfb 	b.w	3a230 <ull_conn_rx+0xc0>
   3aa3a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3aa3e:	2b00      	cmp	r3, #0
   3aa40:	f6bf ac2e 	bge.w	3a2a0 <ull_conn_rx+0x130>
   3aa44:	7f6b      	ldrb	r3, [r5, #29]
   3aa46:	2b0c      	cmp	r3, #12
   3aa48:	f47f ac2a 	bne.w	3a2a0 <ull_conn_rx+0x130>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   3aa4c:	f8b5 1029 	ldrh.w	r1, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   3aa50:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3aa52:	1acb      	subs	r3, r1, r3
   3aa54:	0418      	lsls	r0, r3, #16
   3aa56:	f100 85cf 	bmi.w	3b5f8 <ull_conn_rx+0x1488>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3aa5a:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3aa5e:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3aa62:	1a9b      	subs	r3, r3, r2
   3aa64:	f003 0303 	and.w	r3, r3, #3
   3aa68:	2b02      	cmp	r3, #2
   3aa6a:	f000 85bd 	beq.w	3b5e8 <ull_conn_rx+0x1478>
	if (!conn_upd_curr) {
   3aa6e:	4b77      	ldr	r3, [pc, #476]	; (3ac4c <ull_conn_rx+0xadc>)
   3aa70:	681a      	ldr	r2, [r3, #0]
   3aa72:	2a00      	cmp	r2, #0
   3aa74:	f000 8639 	beq.w	3b6ea <ull_conn_rx+0x157a>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   3aa78:	f895 3020 	ldrb.w	r3, [r5, #32]
   3aa7c:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   3aa80:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   3aa84:	f240 42e2 	movw	r2, #1250	; 0x4e2
   3aa88:	fb02 f303 	mul.w	r3, r2, r3
	conn->llcp_cu.win_offset_us =
   3aa8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   3aa90:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   3aa94:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   3aa98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.interval =
   3aa9c:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   3aaa0:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   3aaa4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   3aaa8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.latency =
   3aaac:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3aab0:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   3aab4:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
   3aab8:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   3aabc:	f8a4 10f4 	strh.w	r1, [r4, #244]	; 0xf4
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3aac0:	f023 030f 	bic.w	r3, r3, #15
   3aac4:	f043 0308 	orr.w	r3, r3, #8
   3aac8:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	conn->llcp_cu.ack--;
   3aacc:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   3aad0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp_cu.timeout =
   3aad4:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
	conn->llcp_cu.ack--;
   3aad8:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   3aada:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   3aade:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
	link->mem = conn->llcp_rx;
   3aae2:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   3aae4:	6832      	ldr	r2, [r6, #0]
   3aae6:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   3aae8:	6832      	ldr	r2, [r6, #0]
   3aaea:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
	*rx = NULL;
   3aaee:	2300      	movs	r3, #0
   3aaf0:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   3aaf2:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3aaf6:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3aafa:	4293      	cmp	r3, r2
   3aafc:	f43f addd 	beq.w	3a6ba <ull_conn_rx+0x54a>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   3ab00:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   3ab04:	f003 030e 	and.w	r3, r3, #14
   3ab08:	2b04      	cmp	r3, #4
   3ab0a:	f47f add6 	bne.w	3a6ba <ull_conn_rx+0x54a>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3ab0e:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
		if (err) {
   3ab12:	e5d2      	b.n	3a6ba <ull_conn_rx+0x54a>
   3ab14:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   3ab18:	2b00      	cmp	r3, #0
   3ab1a:	f6ff abc1 	blt.w	3a2a0 <ull_conn_rx+0x130>
   3ab1e:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3ab22:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3ab26:	429a      	cmp	r2, r3
   3ab28:	f43f abba 	beq.w	3a2a0 <ull_conn_rx+0x130>
   3ab2c:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3ab30:	2b03      	cmp	r3, #3
   3ab32:	f47f abb5 	bne.w	3a2a0 <ull_conn_rx+0x130>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   3ab36:	7f6b      	ldrb	r3, [r5, #29]
   3ab38:	2b01      	cmp	r3, #1
   3ab3a:	f47f abb1 	bne.w	3a2a0 <ull_conn_rx+0x130>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3ab3e:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
   3ab42:	f36f 0201 	bfc	r2, #0, #2
   3ab46:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
	int nack = 0;
   3ab4a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ab4c:	712b      	strb	r3, [r5, #4]
		break;
   3ab4e:	f7ff bb6f 	b.w	3a230 <ull_conn_rx+0xc0>
   3ab52:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (!conn->lll.role ||
   3ab56:	2b00      	cmp	r3, #0
   3ab58:	f6bf aba2 	bge.w	3a2a0 <ull_conn_rx+0x130>
   3ab5c:	7f6b      	ldrb	r3, [r5, #29]
   3ab5e:	2b05      	cmp	r3, #5
   3ab60:	f47f ab9e 	bne.w	3a2a0 <ull_conn_rx+0x130>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   3ab64:	f895 2020 	ldrb.w	r2, [r5, #32]
   3ab68:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   3ab6c:	4313      	orrs	r3, r2
   3ab6e:	f013 0307 	ands.w	r3, r3, #7
   3ab72:	f040 8543 	bne.w	3b5fc <ull_conn_rx+0x148c>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   3ab76:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3ab7a:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3ab7e:	428a      	cmp	r2, r1
   3ab80:	f43f ab53 	beq.w	3a22a <ull_conn_rx+0xba>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   3ab84:	f894 21ce 	ldrb.w	r2, [r4, #462]	; 0x1ce
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   3ab88:	f002 0203 	and.w	r2, r2, #3
   3ab8c:	2a02      	cmp	r2, #2
   3ab8e:	f47f ab4c 	bne.w	3a22a <ull_conn_rx+0xba>
		conn->llcp_phy.pause_tx = 0U;
   3ab92:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3ab96:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3ab9a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
   3ab9e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   3aba2:	f363 0200 	bfi	r2, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3aba6:	4608      	mov	r0, r1
   3aba8:	f361 1006 	bfi	r0, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   3abac:	f884 21cf 	strb.w	r2, [r4, #463]	; 0x1cf
		if (!conn->llcp_phy.cmd) {
   3abb0:	f012 0204 	ands.w	r2, r2, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3abb4:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
   3abb8:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
   3abbc:	f040 8678 	bne.w	3b8b0 <ull_conn_rx+0x1740>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3abc0:	6833      	ldr	r3, [r6, #0]
   3abc2:	2101      	movs	r1, #1
   3abc4:	7119      	strb	r1, [r3, #4]
	int nack = 0;
   3abc6:	4610      	mov	r0, r2
   3abc8:	f7ff bb32 	b.w	3a230 <ull_conn_rx+0xc0>
   3abcc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role ||
   3abd0:	2b00      	cmp	r3, #0
   3abd2:	f6ff ab65 	blt.w	3a2a0 <ull_conn_rx+0x130>
   3abd6:	7f6b      	ldrb	r3, [r5, #29]
   3abd8:	2b03      	cmp	r3, #3
   3abda:	f47f ab61 	bne.w	3a2a0 <ull_conn_rx+0x130>
		if (!conn->lll.role &&
   3abde:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3abe2:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
   3abe6:	429a      	cmp	r2, r3
   3abe8:	f43f ab1f 	beq.w	3a22a <ull_conn_rx+0xba>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   3abec:	f894 21ce 	ldrb.w	r2, [r4, #462]	; 0x1ce
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3abf0:	f002 0303 	and.w	r3, r2, #3
   3abf4:	2b02      	cmp	r3, #2
   3abf6:	f47f ab18 	bne.w	3a22a <ull_conn_rx+0xba>
			conn->llcp_phy.tx &= p->rx_phys;
   3abfa:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   3abfe:	f3c2 0182 	ubfx	r1, r2, #2, #3
   3ac02:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   3ac04:	f895 1020 	ldrb.w	r1, [r5, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   3ac08:	009b      	lsls	r3, r3, #2
   3ac0a:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   3ac0e:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   3ac12:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3ac16:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   3ac1a:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3ac1e:	d002      	beq.n	3ac26 <ull_conn_rx+0xab6>
   3ac20:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   3ac24:	d105      	bne.n	3ac32 <ull_conn_rx+0xac2>
				conn->llcp_phy.tx = 0;
   3ac26:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3ac2a:	f003 0303 	and.w	r3, r3, #3
   3ac2e:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
			conn->llcp_phy.pause_tx = 1U;
   3ac32:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
			conn->procedure_expire = 0U;
   3ac36:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   3ac38:	f043 0301 	orr.w	r3, r3, #1
   3ac3c:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
			conn->procedure_expire = 0U;
   3ac40:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ac44:	f7ff baf1 	b.w	3a22a <ull_conn_rx+0xba>
   3ac48:	200052e8 	.word	0x200052e8
   3ac4c:	20005254 	.word	0x20005254
   3ac50:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		if (conn->lll.role ||
   3ac54:	2b00      	cmp	r3, #0
   3ac56:	f6ff ab23 	blt.w	3a2a0 <ull_conn_rx+0x130>
   3ac5a:	7f6b      	ldrb	r3, [r5, #29]
   3ac5c:	2b0d      	cmp	r3, #13
   3ac5e:	f47f ab1f 	bne.w	3a2a0 <ull_conn_rx+0x130>
		memcpy(&conn->llcp.encryption.skd[8],
   3ac62:	2208      	movs	r2, #8
   3ac64:	f105 0120 	add.w	r1, r5, #32
   3ac68:	f504 7085 	add.w	r0, r4, #266	; 0x10a
   3ac6c:	f010 fe0d 	bl	4b88a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   3ac70:	2204      	movs	r2, #4
   3ac72:	f105 0128 	add.w	r1, r5, #40	; 0x28
   3ac76:	f104 0098 	add.w	r0, r4, #152	; 0x98
   3ac7a:	f010 fe06 	bl	4b88a <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   3ac7e:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ac82:	6832      	ldr	r2, [r6, #0]
		conn->llcp_enc.pause_rx = 1U;
   3ac84:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ac88:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   3ac8a:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
	int nack = 0;
   3ac8e:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ac90:	7111      	strb	r1, [r2, #4]
		break;
   3ac92:	f7ff bacd 	b.w	3a230 <ull_conn_rx+0xc0>
		if (!conn->lll.role ||
   3ac96:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3ac9a:	2b00      	cmp	r3, #0
   3ac9c:	f6bf ab00 	bge.w	3a2a0 <ull_conn_rx+0x130>
   3aca0:	7f6b      	ldrb	r3, [r5, #29]
   3aca2:	2b17      	cmp	r3, #23
   3aca4:	f47f aafc 	bne.w	3a2a0 <ull_conn_rx+0x130>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   3aca8:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
   3acac:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3acb0:	1a9b      	subs	r3, r3, r2
   3acb2:	f003 0303 	and.w	r3, r3, #3
   3acb6:	2b02      	cmp	r3, #2
   3acb8:	f000 855d 	beq.w	3b776 <ull_conn_rx+0x1606>
		memcpy(&conn->llcp_enc.rand[0],
   3acbc:	2208      	movs	r2, #8
   3acbe:	f105 0120 	add.w	r1, r5, #32
   3acc2:	f204 1079 	addw	r0, r4, #377	; 0x179
   3acc6:	f010 fde0 	bl	4b88a <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   3acca:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   3acce:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   3acd2:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3acd6:	f894 2100 	ldrb.w	r2, [r4, #256]	; 0x100
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   3acda:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3acde:	6831      	ldr	r1, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3ace0:	2301      	movs	r3, #1
   3ace2:	f363 0201 	bfi	r2, r3, #0, #2
   3ace6:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3acea:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   3acec:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
		conn->llcp_type = LLCP_ENCRYPTION;
   3acf0:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   3acf2:	3b02      	subs	r3, #2
   3acf4:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		memcpy(&conn->llcp.encryption.skd[0],
   3acf8:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   3acfa:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
		memcpy(&conn->llcp.encryption.skd[0],
   3acfe:	f504 7081 	add.w	r0, r4, #258	; 0x102
   3ad02:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   3ad06:	f010 fdc0 	bl	4b88a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   3ad0a:	2204      	movs	r2, #4
   3ad0c:	f105 0132 	add.w	r1, r5, #50	; 0x32
   3ad10:	f104 0094 	add.w	r0, r4, #148	; 0x94
   3ad14:	f010 fdb9 	bl	4b88a <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   3ad18:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
		conn->procedure_expire = conn->procedure_reload;
   3ad1c:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   3ad20:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   3ad24:	f043 0301 	orr.w	r3, r3, #1
   3ad28:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
	int nack = 0;
   3ad2c:	2000      	movs	r0, #0
		break;
   3ad2e:	f7ff ba7f 	b.w	3a230 <ull_conn_rx+0xc0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3ad32:	7f6e      	ldrb	r6, [r5, #29]
   3ad34:	2e01      	cmp	r6, #1
   3ad36:	f47f aab3 	bne.w	3a2a0 <ull_conn_rx+0x130>
	} else if (!conn->lll.role) {
   3ad3a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3ad3e:	2b00      	cmp	r3, #0
   3ad40:	f2c0 8105 	blt.w	3af4e <ull_conn_rx+0xdde>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3ad44:	48a5      	ldr	r0, [pc, #660]	; (3afdc <ull_conn_rx+0xe6c>)
   3ad46:	f7f8 fdc9 	bl	338dc <mem_acquire>
		if (!tx) {
   3ad4a:	2800      	cmp	r0, #0
   3ad4c:	f000 80e4 	beq.w	3af18 <ull_conn_rx+0xda8>
	conn->llcp_enc.pause_rx = 1U;
   3ad50:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   3ad54:	f042 0201 	orr.w	r2, r2, #1
   3ad58:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->lll.enc_rx = 0;
   3ad5c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   3ad60:	f022 0218 	bic.w	r2, r2, #24
   3ad64:	e5d5      	b.n	3a912 <ull_conn_rx+0x7a2>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   3ad66:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   3ad6a:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   3ad6e:	4293      	cmp	r3, r2
   3ad70:	f43f aa5b 	beq.w	3a22a <ull_conn_rx+0xba>
	conn->procedure_expire = 0U;
   3ad74:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3ad76:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   3ad78:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
	conn->procedure_expire = 0U;
   3ad7c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3ad80:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   3ad82:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   3ad86:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   3ad8a:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3ad8c:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   3ad8e:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3ad92:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   3ad94:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   3ad98:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   3ad9a:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   3ad9c:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   3ad9e:	4618      	mov	r0, r3
   3ada0:	f7ff ba46 	b.w	3a230 <ull_conn_rx+0xc0>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3ada4:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   3ada8:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
   3adac:	4299      	cmp	r1, r3
   3adae:	f43f aa3c 	beq.w	3a22a <ull_conn_rx+0xba>
	if (!lll->role && (rej_ext_ind->error_code ==
   3adb2:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   3adb6:	2900      	cmp	r1, #0
   3adb8:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   3adbc:	f2c0 85ea 	blt.w	3b994 <ull_conn_rx+0x1824>
   3adc0:	291a      	cmp	r1, #26
   3adc2:	f000 8602 	beq.w	3b9ca <ull_conn_rx+0x185a>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   3adc6:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
   3adca:	f001 000f 	and.w	r0, r1, #15
   3adce:	2804      	cmp	r0, #4
   3add0:	d106      	bne.n	3ade0 <ull_conn_rx+0xc70>
	conn_upd_curr = NULL;
   3add2:	4883      	ldr	r0, [pc, #524]	; (3afe0 <ull_conn_rx+0xe70>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3add4:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3add8:	2300      	movs	r3, #0
   3adda:	6003      	str	r3, [r0, #0]
		conn->procedure_expire = 0U;
   3addc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   3ade0:	06c8      	lsls	r0, r1, #27
   3ade2:	f57f aa22 	bpl.w	3a22a <ull_conn_rx+0xba>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3ade6:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3ade8:	07d1      	lsls	r1, r2, #31
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3adea:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3adec:	f100 84a5 	bmi.w	3b73a <ull_conn_rx+0x15ca>
	cu->status = rej_ext_ind->error_code;
   3adf0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   3adf4:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   3adf6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   3adf8:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   3adfc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   3adfe:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   3ae00:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   3ae02:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   3ae06:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   3ae0a:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   3ae0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   3ae10:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   3ae14:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   3ae16:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   3ae18:	f7ff ba0a 	b.w	3a230 <ull_conn_rx+0xc0>
		if ((conn->llcp_ack != conn->llcp_req) &&
   3ae1c:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
   3ae20:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3ae24:	428b      	cmp	r3, r1
   3ae26:	f43f aa00 	beq.w	3a22a <ull_conn_rx+0xba>
   3ae2a:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3ae2e:	2b03      	cmp	r3, #3
   3ae30:	f47f a9fb 	bne.w	3a22a <ull_conn_rx+0xba>
	conn->llcp_enc.pause_rx = 0U;
   3ae34:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	conn->llcp_ack = conn->llcp_req;
   3ae38:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
	conn->procedure_expire = 0U;
   3ae3c:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   3ae3e:	f022 0203 	bic.w	r2, r2, #3
   3ae42:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->procedure_expire = 0U;
   3ae46:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   3ae4a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   3ae4e:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3ae52:	210d      	movs	r1, #13
   3ae54:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   3ae56:	4618      	mov	r0, r3
   3ae58:	f7ff b9ea 	b.w	3a230 <ull_conn_rx+0xc0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3ae5c:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3ae60:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
   3ae64:	428b      	cmp	r3, r1
   3ae66:	f43f a9e0 	beq.w	3a22a <ull_conn_rx+0xba>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3ae6a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   3ae6e:	2a23      	cmp	r2, #35	; 0x23
   3ae70:	f47f ab50 	bne.w	3a514 <ull_conn_rx+0x3a4>
   3ae74:	f7ff bb61 	b.w	3a53a <ull_conn_rx+0x3ca>
	       (conn->lll.role &&
   3ae78:	0741      	lsls	r1, r0, #29
   3ae7a:	f57f ac4e 	bpl.w	3a71a <ull_conn_rx+0x5aa>
		 (conn->llcp_enc.refresh &&
   3ae7e:	f1b8 0f02 	cmp.w	r8, #2
   3ae82:	f43f ac51 	beq.w	3a728 <ull_conn_rx+0x5b8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   3ae86:	f1b8 0f0b 	cmp.w	r8, #11
   3ae8a:	d05c      	beq.n	3af46 <ull_conn_rx+0xdd6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   3ae8c:	f1b8 0f03 	cmp.w	r8, #3
   3ae90:	f43f af06 	beq.w	3aca0 <ull_conn_rx+0xb30>
   3ae94:	f1b8 0f11 	cmp.w	r8, #17
   3ae98:	f63f a9d1 	bhi.w	3a23e <ull_conn_rx+0xce>
   3ae9c:	4951      	ldr	r1, [pc, #324]	; (3afe4 <ull_conn_rx+0xe74>)
   3ae9e:	fa21 fc08 	lsr.w	ip, r1, r8
   3aea2:	f01c 0f01 	tst.w	ip, #1
   3aea6:	f43f a9ca 	beq.w	3a23e <ull_conn_rx+0xce>
	switch (opcode) {
   3aeaa:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
   3aeae:	f1bc 0f10 	cmp.w	ip, #16
   3aeb2:	f63f adc7 	bhi.w	3aa44 <ull_conn_rx+0x8d4>
   3aeb6:	f20f 0e08 	addw	lr, pc, #8
   3aeba:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
   3aebe:	bf00      	nop
   3aec0:	0003a9d3 	.word	0x0003a9d3
   3aec4:	0003a729 	.word	0x0003a729
   3aec8:	0003ac97 	.word	0x0003ac97
   3aecc:	0003ac55 	.word	0x0003ac55
   3aed0:	0003ab19 	.word	0x0003ab19
   3aed4:	0003a6c5 	.word	0x0003a6c5
   3aed8:	0003a671 	.word	0x0003a671
   3aedc:	0003a29b 	.word	0x0003a29b
   3aee0:	0003a5f7 	.word	0x0003a5f7
   3aee4:	0003a8e1 	.word	0x0003a8e1
   3aee8:	0003ad33 	.word	0x0003ad33
   3aeec:	0003a563 	.word	0x0003a563
   3aef0:	0003a4dd 	.word	0x0003a4dd
   3aef4:	0003a8b5 	.word	0x0003a8b5
   3aef8:	0003a5c1 	.word	0x0003a5c1
   3aefc:	0003a78d 	.word	0x0003a78d
   3af00:	0003a473 	.word	0x0003a473
			tx->next = conn->tx_head;
   3af04:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3af06:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3af0a:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3af0e:	2a00      	cmp	r2, #0
   3af10:	f47f a98b 	bne.w	3a22a <ull_conn_rx+0xba>
   3af14:	f7ff b9fd 	b.w	3a312 <ull_conn_rx+0x1a2>
			return -ENOBUFS;
   3af18:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3af1c:	f7ff b988 	b.w	3a230 <ull_conn_rx+0xc0>
			conn->tx_data = conn->tx_data->next;
   3af20:	6813      	ldr	r3, [r2, #0]
   3af22:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3af26:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
   3af2a:	2b00      	cmp	r3, #0
   3af2c:	f47f a9e7 	bne.w	3a2fe <ull_conn_rx+0x18e>
			tx->next = conn->tx_head->next;
   3af30:	6813      	ldr	r3, [r2, #0]
   3af32:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   3af34:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   3af36:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   3af38:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
	if (!tx->next) {
   3af3c:	2a00      	cmp	r2, #0
   3af3e:	f47f a974 	bne.w	3a22a <ull_conn_rx+0xba>
   3af42:	f7ff b9e6 	b.w	3a312 <ull_conn_rx+0x1a2>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3af46:	7f6b      	ldrb	r3, [r5, #29]
   3af48:	2b01      	cmp	r3, #1
   3af4a:	f47f a9a9 	bne.w	3a2a0 <ull_conn_rx+0x130>
		conn->lll.enc_tx = 0;
   3af4e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3af52:	f36f 1304 	bfc	r3, #4, #1
   3af56:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   3af5a:	f7ff b966 	b.w	3a22a <ull_conn_rx+0xba>
		if (!conn->lll.role) {
   3af5e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3af62:	2a00      	cmp	r2, #0
   3af64:	f2c0 80b9 	blt.w	3b0da <ull_conn_rx+0xf6a>
					conn->llcp_conn_param.ack) &&
   3af68:	f894 2195 	ldrb.w	r2, [r4, #405]	; 0x195
   3af6c:	9200      	str	r2, [sp, #0]
   3af6e:	4611      	mov	r1, r2
			if ((conn->llcp_conn_param.req !=
   3af70:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   3af74:	428a      	cmp	r2, r1
   3af76:	d008      	beq.n	3af8a <ull_conn_rx+0xe1a>
			    ((conn->llcp_conn_param.state ==
   3af78:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
					conn->llcp_conn_param.ack) &&
   3af7c:	2251      	movs	r2, #81	; 0x51
   3af7e:	f001 010f 	and.w	r1, r1, #15
   3af82:	40ca      	lsrs	r2, r1
   3af84:	07d2      	lsls	r2, r2, #31
   3af86:	f100 827f 	bmi.w	3b488 <ull_conn_rx+0x1318>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   3af8a:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3af8e:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
   3af92:	1a52      	subs	r2, r2, r1
   3af94:	f002 0203 	and.w	r2, r2, #3
   3af98:	2a02      	cmp	r2, #2
   3af9a:	f000 83e6 	beq.w	3b76a <ull_conn_rx+0x15fa>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   3af9e:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3afa2:	f894 21cd 	ldrb.w	r2, [r4, #461]	; 0x1cd
   3afa6:	4291      	cmp	r1, r2
   3afa8:	f000 83f3 	beq.w	3b792 <ull_conn_rx+0x1622>
				nack = reject_ext_ind_send(conn, *rx,
   3afac:	232a      	movs	r3, #42	; 0x2a
   3afae:	f7ff bb16 	b.w	3a5de <ull_conn_rx+0x46e>
		if (!conn->tx_ctrl) {
   3afb2:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3afb6:	2900      	cmp	r1, #0
   3afb8:	f47f accd 	bne.w	3a956 <ull_conn_rx+0x7e6>
			tx->next = conn->tx_head;
   3afbc:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3afbe:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3afc2:	f7ff b9b3 	b.w	3a32c <ull_conn_rx+0x1bc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3afc6:	7913      	ldrb	r3, [r2, #4]
   3afc8:	f003 0303 	and.w	r3, r3, #3
   3afcc:	2b03      	cmp	r3, #3
   3afce:	f000 8240 	beq.w	3b452 <ull_conn_rx+0x12e2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3afd2:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
   3afd6:	f7ff b994 	b.w	3a302 <ull_conn_rx+0x192>
   3afda:	bf00      	nop
   3afdc:	200052e8 	.word	0x200052e8
   3afe0:	20005254 	.word	0x20005254
   3afe4:	00022040 	.word	0x00022040
	if (conn->common.txn_lock) {
   3afe8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3afec:	079b      	lsls	r3, r3, #30
   3afee:	f53f a91c 	bmi.w	3a22a <ull_conn_rx+0xba>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3aff2:	48d8      	ldr	r0, [pc, #864]	; (3b354 <ull_conn_rx+0x11e4>)
   3aff4:	f7f8 fc72 	bl	338dc <mem_acquire>
	if (!tx) {
   3aff8:	4603      	mov	r3, r0
   3affa:	2800      	cmp	r0, #0
   3affc:	d08c      	beq.n	3af18 <ull_conn_rx+0xda8>
	conn->common.txn_lock = 1U;
   3affe:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3b002:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
	eff_rx_octets = conn->lll.max_rx_octets;
   3b006:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   3b00a:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   3b00e:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   3b012:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   3b016:	f042 0202 	orr.w	r2, r2, #2
   3b01a:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3b01e:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
	if (/* Local idle, and Peer request then complete the Peer procedure
   3b022:	428a      	cmp	r2, r1
	eff_rx_octets = conn->lll.max_rx_octets;
   3b024:	4686      	mov	lr, r0
	if (/* Local idle, and Peer request then complete the Peer procedure
   3b026:	f040 8575 	bne.w	3bb14 <ull_conn_rx+0x19a4>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   3b02a:	8c28      	ldrh	r0, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3b02c:	281a      	cmp	r0, #26
   3b02e:	f240 822e 	bls.w	3b48e <ull_conn_rx+0x131e>
			eff_tx_octets = MIN(max_rx_octets,
   3b032:	f8b4 10d2 	ldrh.w	r1, [r4, #210]	; 0xd2
   3b036:	4281      	cmp	r1, r0
   3b038:	bf28      	it	cs
   3b03a:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3b03c:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   3b03e:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   3b042:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   3b044:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   3b046:	46f0      	mov	r8, lr
   3b048:	bf28      	it	cs
   3b04a:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   3b04e:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   3b052:	bf34      	ite	cc
   3b054:	4658      	movcc	r0, fp
   3b056:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   3b05a:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   3b05e:	bf34      	ite	cc
   3b060:	46d4      	movcc	ip, sl
   3b062:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   3b066:	45c6      	cmp	lr, r8
   3b068:	f000 8298 	beq.w	3b59c <ull_conn_rx+0x142c>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   3b06c:	3a01      	subs	r2, #1
   3b06e:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_length.rx_octets = eff_rx_octets;
   3b072:	f8a4 e1c0 	strh.w	lr, [r4, #448]	; 0x1c0
			conn->llcp_length.tx_octets = eff_tx_octets;
   3b076:	f8a4 11c2 	strh.w	r1, [r4, #450]	; 0x1c2
			conn->llcp_length.rx_time = eff_rx_time;
   3b07a:	f8a4 c1c4 	strh.w	ip, [r4, #452]	; 0x1c4
			conn->llcp_length.tx_time = eff_tx_time;
   3b07e:	f8a4 01c6 	strh.w	r0, [r4, #454]	; 0x1c6
			if (tx) {
   3b082:	2b00      	cmp	r3, #0
   3b084:	f000 836b 	beq.w	3b75e <ull_conn_rx+0x15ee>
   3b088:	2505      	movs	r5, #5
				conn->llcp_length.state =
   3b08a:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   3b08e:	f365 0202 	bfi	r2, r5, #0, #3
   3b092:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
			link->mem = conn->llcp_rx;
   3b096:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   3b09a:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   3b09c:	6832      	ldr	r2, [r6, #0]
   3b09e:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   3b0a0:	6832      	ldr	r2, [r6, #0]
   3b0a2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
			*rx = NULL;
   3b0a6:	2200      	movs	r2, #0
   3b0a8:	6032      	str	r2, [r6, #0]
	if (tx) {
   3b0aa:	2b00      	cmp	r3, #0
   3b0ac:	f43f a8bf 	beq.w	3a22e <ull_conn_rx+0xbe>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b0b0:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   3b0b2:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b0b4:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   3b0b8:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b0ba:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b0bc:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b0be:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   3b0c0:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   3b0c2:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   3b0c6:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   3b0ca:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b0cc:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b0ce:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   3b0d0:	f7fd ff0c 	bl	38eec <ctrl_tx_sec_enqueue>
	return 0;
   3b0d4:	2000      	movs	r0, #0
}
   3b0d6:	f7ff b8ab 	b.w	3a230 <ull_conn_rx+0xc0>
			    conn->llcp_conn_param.ack) ||
   3b0da:	f894 1195 	ldrb.w	r1, [r4, #405]	; 0x195
		} else if ((conn->llcp_conn_param.req ==
   3b0de:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
			    conn->llcp_conn_param.ack) ||
   3b0e2:	9100      	str	r1, [sp, #0]
		} else if ((conn->llcp_conn_param.req ==
   3b0e4:	428a      	cmp	r2, r1
   3b0e6:	d005      	beq.n	3b0f4 <ull_conn_rx+0xf84>
			    conn->llcp_conn_param.ack) ||
   3b0e8:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3b0ec:	f012 0f0b 	tst.w	r2, #11
   3b0f0:	f47f a89b 	bne.w	3a22a <ull_conn_rx+0xba>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   3b0f4:	f8b5 b020 	ldrh.w	fp, [r5, #32]
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   3b0f8:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   3b0fc:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   3b100:	8cef      	ldrh	r7, [r5, #38]	; 0x26
				cpr->preferred_periodicity;
   3b102:	f895 6028 	ldrb.w	r6, [r5, #40]	; 0x28
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   3b106:	fa1f fe8b 	uxth.w	lr, fp
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3b10a:	f1be 0f05 	cmp.w	lr, #5
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   3b10e:	fa1f f189 	uxth.w	r1, r9
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   3b112:	fa1f fc88 	uxth.w	ip, r8
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   3b116:	b2ba      	uxth	r2, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3b118:	d973      	bls.n	3b202 <ull_conn_rx+0x1092>
   3b11a:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   3b11e:	d870      	bhi.n	3b202 <ull_conn_rx+0x1092>
			    (interval_max > 3200) ||
   3b120:	458e      	cmp	lr, r1
   3b122:	d86e      	bhi.n	3b202 <ull_conn_rx+0x1092>
			    (interval_min > interval_max) ||
   3b124:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   3b128:	d26b      	bcs.n	3b202 <ull_conn_rx+0x1092>
			    (latency > 499) ||
   3b12a:	f1a2 0e0a 	sub.w	lr, r2, #10
   3b12e:	fa1f fe8e 	uxth.w	lr, lr
   3b132:	f640 4076 	movw	r0, #3190	; 0xc76
   3b136:	4586      	cmp	lr, r0
   3b138:	d863      	bhi.n	3b202 <ull_conn_rx+0x1092>
			     ((latency + 1) * interval_max)) ||
   3b13a:	f10c 0e01 	add.w	lr, ip, #1
   3b13e:	fa1f fe8e 	uxth.w	lr, lr
   3b142:	fb01 fe0e 	mul.w	lr, r1, lr
			    (timeout < 10) || (timeout > 3200) ||
   3b146:	ebbe 0f82 	cmp.w	lr, r2, lsl #2
   3b14a:	d25a      	bcs.n	3b202 <ull_conn_rx+0x1092>
			     ((latency + 1) * interval_max)) ||
   3b14c:	42b1      	cmp	r1, r6
   3b14e:	d358      	bcc.n	3b202 <ull_conn_rx+0x1092>
			conn->llcp_conn_param.interval_min = interval_min;
   3b150:	f8a4 b198 	strh.w	fp, [r4, #408]	; 0x198
			conn->llcp_conn_param.interval_max = interval_max;
   3b154:	f8a4 919a 	strh.w	r9, [r4, #410]	; 0x19a
			conn->llcp_conn_param.latency =	latency;
   3b158:	f8a4 819c 	strh.w	r8, [r4, #412]	; 0x19c
			conn->llcp_conn_param.timeout =	timeout;
   3b15c:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			conn->llcp_conn_param.preferred_periodicity =
   3b160:	f884 61a0 	strb.w	r6, [r4, #416]	; 0x1a0
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   3b164:	f895 702a 	ldrb.w	r7, [r5, #42]	; 0x2a
   3b168:	f895 6029 	ldrb.w	r6, [r5, #41]	; 0x29
   3b16c:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   3b170:	f8a4 61a2 	strh.w	r6, [r4, #418]	; 0x1a2
				sys_le16_to_cpu(cpr->offset0);
   3b174:	f895 702c 	ldrb.w	r7, [r5, #44]	; 0x2c
   3b178:	f895 602b 	ldrb.w	r6, [r5, #43]	; 0x2b
   3b17c:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.offset0 =
   3b180:	f8a4 61a4 	strh.w	r6, [r4, #420]	; 0x1a4
				sys_le16_to_cpu(cpr->offset1);
   3b184:	f895 702e 	ldrb.w	r7, [r5, #46]	; 0x2e
   3b188:	f895 602d 	ldrb.w	r6, [r5, #45]	; 0x2d
   3b18c:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.offset1 =
   3b190:	f8a4 61a6 	strh.w	r6, [r4, #422]	; 0x1a6
				sys_le16_to_cpu(cpr->offset2);
   3b194:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
   3b198:	f895 602f 	ldrb.w	r6, [r5, #47]	; 0x2f
   3b19c:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.offset2 =
   3b1a0:	f8a4 61a8 	strh.w	r6, [r4, #424]	; 0x1a8
				sys_le16_to_cpu(cpr->offset3);
   3b1a4:	f895 7032 	ldrb.w	r7, [r5, #50]	; 0x32
   3b1a8:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
   3b1ac:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.offset3 =
   3b1b0:	f8a4 61aa 	strh.w	r6, [r4, #426]	; 0x1aa
				sys_le16_to_cpu(cpr->offset4);
   3b1b4:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
   3b1b8:	f895 6033 	ldrb.w	r6, [r5, #51]	; 0x33
   3b1bc:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.offset4 =
   3b1c0:	f8a4 61ac 	strh.w	r6, [r4, #428]	; 0x1ac
				sys_le16_to_cpu(cpr->offset5);
   3b1c4:	f895 6035 	ldrb.w	r6, [r5, #53]	; 0x35
   3b1c8:	f895 7036 	ldrb.w	r7, [r5, #54]	; 0x36
   3b1cc:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			conn->llcp_conn_param.offset5 =
   3b1d0:	f8a4 61ae 	strh.w	r6, [r4, #430]	; 0x1ae
			     lll->interval) ||
   3b1d4:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   3b1d6:	42b1      	cmp	r1, r6
   3b1d8:	f000 847b 	beq.w	3bad2 <ull_conn_rx+0x1962>
				conn->llcp_conn_param.state =
   3b1dc:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3b1e0:	2103      	movs	r1, #3
   3b1e2:	f361 0203 	bfi	r2, r1, #0, #4
   3b1e6:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
			conn->llcp_conn_param.ack--;
   3b1ea:	9a00      	ldr	r2, [sp, #0]
   3b1ec:	1e50      	subs	r0, r2, #1
   3b1ee:	f884 0195 	strb.w	r0, [r4, #405]	; 0x195
	if (!conn_upd_curr) {
   3b1f2:	2b00      	cmp	r3, #0
   3b1f4:	f47f a81b 	bne.w	3a22e <ull_conn_rx+0xbe>
		conn_upd_curr = conn;
   3b1f8:	f8ca 4000 	str.w	r4, [sl]
	int nack = 0;
   3b1fc:	4618      	mov	r0, r3
   3b1fe:	f7ff b817 	b.w	3a230 <ull_conn_rx+0xc0>
				nack = reject_ext_ind_send(conn, *rx,
   3b202:	231e      	movs	r3, #30
   3b204:	f7ff b9eb 	b.w	3a5de <ull_conn_rx+0x46e>
	if (conn->common.txn_lock) {
   3b208:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3b20c:	079e      	lsls	r6, r3, #30
   3b20e:	f53f a80c 	bmi.w	3a22a <ull_conn_rx+0xba>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b212:	4850      	ldr	r0, [pc, #320]	; (3b354 <ull_conn_rx+0x11e4>)
   3b214:	f7f8 fb62 	bl	338dc <mem_acquire>
	if (!tx) {
   3b218:	4602      	mov	r2, r0
   3b21a:	2800      	cmp	r0, #0
   3b21c:	f43f ae7c 	beq.w	3af18 <ull_conn_rx+0xda8>
	conn->common.txn_lock = 1U;
   3b220:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3b224:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
	if (conn->llcp_phy.ack ==
   3b228:	f894 01cd 	ldrb.w	r0, [r4, #461]	; 0x1cd
	conn->common.txn_lock = 1U;
   3b22c:	f043 0302 	orr.w	r3, r3, #2
   3b230:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3b234:	2302      	movs	r3, #2
   3b236:	f363 0101 	bfi	r1, r3, #0, #2
	if (conn->llcp_phy.ack ==
   3b23a:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3b23e:	f884 11ce 	strb.w	r1, [r4, #462]	; 0x1ce
	if (conn->llcp_phy.ack ==
   3b242:	4283      	cmp	r3, r0
   3b244:	d115      	bne.n	3b272 <ull_conn_rx+0x1102>
		conn->llcp_phy.tx =
   3b246:	f8b4 11ce 	ldrh.w	r1, [r4, #462]	; 0x1ce
			conn->phy_pref_rx;
   3b24a:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
		conn->llcp_phy.ack--;
   3b24e:	3b01      	subs	r3, #1
   3b250:	f884 31cd 	strb.w	r3, [r4, #461]	; 0x1cd
		conn->llcp_phy.tx =
   3b254:	f421 619f 	bic.w	r1, r1, #1272	; 0x4f8
   3b258:	f240 43fc 	movw	r3, #1276	; 0x4fc
   3b25c:	f021 0104 	bic.w	r1, r1, #4
   3b260:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   3b264:	430b      	orrs	r3, r1
		conn->procedure_expire =
   3b266:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
		conn->llcp_phy.tx =
   3b26a:	f8a4 31ce 	strh.w	r3, [r4, #462]	; 0x1ce
		conn->procedure_expire =
   3b26e:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   3b272:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
	conn->llcp_phy.tx &= p->rx_phys;
   3b276:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   3b27a:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   3b27e:	f3c1 0682 	ubfx	r6, r1, #2, #3
   3b282:	4033      	ands	r3, r6
	conn->llcp_phy.rx &= p->tx_phys;
   3b284:	ea00 1051 	and.w	r0, r0, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   3b288:	009b      	lsls	r3, r3, #2
   3b28a:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   3b28e:	f001 0103 	and.w	r1, r1, #3
   3b292:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   3b294:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   3b296:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   3b29a:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   3b29c:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b2a0:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   3b2a2:	4603      	mov	r3, r0
   3b2a4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   3b2a8:	7253      	strb	r3, [r2, #9]
	    conn->tx_head &&
   3b2aa:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b2ae:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   3b2b2:	2617      	movs	r6, #23
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   3b2b4:	f3c0 0002 	ubfx	r0, r0, #0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   3b2b8:	71d6      	strb	r6, [r2, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   3b2ba:	7210      	strb	r0, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b2bc:	7111      	strb	r1, [r2, #4]
	if (
   3b2be:	2b00      	cmp	r3, #0
   3b2c0:	f000 80d9 	beq.w	3b476 <ull_conn_rx+0x1306>
	    !conn->llcp_enc.pause_tx &&
   3b2c4:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3b2c8:	0788      	lsls	r0, r1, #30
   3b2ca:	f100 80d4 	bmi.w	3b476 <ull_conn_rx+0x1306>
	    !conn->llcp_phy.pause_tx &&
   3b2ce:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3b2d2:	07c9      	lsls	r1, r1, #31
   3b2d4:	f100 80cf 	bmi.w	3b476 <ull_conn_rx+0x1306>
		if (conn->tx_head == conn->tx_data) {
   3b2d8:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3b2dc:	428b      	cmp	r3, r1
   3b2de:	f000 8421 	beq.w	3bb24 <ull_conn_rx+0x19b4>
		} else if (!conn->tx_ctrl) {
   3b2e2:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3b2e6:	2900      	cmp	r1, #0
   3b2e8:	f000 8367 	beq.w	3b9ba <ull_conn_rx+0x184a>
	tx->next = conn->tx_ctrl_last->next;
   3b2ec:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3b2f0:	6819      	ldr	r1, [r3, #0]
   3b2f2:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   3b2f4:	601a      	str	r2, [r3, #0]
	if (!tx->next) {
   3b2f6:	6813      	ldr	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   3b2f8:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3b2fc:	2b00      	cmp	r3, #0
   3b2fe:	f47e af94 	bne.w	3a22a <ull_conn_rx+0xba>
		conn->tx_data_last = tx;
   3b302:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b306:	f7fe bf90 	b.w	3a22a <ull_conn_rx+0xba>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3b30a:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   3b30e:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
   3b312:	428b      	cmp	r3, r1
   3b314:	f43f ad27 	beq.w	3ad66 <ull_conn_rx+0xbf6>
		rej_ext_ind->error_code = rej_ind->error_code;
   3b318:	f895 3020 	ldrb.w	r3, [r5, #32]
   3b31c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   3b320:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   3b324:	2800      	cmp	r0, #0
   3b326:	f2c0 82d0 	blt.w	3b8ca <ull_conn_rx+0x175a>
   3b32a:	2b1a      	cmp	r3, #26
   3b32c:	f000 834d 	beq.w	3b9ca <ull_conn_rx+0x185a>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   3b330:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3b334:	f003 000f 	and.w	r0, r3, #15
   3b338:	2804      	cmp	r0, #4
   3b33a:	d106      	bne.n	3b34a <ull_conn_rx+0x11da>
	conn_upd_curr = NULL;
   3b33c:	4806      	ldr	r0, [pc, #24]	; (3b358 <ull_conn_rx+0x11e8>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3b33e:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3b342:	2100      	movs	r1, #0
   3b344:	6001      	str	r1, [r0, #0]
		conn->procedure_expire = 0U;
   3b346:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   3b34a:	06d9      	lsls	r1, r3, #27
   3b34c:	f57e af6d 	bpl.w	3a22a <ull_conn_rx+0xba>
   3b350:	e549      	b.n	3ade6 <ull_conn_rx+0xc76>
   3b352:	bf00      	nop
   3b354:	200052e8 	.word	0x200052e8
   3b358:	20005254 	.word	0x20005254
			conn->llcp_conn_param.disabled = 1U;
   3b35c:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3b360:	f043 0320 	orr.w	r3, r3, #32
   3b364:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
			if (!conn->lll.role) {
   3b368:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3b36c:	2b00      	cmp	r3, #0
   3b36e:	f2c0 81c7 	blt.w	3b700 <ull_conn_rx+0x1590>
				LL_ASSERT(conn->llcp_cu.req ==
   3b372:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   3b376:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   3b37a:	429a      	cmp	r2, r3
   3b37c:	d00e      	beq.n	3b39c <ull_conn_rx+0x122c>
   3b37e:	4adc      	ldr	r2, [pc, #880]	; (3b6f0 <ull_conn_rx+0x1580>)
   3b380:	49dc      	ldr	r1, [pc, #880]	; (3b6f4 <ull_conn_rx+0x1584>)
   3b382:	48dd      	ldr	r0, [pc, #884]	; (3b6f8 <ull_conn_rx+0x1588>)
   3b384:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   3b388:	f00e f974 	bl	49674 <printk>
   3b38c:	4040      	eors	r0, r0
   3b38e:	f380 8811 	msr	BASEPRI, r0
   3b392:	f04f 0003 	mov.w	r0, #3
   3b396:	df02      	svc	2
   3b398:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
				conn->llcp_conn_param.state =
   3b39c:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3b3a0:	2106      	movs	r1, #6
   3b3a2:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   3b3a6:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   3b3a8:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   3b3aa:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
				conn->llcp_cu.win_size = 1U;
   3b3ae:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b3b2:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   3b3b4:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3b3b8:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3b3bc:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
   3b3c0:	00db      	lsls	r3, r3, #3
   3b3c2:	f022 020f 	bic.w	r2, r2, #15
   3b3c6:	430b      	orrs	r3, r1
   3b3c8:	4313      	orrs	r3, r2
   3b3ca:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
				conn->llcp_cu.latency =
   3b3ce:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
				conn->llcp_cu.interval =
   3b3d2:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
				conn->llcp_cu.latency =
   3b3d6:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
				conn->llcp_cu.win_offset_us = 0U;
   3b3da:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   3b3dc:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
				conn->llcp_cu.interval =
   3b3e0:	f8a4 211c 	strh.w	r2, [r4, #284]	; 0x11c
				conn->llcp_cu.timeout =
   3b3e4:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
				conn->llcp_cu.win_offset_us = 0U;
   3b3e8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b3ec:	7129      	strb	r1, [r5, #4]
				break;
   3b3ee:	f7fe bf1f 	b.w	3a230 <ull_conn_rx+0xc0>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b3f2:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   3b3f4:	2000      	movs	r0, #0
   3b3f6:	f7fe bf1b 	b.w	3a230 <ull_conn_rx+0xc0>
				      0x03) == 0x02) &&
   3b3fa:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3b3fe:	2b03      	cmp	r3, #3
   3b400:	f47f a82e 	bne.w	3a460 <ull_conn_rx+0x2f0>
   3b404:	f7ff b825 	b.w	3a452 <ull_conn_rx+0x2e2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b408:	48bc      	ldr	r0, [pc, #752]	; (3b6fc <ull_conn_rx+0x158c>)
   3b40a:	f7f8 fa67 	bl	338dc <mem_acquire>
		if (!tx) {
   3b40e:	4601      	mov	r1, r0
   3b410:	2800      	cmp	r0, #0
   3b412:	f43f ad81 	beq.w	3af18 <ull_conn_rx+0xda8>
		conn->llcp_version.tx = 1U;
   3b416:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3b41a:	f043 0301 	orr.w	r3, r3, #1
   3b41e:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b422:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   3b424:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3b426:	220c      	movs	r2, #12
   3b428:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   3b42a:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b42c:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3b430:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b434:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3b436:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   3b438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3b43c:	2205      	movs	r2, #5
		v->sub_version_number =
   3b43e:	72c3      	strb	r3, [r0, #11]
   3b440:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3b442:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   3b444:	4620      	mov	r0, r4
   3b446:	f7fd fd51 	bl	38eec <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b44a:	2301      	movs	r3, #1
   3b44c:	712b      	strb	r3, [r5, #4]
   3b44e:	f7ff b89b 	b.w	3a588 <ull_conn_rx+0x418>
	    ((pdu_data_tx->llctrl.opcode !=
   3b452:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3b454:	2b03      	cmp	r3, #3
   3b456:	f43f ad6b 	beq.w	3af30 <ull_conn_rx+0xdc0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3b45a:	2b0a      	cmp	r3, #10
   3b45c:	f47f adb9 	bne.w	3afd2 <ull_conn_rx+0xe62>
   3b460:	e566      	b.n	3af30 <ull_conn_rx+0xdc0>
			conn->llcp_length.disabled = 1U;
   3b462:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
			conn->llcp_length.ack = conn->llcp_length.req;
   3b466:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_length.disabled = 1U;
   3b46a:	f043 0308 	orr.w	r3, r3, #8
   3b46e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
			conn->llcp_length.ack = conn->llcp_length.req;
   3b472:	f7ff b922 	b.w	3a6ba <ull_conn_rx+0x54a>
		if (!conn->tx_ctrl) {
   3b476:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3b47a:	2900      	cmp	r1, #0
   3b47c:	f47f af36 	bne.w	3b2ec <ull_conn_rx+0x117c>
			tx->next = conn->tx_head;
   3b480:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   3b482:	e9c4 2275 	strd	r2, r2, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3b486:	e736      	b.n	3b2f6 <ull_conn_rx+0x1186>
				nack = reject_ext_ind_send(conn, *rx,
   3b488:	2323      	movs	r3, #35	; 0x23
   3b48a:	f7ff b8a8 	b.w	3a5de <ull_conn_rx+0x46e>
   3b48e:	4649      	mov	r1, r9
   3b490:	e5d4      	b.n	3b03c <ull_conn_rx+0xecc>
				nack = reject_ext_ind_send(conn, *rx,
   3b492:	231e      	movs	r3, #30
   3b494:	2210      	movs	r2, #16
   3b496:	f7fe bfe5 	b.w	3a464 <ull_conn_rx+0x2f4>
				nack = reject_ext_ind_send(conn, *rx,
   3b49a:	2323      	movs	r3, #35	; 0x23
   3b49c:	2216      	movs	r2, #22
   3b49e:	f7fe bfe1 	b.w	3a464 <ull_conn_rx+0x2f4>
				conn->llcp_phy.state =
   3b4a2:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
				if (conn->llcp_phy.ack ==
   3b4a6:	4291      	cmp	r1, r2
				conn->llcp_phy.state =
   3b4a8:	f043 0303 	orr.w	r3, r3, #3
   3b4ac:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
				if (conn->llcp_phy.ack ==
   3b4b0:	d111      	bne.n	3b4d6 <ull_conn_rx+0x1366>
					conn->llcp_phy.tx =
   3b4b2:	f8b4 21ce 	ldrh.w	r2, [r4, #462]	; 0x1ce
						conn->phy_pref_rx;
   3b4b6:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
					conn->llcp_phy.ack--;
   3b4ba:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   3b4bc:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   3b4c0:	f884 31cd 	strb.w	r3, [r4, #461]	; 0x1cd
					conn->llcp_phy.tx =
   3b4c4:	f240 43fc 	movw	r3, #1276	; 0x4fc
   3b4c8:	f022 0204 	bic.w	r2, r2, #4
   3b4cc:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   3b4d0:	4313      	orrs	r3, r2
   3b4d2:	f8a4 31ce 	strh.w	r3, [r4, #462]	; 0x1ce
				conn->llcp_phy.rx &= p->tx_phys;
   3b4d6:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3b4da:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   3b4de:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   3b4e2:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   3b4e6:	f003 0203 	and.w	r2, r3, #3
   3b4ea:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   3b4ee:	4003      	ands	r3, r0
   3b4f0:	009b      	lsls	r3, r3, #2
   3b4f2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   3b4f6:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3b4f8:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   3b4fc:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3b500:	d002      	beq.n	3b508 <ull_conn_rx+0x1398>
   3b502:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   3b506:	d105      	bne.n	3b514 <ull_conn_rx+0x13a4>
					conn->llcp_phy.tx = 0;
   3b508:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3b50c:	f003 0303 	and.w	r3, r3, #3
   3b510:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
				conn->llcp_phy.pause_tx = 1U;
   3b514:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b518:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   3b51a:	4313      	orrs	r3, r2
   3b51c:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
	int nack = 0;
   3b520:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b522:	712a      	strb	r2, [r5, #4]
   3b524:	f7fe be84 	b.w	3a230 <ull_conn_rx+0xc0>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3b528:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3b52c:	f36f 0301 	bfc	r3, #0, #2
   3b530:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3b534:	f7ff b8e6 	b.w	3a704 <ull_conn_rx+0x594>
			lll->phy_tx_time = lll->phy_tx;
   3b538:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   3b53c:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   3b540:	f884 11cd 	strb.w	r1, [r4, #461]	; 0x1cd
			conn->llcp_phy.pause_tx = 0U;
   3b544:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   3b548:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   3b54a:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   3b54e:	f362 1106 	bfi	r1, r2, #4, #3
   3b552:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   3b556:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   3b55a:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
			lll->phy_tx_time = lll->phy_tx;
   3b55e:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3b562:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   3b564:	f000 80dc 	beq.w	3b720 <ull_conn_rx+0x15b0>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3b568:	211c      	movs	r1, #28
   3b56a:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   3b56c:	2300      	movs	r3, #0
   3b56e:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   3b570:	776a      	strb	r2, [r5, #29]
				p->rx = lll->phy_rx;
   3b572:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3b576:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3b57a:	77ab      	strb	r3, [r5, #30]
   3b57c:	f7ff b89d 	b.w	3a6ba <ull_conn_rx+0x54a>
	conn->llcp_enc.pause_rx = 0U;
   3b580:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	conn->llcp_ack = conn->llcp_req;
   3b584:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
	conn->procedure_expire = 0U;
   3b588:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   3b58a:	f022 0203 	bic.w	r2, r2, #3
   3b58e:	f884 2176 	strb.w	r2, [r4, #374]	; 0x176
	conn->procedure_expire = 0U;
   3b592:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   3b596:	4618      	mov	r0, r3
   3b598:	f7fe be4a 	b.w	3a230 <ull_conn_rx+0xc0>
			conn->procedure_expire = 0U;
   3b59c:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3b59e:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   3b5a0:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->procedure_expire = 0U;
   3b5a4:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3b5a8:	f000 81be 	beq.w	3b928 <ull_conn_rx+0x17b8>
			conn->lll.max_rx_time = eff_rx_time;
   3b5ac:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   3b5b0:	2b00      	cmp	r3, #0
   3b5b2:	f000 81ea 	beq.w	3b98a <ull_conn_rx+0x181a>
					(conn->llcp_length.req - 1);
   3b5b6:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   3b5b8:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
				conn->llcp_length.state =
   3b5bc:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
				conn->llcp_length.rx_octets = eff_rx_octets;
   3b5c0:	f8a4 e1c0 	strh.w	lr, [r4, #448]	; 0x1c0
				conn->llcp_length.state =
   3b5c4:	2603      	movs	r6, #3
   3b5c6:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   3b5ca:	f8a4 11c2 	strh.w	r1, [r4, #450]	; 0x1c2
				conn->llcp_length.rx_time = eff_rx_time;
   3b5ce:	f8a4 c1c4 	strh.w	ip, [r4, #452]	; 0x1c4
				conn->llcp_length.tx_time = eff_tx_time;
   3b5d2:	f8a4 01c6 	strh.w	r0, [r4, #454]	; 0x1c6
				conn->llcp_length.state =
   3b5d6:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   3b5da:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   3b5de:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   3b5e0:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   3b5e4:	84e8      	strh	r0, [r5, #38]	; 0x26
   3b5e6:	e560      	b.n	3b0aa <ull_conn_rx+0xf3a>
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   3b5e8:	232a      	movs	r3, #42	; 0x2a
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b5ea:	2201      	movs	r2, #1
   3b5ec:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   3b5ee:	2000      	movs	r0, #0
			conn->llcp_terminate.reason_final = err;
   3b5f0:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
   3b5f4:	f7fe be1c 	b.w	3a230 <ull_conn_rx+0xc0>
		err = BT_HCI_ERR_INSTANT_PASSED;
   3b5f8:	2328      	movs	r3, #40	; 0x28
   3b5fa:	e7f6      	b.n	3b5ea <ull_conn_rx+0x147a>
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3b5fc:	2101      	movs	r1, #1
   3b5fe:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
   3b602:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3b606:	f7f8 fb3d 	bl	33c84 <util_ones_count_get>
   3b60a:	2801      	cmp	r0, #1
   3b60c:	f200 808c 	bhi.w	3b728 <ull_conn_rx+0x15b8>
	phy = ind->p_to_c_phy;
   3b610:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   3b614:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3b618:	f10d 000f 	add.w	r0, sp, #15
   3b61c:	2101      	movs	r1, #1
   3b61e:	f7f8 fb31 	bl	33c84 <util_ones_count_get>
   3b622:	2801      	cmp	r0, #1
   3b624:	f200 8080 	bhi.w	3b728 <ull_conn_rx+0x15b8>
	instant = sys_le16_to_cpu(ind->instant);
   3b628:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   3b62a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3b62c:	1ad3      	subs	r3, r2, r3
   3b62e:	041b      	lsls	r3, r3, #16
   3b630:	f100 81be 	bmi.w	3b9b0 <ull_conn_rx+0x1840>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3b634:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
   3b638:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3b63c:	1a5b      	subs	r3, r3, r1
   3b63e:	f003 0303 	and.w	r3, r3, #3
   3b642:	2b02      	cmp	r3, #2
   3b644:	f000 81af 	beq.w	3b9a6 <ull_conn_rx+0x1836>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3b648:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
   3b64c:	f894 31cd 	ldrb.w	r3, [r4, #461]	; 0x1cd
   3b650:	4283      	cmp	r3, r0
   3b652:	d018      	beq.n	3b686 <ull_conn_rx+0x1516>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   3b654:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3b658:	f003 0303 	and.w	r3, r3, #3
   3b65c:	2b02      	cmp	r3, #2
   3b65e:	d112      	bne.n	3b686 <ull_conn_rx+0x1516>
		conn->llcp_phy.pause_tx = 0U;
   3b660:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3b664:	f884 01cd 	strb.w	r0, [r4, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3b668:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3b66c:	f894 00f4 	ldrb.w	r0, [r4, #244]	; 0xf4
		conn->llcp_phy.pause_tx = 0U;
   3b670:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3b674:	f3c3 0380 	ubfx	r3, r3, #2, #1
   3b678:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
   3b67c:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3b67e:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
		conn->procedure_expire = 0U;
   3b682:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   3b686:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   3b68a:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   3b68e:	f8a4 20f6 	strh.w	r2, [r4, #246]	; 0xf6
	conn->llcp.phy_upd_ind.initiate = 0U;
   3b692:	009b      	lsls	r3, r3, #2
   3b694:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   3b698:	f003 031c 	and.w	r3, r3, #28
   3b69c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   3b6a0:	f002 0202 	and.w	r2, r2, #2
   3b6a4:	4313      	orrs	r3, r2
   3b6a6:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
	link->mem = conn->llcp_rx;
   3b6aa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   3b6ae:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   3b6b0:	6833      	ldr	r3, [r6, #0]
   3b6b2:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   3b6b4:	6833      	ldr	r3, [r6, #0]
   3b6b6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	*rx = NULL;
   3b6ba:	2000      	movs	r0, #0
   3b6bc:	6030      	str	r0, [r6, #0]
	if (conn->llcp.phy_upd_ind.tx) {
   3b6be:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
	conn->llcp_type = LLCP_PHY_UPD;
   3b6c2:	2306      	movs	r3, #6
	conn->llcp_ack -= 2U;
   3b6c4:	3902      	subs	r1, #2
	conn->llcp_type = LLCP_PHY_UPD;
   3b6c6:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2
	if (conn->llcp.phy_upd_ind.tx) {
   3b6ca:	f012 031c 	ands.w	r3, r2, #28
	conn->llcp_ack -= 2U;
   3b6ce:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
	if (conn->llcp.phy_upd_ind.tx) {
   3b6d2:	f43e adac 	beq.w	3a22e <ull_conn_rx+0xbe>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   3b6d6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   3b6da:	f3c2 0282 	ubfx	r2, r2, #2, #3
   3b6de:	f362 1306 	bfi	r3, r2, #4, #3
   3b6e2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (err) {
   3b6e6:	f7fe bda3 	b.w	3a230 <ull_conn_rx+0xc0>
		conn_upd_curr = conn;
   3b6ea:	601c      	str	r4, [r3, #0]
   3b6ec:	f7ff b9c4 	b.w	3aa78 <ull_conn_rx+0x908>
   3b6f0:	00052970 	.word	0x00052970
   3b6f4:	00052aa4 	.word	0x00052aa4
   3b6f8:	00052460 	.word	0x00052460
   3b6fc:	200052e8 	.word	0x200052e8
	conn_upd_curr = NULL;
   3b700:	4bd1      	ldr	r3, [pc, #836]	; (3ba48 <ull_conn_rx+0x18d8>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3b702:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3b706:	2100      	movs	r1, #0
   3b708:	6019      	str	r1, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   3b70a:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3b70e:	f013 0310 	ands.w	r3, r3, #16
   3b712:	f040 80e2 	bne.w	3b8da <ull_conn_rx+0x176a>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b716:	2201      	movs	r2, #1
   3b718:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   3b71a:	4618      	mov	r0, r3
				break;
   3b71c:	f7fe bd88 	b.w	3a230 <ull_conn_rx+0xc0>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b720:	2201      	movs	r2, #1
   3b722:	711a      	strb	r2, [r3, #4]
   3b724:	f7fe bfc9 	b.w	3a6ba <ull_conn_rx+0x54a>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b728:	6833      	ldr	r3, [r6, #0]
   3b72a:	2201      	movs	r2, #1
   3b72c:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   3b72e:	231e      	movs	r3, #30
			conn->llcp_terminate.reason_final = err;
   3b730:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
	int nack = 0;
   3b734:	2000      	movs	r0, #0
   3b736:	f7fe bd7b 	b.w	3a230 <ull_conn_rx+0xc0>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3b73a:	4ac4      	ldr	r2, [pc, #784]	; (3ba4c <ull_conn_rx+0x18dc>)
   3b73c:	49c4      	ldr	r1, [pc, #784]	; (3ba50 <ull_conn_rx+0x18e0>)
   3b73e:	48c5      	ldr	r0, [pc, #788]	; (3ba54 <ull_conn_rx+0x18e4>)
   3b740:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   3b744:	f00d ff96 	bl	49674 <printk>
   3b748:	4040      	eors	r0, r0
   3b74a:	f380 8811 	msr	BASEPRI, r0
   3b74e:	f04f 0003 	mov.w	r0, #3
   3b752:	df02      	svc	2
   3b754:	f7ff bb4c 	b.w	3adf0 <ull_conn_rx+0xc80>
	struct node_tx *tx = NULL;
   3b758:	2300      	movs	r3, #0
   3b75a:	f7fe be3a 	b.w	3a3d2 <ull_conn_rx+0x262>
				conn->lll.max_tx_octets = eff_tx_octets;
   3b75e:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   3b762:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   3b766:	2504      	movs	r5, #4
   3b768:	e48f      	b.n	3b08a <ull_conn_rx+0xf1a>
				      0x03) == 0x02) &&
   3b76a:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3b76e:	2a03      	cmp	r2, #3
   3b770:	f47f ac1c 	bne.w	3afac <ull_conn_rx+0xe3c>
   3b774:	e413      	b.n	3af9e <ull_conn_rx+0xe2e>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3b776:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
			conn->llcp_ack += 2U;
   3b77a:	3202      	adds	r2, #2
   3b77c:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3b780:	2b00      	cmp	r3, #0
   3b782:	f040 80e6 	bne.w	3b952 <ull_conn_rx+0x17e2>
			conn->periph.llcp_type = conn->llcp_type;
   3b786:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3b78a:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
   3b78e:	f7ff ba95 	b.w	3acbc <ull_conn_rx+0xb4c>
				uint16_t interval_min =
   3b792:	f8b5 9020 	ldrh.w	r9, [r5, #32]
				uint16_t interval_max =
   3b796:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
				uint16_t latency =
   3b79a:	f8b5 e024 	ldrh.w	lr, [r5, #36]	; 0x24
				uint16_t timeout =
   3b79e:	8cea      	ldrh	r2, [r5, #38]	; 0x26
   3b7a0:	f8ad 2006 	strh.w	r2, [sp, #6]
				uint16_t interval_min =
   3b7a4:	fa1f f789 	uxth.w	r7, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3b7a8:	2f05      	cmp	r7, #5
					cpr->preferred_periodicity;
   3b7aa:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
				uint16_t interval_max =
   3b7ae:	fa1f f188 	uxth.w	r1, r8
				uint16_t latency =
   3b7b2:	fa1f f68e 	uxth.w	r6, lr
				uint16_t timeout =
   3b7b6:	b292      	uxth	r2, r2
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3b7b8:	f67f ad23 	bls.w	3b202 <ull_conn_rx+0x1092>
   3b7bc:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   3b7c0:	f63f ad1f 	bhi.w	3b202 <ull_conn_rx+0x1092>
				    (interval_max > 3200) ||
   3b7c4:	428f      	cmp	r7, r1
   3b7c6:	f63f ad1c 	bhi.w	3b202 <ull_conn_rx+0x1092>
				    (interval_min > interval_max) ||
   3b7ca:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   3b7ce:	f4bf ad18 	bcs.w	3b202 <ull_conn_rx+0x1092>
				    (latency > 499) ||
   3b7d2:	f1a2 070a 	sub.w	r7, r2, #10
   3b7d6:	b2bf      	uxth	r7, r7
   3b7d8:	f640 4c76 	movw	ip, #3190	; 0xc76
   3b7dc:	4567      	cmp	r7, ip
   3b7de:	f63f ad10 	bhi.w	3b202 <ull_conn_rx+0x1092>
				     ((latency + 1) * interval_max)) ||
   3b7e2:	1c77      	adds	r7, r6, #1
   3b7e4:	b2bf      	uxth	r7, r7
   3b7e6:	fb01 f707 	mul.w	r7, r1, r7
				    (timeout > 3200) ||
   3b7ea:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   3b7ee:	f4bf ad08 	bcs.w	3b202 <ull_conn_rx+0x1092>
				     ((latency + 1) * interval_max)) ||
   3b7f2:	4559      	cmp	r1, fp
   3b7f4:	f4ff ad05 	bcc.w	3b202 <ull_conn_rx+0x1092>
				conn->llcp_conn_param.timeout =	timeout;
   3b7f8:	f8bd 7006 	ldrh.w	r7, [sp, #6]
				conn->llcp_conn_param.interval_min =
   3b7fc:	f8a4 9198 	strh.w	r9, [r4, #408]	; 0x198
				conn->llcp_conn_param.interval_max =
   3b800:	f8a4 819a 	strh.w	r8, [r4, #410]	; 0x19a
				conn->llcp_conn_param.latency =	latency;
   3b804:	f8a4 e19c 	strh.w	lr, [r4, #412]	; 0x19c
				conn->llcp_conn_param.timeout =	timeout;
   3b808:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				conn->llcp_conn_param.preferred_periodicity =
   3b80c:	f884 b1a0 	strb.w	fp, [r4, #416]	; 0x1a0
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   3b810:	f895 c02a 	ldrb.w	ip, [r5, #42]	; 0x2a
   3b814:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   3b818:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   3b81c:	f8a4 71a2 	strh.w	r7, [r4, #418]	; 0x1a2
					sys_le16_to_cpu(cpr->offset0);
   3b820:	f895 c02c 	ldrb.w	ip, [r5, #44]	; 0x2c
   3b824:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   3b828:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
				conn->llcp_conn_param.offset0 =
   3b82c:	f8a4 71a4 	strh.w	r7, [r4, #420]	; 0x1a4
					sys_le16_to_cpu(cpr->offset1);
   3b830:	f895 c02e 	ldrb.w	ip, [r5, #46]	; 0x2e
   3b834:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   3b838:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
				conn->llcp_conn_param.offset1 =
   3b83c:	f8a4 71a6 	strh.w	r7, [r4, #422]	; 0x1a6
					sys_le16_to_cpu(cpr->offset2);
   3b840:	f895 c030 	ldrb.w	ip, [r5, #48]	; 0x30
   3b844:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   3b848:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
				conn->llcp_conn_param.offset2 =
   3b84c:	f8a4 71a8 	strh.w	r7, [r4, #424]	; 0x1a8
					sys_le16_to_cpu(cpr->offset3);
   3b850:	f895 c032 	ldrb.w	ip, [r5, #50]	; 0x32
   3b854:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   3b858:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
				conn->llcp_conn_param.offset3 =
   3b85c:	f8a4 71aa 	strh.w	r7, [r4, #426]	; 0x1aa
					sys_le16_to_cpu(cpr->offset4);
   3b860:	f895 c034 	ldrb.w	ip, [r5, #52]	; 0x34
   3b864:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   3b868:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
				conn->llcp_conn_param.offset4 =
   3b86c:	f8a4 71ac 	strh.w	r7, [r4, #428]	; 0x1ac
					sys_le16_to_cpu(cpr->offset5);
   3b870:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   3b874:	f895 c036 	ldrb.w	ip, [r5, #54]	; 0x36
   3b878:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
				conn->llcp_conn_param.offset5 =
   3b87c:	f8a4 71ae 	strh.w	r7, [r4, #430]	; 0x1ae
				     lll->interval) ||
   3b880:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   3b882:	42b9      	cmp	r1, r7
   3b884:	f000 80fd 	beq.w	3ba82 <ull_conn_rx+0x1912>
					if (conn->llcp_enc.pause_tx) {
   3b888:	0787      	lsls	r7, r0, #30
						conn->llcp_conn_param.state =
   3b88a:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
					if (conn->llcp_enc.pause_tx) {
   3b88e:	f140 80f2 	bpl.w	3ba76 <ull_conn_rx+0x1906>
						conn->llcp_conn_param.state =
   3b892:	2102      	movs	r1, #2
   3b894:	f361 0203 	bfi	r2, r1, #0, #4
   3b898:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
						(*rx)->hdr.type =
   3b89c:	2201      	movs	r2, #1
   3b89e:	712a      	strb	r2, [r5, #4]
				conn->llcp_conn_param.ack--;
   3b8a0:	9a00      	ldr	r2, [sp, #0]
   3b8a2:	3a01      	subs	r2, #1
   3b8a4:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
	if (!conn_upd_curr) {
   3b8a8:	2b00      	cmp	r3, #0
   3b8aa:	f47e acc0 	bne.w	3a22e <ull_conn_rx+0xbe>
   3b8ae:	e4a3      	b.n	3b1f8 <ull_conn_rx+0x1088>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3b8b0:	6832      	ldr	r2, [r6, #0]
   3b8b2:	201c      	movs	r0, #28
   3b8b4:	7110      	strb	r0, [r2, #4]
		p->status = 0U;
   3b8b6:	772b      	strb	r3, [r5, #28]
		p->tx = conn->lll.phy_tx;
   3b8b8:	7769      	strb	r1, [r5, #29]
		p->rx = conn->lll.phy_rx;
   3b8ba:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
	int nack = 0;
   3b8be:	4618      	mov	r0, r3
		p->rx = conn->lll.phy_rx;
   3b8c0:	f3c2 0302 	ubfx	r3, r2, #0, #3
   3b8c4:	77ab      	strb	r3, [r5, #30]
		if (err) {
   3b8c6:	f7fe bcb3 	b.w	3a230 <ull_conn_rx+0xc0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3b8ca:	2b23      	cmp	r3, #35	; 0x23
   3b8cc:	f43f ad30 	beq.w	3b330 <ull_conn_rx+0x11c0>
			conn->periph.ticks_to_offset =
   3b8d0:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   3b8d4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   3b8d8:	e52a      	b.n	3b330 <ull_conn_rx+0x11c0>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3b8da:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3b8dc:	07d2      	lsls	r2, r2, #31
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3b8de:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3b8e0:	d445      	bmi.n	3b96e <ull_conn_rx+0x17fe>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3b8e2:	231a      	movs	r3, #26
   3b8e4:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   3b8e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   3b8e8:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   3b8ec:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   3b8ee:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   3b8f0:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   3b8f4:	227d      	movs	r2, #125	; 0x7d
   3b8f6:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   3b8fa:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   3b8fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3b900:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   3b904:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   3b906:	f7fe bed8 	b.w	3a6ba <ull_conn_rx+0x54a>
			conn->tx_data = conn->tx_data->next;
   3b90a:	6811      	ldr	r1, [r2, #0]
   3b90c:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3b910:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3b914:	2900      	cmp	r1, #0
   3b916:	f47f a81e 	bne.w	3a956 <ull_conn_rx+0x7e6>
			tx->next = conn->tx_head->next;
   3b91a:	6811      	ldr	r1, [r2, #0]
   3b91c:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   3b91e:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   3b920:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3b924:	f7fe bd02 	b.w	3a32c <ull_conn_rx+0x1bc>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3b928:	4558      	cmp	r0, fp
   3b92a:	f47f ae3f 	bne.w	3b5ac <ull_conn_rx+0x143c>
			    eff_rx_time == conn->lll.max_rx_time &&
   3b92e:	45d4      	cmp	ip, sl
   3b930:	f47f ae3c 	bne.w	3b5ac <ull_conn_rx+0x143c>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b934:	6832      	ldr	r2, [r6, #0]
   3b936:	2501      	movs	r5, #1
   3b938:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   3b93a:	f7ff bbb6 	b.w	3b0aa <ull_conn_rx+0xf3a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3b93e:	7911      	ldrb	r1, [r2, #4]
   3b940:	f001 0103 	and.w	r1, r1, #3
   3b944:	2903      	cmp	r1, #3
   3b946:	f000 80bc 	beq.w	3bac2 <ull_conn_rx+0x1952>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3b94a:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3b94e:	f7ff b802 	b.w	3a956 <ull_conn_rx+0x7e6>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3b952:	4a3e      	ldr	r2, [pc, #248]	; (3ba4c <ull_conn_rx+0x18dc>)
   3b954:	4940      	ldr	r1, [pc, #256]	; (3ba58 <ull_conn_rx+0x18e8>)
   3b956:	483f      	ldr	r0, [pc, #252]	; (3ba54 <ull_conn_rx+0x18e4>)
   3b958:	f641 13ad 	movw	r3, #6573	; 0x19ad
   3b95c:	f00d fe8a 	bl	49674 <printk>
   3b960:	4040      	eors	r0, r0
   3b962:	f380 8811 	msr	BASEPRI, r0
   3b966:	f04f 0003 	mov.w	r0, #3
   3b96a:	df02      	svc	2
   3b96c:	e70b      	b.n	3b786 <ull_conn_rx+0x1616>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3b96e:	4a37      	ldr	r2, [pc, #220]	; (3ba4c <ull_conn_rx+0x18dc>)
   3b970:	4937      	ldr	r1, [pc, #220]	; (3ba50 <ull_conn_rx+0x18e0>)
   3b972:	4838      	ldr	r0, [pc, #224]	; (3ba54 <ull_conn_rx+0x18e4>)
   3b974:	f641 4322 	movw	r3, #7202	; 0x1c22
   3b978:	f00d fe7c 	bl	49674 <printk>
   3b97c:	4040      	eors	r0, r0
   3b97e:	f380 8811 	msr	BASEPRI, r0
   3b982:	f04f 0003 	mov.w	r0, #3
   3b986:	df02      	svc	2
   3b988:	e7ab      	b.n	3b8e2 <ull_conn_rx+0x1772>
				conn->lll.max_tx_octets = eff_tx_octets;
   3b98a:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   3b98e:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   3b992:	e622      	b.n	3b5da <ull_conn_rx+0x146a>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3b994:	2923      	cmp	r1, #35	; 0x23
   3b996:	f43f aa16 	beq.w	3adc6 <ull_conn_rx+0xc56>
			conn->periph.ticks_to_offset =
   3b99a:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
   3b99e:	f8c4 10ec 	str.w	r1, [r4, #236]	; 0xec
   3b9a2:	f7ff ba10 	b.w	3adc6 <ull_conn_rx+0xc56>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b9a6:	6833      	ldr	r3, [r6, #0]
   3b9a8:	2201      	movs	r2, #1
   3b9aa:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   3b9ac:	232a      	movs	r3, #42	; 0x2a
   3b9ae:	e6bf      	b.n	3b730 <ull_conn_rx+0x15c0>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b9b0:	6833      	ldr	r3, [r6, #0]
   3b9b2:	2201      	movs	r2, #1
   3b9b4:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   3b9b6:	2328      	movs	r3, #40	; 0x28
   3b9b8:	e6ba      	b.n	3b730 <ull_conn_rx+0x15c0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3b9ba:	7919      	ldrb	r1, [r3, #4]
   3b9bc:	f001 0103 	and.w	r1, r1, #3
   3b9c0:	2903      	cmp	r1, #3
   3b9c2:	d04d      	beq.n	3ba60 <ull_conn_rx+0x18f0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3b9c4:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3b9c8:	e490      	b.n	3b2ec <ull_conn_rx+0x117c>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   3b9ca:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   3b9ce:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   3b9d2:	429a      	cmp	r2, r3
   3b9d4:	d00e      	beq.n	3b9f4 <ull_conn_rx+0x1884>
   3b9d6:	4a1d      	ldr	r2, [pc, #116]	; (3ba4c <ull_conn_rx+0x18dc>)
   3b9d8:	4920      	ldr	r1, [pc, #128]	; (3ba5c <ull_conn_rx+0x18ec>)
   3b9da:	481e      	ldr	r0, [pc, #120]	; (3ba54 <ull_conn_rx+0x18e4>)
   3b9dc:	f241 43af 	movw	r3, #5295	; 0x14af
   3b9e0:	f00d fe48 	bl	49674 <printk>
   3b9e4:	4040      	eors	r0, r0
   3b9e6:	f380 8811 	msr	BASEPRI, r0
   3b9ea:	f04f 0003 	mov.w	r0, #3
   3b9ee:	df02      	svc	2
   3b9f0:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3b9f4:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3b9f8:	2106      	movs	r1, #6
   3b9fa:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   3b9fe:	3b01      	subs	r3, #1
   3ba00:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3ba04:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3ba08:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3ba0c:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
		conn->llcp_cu.win_size = 1U;
   3ba10:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3ba12:	00db      	lsls	r3, r3, #3
   3ba14:	430b      	orrs	r3, r1
   3ba16:	f022 020f 	bic.w	r2, r2, #15
   3ba1a:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   3ba1c:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   3ba20:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   3ba24:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3ba28:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
		conn->llcp_cu.win_offset_us = 0U;
   3ba2c:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3ba2e:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
		conn->llcp_cu.win_offset_us = 0U;
   3ba32:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   3ba36:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   3ba3a:	f8a4 211e 	strh.w	r2, [r4, #286]	; 0x11e
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3ba3e:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
	if (err) {
   3ba42:	f7fe bbf2 	b.w	3a22a <ull_conn_rx+0xba>
   3ba46:	bf00      	nop
   3ba48:	20005254 	.word	0x20005254
   3ba4c:	00052970 	.word	0x00052970
   3ba50:	000525ac 	.word	0x000525ac
   3ba54:	00052460 	.word	0x00052460
   3ba58:	00052a80 	.word	0x00052a80
   3ba5c:	00052aa4 	.word	0x00052aa4
	    ((pdu_data_tx->llctrl.opcode !=
   3ba60:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3ba62:	2903      	cmp	r1, #3
   3ba64:	d001      	beq.n	3ba6a <ull_conn_rx+0x18fa>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3ba66:	290a      	cmp	r1, #10
   3ba68:	d1ac      	bne.n	3b9c4 <ull_conn_rx+0x1854>
			tx->next = conn->tx_head->next;
   3ba6a:	6819      	ldr	r1, [r3, #0]
   3ba6c:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   3ba6e:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   3ba70:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3ba74:	e43f      	b.n	3b2f6 <ull_conn_rx+0x1186>
						conn->llcp_conn_param.state =
   3ba76:	2103      	movs	r1, #3
   3ba78:	f361 0203 	bfi	r2, r1, #0, #4
   3ba7c:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
   3ba80:	e70e      	b.n	3b8a0 <ull_conn_rx+0x1730>
				     lll->interval) ||
   3ba82:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   3ba84:	42b1      	cmp	r1, r6
   3ba86:	f47f aeff 	bne.w	3b888 <ull_conn_rx+0x1718>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   3ba8a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   3ba8e:	fb07 f101 	mul.w	r1, r7, r1
   3ba92:	f242 7610 	movw	r6, #10000	; 0x2710
   3ba96:	fb06 1202 	mla	r2, r6, r2, r1
   3ba9a:	3a01      	subs	r2, #1
   3ba9c:	fbb2 f2f1 	udiv	r2, r2, r1
				     lll->latency) ||
   3baa0:	f8b4 10c2 	ldrh.w	r1, [r4, #194]	; 0xc2
   3baa4:	b292      	uxth	r2, r2
   3baa6:	4291      	cmp	r1, r2
   3baa8:	f47f aeee 	bne.w	3b888 <ull_conn_rx+0x1718>
					conn->llcp_conn_param.state =
   3baac:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   3bab0:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   3bab4:	f042 0201 	orr.w	r2, r2, #1
   3bab8:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
					(*rx)->hdr.type =
   3babc:	2201      	movs	r2, #1
   3babe:	712a      	strb	r2, [r5, #4]
   3bac0:	e6ee      	b.n	3b8a0 <ull_conn_rx+0x1730>
	    ((pdu_data_tx->llctrl.opcode !=
   3bac2:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3bac4:	2903      	cmp	r1, #3
   3bac6:	f43f af28 	beq.w	3b91a <ull_conn_rx+0x17aa>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3baca:	290a      	cmp	r1, #10
   3bacc:	f47f af3d 	bne.w	3b94a <ull_conn_rx+0x17da>
   3bad0:	e723      	b.n	3b91a <ull_conn_rx+0x17aa>
			     lll->interval) ||
   3bad2:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
   3bad4:	4566      	cmp	r6, ip
   3bad6:	f47f ab81 	bne.w	3b1dc <ull_conn_rx+0x106c>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   3bada:	f240 46e2 	movw	r6, #1250	; 0x4e2
   3bade:	fb06 f101 	mul.w	r1, r6, r1
   3bae2:	f242 7610 	movw	r6, #10000	; 0x2710
   3bae6:	fb06 1202 	mla	r2, r6, r2, r1
   3baea:	3a01      	subs	r2, #1
   3baec:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   3baf0:	f8b4 10c2 	ldrh.w	r1, [r4, #194]	; 0xc2
   3baf4:	b292      	uxth	r2, r2
   3baf6:	4291      	cmp	r1, r2
   3baf8:	f47f ab70 	bne.w	3b1dc <ull_conn_rx+0x106c>
				conn->llcp_conn_param.state =
   3bafc:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   3bb00:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   3bb04:	f042 0201 	orr.w	r2, r2, #1
   3bb08:	f8a4 2196 	strh.w	r2, [r4, #406]	; 0x196
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bb0c:	2201      	movs	r2, #1
   3bb0e:	712a      	strb	r2, [r5, #4]
   3bb10:	f7ff bb6b 	b.w	3b1ea <ull_conn_rx+0x107a>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   3bb14:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   3bb18:	f011 0f06 	tst.w	r1, #6
   3bb1c:	f43f aa85 	beq.w	3b02a <ull_conn_rx+0xeba>
   3bb20:	f7fe bc50 	b.w	3a3c4 <ull_conn_rx+0x254>
			conn->tx_data = conn->tx_data->next;
   3bb24:	6819      	ldr	r1, [r3, #0]
   3bb26:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3bb2a:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3bb2e:	2900      	cmp	r1, #0
   3bb30:	d09b      	beq.n	3ba6a <ull_conn_rx+0x18fa>
   3bb32:	f7ff bbdb 	b.w	3b2ec <ull_conn_rx+0x117c>
   3bb36:	bf00      	nop

0003bb38 <ull_conn_llcp>:
{
   3bb38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bb3c:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   3bb3e:	f890 00f1 	ldrb.w	r0, [r0, #241]	; 0xf1
   3bb42:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3bb46:	4298      	cmp	r0, r3
{
   3bb48:	460d      	mov	r5, r1
   3bb4a:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   3bb4c:	f000 8091 	beq.w	3bc72 <ull_conn_llcp+0x13a>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3bb50:	1a1b      	subs	r3, r3, r0
   3bb52:	f003 0303 	and.w	r3, r3, #3
   3bb56:	2b02      	cmp	r3, #2
   3bb58:	d011      	beq.n	3bb7e <ull_conn_llcp+0x46>
   3bb5a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   3bb5e:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3bb60:	f1bc 0f00 	cmp.w	ip, #0
   3bb64:	db6a      	blt.n	3bc3c <ull_conn_llcp+0x104>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   3bb66:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
   3bb6a:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
   3bb6e:	1a9b      	subs	r3, r3, r2
   3bb70:	b2db      	uxtb	r3, r3
   3bb72:	2b01      	cmp	r3, #1
   3bb74:	f000 80a8 	beq.w	3bcc8 <ull_conn_llcp+0x190>
	return 0;
   3bb78:	2000      	movs	r0, #0
}
   3bb7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3bb7e:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   3bb82:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   3bb86:	429a      	cmp	r2, r3
   3bb88:	d006      	beq.n	3bb98 <ull_conn_llcp+0x60>
			     LLCP_LENGTH_STATE_RESIZE) ||
   3bb8a:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
			if ((conn->llcp_length.state ==
   3bb8e:	f003 0306 	and.w	r3, r3, #6
   3bb92:	2b04      	cmp	r3, #4
   3bb94:	f000 823d 	beq.w	3c012 <ull_conn_llcp+0x4da>
		switch (conn->llcp_type) {
   3bb98:	f894 70f2 	ldrb.w	r7, [r4, #242]	; 0xf2
   3bb9c:	1e7b      	subs	r3, r7, #1
   3bb9e:	2b05      	cmp	r3, #5
   3bba0:	f200 8221 	bhi.w	3bfe6 <ull_conn_llcp+0x4ae>
   3bba4:	e8df f013 	tbh	[pc, r3, lsl #1]
   3bba8:	01c60085 	.word	0x01c60085
   3bbac:	021f0137 	.word	0x021f0137
   3bbb0:	00ef00fa 	.word	0x00ef00fa
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3bbb4:	7903      	ldrb	r3, [r0, #4]
   3bbb6:	f043 0303 	orr.w	r3, r3, #3
   3bbba:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   3bbbc:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3bbc0:	07da      	lsls	r2, r3, #31
   3bbc2:	f140 878d 	bpl.w	3cae0 <ull_conn_llcp+0xfa8>
	    (conn->llcp_feature.features_conn &
   3bbc6:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
	if (conn->common.fex_valid &&
   3bbca:	075b      	lsls	r3, r3, #29
   3bbcc:	f140 8788 	bpl.w	3cae0 <ull_conn_llcp+0xfa8>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3bbd0:	2311      	movs	r3, #17
   3bbd2:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3bbd4:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   3bbd6:	f880 8009 	strb.w	r8, [r0, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3bbda:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   3bbdc:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
   3bbe0:	2300      	movs	r3, #0
   3bbe2:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	    conn->tx_head &&
   3bbe6:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3bbea:	2b00      	cmp	r3, #0
   3bbec:	f000 875c 	beq.w	3caa8 <ull_conn_llcp+0xf70>
	    !conn->llcp_enc.pause_tx &&
   3bbf0:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3bbf4:	0797      	lsls	r7, r2, #30
   3bbf6:	f100 8757 	bmi.w	3caa8 <ull_conn_llcp+0xf70>
	    !conn->llcp_phy.pause_tx &&
   3bbfa:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3bbfe:	07d0      	lsls	r0, r2, #31
   3bc00:	f100 8752 	bmi.w	3caa8 <ull_conn_llcp+0xf70>
		if (conn->tx_head == conn->tx_data) {
   3bc04:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3bc08:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3bc0a:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3bc0e:	f001 80b8 	beq.w	3cd82 <ull_conn_llcp+0x124a>
		} else if (!conn->tx_ctrl) {
   3bc12:	2a00      	cmp	r2, #0
   3bc14:	f001 81e8 	beq.w	3cfe8 <ull_conn_llcp+0x14b0>
	tx->next = conn->tx_ctrl_last->next;
   3bc18:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3bc1c:	681a      	ldr	r2, [r3, #0]
   3bc1e:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3bc22:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3bc26:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   3bc2a:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3bc2e:	2b00      	cmp	r3, #0
   3bc30:	f000 876e 	beq.w	3cb10 <ull_conn_llcp+0xfd8>
			conn->llcp_ack = conn->llcp_req;
   3bc34:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3bc38:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3bc3c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   3bc40:	2b00      	cmp	r3, #0
   3bc42:	d090      	beq.n	3bb66 <ull_conn_llcp+0x2e>
		switch (conn->periph.llcp_type) {
   3bc44:	2b02      	cmp	r3, #2
   3bc46:	f000 81a5 	beq.w	3bf94 <ull_conn_llcp+0x45c>
   3bc4a:	2b06      	cmp	r3, #6
   3bc4c:	f000 8089 	beq.w	3bd62 <ull_conn_llcp+0x22a>
   3bc50:	2b01      	cmp	r3, #1
   3bc52:	f000 808f 	beq.w	3bd74 <ull_conn_llcp+0x23c>
			LL_ASSERT(0);
   3bc56:	4ab3      	ldr	r2, [pc, #716]	; (3bf24 <ull_conn_llcp+0x3ec>)
   3bc58:	49b3      	ldr	r1, [pc, #716]	; (3bf28 <ull_conn_llcp+0x3f0>)
   3bc5a:	48b4      	ldr	r0, [pc, #720]	; (3bf2c <ull_conn_llcp+0x3f4>)
   3bc5c:	f240 5312 	movw	r3, #1298	; 0x512
   3bc60:	f00d fd08 	bl	49674 <printk>
   3bc64:	4040      	eors	r0, r0
   3bc66:	f380 8811 	msr	BASEPRI, r0
   3bc6a:	f04f 0003 	mov.w	r0, #3
   3bc6e:	df02      	svc	2
			break;
   3bc70:	e779      	b.n	3bb66 <ull_conn_llcp+0x2e>
   3bc72:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   3bc76:	2a00      	cmp	r2, #0
   3bc78:	4694      	mov	ip, r2
   3bc7a:	f2c0 81c4 	blt.w	3c006 <ull_conn_llcp+0x4ce>
	    !conn->llcp_enc.pause_rx) {
   3bc7e:	f894 7176 	ldrb.w	r7, [r4, #374]	; 0x176
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   3bc82:	f017 0801 	ands.w	r8, r7, #1
   3bc86:	f47f af6b 	bne.w	3bb60 <ull_conn_llcp+0x28>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   3bc8a:	f894 9119 	ldrb.w	r9, [r4, #281]	; 0x119
   3bc8e:	f894 e118 	ldrb.w	lr, [r4, #280]	; 0x118
   3bc92:	45ce      	cmp	lr, r9
   3bc94:	f000 82ed 	beq.w	3c272 <ull_conn_llcp+0x73a>
			conn->llcp_type = LLCP_CONN_UPD;
   3bc98:	2301      	movs	r3, #1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3bc9a:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
			conn->llcp_type = LLCP_CONN_UPD;
   3bc9e:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3bca2:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
			conn->llcp_ack -= 2U;
   3bca6:	3802      	subs	r0, #2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3bca8:	429a      	cmp	r2, r3
			conn->llcp_ack -= 2U;
   3bcaa:	f884 00f1 	strb.w	r0, [r4, #241]	; 0xf1
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3bcae:	f47f af6c 	bne.w	3bb8a <ull_conn_llcp+0x52>
			if (event_conn_upd_prep(conn, lazy,
   3bcb2:	462a      	mov	r2, r5
   3bcb4:	4631      	mov	r1, r6
   3bcb6:	4620      	mov	r0, r4
   3bcb8:	f7eb f86a 	bl	26d90 <event_conn_upd_prep>
   3bcbc:	2800      	cmp	r0, #0
   3bcbe:	f040 819f 	bne.w	3c000 <ull_conn_llcp+0x4c8>
				return -ECANCELED;
   3bcc2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3bcc6:	e758      	b.n	3bb7a <ull_conn_llcp+0x42>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3bcc8:	4899      	ldr	r0, [pc, #612]	; (3bf30 <ull_conn_llcp+0x3f8>)
   3bcca:	f7f7 fe07 	bl	338dc <mem_acquire>
		if (tx) {
   3bcce:	2800      	cmp	r0, #0
   3bcd0:	d03a      	beq.n	3bd48 <ull_conn_llcp+0x210>
			conn->llcp_terminate.ack--;
   3bcd2:	f894 3151 	ldrb.w	r3, [r4, #337]	; 0x151
   3bcd6:	3b01      	subs	r3, #1
   3bcd8:	f884 3151 	strb.w	r3, [r4, #337]	; 0x151
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3bcdc:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   3bcde:	2202      	movs	r2, #2
   3bce0:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3bce2:	f043 0303 	orr.w	r3, r3, #3
   3bce6:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   3bce8:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   3bcea:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			pdu_tx->llctrl.terminate_ind.error_code =
   3bcee:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
   3bcf2:	7202      	strb	r2, [r0, #8]
	if (
   3bcf4:	b1c3      	cbz	r3, 3bd28 <ull_conn_llcp+0x1f0>
	    !conn->llcp_enc.pause_tx &&
   3bcf6:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3bcfa:	0791      	lsls	r1, r2, #30
   3bcfc:	d414      	bmi.n	3bd28 <ull_conn_llcp+0x1f0>
	    !conn->llcp_phy.pause_tx &&
   3bcfe:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3bd02:	07d2      	lsls	r2, r2, #31
   3bd04:	d410      	bmi.n	3bd28 <ull_conn_llcp+0x1f0>
		if (conn->tx_head == conn->tx_data) {
   3bd06:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3bd0a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3bd0c:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3bd10:	f000 859b 	beq.w	3c84a <ull_conn_llcp+0xd12>
		} else if (!conn->tx_ctrl) {
   3bd14:	b96a      	cbnz	r2, 3bd32 <ull_conn_llcp+0x1fa>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3bd16:	791a      	ldrb	r2, [r3, #4]
   3bd18:	f002 0203 	and.w	r2, r2, #3
   3bd1c:	2a03      	cmp	r2, #3
   3bd1e:	f000 86ef 	beq.w	3cb00 <ull_conn_llcp+0xfc8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3bd22:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   3bd26:	e006      	b.n	3bd36 <ull_conn_llcp+0x1fe>
		if (!conn->tx_ctrl) {
   3bd28:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3bd2c:	2a00      	cmp	r2, #0
   3bd2e:	f000 82f4 	beq.w	3c31a <ull_conn_llcp+0x7e2>
	tx->next = conn->tx_ctrl_last->next;
   3bd32:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3bd36:	681a      	ldr	r2, [r3, #0]
   3bd38:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3bd3a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3bd3c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3bd3e:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3bd42:	2b00      	cmp	r3, #0
   3bd44:	f000 8169 	beq.w	3c01a <ull_conn_llcp+0x4e2>
		if (!conn->procedure_expire) {
   3bd48:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   3bd4c:	2800      	cmp	r0, #0
   3bd4e:	f47f af13 	bne.w	3bb78 <ull_conn_llcp+0x40>
			conn->procedure_expire = conn->supervision_reload;
   3bd52:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   3bd56:	2b01      	cmp	r3, #1
   3bd58:	f240 82db 	bls.w	3c312 <ull_conn_llcp+0x7da>
			conn->procedure_expire = conn->supervision_reload;
   3bd5c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3bd60:	e70a      	b.n	3bb78 <ull_conn_llcp+0x40>
			event_counter = lll->event_counter +
   3bd62:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   3bd64:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   3bd66:	4419      	add	r1, r3
   3bd68:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   3bd6a:	4620      	mov	r0, r4
   3bd6c:	b289      	uxth	r1, r1
   3bd6e:	f7fd fc3f 	bl	395f0 <event_phy_upd_ind_prep>
		break;
   3bd72:	e6f8      	b.n	3bb66 <ull_conn_llcp+0x2e>
			if (event_conn_upd_prep(conn, lazy,
   3bd74:	462a      	mov	r2, r5
   3bd76:	4631      	mov	r1, r6
   3bd78:	4620      	mov	r0, r4
   3bd7a:	f7eb f809 	bl	26d90 <event_conn_upd_prep>
   3bd7e:	2800      	cmp	r0, #0
   3bd80:	f47f aef1 	bne.w	3bb66 <ull_conn_llcp+0x2e>
   3bd84:	e79d      	b.n	3bcc2 <ull_conn_llcp+0x18a>
			event_counter = lll->event_counter +
   3bd86:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   3bd88:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   3bd8a:	4419      	add	r1, r3
   3bd8c:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   3bd8e:	b289      	uxth	r1, r1
   3bd90:	4620      	mov	r0, r4
   3bd92:	f7fd fc2d 	bl	395f0 <event_phy_upd_ind_prep>
		break;
   3bd96:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3bd9a:	e6e1      	b.n	3bb60 <ull_conn_llcp+0x28>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3bd9c:	4864      	ldr	r0, [pc, #400]	; (3bf30 <ull_conn_llcp+0x3f8>)
   3bd9e:	f7f7 fd9d 	bl	338dc <mem_acquire>
	if (tx) {
   3bda2:	2800      	cmp	r0, #0
   3bda4:	f000 812c 	beq.w	3c000 <ull_conn_llcp+0x4c8>
		conn->llcp_ack = conn->llcp_req;
   3bda8:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3bdac:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3bdb0:	7903      	ldrb	r3, [r0, #4]
   3bdb2:	f043 0303 	orr.w	r3, r3, #3
   3bdb6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   3bdb8:	2301      	movs	r3, #1
   3bdba:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   3bdbc:	2312      	movs	r3, #18
   3bdbe:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   3bdc0:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3bdc4:	2b00      	cmp	r3, #0
   3bdc6:	f000 82b1 	beq.w	3c32c <ull_conn_llcp+0x7f4>
	    !conn->llcp_enc.pause_tx &&
   3bdca:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3bdce:	0791      	lsls	r1, r2, #30
   3bdd0:	f100 82ac 	bmi.w	3c32c <ull_conn_llcp+0x7f4>
	    !conn->llcp_phy.pause_tx &&
   3bdd4:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3bdd8:	07d2      	lsls	r2, r2, #31
   3bdda:	f100 82a7 	bmi.w	3c32c <ull_conn_llcp+0x7f4>
		if (conn->tx_head == conn->tx_data) {
   3bdde:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3bde2:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3bde4:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3bde8:	f000 8669 	beq.w	3cabe <ull_conn_llcp+0xf86>
		} else if (!conn->tx_ctrl) {
   3bdec:	2a00      	cmp	r2, #0
   3bdee:	f000 8693 	beq.w	3cb18 <ull_conn_llcp+0xfe0>
	tx->next = conn->tx_ctrl_last->next;
   3bdf2:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3bdf6:	681a      	ldr	r2, [r3, #0]
   3bdf8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3bdfa:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3bdfc:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3bdfe:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3be02:	2b00      	cmp	r3, #0
   3be04:	f000 8413 	beq.w	3c62e <ull_conn_llcp+0xaf6>
		conn->procedure_expire = conn->procedure_reload;
   3be08:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   3be0c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3be10:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3be14:	e6a4      	b.n	3bb60 <ull_conn_llcp+0x28>
	if (conn->llcp.encryption.state) {
   3be16:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3be1a:	f013 0803 	ands.w	r8, r3, #3
   3be1e:	f000 814e 	beq.w	3c0be <ull_conn_llcp+0x586>
		if (lll->role &&
   3be22:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3be26:	2b00      	cmp	r3, #0
   3be28:	f6bf ae9d 	bge.w	3bb66 <ull_conn_llcp+0x2e>
   3be2c:	f1b8 0f01 	cmp.w	r8, #1
   3be30:	f47f af04 	bne.w	3bc3c <ull_conn_llcp+0x104>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3be34:	483e      	ldr	r0, [pc, #248]	; (3bf30 <ull_conn_llcp+0x3f8>)
   3be36:	f7f7 fd51 	bl	338dc <mem_acquire>
	if (!tx) {
   3be3a:	4607      	mov	r7, r0
   3be3c:	2800      	cmp	r0, #0
   3be3e:	f000 80df 	beq.w	3c000 <ull_conn_llcp+0x4c8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3be42:	7903      	ldrb	r3, [r0, #4]
   3be44:	f043 0303 	orr.w	r3, r3, #3
   3be48:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   3be4a:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   3be4e:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   3be50:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   3be54:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   3be56:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   3be5a:	210c      	movs	r1, #12
   3be5c:	4640      	mov	r0, r8
   3be5e:	f004 f851 	bl	3ff04 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   3be62:	4641      	mov	r1, r8
   3be64:	2208      	movs	r2, #8
   3be66:	f504 7085 	add.w	r0, r4, #266	; 0x10a
   3be6a:	f00f fd0e 	bl	4b88a <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   3be6e:	464a      	mov	r2, r9
   3be70:	f107 0110 	add.w	r1, r7, #16
   3be74:	f104 0098 	add.w	r0, r4, #152	; 0x98
   3be78:	f00f fd07 	bl	4b88a <memcpy>
	    conn->tx_head &&
   3be7c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3be80:	2b00      	cmp	r3, #0
   3be82:	f000 84d6 	beq.w	3c832 <ull_conn_llcp+0xcfa>
	    !conn->llcp_enc.pause_tx &&
   3be86:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3be8a:	0791      	lsls	r1, r2, #30
   3be8c:	f100 84d1 	bmi.w	3c832 <ull_conn_llcp+0xcfa>
	    !conn->llcp_phy.pause_tx &&
   3be90:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3be94:	07d2      	lsls	r2, r2, #31
   3be96:	f100 84cc 	bmi.w	3c832 <ull_conn_llcp+0xcfa>
		if (conn->tx_head == conn->tx_data) {
   3be9a:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3be9e:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3bea0:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3bea4:	f000 866a 	beq.w	3cb7c <ull_conn_llcp+0x1044>
		} else if (!conn->tx_ctrl) {
   3bea8:	2a00      	cmp	r2, #0
   3beaa:	f000 8711 	beq.w	3ccd0 <ull_conn_llcp+0x1198>
	tx->next = conn->tx_ctrl_last->next;
   3beae:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3beb2:	681a      	ldr	r2, [r3, #0]
   3beb4:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   3beb6:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   3beb8:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   3beba:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3bebe:	2b00      	cmp	r3, #0
   3bec0:	f000 85d1 	beq.w	3ca66 <ull_conn_llcp+0xf2e>
			rx = ll_pdu_rx_alloc();
   3bec4:	f7fb fb7e 	bl	375c4 <ll_pdu_rx_alloc>
			if (!rx) {
   3bec8:	4607      	mov	r7, r0
   3beca:	2800      	cmp	r0, #0
   3becc:	f000 8098 	beq.w	3c000 <ull_conn_llcp+0x4c8>
			rx->hdr.handle = conn->lll.handle;
   3bed0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3bed2:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3bed4:	2303      	movs	r3, #3
   3bed6:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3bed8:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3beda:	7f3b      	ldrb	r3, [r7, #28]
   3bedc:	f043 0303 	orr.w	r3, r3, #3
   3bee0:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3bee2:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   3bee4:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3bee6:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   3bee8:	f204 1179 	addw	r1, r4, #377	; 0x179
   3beec:	f107 0020 	add.w	r0, r7, #32
   3bef0:	f00f fccb 	bl	4b88a <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   3bef4:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   3bef8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   3befc:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
   3bf00:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   3bf04:	6838      	ldr	r0, [r7, #0]
   3bf06:	4639      	mov	r1, r7
   3bf08:	f7fb fb2e 	bl	37568 <ll_rx_put>
			ll_rx_sched();
   3bf0c:	f7fb fb36 	bl	3757c <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   3bf10:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3bf14:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3bf18:	2202      	movs	r2, #2
   3bf1a:	f362 0301 	bfi	r3, r2, #0, #2
   3bf1e:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3bf22:	e61d      	b.n	3bb60 <ull_conn_llcp+0x28>
   3bf24:	00052970 	.word	0x00052970
   3bf28:	000524c0 	.word	0x000524c0
   3bf2c:	00052460 	.word	0x00052460
   3bf30:	200052e8 	.word	0x200052e8
			event_counter = lll->event_counter +
   3bf34:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   3bf36:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3bf38:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   3bf3a:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
			event_counter = lll->event_counter +
   3bf3e:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   3bf40:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   3bf44:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   3bf46:	d16b      	bne.n	3c020 <ull_conn_llcp+0x4e8>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   3bf48:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
   3bf4c:	1afb      	subs	r3, r7, r3
   3bf4e:	0418      	lsls	r0, r3, #16
   3bf50:	d456      	bmi.n	3c000 <ull_conn_llcp+0x4c8>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3bf52:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3bf56:	2b00      	cmp	r3, #0
   3bf58:	f2c0 8361 	blt.w	3c61e <ull_conn_llcp+0xae6>
			conn->llcp_ack = conn->llcp_req;
   3bf5c:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3bf60:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		memcpy(&lll->data_chan_map[0],
   3bf64:	f104 0734 	add.w	r7, r4, #52	; 0x34
   3bf68:	2205      	movs	r2, #5
   3bf6a:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3bf6e:	4638      	mov	r0, r7
   3bf70:	f00f fc8b 	bl	4b88a <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   3bf74:	2105      	movs	r1, #5
   3bf76:	4638      	mov	r0, r7
   3bf78:	f7f7 fe84 	bl	33c84 <util_ones_count_get>
		lll->data_chan_count =
   3bf7c:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3bf80:	2301      	movs	r3, #1
		lll->data_chan_count =
   3bf82:	f360 0c05 	bfi	ip, r0, #0, #6
   3bf86:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3bf8a:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
   3bf8e:	fa4f fc8c 	sxtb.w	ip, ip
   3bf92:	e5e5      	b.n	3bb60 <ull_conn_llcp+0x28>
			event_counter = lll->event_counter +
   3bf94:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3bf96:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   3bf98:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
			event_counter = lll->event_counter +
   3bf9c:	440b      	add	r3, r1
   3bf9e:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   3bfa0:	f012 0601 	ands.w	r6, r2, #1
			event_counter = lll->event_counter +
   3bfa4:	b29d      	uxth	r5, r3
	if (conn->llcp.chan_map.initiate) {
   3bfa6:	f040 8119 	bne.w	3c1dc <ull_conn_llcp+0x6a4>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   3bfaa:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
   3bfae:	1aeb      	subs	r3, r5, r3
   3bfb0:	0418      	lsls	r0, r3, #16
   3bfb2:	f53f add8 	bmi.w	3bb66 <ull_conn_llcp+0x2e>
		memcpy(&lll->data_chan_map[0],
   3bfb6:	f104 0534 	add.w	r5, r4, #52	; 0x34
   3bfba:	2205      	movs	r2, #5
   3bfbc:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
			conn->periph.llcp_type = LLCP_NONE;
   3bfc0:	f884 60e5 	strb.w	r6, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   3bfc4:	4628      	mov	r0, r5
   3bfc6:	f00f fc60 	bl	4b88a <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   3bfca:	2105      	movs	r1, #5
   3bfcc:	4628      	mov	r0, r5
   3bfce:	f7f7 fe59 	bl	33c84 <util_ones_count_get>
		lll->data_chan_count =
   3bfd2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3bfd6:	2201      	movs	r2, #1
		lll->data_chan_count =
   3bfd8:	f360 0305 	bfi	r3, r0, #0, #6
   3bfdc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3bfe0:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
   3bfe4:	e5bf      	b.n	3bb66 <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   3bfe6:	4ad7      	ldr	r2, [pc, #860]	; (3c344 <ull_conn_llcp+0x80c>)
   3bfe8:	49d7      	ldr	r1, [pc, #860]	; (3c348 <ull_conn_llcp+0x810>)
   3bfea:	48d8      	ldr	r0, [pc, #864]	; (3c34c <ull_conn_llcp+0x814>)
   3bfec:	f240 43e1 	movw	r3, #1249	; 0x4e1
   3bff0:	f00d fb40 	bl	49674 <printk>
   3bff4:	4040      	eors	r0, r0
   3bff6:	f380 8811 	msr	BASEPRI, r0
   3bffa:	f04f 0003 	mov.w	r0, #3
   3bffe:	df02      	svc	2
			break;
   3c000:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3c004:	e5ac      	b.n	3bb60 <ull_conn_llcp+0x28>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   3c006:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   3c00a:	2900      	cmp	r1, #0
   3c00c:	f47f ada8 	bne.w	3bb60 <ull_conn_llcp+0x28>
   3c010:	e635      	b.n	3bc7e <ull_conn_llcp+0x146>
				event_len_prep(conn);
   3c012:	4620      	mov	r0, r4
   3c014:	f7fd f9f4 	bl	39400 <event_len_prep>
   3c018:	e5be      	b.n	3bb98 <ull_conn_llcp+0x60>
		conn->tx_data_last = tx;
   3c01a:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3c01e:	e693      	b.n	3bd48 <ull_conn_llcp+0x210>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c020:	48cb      	ldr	r0, [pc, #812]	; (3c350 <ull_conn_llcp+0x818>)
   3c022:	f7f7 fc5b 	bl	338dc <mem_acquire>
		if (tx) {
   3c026:	4680      	mov	r8, r0
   3c028:	2800      	cmp	r0, #0
   3c02a:	d0e9      	beq.n	3c000 <ull_conn_llcp+0x4c8>
						      conn->lll.latency + 6;
   3c02c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   3c02e:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
						      conn->lll.latency + 6;
   3c032:	3306      	adds	r3, #6
   3c034:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   3c036:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c03a:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   3c03c:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c040:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   3c044:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c048:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c04a:	2308      	movs	r3, #8
   3c04c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3c04e:	2301      	movs	r3, #1
   3c050:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3c052:	2205      	movs	r2, #5
   3c054:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3c058:	3008      	adds	r0, #8
   3c05a:	f00f fc16 	bl	4b88a <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   3c05e:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
   3c062:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   3c066:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3c06a:	2b00      	cmp	r3, #0
   3c06c:	f000 82e3 	beq.w	3c636 <ull_conn_llcp+0xafe>
	    !conn->llcp_enc.pause_tx &&
   3c070:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c074:	0792      	lsls	r2, r2, #30
   3c076:	f100 82de 	bmi.w	3c636 <ull_conn_llcp+0xafe>
	    !conn->llcp_phy.pause_tx &&
   3c07a:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c07e:	07d7      	lsls	r7, r2, #31
   3c080:	f100 82d9 	bmi.w	3c636 <ull_conn_llcp+0xafe>
		if (conn->tx_head == conn->tx_data) {
   3c084:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c088:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3c08a:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c08e:	f000 854c 	beq.w	3cb2a <ull_conn_llcp+0xff2>
		} else if (!conn->tx_ctrl) {
   3c092:	2a00      	cmp	r2, #0
   3c094:	f000 85c0 	beq.w	3cc18 <ull_conn_llcp+0x10e0>
	tx->next = conn->tx_ctrl_last->next;
   3c098:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c09c:	681a      	ldr	r2, [r3, #0]
   3c09e:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   3c0a2:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3c0a6:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   3c0aa:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c0ae:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3c0b2:	2b00      	cmp	r3, #0
   3c0b4:	f47f ad54 	bne.w	3bb60 <ull_conn_llcp+0x28>
		conn->tx_data_last = tx;
   3c0b8:	f8c4 81e4 	str.w	r8, [r4, #484]	; 0x1e4
   3c0bc:	e550      	b.n	3bb60 <ull_conn_llcp+0x28>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c0be:	48a4      	ldr	r0, [pc, #656]	; (3c350 <ull_conn_llcp+0x818>)
   3c0c0:	f7f7 fc0c 	bl	338dc <mem_acquire>
	if (!tx) {
   3c0c4:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3c0c8:	4681      	mov	r9, r0
   3c0ca:	2800      	cmp	r0, #0
   3c0cc:	f43f ad48 	beq.w	3bb60 <ull_conn_llcp+0x28>
	if (!lll->role) {
   3c0d0:	f1bc 0f00 	cmp.w	ip, #0
   3c0d4:	f280 8336 	bge.w	3c744 <ull_conn_llcp+0xc0c>
	else if (!lll->enc_rx) {
   3c0d8:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3c0dc:	0719      	lsls	r1, r3, #28
   3c0de:	f100 83dd 	bmi.w	3c89c <ull_conn_llcp+0xd64>
		if (conn->llcp.encryption.error_code) {
   3c0e2:	f894 8101 	ldrb.w	r8, [r4, #257]	; 0x101
   3c0e6:	f1b8 0f00 	cmp.w	r8, #0
   3c0ea:	f47f ad63 	bne.w	3bbb4 <ull_conn_llcp+0x7c>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   3c0ee:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   3c0f2:	463b      	mov	r3, r7
   3c0f4:	4642      	mov	r2, r8
   3c0f6:	f504 7181 	add.w	r1, r4, #258	; 0x102
   3c0fa:	f204 1081 	addw	r0, r4, #385	; 0x181
   3c0fe:	f006 fa45 	bl	4258c <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   3c102:	4639      	mov	r1, r7
   3c104:	2210      	movs	r2, #16
   3c106:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   3c10a:	f00f fbbe 	bl	4b88a <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   3c10e:	2208      	movs	r2, #8
   3c110:	f104 0194 	add.w	r1, r4, #148	; 0x94
   3c114:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   3c118:	f00f fbb7 	bl	4b88a <memcpy>
			lll->ccm_rx.direction = 1U;
   3c11c:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   3c120:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   3c124:	f043 0301 	orr.w	r3, r3, #1
   3c128:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   3c12c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   3c130:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   3c134:	f368 0300 	bfi	r3, r8, #0, #1
   3c138:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   3c13c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   3c140:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   3c144:	f043 0308 	orr.w	r3, r3, #8
   3c148:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c14c:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   3c150:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c154:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   3c158:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   3c15c:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   3c160:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   3c164:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   3c168:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c16c:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c170:	2301      	movs	r3, #1
   3c172:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3c176:	2305      	movs	r3, #5
   3c178:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   3c17c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3c180:	2b00      	cmp	r3, #0
   3c182:	f000 83c1 	beq.w	3c908 <ull_conn_llcp+0xdd0>
	    !conn->llcp_enc.pause_tx &&
   3c186:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c18a:	0791      	lsls	r1, r2, #30
   3c18c:	f100 83bc 	bmi.w	3c908 <ull_conn_llcp+0xdd0>
	    !conn->llcp_phy.pause_tx &&
   3c190:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c194:	07d2      	lsls	r2, r2, #31
   3c196:	f100 83b7 	bmi.w	3c908 <ull_conn_llcp+0xdd0>
		if (conn->tx_head == conn->tx_data) {
   3c19a:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c19e:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3c1a0:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c1a4:	f000 859e 	beq.w	3cce4 <ull_conn_llcp+0x11ac>
		} else if (!conn->tx_ctrl) {
   3c1a8:	2a00      	cmp	r2, #0
   3c1aa:	f000 869b 	beq.w	3cee4 <ull_conn_llcp+0x13ac>
	tx->next = conn->tx_ctrl_last->next;
   3c1ae:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c1b2:	681a      	ldr	r2, [r3, #0]
   3c1b4:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3c1b8:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3c1bc:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   3c1c0:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c1c4:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3c1c8:	2b00      	cmp	r3, #0
   3c1ca:	f000 839a 	beq.w	3c902 <ull_conn_llcp+0xdca>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3c1ce:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3c1d2:	f043 0303 	orr.w	r3, r3, #3
   3c1d6:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3c1da:	e4c1      	b.n	3bb60 <ull_conn_llcp+0x28>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c1dc:	485c      	ldr	r0, [pc, #368]	; (3c350 <ull_conn_llcp+0x818>)
   3c1de:	f7f7 fb7d 	bl	338dc <mem_acquire>
		if (tx) {
   3c1e2:	4606      	mov	r6, r0
   3c1e4:	2800      	cmp	r0, #0
   3c1e6:	f43f acbe 	beq.w	3bb66 <ull_conn_llcp+0x2e>
						      conn->lll.latency + 6;
   3c1ea:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   3c1ec:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c1f0:	7902      	ldrb	r2, [r0, #4]
						      conn->lll.latency + 6;
   3c1f2:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   3c1f4:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   3c1f8:	442b      	add	r3, r5
			conn->llcp.chan_map.initiate = 0U;
   3c1fa:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
			conn->llcp.chan_map.instant = event_counter +
   3c1fe:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c202:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
   3c206:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c208:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c20a:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c20c:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3c20e:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3c210:	2205      	movs	r2, #5
   3c212:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3c216:	3008      	adds	r0, #8
   3c218:	f00f fb37 	bl	4b88a <memcpy>
	    conn->tx_head &&
   3c21c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   3c220:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   3c224:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
   3c228:	2b00      	cmp	r3, #0
   3c22a:	f000 8210 	beq.w	3c64e <ull_conn_llcp+0xb16>
	    !conn->llcp_enc.pause_tx &&
   3c22e:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c232:	0797      	lsls	r7, r2, #30
   3c234:	f100 820b 	bmi.w	3c64e <ull_conn_llcp+0xb16>
	    !conn->llcp_phy.pause_tx &&
   3c238:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c23c:	07d5      	lsls	r5, r2, #31
   3c23e:	f100 8206 	bmi.w	3c64e <ull_conn_llcp+0xb16>
		if (conn->tx_head == conn->tx_data) {
   3c242:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c246:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3c248:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c24c:	f000 847e 	beq.w	3cb4c <ull_conn_llcp+0x1014>
		} else if (!conn->tx_ctrl) {
   3c250:	2a00      	cmp	r2, #0
   3c252:	f000 84c9 	beq.w	3cbe8 <ull_conn_llcp+0x10b0>
	tx->next = conn->tx_ctrl_last->next;
   3c256:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c25a:	681a      	ldr	r2, [r3, #0]
   3c25c:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
   3c25e:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
   3c260:	6833      	ldr	r3, [r6, #0]
	conn->tx_ctrl_last = tx;
   3c262:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c266:	2b00      	cmp	r3, #0
   3c268:	f47f ac7d 	bne.w	3bb66 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   3c26c:	f8c4 61e4 	str.w	r6, [r4, #484]	; 0x1e4
   3c270:	e479      	b.n	3bb66 <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   3c272:	f894 1131 	ldrb.w	r1, [r4, #305]	; 0x131
   3c276:	f894 e130 	ldrb.w	lr, [r4, #304]	; 0x130
   3c27a:	4571      	cmp	r1, lr
   3c27c:	d06a      	beq.n	3c354 <ull_conn_llcp+0x81c>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   3c27e:	eba1 010e 	sub.w	r1, r1, lr
   3c282:	07c9      	lsls	r1, r1, #31
   3c284:	f57f ac6c 	bpl.w	3bb60 <ull_conn_llcp+0x28>
	if (conn->common.fex_valid) {
   3c288:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3c28c:	f013 0701 	ands.w	r7, r3, #1
   3c290:	f000 81e8 	beq.w	3c664 <ull_conn_llcp+0xb2c>
		rx = ll_pdu_rx_alloc();
   3c294:	f7fb f996 	bl	375c4 <ll_pdu_rx_alloc>
		if (!rx) {
   3c298:	4607      	mov	r7, r0
   3c29a:	2800      	cmp	r0, #0
   3c29c:	f000 81b9 	beq.w	3c612 <ull_conn_llcp+0xada>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   3c2a0:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   3c2a4:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c2a8:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   3c2aa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3c2ac:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c2ae:	f043 0303 	orr.w	r3, r3, #3
   3c2b2:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   3c2b4:	2309      	movs	r3, #9
   3c2b6:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   3c2b8:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c2ba:	2303      	movs	r3, #3
   3c2bc:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   3c2be:	4641      	mov	r1, r8
   3c2c0:	2208      	movs	r2, #8
   3c2c2:	3020      	adds	r0, #32
   3c2c4:	f00f faec 	bl	4b8a0 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
   3c2c8:	e9d4 2350 	ldrd	r2, r3, [r4, #320]	; 0x140
	sys_put_le16(val >> 16, &dst[2]);
   3c2cc:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   3c2ce:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
   3c2d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
   3c2d6:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
   3c2da:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   3c2dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   3c2e0:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
   3c2e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3c2e8:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   3c2ea:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
   3c2ee:	0a12      	lsrs	r2, r2, #8
   3c2f0:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
   3c2f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   3c2f8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
   3c2fc:	4639      	mov	r1, r7
		ll_rx_put(rx->hdr.link, rx);
   3c2fe:	6808      	ldr	r0, [r1, #0]
   3c300:	f7fb f932 	bl	37568 <ll_rx_put>
		ll_rx_sched();
   3c304:	f7fb f93a 	bl	3757c <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3c308:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c30c:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
   3c310:	e41e      	b.n	3bb50 <ull_conn_llcp+0x18>
				conn->procedure_expire++;
   3c312:	3301      	adds	r3, #1
   3c314:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3c318:	e42f      	b.n	3bb7a <ull_conn_llcp+0x42>
			tx->next = conn->tx_head;
   3c31a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3c31c:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c320:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c324:	2b00      	cmp	r3, #0
   3c326:	f47f ad0f 	bne.w	3bd48 <ull_conn_llcp+0x210>
   3c32a:	e676      	b.n	3c01a <ull_conn_llcp+0x4e2>
		if (!conn->tx_ctrl) {
   3c32c:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3c330:	2a00      	cmp	r2, #0
   3c332:	f47f ad5e 	bne.w	3bdf2 <ull_conn_llcp+0x2ba>
			tx->next = conn->tx_head;
   3c336:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3c338:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c33c:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   3c340:	e55f      	b.n	3be02 <ull_conn_llcp+0x2ca>
   3c342:	bf00      	nop
   3c344:	00052970 	.word	0x00052970
   3c348:	000524c0 	.word	0x000524c0
   3c34c:	00052460 	.word	0x00052460
   3c350:	200052e8 	.word	0x200052e8
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   3c354:	f894 1149 	ldrb.w	r1, [r4, #329]	; 0x149
   3c358:	f894 e148 	ldrb.w	lr, [r4, #328]	; 0x148
   3c35c:	4571      	cmp	r1, lr
   3c35e:	d02f      	beq.n	3c3c0 <ull_conn_llcp+0x888>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   3c360:	eba1 010e 	sub.w	r1, r1, lr
   3c364:	07c8      	lsls	r0, r1, #31
   3c366:	f57f abfb 	bpl.w	3bb60 <ull_conn_llcp+0x28>
	if (conn->llcp_version.tx == 0U) {
   3c36a:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3c36e:	07d9      	lsls	r1, r3, #31
   3c370:	f140 8328 	bpl.w	3c9c4 <ull_conn_llcp+0xe8c>
	} else if (conn->llcp_version.rx) {
   3c374:	0798      	lsls	r0, r3, #30
   3c376:	f140 8317 	bpl.w	3c9a8 <ull_conn_llcp+0xe70>
		rx = ll_pdu_rx_alloc();
   3c37a:	f7fb f923 	bl	375c4 <ll_pdu_rx_alloc>
		if (!rx) {
   3c37e:	4601      	mov	r1, r0
   3c380:	2800      	cmp	r0, #0
   3c382:	f000 8146 	beq.w	3c612 <ull_conn_llcp+0xada>
		conn->llcp_version.ack = conn->llcp_version.req;
   3c386:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
   3c38a:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
		rx->hdr.handle = conn->lll.handle;
   3c38e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3c390:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c392:	2303      	movs	r3, #3
   3c394:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c396:	7f03      	ldrb	r3, [r0, #28]
   3c398:	f043 0303 	orr.w	r3, r3, #3
   3c39c:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   3c39e:	2306      	movs	r3, #6
   3c3a0:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3c3a2:	230c      	movs	r3, #12
   3c3a4:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   3c3a6:	f894 314b 	ldrb.w	r3, [r4, #331]	; 0x14b
   3c3aa:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   3c3ae:	f8b4 314c 	ldrh.w	r3, [r4, #332]	; 0x14c
   3c3b2:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   3c3b6:	f8b4 314e 	ldrh.w	r3, [r4, #334]	; 0x14e
   3c3ba:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
   3c3be:	e79e      	b.n	3c2fe <ull_conn_llcp+0x7c6>
		} else if (conn->llcp_conn_param.ack !=
   3c3c0:	f894 e195 	ldrb.w	lr, [r4, #405]	; 0x195
   3c3c4:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   3c3c8:	458e      	cmp	lr, r1
   3c3ca:	f000 8223 	beq.w	3c814 <ull_conn_llcp+0xcdc>
	return conn_upd_curr && (conn_upd_curr != conn);
   3c3ce:	f8df 8368 	ldr.w	r8, [pc, #872]	; 3c738 <ull_conn_llcp+0xc00>
			event_counter = lll->event_counter +
   3c3d2:	f8b4 e032 	ldrh.w	lr, [r4, #50]	; 0x32
	return conn_upd_curr && (conn_upd_curr != conn);
   3c3d6:	f8d8 1000 	ldr.w	r1, [r8]
					lll->latency_prepare + lazy;
   3c3da:	f8b4 a02e 	ldrh.w	sl, [r4, #46]	; 0x2e
	return conn_upd_curr && (conn_upd_curr != conn);
   3c3de:	2900      	cmp	r1, #0
   3c3e0:	f000 8345 	beq.w	3ca6e <ull_conn_llcp+0xf36>
   3c3e4:	428c      	cmp	r4, r1
   3c3e6:	f47f abbb 	bne.w	3bb60 <ull_conn_llcp+0x28>
	switch (conn->llcp_conn_param.state) {
   3c3ea:	f894 1196 	ldrb.w	r1, [r4, #406]	; 0x196
   3c3ee:	f001 010f 	and.w	r1, r1, #15
   3c3f2:	2908      	cmp	r1, #8
   3c3f4:	f200 8625 	bhi.w	3d042 <ull_conn_llcp+0x150a>
   3c3f8:	f20f 0b04 	addw	fp, pc, #4
   3c3fc:	f85b f021 	ldr.w	pc, [fp, r1, lsl #2]
   3c400:	0003c56b 	.word	0x0003c56b
   3c404:	0003c4e5 	.word	0x0003c4e5
   3c408:	0003c495 	.word	0x0003c495
   3c40c:	0003bb51 	.word	0x0003bb51
   3c410:	0003bb51 	.word	0x0003bb51
   3c414:	0003bb51 	.word	0x0003bb51
   3c418:	0003bb51 	.word	0x0003bb51
   3c41c:	0003bb51 	.word	0x0003bb51
   3c420:	0003c425 	.word	0x0003c425
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
   3c424:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3c428:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
			event_counter = lll->event_counter +
   3c42c:	eb0e 030a 	add.w	r3, lr, sl
   3c430:	4433      	add	r3, r6
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
   3c432:	f820 3c02 	strh.w	r3, [r0, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3c436:	2304      	movs	r3, #4
   3c438:	f363 0203 	bfi	r2, r3, #0, #4
	    conn->tx_head &&
   3c43c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3c440:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   3c444:	f1a0 0113 	sub.w	r1, r0, #19
	if (
   3c448:	2b00      	cmp	r3, #0
   3c44a:	f000 838d 	beq.w	3cb68 <ull_conn_llcp+0x1030>
	    conn->tx_head &&
   3c44e:	07bf      	lsls	r7, r7, #30
   3c450:	f100 838a 	bmi.w	3cb68 <ull_conn_llcp+0x1030>
	    !conn->llcp_phy.pause_tx &&
   3c454:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c458:	07d2      	lsls	r2, r2, #31
   3c45a:	f100 8385 	bmi.w	3cb68 <ull_conn_llcp+0x1030>
		if (conn->tx_head == conn->tx_data) {
   3c45e:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c462:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3c464:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c468:	f000 8575 	beq.w	3cf56 <ull_conn_llcp+0x141e>
		} else if (!conn->tx_ctrl) {
   3c46c:	2a00      	cmp	r2, #0
   3c46e:	f000 8595 	beq.w	3cf9c <ull_conn_llcp+0x1464>
	tx->next = conn->tx_ctrl_last->next;
   3c472:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c476:	681a      	ldr	r2, [r3, #0]
   3c478:	f840 2c13 	str.w	r2, [r0, #-19]
	conn->tx_ctrl_last->next = tx;
   3c47c:	6019      	str	r1, [r3, #0]
	if (!tx->next) {
   3c47e:	f850 3c13 	ldr.w	r3, [r0, #-19]
	conn->tx_ctrl_last = tx;
   3c482:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c486:	2b00      	cmp	r3, #0
   3c488:	f47f ab6a 	bne.w	3bb60 <ull_conn_llcp+0x28>
		conn->tx_data_last = tx;
   3c48c:	f8c4 11e4 	str.w	r1, [r4, #484]	; 0x1e4
   3c490:	f7ff bb66 	b.w	3bb60 <ull_conn_llcp+0x28>
	if (conn->llcp_enc.pause_tx) {
   3c494:	07bb      	lsls	r3, r7, #30
   3c496:	f53f ab63 	bmi.w	3bb60 <ull_conn_llcp+0x28>
	rx = ll_pdu_rx_alloc();
   3c49a:	f7fb f893 	bl	375c4 <ll_pdu_rx_alloc>
	if (!rx) {
   3c49e:	4601      	mov	r1, r0
   3c4a0:	2800      	cmp	r0, #0
   3c4a2:	f000 80b6 	beq.w	3c612 <ull_conn_llcp+0xada>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3c4a6:	f894 0196 	ldrb.w	r0, [r4, #406]	; 0x196
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c4aa:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3c4ac:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c4ae:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3c4b2:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   3c4b6:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3c4b8:	f884 0196 	strb.w	r0, [r4, #406]	; 0x196
	rx->hdr.handle = conn->lll.handle;
   3c4bc:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c4be:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c4c0:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   3c4c2:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3c4c4:	f8b4 3198 	ldrh.w	r3, [r4, #408]	; 0x198
   3c4c8:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   3c4ca:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
   3c4ce:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   3c4d0:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
   3c4d4:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   3c4d6:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
   3c4da:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3c4dc:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   3c4de:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3c4e0:	77cb      	strb	r3, [r1, #31]
	ll_rx_put(rx->hdr.link, rx);
   3c4e2:	e70c      	b.n	3c2fe <ull_conn_llcp+0x7c6>
	if (conn->llcp_conn_param.status) {
   3c4e4:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   3c4e8:	2b00      	cmp	r3, #0
   3c4ea:	f040 840f 	bne.w	3cd0c <ull_conn_llcp+0x11d4>
	if (!conn->lll.role) {
   3c4ee:	2a00      	cmp	r2, #0
   3c4f0:	f2c0 8467 	blt.w	3cdc2 <ull_conn_llcp+0x128a>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3c4f4:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
		conn->llcp_cu.win_offset_us = 0U;
   3c4f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3c4fc:	2106      	movs	r1, #6
   3c4fe:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   3c502:	f894 11a0 	ldrb.w	r1, [r4, #416]	; 0x1a0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3c506:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
		conn->llcp_cu.win_size = 1U;
   3c50a:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   3c50c:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
		conn->llcp_cu.win_size = 1U;
   3c510:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128
		if (preferred_periodicity) {
   3c514:	2900      	cmp	r1, #0
   3c516:	f000 84b9 	beq.w	3ce8c <ull_conn_llcp+0x1354>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   3c51a:	fbb2 f3f1 	udiv	r3, r2, r1
   3c51e:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   3c522:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   3c526:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   3c528:	4299      	cmp	r1, r3
   3c52a:	bf98      	it	ls
   3c52c:	461a      	movls	r2, r3
   3c52e:	f8a4 211c 	strh.w	r2, [r4, #284]	; 0x11c
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3c532:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3c536:	f894 211a 	ldrb.w	r2, [r4, #282]	; 0x11a
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   3c53a:	f8b4 119c 	ldrh.w	r1, [r4, #412]	; 0x19c
   3c53e:	f8a4 111e 	strh.w	r1, [r4, #286]	; 0x11e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3c542:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3c546:	00db      	lsls	r3, r3, #3
   3c548:	f022 020f 	bic.w	r2, r2, #15
   3c54c:	f043 0302 	orr.w	r3, r3, #2
   3c550:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   3c552:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3c556:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   3c55a:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3c55e:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
		conn->llcp_cu.ack--;
   3c562:	f884 9119 	strb.w	r9, [r4, #281]	; 0x119
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c566:	f7ff bafe 	b.w	3bb66 <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c56a:	4874      	ldr	r0, [pc, #464]	; (3c73c <ull_conn_llcp+0xc04>)
   3c56c:	f7f7 f9b6 	bl	338dc <mem_acquire>
	if (!tx) {
   3c570:	4602      	mov	r2, r0
   3c572:	2800      	cmp	r0, #0
   3c574:	d04d      	beq.n	3c612 <ull_conn_llcp+0xada>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c576:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   3c578:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c57c:	f043 0303 	orr.w	r3, r3, #3
   3c580:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   3c582:	2318      	movs	r3, #24
   3c584:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3c586:	230f      	movs	r3, #15
   3c588:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3c58a:	f8b4 3198 	ldrh.w	r3, [r4, #408]	; 0x198
   3c58e:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   3c590:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
   3c594:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   3c596:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
   3c59a:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   3c59c:	f8b4 319e 	ldrh.w	r3, [r4, #414]	; 0x19e
   3c5a0:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
   3c5a2:	2300      	movs	r3, #0
   3c5a4:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   3c5a6:	74c3      	strb	r3, [r0, #19]
   3c5a8:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   3c5aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3c5ae:	7543      	strb	r3, [r0, #21]
   3c5b0:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   3c5b2:	75c3      	strb	r3, [r0, #23]
   3c5b4:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   3c5b6:	7643      	strb	r3, [r0, #25]
   3c5b8:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   3c5ba:	76c3      	strb	r3, [r0, #27]
   3c5bc:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   3c5be:	7743      	strb	r3, [r0, #29]
   3c5c0:	7783      	strb	r3, [r0, #30]
	conn->procedure_expire = conn->procedure_reload;
   3c5c2:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   3c5c6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   3c5ca:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   3c5ce:	f8c4 51b4 	str.w	r5, [r4, #436]	; 0x1b4
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   3c5d2:	2107      	movs	r1, #7
   3c5d4:	f361 0303 	bfi	r3, r1, #0, #4
   3c5d8:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   3c5dc:	68a3      	ldr	r3, [r4, #8]
   3c5de:	2b00      	cmp	r3, #0
   3c5e0:	da0a      	bge.n	3c5f8 <ull_conn_llcp+0xac0>
			uint32_t ticks_prepare_to_start =
   3c5e2:	68e7      	ldr	r7, [r4, #12]
   3c5e4:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   3c5e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
   3c5ea:	4287      	cmp	r7, r0
   3c5ec:	bf2c      	ite	cs
   3c5ee:	19e9      	addcs	r1, r5, r7
   3c5f0:	1829      	addcc	r1, r5, r0
   3c5f2:	1acb      	subs	r3, r1, r3
   3c5f4:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
		win_offs = &p->offset0;
   3c5f8:	3213      	adds	r2, #19
		s_mfy_sched_offset.param = (void *)conn;
   3c5fa:	4b51      	ldr	r3, [pc, #324]	; (3c740 <ull_conn_llcp+0xc08>)
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
   3c5fc:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3c600:	2201      	movs	r2, #1
   3c602:	2102      	movs	r1, #2
   3c604:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
   3c606:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3c608:	f7f7 fa42 	bl	33a90 <mayfly_enqueue>
		LL_ASSERT(!retval);
   3c60c:	2800      	cmp	r0, #0
   3c60e:	f040 8378 	bne.w	3cd02 <ull_conn_llcp+0x11ca>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3c612:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c616:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
		return;
   3c61a:	f7ff ba99 	b.w	3bb50 <ull_conn_llcp+0x18>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c61e:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   3c622:	2b00      	cmp	r3, #0
   3c624:	f43f ac9a 	beq.w	3bf5c <ull_conn_llcp+0x424>
			conn->periph.llcp_type = LLCP_NONE;
   3c628:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
   3c62c:	e49a      	b.n	3bf64 <ull_conn_llcp+0x42c>
		conn->tx_data_last = tx;
   3c62e:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3c632:	f7ff bbe9 	b.w	3be08 <ull_conn_llcp+0x2d0>
		if (!conn->tx_ctrl) {
   3c636:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3c63a:	2a00      	cmp	r2, #0
   3c63c:	f47f ad2c 	bne.w	3c098 <ull_conn_llcp+0x560>
			tx->next = conn->tx_head;
   3c640:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   3c644:	e9c4 8875 	strd	r8, r8, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c648:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
   3c64c:	e52f      	b.n	3c0ae <ull_conn_llcp+0x576>
		if (!conn->tx_ctrl) {
   3c64e:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3c652:	2a00      	cmp	r2, #0
   3c654:	f47f adff 	bne.w	3c256 <ull_conn_llcp+0x71e>
			tx->next = conn->tx_head;
   3c658:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   3c65a:	e9c4 6675 	strd	r6, r6, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c65e:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
   3c662:	e600      	b.n	3c266 <ull_conn_llcp+0x72e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c664:	4835      	ldr	r0, [pc, #212]	; (3c73c <ull_conn_llcp+0xc04>)
   3c666:	f7f7 f939 	bl	338dc <mem_acquire>
	if (tx) {
   3c66a:	4680      	mov	r8, r0
   3c66c:	2800      	cmp	r0, #0
   3c66e:	d0d0      	beq.n	3c612 <ull_conn_llcp+0xada>
		conn->llcp_feature.ack--;
   3c670:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
   3c674:	3b01      	subs	r3, #1
   3c676:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   3c67a:	2309      	movs	r3, #9
   3c67c:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   3c67e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3c682:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c684:	7903      	ldrb	r3, [r0, #4]
   3c686:	f043 0303 	orr.w	r3, r3, #3
   3c68a:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   3c68c:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   3c690:	bfac      	ite	ge
   3c692:	2308      	movge	r3, #8
   3c694:	230e      	movlt	r3, #14
   3c696:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   3c698:	4639      	mov	r1, r7
   3c69a:	4410      	add	r0, r2
   3c69c:	f00f f900 	bl	4b8a0 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
   3c6a0:	e9d4 234e 	ldrd	r2, r3, [r4, #312]	; 0x138
	sys_put_le16(val >> 16, &dst[2]);
   3c6a4:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   3c6a6:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
   3c6aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
   3c6ae:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
   3c6b2:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   3c6b4:	f888 300c 	strb.w	r3, [r8, #12]
   3c6b8:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
   3c6bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   3c6c0:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
   3c6c4:	0a09      	lsrs	r1, r1, #8
   3c6c6:	0a12      	lsrs	r2, r2, #8
   3c6c8:	f888 100b 	strb.w	r1, [r8, #11]
   3c6cc:	f888 300d 	strb.w	r3, [r8, #13]
   3c6d0:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
   3c6d4:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3c6d8:	2b00      	cmp	r3, #0
   3c6da:	f000 80d3 	beq.w	3c884 <ull_conn_llcp+0xd4c>
	    !conn->llcp_enc.pause_tx &&
   3c6de:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c6e2:	0792      	lsls	r2, r2, #30
   3c6e4:	f100 80ce 	bmi.w	3c884 <ull_conn_llcp+0xd4c>
	    !conn->llcp_phy.pause_tx &&
   3c6e8:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c6ec:	07d7      	lsls	r7, r2, #31
   3c6ee:	f100 80c9 	bmi.w	3c884 <ull_conn_llcp+0xd4c>
		if (conn->tx_head == conn->tx_data) {
   3c6f2:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c6f6:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3c6f8:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c6fc:	f000 825d 	beq.w	3cbba <ull_conn_llcp+0x1082>
		} else if (!conn->tx_ctrl) {
   3c700:	2a00      	cmp	r2, #0
   3c702:	f000 83d9 	beq.w	3ceb8 <ull_conn_llcp+0x1380>
	tx->next = conn->tx_ctrl_last->next;
   3c706:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c70a:	681a      	ldr	r2, [r3, #0]
   3c70c:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   3c710:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3c714:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   3c718:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c71c:	2b00      	cmp	r3, #0
   3c71e:	f000 81dc 	beq.w	3cada <ull_conn_llcp+0xfa2>
		conn->procedure_expire = conn->procedure_reload;
   3c722:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3c726:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c72a:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
		conn->procedure_expire = conn->procedure_reload;
   3c72e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   3c732:	f7ff ba0d 	b.w	3bb50 <ull_conn_llcp+0x18>
   3c736:	bf00      	nop
   3c738:	20005254 	.word	0x20005254
   3c73c:	200052e8 	.word	0x200052e8
   3c740:	20000ad0 	.word	0x20000ad0
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   3c744:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   3c748:	463b      	mov	r3, r7
   3c74a:	4642      	mov	r2, r8
   3c74c:	f504 7181 	add.w	r1, r4, #258	; 0x102
   3c750:	f204 1081 	addw	r0, r4, #385	; 0x181
   3c754:	f005 ff1a 	bl	4258c <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   3c758:	4639      	mov	r1, r7
   3c75a:	2210      	movs	r2, #16
   3c75c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   3c760:	f00f f893 	bl	4b88a <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   3c764:	2208      	movs	r2, #8
   3c766:	f104 0194 	add.w	r1, r4, #148	; 0x94
   3c76a:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   3c76e:	f00f f88c 	bl	4b88a <memcpy>
		lll->enc_rx = 1;
   3c772:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   3c776:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
   3c77a:	f023 0318 	bic.w	r3, r3, #24
   3c77e:	f043 0318 	orr.w	r3, r3, #24
   3c782:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
   3c786:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   3c78a:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_rx.direction = 0;
   3c78e:	f368 0300 	bfi	r3, r8, #0, #1
   3c792:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   3c796:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   3c79a:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->ccm_tx.direction = 1;
   3c79e:	f043 0301 	orr.w	r3, r3, #1
   3c7a2:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3c7a6:	2301      	movs	r3, #1
		lll->ccm_tx.counter = 0;
   3c7a8:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   3c7ac:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   3c7b0:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   3c7b4:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   3c7b8:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   3c7bc:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c7c0:	f899 2004 	ldrb.w	r2, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3c7c4:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   3c7c8:	2306      	movs	r3, #6
   3c7ca:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   3c7ce:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c7d2:	f042 0203 	orr.w	r2, r2, #3
   3c7d6:	f889 2004 	strb.w	r2, [r9, #4]
	if (
   3c7da:	2b00      	cmp	r3, #0
   3c7dc:	d046      	beq.n	3c86c <ull_conn_llcp+0xd34>
	    !conn->llcp_enc.pause_tx &&
   3c7de:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c7e2:	0797      	lsls	r7, r2, #30
   3c7e4:	d442      	bmi.n	3c86c <ull_conn_llcp+0xd34>
	    !conn->llcp_phy.pause_tx &&
   3c7e6:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c7ea:	07d0      	lsls	r0, r2, #31
   3c7ec:	d43e      	bmi.n	3c86c <ull_conn_llcp+0xd34>
		if (conn->tx_head == conn->tx_data) {
   3c7ee:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c7f2:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3c7f4:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c7f8:	f000 81ce 	beq.w	3cb98 <ull_conn_llcp+0x1060>
		} else if (!conn->tx_ctrl) {
   3c7fc:	2a00      	cmp	r2, #0
   3c7fe:	f47f acd6 	bne.w	3c1ae <ull_conn_llcp+0x676>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3c802:	791a      	ldrb	r2, [r3, #4]
   3c804:	f002 0203 	and.w	r2, r2, #3
   3c808:	2a03      	cmp	r2, #3
   3c80a:	f000 8394 	beq.w	3cf36 <ull_conn_llcp+0x13fe>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3c80e:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3c812:	e4cc      	b.n	3c1ae <ull_conn_llcp+0x676>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3c814:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   3c818:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   3c81c:	4299      	cmp	r1, r3
   3c81e:	d07d      	beq.n	3c91c <ull_conn_llcp+0xde4>
			event_len_prep(conn);
   3c820:	4620      	mov	r0, r4
   3c822:	f7fc fded 	bl	39400 <event_len_prep>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3c826:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c82a:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
   3c82e:	f7ff b98f 	b.w	3bb50 <ull_conn_llcp+0x18>
		if (!conn->tx_ctrl) {
   3c832:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3c836:	2a00      	cmp	r2, #0
   3c838:	f47f ab39 	bne.w	3beae <ull_conn_llcp+0x376>
			tx->next = conn->tx_head;
   3c83c:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   3c83e:	e9c4 7775 	strd	r7, r7, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c842:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
   3c846:	f7ff bb3a 	b.w	3bebe <ull_conn_llcp+0x386>
			conn->tx_data = conn->tx_data->next;
   3c84a:	6819      	ldr	r1, [r3, #0]
   3c84c:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3c850:	2a00      	cmp	r2, #0
   3c852:	f47f aa6e 	bne.w	3bd32 <ull_conn_llcp+0x1fa>
			tx->next = conn->tx_head->next;
   3c856:	681a      	ldr	r2, [r3, #0]
   3c858:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3c85a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3c85c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3c85e:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
	if (!tx->next) {
   3c862:	2b00      	cmp	r3, #0
   3c864:	f47f aa70 	bne.w	3bd48 <ull_conn_llcp+0x210>
   3c868:	f7ff bbd7 	b.w	3c01a <ull_conn_llcp+0x4e2>
		if (!conn->tx_ctrl) {
   3c86c:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3c870:	2a00      	cmp	r2, #0
   3c872:	f47f ac9c 	bne.w	3c1ae <ull_conn_llcp+0x676>
			tx->next = conn->tx_head;
   3c876:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3c87a:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c87e:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
   3c882:	e49f      	b.n	3c1c4 <ull_conn_llcp+0x68c>
		if (!conn->tx_ctrl) {
   3c884:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3c888:	2a00      	cmp	r2, #0
   3c88a:	f47f af3c 	bne.w	3c706 <ull_conn_llcp+0xbce>
			tx->next = conn->tx_head;
   3c88e:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   3c892:	e9c4 8875 	strd	r8, r8, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c896:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
   3c89a:	e73f      	b.n	3c71c <ull_conn_llcp+0xbe4>
	conn->lll.enc_tx = 1;
   3c89c:	f043 0310 	orr.w	r3, r3, #16
   3c8a0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3c8a4:	2301      	movs	r3, #1
   3c8a6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c8a8:	7903      	ldrb	r3, [r0, #4]
   3c8aa:	f043 0303 	orr.w	r3, r3, #3
   3c8ae:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   3c8b0:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   3c8b4:	2206      	movs	r2, #6
   3c8b6:	71c2      	strb	r2, [r0, #7]
	if (
   3c8b8:	2b00      	cmp	r3, #0
   3c8ba:	f000 80ca 	beq.w	3ca52 <ull_conn_llcp+0xf1a>
	    !conn->llcp_enc.pause_tx &&
   3c8be:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c8c2:	0797      	lsls	r7, r2, #30
   3c8c4:	f100 80c5 	bmi.w	3ca52 <ull_conn_llcp+0xf1a>
	    !conn->llcp_phy.pause_tx &&
   3c8c8:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c8cc:	07d0      	lsls	r0, r2, #31
   3c8ce:	f100 80c0 	bmi.w	3ca52 <ull_conn_llcp+0xf1a>
		if (conn->tx_head == conn->tx_data) {
   3c8d2:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c8d6:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3c8d8:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c8dc:	f000 818e 	beq.w	3cbfc <ull_conn_llcp+0x10c4>
		} else if (!conn->tx_ctrl) {
   3c8e0:	2a00      	cmp	r2, #0
   3c8e2:	f000 8265 	beq.w	3cdb0 <ull_conn_llcp+0x1278>
	tx->next = conn->tx_ctrl_last->next;
   3c8e6:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c8ea:	681a      	ldr	r2, [r3, #0]
   3c8ec:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3c8f0:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3c8f4:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   3c8f8:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c8fc:	2b00      	cmp	r3, #0
   3c8fe:	f47f ac66 	bne.w	3c1ce <ull_conn_llcp+0x696>
		conn->tx_data_last = tx;
   3c902:	f8c4 91e4 	str.w	r9, [r4, #484]	; 0x1e4
   3c906:	e462      	b.n	3c1ce <ull_conn_llcp+0x696>
		if (!conn->tx_ctrl) {
   3c908:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3c90c:	2a00      	cmp	r2, #0
   3c90e:	f47f ac4e 	bne.w	3c1ae <ull_conn_llcp+0x676>
			tx->next = conn->tx_head;
   3c912:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3c916:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3c91a:	e44f      	b.n	3c1bc <ull_conn_llcp+0x684>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3c91c:	f894 31cc 	ldrb.w	r3, [r4, #460]	; 0x1cc
   3c920:	f894 11cd 	ldrb.w	r1, [r4, #461]	; 0x1cd
   3c924:	4299      	cmp	r1, r3
   3c926:	f43f a91b 	beq.w	3bb60 <ull_conn_llcp+0x28>
	switch (conn->llcp_phy.state) {
   3c92a:	f894 11ce 	ldrb.w	r1, [r4, #462]	; 0x1ce
   3c92e:	f001 0703 	and.w	r7, r1, #3
   3c932:	2f03      	cmp	r7, #3
   3c934:	f000 8182 	beq.w	3cc3c <ull_conn_llcp+0x1104>
   3c938:	2f00      	cmp	r7, #0
   3c93a:	f47f a910 	bne.w	3bb5e <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c93e:	48bb      	ldr	r0, [pc, #748]	; (3cc2c <ull_conn_llcp+0x10f4>)
   3c940:	f7f6 ffcc 	bl	338dc <mem_acquire>
		if (!tx) {
   3c944:	4601      	mov	r1, r0
   3c946:	2800      	cmp	r0, #0
   3c948:	f43f ae63 	beq.w	3c612 <ull_conn_llcp+0xada>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3c94c:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
		conn->lll.phy_flags = conn->llcp_phy.flags;
   3c950:	f894 01cf 	ldrb.w	r0, [r4, #463]	; 0x1cf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3c954:	2201      	movs	r2, #1
   3c956:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3c95a:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3c95e:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3c962:	f3c3 0782 	ubfx	r7, r3, #2, #3
   3c966:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   3c96a:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   3c96e:	f3c0 0040 	ubfx	r0, r0, #1, #1
   3c972:	f360 07c3 	bfi	r7, r0, #3, #1
   3c976:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   3c97a:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c97e:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   3c980:	f367 02c5 	bfi	r2, r7, #3, #3
   3c984:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3c988:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   3c98c:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c98e:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   3c992:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   3c994:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c996:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   3c998:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   3c99a:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   3c99c:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   3c99e:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   3c9a0:	4620      	mov	r0, r4
   3c9a2:	f7fc f9b5 	bl	38d10 <ctrl_tx_pause_enqueue>
   3c9a6:	e6bc      	b.n	3c722 <ull_conn_llcp+0xbea>
		LL_ASSERT(0);
   3c9a8:	4aa1      	ldr	r2, [pc, #644]	; (3cc30 <ull_conn_llcp+0x10f8>)
   3c9aa:	49a2      	ldr	r1, [pc, #648]	; (3cc34 <ull_conn_llcp+0x10fc>)
   3c9ac:	f640 63a1 	movw	r3, #3745	; 0xea1
		LL_ASSERT(0);
   3c9b0:	48a1      	ldr	r0, [pc, #644]	; (3cc38 <ull_conn_llcp+0x1100>)
   3c9b2:	f00c fe5f 	bl	49674 <printk>
   3c9b6:	4040      	eors	r0, r0
   3c9b8:	f380 8811 	msr	BASEPRI, r0
   3c9bc:	f04f 0003 	mov.w	r0, #3
   3c9c0:	df02      	svc	2
		break;
   3c9c2:	e626      	b.n	3c612 <ull_conn_llcp+0xada>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c9c4:	4899      	ldr	r0, [pc, #612]	; (3cc2c <ull_conn_llcp+0x10f4>)
   3c9c6:	f7f6 ff89 	bl	338dc <mem_acquire>
		if (tx) {
   3c9ca:	2800      	cmp	r0, #0
   3c9cc:	f43f ae21 	beq.w	3c612 <ull_conn_llcp+0xada>
			conn->llcp_version.ack--;
   3c9d0:	f894 3149 	ldrb.w	r3, [r4, #329]	; 0x149
   3c9d4:	3b01      	subs	r3, #1
   3c9d6:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
			conn->llcp_version.tx = 1U;
   3c9da:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3c9de:	f043 0301 	orr.w	r3, r3, #1
   3c9e2:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c9e6:	7903      	ldrb	r3, [r0, #4]
   3c9e8:	f043 0303 	orr.w	r3, r3, #3
   3c9ec:	7103      	strb	r3, [r0, #4]
			pdu->len =
   3c9ee:	2306      	movs	r3, #6
   3c9f0:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   3c9f2:	230c      	movs	r3, #12
   3c9f4:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   3c9f6:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   3c9f8:	f06f 030e 	mvn.w	r3, #14
   3c9fc:	7243      	strb	r3, [r0, #9]
   3c9fe:	2305      	movs	r3, #5
   3ca00:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   3ca02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3ca06:	72c3      	strb	r3, [r0, #11]
   3ca08:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   3ca0a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3ca0e:	2b00      	cmp	r3, #0
   3ca10:	d06e      	beq.n	3caf0 <ull_conn_llcp+0xfb8>
	    !conn->llcp_enc.pause_tx &&
   3ca12:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3ca16:	0792      	lsls	r2, r2, #30
   3ca18:	d46a      	bmi.n	3caf0 <ull_conn_llcp+0xfb8>
	    !conn->llcp_phy.pause_tx &&
   3ca1a:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3ca1e:	07d7      	lsls	r7, r2, #31
   3ca20:	d466      	bmi.n	3caf0 <ull_conn_llcp+0xfb8>
		if (conn->tx_head == conn->tx_data) {
   3ca22:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3ca26:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3ca28:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3ca2c:	f000 824c 	beq.w	3cec8 <ull_conn_llcp+0x1390>
		} else if (!conn->tx_ctrl) {
   3ca30:	2a00      	cmp	r2, #0
   3ca32:	f000 8288 	beq.w	3cf46 <ull_conn_llcp+0x140e>
	tx->next = conn->tx_ctrl_last->next;
   3ca36:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3ca3a:	681a      	ldr	r2, [r3, #0]
   3ca3c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3ca3e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3ca40:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3ca42:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3ca46:	2b00      	cmp	r3, #0
   3ca48:	f47f ae6b 	bne.w	3c722 <ull_conn_llcp+0xbea>
		conn->tx_data_last = tx;
   3ca4c:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
			conn->procedure_expire = conn->procedure_reload;
   3ca50:	e667      	b.n	3c722 <ull_conn_llcp+0xbea>
		if (!conn->tx_ctrl) {
   3ca52:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3ca56:	2a00      	cmp	r2, #0
   3ca58:	f47f af45 	bne.w	3c8e6 <ull_conn_llcp+0xdae>
			tx->next = conn->tx_head;
   3ca5c:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3ca60:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ca64:	e746      	b.n	3c8f4 <ull_conn_llcp+0xdbc>
		conn->tx_data_last = tx;
   3ca66:	f8c4 71e4 	str.w	r7, [r4, #484]	; 0x1e4
   3ca6a:	f7ff ba2b 	b.w	3bec4 <ull_conn_llcp+0x38c>
	switch (conn->llcp_conn_param.state) {
   3ca6e:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3ca72:	f003 030f 	and.w	r3, r3, #15
   3ca76:	2b08      	cmp	r3, #8
   3ca78:	f200 82e3 	bhi.w	3d042 <ull_conn_llcp+0x150a>
   3ca7c:	a101      	add	r1, pc, #4	; (adr r1, 3ca84 <ull_conn_llcp+0xf4c>)
   3ca7e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   3ca82:	bf00      	nop
   3ca84:	0003c56b 	.word	0x0003c56b
   3ca88:	0003c4e5 	.word	0x0003c4e5
   3ca8c:	0003c495 	.word	0x0003c495
   3ca90:	0003bb61 	.word	0x0003bb61
   3ca94:	0003bb61 	.word	0x0003bb61
   3ca98:	0003bb61 	.word	0x0003bb61
   3ca9c:	0003bb61 	.word	0x0003bb61
   3caa0:	0003bb61 	.word	0x0003bb61
   3caa4:	0003c425 	.word	0x0003c425
		if (!conn->tx_ctrl) {
   3caa8:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3caac:	2a00      	cmp	r2, #0
   3caae:	f47f a8b3 	bne.w	3bc18 <ull_conn_llcp+0xe0>
			tx->next = conn->tx_head;
   3cab2:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3cab6:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3caba:	f7ff b8b4 	b.w	3bc26 <ull_conn_llcp+0xee>
			conn->tx_data = conn->tx_data->next;
   3cabe:	6819      	ldr	r1, [r3, #0]
   3cac0:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cac4:	2a00      	cmp	r2, #0
   3cac6:	f47f a994 	bne.w	3bdf2 <ull_conn_llcp+0x2ba>
			tx->next = conn->tx_head->next;
   3caca:	681a      	ldr	r2, [r3, #0]
   3cacc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3cace:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3cad0:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3cad2:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   3cad6:	f7ff b994 	b.w	3be02 <ull_conn_llcp+0x2ca>
		conn->tx_data_last = tx;
   3cada:	f8c4 81e4 	str.w	r8, [r4, #484]	; 0x1e4
		conn->procedure_expire = conn->procedure_reload;
   3cade:	e620      	b.n	3c722 <ull_conn_llcp+0xbea>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3cae0:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   3cae2:	f889 8008 	strb.w	r8, [r9, #8]
   3cae6:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3cae8:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   3caec:	f7ff b876 	b.w	3bbdc <ull_conn_llcp+0xa4>
		if (!conn->tx_ctrl) {
   3caf0:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3caf4:	2a00      	cmp	r2, #0
   3caf6:	d19e      	bne.n	3ca36 <ull_conn_llcp+0xefe>
			tx->next = conn->tx_head;
   3caf8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3cafa:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cafe:	e79f      	b.n	3ca40 <ull_conn_llcp+0xf08>
	    ((pdu_data_tx->llctrl.opcode !=
   3cb00:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cb02:	2a03      	cmp	r2, #3
   3cb04:	f43f aea7 	beq.w	3c856 <ull_conn_llcp+0xd1e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3cb08:	2a0a      	cmp	r2, #10
   3cb0a:	f47f a90a 	bne.w	3bd22 <ull_conn_llcp+0x1ea>
   3cb0e:	e6a2      	b.n	3c856 <ull_conn_llcp+0xd1e>
		conn->tx_data_last = tx;
   3cb10:	f8c4 91e4 	str.w	r9, [r4, #484]	; 0x1e4
   3cb14:	f7ff b88e 	b.w	3bc34 <ull_conn_llcp+0xfc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cb18:	791a      	ldrb	r2, [r3, #4]
   3cb1a:	f002 0203 	and.w	r2, r2, #3
   3cb1e:	2a03      	cmp	r2, #3
   3cb20:	d05b      	beq.n	3cbda <ull_conn_llcp+0x10a2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3cb22:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3cb26:	f7ff b964 	b.w	3bdf2 <ull_conn_llcp+0x2ba>
			conn->tx_data = conn->tx_data->next;
   3cb2a:	6819      	ldr	r1, [r3, #0]
   3cb2c:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cb30:	2a00      	cmp	r2, #0
   3cb32:	f47f aab1 	bne.w	3c098 <ull_conn_llcp+0x560>
			tx->next = conn->tx_head->next;
   3cb36:	681a      	ldr	r2, [r3, #0]
   3cb38:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   3cb3c:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3cb40:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   3cb44:	e9c4 8876 	strd	r8, r8, [r4, #472]	; 0x1d8
   3cb48:	f7ff bab1 	b.w	3c0ae <ull_conn_llcp+0x576>
			conn->tx_data = conn->tx_data->next;
   3cb4c:	6819      	ldr	r1, [r3, #0]
   3cb4e:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cb52:	2a00      	cmp	r2, #0
   3cb54:	f47f ab7f 	bne.w	3c256 <ull_conn_llcp+0x71e>
			tx->next = conn->tx_head->next;
   3cb58:	681a      	ldr	r2, [r3, #0]
   3cb5a:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
   3cb5c:	601e      	str	r6, [r3, #0]
	if (!tx->next) {
   3cb5e:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
   3cb60:	e9c4 6676 	strd	r6, r6, [r4, #472]	; 0x1d8
   3cb64:	f7ff bb7f 	b.w	3c266 <ull_conn_llcp+0x72e>
		if (!conn->tx_ctrl) {
   3cb68:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3cb6c:	2a00      	cmp	r2, #0
   3cb6e:	f47f ac80 	bne.w	3c472 <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head;
   3cb72:	f840 3c13 	str.w	r3, [r0, #-19]
				conn->tx_ctrl = tx;
   3cb76:	e9c4 1175 	strd	r1, r1, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cb7a:	e480      	b.n	3c47e <ull_conn_llcp+0x946>
			conn->tx_data = conn->tx_data->next;
   3cb7c:	6819      	ldr	r1, [r3, #0]
   3cb7e:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cb82:	2a00      	cmp	r2, #0
   3cb84:	f47f a993 	bne.w	3beae <ull_conn_llcp+0x376>
			tx->next = conn->tx_head->next;
   3cb88:	681a      	ldr	r2, [r3, #0]
   3cb8a:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   3cb8c:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   3cb8e:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   3cb90:	e9c4 7776 	strd	r7, r7, [r4, #472]	; 0x1d8
   3cb94:	f7ff b993 	b.w	3bebe <ull_conn_llcp+0x386>
			conn->tx_data = conn->tx_data->next;
   3cb98:	6819      	ldr	r1, [r3, #0]
   3cb9a:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cb9e:	2a00      	cmp	r2, #0
   3cba0:	f47f ab05 	bne.w	3c1ae <ull_conn_llcp+0x676>
			tx->next = conn->tx_head->next;
   3cba4:	681a      	ldr	r2, [r3, #0]
   3cba6:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3cbaa:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   3cbae:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   3cbb2:	e9c4 9976 	strd	r9, r9, [r4, #472]	; 0x1d8
   3cbb6:	f7ff bb05 	b.w	3c1c4 <ull_conn_llcp+0x68c>
			conn->tx_data = conn->tx_data->next;
   3cbba:	6819      	ldr	r1, [r3, #0]
   3cbbc:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cbc0:	2a00      	cmp	r2, #0
   3cbc2:	f47f ada0 	bne.w	3c706 <ull_conn_llcp+0xbce>
			tx->next = conn->tx_head->next;
   3cbc6:	681a      	ldr	r2, [r3, #0]
   3cbc8:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   3cbcc:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   3cbd0:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   3cbd4:	e9c4 8876 	strd	r8, r8, [r4, #472]	; 0x1d8
   3cbd8:	e5a0      	b.n	3c71c <ull_conn_llcp+0xbe4>
	    ((pdu_data_tx->llctrl.opcode !=
   3cbda:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cbdc:	2a03      	cmp	r2, #3
   3cbde:	f43f af74 	beq.w	3caca <ull_conn_llcp+0xf92>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3cbe2:	2a0a      	cmp	r2, #10
   3cbe4:	d19d      	bne.n	3cb22 <ull_conn_llcp+0xfea>
   3cbe6:	e770      	b.n	3caca <ull_conn_llcp+0xf92>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cbe8:	791a      	ldrb	r2, [r3, #4]
   3cbea:	f002 0203 	and.w	r2, r2, #3
   3cbee:	2a03      	cmp	r2, #3
   3cbf0:	f000 818e 	beq.w	3cf10 <ull_conn_llcp+0x13d8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3cbf4:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3cbf8:	f7ff bb2d 	b.w	3c256 <ull_conn_llcp+0x71e>
			conn->tx_data = conn->tx_data->next;
   3cbfc:	6819      	ldr	r1, [r3, #0]
   3cbfe:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cc02:	2a00      	cmp	r2, #0
   3cc04:	f47f ae6f 	bne.w	3c8e6 <ull_conn_llcp+0xdae>
			tx->next = conn->tx_head->next;
   3cc08:	681a      	ldr	r2, [r3, #0]
   3cc0a:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3cc0e:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   3cc12:	f8c4 91d8 	str.w	r9, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3cc16:	e66d      	b.n	3c8f4 <ull_conn_llcp+0xdbc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cc18:	791a      	ldrb	r2, [r3, #4]
   3cc1a:	f002 0203 	and.w	r2, r2, #3
   3cc1e:	2a03      	cmp	r2, #3
   3cc20:	f000 8142 	beq.w	3cea8 <ull_conn_llcp+0x1370>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3cc24:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3cc28:	f7ff ba36 	b.w	3c098 <ull_conn_llcp+0x560>
   3cc2c:	200052e8 	.word	0x200052e8
   3cc30:	00052970 	.word	0x00052970
   3cc34:	000524c0 	.word	0x000524c0
   3cc38:	00052460 	.word	0x00052460
		if (conn->llcp_phy.tx & PHY_2M) {
   3cc3c:	070f      	lsls	r7, r1, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3cc3e:	f884 31cd 	strb.w	r3, [r4, #461]	; 0x1cd
		if (conn->llcp_phy.tx & PHY_2M) {
   3cc42:	f3c1 0382 	ubfx	r3, r1, #2, #3
   3cc46:	f100 812d 	bmi.w	3cea4 <ull_conn_llcp+0x136c>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   3cc4a:	f013 0201 	ands.w	r2, r3, #1
   3cc4e:	d101      	bne.n	3cc54 <ull_conn_llcp+0x111c>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   3cc50:	f003 0204 	and.w	r2, r3, #4
			conn->llcp_phy.tx = PHY_2M;
   3cc54:	f894 31ce 	ldrb.w	r3, [r4, #462]	; 0x1ce
   3cc58:	f362 0384 	bfi	r3, r2, #2, #3
		if (conn->llcp_phy.rx & PHY_2M) {
   3cc5c:	0659      	lsls	r1, r3, #25
			conn->llcp_phy.tx = PHY_2M;
   3cc5e:	f884 31ce 	strb.w	r3, [r4, #462]	; 0x1ce
		if (conn->llcp_phy.rx & PHY_2M) {
   3cc62:	f3c3 1742 	ubfx	r7, r3, #5, #3
   3cc66:	f100 813b 	bmi.w	3cee0 <ull_conn_llcp+0x13a8>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   3cc6a:	f017 0101 	ands.w	r1, r7, #1
   3cc6e:	d101      	bne.n	3cc74 <ull_conn_llcp+0x113c>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   3cc70:	f007 0104 	and.w	r1, r7, #4
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   3cc74:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			conn->llcp_phy.rx = PHY_2M;
   3cc78:	f894 71ce 	ldrb.w	r7, [r4, #462]	; 0x1ce
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   3cc7c:	f003 0307 	and.w	r3, r3, #7
			conn->llcp.phy_upd_ind.tx = 0U;
   3cc80:	4293      	cmp	r3, r2
   3cc82:	bf08      	it	eq
   3cc84:	2200      	moveq	r2, #0
		conn->llcp_ack -= 2U;
   3cc86:	3802      	subs	r0, #2
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3cc88:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
		conn->llcp_ack -= 2U;
   3cc8c:	f884 00f1 	strb.w	r0, [r4, #241]	; 0xf1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   3cc90:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3cc94:	f3c3 0380 	ubfx	r3, r3, #2, #1
		conn->llcp.phy_upd_ind.initiate = 1U;
   3cc98:	005b      	lsls	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   3cc9a:	f000 0007 	and.w	r0, r0, #7
			conn->llcp_phy.rx = PHY_2M;
   3cc9e:	f361 1747 	bfi	r7, r1, #5, #3
		conn->llcp.phy_upd_ind.initiate = 1U;
   3cca2:	f043 0301 	orr.w	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   3cca6:	4288      	cmp	r0, r1
   3cca8:	bf08      	it	eq
   3ccaa:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   3ccac:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   3ccb0:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
			conn->llcp_phy.rx = PHY_2M;
   3ccb4:	f884 71ce 	strb.w	r7, [r4, #462]	; 0x1ce
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3ccb8:	f362 0184 	bfi	r1, r2, #2, #3
		conn->llcp.phy_upd_ind.initiate = 1U;
   3ccbc:	f001 011c 	and.w	r1, r1, #28
   3ccc0:	430b      	orrs	r3, r1
		conn->llcp_type = LLCP_PHY_UPD;
   3ccc2:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   3ccc4:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
		conn->llcp_type = LLCP_PHY_UPD;
   3ccc8:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3cccc:	f7fe bf64 	b.w	3bb98 <ull_conn_llcp+0x60>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3ccd0:	791a      	ldrb	r2, [r3, #4]
   3ccd2:	f002 0203 	and.w	r2, r2, #3
   3ccd6:	2a03      	cmp	r2, #3
   3ccd8:	f000 8112 	beq.w	3cf00 <ull_conn_llcp+0x13c8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3ccdc:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3cce0:	f7ff b8e5 	b.w	3beae <ull_conn_llcp+0x376>
			conn->tx_data = conn->tx_data->next;
   3cce4:	6819      	ldr	r1, [r3, #0]
   3cce6:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3ccea:	2a00      	cmp	r2, #0
   3ccec:	f47f aa5f 	bne.w	3c1ae <ull_conn_llcp+0x676>
			tx->next = conn->tx_head->next;
   3ccf0:	681a      	ldr	r2, [r3, #0]
   3ccf2:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3ccf6:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   3ccfa:	f8c4 91d8 	str.w	r9, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3ccfe:	f7ff ba5d 	b.w	3c1bc <ull_conn_llcp+0x684>
		LL_ASSERT(!retval);
   3cd02:	4ab6      	ldr	r2, [pc, #728]	; (3cfdc <ull_conn_llcp+0x14a4>)
   3cd04:	49b6      	ldr	r1, [pc, #728]	; (3cfe0 <ull_conn_llcp+0x14a8>)
   3cd06:	f640 63f6 	movw	r3, #3830	; 0xef6
   3cd0a:	e651      	b.n	3c9b0 <ull_conn_llcp+0xe78>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3cd0c:	48b5      	ldr	r0, [pc, #724]	; (3cfe4 <ull_conn_llcp+0x14ac>)
   3cd0e:	f7f6 fde5 	bl	338dc <mem_acquire>
		if (!tx) {
   3cd12:	2800      	cmp	r0, #0
   3cd14:	f43f ac7d 	beq.w	3c612 <ull_conn_llcp+0xada>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cd18:	7902      	ldrb	r2, [r0, #4]
   3cd1a:	f042 0203 	orr.w	r2, r2, #3
   3cd1e:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3cd20:	2211      	movs	r2, #17
   3cd22:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   3cd24:	2203      	movs	r2, #3
   3cd26:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3cd28:	220f      	movs	r2, #15
   3cd2a:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   3cd2c:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
   3cd30:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   3cd32:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	if (
   3cd36:	b39a      	cbz	r2, 3cda0 <ull_conn_llcp+0x1268>
	    !conn->llcp_enc.pause_tx &&
   3cd38:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3cd3c:	0789      	lsls	r1, r1, #30
   3cd3e:	d42f      	bmi.n	3cda0 <ull_conn_llcp+0x1268>
	    !conn->llcp_phy.pause_tx &&
   3cd40:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3cd44:	07cb      	lsls	r3, r1, #31
   3cd46:	d42b      	bmi.n	3cda0 <ull_conn_llcp+0x1268>
		if (conn->tx_head == conn->tx_data) {
   3cd48:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3cd4c:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   3cd4e:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3cd52:	f000 8152 	beq.w	3cffa <ull_conn_llcp+0x14c2>
		} else if (!conn->tx_ctrl) {
   3cd56:	2900      	cmp	r1, #0
   3cd58:	f000 815e 	beq.w	3d018 <ull_conn_llcp+0x14e0>
	tx->next = conn->tx_ctrl_last->next;
   3cd5c:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3cd60:	6811      	ldr	r1, [r2, #0]
   3cd62:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3cd64:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   3cd66:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   3cd68:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3cd6c:	2a00      	cmp	r2, #0
   3cd6e:	f000 8150 	beq.w	3d012 <ull_conn_llcp+0x14da>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3cd72:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   3cd76:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3cd7a:	2300      	movs	r3, #0
   3cd7c:	f8c8 3000 	str.w	r3, [r8]
   3cd80:	e447      	b.n	3c612 <ull_conn_llcp+0xada>
			conn->tx_data = conn->tx_data->next;
   3cd82:	6819      	ldr	r1, [r3, #0]
   3cd84:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cd88:	2a00      	cmp	r2, #0
   3cd8a:	f47e af45 	bne.w	3bc18 <ull_conn_llcp+0xe0>
			tx->next = conn->tx_head->next;
   3cd8e:	681a      	ldr	r2, [r3, #0]
   3cd90:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3cd94:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   3cd98:	f8c4 91d8 	str.w	r9, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3cd9c:	f7fe bf43 	b.w	3bc26 <ull_conn_llcp+0xee>
		if (!conn->tx_ctrl) {
   3cda0:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3cda4:	2900      	cmp	r1, #0
   3cda6:	d1d9      	bne.n	3cd5c <ull_conn_llcp+0x1224>
			tx->next = conn->tx_head;
   3cda8:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3cdaa:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cdae:	e7da      	b.n	3cd66 <ull_conn_llcp+0x122e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cdb0:	791a      	ldrb	r2, [r3, #4]
   3cdb2:	f002 0203 	and.w	r2, r2, #3
   3cdb6:	2a03      	cmp	r2, #3
   3cdb8:	f000 80e8 	beq.w	3cf8c <ull_conn_llcp+0x1454>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3cdbc:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3cdc0:	e591      	b.n	3c8e6 <ull_conn_llcp+0xdae>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3cdc2:	4888      	ldr	r0, [pc, #544]	; (3cfe4 <ull_conn_llcp+0x14ac>)
   3cdc4:	f7f6 fd8a 	bl	338dc <mem_acquire>
	if (!tx) {
   3cdc8:	2800      	cmp	r0, #0
   3cdca:	f43f ac22 	beq.w	3c612 <ull_conn_llcp+0xada>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cdce:	7902      	ldrb	r2, [r0, #4]
   3cdd0:	f042 0203 	orr.w	r2, r2, #3
   3cdd4:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   3cdd6:	2218      	movs	r2, #24
   3cdd8:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   3cdda:	2210      	movs	r2, #16
   3cddc:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
   3cdde:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
   3cde2:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   3cde4:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
   3cde8:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   3cdea:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
   3cdee:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   3cdf0:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   3cdf4:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
   3cdf6:	f894 21a0 	ldrb.w	r2, [r4, #416]	; 0x1a0
   3cdfa:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   3cdfc:	f8b4 21a2 	ldrh.w	r2, [r4, #418]	; 0x1a2
   3ce00:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   3ce04:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
   3ce08:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   3ce0c:	f8b4 21a6 	ldrh.w	r2, [r4, #422]	; 0x1a6
   3ce10:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   3ce14:	f8b4 21a8 	ldrh.w	r2, [r4, #424]	; 0x1a8
   3ce18:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   3ce1c:	f8b4 21aa 	ldrh.w	r2, [r4, #426]	; 0x1aa
   3ce20:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   3ce24:	f8b4 21ac 	ldrh.w	r2, [r4, #428]	; 0x1ac
   3ce28:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   3ce2c:	f8b4 21ae 	ldrh.w	r2, [r4, #430]	; 0x1ae
   3ce30:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
   3ce34:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
	if (
   3ce38:	b362      	cbz	r2, 3ce94 <ull_conn_llcp+0x135c>
	    !conn->llcp_enc.pause_tx &&
   3ce3a:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3ce3e:	078f      	lsls	r7, r1, #30
   3ce40:	d428      	bmi.n	3ce94 <ull_conn_llcp+0x135c>
	    !conn->llcp_phy.pause_tx &&
   3ce42:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3ce46:	07c9      	lsls	r1, r1, #31
   3ce48:	d424      	bmi.n	3ce94 <ull_conn_llcp+0x135c>
		if (conn->tx_head == conn->tx_data) {
   3ce4a:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3ce4e:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   3ce50:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3ce54:	d064      	beq.n	3cf20 <ull_conn_llcp+0x13e8>
		} else if (!conn->tx_ctrl) {
   3ce56:	2900      	cmp	r1, #0
   3ce58:	f000 80ac 	beq.w	3cfb4 <ull_conn_llcp+0x147c>
	tx->next = conn->tx_ctrl_last->next;
   3ce5c:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   3ce60:	6811      	ldr	r1, [r2, #0]
   3ce62:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3ce64:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   3ce66:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   3ce68:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3ce6c:	2a00      	cmp	r2, #0
   3ce6e:	f000 809e 	beq.w	3cfae <ull_conn_llcp+0x1476>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   3ce72:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3ce76:	f894 00f1 	ldrb.w	r0, [r4, #241]	; 0xf1
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   3ce7a:	2305      	movs	r3, #5
   3ce7c:	f363 0203 	bfi	r2, r3, #0, #4
   3ce80:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3ce84:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3ce88:	f7fe be62 	b.w	3bb50 <ull_conn_llcp+0x18>
			conn->llcp_cu.interval = interval_max;
   3ce8c:	f8a4 211c 	strh.w	r2, [r4, #284]	; 0x11c
   3ce90:	f7ff bb4f 	b.w	3c532 <ull_conn_llcp+0x9fa>
		if (!conn->tx_ctrl) {
   3ce94:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3ce98:	2900      	cmp	r1, #0
   3ce9a:	d1df      	bne.n	3ce5c <ull_conn_llcp+0x1324>
			tx->next = conn->tx_head;
   3ce9c:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   3ce9e:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cea2:	e7e0      	b.n	3ce66 <ull_conn_llcp+0x132e>
   3cea4:	2202      	movs	r2, #2
   3cea6:	e6d5      	b.n	3cc54 <ull_conn_llcp+0x111c>
	    ((pdu_data_tx->llctrl.opcode !=
   3cea8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3ceaa:	2a03      	cmp	r2, #3
   3ceac:	f43f ae43 	beq.w	3cb36 <ull_conn_llcp+0xffe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3ceb0:	2a0a      	cmp	r2, #10
   3ceb2:	f47f aeb7 	bne.w	3cc24 <ull_conn_llcp+0x10ec>
   3ceb6:	e63e      	b.n	3cb36 <ull_conn_llcp+0xffe>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3ceb8:	791a      	ldrb	r2, [r3, #4]
   3ceba:	f002 0203 	and.w	r2, r2, #3
   3cebe:	2a03      	cmp	r2, #3
   3cec0:	d057      	beq.n	3cf72 <ull_conn_llcp+0x143a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3cec2:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3cec6:	e41e      	b.n	3c706 <ull_conn_llcp+0xbce>
			conn->tx_data = conn->tx_data->next;
   3cec8:	6819      	ldr	r1, [r3, #0]
   3ceca:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cece:	2a00      	cmp	r2, #0
   3ced0:	f47f adb1 	bne.w	3ca36 <ull_conn_llcp+0xefe>
			tx->next = conn->tx_head->next;
   3ced4:	681a      	ldr	r2, [r3, #0]
   3ced6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3ced8:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   3ceda:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3cede:	e5af      	b.n	3ca40 <ull_conn_llcp+0xf08>
   3cee0:	2102      	movs	r1, #2
   3cee2:	e6c7      	b.n	3cc74 <ull_conn_llcp+0x113c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cee4:	791a      	ldrb	r2, [r3, #4]
   3cee6:	f002 0203 	and.w	r2, r2, #3
   3ceea:	2a03      	cmp	r2, #3
   3ceec:	f47f ac8f 	bne.w	3c80e <ull_conn_llcp+0xcd6>
	    ((pdu_data_tx->llctrl.opcode !=
   3cef0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cef2:	2a03      	cmp	r2, #3
   3cef4:	f43f aefc 	beq.w	3ccf0 <ull_conn_llcp+0x11b8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3cef8:	2a0a      	cmp	r2, #10
   3cefa:	f47f ac88 	bne.w	3c80e <ull_conn_llcp+0xcd6>
   3cefe:	e6f7      	b.n	3ccf0 <ull_conn_llcp+0x11b8>
	    ((pdu_data_tx->llctrl.opcode !=
   3cf00:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cf02:	2a03      	cmp	r2, #3
   3cf04:	f43f ae40 	beq.w	3cb88 <ull_conn_llcp+0x1050>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3cf08:	2a0a      	cmp	r2, #10
   3cf0a:	f47f aee7 	bne.w	3ccdc <ull_conn_llcp+0x11a4>
   3cf0e:	e63b      	b.n	3cb88 <ull_conn_llcp+0x1050>
	    ((pdu_data_tx->llctrl.opcode !=
   3cf10:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cf12:	2a03      	cmp	r2, #3
   3cf14:	f43f ae20 	beq.w	3cb58 <ull_conn_llcp+0x1020>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3cf18:	2a0a      	cmp	r2, #10
   3cf1a:	f47f ae6b 	bne.w	3cbf4 <ull_conn_llcp+0x10bc>
   3cf1e:	e61b      	b.n	3cb58 <ull_conn_llcp+0x1020>
			conn->tx_data = conn->tx_data->next;
   3cf20:	6813      	ldr	r3, [r2, #0]
   3cf22:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cf26:	2900      	cmp	r1, #0
   3cf28:	d198      	bne.n	3ce5c <ull_conn_llcp+0x1324>
			tx->next = conn->tx_head->next;
   3cf2a:	6811      	ldr	r1, [r2, #0]
   3cf2c:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   3cf2e:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   3cf30:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3cf34:	e797      	b.n	3ce66 <ull_conn_llcp+0x132e>
	    ((pdu_data_tx->llctrl.opcode !=
   3cf36:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cf38:	2a03      	cmp	r2, #3
   3cf3a:	f43f ae33 	beq.w	3cba4 <ull_conn_llcp+0x106c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3cf3e:	2a0a      	cmp	r2, #10
   3cf40:	f47f ac65 	bne.w	3c80e <ull_conn_llcp+0xcd6>
   3cf44:	e62e      	b.n	3cba4 <ull_conn_llcp+0x106c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cf46:	791a      	ldrb	r2, [r3, #4]
   3cf48:	f002 0203 	and.w	r2, r2, #3
   3cf4c:	2a03      	cmp	r2, #3
   3cf4e:	d017      	beq.n	3cf80 <ull_conn_llcp+0x1448>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3cf50:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3cf54:	e56f      	b.n	3ca36 <ull_conn_llcp+0xefe>
			conn->tx_data = conn->tx_data->next;
   3cf56:	681f      	ldr	r7, [r3, #0]
   3cf58:	f8c4 71e0 	str.w	r7, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3cf5c:	2a00      	cmp	r2, #0
   3cf5e:	f47f aa88 	bne.w	3c472 <ull_conn_llcp+0x93a>
			tx->next = conn->tx_head->next;
   3cf62:	681a      	ldr	r2, [r3, #0]
   3cf64:	f840 2c13 	str.w	r2, [r0, #-19]
			conn->tx_head->next = tx;
   3cf68:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl = tx;
   3cf6a:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3cf6e:	f7ff ba86 	b.w	3c47e <ull_conn_llcp+0x946>
	    ((pdu_data_tx->llctrl.opcode !=
   3cf72:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cf74:	2a03      	cmp	r2, #3
   3cf76:	f43f ae26 	beq.w	3cbc6 <ull_conn_llcp+0x108e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3cf7a:	2a0a      	cmp	r2, #10
   3cf7c:	d1a1      	bne.n	3cec2 <ull_conn_llcp+0x138a>
   3cf7e:	e622      	b.n	3cbc6 <ull_conn_llcp+0x108e>
	    ((pdu_data_tx->llctrl.opcode !=
   3cf80:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cf82:	2a03      	cmp	r2, #3
   3cf84:	d0a6      	beq.n	3ced4 <ull_conn_llcp+0x139c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3cf86:	2a0a      	cmp	r2, #10
   3cf88:	d1e2      	bne.n	3cf50 <ull_conn_llcp+0x1418>
   3cf8a:	e7a3      	b.n	3ced4 <ull_conn_llcp+0x139c>
	    ((pdu_data_tx->llctrl.opcode !=
   3cf8c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cf8e:	2a03      	cmp	r2, #3
   3cf90:	f43f ae3a 	beq.w	3cc08 <ull_conn_llcp+0x10d0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3cf94:	2a0a      	cmp	r2, #10
   3cf96:	f47f af11 	bne.w	3cdbc <ull_conn_llcp+0x1284>
   3cf9a:	e635      	b.n	3cc08 <ull_conn_llcp+0x10d0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cf9c:	791a      	ldrb	r2, [r3, #4]
   3cf9e:	f002 0203 	and.w	r2, r2, #3
   3cfa2:	2a03      	cmp	r2, #3
   3cfa4:	d00e      	beq.n	3cfc4 <ull_conn_llcp+0x148c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3cfa6:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3cfaa:	f7ff ba62 	b.w	3c472 <ull_conn_llcp+0x93a>
		conn->tx_data_last = tx;
   3cfae:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3cfb2:	e75e      	b.n	3ce72 <ull_conn_llcp+0x133a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cfb4:	7911      	ldrb	r1, [r2, #4]
   3cfb6:	f001 0103 	and.w	r1, r1, #3
   3cfba:	2903      	cmp	r1, #3
   3cfbc:	d008      	beq.n	3cfd0 <ull_conn_llcp+0x1498>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3cfbe:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3cfc2:	e74b      	b.n	3ce5c <ull_conn_llcp+0x1324>
	    ((pdu_data_tx->llctrl.opcode !=
   3cfc4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cfc6:	2a03      	cmp	r2, #3
   3cfc8:	d0cb      	beq.n	3cf62 <ull_conn_llcp+0x142a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3cfca:	2a0a      	cmp	r2, #10
   3cfcc:	d1eb      	bne.n	3cfa6 <ull_conn_llcp+0x146e>
   3cfce:	e7c8      	b.n	3cf62 <ull_conn_llcp+0x142a>
	    ((pdu_data_tx->llctrl.opcode !=
   3cfd0:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cfd2:	2903      	cmp	r1, #3
   3cfd4:	d0a9      	beq.n	3cf2a <ull_conn_llcp+0x13f2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3cfd6:	290a      	cmp	r1, #10
   3cfd8:	d1f1      	bne.n	3cfbe <ull_conn_llcp+0x1486>
   3cfda:	e7a6      	b.n	3cf2a <ull_conn_llcp+0x13f2>
   3cfdc:	00052970 	.word	0x00052970
   3cfe0:	00052764 	.word	0x00052764
   3cfe4:	200052e8 	.word	0x200052e8
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3cfe8:	791a      	ldrb	r2, [r3, #4]
   3cfea:	f002 0203 	and.w	r2, r2, #3
   3cfee:	2a03      	cmp	r2, #3
   3cff0:	d01a      	beq.n	3d028 <ull_conn_llcp+0x14f0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3cff2:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3cff6:	f7fe be0f 	b.w	3bc18 <ull_conn_llcp+0xe0>
			conn->tx_data = conn->tx_data->next;
   3cffa:	6813      	ldr	r3, [r2, #0]
   3cffc:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d000:	2900      	cmp	r1, #0
   3d002:	f47f aeab 	bne.w	3cd5c <ull_conn_llcp+0x1224>
			tx->next = conn->tx_head->next;
   3d006:	6811      	ldr	r1, [r2, #0]
   3d008:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   3d00a:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   3d00c:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
				conn->tx_ctrl_last = tx;
   3d010:	e6a9      	b.n	3cd66 <ull_conn_llcp+0x122e>
		conn->tx_data_last = tx;
   3d012:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3d016:	e6ac      	b.n	3cd72 <ull_conn_llcp+0x123a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d018:	7911      	ldrb	r1, [r2, #4]
   3d01a:	f001 0103 	and.w	r1, r1, #3
   3d01e:	2903      	cmp	r1, #3
   3d020:	d009      	beq.n	3d036 <ull_conn_llcp+0x14fe>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d022:	e9c4 2276 	strd	r2, r2, [r4, #472]	; 0x1d8
   3d026:	e699      	b.n	3cd5c <ull_conn_llcp+0x1224>
	    ((pdu_data_tx->llctrl.opcode !=
   3d028:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d02a:	2a03      	cmp	r2, #3
   3d02c:	f43f aeaf 	beq.w	3cd8e <ull_conn_llcp+0x1256>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d030:	2a0a      	cmp	r2, #10
   3d032:	d1de      	bne.n	3cff2 <ull_conn_llcp+0x14ba>
   3d034:	e6ab      	b.n	3cd8e <ull_conn_llcp+0x1256>
	    ((pdu_data_tx->llctrl.opcode !=
   3d036:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d038:	2903      	cmp	r1, #3
   3d03a:	d0e4      	beq.n	3d006 <ull_conn_llcp+0x14ce>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d03c:	290a      	cmp	r1, #10
   3d03e:	d1f0      	bne.n	3d022 <ull_conn_llcp+0x14ea>
   3d040:	e7e1      	b.n	3d006 <ull_conn_llcp+0x14ce>
		LL_ASSERT(0);
   3d042:	4a02      	ldr	r2, [pc, #8]	; (3d04c <ull_conn_llcp+0x1514>)
   3d044:	4902      	ldr	r1, [pc, #8]	; (3d050 <ull_conn_llcp+0x1518>)
   3d046:	f640 73e1 	movw	r3, #4065	; 0xfe1
   3d04a:	e4b1      	b.n	3c9b0 <ull_conn_llcp+0xe78>
   3d04c:	00052970 	.word	0x00052970
   3d050:	000524c0 	.word	0x000524c0

0003d054 <ull_conn_tx_demux>:
{
   3d054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3d058:	4c26      	ldr	r4, [pc, #152]	; (3d0f4 <ull_conn_tx_demux+0xa0>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3d05a:	4f27      	ldr	r7, [pc, #156]	; (3d0f8 <ull_conn_tx_demux+0xa4>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3d05c:	78e2      	ldrb	r2, [r4, #3]
{
   3d05e:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   3d060:	1d26      	adds	r6, r4, #4
   3d062:	e024      	b.n	3d0ae <ull_conn_tx_demux+0x5a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3d064:	4642      	mov	r2, r8
   3d066:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3d06a:	4638      	mov	r0, r7
   3d06c:	f7f6 fc68 	bl	33940 <mem_get>
	if (conn->lll.handle != handle) {
   3d070:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3d072:	4543      	cmp	r3, r8
   3d074:	d128      	bne.n	3d0c8 <ull_conn_tx_demux+0x74>
			struct node_tx *tx = lll_tx->node;
   3d076:	f8d9 3004 	ldr.w	r3, [r9, #4]
			if (!conn->tx_data) {
   3d07a:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
			tx->next = NULL;
   3d07e:	2100      	movs	r1, #0
   3d080:	6019      	str	r1, [r3, #0]
			if (!conn->tx_data) {
   3d082:	b362      	cbz	r2, 3d0de <ull_conn_tx_demux+0x8a>
			if (conn->tx_data_last) {
   3d084:	f8d0 21e4 	ldr.w	r2, [r0, #484]	; 0x1e4
   3d088:	b102      	cbz	r2, 3d08c <ull_conn_tx_demux+0x38>
				conn->tx_data_last->next = tx;
   3d08a:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   3d08c:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
		MFIFO_DEQUEUE(conn_tx);
   3d090:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   3d092:	78a3      	ldrb	r3, [r4, #2]
   3d094:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   3d096:	429a      	cmp	r2, r3
   3d098:	d005      	beq.n	3d0a6 <ull_conn_tx_demux+0x52>
	_first += 1U;
   3d09a:	3301      	adds	r3, #1
   3d09c:	b2db      	uxtb	r3, r3
		_first = 0U;
   3d09e:	4299      	cmp	r1, r3
   3d0a0:	bf08      	it	eq
   3d0a2:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3d0a4:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   3d0a6:	3d01      	subs	r5, #1
   3d0a8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   3d0ac:	d020      	beq.n	3d0f0 <ull_conn_tx_demux+0x9c>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3d0ae:	78a3      	ldrb	r3, [r4, #2]
   3d0b0:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   3d0b2:	4293      	cmp	r3, r2
   3d0b4:	d01c      	beq.n	3d0f0 <ull_conn_tx_demux+0x9c>
	return (void *)(fifo + first * size);
   3d0b6:	fb13 f301 	smulbb	r3, r3, r1
   3d0ba:	eb06 0903 	add.w	r9, r6, r3
		conn = ll_connected_get(lll_tx->handle);
   3d0be:	f836 8003 	ldrh.w	r8, [r6, r3]
	if (handle >= CONFIG_BT_MAX_CONN) {
   3d0c2:	f1b8 0f05 	cmp.w	r8, #5
   3d0c6:	d9cd      	bls.n	3d064 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   3d0c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   3d0cc:	790b      	ldrb	r3, [r1, #4]
   3d0ce:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   3d0d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   3d0d6:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   3d0d8:	f7fa fa8a 	bl	375f0 <ll_tx_ack_put>
   3d0dc:	e7d8      	b.n	3d090 <ull_conn_tx_demux+0x3c>
				if (!conn->tx_head) {
   3d0de:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
				conn->tx_data = tx;
   3d0e2:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
				if (!conn->tx_head) {
   3d0e6:	2a00      	cmp	r2, #0
   3d0e8:	d1cc      	bne.n	3d084 <ull_conn_tx_demux+0x30>
					conn->tx_head = tx;
   3d0ea:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
			if (conn->tx_data_last) {
   3d0ee:	e7cd      	b.n	3d08c <ull_conn_tx_demux+0x38>
}
   3d0f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3d0f4:	20000a5c 	.word	0x20000a5c
   3d0f8:	20002d58 	.word	0x20002d58

0003d0fc <conn_cleanup>:
	if (conn == conn_upd_curr) {
   3d0fc:	4b39      	ldr	r3, [pc, #228]	; (3d1e4 <conn_cleanup+0xe8>)
{
   3d0fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn == conn_upd_curr) {
   3d102:	681a      	ldr	r2, [r3, #0]
	rx = conn->llcp_rx;
   3d104:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
	*((uint8_t *)rx->pdu) = reason;
   3d108:	f880 1170 	strb.w	r1, [r0, #368]	; 0x170
	if (conn == conn_upd_curr) {
   3d10c:	4290      	cmp	r0, r2
		conn_upd_curr = NULL;
   3d10e:	bf04      	itt	eq
   3d110:	2200      	moveq	r2, #0
   3d112:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   3d114:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   3d116:	f8a0 215a 	strh.w	r2, [r0, #346]	; 0x15a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3d11a:	2317      	movs	r3, #23
{
   3d11c:	b082      	sub	sp, #8
   3d11e:	4606      	mov	r6, r0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3d120:	f880 3158 	strb.w	r3, [r0, #344]	; 0x158
	while (rx) {
   3d124:	b144      	cbz	r4, 3d138 <conn_cleanup+0x3c>
		hdr->type = NODE_RX_TYPE_RELEASE;
   3d126:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   3d128:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   3d12a:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   3d12c:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   3d12e:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   3d130:	f7fa fa1a 	bl	37568 <ll_rx_put>
	while (rx) {
   3d134:	2c00      	cmp	r4, #0
   3d136:	d1f7      	bne.n	3d128 <conn_cleanup+0x2c>
	while (conn->tx_head) {
   3d138:	f8d6 11d4 	ldr.w	r1, [r6, #468]	; 0x1d4
   3d13c:	b381      	cbz	r1, 3d1a0 <conn_cleanup+0xa4>
		link = mem_acquire(&mem_link_tx.free);
   3d13e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 3d1e8 <conn_cleanup+0xec>
		LL_ASSERT(link);
   3d142:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3d1ec <conn_cleanup+0xf0>
   3d146:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 3d1f0 <conn_cleanup+0xf4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3d14a:	f106 0768 	add.w	r7, r6, #104	; 0x68
   3d14e:	e007      	b.n	3d160 <conn_cleanup+0x64>
   3d150:	4629      	mov	r1, r5
   3d152:	463a      	mov	r2, r7
   3d154:	4620      	mov	r0, r4
   3d156:	f7f6 fc25 	bl	339a4 <memq_enqueue>
	while (conn->tx_head) {
   3d15a:	f8d6 11d4 	ldr.w	r1, [r6, #468]	; 0x1d4
   3d15e:	b1f9      	cbz	r1, 3d1a0 <conn_cleanup+0xa4>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3d160:	4630      	mov	r0, r6
   3d162:	f7fc f81f 	bl	391a4 <tx_ull_dequeue>
   3d166:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   3d168:	4640      	mov	r0, r8
   3d16a:	f7f6 fbb7 	bl	338dc <mem_acquire>
		LL_ASSERT(link);
   3d16e:	4604      	mov	r4, r0
   3d170:	2800      	cmp	r0, #0
   3d172:	d1ed      	bne.n	3d150 <conn_cleanup+0x54>
   3d174:	481f      	ldr	r0, [pc, #124]	; (3d1f4 <conn_cleanup+0xf8>)
   3d176:	f640 135e 	movw	r3, #2398	; 0x95e
   3d17a:	4652      	mov	r2, sl
   3d17c:	4649      	mov	r1, r9
   3d17e:	f00c fa79 	bl	49674 <printk>
   3d182:	4040      	eors	r0, r0
   3d184:	f380 8811 	msr	BASEPRI, r0
   3d188:	f04f 0003 	mov.w	r0, #3
   3d18c:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3d18e:	4629      	mov	r1, r5
   3d190:	463a      	mov	r2, r7
   3d192:	4620      	mov	r0, r4
   3d194:	f7f6 fc06 	bl	339a4 <memq_enqueue>
	while (conn->tx_head) {
   3d198:	f8d6 11d4 	ldr.w	r1, [r6, #468]	; 0x1d4
   3d19c:	2900      	cmp	r1, #0
   3d19e:	d1df      	bne.n	3d160 <conn_cleanup+0x64>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3d1a0:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   3d1a2:	4b15      	ldr	r3, [pc, #84]	; (3d1f8 <conn_cleanup+0xfc>)
   3d1a4:	9600      	str	r6, [sp, #0]
   3d1a6:	3205      	adds	r2, #5
   3d1a8:	b2d2      	uxtb	r2, r2
   3d1aa:	2101      	movs	r1, #1
   3d1ac:	2000      	movs	r0, #0
   3d1ae:	f7f7 fed5 	bl	34f5c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3d1b2:	f030 0302 	bics.w	r3, r0, #2
   3d1b6:	d00c      	beq.n	3d1d2 <conn_cleanup+0xd6>
   3d1b8:	4a0c      	ldr	r2, [pc, #48]	; (3d1ec <conn_cleanup+0xf0>)
   3d1ba:	4910      	ldr	r1, [pc, #64]	; (3d1fc <conn_cleanup+0x100>)
   3d1bc:	480d      	ldr	r0, [pc, #52]	; (3d1f4 <conn_cleanup+0xf8>)
   3d1be:	f640 1323 	movw	r3, #2339	; 0x923
   3d1c2:	f00c fa57 	bl	49674 <printk>
   3d1c6:	4040      	eors	r0, r0
   3d1c8:	f380 8811 	msr	BASEPRI, r0
   3d1cc:	f04f 0003 	mov.w	r0, #3
   3d1d0:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   3d1d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   3d1d6:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   3d1d8:	8533      	strh	r3, [r6, #40]	; 0x28
}
   3d1da:	b002      	add	sp, #8
   3d1dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   3d1e0:	f7ff bf38 	b.w	3d054 <ull_conn_tx_demux>
   3d1e4:	20005254 	.word	0x20005254
   3d1e8:	2000570c 	.word	0x2000570c
   3d1ec:	00052970 	.word	0x00052970
   3d1f0:	000529c8 	.word	0x000529c8
   3d1f4:	00052460 	.word	0x00052460
   3d1f8:	00038f71 	.word	0x00038f71
   3d1fc:	00052a50 	.word	0x00052a50

0003d200 <ull_conn_done>:
{
   3d200:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   3d202:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   3d204:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3d206:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3d20a:	429a      	cmp	r2, r3
{
   3d20c:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   3d20e:	d057      	beq.n	3d2c0 <ull_conn_done+0xc0>
	switch (done->extra.mic_state) {
   3d210:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   3d214:	2b01      	cmp	r3, #1
   3d216:	4605      	mov	r5, r0
   3d218:	f000 810a 	beq.w	3d430 <ull_conn_done+0x230>
   3d21c:	2b02      	cmp	r3, #2
   3d21e:	d051      	beq.n	3d2c4 <ull_conn_done+0xc4>
   3d220:	2b00      	cmp	r3, #0
   3d222:	f000 80eb 	beq.w	3d3fc <ull_conn_done+0x1fc>
	reason_final = conn->llcp_terminate.reason_final;
   3d226:	f894 1153 	ldrb.w	r1, [r4, #339]	; 0x153
	if (reason_final && (
   3d22a:	2900      	cmp	r1, #0
   3d22c:	d14d      	bne.n	3d2ca <ull_conn_done+0xca>
	latency_event = lll->latency_event;
   3d22e:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   3d230:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	ticks_drift_plus = 0U;
   3d232:	9109      	str	r1, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   3d234:	1c7e      	adds	r6, r7, #1
   3d236:	b2b6      	uxth	r6, r6
	ticks_drift_minus = 0U;
   3d238:	9108      	str	r1, [sp, #32]
	if (done->extra.trx_cnt) {
   3d23a:	2b00      	cmp	r3, #0
   3d23c:	d06a      	beq.n	3d314 <ull_conn_done+0x114>
		} else if (lll->role) {
   3d23e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3d242:	2b00      	cmp	r3, #0
   3d244:	f2c0 8128 	blt.w	3d498 <ull_conn_done+0x298>
	if (done->extra.crc_valid) {
   3d248:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   3d24c:	2200      	movs	r2, #0
   3d24e:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   3d252:	07da      	lsls	r2, r3, #31
   3d254:	f140 80f2 	bpl.w	3d43c <ull_conn_done+0x23c>
		conn->supervision_expire = 0U;
   3d258:	2500      	movs	r5, #0
   3d25a:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   3d25e:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   3d262:	b12b      	cbz	r3, 3d270 <ull_conn_done+0x70>
		if (conn->procedure_expire > elapsed_event) {
   3d264:	42b3      	cmp	r3, r6
   3d266:	f240 813d 	bls.w	3d4e4 <ull_conn_done+0x2e4>
			conn->procedure_expire -= elapsed_event;
   3d26a:	1b9b      	subs	r3, r3, r6
   3d26c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   3d270:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   3d274:	b12b      	cbz	r3, 3d282 <ull_conn_done+0x82>
		if (conn->apto_expire > elapsed_event) {
   3d276:	42b3      	cmp	r3, r6
   3d278:	f240 8119 	bls.w	3d4ae <ull_conn_done+0x2ae>
			conn->apto_expire -= elapsed_event;
   3d27c:	1b9b      	subs	r3, r3, r6
   3d27e:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   3d282:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
   3d286:	2a00      	cmp	r2, #0
   3d288:	d075      	beq.n	3d376 <ull_conn_done+0x176>
		if (conn->appto_expire > elapsed_event) {
   3d28a:	42b2      	cmp	r2, r6
   3d28c:	f200 80e5 	bhi.w	3d45a <ull_conn_done+0x25a>
			if ((conn->procedure_expire == 0U) &&
   3d290:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   3d294:	2200      	movs	r2, #0
   3d296:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   3d29a:	2b00      	cmp	r3, #0
   3d29c:	d16b      	bne.n	3d376 <ull_conn_done+0x176>
			    (conn->llcp_req == conn->llcp_ack)) {
   3d29e:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3d2a2:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
			if ((conn->procedure_expire == 0U) &&
   3d2a6:	4293      	cmp	r3, r2
   3d2a8:	d169      	bne.n	3d37e <ull_conn_done+0x17e>
				conn->llcp_type = LLCP_PING;
   3d2aa:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   3d2ac:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   3d2ae:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
				conn->llcp_ack -= 2U;
   3d2b2:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d2b6:	e067      	b.n	3d388 <ull_conn_done+0x188>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   3d2b8:	2108      	movs	r1, #8
   3d2ba:	4620      	mov	r0, r4
   3d2bc:	f7ff ff1e 	bl	3d0fc <conn_cleanup>
}
   3d2c0:	b00b      	add	sp, #44	; 0x2c
   3d2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
   3d2c4:	213d      	movs	r1, #61	; 0x3d
   3d2c6:	f884 1153 	strb.w	r1, [r4, #339]	; 0x153
	if (reason_final && (
   3d2ca:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3d2ce:	2b00      	cmp	r3, #0
   3d2d0:	db1a      	blt.n	3d308 <ull_conn_done+0x108>
			       conn->llcp_terminate.ack) & 0xFF) ==
   3d2d2:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
   3d2d6:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
   3d2da:	1a9b      	subs	r3, r3, r2
			    lll->role ||
   3d2dc:	b2db      	uxtb	r3, r3
   3d2de:	2b03      	cmp	r3, #3
   3d2e0:	d012      	beq.n	3d308 <ull_conn_done+0x108>
			     TERM_ACKED) ||
   3d2e2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3d2e6:	f013 0204 	ands.w	r2, r3, #4
   3d2ea:	d10d      	bne.n	3d308 <ull_conn_done+0x108>
			    conn->central.terminate_ack ||
   3d2ec:	293d      	cmp	r1, #61	; 0x3d
   3d2ee:	d00b      	beq.n	3d308 <ull_conn_done+0x108>
	latency_event = lll->latency_event;
   3d2f0:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	ticks_drift_minus = 0U;
   3d2f2:	e9cd 2208 	strd	r2, r2, [sp, #32]
	if (done->extra.trx_cnt) {
   3d2f6:	8caa      	ldrh	r2, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   3d2f8:	1c7e      	adds	r6, r7, #1
   3d2fa:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   3d2fc:	b152      	cbz	r2, 3d314 <ull_conn_done+0x114>
			conn->central.terminate_ack = 1;
   3d2fe:	f043 0304 	orr.w	r3, r3, #4
   3d302:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
   3d306:	e79f      	b.n	3d248 <ull_conn_done+0x48>
		conn_cleanup(conn, reason_final);
   3d308:	4620      	mov	r0, r4
}
   3d30a:	b00b      	add	sp, #44	; 0x2c
   3d30c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		conn_cleanup(conn, reason_final);
   3d310:	f7ff bef4 	b.w	3d0fc <conn_cleanup>
	if (done->extra.crc_valid) {
   3d314:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   3d318:	07db      	lsls	r3, r3, #31
   3d31a:	d49d      	bmi.n	3d258 <ull_conn_done+0x58>
	else if (conn->connect_expire) {
   3d31c:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
   3d320:	2a00      	cmp	r2, #0
   3d322:	f000 808b 	beq.w	3d43c <ull_conn_done+0x23c>
		if (conn->connect_expire > elapsed_event) {
   3d326:	42b2      	cmp	r2, r6
   3d328:	f240 80e5 	bls.w	3d4f6 <ull_conn_done+0x2f6>
			conn->connect_expire -= elapsed_event;
   3d32c:	1b92      	subs	r2, r2, r6
	if (conn->supervision_expire) {
   3d32e:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
   3d332:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   3d336:	2b00      	cmp	r3, #0
   3d338:	f000 80f7 	beq.w	3d52a <ull_conn_done+0x32a>
		if (conn->supervision_expire > elapsed_event) {
   3d33c:	429e      	cmp	r6, r3
   3d33e:	d2bb      	bcs.n	3d2b8 <ull_conn_done+0xb8>
			conn->supervision_expire -= elapsed_event;
   3d340:	1b9b      	subs	r3, r3, r6
   3d342:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   3d344:	2500      	movs	r5, #0
			if (conn->supervision_expire <= 6U) {
   3d346:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   3d348:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   3d34c:	8625      	strh	r5, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   3d34e:	f240 80bf 	bls.w	3d4d0 <ull_conn_done+0x2d0>
			else if (lll->role) {
   3d352:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3d356:	42ab      	cmp	r3, r5
   3d358:	da81      	bge.n	3d25e <ull_conn_done+0x5e>
				if (latency_event) {
   3d35a:	2f00      	cmp	r7, #0
   3d35c:	f040 80b8 	bne.w	3d4d0 <ull_conn_done+0x2d0>
					force = conn->periph.force & 0x01;
   3d360:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
					conn->periph.force >>= 1U;
   3d364:	086b      	lsrs	r3, r5, #1
					if (force) {
   3d366:	f015 0501 	ands.w	r5, r5, #1
						conn->periph.force |= BIT(31);
   3d36a:	bf18      	it	ne
   3d36c:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
   3d370:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
   3d374:	e773      	b.n	3d25e <ull_conn_done+0x5e>
			    (conn->llcp_req == conn->llcp_ack)) {
   3d376:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3d37a:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d37e:	1a9b      	subs	r3, r3, r2
   3d380:	f003 0303 	and.w	r3, r3, #3
   3d384:	2b02      	cmp	r3, #2
   3d386:	d074      	beq.n	3d472 <ull_conn_done+0x272>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   3d388:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   3d38c:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   3d390:	429a      	cmp	r2, r3
   3d392:	f000 809f 	beq.w	3d4d4 <ull_conn_done+0x2d4>
		lll->latency_event = 0U;
   3d396:	2200      	movs	r2, #0
   3d398:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3d39a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   3d39c:	b90d      	cbnz	r5, 3d3a2 <ull_conn_done+0x1a2>
   3d39e:	42ba      	cmp	r2, r7
   3d3a0:	d073      	beq.n	3d48a <ull_conn_done+0x28a>
		lazy = lll->latency_event + 1U;
   3d3a2:	3201      	adds	r2, #1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3d3a4:	9e08      	ldr	r6, [sp, #32]
		lazy = lll->latency_event + 1U;
   3d3a6:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3d3a8:	b90b      	cbnz	r3, 3d3ae <ull_conn_done+0x1ae>
   3d3aa:	2e00      	cmp	r6, #0
   3d3ac:	d050      	beq.n	3d450 <ull_conn_done+0x250>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   3d3ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   3d3b0:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   3d3b2:	9504      	str	r5, [sp, #16]
   3d3b4:	2000      	movs	r0, #0
   3d3b6:	4d5e      	ldr	r5, [pc, #376]	; (3d530 <ull_conn_done+0x330>)
   3d3b8:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   3d3ba:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   3d3bc:	e9cd 0001 	strd	r0, r0, [sp, #4]
   3d3c0:	9406      	str	r4, [sp, #24]
   3d3c2:	9600      	str	r6, [sp, #0]
   3d3c4:	b2d2      	uxtb	r2, r2
   3d3c6:	2101      	movs	r1, #1
   3d3c8:	9505      	str	r5, [sp, #20]
   3d3ca:	f7f7 fdaf 	bl	34f2c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3d3ce:	f030 0302 	bics.w	r3, r0, #2
   3d3d2:	f43f af75 	beq.w	3d2c0 <ull_conn_done+0xc0>
   3d3d6:	f7fa f9a5 	bl	37724 <ull_disable_mark_get>
   3d3da:	4284      	cmp	r4, r0
   3d3dc:	f43f af70 	beq.w	3d2c0 <ull_conn_done+0xc0>
   3d3e0:	4a54      	ldr	r2, [pc, #336]	; (3d534 <ull_conn_done+0x334>)
   3d3e2:	4955      	ldr	r1, [pc, #340]	; (3d538 <ull_conn_done+0x338>)
   3d3e4:	4855      	ldr	r0, [pc, #340]	; (3d53c <ull_conn_done+0x33c>)
   3d3e6:	f240 63cd 	movw	r3, #1741	; 0x6cd
   3d3ea:	f00c f943 	bl	49674 <printk>
   3d3ee:	4040      	eors	r0, r0
   3d3f0:	f380 8811 	msr	BASEPRI, r0
   3d3f4:	f04f 0003 	mov.w	r0, #3
   3d3f8:	df02      	svc	2
   3d3fa:	e761      	b.n	3d2c0 <ull_conn_done+0xc0>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   3d3fc:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3d400:	071e      	lsls	r6, r3, #28
   3d402:	d53c      	bpl.n	3d47e <ull_conn_done+0x27e>
					    (lll->latency + 6)) ?
   3d404:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   3d406:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   3d40a:	1d8b      	adds	r3, r1, #6
			appto_reload_new = (conn->apto_reload >
   3d40c:	429a      	cmp	r2, r3
   3d40e:	bfc4      	itt	gt
   3d410:	1f93      	subgt	r3, r2, #6
   3d412:	1a5b      	subgt	r3, r3, r1
			if (conn->appto_reload != appto_reload_new) {
   3d414:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   3d418:	bfcc      	ite	gt
   3d41a:	b29b      	uxthgt	r3, r3
   3d41c:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   3d41e:	4299      	cmp	r1, r3
   3d420:	d05a      	beq.n	3d4d8 <ull_conn_done+0x2d8>
				conn->appto_reload = appto_reload_new;
   3d422:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   3d426:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   3d42a:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
   3d42e:	e6fa      	b.n	3d226 <ull_conn_done+0x26>
		conn->appto_expire = conn->apto_expire = 0U;
   3d430:	2300      	movs	r3, #0
   3d432:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   3d436:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   3d43a:	e6f4      	b.n	3d226 <ull_conn_done+0x26>
		if (!conn->supervision_expire) {
   3d43c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   3d440:	2b00      	cmp	r3, #0
   3d442:	f47f af7b 	bne.w	3d33c <ull_conn_done+0x13c>
			conn->supervision_expire = conn->supervision_reload;
   3d446:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   3d44a:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   3d44e:	e772      	b.n	3d336 <ull_conn_done+0x136>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3d450:	2900      	cmp	r1, #0
   3d452:	d1ac      	bne.n	3d3ae <ull_conn_done+0x1ae>
   3d454:	2d00      	cmp	r5, #0
   3d456:	d1aa      	bne.n	3d3ae <ull_conn_done+0x1ae>
   3d458:	e732      	b.n	3d2c0 <ull_conn_done+0xc0>
			conn->appto_expire -= elapsed_event;
   3d45a:	1b92      	subs	r2, r2, r6
			    (conn->llcp_req == conn->llcp_ack)) {
   3d45c:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
			conn->appto_expire -= elapsed_event;
   3d460:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
			    (conn->llcp_req == conn->llcp_ack)) {
   3d464:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d468:	1a9b      	subs	r3, r3, r2
   3d46a:	f003 0303 	and.w	r3, r3, #3
   3d46e:	2b02      	cmp	r3, #2
   3d470:	d18a      	bne.n	3d388 <ull_conn_done+0x188>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   3d472:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3d476:	3b01      	subs	r3, #1
   3d478:	2b01      	cmp	r3, #1
   3d47a:	d885      	bhi.n	3d388 <ull_conn_done+0x188>
   3d47c:	e78b      	b.n	3d396 <ull_conn_done+0x196>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   3d47e:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   3d482:	07d8      	lsls	r0, r3, #31
   3d484:	f57f aecf 	bpl.w	3d226 <ull_conn_done+0x26>
   3d488:	e7bc      	b.n	3d404 <ull_conn_done+0x204>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3d48a:	9e08      	ldr	r6, [sp, #32]
   3d48c:	b913      	cbnz	r3, 3d494 <ull_conn_done+0x294>
   3d48e:	2e00      	cmp	r6, #0
   3d490:	f43f af16 	beq.w	3d2c0 <ull_conn_done+0xc0>
	lazy = 0U;
   3d494:	4629      	mov	r1, r5
   3d496:	e78a      	b.n	3d3ae <ull_conn_done+0x1ae>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   3d498:	aa08      	add	r2, sp, #32
   3d49a:	a909      	add	r1, sp, #36	; 0x24
   3d49c:	4628      	mov	r0, r5
   3d49e:	f7e9 f85f 	bl	26560 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   3d4a2:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   3d4a6:	b35b      	cbz	r3, 3d500 <ull_conn_done+0x300>
				lll->latency_event = 0;
   3d4a8:	2300      	movs	r3, #0
   3d4aa:	8623      	strh	r3, [r4, #48]	; 0x30
   3d4ac:	e6cc      	b.n	3d248 <ull_conn_done+0x48>
			rx = ll_pdu_rx_alloc();
   3d4ae:	f7fa f889 	bl	375c4 <ll_pdu_rx_alloc>
			if (rx) {
   3d4b2:	4601      	mov	r1, r0
   3d4b4:	b1d8      	cbz	r0, 3d4ee <ull_conn_done+0x2ee>
				rx->handle = lll->handle;
   3d4b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   3d4b8:	2200      	movs	r2, #0
   3d4ba:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   3d4be:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   3d4c0:	231a      	movs	r3, #26
   3d4c2:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   3d4c4:	6800      	ldr	r0, [r0, #0]
   3d4c6:	f7fa f84f 	bl	37568 <ll_rx_put>
				ll_rx_sched();
   3d4ca:	f7fa f857 	bl	3757c <ll_rx_sched>
   3d4ce:	e6d8      	b.n	3d282 <ull_conn_done+0x82>
					force = 1U;
   3d4d0:	2501      	movs	r5, #1
   3d4d2:	e6c4      	b.n	3d25e <ull_conn_done+0x5e>
	if ((force) || (latency_event != lll->latency_event)) {
   3d4d4:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   3d4d6:	e760      	b.n	3d39a <ull_conn_done+0x19a>
			if (conn->apto_expire == 0U) {
   3d4d8:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	; 0xd0
   3d4dc:	2900      	cmp	r1, #0
   3d4de:	f47f aea2 	bne.w	3d226 <ull_conn_done+0x26>
   3d4e2:	e7a0      	b.n	3d426 <ull_conn_done+0x226>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   3d4e4:	2122      	movs	r1, #34	; 0x22
   3d4e6:	4620      	mov	r0, r4
   3d4e8:	f7ff fe08 	bl	3d0fc <conn_cleanup>
			return;
   3d4ec:	e6e8      	b.n	3d2c0 <ull_conn_done+0xc0>
				conn->apto_expire = 1U;
   3d4ee:	2301      	movs	r3, #1
   3d4f0:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   3d4f4:	e6c5      	b.n	3d282 <ull_conn_done+0x82>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   3d4f6:	213e      	movs	r1, #62	; 0x3e
   3d4f8:	4620      	mov	r0, r4
   3d4fa:	f7ff fdff 	bl	3d0fc <conn_cleanup>
			return;
   3d4fe:	e6df      	b.n	3d2c0 <ull_conn_done+0xc0>
				ull_conn_tx_demux(UINT8_MAX);
   3d500:	20ff      	movs	r0, #255	; 0xff
   3d502:	f7ff fda7 	bl	3d054 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   3d506:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   3d50a:	2a00      	cmp	r2, #0
   3d50c:	d1cc      	bne.n	3d4a8 <ull_conn_done+0x2a8>
   3d50e:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   3d512:	f7f6 fa51 	bl	339b8 <memq_peek>
   3d516:	2800      	cmp	r0, #0
   3d518:	d1c6      	bne.n	3d4a8 <ull_conn_done+0x2a8>
			} else if (lll->periph.latency_enabled) {
   3d51a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   3d51e:	0759      	lsls	r1, r3, #29
   3d520:	f57f ae92 	bpl.w	3d248 <ull_conn_done+0x48>
				lll->latency_event = lll->latency;
   3d524:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   3d526:	8623      	strh	r3, [r4, #48]	; 0x30
   3d528:	e68e      	b.n	3d248 <ull_conn_done+0x48>
	force = 0U;
   3d52a:	461d      	mov	r5, r3
   3d52c:	e697      	b.n	3d25e <ull_conn_done+0x5e>
   3d52e:	bf00      	nop
   3d530:	00039165 	.word	0x00039165
   3d534:	00052970 	.word	0x00052970
   3d538:	00052acc 	.word	0x00052acc
   3d53c:	00052460 	.word	0x00052460

0003d540 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   3d540:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   3d544:	2b00      	cmp	r3, #0
   3d546:	f000 80e7 	beq.w	3d718 <ull_conn_tx_lll_enqueue+0x1d8>
   3d54a:	3901      	subs	r1, #1
{
   3d54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   3d550:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 3d71c <ull_conn_tx_lll_enqueue+0x1dc>
		LL_ASSERT(link);
   3d554:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 3d720 <ull_conn_tx_lll_enqueue+0x1e0>
   3d558:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 3d724 <ull_conn_tx_lll_enqueue+0x1e4>
   3d55c:	4604      	mov	r4, r0
   3d55e:	b2cd      	uxtb	r5, r1
   3d560:	e012      	b.n	3d588 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   3d562:	4640      	mov	r0, r8
   3d564:	f7f6 f9ba 	bl	338dc <mem_acquire>
		LL_ASSERT(link);
   3d568:	4607      	mov	r7, r0
   3d56a:	2800      	cmp	r0, #0
   3d56c:	d066      	beq.n	3d63c <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3d56e:	f104 0268 	add.w	r2, r4, #104	; 0x68
   3d572:	4631      	mov	r1, r6
   3d574:	4638      	mov	r0, r7
   3d576:	f7f6 fa15 	bl	339a4 <memq_enqueue>
	while (conn->tx_head &&
   3d57a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   3d57e:	3d01      	subs	r5, #1
   3d580:	b2ed      	uxtb	r5, r5
   3d582:	2b00      	cmp	r3, #0
   3d584:	f000 8082 	beq.w	3d68c <ull_conn_tx_lll_enqueue+0x14c>
		 !conn->llcp_phy.pause_tx &&
   3d588:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
	while (conn->tx_head &&
   3d58c:	07d1      	lsls	r1, r2, #31
   3d58e:	d403      	bmi.n	3d598 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   3d590:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
		 !conn->llcp_phy.pause_tx &&
   3d594:	0792      	lsls	r2, r2, #30
   3d596:	d55f      	bpl.n	3d658 <ull_conn_tx_lll_enqueue+0x118>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   3d598:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d59c:	4293      	cmp	r3, r2
   3d59e:	d175      	bne.n	3d68c <ull_conn_tx_lll_enqueue+0x14c>
   3d5a0:	2dff      	cmp	r5, #255	; 0xff
   3d5a2:	d073      	beq.n	3d68c <ull_conn_tx_lll_enqueue+0x14c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3d5a4:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
   3d5a8:	4620      	mov	r0, r4
   3d5aa:	f7fb fdfb 	bl	391a4 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3d5ae:	7903      	ldrb	r3, [r0, #4]
   3d5b0:	f003 0303 	and.w	r3, r3, #3
   3d5b4:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3d5b6:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3d5b8:	d1d3      	bne.n	3d562 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   3d5ba:	79c3      	ldrb	r3, [r0, #7]
   3d5bc:	3b03      	subs	r3, #3
   3d5be:	2b14      	cmp	r3, #20
   3d5c0:	d8cf      	bhi.n	3d562 <ull_conn_tx_lll_enqueue+0x22>
   3d5c2:	a201      	add	r2, pc, #4	; (adr r2, 3d5c8 <ull_conn_tx_lll_enqueue+0x88>)
   3d5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   3d5c8:	0003d625 	.word	0x0003d625
   3d5cc:	0003d625 	.word	0x0003d625
   3d5d0:	0003d563 	.word	0x0003d563
   3d5d4:	0003d563 	.word	0x0003d563
   3d5d8:	0003d563 	.word	0x0003d563
   3d5dc:	0003d563 	.word	0x0003d563
   3d5e0:	0003d563 	.word	0x0003d563
   3d5e4:	0003d625 	.word	0x0003d625
   3d5e8:	0003d61d 	.word	0x0003d61d
   3d5ec:	0003d563 	.word	0x0003d563
   3d5f0:	0003d563 	.word	0x0003d563
   3d5f4:	0003d563 	.word	0x0003d563
   3d5f8:	0003d563 	.word	0x0003d563
   3d5fc:	0003d563 	.word	0x0003d563
   3d600:	0003d563 	.word	0x0003d563
   3d604:	0003d563 	.word	0x0003d563
   3d608:	0003d563 	.word	0x0003d563
   3d60c:	0003d563 	.word	0x0003d563
   3d610:	0003d563 	.word	0x0003d563
   3d614:	0003d691 	.word	0x0003d691
   3d618:	0003d691 	.word	0x0003d691
		if (!conn->lll.role) {
   3d61c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3d620:	2b00      	cmp	r3, #0
   3d622:	da9e      	bge.n	3d562 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   3d624:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   3d628:	f043 0302 	orr.w	r3, r3, #2
   3d62c:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
		link = mem_acquire(&mem_link_tx.free);
   3d630:	4640      	mov	r0, r8
   3d632:	f7f6 f953 	bl	338dc <mem_acquire>
		LL_ASSERT(link);
   3d636:	4607      	mov	r7, r0
   3d638:	2800      	cmp	r0, #0
   3d63a:	d198      	bne.n	3d56e <ull_conn_tx_lll_enqueue+0x2e>
   3d63c:	483a      	ldr	r0, [pc, #232]	; (3d728 <ull_conn_tx_lll_enqueue+0x1e8>)
   3d63e:	f240 7326 	movw	r3, #1830	; 0x726
   3d642:	4652      	mov	r2, sl
   3d644:	4649      	mov	r1, r9
   3d646:	f00c f815 	bl	49674 <printk>
   3d64a:	4040      	eors	r0, r0
   3d64c:	f380 8811 	msr	BASEPRI, r0
   3d650:	f04f 0003 	mov.w	r0, #3
   3d654:	df02      	svc	2
   3d656:	e78a      	b.n	3d56e <ull_conn_tx_lll_enqueue+0x2e>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   3d658:	791a      	ldrb	r2, [r3, #4]
   3d65a:	f002 0203 	and.w	r2, r2, #3
   3d65e:	2a03      	cmp	r2, #3
   3d660:	d19e      	bne.n	3d5a0 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   3d662:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   3d664:	2a03      	cmp	r2, #3
   3d666:	d001      	beq.n	3d66c <ull_conn_tx_lll_enqueue+0x12c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   3d668:	2a0a      	cmp	r2, #10
   3d66a:	d199      	bne.n	3d5a0 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   3d66c:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
   3d670:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3d674:	428a      	cmp	r2, r1
   3d676:	d012      	beq.n	3d69e <ull_conn_tx_lll_enqueue+0x15e>
   3d678:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3d67c:	2a03      	cmp	r2, #3
   3d67e:	d08f      	beq.n	3d5a0 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   3d680:	681a      	ldr	r2, [r3, #0]
   3d682:	b11a      	cbz	r2, 3d68c <ull_conn_tx_lll_enqueue+0x14c>
   3d684:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3d688:	428a      	cmp	r2, r1
   3d68a:	d034      	beq.n	3d6f6 <ull_conn_tx_lll_enqueue+0x1b6>
}
   3d68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
   3d690:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3d694:	f043 0301 	orr.w	r3, r3, #1
   3d698:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
		break;
   3d69c:	e761      	b.n	3d562 <ull_conn_tx_lll_enqueue+0x22>
		    ((conn->llcp_req == conn->llcp_ack) &&
   3d69e:	f894 0131 	ldrb.w	r0, [r4, #305]	; 0x131
   3d6a2:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
   3d6a6:	4288      	cmp	r0, r1
   3d6a8:	d1ea      	bne.n	3d680 <ull_conn_tx_lll_enqueue+0x140>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   3d6aa:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
   3d6ae:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
   3d6b2:	4288      	cmp	r0, r1
   3d6b4:	d1e4      	bne.n	3d680 <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   3d6b6:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
   3d6ba:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   3d6be:	4288      	cmp	r0, r1
   3d6c0:	d1de      	bne.n	3d680 <ull_conn_tx_lll_enqueue+0x140>
		       conn->llcp_conn_param.req) ||
   3d6c2:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   3d6c6:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   3d6ca:	4288      	cmp	r0, r1
   3d6cc:	d1d8      	bne.n	3d680 <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   3d6ce:	f894 01cd 	ldrb.w	r0, [r4, #461]	; 0x1cd
   3d6d2:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3d6d6:	4288      	cmp	r0, r1
   3d6d8:	d1d2      	bne.n	3d680 <ull_conn_tx_lll_enqueue+0x140>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3d6da:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
			conn->llcp_ack -= 2U;
   3d6de:	3a02      	subs	r2, #2
   3d6e0:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3d6e4:	2201      	movs	r2, #1
   3d6e6:	f362 0301 	bfi	r3, r2, #0, #2
   3d6ea:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
			conn->llcp_type = LLCP_ENCRYPTION;
   3d6ee:	2303      	movs	r3, #3
   3d6f0:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2
			conn->llcp_ack -= 2U;
   3d6f4:	e754      	b.n	3d5a0 <ull_conn_tx_lll_enqueue+0x60>
				conn->tx_head = tx->next;
   3d6f6:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   3d6fa:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
				if (!conn->tx_data_last) {
   3d6fe:	f8d4 11e4 	ldr.w	r1, [r4, #484]	; 0x1e4
				tx->next = conn->tx_ctrl_last->next;
   3d702:	6810      	ldr	r0, [r2, #0]
   3d704:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   3d706:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   3d708:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
				if (!conn->tx_data_last) {
   3d70c:	2900      	cmp	r1, #0
   3d70e:	f47f af47 	bne.w	3d5a0 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   3d712:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
   3d716:	e743      	b.n	3d5a0 <ull_conn_tx_lll_enqueue+0x60>
   3d718:	4770      	bx	lr
   3d71a:	bf00      	nop
   3d71c:	2000570c 	.word	0x2000570c
   3d720:	00052970 	.word	0x00052970
   3d724:	000529c8 	.word	0x000529c8
   3d728:	00052460 	.word	0x00052460

0003d72c <tx_demux>:
{
   3d72c:	b510      	push	{r4, lr}
   3d72e:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   3d730:	2001      	movs	r0, #1
   3d732:	f7ff fc8f 	bl	3d054 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   3d736:	4620      	mov	r0, r4
   3d738:	2101      	movs	r1, #1
}
   3d73a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   3d73e:	f7ff beff 	b.w	3d540 <ull_conn_tx_lll_enqueue>
   3d742:	bf00      	nop

0003d744 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   3d744:	4901      	ldr	r1, [pc, #4]	; (3d74c <ull_conn_link_tx_release+0x8>)
   3d746:	f7f6 b8e3 	b.w	33910 <mem_release>
   3d74a:	bf00      	nop
   3d74c:	2000570c 	.word	0x2000570c

0003d750 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   3d750:	4b01      	ldr	r3, [pc, #4]	; (3d758 <ull_conn_ack_last_idx_get+0x8>)
}
   3d752:	78d8      	ldrb	r0, [r3, #3]
   3d754:	4770      	bx	lr
   3d756:	bf00      	nop
   3d758:	20000978 	.word	0x20000978

0003d75c <ull_conn_ack_peek>:
{
   3d75c:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   3d75e:	4b0c      	ldr	r3, [pc, #48]	; (3d790 <ull_conn_ack_peek+0x34>)
   3d760:	f893 c002 	ldrb.w	ip, [r3, #2]
   3d764:	f893 e003 	ldrb.w	lr, [r3, #3]
   3d768:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   3d76a:	45f4      	cmp	ip, lr
   3d76c:	d00d      	beq.n	3d78a <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   3d76e:	fb1c fc04 	smulbb	ip, ip, r4
   3d772:	3304      	adds	r3, #4
   3d774:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   3d778:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   3d77c:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   3d780:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   3d782:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   3d784:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   3d786:	6818      	ldr	r0, [r3, #0]
}
   3d788:	bd10      	pop	{r4, pc}
		return NULL;
   3d78a:	2000      	movs	r0, #0
}
   3d78c:	bd10      	pop	{r4, pc}
   3d78e:	bf00      	nop
   3d790:	20000978 	.word	0x20000978

0003d794 <ull_conn_ack_by_last_peek>:
{
   3d794:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   3d796:	4b0b      	ldr	r3, [pc, #44]	; (3d7c4 <ull_conn_ack_by_last_peek+0x30>)
   3d798:	f893 c002 	ldrb.w	ip, [r3, #2]
   3d79c:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   3d7a0:	4584      	cmp	ip, r0
   3d7a2:	d00d      	beq.n	3d7c0 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   3d7a4:	3304      	adds	r3, #4
   3d7a6:	fb1c fc0e 	smulbb	ip, ip, lr
   3d7aa:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   3d7ae:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   3d7b2:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   3d7b6:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   3d7b8:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   3d7ba:	6818      	ldr	r0, [r3, #0]
}
   3d7bc:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   3d7c0:	2000      	movs	r0, #0
   3d7c2:	e7fb      	b.n	3d7bc <ull_conn_ack_by_last_peek+0x28>
   3d7c4:	20000978 	.word	0x20000978

0003d7c8 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   3d7c8:	4b09      	ldr	r3, [pc, #36]	; (3d7f0 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   3d7ca:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   3d7cc:	78da      	ldrb	r2, [r3, #3]
   3d7ce:	7818      	ldrb	r0, [r3, #0]
   3d7d0:	f893 c001 	ldrb.w	ip, [r3, #1]
   3d7d4:	428a      	cmp	r2, r1
   3d7d6:	d009      	beq.n	3d7ec <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   3d7d8:	1c4a      	adds	r2, r1, #1
	mem = *((void **)(fifo + _first * size));
   3d7da:	fb01 3000 	mla	r0, r1, r0, r3
	_first += 1U;
   3d7de:	b2d2      	uxtb	r2, r2
		_first = 0U;
   3d7e0:	4594      	cmp	ip, r2
   3d7e2:	bf08      	it	eq
   3d7e4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   3d7e6:	6840      	ldr	r0, [r0, #4]
	*first = _first; /* Write back read-index */
   3d7e8:	709a      	strb	r2, [r3, #2]
	return mem;
   3d7ea:	4770      	bx	lr
		return NULL;
   3d7ec:	2000      	movs	r0, #0
}
   3d7ee:	4770      	bx	lr
   3d7f0:	20000978 	.word	0x20000978

0003d7f4 <ull_conn_lll_ack_enqueue>:
{
   3d7f4:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   3d7f6:	4a15      	ldr	r2, [pc, #84]	; (3d84c <ull_conn_lll_ack_enqueue+0x58>)
   3d7f8:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   3d7fc:	7854      	ldrb	r4, [r2, #1]
   3d7fe:	f892 e002 	ldrb.w	lr, [r2, #2]
   3d802:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   3d804:	f10c 0301 	add.w	r3, ip, #1
   3d808:	b2db      	uxtb	r3, r3
		last = 0U;
   3d80a:	429c      	cmp	r4, r3
   3d80c:	bf08      	it	eq
   3d80e:	2300      	moveq	r3, #0
	if (last == first) {
   3d810:	459e      	cmp	lr, r3
   3d812:	d00a      	beq.n	3d82a <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   3d814:	fb1c fc05 	smulbb	ip, ip, r5
   3d818:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
   3d81c:	f82e 000c 	strh.w	r0, [lr, ip]
   3d820:	44e6      	add	lr, ip
	lll_tx->node = tx;
   3d822:	f8ce 1004 	str.w	r1, [lr, #4]
	*last = idx; /* Commit: Update write index */
   3d826:	70d3      	strb	r3, [r2, #3]
}
   3d828:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   3d82a:	4a09      	ldr	r2, [pc, #36]	; (3d850 <ull_conn_lll_ack_enqueue+0x5c>)
   3d82c:	4909      	ldr	r1, [pc, #36]	; (3d854 <ull_conn_lll_ack_enqueue+0x60>)
   3d82e:	480a      	ldr	r0, [pc, #40]	; (3d858 <ull_conn_lll_ack_enqueue+0x64>)
   3d830:	f240 7376 	movw	r3, #1910	; 0x776
   3d834:	f00b ff1e 	bl	49674 <printk>
   3d838:	4040      	eors	r0, r0
   3d83a:	f380 8811 	msr	BASEPRI, r0
   3d83e:	f04f 0003 	mov.w	r0, #3
   3d842:	df02      	svc	2
	lll_tx->handle = handle;
   3d844:	2300      	movs	r3, #0
   3d846:	801b      	strh	r3, [r3, #0]
   3d848:	deff      	udf	#255	; 0xff
   3d84a:	bf00      	nop
   3d84c:	20000978 	.word	0x20000978
   3d850:	00052970 	.word	0x00052970
   3d854:	000529b8 	.word	0x000529b8
   3d858:	00052460 	.word	0x00052460

0003d85c <ull_conn_tx_ack>:
{
   3d85c:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   3d85e:	7953      	ldrb	r3, [r2, #5]
{
   3d860:	b083      	sub	sp, #12
   3d862:	4614      	mov	r4, r2
   3d864:	4605      	mov	r5, r0
   3d866:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   3d868:	b37b      	cbz	r3, 3d8ca <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3d86a:	7923      	ldrb	r3, [r4, #4]
   3d86c:	f003 0203 	and.w	r2, r3, #3
   3d870:	2a03      	cmp	r2, #3
   3d872:	d00d      	beq.n	3d890 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   3d874:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3d878:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   3d87a:	bf04      	itt	eq
   3d87c:	f36f 0301 	bfceq	r3, #0, #2
   3d880:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   3d882:	4621      	mov	r1, r4
   3d884:	4628      	mov	r0, r5
}
   3d886:	b003      	add	sp, #12
   3d888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   3d88c:	f7f9 beb0 	b.w	375f0 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   3d890:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3d894:	429d      	cmp	r5, r3
   3d896:	d126      	bne.n	3d8e6 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   3d898:	6830      	ldr	r0, [r6, #0]
   3d89a:	4284      	cmp	r4, r0
   3d89c:	d05b      	beq.n	3d956 <ull_conn_tx_ack+0xfa>
		LL_ASSERT(!link->next);
   3d89e:	2800      	cmp	r0, #0
   3d8a0:	d0ef      	beq.n	3d882 <ull_conn_tx_ack+0x26>
   3d8a2:	4abf      	ldr	r2, [pc, #764]	; (3dba0 <ull_conn_tx_ack+0x344>)
   3d8a4:	49bf      	ldr	r1, [pc, #764]	; (3dba4 <ull_conn_tx_ack+0x348>)
   3d8a6:	48c0      	ldr	r0, [pc, #768]	; (3dba8 <ull_conn_tx_ack+0x34c>)
   3d8a8:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   3d8ac:	f00b fee2 	bl	49674 <printk>
   3d8b0:	4040      	eors	r0, r0
   3d8b2:	f380 8811 	msr	BASEPRI, r0
   3d8b6:	f04f 0003 	mov.w	r0, #3
   3d8ba:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   3d8bc:	4621      	mov	r1, r4
   3d8be:	4628      	mov	r0, r5
}
   3d8c0:	b003      	add	sp, #12
   3d8c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   3d8c6:	f7f9 be93 	b.w	375f0 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   3d8ca:	4ab5      	ldr	r2, [pc, #724]	; (3dba0 <ull_conn_tx_ack+0x344>)
   3d8cc:	49b7      	ldr	r1, [pc, #732]	; (3dbac <ull_conn_tx_ack+0x350>)
   3d8ce:	48b6      	ldr	r0, [pc, #728]	; (3dba8 <ull_conn_tx_ack+0x34c>)
   3d8d0:	f240 7383 	movw	r3, #1923	; 0x783
   3d8d4:	f00b fece 	bl	49674 <printk>
   3d8d8:	4040      	eors	r0, r0
   3d8da:	f380 8811 	msr	BASEPRI, r0
   3d8de:	f04f 0003 	mov.w	r0, #3
   3d8e2:	df02      	svc	2
   3d8e4:	e7c1      	b.n	3d86a <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3d8e6:	48b2      	ldr	r0, [pc, #712]	; (3dbb0 <ull_conn_tx_ack+0x354>)
   3d8e8:	462a      	mov	r2, r5
   3d8ea:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3d8ee:	f7f6 f827 	bl	33940 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   3d8f2:	79e3      	ldrb	r3, [r4, #7]
   3d8f4:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3d8f6:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   3d8f8:	2b16      	cmp	r3, #22
   3d8fa:	d83c      	bhi.n	3d976 <ull_conn_tx_ack+0x11a>
   3d8fc:	e8df f013 	tbh	[pc, r3, lsl #1]
   3d900:	00d400e7 	.word	0x00d400e7
   3d904:	00410048 	.word	0x00410048
   3d908:	003400b1 	.word	0x003400b1
   3d90c:	0034003b 	.word	0x0034003b
   3d910:	005900a0 	.word	0x005900a0
   3d914:	004f003b 	.word	0x004f003b
   3d918:	003b003b 	.word	0x003b003b
   3d91c:	0031003b 	.word	0x0031003b
   3d920:	0034003b 	.word	0x0034003b
   3d924:	01220160 	.word	0x01220160
   3d928:	00f30110 	.word	0x00f30110
   3d92c:	00c3      	.short	0x00c3
		if (link->next == (void *)tx) {
   3d92e:	6833      	ldr	r3, [r6, #0]
		conn->tx_data_last = tx;
   3d930:	f8c7 41e4 	str.w	r4, [r7, #484]	; 0x1e4
		if (link->next == (void *)tx) {
   3d934:	2b00      	cmp	r3, #0
   3d936:	f040 8081 	bne.w	3da3c <ull_conn_tx_ack+0x1e0>
			LL_ASSERT(link->next);
   3d93a:	4a99      	ldr	r2, [pc, #612]	; (3dba0 <ull_conn_tx_ack+0x344>)
   3d93c:	499d      	ldr	r1, [pc, #628]	; (3dbb4 <ull_conn_tx_ack+0x358>)
   3d93e:	489a      	ldr	r0, [pc, #616]	; (3dba8 <ull_conn_tx_ack+0x34c>)
   3d940:	f240 7392 	movw	r3, #1938	; 0x792
   3d944:	f00b fe96 	bl	49674 <printk>
   3d948:	4040      	eors	r0, r0
   3d94a:	f380 8811 	msr	BASEPRI, r0
   3d94e:	f04f 0003 	mov.w	r0, #3
   3d952:	df02      	svc	2
   3d954:	2000      	movs	r0, #0
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3d956:	4998      	ldr	r1, [pc, #608]	; (3dbb8 <ull_conn_tx_ack+0x35c>)
}
   3d958:	b003      	add	sp, #12
   3d95a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3d95e:	f7f5 bfd7 	b.w	33910 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   3d962:	7a23      	ldrb	r3, [r4, #8]
   3d964:	2b03      	cmp	r3, #3
   3d966:	d01a      	beq.n	3d99e <ull_conn_tx_ack+0x142>
			conn->common.txn_lock = 0U;
   3d968:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
   3d96c:	f36f 0341 	bfc	r3, #1, #1
   3d970:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			break;
   3d974:	e790      	b.n	3d898 <ull_conn_tx_ack+0x3c>
		if (link->next == (void *)tx) {
   3d976:	6830      	ldr	r0, [r6, #0]
   3d978:	42a0      	cmp	r0, r4
   3d97a:	d0ec      	beq.n	3d956 <ull_conn_tx_ack+0xfa>
		LL_ASSERT(!link->next);
   3d97c:	2800      	cmp	r0, #0
   3d97e:	d190      	bne.n	3d8a2 <ull_conn_tx_ack+0x46>
   3d980:	e77f      	b.n	3d882 <ull_conn_tx_ack+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3d982:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   3d986:	f043 0303 	orr.w	r3, r3, #3
   3d98a:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   3d98e:	e783      	b.n	3d898 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   3d990:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
   3d994:	f043 0302 	orr.w	r3, r3, #2
   3d998:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
   3d99c:	e77c      	b.n	3d898 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   3d99e:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
   3d9a2:	f023 0303 	bic.w	r3, r3, #3
   3d9a6:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
		conn->procedure_expire = 0U;
   3d9aa:	2300      	movs	r3, #0
   3d9ac:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		break;
   3d9b0:	e772      	b.n	3d898 <ull_conn_tx_ack+0x3c>
		if (!conn->lll.role) {
   3d9b2:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3d9b6:	2b00      	cmp	r3, #0
   3d9b8:	dbea      	blt.n	3d990 <ull_conn_tx_ack+0x134>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d9ba:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3d9bc:	2217      	movs	r2, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d9be:	f043 0303 	orr.w	r3, r3, #3
   3d9c2:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3d9c4:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3d9c6:	2303      	movs	r3, #3
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   3d9c8:	2208      	movs	r2, #8
   3d9ca:	f200 1179 	addw	r1, r0, #377	; 0x179
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3d9ce:	71e3      	strb	r3, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   3d9d0:	18a0      	adds	r0, r4, r2
   3d9d2:	f00d ff5a 	bl	4b88a <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   3d9d6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   3d9da:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   3d9dc:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
   3d9e0:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   3d9e2:	210c      	movs	r1, #12
   3d9e4:	f104 0012 	add.w	r0, r4, #18
   3d9e8:	f002 fa8c 	bl	3ff04 <lll_csrand_isr_get>
	    conn->tx_head &&
   3d9ec:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
	if (
   3d9f0:	2b00      	cmp	r3, #0
   3d9f2:	f000 80f2 	beq.w	3dbda <ull_conn_tx_ack+0x37e>
	    !conn->llcp_enc.pause_tx &&
   3d9f6:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
	    conn->tx_head &&
   3d9fa:	0791      	lsls	r1, r2, #30
   3d9fc:	f100 80ed 	bmi.w	3dbda <ull_conn_tx_ack+0x37e>
	    !conn->llcp_phy.pause_tx &&
   3da00:	f897 21cf 	ldrb.w	r2, [r7, #463]	; 0x1cf
   3da04:	07d2      	lsls	r2, r2, #31
   3da06:	f100 80e8 	bmi.w	3dbda <ull_conn_tx_ack+0x37e>
		if (conn->tx_head == conn->tx_data) {
   3da0a:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
   3da0e:	4293      	cmp	r3, r2
   3da10:	f000 8102 	beq.w	3dc18 <ull_conn_tx_ack+0x3bc>
		} else if (!conn->tx_ctrl) {
   3da14:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
   3da18:	2a00      	cmp	r2, #0
   3da1a:	f000 810c 	beq.w	3dc36 <ull_conn_tx_ack+0x3da>
	tx->next = conn->tx_ctrl_last->next;
   3da1e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
   3da22:	681a      	ldr	r2, [r3, #0]
   3da24:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   3da26:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   3da28:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   3da2a:	f8c7 41dc 	str.w	r4, [r7, #476]	; 0x1dc
	if (!tx->next) {
   3da2e:	2b00      	cmp	r3, #0
   3da30:	f43f af7d 	beq.w	3d92e <ull_conn_tx_ack+0xd2>
		if (link->next == (void *)tx) {
   3da34:	6833      	ldr	r3, [r6, #0]
   3da36:	2b00      	cmp	r3, #0
   3da38:	f43f af7f 	beq.w	3d93a <ull_conn_tx_ack+0xde>
}
   3da3c:	b003      	add	sp, #12
   3da3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_enc.pause_tx = 1U;
   3da40:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
   3da44:	f023 0306 	bic.w	r3, r3, #6
   3da48:	f043 0306 	orr.w	r3, r3, #6
   3da4c:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
		conn->procedure_expire = conn->procedure_reload;
   3da50:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
   3da54:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		conn->llcp_enc.ack = conn->llcp_enc.req;
   3da58:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
   3da5c:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
		break;
   3da60:	e71a      	b.n	3d898 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   3da62:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3da66:	2b00      	cmp	r3, #0
   3da68:	da8b      	bge.n	3d982 <ull_conn_tx_ack+0x126>
			conn->llcp_enc.pause_rx = 0U;
   3da6a:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
   3da6e:	f023 0303 	bic.w	r3, r3, #3
   3da72:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
			conn->procedure_expire = 0U;
   3da76:	2300      	movs	r3, #0
   3da78:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   3da7c:	f890 30f0 	ldrb.w	r3, [r0, #240]	; 0xf0
   3da80:	f880 30f1 	strb.w	r3, [r0, #241]	; 0xf1
   3da84:	e708      	b.n	3d898 <ull_conn_tx_ack+0x3c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   3da86:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
   3da8a:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
   3da8e:	f3c3 0382 	ubfx	r3, r3, #2, #3
			lll->phy_tx_time = phy_tx_time[phys];
   3da92:	f363 1206 	bfi	r2, r3, #4, #3
   3da96:	f887 2060 	strb.w	r2, [r7, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3da9a:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
   3da9e:	f36f 0300 	bfc	r3, #0, #1
   3daa2:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		break;
   3daa6:	e6f7      	b.n	3d898 <ull_conn_tx_ack+0x3c>
		memcpy(&conn->llcp.encryption.skd[0],
   3daa8:	2208      	movs	r2, #8
   3daaa:	f104 0112 	add.w	r1, r4, #18
   3daae:	f500 7081 	add.w	r0, r0, #258	; 0x102
   3dab2:	f00d feea 	bl	4b88a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   3dab6:	2204      	movs	r2, #4
   3dab8:	f104 011a 	add.w	r1, r4, #26
   3dabc:	f107 0094 	add.w	r0, r7, #148	; 0x94
   3dac0:	f00d fee3 	bl	4b88a <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   3dac4:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
   3dac8:	f043 0302 	orr.w	r3, r3, #2
   3dacc:	e7be      	b.n	3da4c <ull_conn_tx_ack+0x1f0>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   3dace:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   3dad0:	2b13      	cmp	r3, #19
   3dad2:	bf08      	it	eq
   3dad4:	2316      	moveq	r3, #22
   3dad6:	f880 3153 	strb.w	r3, [r0, #339]	; 0x153
		conn->llcp_terminate.ack--;
   3dada:	f890 3151 	ldrb.w	r3, [r0, #337]	; 0x151
   3dade:	3b01      	subs	r3, #1
   3dae0:	f880 3151 	strb.w	r3, [r0, #337]	; 0x151
	break;
   3dae4:	e6d8      	b.n	3d898 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   3dae6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3daea:	2b00      	cmp	r3, #0
   3daec:	dad5      	bge.n	3da9a <ull_conn_tx_ack+0x23e>
				conn->common.txn_lock = 0U;
   3daee:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3daf2:	4b32      	ldr	r3, [pc, #200]	; (3dbbc <ull_conn_tx_ack+0x360>)
				conn->common.txn_lock = 0U;
   3daf4:	f36f 0241 	bfc	r2, #1, #1
   3daf8:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3dafc:	e893 0003 	ldmia.w	r3, {r0, r1}
   3db00:	ab02      	add	r3, sp, #8
   3db02:	e903 0003 	stmdb	r3, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   3db06:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
   3db0a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
   3db0e:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   3db12:	f003 0307 	and.w	r3, r3, #7
   3db16:	3308      	adds	r3, #8
   3db18:	446b      	add	r3, sp
   3db1a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   3db1e:	e7b8      	b.n	3da92 <ull_conn_tx_ack+0x236>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3db20:	f890 31ce 	ldrb.w	r3, [r0, #462]	; 0x1ce
   3db24:	2202      	movs	r2, #2
   3db26:	f362 0301 	bfi	r3, r2, #0, #2
   3db2a:	f880 31ce 	strb.w	r3, [r0, #462]	; 0x1ce
		if (conn->lll.role) {
   3db2e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3db32:	2b00      	cmp	r3, #0
   3db34:	dab1      	bge.n	3da9a <ull_conn_tx_ack+0x23e>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3db36:	4b21      	ldr	r3, [pc, #132]	; (3dbbc <ull_conn_tx_ack+0x360>)
   3db38:	e893 0003 	ldmia.w	r3, {r0, r1}
   3db3c:	ab02      	add	r3, sp, #8
   3db3e:	e903 0003 	stmdb	r3, {r0, r1}
			if (pdu_tx->llctrl.opcode ==
   3db42:	e7e0      	b.n	3db06 <ull_conn_tx_ack+0x2aa>
		conn->common.txn_lock = 0U;
   3db44:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   3db48:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
		conn->common.txn_lock = 0U;
   3db4c:	f36f 0341 	bfc	r3, #1, #1
   3db50:	f880 30e4 	strb.w	r3, [r0, #228]	; 0xe4
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   3db54:	f890 31bd 	ldrb.w	r3, [r0, #445]	; 0x1bd
   3db58:	428b      	cmp	r3, r1
   3db5a:	f43f ae9d 	beq.w	3d898 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   3db5e:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
   3db62:	f002 0307 	and.w	r3, r2, #7
   3db66:	2b03      	cmp	r3, #3
   3db68:	d005      	beq.n	3db76 <ull_conn_tx_ack+0x31a>
   3db6a:	3303      	adds	r3, #3
   3db6c:	f003 0307 	and.w	r3, r3, #7
   3db70:	2b01      	cmp	r3, #1
   3db72:	f63f af00 	bhi.w	3d976 <ull_conn_tx_ack+0x11a>
				conn->lll.max_tx_octets =
   3db76:	f8b7 31c2 	ldrh.w	r3, [r7, #450]	; 0x1c2
   3db7a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				conn->lll.max_tx_time =
   3db7e:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	; 0x1c6
   3db82:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   3db86:	f002 0307 	and.w	r3, r2, #7
   3db8a:	2b05      	cmp	r3, #5
   3db8c:	d030      	beq.n	3dbf0 <ull_conn_tx_ack+0x394>
				if (!conn->llcp_length.cache.tx_octets) {
   3db8e:	f8b7 31c8 	ldrh.w	r3, [r7, #456]	; 0x1c8
   3db92:	bb9b      	cbnz	r3, 3dbfc <ull_conn_tx_ack+0x3a0>
					conn->llcp_length.ack =
   3db94:	f887 11bd 	strb.w	r1, [r7, #445]	; 0x1bd
					conn->procedure_expire = 0U;
   3db98:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
					break;
   3db9c:	e67c      	b.n	3d898 <ull_conn_tx_ack+0x3c>
   3db9e:	bf00      	nop
   3dba0:	00052970 	.word	0x00052970
   3dba4:	00052b34 	.word	0x00052b34
   3dba8:	00052460 	.word	0x00052460
   3dbac:	00052b28 	.word	0x00052b28
   3dbb0:	20002d58 	.word	0x20002d58
   3dbb4:	00052b40 	.word	0x00052b40
   3dbb8:	200052e8 	.word	0x200052e8
   3dbbc:	00052b4c 	.word	0x00052b4c
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   3dbc0:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   3dbc4:	f003 0207 	and.w	r2, r3, #7
   3dbc8:	2a01      	cmp	r2, #1
   3dbca:	f47f ae65 	bne.w	3d898 <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   3dbce:	2202      	movs	r2, #2
   3dbd0:	f362 0302 	bfi	r3, r2, #0, #3
   3dbd4:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
   3dbd8:	e65e      	b.n	3d898 <ull_conn_tx_ack+0x3c>
		if (!conn->tx_ctrl) {
   3dbda:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
   3dbde:	2a00      	cmp	r2, #0
   3dbe0:	f47f af1d 	bne.w	3da1e <ull_conn_tx_ack+0x1c2>
			tx->next = conn->tx_head;
   3dbe4:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   3dbe6:	e9c7 4475 	strd	r4, r4, [r7, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3dbea:	f8c7 41dc 	str.w	r4, [r7, #476]	; 0x1dc
   3dbee:	e71e      	b.n	3da2e <ull_conn_tx_ack+0x1d2>
					conn->llcp_length.state =
   3dbf0:	2304      	movs	r3, #4
   3dbf2:	f363 0202 	bfi	r2, r3, #0, #3
   3dbf6:	f887 21be 	strb.w	r2, [r7, #446]	; 0x1be
					break;
   3dbfa:	e64d      	b.n	3d898 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.tx_octets =
   3dbfc:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2
				conn->llcp_length.cache.tx_octets = 0;
   3dc00:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3dc02:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   3dc06:	f8a7 31c8 	strh.w	r3, [r7, #456]	; 0x1c8
				conn->llcp_length.tx_time =
   3dc0a:	f8b7 31ca 	ldrh.w	r3, [r7, #458]	; 0x1ca
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3dc0e:	f887 21be 	strb.w	r2, [r7, #446]	; 0x1be
				conn->llcp_length.tx_time =
   3dc12:	f8a7 31c6 	strh.w	r3, [r7, #454]	; 0x1c6
				break;
   3dc16:	e63f      	b.n	3d898 <ull_conn_tx_ack+0x3c>
			conn->tx_data = conn->tx_data->next;
   3dc18:	681a      	ldr	r2, [r3, #0]
   3dc1a:	f8c7 21e0 	str.w	r2, [r7, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3dc1e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
   3dc22:	2a00      	cmp	r2, #0
   3dc24:	f47f aefb 	bne.w	3da1e <ull_conn_tx_ack+0x1c2>
			tx->next = conn->tx_head->next;
   3dc28:	681a      	ldr	r2, [r3, #0]
   3dc2a:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   3dc2c:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   3dc2e:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   3dc30:	e9c7 4476 	strd	r4, r4, [r7, #472]	; 0x1d8
   3dc34:	e6fb      	b.n	3da2e <ull_conn_tx_ack+0x1d2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dc36:	791a      	ldrb	r2, [r3, #4]
   3dc38:	f002 0203 	and.w	r2, r2, #3
   3dc3c:	2a03      	cmp	r2, #3
   3dc3e:	d002      	beq.n	3dc46 <ull_conn_tx_ack+0x3ea>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3dc40:	e9c7 3376 	strd	r3, r3, [r7, #472]	; 0x1d8
   3dc44:	e6eb      	b.n	3da1e <ull_conn_tx_ack+0x1c2>
	    ((pdu_data_tx->llctrl.opcode !=
   3dc46:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dc48:	2a03      	cmp	r2, #3
   3dc4a:	d0ed      	beq.n	3dc28 <ull_conn_tx_ack+0x3cc>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dc4c:	2a0a      	cmp	r2, #10
   3dc4e:	d1f7      	bne.n	3dc40 <ull_conn_tx_ack+0x3e4>
   3dc50:	e7ea      	b.n	3dc28 <ull_conn_tx_ack+0x3cc>
   3dc52:	bf00      	nop

0003dc54 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   3dc54:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3dc58:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3dc5c:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   3dc5e:	bf03      	ittte	eq
   3dc60:	3301      	addeq	r3, #1
   3dc62:	f880 30f0 	strbeq.w	r3, [r0, #240]	; 0xf0
	return 0;
   3dc66:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   3dc68:	200c      	movne	r0, #12
}
   3dc6a:	4770      	bx	lr

0003dc6c <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   3dc6c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	if (lll->enc_tx) {
   3dc70:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	switch (lll->phy_tx_time) {
   3dc74:	f3c3 1302 	ubfx	r3, r3, #4, #3
   3dc78:	2b02      	cmp	r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3dc7a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	return max_tx_octets;
   3dc7e:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3dc80:	bf15      	itete	ne
   3dc82:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   3dc84:	089b      	lsreq	r3, r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3dc86:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   3dc88:	3b0b      	subeq	r3, #11
   3dc8a:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   3dc8c:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   3dc8e:	bf44      	itt	mi
   3dc90:	3b04      	submi	r3, #4
   3dc92:	b29b      	uxthmi	r3, r3
}
   3dc94:	4298      	cmp	r0, r3
   3dc96:	bf28      	it	cs
   3dc98:	4618      	movcs	r0, r3
   3dc9a:	4770      	bx	lr

0003dc9c <ull_pdu_data_init>:
}
   3dc9c:	4770      	bx	lr
   3dc9e:	bf00      	nop

0003dca0 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   3dca0:	b510      	push	{r4, lr}
   3dca2:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   3dca4:	b930      	cbnz	r0, 3dcb4 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   3dca6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3dcaa:	f36f 0382 	bfc	r3, #2, #1
   3dcae:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   3dcb2:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   3dcb4:	4a09      	ldr	r2, [pc, #36]	; (3dcdc <ticker_update_latency_cancel_op_cb+0x3c>)
   3dcb6:	490a      	ldr	r1, [pc, #40]	; (3dce0 <ticker_update_latency_cancel_op_cb+0x40>)
   3dcb8:	480a      	ldr	r0, [pc, #40]	; (3dce4 <ticker_update_latency_cancel_op_cb+0x44>)
   3dcba:	f240 23af 	movw	r3, #687	; 0x2af
   3dcbe:	f00b fcd9 	bl	49674 <printk>
   3dcc2:	4040      	eors	r0, r0
   3dcc4:	f380 8811 	msr	BASEPRI, r0
   3dcc8:	f04f 0003 	mov.w	r0, #3
   3dccc:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   3dcce:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3dcd2:	f36f 0382 	bfc	r3, #2, #1
   3dcd6:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   3dcda:	bd10      	pop	{r4, pc}
   3dcdc:	00052b58 	.word	0x00052b58
   3dce0:	00052ba0 	.word	0x00052ba0
   3dce4:	00052460 	.word	0x00052460

0003dce8 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3dce8:	b900      	cbnz	r0, 3dcec <ticker_op_cb+0x4>
   3dcea:	4770      	bx	lr
{
   3dcec:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3dcee:	4a07      	ldr	r2, [pc, #28]	; (3dd0c <ticker_op_cb+0x24>)
   3dcf0:	4907      	ldr	r1, [pc, #28]	; (3dd10 <ticker_op_cb+0x28>)
   3dcf2:	4808      	ldr	r0, [pc, #32]	; (3dd14 <ticker_op_cb+0x2c>)
   3dcf4:	f240 23a7 	movw	r3, #679	; 0x2a7
   3dcf8:	f00b fcbc 	bl	49674 <printk>
   3dcfc:	4040      	eors	r0, r0
   3dcfe:	f380 8811 	msr	BASEPRI, r0
   3dd02:	f04f 0003 	mov.w	r0, #3
   3dd06:	df02      	svc	2
}
   3dd08:	bd08      	pop	{r3, pc}
   3dd0a:	bf00      	nop
   3dd0c:	00052b58 	.word	0x00052b58
   3dd10:	000529d0 	.word	0x000529d0
   3dd14:	00052460 	.word	0x00052460

0003dd18 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   3dd18:	2801      	cmp	r0, #1
   3dd1a:	d000      	beq.n	3dd1e <ticker_op_stop_adv_cb+0x6>
   3dd1c:	4770      	bx	lr
{
   3dd1e:	b510      	push	{r4, lr}
   3dd20:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   3dd22:	f7f9 fcff 	bl	37724 <ull_disable_mark_get>
   3dd26:	4284      	cmp	r4, r0
   3dd28:	d00c      	beq.n	3dd44 <ticker_op_stop_adv_cb+0x2c>
   3dd2a:	4a07      	ldr	r2, [pc, #28]	; (3dd48 <ticker_op_stop_adv_cb+0x30>)
   3dd2c:	4907      	ldr	r1, [pc, #28]	; (3dd4c <ticker_op_stop_adv_cb+0x34>)
   3dd2e:	4808      	ldr	r0, [pc, #32]	; (3dd50 <ticker_op_stop_adv_cb+0x38>)
   3dd30:	f240 239f 	movw	r3, #671	; 0x29f
   3dd34:	f00b fc9e 	bl	49674 <printk>
   3dd38:	4040      	eors	r0, r0
   3dd3a:	f380 8811 	msr	BASEPRI, r0
   3dd3e:	f04f 0003 	mov.w	r0, #3
   3dd42:	df02      	svc	2
}
   3dd44:	bd10      	pop	{r4, pc}
   3dd46:	bf00      	nop
   3dd48:	00052b58 	.word	0x00052b58
   3dd4c:	00052bb4 	.word	0x00052bb4
   3dd50:	00052460 	.word	0x00052460

0003dd54 <ull_periph_ticker_cb>:
{
   3dd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3dd58:	9c07      	ldr	r4, [sp, #28]
   3dd5a:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3dd5e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   3dd60:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3dd62:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3dd66:	4299      	cmp	r1, r3
   3dd68:	d026      	beq.n	3ddb8 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   3dd6a:	4606      	mov	r6, r0
   3dd6c:	4617      	mov	r7, r2
   3dd6e:	4601      	mov	r1, r0
   3dd70:	462a      	mov	r2, r5
   3dd72:	4620      	mov	r0, r4
   3dd74:	f7fd fee0 	bl	3bb38 <ull_conn_llcp>
		if (ret) {
   3dd78:	b9f0      	cbnz	r0, 3ddb8 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   3dd7a:	7823      	ldrb	r3, [r4, #0]
   3dd7c:	3301      	adds	r3, #1
   3dd7e:	b2db      	uxtb	r3, r3
   3dd80:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   3dd82:	b34b      	cbz	r3, 3ddd8 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   3dd84:	491b      	ldr	r1, [pc, #108]	; (3ddf4 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   3dd86:	4b1c      	ldr	r3, [pc, #112]	; (3ddf8 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   3dd88:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   3dd8a:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3dd8e:	2200      	movs	r2, #0
	p.param = &conn->lll;
   3dd90:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   3dd92:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   3dd96:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   3dd9a:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3dd9c:	2001      	movs	r0, #1
   3dd9e:	4611      	mov	r1, r2
   3dda0:	f7f5 fe76 	bl	33a90 <mayfly_enqueue>
	LL_ASSERT(!err);
   3dda4:	b950      	cbnz	r0, 3ddbc <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   3dda6:	20ff      	movs	r0, #255	; 0xff
   3dda8:	f7ff f954 	bl	3d054 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3ddac:	4620      	mov	r0, r4
   3ddae:	21ff      	movs	r1, #255	; 0xff
}
   3ddb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3ddb4:	f7ff bbc4 	b.w	3d540 <ull_conn_tx_lll_enqueue>
}
   3ddb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   3ddbc:	4a0f      	ldr	r2, [pc, #60]	; (3ddfc <ull_periph_ticker_cb+0xa8>)
   3ddbe:	4910      	ldr	r1, [pc, #64]	; (3de00 <ull_periph_ticker_cb+0xac>)
   3ddc0:	4810      	ldr	r0, [pc, #64]	; (3de04 <ull_periph_ticker_cb+0xb0>)
   3ddc2:	f240 232a 	movw	r3, #554	; 0x22a
   3ddc6:	f00b fc55 	bl	49674 <printk>
   3ddca:	4040      	eors	r0, r0
   3ddcc:	f380 8811 	msr	BASEPRI, r0
   3ddd0:	f04f 0003 	mov.w	r0, #3
   3ddd4:	df02      	svc	2
   3ddd6:	e7e6      	b.n	3dda6 <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   3ddd8:	4a08      	ldr	r2, [pc, #32]	; (3ddfc <ull_periph_ticker_cb+0xa8>)
   3ddda:	490b      	ldr	r1, [pc, #44]	; (3de08 <ull_periph_ticker_cb+0xb4>)
   3dddc:	4809      	ldr	r0, [pc, #36]	; (3de04 <ull_periph_ticker_cb+0xb0>)
   3ddde:	f240 231d 	movw	r3, #541	; 0x21d
   3dde2:	f00b fc47 	bl	49674 <printk>
   3dde6:	4040      	eors	r0, r0
   3dde8:	f380 8811 	msr	BASEPRI, r0
   3ddec:	f04f 0003 	mov.w	r0, #3
   3ddf0:	df02      	svc	2
   3ddf2:	e7c7      	b.n	3dd84 <ull_periph_ticker_cb+0x30>
   3ddf4:	20005800 	.word	0x20005800
   3ddf8:	20000ae0 	.word	0x20000ae0
   3ddfc:	00052b58 	.word	0x00052b58
   3de00:	0005263c 	.word	0x0005263c
   3de04:	00052460 	.word	0x00052460
   3de08:	000528d4 	.word	0x000528d4

0003de0c <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   3de0c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   3de0e:	b123      	cbz	r3, 3de1a <ull_periph_latency_cancel+0xe>
   3de10:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   3de14:	f012 0304 	ands.w	r3, r2, #4
   3de18:	d000      	beq.n	3de1c <ull_periph_latency_cancel+0x10>
   3de1a:	4770      	bx	lr
{
   3de1c:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   3de1e:	f042 0204 	orr.w	r2, r2, #4
{
   3de22:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   3de24:	4c11      	ldr	r4, [pc, #68]	; (3de6c <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   3de26:	f880 20e4 	strb.w	r2, [r0, #228]	; 0xe4
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   3de2a:	3105      	adds	r1, #5
   3de2c:	2201      	movs	r2, #1
   3de2e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   3de32:	e9cd 3404 	strd	r3, r4, [sp, #16]
   3de36:	e9cd 3300 	strd	r3, r3, [sp]
   3de3a:	9006      	str	r0, [sp, #24]
   3de3c:	b2ca      	uxtb	r2, r1
   3de3e:	4618      	mov	r0, r3
   3de40:	2103      	movs	r1, #3
   3de42:	f7f7 f873 	bl	34f2c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3de46:	f030 0302 	bics.w	r3, r0, #2
   3de4a:	d00c      	beq.n	3de66 <ull_periph_latency_cancel+0x5a>
   3de4c:	4a08      	ldr	r2, [pc, #32]	; (3de70 <ull_periph_latency_cancel+0x64>)
   3de4e:	4909      	ldr	r1, [pc, #36]	; (3de74 <ull_periph_latency_cancel+0x68>)
   3de50:	4809      	ldr	r0, [pc, #36]	; (3de78 <ull_periph_latency_cancel+0x6c>)
   3de52:	f240 13e3 	movw	r3, #483	; 0x1e3
   3de56:	f00b fc0d 	bl	49674 <printk>
   3de5a:	4040      	eors	r0, r0
   3de5c:	f380 8811 	msr	BASEPRI, r0
   3de60:	f04f 0003 	mov.w	r0, #3
   3de64:	df02      	svc	2
}
   3de66:	b008      	add	sp, #32
   3de68:	bd10      	pop	{r4, pc}
   3de6a:	bf00      	nop
   3de6c:	0003dca1 	.word	0x0003dca1
   3de70:	00052b58 	.word	0x00052b58
   3de74:	00052a50 	.word	0x00052a50
   3de78:	00052460 	.word	0x00052460

0003de7c <ll_start_enc_req_send>:
{
   3de7c:	b570      	push	{r4, r5, r6, lr}
   3de7e:	460e      	mov	r6, r1
   3de80:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   3de82:	f7fb fdb3 	bl	399ec <ll_connected_get>
	if (!conn) {
   3de86:	2800      	cmp	r0, #0
   3de88:	d040      	beq.n	3df0c <ll_start_enc_req_send+0x90>
	if (error_code) {
   3de8a:	4604      	mov	r4, r0
   3de8c:	b95e      	cbnz	r6, 3dea6 <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   3de8e:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3de92:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3de96:	429a      	cmp	r2, r3
   3de98:	d003      	beq.n	3dea2 <ll_start_enc_req_send+0x26>
   3de9a:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
   3de9e:	2b03      	cmp	r3, #3
   3dea0:	d026      	beq.n	3def0 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   3dea2:	200c      	movs	r0, #12
}
   3dea4:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   3dea6:	f890 0176 	ldrb.w	r0, [r0, #374]	; 0x176
   3deaa:	f010 0004 	ands.w	r0, r0, #4
   3deae:	d112      	bne.n	3ded6 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   3deb0:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3deb4:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3deb8:	429a      	cmp	r2, r3
   3deba:	d0f2      	beq.n	3dea2 <ll_start_enc_req_send+0x26>
   3debc:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3dec0:	2b03      	cmp	r3, #3
   3dec2:	d1ee      	bne.n	3dea2 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3dec4:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
			conn->llcp.encryption.error_code = error_code;
   3dec8:	f884 6101 	strb.w	r6, [r4, #257]	; 0x101
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3decc:	f360 0301 	bfi	r3, r0, #0, #2
   3ded0:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   3ded4:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   3ded6:	f894 2150 	ldrb.w	r2, [r4, #336]	; 0x150
			if (conn->llcp_terminate.ack !=
   3deda:	f894 3151 	ldrb.w	r3, [r4, #337]	; 0x151
   3dede:	4293      	cmp	r3, r2
   3dee0:	d1df      	bne.n	3dea2 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   3dee2:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   3dee4:	f884 6152 	strb.w	r6, [r4, #338]	; 0x152
			conn->llcp_terminate.req++;
   3dee8:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
	return 0;
   3deec:	2000      	movs	r0, #0
}
   3deee:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   3def0:	2210      	movs	r2, #16
   3def2:	4629      	mov	r1, r5
   3def4:	f200 1081 	addw	r0, r0, #385	; 0x181
   3def8:	f00d fcc7 	bl	4b88a <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3defc:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
   3df00:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   3df04:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
	return 0;
   3df08:	4630      	mov	r0, r6
}
   3df0a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3df0c:	2002      	movs	r0, #2
}
   3df0e:	bd70      	pop	{r4, r5, r6, pc}

0003df10 <ticker_op_stop_scan_cb>:
}
   3df10:	4770      	bx	lr
   3df12:	bf00      	nop

0003df14 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3df14:	b900      	cbnz	r0, 3df18 <ticker_op_cb+0x4>
   3df16:	4770      	bx	lr
{
   3df18:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3df1a:	4a07      	ldr	r2, [pc, #28]	; (3df38 <ticker_op_cb+0x24>)
   3df1c:	4907      	ldr	r1, [pc, #28]	; (3df3c <ticker_op_cb+0x28>)
   3df1e:	4808      	ldr	r0, [pc, #32]	; (3df40 <ticker_op_cb+0x2c>)
   3df20:	f240 43ad 	movw	r3, #1197	; 0x4ad
   3df24:	f00b fba6 	bl	49674 <printk>
   3df28:	4040      	eors	r0, r0
   3df2a:	f380 8811 	msr	BASEPRI, r0
   3df2e:	f04f 0003 	mov.w	r0, #3
   3df32:	df02      	svc	2
}
   3df34:	bd08      	pop	{r3, pc}
   3df36:	bf00      	nop
   3df38:	00052be4 	.word	0x00052be4
   3df3c:	000529d0 	.word	0x000529d0
   3df40:	00052460 	.word	0x00052460

0003df44 <ull_central_ticker_cb>:
{
   3df44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3df48:	9c07      	ldr	r4, [sp, #28]
   3df4a:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3df4e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   3df50:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3df52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3df56:	4299      	cmp	r1, r3
   3df58:	d02d      	beq.n	3dfb6 <ull_central_ticker_cb+0x72>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   3df5a:	4606      	mov	r6, r0
   3df5c:	4617      	mov	r7, r2
   3df5e:	4601      	mov	r1, r0
   3df60:	462a      	mov	r2, r5
   3df62:	4620      	mov	r0, r4
   3df64:	f7fd fde8 	bl	3bb38 <ull_conn_llcp>
		if (ret) {
   3df68:	bb28      	cbnz	r0, 3dfb6 <ull_central_ticker_cb+0x72>
   3df6a:	7823      	ldrb	r3, [r4, #0]
   3df6c:	3301      	adds	r3, #1
   3df6e:	b2db      	uxtb	r3, r3
   3df70:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   3df72:	b383      	cbz	r3, 3dfd6 <ull_central_ticker_cb+0x92>
	ull_conn_tx_demux(2);
   3df74:	2002      	movs	r0, #2
   3df76:	f7ff f86d 	bl	3d054 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   3df7a:	2102      	movs	r1, #2
   3df7c:	4620      	mov	r0, r4
   3df7e:	f7ff fadf 	bl	3d540 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   3df82:	491c      	ldr	r1, [pc, #112]	; (3dff4 <ull_central_ticker_cb+0xb0>)
	mfy.param = &p;
   3df84:	4b1c      	ldr	r3, [pc, #112]	; (3dff8 <ull_central_ticker_cb+0xb4>)
	p.lazy = lazy;
   3df86:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   3df88:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3df8c:	2200      	movs	r2, #0
	p.param = &conn->lll;
   3df8e:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   3df90:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   3df94:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   3df98:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3df9a:	2001      	movs	r0, #1
   3df9c:	4611      	mov	r1, r2
   3df9e:	f7f5 fd77 	bl	33a90 <mayfly_enqueue>
	LL_ASSERT(!err);
   3dfa2:	b950      	cbnz	r0, 3dfba <ull_central_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
   3dfa4:	20ff      	movs	r0, #255	; 0xff
   3dfa6:	f7ff f855 	bl	3d054 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3dfaa:	4620      	mov	r0, r4
   3dfac:	21ff      	movs	r1, #255	; 0xff
}
   3dfae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3dfb2:	f7ff bac5 	b.w	3d540 <ull_conn_tx_lll_enqueue>
}
   3dfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   3dfba:	4a10      	ldr	r2, [pc, #64]	; (3dffc <ull_central_ticker_cb+0xb8>)
   3dfbc:	4910      	ldr	r1, [pc, #64]	; (3e000 <ull_central_ticker_cb+0xbc>)
   3dfbe:	4811      	ldr	r0, [pc, #68]	; (3e004 <ull_central_ticker_cb+0xc0>)
   3dfc0:	f240 434d 	movw	r3, #1101	; 0x44d
   3dfc4:	f00b fb56 	bl	49674 <printk>
   3dfc8:	4040      	eors	r0, r0
   3dfca:	f380 8811 	msr	BASEPRI, r0
   3dfce:	f04f 0003 	mov.w	r0, #3
   3dfd2:	df02      	svc	2
   3dfd4:	e7e6      	b.n	3dfa4 <ull_central_ticker_cb+0x60>
	LL_ASSERT(ref);
   3dfd6:	4a09      	ldr	r2, [pc, #36]	; (3dffc <ull_central_ticker_cb+0xb8>)
   3dfd8:	490b      	ldr	r1, [pc, #44]	; (3e008 <ull_central_ticker_cb+0xc4>)
   3dfda:	480a      	ldr	r0, [pc, #40]	; (3e004 <ull_central_ticker_cb+0xc0>)
   3dfdc:	f240 433a 	movw	r3, #1082	; 0x43a
   3dfe0:	f00b fb48 	bl	49674 <printk>
   3dfe4:	4040      	eors	r0, r0
   3dfe6:	f380 8811 	msr	BASEPRI, r0
   3dfea:	f04f 0003 	mov.w	r0, #3
   3dfee:	df02      	svc	2
   3dff0:	e7c0      	b.n	3df74 <ull_central_ticker_cb+0x30>
   3dff2:	bf00      	nop
   3dff4:	20005818 	.word	0x20005818
   3dff8:	20000af0 	.word	0x20000af0
   3dffc:	00052be4 	.word	0x00052be4
   3e000:	0005263c 	.word	0x0005263c
   3e004:	00052460 	.word	0x00052460
   3e008:	000528d4 	.word	0x000528d4

0003e00c <ll_connect_disable>:
{
   3e00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e010:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   3e012:	2000      	movs	r0, #0
   3e014:	f7fa fdfa 	bl	38c0c <ull_scan_is_enabled_get>
	if (!scan) {
   3e018:	b368      	cbz	r0, 3e076 <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   3e01a:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   3e01c:	4604      	mov	r4, r0
   3e01e:	b353      	cbz	r3, 3e076 <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
   3e020:	f893 2020 	ldrb.w	r2, [r3, #32]
   3e024:	f042 0202 	orr.w	r2, r2, #2
   3e028:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   3e02c:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
   3e02e:	b317      	cbz	r7, 3e076 <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   3e030:	4601      	mov	r1, r0
   3e032:	2000      	movs	r0, #0
   3e034:	f7fa fd32 	bl	38a9c <ull_scan_disable>
	if (!err) {
   3e038:	4605      	mov	r5, r0
   3e03a:	b9c8      	cbnz	r0, 3e070 <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   3e03c:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
   3e03e:	f8d7 8154 	ldr.w	r8, [r7, #340]	; 0x154
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   3e042:	f507 79aa 	add.w	r9, r7, #340	; 0x154
		LL_ASSERT(link);
   3e046:	f1b8 0f00 	cmp.w	r8, #0
   3e04a:	d018      	beq.n	3e07e <ll_connect_disable+0x72>
		ll_rx_link_release(link);
   3e04c:	4640      	mov	r0, r8
   3e04e:	f7f9 fa79 	bl	37544 <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3e052:	2316      	movs	r3, #22
   3e054:	f887 3158 	strb.w	r3, [r7, #344]	; 0x158
		node_rx->hdr.handle = 0xffff;
   3e058:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3e05c:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
		scan_lll = &scan->lll;
   3e060:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   3e062:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   3e064:	f8c7 415c 	str.w	r4, [r7, #348]	; 0x15c
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   3e068:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
		*rx = node_rx;
   3e06c:	f8c6 9000 	str.w	r9, [r6]
}
   3e070:	4628      	mov	r0, r5
   3e072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   3e076:	250c      	movs	r5, #12
}
   3e078:	4628      	mov	r0, r5
   3e07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   3e07e:	4a07      	ldr	r2, [pc, #28]	; (3e09c <ll_connect_disable+0x90>)
   3e080:	4907      	ldr	r1, [pc, #28]	; (3e0a0 <ll_connect_disable+0x94>)
   3e082:	4808      	ldr	r0, [pc, #32]	; (3e0a4 <ll_connect_disable+0x98>)
   3e084:	f240 235b 	movw	r3, #603	; 0x25b
   3e088:	f00b faf4 	bl	49674 <printk>
   3e08c:	4040      	eors	r0, r0
   3e08e:	f380 8811 	msr	BASEPRI, r0
   3e092:	f04f 0003 	mov.w	r0, #3
   3e096:	df02      	svc	2
   3e098:	e7d8      	b.n	3e04c <ll_connect_disable+0x40>
   3e09a:	bf00      	nop
   3e09c:	00052be4 	.word	0x00052be4
   3e0a0:	000529c8 	.word	0x000529c8
   3e0a4:	00052460 	.word	0x00052460

0003e0a8 <ll_enc_req_send>:
{
   3e0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e0ac:	4607      	mov	r7, r0
   3e0ae:	4688      	mov	r8, r1
   3e0b0:	4691      	mov	r9, r2
   3e0b2:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   3e0b4:	f7fb fc9a 	bl	399ec <ll_connected_get>
	if (!conn) {
   3e0b8:	2800      	cmp	r0, #0
   3e0ba:	d06a      	beq.n	3e192 <ll_enc_req_send+0xea>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   3e0bc:	f890 2174 	ldrb.w	r2, [r0, #372]	; 0x174
   3e0c0:	f890 3175 	ldrb.w	r3, [r0, #373]	; 0x175
   3e0c4:	429a      	cmp	r2, r3
   3e0c6:	4604      	mov	r4, r0
   3e0c8:	d142      	bne.n	3e150 <ll_enc_req_send+0xa8>
   3e0ca:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3e0ce:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3e0d2:	429a      	cmp	r2, r3
   3e0d4:	d003      	beq.n	3e0de <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   3e0d6:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
   3e0da:	2b03      	cmp	r3, #3
   3e0dc:	d038      	beq.n	3e150 <ll_enc_req_send+0xa8>
	tx = ll_tx_mem_acquire();
   3e0de:	f7fb fc99 	bl	39a14 <ll_tx_mem_acquire>
	if (tx) {
   3e0e2:	4605      	mov	r5, r0
   3e0e4:	b3a0      	cbz	r0, 3e150 <ll_enc_req_send+0xa8>
		ull_pdu_data_init(pdu_data_tx);
   3e0e6:	3004      	adds	r0, #4
   3e0e8:	f7ff fdd8 	bl	3dc9c <ull_pdu_data_init>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   3e0ec:	4631      	mov	r1, r6
   3e0ee:	2210      	movs	r2, #16
   3e0f0:	f204 1081 	addw	r0, r4, #385	; 0x181
   3e0f4:	f00d fbc9 	bl	4b88a <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   3e0f8:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3e0fc:	f013 0318 	ands.w	r3, r3, #24
   3e100:	d029      	beq.n	3e156 <ll_enc_req_send+0xae>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   3e102:	2b18      	cmp	r3, #24
   3e104:	d121      	bne.n	3e14a <ll_enc_req_send+0xa2>
			memcpy(&conn->llcp_enc.rand[0], rand_num,
   3e106:	2208      	movs	r2, #8
   3e108:	4641      	mov	r1, r8
   3e10a:	f204 1079 	addw	r0, r4, #377	; 0x179
   3e10e:	f00d fbbc 	bl	4b88a <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   3e112:	f899 3000 	ldrb.w	r3, [r9]
   3e116:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
			conn->llcp_enc.ediv[1] = ediv[1];
   3e11a:	f899 3001 	ldrb.w	r3, [r9, #1]
   3e11e:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e122:	792b      	ldrb	r3, [r5, #4]
   3e124:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   3e128:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e12a:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   3e12c:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   3e12e:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   3e130:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   3e132:	4629      	mov	r1, r5
   3e134:	4638      	mov	r0, r7
   3e136:	f7fb fc79 	bl	39a2c <ll_tx_mem_enqueue>
   3e13a:	b930      	cbnz	r0, 3e14a <ll_enc_req_send+0xa2>
		conn->llcp_enc.req++;
   3e13c:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   3e140:	3301      	adds	r3, #1
   3e142:	f884 3174 	strb.w	r3, [r4, #372]	; 0x174
}
   3e146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   3e14a:	4628      	mov	r0, r5
   3e14c:	f7fb fc68 	bl	39a20 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   3e150:	200c      	movs	r0, #12
}
   3e152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e156:	792b      	ldrb	r3, [r5, #4]
   3e158:	f043 0303 	orr.w	r3, r3, #3
   3e15c:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   3e15e:	2317      	movs	r3, #23
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3e160:	2208      	movs	r2, #8
			pdu_data_tx->len =
   3e162:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   3e164:	2303      	movs	r3, #3
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3e166:	4641      	mov	r1, r8
			pdu_data_tx->llctrl.opcode =
   3e168:	71eb      	strb	r3, [r5, #7]
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3e16a:	18a8      	adds	r0, r5, r2
   3e16c:	f00d fb8d 	bl	4b88a <memcpy>
			enc_req->ediv[0] = ediv[0];
   3e170:	f899 3000 	ldrb.w	r3, [r9]
   3e174:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   3e176:	f899 3001 	ldrb.w	r3, [r9, #1]
   3e17a:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   3e17c:	2108      	movs	r1, #8
   3e17e:	f105 0012 	add.w	r0, r5, #18
   3e182:	f001 feb1 	bl	3fee8 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   3e186:	2104      	movs	r1, #4
   3e188:	f105 001a 	add.w	r0, r5, #26
   3e18c:	f001 feac 	bl	3fee8 <lll_csrand_get>
   3e190:	e7cf      	b.n	3e132 <ll_enc_req_send+0x8a>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3e192:	2002      	movs	r0, #2
}
   3e194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003e198 <ull_central_reset>:
{
   3e198:	b530      	push	{r4, r5, lr}
   3e19a:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
   3e19c:	a801      	add	r0, sp, #4
   3e19e:	f7ff ff35 	bl	3e00c <ll_connect_disable>
	if (!err) {
   3e1a2:	4604      	mov	r4, r0
   3e1a4:	b110      	cbz	r0, 3e1ac <ull_central_reset+0x14>
}
   3e1a6:	4620      	mov	r0, r4
   3e1a8:	b003      	add	sp, #12
   3e1aa:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   3e1ac:	f7fa fd2e 	bl	38c0c <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
   3e1b0:	4605      	mov	r5, r0
   3e1b2:	b150      	cbz	r0, 3e1ca <ull_central_reset+0x32>
		scan->is_enabled = 0U;
   3e1b4:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   3e1b8:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
   3e1ba:	f36f 0300 	bfc	r3, #0, #1
}
   3e1be:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
   3e1c0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   3e1c4:	622a      	str	r2, [r5, #32]
}
   3e1c6:	b003      	add	sp, #12
   3e1c8:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
   3e1ca:	4a07      	ldr	r2, [pc, #28]	; (3e1e8 <ull_central_reset+0x50>)
   3e1cc:	4907      	ldr	r1, [pc, #28]	; (3e1ec <ull_central_reset+0x54>)
   3e1ce:	4808      	ldr	r0, [pc, #32]	; (3e1f0 <ull_central_reset+0x58>)
   3e1d0:	f240 23e9 	movw	r3, #745	; 0x2e9
   3e1d4:	f00b fa4e 	bl	49674 <printk>
   3e1d8:	4040      	eors	r0, r0
   3e1da:	f380 8811 	msr	BASEPRI, r0
   3e1de:	f04f 0003 	mov.w	r0, #3
   3e1e2:	df02      	svc	2
   3e1e4:	e7e6      	b.n	3e1b4 <ull_central_reset+0x1c>
   3e1e6:	bf00      	nop
   3e1e8:	00052be4 	.word	0x00052be4
   3e1ec:	00052c28 	.word	0x00052c28
   3e1f0:	00052460 	.word	0x00052460

0003e1f4 <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   3e1f4:	6883      	ldr	r3, [r0, #8]
{
   3e1f6:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   3e1f8:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   3e1fa:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   3e1fc:	b31c      	cbz	r4, 3e246 <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   3e1fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
	scan->lll.conn = NULL;
   3e200:	2200      	movs	r2, #0
   3e202:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   3e204:	b163      	cbz	r3, 3e220 <ull_central_cleanup+0x2c>
   3e206:	4a1e      	ldr	r2, [pc, #120]	; (3e280 <ull_central_cleanup+0x8c>)
   3e208:	491e      	ldr	r1, [pc, #120]	; (3e284 <ull_central_cleanup+0x90>)
   3e20a:	481f      	ldr	r0, [pc, #124]	; (3e288 <ull_central_cleanup+0x94>)
   3e20c:	f240 3305 	movw	r3, #773	; 0x305
   3e210:	f00b fa30 	bl	49674 <printk>
   3e214:	4040      	eors	r0, r0
   3e216:	f380 8811 	msr	BASEPRI, r0
   3e21a:	f04f 0003 	mov.w	r0, #3
   3e21e:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   3e220:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   3e224:	f104 0048 	add.w	r0, r4, #72	; 0x48
   3e228:	f7f5 fbb2 	bl	33990 <memq_deinit>
	LL_ASSERT(link);
   3e22c:	4606      	mov	r6, r0
   3e22e:	b1c0      	cbz	r0, 3e262 <ull_central_cleanup+0x6e>
	ll_conn_release(conn);
   3e230:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
   3e232:	65a6      	str	r6, [r4, #88]	; 0x58
	ll_conn_release(conn);
   3e234:	f7fb fbc4 	bl	399c0 <ll_conn_release>
	scan->is_enabled = 0U;
   3e238:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   3e23c:	f36f 0300 	bfc	r3, #0, #1
   3e240:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   3e244:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   3e246:	4a0e      	ldr	r2, [pc, #56]	; (3e280 <ull_central_cleanup+0x8c>)
   3e248:	4910      	ldr	r1, [pc, #64]	; (3e28c <ull_central_cleanup+0x98>)
   3e24a:	480f      	ldr	r0, [pc, #60]	; (3e288 <ull_central_cleanup+0x94>)
   3e24c:	f240 3302 	movw	r3, #770	; 0x302
   3e250:	f00b fa10 	bl	49674 <printk>
   3e254:	4040      	eors	r0, r0
   3e256:	f380 8811 	msr	BASEPRI, r0
   3e25a:	f04f 0003 	mov.w	r0, #3
   3e25e:	df02      	svc	2
   3e260:	e7cd      	b.n	3e1fe <ull_central_cleanup+0xa>
	LL_ASSERT(link);
   3e262:	4a07      	ldr	r2, [pc, #28]	; (3e280 <ull_central_cleanup+0x8c>)
   3e264:	490a      	ldr	r1, [pc, #40]	; (3e290 <ull_central_cleanup+0x9c>)
   3e266:	4808      	ldr	r0, [pc, #32]	; (3e288 <ull_central_cleanup+0x94>)
   3e268:	f44f 7342 	mov.w	r3, #776	; 0x308
   3e26c:	f00b fa02 	bl	49674 <printk>
   3e270:	4040      	eors	r0, r0
   3e272:	f380 8811 	msr	BASEPRI, r0
   3e276:	f04f 0003 	mov.w	r0, #3
   3e27a:	df02      	svc	2
   3e27c:	e7d8      	b.n	3e230 <ull_central_cleanup+0x3c>
   3e27e:	bf00      	nop
   3e280:	00052be4 	.word	0x00052be4
   3e284:	000526bc 	.word	0x000526bc
   3e288:	00052460 	.word	0x00052460
   3e28c:	000526b0 	.word	0x000526b0
   3e290:	000529c8 	.word	0x000529c8

0003e294 <ull_central_chm_update>:
{
   3e294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (handle--) {
   3e296:	2505      	movs	r5, #5
		conn->llcp_type = LLCP_CHAN_MAP;
   3e298:	2702      	movs	r7, #2
	while (handle--) {
   3e29a:	f64f 76ff 	movw	r6, #65535	; 0xffff
		conn = ll_connected_get(handle);
   3e29e:	4628      	mov	r0, r5
   3e2a0:	f7fb fba4 	bl	399ec <ll_connected_get>
		if (!conn || conn->lll.role) {
   3e2a4:	4604      	mov	r4, r0
   3e2a6:	b1c0      	cbz	r0, 3e2da <ull_central_chm_update+0x46>
   3e2a8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e2ac:	2b00      	cmp	r3, #0
   3e2ae:	db14      	blt.n	3e2da <ull_central_chm_update+0x46>
		ret = ull_conn_llcp_req(conn);
   3e2b0:	f7ff fcd0 	bl	3dc54 <ull_conn_llcp_req>
   3e2b4:	4603      	mov	r3, r0
		ull_chan_map_get(conn->llcp.chan_map.chm);
   3e2b6:	f104 00f5 	add.w	r0, r4, #245	; 0xf5
		if (ret) {
   3e2ba:	b99b      	cbnz	r3, 3e2e4 <ull_central_chm_update+0x50>
		ull_chan_map_get(conn->llcp.chan_map.chm);
   3e2bc:	f000 f9d4 	bl	3e668 <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
   3e2c0:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_req++;
   3e2c4:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
		conn->llcp_type = LLCP_CHAN_MAP;
   3e2c8:	f884 70f2 	strb.w	r7, [r4, #242]	; 0xf2
		conn->llcp.chan_map.initiate = 1U;
   3e2cc:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_req++;
   3e2d0:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   3e2d2:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_req++;
   3e2d6:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
	while (handle--) {
   3e2da:	3d01      	subs	r5, #1
   3e2dc:	b2ad      	uxth	r5, r5
   3e2de:	42b5      	cmp	r5, r6
   3e2e0:	d1dd      	bne.n	3e29e <ull_central_chm_update+0xa>
	return 0;
   3e2e2:	2300      	movs	r3, #0
}
   3e2e4:	4618      	mov	r0, r3
   3e2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003e2e8 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   3e2e8:	6008      	str	r0, [r1, #0]
}
   3e2ea:	4770      	bx	lr

0003e2ec <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   3e2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e2f0:	b091      	sub	sp, #68	; 0x44
   3e2f2:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
   3e2f6:	9306      	str	r3, [sp, #24]
	if (conn_curr->lll.role) {
   3e2f8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   3e2fc:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   3e2fe:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   3e300:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
   3e304:	9007      	str	r0, [sp, #28]
	if (conn_curr->lll.role) {
   3e306:	2b00      	cmp	r3, #0
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   3e308:	920b      	str	r2, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
   3e30a:	da02      	bge.n	3e312 <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   3e30c:	4613      	mov	r3, r2
   3e30e:	3314      	adds	r3, #20
   3e310:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3e312:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3e314:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3e318:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
		LL_ASSERT(success);
   3e31c:	f8df b258 	ldr.w	fp, [pc, #600]	; 3e578 <win_offset_calc.constprop.0+0x28c>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3e320:	f88d 9033 	strb.w	r9, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
   3e324:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3e326:	f8cd 9014 	str.w	r9, [sp, #20]
		ticks_anchor_prev = offset_index = offset = 0U;
   3e32a:	46b2      	mov	sl, r6
	ticks_slot_abs_prev = 0U;
   3e32c:	9604      	str	r6, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3e32e:	4635      	mov	r5, r6
   3e330:	e046      	b.n	3e3c0 <win_offset_calc.constprop.0+0xd4>
		if (ticker_id == 0xff) {
   3e332:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3e336:	28ff      	cmp	r0, #255	; 0xff
   3e338:	d066      	beq.n	3e408 <win_offset_calc.constprop.0+0x11c>
		if ((ticker_id_prev != 0xff) &&
   3e33a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   3e33e:	d011      	beq.n	3e364 <win_offset_calc.constprop.0+0x78>
   3e340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3e342:	4553      	cmp	r3, sl
   3e344:	d00e      	beq.n	3e364 <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
   3e346:	498d      	ldr	r1, [pc, #564]	; (3e57c <win_offset_calc.constprop.0+0x290>)
   3e348:	488d      	ldr	r0, [pc, #564]	; (3e580 <win_offset_calc.constprop.0+0x294>)
   3e34a:	f240 13c3 	movw	r3, #451	; 0x1c3
   3e34e:	465a      	mov	r2, fp
   3e350:	f00b f990 	bl	49674 <printk>
   3e354:	4040      	eors	r0, r0
   3e356:	f380 8811 	msr	BASEPRI, r0
   3e35a:	f04f 0003 	mov.w	r0, #3
   3e35e:	df02      	svc	2
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
   3e360:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3e364:	1e83      	subs	r3, r0, #2
   3e366:	2b08      	cmp	r3, #8
   3e368:	d827      	bhi.n	3e3ba <win_offset_calc.constprop.0+0xce>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   3e36a:	2804      	cmp	r0, #4
   3e36c:	f240 8081 	bls.w	3e472 <win_offset_calc.constprop.0+0x186>
		if (ticker_id_other != 0xff) {
   3e370:	9b05      	ldr	r3, [sp, #20]
   3e372:	2bff      	cmp	r3, #255	; 0xff
   3e374:	d179      	bne.n	3e46a <win_offset_calc.constprop.0+0x17e>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   3e376:	3805      	subs	r0, #5
   3e378:	b280      	uxth	r0, r0
   3e37a:	f7fb fb2f 	bl	399dc <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   3e37e:	9b07      	ldr	r3, [sp, #28]
   3e380:	4283      	cmp	r3, r0
   3e382:	d01a      	beq.n	3e3ba <win_offset_calc.constprop.0+0xce>
   3e384:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3e386:	2b00      	cmp	r3, #0
   3e388:	f040 808c 	bne.w	3e4a4 <win_offset_calc.constprop.0+0x1b8>
   3e38c:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e390:	2b00      	cmp	r3, #0
   3e392:	db12      	blt.n	3e3ba <win_offset_calc.constprop.0+0xce>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3e394:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   3e396:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
   3e39a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3e39e:	3328      	adds	r3, #40	; 0x28
   3e3a0:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3e3a4:	681b      	ldr	r3, [r3, #0]
   3e3a6:	454b      	cmp	r3, r9
   3e3a8:	f0c0 808d 	bcc.w	3e4c6 <win_offset_calc.constprop.0+0x1da>
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   3e3ac:	9b08      	ldr	r3, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
   3e3ae:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   3e3b2:	9304      	str	r3, [sp, #16]
			ticker_id_prev = ticker_id;
   3e3b4:	464d      	mov	r5, r9
   3e3b6:	f89d 9033 	ldrb.w	r9, [sp, #51]	; 0x33
	} while (offset_index < *offset_max);
   3e3ba:	783b      	ldrb	r3, [r7, #0]
   3e3bc:	42a3      	cmp	r3, r4
   3e3be:	d95c      	bls.n	3e47a <win_offset_calc.constprop.0+0x18e>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3e3c0:	ab0f      	add	r3, sp, #60	; 0x3c
   3e3c2:	9302      	str	r3, [sp, #8]
   3e3c4:	4b6f      	ldr	r3, [pc, #444]	; (3e584 <win_offset_calc.constprop.0+0x298>)
   3e3c6:	9301      	str	r3, [sp, #4]
   3e3c8:	ab0d      	add	r3, sp, #52	; 0x34
   3e3ca:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
   3e3cc:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3e3ce:	ab0e      	add	r3, sp, #56	; 0x38
   3e3d0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   3e3d4:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   3e3d6:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3e3d8:	f7f6 fe02 	bl	34fe0 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   3e3dc:	2802      	cmp	r0, #2
   3e3de:	d056      	beq.n	3e48e <win_offset_calc.constprop.0+0x1a2>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   3e3e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   3e3e2:	2b00      	cmp	r3, #0
   3e3e4:	d0a5      	beq.n	3e332 <win_offset_calc.constprop.0+0x46>
   3e3e6:	4968      	ldr	r1, [pc, #416]	; (3e588 <win_offset_calc.constprop.0+0x29c>)
   3e3e8:	4865      	ldr	r0, [pc, #404]	; (3e580 <win_offset_calc.constprop.0+0x294>)
   3e3ea:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   3e3ee:	465a      	mov	r2, fp
   3e3f0:	f00b f940 	bl	49674 <printk>
   3e3f4:	4040      	eors	r0, r0
   3e3f6:	f380 8811 	msr	BASEPRI, r0
   3e3fa:	f04f 0003 	mov.w	r0, #3
   3e3fe:	df02      	svc	2
		if (ticker_id == 0xff) {
   3e400:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3e404:	28ff      	cmp	r0, #255	; 0xff
   3e406:	d198      	bne.n	3e33a <win_offset_calc.constprop.0+0x4e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   3e408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3e40a:	6819      	ldr	r1, [r3, #0]
		while (offset_index < *offset_max) {
   3e40c:	783b      	ldrb	r3, [r7, #0]
   3e40e:	42a9      	cmp	r1, r5
   3e410:	bf38      	it	cc
   3e412:	4629      	movcc	r1, r5
   3e414:	42a3      	cmp	r3, r4
   3e416:	d926      	bls.n	3e466 <win_offset_calc.constprop.0+0x17a>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e418:	9b04      	ldr	r3, [sp, #16]
   3e41a:	485c      	ldr	r0, [pc, #368]	; (3e58c <win_offset_calc.constprop.0+0x2a0>)
			if (offset >= conn_interval) {
   3e41c:	9d06      	ldr	r5, [sp, #24]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e41e:	440b      	add	r3, r1
   3e420:	fba0 2303 	umull	r2, r3, r0, r3
   3e424:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   3e428:	4295      	cmp	r5, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e42a:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   3e42e:	f240 8099 	bls.w	3e564 <win_offset_calc.constprop.0+0x278>
   3e432:	9e04      	ldr	r6, [sp, #16]
   3e434:	f8dd c018 	ldr.w	ip, [sp, #24]
   3e438:	e002      	b.n	3e440 <win_offset_calc.constprop.0+0x154>
   3e43a:	4594      	cmp	ip, r2
   3e43c:	f240 8092 	bls.w	3e564 <win_offset_calc.constprop.0+0x278>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   3e440:	eb08 0544 	add.w	r5, r8, r4, lsl #1
	dst[0] = val;
   3e444:	f808 3014 	strb.w	r3, [r8, r4, lsl #1]
	dst[1] = val >> 8;
   3e448:	0a12      	lsrs	r2, r2, #8
   3e44a:	706a      	strb	r2, [r5, #1]
		while (offset_index < *offset_max) {
   3e44c:	783d      	ldrb	r5, [r7, #0]
			offset_index++;
   3e44e:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   3e450:	3128      	adds	r1, #40	; 0x28
			offset_index++;
   3e452:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e454:	1873      	adds	r3, r6, r1
   3e456:	fba0 2303 	umull	r2, r3, r0, r3
		while (offset_index < *offset_max) {
   3e45a:	42a5      	cmp	r5, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3e45c:	f3c3 124f 	ubfx	r2, r3, #5, #16
   3e460:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   3e464:	d8e9      	bhi.n	3e43a <win_offset_calc.constprop.0+0x14e>
		*ticks_to_offset_next = ticks_to_expire_prev;
   3e466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3e468:	6019      	str	r1, [r3, #0]
	*offset_max = offset_index;
   3e46a:	703c      	strb	r4, [r7, #0]
}
   3e46c:	b011      	add	sp, #68	; 0x44
   3e46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (offset_index < *offset_max);
   3e472:	783b      	ldrb	r3, [r7, #0]
   3e474:	9005      	str	r0, [sp, #20]
   3e476:	42a3      	cmp	r3, r4
   3e478:	d8a2      	bhi.n	3e3c0 <win_offset_calc.constprop.0+0xd4>
	if (ticker_id == 0xff) {
   3e47a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3e47e:	2bff      	cmp	r3, #255	; 0xff
   3e480:	d1f3      	bne.n	3e46a <win_offset_calc.constprop.0+0x17e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   3e482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3e484:	6819      	ldr	r1, [r3, #0]
   3e486:	42a9      	cmp	r1, r5
   3e488:	bf38      	it	cc
   3e48a:	4629      	movcc	r1, r5
		while (offset_index < *offset_max) {
   3e48c:	e7eb      	b.n	3e466 <win_offset_calc.constprop.0+0x17a>
			while (ret_cb == TICKER_STATUS_BUSY) {
   3e48e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3e490:	2b02      	cmp	r3, #2
   3e492:	d1a5      	bne.n	3e3e0 <win_offset_calc.constprop.0+0xf4>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   3e494:	2102      	movs	r1, #2
   3e496:	2000      	movs	r0, #0
   3e498:	f7f6 fde8 	bl	3506c <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   3e49c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3e49e:	2b02      	cmp	r3, #2
   3e4a0:	d0f8      	beq.n	3e494 <win_offset_calc.constprop.0+0x1a8>
   3e4a2:	e79d      	b.n	3e3e0 <win_offset_calc.constprop.0+0xf4>
			if (conn->lll.role) {
   3e4a4:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3e4a8:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   3e4aa:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
			if (conn->lll.role) {
   3e4ae:	2b00      	cmp	r3, #0
   3e4b0:	da4c      	bge.n	3e54c <win_offset_calc.constprop.0+0x260>
				ticks_slot_abs_curr += ticks_slot_margin;
   3e4b2:	f101 033c 	add.w	r3, r1, #60	; 0x3c
   3e4b6:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3e4ba:	681b      	ldr	r3, [r3, #0]
   3e4bc:	454b      	cmp	r3, r9
				ticks_slot_margin =
   3e4be:	f04f 0a14 	mov.w	sl, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3e4c2:	f4bf af73 	bcs.w	3e3ac <win_offset_calc.constprop.0+0xc0>
				if (ticks_to_expire_prev <
   3e4c6:	429d      	cmp	r5, r3
   3e4c8:	bf38      	it	cc
   3e4ca:	461d      	movcc	r5, r3
				while ((offset_index < *offset_max) &&
   3e4cc:	783b      	ldrb	r3, [r7, #0]
   3e4ce:	42a3      	cmp	r3, r4
   3e4d0:	d931      	bls.n	3e536 <win_offset_calc.constprop.0+0x24a>
					(ticks_slot_abs_prev + ticks_slot_abs +
   3e4d2:	9b04      	ldr	r3, [sp, #16]
   3e4d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3e4d6:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
   3e4da:	4413      	add	r3, r2
   3e4dc:	449a      	add	sl, r3
   3e4de:	46b0      	mov	r8, r6
   3e4e0:	462e      	mov	r6, r5
   3e4e2:	4655      	mov	r5, sl
   3e4e4:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
   3e4e8:	e013      	b.n	3e512 <win_offset_calc.constprop.0+0x226>
					if (offset >= conn_interval) {
   3e4ea:	9a06      	ldr	r2, [sp, #24]
					offset = (ticks_to_expire_prev +
   3e4ec:	f3c3 184f 	ubfx	r8, r3, #5, #16
					if (offset >= conn_interval) {
   3e4f0:	4590      	cmp	r8, r2
					ticks_to_expire_prev +=
   3e4f2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3e4f6:	ea4f 2018 	mov.w	r0, r8, lsr #8
						  ticks_slot_abs_prev) /
   3e4fa:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
   3e4fe:	d235      	bcs.n	3e56c <win_offset_calc.constprop.0+0x280>
	dst[0] = val;
   3e500:	f80a 3014 	strb.w	r3, [sl, r4, lsl #1]
	dst[1] = val >> 8;
   3e504:	f88c 0001 	strb.w	r0, [ip, #1]
				while ((offset_index < *offset_max) &&
   3e508:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   3e50a:	fa5f f48e 	uxtb.w	r4, lr
				while ((offset_index < *offset_max) &&
   3e50e:	42a3      	cmp	r3, r4
   3e510:	d922      	bls.n	3e558 <win_offset_calc.constprop.0+0x26c>
				       (ticker_ticks_diff_get(
   3e512:	4631      	mov	r1, r6
   3e514:	4648      	mov	r0, r9
   3e516:	f7f6 fdc3 	bl	350a0 <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
   3e51a:	9b04      	ldr	r3, [sp, #16]
   3e51c:	4a1b      	ldr	r2, [pc, #108]	; (3e58c <win_offset_calc.constprop.0+0x2a0>)
   3e51e:	4433      	add	r3, r6
				while ((offset_index < *offset_max) &&
   3e520:	42a8      	cmp	r0, r5
						  ticks_slot_abs_prev) /
   3e522:	fba2 e303 	umull	lr, r3, r2, r3
					sys_put_le16(offset,
   3e526:	eb0a 0c44 	add.w	ip, sl, r4, lsl #1
					offset_index++;
   3e52a:	f104 0e01 	add.w	lr, r4, #1
				while ((offset_index < *offset_max) &&
   3e52e:	d2dc      	bcs.n	3e4ea <win_offset_calc.constprop.0+0x1fe>
   3e530:	4635      	mov	r5, r6
   3e532:	4646      	mov	r6, r8
   3e534:	46d0      	mov	r8, sl
				*ticks_to_offset_next = ticks_to_expire_prev;
   3e536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3e538:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   3e53a:	9b06      	ldr	r3, [sp, #24]
   3e53c:	42b3      	cmp	r3, r6
   3e53e:	f63f af35 	bhi.w	3e3ac <win_offset_calc.constprop.0+0xc0>
	if (ticker_id == 0xff) {
   3e542:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3e546:	2bff      	cmp	r3, #255	; 0xff
   3e548:	d18f      	bne.n	3e46a <win_offset_calc.constprop.0+0x17e>
   3e54a:	e75d      	b.n	3e408 <win_offset_calc.constprop.0+0x11c>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3e54c:	f101 0328 	add.w	r3, r1, #40	; 0x28
   3e550:	9308      	str	r3, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
   3e552:	f04f 0a00 	mov.w	sl, #0
   3e556:	e724      	b.n	3e3a2 <win_offset_calc.constprop.0+0xb6>
				*ticks_to_offset_next = ticks_to_expire_prev;
   3e558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3e55a:	4635      	mov	r5, r6
   3e55c:	601d      	str	r5, [r3, #0]
   3e55e:	4646      	mov	r6, r8
   3e560:	46d0      	mov	r8, sl
				if (offset >= conn_interval) {
   3e562:	e723      	b.n	3e3ac <win_offset_calc.constprop.0+0xc0>
		*ticks_to_offset_next = ticks_to_expire_prev;
   3e564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
   3e566:	2100      	movs	r1, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   3e568:	6019      	str	r1, [r3, #0]
   3e56a:	e77e      	b.n	3e46a <win_offset_calc.constprop.0+0x17e>
				*ticks_to_offset_next = ticks_to_expire_prev;
   3e56c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3e56e:	2500      	movs	r5, #0
   3e570:	46d0      	mov	r8, sl
   3e572:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   3e574:	e7e5      	b.n	3e542 <win_offset_calc.constprop.0+0x256>
   3e576:	bf00      	nop
   3e578:	00052c30 	.word	0x00052c30
   3e57c:	000524c0 	.word	0x000524c0
   3e580:	00052460 	.word	0x00052460
   3e584:	0003e2e9 	.word	0x0003e2e9
   3e588:	00052c74 	.word	0x00052c74
   3e58c:	cccccccd 	.word	0xcccccccd

0003e590 <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   3e590:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   3e592:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   3e594:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   3e596:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   3e598:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   3e59a:	89c0      	ldrh	r0, [r0, #14]
   3e59c:	6909      	ldr	r1, [r1, #16]
   3e59e:	3310      	adds	r3, #16
   3e5a0:	f7e9 be4a 	b.w	28238 <after_mstr_offset_get>

0003e5a4 <ull_sched_mfy_win_offset_use>:
{
   3e5a4:	b510      	push	{r4, lr}
   3e5a6:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   3e5a8:	f8d0 20fc 	ldr.w	r2, [r0, #252]	; 0xfc
   3e5ac:	6901      	ldr	r1, [r0, #16]
   3e5ae:	f500 7392 	add.w	r3, r0, #292	; 0x124
   3e5b2:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   3e5b4:	f7e9 fe40 	bl	28238 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   3e5b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   3e5bc:	4908      	ldr	r1, [pc, #32]	; (3e5e0 <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   3e5be:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   3e5c2:	fba1 1303 	umull	r1, r3, r1, r3
   3e5c6:	0a9b      	lsrs	r3, r3, #10
   3e5c8:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   3e5cc:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   3e5ce:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   3e5d0:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   3e5d4:	2204      	movs	r2, #4
   3e5d6:	f362 0302 	bfi	r3, r2, #0, #3
   3e5da:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
}
   3e5de:	bd10      	pop	{r4, pc}
   3e5e0:	d1b71759 	.word	0xd1b71759

0003e5e4 <ull_sched_mfy_free_win_offset_calc>:
{
   3e5e4:	b510      	push	{r4, lr}
	if (conn->lll.role) {
   3e5e6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	uint32_t ticks_to_offset_default = 0U;
   3e5ea:	2100      	movs	r1, #0
{
   3e5ec:	b084      	sub	sp, #16
	if (conn->lll.role) {
   3e5ee:	428b      	cmp	r3, r1
		conn->llcp_conn_param.ticks_to_offset_next =
   3e5f0:	bfbc      	itt	lt
   3e5f2:	f8d0 30ec 	ldrlt.w	r3, [r0, #236]	; 0xec
   3e5f6:	f8c0 31b8 	strlt.w	r3, [r0, #440]	; 0x1b8
	uint8_t offset_max = 6U;
   3e5fa:	f04f 0206 	mov.w	r2, #6
{
   3e5fe:	4604      	mov	r4, r0
	uint8_t offset_max = 6U;
   3e600:	f88d 200b 	strb.w	r2, [sp, #11]
		ticks_to_offset_next =
   3e604:	bfb8      	it	lt
   3e606:	f500 72dc 	addlt.w	r2, r0, #440	; 0x1b8
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3e60a:	f8d0 01b0 	ldr.w	r0, [r0, #432]	; 0x1b0
	uint32_t ticks_to_offset_default = 0U;
   3e60e:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3e610:	f10d 010b 	add.w	r1, sp, #11
   3e614:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
	ticks_to_offset_next = &ticks_to_offset_default;
   3e618:	bfa8      	it	ge
   3e61a:	aa03      	addge	r2, sp, #12
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3e61c:	e9cd 1000 	strd	r1, r0, [sp]
   3e620:	2100      	movs	r1, #0
   3e622:	4620      	mov	r0, r4
   3e624:	f7ff fe62 	bl	3e2ec <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   3e628:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3e62c:	2208      	movs	r2, #8
   3e62e:	f362 0303 	bfi	r3, r2, #0, #4
   3e632:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
}
   3e636:	b004      	add	sp, #16
   3e638:	bd10      	pop	{r4, pc}
   3e63a:	bf00      	nop

0003e63c <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
   3e63c:	b510      	push	{r4, lr}
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
   3e63e:	4c08      	ldr	r4, [pc, #32]	; (3e660 <ll_chm_update+0x24>)
   3e640:	2205      	movs	r2, #5
{
   3e642:	4601      	mov	r1, r0
	(void)memcpy(map, chan_map, sizeof(map));
   3e644:	4620      	mov	r0, r4
   3e646:	f00d f920 	bl	4b88a <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   3e64a:	2105      	movs	r1, #5
   3e64c:	4620      	mov	r0, r4
   3e64e:	f7f5 fb19 	bl	33c84 <util_ones_count_get>
   3e652:	4b04      	ldr	r3, [pc, #16]	; (3e664 <ll_chm_update+0x28>)
   3e654:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
   3e656:	f7ff fe1d 	bl	3e294 <ull_central_chm_update>
}
   3e65a:	2000      	movs	r0, #0
   3e65c:	bd10      	pop	{r4, pc}
   3e65e:	bf00      	nop
   3e660:	20000b00 	.word	0x20000b00
   3e664:	20000d80 	.word	0x20000d80

0003e668 <ull_chan_map_get>:
{
   3e668:	b508      	push	{r3, lr}
	(void)memcpy(chan_map, map, sizeof(map));
   3e66a:	4903      	ldr	r1, [pc, #12]	; (3e678 <ull_chan_map_get+0x10>)
   3e66c:	2205      	movs	r2, #5
   3e66e:	f00d f90c 	bl	4b88a <memcpy>
	return count;
   3e672:	4b02      	ldr	r3, [pc, #8]	; (3e67c <ull_chan_map_get+0x14>)
}
   3e674:	7818      	ldrb	r0, [r3, #0]
   3e676:	bd08      	pop	{r3, pc}
   3e678:	20000b00 	.word	0x20000b00
   3e67c:	20000d80 	.word	0x20000d80

0003e680 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   3e680:	b510      	push	{r4, lr}
   3e682:	4604      	mov	r4, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3e684:	7800      	ldrb	r0, [r0, #0]
{
   3e686:	f89d c008 	ldrb.w	ip, [sp, #8]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3e68a:	fb02 1101 	mla	r1, r2, r1, r1
   3e68e:	4a1a      	ldr	r2, [pc, #104]	; (3e6f8 <lll_chan_sel_1+0x78>)
   3e690:	4401      	add	r1, r0
   3e692:	fb82 0201 	smull	r0, r2, r2, r1
   3e696:	440a      	add	r2, r1
   3e698:	1152      	asrs	r2, r2, #5
   3e69a:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   3e69e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   3e6a2:	1a8a      	subs	r2, r1, r2
   3e6a4:	b2d0      	uxtb	r0, r2
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3e6a6:	08c1      	lsrs	r1, r0, #3
	*chan_use = chan_next;
   3e6a8:	7020      	strb	r0, [r4, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3e6aa:	5c59      	ldrb	r1, [r3, r1]
   3e6ac:	f002 0207 	and.w	r2, r2, #7
   3e6b0:	fa41 f202 	asr.w	r2, r1, r2
   3e6b4:	f012 0201 	ands.w	r2, r2, #1
   3e6b8:	d11d      	bne.n	3e6f6 <lll_chan_sel_1+0x76>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   3e6ba:	fbb0 f1fc 	udiv	r1, r0, ip
   3e6be:	fb0c 0111 	mls	r1, ip, r1, r0
   3e6c2:	1e5c      	subs	r4, r3, #1
   3e6c4:	b2c9      	uxtb	r1, r1
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   3e6c6:	3304      	adds	r3, #4
	chan_next = 0U;
   3e6c8:	4610      	mov	r0, r2
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   3e6ca:	f100 0e08 	add.w	lr, r0, #8
   3e6ce:	f814 2f01 	ldrb.w	r2, [r4, #1]!
		bit_count = 8U;
		while (bit_count--) {
   3e6d2:	fa5f fe8e 	uxtb.w	lr, lr
			if (bite & 0x01) {
   3e6d6:	f012 0f01 	tst.w	r2, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   3e6da:	f100 0c01 	add.w	ip, r0, #1
			bite >>= 1;
   3e6de:	ea4f 0252 	mov.w	r2, r2, lsr #1
			if (bite & 0x01) {
   3e6e2:	d002      	beq.n	3e6ea <lll_chan_sel_1+0x6a>
				if (chan_index == 0U) {
   3e6e4:	b139      	cbz	r1, 3e6f6 <lll_chan_sel_1+0x76>
				chan_index--;
   3e6e6:	3901      	subs	r1, #1
   3e6e8:	b2c9      	uxtb	r1, r1
			chan_next++;
   3e6ea:	fa5f f08c 	uxtb.w	r0, ip
		while (bit_count--) {
   3e6ee:	4586      	cmp	lr, r0
   3e6f0:	d1f1      	bne.n	3e6d6 <lll_chan_sel_1+0x56>
	while (byte_count--) {
   3e6f2:	429c      	cmp	r4, r3
   3e6f4:	d1e9      	bne.n	3e6ca <lll_chan_sel_1+0x4a>
}
   3e6f6:	bd10      	pop	{r4, pc}
   3e6f8:	dd67c8a7 	.word	0xdd67c8a7

0003e6fc <lll_chan_id>:
	return aa_ms ^ aa_ls;
   3e6fc:	8842      	ldrh	r2, [r0, #2]
   3e6fe:	8800      	ldrh	r0, [r0, #0]
}
   3e700:	4050      	eors	r0, r2
   3e702:	4770      	bx	lr

0003e704 <lll_chan_sel_2>:
{
   3e704:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3e706:	4d2f      	ldr	r5, [pc, #188]	; (3e7c4 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3e708:	4c2f      	ldr	r4, [pc, #188]	; (3e7c8 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   3e70a:	4048      	eors	r0, r1
   3e70c:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3e710:	0a06      	lsrs	r6, r0, #8
   3e712:	fa5f fe80 	uxtb.w	lr, r0
   3e716:	eb0e 2e8e 	add.w	lr, lr, lr, lsl #10
   3e71a:	eb06 2086 	add.w	r0, r6, r6, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3e71e:	ea04 1740 	and.w	r7, r4, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3e722:	ea05 0640 	and.w	r6, r5, r0, lsl #1
   3e726:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3e72a:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3e72e:	433e      	orrs	r6, r7
   3e730:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3e734:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   3e738:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   3e73c:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   3e740:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   3e744:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   3e746:	f3c0 4007 	ubfx	r0, r0, #16, #8
   3e74a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3e74e:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   3e752:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3e756:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   3e758:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3e75c:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   3e75e:	d1d7      	bne.n	3e710 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   3e760:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   3e762:	481a      	ldr	r0, [pc, #104]	; (3e7cc <lll_chan_sel_2+0xc8>)
   3e764:	fba0 4001 	umull	r4, r0, r0, r1
   3e768:	1a0c      	subs	r4, r1, r0
   3e76a:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   3e76e:	0940      	lsrs	r0, r0, #5
   3e770:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   3e774:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   3e778:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3e77a:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   3e77e:	f000 0507 	and.w	r5, r0, #7
   3e782:	5d14      	ldrb	r4, [r2, r4]
   3e784:	412c      	asrs	r4, r5
   3e786:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   3e788:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3e78a:	d41a      	bmi.n	3e7c2 <lll_chan_sel_2+0xbe>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   3e78c:	fb01 f303 	mul.w	r3, r1, r3
   3e790:	1e56      	subs	r6, r2, #1
   3e792:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   3e796:	3204      	adds	r2, #4
	chan_next = 0U;
   3e798:	4660      	mov	r0, ip
		bite = *chan_map;
   3e79a:	f100 0508 	add.w	r5, r0, #8
   3e79e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   3e7a2:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   3e7a4:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   3e7a8:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   3e7ac:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   3e7b0:	d002      	beq.n	3e7b8 <lll_chan_sel_2+0xb4>
				if (chan_index == 0U) {
   3e7b2:	b133      	cbz	r3, 3e7c2 <lll_chan_sel_2+0xbe>
				chan_index--;
   3e7b4:	3b01      	subs	r3, #1
   3e7b6:	b2db      	uxtb	r3, r3
			chan_next++;
   3e7b8:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   3e7ba:	42a8      	cmp	r0, r5
   3e7bc:	d1f2      	bne.n	3e7a4 <lll_chan_sel_2+0xa0>
	while (byte_count--) {
   3e7be:	42b2      	cmp	r2, r6
   3e7c0:	d1eb      	bne.n	3e79a <lll_chan_sel_2+0x96>
}
   3e7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3e7c4:	00022110 	.word	0x00022110
   3e7c8:	00088440 	.word	0x00088440
   3e7cc:	bacf914d 	.word	0xbacf914d

0003e7d0 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   3e7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e7d4:	4d18      	ldr	r5, [pc, #96]	; (3e838 <rl_update+0x68>)
   3e7d6:	4e19      	ldr	r6, [pc, #100]	; (3e83c <rl_update+0x6c>)
   3e7d8:	2400      	movs	r4, #0
   3e7da:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   3e7de:	1eaf      	subs	r7, r5, #2
   3e7e0:	f04f 0801 	mov.w	r8, #1
   3e7e4:	e006      	b.n	3e7f4 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3e7e6:	3401      	adds	r4, #1
   3e7e8:	2c08      	cmp	r4, #8
   3e7ea:	f105 0506 	add.w	r5, r5, #6
   3e7ee:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3e7f2:	d01f      	beq.n	3e834 <rl_update+0x64>
		if (rl[i].taken) {
   3e7f4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3e7f8:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   3e7fc:	07da      	lsls	r2, r3, #31
   3e7fe:	d5f2      	bpl.n	3e7e6 <rl_update+0x16>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3e800:	787a      	ldrb	r2, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   3e802:	f897 c000 	ldrb.w	ip, [r7]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   3e806:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   3e80a:	fa08 f104 	lsl.w	r1, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3e80e:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   3e810:	ea4c 0c01 	orr.w	ip, ip, r1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3e814:	4313      	orrs	r3, r2
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3e816:	4631      	mov	r1, r6
   3e818:	4628      	mov	r0, r5
   3e81a:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3e81c:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   3e81e:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3e822:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3e824:	f00d f831 	bl	4b88a <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3e828:	2c08      	cmp	r4, #8
   3e82a:	f105 0506 	add.w	r5, r5, #6
   3e82e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3e832:	d1df      	bne.n	3e7f4 <rl_update+0x24>
}
   3e834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3e838:	20005a96 	.word	0x20005a96
   3e83c:	20005955 	.word	0x20005955

0003e840 <fal_update>:
{
   3e840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3e844:	4e21      	ldr	r6, [pc, #132]	; (3e8cc <fal_update+0x8c>)
   3e846:	4d22      	ldr	r5, [pc, #136]	; (3e8d0 <fal_update+0x90>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3e848:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3e8d4 <fal_update+0x94>
   3e84c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3e8d8 <fal_update+0x98>
{
   3e850:	2400      	movs	r4, #0
   3e852:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   3e856:	1eb7      	subs	r7, r6, #2
		if (!fal[i].taken) {
   3e858:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   3e85c:	f04f 0c01 	mov.w	ip, #1
		if (!fal[i].taken) {
   3e860:	f013 0f01 	tst.w	r3, #1
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3e864:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   3e866:	fa0c fc04 	lsl.w	ip, ip, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3e86a:	4629      	mov	r1, r5
	for (i = 0U; i < FAL_SIZE; i++) {
   3e86c:	f106 0606 	add.w	r6, r6, #6
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3e870:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   3e874:	d023      	beq.n	3e8be <fal_update+0x7e>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3e876:	f898 e000 	ldrb.w	lr, [r8]
		j = fal[i].rl_idx;
   3e87a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3e87e:	f1be 0f00 	cmp.w	lr, #0
   3e882:	d00a      	beq.n	3e89a <fal_update+0x5a>
   3e884:	2b07      	cmp	r3, #7
   3e886:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   3e88a:	d806      	bhi.n	3e89a <fal_update+0x5a>
   3e88c:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   3e890:	f013 0f04 	tst.w	r3, #4
   3e894:	d001      	beq.n	3e89a <fal_update+0x5a>
   3e896:	06db      	lsls	r3, r3, #27
   3e898:	d511      	bpl.n	3e8be <fal_update+0x7e>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   3e89a:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   3e89e:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   3e8a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   3e8a6:	ea4e 0e0c 	orr.w	lr, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3e8aa:	f897 c001 	ldrb.w	ip, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   3e8ae:	f887 e000 	strb.w	lr, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3e8b2:	40a3      	lsls	r3, r4
   3e8b4:	ea4c 0303 	orr.w	r3, ip, r3
   3e8b8:	707b      	strb	r3, [r7, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3e8ba:	f00c ffe6 	bl	4b88a <memcpy>
	for (i = 0U; i < FAL_SIZE; i++) {
   3e8be:	3401      	adds	r4, #1
   3e8c0:	2c08      	cmp	r4, #8
   3e8c2:	f105 0508 	add.w	r5, r5, #8
   3e8c6:	d1c7      	bne.n	3e858 <fal_update+0x18>
}
   3e8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3e8cc:	2000586a 	.word	0x2000586a
   3e8d0:	2000582a 	.word	0x2000582a
   3e8d4:	20006dd4 	.word	0x20006dd4
   3e8d8:	20005954 	.word	0x20005954

0003e8dc <ll_fal_size_get>:
}
   3e8dc:	2008      	movs	r0, #8
   3e8de:	4770      	bx	lr

0003e8e0 <ll_fal_clear>:
{
   3e8e0:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   3e8e2:	2000      	movs	r0, #0
   3e8e4:	f7f9 ff94 	bl	38810 <ull_adv_filter_pol_get>
   3e8e8:	b9f0      	cbnz	r0, 3e928 <ll_fal_clear+0x48>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3e8ea:	f7fa f9c3 	bl	38c74 <ull_scan_filter_pol_get>
   3e8ee:	f010 0001 	ands.w	r0, r0, #1
   3e8f2:	d119      	bne.n	3e928 <ll_fal_clear+0x48>
   3e8f4:	4a0d      	ldr	r2, [pc, #52]	; (3e92c <ll_fal_clear+0x4c>)
			rl[j].fal = 0U;
   3e8f6:	4c0e      	ldr	r4, [pc, #56]	; (3e930 <ll_fal_clear+0x50>)
		uint8_t j = fal[i].rl_idx;
   3e8f8:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   3e8fc:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   3e8fe:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   3e900:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   3e904:	d805      	bhi.n	3e912 <ll_fal_clear+0x32>
			rl[j].fal = 0U;
   3e906:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   3e90a:	f36f 1345 	bfc	r3, #5, #1
   3e90e:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   3e912:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   3e916:	f36f 0300 	bfc	r3, #0, #1
   3e91a:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   3e91e:	3001      	adds	r0, #1
   3e920:	2808      	cmp	r0, #8
   3e922:	d1e9      	bne.n	3e8f8 <ll_fal_clear+0x18>
	return 0;
   3e924:	2000      	movs	r0, #0
}
   3e926:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3e928:	200c      	movs	r0, #12
}
   3e92a:	bd10      	pop	{r4, pc}
   3e92c:	20005828 	.word	0x20005828
   3e930:	20005954 	.word	0x20005954

0003e934 <ll_fal_add>:
{
   3e934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e938:	4607      	mov	r7, r0
   3e93a:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   3e93c:	2000      	movs	r0, #0
   3e93e:	f7f9 ff67 	bl	38810 <ull_adv_filter_pol_get>
   3e942:	2800      	cmp	r0, #0
   3e944:	d16f      	bne.n	3ea26 <ll_fal_add+0xf2>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3e946:	f7fa f995 	bl	38c74 <ull_scan_filter_pol_get>
   3e94a:	f010 0401 	ands.w	r4, r0, #1
   3e94e:	d16a      	bne.n	3ea26 <ll_fal_add+0xf2>
	if (addr->type == ADDR_TYPE_ANON) {
   3e950:	f897 a000 	ldrb.w	sl, [r7]
   3e954:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   3e958:	d069      	beq.n	3ea2e <ll_fal_add+0xfa>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   3e95a:	4e41      	ldr	r6, [pc, #260]	; (3ea60 <ll_fal_add+0x12c>)
   3e95c:	f107 0b01 	add.w	fp, r7, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3e960:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   3e964:	f04f 09ff 	mov.w	r9, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   3e968:	4625      	mov	r5, r4
   3e96a:	f1a6 0802 	sub.w	r8, r6, #2
   3e96e:	e009      	b.n	3e984 <ll_fal_add+0x50>
		} else if (free_idx && !fal[i].taken &&
   3e970:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   3e974:	d101      	bne.n	3e97a <ll_fal_add+0x46>
			*free_idx = i;
   3e976:	fa5f f985 	uxtb.w	r9, r5
	for (i = 0; i < FAL_SIZE; i++) {
   3e97a:	3501      	adds	r5, #1
   3e97c:	2d08      	cmp	r5, #8
   3e97e:	f106 0608 	add.w	r6, r6, #8
   3e982:	d017      	beq.n	3e9b4 <ll_fal_add+0x80>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3e984:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   3e988:	07d8      	lsls	r0, r3, #31
   3e98a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3e98e:	d5ef      	bpl.n	3e970 <ll_fal_add+0x3c>
   3e990:	4552      	cmp	r2, sl
   3e992:	d1f2      	bne.n	3e97a <ll_fal_add+0x46>
   3e994:	2206      	movs	r2, #6
   3e996:	4630      	mov	r0, r6
   3e998:	4659      	mov	r1, fp
   3e99a:	f00c ff66 	bl	4b86a <memcmp>
   3e99e:	2800      	cmp	r0, #0
   3e9a0:	d03e      	beq.n	3ea20 <ll_fal_add+0xec>
		} else if (free_idx && !fal[i].taken &&
   3e9a2:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   3e9a6:	07d9      	lsls	r1, r3, #31
   3e9a8:	d5e2      	bpl.n	3e970 <ll_fal_add+0x3c>
	for (i = 0; i < FAL_SIZE; i++) {
   3e9aa:	3501      	adds	r5, #1
   3e9ac:	2d08      	cmp	r5, #8
   3e9ae:	f106 0608 	add.w	r6, r6, #8
   3e9b2:	d1e7      	bne.n	3e984 <ll_fal_add+0x50>
	} else if (j >= ARRAY_SIZE(fal)) {
   3e9b4:	f1b9 0f07 	cmp.w	r9, #7
   3e9b8:	d83d      	bhi.n	3ea36 <ll_fal_add+0x102>
	fal[i].id_addr_type = id_addr->type & 0x1;
   3e9ba:	783a      	ldrb	r2, [r7, #0]
   3e9bc:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   3e9c0:	4e28      	ldr	r6, [pc, #160]	; (3ea64 <ll_fal_add+0x130>)
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   3e9c2:	2002      	movs	r0, #2
	fal[i].id_addr_type = id_addr->type & 0x1;
   3e9c4:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   3e9c8:	fb15 0009 	smlabb	r0, r5, r9, r0
	fal[i].id_addr_type = id_addr->type & 0x1;
   3e9cc:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   3e9d0:	4440      	add	r0, r8
   3e9d2:	2206      	movs	r2, #6
   3e9d4:	4659      	mov	r1, fp
   3e9d6:	f00c ff58 	bl	4b88a <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3e9da:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3e9dc:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3e9de:	f003 0301 	and.w	r3, r3, #1
   3e9e2:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   3e9e6:	fa5f fa84 	uxtb.w	sl, r4
   3e9ea:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
   3e9ee:	f3c2 1180 	ubfx	r1, r2, #6, #1
   3e9f2:	07d2      	lsls	r2, r2, #31
   3e9f4:	f104 0401 	add.w	r4, r4, #1
   3e9f8:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   3e9fc:	d501      	bpl.n	3ea02 <ll_fal_add+0xce>
   3e9fe:	4299      	cmp	r1, r3
   3ea00:	d01b      	beq.n	3ea3a <ll_fal_add+0x106>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3ea02:	2c08      	cmp	r4, #8
   3ea04:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3ea08:	d1eb      	bne.n	3e9e2 <ll_fal_add+0xae>
		fal[i].rl_idx = FILTER_IDX_NONE;
   3ea0a:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   3ea0e:	22ff      	movs	r2, #255	; 0xff
   3ea10:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   3ea12:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   3ea16:	f043 0301 	orr.w	r3, r3, #1
   3ea1a:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	return 0;
   3ea1e:	2000      	movs	r0, #0
}
   3ea20:	b003      	add	sp, #12
   3ea22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3ea26:	200c      	movs	r0, #12
}
   3ea28:	b003      	add	sp, #12
   3ea2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   3ea2e:	4620      	mov	r0, r4
}
   3ea30:	b003      	add	sp, #12
   3ea32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ea36:	2007      	movs	r0, #7
	return fal_add(addr);
   3ea38:	e7f2      	b.n	3ea20 <ll_fal_add+0xec>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3ea3a:	4630      	mov	r0, r6
   3ea3c:	2206      	movs	r2, #6
   3ea3e:	4659      	mov	r1, fp
   3ea40:	9301      	str	r3, [sp, #4]
   3ea42:	f00c ff12 	bl	4b86a <memcmp>
   3ea46:	9b01      	ldr	r3, [sp, #4]
   3ea48:	2800      	cmp	r0, #0
   3ea4a:	d1da      	bne.n	3ea02 <ll_fal_add+0xce>
		rl[j].fal = 1U;
   3ea4c:	5d7b      	ldrb	r3, [r7, r5]
   3ea4e:	f043 0320 	orr.w	r3, r3, #32
   3ea52:	557b      	strb	r3, [r7, r5]
		fal[i].rl_idx = j;
   3ea54:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   3ea58:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   3ea5c:	e7d9      	b.n	3ea12 <ll_fal_add+0xde>
   3ea5e:	bf00      	nop
   3ea60:	2000582a 	.word	0x2000582a
   3ea64:	20005955 	.word	0x20005955

0003ea68 <ll_fal_remove>:
{
   3ea68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ea6c:	4606      	mov	r6, r0
	if (ull_adv_filter_pol_get(0)) {
   3ea6e:	2000      	movs	r0, #0
   3ea70:	f7f9 fece 	bl	38810 <ull_adv_filter_pol_get>
   3ea74:	b9f0      	cbnz	r0, 3eab4 <ll_fal_remove+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3ea76:	f7fa f8fd 	bl	38c74 <ull_scan_filter_pol_get>
   3ea7a:	f010 0401 	ands.w	r4, r0, #1
   3ea7e:	d119      	bne.n	3eab4 <ll_fal_remove+0x4c>
	if (addr->type == ADDR_TYPE_ANON) {
   3ea80:	f896 8000 	ldrb.w	r8, [r6]
   3ea84:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   3ea88:	d035      	beq.n	3eaf6 <ll_fal_remove+0x8e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   3ea8a:	4d1c      	ldr	r5, [pc, #112]	; (3eafc <ll_fal_remove+0x94>)
   3ea8c:	3601      	adds	r6, #1
	for (i = 0; i < FAL_SIZE; i++) {
   3ea8e:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3ea90:	f008 0801 	and.w	r8, r8, #1
   3ea94:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   3ea98:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3ea9c:	07db      	lsls	r3, r3, #31
   3ea9e:	d501      	bpl.n	3eaa4 <ll_fal_remove+0x3c>
   3eaa0:	4542      	cmp	r2, r8
   3eaa2:	d00a      	beq.n	3eaba <ll_fal_remove+0x52>
	for (i = 0; i < FAL_SIZE; i++) {
   3eaa4:	3401      	adds	r4, #1
   3eaa6:	2c08      	cmp	r4, #8
   3eaa8:	f105 0508 	add.w	r5, r5, #8
   3eaac:	d1f2      	bne.n	3ea94 <ll_fal_remove+0x2c>
   3eaae:	2002      	movs	r0, #2
}
   3eab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3eab4:	200c      	movs	r0, #12
}
   3eab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3eaba:	2206      	movs	r2, #6
   3eabc:	4628      	mov	r0, r5
   3eabe:	4631      	mov	r1, r6
   3eac0:	f00c fed3 	bl	4b86a <memcmp>
   3eac4:	2800      	cmp	r0, #0
   3eac6:	d1ed      	bne.n	3eaa4 <ll_fal_remove+0x3c>
		uint8_t j = fal[i].rl_idx;
   3eac8:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   3eacc:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   3eace:	2b07      	cmp	r3, #7
   3ead0:	d808      	bhi.n	3eae4 <ll_fal_remove+0x7c>
			rl[j].fal = 0U;
   3ead2:	4a0b      	ldr	r2, [pc, #44]	; (3eb00 <ll_fal_remove+0x98>)
   3ead4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   3ead8:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   3eadc:	f360 1145 	bfi	r1, r0, #5, #1
   3eae0:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   3eae4:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   3eae8:	f36f 0300 	bfc	r3, #0, #1
   3eaec:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
		return 0;
   3eaf0:	2000      	movs	r0, #0
}
   3eaf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   3eaf6:	4620      	mov	r0, r4
}
   3eaf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3eafc:	2000582a 	.word	0x2000582a
   3eb00:	20005954 	.word	0x20005954

0003eb04 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3eb04:	2807      	cmp	r0, #7
{
   3eb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3eb0a:	4604      	mov	r4, r0
   3eb0c:	460e      	mov	r6, r1
   3eb0e:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3eb10:	d817      	bhi.n	3eb42 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   3eb12:	4d1a      	ldr	r5, [pc, #104]	; (3eb7c <ll_rl_id_addr_get+0x78>)
   3eb14:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3eb18:	00a7      	lsls	r7, r4, #2
   3eb1a:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   3eb1e:	07db      	lsls	r3, r3, #31
   3eb20:	d51d      	bpl.n	3eb5e <ll_rl_id_addr_get+0x5a>
	*id_addr_type = rl[rl_idx].id_addr_type;
   3eb22:	4427      	add	r7, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3eb24:	4640      	mov	r0, r8
	*id_addr_type = rl[rl_idx].id_addr_type;
   3eb26:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   3eb2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   3eb2e:	7033      	strb	r3, [r6, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3eb30:	2328      	movs	r3, #40	; 0x28
   3eb32:	fb03 5104 	mla	r1, r3, r4, r5
   3eb36:	2206      	movs	r2, #6
}
   3eb38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3eb3c:	3101      	adds	r1, #1
   3eb3e:	f00c bea4 	b.w	4b88a <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3eb42:	4a0f      	ldr	r2, [pc, #60]	; (3eb80 <ll_rl_id_addr_get+0x7c>)
   3eb44:	490f      	ldr	r1, [pc, #60]	; (3eb84 <ll_rl_id_addr_get+0x80>)
   3eb46:	4810      	ldr	r0, [pc, #64]	; (3eb88 <ll_rl_id_addr_get+0x84>)
   3eb48:	f44f 7389 	mov.w	r3, #274	; 0x112
   3eb4c:	f00a fd92 	bl	49674 <printk>
   3eb50:	4040      	eors	r0, r0
   3eb52:	f380 8811 	msr	BASEPRI, r0
   3eb56:	f04f 0003 	mov.w	r0, #3
   3eb5a:	df02      	svc	2
   3eb5c:	e7d9      	b.n	3eb12 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   3eb5e:	4a08      	ldr	r2, [pc, #32]	; (3eb80 <ll_rl_id_addr_get+0x7c>)
   3eb60:	490a      	ldr	r1, [pc, #40]	; (3eb8c <ll_rl_id_addr_get+0x88>)
   3eb62:	4809      	ldr	r0, [pc, #36]	; (3eb88 <ll_rl_id_addr_get+0x84>)
   3eb64:	f240 1313 	movw	r3, #275	; 0x113
   3eb68:	f00a fd84 	bl	49674 <printk>
   3eb6c:	4040      	eors	r0, r0
   3eb6e:	f380 8811 	msr	BASEPRI, r0
   3eb72:	f04f 0003 	mov.w	r0, #3
   3eb76:	df02      	svc	2
   3eb78:	e7d3      	b.n	3eb22 <ll_rl_id_addr_get+0x1e>
   3eb7a:	bf00      	nop
   3eb7c:	20005954 	.word	0x20005954
   3eb80:	00052c7c 	.word	0x00052c7c
   3eb84:	00052cc0 	.word	0x00052cc0
   3eb88:	00052460 	.word	0x00052460
   3eb8c:	00052ccc 	.word	0x00052ccc

0003eb90 <ll_rl_size_get>:
   3eb90:	2008      	movs	r0, #8
   3eb92:	4770      	bx	lr

0003eb94 <ll_rl_clear>:
{
   3eb94:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3eb96:	2000      	movs	r0, #0
   3eb98:	f7f9 fe2e 	bl	387f8 <ull_adv_is_enabled>
		? 0 : 1;
   3eb9c:	b108      	cbz	r0, 3eba2 <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3eb9e:	200c      	movs	r0, #12
}
   3eba0:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3eba2:	f7fa f84d 	bl	38c40 <ull_scan_is_enabled>
		? 0 : 1;
   3eba6:	f030 0001 	bics.w	r0, r0, #1
   3ebaa:	d1f8      	bne.n	3eb9e <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   3ebac:	4b18      	ldr	r3, [pc, #96]	; (3ec10 <ll_rl_clear+0x7c>)
	peer_irk_count = 0U;
   3ebae:	4c19      	ldr	r4, [pc, #100]	; (3ec14 <ll_rl_clear+0x80>)
		rl[i].taken = 0U;
   3ebb0:	7819      	ldrb	r1, [r3, #0]
   3ebb2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   3ebb6:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   3ebb8:	f360 0100 	bfi	r1, r0, #0, #1
   3ebbc:	f360 0200 	bfi	r2, r0, #0, #1
   3ebc0:	7019      	strb	r1, [r3, #0]
   3ebc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   3ebc6:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   3ebca:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   3ebce:	f360 0100 	bfi	r1, r0, #0, #1
   3ebd2:	f360 0200 	bfi	r2, r0, #0, #1
   3ebd6:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   3ebda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   3ebde:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   3ebe2:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   3ebe6:	f360 0100 	bfi	r1, r0, #0, #1
   3ebea:	f360 0200 	bfi	r2, r0, #0, #1
   3ebee:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   3ebf2:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   3ebf6:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   3ebfa:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   3ebfe:	f360 0100 	bfi	r1, r0, #0, #1
   3ec02:	f360 0200 	bfi	r2, r0, #0, #1
   3ec06:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   3ec0a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   3ec0e:	bd10      	pop	{r4, pc}
   3ec10:	20005954 	.word	0x20005954
   3ec14:	20006dd3 	.word	0x20006dd3

0003ec18 <ll_rl_remove>:
{
   3ec18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ec1c:	b083      	sub	sp, #12
   3ec1e:	4603      	mov	r3, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3ec20:	2000      	movs	r0, #0
{
   3ec22:	9300      	str	r3, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3ec24:	f7f9 fde8 	bl	387f8 <ull_adv_is_enabled>
		? 0 : 1;
   3ec28:	b118      	cbz	r0, 3ec32 <ll_rl_remove+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3ec2a:	200c      	movs	r0, #12
}
   3ec2c:	b003      	add	sp, #12
   3ec2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3ec32:	f7fa f805 	bl	38c40 <ull_scan_is_enabled>
		? 0 : 1;
   3ec36:	f030 0b01 	bics.w	fp, r0, #1
   3ec3a:	d1f6      	bne.n	3ec2a <ll_rl_remove+0x12>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3ec3c:	9b00      	ldr	r3, [sp, #0]
   3ec3e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 3ed78 <ll_rl_remove+0x160>
   3ec42:	f813 ab01 	ldrb.w	sl, [r3], #1
   3ec46:	465c      	mov	r4, fp
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3ec48:	f00a 0a01 	and.w	sl, sl, #1
   3ec4c:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   3ec50:	461e      	mov	r6, r3
   3ec52:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3ec56:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   3ec5a:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3ec5e:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3ec62:	07db      	lsls	r3, r3, #31
   3ec64:	ea4f 0984 	mov.w	r9, r4, lsl #2
   3ec68:	d501      	bpl.n	3ec6e <ll_rl_remove+0x56>
   3ec6a:	4552      	cmp	r2, sl
   3ec6c:	d008      	beq.n	3ec80 <ll_rl_remove+0x68>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3ec6e:	3401      	adds	r4, #1
   3ec70:	2c08      	cmp	r4, #8
   3ec72:	f108 0828 	add.w	r8, r8, #40	; 0x28
   3ec76:	d1ec      	bne.n	3ec52 <ll_rl_remove+0x3a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3ec78:	2002      	movs	r0, #2
}
   3ec7a:	b003      	add	sp, #12
   3ec7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3ec80:	4640      	mov	r0, r8
   3ec82:	2206      	movs	r2, #6
   3ec84:	4631      	mov	r1, r6
   3ec86:	f00c fdf0 	bl	4b86a <memcmp>
   3ec8a:	2800      	cmp	r0, #0
   3ec8c:	d1ef      	bne.n	3ec6e <ll_rl_remove+0x56>
		if (rl[i].pirk) {
   3ec8e:	782a      	ldrb	r2, [r5, #0]
   3ec90:	0752      	lsls	r2, r2, #29
   3ec92:	4633      	mov	r3, r6
   3ec94:	4606      	mov	r6, r0
   3ec96:	d535      	bpl.n	3ed04 <ll_rl_remove+0xec>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   3ec98:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 3ed7c <ll_rl_remove+0x164>
   3ec9c:	f89a 8000 	ldrb.w	r8, [sl]
   3eca0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   3eca4:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   3eca8:	d02a      	beq.n	3ed00 <ll_rl_remove+0xe8>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   3ecaa:	7ded      	ldrb	r5, [r5, #23]
			if (pj && pi != pj) {
   3ecac:	4545      	cmp	r5, r8
   3ecae:	d027      	beq.n	3ed00 <ll_rl_remove+0xe8>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   3ecb0:	4833      	ldr	r0, [pc, #204]	; (3ed80 <ll_rl_remove+0x168>)
   3ecb2:	9301      	str	r3, [sp, #4]
   3ecb4:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   3ecb8:	2210      	movs	r2, #16
   3ecba:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   3ecbe:	f00c fde4 	bl	4b88a <memcpy>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   3ecc2:	4830      	ldr	r0, [pc, #192]	; (3ed84 <ll_rl_remove+0x16c>)
   3ecc4:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   3ecc6:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   3ecca:	fa5f fc8b 	uxtb.w	ip, fp
   3ecce:	f817 1032 	ldrb.w	r1, [r7, r2, lsl #3]
   3ecd2:	f011 0f01 	tst.w	r1, #1
   3ecd6:	f10b 0b01 	add.w	fp, fp, #1
   3ecda:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   3ecde:	d004      	beq.n	3ecea <ll_rl_remove+0xd2>
   3ece0:	0749      	lsls	r1, r1, #29
   3ece2:	d502      	bpl.n	3ecea <ll_rl_remove+0xd2>
   3ece4:	7dc1      	ldrb	r1, [r0, #23]
   3ece6:	4541      	cmp	r1, r8
   3ece8:	d03a      	beq.n	3ed60 <ll_rl_remove+0x148>
				     k < CONFIG_BT_CTLR_RL_SIZE;
   3ecea:	f1bb 0f08 	cmp.w	fp, #8
   3ecee:	f100 0028 	add.w	r0, r0, #40	; 0x28
   3ecf2:	d1e8      	bne.n	3ecc6 <ll_rl_remove+0xae>
			peer_irk_count--;
   3ecf4:	f89a 8000 	ldrb.w	r8, [sl]
   3ecf8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   3ecfc:	fa5f f888 	uxtb.w	r8, r8
   3ed00:	f88a 8000 	strb.w	r8, [sl]
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   3ed04:	9a00      	ldr	r2, [sp, #0]
   3ed06:	4d20      	ldr	r5, [pc, #128]	; (3ed88 <ll_rl_remove+0x170>)
   3ed08:	f892 a000 	ldrb.w	sl, [r2]
	for (i = 0; i < FAL_SIZE; i++) {
   3ed0c:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3ed10:	f00a 0a01 	and.w	sl, sl, #1
   3ed14:	469b      	mov	fp, r3
   3ed16:	f818 2036 	ldrb.w	r2, [r8, r6, lsl #3]
   3ed1a:	07d1      	lsls	r1, r2, #31
   3ed1c:	f3c2 0040 	ubfx	r0, r2, #1, #1
   3ed20:	d501      	bpl.n	3ed26 <ll_rl_remove+0x10e>
   3ed22:	4550      	cmp	r0, sl
   3ed24:	d00f      	beq.n	3ed46 <ll_rl_remove+0x12e>
	for (i = 0; i < FAL_SIZE; i++) {
   3ed26:	3601      	adds	r6, #1
   3ed28:	2e08      	cmp	r6, #8
   3ed2a:	f105 0508 	add.w	r5, r5, #8
   3ed2e:	d1f2      	bne.n	3ed16 <ll_rl_remove+0xfe>
		rl[i].taken = 0U;
   3ed30:	444c      	add	r4, r9
		return 0;
   3ed32:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   3ed34:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   3ed38:	f36f 0300 	bfc	r3, #0, #1
   3ed3c:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
}
   3ed40:	b003      	add	sp, #12
   3ed42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3ed46:	2206      	movs	r2, #6
   3ed48:	4628      	mov	r0, r5
   3ed4a:	4659      	mov	r1, fp
   3ed4c:	f00c fd8d 	bl	4b86a <memcmp>
   3ed50:	2800      	cmp	r0, #0
   3ed52:	d1e8      	bne.n	3ed26 <ll_rl_remove+0x10e>
			fal[j].rl_idx = FILTER_IDX_NONE;
   3ed54:	eb08 08c6 	add.w	r8, r8, r6, lsl #3
   3ed58:	23ff      	movs	r3, #255	; 0xff
   3ed5a:	f888 3001 	strb.w	r3, [r8, #1]
   3ed5e:	e7e7      	b.n	3ed30 <ll_rl_remove+0x118>
			peer_irk_count--;
   3ed60:	f89a 8000 	ldrb.w	r8, [sl]
						rl[k].pirk_idx = pi;
   3ed64:	75d5      	strb	r5, [r2, #23]
						peer_irk_rl_ids[pi] = k;
   3ed66:	4a09      	ldr	r2, [pc, #36]	; (3ed8c <ll_rl_remove+0x174>)
			peer_irk_count--;
   3ed68:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
						peer_irk_rl_ids[pi] = k;
   3ed6c:	f802 c005 	strb.w	ip, [r2, r5]
			peer_irk_count--;
   3ed70:	fa5f f888 	uxtb.w	r8, r8
						break;
   3ed74:	e7c4      	b.n	3ed00 <ll_rl_remove+0xe8>
   3ed76:	bf00      	nop
   3ed78:	20005955 	.word	0x20005955
   3ed7c:	20006dd3 	.word	0x20006dd3
   3ed80:	200058d4 	.word	0x200058d4
   3ed84:	20005954 	.word	0x20005954
   3ed88:	2000582a 	.word	0x2000582a
   3ed8c:	200058cc 	.word	0x200058cc

0003ed90 <ll_rl_crpa_set>:
{
   3ed90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   3ed94:	795c      	ldrb	r4, [r3, #5]
   3ed96:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   3ed9a:	2c40      	cmp	r4, #64	; 0x40
   3ed9c:	d001      	beq.n	3eda2 <ll_rl_crpa_set+0x12>
}
   3ed9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   3eda2:	461e      	mov	r6, r3
   3eda4:	460f      	mov	r7, r1
   3eda6:	b309      	cbz	r1, 3edec <__kernel_ram_size+0x34>
   3eda8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3ee4c <__kernel_ram_size+0x94>
   3edac:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3edae:	f000 0a01 	and.w	sl, r0, #1
   3edb2:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   3edb6:	e003      	b.n	3edc0 <__kernel_ram_size+0x8>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3edb8:	2c08      	cmp	r4, #8
   3edba:	f109 0928 	add.w	r9, r9, #40	; 0x28
   3edbe:	d0ee      	beq.n	3ed9e <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3edc0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3edc4:	4625      	mov	r5, r4
   3edc6:	f818 c033 	ldrb.w	ip, [r8, r3, lsl #3]
   3edca:	f01c 0f01 	tst.w	ip, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3edce:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3edd2:	f3cc 1380 	ubfx	r3, ip, #6, #1
   3edd6:	d0ef      	beq.n	3edb8 <__kernel_ram_size>
   3edd8:	4553      	cmp	r3, sl
   3edda:	d1ed      	bne.n	3edb8 <__kernel_ram_size>
   3eddc:	4648      	mov	r0, r9
   3edde:	2206      	movs	r2, #6
   3ede0:	4639      	mov	r1, r7
   3ede2:	f00c fd42 	bl	4b86a <memcmp>
   3ede6:	2800      	cmp	r0, #0
   3ede8:	d1e6      	bne.n	3edb8 <__kernel_ram_size>
   3edea:	e004      	b.n	3edf6 <__kernel_ram_size+0x3e>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   3edec:	2a07      	cmp	r2, #7
   3edee:	d8d6      	bhi.n	3ed9e <ll_rl_crpa_set+0xe>
   3edf0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 3ee50 <__kernel_ram_size+0x98>
   3edf4:	4615      	mov	r5, r2
   3edf6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   3edfa:	00ef      	lsls	r7, r5, #3
   3edfc:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   3ee00:	07db      	lsls	r3, r3, #31
   3ee02:	d5cc      	bpl.n	3ed9e <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   3ee04:	f107 0918 	add.w	r9, r7, #24
   3ee08:	44c1      	add	r9, r8
   3ee0a:	2206      	movs	r2, #6
   3ee0c:	4631      	mov	r1, r6
   3ee0e:	4648      	mov	r0, r9
   3ee10:	f00c fd3b 	bl	4b88a <memcpy>
   3ee14:	2400      	movs	r4, #0
   3ee16:	e001      	b.n	3ee1c <__kernel_ram_size+0x64>
	defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
static void conn_rpa_update(uint8_t rl_idx)
{
	uint16_t handle;

	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3ee18:	2c06      	cmp	r4, #6
   3ee1a:	d0c0      	beq.n	3ed9e <ll_rl_crpa_set+0xe>
		struct ll_conn *conn = ll_connected_get(handle);
   3ee1c:	b2a0      	uxth	r0, r4
   3ee1e:	f7fa fde5 	bl	399ec <ll_connected_get>

		/* The RPA of the connection matches the RPA that was just
		 * resolved
		 */
		if (conn && !memcmp(conn->peer_id_addr, rl[rl_idx].curr_rpa.val,
   3ee22:	4603      	mov	r3, r0
   3ee24:	f100 05dd 	add.w	r5, r0, #221	; 0xdd
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3ee28:	3401      	adds	r4, #1
		if (conn && !memcmp(conn->peer_id_addr, rl[rl_idx].curr_rpa.val,
   3ee2a:	2206      	movs	r2, #6
   3ee2c:	4649      	mov	r1, r9
   3ee2e:	4628      	mov	r0, r5
   3ee30:	2b00      	cmp	r3, #0
   3ee32:	d0f1      	beq.n	3ee18 <__kernel_ram_size+0x60>
   3ee34:	f00c fd19 	bl	4b86a <memcmp>
   3ee38:	2800      	cmp	r0, #0
   3ee3a:	d1ed      	bne.n	3ee18 <__kernel_ram_size+0x60>
				    BDADDR_SIZE)) {
			(void)memcpy(conn->peer_id_addr, rl[rl_idx].id_addr.val,
   3ee3c:	1c79      	adds	r1, r7, #1
   3ee3e:	4441      	add	r1, r8
   3ee40:	4628      	mov	r0, r5
   3ee42:	2206      	movs	r2, #6
}
   3ee44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			(void)memcpy(conn->peer_id_addr, rl[rl_idx].id_addr.val,
   3ee48:	f00c bd1f 	b.w	4b88a <memcpy>
   3ee4c:	20005955 	.word	0x20005955
   3ee50:	20005954 	.word	0x20005954

0003ee54 <ll_rl_crpa_get>:
{
   3ee54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3ee58:	4682      	mov	sl, r0
   3ee5a:	4e1a      	ldr	r6, [pc, #104]	; (3eec4 <ll_rl_crpa_get+0x70>)
   3ee5c:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   3ee60:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3ee62:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3ee64:	f008 0801 	and.w	r8, r8, #1
   3ee68:	1e77      	subs	r7, r6, #1
   3ee6a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3ee6e:	00d5      	lsls	r5, r2, #3
   3ee70:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3ee74:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3ee78:	07db      	lsls	r3, r3, #31
   3ee7a:	f104 0401 	add.w	r4, r4, #1
   3ee7e:	d501      	bpl.n	3ee84 <ll_rl_crpa_get+0x30>
   3ee80:	4542      	cmp	r2, r8
   3ee82:	d006      	beq.n	3ee92 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3ee84:	2c08      	cmp	r4, #8
   3ee86:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3ee8a:	d1ee      	bne.n	3ee6a <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3ee8c:	2002      	movs	r0, #2
}
   3ee8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3ee92:	4630      	mov	r0, r6
   3ee94:	2206      	movs	r2, #6
   3ee96:	4651      	mov	r1, sl
   3ee98:	f00c fce7 	bl	4b86a <memcmp>
   3ee9c:	4683      	mov	fp, r0
   3ee9e:	2800      	cmp	r0, #0
   3eea0:	d1f0      	bne.n	3ee84 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   3eea2:	f105 0218 	add.w	r2, r5, #24
   3eea6:	4417      	add	r7, r2
   3eea8:	2106      	movs	r1, #6
   3eeaa:	4638      	mov	r0, r7
   3eeac:	f7f4 fd60 	bl	33970 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   3eeb0:	2800      	cmp	r0, #0
   3eeb2:	d0eb      	beq.n	3ee8c <ll_rl_crpa_get+0x38>
   3eeb4:	2206      	movs	r2, #6
   3eeb6:	4639      	mov	r1, r7
   3eeb8:	4648      	mov	r0, r9
   3eeba:	f00c fce6 	bl	4b88a <memcpy>
		return 0;
   3eebe:	4658      	mov	r0, fp
}
   3eec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eec4:	20005955 	.word	0x20005955

0003eec8 <ll_rl_lrpa_get>:
{
   3eec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3eecc:	4681      	mov	r9, r0
   3eece:	4e16      	ldr	r6, [pc, #88]	; (3ef28 <ll_rl_lrpa_get+0x60>)
   3eed0:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   3eed4:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3eed6:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3eed8:	f008 0801 	and.w	r8, r8, #1
   3eedc:	1e77      	subs	r7, r6, #1
   3eede:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3eee2:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   3eee6:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3eeea:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3eeee:	07db      	lsls	r3, r3, #31
   3eef0:	f104 0401 	add.w	r4, r4, #1
   3eef4:	d501      	bpl.n	3eefa <ll_rl_lrpa_get+0x32>
   3eef6:	4542      	cmp	r2, r8
   3eef8:	d006      	beq.n	3ef08 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3eefa:	2c08      	cmp	r4, #8
   3eefc:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3ef00:	d1ed      	bne.n	3eede <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3ef02:	2002      	movs	r0, #2
}
   3ef04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3ef08:	4630      	mov	r0, r6
   3ef0a:	2206      	movs	r2, #6
   3ef0c:	4649      	mov	r1, r9
   3ef0e:	f00c fcac 	bl	4b86a <memcmp>
   3ef12:	4683      	mov	fp, r0
   3ef14:	2800      	cmp	r0, #0
   3ef16:	d1f0      	bne.n	3eefa <ll_rl_lrpa_get+0x32>
   3ef18:	6a69      	ldr	r1, [r5, #36]	; 0x24
   3ef1a:	2206      	movs	r2, #6
   3ef1c:	4650      	mov	r0, sl
   3ef1e:	f00c fcb4 	bl	4b88a <memcpy>
		return 0;
   3ef22:	4658      	mov	r0, fp
}
   3ef24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ef28:	20005955 	.word	0x20005955

0003ef2c <ll_rl_enable>:
{
   3ef2c:	b510      	push	{r4, lr}
   3ef2e:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3ef30:	2000      	movs	r0, #0
   3ef32:	f7f9 fc61 	bl	387f8 <ull_adv_is_enabled>
		? 0 : 1;
   3ef36:	b108      	cbz	r0, 3ef3c <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3ef38:	200c      	movs	r0, #12
}
   3ef3a:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3ef3c:	f7f9 fe80 	bl	38c40 <ull_scan_is_enabled>
		? 0 : 1;
   3ef40:	f030 0001 	bics.w	r0, r0, #1
   3ef44:	d1f8      	bne.n	3ef38 <ll_rl_enable+0xc>
	switch (enable) {
   3ef46:	b134      	cbz	r4, 3ef56 <ll_rl_enable+0x2a>
   3ef48:	2c01      	cmp	r4, #1
   3ef4a:	d102      	bne.n	3ef52 <ll_rl_enable+0x26>
		rl_enable = 1U;
   3ef4c:	4b04      	ldr	r3, [pc, #16]	; (3ef60 <ll_rl_enable+0x34>)
   3ef4e:	701c      	strb	r4, [r3, #0]
}
   3ef50:	bd10      	pop	{r4, pc}
	switch (enable) {
   3ef52:	2012      	movs	r0, #18
}
   3ef54:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   3ef56:	4b02      	ldr	r3, [pc, #8]	; (3ef60 <ll_rl_enable+0x34>)
   3ef58:	701c      	strb	r4, [r3, #0]
	return 0;
   3ef5a:	4620      	mov	r0, r4
}
   3ef5c:	bd10      	pop	{r4, pc}
   3ef5e:	bf00      	nop
   3ef60:	20006dd4 	.word	0x20006dd4

0003ef64 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   3ef64:	4b03      	ldr	r3, [pc, #12]	; (3ef74 <ll_rl_timeout_set+0x10>)
   3ef66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3ef6a:	fb02 f000 	mul.w	r0, r2, r0
   3ef6e:	6018      	str	r0, [r3, #0]
}
   3ef70:	4770      	bx	lr
   3ef72:	bf00      	nop
   3ef74:	20005ac8 	.word	0x20005ac8

0003ef78 <ll_priv_mode_set>:
{
   3ef78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ef7c:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3ef7e:	2000      	movs	r0, #0
{
   3ef80:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3ef82:	f7f9 fc39 	bl	387f8 <ull_adv_is_enabled>
		? 0 : 1;
   3ef86:	b110      	cbz	r0, 3ef8e <ll_priv_mode_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3ef88:	200c      	movs	r0, #12
}
   3ef8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3ef8e:	f7f9 fe57 	bl	38c40 <ull_scan_is_enabled>
		? 0 : 1;
   3ef92:	f030 0401 	bics.w	r4, r0, #1
   3ef96:	d1f7      	bne.n	3ef88 <ll_priv_mode_set+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3ef98:	4e1a      	ldr	r6, [pc, #104]	; (3f004 <ll_priv_mode_set+0x8c>)
   3ef9a:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3ef9e:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3efa0:	f009 0901 	and.w	r9, r9, #1
   3efa4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3efa8:	00d5      	lsls	r5, r2, #3
   3efaa:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   3efae:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3efb2:	07db      	lsls	r3, r3, #31
   3efb4:	f104 0401 	add.w	r4, r4, #1
   3efb8:	d501      	bpl.n	3efbe <ll_priv_mode_set+0x46>
   3efba:	454a      	cmp	r2, r9
   3efbc:	d006      	beq.n	3efcc <ll_priv_mode_set+0x54>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3efbe:	2c08      	cmp	r4, #8
   3efc0:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3efc4:	d1ee      	bne.n	3efa4 <ll_priv_mode_set+0x2c>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3efc6:	2002      	movs	r0, #2
}
   3efc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3efcc:	4630      	mov	r0, r6
   3efce:	2206      	movs	r2, #6
   3efd0:	4651      	mov	r1, sl
   3efd2:	f00c fc4a 	bl	4b86a <memcmp>
   3efd6:	2800      	cmp	r0, #0
   3efd8:	d1f1      	bne.n	3efbe <ll_priv_mode_set+0x46>
		switch (mode) {
   3efda:	f1b8 0f00 	cmp.w	r8, #0
   3efde:	d00b      	beq.n	3eff8 <ll_priv_mode_set+0x80>
   3efe0:	f1b8 0f01 	cmp.w	r8, #1
   3efe4:	d105      	bne.n	3eff2 <ll_priv_mode_set+0x7a>
			rl[i].dev = 1U;
   3efe6:	5d7b      	ldrb	r3, [r7, r5]
   3efe8:	f043 0310 	orr.w	r3, r3, #16
   3efec:	557b      	strb	r3, [r7, r5]
}
   3efee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   3eff2:	2012      	movs	r0, #18
}
   3eff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   3eff8:	5d7b      	ldrb	r3, [r7, r5]
   3effa:	f368 1304 	bfi	r3, r8, #4, #1
   3effe:	557b      	strb	r3, [r7, r5]
	return 0;
   3f000:	4640      	mov	r0, r8
			break;
   3f002:	e7c2      	b.n	3ef8a <ll_priv_mode_set+0x12>
   3f004:	20005955 	.word	0x20005955

0003f008 <ull_filter_reset>:
{
   3f008:	b4d0      	push	{r4, r6, r7}
   3f00a:	4930      	ldr	r1, [pc, #192]	; (3f0cc <ull_filter_reset+0xc4>)
   3f00c:	4c30      	ldr	r4, [pc, #192]	; (3f0d0 <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   3f00e:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   3f010:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   3f014:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   3f016:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   3f018:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   3f01c:	d805      	bhi.n	3f02a <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   3f01e:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   3f022:	f36f 1245 	bfc	r2, #5, #1
   3f026:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   3f02a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   3f02e:	f36f 0200 	bfc	r2, #0, #1
   3f032:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   3f036:	3301      	adds	r3, #1
   3f038:	2b08      	cmp	r3, #8
   3f03a:	d1e9      	bne.n	3f010 <ull_filter_reset+0x8>
	rl_enable = 0U;
   3f03c:	4a25      	ldr	r2, [pc, #148]	; (3f0d4 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   3f03e:	4c26      	ldr	r4, [pc, #152]	; (3f0d8 <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   3f040:	2300      	movs	r3, #0
   3f042:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   3f044:	780a      	ldrb	r2, [r1, #0]
   3f046:	f363 0200 	bfi	r2, r3, #0, #1
   3f04a:	700a      	strb	r2, [r1, #0]
   3f04c:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   3f050:	f363 0200 	bfi	r2, r3, #0, #1
   3f054:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   3f058:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   3f05c:	f363 0200 	bfi	r2, r3, #0, #1
   3f060:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   3f064:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   3f068:	f363 0200 	bfi	r2, r3, #0, #1
   3f06c:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   3f070:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   3f074:	f363 0200 	bfi	r2, r3, #0, #1
   3f078:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   3f07c:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   3f080:	f363 0200 	bfi	r2, r3, #0, #1
   3f084:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   3f088:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   3f08c:	f363 0200 	bfi	r2, r3, #0, #1
   3f090:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   3f094:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   3f098:	f363 0200 	bfi	r2, r3, #0, #1
   3f09c:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   3f0a0:	4a0e      	ldr	r2, [pc, #56]	; (3f0dc <ull_filter_reset+0xd4>)
   3f0a2:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   3f0a4:	4b0e      	ldr	r3, [pc, #56]	; (3f0e0 <ull_filter_reset+0xd8>)
   3f0a6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   3f0aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3f0ae:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   3f0b2:	4b0c      	ldr	r3, [pc, #48]	; (3f0e4 <ull_filter_reset+0xdc>)
   3f0b4:	6023      	str	r3, [r4, #0]
	if (init) {
   3f0b6:	b120      	cbz	r0, 3f0c2 <ull_filter_reset+0xba>
}
   3f0b8:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   3f0ba:	490b      	ldr	r1, [pc, #44]	; (3f0e8 <ull_filter_reset+0xe0>)
   3f0bc:	480b      	ldr	r0, [pc, #44]	; (3f0ec <ull_filter_reset+0xe4>)
   3f0be:	f011 bbb7 	b.w	50830 <k_work_init_delayable>
}
   3f0c2:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   3f0c4:	4809      	ldr	r0, [pc, #36]	; (3f0ec <ull_filter_reset+0xe4>)
   3f0c6:	f011 bbbf 	b.w	50848 <k_work_cancel_delayable>
   3f0ca:	bf00      	nop
   3f0cc:	20005954 	.word	0x20005954
   3f0d0:	20005828 	.word	0x20005828
   3f0d4:	20006dd4 	.word	0x20006dd4
   3f0d8:	20005ac8 	.word	0x20005ac8
   3f0dc:	20006dd3 	.word	0x20006dd3
   3f0e0:	200038f8 	.word	0x200038f8
   3f0e4:	000dbba0 	.word	0x000dbba0
   3f0e8:	0003f3ad 	.word	0x0003f3ad
   3f0ec:	20003900 	.word	0x20003900

0003f0f0 <ull_filter_lll_get>:
		return &fal_filter;
   3f0f0:	4a03      	ldr	r2, [pc, #12]	; (3f100 <ull_filter_lll_get+0x10>)
   3f0f2:	4b04      	ldr	r3, [pc, #16]	; (3f104 <ull_filter_lll_get+0x14>)
}
   3f0f4:	2800      	cmp	r0, #0
   3f0f6:	bf0c      	ite	eq
   3f0f8:	4610      	moveq	r0, r2
   3f0fa:	4618      	movne	r0, r3
   3f0fc:	4770      	bx	lr
   3f0fe:	bf00      	nop
   3f100:	20005a94 	.word	0x20005a94
   3f104:	20005868 	.word	0x20005868

0003f108 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   3f108:	b1a8      	cbz	r0, 3f136 <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f10a:	4a0c      	ldr	r2, [pc, #48]	; (3f13c <ull_filter_adv_scan_state_cb+0x34>)
   3f10c:	6812      	ldr	r2, [r2, #0]
{
   3f10e:	b510      	push	{r4, lr}
   3f110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   3f114:	f240 30e7 	movw	r0, #999	; 0x3e7
   3f118:	2100      	movs	r1, #0
   3f11a:	fbe2 0103 	umlal	r0, r1, r2, r3
   3f11e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3f122:	2300      	movs	r3, #0
   3f124:	f7e6 ffec 	bl	26100 <__aeabi_uldivmod>
}
   3f128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f12c:	4602      	mov	r2, r0
   3f12e:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f130:	4803      	ldr	r0, [pc, #12]	; (3f140 <ull_filter_adv_scan_state_cb+0x38>)
   3f132:	f008 bf41 	b.w	47fb8 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   3f136:	4802      	ldr	r0, [pc, #8]	; (3f140 <ull_filter_adv_scan_state_cb+0x38>)
   3f138:	f011 bb86 	b.w	50848 <k_work_cancel_delayable>
   3f13c:	20005ac8 	.word	0x20005ac8
   3f140:	20003900 	.word	0x20003900

0003f144 <ull_filter_adv_update>:
	filter->enable_bitmask = 0;
   3f144:	4a0d      	ldr	r2, [pc, #52]	; (3f17c <ull_filter_adv_update+0x38>)
{
   3f146:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   3f148:	2300      	movs	r3, #0
   3f14a:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   3f14c:	b970      	cbnz	r0, 3f16c <ull_filter_adv_update+0x28>
	if (rl_enable &&
   3f14e:	4b0c      	ldr	r3, [pc, #48]	; (3f180 <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   3f150:	4a0c      	ldr	r2, [pc, #48]	; (3f184 <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   3f152:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   3f154:	2000      	movs	r0, #0
   3f156:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   3f158:	b903      	cbnz	r3, 3f15c <ull_filter_adv_update+0x18>
}
   3f15a:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   3f15c:	f7f9 fd70 	bl	38c40 <ull_scan_is_enabled>
	if (rl_enable &&
   3f160:	2800      	cmp	r0, #0
   3f162:	d1fa      	bne.n	3f15a <ull_filter_adv_update+0x16>
}
   3f164:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   3f168:	f7ff bb32 	b.w	3e7d0 <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   3f16c:	4618      	mov	r0, r3
   3f16e:	f7f9 fd81 	bl	38c74 <ull_scan_filter_pol_get>
	if (adv_fp &&
   3f172:	07c3      	lsls	r3, r0, #31
   3f174:	d4eb      	bmi.n	3f14e <ull_filter_adv_update+0xa>
		fal_update();
   3f176:	f7ff fb63 	bl	3e840 <fal_update>
   3f17a:	e7e8      	b.n	3f14e <ull_filter_adv_update+0xa>
   3f17c:	20005868 	.word	0x20005868
   3f180:	20006dd4 	.word	0x20006dd4
   3f184:	20005a94 	.word	0x20005a94

0003f188 <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   3f188:	4a0e      	ldr	r2, [pc, #56]	; (3f1c4 <ull_filter_scan_update+0x3c>)
{
   3f18a:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   3f18c:	2300      	movs	r3, #0
   3f18e:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   3f190:	07c2      	lsls	r2, r0, #31
   3f192:	d40e      	bmi.n	3f1b2 <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   3f194:	4b0c      	ldr	r3, [pc, #48]	; (3f1c8 <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   3f196:	4a0d      	ldr	r2, [pc, #52]	; (3f1cc <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   3f198:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   3f19a:	2000      	movs	r0, #0
   3f19c:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   3f19e:	b903      	cbnz	r3, 3f1a2 <ull_filter_scan_update+0x1a>
}
   3f1a0:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   3f1a2:	f7f9 fb29 	bl	387f8 <ull_adv_is_enabled>
	if (rl_enable &&
   3f1a6:	2800      	cmp	r0, #0
   3f1a8:	d1fa      	bne.n	3f1a0 <ull_filter_scan_update+0x18>
}
   3f1aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   3f1ae:	f7ff bb0f 	b.w	3e7d0 <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   3f1b2:	4618      	mov	r0, r3
   3f1b4:	f7f9 fb2c 	bl	38810 <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   3f1b8:	2800      	cmp	r0, #0
   3f1ba:	d1eb      	bne.n	3f194 <ull_filter_scan_update+0xc>
		fal_update();
   3f1bc:	f7ff fb40 	bl	3e840 <fal_update>
   3f1c0:	e7e8      	b.n	3f194 <ull_filter_scan_update+0xc>
   3f1c2:	bf00      	nop
   3f1c4:	20005868 	.word	0x20005868
   3f1c8:	20006dd4 	.word	0x20006dd4
   3f1cc:	20005a94 	.word	0x20005a94

0003f1d0 <ull_filter_rpa_update>:
{
   3f1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f1d4:	4683      	mov	fp, r0
   3f1d6:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   3f1d8:	f011 fcca 	bl	50b70 <z_impl_k_uptime_ticks>
   3f1dc:	014b      	lsls	r3, r1, #5
   3f1de:	ea4f 1940 	mov.w	r9, r0, lsl #5
   3f1e2:	ebb9 0900 	subs.w	r9, r9, r0
   3f1e6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   3f1ea:	eb63 0301 	sbc.w	r3, r3, r1
   3f1ee:	009b      	lsls	r3, r3, #2
   3f1f0:	ea43 7399 	orr.w	r3, r3, r9, lsr #30
   3f1f4:	ea4f 0989 	mov.w	r9, r9, lsl #2
   3f1f8:	eb19 0900 	adds.w	r9, r9, r0
   3f1fc:	eb41 0103 	adc.w	r1, r1, r3
   3f200:	00cb      	lsls	r3, r1, #3
   3f202:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   3f206:	0bd9      	lsrs	r1, r3, #15
   3f208:	f3c9 3910 	ubfx	r9, r9, #12, #17
   3f20c:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   3f210:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   3f212:	f1bb 0f00 	cmp.w	fp, #0
   3f216:	d117      	bne.n	3f248 <ull_filter_rpa_update+0x78>
   3f218:	4b5c      	ldr	r3, [pc, #368]	; (3f38c <ull_filter_rpa_update+0x1bc>)
   3f21a:	e9d3 2300 	ldrd	r2, r3, [r3]
   3f21e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   3f222:	bf08      	it	eq
   3f224:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   3f228:	d00e      	beq.n	3f248 <ull_filter_rpa_update+0x78>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   3f22a:	ebb9 0202 	subs.w	r2, r9, r2
   3f22e:	eb61 0303 	sbc.w	r3, r1, r3
   3f232:	4957      	ldr	r1, [pc, #348]	; (3f390 <ull_filter_rpa_update+0x1c0>)
   3f234:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   3f236:	428a      	cmp	r2, r1
   3f238:	f173 0300 	sbcs.w	r3, r3, #0
   3f23c:	bfac      	ite	ge
   3f23e:	f04f 0a01 	movge.w	sl, #1
   3f242:	f04f 0a00 	movlt.w	sl, #0
   3f246:	e001      	b.n	3f24c <ull_filter_rpa_update+0x7c>
   3f248:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f24c:	4e51      	ldr	r6, [pc, #324]	; (3f394 <ull_filter_rpa_update+0x1c4>)
   3f24e:	f8df 8148 	ldr.w	r8, [pc, #328]	; 3f398 <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   3f252:	2400      	movs	r4, #0
   3f254:	1ff7      	subs	r7, r6, #7
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   3f256:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3f25a:	00a5      	lsls	r5, r4, #2
   3f25c:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3f260:	07da      	lsls	r2, r3, #31
   3f262:	d515      	bpl.n	3f290 <ull_filter_rpa_update+0xc0>
   3f264:	f1ba 0f00 	cmp.w	sl, #0
   3f268:	d101      	bne.n	3f26e <ull_filter_rpa_update+0x9e>
   3f26a:	0798      	lsls	r0, r3, #30
   3f26c:	d410      	bmi.n	3f290 <ull_filter_rpa_update+0xc0>
			if (rl[i].pirk) {
   3f26e:	192b      	adds	r3, r5, r4
   3f270:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3f274:	0759      	lsls	r1, r3, #29
   3f276:	d431      	bmi.n	3f2dc <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   3f278:	192b      	adds	r3, r5, r4
   3f27a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3f27e:	071a      	lsls	r2, r3, #28
   3f280:	d41b      	bmi.n	3f2ba <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
   3f282:	4425      	add	r5, r4
   3f284:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   3f288:	f043 0302 	orr.w	r3, r3, #2
   3f28c:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f290:	3401      	adds	r4, #1
   3f292:	2c08      	cmp	r4, #8
   3f294:	f108 0806 	add.w	r8, r8, #6
   3f298:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3f29c:	d1db      	bne.n	3f256 <ull_filter_rpa_update+0x86>
	if (all) {
   3f29e:	f1ba 0f00 	cmp.w	sl, #0
   3f2a2:	d004      	beq.n	3f2ae <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   3f2a4:	4b39      	ldr	r3, [pc, #228]	; (3f38c <ull_filter_rpa_update+0x1bc>)
   3f2a6:	9a01      	ldr	r2, [sp, #4]
   3f2a8:	f8c3 9000 	str.w	r9, [r3]
   3f2ac:	605a      	str	r2, [r3, #4]
	if (timeout) {
   3f2ae:	f1bb 0f00 	cmp.w	fp, #0
   3f2b2:	d137      	bne.n	3f324 <ull_filter_rpa_update+0x154>
}
   3f2b4:	b007      	add	sp, #28
   3f2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   3f2ba:	a902      	add	r1, sp, #8
   3f2bc:	4630      	mov	r0, r6
   3f2be:	f00c fb53 	bl	4b968 <bt_rpa_create>
				LL_ASSERT(!err);
   3f2c2:	2800      	cmp	r0, #0
   3f2c4:	d154      	bne.n	3f370 <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   3f2c6:	ab02      	add	r3, sp, #8
   3f2c8:	f8c6 301d 	str.w	r3, [r6, #29]
   3f2cc:	4619      	mov	r1, r3
   3f2ce:	2206      	movs	r2, #6
   3f2d0:	4640      	mov	r0, r8
   3f2d2:	f00c fada 	bl	4b88a <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   3f2d6:	f8c6 801d 	str.w	r8, [r6, #29]
   3f2da:	e7d2      	b.n	3f282 <ull_filter_rpa_update+0xb2>
	psrc += length - 1;
   3f2dc:	7c33      	ldrb	r3, [r6, #16]
   3f2de:	4a2f      	ldr	r2, [pc, #188]	; (3f39c <ull_filter_rpa_update+0x1cc>)
   3f2e0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   3f2e4:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   3f2e6:	f10d 0307 	add.w	r3, sp, #7
   3f2ea:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   3f2ee:	f812 1901 	ldrb.w	r1, [r2], #-1
   3f2f2:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   3f2f6:	4283      	cmp	r3, r0
   3f2f8:	d1f9      	bne.n	3f2ee <ull_filter_rpa_update+0x11e>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   3f2fa:	f106 0117 	add.w	r1, r6, #23
   3f2fe:	a802      	add	r0, sp, #8
   3f300:	f00c fb32 	bl	4b968 <bt_rpa_create>
				LL_ASSERT(!err);
   3f304:	2800      	cmp	r0, #0
   3f306:	d0b7      	beq.n	3f278 <ull_filter_rpa_update+0xa8>
   3f308:	4a25      	ldr	r2, [pc, #148]	; (3f3a0 <ull_filter_rpa_update+0x1d0>)
   3f30a:	4926      	ldr	r1, [pc, #152]	; (3f3a4 <ull_filter_rpa_update+0x1d4>)
   3f30c:	4826      	ldr	r0, [pc, #152]	; (3f3a8 <ull_filter_rpa_update+0x1d8>)
   3f30e:	f240 23eb 	movw	r3, #747	; 0x2eb
   3f312:	f00a f9af 	bl	49674 <printk>
   3f316:	4040      	eors	r0, r0
   3f318:	f380 8811 	msr	BASEPRI, r0
   3f31c:	f04f 0003 	mov.w	r0, #3
   3f320:	df02      	svc	2
   3f322:	e7a9      	b.n	3f278 <ull_filter_rpa_update+0xa8>
		adv = ull_adv_is_enabled_get(0);
   3f324:	2000      	movs	r0, #0
   3f326:	f7f9 fa59 	bl	387dc <ull_adv_is_enabled_get>
		if (adv) {
   3f32a:	4604      	mov	r4, r0
   3f32c:	2800      	cmp	r0, #0
   3f32e:	d0c1      	beq.n	3f2b4 <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   3f330:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   3f334:	075b      	lsls	r3, r3, #29
   3f336:	d5bd      	bpl.n	3f2b4 <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   3f338:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   3f33c:	2b07      	cmp	r3, #7
   3f33e:	d8b9      	bhi.n	3f2b4 <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   3f340:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   3f344:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   3f348:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   3f34a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   3f34c:	3028      	adds	r0, #40	; 0x28
   3f34e:	f001 fab9 	bl	408c4 <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   3f352:	7872      	ldrb	r2, [r6, #1]
   3f354:	4605      	mov	r5, r0
   3f356:	3202      	adds	r2, #2
   3f358:	4631      	mov	r1, r6
   3f35a:	f00c fa96 	bl	4b88a <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   3f35e:	4629      	mov	r1, r5
   3f360:	4620      	mov	r0, r4
   3f362:	f7f9 fa65 	bl	38830 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   3f366:	f89d 3008 	ldrb.w	r3, [sp, #8]
   3f36a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   3f36e:	e7a1      	b.n	3f2b4 <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
   3f370:	4a0b      	ldr	r2, [pc, #44]	; (3f3a0 <ull_filter_rpa_update+0x1d0>)
   3f372:	490c      	ldr	r1, [pc, #48]	; (3f3a4 <ull_filter_rpa_update+0x1d4>)
   3f374:	480c      	ldr	r0, [pc, #48]	; (3f3a8 <ull_filter_rpa_update+0x1d8>)
   3f376:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   3f37a:	f00a f97b 	bl	49674 <printk>
   3f37e:	4040      	eors	r0, r0
   3f380:	f380 8811 	msr	BASEPRI, r0
   3f384:	f04f 0003 	mov.w	r0, #3
   3f388:	df02      	svc	2
   3f38a:	e79c      	b.n	3f2c6 <ull_filter_rpa_update+0xf6>
   3f38c:	200038f8 	.word	0x200038f8
   3f390:	20005ac8 	.word	0x20005ac8
   3f394:	2000595b 	.word	0x2000595b
   3f398:	2000589c 	.word	0x2000589c
   3f39c:	200058d4 	.word	0x200058d4
   3f3a0:	00052c7c 	.word	0x00052c7c
   3f3a4:	0005263c 	.word	0x0005263c
   3f3a8:	00052460 	.word	0x00052460

0003f3ac <rpa_timeout>:
{
   3f3ac:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   3f3ae:	2001      	movs	r0, #1
   3f3b0:	f7ff ff0e 	bl	3f1d0 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f3b4:	4a0a      	ldr	r2, [pc, #40]	; (3f3e0 <rpa_timeout+0x34>)
   3f3b6:	6812      	ldr	r2, [r2, #0]
   3f3b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   3f3bc:	f240 30e7 	movw	r0, #999	; 0x3e7
   3f3c0:	2100      	movs	r1, #0
   3f3c2:	fbe2 0103 	umlal	r0, r1, r2, r3
   3f3c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3f3ca:	2300      	movs	r3, #0
   3f3cc:	f7e6 fe98 	bl	26100 <__aeabi_uldivmod>
}
   3f3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f3d4:	4602      	mov	r2, r0
   3f3d6:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f3d8:	4802      	ldr	r0, [pc, #8]	; (3f3e4 <rpa_timeout+0x38>)
   3f3da:	f008 bded 	b.w	47fb8 <k_work_schedule>
   3f3de:	bf00      	nop
   3f3e0:	20005ac8 	.word	0x20005ac8
   3f3e4:	20003900 	.word	0x20003900

0003f3e8 <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   3f3e8:	2807      	cmp	r0, #7
   3f3ea:	d813      	bhi.n	3f414 <ull_filter_adva_get+0x2c>
{
   3f3ec:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   3f3ee:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3f3f2:	4d10      	ldr	r5, [pc, #64]	; (3f434 <ull_filter_adva_get+0x4c>)
   3f3f4:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   3f3f8:	071a      	lsls	r2, r3, #28
   3f3fa:	4604      	mov	r4, r0
   3f3fc:	ea4f 0680 	mov.w	r6, r0, lsl #2
   3f400:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   3f404:	d505      	bpl.n	3f412 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   3f406:	079b      	lsls	r3, r3, #30
   3f408:	d506      	bpl.n	3f418 <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   3f40a:	4426      	add	r6, r4
   3f40c:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   3f410:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   3f412:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   3f414:	2000      	movs	r0, #0
}
   3f416:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   3f418:	4a07      	ldr	r2, [pc, #28]	; (3f438 <ull_filter_adva_get+0x50>)
   3f41a:	4908      	ldr	r1, [pc, #32]	; (3f43c <ull_filter_adva_get+0x54>)
   3f41c:	4808      	ldr	r0, [pc, #32]	; (3f440 <ull_filter_adva_get+0x58>)
   3f41e:	f44f 7347 	mov.w	r3, #796	; 0x31c
   3f422:	f00a f927 	bl	49674 <printk>
   3f426:	4040      	eors	r0, r0
   3f428:	f380 8811 	msr	BASEPRI, r0
   3f42c:	f04f 0003 	mov.w	r0, #3
   3f430:	df02      	svc	2
   3f432:	e7ea      	b.n	3f40a <ull_filter_adva_get+0x22>
   3f434:	20005954 	.word	0x20005954
   3f438:	00052c7c 	.word	0x00052c7c
   3f43c:	00052ce0 	.word	0x00052ce0
   3f440:	00052460 	.word	0x00052460

0003f444 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   3f444:	2807      	cmp	r0, #7
   3f446:	d80c      	bhi.n	3f462 <ull_filter_tgta_get+0x1e>
   3f448:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3f44c:	4a06      	ldr	r2, [pc, #24]	; (3f468 <ull_filter_tgta_get+0x24>)
   3f44e:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   3f452:	074b      	lsls	r3, r1, #29
   3f454:	d505      	bpl.n	3f462 <ull_filter_tgta_get+0x1e>
		return rl[rl_idx].peer_rpa.val;
   3f456:	2328      	movs	r3, #40	; 0x28
   3f458:	fb03 2200 	mla	r2, r3, r0, r2
   3f45c:	f102 001e 	add.w	r0, r2, #30
   3f460:	4770      	bx	lr
	return NULL;
   3f462:	2000      	movs	r0, #0
   3f464:	4770      	bx	lr
   3f466:	bf00      	nop
   3f468:	20005954 	.word	0x20005954

0003f46c <ull_filter_rl_find>:
{
   3f46c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f470:	468b      	mov	fp, r1
	if (free_idx) {
   3f472:	4617      	mov	r7, r2
   3f474:	b10a      	cbz	r2, 3f47a <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   3f476:	23ff      	movs	r3, #255	; 0xff
   3f478:	7013      	strb	r3, [r2, #0]
   3f47a:	4d1b      	ldr	r5, [pc, #108]	; (3f4e8 <ull_filter_rl_find+0x7c>)
{
   3f47c:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f47e:	f000 0a01 	and.w	sl, r0, #1
   3f482:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   3f486:	e006      	b.n	3f496 <ull_filter_rl_find+0x2a>
   3f488:	4552      	cmp	r2, sl
   3f48a:	d01f      	beq.n	3f4cc <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f48c:	3401      	adds	r4, #1
   3f48e:	2c08      	cmp	r4, #8
   3f490:	f105 0528 	add.w	r5, r5, #40	; 0x28
   3f494:	d015      	beq.n	3f4c2 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f496:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   3f49a:	fa5f f884 	uxtb.w	r8, r4
   3f49e:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   3f4a2:	07d9      	lsls	r1, r3, #31
   3f4a4:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3f4a8:	d4ee      	bmi.n	3f488 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   3f4aa:	2f00      	cmp	r7, #0
   3f4ac:	d0ee      	beq.n	3f48c <ull_filter_rl_find+0x20>
   3f4ae:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f4b0:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   3f4b2:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   3f4b4:	bf08      	it	eq
   3f4b6:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f4ba:	2c08      	cmp	r4, #8
   3f4bc:	f105 0528 	add.w	r5, r5, #40	; 0x28
   3f4c0:	d1e9      	bne.n	3f496 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   3f4c2:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   3f4c6:	4640      	mov	r0, r8
   3f4c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3f4cc:	4628      	mov	r0, r5
   3f4ce:	2206      	movs	r2, #6
   3f4d0:	4659      	mov	r1, fp
   3f4d2:	f00c f9ca 	bl	4b86a <memcmp>
   3f4d6:	2800      	cmp	r0, #0
   3f4d8:	d0f5      	beq.n	3f4c6 <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   3f4da:	2f00      	cmp	r7, #0
   3f4dc:	d0d6      	beq.n	3f48c <ull_filter_rl_find+0x20>
   3f4de:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   3f4e2:	07db      	lsls	r3, r3, #31
   3f4e4:	d4d2      	bmi.n	3f48c <ull_filter_rl_find+0x20>
   3f4e6:	e7e2      	b.n	3f4ae <ull_filter_rl_find+0x42>
   3f4e8:	20005955 	.word	0x20005955

0003f4ec <ll_rl_add>:
{
   3f4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f4f0:	4607      	mov	r7, r0
   3f4f2:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f4f4:	2000      	movs	r0, #0
{
   3f4f6:	460d      	mov	r5, r1
   3f4f8:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f4fa:	f7f9 f97d 	bl	387f8 <ull_adv_is_enabled>
		? 0 : 1;
   3f4fe:	b118      	cbz	r0, 3f508 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f500:	200c      	movs	r0, #12
}
   3f502:	b005      	add	sp, #20
   3f504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static int rl_access_check(bool check_ar)
   3f508:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3f50a:	f7f9 fb99 	bl	38c40 <ull_scan_is_enabled>
		? 0 : 1;
   3f50e:	f030 0301 	bics.w	r3, r0, #1
   3f512:	d1f5      	bne.n	3f500 <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   3f514:	46ba      	mov	sl, r7
   3f516:	f10d 020f 	add.w	r2, sp, #15
   3f51a:	f81a 0b01 	ldrb.w	r0, [sl], #1
   3f51e:	4651      	mov	r1, sl
   3f520:	f7ff ffa4 	bl	3f46c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   3f524:	2807      	cmp	r0, #7
   3f526:	f240 80ae 	bls.w	3f686 <ll_rl_add+0x19a>
	} else if (j >= ARRAY_SIZE(rl)) {
   3f52a:	f89d 800f 	ldrb.w	r8, [sp, #15]
   3f52e:	f1b8 0f07 	cmp.w	r8, #7
   3f532:	f200 80a4 	bhi.w	3f67e <ll_rl_add+0x192>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   3f536:	eb08 0388 	add.w	r3, r8, r8, lsl #2
   3f53a:	4e55      	ldr	r6, [pc, #340]	; (3f690 <ll_rl_add+0x1a4>)
   3f53c:	00db      	lsls	r3, r3, #3
   3f53e:	1c58      	adds	r0, r3, #1
   3f540:	2206      	movs	r2, #6
   3f542:	4651      	mov	r1, sl
   3f544:	4430      	add	r0, r6
   3f546:	9300      	str	r3, [sp, #0]
   3f548:	f00c f99f 	bl	4b88a <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   3f54c:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   3f550:	7838      	ldrb	r0, [r7, #0]
   3f552:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   3f556:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
   3f55a:	f360 1186 	bfi	r1, r0, #6, #1
   3f55e:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
   3f562:	f806 100b 	strb.w	r1, [r6, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3f566:	4628      	mov	r0, r5
   3f568:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   3f56a:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3f56c:	f7f4 fa00 	bl	33970 <mem_nz>
   3f570:	f816 200b 	ldrb.w	r2, [r6, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3f574:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3f576:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3f57a:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3f57c:	f806 200b 	strb.w	r2, [r6, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3f580:	f7f4 f9f6 	bl	33970 <mem_nz>
   3f584:	f816 200b 	ldrb.w	r2, [r6, fp]
	if (rl[i].pirk) {
   3f588:	9b00      	ldr	r3, [sp, #0]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3f58a:	f000 0001 	and.w	r0, r0, #1
   3f58e:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   3f592:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3f596:	f806 200b 	strb.w	r2, [r6, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   3f59a:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   3f59e:	d142      	bne.n	3f626 <ll_rl_add+0x13a>
	if (rl[i].lirk) {
   3f5a0:	2800      	cmp	r0, #0
   3f5a2:	d15d      	bne.n	3f660 <ll_rl_add+0x174>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   3f5a4:	f103 0018 	add.w	r0, r3, #24
   3f5a8:	2206      	movs	r2, #6
   3f5aa:	4430      	add	r0, r6
   3f5ac:	2100      	movs	r1, #0
   3f5ae:	f00c f977 	bl	4b8a0 <memset>
	rl[i].dev = 0U;
   3f5b2:	eb0b 0308 	add.w	r3, fp, r8
   3f5b6:	4d37      	ldr	r5, [pc, #220]	; (3f694 <ll_rl_add+0x1a8>)
	rl[i].rpas_ready = 0U;
   3f5b8:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   3f5bc:	f022 0212 	bic.w	r2, r2, #18
   3f5c0:	f806 2033 	strb.w	r2, [r6, r3, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   3f5c4:	f897 9000 	ldrb.w	r9, [r7]
	for (i = 0; i < FAL_SIZE; i++) {
   3f5c8:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f5ca:	f009 0901 	and.w	r9, r9, #1
   3f5ce:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   3f5d2:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3f5d6:	f013 0301 	ands.w	r3, r3, #1
   3f5da:	d001      	beq.n	3f5e0 <ll_rl_add+0xf4>
   3f5dc:	454a      	cmp	r2, r9
   3f5de:	d014      	beq.n	3f60a <ll_rl_add+0x11e>
	for (i = 0; i < FAL_SIZE; i++) {
   3f5e0:	3401      	adds	r4, #1
   3f5e2:	2c08      	cmp	r4, #8
   3f5e4:	f105 0508 	add.w	r5, r5, #8
   3f5e8:	d1f1      	bne.n	3f5ce <ll_rl_add+0xe2>
   3f5ea:	2300      	movs	r3, #0
	rl[i].taken = 1U;
   3f5ec:	44c3      	add	fp, r8
   3f5ee:	015b      	lsls	r3, r3, #5
   3f5f0:	f816 203b 	ldrb.w	r2, [r6, fp, lsl #3]
   3f5f4:	f043 0301 	orr.w	r3, r3, #1
   3f5f8:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   3f5fc:	4313      	orrs	r3, r2
	return 0;
   3f5fe:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   3f600:	f806 303b 	strb.w	r3, [r6, fp, lsl #3]
}
   3f604:	b005      	add	sp, #20
   3f606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f60a:	4628      	mov	r0, r5
   3f60c:	2206      	movs	r2, #6
   3f60e:	4651      	mov	r1, sl
   3f610:	9300      	str	r3, [sp, #0]
   3f612:	f00c f92a 	bl	4b86a <memcmp>
   3f616:	9b00      	ldr	r3, [sp, #0]
   3f618:	2800      	cmp	r0, #0
   3f61a:	d1e1      	bne.n	3f5e0 <ll_rl_add+0xf4>
		fal[j].rl_idx = i;
   3f61c:	eb07 07c4 	add.w	r7, r7, r4, lsl #3
   3f620:	f887 8001 	strb.w	r8, [r7, #1]
		rl[i].fal = 1U;
   3f624:	e7e2      	b.n	3f5ec <ll_rl_add+0x100>
		rl[i].pirk_idx = peer_irk_count;
   3f626:	f8df c070 	ldr.w	ip, [pc, #112]	; 3f698 <ll_rl_add+0x1ac>
		peer_irk_rl_ids[peer_irk_count] = i;
   3f62a:	491c      	ldr	r1, [pc, #112]	; (3f69c <ll_rl_add+0x1b0>)
		rl[i].pirk_idx = peer_irk_count;
   3f62c:	f89c 2000 	ldrb.w	r2, [ip]
   3f630:	f8dd e004 	ldr.w	lr, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   3f634:	f801 8002 	strb.w	r8, [r1, r2]
   3f638:	4919      	ldr	r1, [pc, #100]	; (3f6a0 <ll_rl_add+0x1b4>)
		rl[i].pirk_idx = peer_irk_count;
   3f63a:	f88e 2017 	strb.w	r2, [lr, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   3f63e:	eb01 1102 	add.w	r1, r1, r2, lsl #4
   3f642:	3201      	adds	r2, #1
   3f644:	f88c 2000 	strb.w	r2, [ip]
	psrc += length - 1;
   3f648:	3901      	subs	r1, #1
   3f64a:	f105 020f 	add.w	r2, r5, #15
	for (; length > 0; length--) {
   3f64e:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   3f650:	f812 c901 	ldrb.w	ip, [r2], #-1
   3f654:	f801 cf01 	strb.w	ip, [r1, #1]!
	for (; length > 0; length--) {
   3f658:	4295      	cmp	r5, r2
   3f65a:	d1f9      	bne.n	3f650 <ll_rl_add+0x164>
	if (rl[i].lirk) {
   3f65c:	2800      	cmp	r0, #0
   3f65e:	d0a1      	beq.n	3f5a4 <ll_rl_add+0xb8>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   3f660:	1dd8      	adds	r0, r3, #7
   3f662:	4649      	mov	r1, r9
   3f664:	2210      	movs	r2, #16
   3f666:	4430      	add	r0, r6
   3f668:	9300      	str	r3, [sp, #0]
   3f66a:	f00c f90e 	bl	4b88a <memcpy>
		rl[i].local_rpa = NULL;
   3f66e:	eb0b 0208 	add.w	r2, fp, r8
   3f672:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   3f676:	2100      	movs	r1, #0
   3f678:	9b00      	ldr	r3, [sp, #0]
   3f67a:	6251      	str	r1, [r2, #36]	; 0x24
   3f67c:	e792      	b.n	3f5a4 <ll_rl_add+0xb8>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   3f67e:	2007      	movs	r0, #7
}
   3f680:	b005      	add	sp, #20
   3f682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   3f686:	2012      	movs	r0, #18
}
   3f688:	b005      	add	sp, #20
   3f68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f68e:	bf00      	nop
   3f690:	20005954 	.word	0x20005954
   3f694:	2000582a 	.word	0x2000582a
   3f698:	20006dd3 	.word	0x20006dd3
   3f69c:	200058cc 	.word	0x200058cc
   3f6a0:	200058d4 	.word	0x200058d4

0003f6a4 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   3f6a4:	2807      	cmp	r0, #7
   3f6a6:	d807      	bhi.n	3f6b8 <ull_filter_lll_lrpa_used+0x14>
   3f6a8:	4b04      	ldr	r3, [pc, #16]	; (3f6bc <ull_filter_lll_lrpa_used+0x18>)
   3f6aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3f6ae:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   3f6b2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   3f6b6:	4770      	bx	lr
   3f6b8:	2000      	movs	r0, #0
}
   3f6ba:	4770      	bx	lr
   3f6bc:	20005954 	.word	0x20005954

0003f6c0 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   3f6c0:	2807      	cmp	r0, #7
   3f6c2:	d812      	bhi.n	3f6ea <ull_filter_lll_lrpa_get+0x2a>
   3f6c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3f6c8:	4a09      	ldr	r2, [pc, #36]	; (3f6f0 <ull_filter_lll_lrpa_get+0x30>)
   3f6ca:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   3f6ce:	f013 0f08 	tst.w	r3, #8
   3f6d2:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   3f6d6:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   3f6da:	d007      	beq.n	3f6ec <ull_filter_lll_lrpa_get+0x2c>
   3f6dc:	f3c3 0040 	ubfx	r0, r3, #1, #1
   3f6e0:	079b      	lsls	r3, r3, #30
   3f6e2:	d503      	bpl.n	3f6ec <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   3f6e4:	440a      	add	r2, r1
   3f6e6:	6a50      	ldr	r0, [r2, #36]	; 0x24
   3f6e8:	4770      	bx	lr
		return NULL;
   3f6ea:	2000      	movs	r0, #0
}
   3f6ec:	4770      	bx	lr
   3f6ee:	bf00      	nop
   3f6f0:	20005954 	.word	0x20005954

0003f6f4 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   3f6f4:	4b02      	ldr	r3, [pc, #8]	; (3f700 <ull_filter_lll_irks_get+0xc>)
   3f6f6:	781b      	ldrb	r3, [r3, #0]
   3f6f8:	7003      	strb	r3, [r0, #0]
}
   3f6fa:	4802      	ldr	r0, [pc, #8]	; (3f704 <ull_filter_lll_irks_get+0x10>)
   3f6fc:	4770      	bx	lr
   3f6fe:	bf00      	nop
   3f700:	20006dd3 	.word	0x20006dd3
   3f704:	200058d4 	.word	0x200058d4

0003f708 <ull_filter_lll_rl_idx>:
{
   3f708:	b538      	push	{r3, r4, r5, lr}
   3f70a:	460c      	mov	r4, r1
	if (filter) {
   3f70c:	b150      	cbz	r0, 3f724 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   3f70e:	2907      	cmp	r1, #7
   3f710:	d822      	bhi.n	3f758 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(fal[devmatch_id].taken);
   3f712:	4d2a      	ldr	r5, [pc, #168]	; (3f7bc <ull_filter_lll_rl_idx+0xb4>)
   3f714:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   3f718:	07da      	lsls	r2, r3, #31
   3f71a:	d52f      	bpl.n	3f77c <ull_filter_lll_rl_idx+0x74>
		i = fal[devmatch_id].rl_idx;
   3f71c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   3f720:	7868      	ldrb	r0, [r5, #1]
}
   3f722:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   3f724:	2907      	cmp	r1, #7
   3f726:	d83a      	bhi.n	3f79e <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   3f728:	4b25      	ldr	r3, [pc, #148]	; (3f7c0 <ull_filter_lll_rl_idx+0xb8>)
   3f72a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3f72e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   3f732:	07db      	lsls	r3, r3, #31
   3f734:	d501      	bpl.n	3f73a <ull_filter_lll_rl_idx+0x32>
   3f736:	4620      	mov	r0, r4
}
   3f738:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   3f73a:	4a22      	ldr	r2, [pc, #136]	; (3f7c4 <ull_filter_lll_rl_idx+0xbc>)
   3f73c:	4922      	ldr	r1, [pc, #136]	; (3f7c8 <ull_filter_lll_rl_idx+0xc0>)
   3f73e:	4823      	ldr	r0, [pc, #140]	; (3f7cc <ull_filter_lll_rl_idx+0xc4>)
   3f740:	f240 3363 	movw	r3, #867	; 0x363
   3f744:	f009 ff96 	bl	49674 <printk>
   3f748:	4040      	eors	r0, r0
   3f74a:	f380 8811 	msr	BASEPRI, r0
   3f74e:	f04f 0003 	mov.w	r0, #3
   3f752:	df02      	svc	2
   3f754:	4620      	mov	r0, r4
}
   3f756:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   3f758:	4a1a      	ldr	r2, [pc, #104]	; (3f7c4 <ull_filter_lll_rl_idx+0xbc>)
   3f75a:	491d      	ldr	r1, [pc, #116]	; (3f7d0 <ull_filter_lll_rl_idx+0xc8>)
   3f75c:	481b      	ldr	r0, [pc, #108]	; (3f7cc <ull_filter_lll_rl_idx+0xc4>)
   3f75e:	f240 335d 	movw	r3, #861	; 0x35d
   3f762:	f009 ff87 	bl	49674 <printk>
   3f766:	4040      	eors	r0, r0
   3f768:	f380 8811 	msr	BASEPRI, r0
   3f76c:	f04f 0003 	mov.w	r0, #3
   3f770:	df02      	svc	2
		LL_ASSERT(fal[devmatch_id].taken);
   3f772:	4d12      	ldr	r5, [pc, #72]	; (3f7bc <ull_filter_lll_rl_idx+0xb4>)
   3f774:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   3f778:	07da      	lsls	r2, r3, #31
   3f77a:	d4cf      	bmi.n	3f71c <ull_filter_lll_rl_idx+0x14>
   3f77c:	4a11      	ldr	r2, [pc, #68]	; (3f7c4 <ull_filter_lll_rl_idx+0xbc>)
   3f77e:	4915      	ldr	r1, [pc, #84]	; (3f7d4 <ull_filter_lll_rl_idx+0xcc>)
   3f780:	4812      	ldr	r0, [pc, #72]	; (3f7cc <ull_filter_lll_rl_idx+0xc4>)
   3f782:	f240 335e 	movw	r3, #862	; 0x35e
   3f786:	f009 ff75 	bl	49674 <printk>
   3f78a:	4040      	eors	r0, r0
   3f78c:	f380 8811 	msr	BASEPRI, r0
   3f790:	f04f 0003 	mov.w	r0, #3
   3f794:	df02      	svc	2
		i = fal[devmatch_id].rl_idx;
   3f796:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   3f79a:	7868      	ldrb	r0, [r5, #1]
   3f79c:	e7c1      	b.n	3f722 <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   3f79e:	4a09      	ldr	r2, [pc, #36]	; (3f7c4 <ull_filter_lll_rl_idx+0xbc>)
   3f7a0:	490d      	ldr	r1, [pc, #52]	; (3f7d8 <ull_filter_lll_rl_idx+0xd0>)
   3f7a2:	480a      	ldr	r0, [pc, #40]	; (3f7cc <ull_filter_lll_rl_idx+0xc4>)
   3f7a4:	f240 3361 	movw	r3, #865	; 0x361
   3f7a8:	f009 ff64 	bl	49674 <printk>
   3f7ac:	4040      	eors	r0, r0
   3f7ae:	f380 8811 	msr	BASEPRI, r0
   3f7b2:	f04f 0003 	mov.w	r0, #3
   3f7b6:	df02      	svc	2
   3f7b8:	e7b6      	b.n	3f728 <ull_filter_lll_rl_idx+0x20>
   3f7ba:	bf00      	nop
   3f7bc:	20005828 	.word	0x20005828
   3f7c0:	20005954 	.word	0x20005954
   3f7c4:	00052c7c 	.word	0x00052c7c
   3f7c8:	00052e5c 	.word	0x00052e5c
   3f7cc:	00052460 	.word	0x00052460
   3f7d0:	00052cf8 	.word	0x00052cf8
   3f7d4:	00052da0 	.word	0x00052da0
   3f7d8:	00052db8 	.word	0x00052db8

0003f7dc <ull_filter_lll_rl_irk_idx>:
{
   3f7dc:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3f7de:	4b20      	ldr	r3, [pc, #128]	; (3f860 <ull_filter_lll_rl_irk_idx+0x84>)
   3f7e0:	781b      	ldrb	r3, [r3, #0]
   3f7e2:	4283      	cmp	r3, r0
{
   3f7e4:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3f7e6:	d90c      	bls.n	3f802 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   3f7e8:	4b1e      	ldr	r3, [pc, #120]	; (3f864 <ull_filter_lll_rl_irk_idx+0x88>)
   3f7ea:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   3f7ec:	2c07      	cmp	r4, #7
   3f7ee:	d819      	bhi.n	3f824 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   3f7f0:	4b1d      	ldr	r3, [pc, #116]	; (3f868 <ull_filter_lll_rl_irk_idx+0x8c>)
   3f7f2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   3f7f6:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   3f7fa:	07db      	lsls	r3, r3, #31
   3f7fc:	d520      	bpl.n	3f840 <ull_filter_lll_rl_irk_idx+0x64>
}
   3f7fe:	4620      	mov	r0, r4
   3f800:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   3f802:	4a1a      	ldr	r2, [pc, #104]	; (3f86c <ull_filter_lll_rl_irk_idx+0x90>)
   3f804:	491a      	ldr	r1, [pc, #104]	; (3f870 <ull_filter_lll_rl_irk_idx+0x94>)
   3f806:	481b      	ldr	r0, [pc, #108]	; (3f874 <ull_filter_lll_rl_irk_idx+0x98>)
   3f808:	f240 336d 	movw	r3, #877	; 0x36d
   3f80c:	f009 ff32 	bl	49674 <printk>
   3f810:	4040      	eors	r0, r0
   3f812:	f380 8811 	msr	BASEPRI, r0
   3f816:	f04f 0003 	mov.w	r0, #3
   3f81a:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   3f81c:	4b11      	ldr	r3, [pc, #68]	; (3f864 <ull_filter_lll_rl_irk_idx+0x88>)
   3f81e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   3f820:	2c07      	cmp	r4, #7
   3f822:	d9e5      	bls.n	3f7f0 <ull_filter_lll_rl_irk_idx+0x14>
   3f824:	4a11      	ldr	r2, [pc, #68]	; (3f86c <ull_filter_lll_rl_irk_idx+0x90>)
   3f826:	4914      	ldr	r1, [pc, #80]	; (3f878 <ull_filter_lll_rl_irk_idx+0x9c>)
   3f828:	4812      	ldr	r0, [pc, #72]	; (3f874 <ull_filter_lll_rl_irk_idx+0x98>)
   3f82a:	f240 336f 	movw	r3, #879	; 0x36f
   3f82e:	f009 ff21 	bl	49674 <printk>
   3f832:	4040      	eors	r0, r0
   3f834:	f380 8811 	msr	BASEPRI, r0
   3f838:	f04f 0003 	mov.w	r0, #3
   3f83c:	df02      	svc	2
   3f83e:	e7d7      	b.n	3f7f0 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   3f840:	4a0a      	ldr	r2, [pc, #40]	; (3f86c <ull_filter_lll_rl_irk_idx+0x90>)
   3f842:	490e      	ldr	r1, [pc, #56]	; (3f87c <ull_filter_lll_rl_irk_idx+0xa0>)
   3f844:	480b      	ldr	r0, [pc, #44]	; (3f874 <ull_filter_lll_rl_irk_idx+0x98>)
   3f846:	f44f 735c 	mov.w	r3, #880	; 0x370
   3f84a:	f009 ff13 	bl	49674 <printk>
   3f84e:	4040      	eors	r0, r0
   3f850:	f380 8811 	msr	BASEPRI, r0
   3f854:	f04f 0003 	mov.w	r0, #3
   3f858:	df02      	svc	2
}
   3f85a:	4620      	mov	r0, r4
   3f85c:	bd10      	pop	{r4, pc}
   3f85e:	bf00      	nop
   3f860:	20006dd3 	.word	0x20006dd3
   3f864:	200058cc 	.word	0x200058cc
   3f868:	20005954 	.word	0x20005954
   3f86c:	00052c7c 	.word	0x00052c7c
   3f870:	00052e68 	.word	0x00052e68
   3f874:	00052460 	.word	0x00052460
   3f878:	00052e88 	.word	0x00052e88
   3f87c:	00052e5c 	.word	0x00052e5c

0003f880 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   3f880:	2807      	cmp	r0, #7
   3f882:	d823      	bhi.n	3f8cc <ull_filter_lll_irk_in_fal+0x4c>
{
   3f884:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   3f886:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3f88a:	4e11      	ldr	r6, [pc, #68]	; (3f8d0 <ull_filter_lll_irk_in_fal+0x50>)
   3f88c:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   3f890:	07db      	lsls	r3, r3, #31
   3f892:	4604      	mov	r4, r0
   3f894:	ea4f 0580 	mov.w	r5, r0, lsl #2
   3f898:	d505      	bpl.n	3f8a6 <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   3f89a:	4425      	add	r5, r4
   3f89c:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   3f8a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   3f8a4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   3f8a6:	4a0b      	ldr	r2, [pc, #44]	; (3f8d4 <ull_filter_lll_irk_in_fal+0x54>)
   3f8a8:	490b      	ldr	r1, [pc, #44]	; (3f8d8 <ull_filter_lll_irk_in_fal+0x58>)
   3f8aa:	480c      	ldr	r0, [pc, #48]	; (3f8dc <ull_filter_lll_irk_in_fal+0x5c>)
   3f8ac:	f240 337b 	movw	r3, #891	; 0x37b
   3f8b0:	f009 fee0 	bl	49674 <printk>
   3f8b4:	4040      	eors	r0, r0
   3f8b6:	f380 8811 	msr	BASEPRI, r0
   3f8ba:	f04f 0003 	mov.w	r0, #3
   3f8be:	df02      	svc	2
	return rl[rl_idx].fal;
   3f8c0:	4425      	add	r5, r4
   3f8c2:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   3f8c6:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   3f8ca:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   3f8cc:	2000      	movs	r0, #0
}
   3f8ce:	4770      	bx	lr
   3f8d0:	20005954 	.word	0x20005954
   3f8d4:	00052c7c 	.word	0x00052c7c
   3f8d8:	00052ccc 	.word	0x00052ccc
   3f8dc:	00052460 	.word	0x00052460

0003f8e0 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   3f8e0:	4b14      	ldr	r3, [pc, #80]	; (3f934 <ull_filter_lll_rl_idx_allowed+0x54>)
   3f8e2:	781b      	ldrb	r3, [r3, #0]
   3f8e4:	b19b      	cbz	r3, 3f90e <ull_filter_lll_rl_idx_allowed+0x2e>
   3f8e6:	2907      	cmp	r1, #7
{
   3f8e8:	b570      	push	{r4, r5, r6, lr}
   3f8ea:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   3f8ec:	d80d      	bhi.n	3f90a <ull_filter_lll_rl_idx_allowed+0x2a>
   3f8ee:	b960      	cbnz	r0, 3f90a <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   3f8f0:	4e11      	ldr	r6, [pc, #68]	; (3f938 <ull_filter_lll_rl_idx_allowed+0x58>)
   3f8f2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   3f8f6:	008d      	lsls	r5, r1, #2
   3f8f8:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   3f8fc:	07da      	lsls	r2, r3, #31
   3f8fe:	d50b      	bpl.n	3f918 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   3f900:	4425      	add	r5, r4
   3f902:	f816 0035 	ldrb.w	r0, [r6, r5, lsl #3]
   3f906:	0743      	lsls	r3, r0, #29
   3f908:	d403      	bmi.n	3f912 <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   3f90a:	2001      	movs	r0, #1
}
   3f90c:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   3f90e:	2001      	movs	r0, #1
}
   3f910:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   3f912:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   3f916:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   3f918:	4a08      	ldr	r2, [pc, #32]	; (3f93c <ull_filter_lll_rl_idx_allowed+0x5c>)
   3f91a:	4909      	ldr	r1, [pc, #36]	; (3f940 <ull_filter_lll_rl_idx_allowed+0x60>)
   3f91c:	4809      	ldr	r0, [pc, #36]	; (3f944 <ull_filter_lll_rl_idx_allowed+0x64>)
   3f91e:	f44f 7365 	mov.w	r3, #916	; 0x394
   3f922:	f009 fea7 	bl	49674 <printk>
   3f926:	4040      	eors	r0, r0
   3f928:	f380 8811 	msr	BASEPRI, r0
   3f92c:	f04f 0003 	mov.w	r0, #3
   3f930:	df02      	svc	2
   3f932:	e7e5      	b.n	3f900 <ull_filter_lll_rl_idx_allowed+0x20>
   3f934:	20006dd4 	.word	0x20006dd4
   3f938:	20005954 	.word	0x20005954
   3f93c:	00052c7c 	.word	0x00052c7c
   3f940:	00052ccc 	.word	0x00052ccc
   3f944:	00052460 	.word	0x00052460

0003f948 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   3f948:	7813      	ldrb	r3, [r2, #0]
   3f94a:	2bff      	cmp	r3, #255	; 0xff
   3f94c:	d11b      	bne.n	3f986 <ull_filter_lll_rl_addr_allowed+0x3e>
{
   3f94e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f952:	4d19      	ldr	r5, [pc, #100]	; (3f9b8 <ull_filter_lll_rl_addr_allowed+0x70>)
   3f954:	4604      	mov	r4, r0
   3f956:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   3f958:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   3f95a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   3f95e:	b2df      	uxtb	r7, r3
   3f960:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   3f964:	f01c 0001 	ands.w	r0, ip, #1
   3f968:	ea4f 0683 	mov.w	r6, r3, lsl #2
   3f96c:	d003      	beq.n	3f976 <ull_filter_lll_rl_addr_allowed+0x2e>
   3f96e:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   3f972:	45a4      	cmp	ip, r4
   3f974:	d009      	beq.n	3f98a <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f976:	3301      	adds	r3, #1
   3f978:	2b08      	cmp	r3, #8
   3f97a:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   3f97e:	d1ec      	bne.n	3f95a <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   3f980:	2001      	movs	r0, #1
}
   3f982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   3f986:	2001      	movs	r0, #1
}
   3f988:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3f98a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   3f98e:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3f990:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   3f994:	f81c af01 	ldrb.w	sl, [ip, #1]!
   3f998:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   3f99c:	45ca      	cmp	sl, r9
   3f99e:	d1ea      	bne.n	3f976 <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   3f9a0:	45dc      	cmp	ip, fp
   3f9a2:	d1f7      	bne.n	3f994 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   3f9a4:	441e      	add	r6, r3
				*rl_idx = i;
   3f9a6:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   3f9a8:	f815 3036 	ldrb.w	r3, [r5, r6, lsl #3]
   3f9ac:	075a      	lsls	r2, r3, #29
   3f9ae:	d5e8      	bpl.n	3f982 <ull_filter_lll_rl_addr_allowed+0x3a>
   3f9b0:	f3c3 1000 	ubfx	r0, r3, #4, #1
   3f9b4:	e7e5      	b.n	3f982 <ull_filter_lll_rl_addr_allowed+0x3a>
   3f9b6:	bf00      	nop
   3f9b8:	20005954 	.word	0x20005954

0003f9bc <ull_filter_lll_rl_addr_resolve>:
{
   3f9bc:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   3f9be:	4b0e      	ldr	r3, [pc, #56]	; (3f9f8 <ull_filter_lll_rl_addr_resolve+0x3c>)
   3f9c0:	781c      	ldrb	r4, [r3, #0]
   3f9c2:	b17c      	cbz	r4, 3f9e4 <ull_filter_lll_rl_addr_resolve+0x28>
   3f9c4:	2a07      	cmp	r2, #7
   3f9c6:	d80d      	bhi.n	3f9e4 <ull_filter_lll_rl_addr_resolve+0x28>
   3f9c8:	4c0c      	ldr	r4, [pc, #48]	; (3f9fc <ull_filter_lll_rl_addr_resolve+0x40>)
   3f9ca:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   3f9ce:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   3f9d2:	f01c 0f08 	tst.w	ip, #8
   3f9d6:	d005      	beq.n	3f9e4 <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   3f9d8:	b120      	cbz	r0, 3f9e4 <ull_filter_lll_rl_addr_resolve+0x28>
   3f9da:	794b      	ldrb	r3, [r1, #5]
   3f9dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3f9e0:	2b40      	cmp	r3, #64	; 0x40
   3f9e2:	d002      	beq.n	3f9ea <ull_filter_lll_rl_addr_resolve+0x2e>
}
   3f9e4:	2000      	movs	r0, #0
   3f9e6:	bc10      	pop	{r4}
   3f9e8:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   3f9ea:	2328      	movs	r3, #40	; 0x28
   3f9ec:	fb03 4002 	mla	r0, r3, r2, r4
   3f9f0:	3007      	adds	r0, #7
}
   3f9f2:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   3f9f4:	f00b bfa5 	b.w	4b942 <bt_rpa_irk_matches>
   3f9f8:	20006dd4 	.word	0x20006dd4
   3f9fc:	20005954 	.word	0x20005954

0003fa00 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   3fa00:	4b02      	ldr	r3, [pc, #8]	; (3fa0c <ull_filter_lll_rl_enabled+0xc>)
   3fa02:	7818      	ldrb	r0, [r3, #0]
}
   3fa04:	3800      	subs	r0, #0
   3fa06:	bf18      	it	ne
   3fa08:	2001      	movne	r0, #1
   3fa0a:	4770      	bx	lr
   3fa0c:	20006dd4 	.word	0x20006dd4

0003fa10 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   3fa10:	4668      	mov	r0, sp
   3fa12:	f020 0107 	bic.w	r1, r0, #7
   3fa16:	468d      	mov	sp, r1
   3fa18:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   3fa1a:	f002 fdd9 	bl	425d0 <isr_radio>

	ISR_DIRECT_PM();
   3fa1e:	f7ec fe7d 	bl	2c71c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3fa22:	f7ec ff4d 	bl	2c8c0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   3fa26:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3fa2a:	4685      	mov	sp, r0
   3fa2c:	4770      	bx	lr
   3fa2e:	bf00      	nop

0003fa30 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   3fa30:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   3fa32:	4b09      	ldr	r3, [pc, #36]	; (3fa58 <rtc0_nrf5_isr+0x28>)
   3fa34:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   3fa38:	b93a      	cbnz	r2, 3fa4a <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   3fa3a:	2001      	movs	r0, #1
   3fa3c:	f7f4 f87c 	bl	33b38 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   3fa40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   3fa44:	2002      	movs	r0, #2
   3fa46:	f7f4 b877 	b.w	33b38 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   3fa4a:	2000      	movs	r0, #0
   3fa4c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   3fa50:	f7f5 f98a 	bl	34d68 <ticker_trigger>
   3fa54:	e7f1      	b.n	3fa3a <rtc0_nrf5_isr+0xa>
   3fa56:	bf00      	nop
   3fa58:	4000b000 	.word	0x4000b000

0003fa5c <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   3fa5c:	2000      	movs	r0, #0
   3fa5e:	f7f4 b86b 	b.w	33b38 <mayfly_run>
   3fa62:	bf00      	nop

0003fa64 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   3fa64:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   3fa66:	4b0e      	ldr	r3, [pc, #56]	; (3faa0 <ticker_stop_op_cb+0x3c>)
   3fa68:	4c0e      	ldr	r4, [pc, #56]	; (3faa4 <ticker_stop_op_cb+0x40>)
   3fa6a:	781a      	ldrb	r2, [r3, #0]
   3fa6c:	7823      	ldrb	r3, [r4, #0]
   3fa6e:	429a      	cmp	r2, r3
   3fa70:	d006      	beq.n	3fa80 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   3fa72:	490d      	ldr	r1, [pc, #52]	; (3faa8 <ticker_stop_op_cb+0x44>)
   3fa74:	4a0d      	ldr	r2, [pc, #52]	; (3faac <ticker_stop_op_cb+0x48>)
   3fa76:	7809      	ldrb	r1, [r1, #0]
   3fa78:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   3fa7a:	3301      	adds	r3, #1
   3fa7c:	7023      	strb	r3, [r4, #0]
}
   3fa7e:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   3fa80:	4a0b      	ldr	r2, [pc, #44]	; (3fab0 <ticker_stop_op_cb+0x4c>)
   3fa82:	490c      	ldr	r1, [pc, #48]	; (3fab4 <ticker_stop_op_cb+0x50>)
   3fa84:	480c      	ldr	r0, [pc, #48]	; (3fab8 <ticker_stop_op_cb+0x54>)
   3fa86:	f240 3301 	movw	r3, #769	; 0x301
   3fa8a:	f009 fdf3 	bl	49674 <printk>
   3fa8e:	4040      	eors	r0, r0
   3fa90:	f380 8811 	msr	BASEPRI, r0
   3fa94:	f04f 0003 	mov.w	r0, #3
   3fa98:	df02      	svc	2
	preempt_stop_ack++;
   3fa9a:	7823      	ldrb	r3, [r4, #0]
   3fa9c:	e7e9      	b.n	3fa72 <ticker_stop_op_cb+0xe>
   3fa9e:	bf00      	nop
   3faa0:	20006dda 	.word	0x20006dda
   3faa4:	20006dd9 	.word	0x20006dd9
   3faa8:	20006dd5 	.word	0x20006dd5
   3faac:	20006dd6 	.word	0x20006dd6
   3fab0:	00052e90 	.word	0x00052e90
   3fab4:	00052ed8 	.word	0x00052ed8
   3fab8:	00052460 	.word	0x00052460

0003fabc <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   3fabc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3fabe:	b9f8      	cbnz	r0, 3fb00 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   3fac0:	4b1e      	ldr	r3, [pc, #120]	; (3fb3c <ticker_start_op_cb+0x80>)
   3fac2:	4d1f      	ldr	r5, [pc, #124]	; (3fb40 <ticker_start_op_cb+0x84>)
   3fac4:	781a      	ldrb	r2, [r3, #0]
   3fac6:	782b      	ldrb	r3, [r5, #0]
   3fac8:	429a      	cmp	r2, r3
   3faca:	d027      	beq.n	3fb1c <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   3facc:	4a1d      	ldr	r2, [pc, #116]	; (3fb44 <ticker_start_op_cb+0x88>)
   3face:	4c1e      	ldr	r4, [pc, #120]	; (3fb48 <ticker_start_op_cb+0x8c>)
   3fad0:	7812      	ldrb	r2, [r2, #0]
   3fad2:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   3fad4:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   3fad6:	4291      	cmp	r1, r2
	preempt_start_ack++;
   3fad8:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   3fada:	b2d3      	uxtb	r3, r2
   3fadc:	d00d      	beq.n	3fafa <ticker_start_op_cb+0x3e>
   3fade:	4a1b      	ldr	r2, [pc, #108]	; (3fb4c <ticker_start_op_cb+0x90>)
   3fae0:	491b      	ldr	r1, [pc, #108]	; (3fb50 <ticker_start_op_cb+0x94>)
   3fae2:	481c      	ldr	r0, [pc, #112]	; (3fb54 <ticker_start_op_cb+0x98>)
   3fae4:	f240 330f 	movw	r3, #783	; 0x30f
   3fae8:	f009 fdc4 	bl	49674 <printk>
   3faec:	4040      	eors	r0, r0
   3faee:	f380 8811 	msr	BASEPRI, r0
   3faf2:	f04f 0003 	mov.w	r0, #3
   3faf6:	df02      	svc	2
	preempt_req++;
   3faf8:	7823      	ldrb	r3, [r4, #0]
   3fafa:	3301      	adds	r3, #1
   3fafc:	7023      	strb	r3, [r4, #0]
}
   3fafe:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3fb00:	4a12      	ldr	r2, [pc, #72]	; (3fb4c <ticker_start_op_cb+0x90>)
   3fb02:	4915      	ldr	r1, [pc, #84]	; (3fb58 <ticker_start_op_cb+0x9c>)
   3fb04:	4813      	ldr	r0, [pc, #76]	; (3fb54 <ticker_start_op_cb+0x98>)
   3fb06:	f240 330a 	movw	r3, #778	; 0x30a
   3fb0a:	f009 fdb3 	bl	49674 <printk>
   3fb0e:	4040      	eors	r0, r0
   3fb10:	f380 8811 	msr	BASEPRI, r0
   3fb14:	f04f 0003 	mov.w	r0, #3
   3fb18:	df02      	svc	2
   3fb1a:	e7d1      	b.n	3fac0 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   3fb1c:	4a0b      	ldr	r2, [pc, #44]	; (3fb4c <ticker_start_op_cb+0x90>)
   3fb1e:	490f      	ldr	r1, [pc, #60]	; (3fb5c <ticker_start_op_cb+0xa0>)
   3fb20:	480c      	ldr	r0, [pc, #48]	; (3fb54 <ticker_start_op_cb+0x98>)
   3fb22:	f44f 7343 	mov.w	r3, #780	; 0x30c
   3fb26:	f009 fda5 	bl	49674 <printk>
   3fb2a:	4040      	eors	r0, r0
   3fb2c:	f380 8811 	msr	BASEPRI, r0
   3fb30:	f04f 0003 	mov.w	r0, #3
   3fb34:	df02      	svc	2
	preempt_start_ack++;
   3fb36:	782b      	ldrb	r3, [r5, #0]
   3fb38:	e7c8      	b.n	3facc <ticker_start_op_cb+0x10>
   3fb3a:	bf00      	nop
   3fb3c:	20006dd8 	.word	0x20006dd8
   3fb40:	20006dd7 	.word	0x20006dd7
   3fb44:	20006dd5 	.word	0x20006dd5
   3fb48:	20006dd6 	.word	0x20006dd6
   3fb4c:	00052e90 	.word	0x00052e90
   3fb50:	00052f28 	.word	0x00052f28
   3fb54:	00052460 	.word	0x00052460
   3fb58:	000529d0 	.word	0x000529d0
   3fb5c:	00052f00 	.word	0x00052f00

0003fb60 <isr_race>:
	radio_status_reset();
   3fb60:	f002 be54 	b.w	4280c <radio_status_reset>

0003fb64 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   3fb64:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   3fb66:	4a18      	ldr	r2, [pc, #96]	; (3fbc8 <preempt_ticker_cb+0x64>)
   3fb68:	4c18      	ldr	r4, [pc, #96]	; (3fbcc <preempt_ticker_cb+0x68>)
   3fb6a:	7812      	ldrb	r2, [r2, #0]
   3fb6c:	7823      	ldrb	r3, [r4, #0]
   3fb6e:	429a      	cmp	r2, r3
   3fb70:	d01b      	beq.n	3fbaa <preempt_ticker_cb+0x46>
	preempt_ack++;
   3fb72:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   3fb74:	4b16      	ldr	r3, [pc, #88]	; (3fbd0 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   3fb76:	3101      	adds	r1, #1
   3fb78:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3fb7a:	2200      	movs	r2, #0
	preempt_ack++;
   3fb7c:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   3fb7e:	9903      	ldr	r1, [sp, #12]
   3fb80:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3fb82:	2001      	movs	r0, #1
   3fb84:	4611      	mov	r1, r2
   3fb86:	f7f3 ff83 	bl	33a90 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   3fb8a:	b900      	cbnz	r0, 3fb8e <preempt_ticker_cb+0x2a>
}
   3fb8c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   3fb8e:	4a11      	ldr	r2, [pc, #68]	; (3fbd4 <preempt_ticker_cb+0x70>)
   3fb90:	4911      	ldr	r1, [pc, #68]	; (3fbd8 <preempt_ticker_cb+0x74>)
   3fb92:	4812      	ldr	r0, [pc, #72]	; (3fbdc <preempt_ticker_cb+0x78>)
   3fb94:	f240 3376 	movw	r3, #886	; 0x376
   3fb98:	f009 fd6c 	bl	49674 <printk>
   3fb9c:	4040      	eors	r0, r0
   3fb9e:	f380 8811 	msr	BASEPRI, r0
   3fba2:	f04f 0003 	mov.w	r0, #3
   3fba6:	df02      	svc	2
}
   3fba8:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   3fbaa:	4a0a      	ldr	r2, [pc, #40]	; (3fbd4 <preempt_ticker_cb+0x70>)
   3fbac:	490c      	ldr	r1, [pc, #48]	; (3fbe0 <preempt_ticker_cb+0x7c>)
   3fbae:	480b      	ldr	r0, [pc, #44]	; (3fbdc <preempt_ticker_cb+0x78>)
   3fbb0:	f44f 735c 	mov.w	r3, #880	; 0x370
   3fbb4:	f009 fd5e 	bl	49674 <printk>
   3fbb8:	4040      	eors	r0, r0
   3fbba:	f380 8811 	msr	BASEPRI, r0
   3fbbe:	f04f 0003 	mov.w	r0, #3
   3fbc2:	df02      	svc	2
   3fbc4:	e7d5      	b.n	3fb72 <preempt_ticker_cb+0xe>
   3fbc6:	bf00      	nop
   3fbc8:	20006dd6 	.word	0x20006dd6
   3fbcc:	20006dd5 	.word	0x20006dd5
   3fbd0:	20000b08 	.word	0x20000b08
   3fbd4:	00052e90 	.word	0x00052e90
   3fbd8:	0005273c 	.word	0x0005273c
   3fbdc:	00052460 	.word	0x00052460
   3fbe0:	00052f44 	.word	0x00052f44

0003fbe4 <preempt_ticker_stop>:
{
   3fbe4:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   3fbe6:	4917      	ldr	r1, [pc, #92]	; (3fc44 <preempt_ticker_stop+0x60>)
   3fbe8:	4a17      	ldr	r2, [pc, #92]	; (3fc48 <preempt_ticker_stop+0x64>)
   3fbea:	780b      	ldrb	r3, [r1, #0]
   3fbec:	7812      	ldrb	r2, [r2, #0]
   3fbee:	429a      	cmp	r2, r3
{
   3fbf0:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   3fbf2:	d122      	bne.n	3fc3a <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   3fbf4:	4b15      	ldr	r3, [pc, #84]	; (3fc4c <preempt_ticker_stop+0x68>)
   3fbf6:	4a16      	ldr	r2, [pc, #88]	; (3fc50 <preempt_ticker_stop+0x6c>)
   3fbf8:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   3fbfa:	7812      	ldrb	r2, [r2, #0]
   3fbfc:	429a      	cmp	r2, r3
   3fbfe:	d01c      	beq.n	3fc3a <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   3fc00:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3fc02:	4b14      	ldr	r3, [pc, #80]	; (3fc54 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   3fc04:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3fc06:	2200      	movs	r2, #0
	preempt_stop_req++;
   3fc08:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3fc0a:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   3fc0c:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3fc0e:	4611      	mov	r1, r2
   3fc10:	4610      	mov	r0, r2
   3fc12:	f7f5 f9a3 	bl	34f5c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3fc16:	4604      	mov	r4, r0
   3fc18:	b178      	cbz	r0, 3fc3a <preempt_ticker_stop+0x56>
   3fc1a:	2802      	cmp	r0, #2
   3fc1c:	d00e      	beq.n	3fc3c <preempt_ticker_stop+0x58>
   3fc1e:	4a0e      	ldr	r2, [pc, #56]	; (3fc58 <preempt_ticker_stop+0x74>)
   3fc20:	490e      	ldr	r1, [pc, #56]	; (3fc5c <preempt_ticker_stop+0x78>)
   3fc22:	480f      	ldr	r0, [pc, #60]	; (3fc60 <preempt_ticker_stop+0x7c>)
   3fc24:	f240 3362 	movw	r3, #866	; 0x362
   3fc28:	f009 fd24 	bl	49674 <printk>
   3fc2c:	4040      	eors	r0, r0
   3fc2e:	f380 8811 	msr	BASEPRI, r0
   3fc32:	f04f 0003 	mov.w	r0, #3
   3fc36:	df02      	svc	2
   3fc38:	e000      	b.n	3fc3c <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   3fc3a:	2400      	movs	r4, #0
}
   3fc3c:	4620      	mov	r0, r4
   3fc3e:	b002      	add	sp, #8
   3fc40:	bd10      	pop	{r4, pc}
   3fc42:	bf00      	nop
   3fc44:	20006dda 	.word	0x20006dda
   3fc48:	20006dd9 	.word	0x20006dd9
   3fc4c:	20006dd5 	.word	0x20006dd5
   3fc50:	20006dd6 	.word	0x20006dd6
   3fc54:	0003fa65 	.word	0x0003fa65
   3fc58:	00052e90 	.word	0x00052e90
   3fc5c:	00052810 	.word	0x00052810
   3fc60:	00052460 	.word	0x00052460

0003fc64 <preempt_ticker_start>:
{
   3fc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   3fc68:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   3fc6a:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   3fc6e:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   3fc70:	4b2a      	ldr	r3, [pc, #168]	; (3fd1c <preempt_ticker_start+0xb8>)
   3fc72:	4f2b      	ldr	r7, [pc, #172]	; (3fd20 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   3fc74:	68d6      	ldr	r6, [r2, #12]
{
   3fc76:	460d      	mov	r5, r1
   3fc78:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   3fc7a:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   3fc7c:	6890      	ldr	r0, [r2, #8]
   3fc7e:	6853      	ldr	r3, [r2, #4]
   3fc80:	4298      	cmp	r0, r3
   3fc82:	bf2c      	ite	cs
   3fc84:	ebc6 0600 	rsbcs	r6, r6, r0
   3fc88:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   3fc8c:	783b      	ldrb	r3, [r7, #0]
   3fc8e:	4299      	cmp	r1, r3
{
   3fc90:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   3fc92:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   3fc96:	d033      	beq.n	3fd00 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   3fc98:	2c00      	cmp	r4, #0
   3fc9a:	d03a      	beq.n	3fd12 <preempt_ticker_start+0xae>
   3fc9c:	7f23      	ldrb	r3, [r4, #28]
   3fc9e:	079b      	lsls	r3, r3, #30
   3fca0:	d437      	bmi.n	3fd12 <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   3fca2:	f8df a080 	ldr.w	sl, [pc, #128]	; 3fd24 <preempt_ticker_start+0xc0>
   3fca6:	f8da 0000 	ldr.w	r0, [sl]
   3fcaa:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   3fcae:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   3fcb2:	d022      	beq.n	3fcfa <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   3fcb4:	f7ff ff96 	bl	3fbe4 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   3fcb8:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   3fcba:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   3fcbc:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   3fcc0:	f043 0302 	orr.w	r3, r3, #2
   3fcc4:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   3fcc6:	4620      	mov	r0, r4
   3fcc8:	69a3      	ldr	r3, [r4, #24]
   3fcca:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3fccc:	4b16      	ldr	r3, [pc, #88]	; (3fd28 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   3fcce:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3fcd0:	9600      	str	r6, [sp, #0]
   3fcd2:	e9cd 3507 	strd	r3, r5, [sp, #28]
   3fcd6:	4b15      	ldr	r3, [pc, #84]	; (3fd2c <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   3fcd8:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3fcdc:	2200      	movs	r2, #0
	preempt_start_req++;
   3fcde:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3fce0:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   3fce4:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3fce6:	e9cd 2203 	strd	r2, r2, [sp, #12]
   3fcea:	e9cd 2201 	strd	r2, r2, [sp, #4]
   3fcee:	4643      	mov	r3, r8
   3fcf0:	4611      	mov	r1, r2
   3fcf2:	4610      	mov	r0, r2
	preempt_start_req++;
   3fcf4:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   3fcf6:	f7f5 f8a5 	bl	34e44 <ticker_start>
}
   3fcfa:	b00a      	add	sp, #40	; 0x28
   3fcfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   3fd00:	4b0b      	ldr	r3, [pc, #44]	; (3fd30 <preempt_ticker_start+0xcc>)
   3fd02:	4a0c      	ldr	r2, [pc, #48]	; (3fd34 <preempt_ticker_start+0xd0>)
   3fd04:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   3fd06:	7812      	ldrb	r2, [r2, #0]
   3fd08:	429a      	cmp	r2, r3
   3fd0a:	d1c5      	bne.n	3fc98 <preempt_ticker_start+0x34>
   3fd0c:	f8df a014 	ldr.w	sl, [pc, #20]	; 3fd24 <preempt_ticker_start+0xc0>
   3fd10:	e7dc      	b.n	3fccc <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   3fd12:	2000      	movs	r0, #0
}
   3fd14:	b00a      	add	sp, #40	; 0x28
   3fd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3fd1a:	bf00      	nop
   3fd1c:	20006dd7 	.word	0x20006dd7
   3fd20:	20006dd8 	.word	0x20006dd8
   3fd24:	20005ae4 	.word	0x20005ae4
   3fd28:	0003fabd 	.word	0x0003fabd
   3fd2c:	0003fb65 	.word	0x0003fb65
   3fd30:	20006dd5 	.word	0x20006dd5
   3fd34:	20006dd6 	.word	0x20006dd6

0003fd38 <preempt>:

static void preempt(void *param)
{
   3fd38:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   3fd3a:	4e4b      	ldr	r6, [pc, #300]	; (3fe68 <preempt+0x130>)
   3fd3c:	68b3      	ldr	r3, [r6, #8]
{
   3fd3e:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   3fd40:	b1b3      	cbz	r3, 3fd70 <preempt+0x38>
   3fd42:	6833      	ldr	r3, [r6, #0]
   3fd44:	b1a3      	cbz	r3, 3fd70 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   3fd46:	23ff      	movs	r3, #255	; 0xff
   3fd48:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   3fd4a:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   3fd4e:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   3fd52:	f7f7 fe19 	bl	37988 <ull_prepare_dequeue_iter>
	if (!next) {
   3fd56:	4601      	mov	r1, r0
   3fd58:	b150      	cbz	r0, 3fd70 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   3fd5a:	7f0b      	ldrb	r3, [r1, #28]
   3fd5c:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   3fd60:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   3fd64:	d006      	beq.n	3fd74 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   3fd66:	f7f7 fe0f 	bl	37988 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   3fd6a:	4601      	mov	r1, r0
   3fd6c:	2800      	cmp	r0, #0
   3fd6e:	d1f4      	bne.n	3fd5a <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   3fd70:	b009      	add	sp, #36	; 0x24
   3fd72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   3fd74:	428d      	cmp	r5, r1
   3fd76:	d126      	bne.n	3fdc6 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   3fd78:	6873      	ldr	r3, [r6, #4]
   3fd7a:	6831      	ldr	r1, [r6, #0]
   3fd7c:	68e8      	ldr	r0, [r5, #12]
   3fd7e:	aa03      	add	r2, sp, #12
   3fd80:	4798      	blx	r3
	if (!err) {
   3fd82:	4607      	mov	r7, r0
   3fd84:	b1b0      	cbz	r0, 3fdb4 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   3fd86:	68b3      	ldr	r3, [r6, #8]
   3fd88:	6831      	ldr	r1, [r6, #0]
   3fd8a:	4620      	mov	r0, r4
   3fd8c:	4798      	blx	r3
	if (err == -EAGAIN) {
   3fd8e:	f117 0f0b 	cmn.w	r7, #11
   3fd92:	d02c      	beq.n	3fdee <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   3fd94:	378c      	adds	r7, #140	; 0x8c
   3fd96:	d0eb      	beq.n	3fd70 <preempt+0x38>
   3fd98:	4a34      	ldr	r2, [pc, #208]	; (3fe6c <preempt+0x134>)
   3fd9a:	4935      	ldr	r1, [pc, #212]	; (3fe70 <preempt+0x138>)
   3fd9c:	4835      	ldr	r0, [pc, #212]	; (3fe74 <preempt+0x13c>)
   3fd9e:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   3fda2:	f009 fc67 	bl	49674 <printk>
   3fda6:	4040      	eors	r0, r0
   3fda8:	f380 8811 	msr	BASEPRI, r0
   3fdac:	f04f 0003 	mov.w	r0, #3
   3fdb0:	df02      	svc	2
   3fdb2:	e7dd      	b.n	3fd70 <preempt+0x38>
		next->is_aborted = 1;
   3fdb4:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   3fdb6:	69aa      	ldr	r2, [r5, #24]
   3fdb8:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   3fdba:	f043 0302 	orr.w	r3, r3, #2
   3fdbe:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   3fdc0:	4628      	mov	r0, r5
   3fdc2:	4790      	blx	r2
		return;
   3fdc4:	e7d4      	b.n	3fd70 <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   3fdc6:	4620      	mov	r0, r4
   3fdc8:	f7ff ff4c 	bl	3fc64 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   3fdcc:	f030 0302 	bics.w	r3, r0, #2
   3fdd0:	d0ce      	beq.n	3fd70 <preempt+0x38>
   3fdd2:	4a26      	ldr	r2, [pc, #152]	; (3fe6c <preempt+0x134>)
   3fdd4:	4928      	ldr	r1, [pc, #160]	; (3fe78 <preempt+0x140>)
   3fdd6:	4827      	ldr	r0, [pc, #156]	; (3fe74 <preempt+0x13c>)
   3fdd8:	f44f 7367 	mov.w	r3, #924	; 0x39c
   3fddc:	f009 fc4a 	bl	49674 <printk>
   3fde0:	4040      	eors	r0, r0
   3fde2:	f380 8811 	msr	BASEPRI, r0
   3fde6:	f04f 0003 	mov.w	r0, #3
   3fdea:	df02      	svc	2
   3fdec:	e7c0      	b.n	3fd70 <preempt+0x38>
		iter_idx = UINT8_MAX;
   3fdee:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   3fdf0:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   3fdf4:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   3fdf8:	f7f7 fdc6 	bl	37988 <ull_prepare_dequeue_iter>
		while (iter) {
   3fdfc:	b928      	cbnz	r0, 3fe0a <preempt+0xd2>
   3fdfe:	e013      	b.n	3fe28 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   3fe00:	f10d 000b 	add.w	r0, sp, #11
   3fe04:	f7f7 fdc0 	bl	37988 <ull_prepare_dequeue_iter>
		while (iter) {
   3fe08:	b170      	cbz	r0, 3fe28 <preempt+0xf0>
			if (!iter->is_aborted &&
   3fe0a:	7f03      	ldrb	r3, [r0, #28]
   3fe0c:	079a      	lsls	r2, r3, #30
   3fe0e:	d4f7      	bmi.n	3fe00 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   3fe10:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   3fe12:	6831      	ldr	r1, [r6, #0]
   3fe14:	4291      	cmp	r1, r2
   3fe16:	d1f3      	bne.n	3fe00 <preempt+0xc8>
				iter->is_aborted = 1;
   3fe18:	f043 0302 	orr.w	r3, r3, #2
   3fe1c:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   3fe1e:	6983      	ldr	r3, [r0, #24]
   3fe20:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   3fe22:	f88d 400b 	strb.w	r4, [sp, #11]
   3fe26:	e7eb      	b.n	3fe00 <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   3fe28:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   3fe2a:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   3fe2c:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   3fe2e:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   3fe30:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   3fe34:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   3fe36:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   3fe38:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   3fe3a:	9b03      	ldr	r3, [sp, #12]
   3fe3c:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   3fe40:	aa04      	add	r2, sp, #16
   3fe42:	f7f7 fd63 	bl	3790c <ull_prepare_enqueue>
		LL_ASSERT(iter);
   3fe46:	2800      	cmp	r0, #0
   3fe48:	d192      	bne.n	3fd70 <preempt+0x38>
   3fe4a:	4a08      	ldr	r2, [pc, #32]	; (3fe6c <preempt+0x134>)
   3fe4c:	490b      	ldr	r1, [pc, #44]	; (3fe7c <preempt+0x144>)
   3fe4e:	4809      	ldr	r0, [pc, #36]	; (3fe74 <preempt+0x13c>)
   3fe50:	f240 33ce 	movw	r3, #974	; 0x3ce
   3fe54:	f009 fc0e 	bl	49674 <printk>
   3fe58:	4040      	eors	r0, r0
   3fe5a:	f380 8811 	msr	BASEPRI, r0
   3fe5e:	f04f 0003 	mov.w	r0, #3
   3fe62:	df02      	svc	2
   3fe64:	e784      	b.n	3fd70 <preempt+0x38>
   3fe66:	bf00      	nop
   3fe68:	20005ad0 	.word	0x20005ad0
   3fe6c:	00052e90 	.word	0x00052e90
   3fe70:	00052f68 	.word	0x00052f68
   3fe74:	00052460 	.word	0x00052460
   3fe78:	00052810 	.word	0x00052810
   3fe7c:	00052f60 	.word	0x00052f60

0003fe80 <lll_init>:
{
   3fe80:	b510      	push	{r4, lr}
   3fe82:	4816      	ldr	r0, [pc, #88]	; (3fedc <lll_init+0x5c>)
   3fe84:	f007 faf2 	bl	4746c <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   3fe88:	4b15      	ldr	r3, [pc, #84]	; (3fee0 <lll_init+0x60>)
   3fe8a:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   3fe8c:	b310      	cbz	r0, 3fed4 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   3fe8e:	4b15      	ldr	r3, [pc, #84]	; (3fee4 <lll_init+0x64>)
   3fe90:	2400      	movs	r4, #0
   3fe92:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   3fe94:	f000 fb0a 	bl	404ac <lll_clock_init>
	if (err < 0) {
   3fe98:	2800      	cmp	r0, #0
   3fe9a:	db1a      	blt.n	3fed2 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   3fe9c:	4621      	mov	r1, r4
   3fe9e:	2001      	movs	r0, #1
   3fea0:	4622      	mov	r2, r4
   3fea2:	f7ec fc23 	bl	2c6ec <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   3fea6:	4622      	mov	r2, r4
   3fea8:	200b      	movs	r0, #11
   3feaa:	2101      	movs	r1, #1
   3feac:	f7ec fc1e 	bl	2c6ec <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   3feb0:	4622      	mov	r2, r4
   3feb2:	4621      	mov	r1, r4
   3feb4:	2018      	movs	r0, #24
   3feb6:	f7ec fc19 	bl	2c6ec <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   3feba:	2001      	movs	r0, #1
   3febc:	f7ec fbe6 	bl	2c68c <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   3fec0:	200b      	movs	r0, #11
   3fec2:	f7ec fbe3 	bl	2c68c <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   3fec6:	2018      	movs	r0, #24
   3fec8:	f7ec fbe0 	bl	2c68c <arch_irq_enable>
	radio_setup();
   3fecc:	f002 fbb0 	bl	42630 <radio_setup>
	return 0;
   3fed0:	4620      	mov	r0, r4
}
   3fed2:	bd10      	pop	{r4, pc}
		return -ENODEV;
   3fed4:	f06f 0012 	mvn.w	r0, #18
}
   3fed8:	bd10      	pop	{r4, pc}
   3feda:	bf00      	nop
   3fedc:	00052f74 	.word	0x00052f74
   3fee0:	20005acc 	.word	0x20005acc
   3fee4:	20005ad0 	.word	0x20005ad0

0003fee8 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   3fee8:	4a05      	ldr	r2, [pc, #20]	; (3ff00 <lll_csrand_get+0x18>)
{
   3feea:	b410      	push	{r4}
   3feec:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   3feee:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   3fef0:	6884      	ldr	r4, [r0, #8]
   3fef2:	6824      	ldr	r4, [r4, #0]
   3fef4:	b28a      	uxth	r2, r1
   3fef6:	4619      	mov	r1, r3
   3fef8:	4623      	mov	r3, r4
}
   3fefa:	bc10      	pop	{r4}
   3fefc:	4718      	bx	r3
   3fefe:	bf00      	nop
   3ff00:	20005acc 	.word	0x20005acc

0003ff04 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   3ff04:	4b08      	ldr	r3, [pc, #32]	; (3ff28 <lll_csrand_isr_get+0x24>)
{
   3ff06:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   3ff08:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   3ff0a:	68ab      	ldr	r3, [r5, #8]
   3ff0c:	685c      	ldr	r4, [r3, #4]
   3ff0e:	b134      	cbz	r4, 3ff1e <lll_csrand_isr_get+0x1a>
   3ff10:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   3ff12:	46a4      	mov	ip, r4
   3ff14:	4601      	mov	r1, r0
   3ff16:	2300      	movs	r3, #0
   3ff18:	4628      	mov	r0, r5
}
   3ff1a:	bc30      	pop	{r4, r5}
   3ff1c:	4760      	bx	ip
   3ff1e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3ff22:	bc30      	pop	{r4, r5}
   3ff24:	4770      	bx	lr
   3ff26:	bf00      	nop
   3ff28:	20005acc 	.word	0x20005acc

0003ff2c <lll_rand_isr_get>:
   3ff2c:	4b08      	ldr	r3, [pc, #32]	; (3ff50 <lll_rand_isr_get+0x24>)
   3ff2e:	b430      	push	{r4, r5}
   3ff30:	681d      	ldr	r5, [r3, #0]
   3ff32:	68ab      	ldr	r3, [r5, #8]
   3ff34:	685c      	ldr	r4, [r3, #4]
   3ff36:	b134      	cbz	r4, 3ff46 <lll_rand_isr_get+0x1a>
   3ff38:	b28a      	uxth	r2, r1
   3ff3a:	46a4      	mov	ip, r4
   3ff3c:	4601      	mov	r1, r0
   3ff3e:	2300      	movs	r3, #0
   3ff40:	4628      	mov	r0, r5
   3ff42:	bc30      	pop	{r4, r5}
   3ff44:	4760      	bx	ip
   3ff46:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3ff4a:	bc30      	pop	{r4, r5}
   3ff4c:	4770      	bx	lr
   3ff4e:	bf00      	nop
   3ff50:	20005acc 	.word	0x20005acc

0003ff54 <lll_reset>:
}
   3ff54:	2000      	movs	r0, #0
   3ff56:	4770      	bx	lr

0003ff58 <lll_disable>:
{
   3ff58:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   3ff5a:	4604      	mov	r4, r0
{
   3ff5c:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   3ff5e:	2800      	cmp	r0, #0
   3ff60:	d032      	beq.n	3ffc8 <lll_disable+0x70>
   3ff62:	4b25      	ldr	r3, [pc, #148]	; (3fff8 <lll_disable+0xa0>)
   3ff64:	681a      	ldr	r2, [r3, #0]
   3ff66:	4282      	cmp	r2, r0
   3ff68:	d028      	beq.n	3ffbc <lll_disable+0x64>
		idx = UINT8_MAX;
   3ff6a:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   3ff6c:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   3ff70:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   3ff74:	f7f7 fd08 	bl	37988 <ull_prepare_dequeue_iter>
		while (next) {
   3ff78:	b940      	cbnz	r0, 3ff8c <lll_disable+0x34>
   3ff7a:	e01b      	b.n	3ffb4 <lll_disable+0x5c>
			    (!param || (param == next->prepare_param.param))) {
   3ff7c:	68c3      	ldr	r3, [r0, #12]
   3ff7e:	42a3      	cmp	r3, r4
   3ff80:	d01a      	beq.n	3ffb8 <lll_disable+0x60>
			next = ull_prepare_dequeue_iter(&idx);
   3ff82:	f10d 0007 	add.w	r0, sp, #7
   3ff86:	f7f7 fcff 	bl	37988 <ull_prepare_dequeue_iter>
		while (next) {
   3ff8a:	b198      	cbz	r0, 3ffb4 <lll_disable+0x5c>
			if (!next->is_aborted &&
   3ff8c:	7f03      	ldrb	r3, [r0, #28]
   3ff8e:	079b      	lsls	r3, r3, #30
   3ff90:	d4f7      	bmi.n	3ff82 <lll_disable+0x2a>
   3ff92:	2c00      	cmp	r4, #0
   3ff94:	d1f2      	bne.n	3ff7c <lll_disable+0x24>
			    (!param || (param == next->prepare_param.param))) {
   3ff96:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   3ff98:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   3ff9a:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   3ff9c:	f043 0302 	orr.w	r3, r3, #2
   3ffa0:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   3ffa2:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   3ffa4:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   3ffa8:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   3ffac:	f7f7 fcec 	bl	37988 <ull_prepare_dequeue_iter>
		while (next) {
   3ffb0:	2800      	cmp	r0, #0
   3ffb2:	d1eb      	bne.n	3ff8c <lll_disable+0x34>
}
   3ffb4:	b003      	add	sp, #12
   3ffb6:	bd30      	pop	{r4, r5, pc}
   3ffb8:	4621      	mov	r1, r4
   3ffba:	e7ed      	b.n	3ff98 <lll_disable+0x40>
		if (event.curr.abort_cb && event.curr.param) {
   3ffbc:	689b      	ldr	r3, [r3, #8]
   3ffbe:	b16b      	cbz	r3, 3ffdc <lll_disable+0x84>
   3ffc0:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   3ffc2:	2000      	movs	r0, #0
   3ffc4:	4798      	blx	r3
   3ffc6:	e7d0      	b.n	3ff6a <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   3ffc8:	4a0b      	ldr	r2, [pc, #44]	; (3fff8 <lll_disable+0xa0>)
   3ffca:	6893      	ldr	r3, [r2, #8]
   3ffcc:	2b00      	cmp	r3, #0
   3ffce:	d0cc      	beq.n	3ff6a <lll_disable+0x12>
   3ffd0:	6811      	ldr	r1, [r2, #0]
   3ffd2:	2900      	cmp	r1, #0
   3ffd4:	d0c9      	beq.n	3ff6a <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   3ffd6:	2000      	movs	r0, #0
   3ffd8:	4798      	blx	r3
   3ffda:	e7c6      	b.n	3ff6a <lll_disable+0x12>
			LL_ASSERT(!param);
   3ffdc:	4a07      	ldr	r2, [pc, #28]	; (3fffc <lll_disable+0xa4>)
   3ffde:	4908      	ldr	r1, [pc, #32]	; (40000 <lll_disable+0xa8>)
   3ffe0:	4808      	ldr	r0, [pc, #32]	; (40004 <lll_disable+0xac>)
   3ffe2:	23fd      	movs	r3, #253	; 0xfd
   3ffe4:	f009 fb46 	bl	49674 <printk>
   3ffe8:	4040      	eors	r0, r0
   3ffea:	f380 8811 	msr	BASEPRI, r0
   3ffee:	f04f 0003 	mov.w	r0, #3
   3fff2:	df02      	svc	2
   3fff4:	e7b9      	b.n	3ff6a <lll_disable+0x12>
   3fff6:	bf00      	nop
   3fff8:	20005ad0 	.word	0x20005ad0
   3fffc:	00052e90 	.word	0x00052e90
   40000:	00052f78 	.word	0x00052f78
   40004:	00052460 	.word	0x00052460

00040008 <lll_prepare_done>:
}
   40008:	2000      	movs	r0, #0
   4000a:	4770      	bx	lr

0004000c <lll_done>:
{
   4000c:	b538      	push	{r3, r4, r5, lr}
   4000e:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   40010:	f7f7 fcac 	bl	3796c <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   40014:	b154      	cbz	r4, 4002c <lll_done+0x20>
   40016:	b310      	cbz	r0, 4005e <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   40018:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   4001a:	2000      	movs	r0, #0
   4001c:	f7f7 fcd4 	bl	379c8 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   40020:	4620      	mov	r0, r4
   40022:	f7f7 fd35 	bl	37a90 <ull_event_done>
	LL_ASSERT(evdone);
   40026:	b158      	cbz	r0, 40040 <lll_done+0x34>
}
   40028:	2000      	movs	r0, #0
   4002a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   4002c:	4d1a      	ldr	r5, [pc, #104]	; (40098 <lll_done+0x8c>)
   4002e:	68ab      	ldr	r3, [r5, #8]
   40030:	b31b      	cbz	r3, 4007a <lll_done+0x6e>
		param = event.curr.param;
   40032:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   40034:	2300      	movs	r3, #0
   40036:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   40038:	602b      	str	r3, [r5, #0]
		if (param) {
   4003a:	2c00      	cmp	r4, #0
   4003c:	d1ec      	bne.n	40018 <lll_done+0xc>
   4003e:	e7ec      	b.n	4001a <lll_done+0xe>
	LL_ASSERT(evdone);
   40040:	4a16      	ldr	r2, [pc, #88]	; (4009c <lll_done+0x90>)
   40042:	4917      	ldr	r1, [pc, #92]	; (400a0 <lll_done+0x94>)
   40044:	4817      	ldr	r0, [pc, #92]	; (400a4 <lll_done+0x98>)
   40046:	f240 136d 	movw	r3, #365	; 0x16d
   4004a:	f009 fb13 	bl	49674 <printk>
   4004e:	4040      	eors	r0, r0
   40050:	f380 8811 	msr	BASEPRI, r0
   40054:	f04f 0003 	mov.w	r0, #3
   40058:	df02      	svc	2
}
   4005a:	2000      	movs	r0, #0
   4005c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   4005e:	4a0f      	ldr	r2, [pc, #60]	; (4009c <lll_done+0x90>)
   40060:	4911      	ldr	r1, [pc, #68]	; (400a8 <lll_done+0x9c>)
   40062:	4810      	ldr	r0, [pc, #64]	; (400a4 <lll_done+0x98>)
   40064:	f240 1337 	movw	r3, #311	; 0x137
   40068:	f009 fb04 	bl	49674 <printk>
   4006c:	4040      	eors	r0, r0
   4006e:	f380 8811 	msr	BASEPRI, r0
   40072:	f04f 0003 	mov.w	r0, #3
   40076:	df02      	svc	2
   40078:	e7ce      	b.n	40018 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   4007a:	4a08      	ldr	r2, [pc, #32]	; (4009c <lll_done+0x90>)
   4007c:	490b      	ldr	r1, [pc, #44]	; (400ac <lll_done+0xa0>)
   4007e:	4809      	ldr	r0, [pc, #36]	; (400a4 <lll_done+0x98>)
   40080:	f240 133d 	movw	r3, #317	; 0x13d
   40084:	f009 faf6 	bl	49674 <printk>
   40088:	4040      	eors	r0, r0
   4008a:	f380 8811 	msr	BASEPRI, r0
   4008e:	f04f 0003 	mov.w	r0, #3
   40092:	df02      	svc	2
   40094:	e7cd      	b.n	40032 <lll_done+0x26>
   40096:	bf00      	nop
   40098:	20005ad0 	.word	0x20005ad0
   4009c:	00052e90 	.word	0x00052e90
   400a0:	00052fa4 	.word	0x00052fa4
   400a4:	00052460 	.word	0x00052460
   400a8:	00052f80 	.word	0x00052f80
   400ac:	00052f90 	.word	0x00052f90

000400b0 <lll_is_done>:
	*is_resume = (param != event.curr.param);
   400b0:	4a05      	ldr	r2, [pc, #20]	; (400c8 <lll_is_done+0x18>)
   400b2:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   400b4:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   400b6:	1a1b      	subs	r3, r3, r0
   400b8:	bf18      	it	ne
   400ba:	2301      	movne	r3, #1
}
   400bc:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   400c0:	700b      	strb	r3, [r1, #0]
}
   400c2:	0940      	lsrs	r0, r0, #5
   400c4:	4770      	bx	lr
   400c6:	bf00      	nop
   400c8:	20005ad0 	.word	0x20005ad0

000400cc <lll_is_abort_cb>:
}
   400cc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   400d0:	4770      	bx	lr
   400d2:	bf00      	nop

000400d4 <lll_event_offset_get>:
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   400d4:	6883      	ldr	r3, [r0, #8]
   400d6:	2b00      	cmp	r3, #0
		return MAX(ull->ticks_active_to_start,
   400d8:	bfb8      	it	lt
   400da:	68c3      	ldrlt	r3, [r0, #12]
		return MAX(ull->ticks_active_to_start,
   400dc:	6840      	ldr	r0, [r0, #4]
   400de:	4298      	cmp	r0, r3
   400e0:	bf38      	it	cc
   400e2:	4618      	movcc	r0, r3
}
   400e4:	4770      	bx	lr
   400e6:	bf00      	nop

000400e8 <lll_preempt_calc>:
{
   400e8:	b510      	push	{r4, lr}
   400ea:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   400ec:	f7f4 ffd6 	bl	3509c <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   400f0:	1b02      	subs	r2, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   400f2:	0213      	lsls	r3, r2, #8
   400f4:	d405      	bmi.n	40102 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   400f6:	1cd0      	adds	r0, r2, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   400f8:	2809      	cmp	r0, #9
   400fa:	bf94      	ite	ls
   400fc:	2000      	movls	r0, #0
   400fe:	2001      	movhi	r0, #1
}
   40100:	bd10      	pop	{r4, pc}
		return 0;
   40102:	2000      	movs	r0, #0
}
   40104:	bd10      	pop	{r4, pc}
   40106:	bf00      	nop

00040108 <lll_chan_set>:
	switch (chan) {
   40108:	2826      	cmp	r0, #38	; 0x26
{
   4010a:	b510      	push	{r4, lr}
   4010c:	4604      	mov	r4, r0
	switch (chan) {
   4010e:	d01c      	beq.n	4014a <lll_chan_set+0x42>
   40110:	2827      	cmp	r0, #39	; 0x27
   40112:	d012      	beq.n	4013a <lll_chan_set+0x32>
   40114:	2825      	cmp	r0, #37	; 0x25
   40116:	d008      	beq.n	4012a <lll_chan_set+0x22>
		if (chan < 11) {
   40118:	280a      	cmp	r0, #10
   4011a:	d91e      	bls.n	4015a <lll_chan_set+0x52>
		} else if (chan < 40) {
   4011c:	2827      	cmp	r0, #39	; 0x27
   4011e:	d821      	bhi.n	40164 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   40120:	3003      	adds	r0, #3
   40122:	0040      	lsls	r0, r0, #1
   40124:	f002 fae0 	bl	426e8 <radio_freq_chan_set>
   40128:	e002      	b.n	40130 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   4012a:	2002      	movs	r0, #2
   4012c:	f002 fadc 	bl	426e8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   40130:	4620      	mov	r0, r4
}
   40132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   40136:	f002 badd 	b.w	426f4 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   4013a:	2050      	movs	r0, #80	; 0x50
   4013c:	f002 fad4 	bl	426e8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   40140:	4620      	mov	r0, r4
}
   40142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   40146:	f002 bad5 	b.w	426f4 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   4014a:	201a      	movs	r0, #26
   4014c:	f002 facc 	bl	426e8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   40150:	4620      	mov	r0, r4
}
   40152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   40156:	f002 bacd 	b.w	426f4 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   4015a:	3002      	adds	r0, #2
   4015c:	0040      	lsls	r0, r0, #1
   4015e:	f002 fac3 	bl	426e8 <radio_freq_chan_set>
   40162:	e7e5      	b.n	40130 <lll_chan_set+0x28>
			LL_ASSERT(0);
   40164:	4a06      	ldr	r2, [pc, #24]	; (40180 <lll_chan_set+0x78>)
   40166:	4907      	ldr	r1, [pc, #28]	; (40184 <lll_chan_set+0x7c>)
   40168:	4807      	ldr	r0, [pc, #28]	; (40188 <lll_chan_set+0x80>)
   4016a:	f240 13df 	movw	r3, #479	; 0x1df
   4016e:	f009 fa81 	bl	49674 <printk>
   40172:	4040      	eors	r0, r0
   40174:	f380 8811 	msr	BASEPRI, r0
   40178:	f04f 0003 	mov.w	r0, #3
   4017c:	df02      	svc	2
   4017e:	e7d7      	b.n	40130 <lll_chan_set+0x28>
   40180:	00052e90 	.word	0x00052e90
   40184:	000524c0 	.word	0x000524c0
   40188:	00052460 	.word	0x00052460

0004018c <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   4018c:	f002 bb0e 	b.w	427ac <radio_tx_ready_delay_get>

00040190 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   40190:	f002 bb14 	b.w	427bc <radio_rx_ready_delay_get>

00040194 <lll_isr_tx_status_reset>:
{
   40194:	b508      	push	{r3, lr}
	radio_status_reset();
   40196:	f002 fb39 	bl	4280c <radio_status_reset>
}
   4019a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   4019e:	f002 bc99 	b.w	42ad4 <radio_tmr_status_reset>
   401a2:	bf00      	nop

000401a4 <lll_isr_rx_status_reset>:
{
   401a4:	b508      	push	{r3, lr}
	radio_status_reset();
   401a6:	f002 fb31 	bl	4280c <radio_status_reset>
	radio_tmr_status_reset();
   401aa:	f002 fc93 	bl	42ad4 <radio_tmr_status_reset>
}
   401ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   401b2:	f002 bc3b 	b.w	42a2c <radio_rssi_status_reset>
   401b6:	bf00      	nop

000401b8 <lll_isr_status_reset>:
{
   401b8:	b508      	push	{r3, lr}
	radio_status_reset();
   401ba:	f002 fb27 	bl	4280c <radio_status_reset>
	radio_tmr_status_reset();
   401be:	f002 fc89 	bl	42ad4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   401c2:	f002 fc6f 	bl	42aa4 <radio_filter_status_reset>
	radio_ar_status_reset();
   401c6:	f002 fe81 	bl	42ecc <radio_ar_status_reset>
}
   401ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   401ce:	f002 bc2d 	b.w	42a2c <radio_rssi_status_reset>
   401d2:	bf00      	nop

000401d4 <lll_isr_cleanup>:
{
   401d4:	b508      	push	{r3, lr}
   401d6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   401d8:	4815      	ldr	r0, [pc, #84]	; (40230 <lll_isr_cleanup+0x5c>)
   401da:	f002 fa09 	bl	425f0 <radio_isr_set>
	if (!radio_is_idle()) {
   401de:	f002 fb35 	bl	4284c <radio_is_idle>
   401e2:	b150      	cbz	r0, 401fa <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   401e4:	f002 fd4c 	bl	42c80 <radio_tmr_stop>
	err = lll_hfclock_off();
   401e8:	f000 f9a4 	bl	40534 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   401ec:	2800      	cmp	r0, #0
   401ee:	db0c      	blt.n	4020a <lll_isr_cleanup+0x36>
}
   401f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   401f4:	2000      	movs	r0, #0
   401f6:	f7ff bf09 	b.w	4000c <lll_done>
		radio_disable();
   401fa:	f002 faf3 	bl	427e4 <radio_disable>
	radio_tmr_stop();
   401fe:	f002 fd3f 	bl	42c80 <radio_tmr_stop>
	err = lll_hfclock_off();
   40202:	f000 f997 	bl	40534 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40206:	2800      	cmp	r0, #0
   40208:	daf2      	bge.n	401f0 <lll_isr_cleanup+0x1c>
   4020a:	4a0a      	ldr	r2, [pc, #40]	; (40234 <lll_isr_cleanup+0x60>)
   4020c:	490a      	ldr	r1, [pc, #40]	; (40238 <lll_isr_cleanup+0x64>)
   4020e:	480b      	ldr	r0, [pc, #44]	; (4023c <lll_isr_cleanup+0x68>)
   40210:	f240 2342 	movw	r3, #578	; 0x242
   40214:	f009 fa2e 	bl	49674 <printk>
   40218:	4040      	eors	r0, r0
   4021a:	f380 8811 	msr	BASEPRI, r0
   4021e:	f04f 0003 	mov.w	r0, #3
   40222:	df02      	svc	2
	lll_done(NULL);
   40224:	2000      	movs	r0, #0
}
   40226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   4022a:	f7ff beef 	b.w	4000c <lll_done>
   4022e:	bf00      	nop
   40230:	0003fb61 	.word	0x0003fb61
   40234:	00052e90 	.word	0x00052e90
   40238:	00052fac 	.word	0x00052fac
   4023c:	00052460 	.word	0x00052460

00040240 <lll_isr_abort>:
{
   40240:	b510      	push	{r4, lr}
   40242:	4604      	mov	r4, r0
	radio_status_reset();
   40244:	f002 fae2 	bl	4280c <radio_status_reset>
	radio_tmr_status_reset();
   40248:	f002 fc44 	bl	42ad4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   4024c:	f002 fc2a 	bl	42aa4 <radio_filter_status_reset>
	radio_ar_status_reset();
   40250:	f002 fe3c 	bl	42ecc <radio_ar_status_reset>
	radio_rssi_status_reset();
   40254:	f002 fbea 	bl	42a2c <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   40258:	4620      	mov	r0, r4
}
   4025a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   4025e:	f7ff bfb9 	b.w	401d4 <lll_isr_cleanup>
   40262:	bf00      	nop

00040264 <lll_isr_early_abort>:
{
   40264:	b508      	push	{r3, lr}
   40266:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   40268:	4813      	ldr	r0, [pc, #76]	; (402b8 <lll_isr_early_abort+0x54>)
   4026a:	f002 f9c1 	bl	425f0 <radio_isr_set>
	if (!radio_is_idle()) {
   4026e:	f002 faed 	bl	4284c <radio_is_idle>
   40272:	b140      	cbz	r0, 40286 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   40274:	f000 f95e 	bl	40534 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40278:	2800      	cmp	r0, #0
   4027a:	db0a      	blt.n	40292 <lll_isr_early_abort+0x2e>
}
   4027c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   40280:	2000      	movs	r0, #0
   40282:	f7ff bec3 	b.w	4000c <lll_done>
		radio_disable();
   40286:	f002 faad 	bl	427e4 <radio_disable>
	err = lll_hfclock_off();
   4028a:	f000 f953 	bl	40534 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   4028e:	2800      	cmp	r0, #0
   40290:	daf4      	bge.n	4027c <lll_isr_early_abort+0x18>
   40292:	4a0a      	ldr	r2, [pc, #40]	; (402bc <lll_isr_early_abort+0x58>)
   40294:	490a      	ldr	r1, [pc, #40]	; (402c0 <lll_isr_early_abort+0x5c>)
   40296:	480b      	ldr	r0, [pc, #44]	; (402c4 <lll_isr_early_abort+0x60>)
   40298:	f240 2351 	movw	r3, #593	; 0x251
   4029c:	f009 f9ea 	bl	49674 <printk>
   402a0:	4040      	eors	r0, r0
   402a2:	f380 8811 	msr	BASEPRI, r0
   402a6:	f04f 0003 	mov.w	r0, #3
   402aa:	df02      	svc	2
	lll_done(NULL);
   402ac:	2000      	movs	r0, #0
}
   402ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   402b2:	f7ff beab 	b.w	4000c <lll_done>
   402b6:	bf00      	nop
   402b8:	0003fb61 	.word	0x0003fb61
   402bc:	00052e90 	.word	0x00052e90
   402c0:	00052fac 	.word	0x00052fac
   402c4:	00052460 	.word	0x00052460

000402c8 <lll_prepare_resolve>:
{
   402c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   402cc:	b084      	sub	sp, #16
   402ce:	4606      	mov	r6, r0
   402d0:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   402d2:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   402d6:	23ff      	movs	r3, #255	; 0xff
{
   402d8:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   402dc:	f88d 300f 	strb.w	r3, [sp, #15]
{
   402e0:	460f      	mov	r7, r1
   402e2:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   402e4:	f7f7 fb50 	bl	37988 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   402e8:	4604      	mov	r4, r0
   402ea:	b920      	cbnz	r0, 402f6 <lll_prepare_resolve+0x2e>
   402ec:	e032      	b.n	40354 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   402ee:	f7f7 fb4b 	bl	37988 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   402f2:	4604      	mov	r4, r0
   402f4:	b370      	cbz	r0, 40354 <lll_prepare_resolve+0x8c>
   402f6:	f894 c01c 	ldrb.w	ip, [r4, #28]
   402fa:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   402fe:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   40302:	d1f4      	bne.n	402ee <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   40304:	f8df a130 	ldr.w	sl, [pc, #304]	; 40438 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   40308:	f8da 3008 	ldr.w	r3, [sl, #8]
   4030c:	bb4b      	cbnz	r3, 40362 <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   4030e:	f1b9 0f00 	cmp.w	r9, #0
   40312:	d048      	beq.n	403a6 <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   40314:	f8cd 9000 	str.w	r9, [sp]
   40318:	4643      	mov	r3, r8
   4031a:	462a      	mov	r2, r5
   4031c:	4639      	mov	r1, r7
   4031e:	4630      	mov	r0, r6
   40320:	f7f7 faf4 	bl	3790c <ull_prepare_enqueue>
		LL_ASSERT(next);
   40324:	b980      	cbnz	r0, 40348 <lll_prepare_resolve+0x80>
   40326:	4a45      	ldr	r2, [pc, #276]	; (4043c <lll_prepare_resolve+0x174>)
   40328:	4945      	ldr	r1, [pc, #276]	; (40440 <lll_prepare_resolve+0x178>)
   4032a:	4846      	ldr	r0, [pc, #280]	; (40444 <lll_prepare_resolve+0x17c>)
   4032c:	f240 238d 	movw	r3, #653	; 0x28d
   40330:	f009 f9a0 	bl	49674 <printk>
   40334:	4040      	eors	r0, r0
   40336:	f380 8811 	msr	BASEPRI, r0
   4033a:	f04f 0003 	mov.w	r0, #3
   4033e:	df02      	svc	2
   40340:	2000      	movs	r0, #0
		if (is_resume) {
   40342:	f1b9 0f00 	cmp.w	r9, #0
   40346:	d019      	beq.n	4037c <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   40348:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   4034c:	4620      	mov	r0, r4
   4034e:	b004      	add	sp, #16
   40350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   40354:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 40438 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   40358:	f8da 3008 	ldr.w	r3, [sl, #8]
   4035c:	2b00      	cmp	r3, #0
   4035e:	d031      	beq.n	403c4 <lll_prepare_resolve+0xfc>
   40360:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   40362:	f8cd 9000 	str.w	r9, [sp]
   40366:	4643      	mov	r3, r8
   40368:	462a      	mov	r2, r5
   4036a:	4639      	mov	r1, r7
   4036c:	4630      	mov	r0, r6
   4036e:	f7f7 facd 	bl	3790c <ull_prepare_enqueue>
		LL_ASSERT(next);
   40372:	2800      	cmp	r0, #0
   40374:	d0d7      	beq.n	40326 <lll_prepare_resolve+0x5e>
		if (is_resume) {
   40376:	f1b9 0f00 	cmp.w	r9, #0
   4037a:	d1e5      	bne.n	40348 <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   4037c:	4601      	mov	r1, r0
   4037e:	4620      	mov	r0, r4
   40380:	f7ff fc70 	bl	3fc64 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   40384:	f030 0302 	bics.w	r3, r0, #2
   40388:	d0de      	beq.n	40348 <lll_prepare_resolve+0x80>
   4038a:	4a2c      	ldr	r2, [pc, #176]	; (4043c <lll_prepare_resolve+0x174>)
   4038c:	492e      	ldr	r1, [pc, #184]	; (40448 <lll_prepare_resolve+0x180>)
   4038e:	482d      	ldr	r0, [pc, #180]	; (40444 <lll_prepare_resolve+0x17c>)
   40390:	f44f 7326 	mov.w	r3, #664	; 0x298
   40394:	f009 f96e 	bl	49674 <printk>
   40398:	4040      	eors	r0, r0
   4039a:	f380 8811 	msr	BASEPRI, r0
   4039e:	f04f 0003 	mov.w	r0, #3
   403a2:	df02      	svc	2
   403a4:	e7d0      	b.n	40348 <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   403a6:	42ac      	cmp	r4, r5
   403a8:	d00c      	beq.n	403c4 <lll_prepare_resolve+0xfc>
   403aa:	4a24      	ldr	r2, [pc, #144]	; (4043c <lll_prepare_resolve+0x174>)
   403ac:	4927      	ldr	r1, [pc, #156]	; (4044c <lll_prepare_resolve+0x184>)
   403ae:	4825      	ldr	r0, [pc, #148]	; (40444 <lll_prepare_resolve+0x17c>)
   403b0:	f240 23be 	movw	r3, #702	; 0x2be
   403b4:	f009 f95e 	bl	49674 <printk>
   403b8:	4040      	eors	r0, r0
   403ba:	f380 8811 	msr	BASEPRI, r0
   403be:	f04f 0003 	mov.w	r0, #3
   403c2:	df02      	svc	2
	event.curr.param = prepare_param->param;
   403c4:	68eb      	ldr	r3, [r5, #12]
   403c6:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   403ca:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   403ce:	4628      	mov	r0, r5
   403d0:	47c0      	blx	r8
   403d2:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   403d4:	f7ff fc06 	bl	3fbe4 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   403d8:	f030 0302 	bics.w	r3, r0, #2
   403dc:	d11e      	bne.n	4041c <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   403de:	f10d 000f 	add.w	r0, sp, #15
   403e2:	f7f7 fad1 	bl	37988 <ull_prepare_dequeue_iter>
		if (!p) {
   403e6:	2800      	cmp	r0, #0
   403e8:	d0b0      	beq.n	4034c <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   403ea:	7f03      	ldrb	r3, [r0, #28]
   403ec:	f013 0303 	ands.w	r3, r3, #3
   403f0:	d1f5      	bne.n	403de <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   403f2:	4601      	mov	r1, r0
   403f4:	4618      	mov	r0, r3
   403f6:	f7ff fc35 	bl	3fc64 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   403fa:	f030 0302 	bics.w	r3, r0, #2
   403fe:	d0a5      	beq.n	4034c <lll_prepare_resolve+0x84>
   40400:	4a0e      	ldr	r2, [pc, #56]	; (4043c <lll_prepare_resolve+0x174>)
   40402:	4911      	ldr	r1, [pc, #68]	; (40448 <lll_prepare_resolve+0x180>)
   40404:	480f      	ldr	r0, [pc, #60]	; (40444 <lll_prepare_resolve+0x17c>)
   40406:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   4040a:	f009 f933 	bl	49674 <printk>
   4040e:	4040      	eors	r0, r0
   40410:	f380 8811 	msr	BASEPRI, r0
   40414:	f04f 0003 	mov.w	r0, #3
   40418:	df02      	svc	2
   4041a:	e797      	b.n	4034c <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   4041c:	4a07      	ldr	r2, [pc, #28]	; (4043c <lll_prepare_resolve+0x174>)
   4041e:	490a      	ldr	r1, [pc, #40]	; (40448 <lll_prepare_resolve+0x180>)
   40420:	4808      	ldr	r0, [pc, #32]	; (40444 <lll_prepare_resolve+0x17c>)
   40422:	f240 23cb 	movw	r3, #715	; 0x2cb
   40426:	f009 f925 	bl	49674 <printk>
   4042a:	4040      	eors	r0, r0
   4042c:	f380 8811 	msr	BASEPRI, r0
   40430:	f04f 0003 	mov.w	r0, #3
   40434:	df02      	svc	2
   40436:	e7d2      	b.n	403de <lll_prepare_resolve+0x116>
   40438:	20005ad0 	.word	0x20005ad0
   4043c:	00052e90 	.word	0x00052e90
   40440:	00052fb8 	.word	0x00052fb8
   40444:	00052460 	.word	0x00052460
   40448:	00052810 	.word	0x00052810
   4044c:	00052fc0 	.word	0x00052fc0

00040450 <clock_ready>:
	z_impl_k_sem_give(sem);
   40450:	f101 0010 	add.w	r0, r1, #16
   40454:	f007 bbd2 	b.w	47bfc <z_impl_k_sem_give>

00040458 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   40458:	b570      	push	{r4, r5, r6, lr}
   4045a:	4605      	mov	r5, r0
   4045c:	b08a      	sub	sp, #40	; 0x28
   4045e:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   40460:	2201      	movs	r2, #1
   40462:	2100      	movs	r1, #0
   40464:	a804      	add	r0, sp, #16
   40466:	f010 f93d 	bl	506e4 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   4046a:	4b0f      	ldr	r3, [pc, #60]	; (404a8 <blocking_on+0x50>)
   4046c:	9301      	str	r3, [sp, #4]
   4046e:	2600      	movs	r6, #0
   40470:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   40472:	4669      	mov	r1, sp
   40474:	4628      	mov	r0, r5
   40476:	9603      	str	r6, [sp, #12]
   40478:	9302      	str	r3, [sp, #8]
   4047a:	f009 f992 	bl	497a2 <onoff_request>
	if (err < 0) {
   4047e:	2800      	cmp	r0, #0
   40480:	db10      	blt.n	404a4 <blocking_on+0x4c>
   40482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   40486:	4631      	mov	r1, r6
   40488:	f240 30e7 	movw	r0, #999	; 0x3e7
   4048c:	fbe4 0103 	umlal	r0, r1, r4, r3
   40490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   40494:	2300      	movs	r3, #0
   40496:	f7e5 fe33 	bl	26100 <__aeabi_uldivmod>
   4049a:	4602      	mov	r2, r0
   4049c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   4049e:	a804      	add	r0, sp, #16
   404a0:	f007 fbd2 	bl	47c48 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   404a4:	b00a      	add	sp, #40	; 0x28
   404a6:	bd70      	pop	{r4, r5, r6, pc}
   404a8:	00040451 	.word	0x00040451

000404ac <lll_clock_init>:

int lll_clock_init(void)
{
   404ac:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   404ae:	2001      	movs	r0, #1
   404b0:	f004 f9ca 	bl	44848 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   404b4:	4904      	ldr	r1, [pc, #16]	; (404c8 <lll_clock_init+0x1c>)
   404b6:	2300      	movs	r3, #0
   404b8:	2401      	movs	r4, #1
   404ba:	608c      	str	r4, [r1, #8]
   404bc:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   404be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   404c2:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   404c4:	f009 b96d 	b.w	497a2 <onoff_request>
   404c8:	20005aec 	.word	0x20005aec

000404cc <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   404cc:	4b0c      	ldr	r3, [pc, #48]	; (40500 <lll_clock_wait+0x34>)
   404ce:	781a      	ldrb	r2, [r3, #0]
   404d0:	b10a      	cbz	r2, 404d6 <lll_clock_wait+0xa>
		return 0;
   404d2:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   404d4:	4770      	bx	lr
{
   404d6:	b510      	push	{r4, lr}
	done = true;
   404d8:	2001      	movs	r0, #1
   404da:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   404dc:	f004 f9b4 	bl	44848 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   404e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   404e4:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   404e6:	f7ff ffb7 	bl	40458 <blocking_on>
	if (err) {
   404ea:	b938      	cbnz	r0, 404fc <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   404ec:	4620      	mov	r0, r4
   404ee:	f009 f9a3 	bl	49838 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   404f2:	2802      	cmp	r0, #2
		return 0;
   404f4:	bf0c      	ite	eq
   404f6:	2000      	moveq	r0, #0
		return -EIO;
   404f8:	f06f 0004 	mvnne.w	r0, #4
}
   404fc:	bd10      	pop	{r4, pc}
   404fe:	bf00      	nop
   40500:	20006ddb 	.word	0x20006ddb

00040504 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   40504:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   40506:	4b0a      	ldr	r3, [pc, #40]	; (40530 <lll_hfclock_on+0x2c>)
   40508:	f3bf 8f5b 	dmb	ish
   4050c:	e853 2f00 	ldrex	r2, [r3]
   40510:	1c51      	adds	r1, r2, #1
   40512:	e843 1000 	strex	r0, r1, [r3]
   40516:	2800      	cmp	r0, #0
   40518:	d1f8      	bne.n	4050c <lll_hfclock_on+0x8>
   4051a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   4051e:	2a00      	cmp	r2, #0
   40520:	dd01      	ble.n	40526 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   40522:	2000      	movs	r0, #0
   40524:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   40526:	f004 f997 	bl	44858 <z_nrf_clock_bt_ctlr_hf_request>
}
   4052a:	2000      	movs	r0, #0
   4052c:	bd08      	pop	{r3, pc}
   4052e:	bf00      	nop
   40530:	20005ae8 	.word	0x20005ae8

00040534 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   40534:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   40536:	4b0d      	ldr	r3, [pc, #52]	; (4056c <lll_hfclock_off+0x38>)
   40538:	681a      	ldr	r2, [r3, #0]
   4053a:	2a00      	cmp	r2, #0
   4053c:	dd12      	ble.n	40564 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   4053e:	f3bf 8f5b 	dmb	ish
   40542:	e853 2f00 	ldrex	r2, [r3]
   40546:	1e51      	subs	r1, r2, #1
   40548:	e843 1000 	strex	r0, r1, [r3]
   4054c:	2800      	cmp	r0, #0
   4054e:	d1f8      	bne.n	40542 <lll_hfclock_off+0xe>
   40550:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   40554:	2a01      	cmp	r2, #1
   40556:	dd01      	ble.n	4055c <lll_hfclock_off+0x28>
		return 0;
   40558:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   4055a:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   4055c:	f004 f992 	bl	44884 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   40560:	2000      	movs	r0, #0
}
   40562:	bd08      	pop	{r3, pc}
		return -EALREADY;
   40564:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   40568:	bd08      	pop	{r3, pc}
   4056a:	bf00      	nop
   4056c:	20005ae8 	.word	0x20005ae8

00040570 <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   40570:	2005      	movs	r0, #5
   40572:	4770      	bx	lr

00040574 <lll_clock_ppm_local_get>:

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   40574:	2032      	movs	r0, #50	; 0x32
   40576:	4770      	bx	lr

00040578 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   40578:	4b01      	ldr	r3, [pc, #4]	; (40580 <lll_clock_ppm_get+0x8>)
}
   4057a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   4057e:	4770      	bx	lr
   40580:	00052fec 	.word	0x00052fec

00040584 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   40584:	b510      	push	{r4, lr}
   40586:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   40588:	f7ff fe16 	bl	401b8 <lll_isr_status_reset>

	radio_filter_disable();
   4058c:	f002 fa80 	bl	42a90 <radio_filter_disable>

	lll_isr_cleanup(param);
   40590:	4620      	mov	r0, r4
}
   40592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   40596:	f7ff be1d 	b.w	401d4 <lll_isr_cleanup>
   4059a:	bf00      	nop

0004059c <isr_tx>:
{
   4059c:	b530      	push	{r4, r5, lr}
   4059e:	b083      	sub	sp, #12
   405a0:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   405a2:	f7ff fdf7 	bl	40194 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   405a6:	2096      	movs	r0, #150	; 0x96
   405a8:	f002 faa4 	bl	42af4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   405ac:	2300      	movs	r3, #0
   405ae:	4618      	mov	r0, r3
   405b0:	461a      	mov	r2, r3
   405b2:	4619      	mov	r1, r3
   405b4:	f002 f9ba 	bl	4292c <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   405b8:	2001      	movs	r0, #1
   405ba:	f7f7 f95b 	bl	37874 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   405be:	4604      	mov	r4, r0
   405c0:	2800      	cmp	r0, #0
   405c2:	d043      	beq.n	4064c <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   405c4:	f104 001c 	add.w	r0, r4, #28
   405c8:	f002 f8e4 	bl	42794 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   405cc:	f002 f92a 	bl	42824 <radio_is_ready>
   405d0:	b9e0      	cbnz	r0, 4060c <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   405d2:	4825      	ldr	r0, [pc, #148]	; (40668 <isr_tx+0xcc>)
   405d4:	4629      	mov	r1, r5
   405d6:	f002 f80b 	bl	425f0 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   405da:	f7ff fa11 	bl	3fa00 <ull_filter_lll_rl_enabled>
   405de:	bb50      	cbnz	r0, 40636 <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   405e0:	f002 fba2 	bl	42d28 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   405e4:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   405e6:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   405e8:	4608      	mov	r0, r1
   405ea:	f002 f8e9 	bl	427c0 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   405ee:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   405f0:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   405f2:	4608      	mov	r0, r1
   405f4:	f002 f8e0 	bl	427b8 <radio_tx_chain_delay_get>
   405f8:	442c      	add	r4, r5
   405fa:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   405fc:	1a20      	subs	r0, r4, r0
   405fe:	f002 fb4b 	bl	42c98 <radio_tmr_hcto_configure>
}
   40602:	b003      	add	sp, #12
   40604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   40608:	f002 bb80 	b.w	42d0c <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   4060c:	4a17      	ldr	r2, [pc, #92]	; (4066c <isr_tx+0xd0>)
   4060e:	4918      	ldr	r1, [pc, #96]	; (40670 <isr_tx+0xd4>)
   40610:	4818      	ldr	r0, [pc, #96]	; (40674 <isr_tx+0xd8>)
   40612:	f240 4345 	movw	r3, #1093	; 0x445
   40616:	f009 f82d 	bl	49674 <printk>
   4061a:	4040      	eors	r0, r0
   4061c:	f380 8811 	msr	BASEPRI, r0
   40620:	f04f 0003 	mov.w	r0, #3
   40624:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   40626:	4810      	ldr	r0, [pc, #64]	; (40668 <isr_tx+0xcc>)
   40628:	4629      	mov	r1, r5
   4062a:	f001 ffe1 	bl	425f0 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   4062e:	f7ff f9e7 	bl	3fa00 <ull_filter_lll_rl_enabled>
   40632:	2800      	cmp	r0, #0
   40634:	d0d4      	beq.n	405e0 <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   40636:	f10d 0007 	add.w	r0, sp, #7
   4063a:	f7ff f85b 	bl	3f6f4 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   4063e:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   40640:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   40642:	f89d 0007 	ldrb.w	r0, [sp, #7]
   40646:	f002 fc07 	bl	42e58 <radio_ar_configure>
   4064a:	e7c9      	b.n	405e0 <isr_tx+0x44>
	LL_ASSERT(node_rx);
   4064c:	4a07      	ldr	r2, [pc, #28]	; (4066c <isr_tx+0xd0>)
   4064e:	490a      	ldr	r1, [pc, #40]	; (40678 <isr_tx+0xdc>)
   40650:	4808      	ldr	r0, [pc, #32]	; (40674 <isr_tx+0xd8>)
   40652:	f240 4341 	movw	r3, #1089	; 0x441
   40656:	f009 f80d 	bl	49674 <printk>
   4065a:	4040      	eors	r0, r0
   4065c:	f380 8811 	msr	BASEPRI, r0
   40660:	f04f 0003 	mov.w	r0, #3
   40664:	df02      	svc	2
   40666:	e7ad      	b.n	405c4 <isr_tx+0x28>
   40668:	00040ded 	.word	0x00040ded
   4066c:	00052ffc 	.word	0x00052ffc
   40670:	00053050 	.word	0x00053050
   40674:	00052460 	.word	0x00052460
   40678:	00053048 	.word	0x00053048

0004067c <is_abort_cb>:
	if (next != curr) {
   4067c:	4281      	cmp	r1, r0
{
   4067e:	b508      	push	{r3, lr}
	if (next != curr) {
   40680:	d00e      	beq.n	406a0 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   40682:	7a0b      	ldrb	r3, [r1, #8]
   40684:	07db      	lsls	r3, r3, #31
   40686:	d402      	bmi.n	4068e <is_abort_cb+0x12>
			return -ECANCELED;
   40688:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   4068c:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   4068e:	4b13      	ldr	r3, [pc, #76]	; (406dc <is_abort_cb+0x60>)
   40690:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   40692:	f7ff ff37 	bl	40504 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   40696:	2800      	cmp	r0, #0
   40698:	db0f      	blt.n	406ba <is_abort_cb+0x3e>
   4069a:	f06f 000a 	mvn.w	r0, #10
}
   4069e:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   406a0:	7b0b      	ldrb	r3, [r1, #12]
   406a2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   406a6:	690b      	ldr	r3, [r1, #16]
   406a8:	781b      	ldrb	r3, [r3, #0]
   406aa:	f003 030f 	and.w	r3, r3, #15
		return 0;
   406ae:	2b01      	cmp	r3, #1
   406b0:	bf14      	ite	ne
   406b2:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   406b6:	2000      	moveq	r0, #0
}
   406b8:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   406ba:	4a09      	ldr	r2, [pc, #36]	; (406e0 <is_abort_cb+0x64>)
   406bc:	4909      	ldr	r1, [pc, #36]	; (406e4 <is_abort_cb+0x68>)
   406be:	480a      	ldr	r0, [pc, #40]	; (406e8 <is_abort_cb+0x6c>)
   406c0:	f240 33fa 	movw	r3, #1018	; 0x3fa
   406c4:	f008 ffd6 	bl	49674 <printk>
   406c8:	4040      	eors	r0, r0
   406ca:	f380 8811 	msr	BASEPRI, r0
   406ce:	f04f 0003 	mov.w	r0, #3
   406d2:	df02      	svc	2
   406d4:	f06f 000a 	mvn.w	r0, #10
}
   406d8:	bd08      	pop	{r3, pc}
   406da:	bf00      	nop
   406dc:	00040c09 	.word	0x00040c09
   406e0:	00052ffc 	.word	0x00052ffc
   406e4:	00052fac 	.word	0x00052fac
   406e8:	00052460 	.word	0x00052460

000406ec <abort_cb>:
{
   406ec:	b510      	push	{r4, lr}
	if (!prepare_param) {
   406ee:	b1d8      	cbz	r0, 40728 <abort_cb+0x3c>
	err = lll_hfclock_off();
   406f0:	460c      	mov	r4, r1
   406f2:	f7ff ff1f 	bl	40534 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   406f6:	2800      	cmp	r0, #0
   406f8:	db04      	blt.n	40704 <abort_cb+0x18>
	lll_done(param);
   406fa:	4620      	mov	r0, r4
}
   406fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   40700:	f7ff bc84 	b.w	4000c <lll_done>
	LL_ASSERT(err >= 0);
   40704:	4a0c      	ldr	r2, [pc, #48]	; (40738 <abort_cb+0x4c>)
   40706:	490d      	ldr	r1, [pc, #52]	; (4073c <abort_cb+0x50>)
   40708:	480d      	ldr	r0, [pc, #52]	; (40740 <abort_cb+0x54>)
   4070a:	f44f 6384 	mov.w	r3, #1056	; 0x420
   4070e:	f008 ffb1 	bl	49674 <printk>
   40712:	4040      	eors	r0, r0
   40714:	f380 8811 	msr	BASEPRI, r0
   40718:	f04f 0003 	mov.w	r0, #3
   4071c:	df02      	svc	2
	lll_done(param);
   4071e:	4620      	mov	r0, r4
}
   40720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   40724:	f7ff bc72 	b.w	4000c <lll_done>
		radio_isr_set(isr_abort, param);
   40728:	4806      	ldr	r0, [pc, #24]	; (40744 <abort_cb+0x58>)
   4072a:	f001 ff61 	bl	425f0 <radio_isr_set>
}
   4072e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   40732:	f002 b857 	b.w	427e4 <radio_disable>
   40736:	bf00      	nop
   40738:	00052ffc 	.word	0x00052ffc
   4073c:	00052fac 	.word	0x00052fac
   40740:	00052460 	.word	0x00052460
   40744:	00040585 	.word	0x00040585

00040748 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   40748:	4b08      	ldr	r3, [pc, #32]	; (4076c <lll_adv_init+0x24>)
   4074a:	2204      	movs	r2, #4
{
   4074c:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   4074e:	1898      	adds	r0, r3, r2
   40750:	2128      	movs	r1, #40	; 0x28
   40752:	f7f3 f893 	bl	3387c <mem_init>
	MFIFO_INIT(pdu_free);
   40756:	4b06      	ldr	r3, [pc, #24]	; (40770 <lll_adv_init+0x28>)
   40758:	2400      	movs	r4, #0
   4075a:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   4075c:	2202      	movs	r2, #2
   4075e:	4621      	mov	r1, r4
   40760:	4804      	ldr	r0, [pc, #16]	; (40774 <lll_adv_init+0x2c>)
   40762:	f00f ffbf 	bl	506e4 <z_impl_k_sem_init>
}
   40766:	4620      	mov	r0, r4
   40768:	bd10      	pop	{r4, pc}
   4076a:	bf00      	nop
   4076c:	20005afc 	.word	0x20005afc
   40770:	20000b18 	.word	0x20000b18
   40774:	20005ba0 	.word	0x20005ba0

00040778 <lll_adv_reset>:
   40778:	4b08      	ldr	r3, [pc, #32]	; (4079c <lll_adv_reset+0x24>)
   4077a:	2204      	movs	r2, #4
   4077c:	b510      	push	{r4, lr}
   4077e:	1898      	adds	r0, r3, r2
   40780:	2128      	movs	r1, #40	; 0x28
   40782:	f7f3 f87b 	bl	3387c <mem_init>
   40786:	4b06      	ldr	r3, [pc, #24]	; (407a0 <lll_adv_reset+0x28>)
   40788:	2400      	movs	r4, #0
   4078a:	805c      	strh	r4, [r3, #2]
   4078c:	2202      	movs	r2, #2
   4078e:	4621      	mov	r1, r4
   40790:	4804      	ldr	r0, [pc, #16]	; (407a4 <lll_adv_reset+0x2c>)
   40792:	f00f ffa7 	bl	506e4 <z_impl_k_sem_init>
   40796:	4620      	mov	r0, r4
   40798:	bd10      	pop	{r4, pc}
   4079a:	bf00      	nop
   4079c:	20005afc 	.word	0x20005afc
   407a0:	20000b18 	.word	0x20000b18
   407a4:	20005ba0 	.word	0x20005ba0

000407a8 <lll_adv_data_init>:
{
   407a8:	b510      	push	{r4, lr}
   407aa:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   407ac:	4805      	ldr	r0, [pc, #20]	; (407c4 <lll_adv_data_init+0x1c>)
   407ae:	f7f3 f895 	bl	338dc <mem_acquire>
	if (!p) {
   407b2:	b120      	cbz	r0, 407be <lll_adv_data_init+0x16>
   407b4:	4603      	mov	r3, r0
	p->len = 0U;
   407b6:	2000      	movs	r0, #0
   407b8:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   407ba:	6063      	str	r3, [r4, #4]
}
   407bc:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   407be:	f06f 000b 	mvn.w	r0, #11
}
   407c2:	bd10      	pop	{r4, pc}
   407c4:	20005afc 	.word	0x20005afc

000407c8 <lll_adv_data_reset>:
{
   407c8:	4603      	mov	r3, r0
	pdu->first = 0U;
   407ca:	2000      	movs	r0, #0
   407cc:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   407ce:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   407d0:	6098      	str	r0, [r3, #8]
}
   407d2:	4770      	bx	lr

000407d4 <lll_adv_pdu_alloc_pdu_adv>:
{
   407d4:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   407d6:	4c34      	ldr	r4, [pc, #208]	; (408a8 <lll_adv_pdu_alloc_pdu_adv+0xd4>)
   407d8:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   407da:	78e1      	ldrb	r1, [r4, #3]
   407dc:	7823      	ldrb	r3, [r4, #0]
   407de:	4291      	cmp	r1, r2
   407e0:	d003      	beq.n	407ea <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   407e2:	fb02 4303 	mla	r3, r2, r3, r4
   407e6:	685d      	ldr	r5, [r3, #4]
	if (p) {
   407e8:	b935      	cbnz	r5, 407f8 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   407ea:	4830      	ldr	r0, [pc, #192]	; (408ac <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   407ec:	f7f3 f876 	bl	338dc <mem_acquire>
	if (p) {
   407f0:	4605      	mov	r5, r0
   407f2:	b1a0      	cbz	r0, 4081e <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   407f4:	4628      	mov	r0, r5
   407f6:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   407f8:	482d      	ldr	r0, [pc, #180]	; (408b0 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   407fa:	2200      	movs	r2, #0
   407fc:	2300      	movs	r3, #0
   407fe:	f007 fa23 	bl	47c48 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   40802:	bb38      	cbnz	r0, 40854 <lll_adv_pdu_alloc_pdu_adv+0x80>
	uint8_t _first = *first; /* Copy read-index */
   40804:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   40806:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   40808:	7861      	ldrb	r1, [r4, #1]
   4080a:	429a      	cmp	r2, r3
   4080c:	d0f2      	beq.n	407f4 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   4080e:	3301      	adds	r3, #1
   40810:	b2db      	uxtb	r3, r3
		_first = 0U;
   40812:	4299      	cmp	r1, r3
   40814:	bf08      	it	eq
   40816:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   40818:	70a3      	strb	r3, [r4, #2]
}
   4081a:	4628      	mov	r0, r5
   4081c:	bd38      	pop	{r3, r4, r5, pc}
   4081e:	4824      	ldr	r0, [pc, #144]	; (408b0 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   40820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   40824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   40828:	f007 fa0e 	bl	47c48 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   4082c:	bb00      	cbnz	r0, 40870 <lll_adv_pdu_alloc_pdu_adv+0x9c>
	uint8_t _first = *first; /* Copy read-index */
   4082e:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   40830:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   40832:	7822      	ldrb	r2, [r4, #0]
   40834:	7860      	ldrb	r0, [r4, #1]
   40836:	4299      	cmp	r1, r3
   40838:	d028      	beq.n	4088c <lll_adv_pdu_alloc_pdu_adv+0xb8>
	mem = *((void **)(fifo + _first * size));
   4083a:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   4083e:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   40840:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   40842:	b2db      	uxtb	r3, r3
		_first = 0U;
   40844:	4298      	cmp	r0, r3
   40846:	bf08      	it	eq
   40848:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   4084a:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   4084c:	b1f2      	cbz	r2, 4088c <lll_adv_pdu_alloc_pdu_adv+0xb8>
   4084e:	4615      	mov	r5, r2
}
   40850:	4628      	mov	r0, r5
   40852:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   40854:	4a17      	ldr	r2, [pc, #92]	; (408b4 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   40856:	4918      	ldr	r1, [pc, #96]	; (408b8 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   40858:	4818      	ldr	r0, [pc, #96]	; (408bc <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   4085a:	f240 1397 	movw	r3, #407	; 0x197
   4085e:	f008 ff09 	bl	49674 <printk>
   40862:	4040      	eors	r0, r0
   40864:	f380 8811 	msr	BASEPRI, r0
   40868:	f04f 0003 	mov.w	r0, #3
   4086c:	df02      	svc	2
   4086e:	e7c9      	b.n	40804 <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(!err);
   40870:	4a10      	ldr	r2, [pc, #64]	; (408b4 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   40872:	4911      	ldr	r1, [pc, #68]	; (408b8 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   40874:	4811      	ldr	r0, [pc, #68]	; (408bc <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   40876:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   4087a:	f008 fefb 	bl	49674 <printk>
   4087e:	4040      	eors	r0, r0
   40880:	f380 8811 	msr	BASEPRI, r0
   40884:	f04f 0003 	mov.w	r0, #3
   40888:	df02      	svc	2
   4088a:	e7d0      	b.n	4082e <lll_adv_pdu_alloc_pdu_adv+0x5a>
	LL_ASSERT(p);
   4088c:	4a09      	ldr	r2, [pc, #36]	; (408b4 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   4088e:	490c      	ldr	r1, [pc, #48]	; (408c0 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   40890:	480a      	ldr	r0, [pc, #40]	; (408bc <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   40892:	f240 13ad 	movw	r3, #429	; 0x1ad
   40896:	f008 feed 	bl	49674 <printk>
   4089a:	4040      	eors	r0, r0
   4089c:	f380 8811 	msr	BASEPRI, r0
   408a0:	f04f 0003 	mov.w	r0, #3
   408a4:	df02      	svc	2
   408a6:	e7a5      	b.n	407f4 <lll_adv_pdu_alloc_pdu_adv+0x20>
   408a8:	20000b18 	.word	0x20000b18
   408ac:	20005afc 	.word	0x20005afc
   408b0:	20005ba0 	.word	0x20005ba0
   408b4:	00052ffc 	.word	0x00052ffc
   408b8:	0005263c 	.word	0x0005263c
   408bc:	00052460 	.word	0x00052460
   408c0:	00053064 	.word	0x00053064

000408c4 <lll_adv_pdu_alloc>:
{
   408c4:	b510      	push	{r4, lr}
	first = pdu->first;
   408c6:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   408c8:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   408ca:	429a      	cmp	r2, r3
   408cc:	d014      	beq.n	408f8 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   408ce:	b2d4      	uxtb	r4, r2
   408d0:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   408d2:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   408d4:	4294      	cmp	r4, r2
   408d6:	d004      	beq.n	408e2 <lll_adv_pdu_alloc+0x1e>
			last++;
   408d8:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   408da:	7043      	strb	r3, [r0, #1]
			last++;
   408dc:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   408de:	2b02      	cmp	r3, #2
   408e0:	d00e      	beq.n	40900 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   408e2:	461a      	mov	r2, r3
	*idx = last;
   408e4:	eb00 0482 	add.w	r4, r0, r2, lsl #2
   408e8:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   408ea:	6860      	ldr	r0, [r4, #4]
	if (p) {
   408ec:	b100      	cbz	r0, 408f0 <lll_adv_pdu_alloc+0x2c>
}
   408ee:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   408f0:	f7ff ff70 	bl	407d4 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   408f4:	6060      	str	r0, [r4, #4]
}
   408f6:	bd10      	pop	{r4, pc}
		last++;
   408f8:	3301      	adds	r3, #1
   408fa:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   408fc:	2b02      	cmp	r3, #2
   408fe:	d1f0      	bne.n	408e2 <lll_adv_pdu_alloc+0x1e>
{
   40900:	2200      	movs	r2, #0
			last = 0U;
   40902:	4613      	mov	r3, r2
   40904:	e7ee      	b.n	408e4 <lll_adv_pdu_alloc+0x20>
   40906:	bf00      	nop

00040908 <lll_adv_pdu_latest_get>:
{
   40908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   4090a:	7802      	ldrb	r2, [r0, #0]
	if (first != pdu->last) {
   4090c:	7843      	ldrb	r3, [r0, #1]
   4090e:	4293      	cmp	r3, r2
{
   40910:	4604      	mov	r4, r0
	if (first != pdu->last) {
   40912:	d02a      	beq.n	4096a <lll_adv_pdu_latest_get+0x62>
		pdu_idx = first;
   40914:	b2d5      	uxtb	r5, r2
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   40916:	4a17      	ldr	r2, [pc, #92]	; (40974 <lll_adv_pdu_latest_get+0x6c>)
   40918:	460e      	mov	r6, r1
   4091a:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   4091c:	f892 c001 	ldrb.w	ip, [r2, #1]
	last = last + 1;
   40920:	1c4b      	adds	r3, r1, #1
   40922:	b2db      	uxtb	r3, r3
		last = 0U;
   40924:	459c      	cmp	ip, r3
   40926:	bf08      	it	eq
   40928:	2300      	moveq	r3, #0
   4092a:	f892 c002 	ldrb.w	ip, [r2, #2]
   4092e:	eb00 0785 	add.w	r7, r0, r5, lsl #2
	if (last == first) {
   40932:	459c      	cmp	ip, r3
		p = pdu->pdu[pdu_idx];
   40934:	6878      	ldr	r0, [r7, #4]
   40936:	d009      	beq.n	4094c <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   40938:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   4093c:	fb0c 2101 	mla	r1, ip, r1, r2
   40940:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   40942:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   40944:	480c      	ldr	r0, [pc, #48]	; (40978 <lll_adv_pdu_latest_get+0x70>)
   40946:	f007 f959 	bl	47bfc <z_impl_k_sem_give>
			p = next;
   4094a:	2000      	movs	r0, #0
		first += 1U;
   4094c:	1c6b      	adds	r3, r5, #1
   4094e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   40950:	2b02      	cmp	r3, #2
   40952:	bf0a      	itet	eq
   40954:	2200      	moveq	r2, #0
	return (void *)pdu->pdu[first];
   40956:	461a      	movne	r2, r3
			first = 0U;
   40958:	4613      	moveq	r3, r2
		pdu->pdu[pdu_idx] = p;
   4095a:	6078      	str	r0, [r7, #4]
		*is_modified = 1U;
   4095c:	2101      	movs	r1, #1
		pdu->first = first;
   4095e:	7023      	strb	r3, [r4, #0]
	return (void *)pdu->pdu[first];
   40960:	eb04 0482 	add.w	r4, r4, r2, lsl #2
		*is_modified = 1U;
   40964:	7031      	strb	r1, [r6, #0]
}
   40966:	6860      	ldr	r0, [r4, #4]
   40968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p = pdu->pdu[pdu_idx];
   4096a:	461a      	mov	r2, r3
	return (void *)pdu->pdu[first];
   4096c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
}
   40970:	6860      	ldr	r0, [r4, #4]
   40972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   40974:	20000b18 	.word	0x20000b18
   40978:	20005ba0 	.word	0x20005ba0

0004097c <chan_prepare.isra.0>:

static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   4097c:	b570      	push	{r4, r5, r6, lr}
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   4097e:	7a03      	ldrb	r3, [r0, #8]
   40980:	f3c3 1302 	ubfx	r3, r3, #4, #3
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   40984:	4604      	mov	r4, r0
   40986:	2b00      	cmp	r3, #0
   40988:	fa93 f0a3 	rbit	r0, r3
   4098c:	fab0 f080 	clz	r0, r0
   40990:	bf08      	it	eq
   40992:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   40996:	b082      	sub	sp, #8
   40998:	f100 0501 	add.w	r5, r0, #1
	LL_ASSERT(chan);
   4099c:	d043      	beq.n	40a26 <chan_prepare.isra.0+0xaa>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   4099e:	7a21      	ldrb	r1, [r4, #8]
   409a0:	1e5a      	subs	r2, r3, #1
   409a2:	4013      	ands	r3, r2
   409a4:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   409a8:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   409ac:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   409ae:	f7ff fbab 	bl	40108 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   409b2:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   409b4:	f10d 0107 	add.w	r1, sp, #7
   409b8:	f104 000c 	add.w	r0, r4, #12
   409bc:	f88d 3007 	strb.w	r3, [sp, #7]
   409c0:	f7ff ffa2 	bl	40908 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   409c4:	4605      	mov	r5, r0
   409c6:	2800      	cmp	r0, #0
   409c8:	d03e      	beq.n	40a48 <chan_prepare.isra.0+0xcc>

	radio_pkt_tx_set(pdu);
   409ca:	4628      	mov	r0, r5
   409cc:	f001 fee8 	bl	427a0 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   409d0:	782b      	ldrb	r3, [r5, #0]
   409d2:	f003 030f 	and.w	r3, r3, #15
   409d6:	2b02      	cmp	r3, #2
   409d8:	d01d      	beq.n	40a16 <chan_prepare.isra.0+0x9a>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   409da:	f10d 0107 	add.w	r1, sp, #7
   409de:	f104 0018 	add.w	r0, r4, #24
   409e2:	f7ff ff91 	bl	40908 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   409e6:	4606      	mov	r6, r0
   409e8:	2800      	cmp	r0, #0
   409ea:	d03b      	beq.n	40a64 <chan_prepare.isra.0+0xe8>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   409ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
   409f0:	b95b      	cbnz	r3, 40a0a <chan_prepare.isra.0+0x8e>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   409f2:	4621      	mov	r1, r4
   409f4:	4822      	ldr	r0, [pc, #136]	; (40a80 <chan_prepare.isra.0+0x104>)
   409f6:	f001 fdfb 	bl	425f0 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   409fa:	2096      	movs	r0, #150	; 0x96
   409fc:	f002 f87a 	bl	42af4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   40a00:	2000      	movs	r0, #0
   40a02:	f001 ff4b 	bl	4289c <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   40a06:	b002      	add	sp, #8
   40a08:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   40a0a:	2206      	movs	r2, #6
   40a0c:	1ca9      	adds	r1, r5, #2
   40a0e:	1cb0      	adds	r0, r6, #2
   40a10:	f00a ff3b 	bl	4b88a <memcpy>
   40a14:	e7ed      	b.n	409f2 <chan_prepare.isra.0+0x76>
		radio_isr_set(isr_done, lll);
   40a16:	481b      	ldr	r0, [pc, #108]	; (40a84 <chan_prepare.isra.0+0x108>)
   40a18:	4621      	mov	r1, r4
   40a1a:	f001 fde9 	bl	425f0 <radio_isr_set>
		radio_switch_complete_and_disable();
   40a1e:	f001 ffe5 	bl	429ec <radio_switch_complete_and_disable>
}
   40a22:	b002      	add	sp, #8
   40a24:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   40a26:	4a18      	ldr	r2, [pc, #96]	; (40a88 <chan_prepare.isra.0+0x10c>)
   40a28:	4918      	ldr	r1, [pc, #96]	; (40a8c <chan_prepare.isra.0+0x110>)
   40a2a:	4819      	ldr	r0, [pc, #100]	; (40a90 <chan_prepare.isra.0+0x114>)
   40a2c:	f240 5337 	movw	r3, #1335	; 0x537
   40a30:	f008 fe20 	bl	49674 <printk>
   40a34:	4040      	eors	r0, r0
   40a36:	f380 8811 	msr	BASEPRI, r0
   40a3a:	f04f 0003 	mov.w	r0, #3
   40a3e:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   40a40:	7a23      	ldrb	r3, [r4, #8]
   40a42:	f3c3 1302 	ubfx	r3, r3, #4, #3
   40a46:	e7aa      	b.n	4099e <chan_prepare.isra.0+0x22>
	LL_ASSERT(pdu);
   40a48:	4a0f      	ldr	r2, [pc, #60]	; (40a88 <chan_prepare.isra.0+0x10c>)
   40a4a:	4912      	ldr	r1, [pc, #72]	; (40a94 <chan_prepare.isra.0+0x118>)
   40a4c:	4810      	ldr	r0, [pc, #64]	; (40a90 <chan_prepare.isra.0+0x114>)
   40a4e:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   40a52:	f008 fe0f 	bl	49674 <printk>
   40a56:	4040      	eors	r0, r0
   40a58:	f380 8811 	msr	BASEPRI, r0
   40a5c:	f04f 0003 	mov.w	r0, #3
   40a60:	df02      	svc	2
   40a62:	e7b2      	b.n	409ca <chan_prepare.isra.0+0x4e>
		LL_ASSERT(scan_pdu);
   40a64:	4a08      	ldr	r2, [pc, #32]	; (40a88 <chan_prepare.isra.0+0x10c>)
   40a66:	490c      	ldr	r1, [pc, #48]	; (40a98 <chan_prepare.isra.0+0x11c>)
   40a68:	4809      	ldr	r0, [pc, #36]	; (40a90 <chan_prepare.isra.0+0x114>)
   40a6a:	f240 534a 	movw	r3, #1354	; 0x54a
   40a6e:	f008 fe01 	bl	49674 <printk>
   40a72:	4040      	eors	r0, r0
   40a74:	f380 8811 	msr	BASEPRI, r0
   40a78:	f04f 0003 	mov.w	r0, #3
   40a7c:	df02      	svc	2
   40a7e:	e7b5      	b.n	409ec <chan_prepare.isra.0+0x70>
   40a80:	0004059d 	.word	0x0004059d
   40a84:	00040a9d 	.word	0x00040a9d
   40a88:	00052ffc 	.word	0x00052ffc
   40a8c:	00053068 	.word	0x00053068
   40a90:	00052460 	.word	0x00052460
   40a94:	00053070 	.word	0x00053070
   40a98:	00053074 	.word	0x00053074

00040a9c <isr_done>:
{
   40a9c:	b510      	push	{r4, lr}
   40a9e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   40aa0:	f7ff fb8a 	bl	401b8 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   40aa4:	7a23      	ldrb	r3, [r4, #8]
   40aa6:	f003 0271 	and.w	r2, r3, #113	; 0x71
   40aaa:	2a01      	cmp	r2, #1
   40aac:	d105      	bne.n	40aba <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   40aae:	f3c3 0242 	ubfx	r2, r3, #1, #3
   40ab2:	f362 1306 	bfi	r3, r2, #4, #3
   40ab6:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   40ab8:	b2db      	uxtb	r3, r3
   40aba:	f013 0f70 	tst.w	r3, #112	; 0x70
   40abe:	d005      	beq.n	40acc <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   40ac0:	6863      	ldr	r3, [r4, #4]
   40ac2:	b153      	cbz	r3, 40ada <isr_done+0x3e>
   40ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
   40ac8:	079b      	lsls	r3, r3, #30
   40aca:	d506      	bpl.n	40ada <isr_done+0x3e>
	radio_filter_disable();
   40acc:	f001 ffe0 	bl	42a90 <radio_filter_disable>
	lll_isr_cleanup(param);
   40ad0:	4620      	mov	r0, r4
}
   40ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   40ad6:	f7ff bb7d 	b.w	401d4 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   40ada:	4620      	mov	r0, r4
   40adc:	f7ff ff4e 	bl	4097c <chan_prepare.isra.0>
		radio_tx_enable();
   40ae0:	f001 fe7a 	bl	427d8 <radio_tx_enable>
}
   40ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   40ae8:	f002 b910 	b.w	42d0c <radio_tmr_end_capture>

00040aec <prepare_cb>:
{
   40aec:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   40aee:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   40af0:	6863      	ldr	r3, [r4, #4]
{
   40af2:	b083      	sub	sp, #12
   40af4:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   40af6:	2b00      	cmp	r3, #0
   40af8:	d16d      	bne.n	40bd6 <prepare_cb+0xea>
	radio_reset();
   40afa:	f001 fdbb 	bl	42674 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   40afe:	2000      	movs	r0, #0
   40b00:	f001 fdec 	bl	426dc <radio_tx_power_set>
	radio_phy_set(0, 0);
   40b04:	2100      	movs	r1, #0
   40b06:	4608      	mov	r0, r1
   40b08:	f001 fdd8 	bl	426bc <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   40b0c:	2200      	movs	r2, #0
   40b0e:	2125      	movs	r1, #37	; 0x25
   40b10:	2008      	movs	r0, #8
   40b12:	f001 fe19 	bl	42748 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   40b16:	4b35      	ldr	r3, [pc, #212]	; (40bec <prepare_cb+0x100>)
   40b18:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   40b1a:	a801      	add	r0, sp, #4
   40b1c:	f001 fdfc 	bl	42718 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   40b20:	4933      	ldr	r1, [pc, #204]	; (40bf0 <prepare_cb+0x104>)
   40b22:	f240 605b 	movw	r0, #1627	; 0x65b
   40b26:	f001 fe9b 	bl	42860 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   40b2a:	7a23      	ldrb	r3, [r4, #8]
   40b2c:	f3c3 0242 	ubfx	r2, r3, #1, #3
   40b30:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   40b34:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   40b36:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   40b38:	f7ff ff20 	bl	4097c <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   40b3c:	f7fe ff60 	bl	3fa00 <ull_filter_lll_rl_enabled>
   40b40:	bb98      	cbnz	r0, 40baa <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   40b42:	7a63      	ldrb	r3, [r4, #9]
   40b44:	079b      	lsls	r3, r3, #30
   40b46:	d127      	bne.n	40b98 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   40b48:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   40b4a:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   40b4c:	4638      	mov	r0, r7
   40b4e:	f7ff fac1 	bl	400d4 <lll_event_offset_get>
   40b52:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   40b54:	686a      	ldr	r2, [r5, #4]
   40b56:	f106 0109 	add.w	r1, r6, #9
   40b5a:	2001      	movs	r0, #1
   40b5c:	f001 ffd6 	bl	42b0c <radio_tmr_start>
	radio_tmr_end_capture();
   40b60:	f002 f8d4 	bl	42d0c <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   40b64:	4620      	mov	r0, r4
   40b66:	f7f7 fe2b 	bl	387c0 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   40b6a:	1c81      	adds	r1, r0, #2
   40b6c:	4632      	mov	r2, r6
   40b6e:	b2c9      	uxtb	r1, r1
   40b70:	4638      	mov	r0, r7
   40b72:	f7ff fab9 	bl	400e8 <lll_preempt_calc>
   40b76:	b930      	cbnz	r0, 40b86 <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   40b78:	4620      	mov	r0, r4
   40b7a:	f7ff fa45 	bl	40008 <lll_prepare_done>
		LL_ASSERT(!ret);
   40b7e:	b9d0      	cbnz	r0, 40bb6 <prepare_cb+0xca>
}
   40b80:	2000      	movs	r0, #0
   40b82:	b003      	add	sp, #12
   40b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   40b86:	481b      	ldr	r0, [pc, #108]	; (40bf4 <prepare_cb+0x108>)
   40b88:	4621      	mov	r1, r4
   40b8a:	f001 fd31 	bl	425f0 <radio_isr_set>
		radio_disable();
   40b8e:	f001 fe29 	bl	427e4 <radio_disable>
}
   40b92:	2000      	movs	r0, #0
   40b94:	b003      	add	sp, #12
   40b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   40b98:	2001      	movs	r0, #1
   40b9a:	f7fe faa9 	bl	3f0f0 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   40b9e:	7841      	ldrb	r1, [r0, #1]
   40ba0:	1c82      	adds	r2, r0, #2
   40ba2:	7800      	ldrb	r0, [r0, #0]
   40ba4:	f001 ff54 	bl	42a50 <radio_filter_configure>
   40ba8:	e7ce      	b.n	40b48 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   40baa:	7a60      	ldrb	r0, [r4, #9]
   40bac:	f010 0003 	ands.w	r0, r0, #3
   40bb0:	bf18      	it	ne
   40bb2:	2001      	movne	r0, #1
   40bb4:	e7f1      	b.n	40b9a <prepare_cb+0xae>
		LL_ASSERT(!ret);
   40bb6:	4a10      	ldr	r2, [pc, #64]	; (40bf8 <prepare_cb+0x10c>)
   40bb8:	4910      	ldr	r1, [pc, #64]	; (40bfc <prepare_cb+0x110>)
   40bba:	4811      	ldr	r0, [pc, #68]	; (40c00 <prepare_cb+0x114>)
   40bbc:	f240 33d1 	movw	r3, #977	; 0x3d1
   40bc0:	f008 fd58 	bl	49674 <printk>
   40bc4:	4040      	eors	r0, r0
   40bc6:	f380 8811 	msr	BASEPRI, r0
   40bca:	f04f 0003 	mov.w	r0, #3
   40bce:	df02      	svc	2
}
   40bd0:	2000      	movs	r0, #0
   40bd2:	b003      	add	sp, #12
   40bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   40bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
   40bda:	079a      	lsls	r2, r3, #30
   40bdc:	d08d      	beq.n	40afa <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   40bde:	4809      	ldr	r0, [pc, #36]	; (40c04 <prepare_cb+0x118>)
   40be0:	4621      	mov	r1, r4
   40be2:	f001 fd05 	bl	425f0 <radio_isr_set>
		radio_disable();
   40be6:	f001 fdfd 	bl	427e4 <radio_disable>
		return 0;
   40bea:	e7c9      	b.n	40b80 <prepare_cb+0x94>
   40bec:	8e89bed6 	.word	0x8e89bed6
   40bf0:	00555555 	.word	0x00555555
   40bf4:	00040585 	.word	0x00040585
   40bf8:	00052ffc 	.word	0x00052ffc
   40bfc:	0005273c 	.word	0x0005273c
   40c00:	00052460 	.word	0x00052460
   40c04:	00040265 	.word	0x00040265

00040c08 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   40c08:	68c3      	ldr	r3, [r0, #12]
{
   40c0a:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   40c0c:	681e      	ldr	r6, [r3, #0]
{
   40c0e:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   40c10:	f7f4 fa44 	bl	3509c <ticker_ticks_now_get>
   40c14:	4605      	mov	r5, r0
   40c16:	4630      	mov	r0, r6
   40c18:	f7ff fa5c 	bl	400d4 <lll_event_offset_get>
	p->remainder = 0;
   40c1c:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   40c1e:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   40c20:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   40c24:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   40c26:	4620      	mov	r0, r4
}
   40c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   40c2c:	f7ff bf5e 	b.w	40aec <prepare_cb>

00040c30 <lll_adv_prepare>:
{
   40c30:	b510      	push	{r4, lr}
   40c32:	b082      	sub	sp, #8
   40c34:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   40c36:	f7ff fc65 	bl	40504 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   40c3a:	2800      	cmp	r0, #0
   40c3c:	db1a      	blt.n	40c74 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   40c3e:	4a14      	ldr	r2, [pc, #80]	; (40c90 <lll_adv_prepare+0x60>)
   40c40:	4914      	ldr	r1, [pc, #80]	; (40c94 <lll_adv_prepare+0x64>)
   40c42:	4815      	ldr	r0, [pc, #84]	; (40c98 <lll_adv_prepare+0x68>)
   40c44:	9400      	str	r4, [sp, #0]
   40c46:	2300      	movs	r3, #0
   40c48:	f7f7 f948 	bl	37edc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   40c4c:	b108      	cbz	r0, 40c52 <lll_adv_prepare+0x22>
   40c4e:	3077      	adds	r0, #119	; 0x77
   40c50:	d101      	bne.n	40c56 <lll_adv_prepare+0x26>
}
   40c52:	b002      	add	sp, #8
   40c54:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   40c56:	4a11      	ldr	r2, [pc, #68]	; (40c9c <lll_adv_prepare+0x6c>)
   40c58:	4911      	ldr	r1, [pc, #68]	; (40ca0 <lll_adv_prepare+0x70>)
   40c5a:	4812      	ldr	r0, [pc, #72]	; (40ca4 <lll_adv_prepare+0x74>)
   40c5c:	f240 239d 	movw	r3, #669	; 0x29d
   40c60:	f008 fd08 	bl	49674 <printk>
   40c64:	4040      	eors	r0, r0
   40c66:	f380 8811 	msr	BASEPRI, r0
   40c6a:	f04f 0003 	mov.w	r0, #3
   40c6e:	df02      	svc	2
}
   40c70:	b002      	add	sp, #8
   40c72:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   40c74:	4a09      	ldr	r2, [pc, #36]	; (40c9c <lll_adv_prepare+0x6c>)
   40c76:	490c      	ldr	r1, [pc, #48]	; (40ca8 <lll_adv_prepare+0x78>)
   40c78:	480a      	ldr	r0, [pc, #40]	; (40ca4 <lll_adv_prepare+0x74>)
   40c7a:	f240 239a 	movw	r3, #666	; 0x29a
   40c7e:	f008 fcf9 	bl	49674 <printk>
   40c82:	4040      	eors	r0, r0
   40c84:	f380 8811 	msr	BASEPRI, r0
   40c88:	f04f 0003 	mov.w	r0, #3
   40c8c:	df02      	svc	2
   40c8e:	e7d6      	b.n	40c3e <lll_adv_prepare+0xe>
   40c90:	00040aed 	.word	0x00040aed
   40c94:	000406ed 	.word	0x000406ed
   40c98:	0004067d 	.word	0x0004067d
   40c9c:	00052ffc 	.word	0x00052ffc
   40ca0:	00053080 	.word	0x00053080
   40ca4:	00052460 	.word	0x00052460
   40ca8:	00052fac 	.word	0x00052fac

00040cac <lll_adv_scan_req_check>:
{
   40cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   40cb0:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   40cb4:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   40cb8:	f01c 0f01 	tst.w	ip, #1
{
   40cbc:	460f      	mov	r7, r1
   40cbe:	4616      	mov	r6, r2
   40cc0:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   40cc2:	d009      	beq.n	40cd8 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   40cc4:	f1b8 0f00 	cmp.w	r8, #0
   40cc8:	d016      	beq.n	40cf8 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   40cca:	783b      	ldrb	r3, [r7, #0]
   40ccc:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   40cd0:	d019      	beq.n	40d06 <lll_adv_scan_req_check+0x5a>
{
   40cd2:	2000      	movs	r0, #0
}
   40cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   40cd8:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   40cda:	f811 0b02 	ldrb.w	r0, [r1], #2
   40cde:	9a07      	ldr	r2, [sp, #28]
   40ce0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   40ce4:	f7fe fe30 	bl	3f948 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   40ce8:	2800      	cmp	r0, #0
   40cea:	d1ee      	bne.n	40cca <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   40cec:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   40cee:	07db      	lsls	r3, r3, #31
   40cf0:	d5ef      	bpl.n	40cd2 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   40cf2:	f1b8 0f00 	cmp.w	r8, #0
   40cf6:	d1e8      	bne.n	40cca <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   40cf8:	9b07      	ldr	r3, [sp, #28]
   40cfa:	7818      	ldrb	r0, [r3, #0]
   40cfc:	f7fe fdc0 	bl	3f880 <ull_filter_lll_irk_in_fal>
   40d00:	2800      	cmp	r0, #0
   40d02:	d1e2      	bne.n	40cca <lll_adv_scan_req_check+0x1e>
   40d04:	e7e5      	b.n	40cd2 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   40d06:	2206      	movs	r2, #6
   40d08:	f107 0108 	add.w	r1, r7, #8
   40d0c:	4628      	mov	r0, r5
   40d0e:	f00a fdac 	bl	4b86a <memcmp>
	return (tx_addr == sr->rx_addr) &&
   40d12:	fab0 f080 	clz	r0, r0
   40d16:	0940      	lsrs	r0, r0, #5
}
   40d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00040d1c <lll_adv_connect_ind_check>:
{
   40d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   40d20:	461f      	mov	r7, r3
	if (tgt_addr) {
   40d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   40d24:	f89d 9020 	ldrb.w	r9, [sp, #32]
   40d28:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   40d2c:	4605      	mov	r5, r0
   40d2e:	460c      	mov	r4, r1
   40d30:	4690      	mov	r8, r2
	if (tgt_addr) {
   40d32:	b9fb      	cbnz	r3, 40d74 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   40d34:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   40d36:	079a      	lsls	r2, r3, #30
   40d38:	d507      	bpl.n	40d4a <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   40d3a:	b1a6      	cbz	r6, 40d66 <lll_adv_connect_ind_check+0x4a>
	return (tx_addr == sr->rx_addr) &&
   40d3c:	7823      	ldrb	r3, [r4, #0]
   40d3e:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   40d42:	d03a      	beq.n	40dba <lll_adv_connect_ind_check+0x9e>
   40d44:	2000      	movs	r0, #0
}
   40d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   40d4a:	f811 0b02 	ldrb.w	r0, [r1], #2
   40d4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   40d50:	f3c0 1080 	ubfx	r0, r0, #6, #1
   40d54:	f7fe fdf8 	bl	3f948 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   40d58:	2800      	cmp	r0, #0
   40d5a:	d1ef      	bne.n	40d3c <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   40d5c:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   40d5e:	079b      	lsls	r3, r3, #30
   40d60:	d5f0      	bpl.n	40d44 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   40d62:	2e00      	cmp	r6, #0
   40d64:	d1ea      	bne.n	40d3c <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   40d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   40d68:	7818      	ldrb	r0, [r3, #0]
   40d6a:	f7fe fd89 	bl	3f880 <ull_filter_lll_irk_in_fal>
   40d6e:	2800      	cmp	r0, #0
   40d70:	d1e4      	bne.n	40d3c <lll_adv_connect_ind_check+0x20>
   40d72:	e7e7      	b.n	40d44 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   40d74:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   40d76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   40d78:	f81a 0b02 	ldrb.w	r0, [sl], #2
   40d7c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   40d80:	4651      	mov	r1, sl
   40d82:	f7fe fde1 	bl	3f948 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   40d86:	2800      	cmp	r0, #0
   40d88:	d0dc      	beq.n	40d44 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == sr->rx_addr) &&
   40d8a:	7823      	ldrb	r3, [r4, #0]
   40d8c:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   40d90:	d1d8      	bne.n	40d44 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   40d92:	4638      	mov	r0, r7
   40d94:	2206      	movs	r2, #6
   40d96:	f104 0108 	add.w	r1, r4, #8
   40d9a:	f00a fd66 	bl	4b86a <memcmp>
	return (tx_addr == sr->rx_addr) &&
   40d9e:	2800      	cmp	r0, #0
   40da0:	d1d0      	bne.n	40d44 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   40da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   40da4:	7818      	ldrb	r0, [r3, #0]
static inline bool isr_rx_ci_tgta_check(struct lll_adv *lll,
					uint8_t rx_addr, uint8_t *tgt_addr,
					struct pdu_adv *ci, uint8_t rl_idx)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   40da6:	28ff      	cmp	r0, #255	; 0xff
   40da8:	d011      	beq.n	40dce <lll_adv_connect_ind_check+0xb2>
   40daa:	7aab      	ldrb	r3, [r5, #10]
   40dac:	2bff      	cmp	r3, #255	; 0xff
   40dae:	d00e      	beq.n	40dce <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   40db0:	1ac0      	subs	r0, r0, r3
   40db2:	fab0 f080 	clz	r0, r0
   40db6:	0940      	lsrs	r0, r0, #5
   40db8:	e7c5      	b.n	40d46 <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   40dba:	2206      	movs	r2, #6
   40dbc:	f104 0108 	add.w	r1, r4, #8
   40dc0:	4638      	mov	r0, r7
   40dc2:	f00a fd52 	bl	4b86a <memcmp>
	return (tx_addr == sr->rx_addr) &&
   40dc6:	fab0 f080 	clz	r0, r0
   40dca:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   40dcc:	e7bb      	b.n	40d46 <lll_adv_connect_ind_check+0x2a>
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */
	return (rx_addr == ci->tx_addr) &&
   40dce:	7823      	ldrb	r3, [r4, #0]
   40dd0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   40dd4:	454b      	cmp	r3, r9
   40dd6:	d1b5      	bne.n	40d44 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   40dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
   40dda:	2206      	movs	r2, #6
   40ddc:	4651      	mov	r1, sl
   40dde:	f00a fd44 	bl	4b86a <memcmp>
	return (rx_addr == ci->tx_addr) &&
   40de2:	fab0 f080 	clz	r0, r0
   40de6:	0940      	lsrs	r0, r0, #5
   40de8:	e7ad      	b.n	40d46 <lll_adv_connect_ind_check+0x2a>
   40dea:	bf00      	nop

00040dec <isr_rx>:
{
   40dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   40df0:	b08b      	sub	sp, #44	; 0x2c
   40df2:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   40df4:	f001 fd20 	bl	42838 <radio_is_done>
	if (trx_done) {
   40df8:	b2c0      	uxtb	r0, r0
   40dfa:	b950      	cbnz	r0, 40e12 <isr_rx+0x26>
	lll_isr_status_reset();
   40dfc:	f7ff f9dc 	bl	401b8 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   40e00:	487c      	ldr	r0, [pc, #496]	; (40ff4 <isr_rx+0x208>)
   40e02:	4621      	mov	r1, r4
   40e04:	f001 fbf4 	bl	425f0 <radio_isr_set>
}
   40e08:	b00b      	add	sp, #44	; 0x2c
   40e0a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   40e0e:	f001 bce9 	b.w	427e4 <radio_disable>
		crc_ok = radio_crc_is_valid();
   40e12:	f001 fd31 	bl	42878 <radio_crc_is_valid>
   40e16:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   40e18:	f001 fe4c 	bl	42ab4 <radio_filter_has_match>
   40e1c:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   40e1e:	f001 fe53 	bl	42ac8 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   40e22:	f002 f869 	bl	42ef8 <radio_ar_has_match>
   40e26:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   40e28:	f002 f84a 	bl	42ec0 <radio_ar_match_get>
	if (crc_ok) {
   40e2c:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   40e2e:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   40e30:	f001 fe04 	bl	42a3c <radio_rssi_is_ready>
	lll_isr_status_reset();
   40e34:	f7ff f9c0 	bl	401b8 <lll_isr_status_reset>
	if (crc_ok) {
   40e38:	2d00      	cmp	r5, #0
   40e3a:	d0e1      	beq.n	40e00 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   40e3c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   40e40:	d17a      	bne.n	40f38 <isr_rx+0x14c>
   40e42:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   40e44:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   40e46:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   40e4a:	f7f6 fd13 	bl	37874 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   40e4e:	4605      	mov	r5, r0
   40e50:	2800      	cmp	r0, #0
   40e52:	f000 80a2 	beq.w	40f9a <isr_rx+0x1ae>
   40e56:	7b23      	ldrb	r3, [r4, #12]
   40e58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   40e5c:	f105 011c 	add.w	r1, r5, #28
   40e60:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   40e62:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   40e64:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   40e68:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   40e6c:	f000 0c0f 	and.w	ip, r0, #15
   40e70:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   40e74:	bf08      	it	eq
   40e76:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   40e7a:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   40e7e:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   40e82:	7f28      	ldrb	r0, [r5, #28]
   40e84:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   40e88:	bf18      	it	ne
   40e8a:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   40e8e:	2803      	cmp	r0, #3
   40e90:	d05a      	beq.n	40f48 <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   40e92:	2805      	cmp	r0, #5
   40e94:	d1b4      	bne.n	40e00 <isr_rx+0x14>
   40e96:	7f68      	ldrb	r0, [r5, #29]
   40e98:	2822      	cmp	r0, #34	; 0x22
   40e9a:	d1b1      	bne.n	40e00 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   40e9c:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   40e9e:	2800      	cmp	r0, #0
   40ea0:	d0ae      	beq.n	40e00 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   40ea2:	f890 0020 	ldrb.w	r0, [r0, #32]
   40ea6:	0780      	lsls	r0, r0, #30
   40ea8:	d4aa      	bmi.n	40e00 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   40eaa:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   40eae:	9003      	str	r0, [sp, #12]
   40eb0:	e9cd 8901 	strd	r8, r9, [sp, #4]
   40eb4:	9700      	str	r7, [sp, #0]
   40eb6:	4620      	mov	r0, r4
   40eb8:	f7ff ff30 	bl	40d1c <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   40ebc:	2800      	cmp	r0, #0
   40ebe:	d09f      	beq.n	40e00 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   40ec0:	2004      	movs	r0, #4
   40ec2:	f7f6 fcd7 	bl	37874 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   40ec6:	2800      	cmp	r0, #0
   40ec8:	d09a      	beq.n	40e00 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   40eca:	484b      	ldr	r0, [pc, #300]	; (40ff8 <isr_rx+0x20c>)
   40ecc:	4621      	mov	r1, r4
   40ece:	f001 fb8f 	bl	425f0 <radio_isr_set>
		radio_disable();
   40ed2:	f001 fc87 	bl	427e4 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   40ed6:	f001 fca5 	bl	42824 <radio_is_ready>
   40eda:	2800      	cmp	r0, #0
   40edc:	d14f      	bne.n	40f7e <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   40ede:	6862      	ldr	r2, [r4, #4]
   40ee0:	f892 3020 	ldrb.w	r3, [r2, #32]
   40ee4:	f043 0301 	orr.w	r3, r3, #1
   40ee8:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   40eec:	f7f6 fce0 	bl	378b0 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   40ef0:	2216      	movs	r2, #22
		rx->hdr.handle = 0xffff;
   40ef2:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   40ef6:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   40ef8:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   40efa:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   40efc:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   40efe:	f001 feb9 	bl	42c74 <radio_tmr_start_get>
   40f02:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   40f04:	f001 ff0a 	bl	42d1c <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   40f08:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   40f0a:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   40f0c:	4608      	mov	r0, r1
   40f0e:	f001 fc57 	bl	427c0 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   40f12:	1a24      	subs	r4, r4, r0
   40f14:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   40f16:	b1ae      	cbz	r6, 40f44 <isr_rx+0x158>
   40f18:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   40f1c:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   40f1e:	f7f6 fcc7 	bl	378b0 <ull_pdu_rx_alloc>
   40f22:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   40f24:	4629      	mov	r1, r5
   40f26:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   40f28:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   40f2a:	f7f6 fcd7 	bl	378dc <ull_rx_put>
		ull_rx_sched();
   40f2e:	f7f6 fce5 	bl	378fc <ull_rx_sched>
}
   40f32:	b00b      	add	sp, #44	; 0x2c
   40f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   40f38:	fa5f f088 	uxtb.w	r0, r8
   40f3c:	f7fe fc4e 	bl	3f7dc <ull_filter_lll_rl_irk_idx>
   40f40:	4603      	mov	r3, r0
   40f42:	e77f      	b.n	40e44 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   40f44:	23ff      	movs	r3, #255	; 0xff
   40f46:	e7e9      	b.n	40f1c <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   40f48:	7f68      	ldrb	r0, [r5, #29]
   40f4a:	280c      	cmp	r0, #12
   40f4c:	f47f af58 	bne.w	40e00 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   40f50:	f1b8 0f00 	cmp.w	r8, #0
   40f54:	f47f af54 	bne.w	40e00 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   40f58:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   40f5c:	9001      	str	r0, [sp, #4]
   40f5e:	f8cd 9000 	str.w	r9, [sp]
   40f62:	4620      	mov	r0, r4
   40f64:	e9cd 2306 	strd	r2, r3, [sp, #24]
   40f68:	9105      	str	r1, [sp, #20]
   40f6a:	f7ff fe9f 	bl	40cac <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   40f6e:	bb10      	cbnz	r0, 40fb6 <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   40f70:	7f28      	ldrb	r0, [r5, #28]
   40f72:	9b07      	ldr	r3, [sp, #28]
   40f74:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   40f78:	f000 000f 	and.w	r0, r0, #15
   40f7c:	e789      	b.n	40e92 <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   40f7e:	4a1f      	ldr	r2, [pc, #124]	; (40ffc <isr_rx+0x210>)
   40f80:	491f      	ldr	r1, [pc, #124]	; (41000 <isr_rx+0x214>)
   40f82:	4820      	ldr	r0, [pc, #128]	; (41004 <isr_rx+0x218>)
   40f84:	f240 53da 	movw	r3, #1498	; 0x5da
   40f88:	f008 fb74 	bl	49674 <printk>
   40f8c:	4040      	eors	r0, r0
   40f8e:	f380 8811 	msr	BASEPRI, r0
   40f92:	f04f 0003 	mov.w	r0, #3
   40f96:	df02      	svc	2
   40f98:	e7a1      	b.n	40ede <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   40f9a:	4a18      	ldr	r2, [pc, #96]	; (40ffc <isr_rx+0x210>)
   40f9c:	491a      	ldr	r1, [pc, #104]	; (41008 <isr_rx+0x21c>)
   40f9e:	4819      	ldr	r0, [pc, #100]	; (41004 <isr_rx+0x218>)
   40fa0:	f240 537a 	movw	r3, #1402	; 0x57a
   40fa4:	f008 fb66 	bl	49674 <printk>
   40fa8:	4040      	eors	r0, r0
   40faa:	f380 8811 	msr	BASEPRI, r0
   40fae:	f04f 0003 	mov.w	r0, #3
   40fb2:	df02      	svc	2
   40fb4:	e74f      	b.n	40e56 <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   40fb6:	480f      	ldr	r0, [pc, #60]	; (40ff4 <isr_rx+0x208>)
   40fb8:	4621      	mov	r1, r4
   40fba:	f001 fb19 	bl	425f0 <radio_isr_set>
		radio_switch_complete_and_disable();
   40fbe:	f001 fd15 	bl	429ec <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   40fc2:	7e23      	ldrb	r3, [r4, #24]
   40fc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   40fc8:	69d8      	ldr	r0, [r3, #28]
   40fca:	f001 fbe9 	bl	427a0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   40fce:	f001 fc29 	bl	42824 <radio_is_ready>
   40fd2:	2800      	cmp	r0, #0
   40fd4:	d0ad      	beq.n	40f32 <isr_rx+0x146>
   40fd6:	4a09      	ldr	r2, [pc, #36]	; (40ffc <isr_rx+0x210>)
   40fd8:	4909      	ldr	r1, [pc, #36]	; (41000 <isr_rx+0x214>)
   40fda:	480a      	ldr	r0, [pc, #40]	; (41004 <isr_rx+0x218>)
   40fdc:	f240 5393 	movw	r3, #1427	; 0x593
   40fe0:	f008 fb48 	bl	49674 <printk>
   40fe4:	4040      	eors	r0, r0
   40fe6:	f380 8811 	msr	BASEPRI, r0
   40fea:	f04f 0003 	mov.w	r0, #3
   40fee:	df02      	svc	2
		if (!err) {
   40ff0:	e79f      	b.n	40f32 <isr_rx+0x146>
   40ff2:	bf00      	nop
   40ff4:	00040a9d 	.word	0x00040a9d
   40ff8:	00040585 	.word	0x00040585
   40ffc:	00052ffc 	.word	0x00052ffc
   41000:	00053050 	.word	0x00053050
   41004:	00052460 	.word	0x00052460
   41008:	00053048 	.word	0x00053048

0004100c <common_prepare_cb>:
{
   4100c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   41010:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   41012:	f994 3016 	ldrsb.w	r3, [r4, #22]
   41016:	2b00      	cmp	r3, #0
{
   41018:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   4101a:	f2c0 810e 	blt.w	4123a <common_prepare_cb+0x22e>
   4101e:	6863      	ldr	r3, [r4, #4]
   41020:	4605      	mov	r5, r0
   41022:	460f      	mov	r7, r1
   41024:	2b00      	cmp	r3, #0
   41026:	f040 80fd 	bne.w	41224 <common_prepare_cb+0x218>
	lll->state = 0U;
   4102a:	7da3      	ldrb	r3, [r4, #22]
   4102c:	f36f 0300 	bfc	r3, #0, #1
   41030:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   41032:	f001 fb1f 	bl	42674 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   41036:	2000      	movs	r0, #0
   41038:	f001 fb50 	bl	426dc <radio_tx_power_set>
	radio_phy_set(0, 0);
   4103c:	2100      	movs	r1, #0
   4103e:	4608      	mov	r0, r1
   41040:	f001 fb3c 	bl	426bc <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   41044:	2200      	movs	r2, #0
   41046:	2125      	movs	r1, #37	; 0x25
   41048:	2008      	movs	r0, #8
   4104a:	f001 fb7d 	bl	42748 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   4104e:	2001      	movs	r0, #1
   41050:	f7f6 fc10 	bl	37874 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41054:	4606      	mov	r6, r0
   41056:	2800      	cmp	r0, #0
   41058:	f000 80d6 	beq.w	41208 <common_prepare_cb+0x1fc>
	radio_pkt_rx_set(node_rx->pdu);
   4105c:	f106 001c 	add.w	r0, r6, #28
   41060:	f001 fb98 	bl	42794 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   41064:	4b7a      	ldr	r3, [pc, #488]	; (41250 <common_prepare_cb+0x244>)
   41066:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   41068:	a80b      	add	r0, sp, #44	; 0x2c
   4106a:	f001 fb55 	bl	42718 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   4106e:	4979      	ldr	r1, [pc, #484]	; (41254 <common_prepare_cb+0x248>)
   41070:	f240 605b 	movw	r0, #1627	; 0x65b
   41074:	f001 fbf4 	bl	42860 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   41078:	7da0      	ldrb	r0, [r4, #22]
   4107a:	f3c0 0041 	ubfx	r0, r0, #1, #2
   4107e:	3025      	adds	r0, #37	; 0x25
   41080:	f7ff f842 	bl	40108 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   41084:	4874      	ldr	r0, [pc, #464]	; (41258 <common_prepare_cb+0x24c>)
   41086:	4621      	mov	r1, r4
   41088:	f001 fab2 	bl	425f0 <radio_isr_set>
	} else if (lll->type ||
   4108c:	7da3      	ldrb	r3, [r4, #22]
   4108e:	069b      	lsls	r3, r3, #26
   41090:	d403      	bmi.n	4109a <common_prepare_cb+0x8e>
		   lll->conn) {
   41092:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   41094:	2b00      	cmp	r3, #0
   41096:	f000 8091 	beq.w	411bc <common_prepare_cb+0x1b0>
		radio_tmr_tifs_set(EVENT_IFS_US);
   4109a:	2096      	movs	r0, #150	; 0x96
   4109c:	f001 fd2a 	bl	42af4 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   410a0:	2300      	movs	r3, #0
   410a2:	461a      	mov	r2, r3
   410a4:	4619      	mov	r1, r3
   410a6:	4618      	mov	r0, r3
   410a8:	f001 fc40 	bl	4292c <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   410ac:	f7fe fca8 	bl	3fa00 <ull_filter_lll_rl_enabled>
   410b0:	2800      	cmp	r0, #0
   410b2:	d135      	bne.n	41120 <common_prepare_cb+0x114>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   410b4:	7da3      	ldrb	r3, [r4, #22]
   410b6:	f013 0f18 	tst.w	r3, #24
   410ba:	d152      	bne.n	41162 <common_prepare_cb+0x156>
	ull = HDR_LLL2ULL(lll);
   410bc:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   410c0:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   410c2:	4640      	mov	r0, r8
   410c4:	f7ff f806 	bl	400d4 <lll_event_offset_get>
   410c8:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   410ca:	686a      	ldr	r2, [r5, #4]
   410cc:	f106 0109 	add.w	r1, r6, #9
   410d0:	2000      	movs	r0, #0
   410d2:	f001 fd1b 	bl	42b0c <radio_tmr_start>
	radio_tmr_end_capture();
   410d6:	f001 fe19 	bl	42d0c <radio_tmr_end_capture>
	radio_rssi_measure();
   410da:	f001 fc97 	bl	42a0c <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   410de:	4620      	mov	r0, r4
   410e0:	f7f7 fd86 	bl	38bf0 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   410e4:	1d01      	adds	r1, r0, #4
   410e6:	b2c9      	uxtb	r1, r1
   410e8:	4640      	mov	r0, r8
   410ea:	4632      	mov	r2, r6
   410ec:	f7fe fffc 	bl	400e8 <lll_preempt_calc>
   410f0:	bb68      	cbnz	r0, 4114e <common_prepare_cb+0x142>
		if (!is_resume && lll->ticks_window) {
   410f2:	b917      	cbnz	r7, 410fa <common_prepare_cb+0xee>
   410f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   410f6:	2b00      	cmp	r3, #0
   410f8:	d163      	bne.n	411c2 <common_prepare_cb+0x1b6>
		if (lll->conn) {
   410fa:	6863      	ldr	r3, [r4, #4]
   410fc:	b143      	cbz	r3, 41110 <common_prepare_cb+0x104>
			mfy_after_mstr_offset_get.param = p;
   410fe:	4b57      	ldr	r3, [pc, #348]	; (4125c <common_prepare_cb+0x250>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   41100:	2201      	movs	r2, #1
   41102:	2102      	movs	r1, #2
   41104:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   41106:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   41108:	f7f2 fcc2 	bl	33a90 <mayfly_enqueue>
			LL_ASSERT(!retval);
   4110c:	2800      	cmp	r0, #0
   4110e:	d142      	bne.n	41196 <common_prepare_cb+0x18a>
		ret = lll_prepare_done(lll);
   41110:	4620      	mov	r0, r4
   41112:	f7fe ff79 	bl	40008 <lll_prepare_done>
		LL_ASSERT(!ret);
   41116:	bb68      	cbnz	r0, 41174 <common_prepare_cb+0x168>
}
   41118:	2000      	movs	r0, #0
   4111a:	b00c      	add	sp, #48	; 0x30
   4111c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_filter_lll_get((lll->filter_policy &
   41120:	7da0      	ldrb	r0, [r4, #22]
   41122:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   41126:	f7fd ffe3 	bl	3f0f0 <ull_filter_lll_get>
   4112a:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   4112c:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   41130:	f7fe fae0 	bl	3f6f4 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   41134:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41136:	4680      	mov	r8, r0
		radio_filter_configure(filter->enable_bitmask,
   41138:	1cb2      	adds	r2, r6, #2
   4113a:	7830      	ldrb	r0, [r6, #0]
   4113c:	f001 fc88 	bl	42a50 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   41140:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   41144:	2200      	movs	r2, #0
   41146:	4641      	mov	r1, r8
   41148:	f001 fe86 	bl	42e58 <radio_ar_configure>
   4114c:	e7b6      	b.n	410bc <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
   4114e:	4844      	ldr	r0, [pc, #272]	; (41260 <common_prepare_cb+0x254>)
   41150:	4621      	mov	r1, r4
   41152:	f001 fa4d 	bl	425f0 <radio_isr_set>
		radio_disable();
   41156:	f001 fb45 	bl	427e4 <radio_disable>
}
   4115a:	2000      	movs	r0, #0
   4115c:	b00c      	add	sp, #48	; 0x30
   4115e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   41162:	2001      	movs	r0, #1
   41164:	f7fd ffc4 	bl	3f0f0 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   41168:	7841      	ldrb	r1, [r0, #1]
   4116a:	1c82      	adds	r2, r0, #2
   4116c:	7800      	ldrb	r0, [r0, #0]
   4116e:	f001 fc6f 	bl	42a50 <radio_filter_configure>
   41172:	e7a3      	b.n	410bc <common_prepare_cb+0xb0>
		LL_ASSERT(!ret);
   41174:	4a3b      	ldr	r2, [pc, #236]	; (41264 <common_prepare_cb+0x258>)
   41176:	493c      	ldr	r1, [pc, #240]	; (41268 <common_prepare_cb+0x25c>)
   41178:	483c      	ldr	r0, [pc, #240]	; (4126c <common_prepare_cb+0x260>)
   4117a:	f44f 7305 	mov.w	r3, #532	; 0x214
   4117e:	f008 fa79 	bl	49674 <printk>
   41182:	4040      	eors	r0, r0
   41184:	f380 8811 	msr	BASEPRI, r0
   41188:	f04f 0003 	mov.w	r0, #3
   4118c:	df02      	svc	2
}
   4118e:	2000      	movs	r0, #0
   41190:	b00c      	add	sp, #48	; 0x30
   41192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   41196:	4a33      	ldr	r2, [pc, #204]	; (41264 <common_prepare_cb+0x258>)
   41198:	4935      	ldr	r1, [pc, #212]	; (41270 <common_prepare_cb+0x264>)
   4119a:	4834      	ldr	r0, [pc, #208]	; (4126c <common_prepare_cb+0x260>)
   4119c:	f240 230f 	movw	r3, #527	; 0x20f
   411a0:	f008 fa68 	bl	49674 <printk>
   411a4:	4040      	eors	r0, r0
   411a6:	f380 8811 	msr	BASEPRI, r0
   411aa:	f04f 0003 	mov.w	r0, #3
   411ae:	df02      	svc	2
		ret = lll_prepare_done(lll);
   411b0:	4620      	mov	r0, r4
   411b2:	f7fe ff29 	bl	40008 <lll_prepare_done>
		LL_ASSERT(!ret);
   411b6:	2800      	cmp	r0, #0
   411b8:	d0ae      	beq.n	41118 <common_prepare_cb+0x10c>
   411ba:	e7db      	b.n	41174 <common_prepare_cb+0x168>
		radio_switch_complete_and_disable();
   411bc:	f001 fc16 	bl	429ec <radio_switch_complete_and_disable>
   411c0:	e774      	b.n	410ac <common_prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   411c2:	4a2c      	ldr	r2, [pc, #176]	; (41274 <common_prepare_cb+0x268>)
   411c4:	9207      	str	r2, [sp, #28]
   411c6:	4a2c      	ldr	r2, [pc, #176]	; (41278 <common_prepare_cb+0x26c>)
   411c8:	9205      	str	r2, [sp, #20]
   411ca:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   411ce:	9300      	str	r3, [sp, #0]
   411d0:	9208      	str	r2, [sp, #32]
   411d2:	4633      	mov	r3, r6
   411d4:	e9cd 7703 	strd	r7, r7, [sp, #12]
   411d8:	e9cd 7701 	strd	r7, r7, [sp, #4]
   411dc:	9406      	str	r4, [sp, #24]
   411de:	4639      	mov	r1, r7
   411e0:	2203      	movs	r2, #3
   411e2:	f7f3 fe2f 	bl	34e44 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   411e6:	f030 0302 	bics.w	r3, r0, #2
   411ea:	d086      	beq.n	410fa <common_prepare_cb+0xee>
   411ec:	4a1d      	ldr	r2, [pc, #116]	; (41264 <common_prepare_cb+0x258>)
   411ee:	4923      	ldr	r1, [pc, #140]	; (4127c <common_prepare_cb+0x270>)
   411f0:	481e      	ldr	r0, [pc, #120]	; (4126c <common_prepare_cb+0x260>)
   411f2:	f240 13fb 	movw	r3, #507	; 0x1fb
   411f6:	f008 fa3d 	bl	49674 <printk>
   411fa:	4040      	eors	r0, r0
   411fc:	f380 8811 	msr	BASEPRI, r0
   41200:	f04f 0003 	mov.w	r0, #3
   41204:	df02      	svc	2
   41206:	e778      	b.n	410fa <common_prepare_cb+0xee>
	LL_ASSERT(node_rx);
   41208:	4a16      	ldr	r2, [pc, #88]	; (41264 <common_prepare_cb+0x258>)
   4120a:	491d      	ldr	r1, [pc, #116]	; (41280 <common_prepare_cb+0x274>)
   4120c:	4817      	ldr	r0, [pc, #92]	; (4126c <common_prepare_cb+0x260>)
   4120e:	f240 138d 	movw	r3, #397	; 0x18d
   41212:	f008 fa2f 	bl	49674 <printk>
   41216:	4040      	eors	r0, r0
   41218:	f380 8811 	msr	BASEPRI, r0
   4121c:	f04f 0003 	mov.w	r0, #3
   41220:	df02      	svc	2
   41222:	e71b      	b.n	4105c <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   41224:	6863      	ldr	r3, [r4, #4]
   41226:	f893 3020 	ldrb.w	r3, [r3, #32]
   4122a:	07d9      	lsls	r1, r3, #31
   4122c:	d405      	bmi.n	4123a <common_prepare_cb+0x22e>
   4122e:	6863      	ldr	r3, [r4, #4]
   41230:	f893 3020 	ldrb.w	r3, [r3, #32]
   41234:	079a      	lsls	r2, r3, #30
   41236:	f57f aef8 	bpl.w	4102a <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   4123a:	4812      	ldr	r0, [pc, #72]	; (41284 <common_prepare_cb+0x278>)
   4123c:	4621      	mov	r1, r4
   4123e:	f001 f9d7 	bl	425f0 <radio_isr_set>
		radio_disable();
   41242:	f001 facf 	bl	427e4 <radio_disable>
}
   41246:	2000      	movs	r0, #0
   41248:	b00c      	add	sp, #48	; 0x30
   4124a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4124e:	bf00      	nop
   41250:	8e89bed6 	.word	0x8e89bed6
   41254:	00555555 	.word	0x00555555
   41258:	00028489 	.word	0x00028489
   4125c:	20000b38 	.word	0x20000b38
   41260:	00041331 	.word	0x00041331
   41264:	00053094 	.word	0x00053094
   41268:	0005273c 	.word	0x0005273c
   4126c:	00052460 	.word	0x00052460
   41270:	00052764 	.word	0x00052764
   41274:	00041455 	.word	0x00041455
   41278:	000414fd 	.word	0x000414fd
   4127c:	00052810 	.word	0x00052810
   41280:	00053048 	.word	0x00053048
   41284:	00040265 	.word	0x00040265

00041288 <prepare_cb>:
	return common_prepare_cb(p, false);
   41288:	2100      	movs	r1, #0
   4128a:	f7ff bebf 	b.w	4100c <common_prepare_cb>
   4128e:	bf00      	nop

00041290 <isr_common_done>:
{
   41290:	b530      	push	{r4, r5, lr}
   41292:	4604      	mov	r4, r0
   41294:	b083      	sub	sp, #12
	lll_isr_status_reset();
   41296:	f7fe ff8f 	bl	401b8 <lll_isr_status_reset>
	lll->state = 0U;
   4129a:	7da3      	ldrb	r3, [r4, #22]
   4129c:	f36f 0300 	bfc	r3, #0, #1
   412a0:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   412a2:	069b      	lsls	r3, r3, #26
   412a4:	d401      	bmi.n	412aa <isr_common_done+0x1a>
		   lll->conn) {
   412a6:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   412a8:	b3b3      	cbz	r3, 41318 <isr_common_done+0x88>
		radio_tmr_tifs_set(EVENT_IFS_US);
   412aa:	2096      	movs	r0, #150	; 0x96
   412ac:	f001 fc22 	bl	42af4 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   412b0:	2300      	movs	r3, #0
   412b2:	461a      	mov	r2, r3
   412b4:	4619      	mov	r1, r3
   412b6:	4618      	mov	r0, r3
   412b8:	f001 fb38 	bl	4292c <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   412bc:	2001      	movs	r0, #1
   412be:	f7f6 fad9 	bl	37874 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   412c2:	4605      	mov	r5, r0
   412c4:	b1d0      	cbz	r0, 412fc <isr_common_done+0x6c>
	radio_pkt_rx_set(node_rx->pdu);
   412c6:	f105 001c 	add.w	r0, r5, #28
   412ca:	f001 fa63 	bl	42794 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   412ce:	f7fe fb97 	bl	3fa00 <ull_filter_lll_rl_enabled>
   412d2:	b940      	cbnz	r0, 412e6 <isr_common_done+0x56>
	radio_rssi_measure();
   412d4:	f001 fb9a 	bl	42a0c <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   412d8:	4811      	ldr	r0, [pc, #68]	; (41320 <isr_common_done+0x90>)
   412da:	4621      	mov	r1, r4
}
   412dc:	b003      	add	sp, #12
   412de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   412e2:	f001 b985 	b.w	425f0 <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   412e6:	f10d 0007 	add.w	r0, sp, #7
   412ea:	f7fe fa03 	bl	3f6f4 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   412ee:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   412f0:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   412f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   412f6:	f001 fdaf 	bl	42e58 <radio_ar_configure>
   412fa:	e7eb      	b.n	412d4 <isr_common_done+0x44>
	LL_ASSERT(node_rx);
   412fc:	4a09      	ldr	r2, [pc, #36]	; (41324 <isr_common_done+0x94>)
   412fe:	490a      	ldr	r1, [pc, #40]	; (41328 <isr_common_done+0x98>)
   41300:	480a      	ldr	r0, [pc, #40]	; (4132c <isr_common_done+0x9c>)
   41302:	f44f 7352 	mov.w	r3, #840	; 0x348
   41306:	f008 f9b5 	bl	49674 <printk>
   4130a:	4040      	eors	r0, r0
   4130c:	f380 8811 	msr	BASEPRI, r0
   41310:	f04f 0003 	mov.w	r0, #3
   41314:	df02      	svc	2
   41316:	e7d6      	b.n	412c6 <isr_common_done+0x36>
		radio_switch_complete_and_disable();
   41318:	f001 fb68 	bl	429ec <radio_switch_complete_and_disable>
   4131c:	e7ce      	b.n	412bc <isr_common_done+0x2c>
   4131e:	bf00      	nop
   41320:	00028489 	.word	0x00028489
   41324:	00053094 	.word	0x00053094
   41328:	00053048 	.word	0x00053048
   4132c:	00052460 	.word	0x00052460

00041330 <isr_abort>:
{
   41330:	b510      	push	{r4, lr}
   41332:	4604      	mov	r4, r0
	lll_isr_status_reset();
   41334:	f7fe ff40 	bl	401b8 <lll_isr_status_reset>
	radio_filter_disable();
   41338:	f001 fbaa 	bl	42a90 <radio_filter_disable>
	lll_isr_cleanup(param);
   4133c:	4620      	mov	r0, r4
}
   4133e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   41342:	f7fe bf47 	b.w	401d4 <lll_isr_cleanup>
   41346:	bf00      	nop

00041348 <isr_done>:
{
   41348:	b508      	push	{r3, lr}
	isr_common_done(param);
   4134a:	f7ff ffa1 	bl	41290 <isr_common_done>
	radio_rx_enable();
   4134e:	f001 fa3d 	bl	427cc <radio_rx_enable>
}
   41352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   41356:	f001 bcd9 	b.w	42d0c <radio_tmr_end_capture>
   4135a:	bf00      	nop

0004135c <isr_tx>:
{
   4135c:	b570      	push	{r4, r5, r6, lr}
   4135e:	b082      	sub	sp, #8
   41360:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   41362:	f7fe ff17 	bl	40194 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   41366:	f001 fb41 	bl	429ec <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   4136a:	2001      	movs	r0, #1
   4136c:	f7f6 fa82 	bl	37874 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41370:	4604      	mov	r4, r0
   41372:	2800      	cmp	r0, #0
   41374:	d03f      	beq.n	413f6 <isr_tx+0x9a>
	radio_pkt_rx_set(node_rx->pdu);
   41376:	f104 001c 	add.w	r0, r4, #28
   4137a:	f001 fa0b 	bl	42794 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   4137e:	f001 fa51 	bl	42824 <radio_is_ready>
   41382:	b9e0      	cbnz	r0, 413be <isr_tx+0x62>
	if (ull_filter_lll_rl_enabled()) {
   41384:	f7fe fb3c 	bl	3fa00 <ull_filter_lll_rl_enabled>
   41388:	bb50      	cbnz	r0, 413e0 <isr_tx+0x84>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   4138a:	f001 fccd 	bl	42d28 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   4138e:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   41390:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   41392:	4608      	mov	r0, r1
   41394:	f001 fa14 	bl	427c0 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   41398:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   4139a:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   4139c:	4608      	mov	r0, r1
   4139e:	f001 fa0b 	bl	427b8 <radio_tx_chain_delay_get>
   413a2:	4434      	add	r4, r6
   413a4:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   413a6:	1a20      	subs	r0, r4, r0
   413a8:	f001 fc76 	bl	42c98 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   413ac:	f001 fb2e 	bl	42a0c <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   413b0:	4818      	ldr	r0, [pc, #96]	; (41414 <isr_tx+0xb8>)
   413b2:	4629      	mov	r1, r5
}
   413b4:	b002      	add	sp, #8
   413b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   413ba:	f001 b919 	b.w	425f0 <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   413be:	4a16      	ldr	r2, [pc, #88]	; (41418 <isr_tx+0xbc>)
   413c0:	4916      	ldr	r1, [pc, #88]	; (4141c <isr_tx+0xc0>)
   413c2:	4817      	ldr	r0, [pc, #92]	; (41420 <isr_tx+0xc4>)
   413c4:	f240 3306 	movw	r3, #774	; 0x306
   413c8:	f008 f954 	bl	49674 <printk>
   413cc:	4040      	eors	r0, r0
   413ce:	f380 8811 	msr	BASEPRI, r0
   413d2:	f04f 0003 	mov.w	r0, #3
   413d6:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   413d8:	f7fe fb12 	bl	3fa00 <ull_filter_lll_rl_enabled>
   413dc:	2800      	cmp	r0, #0
   413de:	d0d4      	beq.n	4138a <isr_tx+0x2e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   413e0:	f10d 0007 	add.w	r0, sp, #7
   413e4:	f7fe f986 	bl	3f6f4 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   413e8:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   413ea:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   413ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
   413f0:	f001 fd32 	bl	42e58 <radio_ar_configure>
   413f4:	e7c9      	b.n	4138a <isr_tx+0x2e>
	LL_ASSERT(node_rx);
   413f6:	4a08      	ldr	r2, [pc, #32]	; (41418 <isr_tx+0xbc>)
   413f8:	490a      	ldr	r1, [pc, #40]	; (41424 <isr_tx+0xc8>)
   413fa:	4809      	ldr	r0, [pc, #36]	; (41420 <isr_tx+0xc4>)
   413fc:	f240 3302 	movw	r3, #770	; 0x302
   41400:	f008 f938 	bl	49674 <printk>
   41404:	4040      	eors	r0, r0
   41406:	f380 8811 	msr	BASEPRI, r0
   4140a:	f04f 0003 	mov.w	r0, #3
   4140e:	df02      	svc	2
   41410:	e7b1      	b.n	41376 <isr_tx+0x1a>
   41412:	bf00      	nop
   41414:	00028489 	.word	0x00028489
   41418:	00053094 	.word	0x00053094
   4141c:	00053050 	.word	0x00053050
   41420:	00052460 	.word	0x00052460
   41424:	00053048 	.word	0x00053048

00041428 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   41428:	68c3      	ldr	r3, [r0, #12]
{
   4142a:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   4142c:	681e      	ldr	r6, [r3, #0]
{
   4142e:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   41430:	f7f3 fe34 	bl	3509c <ticker_ticks_now_get>
   41434:	4605      	mov	r5, r0
   41436:	4630      	mov	r0, r6
   41438:	f7fe fe4c 	bl	400d4 <lll_event_offset_get>
	p->remainder = 0;
   4143c:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   4143e:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   41440:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   41444:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   41446:	4620      	mov	r0, r4
   41448:	2101      	movs	r1, #1
}
   4144a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   4144e:	f7ff bddd 	b.w	4100c <common_prepare_cb>
   41452:	bf00      	nop

00041454 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   41454:	b900      	cbnz	r0, 41458 <ticker_op_start_cb+0x4>
   41456:	4770      	bx	lr
{
   41458:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   4145a:	4a07      	ldr	r2, [pc, #28]	; (41478 <ticker_op_start_cb+0x24>)
   4145c:	4907      	ldr	r1, [pc, #28]	; (4147c <ticker_op_start_cb+0x28>)
   4145e:	4808      	ldr	r0, [pc, #32]	; (41480 <ticker_op_start_cb+0x2c>)
   41460:	f44f 7324 	mov.w	r3, #656	; 0x290
   41464:	f008 f906 	bl	49674 <printk>
   41468:	4040      	eors	r0, r0
   4146a:	f380 8811 	msr	BASEPRI, r0
   4146e:	f04f 0003 	mov.w	r0, #3
   41472:	df02      	svc	2
}
   41474:	bd08      	pop	{r3, pc}
   41476:	bf00      	nop
   41478:	00053094 	.word	0x00053094
   4147c:	000529d0 	.word	0x000529d0
   41480:	00052460 	.word	0x00052460

00041484 <is_abort_cb>:
	if (next != curr) {
   41484:	4281      	cmp	r1, r0
{
   41486:	b508      	push	{r3, lr}
	if (next != curr) {
   41488:	d00d      	beq.n	414a6 <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   4148a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   4148c:	b113      	cbz	r3, 41494 <is_abort_cb+0x10>
			return -ECANCELED;
   4148e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   41492:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   41494:	4b14      	ldr	r3, [pc, #80]	; (414e8 <is_abort_cb+0x64>)
   41496:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   41498:	f7ff f834 	bl	40504 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   4149c:	2800      	cmp	r0, #0
   4149e:	db12      	blt.n	414c6 <is_abort_cb+0x42>
   414a0:	f06f 000a 	mvn.w	r0, #10
}
   414a4:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   414a6:	684b      	ldr	r3, [r1, #4]
   414a8:	b123      	cbz	r3, 414b4 <is_abort_cb+0x30>
   414aa:	684b      	ldr	r3, [r1, #4]
   414ac:	f893 3020 	ldrb.w	r3, [r3, #32]
   414b0:	07db      	lsls	r3, r3, #31
   414b2:	d406      	bmi.n	414c2 <is_abort_cb+0x3e>
		radio_isr_set(isr_window, lll);
   414b4:	480d      	ldr	r0, [pc, #52]	; (414ec <is_abort_cb+0x68>)
   414b6:	f001 f89b 	bl	425f0 <radio_isr_set>
	radio_disable();
   414ba:	f001 f993 	bl	427e4 <radio_disable>
	return 0;
   414be:	2000      	movs	r0, #0
}
   414c0:	bd08      	pop	{r3, pc}
		return 0;
   414c2:	2000      	movs	r0, #0
}
   414c4:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   414c6:	4a0a      	ldr	r2, [pc, #40]	; (414f0 <is_abort_cb+0x6c>)
   414c8:	490a      	ldr	r1, [pc, #40]	; (414f4 <is_abort_cb+0x70>)
   414ca:	480b      	ldr	r0, [pc, #44]	; (414f8 <is_abort_cb+0x74>)
   414cc:	f240 2332 	movw	r3, #562	; 0x232
   414d0:	f008 f8d0 	bl	49674 <printk>
   414d4:	4040      	eors	r0, r0
   414d6:	f380 8811 	msr	BASEPRI, r0
   414da:	f04f 0003 	mov.w	r0, #3
   414de:	df02      	svc	2
   414e0:	f06f 000a 	mvn.w	r0, #10
}
   414e4:	bd08      	pop	{r3, pc}
   414e6:	bf00      	nop
   414e8:	00041429 	.word	0x00041429
   414ec:	000283e9 	.word	0x000283e9
   414f0:	00053094 	.word	0x00053094
   414f4:	00052fac 	.word	0x00052fac
   414f8:	00052460 	.word	0x00052460

000414fc <ticker_stop_cb>:
{
   414fc:	b508      	push	{r3, lr}
	mfy.param = param;
   414fe:	4b0c      	ldr	r3, [pc, #48]	; (41530 <ticker_stop_cb+0x34>)
{
   41500:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   41502:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   41504:	2200      	movs	r2, #0
   41506:	4611      	mov	r1, r2
   41508:	2001      	movs	r0, #1
   4150a:	f7f2 fac1 	bl	33a90 <mayfly_enqueue>
	LL_ASSERT(!ret);
   4150e:	b900      	cbnz	r0, 41512 <ticker_stop_cb+0x16>
}
   41510:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   41512:	4a08      	ldr	r2, [pc, #32]	; (41534 <ticker_stop_cb+0x38>)
   41514:	4908      	ldr	r1, [pc, #32]	; (41538 <ticker_stop_cb+0x3c>)
   41516:	4809      	ldr	r0, [pc, #36]	; (4153c <ticker_stop_cb+0x40>)
   41518:	f240 2389 	movw	r3, #649	; 0x289
   4151c:	f008 f8aa 	bl	49674 <printk>
   41520:	4040      	eors	r0, r0
   41522:	f380 8811 	msr	BASEPRI, r0
   41526:	f04f 0003 	mov.w	r0, #3
   4152a:	df02      	svc	2
}
   4152c:	bd08      	pop	{r3, pc}
   4152e:	bf00      	nop
   41530:	20000b28 	.word	0x20000b28
   41534:	00053094 	.word	0x00053094
   41538:	0005273c 	.word	0x0005273c
   4153c:	00052460 	.word	0x00052460

00041540 <isr_done_cleanup>:
{
   41540:	b530      	push	{r4, r5, lr}
   41542:	4604      	mov	r4, r0
   41544:	b085      	sub	sp, #20
	lll_isr_status_reset();
   41546:	f7fe fe37 	bl	401b8 <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   4154a:	f10d 010f 	add.w	r1, sp, #15
   4154e:	4620      	mov	r0, r4
   41550:	f7fe fdae 	bl	400b0 <lll_is_done>
   41554:	b9c0      	cbnz	r0, 41588 <isr_done_cleanup+0x48>
	radio_filter_disable();
   41556:	4605      	mov	r5, r0
   41558:	f001 fa9a 	bl	42a90 <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   4155c:	7da2      	ldrb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   4155e:	9500      	str	r5, [sp, #0]
	if (++lll->chan == ADV_CHAN_MAX) {
   41560:	f3c2 0341 	ubfx	r3, r2, #1, #2
   41564:	3301      	adds	r3, #1
   41566:	f003 0303 	and.w	r3, r3, #3
		lll->chan = 0U;
   4156a:	2b03      	cmp	r3, #3
   4156c:	bf08      	it	eq
   4156e:	2300      	moveq	r3, #0
   41570:	f363 0242 	bfi	r2, r3, #1, #2
   41574:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   41576:	462b      	mov	r3, r5
   41578:	2203      	movs	r2, #3
   4157a:	4629      	mov	r1, r5
   4157c:	4628      	mov	r0, r5
   4157e:	f7f3 fced 	bl	34f5c <ticker_stop>
	lll_isr_cleanup(param);
   41582:	4620      	mov	r0, r4
   41584:	f7fe fe26 	bl	401d4 <lll_isr_cleanup>
}
   41588:	b005      	add	sp, #20
   4158a:	bd30      	pop	{r4, r5, pc}

0004158c <isr_scan_tgta_check>:
{
   4158c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   41590:	f89d 9020 	ldrb.w	r9, [sp, #32]
   41594:	4616      	mov	r6, r2
   41596:	4680      	mov	r8, r0
   41598:	460d      	mov	r5, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   4159a:	464a      	mov	r2, r9
   4159c:	4619      	mov	r1, r3
   4159e:	4630      	mov	r0, r6
{
   415a0:	461f      	mov	r7, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   415a2:	f7fe fa0b 	bl	3f9bc <ull_filter_lll_rl_addr_resolve>
   415a6:	4604      	mov	r4, r0
   415a8:	b9a0      	cbnz	r0, 415d4 <isr_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   415aa:	b11d      	cbz	r5, 415b4 <isr_scan_tgta_check+0x28>
   415ac:	f898 3017 	ldrb.w	r3, [r8, #23]
   415b0:	079a      	lsls	r2, r3, #30
   415b2:	d41c      	bmi.n	415ee <isr_scan_tgta_check+0x62>
	return (((lll->init_addr_type == addr_type) &&
   415b4:	f898 5016 	ldrb.w	r5, [r8, #22]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   415b8:	f3c5 1380 	ubfx	r3, r5, #6, #1
   415bc:	42b3      	cmp	r3, r6
   415be:	d00c      	beq.n	415da <isr_scan_tgta_check+0x4e>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   415c0:	f3c5 05c1 	ubfx	r5, r5, #3, #2
   415c4:	07ab      	lsls	r3, r5, #30
   415c6:	d505      	bpl.n	415d4 <isr_scan_tgta_check+0x48>
   415c8:	b126      	cbz	r6, 415d4 <isr_scan_tgta_check+0x48>
   415ca:	797b      	ldrb	r3, [r7, #5]
   415cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   415d0:	2b40      	cmp	r3, #64	; 0x40
   415d2:	d014      	beq.n	415fe <isr_scan_tgta_check+0x72>
}
   415d4:	4620      	mov	r0, r4
   415d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   415da:	2206      	movs	r2, #6
   415dc:	4639      	mov	r1, r7
   415de:	f108 0019 	add.w	r0, r8, #25
   415e2:	f00a f942 	bl	4b86a <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   415e6:	b140      	cbz	r0, 415fa <isr_scan_tgta_check+0x6e>
   415e8:	f898 5016 	ldrb.w	r5, [r8, #22]
   415ec:	e7e8      	b.n	415c0 <isr_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   415ee:	4648      	mov	r0, r9
   415f0:	f7fe f866 	bl	3f6c0 <ull_filter_lll_lrpa_get>
   415f4:	2800      	cmp	r0, #0
   415f6:	d1ed      	bne.n	415d4 <isr_scan_tgta_check+0x48>
   415f8:	e7dc      	b.n	415b4 <isr_scan_tgta_check+0x28>
{
   415fa:	2401      	movs	r4, #1
   415fc:	e7ea      	b.n	415d4 <isr_scan_tgta_check+0x48>
		if (dir_report) {
   415fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   41600:	2b00      	cmp	r3, #0
   41602:	d0fa      	beq.n	415fa <isr_scan_tgta_check+0x6e>
			*dir_report = true;
   41604:	2401      	movs	r4, #1
   41606:	701c      	strb	r4, [r3, #0]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   41608:	e7e4      	b.n	415d4 <isr_scan_tgta_check+0x48>
   4160a:	bf00      	nop

0004160c <abort_cb>:
{
   4160c:	b510      	push	{r4, lr}
	if (!prepare_param) {
   4160e:	b1d8      	cbz	r0, 41648 <abort_cb+0x3c>
	err = lll_hfclock_off();
   41610:	460c      	mov	r4, r1
   41612:	f7fe ff8f 	bl	40534 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   41616:	2800      	cmp	r0, #0
   41618:	db04      	blt.n	41624 <abort_cb+0x18>
	lll_done(param);
   4161a:	4620      	mov	r0, r4
}
   4161c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   41620:	f7fe bcf4 	b.w	4000c <lll_done>
	LL_ASSERT(err >= 0);
   41624:	4a0c      	ldr	r2, [pc, #48]	; (41658 <abort_cb+0x4c>)
   41626:	490d      	ldr	r1, [pc, #52]	; (4165c <abort_cb+0x50>)
   41628:	480d      	ldr	r0, [pc, #52]	; (41660 <abort_cb+0x54>)
   4162a:	f240 2379 	movw	r3, #633	; 0x279
   4162e:	f008 f821 	bl	49674 <printk>
   41632:	4040      	eors	r0, r0
   41634:	f380 8811 	msr	BASEPRI, r0
   41638:	f04f 0003 	mov.w	r0, #3
   4163c:	df02      	svc	2
	lll_done(param);
   4163e:	4620      	mov	r0, r4
}
   41640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   41644:	f7fe bce2 	b.w	4000c <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   41648:	4806      	ldr	r0, [pc, #24]	; (41664 <abort_cb+0x58>)
   4164a:	f000 ffd1 	bl	425f0 <radio_isr_set>
}
   4164e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   41652:	f001 b8c7 	b.w	427e4 <radio_disable>
   41656:	bf00      	nop
   41658:	00053094 	.word	0x00053094
   4165c:	00052fac 	.word	0x00052fac
   41660:	00052460 	.word	0x00052460
   41664:	00041541 	.word	0x00041541

00041668 <lll_scan_init>:
}
   41668:	2000      	movs	r0, #0
   4166a:	4770      	bx	lr

0004166c <lll_scan_reset>:
   4166c:	2000      	movs	r0, #0
   4166e:	4770      	bx	lr

00041670 <lll_scan_prepare>:
{
   41670:	b510      	push	{r4, lr}
   41672:	b082      	sub	sp, #8
   41674:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   41676:	f7fe ff45 	bl	40504 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   4167a:	2800      	cmp	r0, #0
   4167c:	db19      	blt.n	416b2 <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   4167e:	4a13      	ldr	r2, [pc, #76]	; (416cc <lll_scan_prepare+0x5c>)
   41680:	4913      	ldr	r1, [pc, #76]	; (416d0 <lll_scan_prepare+0x60>)
   41682:	4814      	ldr	r0, [pc, #80]	; (416d4 <lll_scan_prepare+0x64>)
   41684:	9400      	str	r4, [sp, #0]
   41686:	2300      	movs	r3, #0
   41688:	f7f6 fc28 	bl	37edc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   4168c:	b108      	cbz	r0, 41692 <lll_scan_prepare+0x22>
   4168e:	3077      	adds	r0, #119	; 0x77
   41690:	d101      	bne.n	41696 <lll_scan_prepare+0x26>
}
   41692:	b002      	add	sp, #8
   41694:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   41696:	4a10      	ldr	r2, [pc, #64]	; (416d8 <lll_scan_prepare+0x68>)
   41698:	4910      	ldr	r1, [pc, #64]	; (416dc <lll_scan_prepare+0x6c>)
   4169a:	4811      	ldr	r0, [pc, #68]	; (416e0 <lll_scan_prepare+0x70>)
   4169c:	238b      	movs	r3, #139	; 0x8b
   4169e:	f007 ffe9 	bl	49674 <printk>
   416a2:	4040      	eors	r0, r0
   416a4:	f380 8811 	msr	BASEPRI, r0
   416a8:	f04f 0003 	mov.w	r0, #3
   416ac:	df02      	svc	2
}
   416ae:	b002      	add	sp, #8
   416b0:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   416b2:	4a09      	ldr	r2, [pc, #36]	; (416d8 <lll_scan_prepare+0x68>)
   416b4:	490b      	ldr	r1, [pc, #44]	; (416e4 <lll_scan_prepare+0x74>)
   416b6:	480a      	ldr	r0, [pc, #40]	; (416e0 <lll_scan_prepare+0x70>)
   416b8:	2388      	movs	r3, #136	; 0x88
   416ba:	f007 ffdb 	bl	49674 <printk>
   416be:	4040      	eors	r0, r0
   416c0:	f380 8811 	msr	BASEPRI, r0
   416c4:	f04f 0003 	mov.w	r0, #3
   416c8:	df02      	svc	2
   416ca:	e7d8      	b.n	4167e <lll_scan_prepare+0xe>
   416cc:	00041289 	.word	0x00041289
   416d0:	0004160d 	.word	0x0004160d
   416d4:	00041485 	.word	0x00041485
   416d8:	00053094 	.word	0x00053094
   416dc:	00053080 	.word	0x00053080
   416e0:	00052460 	.word	0x00052460
   416e4:	00052fac 	.word	0x00052fac

000416e8 <lll_scan_isr_rx_check>:
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   416e8:	f890 c016 	ldrb.w	ip, [r0, #22]
							       rl_idx))) ||
   416ec:	f01c 0f08 	tst.w	ip, #8
   416f0:	d002      	beq.n	416f8 <lll_scan_isr_rx_check+0x10>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   416f2:	b162      	cbz	r2, 4170e <lll_scan_isr_rx_check+0x26>
{
   416f4:	2001      	movs	r0, #1
}
   416f6:	4770      	bx	lr
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   416f8:	2a00      	cmp	r2, #0
   416fa:	d0fb      	beq.n	416f4 <lll_scan_isr_rx_check+0xc>
{
   416fc:	b510      	push	{r4, lr}
   416fe:	4604      	mov	r4, r0
   41700:	4608      	mov	r0, r1
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   41702:	4619      	mov	r1, r3
   41704:	f7fe f8ec 	bl	3f8e0 <ull_filter_lll_rl_idx_allowed>
   41708:	b120      	cbz	r0, 41714 <lll_scan_isr_rx_check+0x2c>
{
   4170a:	2001      	movs	r0, #1
}
   4170c:	bd10      	pop	{r4, pc}
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   4170e:	4618      	mov	r0, r3
   41710:	f7fe b8b6 	b.w	3f880 <ull_filter_lll_irk_in_fal>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   41714:	7da3      	ldrb	r3, [r4, #22]
							       rl_idx))) ||
   41716:	071b      	lsls	r3, r3, #28
   41718:	d4f7      	bmi.n	4170a <lll_scan_isr_rx_check+0x22>
}
   4171a:	bd10      	pop	{r4, pc}

0004171c <lll_scan_prepare_connect_req>:
{
   4171c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41720:	f89d 501c 	ldrb.w	r5, [sp, #28]
	lll_conn = lll->conn;
   41724:	6846      	ldr	r6, [r0, #4]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   41726:	01ad      	lsls	r5, r5, #6
   41728:	f005 0540 	and.w	r5, r5, #64	; 0x40
   4172c:	f045 0525 	orr.w	r5, r5, #37	; 0x25
   41730:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
   41734:	780b      	ldrb	r3, [r1, #0]
   41736:	f003 0310 	and.w	r3, r3, #16
{
   4173a:	460c      	mov	r4, r1
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   4173c:	431d      	orrs	r5, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   4173e:	2322      	movs	r3, #34	; 0x22
   41740:	704b      	strb	r3, [r1, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   41742:	700d      	strb	r5, [r1, #0]
{
   41744:	4690      	mov	r8, r2
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   41746:	9908      	ldr	r1, [sp, #32]
   41748:	2206      	movs	r2, #6
{
   4174a:	4607      	mov	r7, r0
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   4174c:	1ca0      	adds	r0, r4, #2
   4174e:	f00a f89c 	bl	4b88a <memcpy>
	memcpy(&pdu_tx->connect_ind.adv_addr[0], adv_addr, BDADDR_SIZE);
   41752:	9906      	ldr	r1, [sp, #24]
   41754:	2206      	movs	r2, #6
   41756:	f104 0008 	add.w	r0, r4, #8
   4175a:	f00a f896 	bl	4b88a <memcpy>
	memcpy(&pdu_tx->connect_ind.access_addr[0],
   4175e:	2204      	movs	r2, #4
   41760:	18b1      	adds	r1, r6, r2
   41762:	f104 000e 	add.w	r0, r4, #14
   41766:	f00a f890 	bl	4b88a <memcpy>
	memcpy(&pdu_tx->connect_ind.crc_init[0], &lll_conn->crc_init[0], 3);
   4176a:	2203      	movs	r2, #3
   4176c:	f106 0108 	add.w	r1, r6, #8
   41770:	f104 0012 	add.w	r0, r4, #18
   41774:	f00a f889 	bl	4b88a <memcpy>
	pdu_tx->connect_ind.win_size = 1;
   41778:	2301      	movs	r3, #1
   4177a:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   4177c:	89f5      	ldrh	r5, [r6, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   4177e:	f001 facd 	bl	42d1c <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   41782:	f1b8 0f00 	cmp.w	r8, #0
   41786:	d044      	beq.n	41812 <lll_scan_prepare_connect_req+0xf6>
   41788:	f008 0303 	and.w	r3, r8, #3
   4178c:	332b      	adds	r3, #43	; 0x2b
   4178e:	00db      	lsls	r3, r3, #3
   41790:	f3c8 0840 	ubfx	r8, r8, #1, #1
   41794:	fa23 f308 	lsr.w	r3, r3, r8
		conn_offset_us += WIN_DELAY_LEGACY;
   41798:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   4179c:	441a      	add	r2, r3
	    lll->conn_win_offset_us == 0U) {
   4179e:	693b      	ldr	r3, [r7, #16]
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   417a0:	b393      	cbz	r3, 41808 <lll_scan_prepare_connect_req+0xec>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   417a2:	f240 41e2 	movw	r1, #1250	; 0x4e2
   417a6:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   417aa:	2b00      	cmp	r3, #0
   417ac:	db01      	blt.n	417b2 <lll_scan_prepare_connect_req+0x96>
   417ae:	4293      	cmp	r3, r2
   417b0:	d201      	bcs.n	417b6 <lll_scan_prepare_connect_req+0x9a>
			win_offset_us += conn_interval_us;
   417b2:	442b      	add	r3, r5
   417b4:	e7f9      	b.n	417aa <lll_scan_prepare_connect_req+0x8e>
		*conn_space_us = win_offset_us;
   417b6:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   417b8:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   417ba:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   417bc:	4b16      	ldr	r3, [pc, #88]	; (41818 <lll_scan_prepare_connect_req+0xfc>)
   417be:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   417c2:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   417c4:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   417c6:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   417c8:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   417ca:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   417cc:	89f1      	ldrh	r1, [r6, #14]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   417ce:	8a32      	ldrh	r2, [r6, #16]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   417d0:	8abb      	ldrh	r3, [r7, #20]
   417d2:	83a3      	strh	r3, [r4, #28]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   417d4:	8321      	strh	r1, [r4, #24]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   417d6:	8362      	strh	r2, [r4, #26]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   417d8:	f106 0118 	add.w	r1, r6, #24
   417dc:	2205      	movs	r2, #5
   417de:	f104 001e 	add.w	r0, r4, #30
   417e2:	f00a f852 	bl	4b88a <memcpy>
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   417e6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   417ea:	7fb2      	ldrb	r2, [r6, #30]
   417ec:	f362 0304 	bfi	r3, r2, #0, #5
   417f0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   417f4:	f7fe febc 	bl	40570 <lll_clock_sca_local_get>
   417f8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   417fc:	f360 1347 	bfi	r3, r0, #5, #3
   41800:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   41804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   41808:	9909      	ldr	r1, [sp, #36]	; 0x24
   4180a:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   4180c:	75a3      	strb	r3, [r4, #22]
   4180e:	75e3      	strb	r3, [r4, #23]
   41810:	e7dc      	b.n	417cc <lll_scan_prepare_connect_req+0xb0>
   41812:	f44f 73b0 	mov.w	r3, #352	; 0x160
   41816:	e7bf      	b.n	41798 <lll_scan_prepare_connect_req+0x7c>
   41818:	d1b71759 	.word	0xd1b71759

0004181c <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   4181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4181e:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   41820:	f7fe fcca 	bl	401b8 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   41824:	f7f6 f924 	bl	37a70 <ull_event_done_extra_get>
	LL_ASSERT(e);
   41828:	4604      	mov	r4, r0
   4182a:	2800      	cmp	r0, #0
   4182c:	d036      	beq.n	4189c <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   4182e:	4922      	ldr	r1, [pc, #136]	; (418b8 <isr_done+0x9c>)
   41830:	79a2      	ldrb	r2, [r4, #6]
   41832:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   41834:	4b21      	ldr	r3, [pc, #132]	; (418bc <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   41836:	f360 0200 	bfi	r2, r0, #0, #1
   4183a:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   4183c:	4a20      	ldr	r2, [pc, #128]	; (418c0 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   4183e:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   41840:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   41842:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   41844:	2101      	movs	r1, #1
   41846:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   41848:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   4184a:	b11b      	cbz	r3, 41854 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   4184c:	f995 301d 	ldrsb.w	r3, [r5, #29]
   41850:	2b00      	cmp	r3, #0
   41852:	db04      	blt.n	4185e <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   41854:	4628      	mov	r0, r5
}
   41856:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   4185a:	f7fe bcbb 	b.w	401d4 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   4185e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   41862:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   41866:	2b02      	cmp	r3, #2
   41868:	d016      	beq.n	41898 <isr_done+0x7c>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   4186a:	2b04      	cmp	r3, #4
   4186c:	bf14      	ite	ne
   4186e:	2728      	movne	r7, #40	; 0x28
   41870:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   41874:	f001 fa3e 	bl	42cf4 <radio_tmr_aa_restore>
   41878:	4606      	mov	r6, r0
   4187a:	f001 fa41 	bl	42d00 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   4187e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   41880:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   41882:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   41884:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   41888:	2300      	movs	r3, #0
   4188a:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   4188c:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   4188e:	4628      	mov	r0, r5
}
   41890:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   41894:	f7fe bc9e 	b.w	401d4 <lll_isr_cleanup>
	switch (phy) {
   41898:	2718      	movs	r7, #24
   4189a:	e7eb      	b.n	41874 <isr_done+0x58>
	LL_ASSERT(e);
   4189c:	4a09      	ldr	r2, [pc, #36]	; (418c4 <isr_done+0xa8>)
   4189e:	490a      	ldr	r1, [pc, #40]	; (418c8 <isr_done+0xac>)
   418a0:	480a      	ldr	r0, [pc, #40]	; (418cc <isr_done+0xb0>)
   418a2:	f240 3317 	movw	r3, #791	; 0x317
   418a6:	f007 fee5 	bl	49674 <printk>
   418aa:	4040      	eors	r0, r0
   418ac:	f380 8811 	msr	BASEPRI, r0
   418b0:	f04f 0003 	mov.w	r0, #3
   418b4:	df02      	svc	2
   418b6:	e7ba      	b.n	4182e <isr_done+0x12>
   418b8:	20006ddd 	.word	0x20006ddd
   418bc:	20006c78 	.word	0x20006c78
   418c0:	20006dde 	.word	0x20006dde
   418c4:	000530e0 	.word	0x000530e0
   418c8:	0005283c 	.word	0x0005283c
   418cc:	00052460 	.word	0x00052460

000418d0 <lll_conn_init>:
{
   418d0:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   418d2:	f000 ffdb 	bl	4288c <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   418d6:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   418d8:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   418da:	2101      	movs	r1, #1
   418dc:	f361 0201 	bfi	r2, r1, #0, #2
}
   418e0:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   418e2:	701a      	strb	r2, [r3, #0]
}
   418e4:	bd08      	pop	{r3, pc}
   418e6:	bf00      	nop

000418e8 <lll_conn_reset>:
}
   418e8:	2000      	movs	r0, #0
   418ea:	4770      	bx	lr

000418ec <lll_conn_flush>:
}
   418ec:	4770      	bx	lr
   418ee:	bf00      	nop

000418f0 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   418f0:	4805      	ldr	r0, [pc, #20]	; (41908 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   418f2:	4906      	ldr	r1, [pc, #24]	; (4190c <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   418f4:	4a06      	ldr	r2, [pc, #24]	; (41910 <lll_conn_prepare_reset+0x20>)
{
   418f6:	b410      	push	{r4}
	trx_cnt = 0U;
   418f8:	2300      	movs	r3, #0
   418fa:	4c06      	ldr	r4, [pc, #24]	; (41914 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   418fc:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   418fe:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   41900:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   41902:	8023      	strh	r3, [r4, #0]
}
   41904:	bc10      	pop	{r4}
   41906:	4770      	bx	lr
   41908:	20006ddd 	.word	0x20006ddd
   4190c:	20006ddc 	.word	0x20006ddc
   41910:	20006dde 	.word	0x20006dde
   41914:	20006c78 	.word	0x20006c78

00041918 <lll_conn_abort_cb>:
{
   41918:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   4191a:	b1e8      	cbz	r0, 41958 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   4191c:	460d      	mov	r5, r1
   4191e:	4604      	mov	r4, r0
   41920:	f7fe fe08 	bl	40534 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   41924:	2800      	cmp	r0, #0
   41926:	db0a      	blt.n	4193e <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   41928:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   4192a:	8923      	ldrh	r3, [r4, #8]
   4192c:	8a51      	ldrh	r1, [r2, #18]
   4192e:	3301      	adds	r3, #1
   41930:	440b      	add	r3, r1
   41932:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   41934:	4628      	mov	r0, r5
}
   41936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   4193a:	f7fe bb67 	b.w	4000c <lll_done>
	LL_ASSERT(err >= 0);
   4193e:	4a0a      	ldr	r2, [pc, #40]	; (41968 <lll_conn_abort_cb+0x50>)
   41940:	490a      	ldr	r1, [pc, #40]	; (4196c <lll_conn_abort_cb+0x54>)
   41942:	480b      	ldr	r0, [pc, #44]	; (41970 <lll_conn_abort_cb+0x58>)
   41944:	23aa      	movs	r3, #170	; 0xaa
   41946:	f007 fe95 	bl	49674 <printk>
   4194a:	4040      	eors	r0, r0
   4194c:	f380 8811 	msr	BASEPRI, r0
   41950:	f04f 0003 	mov.w	r0, #3
   41954:	df02      	svc	2
   41956:	e7e7      	b.n	41928 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   41958:	4806      	ldr	r0, [pc, #24]	; (41974 <lll_conn_abort_cb+0x5c>)
   4195a:	f000 fe49 	bl	425f0 <radio_isr_set>
}
   4195e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   41962:	f000 bf3f 	b.w	427e4 <radio_disable>
   41966:	bf00      	nop
   41968:	000530e0 	.word	0x000530e0
   4196c:	00052fac 	.word	0x00052fac
   41970:	00052460 	.word	0x00052460
   41974:	0004181d 	.word	0x0004181d

00041978 <lll_conn_rx_pkt_set>:
{
   41978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4197a:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   4197c:	2001      	movs	r0, #1
   4197e:	f7f5 ff79 	bl	37874 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41982:	4606      	mov	r6, r0
   41984:	b360      	cbz	r0, 419e0 <lll_conn_rx_pkt_set+0x68>
	phy = lll->phy_rx;
   41986:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   4198a:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   4198c:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   41990:	2100      	movs	r1, #0
   41992:	4620      	mov	r0, r4
   41994:	f000 fe92 	bl	426bc <radio_phy_set>
	} else if (lll->enc_rx) {
   41998:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   4199c:	071b      	lsls	r3, r3, #28
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   4199e:	ea4f 0244 	mov.w	r2, r4, lsl #1
	} else if (lll->enc_rx) {
   419a2:	d511      	bpl.n	419c8 <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   419a4:	1d39      	adds	r1, r7, #4
   419a6:	f042 0201 	orr.w	r2, r2, #1
   419aa:	b2c9      	uxtb	r1, r1
   419ac:	2008      	movs	r0, #8
   419ae:	f000 fecb 	bl	42748 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   419b2:	f106 021c 	add.w	r2, r6, #28
   419b6:	4621      	mov	r1, r4
   419b8:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   419bc:	f001 f9ba 	bl	42d34 <radio_ccm_rx_pkt_set>
}
   419c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   419c4:	f000 bee6 	b.w	42794 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   419c8:	2008      	movs	r0, #8
   419ca:	b2f9      	uxtb	r1, r7
   419cc:	f042 0201 	orr.w	r2, r2, #1
   419d0:	f000 feba 	bl	42748 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   419d4:	f106 001c 	add.w	r0, r6, #28
}
   419d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   419dc:	f000 beda 	b.w	42794 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   419e0:	4a06      	ldr	r2, [pc, #24]	; (419fc <lll_conn_rx_pkt_set+0x84>)
   419e2:	4907      	ldr	r1, [pc, #28]	; (41a00 <lll_conn_rx_pkt_set+0x88>)
   419e4:	4807      	ldr	r0, [pc, #28]	; (41a04 <lll_conn_rx_pkt_set+0x8c>)
   419e6:	f240 235a 	movw	r3, #602	; 0x25a
   419ea:	f007 fe43 	bl	49674 <printk>
   419ee:	4040      	eors	r0, r0
   419f0:	f380 8811 	msr	BASEPRI, r0
   419f4:	f04f 0003 	mov.w	r0, #3
   419f8:	df02      	svc	2
   419fa:	e7c4      	b.n	41986 <lll_conn_rx_pkt_set+0xe>
   419fc:	000530e0 	.word	0x000530e0
   41a00:	00053048 	.word	0x00053048
   41a04:	00052460 	.word	0x00052460

00041a08 <lll_conn_isr_tx>:
{
   41a08:	b538      	push	{r3, r4, r5, lr}
   41a0a:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   41a0c:	f7fe fbc2 	bl	40194 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   41a10:	2096      	movs	r0, #150	; 0x96
   41a12:	f001 f86f 	bl	42af4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   41a16:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   41a1a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   41a1e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   41a22:	f000 0007 	and.w	r0, r0, #7
   41a26:	f002 0207 	and.w	r2, r2, #7
   41a2a:	2100      	movs	r1, #0
   41a2c:	f000 ff7e 	bl	4292c <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   41a30:	4620      	mov	r0, r4
   41a32:	f7ff ffa1 	bl	41978 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   41a36:	f000 fef5 	bl	42824 <radio_is_ready>
   41a3a:	bb58      	cbnz	r0, 41a94 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   41a3c:	f001 f974 	bl	42d28 <radio_tmr_tifs_base_get>
   41a40:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   41a42:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   41a46:	2101      	movs	r1, #1
   41a48:	f000 0007 	and.w	r0, r0, #7
   41a4c:	f000 feb8 	bl	427c0 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   41a50:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   41a54:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   41a58:	4405      	add	r5, r0
   41a5a:	2b02      	cmp	r3, #2
   41a5c:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   41a60:	d016      	beq.n	41a90 <lll_conn_isr_tx+0x88>
		return 376;
   41a62:	2b04      	cmp	r3, #4
   41a64:	bf14      	ite	ne
   41a66:	2328      	movne	r3, #40	; 0x28
   41a68:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   41a6c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   41a70:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   41a74:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   41a78:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   41a7a:	f000 fe9d 	bl	427b8 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   41a7e:	1a28      	subs	r0, r5, r0
   41a80:	f001 f90a 	bl	42c98 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   41a84:	4621      	mov	r1, r4
   41a86:	480a      	ldr	r0, [pc, #40]	; (41ab0 <lll_conn_isr_tx+0xa8>)
}
   41a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   41a8c:	f000 bdb0 	b.w	425f0 <radio_isr_set>
	switch (phy) {
   41a90:	2318      	movs	r3, #24
   41a92:	e7eb      	b.n	41a6c <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   41a94:	4a07      	ldr	r2, [pc, #28]	; (41ab4 <lll_conn_isr_tx+0xac>)
   41a96:	4908      	ldr	r1, [pc, #32]	; (41ab8 <lll_conn_isr_tx+0xb0>)
   41a98:	4808      	ldr	r0, [pc, #32]	; (41abc <lll_conn_isr_tx+0xb4>)
   41a9a:	f240 2313 	movw	r3, #531	; 0x213
   41a9e:	f007 fde9 	bl	49674 <printk>
   41aa2:	4040      	eors	r0, r0
   41aa4:	f380 8811 	msr	BASEPRI, r0
   41aa8:	f04f 0003 	mov.w	r0, #3
   41aac:	df02      	svc	2
   41aae:	e7c5      	b.n	41a3c <lll_conn_isr_tx+0x34>
   41ab0:	00041be5 	.word	0x00041be5
   41ab4:	000530e0 	.word	0x000530e0
   41ab8:	00053050 	.word	0x00053050
   41abc:	00052460 	.word	0x00052460

00041ac0 <lll_conn_tx_pkt_set>:
{
   41ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41ac2:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   41ac4:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   41ac8:	8f87      	ldrh	r7, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   41aca:	f001 0407 	and.w	r4, r1, #7
{
   41ace:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   41ad0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   41ad4:	4620      	mov	r0, r4
   41ad6:	f000 fdf1 	bl	426bc <radio_phy_set>
	} else if (lll->enc_tx) {
   41ada:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   41ade:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   41ae0:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   41ae2:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_tx) {
   41ae6:	d50d      	bpl.n	41b04 <lll_conn_tx_pkt_set+0x44>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   41ae8:	1d39      	adds	r1, r7, #4
   41aea:	b2c9      	uxtb	r1, r1
   41aec:	2008      	movs	r0, #8
   41aee:	f000 fe2b 	bl	42748 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   41af2:	4631      	mov	r1, r6
   41af4:	f105 0080 	add.w	r0, r5, #128	; 0x80
   41af8:	f001 f95a 	bl	42db0 <radio_ccm_tx_pkt_set>
}
   41afc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   41b00:	f000 be4e 	b.w	427a0 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   41b04:	b2f9      	uxtb	r1, r7
   41b06:	2008      	movs	r0, #8
   41b08:	f000 fe1e 	bl	42748 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   41b0c:	4630      	mov	r0, r6
}
   41b0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   41b12:	f000 be45 	b.w	427a0 <radio_pkt_tx_set>
   41b16:	bf00      	nop

00041b18 <lll_conn_pdu_tx_prep>:
{
   41b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   41b1c:	4604      	mov	r4, r0
   41b1e:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   41b20:	aa01      	add	r2, sp, #4
   41b22:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   41b24:	460f      	mov	r7, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   41b26:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   41b28:	f7f1 ff46 	bl	339b8 <memq_peek>
	if (lll->empty || !link) {
   41b2c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   41b30:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   41b32:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   41b34:	d431      	bmi.n	41b9a <lll_conn_pdu_tx_prep+0x82>
   41b36:	2800      	cmp	r0, #0
   41b38:	d045      	beq.n	41bc6 <lll_conn_pdu_tx_prep+0xae>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   41b3a:	9b01      	ldr	r3, [sp, #4]
   41b3c:	f894 805d 	ldrb.w	r8, [r4, #93]	; 0x5d
   41b40:	f103 0904 	add.w	r9, r3, #4
		if (!lll->packet_tx_head_len) {
   41b44:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   41b48:	eb09 0508 	add.w	r5, r9, r8
		if (!lll->packet_tx_head_len) {
   41b4c:	b913      	cbnz	r3, 41b54 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   41b4e:	786b      	ldrb	r3, [r5, #1]
   41b50:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   41b54:	f1b8 0f00 	cmp.w	r8, #0
   41b58:	d006      	beq.n	41b68 <lll_conn_pdu_tx_prep+0x50>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   41b5a:	f819 2008 	ldrb.w	r2, [r9, r8]
   41b5e:	2101      	movs	r1, #1
   41b60:	f361 0201 	bfi	r2, r1, #0, #2
   41b64:	f809 2008 	strb.w	r2, [r9, r8]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   41b68:	eba3 0308 	sub.w	r3, r3, r8
   41b6c:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   41b6e:	4620      	mov	r0, r4
   41b70:	f7fc f87c 	bl	3dc6c <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   41b74:	786b      	ldrb	r3, [r5, #1]
   41b76:	4283      	cmp	r3, r0
   41b78:	d91f      	bls.n	41bba <lll_conn_pdu_tx_prep+0xa2>
			p->len = max_tx_octets;
   41b7a:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   41b7c:	2201      	movs	r2, #1
   41b7e:	f819 3008 	ldrb.w	r3, [r9, r8]
   41b82:	f003 030f 	and.w	r3, r3, #15
   41b86:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   41b8a:	f809 3008 	strb.w	r3, [r9, r8]
		p->resv = 0U;
   41b8e:	2300      	movs	r3, #0
   41b90:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   41b92:	603d      	str	r5, [r7, #0]
}
   41b94:	b003      	add	sp, #12
   41b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   41b9a:	f043 0304 	orr.w	r3, r3, #4
   41b9e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   41ba2:	f000 fe73 	bl	4288c <radio_pkt_empty_get>
   41ba6:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   41ba8:	b1a6      	cbz	r6, 41bd4 <lll_conn_pdu_tx_prep+0xbc>
			p->md = 1U;
   41baa:	7803      	ldrb	r3, [r0, #0]
   41bac:	f043 0310 	orr.w	r3, r3, #16
   41bb0:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   41bb2:	603d      	str	r5, [r7, #0]
}
   41bb4:	b003      	add	sp, #12
   41bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   41bba:	6832      	ldr	r2, [r6, #0]
   41bbc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   41bbe:	1ad2      	subs	r2, r2, r3
   41bc0:	bf18      	it	ne
   41bc2:	2201      	movne	r2, #1
   41bc4:	e7db      	b.n	41b7e <lll_conn_pdu_tx_prep+0x66>
		lll->empty = 1U;
   41bc6:	f043 0304 	orr.w	r3, r3, #4
   41bca:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   41bce:	f000 fe5d 	bl	4288c <radio_pkt_empty_get>
   41bd2:	4605      	mov	r5, r0
			p->md = 0U;
   41bd4:	782b      	ldrb	r3, [r5, #0]
   41bd6:	f36f 1304 	bfc	r3, #4, #1
   41bda:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   41bdc:	603d      	str	r5, [r7, #0]
}
   41bde:	b003      	add	sp, #12
   41be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00041be4 <lll_conn_isr_rx>:
{
   41be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   41be8:	b083      	sub	sp, #12
   41bea:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   41bec:	f000 fe24 	bl	42838 <radio_is_done>
	if (trx_done) {
   41bf0:	b2c0      	uxtb	r0, r0
   41bf2:	b950      	cbnz	r0, 41c0a <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   41bf4:	f7fe fad6 	bl	401a4 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   41bf8:	48be      	ldr	r0, [pc, #760]	; (41ef4 <lll_conn_isr_rx+0x310>)
   41bfa:	4621      	mov	r1, r4
   41bfc:	f000 fcf8 	bl	425f0 <radio_isr_set>
}
   41c00:	b003      	add	sp, #12
   41c02:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		radio_disable();
   41c06:	f000 bded 	b.w	427e4 <radio_disable>
		crc_ok = radio_crc_is_valid();
   41c0a:	f000 fe35 	bl	42878 <radio_crc_is_valid>
   41c0e:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   41c10:	f000 ff14 	bl	42a3c <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   41c14:	f7fe fac6 	bl	401a4 <lll_isr_rx_status_reset>
	trx_cnt++;
   41c18:	4ab7      	ldr	r2, [pc, #732]	; (41ef8 <lll_conn_isr_rx+0x314>)
   41c1a:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   41c1c:	2001      	movs	r0, #1
	trx_cnt++;
   41c1e:	4403      	add	r3, r0
   41c20:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   41c22:	f7f5 fe27 	bl	37874 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41c26:	4606      	mov	r6, r0
   41c28:	2800      	cmp	r0, #0
   41c2a:	f000 80f3 	beq.w	41e14 <lll_conn_isr_rx+0x230>
	if (crc_ok) {
   41c2e:	b9fd      	cbnz	r5, 41c70 <lll_conn_isr_rx+0x8c>
		if (crc_expire == 0U) {
   41c30:	4bb2      	ldr	r3, [pc, #712]	; (41efc <lll_conn_isr_rx+0x318>)
   41c32:	781f      	ldrb	r7, [r3, #0]
   41c34:	2f00      	cmp	r7, #0
   41c36:	f000 8083 	beq.w	41d40 <lll_conn_isr_rx+0x15c>
		crc_expire--;
   41c3a:	3f01      	subs	r7, #1
   41c3c:	b2ff      	uxtb	r7, r7
   41c3e:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   41c40:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   41c44:	a901      	add	r1, sp, #4
   41c46:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   41c48:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   41c4c:	f7ff ff64 	bl	41b18 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   41c50:	2f00      	cmp	r7, #0
   41c52:	d17b      	bne.n	41d4c <lll_conn_isr_rx+0x168>
		radio_isr_set(isr_done, param);
   41c54:	48a7      	ldr	r0, [pc, #668]	; (41ef4 <lll_conn_isr_rx+0x310>)
   41c56:	4621      	mov	r1, r4
   41c58:	f000 fcca 	bl	425f0 <radio_isr_set>
		} else if (!lll->role) {
   41c5c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   41c60:	2b00      	cmp	r3, #0
   41c62:	f280 80c9 	bge.w	41df8 <lll_conn_isr_rx+0x214>
			radio_switch_complete_and_disable();
   41c66:	f000 fec1 	bl	429ec <radio_switch_complete_and_disable>
	pdu_data_tx->sn = lll->sn;
   41c6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   41c6e:	e080      	b.n	41d72 <lll_conn_isr_rx+0x18e>
	if (pdu_data_rx->nesn != lll->sn) {
   41c70:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   41c74:	7f32      	ldrb	r2, [r6, #28]
   41c76:	f003 0101 	and.w	r1, r3, #1
   41c7a:	f3c2 0080 	ubfx	r0, r2, #2, #1
   41c7e:	4288      	cmp	r0, r1
   41c80:	f000 80d8 	beq.w	41e34 <lll_conn_isr_rx+0x250>
		if (lll->role) {
   41c84:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   41c88:	f081 0101 	eor.w	r1, r1, #1
   41c8c:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   41c90:	2a00      	cmp	r2, #0
		lll->sn++;
   41c92:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   41c96:	da05      	bge.n	41ca4 <lll_conn_isr_rx+0xc0>
			lll->periph.latency_enabled = 1;
   41c98:	f894 3020 	ldrb.w	r3, [r4, #32]
   41c9c:	f043 0304 	orr.w	r3, r3, #4
   41ca0:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   41ca4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   41ca8:	f013 0804 	ands.w	r8, r3, #4
   41cac:	f040 810a 	bne.w	41ec4 <lll_conn_isr_rx+0x2e0>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   41cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   41cb4:	aa01      	add	r2, sp, #4
   41cb6:	f7f1 fe7f 	bl	339b8 <memq_peek>
		if (link) {
   41cba:	4605      	mov	r5, r0
   41cbc:	2800      	cmp	r0, #0
   41cbe:	f000 812f 	beq.w	41f20 <lll_conn_isr_rx+0x33c>
			pdu_data_tx = (void *)(tx->pdu +
   41cc2:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   41cc4:	f894 905d 	ldrb.w	r9, [r4, #93]	; 0x5d
			pdu_data_tx = (void *)(tx->pdu +
   41cc8:	3704      	adds	r7, #4
   41cca:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   41cce:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   41cd0:	b172      	cbz	r2, 41cf0 <lll_conn_isr_rx+0x10c>
				if (lll->enc_tx) {
   41cd2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   41cd6:	06db      	lsls	r3, r3, #27
   41cd8:	d50a      	bpl.n	41cf0 <lll_conn_isr_rx+0x10c>
					lll->ccm_tx.counter++;
   41cda:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   41cde:	3301      	adds	r3, #1
   41ce0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   41ce4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   41ce8:	f143 0300 	adc.w	r3, r3, #0
   41cec:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   41cf0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   41cf4:	444a      	add	r2, r9
   41cf6:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   41cf8:	429a      	cmp	r2, r3
   41cfa:	f0c0 8118 	bcc.w	41f2e <lll_conn_isr_rx+0x34a>
			} else if (offset == lll->packet_tx_head_len) {
   41cfe:	f000 8141 	beq.w	41f84 <lll_conn_isr_rx+0x3a0>
				LL_ASSERT(0);
   41d02:	4a7f      	ldr	r2, [pc, #508]	; (41f00 <lll_conn_isr_rx+0x31c>)
   41d04:	497f      	ldr	r1, [pc, #508]	; (41f04 <lll_conn_isr_rx+0x320>)
   41d06:	4880      	ldr	r0, [pc, #512]	; (41f08 <lll_conn_isr_rx+0x324>)
   41d08:	f240 33a3 	movw	r3, #931	; 0x3a3
   41d0c:	f007 fcb2 	bl	49674 <printk>
   41d10:	4040      	eors	r0, r0
   41d12:	f380 8811 	msr	BASEPRI, r0
   41d16:	f04f 0003 	mov.w	r0, #3
   41d1a:	df02      	svc	2
	tx_release = NULL;
   41d1c:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   41d1e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   41d22:	2b00      	cmp	r3, #0
   41d24:	f2c0 812a 	blt.w	41f7c <lll_conn_isr_rx+0x398>
			    !pdu_data_rx->md) {
   41d28:	7f32      	ldrb	r2, [r6, #28]
   41d2a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   41d2e:	06d0      	lsls	r0, r2, #27
				*is_done = !pdu_data_tx->md;
   41d30:	bf5e      	ittt	pl
   41d32:	f817 8009 	ldrbpl.w	r8, [r7, r9]
   41d36:	f088 0810 	eorpl.w	r8, r8, #16
   41d3a:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   41d3e:	e07c      	b.n	41e3a <lll_conn_isr_rx+0x256>
		crc_expire--;
   41d40:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   41d42:	a901      	add	r1, sp, #4
   41d44:	4620      	mov	r0, r4
		crc_expire--;
   41d46:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   41d48:	f7ff fee6 	bl	41b18 <lll_conn_pdu_tx_prep>
	is_rx_enqueue = 0U;
   41d4c:	2700      	movs	r7, #0
	pdu_data_tx->sn = lll->sn;
   41d4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
	tx_release = NULL;
   41d52:	463d      	mov	r5, r7
		radio_tmr_tifs_set(EVENT_IFS_US);
   41d54:	2096      	movs	r0, #150	; 0x96
   41d56:	f000 fecd 	bl	42af4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   41d5a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   41d5e:	f000 0007 	and.w	r0, r0, #7
   41d62:	f000 fd9b 	bl	4289c <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   41d66:	4869      	ldr	r0, [pc, #420]	; (41f0c <lll_conn_isr_rx+0x328>)
   41d68:	4621      	mov	r1, r4
   41d6a:	f000 fc41 	bl	425f0 <radio_isr_set>
		radio_tmr_end_capture();
   41d6e:	f000 ffcd 	bl	42d0c <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   41d72:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   41d76:	f898 1000 	ldrb.w	r1, [r8]
   41d7a:	f3c2 0340 	ubfx	r3, r2, #1, #1
   41d7e:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   41d80:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   41d84:	f021 010c 	bic.w	r1, r1, #12
   41d88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   41d8c:	430b      	orrs	r3, r1
   41d8e:	f888 3000 	strb.w	r3, [r8]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   41d92:	4641      	mov	r1, r8
   41d94:	4620      	mov	r0, r4
   41d96:	f7ff fe93 	bl	41ac0 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   41d9a:	f000 fd43 	bl	42824 <radio_is_ready>
   41d9e:	2800      	cmp	r0, #0
   41da0:	d173      	bne.n	41e8a <lll_conn_isr_rx+0x2a6>
	if (!radio_tmr_aa_restore()) {
   41da2:	f000 ffa7 	bl	42cf4 <radio_tmr_aa_restore>
   41da6:	b170      	cbz	r0, 41dc6 <lll_conn_isr_rx+0x1e2>
	if (tx_release) {
   41da8:	b19d      	cbz	r5, 41dd2 <lll_conn_isr_rx+0x1ee>
		LL_ASSERT(lll->handle != 0xFFFF);
   41daa:	89a0      	ldrh	r0, [r4, #12]
   41dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   41db0:	4298      	cmp	r0, r3
   41db2:	d078      	beq.n	41ea6 <lll_conn_isr_rx+0x2c2>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   41db4:	4629      	mov	r1, r5
   41db6:	f7fb fd1d 	bl	3d7f4 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   41dba:	b977      	cbnz	r7, 41dda <lll_conn_isr_rx+0x1f6>
}
   41dbc:	b003      	add	sp, #12
   41dbe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		ull_rx_sched();
   41dc2:	f7f5 bd9b 	b.w	378fc <ull_rx_sched>
		radio_tmr_aa_save(radio_tmr_aa_get());
   41dc6:	f000 ff89 	bl	42cdc <radio_tmr_aa_get>
   41dca:	f000 ff8d 	bl	42ce8 <radio_tmr_aa_save>
	if (tx_release) {
   41dce:	2d00      	cmp	r5, #0
   41dd0:	d1eb      	bne.n	41daa <lll_conn_isr_rx+0x1c6>
	if (is_rx_enqueue) {
   41dd2:	b917      	cbnz	r7, 41dda <lll_conn_isr_rx+0x1f6>
}
   41dd4:	b003      	add	sp, #12
   41dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ull_pdu_rx_alloc();
   41dda:	f7f5 fd69 	bl	378b0 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   41dde:	2303      	movs	r3, #3
   41de0:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   41de2:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   41de4:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   41de6:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   41de8:	4631      	mov	r1, r6
   41dea:	f7f5 fd77 	bl	378dc <ull_rx_put>
}
   41dee:	b003      	add	sp, #12
   41df0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		ull_rx_sched();
   41df4:	f7f5 bd82 	b.w	378fc <ull_rx_sched>
			radio_disable();
   41df8:	f000 fcf4 	bl	427e4 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   41dfc:	f000 fd12 	bl	42824 <radio_is_ready>
   41e00:	2800      	cmp	r0, #0
   41e02:	f040 80aa 	bne.w	41f5a <lll_conn_isr_rx+0x376>
			lll->empty = is_empty_pdu_tx_retry;
   41e06:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   41e0a:	f369 0382 	bfi	r3, r9, #2, #1
   41e0e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			goto lll_conn_isr_rx_exit;
   41e12:	e7c6      	b.n	41da2 <lll_conn_isr_rx+0x1be>
	LL_ASSERT(node_rx);
   41e14:	4a3a      	ldr	r2, [pc, #232]	; (41f00 <lll_conn_isr_rx+0x31c>)
   41e16:	493e      	ldr	r1, [pc, #248]	; (41f10 <lll_conn_isr_rx+0x32c>)
   41e18:	483b      	ldr	r0, [pc, #236]	; (41f08 <lll_conn_isr_rx+0x324>)
   41e1a:	23f2      	movs	r3, #242	; 0xf2
   41e1c:	f007 fc2a 	bl	49674 <printk>
   41e20:	4040      	eors	r0, r0
   41e22:	f380 8811 	msr	BASEPRI, r0
   41e26:	f04f 0003 	mov.w	r0, #3
   41e2a:	df02      	svc	2
	if (crc_ok) {
   41e2c:	2d00      	cmp	r5, #0
   41e2e:	f43f aeff 	beq.w	41c30 <lll_conn_isr_rx+0x4c>
   41e32:	e71d      	b.n	41c70 <lll_conn_isr_rx+0x8c>
	is_done = 0U;
   41e34:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   41e38:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   41e3a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   41e3e:	f3c3 0140 	ubfx	r1, r3, #1, #1
   41e42:	428a      	cmp	r2, r1
   41e44:	d077      	beq.n	41f36 <lll_conn_isr_rx+0x352>
	is_rx_enqueue = 0U;
   41e46:	2700      	movs	r7, #0
		crc_expire = 0U;
   41e48:	4a2c      	ldr	r2, [pc, #176]	; (41efc <lll_conn_isr_rx+0x318>)
   41e4a:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   41e4c:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   41e50:	4b30      	ldr	r3, [pc, #192]	; (41f14 <lll_conn_isr_rx+0x330>)
		crc_expire = 0U;
   41e52:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   41e54:	4620      	mov	r0, r4
		crc_valid = 1U;
   41e56:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   41e58:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   41e5a:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   41e5c:	f7ff fe5c 	bl	41b18 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   41e60:	f1b8 0f00 	cmp.w	r8, #0
   41e64:	f47f aef6 	bne.w	41c54 <lll_conn_isr_rx+0x70>
   41e68:	7f33      	ldrb	r3, [r6, #28]
			      (pdu_data_tx->md == 0) &&
   41e6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   41e6e:	06da      	lsls	r2, r3, #27
   41e70:	f53f af70 	bmi.w	41d54 <lll_conn_isr_rx+0x170>
			      (pdu_data_tx->md == 0) &&
   41e74:	f898 3000 	ldrb.w	r3, [r8]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   41e78:	06db      	lsls	r3, r3, #27
   41e7a:	f53f af6b 	bmi.w	41d54 <lll_conn_isr_rx+0x170>
			      (pdu_data_tx->md == 0) &&
   41e7e:	f898 3001 	ldrb.w	r3, [r8, #1]
   41e82:	2b00      	cmp	r3, #0
   41e84:	f43f aee6 	beq.w	41c54 <lll_conn_isr_rx+0x70>
   41e88:	e764      	b.n	41d54 <lll_conn_isr_rx+0x170>
	LL_ASSERT(!radio_is_ready());
   41e8a:	4a1d      	ldr	r2, [pc, #116]	; (41f00 <lll_conn_isr_rx+0x31c>)
   41e8c:	4922      	ldr	r1, [pc, #136]	; (41f18 <lll_conn_isr_rx+0x334>)
   41e8e:	481e      	ldr	r0, [pc, #120]	; (41f08 <lll_conn_isr_rx+0x324>)
   41e90:	f240 1369 	movw	r3, #361	; 0x169
   41e94:	f007 fbee 	bl	49674 <printk>
   41e98:	4040      	eors	r0, r0
   41e9a:	f380 8811 	msr	BASEPRI, r0
   41e9e:	f04f 0003 	mov.w	r0, #3
   41ea2:	df02      	svc	2
   41ea4:	e77d      	b.n	41da2 <lll_conn_isr_rx+0x1be>
		LL_ASSERT(lll->handle != 0xFFFF);
   41ea6:	4a16      	ldr	r2, [pc, #88]	; (41f00 <lll_conn_isr_rx+0x31c>)
   41ea8:	491c      	ldr	r1, [pc, #112]	; (41f1c <lll_conn_isr_rx+0x338>)
   41eaa:	4817      	ldr	r0, [pc, #92]	; (41f08 <lll_conn_isr_rx+0x324>)
   41eac:	f44f 73bc 	mov.w	r3, #376	; 0x178
   41eb0:	f007 fbe0 	bl	49674 <printk>
   41eb4:	4040      	eors	r0, r0
   41eb6:	f380 8811 	msr	BASEPRI, r0
   41eba:	f04f 0003 	mov.w	r0, #3
   41ebe:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   41ec0:	89a0      	ldrh	r0, [r4, #12]
   41ec2:	e777      	b.n	41db4 <lll_conn_isr_rx+0x1d0>
			lll->empty = 0;
   41ec4:	f36f 0382 	bfc	r3, #2, #1
   41ec8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   41ecc:	f000 fcde 	bl	4288c <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   41ed0:	f994 301d 	ldrsb.w	r3, [r4, #29]
   41ed4:	2b00      	cmp	r3, #0
   41ed6:	db23      	blt.n	41f20 <lll_conn_isr_rx+0x33c>
			    !pdu_data_rx->md) {
   41ed8:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   41eda:	f012 0510 	ands.w	r5, r2, #16
   41ede:	d120      	bne.n	41f22 <lll_conn_isr_rx+0x33e>
				*is_done = !pdu_data_tx->md;
   41ee0:	f890 8000 	ldrb.w	r8, [r0]
   41ee4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   41ee8:	f088 0810 	eor.w	r8, r8, #16
   41eec:	f3c8 1800 	ubfx	r8, r8, #4, #1
   41ef0:	e7a3      	b.n	41e3a <lll_conn_isr_rx+0x256>
   41ef2:	bf00      	nop
   41ef4:	0004181d 	.word	0x0004181d
   41ef8:	20006c78 	.word	0x20006c78
   41efc:	20006ddc 	.word	0x20006ddc
   41f00:	000530e0 	.word	0x000530e0
   41f04:	000524c0 	.word	0x000524c0
   41f08:	00052460 	.word	0x00052460
   41f0c:	00041a09 	.word	0x00041a09
   41f10:	00053048 	.word	0x00053048
   41f14:	20006ddd 	.word	0x20006ddd
   41f18:	00053050 	.word	0x00053050
   41f1c:	00053134 	.word	0x00053134
   41f20:	7f32      	ldrb	r2, [r6, #28]
   41f22:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	is_done = 0U;
   41f26:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   41f2a:	4645      	mov	r5, r8
   41f2c:	e785      	b.n	41e3a <lll_conn_isr_rx+0x256>
				lll->packet_tx_head_offset = offset;
   41f2e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
	tx_release = NULL;
   41f32:	2500      	movs	r5, #0
   41f34:	e6f3      	b.n	41d1e <lll_conn_isr_rx+0x13a>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   41f36:	2003      	movs	r0, #3
   41f38:	f7f5 fc9c 	bl	37874 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   41f3c:	b1d8      	cbz	r0, 41f76 <lll_conn_isr_rx+0x392>
		lll->nesn++;
   41f3e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   41f42:	f083 0302 	eor.w	r3, r3, #2
   41f46:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   41f4a:	7f73      	ldrb	r3, [r6, #29]
   41f4c:	b19b      	cbz	r3, 41f76 <lll_conn_isr_rx+0x392>
			if (lll->enc_rx) {
   41f4e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   41f52:	0719      	lsls	r1, r3, #28
   41f54:	d424      	bmi.n	41fa0 <lll_conn_isr_rx+0x3bc>
			*is_rx_enqueue = 1U;
   41f56:	2701      	movs	r7, #1
   41f58:	e776      	b.n	41e48 <lll_conn_isr_rx+0x264>
			LL_ASSERT(!radio_is_ready());
   41f5a:	4a38      	ldr	r2, [pc, #224]	; (4203c <lll_conn_isr_rx+0x458>)
   41f5c:	4938      	ldr	r1, [pc, #224]	; (42040 <lll_conn_isr_rx+0x45c>)
   41f5e:	4839      	ldr	r0, [pc, #228]	; (42044 <lll_conn_isr_rx+0x460>)
   41f60:	f44f 7398 	mov.w	r3, #304	; 0x130
   41f64:	f007 fb86 	bl	49674 <printk>
   41f68:	4040      	eors	r0, r0
   41f6a:	f380 8811 	msr	BASEPRI, r0
   41f6e:	f04f 0003 	mov.w	r0, #3
   41f72:	df02      	svc	2
   41f74:	e747      	b.n	41e06 <lll_conn_isr_rx+0x222>
   41f76:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   41f7a:	e764      	b.n	41e46 <lll_conn_isr_rx+0x262>
   41f7c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   41f80:	7f32      	ldrb	r2, [r6, #28]
   41f82:	e75a      	b.n	41e3a <lll_conn_isr_rx+0x256>
				lll->packet_tx_head_len = 0;
   41f84:	2200      	movs	r2, #0
   41f86:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   41f8a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   41f8c:	f104 0148 	add.w	r1, r4, #72	; 0x48
   41f90:	f7f1 fd1a 	bl	339c8 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   41f94:	9b01      	ldr	r3, [sp, #4]
   41f96:	681a      	ldr	r2, [r3, #0]
   41f98:	602a      	str	r2, [r5, #0]
				tx->next = link;
   41f9a:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   41f9c:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   41f9e:	e6be      	b.n	41d1e <lll_conn_isr_rx+0x13a>
				done = radio_ccm_is_done();
   41fa0:	f000 ff2e 	bl	42e00 <radio_ccm_is_done>
				LL_ASSERT(done);
   41fa4:	2800      	cmp	r0, #0
   41fa6:	d03b      	beq.n	42020 <lll_conn_isr_rx+0x43c>
				bool mic_failure = !radio_ccm_mic_is_valid();
   41fa8:	f000 ff4c 	bl	42e44 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   41fac:	bb30      	cbnz	r0, 41ffc <lll_conn_isr_rx+0x418>
				    lll->ccm_rx.counter == 0 &&
   41fae:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   41fb2:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
				if (mic_failure &&
   41fb6:	4313      	orrs	r3, r2
   41fb8:	d104      	bne.n	41fc4 <lll_conn_isr_rx+0x3e0>
				    (pdu_data_rx->ll_id ==
   41fba:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   41fbc:	f003 0303 	and.w	r3, r3, #3
   41fc0:	2b03      	cmp	r3, #3
   41fc2:	d004      	beq.n	41fce <lll_conn_isr_rx+0x3ea>
					mic_state = LLL_CONN_MIC_FAIL;
   41fc4:	4b20      	ldr	r3, [pc, #128]	; (42048 <lll_conn_isr_rx+0x464>)
   41fc6:	2202      	movs	r2, #2
   41fc8:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   41fca:	2700      	movs	r7, #0
   41fcc:	e6e9      	b.n	41da2 <lll_conn_isr_rx+0x1be>
						radio_pkt_scratch_get();
   41fce:	f000 fc61 	bl	42894 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   41fd2:	7843      	ldrb	r3, [r0, #1]
   41fd4:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   41fd6:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   41fd8:	d8f4      	bhi.n	41fc4 <lll_conn_isr_rx+0x3e0>
						memcpy(pdu_data_rx,
   41fda:	3303      	adds	r3, #3
   41fdc:	b2da      	uxtb	r2, r3
   41fde:	f106 001c 	add.w	r0, r6, #28
   41fe2:	f009 fc52 	bl	4b88a <memcpy>
						lll->ccm_rx.counter--;
   41fe6:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   41fea:	3b01      	subs	r3, #1
   41fec:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   41ff0:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   41ff4:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   41ff8:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   41ffc:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   42000:	3301      	adds	r3, #1
   42002:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   42006:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   4200a:	f104 026f 	add.w	r2, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   4200e:	f143 0300 	adc.w	r3, r3, #0
   42012:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   42014:	4b0c      	ldr	r3, [pc, #48]	; (42048 <lll_conn_isr_rx+0x464>)
   42016:	2701      	movs	r7, #1
   42018:	701f      	strb	r7, [r3, #0]
		if (err) {
   4201a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   4201e:	e713      	b.n	41e48 <lll_conn_isr_rx+0x264>
				LL_ASSERT(done);
   42020:	4a06      	ldr	r2, [pc, #24]	; (4203c <lll_conn_isr_rx+0x458>)
   42022:	490a      	ldr	r1, [pc, #40]	; (4204c <lll_conn_isr_rx+0x468>)
   42024:	4807      	ldr	r0, [pc, #28]	; (42044 <lll_conn_isr_rx+0x460>)
   42026:	f240 33be 	movw	r3, #958	; 0x3be
   4202a:	f007 fb23 	bl	49674 <printk>
   4202e:	4040      	eors	r0, r0
   42030:	f380 8811 	msr	BASEPRI, r0
   42034:	f04f 0003 	mov.w	r0, #3
   42038:	df02      	svc	2
   4203a:	e7b5      	b.n	41fa8 <lll_conn_isr_rx+0x3c4>
   4203c:	000530e0 	.word	0x000530e0
   42040:	00053050 	.word	0x00053050
   42044:	00052460 	.word	0x00052460
   42048:	20006dde 	.word	0x20006dde
   4204c:	0005312c 	.word	0x0005312c

00042050 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   42050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   42054:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   42056:	89a2      	ldrh	r2, [r4, #12]
   42058:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4205c:	429a      	cmp	r2, r3
{
   4205e:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   42060:	f000 80d1 	beq.w	42206 <prepare_cb+0x1b6>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   42064:	4605      	mov	r5, r0
   42066:	f7ff fc43 	bl	418f0 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   4206a:	892b      	ldrh	r3, [r5, #8]
   4206c:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   4206e:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   42070:	441a      	add	r2, r3
   42072:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   42074:	4410      	add	r0, r2
   42076:	b280      	uxth	r0, r0

	/* Update event counter to next value */
	lll->event_counter = (event_counter + 1);
   42078:	1c41      	adds	r1, r0, #1

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   4207a:	7f63      	ldrb	r3, [r4, #29]
	lll->event_counter = (event_counter + 1);
   4207c:	82e1      	strh	r1, [r4, #22]
	lll->latency_prepare = 0;
   4207e:	2100      	movs	r1, #0
   42080:	8261      	strh	r1, [r4, #18]
	if (lll->data_chan_sel) {
   42082:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare + p->lazy;
   42084:	82a2      	strh	r2, [r4, #20]
	if (lll->data_chan_sel) {
   42086:	f100 808f 	bmi.w	421a8 <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   4208a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4208e:	7fa1      	ldrb	r1, [r4, #30]
   42090:	9300      	str	r3, [sp, #0]
   42092:	f104 001f 	add.w	r0, r4, #31
   42096:	f104 0318 	add.w	r3, r4, #24
   4209a:	f7fc faf1 	bl	3e680 <lll_chan_sel_1>
   4209e:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   420a0:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   420a4:	1899      	adds	r1, r3, r2
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   420a6:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   420aa:	4403      	add	r3, r0
	lll->periph.window_widening_prepare_us = 0;
   420ac:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   420ae:	63a3      	str	r3, [r4, #56]	; 0x38
   420b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->periph.window_widening_prepare_us = 0;
   420b2:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   420b4:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   420b6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   420ba:	428b      	cmp	r3, r1
   420bc:	bf28      	it	cs
   420be:	460b      	movcs	r3, r1
   420c0:	f012 0204 	ands.w	r2, r2, #4
   420c4:	6323      	str	r3, [r4, #48]	; 0x30
   420c6:	f000 8090 	beq.w	421ea <prepare_cb+0x19a>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   420ca:	f000 fad3 	bl	42674 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   420ce:	2000      	movs	r0, #0
   420d0:	f000 fb04 	bl	426dc <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   420d4:	4620      	mov	r0, r4
   420d6:	f7ff fc4f 	bl	41978 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   420da:	1d20      	adds	r0, r4, #4
   420dc:	f000 fb1c 	bl	42718 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   420e0:	8923      	ldrh	r3, [r4, #8]
   420e2:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   420e4:	f240 605b 	movw	r0, #1627	; 0x65b
   420e8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   420ec:	f000 fbb8 	bl	42860 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   420f0:	4630      	mov	r0, r6
   420f2:	f7fe f809 	bl	40108 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   420f6:	4621      	mov	r1, r4
   420f8:	4848      	ldr	r0, [pc, #288]	; (4221c <prepare_cb+0x1cc>)
   420fa:	f000 fa79 	bl	425f0 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   420fe:	2096      	movs	r0, #150	; 0x96
   42100:	f000 fcf8 	bl	42af4 <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   42104:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   42108:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   4210c:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   42110:	2100      	movs	r1, #0
   42112:	f002 0207 	and.w	r2, r2, #7
   42116:	f000 0007 	and.w	r0, r0, #7
   4211a:	f000 fc07 	bl	4292c <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   4211e:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   42120:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   42122:	4638      	mov	r0, r7
   42124:	f7fd ffd6 	bl	400d4 <lll_event_offset_get>
   42128:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   4212a:	686a      	ldr	r2, [r5, #4]
   4212c:	f106 0109 	add.w	r1, r6, #9
   42130:	2000      	movs	r0, #0
   42132:	f000 fceb 	bl	42b0c <radio_tmr_start>
   42136:	4680      	mov	r8, r0

	radio_tmr_aa_capture();
   42138:	f000 fdbc 	bl	42cb4 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   4213c:	2000      	movs	r0, #0
   4213e:	f000 fdd3 	bl	42ce8 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   42142:	6b23      	ldr	r3, [r4, #48]	; 0x30
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   42144:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   42148:	f103 0230 	add.w	r2, r3, #48	; 0x30
	hcto = remainder_us +
   4214c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   4214e:	f000 0007 	and.w	r0, r0, #7
   42152:	2101      	movs	r1, #1
	hcto = remainder_us +
   42154:	eb03 0542 	add.w	r5, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   42158:	f000 fb30 	bl	427bc <radio_rx_ready_delay_get>
	hcto = remainder_us +
   4215c:	4445      	add	r5, r8
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   4215e:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   42160:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   42164:	f000 0007 	and.w	r0, r0, #7
   42168:	2802      	cmp	r0, #2
   4216a:	d03c      	beq.n	421e6 <prepare_cb+0x196>
		return 40;
   4216c:	2804      	cmp	r0, #4
   4216e:	bf0c      	ite	eq
   42170:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   42174:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   42176:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   42178:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   4217a:	f000 fb21 	bl	427c0 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   4217e:	4428      	add	r0, r5
   42180:	f000 fd8a 	bl	42c98 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   42184:	89a1      	ldrh	r1, [r4, #12]
   42186:	3105      	adds	r1, #5
   42188:	4632      	mov	r2, r6
   4218a:	b2c9      	uxtb	r1, r1
   4218c:	4638      	mov	r0, r7
   4218e:	f7fd ffab 	bl	400e8 <lll_preempt_calc>
   42192:	b190      	cbz	r0, 421ba <prepare_cb+0x16a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   42194:	4822      	ldr	r0, [pc, #136]	; (42220 <prepare_cb+0x1d0>)
   42196:	4621      	mov	r1, r4
   42198:	f000 fa2a 	bl	425f0 <radio_isr_set>
		radio_disable();
   4219c:	f000 fb22 	bl	427e4 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   421a0:	2000      	movs	r0, #0
   421a2:	b002      	add	sp, #8
   421a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   421a8:	8be1      	ldrh	r1, [r4, #30]
   421aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   421ae:	f104 0218 	add.w	r2, r4, #24
   421b2:	f7fc faa7 	bl	3e704 <lll_chan_sel_2>
   421b6:	4606      	mov	r6, r0
   421b8:	e772      	b.n	420a0 <prepare_cb+0x50>
		ret = lll_prepare_done(lll);
   421ba:	4620      	mov	r0, r4
   421bc:	f7fd ff24 	bl	40008 <lll_prepare_done>
		LL_ASSERT(!ret);
   421c0:	2800      	cmp	r0, #0
   421c2:	d0ed      	beq.n	421a0 <prepare_cb+0x150>
   421c4:	4a17      	ldr	r2, [pc, #92]	; (42224 <prepare_cb+0x1d4>)
   421c6:	4918      	ldr	r1, [pc, #96]	; (42228 <prepare_cb+0x1d8>)
   421c8:	4818      	ldr	r0, [pc, #96]	; (4222c <prepare_cb+0x1dc>)
   421ca:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   421ce:	f007 fa51 	bl	49674 <printk>
   421d2:	4040      	eors	r0, r0
   421d4:	f380 8811 	msr	BASEPRI, r0
   421d8:	f04f 0003 	mov.w	r0, #3
   421dc:	df02      	svc	2
}
   421de:	2000      	movs	r0, #0
   421e0:	b002      	add	sp, #8
   421e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   421e6:	2318      	movs	r3, #24
   421e8:	e7c5      	b.n	42176 <prepare_cb+0x126>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   421ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   421ee:	f7f1 fbe3 	bl	339b8 <memq_peek>
		if (!link) {
   421f2:	2800      	cmp	r0, #0
   421f4:	f47f af69 	bne.w	420ca <prepare_cb+0x7a>
			lll->empty = 1U;
   421f8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   421fc:	f043 0304 	orr.w	r3, r3, #4
   42200:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   42204:	e761      	b.n	420ca <prepare_cb+0x7a>
		radio_isr_set(lll_isr_early_abort, lll);
   42206:	480a      	ldr	r0, [pc, #40]	; (42230 <prepare_cb+0x1e0>)
   42208:	4621      	mov	r1, r4
   4220a:	f000 f9f1 	bl	425f0 <radio_isr_set>
		radio_disable();
   4220e:	f000 fae9 	bl	427e4 <radio_disable>
}
   42212:	2000      	movs	r0, #0
   42214:	b002      	add	sp, #8
   42216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4221a:	bf00      	nop
   4221c:	00041be5 	.word	0x00041be5
   42220:	00040241 	.word	0x00040241
   42224:	0005314c 	.word	0x0005314c
   42228:	0005273c 	.word	0x0005273c
   4222c:	00052460 	.word	0x00052460
   42230:	00040265 	.word	0x00040265

00042234 <lll_periph_prepare>:
{
   42234:	b510      	push	{r4, lr}
   42236:	b082      	sub	sp, #8
   42238:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   4223a:	f7fe f963 	bl	40504 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   4223e:	2800      	cmp	r0, #0
   42240:	db25      	blt.n	4228e <lll_periph_prepare+0x5a>
	lll = p->param;
   42242:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   42244:	8920      	ldrh	r0, [r4, #8]
   42246:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   42248:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   4224a:	fb00 3303 	mla	r3, r0, r3, r3
   4224e:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   42250:	4413      	add	r3, r2
   42252:	4283      	cmp	r3, r0
   42254:	bf28      	it	cs
   42256:	4603      	movcs	r3, r0
   42258:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   4225a:	4a13      	ldr	r2, [pc, #76]	; (422a8 <lll_periph_prepare+0x74>)
   4225c:	4913      	ldr	r1, [pc, #76]	; (422ac <lll_periph_prepare+0x78>)
   4225e:	4814      	ldr	r0, [pc, #80]	; (422b0 <lll_periph_prepare+0x7c>)
   42260:	9400      	str	r4, [sp, #0]
   42262:	2300      	movs	r3, #0
   42264:	f7f5 fe3a 	bl	37edc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   42268:	b108      	cbz	r0, 4226e <lll_periph_prepare+0x3a>
   4226a:	3077      	adds	r0, #119	; 0x77
   4226c:	d101      	bne.n	42272 <lll_periph_prepare+0x3e>
}
   4226e:	b002      	add	sp, #8
   42270:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   42272:	4a10      	ldr	r2, [pc, #64]	; (422b4 <lll_periph_prepare+0x80>)
   42274:	4910      	ldr	r1, [pc, #64]	; (422b8 <lll_periph_prepare+0x84>)
   42276:	4811      	ldr	r0, [pc, #68]	; (422bc <lll_periph_prepare+0x88>)
   42278:	235e      	movs	r3, #94	; 0x5e
   4227a:	f007 f9fb 	bl	49674 <printk>
   4227e:	4040      	eors	r0, r0
   42280:	f380 8811 	msr	BASEPRI, r0
   42284:	f04f 0003 	mov.w	r0, #3
   42288:	df02      	svc	2
}
   4228a:	b002      	add	sp, #8
   4228c:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   4228e:	4a09      	ldr	r2, [pc, #36]	; (422b4 <lll_periph_prepare+0x80>)
   42290:	490b      	ldr	r1, [pc, #44]	; (422c0 <lll_periph_prepare+0x8c>)
   42292:	480a      	ldr	r0, [pc, #40]	; (422bc <lll_periph_prepare+0x88>)
   42294:	234d      	movs	r3, #77	; 0x4d
   42296:	f007 f9ed 	bl	49674 <printk>
   4229a:	4040      	eors	r0, r0
   4229c:	f380 8811 	msr	BASEPRI, r0
   422a0:	f04f 0003 	mov.w	r0, #3
   422a4:	df02      	svc	2
   422a6:	e7cc      	b.n	42242 <lll_periph_prepare+0xe>
   422a8:	00042051 	.word	0x00042051
   422ac:	00041919 	.word	0x00041919
   422b0:	000400cd 	.word	0x000400cd
   422b4:	0005314c 	.word	0x0005314c
   422b8:	00053080 	.word	0x00053080
   422bc:	00052460 	.word	0x00052460
   422c0:	00052fac 	.word	0x00052fac

000422c4 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   422c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   422c6:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   422c8:	89a2      	ldrh	r2, [r4, #12]
   422ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   422ce:	429a      	cmp	r2, r3
{
   422d0:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   422d2:	f000 8090 	beq.w	423f6 <prepare_cb+0x132>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   422d6:	4605      	mov	r5, r0
   422d8:	f7ff fb0a 	bl	418f0 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   422dc:	892b      	ldrh	r3, [r5, #8]
   422de:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   422e0:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   422e2:	441a      	add	r2, r3
   422e4:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   422e6:	4410      	add	r0, r2
   422e8:	b280      	uxth	r0, r0

	/* Update event counter to next value */
	lll->event_counter = (event_counter + 1);
   422ea:	1c41      	adds	r1, r0, #1

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   422ec:	7f63      	ldrb	r3, [r4, #29]
	lll->event_counter = (event_counter + 1);
   422ee:	82e1      	strh	r1, [r4, #22]
	lll->latency_prepare = 0;
   422f0:	2100      	movs	r1, #0
   422f2:	8261      	strh	r1, [r4, #18]
	if (lll->data_chan_sel) {
   422f4:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare + p->lazy;
   422f6:	82a2      	strh	r2, [r4, #20]
	if (lll->data_chan_sel) {
   422f8:	d460      	bmi.n	423bc <prepare_cb+0xf8>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   422fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   422fe:	7fa1      	ldrb	r1, [r4, #30]
   42300:	9300      	str	r3, [sp, #0]
   42302:	f104 001f 	add.w	r0, r4, #31
   42306:	f104 0318 	add.w	r3, r4, #24
   4230a:	f7fc f9b9 	bl	3e680 <lll_chan_sel_1>
   4230e:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42310:	4620      	mov	r0, r4
   42312:	a903      	add	r1, sp, #12
   42314:	f7ff fc00 	bl	41b18 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   42318:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   4231c:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   4231e:	f3c2 0340 	ubfx	r3, r2, #1, #1
   42322:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   42324:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   42328:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   4232c:	780a      	ldrb	r2, [r1, #0]
   4232e:	f022 020c 	bic.w	r2, r2, #12
   42332:	4313      	orrs	r3, r2
   42334:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   42336:	f000 f99d 	bl	42674 <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   4233a:	2000      	movs	r0, #0
   4233c:	f000 f9ce 	bl	426dc <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   42340:	1d20      	adds	r0, r4, #4
   42342:	f000 f9e9 	bl	42718 <radio_aa_set>
   42346:	8923      	ldrh	r3, [r4, #8]
   42348:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   4234a:	f240 605b 	movw	r0, #1627	; 0x65b
   4234e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   42352:	f000 fa85 	bl	42860 <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   42356:	4630      	mov	r0, r6
   42358:	f7fd fed6 	bl	40108 <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   4235c:	9903      	ldr	r1, [sp, #12]
   4235e:	4620      	mov	r0, r4
   42360:	f7ff fbae 	bl	41ac0 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   42364:	4621      	mov	r1, r4
   42366:	4828      	ldr	r0, [pc, #160]	; (42408 <prepare_cb+0x144>)
   42368:	f000 f942 	bl	425f0 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   4236c:	2096      	movs	r0, #150	; 0x96
   4236e:	f000 fbc1 	bl	42af4 <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   42372:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   42376:	f000 0007 	and.w	r0, r0, #7
   4237a:	f000 fa8f 	bl	4289c <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   4237e:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   42380:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   42382:	4638      	mov	r0, r7
   42384:	f7fd fea6 	bl	400d4 <lll_event_offset_get>
   42388:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   4238a:	686a      	ldr	r2, [r5, #4]
   4238c:	f106 0109 	add.w	r1, r6, #9
   42390:	2001      	movs	r0, #1
   42392:	f000 fbbb 	bl	42b0c <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   42396:	f000 fcb9 	bl	42d0c <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   4239a:	89a1      	ldrh	r1, [r4, #12]
   4239c:	3105      	adds	r1, #5
   4239e:	4632      	mov	r2, r6
   423a0:	b2c9      	uxtb	r1, r1
   423a2:	4638      	mov	r0, r7
   423a4:	f7fd fea0 	bl	400e8 <lll_preempt_calc>
   423a8:	b188      	cbz	r0, 423ce <prepare_cb+0x10a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   423aa:	4818      	ldr	r0, [pc, #96]	; (4240c <prepare_cb+0x148>)
   423ac:	4621      	mov	r1, r4
   423ae:	f000 f91f 	bl	425f0 <radio_isr_set>
		radio_disable();
   423b2:	f000 fa17 	bl	427e4 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   423b6:	2000      	movs	r0, #0
   423b8:	b005      	add	sp, #20
   423ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   423bc:	8be1      	ldrh	r1, [r4, #30]
   423be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   423c2:	f104 0218 	add.w	r2, r4, #24
   423c6:	f7fc f99d 	bl	3e704 <lll_chan_sel_2>
   423ca:	4606      	mov	r6, r0
   423cc:	e7a0      	b.n	42310 <prepare_cb+0x4c>
		ret = lll_prepare_done(lll);
   423ce:	4620      	mov	r0, r4
   423d0:	f7fd fe1a 	bl	40008 <lll_prepare_done>
		LL_ASSERT(!ret);
   423d4:	2800      	cmp	r0, #0
   423d6:	d0ee      	beq.n	423b6 <prepare_cb+0xf2>
   423d8:	4a0d      	ldr	r2, [pc, #52]	; (42410 <prepare_cb+0x14c>)
   423da:	490e      	ldr	r1, [pc, #56]	; (42414 <prepare_cb+0x150>)
   423dc:	480e      	ldr	r0, [pc, #56]	; (42418 <prepare_cb+0x154>)
   423de:	23fd      	movs	r3, #253	; 0xfd
   423e0:	f007 f948 	bl	49674 <printk>
   423e4:	4040      	eors	r0, r0
   423e6:	f380 8811 	msr	BASEPRI, r0
   423ea:	f04f 0003 	mov.w	r0, #3
   423ee:	df02      	svc	2
}
   423f0:	2000      	movs	r0, #0
   423f2:	b005      	add	sp, #20
   423f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   423f6:	4809      	ldr	r0, [pc, #36]	; (4241c <prepare_cb+0x158>)
   423f8:	4621      	mov	r1, r4
   423fa:	f000 f8f9 	bl	425f0 <radio_isr_set>
		radio_disable();
   423fe:	f000 f9f1 	bl	427e4 <radio_disable>
}
   42402:	2000      	movs	r0, #0
   42404:	b005      	add	sp, #20
   42406:	bdf0      	pop	{r4, r5, r6, r7, pc}
   42408:	00041a09 	.word	0x00041a09
   4240c:	00040241 	.word	0x00040241
   42410:	000531a0 	.word	0x000531a0
   42414:	0005273c 	.word	0x0005273c
   42418:	00052460 	.word	0x00052460
   4241c:	00040265 	.word	0x00040265

00042420 <lll_central_prepare>:
{
   42420:	b510      	push	{r4, lr}
   42422:	b082      	sub	sp, #8
   42424:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   42426:	f7fe f86d 	bl	40504 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   4242a:	2800      	cmp	r0, #0
   4242c:	db19      	blt.n	42462 <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   4242e:	4a13      	ldr	r2, [pc, #76]	; (4247c <lll_central_prepare+0x5c>)
   42430:	4913      	ldr	r1, [pc, #76]	; (42480 <lll_central_prepare+0x60>)
   42432:	4814      	ldr	r0, [pc, #80]	; (42484 <lll_central_prepare+0x64>)
   42434:	9400      	str	r4, [sp, #0]
   42436:	2300      	movs	r3, #0
   42438:	f7f5 fd50 	bl	37edc <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   4243c:	b108      	cbz	r0, 42442 <lll_central_prepare+0x22>
   4243e:	3077      	adds	r0, #119	; 0x77
   42440:	d101      	bne.n	42446 <lll_central_prepare+0x26>
}
   42442:	b002      	add	sp, #8
   42444:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   42446:	4a10      	ldr	r2, [pc, #64]	; (42488 <lll_central_prepare+0x68>)
   42448:	4910      	ldr	r1, [pc, #64]	; (4248c <lll_central_prepare+0x6c>)
   4244a:	4811      	ldr	r0, [pc, #68]	; (42490 <lll_central_prepare+0x70>)
   4244c:	2351      	movs	r3, #81	; 0x51
   4244e:	f007 f911 	bl	49674 <printk>
   42452:	4040      	eors	r0, r0
   42454:	f380 8811 	msr	BASEPRI, r0
   42458:	f04f 0003 	mov.w	r0, #3
   4245c:	df02      	svc	2
}
   4245e:	b002      	add	sp, #8
   42460:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   42462:	4a09      	ldr	r2, [pc, #36]	; (42488 <lll_central_prepare+0x68>)
   42464:	490b      	ldr	r1, [pc, #44]	; (42494 <lll_central_prepare+0x74>)
   42466:	480a      	ldr	r0, [pc, #40]	; (42490 <lll_central_prepare+0x70>)
   42468:	234c      	movs	r3, #76	; 0x4c
   4246a:	f007 f903 	bl	49674 <printk>
   4246e:	4040      	eors	r0, r0
   42470:	f380 8811 	msr	BASEPRI, r0
   42474:	f04f 0003 	mov.w	r0, #3
   42478:	df02      	svc	2
   4247a:	e7d8      	b.n	4242e <lll_central_prepare+0xe>
   4247c:	000422c5 	.word	0x000422c5
   42480:	00041919 	.word	0x00041919
   42484:	000400cd 	.word	0x000400cd
   42488:	000531a0 	.word	0x000531a0
   4248c:	00053080 	.word	0x00053080
   42490:	00052460 	.word	0x00052460
   42494:	00052fac 	.word	0x00052fac

00042498 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   42498:	4b05      	ldr	r3, [pc, #20]	; (424b0 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   4249a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   4249e:	2100      	movs	r1, #0
   424a0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   424a4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   424a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   424ac:	4770      	bx	lr
   424ae:	bf00      	nop
   424b0:	4000b000 	.word	0x4000b000

000424b4 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   424b4:	4b05      	ldr	r3, [pc, #20]	; (424cc <cntr_start+0x18>)
   424b6:	7818      	ldrb	r0, [r3, #0]
   424b8:	1c42      	adds	r2, r0, #1
   424ba:	701a      	strb	r2, [r3, #0]
   424bc:	b918      	cbnz	r0, 424c6 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   424be:	4b04      	ldr	r3, [pc, #16]	; (424d0 <cntr_start+0x1c>)
   424c0:	2201      	movs	r2, #1
   424c2:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   424c4:	4770      	bx	lr
		return 1;
   424c6:	2001      	movs	r0, #1
}
   424c8:	4770      	bx	lr
   424ca:	bf00      	nop
   424cc:	20006ddf 	.word	0x20006ddf
   424d0:	4000b000 	.word	0x4000b000

000424d4 <cntr_stop>:

uint32_t cntr_stop(void)
{
   424d4:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   424d6:	4c0d      	ldr	r4, [pc, #52]	; (4250c <cntr_stop+0x38>)
   424d8:	7820      	ldrb	r0, [r4, #0]
   424da:	b148      	cbz	r0, 424f0 <cntr_stop+0x1c>

	if (--_refcount) {
   424dc:	3801      	subs	r0, #1
   424de:	b2c0      	uxtb	r0, r0
   424e0:	7020      	strb	r0, [r4, #0]
   424e2:	b918      	cbnz	r0, 424ec <cntr_stop+0x18>
   424e4:	4b0a      	ldr	r3, [pc, #40]	; (42510 <cntr_stop+0x3c>)
   424e6:	2201      	movs	r2, #1
   424e8:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   424ea:	bd10      	pop	{r4, pc}
		return 1;
   424ec:	2001      	movs	r0, #1
}
   424ee:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   424f0:	4a08      	ldr	r2, [pc, #32]	; (42514 <cntr_stop+0x40>)
   424f2:	4909      	ldr	r1, [pc, #36]	; (42518 <cntr_stop+0x44>)
   424f4:	4809      	ldr	r0, [pc, #36]	; (4251c <cntr_stop+0x48>)
   424f6:	232d      	movs	r3, #45	; 0x2d
   424f8:	f007 f8bc 	bl	49674 <printk>
   424fc:	4040      	eors	r0, r0
   424fe:	f380 8811 	msr	BASEPRI, r0
   42502:	f04f 0003 	mov.w	r0, #3
   42506:	df02      	svc	2
	if (--_refcount) {
   42508:	7820      	ldrb	r0, [r4, #0]
   4250a:	e7e7      	b.n	424dc <cntr_stop+0x8>
   4250c:	20006ddf 	.word	0x20006ddf
   42510:	4000b000 	.word	0x4000b000
   42514:	000531f0 	.word	0x000531f0
   42518:	0005323c 	.word	0x0005323c
   4251c:	00052460 	.word	0x00052460

00042520 <cntr_cnt_get>:
     return p_reg->COUNTER;
   42520:	4b01      	ldr	r3, [pc, #4]	; (42528 <cntr_cnt_get+0x8>)
   42522:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   42526:	4770      	bx	lr
   42528:	4000b000 	.word	0x4000b000

0004252c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   4252c:	4b02      	ldr	r3, [pc, #8]	; (42538 <cntr_cmp_set+0xc>)
   4252e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   42532:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   42536:	4770      	bx	lr
   42538:	4000b000 	.word	0x4000b000

0004253c <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4253c:	4b12      	ldr	r3, [pc, #72]	; (42588 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   4253e:	b430      	push	{r4, r5}
   42540:	2101      	movs	r1, #1
   42542:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   42544:	2000      	movs	r0, #0
   42546:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   42548:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   4254c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   42550:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   42554:	6019      	str	r1, [r3, #0]
}
   42556:	e005      	b.n	42564 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   42558:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   4255c:	b932      	cbnz	r2, 4256c <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   4255e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   42562:	b11a      	cbz	r2, 4256c <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   42564:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   42568:	2a00      	cmp	r2, #0
   4256a:	d0f5      	beq.n	42558 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4256c:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   4256e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   42572:	2a00      	cmp	r2, #0
   42574:	d1e7      	bne.n	42546 <do_ecb+0xa>
   42576:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   4257a:	2d00      	cmp	r5, #0
   4257c:	d0e3      	beq.n	42546 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   4257e:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   42580:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   42584:	4770      	bx	lr
   42586:	bf00      	nop
   42588:	4000e000 	.word	0x4000e000

0004258c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   4258c:	b570      	push	{r4, r5, r6, lr}
   4258e:	b08c      	sub	sp, #48	; 0x30
   42590:	460e      	mov	r6, r1
   42592:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   42594:	4601      	mov	r1, r0
   42596:	2210      	movs	r2, #16
   42598:	4668      	mov	r0, sp
{
   4259a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   4259c:	f7f1 f9da 	bl	33954 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   425a0:	2210      	movs	r2, #16
   425a2:	eb0d 0002 	add.w	r0, sp, r2
   425a6:	4631      	mov	r1, r6
   425a8:	f7f1 f9d4 	bl	33954 <mem_rcopy>

	do_ecb(&ecb);
   425ac:	4668      	mov	r0, sp
   425ae:	f7ff ffc5 	bl	4253c <do_ecb>

	if (cipher_text_le) {
   425b2:	b125      	cbz	r5, 425be <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   425b4:	2210      	movs	r2, #16
   425b6:	a908      	add	r1, sp, #32
   425b8:	4628      	mov	r0, r5
   425ba:	f7f1 f9cb 	bl	33954 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   425be:	b124      	cbz	r4, 425ca <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   425c0:	2210      	movs	r2, #16
   425c2:	a908      	add	r1, sp, #32
   425c4:	4620      	mov	r0, r4
   425c6:	f009 f960 	bl	4b88a <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   425ca:	b00c      	add	sp, #48	; 0x30
   425cc:	bd70      	pop	{r4, r5, r6, pc}
   425ce:	bf00      	nop

000425d0 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   425d0:	4b04      	ldr	r3, [pc, #16]	; (425e4 <isr_radio+0x14>)
   425d2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   425d6:	b123      	cbz	r3, 425e2 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   425d8:	4a03      	ldr	r2, [pc, #12]	; (425e8 <isr_radio+0x18>)
   425da:	4b04      	ldr	r3, [pc, #16]	; (425ec <isr_radio+0x1c>)
   425dc:	6810      	ldr	r0, [r2, #0]
   425de:	681b      	ldr	r3, [r3, #0]
   425e0:	4718      	bx	r3
}
   425e2:	4770      	bx	lr
   425e4:	40001000 	.word	0x40001000
   425e8:	20005de4 	.word	0x20005de4
   425ec:	20005de0 	.word	0x20005de0

000425f0 <radio_isr_set>:
{
   425f0:	b538      	push	{r3, r4, r5, lr}
   425f2:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   425f4:	2001      	movs	r0, #1
{
   425f6:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   425f8:	f7ea f856 	bl	2c6a8 <arch_irq_disable>
	isr_cb = cb;
   425fc:	4b08      	ldr	r3, [pc, #32]	; (42620 <radio_isr_set+0x30>)
	isr_cb_param = param;
   425fe:	4a09      	ldr	r2, [pc, #36]	; (42624 <radio_isr_set+0x34>)
	isr_cb = cb;
   42600:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   42602:	4909      	ldr	r1, [pc, #36]	; (42628 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   42604:	4b09      	ldr	r3, [pc, #36]	; (4262c <radio_isr_set+0x3c>)
	isr_cb_param = param;
   42606:	6015      	str	r5, [r2, #0]
   42608:	2010      	movs	r0, #16
   4260a:	2202      	movs	r2, #2
   4260c:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   42610:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   42614:	2001      	movs	r0, #1
}
   42616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   4261a:	f7ea b837 	b.w	2c68c <arch_irq_enable>
   4261e:	bf00      	nop
   42620:	20005de0 	.word	0x20005de0
   42624:	20005de4 	.word	0x20005de4
   42628:	40001000 	.word	0x40001000
   4262c:	e000e100 	.word	0xe000e100

00042630 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   42630:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   42634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   42638:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   4263a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   4263e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   42642:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   42646:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   4264a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   4264e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   42652:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   42656:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   4265a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   4265e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   42662:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   42666:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   4266a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   4266e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   42672:	4770      	bx	lr

00042674 <radio_reset>:
{
   42674:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   42676:	2001      	movs	r0, #1
   42678:	f7ea f816 	bl	2c6a8 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   4267c:	4a0d      	ldr	r2, [pc, #52]	; (426b4 <radio_reset+0x40>)
   4267e:	2100      	movs	r1, #0
   42680:	2301      	movs	r3, #1
   42682:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   42686:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   4268a:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   4268e:	490a      	ldr	r1, [pc, #40]	; (426b8 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   42690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   42694:	f023 0301 	bic.w	r3, r3, #1
   42698:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   4269c:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   426a0:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   426a4:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   426a8:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   426ac:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   426b0:	bd10      	pop	{r4, pc}
   426b2:	bf00      	nop
   426b4:	40001000 	.word	0x40001000
   426b8:	4001f000 	.word	0x4001f000

000426bc <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   426bc:	4b06      	ldr	r3, [pc, #24]	; (426d8 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   426be:	2802      	cmp	r0, #2
   426c0:	bf14      	ite	ne
   426c2:	2203      	movne	r2, #3
   426c4:	2204      	moveq	r2, #4
   426c6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   426ca:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   426ce:	f042 0201 	orr.w	r2, r2, #1
   426d2:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   426d6:	4770      	bx	lr
   426d8:	40001000 	.word	0x40001000

000426dc <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   426dc:	4b01      	ldr	r3, [pc, #4]	; (426e4 <radio_tx_power_set+0x8>)
   426de:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   426e2:	4770      	bx	lr
   426e4:	40001000 	.word	0x40001000

000426e8 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   426e8:	4b01      	ldr	r3, [pc, #4]	; (426f0 <radio_freq_chan_set+0x8>)
   426ea:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   426ee:	4770      	bx	lr
   426f0:	40001000 	.word	0x40001000

000426f4 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   426f4:	4b07      	ldr	r3, [pc, #28]	; (42714 <radio_whiten_iv_set+0x20>)
   426f6:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   426fa:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   426fe:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   42702:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   42706:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   4270a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   4270e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   42712:	4770      	bx	lr
   42714:	40001000 	.word	0x40001000

00042718 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   42718:	4a0a      	ldr	r2, [pc, #40]	; (42744 <radio_aa_set+0x2c>)
   4271a:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   4271c:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   4271e:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   42722:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   42726:	78c3      	ldrb	r3, [r0, #3]
   42728:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   4272c:	7843      	ldrb	r3, [r0, #1]
   4272e:	f890 c002 	ldrb.w	ip, [r0, #2]
   42732:	7801      	ldrb	r1, [r0, #0]
   42734:	041b      	lsls	r3, r3, #16
   42736:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   4273a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   4273e:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   42742:	4770      	bx	lr
   42744:	40001000 	.word	0x40001000

00042748 <radio_pkt_configure>:
	switch (phy) {
   42748:	f3c2 0342 	ubfx	r3, r2, #1, #3
   4274c:	f1a3 0302 	sub.w	r3, r3, #2
   42750:	fab3 f383 	clz	r3, r3
   42754:	095b      	lsrs	r3, r3, #5
   42756:	061b      	lsls	r3, r3, #24
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   42758:	07d2      	lsls	r2, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   4275a:	bf48      	it	mi
   4275c:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   42760:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   42764:	4a09      	ldr	r2, [pc, #36]	; (4278c <radio_pkt_configure+0x44>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   42766:	4318      	orrs	r0, r3
   42768:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   4276c:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   42770:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   42774:	4b06      	ldr	r3, [pc, #24]	; (42790 <radio_pkt_configure+0x48>)
   42776:	4003      	ands	r3, r0
   42778:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   4277c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   42780:	4319      	orrs	r1, r3
   42782:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   42786:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   4278a:	4770      	bx	lr
   4278c:	40001000 	.word	0x40001000
   42790:	fef80000 	.word	0xfef80000

00042794 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   42794:	4b01      	ldr	r3, [pc, #4]	; (4279c <radio_pkt_rx_set+0x8>)
   42796:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   4279a:	4770      	bx	lr
   4279c:	40001000 	.word	0x40001000

000427a0 <radio_pkt_tx_set>:
   427a0:	4b01      	ldr	r3, [pc, #4]	; (427a8 <radio_pkt_tx_set+0x8>)
   427a2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   427a6:	4770      	bx	lr
   427a8:	40001000 	.word	0x40001000

000427ac <radio_tx_ready_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   427ac:	2802      	cmp	r0, #2
}
   427ae:	bf14      	ite	ne
   427b0:	2029      	movne	r0, #41	; 0x29
   427b2:	2028      	moveq	r0, #40	; 0x28
   427b4:	4770      	bx	lr
   427b6:	bf00      	nop

000427b8 <radio_tx_chain_delay_get>:
}
   427b8:	2001      	movs	r0, #1
   427ba:	4770      	bx	lr

000427bc <radio_rx_ready_delay_get>:
}
   427bc:	2029      	movs	r0, #41	; 0x29
   427be:	4770      	bx	lr

000427c0 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   427c0:	2802      	cmp	r0, #2
}
   427c2:	bf14      	ite	ne
   427c4:	200a      	movne	r0, #10
   427c6:	2005      	moveq	r0, #5
   427c8:	4770      	bx	lr
   427ca:	bf00      	nop

000427cc <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   427cc:	4b01      	ldr	r3, [pc, #4]	; (427d4 <radio_rx_enable+0x8>)
   427ce:	2201      	movs	r2, #1
   427d0:	605a      	str	r2, [r3, #4]
}
   427d2:	4770      	bx	lr
   427d4:	40001000 	.word	0x40001000

000427d8 <radio_tx_enable>:
   427d8:	4b01      	ldr	r3, [pc, #4]	; (427e0 <radio_tx_enable+0x8>)
   427da:	2201      	movs	r2, #1
   427dc:	601a      	str	r2, [r3, #0]
}
   427de:	4770      	bx	lr
   427e0:	40001000 	.word	0x40001000

000427e4 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   427e4:	4a07      	ldr	r2, [pc, #28]	; (42804 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   427e6:	4908      	ldr	r1, [pc, #32]	; (42808 <radio_disable+0x24>)
{
   427e8:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   427ea:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   427ec:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   427f0:	2000      	movs	r0, #0
   427f2:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   427f6:	6053      	str	r3, [r2, #4]
}
   427f8:	bc10      	pop	{r4}
   427fa:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   427fc:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   42800:	610b      	str	r3, [r1, #16]
}
   42802:	4770      	bx	lr
   42804:	4001f000 	.word	0x4001f000
   42808:	40001000 	.word	0x40001000

0004280c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   4280c:	4b04      	ldr	r3, [pc, #16]	; (42820 <radio_status_reset+0x14>)
   4280e:	2200      	movs	r2, #0
   42810:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   42814:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   42818:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   4281c:	4770      	bx	lr
   4281e:	bf00      	nop
   42820:	40001000 	.word	0x40001000

00042824 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   42824:	4b03      	ldr	r3, [pc, #12]	; (42834 <radio_is_ready+0x10>)
   42826:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   4282a:	3800      	subs	r0, #0
   4282c:	bf18      	it	ne
   4282e:	2001      	movne	r0, #1
   42830:	4770      	bx	lr
   42832:	bf00      	nop
   42834:	40001000 	.word	0x40001000

00042838 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   42838:	4b03      	ldr	r3, [pc, #12]	; (42848 <radio_is_done+0x10>)
   4283a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   4283e:	3800      	subs	r0, #0
   42840:	bf18      	it	ne
   42842:	2001      	movne	r0, #1
   42844:	4770      	bx	lr
   42846:	bf00      	nop
   42848:	40001000 	.word	0x40001000

0004284c <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   4284c:	4b03      	ldr	r3, [pc, #12]	; (4285c <radio_is_idle+0x10>)
   4284e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   42852:	fab0 f080 	clz	r0, r0
   42856:	0940      	lsrs	r0, r0, #5
   42858:	4770      	bx	lr
   4285a:	bf00      	nop
   4285c:	40001000 	.word	0x40001000

00042860 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   42860:	4b04      	ldr	r3, [pc, #16]	; (42874 <radio_crc_configure+0x14>)
   42862:	f240 1203 	movw	r2, #259	; 0x103
   42866:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   4286a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   4286e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   42872:	4770      	bx	lr
   42874:	40001000 	.word	0x40001000

00042878 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   42878:	4b03      	ldr	r3, [pc, #12]	; (42888 <radio_crc_is_valid+0x10>)
   4287a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   4287e:	3800      	subs	r0, #0
   42880:	bf18      	it	ne
   42882:	2001      	movne	r0, #1
   42884:	4770      	bx	lr
   42886:	bf00      	nop
   42888:	40001000 	.word	0x40001000

0004288c <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   4288c:	4800      	ldr	r0, [pc, #0]	; (42890 <radio_pkt_empty_get+0x4>)
   4288e:	4770      	bx	lr
   42890:	20005cd8 	.word	0x20005cd8

00042894 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   42894:	4800      	ldr	r0, [pc, #0]	; (42898 <radio_pkt_scratch_get+0x4>)
   42896:	4770      	bx	lr
   42898:	20005cdc 	.word	0x20005cdc

0004289c <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   4289c:	4b1d      	ldr	r3, [pc, #116]	; (42914 <radio_switch_complete_and_rx+0x78>)
{
   4289e:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   428a0:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   428a2:	4d1d      	ldr	r5, [pc, #116]	; (42918 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   428a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   428a8:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   428aa:	4e1c      	ldr	r6, [pc, #112]	; (4291c <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   428ac:	4c1c      	ldr	r4, [pc, #112]	; (42920 <radio_switch_complete_and_rx+0x84>)
   428ae:	4f1d      	ldr	r7, [pc, #116]	; (42924 <radio_switch_complete_and_rx+0x88>)
   428b0:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   428b4:	f102 030c 	add.w	r3, r2, #12
   428b8:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   428ba:	00d0      	lsls	r0, r2, #3
   428bc:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   428be:	0091      	lsls	r1, r2, #2
   428c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   428c4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   428c8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   428cc:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   428d0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   428d4:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   428d8:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   428dc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   428e0:	4811      	ldr	r0, [pc, #68]	; (42928 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   428e2:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   428e6:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   428ea:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   428ee:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   428f0:	bf8a      	itet	hi
   428f2:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   428f6:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   428f8:	3b2d      	subhi	r3, #45	; 0x2d
   428fa:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   428fe:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   42900:	4b06      	ldr	r3, [pc, #24]	; (4291c <radio_switch_complete_and_rx+0x80>)
   42902:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   42906:	f002 0201 	and.w	r2, r2, #1
   4290a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   4290e:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   42910:	bcf0      	pop	{r4, r5, r6, r7}
   42912:	4770      	bx	lr
   42914:	40001000 	.word	0x40001000
   42918:	20006de0 	.word	0x20006de0
   4291c:	4001f000 	.word	0x4001f000
   42920:	40009140 	.word	0x40009140
   42924:	4000110c 	.word	0x4000110c
   42928:	40001004 	.word	0x40001004

0004292c <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   4292c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   42930:	4e28      	ldr	r6, [pc, #160]	; (429d4 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   42932:	4c29      	ldr	r4, [pc, #164]	; (429d8 <radio_switch_complete_and_tx+0xac>)
   42934:	4f29      	ldr	r7, [pc, #164]	; (429dc <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42936:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 429e0 <radio_switch_complete_and_tx+0xb4>
   4293a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 429e4 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   4293e:	2303      	movs	r3, #3
   42940:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   42944:	7821      	ldrb	r1, [r4, #0]
   42946:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   4294a:	f101 030c 	add.w	r3, r1, #12
   4294e:	b2db      	uxtb	r3, r3
   42950:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   42952:	00cd      	lsls	r5, r1, #3
   42954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   42958:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   4295c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   42960:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   42964:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42968:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   4296c:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   42970:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42974:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   42978:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   4297c:	2a02      	cmp	r2, #2
   4297e:	bf08      	it	eq
   42980:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   42982:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   42986:	f242 42b8 	movw	r2, #9400	; 0x24b8
   4298a:	f241 3588 	movw	r5, #5000	; 0x1388
   4298e:	2802      	cmp	r0, #2
   42990:	bf08      	it	eq
   42992:	462a      	moveq	r2, r5
   42994:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   42998:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   4299c:	4413      	add	r3, r2
   4299e:	4a12      	ldr	r2, [pc, #72]	; (429e8 <radio_switch_complete_and_tx+0xbc>)
   429a0:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   429a4:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   429a8:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   429ac:	bf85      	ittet	hi
   429ae:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   429b0:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   429b4:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   429b6:	1a1b      	subhi	r3, r3, r0
   429b8:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   429bc:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   429be:	4b08      	ldr	r3, [pc, #32]	; (429e0 <radio_switch_complete_and_tx+0xb4>)
   429c0:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   429c4:	f001 0101 	and.w	r1, r1, #1
   429c8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   429cc:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   429ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   429d2:	bf00      	nop
   429d4:	40001000 	.word	0x40001000
   429d8:	20006de0 	.word	0x20006de0
   429dc:	40009140 	.word	0x40009140
   429e0:	4001f000 	.word	0x4001f000
   429e4:	4000110c 	.word	0x4000110c
   429e8:	10624dd3 	.word	0x10624dd3

000429ec <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   429ec:	4904      	ldr	r1, [pc, #16]	; (42a00 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   429ee:	4b05      	ldr	r3, [pc, #20]	; (42a04 <radio_switch_complete_and_disable+0x18>)
   429f0:	2003      	movs	r0, #3
   429f2:	f44f 6210 	mov.w	r2, #2304	; 0x900
   429f6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   429fa:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   429fe:	4770      	bx	lr
   42a00:	40001000 	.word	0x40001000
   42a04:	4001f000 	.word	0x4001f000

00042a08 <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   42a08:	2000      	movs	r0, #0
   42a0a:	4770      	bx	lr

00042a0c <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   42a0c:	4a03      	ldr	r2, [pc, #12]	; (42a1c <radio_rssi_measure+0x10>)
   42a0e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   42a12:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   42a16:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   42a1a:	4770      	bx	lr
   42a1c:	40001000 	.word	0x40001000

00042a20 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   42a20:	4b01      	ldr	r3, [pc, #4]	; (42a28 <radio_rssi_get+0x8>)
   42a22:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   42a26:	4770      	bx	lr
   42a28:	40001000 	.word	0x40001000

00042a2c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   42a2c:	4b02      	ldr	r3, [pc, #8]	; (42a38 <radio_rssi_status_reset+0xc>)
   42a2e:	2200      	movs	r2, #0
   42a30:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   42a34:	4770      	bx	lr
   42a36:	bf00      	nop
   42a38:	40001000 	.word	0x40001000

00042a3c <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   42a3c:	4b03      	ldr	r3, [pc, #12]	; (42a4c <radio_rssi_is_ready+0x10>)
   42a3e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   42a42:	3800      	subs	r0, #0
   42a44:	bf18      	it	ne
   42a46:	2001      	movne	r0, #1
   42a48:	4770      	bx	lr
   42a4a:	bf00      	nop
   42a4c:	40001000 	.word	0x40001000

00042a50 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   42a50:	b410      	push	{r4}
   42a52:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   42a56:	ea4f 038c 	mov.w	r3, ip, lsl #2
   42a5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   42a5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   42a62:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   42a64:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   42a68:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   42a6c:	8894      	ldrh	r4, [r2, #4]
   42a6e:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   42a72:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   42a76:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   42a7a:	d1ec      	bne.n	42a56 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   42a7c:	4b03      	ldr	r3, [pc, #12]	; (42a8c <radio_filter_configure+0x3c>)
}
   42a7e:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   42a80:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   42a84:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   42a88:	4770      	bx	lr
   42a8a:	bf00      	nop
   42a8c:	40001000 	.word	0x40001000

00042a90 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   42a90:	4a03      	ldr	r2, [pc, #12]	; (42aa0 <radio_filter_disable+0x10>)
   42a92:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   42a96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   42a9a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   42a9e:	4770      	bx	lr
   42aa0:	40001000 	.word	0x40001000

00042aa4 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   42aa4:	4b02      	ldr	r3, [pc, #8]	; (42ab0 <radio_filter_status_reset+0xc>)
   42aa6:	2200      	movs	r2, #0
   42aa8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   42aac:	4770      	bx	lr
   42aae:	bf00      	nop
   42ab0:	40001000 	.word	0x40001000

00042ab4 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   42ab4:	4b03      	ldr	r3, [pc, #12]	; (42ac4 <radio_filter_has_match+0x10>)
   42ab6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   42aba:	3800      	subs	r0, #0
   42abc:	bf18      	it	ne
   42abe:	2001      	movne	r0, #1
   42ac0:	4770      	bx	lr
   42ac2:	bf00      	nop
   42ac4:	40001000 	.word	0x40001000

00042ac8 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   42ac8:	4b01      	ldr	r3, [pc, #4]	; (42ad0 <radio_filter_match_get+0x8>)
   42aca:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   42ace:	4770      	bx	lr
   42ad0:	40001000 	.word	0x40001000

00042ad4 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   42ad4:	4904      	ldr	r1, [pc, #16]	; (42ae8 <radio_tmr_status_reset+0x14>)
   42ad6:	4b05      	ldr	r3, [pc, #20]	; (42aec <radio_tmr_status_reset+0x18>)
   42ad8:	4a05      	ldr	r2, [pc, #20]	; (42af0 <radio_tmr_status_reset+0x1c>)
   42ada:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   42ade:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   42ae2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   42ae6:	4770      	bx	lr
   42ae8:	4000b000 	.word	0x4000b000
   42aec:	4001f000 	.word	0x4001f000
   42af0:	0e7000c0 	.word	0x0e7000c0

00042af4 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   42af4:	4b03      	ldr	r3, [pc, #12]	; (42b04 <radio_tmr_tifs_set+0x10>)
   42af6:	4a04      	ldr	r2, [pc, #16]	; (42b08 <radio_tmr_tifs_set+0x14>)
   42af8:	781b      	ldrb	r3, [r3, #0]
   42afa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   42afe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   42b02:	4770      	bx	lr
   42b04:	20006de0 	.word	0x20006de0
   42b08:	40009000 	.word	0x40009000

00042b0c <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   42b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   42b10:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   42b14:	4d31      	ldr	r5, [pc, #196]	; (42bdc <radio_tmr_start+0xd0>)
   42b16:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   42b1a:	42ab      	cmp	r3, r5
{
   42b1c:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   42b1e:	d906      	bls.n	42b2e <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   42b20:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   42b24:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   42b28:	3901      	subs	r1, #1
		remainder += 30517578UL;
   42b2a:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42b2e:	4b2c      	ldr	r3, [pc, #176]	; (42be0 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   42b30:	482c      	ldr	r0, [pc, #176]	; (42be4 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   42b32:	4d2d      	ldr	r5, [pc, #180]	; (42be8 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42b34:	4e2d      	ldr	r6, [pc, #180]	; (42bec <radio_tmr_start+0xe0>)
   42b36:	2701      	movs	r7, #1
   42b38:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   42b3a:	2700      	movs	r7, #0
   42b3c:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   42b40:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   42b44:	2704      	movs	r7, #4
   42b46:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   42b4a:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   42b4c:	2702      	movs	r7, #2
   42b4e:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   42b52:	4a27      	ldr	r2, [pc, #156]	; (42bf0 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   42b54:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   42b58:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   42b5c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   42b60:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   42b64:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42b66:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42b6a:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   42b6e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   42b72:	b364      	cbz	r4, 42bce <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   42b74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   42b78:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   42b7c:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   42b80:	4b1b      	ldr	r3, [pc, #108]	; (42bf0 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42b82:	4a1c      	ldr	r2, [pc, #112]	; (42bf4 <radio_tmr_start+0xe8>)
   42b84:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   42b88:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   42b8a:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42b8c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 42bf8 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42b90:	f8df e068 	ldr.w	lr, [pc, #104]	; 42bfc <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42b94:	f8df c068 	ldr.w	ip, [pc, #104]	; 42c00 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42b98:	4f1a      	ldr	r7, [pc, #104]	; (42c04 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42b9a:	4e1b      	ldr	r6, [pc, #108]	; (42c08 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42b9c:	4d1b      	ldr	r5, [pc, #108]	; (42c0c <radio_tmr_start+0x100>)
   42b9e:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   42ba0:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   42ba4:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   42ba8:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   42bac:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   42bb0:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42bb2:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42bb6:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42bba:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42bbe:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42bc2:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42bc6:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   42bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   42bce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   42bd2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   42bd6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   42bda:	e7d1      	b.n	42b80 <radio_tmr_start+0x74>
   42bdc:	7ff0bdbf 	.word	0x7ff0bdbf
   42be0:	40008000 	.word	0x40008000
   42be4:	431bde83 	.word	0x431bde83
   42be8:	4000b000 	.word	0x4000b000
   42bec:	4000b148 	.word	0x4000b148
   42bf0:	4001f000 	.word	0x4001f000
   42bf4:	40009000 	.word	0x40009000
   42bf8:	4000110c 	.word	0x4000110c
   42bfc:	4000900c 	.word	0x4000900c
   42c00:	40009140 	.word	0x40009140
   42c04:	4001f004 	.word	0x4001f004
   42c08:	40009144 	.word	0x40009144
   42c0c:	4001f00c 	.word	0x4001f00c

00042c10 <radio_tmr_start_tick>:
   42c10:	4a15      	ldr	r2, [pc, #84]	; (42c68 <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   42c12:	b430      	push	{r4, r5}
   42c14:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   42c16:	4c15      	ldr	r4, [pc, #84]	; (42c6c <radio_tmr_start_tick+0x5c>)
   42c18:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   42c1a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   42c1e:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   42c20:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42c24:	4b12      	ldr	r3, [pc, #72]	; (42c70 <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   42c26:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   42c2a:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   42c2e:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42c30:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   42c34:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42c38:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   42c3c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   42c40:	b958      	cbnz	r0, 42c5a <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   42c42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   42c46:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   42c4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   42c4e:	4a08      	ldr	r2, [pc, #32]	; (42c70 <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   42c50:	2001      	movs	r0, #1
   42c52:	bc30      	pop	{r4, r5}
   42c54:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   42c58:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   42c5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   42c5e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   42c62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   42c66:	e7f2      	b.n	42c4e <radio_tmr_start_tick+0x3e>
   42c68:	40008000 	.word	0x40008000
   42c6c:	4000b000 	.word	0x4000b000
   42c70:	4001f000 	.word	0x4001f000

00042c74 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   42c74:	4b01      	ldr	r3, [pc, #4]	; (42c7c <radio_tmr_start_get+0x8>)
   42c76:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   42c7a:	4770      	bx	lr
   42c7c:	4000b000 	.word	0x4000b000

00042c80 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42c80:	4903      	ldr	r1, [pc, #12]	; (42c90 <radio_tmr_stop+0x10>)
   42c82:	4a04      	ldr	r2, [pc, #16]	; (42c94 <radio_tmr_stop+0x14>)
   42c84:	2301      	movs	r3, #1
   42c86:	604b      	str	r3, [r1, #4]
   42c88:	610b      	str	r3, [r1, #16]
   42c8a:	6053      	str	r3, [r2, #4]
   42c8c:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   42c8e:	4770      	bx	lr
   42c90:	40008000 	.word	0x40008000
   42c94:	40009000 	.word	0x40009000

00042c98 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   42c98:	4904      	ldr	r1, [pc, #16]	; (42cac <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   42c9a:	4b05      	ldr	r3, [pc, #20]	; (42cb0 <radio_tmr_hcto_configure+0x18>)
   42c9c:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   42ca0:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   42ca4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   42ca8:	4770      	bx	lr
   42caa:	bf00      	nop
   42cac:	40008000 	.word	0x40008000
   42cb0:	4001f000 	.word	0x4001f000

00042cb4 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42cb4:	4b05      	ldr	r3, [pc, #20]	; (42ccc <radio_tmr_aa_capture+0x18>)
   42cb6:	4806      	ldr	r0, [pc, #24]	; (42cd0 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42cb8:	4906      	ldr	r1, [pc, #24]	; (42cd4 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   42cba:	4a07      	ldr	r2, [pc, #28]	; (42cd8 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   42cbc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   42cc0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   42cc4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   42cc8:	4770      	bx	lr
   42cca:	bf00      	nop
   42ccc:	4001f000 	.word	0x4001f000
   42cd0:	40001100 	.word	0x40001100
   42cd4:	40008040 	.word	0x40008040
   42cd8:	04000080 	.word	0x04000080

00042cdc <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   42cdc:	4b01      	ldr	r3, [pc, #4]	; (42ce4 <radio_tmr_aa_get+0x8>)
   42cde:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   42ce2:	4770      	bx	lr
   42ce4:	40008000 	.word	0x40008000

00042ce8 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   42ce8:	4b01      	ldr	r3, [pc, #4]	; (42cf0 <radio_tmr_aa_save+0x8>)
   42cea:	6018      	str	r0, [r3, #0]
}
   42cec:	4770      	bx	lr
   42cee:	bf00      	nop
   42cf0:	20005de8 	.word	0x20005de8

00042cf4 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   42cf4:	4b01      	ldr	r3, [pc, #4]	; (42cfc <radio_tmr_aa_restore+0x8>)
}
   42cf6:	6818      	ldr	r0, [r3, #0]
   42cf8:	4770      	bx	lr
   42cfa:	bf00      	nop
   42cfc:	20005de8 	.word	0x20005de8

00042d00 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   42d00:	4b01      	ldr	r3, [pc, #4]	; (42d08 <radio_tmr_ready_get+0x8>)
   42d02:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   42d06:	4770      	bx	lr
   42d08:	40008000 	.word	0x40008000

00042d0c <radio_tmr_end_capture>:
   42d0c:	4b02      	ldr	r3, [pc, #8]	; (42d18 <radio_tmr_end_capture+0xc>)
   42d0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   42d12:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   42d16:	4770      	bx	lr
   42d18:	4001f000 	.word	0x4001f000

00042d1c <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   42d1c:	4b01      	ldr	r3, [pc, #4]	; (42d24 <radio_tmr_end_get+0x8>)
   42d1e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   42d22:	4770      	bx	lr
   42d24:	40008000 	.word	0x40008000

00042d28 <radio_tmr_tifs_base_get>:
   42d28:	4b01      	ldr	r3, [pc, #4]	; (42d30 <radio_tmr_tifs_base_get+0x8>)
   42d2a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   42d2e:	4770      	bx	lr
   42d30:	40008000 	.word	0x40008000

00042d34 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   42d34:	4b17      	ldr	r3, [pc, #92]	; (42d94 <radio_ccm_rx_pkt_set+0x60>)
{
   42d36:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   42d38:	2400      	movs	r4, #0
{
   42d3a:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   42d3c:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   42d3e:	4816      	ldr	r0, [pc, #88]	; (42d98 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   42d40:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   42d44:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   42d48:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   42d4c:	4e13      	ldr	r6, [pc, #76]	; (42d9c <radio_ccm_rx_pkt_set+0x68>)
   42d4e:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   42d50:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   42d54:	4812      	ldr	r0, [pc, #72]	; (42da0 <radio_ccm_rx_pkt_set+0x6c>)
   42d56:	2902      	cmp	r1, #2
   42d58:	bf08      	it	eq
   42d5a:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   42d5c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   42d60:	4810      	ldr	r0, [pc, #64]	; (42da4 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   42d62:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   42d66:	4910      	ldr	r1, [pc, #64]	; (42da8 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   42d68:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   42d6c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   42d70:	4a0e      	ldr	r2, [pc, #56]	; (42dac <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   42d72:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   42d76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   42d7a:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   42d7e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   42d82:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   42d86:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   42d8a:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   42d8c:	bc70      	pop	{r4, r5, r6}
   42d8e:	601a      	str	r2, [r3, #0]
   42d90:	4770      	bx	lr
   42d92:	bf00      	nop
   42d94:	4000f000 	.word	0x4000f000
   42d98:	40001000 	.word	0x40001000
   42d9c:	01010001 	.word	0x01010001
   42da0:	01000001 	.word	0x01000001
   42da4:	20005cdc 	.word	0x20005cdc
   42da8:	20005bcc 	.word	0x20005bcc
   42dac:	4001f000 	.word	0x4001f000

00042db0 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   42db0:	4b0f      	ldr	r3, [pc, #60]	; (42df0 <radio_ccm_tx_pkt_set+0x40>)
{
   42db2:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   42db4:	2200      	movs	r2, #0
{
   42db6:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   42db8:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   42dba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   42dbe:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   42dc2:	480c      	ldr	r0, [pc, #48]	; (42df4 <radio_ccm_tx_pkt_set+0x44>)
   42dc4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   42dc8:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   42dcc:	480a      	ldr	r0, [pc, #40]	; (42df8 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   42dce:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   42dd2:	4c0a      	ldr	r4, [pc, #40]	; (42dfc <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   42dd4:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   42dd8:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   42dda:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   42dde:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   42de2:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   42de4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   42de8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   42dec:	6019      	str	r1, [r3, #0]
}
   42dee:	4770      	bx	lr
   42df0:	4000f000 	.word	0x4000f000
   42df4:	01010000 	.word	0x01010000
   42df8:	20005cdc 	.word	0x20005cdc
   42dfc:	20005bcc 	.word	0x20005bcc

00042e00 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   42e00:	4a0e      	ldr	r2, [pc, #56]	; (42e3c <radio_ccm_is_done+0x3c>)
   42e02:	2302      	movs	r3, #2
   42e04:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   42e08:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   42e0c:	b933      	cbnz	r3, 42e1c <radio_ccm_is_done+0x1c>
		__WFE();
   42e0e:	bf20      	wfe
		__SEV();
   42e10:	bf40      	sev
		__WFE();
   42e12:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   42e14:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   42e18:	2b00      	cmp	r3, #0
   42e1a:	d0f8      	beq.n	42e0e <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   42e1c:	4b07      	ldr	r3, [pc, #28]	; (42e3c <radio_ccm_is_done+0x3c>)
   42e1e:	4a08      	ldr	r2, [pc, #32]	; (42e40 <radio_ccm_is_done+0x40>)
   42e20:	2002      	movs	r0, #2
   42e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   42e26:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   42e2a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   42e2e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   42e32:	fab0 f080 	clz	r0, r0
   42e36:	0940      	lsrs	r0, r0, #5
   42e38:	4770      	bx	lr
   42e3a:	bf00      	nop
   42e3c:	4000f000 	.word	0x4000f000
   42e40:	e000e100 	.word	0xe000e100

00042e44 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   42e44:	4b03      	ldr	r3, [pc, #12]	; (42e54 <radio_ccm_mic_is_valid+0x10>)
   42e46:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   42e4a:	3800      	subs	r0, #0
   42e4c:	bf18      	it	ne
   42e4e:	2001      	movne	r0, #1
   42e50:	4770      	bx	lr
   42e52:	bf00      	nop
   42e54:	4000f000 	.word	0x4000f000

00042e58 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   42e58:	4a15      	ldr	r2, [pc, #84]	; (42eb0 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   42e5a:	4b16      	ldr	r3, [pc, #88]	; (42eb4 <radio_ar_configure+0x5c>)
{
   42e5c:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   42e5e:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   42e62:	4e15      	ldr	r6, [pc, #84]	; (42eb8 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   42e64:	2703      	movs	r7, #3
   42e66:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   42e6a:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   42e6c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   42e70:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   42e72:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   42e76:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   42e78:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   42e7c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   42e80:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   42e84:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   42e88:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   42e8c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   42e90:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   42e94:	4909      	ldr	r1, [pc, #36]	; (42ebc <radio_ar_configure+0x64>)
   42e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   42e9a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   42e9e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   42ea2:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   42ea6:	bcf0      	pop	{r4, r5, r6, r7}
   42ea8:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   42eac:	4770      	bx	lr
   42eae:	bf00      	nop
   42eb0:	40001000 	.word	0x40001000
   42eb4:	4000f000 	.word	0x4000f000
   42eb8:	20005bc8 	.word	0x20005bc8
   42ebc:	4001f000 	.word	0x4001f000

00042ec0 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   42ec0:	4b01      	ldr	r3, [pc, #4]	; (42ec8 <radio_ar_match_get+0x8>)
   42ec2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   42ec6:	4770      	bx	lr
   42ec8:	4000f000 	.word	0x4000f000

00042ecc <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   42ecc:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   42ece:	4807      	ldr	r0, [pc, #28]	; (42eec <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   42ed0:	4c07      	ldr	r4, [pc, #28]	; (42ef0 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   42ed2:	4a08      	ldr	r2, [pc, #32]	; (42ef4 <radio_ar_status_reset+0x28>)
   42ed4:	2300      	movs	r3, #0
   42ed6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   42eda:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   42ede:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   42ee2:	bc10      	pop	{r4}
   42ee4:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   42ee8:	4770      	bx	lr
   42eea:	bf00      	nop
   42eec:	4000f000 	.word	0x4000f000
   42ef0:	40001000 	.word	0x40001000
   42ef4:	4001f000 	.word	0x4001f000

00042ef8 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   42ef8:	4b08      	ldr	r3, [pc, #32]	; (42f1c <radio_ar_has_match+0x24>)
   42efa:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   42efe:	b160      	cbz	r0, 42f1a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   42f00:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   42f04:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   42f08:	b138      	cbz	r0, 42f1a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   42f0a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   42f0e:	b120      	cbz	r0, 42f1a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   42f10:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   42f14:	fab0 f080 	clz	r0, r0
   42f18:	0940      	lsrs	r0, r0, #5
}
   42f1a:	4770      	bx	lr
   42f1c:	40001000 	.word	0x40001000

00042f20 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   42f20:	2902      	cmp	r1, #2
{
   42f22:	b510      	push	{r4, lr}
   42f24:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   42f26:	d00b      	beq.n	42f40 <mayfly_enable_cb+0x20>
   42f28:	4a0a      	ldr	r2, [pc, #40]	; (42f54 <mayfly_enable_cb+0x34>)
   42f2a:	490b      	ldr	r1, [pc, #44]	; (42f58 <mayfly_enable_cb+0x38>)
   42f2c:	480b      	ldr	r0, [pc, #44]	; (42f5c <mayfly_enable_cb+0x3c>)
   42f2e:	231e      	movs	r3, #30
   42f30:	f006 fba0 	bl	49674 <printk>
   42f34:	4040      	eors	r0, r0
   42f36:	f380 8811 	msr	BASEPRI, r0
   42f3a:	f04f 0003 	mov.w	r0, #3
   42f3e:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   42f40:	200b      	movs	r0, #11
	if (enable) {
   42f42:	b11c      	cbz	r4, 42f4c <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   42f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   42f48:	f7e9 bba0 	b.w	2c68c <arch_irq_enable>
}
   42f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   42f50:	f7e9 bbaa 	b.w	2c6a8 <arch_irq_disable>
   42f54:	00053248 	.word	0x00053248
   42f58:	00053298 	.word	0x00053298
   42f5c:	00052460 	.word	0x00052460

00042f60 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   42f60:	b129      	cbz	r1, 42f6e <mayfly_is_enabled+0xe>
   42f62:	3901      	subs	r1, #1
   42f64:	2901      	cmp	r1, #1
   42f66:	d805      	bhi.n	42f74 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   42f68:	200b      	movs	r0, #11
   42f6a:	f7e9 bbb1 	b.w	2c6d0 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   42f6e:	2018      	movs	r0, #24
   42f70:	f7e9 bbae 	b.w	2c6d0 <arch_irq_is_enabled>
{
   42f74:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   42f76:	4a07      	ldr	r2, [pc, #28]	; (42f94 <mayfly_is_enabled+0x34>)
   42f78:	4907      	ldr	r1, [pc, #28]	; (42f98 <mayfly_is_enabled+0x38>)
   42f7a:	4808      	ldr	r0, [pc, #32]	; (42f9c <mayfly_is_enabled+0x3c>)
   42f7c:	2336      	movs	r3, #54	; 0x36
   42f7e:	f006 fb79 	bl	49674 <printk>
   42f82:	4040      	eors	r0, r0
   42f84:	f380 8811 	msr	BASEPRI, r0
   42f88:	f04f 0003 	mov.w	r0, #3
   42f8c:	df02      	svc	2
		break;
	}

	return 0;
}
   42f8e:	2000      	movs	r0, #0
   42f90:	bd08      	pop	{r3, pc}
   42f92:	bf00      	nop
   42f94:	00053248 	.word	0x00053248
   42f98:	000524c0 	.word	0x000524c0
   42f9c:	00052460 	.word	0x00052460

00042fa0 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   42fa0:	4288      	cmp	r0, r1
   42fa2:	d00b      	beq.n	42fbc <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   42fa4:	2801      	cmp	r0, #1
   42fa6:	d003      	beq.n	42fb0 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   42fa8:	2802      	cmp	r0, #2
   42faa:	d009      	beq.n	42fc0 <mayfly_prio_is_equal+0x20>
   42fac:	2000      	movs	r0, #0
#endif
	       0;
}
   42fae:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   42fb0:	f1a1 0002 	sub.w	r0, r1, #2
   42fb4:	fab0 f080 	clz	r0, r0
   42fb8:	0940      	lsrs	r0, r0, #5
   42fba:	4770      	bx	lr
   42fbc:	2001      	movs	r0, #1
   42fbe:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   42fc0:	f1a1 0001 	sub.w	r0, r1, #1
   42fc4:	fab0 f080 	clz	r0, r0
   42fc8:	0940      	lsrs	r0, r0, #5
   42fca:	4770      	bx	lr

00042fcc <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   42fcc:	2901      	cmp	r1, #1
{
   42fce:	b508      	push	{r3, lr}
	switch (callee_id) {
   42fd0:	d00f      	beq.n	42ff2 <mayfly_pend+0x26>
   42fd2:	2902      	cmp	r1, #2
   42fd4:	d00d      	beq.n	42ff2 <mayfly_pend+0x26>
   42fd6:	b191      	cbz	r1, 42ffe <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   42fd8:	4a0c      	ldr	r2, [pc, #48]	; (4300c <mayfly_pend+0x40>)
   42fda:	490d      	ldr	r1, [pc, #52]	; (43010 <mayfly_pend+0x44>)
   42fdc:	480d      	ldr	r0, [pc, #52]	; (43014 <mayfly_pend+0x48>)
   42fde:	2367      	movs	r3, #103	; 0x67
   42fe0:	f006 fb48 	bl	49674 <printk>
   42fe4:	4040      	eors	r0, r0
   42fe6:	f380 8811 	msr	BASEPRI, r0
   42fea:	f04f 0003 	mov.w	r0, #3
   42fee:	df02      	svc	2
		break;
	}
}
   42ff0:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   42ff2:	4b09      	ldr	r3, [pc, #36]	; (43018 <mayfly_pend+0x4c>)
   42ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   42ff8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   42ffc:	bd08      	pop	{r3, pc}
   42ffe:	4b06      	ldr	r3, [pc, #24]	; (43018 <mayfly_pend+0x4c>)
   43000:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   43004:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   43008:	bd08      	pop	{r3, pc}
   4300a:	bf00      	nop
   4300c:	00053248 	.word	0x00053248
   43010:	000524c0 	.word	0x000524c0
   43014:	00052460 	.word	0x00052460
   43018:	e000e100 	.word	0xe000e100

0004301c <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   4301c:	2803      	cmp	r0, #3
{
   4301e:	b510      	push	{r4, lr}
   43020:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   43022:	d804      	bhi.n	4302e <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   43024:	4b11      	ldr	r3, [pc, #68]	; (4306c <hal_ticker_instance0_caller_id_get+0x50>)
   43026:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   43028:	b18c      	cbz	r4, 4304e <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   4302a:	4620      	mov	r0, r4
   4302c:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   4302e:	4a10      	ldr	r2, [pc, #64]	; (43070 <hal_ticker_instance0_caller_id_get+0x54>)
   43030:	4910      	ldr	r1, [pc, #64]	; (43074 <hal_ticker_instance0_caller_id_get+0x58>)
   43032:	4811      	ldr	r0, [pc, #68]	; (43078 <hal_ticker_instance0_caller_id_get+0x5c>)
   43034:	232b      	movs	r3, #43	; 0x2b
   43036:	f006 fb1d 	bl	49674 <printk>
   4303a:	4040      	eors	r0, r0
   4303c:	f380 8811 	msr	BASEPRI, r0
   43040:	f04f 0003 	mov.w	r0, #3
   43044:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   43046:	4b09      	ldr	r3, [pc, #36]	; (4306c <hal_ticker_instance0_caller_id_get+0x50>)
   43048:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   4304a:	2c00      	cmp	r4, #0
   4304c:	d1ed      	bne.n	4302a <hal_ticker_instance0_caller_id_get+0xe>
   4304e:	4a08      	ldr	r2, [pc, #32]	; (43070 <hal_ticker_instance0_caller_id_get+0x54>)
   43050:	490a      	ldr	r1, [pc, #40]	; (4307c <hal_ticker_instance0_caller_id_get+0x60>)
   43052:	4809      	ldr	r0, [pc, #36]	; (43078 <hal_ticker_instance0_caller_id_get+0x5c>)
   43054:	232e      	movs	r3, #46	; 0x2e
   43056:	f006 fb0d 	bl	49674 <printk>
   4305a:	4040      	eors	r0, r0
   4305c:	f380 8811 	msr	BASEPRI, r0
   43060:	f04f 0003 	mov.w	r0, #3
   43064:	df02      	svc	2
}
   43066:	4620      	mov	r0, r4
   43068:	bd10      	pop	{r4, pc}
   4306a:	bf00      	nop
   4306c:	00053328 	.word	0x00053328
   43070:	000532a8 	.word	0x000532a8
   43074:	000532f8 	.word	0x000532f8
   43078:	00052460 	.word	0x00052460
   4307c:	00053318 	.word	0x00053318

00043080 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   43080:	3801      	subs	r0, #1
{
   43082:	b510      	push	{r4, lr}
   43084:	461c      	mov	r4, r3
	switch (caller_id) {
   43086:	2804      	cmp	r0, #4
   43088:	f200 8082 	bhi.w	43190 <hal_ticker_instance0_sched+0x110>
   4308c:	e8df f000 	tbb	[pc, r0]
   43090:	3f302112 	.word	0x3f302112
   43094:	03          	.byte	0x03
   43095:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   43096:	2904      	cmp	r1, #4
   43098:	d04a      	beq.n	43130 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   4309a:	4a44      	ldr	r2, [pc, #272]	; (431ac <hal_ticker_instance0_sched+0x12c>)
   4309c:	4944      	ldr	r1, [pc, #272]	; (431b0 <hal_ticker_instance0_sched+0x130>)
   4309e:	4845      	ldr	r0, [pc, #276]	; (431b4 <hal_ticker_instance0_sched+0x134>)
   430a0:	23ba      	movs	r3, #186	; 0xba
   430a2:	f006 fae7 	bl	49674 <printk>
   430a6:	4040      	eors	r0, r0
   430a8:	f380 8811 	msr	BASEPRI, r0
   430ac:	f04f 0003 	mov.w	r0, #3
   430b0:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   430b2:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   430b4:	2904      	cmp	r1, #4
   430b6:	d043      	beq.n	43140 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   430b8:	4a3c      	ldr	r2, [pc, #240]	; (431ac <hal_ticker_instance0_sched+0x12c>)
   430ba:	493d      	ldr	r1, [pc, #244]	; (431b0 <hal_ticker_instance0_sched+0x130>)
   430bc:	483d      	ldr	r0, [pc, #244]	; (431b4 <hal_ticker_instance0_sched+0x134>)
   430be:	234e      	movs	r3, #78	; 0x4e
   430c0:	f006 fad8 	bl	49674 <printk>
   430c4:	4040      	eors	r0, r0
   430c6:	f380 8811 	msr	BASEPRI, r0
   430ca:	f04f 0003 	mov.w	r0, #3
   430ce:	df02      	svc	2
}
   430d0:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   430d2:	2903      	cmp	r1, #3
   430d4:	d03c      	beq.n	43150 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   430d6:	4a35      	ldr	r2, [pc, #212]	; (431ac <hal_ticker_instance0_sched+0x12c>)
   430d8:	4935      	ldr	r1, [pc, #212]	; (431b0 <hal_ticker_instance0_sched+0x130>)
   430da:	4836      	ldr	r0, [pc, #216]	; (431b4 <hal_ticker_instance0_sched+0x134>)
   430dc:	2365      	movs	r3, #101	; 0x65
   430de:	f006 fac9 	bl	49674 <printk>
   430e2:	4040      	eors	r0, r0
   430e4:	f380 8811 	msr	BASEPRI, r0
   430e8:	f04f 0003 	mov.w	r0, #3
   430ec:	df02      	svc	2
}
   430ee:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   430f0:	2904      	cmp	r1, #4
   430f2:	d035      	beq.n	43160 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   430f4:	4a2d      	ldr	r2, [pc, #180]	; (431ac <hal_ticker_instance0_sched+0x12c>)
   430f6:	492e      	ldr	r1, [pc, #184]	; (431b0 <hal_ticker_instance0_sched+0x130>)
   430f8:	482e      	ldr	r0, [pc, #184]	; (431b4 <hal_ticker_instance0_sched+0x134>)
   430fa:	237c      	movs	r3, #124	; 0x7c
   430fc:	f006 faba 	bl	49674 <printk>
   43100:	4040      	eors	r0, r0
   43102:	f380 8811 	msr	BASEPRI, r0
   43106:	f04f 0003 	mov.w	r0, #3
   4310a:	df02      	svc	2
}
   4310c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   4310e:	2903      	cmp	r1, #3
   43110:	d036      	beq.n	43180 <hal_ticker_instance0_sched+0x100>
   43112:	2904      	cmp	r1, #4
   43114:	d02c      	beq.n	43170 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   43116:	4a25      	ldr	r2, [pc, #148]	; (431ac <hal_ticker_instance0_sched+0x12c>)
   43118:	4925      	ldr	r1, [pc, #148]	; (431b0 <hal_ticker_instance0_sched+0x130>)
   4311a:	4826      	ldr	r0, [pc, #152]	; (431b4 <hal_ticker_instance0_sched+0x134>)
   4311c:	23a2      	movs	r3, #162	; 0xa2
   4311e:	f006 faa9 	bl	49674 <printk>
   43122:	4040      	eors	r0, r0
   43124:	f380 8811 	msr	BASEPRI, r0
   43128:	f04f 0003 	mov.w	r0, #3
   4312c:	df02      	svc	2
}
   4312e:	bd10      	pop	{r4, pc}
			m.param = instance;
   43130:	4b21      	ldr	r3, [pc, #132]	; (431b8 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   43132:	2102      	movs	r1, #2
			m.param = instance;
   43134:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   43136:	2003      	movs	r0, #3
}
   43138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   4313c:	f7f0 bca8 	b.w	33a90 <mayfly_enqueue>
			m.param = instance;
   43140:	4b1e      	ldr	r3, [pc, #120]	; (431bc <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   43142:	2102      	movs	r1, #2
			m.param = instance;
   43144:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   43146:	2000      	movs	r0, #0
}
   43148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   4314c:	f7f0 bca0 	b.w	33a90 <mayfly_enqueue>
			m.param = instance;
   43150:	4b1b      	ldr	r3, [pc, #108]	; (431c0 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   43152:	2101      	movs	r1, #1
			m.param = instance;
   43154:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   43156:	4608      	mov	r0, r1
}
   43158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   4315c:	f7f0 bc98 	b.w	33a90 <mayfly_enqueue>
			m.param = instance;
   43160:	4b18      	ldr	r3, [pc, #96]	; (431c4 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   43162:	2102      	movs	r1, #2
			m.param = instance;
   43164:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   43166:	2001      	movs	r0, #1
}
   43168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   4316c:	f7f0 bc90 	b.w	33a90 <mayfly_enqueue>
			m.param = instance;
   43170:	4b15      	ldr	r3, [pc, #84]	; (431c8 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43172:	2102      	movs	r1, #2
			m.param = instance;
   43174:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43176:	4608      	mov	r0, r1
}
   43178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   4317c:	f7f0 bc88 	b.w	33a90 <mayfly_enqueue>
			m.param = instance;
   43180:	4b12      	ldr	r3, [pc, #72]	; (431cc <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43182:	2101      	movs	r1, #1
			m.param = instance;
   43184:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43186:	2002      	movs	r0, #2
}
   43188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   4318c:	f7f0 bc80 	b.w	33a90 <mayfly_enqueue>
		LL_ASSERT(0);
   43190:	4a06      	ldr	r2, [pc, #24]	; (431ac <hal_ticker_instance0_sched+0x12c>)
   43192:	4907      	ldr	r1, [pc, #28]	; (431b0 <hal_ticker_instance0_sched+0x130>)
   43194:	4807      	ldr	r0, [pc, #28]	; (431b4 <hal_ticker_instance0_sched+0x134>)
   43196:	23c0      	movs	r3, #192	; 0xc0
   43198:	f006 fa6c 	bl	49674 <printk>
   4319c:	4040      	eors	r0, r0
   4319e:	f380 8811 	msr	BASEPRI, r0
   431a2:	f04f 0003 	mov.w	r0, #3
   431a6:	df02      	svc	2
}
   431a8:	bd10      	pop	{r4, pc}
   431aa:	bf00      	nop
   431ac:	000532a8 	.word	0x000532a8
   431b0:	000524c0 	.word	0x000524c0
   431b4:	00052460 	.word	0x00052460
   431b8:	20000b68 	.word	0x20000b68
   431bc:	20000b58 	.word	0x20000b58
   431c0:	20000b48 	.word	0x20000b48
   431c4:	20000b98 	.word	0x20000b98
   431c8:	20000b78 	.word	0x20000b78
   431cc:	20000b88 	.word	0x20000b88

000431d0 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   431d0:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   431d2:	2000      	movs	r0, #0
   431d4:	f7ff b9aa 	b.w	4252c <cntr_cmp_set>

000431d8 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   431d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
{
   431dc:	b508      	push	{r3, lr}
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   431de:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
   431e2:	3101      	adds	r1, #1
{
   431e4:	4603      	mov	r3, r0
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   431e6:	d062      	beq.n	432ae <hci_vendor_read_static_addr+0xd6>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   431e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   431ec:	f8d2 00a0 	ldr.w	r0, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   431f0:	f010 0001 	ands.w	r0, r0, #1
   431f4:	d100      	bne.n	431f8 <hci_vendor_read_static_addr+0x20>

		return 1;
	}

	return 0;
}
   431f6:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   431f8:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
	dst[0] = val;
   431fc:	7019      	strb	r1, [r3, #0]
	sys_put_le16(val >> 16, &dst[2]);
   431fe:	0c08      	lsrs	r0, r1, #16
	dst[1] = val >> 8;
   43200:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   43204:	f3c1 2107 	ubfx	r1, r1, #8, #8
   43208:	7059      	strb	r1, [r3, #1]
	dst[0] = val;
   4320a:	7098      	strb	r0, [r3, #2]
	dst[1] = val >> 8;
   4320c:	f883 c003 	strb.w	ip, [r3, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   43210:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
	dst[0] = val;
   43214:	7119      	strb	r1, [r3, #4]
	dst[1] = val >> 8;
   43216:	f3c1 2107 	ubfx	r1, r1, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   4321a:	f061 013f 	orn	r1, r1, #63	; 0x3f
   4321e:	7159      	strb	r1, [r3, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   43220:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
   43224:	3101      	adds	r1, #1
   43226:	d03b      	beq.n	432a0 <hci_vendor_read_static_addr+0xc8>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   43228:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   4322c:	3101      	adds	r1, #1
   4322e:	d037      	beq.n	432a0 <hci_vendor_read_static_addr+0xc8>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   43230:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   43234:	3101      	adds	r1, #1
   43236:	d033      	beq.n	432a0 <hci_vendor_read_static_addr+0xc8>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   43238:	f8d2 109c 	ldr.w	r1, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   4323c:	3101      	adds	r1, #1
   4323e:	d02f      	beq.n	432a0 <hci_vendor_read_static_addr+0xc8>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   43240:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
	dst[0] = val;
   43244:	7199      	strb	r1, [r3, #6]
	sys_put_le16(val >> 16, &dst[2]);
   43246:	0c08      	lsrs	r0, r1, #16
	dst[1] = val >> 8;
   43248:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   4324c:	f3c1 2107 	ubfx	r1, r1, #8, #8
	dst[0] = val;
   43250:	7218      	strb	r0, [r3, #8]
	dst[1] = val >> 8;
   43252:	f883 c009 	strb.w	ip, [r3, #9]
   43256:	71d9      	strb	r1, [r3, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   43258:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
	dst[0] = val;
   4325c:	7299      	strb	r1, [r3, #10]
	sys_put_le16(val >> 16, &dst[2]);
   4325e:	0c08      	lsrs	r0, r1, #16
	dst[1] = val >> 8;
   43260:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   43264:	f3c1 2107 	ubfx	r1, r1, #8, #8
	dst[0] = val;
   43268:	7318      	strb	r0, [r3, #12]
	dst[1] = val >> 8;
   4326a:	f883 c00d 	strb.w	ip, [r3, #13]
   4326e:	72d9      	strb	r1, [r3, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   43270:	f8d2 1098 	ldr.w	r1, [r2, #152]	; 0x98
	dst[0] = val;
   43274:	7399      	strb	r1, [r3, #14]
	sys_put_le16(val >> 16, &dst[2]);
   43276:	0c08      	lsrs	r0, r1, #16
	dst[1] = val >> 8;
   43278:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   4327c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   43280:	73d9      	strb	r1, [r3, #15]
	dst[0] = val;
   43282:	7418      	strb	r0, [r3, #16]
	dst[1] = val >> 8;
   43284:	f883 c011 	strb.w	ip, [r3, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   43288:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
	dst[0] = val;
   4328c:	749a      	strb	r2, [r3, #18]
	sys_put_le16(val >> 16, &dst[2]);
   4328e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   43290:	0a08      	lsrs	r0, r1, #8
   43292:	f3c2 2207 	ubfx	r2, r2, #8, #8
   43296:	7558      	strb	r0, [r3, #21]
   43298:	74da      	strb	r2, [r3, #19]
	dst[0] = val;
   4329a:	7519      	strb	r1, [r3, #20]
		return 1;
   4329c:	2001      	movs	r0, #1
}
   4329e:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   432a0:	2210      	movs	r2, #16
   432a2:	2100      	movs	r1, #0
   432a4:	1d98      	adds	r0, r3, #6
   432a6:	f008 fafb 	bl	4b8a0 <memset>
		return 1;
   432aa:	2001      	movs	r0, #1
}
   432ac:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   432ae:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
   432b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   432b6:	b292      	uxth	r2, r2
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   432b8:	428a      	cmp	r2, r1
   432ba:	d195      	bne.n	431e8 <hci_vendor_read_static_addr+0x10>
	return 0;
   432bc:	2000      	movs	r0, #0
}
   432be:	bd08      	pop	{r3, pc}

000432c0 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   432c0:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   432c2:	2210      	movs	r2, #16
{
   432c4:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   432c6:	2100      	movs	r1, #0
   432c8:	f008 faea 	bl	4b8a0 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   432cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   432d0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   432d4:	3201      	adds	r2, #1
   432d6:	d034      	beq.n	43342 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   432d8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   432dc:	3201      	adds	r2, #1
   432de:	d030      	beq.n	43342 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   432e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   432e4:	3201      	adds	r2, #1
   432e6:	d02c      	beq.n	43342 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   432e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   432ec:	3201      	adds	r2, #1
   432ee:	d028      	beq.n	43342 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   432f0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   432f4:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   432f6:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   432f8:	0a08      	lsrs	r0, r1, #8
   432fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   432fe:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   43300:	70e0      	strb	r0, [r4, #3]
   43302:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   43304:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   43308:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   4330a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   4330c:	0a08      	lsrs	r0, r1, #8
   4330e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   43312:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   43314:	71e0      	strb	r0, [r4, #7]
   43316:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   43318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   4331c:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   4331e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   43320:	0a08      	lsrs	r0, r1, #8
   43322:	f3c2 2207 	ubfx	r2, r2, #8, #8
   43326:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   43328:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   4332a:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   4332c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   43330:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   43332:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   43334:	0a11      	lsrs	r1, r2, #8
   43336:	f3c3 2307 	ubfx	r3, r3, #8, #8
   4333a:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   4333c:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   4333e:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   43340:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   43342:	4620      	mov	r0, r4
   43344:	2210      	movs	r2, #16
}
   43346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   4334a:	2100      	movs	r1, #0
   4334c:	f008 baa8 	b.w	4b8a0 <memset>

00043350 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   43350:	4b02      	ldr	r3, [pc, #8]	; (4335c <net_buf_pool_get+0xc>)
   43352:	222c      	movs	r2, #44	; 0x2c
   43354:	fb02 3000 	mla	r0, r2, r0, r3
   43358:	4770      	bx	lr
   4335a:	bf00      	nop
   4335c:	20001084 	.word	0x20001084

00043360 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   43360:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   43362:	4b06      	ldr	r3, [pc, #24]	; (4337c <net_buf_id+0x1c>)
   43364:	212c      	movs	r1, #44	; 0x2c
   43366:	fb01 3302 	mla	r3, r1, r2, r3
   4336a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   4336c:	7f1b      	ldrb	r3, [r3, #28]
   4336e:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   43370:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   43372:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   43376:	fbb0 f0f3 	udiv	r0, r0, r3
   4337a:	4770      	bx	lr
   4337c:	20001084 	.word	0x20001084

00043380 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   43380:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   43382:	4b0a      	ldr	r3, [pc, #40]	; (433ac <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   43384:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   43386:	242c      	movs	r4, #44	; 0x2c
   43388:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   4338c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   4338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   43390:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   43392:	6823      	ldr	r3, [r4, #0]
   43394:	429a      	cmp	r2, r3
   43396:	bf94      	ite	ls
   43398:	600a      	strls	r2, [r1, #0]
   4339a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   4339c:	f7ff ffe0 	bl	43360 <net_buf_id>
   433a0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   433a4:	fb02 3000 	mla	r0, r2, r0, r3
   433a8:	bd10      	pop	{r4, pc}
   433aa:	bf00      	nop
   433ac:	20001084 	.word	0x20001084

000433b0 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   433b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   433b4:	4605      	mov	r5, r0
   433b6:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   433b8:	4610      	mov	r0, r2
   433ba:	4619      	mov	r1, r3
{
   433bc:	4691      	mov	r9, r2
   433be:	4698      	mov	r8, r3
   433c0:	4617      	mov	r7, r2
   433c2:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   433c4:	f00d fbda 	bl	50b7c <sys_clock_timeout_end_calc>
   433c8:	4682      	mov	sl, r0
   433ca:	468b      	mov	fp, r1
	__asm__ volatile(
   433cc:	f04f 0320 	mov.w	r3, #32
   433d0:	f3ef 8111 	mrs	r1, BASEPRI
   433d4:	f383 8812 	msr	BASEPRI_MAX, r3
   433d8:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   433dc:	8b6b      	ldrh	r3, [r5, #26]
   433de:	2b00      	cmp	r3, #0
   433e0:	d05a      	beq.n	43498 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   433e2:	8b2a      	ldrh	r2, [r5, #24]
   433e4:	429a      	cmp	r2, r3
   433e6:	d93e      	bls.n	43466 <net_buf_alloc_len+0xb6>
   433e8:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   433ea:	2200      	movs	r2, #0
   433ec:	2300      	movs	r3, #0
   433ee:	4628      	mov	r0, r5
   433f0:	f004 fbd0 	bl	47b94 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   433f4:	9900      	ldr	r1, [sp, #0]
   433f6:	4604      	mov	r4, r0
   433f8:	2800      	cmp	r0, #0
   433fa:	d034      	beq.n	43466 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   433fc:	f381 8811 	msr	BASEPRI, r1
   43400:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   43404:	9b01      	ldr	r3, [sp, #4]
   43406:	2b00      	cmp	r3, #0
   43408:	d056      	beq.n	434b8 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   4340a:	ea58 0309 	orrs.w	r3, r8, r9
   4340e:	d00f      	beq.n	43430 <net_buf_alloc_len+0x80>
   43410:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   43414:	bf08      	it	eq
   43416:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   4341a:	d009      	beq.n	43430 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   4341c:	f005 fa9e 	bl	4895c <sys_clock_tick_get>
   43420:	ebba 0700 	subs.w	r7, sl, r0
   43424:	eb6b 0601 	sbc.w	r6, fp, r1
   43428:	2e00      	cmp	r6, #0
   4342a:	bfbc      	itt	lt
   4342c:	2700      	movlt	r7, #0
   4342e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   43430:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   43432:	f8df 809c 	ldr.w	r8, [pc, #156]	; 434d0 <net_buf_alloc_len+0x120>
   43436:	f04f 092c 	mov.w	r9, #44	; 0x2c
   4343a:	fb09 8303 	mla	r3, r9, r3, r8
   4343e:	463a      	mov	r2, r7
   43440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   43442:	681b      	ldr	r3, [r3, #0]
   43444:	a901      	add	r1, sp, #4
   43446:	681d      	ldr	r5, [r3, #0]
   43448:	4620      	mov	r0, r4
   4344a:	4633      	mov	r3, r6
   4344c:	47a8      	blx	r5
   4344e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   43450:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   43452:	2800      	cmp	r0, #0
   43454:	d131      	bne.n	434ba <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   43456:	79a0      	ldrb	r0, [r4, #6]
   43458:	4621      	mov	r1, r4
   4345a:	fb00 8009 	mla	r0, r0, r9, r8
   4345e:	f00d f8fb 	bl	50658 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   43462:	462c      	mov	r4, r5
}
   43464:	e024      	b.n	434b0 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   43466:	8b68      	ldrh	r0, [r5, #26]
   43468:	1e43      	subs	r3, r0, #1
   4346a:	836b      	strh	r3, [r5, #26]
   4346c:	f381 8811 	msr	BASEPRI, r1
   43470:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   43474:	7f2a      	ldrb	r2, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   43476:	8b29      	ldrh	r1, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   43478:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   4347a:	f102 0317 	add.w	r3, r2, #23
   4347e:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   43482:	1a09      	subs	r1, r1, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   43484:	fb01 4403 	mla	r4, r1, r3, r4
	return pool - _net_buf_pool_list;
   43488:	4b11      	ldr	r3, [pc, #68]	; (434d0 <net_buf_alloc_len+0x120>)
   4348a:	4912      	ldr	r1, [pc, #72]	; (434d4 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   4348c:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   4348e:	1aeb      	subs	r3, r5, r3
   43490:	109b      	asrs	r3, r3, #2
   43492:	434b      	muls	r3, r1
	buf->pool_id = pool_id(pool);
   43494:	71a3      	strb	r3, [r4, #6]
		goto success;
   43496:	e7b5      	b.n	43404 <net_buf_alloc_len+0x54>
   43498:	f381 8811 	msr	BASEPRI, r1
   4349c:	f3bf 8f6f 	isb	sy
   434a0:	464a      	mov	r2, r9
   434a2:	4643      	mov	r3, r8
   434a4:	4628      	mov	r0, r5
   434a6:	f004 fb75 	bl	47b94 <z_impl_k_queue_get>
	if (!buf) {
   434aa:	4604      	mov	r4, r0
   434ac:	2800      	cmp	r0, #0
   434ae:	d1a9      	bne.n	43404 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   434b0:	4620      	mov	r0, r4
   434b2:	b003      	add	sp, #12
   434b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   434b8:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   434ba:	2300      	movs	r3, #0
	buf->ref   = 1U;
   434bc:	2201      	movs	r2, #1
	buf->frags = NULL;
   434be:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   434c0:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   434c2:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   434c4:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   434c6:	6923      	ldr	r3, [r4, #16]
   434c8:	81e2      	strh	r2, [r4, #14]
   434ca:	60a3      	str	r3, [r4, #8]
	return buf;
   434cc:	e7f0      	b.n	434b0 <net_buf_alloc_len+0x100>
   434ce:	bf00      	nop
   434d0:	20001084 	.word	0x20001084
   434d4:	ba2e8ba3 	.word	0xba2e8ba3

000434d8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   434d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   434dc:	4d16      	ldr	r5, [pc, #88]	; (43538 <net_buf_unref+0x60>)
   434de:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   434e0:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   434e2:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   434e4:	b90c      	cbnz	r4, 434ea <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   434e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   434ea:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   434ec:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   434f0:	3b01      	subs	r3, #1
   434f2:	b2db      	uxtb	r3, r3
   434f4:	7123      	strb	r3, [r4, #4]
   434f6:	2b00      	cmp	r3, #0
   434f8:	d1f5      	bne.n	434e6 <net_buf_unref+0xe>
		if (buf->__buf) {
   434fa:	6921      	ldr	r1, [r4, #16]
   434fc:	b159      	cbz	r1, 43516 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   434fe:	7963      	ldrb	r3, [r4, #5]
   43500:	079b      	lsls	r3, r3, #30
   43502:	d407      	bmi.n	43514 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   43504:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   43506:	fb07 5303 	mla	r3, r7, r3, r5
   4350a:	4620      	mov	r0, r4
   4350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   4350e:	681b      	ldr	r3, [r3, #0]
   43510:	689b      	ldr	r3, [r3, #8]
   43512:	4798      	blx	r3
			buf->__buf = NULL;
   43514:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   43516:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   43518:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   4351a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   4351e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   43520:	6a1b      	ldr	r3, [r3, #32]
   43522:	b11b      	cbz	r3, 4352c <net_buf_unref+0x54>
			pool->destroy(buf);
   43524:	4620      	mov	r0, r4
   43526:	4798      	blx	r3
{
   43528:	4644      	mov	r4, r8
   4352a:	e7db      	b.n	434e4 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   4352c:	4621      	mov	r1, r4
   4352e:	fb00 5007 	mla	r0, r0, r7, r5
   43532:	f00d f891 	bl	50658 <k_queue_prepend>
}
   43536:	e7f7      	b.n	43528 <net_buf_unref+0x50>
   43538:	20001084 	.word	0x20001084

0004353c <net_buf_append_bytes>:
 * the buffer. It assumes that the buffer has at least one fragment.
 */
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
			    const void *value, k_timeout_t timeout,
			    net_buf_allocator_cb allocate_cb, void *user_data)
{
   4353c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43540:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
   43544:	4606      	mov	r6, r0
   43546:	460d      	mov	r5, r1
   43548:	4617      	mov	r7, r2
	while (buf->frags) {
   4354a:	4604      	mov	r4, r0
   4354c:	4621      	mov	r1, r4
   4354e:	6824      	ldr	r4, [r4, #0]
   43550:	2c00      	cmp	r4, #0
   43552:	d1fb      	bne.n	4354c <net_buf_append_bytes+0x10>
	return &_net_buf_pool_list[id];
   43554:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
	return net_buf_simple_tailroom(&buf->b);
   43558:	f101 0b08 	add.w	fp, r1, #8
   4355c:	4658      	mov	r0, fp
   4355e:	f00c f9b0 	bl	4f8c2 <net_buf_simple_tailroom>
	struct net_buf *frag = net_buf_frag_last(buf);
	size_t added_len = 0;
	const uint8_t *value8 = value;

	do {
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   43562:	4285      	cmp	r5, r0
   43564:	bf2c      	ite	cs
   43566:	b282      	uxthcs	r2, r0
   43568:	b2aa      	uxthcc	r2, r5
	return net_buf_simple_add_mem(&buf->b, mem, len);
   4356a:	4639      	mov	r1, r7
   4356c:	4658      	mov	r0, fp
   4356e:	9201      	str	r2, [sp, #4]
   43570:	f00c f960 	bl	4f834 <net_buf_simple_add_mem>

		net_buf_add_mem(frag, value8, count);
		len -= count;
		added_len += count;
   43574:	9a01      	ldr	r2, [sp, #4]
		value8 += count;

		if (len == 0) {
   43576:	1aad      	subs	r5, r5, r2
		added_len += count;
   43578:	4414      	add	r4, r2
		value8 += count;
   4357a:	4417      	add	r7, r2
		if (len == 0) {
   4357c:	d016      	beq.n	435ac <net_buf_append_bytes+0x70>
			return added_len;
		}

		if (allocate_cb) {
   4357e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   43580:	b14b      	cbz	r3, 43596 <net_buf_append_bytes+0x5a>
			frag = allocate_cb(timeout, user_data);
   43582:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   43584:	4640      	mov	r0, r8
   43586:	4649      	mov	r1, r9
   43588:	4798      	blx	r3

			/* Allocate from the original pool if no callback has
			 * been provided.
			 */
			pool = net_buf_pool_get(buf->pool_id);
			frag = net_buf_alloc_len(pool, len, timeout);
   4358a:	4601      	mov	r1, r0
		}

		if (!frag) {
   4358c:	b170      	cbz	r0, 435ac <net_buf_append_bytes+0x70>
			return added_len;
		}

		net_buf_frag_add(buf, frag);
   4358e:	4630      	mov	r0, r6
   43590:	f00c f92d 	bl	4f7ee <net_buf_frag_add>
	do {
   43594:	e7e0      	b.n	43558 <net_buf_append_bytes+0x1c>
	return &_net_buf_pool_list[id];
   43596:	79b0      	ldrb	r0, [r6, #6]
			frag = net_buf_alloc_len(pool, len, timeout);
   43598:	f8df c018 	ldr.w	ip, [pc, #24]	; 435b4 <net_buf_append_bytes+0x78>
   4359c:	4642      	mov	r2, r8
   4359e:	464b      	mov	r3, r9
   435a0:	4629      	mov	r1, r5
   435a2:	fb00 c00a 	mla	r0, r0, sl, ip
   435a6:	f7ff ff03 	bl	433b0 <net_buf_alloc_len>
   435aa:	e7ee      	b.n	4358a <net_buf_append_bytes+0x4e>
	} while (1);

	/* Unreachable */
	return 0;
}
   435ac:	4620      	mov	r0, r4
   435ae:	b003      	add	sp, #12
   435b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   435b4:	20001084 	.word	0x20001084

000435b8 <hid_int_in>:

	return -EINVAL;
}

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
   435b8:	b510      	push	{r4, lr}
   435ba:	460c      	mov	r4, r1
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
   435bc:	4601      	mov	r1, r0
   435be:	4808      	ldr	r0, [pc, #32]	; (435e0 <hid_int_in+0x28>)
   435c0:	f006 fe3b 	bl	4a23a <usb_get_dev_data_by_ep>
	if (common == NULL) {
   435c4:	b150      	cbz	r0, 435dc <hid_int_in+0x24>
		return;
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
   435c6:	2c02      	cmp	r4, #2
   435c8:	d108      	bne.n	435dc <hid_int_in+0x24>
   435ca:	f850 3c08 	ldr.w	r3, [r0, #-8]
   435ce:	b12b      	cbz	r3, 435dc <hid_int_in+0x24>
	    dev_data->ops->int_in_ready == NULL) {
   435d0:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
   435d2:	b11b      	cbz	r3, 435dc <hid_int_in+0x24>
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
   435d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dev_data->ops->int_in_ready(common->dev);
   435d8:	6800      	ldr	r0, [r0, #0]
   435da:	4718      	bx	r3
}
   435dc:	bd10      	pop	{r4, pc}
   435de:	bf00      	nop
   435e0:	20005e34 	.word	0x20005e34

000435e4 <hid_custom_handle_req>:
	if (usb_reqtype_is_to_host(setup) &&
   435e4:	f990 3000 	ldrsb.w	r3, [r0]
   435e8:	2b00      	cmp	r3, #0
{
   435ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   435ee:	4604      	mov	r4, r0
   435f0:	460e      	mov	r6, r1
   435f2:	4615      	mov	r5, r2
	if (usb_reqtype_is_to_host(setup) &&
   435f4:	db03      	blt.n	435fe <hid_custom_handle_req+0x1a>
	return -EINVAL;
   435f6:	f06f 0015 	mvn.w	r0, #21
}
   435fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
   435fe:	8803      	ldrh	r3, [r0, #0]
   43600:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
   43604:	b29b      	uxth	r3, r3
   43606:	f240 6201 	movw	r2, #1537	; 0x601
   4360a:	4293      	cmp	r3, r2
   4360c:	d1f3      	bne.n	435f6 <hid_custom_handle_req+0x12>
		uint8_t value = (uint8_t)(setup->wValue >> 8);
   4360e:	8843      	ldrh	r3, [r0, #2]
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
   43610:	7901      	ldrb	r1, [r0, #4]
   43612:	4813      	ldr	r0, [pc, #76]	; (43660 <hid_custom_handle_req+0x7c>)
		uint8_t value = (uint8_t)(setup->wValue >> 8);
   43614:	ea4f 2813 	mov.w	r8, r3, lsr #8
   43618:	4647      	mov	r7, r8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
   4361a:	f006 fe00 	bl	4a21e <usb_get_dev_data_by_iface>
		if (common == NULL) {
   4361e:	2800      	cmp	r0, #0
   43620:	d0e9      	beq.n	435f6 <hid_custom_handle_req+0x12>
		switch (value) {
   43622:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
   43626:	d004      	beq.n	43632 <hid_custom_handle_req+0x4e>
   43628:	2f22      	cmp	r7, #34	; 0x22
   4362a:	d00f      	beq.n	4364c <hid_custom_handle_req+0x68>
   4362c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   43630:	e7e3      	b.n	435fa <hid_custom_handle_req+0x16>
			cfg = common->dev->config;
   43632:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
   43634:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
   43636:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
   43638:	685b      	ldr	r3, [r3, #4]
   4363a:	f813 2f09 	ldrb.w	r2, [r3, #9]!
   4363e:	4291      	cmp	r1, r2
   43640:	bf94      	ite	ls
   43642:	6031      	strls	r1, [r6, #0]
   43644:	6032      	strhi	r2, [r6, #0]
			*data = (uint8_t *)dev_data->report_desc;
   43646:	602b      	str	r3, [r5, #0]
		return 0;
   43648:	2000      	movs	r0, #0
			break;
   4364a:	e7d6      	b.n	435fa <hid_custom_handle_req+0x16>
			*len = MIN(setup->wLength, dev_data->report_size);
   4364c:	88e3      	ldrh	r3, [r4, #6]
   4364e:	f850 2c0c 	ldr.w	r2, [r0, #-12]
   43652:	429a      	cmp	r2, r3
   43654:	bf94      	ite	ls
   43656:	6032      	strls	r2, [r6, #0]
   43658:	6033      	strhi	r3, [r6, #0]
			*data = (uint8_t *)dev_data->report_desc;
   4365a:	f850 3c10 	ldr.w	r3, [r0, #-16]
   4365e:	e7f2      	b.n	43646 <hid_custom_handle_req+0x62>
   43660:	20005e34 	.word	0x20005e34

00043664 <hid_class_handle_req>:
{
   43664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43668:	4604      	mov	r4, r0
   4366a:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
   4366c:	7901      	ldrb	r1, [r0, #4]
   4366e:	4814      	ldr	r0, [pc, #80]	; (436c0 <hid_class_handle_req+0x5c>)
{
   43670:	4617      	mov	r7, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
   43672:	f006 fdd4 	bl	4a21e <usb_get_dev_data_by_iface>
	if (common == NULL) {
   43676:	4605      	mov	r5, r0
   43678:	b1d0      	cbz	r0, 436b0 <hid_class_handle_req+0x4c>
	if (usb_reqtype_is_to_host(setup)) {
   4367a:	f994 2000 	ldrsb.w	r2, [r4]
	dev = common->dev;
   4367e:	6800      	ldr	r0, [r0, #0]
		switch (setup->bRequest) {
   43680:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   43682:	2a00      	cmp	r2, #0
   43684:	da0d      	bge.n	436a2 <hid_class_handle_req+0x3e>
		switch (setup->bRequest) {
   43686:	2b01      	cmp	r3, #1
   43688:	d116      	bne.n	436b8 <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->get_report) {
   4368a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   4368e:	b19b      	cbz	r3, 436b8 <hid_class_handle_req+0x54>
   43690:	681d      	ldr	r5, [r3, #0]
			if (dev_data->ops && dev_data->ops->set_report) {
   43692:	b18d      	cbz	r5, 436b8 <hid_class_handle_req+0x54>
				return dev_data->ops->set_report(dev, setup,
   43694:	463b      	mov	r3, r7
   43696:	4632      	mov	r2, r6
   43698:	4621      	mov	r1, r4
   4369a:	46ac      	mov	ip, r5
}
   4369c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				return dev_data->ops->set_report(dev, setup,
   436a0:	4760      	bx	ip
		switch (setup->bRequest) {
   436a2:	2b09      	cmp	r3, #9
   436a4:	d108      	bne.n	436b8 <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->set_report) {
   436a6:	f855 3c08 	ldr.w	r3, [r5, #-8]
   436aa:	b12b      	cbz	r3, 436b8 <hid_class_handle_req+0x54>
   436ac:	685d      	ldr	r5, [r3, #4]
   436ae:	e7f0      	b.n	43692 <hid_class_handle_req+0x2e>
		return -ENODEV;
   436b0:	f06f 0012 	mvn.w	r0, #18
}
   436b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return -ENOTSUP;
   436b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   436bc:	e7fa      	b.n	436b4 <hid_class_handle_req+0x50>
   436be:	bf00      	nop
   436c0:	20005e34 	.word	0x20005e34

000436c4 <hid_status_cb>:
{
   436c4:	b510      	push	{r4, lr}
   436c6:	460c      	mov	r4, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
   436c8:	4601      	mov	r1, r0
   436ca:	480f      	ldr	r0, [pc, #60]	; (43708 <hid_status_cb+0x44>)
   436cc:	f006 fd9b 	bl	4a206 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   436d0:	b150      	cbz	r0, 436e8 <hid_status_cb+0x24>
	switch (status) {
   436d2:	1e61      	subs	r1, r4, #1
   436d4:	2905      	cmp	r1, #5
   436d6:	d807      	bhi.n	436e8 <hid_status_cb+0x24>
   436d8:	e8df f001 	tbb	[pc, r1]
   436dc:	07030607 	.word	0x07030607
   436e0:	0f0d      	.short	0x0f0d
		dev_data->configured = true;
   436e2:	2301      	movs	r3, #1
   436e4:	f800 3c04 	strb.w	r3, [r0, #-4]
}
   436e8:	bd10      	pop	{r4, pc}
		dev_data->configured = false;
   436ea:	2300      	movs	r3, #0
   436ec:	f800 3c04 	strb.w	r3, [r0, #-4]
			dev_data->suspended = false;
   436f0:	f800 3c03 	strb.w	r3, [r0, #-3]
   436f4:	e7f8      	b.n	436e8 <hid_status_cb+0x24>
		dev_data->suspended = true;
   436f6:	2301      	movs	r3, #1
   436f8:	e7fa      	b.n	436f0 <hid_status_cb+0x2c>
		if (dev_data->suspended) {
   436fa:	f810 3c03 	ldrb.w	r3, [r0, #-3]
   436fe:	2b00      	cmp	r3, #0
   43700:	d0f2      	beq.n	436e8 <hid_status_cb+0x24>
			dev_data->suspended = false;
   43702:	2300      	movs	r3, #0
   43704:	e7f4      	b.n	436f0 <hid_status_cb+0x2c>
   43706:	bf00      	nop
   43708:	20005e34 	.word	0x20005e34

0004370c <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
   4370c:	b510      	push	{r4, lr}
	struct hid_device_info *dev_data = dev->data;
   4370e:	6904      	ldr	r4, [r0, #16]

	dev_data->report_desc = desc;
	dev_data->report_size = size;

	dev_data->ops = ops;
   43710:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   43712:	2300      	movs	r3, #0
   43714:	6163      	str	r3, [r4, #20]
	return list->tail;
   43716:	4b07      	ldr	r3, [pc, #28]	; (43734 <usb_hid_register_device+0x28>)
	dev_data->common.dev = dev;
   43718:	6120      	str	r0, [r4, #16]
	dev_data->report_size = size;
   4371a:	e9c4 1200 	strd	r1, r2, [r4]
   4371e:	6859      	ldr	r1, [r3, #4]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
   43720:	f104 0214 	add.w	r2, r4, #20
Z_GENLIST_APPEND(slist, snode)
   43724:	b911      	cbnz	r1, 4372c <usb_hid_register_device+0x20>
	list->head = node;
   43726:	e9c3 2200 	strd	r2, r2, [r3]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
   4372a:	bd10      	pop	{r4, pc}
	parent->next = child;
   4372c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   4372e:	605a      	str	r2, [r3, #4]
   43730:	e7fb      	b.n	4372a <usb_hid_register_device+0x1e>
   43732:	bf00      	nop
   43734:	20005e34 	.word	0x20005e34

00043738 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   43738:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   4373c:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
   4373e:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   43740:	d004      	beq.n	4374c <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
   43742:	f010 0f78 	tst.w	r0, #120	; 0x78
   43746:	d001      	beq.n	4374c <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
   43748:	2000      	movs	r0, #0
   4374a:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   4374c:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
   4374e:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
   43752:	f000 0008 	and.w	r0, r0, #8
   43756:	da05      	bge.n	43764 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   43758:	b958      	cbnz	r0, 43772 <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
   4375a:	4808      	ldr	r0, [pc, #32]	; (4377c <endpoint_ctx+0x44>)
   4375c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   43760:	304c      	adds	r0, #76	; 0x4c
   43762:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   43764:	b938      	cbnz	r0, 43776 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   43766:	4805      	ldr	r0, [pc, #20]	; (4377c <endpoint_ctx+0x44>)
   43768:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   4376c:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
   43770:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   43772:	4803      	ldr	r0, [pc, #12]	; (43780 <endpoint_ctx+0x48>)
   43774:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   43776:	4803      	ldr	r0, [pc, #12]	; (43784 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
   43778:	4770      	bx	lr
   4377a:	bf00      	nop
   4377c:	2000643c 	.word	0x2000643c
   43780:	20006588 	.word	0x20006588
   43784:	200066a8 	.word	0x200066a8

00043788 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
   43788:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
   4378a:	4801      	ldr	r0, [pc, #4]	; (43790 <usbd_evt_put+0x8>)
   4378c:	f00c bf59 	b.w	50642 <k_queue_append>
   43790:	2000106c 	.word	0x2000106c

00043794 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   43794:	4901      	ldr	r1, [pc, #4]	; (4379c <usbd_work_schedule+0x8>)
   43796:	4802      	ldr	r0, [pc, #8]	; (437a0 <usbd_work_schedule+0xc>)
   43798:	f00d b82d 	b.w	507f6 <k_work_submit_to_queue>
   4379c:	20006464 	.word	0x20006464
   437a0:	20003930 	.word	0x20003930

000437a4 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   437a4:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   437a6:	480b      	ldr	r0, [pc, #44]	; (437d4 <usb_init+0x30>)
   437a8:	f002 fd48 	bl	4623c <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   437ac:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   437ae:	480a      	ldr	r0, [pc, #40]	; (437d8 <usb_init+0x34>)
   437b0:	f002 fd8a 	bl	462c8 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   437b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   437b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   437bc:	4907      	ldr	r1, [pc, #28]	; (437dc <usb_init+0x38>)
   437be:	4808      	ldr	r0, [pc, #32]	; (437e0 <usb_init+0x3c>)
   437c0:	9400      	str	r4, [sp, #0]
   437c2:	f004 fb97 	bl	47ef4 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   437c6:	4907      	ldr	r1, [pc, #28]	; (437e4 <usb_init+0x40>)
   437c8:	4807      	ldr	r0, [pc, #28]	; (437e8 <usb_init+0x44>)
   437ca:	f00d f80b 	bl	507e4 <k_work_init>

	return 0;
}
   437ce:	4620      	mov	r0, r4
   437d0:	b002      	add	sp, #8
   437d2:	bd10      	pop	{r4, pc}
   437d4:	00053cd7 	.word	0x00053cd7
   437d8:	0005333c 	.word	0x0005333c
   437dc:	20008c70 	.word	0x20008c70
   437e0:	20003930 	.word	0x20003930
   437e4:	00043b01 	.word	0x00043b01
   437e8:	20006464 	.word	0x20006464

000437ec <usbd_evt_get>:
   437ec:	4802      	ldr	r0, [pc, #8]	; (437f8 <usbd_evt_get+0xc>)
   437ee:	2200      	movs	r2, #0
   437f0:	2300      	movs	r3, #0
   437f2:	f004 b9cf 	b.w	47b94 <z_impl_k_queue_get>
   437f6:	bf00      	nop
   437f8:	2000106c 	.word	0x2000106c

000437fc <usbd_evt_flush>:
{
   437fc:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   437fe:	4c05      	ldr	r4, [pc, #20]	; (43814 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
   43800:	f7ff fff4 	bl	437ec <usbd_evt_get>
		if (ev) {
   43804:	b120      	cbz	r0, 43810 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   43806:	1d01      	adds	r1, r0, #4
   43808:	4620      	mov	r0, r4
   4380a:	f00c fe53 	bl	504b4 <k_mem_slab_free>
	} while (ev != NULL);
   4380e:	e7f7      	b.n	43800 <usbd_evt_flush+0x4>
}
   43810:	bd10      	pop	{r4, pc}
   43812:	bf00      	nop
   43814:	20000e78 	.word	0x20000e78

00043818 <usbd_evt_alloc>:
{
   43818:	b507      	push	{r0, r1, r2, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   4381a:	2300      	movs	r3, #0
   4381c:	480e      	ldr	r0, [pc, #56]	; (43858 <usbd_evt_alloc+0x40>)
   4381e:	2200      	movs	r2, #0
   43820:	a901      	add	r1, sp, #4
   43822:	f003 ff4b 	bl	476bc <k_mem_slab_alloc>
   43826:	b190      	cbz	r0, 4384e <usbd_evt_alloc+0x36>
		usbd_evt_flush();
   43828:	f7ff ffe8 	bl	437fc <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   4382c:	480a      	ldr	r0, [pc, #40]	; (43858 <usbd_evt_alloc+0x40>)
   4382e:	2200      	movs	r2, #0
   43830:	2300      	movs	r3, #0
   43832:	a901      	add	r1, sp, #4
   43834:	f003 ff42 	bl	476bc <k_mem_slab_alloc>
   43838:	b938      	cbnz	r0, 4384a <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
   4383a:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
   4383c:	2304      	movs	r3, #4
		ev->block = block;
   4383e:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   43840:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   43842:	f7ff ffa1 	bl	43788 <usbd_evt_put>
		usbd_work_schedule();
   43846:	f7ff ffa5 	bl	43794 <usbd_work_schedule>
		return NULL;
   4384a:	2000      	movs	r0, #0
   4384c:	e001      	b.n	43852 <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
   4384e:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   43850:	6040      	str	r0, [r0, #4]
}
   43852:	b003      	add	sp, #12
   43854:	f85d fb04 	ldr.w	pc, [sp], #4
   43858:	20000e78 	.word	0x20000e78

0004385c <usbd_event_transfer_data>:
		endpoint_ctx(p_event->data.eptransfer.ep);
   4385c:	7881      	ldrb	r1, [r0, #2]
{
   4385e:	b570      	push	{r4, r5, r6, lr}
   43860:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   43862:	4608      	mov	r0, r1
   43864:	f7ff ff68 	bl	43738 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   43868:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   4386a:	78f5      	ldrb	r5, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
   4386c:	4604      	mov	r4, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   4386e:	d512      	bpl.n	43896 <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   43870:	2d00      	cmp	r5, #0
   43872:	d143      	bne.n	438fc <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   43874:	f7ff ffd0 	bl	43818 <usbd_evt_alloc>
			if (!ev) {
   43878:	4603      	mov	r3, r0
   4387a:	2800      	cmp	r0, #0
   4387c:	d03e      	beq.n	438fc <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
   4387e:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   43880:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   43882:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   43884:	2203      	movs	r2, #3
   43886:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   43888:	609c      	str	r4, [r3, #8]
			usbd_evt_put(ev);
   4388a:	f7ff ff7d 	bl	43788 <usbd_evt_put>
}
   4388e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			usbd_work_schedule();
   43892:	f7ff bf7f 	b.w	43794 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   43896:	b14d      	cbz	r5, 438ac <usbd_event_transfer_data+0x50>
   43898:	2d01      	cmp	r5, #1
   4389a:	d12f      	bne.n	438fc <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   4389c:	f7ff ffbc 	bl	43818 <usbd_evt_alloc>
			if (!ev) {
   438a0:	4603      	mov	r3, r0
   438a2:	b358      	cbz	r0, 438fc <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   438a4:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   438a6:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   438a8:	7305      	strb	r5, [r0, #12]
   438aa:	e7ed      	b.n	43888 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   438ac:	f7ff ffb4 	bl	43818 <usbd_evt_alloc>
			if (!ev) {
   438b0:	b320      	cbz	r0, 438fc <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   438b2:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   438b4:	4b12      	ldr	r3, [pc, #72]	; (43900 <usbd_event_transfer_data+0xa4>)
   438b6:	f012 0f80 	tst.w	r2, #128	; 0x80
   438ba:	f002 0108 	and.w	r1, r2, #8
   438be:	d011      	beq.n	438e4 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   438c0:	b141      	cbz	r1, 438d4 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   438c2:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   438c6:	60e3      	str	r3, [r4, #12]
			ev->evt_type = USBD_EVT_EP;
   438c8:	2301      	movs	r3, #1
   438ca:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   438cc:	2302      	movs	r3, #2
   438ce:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   438d0:	6084      	str	r4, [r0, #8]
   438d2:	e7da      	b.n	4388a <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   438d4:	f002 020f 	and.w	r2, r2, #15
   438d8:	2114      	movs	r1, #20
   438da:	fb01 3302 	mla	r3, r1, r2, r3
   438de:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   438e2:	e7f0      	b.n	438c6 <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   438e4:	b111      	cbz	r1, 438ec <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   438e6:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
   438ea:	e7ec      	b.n	438c6 <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   438ec:	f002 020f 	and.w	r2, r2, #15
   438f0:	2114      	movs	r1, #20
   438f2:	fb01 3302 	mla	r3, r1, r2, r3
   438f6:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   438fa:	e7e4      	b.n	438c6 <usbd_event_transfer_data+0x6a>
}
   438fc:	bd70      	pop	{r4, r5, r6, pc}
   438fe:	bf00      	nop
   43900:	40027000 	.word	0x40027000

00043904 <usb_dc_power_event_handler>:
	switch (event) {
   43904:	2802      	cmp	r0, #2
{
   43906:	b510      	push	{r4, lr}
   43908:	d811      	bhi.n	4392e <usb_dc_power_event_handler+0x2a>
   4390a:	4b09      	ldr	r3, [pc, #36]	; (43930 <usb_dc_power_event_handler+0x2c>)
   4390c:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   4390e:	f7ff ff83 	bl	43818 <usbd_evt_alloc>
	if (!ev) {
   43912:	b160      	cbz	r0, 4392e <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   43914:	2200      	movs	r2, #0
   43916:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   43918:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   4391a:	f7ff ff35 	bl	43788 <usbd_evt_put>
	if (usbd_ctx.attached) {
   4391e:	4b05      	ldr	r3, [pc, #20]	; (43934 <usb_dc_power_event_handler+0x30>)
   43920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   43924:	b11b      	cbz	r3, 4392e <usb_dc_power_event_handler+0x2a>
}
   43926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   4392a:	f7ff bf33 	b.w	43794 <usbd_work_schedule>
}
   4392e:	bd10      	pop	{r4, pc}
   43930:	00053cd4 	.word	0x00053cd4
   43934:	2000643c 	.word	0x2000643c

00043938 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   43938:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   4393a:	490f      	ldr	r1, [pc, #60]	; (43978 <hfxo_stop.constprop.0.isra.0+0x40>)
   4393c:	f3bf 8f5b 	dmb	ish
   43940:	f101 0320 	add.w	r3, r1, #32
   43944:	2200      	movs	r2, #0
   43946:	e853 0f00 	ldrex	r0, [r3]
   4394a:	2801      	cmp	r0, #1
   4394c:	d103      	bne.n	43956 <hfxo_stop.constprop.0.isra.0+0x1e>
   4394e:	e843 2400 	strex	r4, r2, [r3]
   43952:	2c00      	cmp	r4, #0
   43954:	d1f7      	bne.n	43946 <hfxo_stop.constprop.0.isra.0+0xe>
   43956:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   4395a:	d10b      	bne.n	43974 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   4395c:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   4395e:	310c      	adds	r1, #12
   43960:	4620      	mov	r0, r4
   43962:	f005 ff8e 	bl	49882 <onoff_cancel>

	if (rv == -EALREADY) {
   43966:	3078      	adds	r0, #120	; 0x78
   43968:	d104      	bne.n	43974 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
   4396a:	4620      	mov	r0, r4
}
   4396c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   43970:	f005 bf62 	b.w	49838 <onoff_release>
   43974:	bd10      	pop	{r4, pc}
   43976:	bf00      	nop
   43978:	2000643c 	.word	0x2000643c

0004397c <usbd_event_handler>:
{
   4397c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4397e:	4606      	mov	r6, r0
   43980:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   43982:	2214      	movs	r2, #20
   43984:	2100      	movs	r1, #0
   43986:	a803      	add	r0, sp, #12
   43988:	f007 ff8a 	bl	4b8a0 <memset>
	switch (p_event->type) {
   4398c:	7833      	ldrb	r3, [r6, #0]
   4398e:	3b01      	subs	r3, #1
   43990:	2b05      	cmp	r3, #5
   43992:	d821      	bhi.n	439d8 <usbd_event_handler+0x5c>
   43994:	e8df f003 	tbb	[pc, r3]
   43998:	1414037a 	.word	0x1414037a
   4399c:	166a      	.short	0x166a
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   4399e:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
   439a0:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   439a4:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   439a6:	f7ff ff37 	bl	43818 <usbd_evt_alloc>
		if (!ev) {
   439aa:	4603      	mov	r3, r0
   439ac:	b1a0      	cbz	r0, 439d8 <usbd_event_handler+0x5c>
		ev->evt_type = evt.evt_type;
   439ae:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   439b0:	f100 0208 	add.w	r2, r0, #8
   439b4:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
   439b8:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   439bc:	4618      	mov	r0, r3
   439be:	e01d      	b.n	439fc <usbd_event_handler+0x80>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   439c0:	2304      	movs	r3, #4
   439c2:	e7ed      	b.n	439a0 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   439c4:	78b1      	ldrb	r1, [r6, #2]
   439c6:	4608      	mov	r0, r1
   439c8:	f7ff feb6 	bl	43738 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   439cc:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   439ce:	4604      	mov	r4, r0
		switch (ep_ctx->cfg.type) {
   439d0:	b123      	cbz	r3, 439dc <usbd_event_handler+0x60>
   439d2:	3b01      	subs	r3, #1
   439d4:	2b02      	cmp	r3, #2
   439d6:	d943      	bls.n	43a60 <usbd_event_handler+0xe4>
}
   439d8:	b009      	add	sp, #36	; 0x24
   439da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   439dc:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
   439de:	78f5      	ldrb	r5, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   439e0:	d513      	bpl.n	43a0a <usbd_event_handler+0x8e>
		switch (p_event->data.eptransfer.status) {
   439e2:	2d00      	cmp	r5, #0
   439e4:	d1f8      	bne.n	439d8 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   439e6:	f7ff ff17 	bl	43818 <usbd_evt_alloc>
			if (!ev) {
   439ea:	4603      	mov	r3, r0
   439ec:	2800      	cmp	r0, #0
   439ee:	d0f3      	beq.n	439d8 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   439f0:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   439f2:	77a5      	strb	r5, [r4, #30]
			ev->evt_type = USBD_EVT_EP;
   439f4:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   439f6:	2203      	movs	r2, #3
   439f8:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   439fa:	609c      	str	r4, [r3, #8]
		usbd_evt_put(ev);
   439fc:	f7ff fec4 	bl	43788 <usbd_evt_put>
}
   43a00:	b009      	add	sp, #36	; 0x24
   43a02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		usbd_work_schedule();
   43a06:	f7ff bec5 	b.w	43794 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   43a0a:	b155      	cbz	r5, 43a22 <usbd_event_handler+0xa6>
   43a0c:	2d01      	cmp	r5, #1
   43a0e:	d1e3      	bne.n	439d8 <usbd_event_handler+0x5c>
			struct usbd_event *ev = usbd_evt_alloc();
   43a10:	f7ff ff02 	bl	43818 <usbd_evt_alloc>
			if (!ev) {
   43a14:	4603      	mov	r3, r0
   43a16:	2800      	cmp	r0, #0
   43a18:	d0de      	beq.n	439d8 <usbd_event_handler+0x5c>
			ep_ctx->read_pending = true;
   43a1a:	7765      	strb	r5, [r4, #29]
			ev->evt_type = USBD_EVT_EP;
   43a1c:	7405      	strb	r5, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   43a1e:	7305      	strb	r5, [r0, #12]
   43a20:	e7eb      	b.n	439fa <usbd_event_handler+0x7e>
			struct usbd_event *ev = usbd_evt_alloc();
   43a22:	f7ff fef9 	bl	43818 <usbd_evt_alloc>
			if (!ev) {
   43a26:	4607      	mov	r7, r0
   43a28:	2800      	cmp	r0, #0
   43a2a:	d0d5      	beq.n	439d8 <usbd_event_handler+0x5c>
			ev->evt_type = USBD_EVT_EP;
   43a2c:	2301      	movs	r3, #1
   43a2e:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   43a30:	2302      	movs	r3, #2
   43a32:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   43a34:	6084      	str	r4, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   43a36:	f104 010c 	add.w	r1, r4, #12
   43a3a:	78b0      	ldrb	r0, [r6, #2]
   43a3c:	f00c fab7 	bl	4ffae <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   43a40:	4a13      	ldr	r2, [pc, #76]	; (43a90 <usbd_event_handler+0x114>)
   43a42:	68e1      	ldr	r1, [r4, #12]
   43a44:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   43a48:	428b      	cmp	r3, r1
   43a4a:	d906      	bls.n	43a5a <usbd_event_handler+0xde>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   43a4c:	1a5b      	subs	r3, r3, r1
   43a4e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   43a52:	f003 f9b9 	bl	46dc8 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   43a56:	4638      	mov	r0, r7
   43a58:	e7d0      	b.n	439fc <usbd_event_handler+0x80>
				ctx->ctrl_read_len = 0U;
   43a5a:	f8a2 528c 	strh.w	r5, [r2, #652]	; 0x28c
   43a5e:	e7fa      	b.n	43a56 <usbd_event_handler+0xda>
			usbd_event_transfer_data(p_event);
   43a60:	4630      	mov	r0, r6
}
   43a62:	b009      	add	sp, #36	; 0x24
   43a64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			usbd_event_transfer_data(p_event);
   43a68:	f7ff bef8 	b.w	4385c <usbd_event_transfer_data>
		nrfx_usbd_setup_get(&drv_setup);
   43a6c:	a801      	add	r0, sp, #4
   43a6e:	f003 f985 	bl	46d7c <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   43a72:	f89d 3005 	ldrb.w	r3, [sp, #5]
   43a76:	2b05      	cmp	r3, #5
   43a78:	d104      	bne.n	43a84 <usbd_event_handler+0x108>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   43a7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   43a7e:	f013 0f60 	tst.w	r3, #96	; 0x60
   43a82:	d0a9      	beq.n	439d8 <usbd_event_handler+0x5c>
			evt.evt.ep_evt.ep = ep_ctx;
   43a84:	4b03      	ldr	r3, [pc, #12]	; (43a94 <usbd_event_handler+0x118>)
   43a86:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   43a88:	2401      	movs	r4, #1
   43a8a:	e78c      	b.n	439a6 <usbd_event_handler+0x2a>
	switch (p_event->type) {
   43a8c:	2402      	movs	r4, #2
   43a8e:	e78a      	b.n	439a6 <usbd_event_handler+0x2a>
   43a90:	2000643c 	.word	0x2000643c
   43a94:	200065a8 	.word	0x200065a8

00043a98 <eps_ctx_init>:
{
   43a98:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   43a9a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   43a9c:	f064 007f 	orn	r0, r4, #127	; 0x7f
   43aa0:	b2c0      	uxtb	r0, r0
   43aa2:	f7ff fe49 	bl	43738 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   43aa6:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   43aa8:	f00b ff31 	bl	4f90e <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   43aac:	2c08      	cmp	r4, #8
   43aae:	d1f5      	bne.n	43a9c <eps_ctx_init+0x4>
   43ab0:	4d0f      	ldr	r5, [pc, #60]	; (43af0 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   43ab2:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   43ab4:	b2e0      	uxtb	r0, r4
   43ab6:	f7ff fe3f 	bl	43738 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   43aba:	6903      	ldr	r3, [r0, #16]
   43abc:	b903      	cbnz	r3, 43ac0 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   43abe:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   43ac0:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   43ac2:	f00b ff24 	bl	4f90e <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   43ac6:	2c08      	cmp	r4, #8
   43ac8:	f105 0540 	add.w	r5, r5, #64	; 0x40
   43acc:	d1f2      	bne.n	43ab4 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   43ace:	4c09      	ldr	r4, [pc, #36]	; (43af4 <eps_ctx_init+0x5c>)
   43ad0:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   43ad4:	f00b ff1b 	bl	4f90e <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   43ad8:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
   43adc:	b913      	cbnz	r3, 43ae4 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   43ade:	4b06      	ldr	r3, [pc, #24]	; (43af8 <eps_ctx_init+0x60>)
   43ae0:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   43ae4:	4805      	ldr	r0, [pc, #20]	; (43afc <eps_ctx_init+0x64>)
   43ae6:	f00b ff12 	bl	4f90e <ep_ctx_reset>
}
   43aea:	2000      	movs	r0, #0
   43aec:	bd38      	pop	{r3, r4, r5, pc}
   43aee:	bf00      	nop
   43af0:	2000623c 	.word	0x2000623c
   43af4:	2000643c 	.word	0x2000643c
   43af8:	20005e3c 	.word	0x20005e3c
   43afc:	200066a8 	.word	0x200066a8

00043b00 <usbd_work_handler>:
{
   43b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->ready;
   43b04:	4ca8      	ldr	r4, [pc, #672]	; (43da8 <usbd_work_handler+0x2a8>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   43b06:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 43dac <usbd_work_handler+0x2ac>
{
   43b0a:	b085      	sub	sp, #20
   43b0c:	4607      	mov	r7, r0
	while ((ev = usbd_evt_get()) != NULL) {
   43b0e:	f7ff fe6d 	bl	437ec <usbd_evt_get>
   43b12:	b910      	cbnz	r0, 43b1a <usbd_work_handler+0x1a>
}
   43b14:	b005      	add	sp, #20
   43b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   43b1a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   43b1e:	7c02      	ldrb	r2, [r0, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   43b20:	f100 0904 	add.w	r9, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   43b24:	b93b      	cbnz	r3, 43b36 <usbd_work_handler+0x36>
   43b26:	2a00      	cmp	r2, #0
   43b28:	f000 8086 	beq.w	43c38 <usbd_work_handler+0x138>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   43b2c:	4649      	mov	r1, r9
   43b2e:	4640      	mov	r0, r8
   43b30:	f00c fcc0 	bl	504b4 <k_mem_slab_free>
}
   43b34:	e7eb      	b.n	43b0e <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   43b36:	2a04      	cmp	r2, #4
   43b38:	d8f8      	bhi.n	43b2c <usbd_work_handler+0x2c>
   43b3a:	e8df f012 	tbh	[pc, r2, lsl #1]
   43b3e:	007d      	.short	0x007d
   43b40:	01030005 	.word	0x01030005
   43b44:	01430119 	.word	0x01430119
	switch (ep_evt->evt_type) {
   43b48:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   43b4a:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   43b4c:	2b03      	cmp	r3, #3
   43b4e:	d8ed      	bhi.n	43b2c <usbd_work_handler+0x2c>
   43b50:	e8df f003 	tbb	[pc, r3]
   43b54:	5f5a3d02 	.word	0x5f5a3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   43b58:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   43b5a:	2208      	movs	r2, #8
   43b5c:	2100      	movs	r1, #0
   43b5e:	4630      	mov	r0, r6
   43b60:	f007 fe9e 	bl	4b8a0 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   43b64:	4b92      	ldr	r3, [pc, #584]	; (43db0 <usbd_work_handler+0x2b0>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   43b66:	4893      	ldr	r0, [pc, #588]	; (43db4 <usbd_work_handler+0x2b4>)
   43b68:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   43b6c:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   43b6e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   43b72:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   43b74:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   43b78:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   43b7c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   43b80:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   43b82:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   43b86:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   43b8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   43b8e:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   43b90:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   43b94:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   43b98:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   43b9c:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   43b9e:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   43ba0:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   43ba2:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   43ba4:	f007 fe71 	bl	4b88a <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   43ba8:	682b      	ldr	r3, [r5, #0]
   43baa:	7a68      	ldrb	r0, [r5, #9]
   43bac:	2100      	movs	r1, #0
   43bae:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   43bb0:	f996 3000 	ldrsb.w	r3, [r6]
   43bb4:	2b00      	cmp	r3, #0
   43bb6:	db06      	blt.n	43bc6 <usbd_work_handler+0xc6>
   43bb8:	88f3      	ldrh	r3, [r6, #6]
   43bba:	b123      	cbz	r3, 43bc6 <usbd_work_handler+0xc6>
		ctx->ctrl_read_len = usbd_setup->wLength;
   43bbc:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   43bc0:	f003 f902 	bl	46dc8 <nrfx_usbd_setup_data_clear>
   43bc4:	e7b2      	b.n	43b2c <usbd_work_handler+0x2c>
		ctx->ctrl_read_len = 0U;
   43bc6:	2300      	movs	r3, #0
   43bc8:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   43bcc:	e7ae      	b.n	43b2c <usbd_work_handler+0x2c>
	if (!ep_ctx->read_pending) {
   43bce:	7f6b      	ldrb	r3, [r5, #29]
   43bd0:	2b00      	cmp	r3, #0
   43bd2:	d0ab      	beq.n	43b2c <usbd_work_handler+0x2c>
	if (!ep_ctx->read_complete) {
   43bd4:	7f2b      	ldrb	r3, [r5, #28]
   43bd6:	2b00      	cmp	r3, #0
   43bd8:	d0a8      	beq.n	43b2c <usbd_work_handler+0x2c>
	ep_ctx->read_pending = false;
   43bda:	2600      	movs	r6, #0
   43bdc:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   43bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   43be2:	4875      	ldr	r0, [pc, #468]	; (43db8 <usbd_work_handler+0x2b8>)
	ep_ctx->read_complete = false;
   43be4:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   43be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   43bea:	f00b fea3 	bl	4f934 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   43bee:	696b      	ldr	r3, [r5, #20]
   43bf0:	9301      	str	r3, [sp, #4]
   43bf2:	686b      	ldr	r3, [r5, #4]
   43bf4:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   43bf8:	a901      	add	r1, sp, #4
   43bfa:	7a68      	ldrb	r0, [r5, #9]
   43bfc:	f002 feee 	bl	469dc <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   43c00:	486d      	ldr	r0, [pc, #436]	; (43db8 <usbd_work_handler+0x2b8>)
   43c02:	f00b fe99 	bl	4f938 <k_mutex_unlock.isra.0>
   43c06:	e791      	b.n	43b2c <usbd_work_handler+0x2c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   43c08:	682b      	ldr	r3, [r5, #0]
   43c0a:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   43c0c:	7a68      	ldrb	r0, [r5, #9]
   43c0e:	4798      	blx	r3
		break;
   43c10:	e78c      	b.n	43b2c <usbd_work_handler+0x2c>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   43c12:	7aab      	ldrb	r3, [r5, #10]
   43c14:	b96b      	cbnz	r3, 43c32 <usbd_work_handler+0x132>
   43c16:	7feb      	ldrb	r3, [r5, #31]
   43c18:	b95b      	cbnz	r3, 43c32 <usbd_work_handler+0x132>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   43c1a:	4867      	ldr	r0, [pc, #412]	; (43db8 <usbd_work_handler+0x2b8>)
   43c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   43c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   43c24:	f00b fe86 	bl	4f934 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
   43c28:	f003 f8fe 	bl	46e28 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   43c2c:	4862      	ldr	r0, [pc, #392]	; (43db8 <usbd_work_handler+0x2b8>)
   43c2e:	f00b fe83 	bl	4f938 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   43c32:	682b      	ldr	r3, [r5, #0]
   43c34:	2102      	movs	r1, #2
   43c36:	e7e9      	b.n	43c0c <usbd_work_handler+0x10c>
	switch (pwr_evt->state) {
   43c38:	7a02      	ldrb	r2, [r0, #8]
   43c3a:	2a04      	cmp	r2, #4
   43c3c:	f63f af76 	bhi.w	43b2c <usbd_work_handler+0x2c>
   43c40:	e8df f002 	tbb	[pc, r2]
   43c44:	6925035b 	.word	0x6925035b
   43c48:	75          	.byte	0x75
   43c49:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   43c4a:	f002 fe3d 	bl	468c8 <nrfx_usbd_is_enabled>
   43c4e:	4605      	mov	r5, r0
   43c50:	2800      	cmp	r0, #0
   43c52:	f47f af6b 	bne.w	43b2c <usbd_work_handler+0x2c>
			nrfx_usbd_enable();
   43c56:	f002 fd7b 	bl	46750 <nrfx_usbd_enable>
   43c5a:	f3bf 8f5b 	dmb	ish
   43c5e:	4957      	ldr	r1, [pc, #348]	; (43dbc <usbd_work_handler+0x2bc>)
   43c60:	2301      	movs	r3, #1
   43c62:	e851 2f00 	ldrex	r2, [r1]
   43c66:	2a00      	cmp	r2, #0
   43c68:	d103      	bne.n	43c72 <usbd_work_handler+0x172>
   43c6a:	e841 3000 	strex	r0, r3, [r1]
   43c6e:	2800      	cmp	r0, #0
   43c70:	d1f7      	bne.n	43c62 <usbd_work_handler+0x162>
   43c72:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   43c76:	f47f af59 	bne.w	43b2c <usbd_work_handler+0x2c>
   43c7a:	f841 5c10 	str.w	r5, [r1, #-16]
   43c7e:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   43c82:	69e0      	ldr	r0, [r4, #28]
   43c84:	6163      	str	r3, [r4, #20]
   43c86:	3914      	subs	r1, #20
   43c88:	f005 fd8b 	bl	497a2 <onoff_request>
   43c8c:	e74e      	b.n	43b2c <usbd_work_handler+0x2c>
	switch (pwr_evt->state) {
   43c8e:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   43c90:	f065 007f 	orn	r0, r5, #127	; 0x7f
   43c94:	b2c0      	uxtb	r0, r0
   43c96:	f7ff fd4f 	bl	43738 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   43c9a:	7a03      	ldrb	r3, [r0, #8]
   43c9c:	b113      	cbz	r3, 43ca4 <usbd_work_handler+0x1a4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   43c9e:	7a40      	ldrb	r0, [r0, #9]
   43ca0:	f003 faa8 	bl	471f4 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   43ca4:	3501      	adds	r5, #1
   43ca6:	2d08      	cmp	r5, #8
   43ca8:	d1f2      	bne.n	43c90 <usbd_work_handler+0x190>
		if (ep_ctx->cfg.en) {
   43caa:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   43cae:	b11b      	cbz	r3, 43cb8 <usbd_work_handler+0x1b8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   43cb0:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   43cb4:	f003 fa9e 	bl	471f4 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
   43cb8:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   43cba:	b2e8      	uxtb	r0, r5
   43cbc:	f7ff fd3c 	bl	43738 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   43cc0:	7a03      	ldrb	r3, [r0, #8]
   43cc2:	b113      	cbz	r3, 43cca <usbd_work_handler+0x1ca>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   43cc4:	7a40      	ldrb	r0, [r0, #9]
   43cc6:	f003 fa95 	bl	471f4 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   43cca:	3501      	adds	r5, #1
   43ccc:	2d08      	cmp	r5, #8
   43cce:	d1f4      	bne.n	43cba <usbd_work_handler+0x1ba>
		if (ep_ctx->cfg.en) {
   43cd0:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   43cd4:	b11b      	cbz	r3, 43cde <usbd_work_handler+0x1de>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   43cd6:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   43cda:	f003 fa8b 	bl	471f4 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   43cde:	2001      	movs	r0, #1
   43ce0:	f002 fdd4 	bl	4688c <nrfx_usbd_start>
		ctx->ready = true;
   43ce4:	2301      	movs	r3, #1
   43ce6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   43cea:	6823      	ldr	r3, [r4, #0]
   43cec:	2b00      	cmp	r3, #0
   43cee:	f43f af1d 	beq.w	43b2c <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   43cf2:	2100      	movs	r1, #0
   43cf4:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   43cf6:	4798      	blx	r3
   43cf8:	e718      	b.n	43b2c <usbd_work_handler+0x2c>
		ctx->ready = false;
   43cfa:	2500      	movs	r5, #0
   43cfc:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   43d00:	f003 fa04 	bl	4710c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   43d04:	f7ff fe18 	bl	43938 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
   43d08:	6823      	ldr	r3, [r4, #0]
   43d0a:	2b00      	cmp	r3, #0
   43d0c:	f43f af0e 	beq.w	43b2c <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   43d10:	4629      	mov	r1, r5
   43d12:	2004      	movs	r0, #4
   43d14:	e7ef      	b.n	43cf6 <usbd_work_handler+0x1f6>
		if (dev_ready()) {
   43d16:	2b00      	cmp	r3, #0
   43d18:	f43f af08 	beq.w	43b2c <usbd_work_handler+0x2c>
			nrfx_usbd_suspend();
   43d1c:	f003 fa0e 	bl	4713c <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   43d20:	6823      	ldr	r3, [r4, #0]
   43d22:	2b00      	cmp	r3, #0
   43d24:	f43f af02 	beq.w	43b2c <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   43d28:	2100      	movs	r1, #0
   43d2a:	2005      	movs	r0, #5
   43d2c:	e7e3      	b.n	43cf6 <usbd_work_handler+0x1f6>
		if (ctx->status_cb && dev_ready()) {
   43d2e:	6822      	ldr	r2, [r4, #0]
   43d30:	2a00      	cmp	r2, #0
   43d32:	f43f aefb 	beq.w	43b2c <usbd_work_handler+0x2c>
   43d36:	2b00      	cmp	r3, #0
   43d38:	f43f aef8 	beq.w	43b2c <usbd_work_handler+0x2c>
			ctx->status_cb(USB_DC_RESUME, NULL);
   43d3c:	2100      	movs	r1, #0
   43d3e:	2006      	movs	r0, #6
   43d40:	4790      	blx	r2
   43d42:	e6f3      	b.n	43b2c <usbd_work_handler+0x2c>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   43d44:	f107 0510 	add.w	r5, r7, #16
   43d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   43d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   43d50:	4628      	mov	r0, r5
   43d52:	f00b fdef 	bl	4f934 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
   43d56:	f7ff fe9f 	bl	43a98 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   43d5a:	4628      	mov	r0, r5
   43d5c:	f00b fdec 	bl	4f938 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
   43d60:	f857 3c28 	ldr.w	r3, [r7, #-40]
   43d64:	2b00      	cmp	r3, #0
   43d66:	f43f aee1 	beq.w	43b2c <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_RESET, NULL);
   43d6a:	2100      	movs	r1, #0
   43d6c:	2001      	movs	r0, #1
   43d6e:	e7c2      	b.n	43cf6 <usbd_work_handler+0x1f6>
	if (ep_ctx->cfg.en) {
   43d70:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   43d74:	b17b      	cbz	r3, 43d96 <usbd_work_handler+0x296>
		ep_ctx->read_pending = true;
   43d76:	2501      	movs	r5, #1
   43d78:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   43d7c:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   43d80:	f7ff fd4a 	bl	43818 <usbd_evt_alloc>
		if (!ev) {
   43d84:	b138      	cbz	r0, 43d96 <usbd_work_handler+0x296>
		ev->evt.ep_evt.ep = ep_ctx;
   43d86:	4a0e      	ldr	r2, [pc, #56]	; (43dc0 <usbd_work_handler+0x2c0>)
		ev->evt_type = USBD_EVT_EP;
   43d88:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   43d8a:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   43d8c:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   43d8e:	f7ff fcfb 	bl	43788 <usbd_evt_put>
		usbd_work_schedule();
   43d92:	f7ff fcff 	bl	43794 <usbd_work_schedule>
			if (ctx->status_cb) {
   43d96:	f857 3c28 	ldr.w	r3, [r7, #-40]
   43d9a:	2b00      	cmp	r3, #0
   43d9c:	f43f aec6 	beq.w	43b2c <usbd_work_handler+0x2c>
				ctx->status_cb(USB_DC_SOF, NULL);
   43da0:	2100      	movs	r1, #0
   43da2:	200a      	movs	r0, #10
   43da4:	e7a7      	b.n	43cf6 <usbd_work_handler+0x1f6>
   43da6:	bf00      	nop
   43da8:	2000643c 	.word	0x2000643c
   43dac:	20000e78 	.word	0x20000e78
   43db0:	40027000 	.word	0x40027000
   43db4:	20006440 	.word	0x20006440
   43db8:	20006474 	.word	0x20006474
   43dbc:	2000645c 	.word	0x2000645c
   43dc0:	200066a8 	.word	0x200066a8
	nrfx_power_usbevt_disable();
   43dc4:	f00c f861 	bl	4fe8a <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   43dc8:	f003 f9a0 	bl	4710c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   43dcc:	f002 fcb6 	bl	4673c <nrfx_usbd_uninit>
	usbd_evt_flush();
   43dd0:	f7ff fd14 	bl	437fc <usbd_evt_flush>
	ret = eps_ctx_init();
   43dd4:	f7ff fe60 	bl	43a98 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   43dd8:	f00c f850 	bl	4fe7c <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   43ddc:	4801      	ldr	r0, [pc, #4]	; (43de4 <usbd_work_handler+0x2e4>)
   43dde:	f002 fdb7 	bl	46950 <nrfx_usbd_init>
}
   43de2:	e6a3      	b.n	43b2c <usbd_work_handler+0x2c>
   43de4:	0004397d 	.word	0x0004397d

00043de8 <usb_dc_attach>:
{
   43de8:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   43dea:	4d1a      	ldr	r5, [pc, #104]	; (43e54 <usb_dc_attach+0x6c>)
   43dec:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   43df0:	bb5c      	cbnz	r4, 43e4a <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   43df2:	f105 0038 	add.w	r0, r5, #56	; 0x38
   43df6:	f00c fba0 	bl	5053a <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   43dfa:	4620      	mov	r0, r4
   43dfc:	f000 fd24 	bl	44848 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   43e00:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   43e02:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   43e04:	2101      	movs	r1, #1
   43e06:	2027      	movs	r0, #39	; 0x27
   43e08:	f7e8 fc70 	bl	2c6ec <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   43e0c:	4812      	ldr	r0, [pc, #72]	; (43e58 <usb_dc_attach+0x70>)
   43e0e:	f002 fd9f 	bl	46950 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   43e12:	4b12      	ldr	r3, [pc, #72]	; (43e5c <usb_dc_attach+0x74>)
   43e14:	4298      	cmp	r0, r3
   43e16:	d11a      	bne.n	43e4e <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   43e18:	f00c f830 	bl	4fe7c <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   43e1c:	f7ff fe3c 	bl	43a98 <eps_ctx_init>
	if (ret == 0) {
   43e20:	4604      	mov	r4, r0
   43e22:	b910      	cbnz	r0, 43e2a <usb_dc_attach+0x42>
		ctx->attached = true;
   43e24:	2301      	movs	r3, #1
   43e26:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   43e2a:	4b0d      	ldr	r3, [pc, #52]	; (43e60 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   43e2c:	681b      	ldr	r3, [r3, #0]
   43e2e:	b10b      	cbz	r3, 43e34 <usb_dc_attach+0x4c>
		usbd_work_schedule();
   43e30:	f7ff fcb0 	bl	43794 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   43e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   43e38:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   43e3c:	07db      	lsls	r3, r3, #31
   43e3e:	d502      	bpl.n	43e46 <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   43e40:	2000      	movs	r0, #0
   43e42:	f7ff fd5f 	bl	43904 <usb_dc_power_event_handler>
}
   43e46:	4620      	mov	r0, r4
   43e48:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   43e4a:	2400      	movs	r4, #0
   43e4c:	e7fb      	b.n	43e46 <usb_dc_attach+0x5e>
		return -EIO;
   43e4e:	f06f 0404 	mvn.w	r4, #4
   43e52:	e7f8      	b.n	43e46 <usb_dc_attach+0x5e>
   43e54:	2000643c 	.word	0x2000643c
   43e58:	0004397d 	.word	0x0004397d
   43e5c:	0bad0000 	.word	0x0bad0000
   43e60:	2000106c 	.word	0x2000106c

00043e64 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   43e64:	4b07      	ldr	r3, [pc, #28]	; (43e84 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   43e66:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   43e6a:	b13a      	cbz	r2, 43e7c <usb_dc_set_address+0x18>
   43e6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
   43e70:	2b00      	cmp	r3, #0
   43e72:	bf0c      	ite	eq
   43e74:	f06f 0012 	mvneq.w	r0, #18
   43e78:	2000      	movne	r0, #0
   43e7a:	4770      	bx	lr
		return -ENODEV;
   43e7c:	f06f 0012 	mvn.w	r0, #18
}
   43e80:	4770      	bx	lr
   43e82:	bf00      	nop
   43e84:	2000643c 	.word	0x2000643c

00043e88 <usb_dc_ep_configure>:
	return get_usbd_ctx()->attached;
   43e88:	4b0f      	ldr	r3, [pc, #60]	; (43ec8 <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
   43e8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   43e8e:	b510      	push	{r4, lr}
   43e90:	4601      	mov	r1, r0
	if (!dev_attached()) {
   43e92:	b1b3      	cbz	r3, 43ec2 <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   43e94:	7804      	ldrb	r4, [r0, #0]
   43e96:	4620      	mov	r0, r4
   43e98:	f7ff fc4e 	bl	43738 <endpoint_ctx>
	if (!ep_ctx) {
   43e9c:	b910      	cbnz	r0, 43ea4 <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   43e9e:	f06f 0015 	mvn.w	r0, #21
}
   43ea2:	bd10      	pop	{r4, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   43ea4:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   43ea6:	790b      	ldrb	r3, [r1, #4]
   43ea8:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   43eaa:	8849      	ldrh	r1, [r1, #2]
   43eac:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   43eae:	0723      	lsls	r3, r4, #28
   43eb0:	d402      	bmi.n	43eb8 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   43eb2:	1e4b      	subs	r3, r1, #1
   43eb4:	420b      	tst	r3, r1
   43eb6:	d1f2      	bne.n	43e9e <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   43eb8:	4620      	mov	r0, r4
   43eba:	f00c f873 	bl	4ffa4 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   43ebe:	2000      	movs	r0, #0
   43ec0:	e7ef      	b.n	43ea2 <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   43ec2:	f06f 0012 	mvn.w	r0, #18
   43ec6:	e7ec      	b.n	43ea2 <usb_dc_ep_configure+0x1a>
   43ec8:	2000643c 	.word	0x2000643c

00043ecc <usb_dc_ep_set_stall>:
	return get_usbd_ctx()->attached;
   43ecc:	4b12      	ldr	r3, [pc, #72]	; (43f18 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   43ece:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   43ed2:	b510      	push	{r4, lr}
   43ed4:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   43ed6:	b1ca      	cbz	r2, 43f0c <usb_dc_ep_set_stall+0x40>
   43ed8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   43edc:	b1b3      	cbz	r3, 43f0c <usb_dc_ep_set_stall+0x40>
	ep_ctx = endpoint_ctx(ep);
   43ede:	f7ff fc2b 	bl	43738 <endpoint_ctx>
	if (!ep_ctx) {
   43ee2:	4604      	mov	r4, r0
   43ee4:	b1a8      	cbz	r0, 43f12 <usb_dc_ep_set_stall+0x46>
	switch (ep_ctx->cfg.type) {
   43ee6:	7a83      	ldrb	r3, [r0, #10]
   43ee8:	2b01      	cmp	r3, #1
   43eea:	d012      	beq.n	43f12 <usb_dc_ep_set_stall+0x46>
   43eec:	d907      	bls.n	43efe <usb_dc_ep_set_stall+0x32>
   43eee:	3b02      	subs	r3, #2
   43ef0:	2b01      	cmp	r3, #1
   43ef2:	d907      	bls.n	43f04 <usb_dc_ep_set_stall+0x38>
	ep_ctx->buf.curr = ep_ctx->buf.data;
   43ef4:	6963      	ldr	r3, [r4, #20]
   43ef6:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
   43ef8:	2000      	movs	r0, #0
   43efa:	60e0      	str	r0, [r4, #12]
}
   43efc:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
   43efe:	f002 ff9b 	bl	46e38 <nrfx_usbd_setup_stall>
		break;
   43f02:	e7f7      	b.n	43ef4 <usb_dc_ep_set_stall+0x28>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   43f04:	4608      	mov	r0, r1
   43f06:	f002 ff0b 	bl	46d20 <nrfx_usbd_ep_stall>
		break;
   43f0a:	e7f3      	b.n	43ef4 <usb_dc_ep_set_stall+0x28>
		return -ENODEV;
   43f0c:	f06f 0012 	mvn.w	r0, #18
   43f10:	e7f4      	b.n	43efc <usb_dc_ep_set_stall+0x30>
	switch (ep_ctx->cfg.type) {
   43f12:	f06f 0015 	mvn.w	r0, #21
   43f16:	e7f1      	b.n	43efc <usb_dc_ep_set_stall+0x30>
   43f18:	2000643c 	.word	0x2000643c

00043f1c <usb_dc_ep_clear_stall>:
{
   43f1c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   43f1e:	4b0e      	ldr	r3, [pc, #56]	; (43f58 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   43f20:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   43f24:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   43f26:	b182      	cbz	r2, 43f4a <usb_dc_ep_clear_stall+0x2e>
   43f28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   43f2c:	b16b      	cbz	r3, 43f4a <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   43f2e:	f7ff fc03 	bl	43738 <endpoint_ctx>
	if (!ep_ctx) {
   43f32:	b168      	cbz	r0, 43f50 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   43f34:	f015 0408 	ands.w	r4, r5, #8
   43f38:	d10a      	bne.n	43f50 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   43f3a:	4628      	mov	r0, r5
   43f3c:	f002 ff12 	bl	46d64 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   43f40:	4628      	mov	r0, r5
   43f42:	f003 f9a9 	bl	47298 <nrfx_usbd_ep_stall_clear>
	return 0;
   43f46:	4620      	mov	r0, r4
}
   43f48:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   43f4a:	f06f 0012 	mvn.w	r0, #18
   43f4e:	e7fb      	b.n	43f48 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   43f50:	f06f 0015 	mvn.w	r0, #21
   43f54:	e7f8      	b.n	43f48 <usb_dc_ep_clear_stall+0x2c>
   43f56:	bf00      	nop
   43f58:	2000643c 	.word	0x2000643c

00043f5c <usb_dc_ep_is_stalled>:
{
   43f5c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   43f5e:	4b0c      	ldr	r3, [pc, #48]	; (43f90 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   43f60:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   43f64:	4605      	mov	r5, r0
   43f66:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   43f68:	b162      	cbz	r2, 43f84 <usb_dc_ep_is_stalled+0x28>
   43f6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   43f6e:	b14b      	cbz	r3, 43f84 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   43f70:	f7ff fbe2 	bl	43738 <endpoint_ctx>
	if (!ep_ctx) {
   43f74:	b148      	cbz	r0, 43f8a <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   43f76:	b141      	cbz	r1, 43f8a <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   43f78:	4628      	mov	r0, r5
   43f7a:	f002 fed9 	bl	46d30 <nrfx_usbd_ep_stall_check>
   43f7e:	7020      	strb	r0, [r4, #0]
	return 0;
   43f80:	2000      	movs	r0, #0
}
   43f82:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   43f84:	f06f 0012 	mvn.w	r0, #18
   43f88:	e7fb      	b.n	43f82 <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   43f8a:	f06f 0015 	mvn.w	r0, #21
   43f8e:	e7f8      	b.n	43f82 <usb_dc_ep_is_stalled+0x26>
   43f90:	2000643c 	.word	0x2000643c

00043f94 <usb_dc_ep_enable>:
{
   43f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   43f96:	4f13      	ldr	r7, [pc, #76]	; (43fe4 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   43f98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
   43f9c:	4604      	mov	r4, r0
	if (!dev_attached()) {
   43f9e:	b1bb      	cbz	r3, 43fd0 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   43fa0:	f7ff fbca 	bl	43738 <endpoint_ctx>
	if (!ep_ctx) {
   43fa4:	4605      	mov	r5, r0
   43fa6:	b1b0      	cbz	r0, 43fd6 <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   43fa8:	0723      	lsls	r3, r4, #28
   43faa:	d405      	bmi.n	43fb8 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   43fac:	4620      	mov	r0, r4
   43fae:	f002 fed9 	bl	46d64 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   43fb2:	4620      	mov	r0, r4
   43fb4:	f003 f970 	bl	47298 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   43fb8:	7a2e      	ldrb	r6, [r5, #8]
   43fba:	b97e      	cbnz	r6, 43fdc <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
   43fbc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
   43fc0:	2301      	movs	r3, #1
   43fc2:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
   43fc4:	b118      	cbz	r0, 43fce <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   43fc6:	4620      	mov	r0, r4
   43fc8:	f003 f914 	bl	471f4 <nrfx_usbd_ep_enable>
	return 0;
   43fcc:	4630      	mov	r0, r6
}
   43fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   43fd0:	f06f 0012 	mvn.w	r0, #18
   43fd4:	e7fb      	b.n	43fce <usb_dc_ep_enable+0x3a>
		return -EINVAL;
   43fd6:	f06f 0015 	mvn.w	r0, #21
   43fda:	e7f8      	b.n	43fce <usb_dc_ep_enable+0x3a>
		return -EALREADY;
   43fdc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   43fe0:	e7f5      	b.n	43fce <usb_dc_ep_enable+0x3a>
   43fe2:	bf00      	nop
   43fe4:	2000643c 	.word	0x2000643c

00043fe8 <usb_dc_ep_disable>:
{
   43fe8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   43fea:	4b11      	ldr	r3, [pc, #68]	; (44030 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   43fec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   43ff0:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
   43ff2:	b19a      	cbz	r2, 4401c <usb_dc_ep_disable+0x34>
   43ff4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   43ff8:	b183      	cbz	r3, 4401c <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   43ffa:	f7ff fb9d 	bl	43738 <endpoint_ctx>
	if (!ep_ctx) {
   43ffe:	4605      	mov	r5, r0
   44000:	b178      	cbz	r0, 44022 <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   44002:	7a03      	ldrb	r3, [r0, #8]
   44004:	b183      	cbz	r3, 44028 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   44006:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
   44008:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   4400a:	f003 f8c7 	bl	4719c <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   4400e:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   44010:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   44012:	f00b fc7c 	bl	4f90e <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   44016:	722c      	strb	r4, [r5, #8]
	return 0;
   44018:	4620      	mov	r0, r4
}
   4401a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   4401c:	f06f 0012 	mvn.w	r0, #18
   44020:	e7fb      	b.n	4401a <usb_dc_ep_disable+0x32>
		return -EINVAL;
   44022:	f06f 0015 	mvn.w	r0, #21
   44026:	e7f8      	b.n	4401a <usb_dc_ep_disable+0x32>
		return -EALREADY;
   44028:	f06f 0077 	mvn.w	r0, #119	; 0x77
   4402c:	e7f5      	b.n	4401a <usb_dc_ep_disable+0x32>
   4402e:	bf00      	nop
   44030:	2000643c 	.word	0x2000643c

00044034 <usb_dc_ep_write>:
{
   44034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return get_usbd_ctx()->attached;
   44038:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 44118 <usb_dc_ep_write+0xe4>
{
   4403c:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
   4403e:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
{
   44042:	b085      	sub	sp, #20
   44044:	4607      	mov	r7, r0
   44046:	4689      	mov	r9, r1
   44048:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
   4404a:	2b00      	cmp	r3, #0
   4404c:	d05d      	beq.n	4410a <usb_dc_ep_write+0xd6>
   4404e:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
   44052:	2b00      	cmp	r3, #0
   44054:	d059      	beq.n	4410a <usb_dc_ep_write+0xd6>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   44056:	0603      	lsls	r3, r0, #24
   44058:	d55a      	bpl.n	44110 <usb_dc_ep_write+0xdc>
	ep_ctx = endpoint_ctx(ep);
   4405a:	f7ff fb6d 	bl	43738 <endpoint_ctx>
	if (!ep_ctx) {
   4405e:	4605      	mov	r5, r0
   44060:	2800      	cmp	r0, #0
   44062:	d055      	beq.n	44110 <usb_dc_ep_write+0xdc>
	if (!ep_ctx->cfg.en) {
   44064:	7a03      	ldrb	r3, [r0, #8]
   44066:	2b00      	cmp	r3, #0
   44068:	d052      	beq.n	44110 <usb_dc_ep_write+0xdc>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   4406a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4406e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44072:	f108 0038 	add.w	r0, r8, #56	; 0x38
   44076:	f00b fc5d 	bl	4f934 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
   4407a:	7fab      	ldrb	r3, [r5, #30]
   4407c:	b14b      	cbz	r3, 44092 <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   4407e:	f108 0038 	add.w	r0, r8, #56	; 0x38
   44082:	f00b fc59 	bl	4f938 <k_mutex_unlock.isra.0>
		return -EAGAIN;
   44086:	f06f 040a 	mvn.w	r4, #10
}
   4408a:	4620      	mov	r0, r4
   4408c:	b005      	add	sp, #20
   4408e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!data_len && ep_ctx->trans_zlp) {
   44092:	b916      	cbnz	r6, 4409a <usb_dc_ep_write+0x66>
   44094:	7feb      	ldrb	r3, [r5, #31]
   44096:	b103      	cbz	r3, 4409a <usb_dc_ep_write+0x66>
		ep_ctx->trans_zlp = false;
   44098:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   4409a:	7aab      	ldrb	r3, [r5, #10]
   4409c:	b9bb      	cbnz	r3, 440ce <usb_dc_ep_write+0x9a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   4409e:	b15e      	cbz	r6, 440b8 <usb_dc_ep_write+0x84>
   440a0:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   440a4:	42b3      	cmp	r3, r6
   440a6:	d907      	bls.n	440b8 <usb_dc_ep_write+0x84>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   440a8:	686a      	ldr	r2, [r5, #4]
   440aa:	fbb6 f3f2 	udiv	r3, r6, r2
   440ae:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   440b2:	b90b      	cbnz	r3, 440b8 <usb_dc_ep_write+0x84>
			ep_ctx->trans_zlp = true;
   440b4:	2301      	movs	r3, #1
   440b6:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   440b8:	f002 fec6 	bl	46e48 <nrfx_usbd_last_setup_dir_get>
   440bc:	42b8      	cmp	r0, r7
   440be:	d006      	beq.n	440ce <usb_dc_ep_write+0x9a>
		nrfx_usbd_setup_clear();
   440c0:	f002 feb2 	bl	46e28 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   440c4:	4815      	ldr	r0, [pc, #84]	; (4411c <usb_dc_ep_write+0xe8>)
   440c6:	f00b fc37 	bl	4f938 <k_mutex_unlock.isra.0>
		return 0;
   440ca:	2400      	movs	r4, #0
   440cc:	e7dd      	b.n	4408a <usb_dc_ep_write+0x56>
	ep_ctx->write_in_progress = true;
   440ce:	2301      	movs	r3, #1
   440d0:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   440d2:	f04f 0800 	mov.w	r8, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   440d6:	a901      	add	r1, sp, #4
   440d8:	4638      	mov	r0, r7
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   440da:	e9cd 9601 	strd	r9, r6, [sp, #4]
   440de:	f8cd 800c 	str.w	r8, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   440e2:	f002 fc7b 	bl	469dc <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   440e6:	4b0e      	ldr	r3, [pc, #56]	; (44120 <usb_dc_ep_write+0xec>)
   440e8:	4298      	cmp	r0, r3
   440ea:	d007      	beq.n	440fc <usb_dc_ep_write+0xc8>
		ep_ctx->write_in_progress = false;
   440ec:	f885 801e 	strb.w	r8, [r5, #30]
		if (ret_bytes) {
   440f0:	b10c      	cbz	r4, 440f6 <usb_dc_ep_write+0xc2>
			*ret_bytes = 0;
   440f2:	f8c4 8000 	str.w	r8, [r4]
		result = -EIO;
   440f6:	f06f 0404 	mvn.w	r4, #4
   440fa:	e002      	b.n	44102 <usb_dc_ep_write+0xce>
		if (ret_bytes) {
   440fc:	b10c      	cbz	r4, 44102 <usb_dc_ep_write+0xce>
			*ret_bytes = data_len;
   440fe:	6026      	str	r6, [r4, #0]
	int result = 0;
   44100:	4644      	mov	r4, r8
	k_mutex_unlock(&ctx->drv_lock);
   44102:	4806      	ldr	r0, [pc, #24]	; (4411c <usb_dc_ep_write+0xe8>)
   44104:	f00b fc18 	bl	4f938 <k_mutex_unlock.isra.0>
	return result;
   44108:	e7bf      	b.n	4408a <usb_dc_ep_write+0x56>
		return -ENODEV;
   4410a:	f06f 0412 	mvn.w	r4, #18
   4410e:	e7bc      	b.n	4408a <usb_dc_ep_write+0x56>
		return -EINVAL;
   44110:	f06f 0415 	mvn.w	r4, #21
   44114:	e7b9      	b.n	4408a <usb_dc_ep_write+0x56>
   44116:	bf00      	nop
   44118:	2000643c 	.word	0x2000643c
   4411c:	20006474 	.word	0x20006474
   44120:	0bad0000 	.word	0x0bad0000

00044124 <usb_dc_ep_read_wait>:
{
   44124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44128:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   4412a:	4b20      	ldr	r3, [pc, #128]	; (441ac <usb_dc_ep_read_wait+0x88>)
{
   4412c:	4617      	mov	r7, r2
	if (!dev_attached() || !dev_ready()) {
   4412e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44132:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
   44134:	2a00      	cmp	r2, #0
   44136:	d033      	beq.n	441a0 <usb_dc_ep_read_wait+0x7c>
   44138:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   4413c:	b383      	cbz	r3, 441a0 <usb_dc_ep_read_wait+0x7c>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   4413e:	0603      	lsls	r3, r0, #24
   44140:	d431      	bmi.n	441a6 <usb_dc_ep_read_wait+0x82>
	if (!data && max_data_len) {
   44142:	b901      	cbnz	r1, 44146 <usb_dc_ep_read_wait+0x22>
   44144:	bb7f      	cbnz	r7, 441a6 <usb_dc_ep_read_wait+0x82>
	ep_ctx = endpoint_ctx(ep);
   44146:	f7ff faf7 	bl	43738 <endpoint_ctx>
	if (!ep_ctx) {
   4414a:	4604      	mov	r4, r0
   4414c:	b358      	cbz	r0, 441a6 <usb_dc_ep_read_wait+0x82>
	if (!ep_ctx->cfg.en) {
   4414e:	7a03      	ldrb	r3, [r0, #8]
   44150:	b34b      	cbz	r3, 441a6 <usb_dc_ep_read_wait+0x82>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44156:	4816      	ldr	r0, [pc, #88]	; (441b0 <usb_dc_ep_read_wait+0x8c>)
   44158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4415c:	f00b fbea 	bl	4f934 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   44160:	68e3      	ldr	r3, [r4, #12]
   44162:	429f      	cmp	r7, r3
   44164:	46b8      	mov	r8, r7
   44166:	bf28      	it	cs
   44168:	4698      	movcs	r8, r3
	if (!data && !max_data_len) {
   4416a:	b946      	cbnz	r6, 4417e <usb_dc_ep_read_wait+0x5a>
   4416c:	b93f      	cbnz	r7, 4417e <usb_dc_ep_read_wait+0x5a>
		if (read_bytes) {
   4416e:	b105      	cbz	r5, 44172 <usb_dc_ep_read_wait+0x4e>
			*read_bytes = ep_ctx->buf.len;
   44170:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   44172:	480f      	ldr	r0, [pc, #60]	; (441b0 <usb_dc_ep_read_wait+0x8c>)
   44174:	f00b fbe0 	bl	4f938 <k_mutex_unlock.isra.0>
		return 0;
   44178:	2000      	movs	r0, #0
}
   4417a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   4417e:	69a1      	ldr	r1, [r4, #24]
   44180:	4642      	mov	r2, r8
   44182:	4630      	mov	r0, r6
   44184:	f007 fb81 	bl	4b88a <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   44188:	69a3      	ldr	r3, [r4, #24]
   4418a:	4443      	add	r3, r8
   4418c:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   4418e:	68e3      	ldr	r3, [r4, #12]
   44190:	eba3 0308 	sub.w	r3, r3, r8
   44194:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   44196:	2d00      	cmp	r5, #0
   44198:	d0eb      	beq.n	44172 <usb_dc_ep_read_wait+0x4e>
		*read_bytes = bytes_to_copy;
   4419a:	f8c5 8000 	str.w	r8, [r5]
   4419e:	e7e8      	b.n	44172 <usb_dc_ep_read_wait+0x4e>
		return -ENODEV;
   441a0:	f06f 0012 	mvn.w	r0, #18
   441a4:	e7e9      	b.n	4417a <usb_dc_ep_read_wait+0x56>
		return -EINVAL;
   441a6:	f06f 0015 	mvn.w	r0, #21
   441aa:	e7e6      	b.n	4417a <usb_dc_ep_read_wait+0x56>
   441ac:	2000643c 	.word	0x2000643c
   441b0:	20006474 	.word	0x20006474

000441b4 <usb_dc_ep_read_continue>:
{
   441b4:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   441b6:	4d1e      	ldr	r5, [pc, #120]	; (44230 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   441b8:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   441bc:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   441be:	b382      	cbz	r2, 44222 <usb_dc_ep_read_continue+0x6e>
   441c0:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   441c4:	b36a      	cbz	r2, 44222 <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   441c6:	061b      	lsls	r3, r3, #24
   441c8:	d42e      	bmi.n	44228 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   441ca:	f7ff fab5 	bl	43738 <endpoint_ctx>
	if (!ep_ctx) {
   441ce:	4604      	mov	r4, r0
   441d0:	b350      	cbz	r0, 44228 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   441d2:	7a03      	ldrb	r3, [r0, #8]
   441d4:	b343      	cbz	r3, 44228 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   441d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   441da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   441de:	f105 0038 	add.w	r0, r5, #56	; 0x38
   441e2:	f00b fba7 	bl	4f934 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
   441e6:	68e3      	ldr	r3, [r4, #12]
   441e8:	b9b3      	cbnz	r3, 44218 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   441ea:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   441ec:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   441ee:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   441f0:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   441f2:	7f63      	ldrb	r3, [r4, #29]
   441f4:	b183      	cbz	r3, 44218 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   441f6:	f7ff fb0f 	bl	43818 <usbd_evt_alloc>
			if (!ev) {
   441fa:	b930      	cbnz	r0, 4420a <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   441fc:	f105 0038 	add.w	r0, r5, #56	; 0x38
   44200:	f00b fb9a 	bl	4f938 <k_mutex_unlock.isra.0>
				return -ENOMEM;
   44204:	f06f 000b 	mvn.w	r0, #11
}
   44208:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   4420a:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   4420c:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   4420e:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   44210:	f7ff faba 	bl	43788 <usbd_evt_put>
			usbd_work_schedule();
   44214:	f7ff fabe 	bl	43794 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   44218:	4806      	ldr	r0, [pc, #24]	; (44234 <usb_dc_ep_read_continue+0x80>)
   4421a:	f00b fb8d 	bl	4f938 <k_mutex_unlock.isra.0>
	return 0;
   4421e:	2000      	movs	r0, #0
   44220:	e7f2      	b.n	44208 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   44222:	f06f 0012 	mvn.w	r0, #18
   44226:	e7ef      	b.n	44208 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   44228:	f06f 0015 	mvn.w	r0, #21
   4422c:	e7ec      	b.n	44208 <usb_dc_ep_read_continue+0x54>
   4422e:	bf00      	nop
   44230:	2000643c 	.word	0x2000643c
   44234:	20006474 	.word	0x20006474

00044238 <usb_dc_ep_set_callback>:
{
   44238:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   4423a:	4b08      	ldr	r3, [pc, #32]	; (4425c <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   4423c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   44240:	b12b      	cbz	r3, 4424e <usb_dc_ep_set_callback+0x16>
	ep_ctx = endpoint_ctx(ep);
   44242:	f7ff fa79 	bl	43738 <endpoint_ctx>
	if (!ep_ctx) {
   44246:	b128      	cbz	r0, 44254 <usb_dc_ep_set_callback+0x1c>
	ep_ctx->cfg.cb = cb;
   44248:	6001      	str	r1, [r0, #0]
	return 0;
   4424a:	2000      	movs	r0, #0
}
   4424c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   4424e:	f06f 0012 	mvn.w	r0, #18
   44252:	e7fb      	b.n	4424c <usb_dc_ep_set_callback+0x14>
		return -EINVAL;
   44254:	f06f 0015 	mvn.w	r0, #21
   44258:	e7f8      	b.n	4424c <usb_dc_ep_set_callback+0x14>
   4425a:	bf00      	nop
   4425c:	2000643c 	.word	0x2000643c

00044260 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   44260:	4b01      	ldr	r3, [pc, #4]	; (44268 <usb_dc_set_status_callback+0x8>)
   44262:	6018      	str	r0, [r3, #0]
}
   44264:	4770      	bx	lr
   44266:	bf00      	nop
   44268:	2000643c 	.word	0x2000643c

0004426c <usb_dc_ep_mps>:
{
   4426c:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   4426e:	4b07      	ldr	r3, [pc, #28]	; (4428c <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   44270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   44274:	b123      	cbz	r3, 44280 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   44276:	f7ff fa5f 	bl	43738 <endpoint_ctx>
	if (!ep_ctx) {
   4427a:	b120      	cbz	r0, 44286 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   4427c:	6840      	ldr	r0, [r0, #4]
}
   4427e:	bd08      	pop	{r3, pc}
		return -ENODEV;
   44280:	f06f 0012 	mvn.w	r0, #18
   44284:	e7fb      	b.n	4427e <usb_dc_ep_mps+0x12>
		return -EINVAL;
   44286:	f06f 0015 	mvn.w	r0, #21
   4428a:	e7f8      	b.n	4427e <usb_dc_ep_mps+0x12>
   4428c:	2000643c 	.word	0x2000643c

00044290 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   44290:	2811      	cmp	r0, #17
   44292:	d80e      	bhi.n	442b2 <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   44294:	4a08      	ldr	r2, [pc, #32]	; (442b8 <adc_gain_invert+0x28>)
   44296:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   4429a:	b153      	cbz	r3, 442b2 <adc_gain_invert+0x22>
   4429c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   442a0:	7852      	ldrb	r2, [r2, #1]
   442a2:	b132      	cbz	r2, 442b2 <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   442a4:	6808      	ldr	r0, [r1, #0]
   442a6:	4343      	muls	r3, r0
			rv = 0;
   442a8:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   442aa:	fb93 f3f2 	sdiv	r3, r3, r2
   442ae:	600b      	str	r3, [r1, #0]
			rv = 0;
   442b0:	4770      	bx	lr
	int rv = -EINVAL;
   442b2:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   442b6:	4770      	bx	lr
   442b8:	00053cd8 	.word	0x00053cd8

000442bc <adc_nrfx_channel_setup>:
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
   442bc:	7908      	ldrb	r0, [r1, #4]
{
   442be:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   442c0:	f000 041f 	and.w	r4, r0, #31

	if (channel_id >= SAADC_CH_NUM) {
   442c4:	2c07      	cmp	r4, #7
   442c6:	d81f      	bhi.n	44308 <adc_nrfx_channel_setup+0x4c>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
   442c8:	780b      	ldrb	r3, [r1, #0]
   442ca:	2b09      	cmp	r3, #9
   442cc:	d81c      	bhi.n	44308 <adc_nrfx_channel_setup+0x4c>
   442ce:	e8df f003 	tbb	[pc, r3]
   442d2:	0606      	.short	0x0606
   442d4:	1b060606 	.word	0x1b060606
   442d8:	201b1e05 	.word	0x201b1e05
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
   442dc:	2305      	movs	r3, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
   442de:	784a      	ldrb	r2, [r1, #1]
   442e0:	2a03      	cmp	r2, #3
   442e2:	d018      	beq.n	44316 <adc_nrfx_channel_setup+0x5a>
   442e4:	2a04      	cmp	r2, #4
   442e6:	d10f      	bne.n	44308 <adc_nrfx_channel_setup+0x4c>
	nrf_saadc_channel_config_t config = {
   442e8:	2500      	movs	r5, #0
	default:
		LOG_ERR("Selected ADC reference is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->acquisition_time) {
   442ea:	884a      	ldrh	r2, [r1, #2]
   442ec:	f244 060a 	movw	r6, #16394	; 0x400a
   442f0:	42b2      	cmp	r2, r6
   442f2:	d044      	beq.n	4437e <adc_nrfx_channel_setup+0xc2>
   442f4:	d811      	bhi.n	4431a <adc_nrfx_channel_setup+0x5e>
   442f6:	f244 0603 	movw	r6, #16387	; 0x4003
   442fa:	42b2      	cmp	r2, r6
   442fc:	d03b      	beq.n	44376 <adc_nrfx_channel_setup+0xba>
   442fe:	f244 0605 	movw	r6, #16389	; 0x4005
   44302:	42b2      	cmp	r2, r6
   44304:	d039      	beq.n	4437a <adc_nrfx_channel_setup+0xbe>
   44306:	b3d2      	cbz	r2, 4437e <adc_nrfx_channel_setup+0xc2>
   44308:	f06f 0015 	mvn.w	r0, #21
   4430c:	e032      	b.n	44374 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   4430e:	2306      	movs	r3, #6
		break;
   44310:	e7e5      	b.n	442de <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   44312:	2307      	movs	r3, #7
		break;
   44314:	e7e3      	b.n	442de <adc_nrfx_channel_setup+0x22>
	switch (channel_cfg->reference) {
   44316:	2501      	movs	r5, #1
   44318:	e7e7      	b.n	442ea <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   4431a:	f244 0614 	movw	r6, #16404	; 0x4014
   4431e:	42b2      	cmp	r2, r6
   44320:	d02f      	beq.n	44382 <adc_nrfx_channel_setup+0xc6>
   44322:	f244 0628 	movw	r6, #16424	; 0x4028
   44326:	42b2      	cmp	r2, r6
   44328:	d02d      	beq.n	44386 <adc_nrfx_channel_setup+0xca>
   4432a:	f244 060f 	movw	r6, #16399	; 0x400f
   4432e:	42b2      	cmp	r2, r6
   44330:	d1ea      	bne.n	44308 <adc_nrfx_channel_setup+0x4c>
	case ADC_ACQ_TIME_DEFAULT:
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 10):
		config.acq_time = NRF_SAADC_ACQTIME_10US;
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 15):
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   44332:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   44334:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   44338:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   4433a:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   4433e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   44342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   44346:	0122      	lsls	r2, r4, #4
   44348:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   4434c:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   44350:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   44352:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   44356:	0123      	lsls	r3, r4, #4
   44358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4435c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   44360:	798a      	ldrb	r2, [r1, #6]
   44362:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   44366:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   4436a:	4b08      	ldr	r3, [pc, #32]	; (4438c <adc_nrfx_channel_setup+0xd0>)
   4436c:	794a      	ldrb	r2, [r1, #5]
   4436e:	4423      	add	r3, r4
   44370:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

	return 0;
}
   44374:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   44376:	2200      	movs	r2, #0
   44378:	e7dc      	b.n	44334 <adc_nrfx_channel_setup+0x78>
	switch (channel_cfg->acquisition_time) {
   4437a:	2201      	movs	r2, #1
   4437c:	e7da      	b.n	44334 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   4437e:	2202      	movs	r2, #2
   44380:	e7d8      	b.n	44334 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   44382:	2204      	movs	r2, #4
   44384:	e7d6      	b.n	44334 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   44386:	2205      	movs	r2, #5
   44388:	e7d4      	b.n	44334 <adc_nrfx_channel_setup+0x78>
   4438a:	bf00      	nop
   4438c:	20000168 	.word	0x20000168

00044390 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   44390:	4b04      	ldr	r3, [pc, #16]	; (443a4 <adc_context_start_sampling.isra.0+0x14>)
   44392:	2201      	movs	r2, #1
   44394:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   44398:	b108      	cbz	r0, 4439e <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4439a:	60da      	str	r2, [r3, #12]
}
   4439c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4439e:	601a      	str	r2, [r3, #0]
   443a0:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   443a2:	4770      	bx	lr
   443a4:	40007000 	.word	0x40007000

000443a8 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   443a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   443aa:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   443ac:	485e      	ldr	r0, [pc, #376]	; (44528 <adc_nrfx_read+0x180>)
   443ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   443b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   443b6:	f003 fc47 	bl	47c48 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   443ba:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
   443bc:	b910      	cbnz	r0, 443c4 <adc_nrfx_read+0x1c>
	switch (sequence->resolution) {
   443be:	f06f 0415 	mvn.w	r4, #21
   443c2:	e099      	b.n	444f8 <adc_nrfx_read+0x150>
	if (!selected_channels ||
   443c4:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
   443c8:	d1f9      	bne.n	443be <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
   443ca:	4c58      	ldr	r4, [pc, #352]	; (4452c <adc_nrfx_read+0x184>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   443cc:	4f58      	ldr	r7, [pc, #352]	; (44530 <adc_nrfx_read+0x188>)
	active_channels = 0U;
   443ce:	461a      	mov	r2, r3
		if (selected_channels & BIT(channel_id)) {
   443d0:	fa20 f103 	lsr.w	r1, r0, r3
   443d4:	f011 0101 	ands.w	r1, r1, #1
   443d8:	d032      	beq.n	44440 <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
   443da:	18f9      	adds	r1, r7, r3
   443dc:	f891 c0a0 	ldrb.w	ip, [r1, #160]	; 0xa0
   443e0:	f1bc 0f00 	cmp.w	ip, #0
   443e4:	d0eb      	beq.n	443be <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   443e6:	eb04 1e03 	add.w	lr, r4, r3, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   443ea:	7c6e      	ldrb	r6, [r5, #17]
   443ec:	f8de 1518 	ldr.w	r1, [lr, #1304]	; 0x518
   443f0:	3e00      	subs	r6, #0
   443f2:	bf18      	it	ne
   443f4:	2601      	movne	r6, #1
   443f6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
   443fa:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
   443fe:	f8ce 1518 	str.w	r1, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   44402:	f103 0151 	add.w	r1, r3, #81	; 0x51
   44406:	0109      	lsls	r1, r1, #4
			++active_channels;
   44408:	3201      	adds	r2, #1
   4440a:	f844 c001 	str.w	ip, [r4, r1]
   4440e:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   44410:	3301      	adds	r3, #1
   44412:	2b08      	cmp	r3, #8
   44414:	d1dc      	bne.n	443d0 <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
   44416:	7c2b      	ldrb	r3, [r5, #16]
   44418:	3b08      	subs	r3, #8
   4441a:	2b06      	cmp	r3, #6
   4441c:	d8cf      	bhi.n	443be <adc_nrfx_read+0x16>
   4441e:	a101      	add	r1, pc, #4	; (adr r1, 44424 <adc_nrfx_read+0x7c>)
   44420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   44424:	0004450d 	.word	0x0004450d
   44428:	000443bf 	.word	0x000443bf
   4442c:	0004444b 	.word	0x0004444b
   44430:	000443bf 	.word	0x000443bf
   44434:	00044505 	.word	0x00044505
   44438:	000443bf 	.word	0x000443bf
   4443c:	00044509 	.word	0x00044509
   44440:	f103 0651 	add.w	r6, r3, #81	; 0x51
   44444:	0136      	lsls	r6, r6, #4
   44446:	51a1      	str	r1, [r4, r6]
}
   44448:	e7e2      	b.n	44410 <adc_nrfx_read+0x68>
   4444a:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
   4444c:	4937      	ldr	r1, [pc, #220]	; (4452c <adc_nrfx_read+0x184>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   4444e:	2a01      	cmp	r2, #1
   44450:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   44454:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   44456:	d95b      	bls.n	44510 <adc_nrfx_read+0x168>
   44458:	2b00      	cmp	r3, #0
   4445a:	d1b0      	bne.n	443be <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
   4445c:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   44460:	6829      	ldr	r1, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   44462:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   44464:	b111      	cbz	r1, 4446c <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   44466:	8989      	ldrh	r1, [r1, #12]
   44468:	fb01 3303 	mla	r3, r1, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   4446c:	68e9      	ldr	r1, [r5, #12]
   4446e:	4299      	cmp	r1, r3
   44470:	d356      	bcc.n	44520 <adc_nrfx_read+0x178>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   44472:	4b2e      	ldr	r3, [pc, #184]	; (4452c <adc_nrfx_read+0x184>)
   44474:	68a9      	ldr	r1, [r5, #8]
   44476:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   4447a:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   4447c:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   44480:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   44482:	4c2b      	ldr	r4, [pc, #172]	; (44530 <adc_nrfx_read+0x188>)
   44484:	f104 0674 	add.w	r6, r4, #116	; 0x74
   44488:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   4448a:	683b      	ldr	r3, [r7, #0]
   4448c:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
   4448e:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   44490:	2600      	movs	r6, #0
   44492:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   44494:	4627      	mov	r7, r4
   44496:	2b00      	cmp	r3, #0
   44498:	d03d      	beq.n	44516 <adc_nrfx_read+0x16e>
		ctx->options = *sequence->options;
   4449a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   4449c:	f104 0588 	add.w	r5, r4, #136	; 0x88
   444a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   444a4:	6765      	str	r5, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   444a6:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   444aa:	b3a0      	cbz	r0, 44516 <adc_nrfx_read+0x16e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   444ac:	f3bf 8f5b 	dmb	ish
   444b0:	e857 3f00 	ldrex	r3, [r7]
   444b4:	e847 6200 	strex	r2, r6, [r7]
   444b8:	2a00      	cmp	r2, #0
   444ba:	d1f9      	bne.n	444b0 <adc_nrfx_read+0x108>
   444bc:	f3bf 8f5b 	dmb	ish
   444c0:	481c      	ldr	r0, [pc, #112]	; (44534 <adc_nrfx_read+0x18c>)
   444c2:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
   444c6:	4a1c      	ldr	r2, [pc, #112]	; (44538 <adc_nrfx_read+0x190>)
   444c8:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   444cc:	4631      	mov	r1, r6
   444ce:	2300      	movs	r3, #0
   444d0:	fbe7 0105 	umlal	r0, r1, r7, r5
   444d4:	f7e1 fe14 	bl	26100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   444d8:	2200      	movs	r2, #0
   444da:	e9cd 0100 	strd	r0, r1, [sp]
   444de:	2300      	movs	r3, #0
   444e0:	f104 0008 	add.w	r0, r4, #8
   444e4:	f004 fa98 	bl	48a18 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   444e8:	4814      	ldr	r0, [pc, #80]	; (4453c <adc_nrfx_read+0x194>)
   444ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   444ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   444f2:	f003 fba9 	bl	47c48 <z_impl_k_sem_take>
	return ctx->status;
   444f6:	6f24      	ldr	r4, [r4, #112]	; 0x70
	z_impl_k_sem_give(sem);
   444f8:	480b      	ldr	r0, [pc, #44]	; (44528 <adc_nrfx_read+0x180>)
   444fa:	f003 fb7f 	bl	47bfc <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   444fe:	4620      	mov	r0, r4
   44500:	b003      	add	sp, #12
   44502:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   44504:	2302      	movs	r3, #2
		break;
   44506:	e7a1      	b.n	4444c <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   44508:	2303      	movs	r3, #3
		break;
   4450a:	e79f      	b.n	4444c <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   4450c:	2300      	movs	r3, #0
   4450e:	e79d      	b.n	4444c <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
   44510:	2b08      	cmp	r3, #8
   44512:	d9a3      	bls.n	4445c <adc_nrfx_read+0xb4>
   44514:	e753      	b.n	443be <adc_nrfx_read+0x16>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   44516:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   4451a:	f7ff ff39 	bl	44390 <adc_context_start_sampling.isra.0>
   4451e:	e7e3      	b.n	444e8 <adc_nrfx_read+0x140>
		return -ENOMEM;
   44520:	f06f 040b 	mvn.w	r4, #11
   44524:	e7e8      	b.n	444f8 <adc_nrfx_read+0x150>
   44526:	bf00      	nop
   44528:	200001a8 	.word	0x200001a8
   4452c:	40007000 	.word	0x40007000
   44530:	20000168 	.word	0x20000168
   44534:	000f423f 	.word	0x000f423f
   44538:	000f4240 	.word	0x000f4240
   4453c:	200001c0 	.word	0x200001c0

00044540 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   44540:	4b0e      	ldr	r3, [pc, #56]	; (4457c <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   44542:	b510      	push	{r4, lr}
   44544:	2400      	movs	r4, #0
   44546:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   4454a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   4454e:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   44552:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   44556:	2212      	movs	r2, #18
   44558:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   4455c:	2007      	movs	r0, #7
   4455e:	f7e8 f895 	bl	2c68c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   44562:	4622      	mov	r2, r4
   44564:	2101      	movs	r1, #1
   44566:	2007      	movs	r0, #7
   44568:	f7e8 f8c0 	bl	2c6ec <z_arm_irq_priority_set>
	return sem->count;
   4456c:	4804      	ldr	r0, [pc, #16]	; (44580 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   4456e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   44570:	b913      	cbnz	r3, 44578 <init_saadc+0x38>
   44572:	3040      	adds	r0, #64	; 0x40
   44574:	f003 fb42 	bl	47bfc <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   44578:	2000      	movs	r0, #0
   4457a:	bd10      	pop	{r4, pc}
   4457c:	40007000 	.word	0x40007000
   44580:	20000168 	.word	0x20000168

00044584 <saadc_irq_handler>:
{
   44584:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   44586:	4b30      	ldr	r3, [pc, #192]	; (44648 <saadc_irq_handler+0xc4>)
   44588:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   4458c:	2a00      	cmp	r2, #0
   4458e:	d04d      	beq.n	4462c <saadc_irq_handler+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   44590:	2200      	movs	r2, #0
   44592:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   44596:	4c2d      	ldr	r4, [pc, #180]	; (4464c <saadc_irq_handler+0xc8>)
   44598:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4459c:	2101      	movs	r1, #1
   4459e:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   445a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   445a4:	6f63      	ldr	r3, [r4, #116]	; 0x74
   445a6:	4625      	mov	r5, r4
   445a8:	b3db      	cbz	r3, 44622 <saadc_irq_handler+0x9e>
		adc_sequence_callback callback = ctx->options.callback;
   445aa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   445ae:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   445b2:	b133      	cbz	r3, 445c2 <saadc_irq_handler+0x3e>
			action = callback(dev,
   445b4:	f104 0174 	add.w	r1, r4, #116	; 0x74
   445b8:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   445ba:	2801      	cmp	r0, #1
   445bc:	d014      	beq.n	445e8 <saadc_irq_handler+0x64>
   445be:	2802      	cmp	r0, #2
   445c0:	d029      	beq.n	44616 <saadc_irq_handler+0x92>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   445c2:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   445c6:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   445ca:	429a      	cmp	r2, r3
   445cc:	d923      	bls.n	44616 <saadc_irq_handler+0x92>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   445ce:	3301      	adds	r3, #1
   445d0:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   445d4:	4b1c      	ldr	r3, [pc, #112]	; (44648 <saadc_irq_handler+0xc4>)
   445d6:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   445da:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   445de:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   445e0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   445e4:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   445e8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   445ec:	b92b      	cbnz	r3, 445fa <saadc_irq_handler+0x76>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   445ee:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
}
   445f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   445f6:	f7ff becb 	b.w	44390 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   445fa:	f3bf 8f5b 	dmb	ish
   445fe:	e855 3f00 	ldrex	r3, [r5]
   44602:	1e5a      	subs	r2, r3, #1
   44604:	e845 2100 	strex	r1, r2, [r5]
   44608:	2900      	cmp	r1, #0
   4460a:	d1f8      	bne.n	445fe <saadc_irq_handler+0x7a>
   4460c:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   44610:	2b01      	cmp	r3, #1
   44612:	dcec      	bgt.n	445ee <saadc_irq_handler+0x6a>
   44614:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   44616:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   4461a:	b113      	cbz	r3, 44622 <saadc_irq_handler+0x9e>
	z_impl_k_timer_stop(timer);
   4461c:	480c      	ldr	r0, [pc, #48]	; (44650 <saadc_irq_handler+0xcc>)
   4461e:	f00c fad8 	bl	50bd2 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   44622:	480c      	ldr	r0, [pc, #48]	; (44654 <saadc_irq_handler+0xd0>)
   44624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   44628:	f003 bae8 	b.w	47bfc <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4462c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   44630:	2900      	cmp	r1, #0
   44632:	d0ef      	beq.n	44614 <saadc_irq_handler+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   44634:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   44638:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4463c:	2201      	movs	r2, #1
   4463e:	609a      	str	r2, [r3, #8]
   44640:	601a      	str	r2, [r3, #0]
   44642:	605a      	str	r2, [r3, #4]
}
   44644:	e7e6      	b.n	44614 <saadc_irq_handler+0x90>
   44646:	bf00      	nop
   44648:	40007000 	.word	0x40007000
   4464c:	20000168 	.word	0x20000168
   44650:	20000170 	.word	0x20000170
   44654:	200001c0 	.word	0x200001c0

00044658 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   44658:	4b08      	ldr	r3, [pc, #32]	; (4467c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   4465a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   4465c:	1ac3      	subs	r3, r0, r3
{
   4465e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   44660:	4907      	ldr	r1, [pc, #28]	; (44680 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   44662:	109b      	asrs	r3, r3, #2
{
   44664:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   44666:	4359      	muls	r1, r3
   44668:	4806      	ldr	r0, [pc, #24]	; (44684 <onoff_stop+0x2c>)
   4466a:	2240      	movs	r2, #64	; 0x40
   4466c:	f00b f9cb 	bl	4fa06 <stop>
	notify(mgr, res);
   44670:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   44672:	4601      	mov	r1, r0
	notify(mgr, res);
   44674:	4620      	mov	r0, r4
}
   44676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   4467a:	4718      	bx	r3
   4467c:	200066dc 	.word	0x200066dc
   44680:	b6db6db7 	.word	0xb6db6db7
   44684:	00051008 	.word	0x00051008

00044688 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   44688:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   4468a:	4c0c      	ldr	r4, [pc, #48]	; (446bc <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   4468c:	4a0c      	ldr	r2, [pc, #48]	; (446c0 <onoff_start+0x38>)
   4468e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   44690:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   44692:	9300      	str	r3, [sp, #0]
{
   44694:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   44696:	460b      	mov	r3, r1
   44698:	490a      	ldr	r1, [pc, #40]	; (446c4 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   4469a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   4469c:	4361      	muls	r1, r4
{
   4469e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   446a0:	4809      	ldr	r0, [pc, #36]	; (446c8 <onoff_start+0x40>)
   446a2:	f00b f9dc 	bl	4fa5e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   446a6:	1e01      	subs	r1, r0, #0
   446a8:	da05      	bge.n	446b6 <onoff_start+0x2e>
		notify(mgr, err);
   446aa:	4630      	mov	r0, r6
   446ac:	462b      	mov	r3, r5
	}
}
   446ae:	b002      	add	sp, #8
   446b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   446b4:	4718      	bx	r3
}
   446b6:	b002      	add	sp, #8
   446b8:	bd70      	pop	{r4, r5, r6, pc}
   446ba:	bf00      	nop
   446bc:	200066dc 	.word	0x200066dc
   446c0:	0004facf 	.word	0x0004facf
   446c4:	b6db6db7 	.word	0xb6db6db7
   446c8:	00051008 	.word	0x00051008

000446cc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   446cc:	2200      	movs	r2, #0
{
   446ce:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   446d0:	2101      	movs	r1, #1
{
   446d2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   446d4:	4610      	mov	r0, r2
   446d6:	f7e8 f809 	bl	2c6ec <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   446da:	2000      	movs	r0, #0
   446dc:	f7e7 ffd6 	bl	2c68c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   446e0:	480f      	ldr	r0, [pc, #60]	; (44720 <clk_init+0x54>)
   446e2:	f001 f985 	bl	459f0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   446e6:	4b0f      	ldr	r3, [pc, #60]	; (44724 <clk_init+0x58>)
   446e8:	4298      	cmp	r0, r3
   446ea:	d115      	bne.n	44718 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   446ec:	f001 f990 	bl	45a10 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   446f0:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   446f2:	490d      	ldr	r1, [pc, #52]	; (44728 <clk_init+0x5c>)
   446f4:	4630      	mov	r0, r6
   446f6:	f005 f841 	bl	4977c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   446fa:	2800      	cmp	r0, #0
   446fc:	db0b      	blt.n	44716 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   446fe:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   44700:	4909      	ldr	r1, [pc, #36]	; (44728 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   44702:	2501      	movs	r5, #1
   44704:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   44706:	f104 001c 	add.w	r0, r4, #28
   4470a:	f005 f837 	bl	4977c <onoff_manager_init>
		if (err < 0) {
   4470e:	2800      	cmp	r0, #0
   44710:	db01      	blt.n	44716 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   44712:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   44714:	2000      	movs	r0, #0
}
   44716:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   44718:	f06f 0004 	mvn.w	r0, #4
   4471c:	e7fb      	b.n	44716 <clk_init+0x4a>
   4471e:	bf00      	nop
   44720:	00044761 	.word	0x00044761
   44724:	0bad0000 	.word	0x0bad0000
   44728:	00053374 	.word	0x00053374

0004472c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   4472c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   4472e:	230c      	movs	r3, #12
   44730:	4809      	ldr	r0, [pc, #36]	; (44758 <clkstarted_handle.constprop.0+0x2c>)
   44732:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   44734:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   44736:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   44738:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   4473c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   4473e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   44740:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   44742:	4418      	add	r0, r3
   44744:	f00b f94c 	bl	4f9e0 <set_on_state>
	if (callback) {
   44748:	b12d      	cbz	r5, 44756 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   4474a:	4632      	mov	r2, r6
   4474c:	462b      	mov	r3, r5
   4474e:	4803      	ldr	r0, [pc, #12]	; (4475c <clkstarted_handle.constprop.0+0x30>)
}
   44750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   44754:	4718      	bx	r3
}
   44756:	bd70      	pop	{r4, r5, r6, pc}
   44758:	200066dc 	.word	0x200066dc
   4475c:	00051008 	.word	0x00051008

00044760 <clock_event_handler>:
	switch (event) {
   44760:	b110      	cbz	r0, 44768 <clock_event_handler+0x8>
   44762:	2801      	cmp	r0, #1
   44764:	d004      	beq.n	44770 <clock_event_handler+0x10>
   44766:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   44768:	4b03      	ldr	r3, [pc, #12]	; (44778 <clock_event_handler+0x18>)
   4476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   4476c:	075b      	lsls	r3, r3, #29
   4476e:	d101      	bne.n	44774 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   44770:	f7ff bfdc 	b.w	4472c <clkstarted_handle.constprop.0>
}
   44774:	4770      	bx	lr
   44776:	bf00      	nop
   44778:	200066dc 	.word	0x200066dc

0004477c <generic_hfclk_start>:
{
   4477c:	b508      	push	{r3, lr}
	__asm__ volatile(
   4477e:	f04f 0320 	mov.w	r3, #32
   44782:	f3ef 8111 	mrs	r1, BASEPRI
   44786:	f383 8812 	msr	BASEPRI_MAX, r3
   4478a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   4478e:	4a12      	ldr	r2, [pc, #72]	; (447d8 <generic_hfclk_start+0x5c>)
   44790:	6813      	ldr	r3, [r2, #0]
   44792:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   44796:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   4479a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   4479c:	d00c      	beq.n	447b8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   4479e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   447a2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   447a6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   447aa:	f013 0301 	ands.w	r3, r3, #1
   447ae:	d003      	beq.n	447b8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   447b0:	480a      	ldr	r0, [pc, #40]	; (447dc <generic_hfclk_start+0x60>)
   447b2:	f00b f915 	bl	4f9e0 <set_on_state>
			already_started = true;
   447b6:	2301      	movs	r3, #1
	__asm__ volatile(
   447b8:	f381 8811 	msr	BASEPRI, r1
   447bc:	f3bf 8f6f 	isb	sy
	if (already_started) {
   447c0:	b123      	cbz	r3, 447cc <generic_hfclk_start+0x50>
}
   447c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   447c6:	2000      	movs	r0, #0
   447c8:	f7ff bfb0 	b.w	4472c <clkstarted_handle.constprop.0>
}
   447cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   447d0:	2001      	movs	r0, #1
   447d2:	f00b bab5 	b.w	4fd40 <nrfx_clock_start>
   447d6:	bf00      	nop
   447d8:	2000672c 	.word	0x2000672c
   447dc:	2000671c 	.word	0x2000671c

000447e0 <api_blocking_start>:
{
   447e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   447e2:	2200      	movs	r2, #0
   447e4:	2301      	movs	r3, #1
   447e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   447ea:	ab04      	add	r3, sp, #16
   447ec:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   447f0:	4a09      	ldr	r2, [pc, #36]	; (44818 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   447f2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   447f6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   447f8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   447fc:	f00b f960 	bl	4fac0 <api_start>
	if (err < 0) {
   44800:	2800      	cmp	r0, #0
   44802:	db05      	blt.n	44810 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   44804:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   44808:	2300      	movs	r3, #0
   4480a:	4668      	mov	r0, sp
   4480c:	f003 fa1c 	bl	47c48 <z_impl_k_sem_take>
}
   44810:	b007      	add	sp, #28
   44812:	f85d fb04 	ldr.w	pc, [sp], #4
   44816:	bf00      	nop
   44818:	0004faed 	.word	0x0004faed

0004481c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4481c:	4b09      	ldr	r3, [pc, #36]	; (44844 <generic_hfclk_stop+0x28>)
   4481e:	f3bf 8f5b 	dmb	ish
   44822:	e853 2f00 	ldrex	r2, [r3]
   44826:	f022 0102 	bic.w	r1, r2, #2
   4482a:	e843 1000 	strex	r0, r1, [r3]
   4482e:	2800      	cmp	r0, #0
   44830:	d1f7      	bne.n	44822 <generic_hfclk_stop+0x6>
   44832:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   44836:	07d3      	lsls	r3, r2, #31
   44838:	d402      	bmi.n	44840 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   4483a:	2001      	movs	r0, #1
   4483c:	f001 b8f6 	b.w	45a2c <nrfx_clock_stop>
}
   44840:	4770      	bx	lr
   44842:	bf00      	nop
   44844:	2000672c 	.word	0x2000672c

00044848 <z_nrf_clock_control_get_onoff>:
}
   44848:	4a02      	ldr	r2, [pc, #8]	; (44854 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   4484a:	b2c3      	uxtb	r3, r0
}
   4484c:	201c      	movs	r0, #28
   4484e:	fb03 2000 	mla	r0, r3, r0, r2
   44852:	4770      	bx	lr
   44854:	200066dc 	.word	0x200066dc

00044858 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   44858:	4b09      	ldr	r3, [pc, #36]	; (44880 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   4485a:	f3bf 8f5b 	dmb	ish
   4485e:	e853 2f00 	ldrex	r2, [r3]
   44862:	f042 0101 	orr.w	r1, r2, #1
   44866:	e843 1000 	strex	r0, r1, [r3]
   4486a:	2800      	cmp	r0, #0
   4486c:	d1f7      	bne.n	4485e <z_nrf_clock_bt_ctlr_hf_request+0x6>
   4486e:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   44872:	0793      	lsls	r3, r2, #30
   44874:	d402      	bmi.n	4487c <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   44876:	2001      	movs	r0, #1
   44878:	f00b ba62 	b.w	4fd40 <nrfx_clock_start>
}
   4487c:	4770      	bx	lr
   4487e:	bf00      	nop
   44880:	2000672c 	.word	0x2000672c

00044884 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   44884:	4b09      	ldr	r3, [pc, #36]	; (448ac <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   44886:	f3bf 8f5b 	dmb	ish
   4488a:	e853 2f00 	ldrex	r2, [r3]
   4488e:	f022 0101 	bic.w	r1, r2, #1
   44892:	e843 1000 	strex	r0, r1, [r3]
   44896:	2800      	cmp	r0, #0
   44898:	d1f7      	bne.n	4488a <z_nrf_clock_bt_ctlr_hf_release+0x6>
   4489a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   4489e:	0793      	lsls	r3, r2, #30
   448a0:	d402      	bmi.n	448a8 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   448a2:	2001      	movs	r0, #1
   448a4:	f001 b8c2 	b.w	45a2c <nrfx_clock_stop>
}
   448a8:	4770      	bx	lr
   448aa:	bf00      	nop
   448ac:	2000672c 	.word	0x2000672c

000448b0 <z_nrf_clock_control_lf_on>:
{
   448b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   448b4:	4939      	ldr	r1, [pc, #228]	; (4499c <z_nrf_clock_control_lf_on+0xec>)
   448b6:	f3bf 8f5b 	dmb	ish
   448ba:	4607      	mov	r7, r0
   448bc:	2201      	movs	r2, #1
   448be:	e851 3f00 	ldrex	r3, [r1]
   448c2:	e841 2000 	strex	r0, r2, [r1]
   448c6:	2800      	cmp	r0, #0
   448c8:	d1f9      	bne.n	448be <z_nrf_clock_control_lf_on+0xe>
   448ca:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   448ce:	b933      	cbnz	r3, 448de <z_nrf_clock_control_lf_on+0x2e>
   448d0:	4933      	ldr	r1, [pc, #204]	; (449a0 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   448d2:	4834      	ldr	r0, [pc, #208]	; (449a4 <z_nrf_clock_control_lf_on+0xf4>)
   448d4:	604b      	str	r3, [r1, #4]
   448d6:	60cb      	str	r3, [r1, #12]
   448d8:	608a      	str	r2, [r1, #8]
   448da:	f004 ff62 	bl	497a2 <onoff_request>
	switch (start_mode) {
   448de:	1e7b      	subs	r3, r7, #1
   448e0:	2b01      	cmp	r3, #1
   448e2:	d82f      	bhi.n	44944 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   448e4:	2f01      	cmp	r7, #1
   448e6:	d107      	bne.n	448f8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   448e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   448ec:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   448f0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   448f4:	2b01      	cmp	r3, #1
   448f6:	d025      	beq.n	44944 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   448f8:	f00b fe05 	bl	50506 <k_is_in_isr>
   448fc:	4604      	mov	r4, r0
   448fe:	b918      	cbnz	r0, 44908 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   44900:	4b29      	ldr	r3, [pc, #164]	; (449a8 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   44902:	781b      	ldrb	r3, [r3, #0]
   44904:	2b00      	cmp	r3, #0
   44906:	d141      	bne.n	4498c <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   44908:	f04f 0320 	mov.w	r3, #32
   4490c:	f3ef 8611 	mrs	r6, BASEPRI
   44910:	f383 8812 	msr	BASEPRI_MAX, r3
   44914:	f3bf 8f6f 	isb	sy
   44918:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   4491a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 449ac <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   4491e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   44922:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   44926:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   4492a:	03d2      	lsls	r2, r2, #15
   4492c:	d50c      	bpl.n	44948 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   4492e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   44932:	2b01      	cmp	r3, #1
   44934:	d001      	beq.n	4493a <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   44936:	2f01      	cmp	r7, #1
   44938:	d106      	bne.n	44948 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   4493a:	b30c      	cbz	r4, 44980 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   4493c:	f386 8811 	msr	BASEPRI, r6
   44940:	f3bf 8f6f 	isb	sy
}
   44944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   44948:	b1ac      	cbz	r4, 44976 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   4494a:	4630      	mov	r0, r6
   4494c:	f7e7 fe94 	bl	2c678 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   44950:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   44954:	2b00      	cmp	r3, #0
   44956:	d1e4      	bne.n	44922 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   44958:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   4495c:	2a00      	cmp	r2, #0
   4495e:	d0e0      	beq.n	44922 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   44960:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   44964:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   44968:	2301      	movs	r3, #1
   4496a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   4496e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44972:	60ab      	str	r3, [r5, #8]
}
   44974:	e7d5      	b.n	44922 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   44976:	2100      	movs	r1, #0
   44978:	2021      	movs	r0, #33	; 0x21
   4497a:	f003 fe21 	bl	485c0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   4497e:	e7e7      	b.n	44950 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   44980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44984:	2202      	movs	r2, #2
   44986:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   4498a:	e7db      	b.n	44944 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   4498c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   44990:	2202      	movs	r2, #2
   44992:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   44996:	4606      	mov	r6, r0
}
   44998:	e7bf      	b.n	4491a <z_nrf_clock_control_lf_on+0x6a>
   4499a:	bf00      	nop
   4499c:	20006730 	.word	0x20006730
   449a0:	200066cc 	.word	0x200066cc
   449a4:	200066f8 	.word	0x200066f8
   449a8:	20006de8 	.word	0x20006de8
   449ac:	e000e100 	.word	0xe000e100

000449b0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   449b0:	b530      	push	{r4, r5, lr}
	return port->config;
   449b2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   449b4:	7b04      	ldrb	r4, [r0, #12]
   449b6:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   449ba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   449be:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   449c2:	b085      	sub	sp, #20
   449c4:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   449c8:	d104      	bne.n	449d4 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   449ca:	4628      	mov	r0, r5
   449cc:	f001 fada 	bl	45f84 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   449d0:	2000      	movs	r0, #0
   449d2:	e031      	b.n	44a38 <gpio_nrfx_pin_interrupt_configure+0x88>
	if (mode == GPIO_INT_MODE_LEVEL) {
   449d4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   449d8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   449dc:	d12e      	bne.n	44a3c <gpio_nrfx_pin_interrupt_configure+0x8c>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   449de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   449e2:	bf0c      	ite	eq
   449e4:	2304      	moveq	r3, #4
   449e6:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   449e8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   449ec:	6883      	ldr	r3, [r0, #8]
   449ee:	40cb      	lsrs	r3, r1
   449f0:	07d9      	lsls	r1, r3, #31
   449f2:	d42f      	bmi.n	44a54 <gpio_nrfx_pin_interrupt_configure+0xa4>
   449f4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   449f8:	d12c      	bne.n	44a54 <gpio_nrfx_pin_interrupt_configure+0xa4>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   449fa:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   449fc:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   449fe:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   44a02:	4a1d      	ldr	r2, [pc, #116]	; (44a78 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   44a04:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   44a08:	bf18      	it	ne
   44a0a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   44a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   44a12:	07db      	lsls	r3, r3, #31
   44a14:	d41e      	bmi.n	44a54 <gpio_nrfx_pin_interrupt_configure+0xa4>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   44a16:	f10d 0407 	add.w	r4, sp, #7
   44a1a:	4621      	mov	r1, r4
   44a1c:	4628      	mov	r0, r5
   44a1e:	f001 fa15 	bl	45e4c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   44a22:	4b16      	ldr	r3, [pc, #88]	; (44a7c <gpio_nrfx_pin_interrupt_configure+0xcc>)
   44a24:	4298      	cmp	r0, r3
   44a26:	d114      	bne.n	44a52 <gpio_nrfx_pin_interrupt_configure+0xa2>
			err = nrfx_gpiote_channel_alloc(&ch);
   44a28:	4620      	mov	r0, r4
   44a2a:	f001 fa5d 	bl	45ee8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   44a2e:	4b14      	ldr	r3, [pc, #80]	; (44a80 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   44a30:	4298      	cmp	r0, r3
   44a32:	d00e      	beq.n	44a52 <gpio_nrfx_pin_interrupt_configure+0xa2>
				return -ENOMEM;
   44a34:	f06f 000b 	mvn.w	r0, #11
}
   44a38:	b005      	add	sp, #20
   44a3a:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   44a3c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   44a40:	d005      	beq.n	44a4e <gpio_nrfx_pin_interrupt_configure+0x9e>
   44a42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   44a46:	bf0c      	ite	eq
   44a48:	2302      	moveq	r3, #2
   44a4a:	2301      	movne	r3, #1
   44a4c:	e7cc      	b.n	449e8 <gpio_nrfx_pin_interrupt_configure+0x38>
   44a4e:	2303      	movs	r3, #3
   44a50:	e7ca      	b.n	449e8 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   44a52:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   44a54:	2300      	movs	r3, #0
   44a56:	4619      	mov	r1, r3
   44a58:	aa02      	add	r2, sp, #8
   44a5a:	4628      	mov	r0, r5
   44a5c:	f001 f8d2 	bl	45c04 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   44a60:	4b07      	ldr	r3, [pc, #28]	; (44a80 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   44a62:	4298      	cmp	r0, r3
   44a64:	d104      	bne.n	44a70 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   44a66:	2101      	movs	r1, #1
   44a68:	4628      	mov	r0, r5
   44a6a:	f001 fa43 	bl	45ef4 <nrfx_gpiote_trigger_enable>
   44a6e:	e7af      	b.n	449d0 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   44a70:	f06f 0004 	mvn.w	r0, #4
   44a74:	e7e0      	b.n	44a38 <gpio_nrfx_pin_interrupt_configure+0x88>
   44a76:	bf00      	nop
   44a78:	50000300 	.word	0x50000300
   44a7c:	0bad0004 	.word	0x0bad0004
   44a80:	0bad0000 	.word	0x0bad0000

00044a84 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   44a84:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   44a86:	f001 fa1f 	bl	45ec8 <nrfx_gpiote_is_init>
   44a8a:	4604      	mov	r4, r0
   44a8c:	b968      	cbnz	r0, 44aaa <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   44a8e:	f001 f9f3 	bl	45e78 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   44a92:	4b08      	ldr	r3, [pc, #32]	; (44ab4 <gpio_nrfx_init+0x30>)
   44a94:	4298      	cmp	r0, r3
   44a96:	d10a      	bne.n	44aae <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   44a98:	4807      	ldr	r0, [pc, #28]	; (44ab8 <gpio_nrfx_init+0x34>)
   44a9a:	4621      	mov	r1, r4
   44a9c:	f001 f9d0 	bl	45e40 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   44aa0:	4622      	mov	r2, r4
   44aa2:	2105      	movs	r1, #5
   44aa4:	2006      	movs	r0, #6
   44aa6:	f7e7 fe21 	bl	2c6ec <z_arm_irq_priority_set>
		return 0;
   44aaa:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   44aac:	bd10      	pop	{r4, pc}
		return -EIO;
   44aae:	f06f 0004 	mvn.w	r0, #4
   44ab2:	e7fb      	b.n	44aac <gpio_nrfx_init+0x28>
   44ab4:	0bad0000 	.word	0x0bad0000
   44ab8:	00044abd 	.word	0x00044abd

00044abc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   44abc:	0942      	lsrs	r2, r0, #5
{
   44abe:	b570      	push	{r4, r5, r6, lr}
   44ac0:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   44ac2:	d002      	beq.n	44aca <nrfx_gpio_handler+0xe>
   44ac4:	2a01      	cmp	r2, #1
   44ac6:	d015      	beq.n	44af4 <nrfx_gpio_handler+0x38>
}
   44ac8:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   44aca:	4e0b      	ldr	r6, [pc, #44]	; (44af8 <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   44acc:	6932      	ldr	r2, [r6, #16]
   44ace:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   44ad0:	2900      	cmp	r1, #0
   44ad2:	d0f9      	beq.n	44ac8 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   44ad4:	f003 031f 	and.w	r3, r3, #31
   44ad8:	2501      	movs	r5, #1
	return node->next;
   44ada:	680c      	ldr	r4, [r1, #0]
   44adc:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   44ade:	688a      	ldr	r2, [r1, #8]
   44ae0:	402a      	ands	r2, r5
   44ae2:	d002      	beq.n	44aea <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   44ae4:	684b      	ldr	r3, [r1, #4]
   44ae6:	4630      	mov	r0, r6
   44ae8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   44aea:	2c00      	cmp	r4, #0
   44aec:	d0ec      	beq.n	44ac8 <nrfx_gpio_handler+0xc>
   44aee:	4621      	mov	r1, r4
   44af0:	6824      	ldr	r4, [r4, #0]
   44af2:	e7f4      	b.n	44ade <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   44af4:	4e01      	ldr	r6, [pc, #4]	; (44afc <nrfx_gpio_handler+0x40>)
   44af6:	e7e9      	b.n	44acc <nrfx_gpio_handler+0x10>
   44af8:	00051038 	.word	0x00051038
   44afc:	00051020 	.word	0x00051020

00044b00 <gpio_nrfx_pin_configure>:
{
   44b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   44b04:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   44b06:	7b3b      	ldrb	r3, [r7, #12]
   44b08:	f001 051f 	and.w	r5, r1, #31
{
   44b0c:	b085      	sub	sp, #20
   44b0e:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   44b10:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   44b14:	4614      	mov	r4, r2
   44b16:	b9ca      	cbnz	r2, 44b4c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   44b18:	a902      	add	r1, sp, #8
   44b1a:	4628      	mov	r0, r5
   44b1c:	f001 f996 	bl	45e4c <nrfx_gpiote_channel_get>
   44b20:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   44b22:	4628      	mov	r0, r5
   44b24:	f001 fa56 	bl	45fd4 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   44b28:	4b47      	ldr	r3, [pc, #284]	; (44c48 <gpio_nrfx_pin_configure+0x148>)
   44b2a:	4298      	cmp	r0, r3
   44b2c:	d004      	beq.n	44b38 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   44b2e:	f06f 0004 	mvn.w	r0, #4
}
   44b32:	b005      	add	sp, #20
   44b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   44b38:	4284      	cmp	r4, r0
   44b3a:	d105      	bne.n	44b48 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   44b3c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   44b40:	f001 f9cc 	bl	45edc <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   44b44:	42a0      	cmp	r0, r4
   44b46:	d1f2      	bne.n	44b2e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   44b48:	2000      	movs	r0, #0
   44b4a:	e7f2      	b.n	44b32 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   44b4c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   44b50:	f10d 0103 	add.w	r1, sp, #3
   44b54:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   44b56:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   44b5a:	f001 f977 	bl	45e4c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   44b5e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   44b60:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   44b62:	aa02      	add	r2, sp, #8
   44b64:	4649      	mov	r1, r9
   44b66:	4628      	mov	r0, r5
   44b68:	f001 f84c 	bl	45c04 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   44b6c:	4b36      	ldr	r3, [pc, #216]	; (44c48 <gpio_nrfx_pin_configure+0x148>)
   44b6e:	4298      	cmp	r0, r3
   44b70:	d002      	beq.n	44b78 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   44b72:	f06f 0015 	mvn.w	r0, #21
   44b76:	e7dc      	b.n	44b32 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   44b78:	4580      	cmp	r8, r0
   44b7a:	d103      	bne.n	44b84 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   44b7c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   44b80:	f001 f9ac 	bl	45edc <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   44b84:	05a3      	lsls	r3, r4, #22
   44b86:	d54c      	bpl.n	44c22 <gpio_nrfx_pin_configure+0x122>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   44b88:	4b30      	ldr	r3, [pc, #192]	; (44c4c <gpio_nrfx_pin_configure+0x14c>)
   44b8a:	4a31      	ldr	r2, [pc, #196]	; (44c50 <gpio_nrfx_pin_configure+0x150>)
   44b8c:	4023      	ands	r3, r4
   44b8e:	4293      	cmp	r3, r2
   44b90:	d039      	beq.n	44c06 <gpio_nrfx_pin_configure+0x106>
   44b92:	d80c      	bhi.n	44bae <gpio_nrfx_pin_configure+0xae>
   44b94:	2b06      	cmp	r3, #6
   44b96:	d014      	beq.n	44bc2 <gpio_nrfx_pin_configure+0xc2>
   44b98:	d804      	bhi.n	44ba4 <gpio_nrfx_pin_configure+0xa4>
   44b9a:	b193      	cbz	r3, 44bc2 <gpio_nrfx_pin_configure+0xc2>
   44b9c:	2b02      	cmp	r3, #2
   44b9e:	d1e8      	bne.n	44b72 <gpio_nrfx_pin_configure+0x72>
   44ba0:	2304      	movs	r3, #4
   44ba2:	e00e      	b.n	44bc2 <gpio_nrfx_pin_configure+0xc2>
   44ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   44ba8:	d1e3      	bne.n	44b72 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   44baa:	2301      	movs	r3, #1
   44bac:	e009      	b.n	44bc2 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   44bae:	4a29      	ldr	r2, [pc, #164]	; (44c54 <gpio_nrfx_pin_configure+0x154>)
   44bb0:	4293      	cmp	r3, r2
   44bb2:	d02a      	beq.n	44c0a <gpio_nrfx_pin_configure+0x10a>
   44bb4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   44bb8:	d029      	beq.n	44c0e <gpio_nrfx_pin_configure+0x10e>
   44bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   44bbe:	d1d8      	bne.n	44b72 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   44bc0:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   44bc2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   44bc6:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   44bca:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   44bce:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   44bd0:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   44bd4:	bf54      	ite	pl
   44bd6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
   44bda:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   44bdc:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   44bde:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   44be2:	d516      	bpl.n	44c12 <gpio_nrfx_pin_configure+0x112>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   44be4:	687a      	ldr	r2, [r7, #4]
   44be6:	2301      	movs	r3, #1
   44be8:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   44bea:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   44bee:	2200      	movs	r2, #0
   44bf0:	a901      	add	r1, sp, #4
   44bf2:	4628      	mov	r0, r5
   44bf4:	f001 f8b4 	bl	45d60 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   44bf8:	4b13      	ldr	r3, [pc, #76]	; (44c48 <gpio_nrfx_pin_configure+0x148>)
   44bfa:	4298      	cmp	r0, r3
   44bfc:	bf14      	ite	ne
   44bfe:	f06f 0015 	mvnne.w	r0, #21
   44c02:	2000      	moveq	r0, #0
   44c04:	e795      	b.n	44b32 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   44c06:	2307      	movs	r3, #7
   44c08:	e7db      	b.n	44bc2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   44c0a:	2305      	movs	r3, #5
   44c0c:	e7d9      	b.n	44bc2 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   44c0e:	2303      	movs	r3, #3
   44c10:	e7d7      	b.n	44bc2 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   44c12:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   44c14:	bf41      	itttt	mi
   44c16:	2301      	movmi	r3, #1
   44c18:	687a      	ldrmi	r2, [r7, #4]
   44c1a:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   44c1c:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   44c20:	e7e5      	b.n	44bee <gpio_nrfx_pin_configure+0xee>
	if (flags & GPIO_PULL_UP) {
   44c22:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   44c24:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   44c28:	bf54      	ite	pl
   44c2a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   44c2e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   44c30:	461a      	mov	r2, r3
   44c32:	a901      	add	r1, sp, #4
   44c34:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   44c36:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   44c3a:	f000 ffe3 	bl	45c04 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   44c3e:	4b02      	ldr	r3, [pc, #8]	; (44c48 <gpio_nrfx_pin_configure+0x148>)
   44c40:	4298      	cmp	r0, r3
   44c42:	d081      	beq.n	44b48 <gpio_nrfx_pin_configure+0x48>
   44c44:	e795      	b.n	44b72 <gpio_nrfx_pin_configure+0x72>
   44c46:	bf00      	nop
   44c48:	0bad0000 	.word	0x0bad0000
   44c4c:	00f00006 	.word	0x00f00006
   44c50:	00100006 	.word	0x00100006
   44c54:	00400002 	.word	0x00400002

00044c58 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   44c58:	4b02      	ldr	r3, [pc, #8]	; (44c64 <flash_nrf_pages_layout+0xc>)
   44c5a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   44c5c:	2301      	movs	r3, #1
   44c5e:	6013      	str	r3, [r2, #0]
}
   44c60:	4770      	bx	lr
   44c62:	bf00      	nop
   44c64:	2000674c 	.word	0x2000674c

00044c68 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   44c68:	4800      	ldr	r0, [pc, #0]	; (44c6c <flash_nrf_get_parameters+0x4>)
   44c6a:	4770      	bx	lr
   44c6c:	000533d8 	.word	0x000533d8

00044c70 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   44c70:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   44c72:	2201      	movs	r2, #1
   44c74:	4611      	mov	r1, r2
   44c76:	4807      	ldr	r0, [pc, #28]	; (44c94 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   44c78:	4c07      	ldr	r4, [pc, #28]	; (44c98 <nrf_flash_init+0x28>)
   44c7a:	f00b fd33 	bl	506e4 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   44c7e:	f000 f9c3 	bl	45008 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   44c82:	f00b f8eb 	bl	4fe5c <nrfx_nvmc_flash_page_count_get>
   44c86:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   44c88:	f00b f8e4 	bl	4fe54 <nrfx_nvmc_flash_page_size_get>
   44c8c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   44c8e:	2000      	movs	r0, #0
   44c90:	bd10      	pop	{r4, pc}
   44c92:	bf00      	nop
   44c94:	20006754 	.word	0x20006754
   44c98:	2000674c 	.word	0x2000674c

00044c9c <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   44c9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   44ca0:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   44ca4:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   44ca8:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   44cac:	f023 031f 	bic.w	r3, r3, #31
   44cb0:	430b      	orrs	r3, r1
    pofcon |=
   44cb2:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   44cb6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   44cba:	4b02      	ldr	r3, [pc, #8]	; (44cc4 <restore_pofwarn.part.0+0x28>)
   44cbc:	2200      	movs	r2, #0
   44cbe:	701a      	strb	r2, [r3, #0]
	}
}
   44cc0:	4770      	bx	lr
   44cc2:	bf00      	nop
   44cc4:	20006de1 	.word	0x20006de1

00044cc8 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   44cc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   44ccc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   44cd0:	2b08      	cmp	r3, #8
   44cd2:	d122      	bne.n	44d1a <suspend_pofwarn+0x52>
    uint32_t pofcon = p_reg->POFCON;
   44cd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   44cd8:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   44cdc:	f011 0001 	ands.w	r0, r1, #1
   44ce0:	d01c      	beq.n	44d1c <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
   44ce2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   44ce6:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   44cea:	f020 001f 	bic.w	r0, r0, #31
    pofcon |=
   44cee:	4308      	orrs	r0, r1
    p_reg->POFCON = pofcon;
   44cf0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   44cf4:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   44cf8:	b158      	cbz	r0, 44d12 <suspend_pofwarn+0x4a>
    uint32_t pofcon = p_reg->POFCON;
   44cfa:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   44cfe:	f023 031f 	bic.w	r3, r3, #31
   44d02:	430b      	orrs	r3, r1
    pofcon |=
   44d04:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   44d08:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   44d0c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   44d10:	4770      	bx	lr
		pofcon_enabled = enabled;
   44d12:	4b03      	ldr	r3, [pc, #12]	; (44d20 <suspend_pofwarn+0x58>)
   44d14:	2201      	movs	r2, #1
   44d16:	701a      	strb	r2, [r3, #0]
   44d18:	4770      	bx	lr
		return 0;
   44d1a:	2000      	movs	r0, #0
}
   44d1c:	4770      	bx	lr
   44d1e:	bf00      	nop
   44d20:	20006de1 	.word	0x20006de1

00044d24 <erase_op>:
{
   44d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44d26:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   44d28:	f00b f894 	bl	4fe54 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   44d2c:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   44d2e:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   44d30:	b10b      	cbz	r3, 44d36 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   44d32:	f000 f97b 	bl	4502c <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   44d36:	4f13      	ldr	r7, [pc, #76]	; (44d84 <erase_op+0x60>)
{
   44d38:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   44d3a:	f7ff ffc5 	bl	44cc8 <suspend_pofwarn>
   44d3e:	b9e8      	cbnz	r0, 44d7c <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   44d40:	6860      	ldr	r0, [r4, #4]
   44d42:	f001 fa4d 	bl	461e0 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   44d46:	68a3      	ldr	r3, [r4, #8]
   44d48:	1b5b      	subs	r3, r3, r5
   44d4a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   44d4c:	6863      	ldr	r3, [r4, #4]
   44d4e:	442b      	add	r3, r5
   44d50:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   44d52:	783b      	ldrb	r3, [r7, #0]
   44d54:	b10b      	cbz	r3, 44d5a <erase_op+0x36>
   44d56:	f7ff ffa1 	bl	44c9c <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   44d5a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   44d5c:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   44d5e:	b93b      	cbnz	r3, 44d70 <erase_op+0x4c>
	} while (e_ctx->len > 0);
   44d60:	68a3      	ldr	r3, [r4, #8]
   44d62:	2b00      	cmp	r3, #0
   44d64:	d1e9      	bne.n	44d3a <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   44d66:	68a0      	ldr	r0, [r4, #8]
   44d68:	3800      	subs	r0, #0
   44d6a:	bf18      	it	ne
   44d6c:	2001      	movne	r0, #1
}
   44d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   44d70:	4630      	mov	r0, r6
   44d72:	f7e3 feb1 	bl	28ad8 <nrf_flash_sync_check_time_limit>
   44d76:	2800      	cmp	r0, #0
   44d78:	d0f2      	beq.n	44d60 <erase_op+0x3c>
   44d7a:	e7f4      	b.n	44d66 <erase_op+0x42>
			return -ECANCELED;
   44d7c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   44d80:	e7f5      	b.n	44d6e <erase_op+0x4a>
   44d82:	bf00      	nop
   44d84:	20006de1 	.word	0x20006de1

00044d88 <flash_nrf_erase>:
{
   44d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   44d8a:	b087      	sub	sp, #28
   44d8c:	460e      	mov	r6, r1
   44d8e:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   44d90:	f00b f860 	bl	4fe54 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   44d94:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   44d96:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   44d98:	4630      	mov	r0, r6
   44d9a:	f00a ff32 	bl	4fc02 <is_regular_addr_valid>
   44d9e:	b3c8      	cbz	r0, 44e14 <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   44da0:	fbb6 f3f7 	udiv	r3, r6, r7
   44da4:	fb07 6313 	mls	r3, r7, r3, r6
   44da8:	bba3      	cbnz	r3, 44e14 <flash_nrf_erase+0x8c>
   44daa:	fbb5 f4f7 	udiv	r4, r5, r7
   44dae:	fb07 5414 	mls	r4, r7, r4, r5
   44db2:	bb7c      	cbnz	r4, 44e14 <flash_nrf_erase+0x8c>
		if (!n_pages) {
   44db4:	42bd      	cmp	r5, r7
   44db6:	d322      	bcc.n	44dfe <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   44db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44dc0:	4816      	ldr	r0, [pc, #88]	; (44e1c <flash_nrf_erase+0x94>)
   44dc2:	f002 ff41 	bl	47c48 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   44dc6:	f00a ff43 	bl	4fc50 <nrf_flash_sync_is_required>
   44dca:	ab02      	add	r3, sp, #8
   44dcc:	4601      	mov	r1, r0
	struct flash_context context = {
   44dce:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   44dd0:	b1c0      	cbz	r0, 44e04 <flash_nrf_erase+0x7c>
	struct flash_context context = {
   44dd2:	4621      	mov	r1, r4
   44dd4:	4618      	mov	r0, r3
   44dd6:	f006 fd63 	bl	4b8a0 <memset>
   44dda:	2201      	movs	r2, #1
   44ddc:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   44de0:	4a0f      	ldr	r2, [pc, #60]	; (44e20 <flash_nrf_erase+0x98>)
   44de2:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   44de6:	480f      	ldr	r0, [pc, #60]	; (44e24 <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   44de8:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   44dec:	f000 f916 	bl	4501c <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   44df0:	4668      	mov	r0, sp
   44df2:	f7e3 fdf5 	bl	289e0 <nrf_flash_sync_exe>
	return	erase_op(&context);
   44df6:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   44df8:	4808      	ldr	r0, [pc, #32]	; (44e1c <flash_nrf_erase+0x94>)
   44dfa:	f002 feff 	bl	47bfc <z_impl_k_sem_give>
}
   44dfe:	4620      	mov	r0, r4
   44e00:	b007      	add	sp, #28
   44e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   44e04:	4618      	mov	r0, r3
   44e06:	f006 fd4b 	bl	4b8a0 <memset>
   44e0a:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   44e0e:	f7ff ff89 	bl	44d24 <erase_op>
   44e12:	e7f0      	b.n	44df6 <flash_nrf_erase+0x6e>
		return -EINVAL;
   44e14:	f06f 0415 	mvn.w	r4, #21
   44e18:	e7f1      	b.n	44dfe <flash_nrf_erase+0x76>
   44e1a:	bf00      	nop
   44e1c:	20006754 	.word	0x20006754
   44e20:	00044d25 	.word	0x00044d25
   44e24:	00015e64 	.word	0x00015e64

00044e28 <write_op>:
{
   44e28:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   44e2a:	7b03      	ldrb	r3, [r0, #12]
{
   44e2c:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   44e2e:	b10b      	cbz	r3, 44e34 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   44e30:	f000 f8fc 	bl	4502c <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   44e34:	4e19      	ldr	r6, [pc, #100]	; (44e9c <write_op+0x74>)
{
   44e36:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   44e38:	68a3      	ldr	r3, [r4, #8]
   44e3a:	2b03      	cmp	r3, #3
   44e3c:	d806      	bhi.n	44e4c <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   44e3e:	4a18      	ldr	r2, [pc, #96]	; (44ea0 <write_op+0x78>)
   44e40:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   44e44:	07db      	lsls	r3, r3, #31
   44e46:	d5fb      	bpl.n	44e40 <write_op+0x18>
	return FLASH_OP_DONE;
   44e48:	2000      	movs	r0, #0
}
   44e4a:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   44e4c:	f7ff ff3c 	bl	44cc8 <suspend_pofwarn>
   44e50:	bb08      	cbnz	r0, 44e96 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   44e52:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   44e54:	6860      	ldr	r0, [r4, #4]
   44e56:	6819      	ldr	r1, [r3, #0]
   44e58:	f001 f9e2 	bl	46220 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   44e5c:	7833      	ldrb	r3, [r6, #0]
   44e5e:	b10b      	cbz	r3, 44e64 <write_op+0x3c>
   44e60:	f7ff ff1c 	bl	44c9c <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   44e64:	6863      	ldr	r3, [r4, #4]
   44e66:	3304      	adds	r3, #4
   44e68:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   44e6a:	6823      	ldr	r3, [r4, #0]
   44e6c:	3304      	adds	r3, #4
   44e6e:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   44e70:	68a3      	ldr	r3, [r4, #8]
   44e72:	3b04      	subs	r3, #4
   44e74:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   44e76:	7b23      	ldrb	r3, [r4, #12]
		i++;
   44e78:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   44e7a:	2b00      	cmp	r3, #0
   44e7c:	d0dc      	beq.n	44e38 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   44e7e:	4628      	mov	r0, r5
   44e80:	f7e3 fe2a 	bl	28ad8 <nrf_flash_sync_check_time_limit>
   44e84:	2800      	cmp	r0, #0
   44e86:	d0d7      	beq.n	44e38 <write_op+0x10>
   44e88:	4a05      	ldr	r2, [pc, #20]	; (44ea0 <write_op+0x78>)
   44e8a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   44e8e:	07d9      	lsls	r1, r3, #31
   44e90:	d5fb      	bpl.n	44e8a <write_op+0x62>
				return FLASH_OP_ONGOING;
   44e92:	2001      	movs	r0, #1
   44e94:	e7d9      	b.n	44e4a <write_op+0x22>
			return -ECANCELED;
   44e96:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   44e9a:	e7d6      	b.n	44e4a <write_op+0x22>
   44e9c:	20006de1 	.word	0x20006de1
   44ea0:	4001e000 	.word	0x4001e000

00044ea4 <flash_nrf_write>:
{
   44ea4:	b570      	push	{r4, r5, r6, lr}
   44ea6:	460d      	mov	r5, r1
   44ea8:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   44eaa:	4619      	mov	r1, r3
   44eac:	4628      	mov	r0, r5
{
   44eae:	4616      	mov	r6, r2
   44eb0:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   44eb2:	f00a fea6 	bl	4fc02 <is_regular_addr_valid>
   44eb6:	b360      	cbz	r0, 44f12 <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   44eb8:	ea45 0304 	orr.w	r3, r5, r4
   44ebc:	079b      	lsls	r3, r3, #30
   44ebe:	d128      	bne.n	44f12 <flash_nrf_write+0x6e>
	if (!len) {
   44ec0:	b1fc      	cbz	r4, 44f02 <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   44ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44eca:	4813      	ldr	r0, [pc, #76]	; (44f18 <flash_nrf_write+0x74>)
   44ecc:	f002 febc 	bl	47c48 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   44ed0:	f00a febe 	bl	4fc50 <nrf_flash_sync_is_required>
   44ed4:	4603      	mov	r3, r0
	struct flash_context context = {
   44ed6:	e9cd 6502 	strd	r6, r5, [sp, #8]
   44eda:	a802      	add	r0, sp, #8
   44edc:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   44ede:	b19b      	cbz	r3, 44f08 <flash_nrf_write+0x64>
	struct flash_context context = {
   44ee0:	2301      	movs	r3, #1
   44ee2:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   44ee6:	4b0d      	ldr	r3, [pc, #52]	; (44f1c <flash_nrf_write+0x78>)
   44ee8:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   44eec:	f641 504c 	movw	r0, #7500	; 0x1d4c
   44ef0:	f000 f894 	bl	4501c <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   44ef4:	4668      	mov	r0, sp
   44ef6:	f7e3 fd73 	bl	289e0 <nrf_flash_sync_exe>
	return write_op(&context);
   44efa:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   44efc:	4806      	ldr	r0, [pc, #24]	; (44f18 <flash_nrf_write+0x74>)
   44efe:	f002 fe7d 	bl	47bfc <z_impl_k_sem_give>
}
   44f02:	4620      	mov	r0, r4
   44f04:	b006      	add	sp, #24
   44f06:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   44f08:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   44f0c:	f7ff ff8c 	bl	44e28 <write_op>
   44f10:	e7f3      	b.n	44efa <flash_nrf_write+0x56>
		return -EINVAL;
   44f12:	f06f 0415 	mvn.w	r4, #21
   44f16:	e7f4      	b.n	44f02 <flash_nrf_write+0x5e>
   44f18:	20006754 	.word	0x20006754
   44f1c:	00044e29 	.word	0x00044e29

00044f20 <time_slot_callback_work>:
{
   44f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   44f22:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   44f24:	e9d3 2000 	ldrd	r2, r0, [r3]
   44f28:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   44f2a:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   44f2c:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   44f2e:	d013      	beq.n	44f58 <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   44f30:	f10d 010f 	add.w	r1, sp, #15
   44f34:	f10d 000e 	add.w	r0, sp, #14
   44f38:	f7f2 fb8e 	bl	37658 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   44f3c:	2300      	movs	r3, #0
   44f3e:	9300      	str	r3, [sp, #0]
   44f40:	4619      	mov	r1, r3
   44f42:	f89d 200f 	ldrb.w	r2, [sp, #15]
   44f46:	f89d 000e 	ldrb.w	r0, [sp, #14]
   44f4a:	f7f0 f807 	bl	34f5c <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   44f4e:	4b03      	ldr	r3, [pc, #12]	; (44f5c <time_slot_callback_work+0x3c>)
   44f50:	60dc      	str	r4, [r3, #12]
   44f52:	4803      	ldr	r0, [pc, #12]	; (44f60 <time_slot_callback_work+0x40>)
   44f54:	f002 fe52 	bl	47bfc <z_impl_k_sem_give>
}
   44f58:	b004      	add	sp, #16
   44f5a:	bd10      	pop	{r4, pc}
   44f5c:	2000676c 	.word	0x2000676c
   44f60:	2000677c 	.word	0x2000677c

00044f64 <time_slot_delay>:
{
   44f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   44f68:	b08d      	sub	sp, #52	; 0x34
   44f6a:	4606      	mov	r6, r0
   44f6c:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   44f6e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   44f72:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   44f76:	4690      	mov	r8, r2
   44f78:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   44f7a:	f7f2 fb6d 	bl	37658 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   44f7e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   44f82:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   44f86:	9700      	str	r7, [sp, #0]
   44f88:	2400      	movs	r4, #0
   44f8a:	3501      	adds	r5, #1
   44f8c:	4633      	mov	r3, r6
   44f8e:	e9cd 4407 	strd	r4, r4, [sp, #28]
   44f92:	e9cd 8905 	strd	r8, r9, [sp, #20]
   44f96:	e9cd 4403 	strd	r4, r4, [sp, #12]
   44f9a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   44f9e:	b2ea      	uxtb	r2, r5
   44fa0:	2101      	movs	r1, #1
   44fa2:	f7ef ff4f 	bl	34e44 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   44fa6:	f030 0302 	bics.w	r3, r0, #2
   44faa:	d00d      	beq.n	44fc8 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   44fac:	4b08      	ldr	r3, [pc, #32]	; (44fd0 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   44fae:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   44fb2:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   44fb4:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   44fb8:	9400      	str	r4, [sp, #0]
   44fba:	4623      	mov	r3, r4
   44fbc:	4621      	mov	r1, r4
   44fbe:	f7ef ffcd 	bl	34f5c <ticker_stop>
   44fc2:	4804      	ldr	r0, [pc, #16]	; (44fd4 <time_slot_delay+0x70>)
   44fc4:	f002 fe1a 	bl	47bfc <z_impl_k_sem_give>
}
   44fc8:	b00d      	add	sp, #52	; 0x34
   44fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   44fce:	bf00      	nop
   44fd0:	2000676c 	.word	0x2000676c
   44fd4:	2000677c 	.word	0x2000677c

00044fd8 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   44fd8:	9b01      	ldr	r3, [sp, #4]
   44fda:	4a02      	ldr	r2, [pc, #8]	; (44fe4 <time_slot_callback_prepare+0xc>)
   44fdc:	2131      	movs	r1, #49	; 0x31
   44fde:	f7ff bfc1 	b.w	44f64 <time_slot_delay>
   44fe2:	bf00      	nop
   44fe4:	00044fe9 	.word	0x00044fe9

00044fe8 <time_slot_callback_abort>:
{
   44fe8:	b570      	push	{r4, r5, r6, lr}
   44fea:	9d05      	ldr	r5, [sp, #20]
   44fec:	4604      	mov	r4, r0
	ll_radio_state_abort();
   44fee:	f7f2 fb39 	bl	37664 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   44ff2:	462b      	mov	r3, r5
   44ff4:	4620      	mov	r0, r4
   44ff6:	4a03      	ldr	r2, [pc, #12]	; (45004 <time_slot_callback_abort+0x1c>)
}
   44ff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   44ffc:	2106      	movs	r1, #6
   44ffe:	f7ff bfb1 	b.w	44f64 <time_slot_delay>
   45002:	bf00      	nop
   45004:	00044f21 	.word	0x00044f21

00045008 <nrf_flash_sync_init>:
{
   45008:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   4500a:	2201      	movs	r2, #1
   4500c:	2100      	movs	r1, #0
   4500e:	4802      	ldr	r0, [pc, #8]	; (45018 <nrf_flash_sync_init+0x10>)
   45010:	f00b fb68 	bl	506e4 <z_impl_k_sem_init>
}
   45014:	2000      	movs	r0, #0
   45016:	bd08      	pop	{r3, pc}
   45018:	2000677c 	.word	0x2000677c

0004501c <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   4501c:	4b02      	ldr	r3, [pc, #8]	; (45028 <nrf_flash_sync_set_context+0xc>)
   4501e:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   45022:	e9c3 2000 	strd	r2, r0, [r3]
}
   45026:	4770      	bx	lr
   45028:	2000676c 	.word	0x2000676c

0004502c <nrf_flash_sync_get_timestamp_begin>:
{
   4502c:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   4502e:	f7f0 f835 	bl	3509c <ticker_ticks_now_get>
   45032:	4b01      	ldr	r3, [pc, #4]	; (45038 <nrf_flash_sync_get_timestamp_begin+0xc>)
   45034:	6098      	str	r0, [r3, #8]
}
   45036:	bd08      	pop	{r3, pc}
   45038:	2000676c 	.word	0x2000676c

0004503c <random_byte_get>:
	__asm__ volatile(
   4503c:	f04f 0320 	mov.w	r3, #32
   45040:	f3ef 8211 	mrs	r2, BASEPRI
   45044:	f383 8812 	msr	BASEPRI_MAX, r3
   45048:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   4504c:	4b09      	ldr	r3, [pc, #36]	; (45074 <random_byte_get+0x38>)
   4504e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   45052:	b161      	cbz	r1, 4506e <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45054:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   45056:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   4505a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   4505e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   45062:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   45064:	f382 8811 	msr	BASEPRI, r2
   45068:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   4506c:	4770      	bx	lr
	int retval = -EAGAIN;
   4506e:	f06f 000a 	mvn.w	r0, #10
   45072:	e7f7      	b.n	45064 <random_byte_get+0x28>
   45074:	4000d000 	.word	0x4000d000

00045078 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   45078:	b5f0      	push	{r4, r5, r6, r7, lr}
   4507a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   4507c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   4507e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   45080:	f04f 0020 	mov.w	r0, #32
   45084:	f3ef 8e11 	mrs	lr, BASEPRI
   45088:	f380 8812 	msr	BASEPRI_MAX, r0
   4508c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   45090:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   45092:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   45096:	1ba4      	subs	r4, r4, r6
   45098:	403c      	ands	r4, r7
	if (available < len) {
   4509a:	42a2      	cmp	r2, r4
		len = available;
   4509c:	bf88      	it	hi
   4509e:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   450a0:	18b0      	adds	r0, r6, r2
   450a2:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   450a4:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   450a6:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   450a8:	f38e 8811 	msr	BASEPRI, lr
   450ac:	f3bf 8f6f 	isb	sy
   450b0:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   450b2:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   450b4:	4282      	cmp	r2, r0
   450b6:	d119      	bne.n	450ec <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   450b8:	4566      	cmp	r6, ip
   450ba:	d10d      	bne.n	450d8 <rng_pool_get+0x60>
	__asm__ volatile(
   450bc:	f04f 0520 	mov.w	r5, #32
   450c0:	f3ef 8211 	mrs	r2, BASEPRI
   450c4:	f385 8812 	msr	BASEPRI_MAX, r5
   450c8:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   450cc:	781d      	ldrb	r5, [r3, #0]
   450ce:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   450d0:	f382 8811 	msr	BASEPRI, r2
   450d4:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   450d8:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   450da:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   450dc:	b288      	uxth	r0, r1
	available = available - len;
   450de:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   450e0:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   450e2:	bf22      	ittt	cs
   450e4:	4b06      	ldrcs	r3, [pc, #24]	; (45100 <rng_pool_get+0x88>)
   450e6:	2201      	movcs	r2, #1
   450e8:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   450ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   450ec:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   450f0:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   450f2:	f89e e005 	ldrb.w	lr, [lr, #5]
   450f6:	f800 eb01 	strb.w	lr, [r0], #1
		first = (first + 1) & mask;
   450fa:	403d      	ands	r5, r7
   450fc:	e7da      	b.n	450b4 <rng_pool_get+0x3c>
   450fe:	bf00      	nop
   45100:	4000d000 	.word	0x4000d000

00045104 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   45104:	43db      	mvns	r3, r3
{
   45106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   4510a:	f013 0501 	ands.w	r5, r3, #1
{
   4510e:	460e      	mov	r6, r1
   45110:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   45112:	d004      	beq.n	4511e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   45114:	4821      	ldr	r0, [pc, #132]	; (4519c <entropy_nrf5_get_entropy_isr+0x98>)
   45116:	f7ff ffaf 	bl	45078 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   4511a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   4511e:	b3a2      	cbz	r2, 4518a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   45120:	f04f 0320 	mov.w	r3, #32
   45124:	f3ef 8811 	mrs	r8, BASEPRI
   45128:	f383 8812 	msr	BASEPRI_MAX, r3
   4512c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   45130:	200d      	movs	r0, #13
   45132:	f7e7 facd 	bl	2c6d0 <arch_irq_is_enabled>
   45136:	4607      	mov	r7, r0
		irq_disable(IRQN);
   45138:	200d      	movs	r0, #13
   4513a:	f7e7 fab5 	bl	2c6a8 <arch_irq_disable>
	__asm__ volatile(
   4513e:	f388 8811 	msr	BASEPRI, r8
   45142:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45146:	f8df 8058 	ldr.w	r8, [pc, #88]	; 451a0 <entropy_nrf5_get_entropy_isr+0x9c>
   4514a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 451a4 <entropy_nrf5_get_entropy_isr+0xa0>
   4514e:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   45152:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   45156:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   4515a:	2301      	movs	r3, #1
   4515c:	f8c8 3000 	str.w	r3, [r8]
   45160:	4625      	mov	r5, r4
   45162:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   45166:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   4516a:	b183      	cbz	r3, 4518e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   4516c:	f7ff ff66 	bl	4503c <random_byte_get>
			if (byte < 0) {
   45170:	1e03      	subs	r3, r0, #0
   45172:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   45176:	dbf6      	blt.n	45166 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   45178:	3d01      	subs	r5, #1
   4517a:	b2ad      	uxth	r5, r5
   4517c:	5573      	strb	r3, [r6, r5]
		} while (len);
   4517e:	2d00      	cmp	r5, #0
   45180:	d1f1      	bne.n	45166 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   45182:	b117      	cbz	r7, 4518a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   45184:	200d      	movs	r0, #13
   45186:	f7e7 fa81 	bl	2c68c <arch_irq_enable>
	return cnt;
   4518a:	4620      	mov	r0, r4
   4518c:	e7c5      	b.n	4511a <entropy_nrf5_get_entropy_isr+0x16>
   4518e:	f3bf 8f4f 	dsb	sy
				__WFE();
   45192:	bf20      	wfe
				__SEV();
   45194:	bf40      	sev
				__WFE();
   45196:	bf20      	wfe
   45198:	e7e5      	b.n	45166 <entropy_nrf5_get_entropy_isr+0x62>
   4519a:	bf00      	nop
   4519c:	200067c4 	.word	0x200067c4
   451a0:	4000d000 	.word	0x4000d000
   451a4:	e000e100 	.word	0xe000e100

000451a8 <entropy_nrf5_get_entropy>:
{
   451a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   451ac:	4f13      	ldr	r7, [pc, #76]	; (451fc <entropy_nrf5_get_entropy+0x54>)
   451ae:	460d      	mov	r5, r1
   451b0:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   451b2:	f107 0845 	add.w	r8, r7, #69	; 0x45
   451b6:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   451ba:	b914      	cbnz	r4, 451c2 <entropy_nrf5_get_entropy+0x1a>
}
   451bc:	4620      	mov	r0, r4
   451be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   451c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   451c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   451ca:	4638      	mov	r0, r7
   451cc:	f002 fd3c 	bl	47c48 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   451d0:	4622      	mov	r2, r4
   451d2:	4629      	mov	r1, r5
   451d4:	4640      	mov	r0, r8
   451d6:	f7ff ff4f 	bl	45078 <rng_pool_get>
   451da:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   451dc:	4638      	mov	r0, r7
   451de:	f002 fd0d 	bl	47bfc <z_impl_k_sem_give>
		if (bytes == 0U) {
   451e2:	b93e      	cbnz	r6, 451f4 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   451e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   451e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   451ec:	4648      	mov	r0, r9
   451ee:	f002 fd2b 	bl	47c48 <z_impl_k_sem_take>
			continue;
   451f2:	e7e2      	b.n	451ba <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   451f4:	1ba4      	subs	r4, r4, r6
   451f6:	b2a4      	uxth	r4, r4
		buf += bytes;
   451f8:	4435      	add	r5, r6
   451fa:	e7de      	b.n	451ba <entropy_nrf5_get_entropy+0x12>
   451fc:	20006794 	.word	0x20006794

00045200 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   45200:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   45202:	4c19      	ldr	r4, [pc, #100]	; (45268 <entropy_nrf5_init+0x68>)
   45204:	2201      	movs	r2, #1
   45206:	4611      	mov	r1, r2
   45208:	4620      	mov	r0, r4
   4520a:	f00b fa6b 	bl	506e4 <z_impl_k_sem_init>
   4520e:	2201      	movs	r2, #1
   45210:	2100      	movs	r1, #0
   45212:	f104 0018 	add.w	r0, r4, #24
   45216:	f00b fa65 	bl	506e4 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   4521a:	f240 4307 	movw	r3, #1031	; 0x407
   4521e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   45222:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   45226:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   45228:	230c      	movs	r3, #12
   4522a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   4522e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   45230:	4b0e      	ldr	r3, [pc, #56]	; (4526c <entropy_nrf5_init+0x6c>)
   45232:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   45236:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   4523a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   4523e:	f042 0201 	orr.w	r2, r2, #1
   45242:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   45246:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45248:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   4524c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   45250:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   45254:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   45256:	6019      	str	r1, [r3, #0]
   45258:	200d      	movs	r0, #13
   4525a:	f7e7 fa47 	bl	2c6ec <z_arm_irq_priority_set>
	irq_enable(IRQN);
   4525e:	200d      	movs	r0, #13
   45260:	f7e7 fa14 	bl	2c68c <arch_irq_enable>

	return 0;
}
   45264:	4628      	mov	r0, r5
   45266:	bd38      	pop	{r3, r4, r5, pc}
   45268:	20006794 	.word	0x20006794
   4526c:	4000d000 	.word	0x4000d000

00045270 <isr>:
{
   45270:	b510      	push	{r4, lr}
	byte = random_byte_get();
   45272:	f7ff fee3 	bl	4503c <random_byte_get>
	if (byte < 0) {
   45276:	2800      	cmp	r0, #0
   45278:	db20      	blt.n	452bc <isr+0x4c>
	uint8_t last  = rngp->last;
   4527a:	4b17      	ldr	r3, [pc, #92]	; (452d8 <isr+0x68>)
   4527c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   45280:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   45284:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   45288:	1b14      	subs	r4, r2, r4
   4528a:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   4528e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   45290:	d10d      	bne.n	452ae <isr+0x3e>
	uint8_t last  = rngp->last;
   45292:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   45296:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   4529a:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   4529e:	1b14      	subs	r4, r2, r4
   452a0:	ea31 0404 	bics.w	r4, r1, r4
   452a4:	d10b      	bne.n	452be <isr+0x4e>
   452a6:	4b0d      	ldr	r3, [pc, #52]	; (452dc <isr+0x6c>)
   452a8:	2201      	movs	r2, #1
   452aa:	605a      	str	r2, [r3, #4]
}
   452ac:	e00e      	b.n	452cc <isr+0x5c>
	rngp->buffer[last] = byte;
   452ae:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   452b0:	3201      	adds	r2, #1
   452b2:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   452b4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   452b8:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   452bc:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   452be:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   452c0:	3201      	adds	r2, #1
   452c2:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   452c4:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   452c8:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   452cc:	4804      	ldr	r0, [pc, #16]	; (452e0 <isr+0x70>)
}
   452ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   452d2:	f002 bc93 	b.w	47bfc <z_impl_k_sem_give>
   452d6:	bf00      	nop
   452d8:	20006794 	.word	0x20006794
   452dc:	4000d000 	.word	0x4000d000
   452e0:	200067ac 	.word	0x200067ac

000452e4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   452e4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   452e6:	2301      	movs	r3, #1
   452e8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   452ea:	4a0e      	ldr	r2, [pc, #56]	; (45324 <compare_int_lock+0x40>)
   452ec:	f3bf 8f5b 	dmb	ish
   452f0:	43dc      	mvns	r4, r3
   452f2:	e852 1f00 	ldrex	r1, [r2]
   452f6:	ea01 0504 	and.w	r5, r1, r4
   452fa:	e842 5600 	strex	r6, r5, [r2]
   452fe:	2e00      	cmp	r6, #0
   45300:	d1f7      	bne.n	452f2 <compare_int_lock+0xe>
   45302:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   45306:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   4530a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   4530c:	4806      	ldr	r0, [pc, #24]	; (45328 <compare_int_lock+0x44>)
   4530e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   45312:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   45316:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   4531a:	420b      	tst	r3, r1
}
   4531c:	bf14      	ite	ne
   4531e:	2001      	movne	r0, #1
   45320:	2000      	moveq	r0, #0
   45322:	bd70      	pop	{r4, r5, r6, pc}
   45324:	200067ec 	.word	0x200067ec
   45328:	40011000 	.word	0x40011000

0004532c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   4532c:	4918      	ldr	r1, [pc, #96]	; (45390 <sys_clock_timeout_handler+0x64>)
{
   4532e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45330:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   45332:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   45336:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   45338:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   4533c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   45340:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   45342:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   45346:	d221      	bcs.n	4538c <sys_clock_timeout_handler+0x60>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   45348:	4b12      	ldr	r3, [pc, #72]	; (45394 <sys_clock_timeout_handler+0x68>)
   4534a:	681b      	ldr	r3, [r3, #0]
   4534c:	0a1a      	lsrs	r2, r3, #8
   4534e:	061b      	lsls	r3, r3, #24
   45350:	195e      	adds	r6, r3, r5
   45352:	4b11      	ldr	r3, [pc, #68]	; (45398 <sys_clock_timeout_handler+0x6c>)
   45354:	f142 0700 	adc.w	r7, r2, #0
   45358:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   4535c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   4535e:	f003 faa1 	bl	488a4 <sys_clock_announce>
    return p_reg->CC[ch];
   45362:	00a3      	lsls	r3, r4, #2
   45364:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   45368:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   4536c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   45370:	42aa      	cmp	r2, r5
   45372:	d10a      	bne.n	4538a <sys_clock_timeout_handler+0x5e>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   45374:	b91e      	cbnz	r6, 4537e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   45376:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   4537a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   4537e:	4a07      	ldr	r2, [pc, #28]	; (4539c <sys_clock_timeout_handler+0x70>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   45380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   45384:	40a3      	lsls	r3, r4
   45386:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   4538a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   4538c:	2600      	movs	r6, #0
   4538e:	e7e6      	b.n	4535e <sys_clock_timeout_handler+0x32>
   45390:	200039e8 	.word	0x200039e8
   45394:	200067f0 	.word	0x200067f0
   45398:	200039d0 	.word	0x200039d0
   4539c:	40011000 	.word	0x40011000

000453a0 <compare_int_unlock>:
	if (key) {
   453a0:	b311      	cbz	r1, 453e8 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   453a2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   453a6:	2301      	movs	r3, #1
   453a8:	4a10      	ldr	r2, [pc, #64]	; (453ec <compare_int_unlock+0x4c>)
   453aa:	4083      	lsls	r3, r0
   453ac:	e852 cf00 	ldrex	ip, [r2]
   453b0:	ea4c 0c03 	orr.w	ip, ip, r3
   453b4:	e842 c100 	strex	r1, ip, [r2]
   453b8:	2900      	cmp	r1, #0
   453ba:	d1f7      	bne.n	453ac <compare_int_unlock+0xc>
   453bc:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   453c0:	4a0b      	ldr	r2, [pc, #44]	; (453f0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   453c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   453c6:	4083      	lsls	r3, r0
   453c8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   453cc:	4b09      	ldr	r3, [pc, #36]	; (453f4 <compare_int_unlock+0x54>)
   453ce:	f3bf 8f5b 	dmb	ish
   453d2:	681b      	ldr	r3, [r3, #0]
   453d4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   453d8:	40c3      	lsrs	r3, r0
   453da:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   453dc:	bf42      	ittt	mi
   453de:	4b06      	ldrmi	r3, [pc, #24]	; (453f8 <compare_int_unlock+0x58>)
   453e0:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   453e4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   453e8:	4770      	bx	lr
   453ea:	bf00      	nop
   453ec:	200067ec 	.word	0x200067ec
   453f0:	40011000 	.word	0x40011000
   453f4:	200067e8 	.word	0x200067e8
   453f8:	e000e100 	.word	0xe000e100

000453fc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   453fc:	4b0d      	ldr	r3, [pc, #52]	; (45434 <z_nrf_rtc_timer_read+0x38>)
   453fe:	6818      	ldr	r0, [r3, #0]
   45400:	0a01      	lsrs	r1, r0, #8
   45402:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   45404:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   45408:	4b0b      	ldr	r3, [pc, #44]	; (45438 <z_nrf_rtc_timer_read+0x3c>)
   4540a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   4540e:	1818      	adds	r0, r3, r0
   45410:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   45414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   45418:	d20a      	bcs.n	45430 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   4541a:	4b08      	ldr	r3, [pc, #32]	; (4543c <z_nrf_rtc_timer_read+0x40>)
   4541c:	e9d3 2300 	ldrd	r2, r3, [r3]
   45420:	4290      	cmp	r0, r2
   45422:	eb71 0303 	sbcs.w	r3, r1, r3
   45426:	d203      	bcs.n	45430 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   45428:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   4542c:	f141 0100 	adc.w	r1, r1, #0
}
   45430:	4770      	bx	lr
   45432:	bf00      	nop
   45434:	200067f0 	.word	0x200067f0
   45438:	40011000 	.word	0x40011000
   4543c:	200039d0 	.word	0x200039d0

00045440 <compare_set>:
{
   45440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45444:	b085      	sub	sp, #20
   45446:	4616      	mov	r6, r2
   45448:	4698      	mov	r8, r3
   4544a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   4544c:	f7ff ff4a 	bl	452e4 <compare_int_lock>
   45450:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   45452:	f7ff ffd3 	bl	453fc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   45456:	42b0      	cmp	r0, r6
   45458:	eb71 0308 	sbcs.w	r3, r1, r8
   4545c:	d276      	bcs.n	4554c <compare_set+0x10c>
		if (target_time - curr_time > COUNTER_SPAN) {
   4545e:	4b45      	ldr	r3, [pc, #276]	; (45574 <compare_set+0x134>)
   45460:	1a30      	subs	r0, r6, r0
   45462:	eb68 0101 	sbc.w	r1, r8, r1
   45466:	4298      	cmp	r0, r3
   45468:	f171 0100 	sbcs.w	r1, r1, #0
   4546c:	d27f      	bcs.n	4556e <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
   4546e:	4b42      	ldr	r3, [pc, #264]	; (45578 <compare_set+0x138>)
   45470:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   45474:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   45478:	45d8      	cmp	r8, fp
   4547a:	bf08      	it	eq
   4547c:	4556      	cmpeq	r6, sl
   4547e:	d050      	beq.n	45522 <compare_set+0xe2>
   45480:	ea4f 0985 	mov.w	r9, r5, lsl #2
   45484:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   45488:	f105 0750 	add.w	r7, r5, #80	; 0x50
   4548c:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   45490:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   45492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   45496:	40ab      	lsls	r3, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   45498:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   4549a:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   4549e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   454a2:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   454a4:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   454a8:	4b34      	ldr	r3, [pc, #208]	; (4557c <compare_set+0x13c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   454aa:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   454ae:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   454b0:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   454b4:	1a40      	subs	r0, r0, r1
   454b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   454ba:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   454be:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   454c0:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   454c4:	d107      	bne.n	454d6 <compare_set+0x96>
   454c6:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   454ca:	2013      	movs	r0, #19
   454cc:	f00b fb52 	bl	50b74 <z_impl_k_busy_wait>
   454d0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   454d4:	4b29      	ldr	r3, [pc, #164]	; (4557c <compare_set+0x13c>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   454d6:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   454da:	eba4 000c 	sub.w	r0, r4, ip
   454de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   454e2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   454e6:	bf88      	it	hi
   454e8:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   454ea:	2000      	movs	r0, #0
   454ec:	6038      	str	r0, [r7, #0]
   454ee:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   454f0:	9801      	ldr	r0, [sp, #4]
   454f2:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   454f6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   454fa:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   454fe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
   45502:	4281      	cmp	r1, r0
   45504:	d006      	beq.n	45514 <compare_set+0xd4>
	return (a - b) & COUNTER_MAX;
   45506:	1a20      	subs	r0, r4, r0
   45508:	3802      	subs	r0, #2
   4550a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   4550e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   45512:	d819      	bhi.n	45548 <compare_set+0x108>
	return (a - b) & COUNTER_MAX;
   45514:	1aa4      	subs	r4, r4, r2
   45516:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   4551a:	eb14 0a06 	adds.w	sl, r4, r6
   4551e:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   45522:	4915      	ldr	r1, [pc, #84]	; (45578 <compare_set+0x138>)
	cc_data[chan].callback = handler;
   45524:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   45526:	012b      	lsls	r3, r5, #4
   45528:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   4552c:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   45530:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   45532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   45534:	6053      	str	r3, [r2, #4]
	return ret;
   45536:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   45538:	4628      	mov	r0, r5
   4553a:	9900      	ldr	r1, [sp, #0]
   4553c:	f7ff ff30 	bl	453a0 <compare_int_unlock>
}
   45540:	4620      	mov	r0, r4
   45542:	b005      	add	sp, #20
   45544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45548:	4620      	mov	r0, r4
   4554a:	e7b1      	b.n	454b0 <compare_set+0x70>
		atomic_or(&force_isr_mask, BIT(chan));
   4554c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4554e:	4a0c      	ldr	r2, [pc, #48]	; (45580 <compare_set+0x140>)
   45550:	f3bf 8f5b 	dmb	ish
   45554:	40ab      	lsls	r3, r5
   45556:	e852 0f00 	ldrex	r0, [r2]
   4555a:	4318      	orrs	r0, r3
   4555c:	e842 0100 	strex	r1, r0, [r2]
   45560:	2900      	cmp	r1, #0
   45562:	d1f8      	bne.n	45556 <compare_set+0x116>
   45564:	f3bf 8f5b 	dmb	ish
   45568:	46b2      	mov	sl, r6
   4556a:	46c3      	mov	fp, r8
   4556c:	e7d9      	b.n	45522 <compare_set+0xe2>
			return -EINVAL;
   4556e:	f06f 0415 	mvn.w	r4, #21
   45572:	e7e1      	b.n	45538 <compare_set+0xf8>
   45574:	01000001 	.word	0x01000001
   45578:	200039d8 	.word	0x200039d8
   4557c:	40011000 	.word	0x40011000
   45580:	200067e8 	.word	0x200067e8

00045584 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   45584:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   45586:	4b19      	ldr	r3, [pc, #100]	; (455ec <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   45588:	4d19      	ldr	r5, [pc, #100]	; (455f0 <sys_clock_driver_init+0x6c>)
   4558a:	2400      	movs	r4, #0
   4558c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   45590:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   45594:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   45598:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   4559c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   455a0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   455a4:	4b13      	ldr	r3, [pc, #76]	; (455f4 <sys_clock_driver_init+0x70>)
   455a6:	2602      	movs	r6, #2
   455a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   455ac:	2101      	movs	r1, #1
   455ae:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   455b2:	2011      	movs	r0, #17
   455b4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   455b8:	4622      	mov	r2, r4
   455ba:	f7e7 f897 	bl	2c6ec <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   455be:	2011      	movs	r0, #17
   455c0:	f7e7 f864 	bl	2c68c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   455c4:	4a0c      	ldr	r2, [pc, #48]	; (455f8 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   455c6:	2301      	movs	r3, #1
   455c8:	60ab      	str	r3, [r5, #8]
   455ca:	602b      	str	r3, [r5, #0]
   455cc:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   455ce:	4b0b      	ldr	r3, [pc, #44]	; (455fc <sys_clock_driver_init+0x78>)
   455d0:	4a0b      	ldr	r2, [pc, #44]	; (45600 <sys_clock_driver_init+0x7c>)
   455d2:	9300      	str	r3, [sp, #0]
   455d4:	9401      	str	r4, [sp, #4]
   455d6:	2300      	movs	r3, #0
   455d8:	4620      	mov	r0, r4
   455da:	f7ff ff31 	bl	45440 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   455de:	4630      	mov	r0, r6
   455e0:	f7ff f966 	bl	448b0 <z_nrf_clock_control_lf_on>

	return 0;
}
   455e4:	4620      	mov	r0, r4
   455e6:	b002      	add	sp, #8
   455e8:	bd70      	pop	{r4, r5, r6, pc}
   455ea:	bf00      	nop
   455ec:	200039d8 	.word	0x200039d8
   455f0:	40011000 	.word	0x40011000
   455f4:	e000e100 	.word	0xe000e100
   455f8:	200067ec 	.word	0x200067ec
   455fc:	0004532d 	.word	0x0004532d
   45600:	007fffff 	.word	0x007fffff

00045604 <rtc_nrf_isr>:
{
   45604:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   45608:	4c35      	ldr	r4, [pc, #212]	; (456e0 <rtc_nrf_isr+0xdc>)
   4560a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   4560e:	079a      	lsls	r2, r3, #30
   45610:	d50b      	bpl.n	4562a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   45612:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   45616:	b143      	cbz	r3, 4562a <rtc_nrf_isr+0x26>
		overflow_cnt++;
   45618:	4a32      	ldr	r2, [pc, #200]	; (456e4 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   4561a:	2300      	movs	r3, #0
   4561c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   45620:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   45624:	6813      	ldr	r3, [r2, #0]
   45626:	3301      	adds	r3, #1
   45628:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   4562a:	f04f 0320 	mov.w	r3, #32
   4562e:	f3ef 8211 	mrs	r2, BASEPRI
   45632:	f383 8812 	msr	BASEPRI_MAX, r3
   45636:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   4563a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   4563e:	03db      	lsls	r3, r3, #15
   45640:	d512      	bpl.n	45668 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45642:	f3bf 8f5b 	dmb	ish
   45646:	4b28      	ldr	r3, [pc, #160]	; (456e8 <rtc_nrf_isr+0xe4>)
   45648:	e853 1f00 	ldrex	r1, [r3]
   4564c:	f021 0001 	bic.w	r0, r1, #1
   45650:	e843 0600 	strex	r6, r0, [r3]
   45654:	2e00      	cmp	r6, #0
   45656:	d1f7      	bne.n	45648 <rtc_nrf_isr+0x44>
   45658:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   4565c:	2900      	cmp	r1, #0
   4565e:	d135      	bne.n	456cc <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   45660:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   45664:	2b00      	cmp	r3, #0
   45666:	d131      	bne.n	456cc <rtc_nrf_isr+0xc8>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   45668:	2300      	movs	r3, #0
	__asm__ volatile(
   4566a:	f382 8811 	msr	BASEPRI, r2
   4566e:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   45672:	b343      	cbz	r3, 456c6 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
   45674:	f7ff fec2 	bl	453fc <z_nrf_rtc_timer_read>
	__asm__ volatile(
   45678:	f04f 0320 	mov.w	r3, #32
   4567c:	f3ef 8c11 	mrs	ip, BASEPRI
   45680:	f383 8812 	msr	BASEPRI_MAX, r3
   45684:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   45688:	4b18      	ldr	r3, [pc, #96]	; (456ec <rtc_nrf_isr+0xe8>)
   4568a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   4568e:	42b0      	cmp	r0, r6
   45690:	41b9      	sbcs	r1, r7
   45692:	f04f 0200 	mov.w	r2, #0
   45696:	d320      	bcc.n	456da <rtc_nrf_isr+0xd6>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   45698:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   4569c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   456a0:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   456a4:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   456a8:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   456aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   456ae:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   456b2:	f38c 8811 	msr	BASEPRI, ip
   456b6:	f3bf 8f6f 	isb	sy
		if (handler) {
   456ba:	b121      	cbz	r1, 456c6 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
   456bc:	9500      	str	r5, [sp, #0]
   456be:	4632      	mov	r2, r6
   456c0:	463b      	mov	r3, r7
   456c2:	2000      	movs	r0, #0
   456c4:	4788      	blx	r1
}
   456c6:	b003      	add	sp, #12
   456c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   456cc:	2300      	movs	r3, #0
   456ce:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   456d2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   456d6:	2301      	movs	r3, #1
}
   456d8:	e7c7      	b.n	4566a <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   456da:	4611      	mov	r1, r2
   456dc:	e7e9      	b.n	456b2 <rtc_nrf_isr+0xae>
   456de:	bf00      	nop
   456e0:	40011000 	.word	0x40011000
   456e4:	200067f0 	.word	0x200067f0
   456e8:	200067e8 	.word	0x200067e8
   456ec:	200039d8 	.word	0x200039d8

000456f0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   456f0:	1c43      	adds	r3, r0, #1
{
   456f2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   456f4:	d021      	beq.n	4573a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   456f6:	2801      	cmp	r0, #1
   456f8:	dd21      	ble.n	4573e <sys_clock_set_timeout+0x4e>
   456fa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   456fe:	da20      	bge.n	45742 <sys_clock_set_timeout+0x52>
   45700:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   45702:	f7ff fe7b 	bl	453fc <z_nrf_rtc_timer_read>
   45706:	4b10      	ldr	r3, [pc, #64]	; (45748 <sys_clock_set_timeout+0x58>)
   45708:	e9d3 1300 	ldrd	r1, r3, [r3]
   4570c:	1a42      	subs	r2, r0, r1
		ticks = 0;
   4570e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
	uint64_t target_time = cyc + last_count;
   45712:	480e      	ldr	r0, [pc, #56]	; (4574c <sys_clock_set_timeout+0x5c>)
		ticks = 0;
   45714:	bf28      	it	cs
   45716:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   45718:	3201      	adds	r2, #1
   4571a:	4422      	add	r2, r4
	uint64_t target_time = cyc + last_count;
   4571c:	4282      	cmp	r2, r0
   4571e:	bf28      	it	cs
   45720:	4602      	movcs	r2, r0
   45722:	1852      	adds	r2, r2, r1
   45724:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   45728:	4909      	ldr	r1, [pc, #36]	; (45750 <sys_clock_set_timeout+0x60>)
   4572a:	9001      	str	r0, [sp, #4]
   4572c:	9100      	str	r1, [sp, #0]
   4572e:	f143 0300 	adc.w	r3, r3, #0
   45732:	f7ff fe85 	bl	45440 <compare_set>
}
   45736:	b002      	add	sp, #8
   45738:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   4573a:	4804      	ldr	r0, [pc, #16]	; (4574c <sys_clock_set_timeout+0x5c>)
   4573c:	e7e0      	b.n	45700 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   4573e:	2400      	movs	r4, #0
   45740:	e7df      	b.n	45702 <sys_clock_set_timeout+0x12>
   45742:	4c02      	ldr	r4, [pc, #8]	; (4574c <sys_clock_set_timeout+0x5c>)
   45744:	e7dd      	b.n	45702 <sys_clock_set_timeout+0x12>
   45746:	bf00      	nop
   45748:	200039e8 	.word	0x200039e8
   4574c:	007fffff 	.word	0x007fffff
   45750:	0004532d 	.word	0x0004532d

00045754 <sys_clock_elapsed>:
{
   45754:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   45756:	f7ff fe51 	bl	453fc <z_nrf_rtc_timer_read>
   4575a:	4b02      	ldr	r3, [pc, #8]	; (45764 <sys_clock_elapsed+0x10>)
   4575c:	681b      	ldr	r3, [r3, #0]
}
   4575e:	1ac0      	subs	r0, r0, r3
   45760:	bd08      	pop	{r3, pc}
   45762:	bf00      	nop
   45764:	200039e8 	.word	0x200039e8

00045768 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   45768:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   4576c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   45770:	2a08      	cmp	r2, #8
   45772:	d106      	bne.n	45782 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   45774:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   45778:	2b05      	cmp	r3, #5
   4577a:	d802      	bhi.n	45782 <nrf52_errata_103+0x1a>
   4577c:	4a02      	ldr	r2, [pc, #8]	; (45788 <nrf52_errata_103+0x20>)
   4577e:	5cd0      	ldrb	r0, [r2, r3]
   45780:	4770      	bx	lr
        return false;
   45782:	2000      	movs	r0, #0
}
   45784:	4770      	bx	lr
   45786:	bf00      	nop
   45788:	00053d19 	.word	0x00053d19

0004578c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   4578c:	4a02      	ldr	r2, [pc, #8]	; (45798 <nvmc_wait+0xc>)
   4578e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   45792:	2b00      	cmp	r3, #0
   45794:	d0fb      	beq.n	4578e <nvmc_wait+0x2>
}
   45796:	4770      	bx	lr
   45798:	4001e000 	.word	0x4001e000

0004579c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   4579c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   4579e:	f00a fac3 	bl	4fd28 <nrf52_errata_136>
   457a2:	b140      	cbz	r0, 457b6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   457a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   457a8:	2200      	movs	r2, #0
   457aa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   457ae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   457b2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   457b6:	f00a fab7 	bl	4fd28 <nrf52_errata_136>
   457ba:	2800      	cmp	r0, #0
   457bc:	d046      	beq.n	4584c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   457be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   457c2:	4b60      	ldr	r3, [pc, #384]	; (45944 <SystemInit+0x1a8>)
   457c4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   457c8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   457cc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   457d0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   457d4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   457d8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   457dc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   457e0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   457e4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   457e8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   457ec:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   457f0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   457f4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   457f8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   457fc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   45800:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   45804:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   45808:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   4580c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   45810:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   45814:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   45818:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   4581c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   45820:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   45824:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   45828:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   4582c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   45830:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   45834:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   45838:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   4583c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   45840:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   45844:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   45848:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   4584c:	f7ff ff8c 	bl	45768 <nrf52_errata_103>
   45850:	b118      	cbz	r0, 4585a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   45852:	4b3d      	ldr	r3, [pc, #244]	; (45948 <SystemInit+0x1ac>)
   45854:	4a3d      	ldr	r2, [pc, #244]	; (4594c <SystemInit+0x1b0>)
   45856:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   4585a:	f7ff ff85 	bl	45768 <nrf52_errata_103>
   4585e:	b118      	cbz	r0, 45868 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   45860:	4b3b      	ldr	r3, [pc, #236]	; (45950 <SystemInit+0x1b4>)
   45862:	22fb      	movs	r2, #251	; 0xfb
   45864:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   45868:	f7ff ff7e 	bl	45768 <nrf52_errata_103>
   4586c:	b170      	cbz	r0, 4588c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   4586e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   45872:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   45876:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   4587a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   4587e:	f022 020f 	bic.w	r2, r2, #15
   45882:	f003 030f 	and.w	r3, r3, #15
   45886:	4313      	orrs	r3, r2
   45888:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   4588c:	f7ff ff6c 	bl	45768 <nrf52_errata_103>
   45890:	b120      	cbz	r0, 4589c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   45892:	4b30      	ldr	r3, [pc, #192]	; (45954 <SystemInit+0x1b8>)
   45894:	f44f 7200 	mov.w	r2, #512	; 0x200
   45898:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   4589c:	f00a fa44 	bl	4fd28 <nrf52_errata_136>
   458a0:	b148      	cbz	r0, 458b6 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   458a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   458a6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   458aa:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   458ac:	bf44      	itt	mi
   458ae:	f06f 0201 	mvnmi.w	r2, #1
   458b2:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   458b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   458ba:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   458be:	2a08      	cmp	r2, #8
   458c0:	d10e      	bne.n	458e0 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   458c2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   458c6:	2b05      	cmp	r3, #5
   458c8:	d802      	bhi.n	458d0 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   458ca:	4a23      	ldr	r2, [pc, #140]	; (45958 <SystemInit+0x1bc>)
   458cc:	5cd3      	ldrb	r3, [r2, r3]
   458ce:	b13b      	cbz	r3, 458e0 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   458d0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   458d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   458d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   458dc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   458e0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   458e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   458e8:	2a00      	cmp	r2, #0
   458ea:	db03      	blt.n	458f4 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   458ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   458f0:	2b00      	cmp	r3, #0
   458f2:	da22      	bge.n	4593a <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   458f4:	4919      	ldr	r1, [pc, #100]	; (4595c <SystemInit+0x1c0>)
   458f6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   458f8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   458fc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   45900:	2412      	movs	r4, #18
    nvmc_wait();
   45902:	f7ff ff43 	bl	4578c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   45906:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   4590a:	f7ff ff3f 	bl	4578c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   4590e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   45912:	f7ff ff3b 	bl	4578c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   45916:	2300      	movs	r3, #0
   45918:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   4591c:	f7ff ff36 	bl	4578c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   45920:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   45924:	490e      	ldr	r1, [pc, #56]	; (45960 <SystemInit+0x1c4>)
   45926:	4b0f      	ldr	r3, [pc, #60]	; (45964 <SystemInit+0x1c8>)
   45928:	68ca      	ldr	r2, [r1, #12]
   4592a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   4592e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   45930:	60cb      	str	r3, [r1, #12]
   45932:	f3bf 8f4f 	dsb	sy
    __NOP();
   45936:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   45938:	e7fd      	b.n	45936 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   4593a:	4b0b      	ldr	r3, [pc, #44]	; (45968 <SystemInit+0x1cc>)
   4593c:	4a0b      	ldr	r2, [pc, #44]	; (4596c <SystemInit+0x1d0>)
   4593e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   45940:	bd10      	pop	{r4, pc}
   45942:	bf00      	nop
   45944:	4000c000 	.word	0x4000c000
   45948:	40005000 	.word	0x40005000
   4594c:	00038148 	.word	0x00038148
   45950:	4000f000 	.word	0x4000f000
   45954:	40029000 	.word	0x40029000
   45958:	00053d13 	.word	0x00053d13
   4595c:	4001e000 	.word	0x4001e000
   45960:	e000ed00 	.word	0xe000ed00
   45964:	05fa0004 	.word	0x05fa0004
   45968:	20000bb0 	.word	0x20000bb0
   4596c:	03d09000 	.word	0x03d09000

00045970 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   45970:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   45972:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   45974:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   45976:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   4597a:	fab2 f382 	clz	r3, r2
   4597e:	f1c3 031f 	rsb	r3, r3, #31
   45982:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   45984:	fa05 f403 	lsl.w	r4, r5, r3
   45988:	ea22 0404 	bic.w	r4, r2, r4
   4598c:	e850 6f00 	ldrex	r6, [r0]
   45990:	4296      	cmp	r6, r2
   45992:	d104      	bne.n	4599e <nrfx_flag32_alloc+0x2e>
   45994:	e840 4c00 	strex	ip, r4, [r0]
   45998:	f1bc 0f00 	cmp.w	ip, #0
   4599c:	d1f6      	bne.n	4598c <nrfx_flag32_alloc+0x1c>
   4599e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   459a2:	d1e7      	bne.n	45974 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   459a4:	4801      	ldr	r0, [pc, #4]	; (459ac <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   459a6:	700b      	strb	r3, [r1, #0]
}
   459a8:	bd70      	pop	{r4, r5, r6, pc}
   459aa:	bf00      	nop
   459ac:	0bad0000 	.word	0x0bad0000

000459b0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   459b0:	6803      	ldr	r3, [r0, #0]
   459b2:	40cb      	lsrs	r3, r1
   459b4:	07db      	lsls	r3, r3, #31
{
   459b6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   459b8:	d414      	bmi.n	459e4 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   459ba:	2301      	movs	r3, #1
   459bc:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   459be:	6802      	ldr	r2, [r0, #0]
   459c0:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   459c4:	ea43 0102 	orr.w	r1, r3, r2
   459c8:	e850 4f00 	ldrex	r4, [r0]
   459cc:	4294      	cmp	r4, r2
   459ce:	d104      	bne.n	459da <nrfx_flag32_free+0x2a>
   459d0:	e840 1c00 	strex	ip, r1, [r0]
   459d4:	f1bc 0f00 	cmp.w	ip, #0
   459d8:	d1f6      	bne.n	459c8 <nrfx_flag32_free+0x18>
   459da:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   459de:	d1ee      	bne.n	459be <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   459e0:	4801      	ldr	r0, [pc, #4]	; (459e8 <nrfx_flag32_free+0x38>)
}
   459e2:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   459e4:	4801      	ldr	r0, [pc, #4]	; (459ec <nrfx_flag32_free+0x3c>)
   459e6:	e7fc      	b.n	459e2 <nrfx_flag32_free+0x32>
   459e8:	0bad0000 	.word	0x0bad0000
   459ec:	0bad0004 	.word	0x0bad0004

000459f0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   459f0:	4b04      	ldr	r3, [pc, #16]	; (45a04 <nrfx_clock_init+0x14>)
   459f2:	791a      	ldrb	r2, [r3, #4]
   459f4:	b922      	cbnz	r2, 45a00 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   459f6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   459f8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   459fa:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   459fc:	4802      	ldr	r0, [pc, #8]	; (45a08 <nrfx_clock_init+0x18>)
   459fe:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   45a00:	4802      	ldr	r0, [pc, #8]	; (45a0c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   45a02:	4770      	bx	lr
   45a04:	200067f4 	.word	0x200067f4
   45a08:	0bad0000 	.word	0x0bad0000
   45a0c:	0bad000c 	.word	0x0bad000c

00045a10 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   45a10:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   45a12:	2000      	movs	r0, #0
   45a14:	f7e6 fe5c 	bl	2c6d0 <arch_irq_is_enabled>
   45a18:	b908      	cbnz	r0, 45a1e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   45a1a:	f7e6 fe37 	bl	2c68c <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   45a1e:	4b02      	ldr	r3, [pc, #8]	; (45a28 <nrfx_clock_enable+0x18>)
   45a20:	2201      	movs	r2, #1
   45a22:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   45a24:	bd08      	pop	{r3, pc}
   45a26:	bf00      	nop
   45a28:	20006de2 	.word	0x20006de2

00045a2c <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   45a2c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   45a2e:	b110      	cbz	r0, 45a36 <nrfx_clock_stop+0xa>
   45a30:	2801      	cmp	r0, #1
   45a32:	d017      	beq.n	45a64 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   45a34:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   45a36:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   45a3a:	2302      	movs	r3, #2
   45a3c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45a40:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   45a44:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   45a48:	2301      	movs	r3, #1
   45a4a:	60e3      	str	r3, [r4, #12]
   45a4c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   45a50:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   45a54:	03db      	lsls	r3, r3, #15
   45a56:	d5ed      	bpl.n	45a34 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   45a58:	2001      	movs	r0, #1
   45a5a:	f00a f96f 	bl	4fd3c <nrfx_busy_wait>
   45a5e:	3d01      	subs	r5, #1
   45a60:	d1f6      	bne.n	45a50 <nrfx_clock_stop+0x24>
   45a62:	e7e7      	b.n	45a34 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   45a64:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45a68:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   45a6a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45a6e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   45a72:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   45a76:	6060      	str	r0, [r4, #4]
   45a78:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   45a7c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   45a80:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   45a84:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   45a86:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   45a8a:	d505      	bpl.n	45a98 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   45a8c:	b123      	cbz	r3, 45a98 <nrfx_clock_stop+0x6c>
   45a8e:	2001      	movs	r0, #1
   45a90:	f00a f954 	bl	4fd3c <nrfx_busy_wait>
   45a94:	3d01      	subs	r5, #1
   45a96:	d1f1      	bne.n	45a7c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   45a98:	4b01      	ldr	r3, [pc, #4]	; (45aa0 <nrfx_clock_stop+0x74>)
   45a9a:	2200      	movs	r2, #0
   45a9c:	715a      	strb	r2, [r3, #5]
   45a9e:	e7c9      	b.n	45a34 <nrfx_clock_stop+0x8>
   45aa0:	200067f4 	.word	0x200067f4

00045aa4 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   45aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   45aa8:	b510      	push	{r4, lr}
   45aaa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   45aae:	b16a      	cbz	r2, 45acc <nrfx_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45ab0:	2200      	movs	r2, #0
   45ab2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   45ab6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   45aba:	2201      	movs	r2, #1
   45abc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   45ac0:	4b11      	ldr	r3, [pc, #68]	; (45b08 <nrfx_clock_irq_handler+0x64>)
   45ac2:	7958      	ldrb	r0, [r3, #5]
   45ac4:	b910      	cbnz	r0, 45acc <nrfx_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   45ac6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   45ac8:	681b      	ldr	r3, [r3, #0]
   45aca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   45acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   45ad0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   45ad4:	b172      	cbz	r2, 45af4 <nrfx_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45ad6:	2200      	movs	r2, #0
   45ad8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   45adc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   45ae0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   45ae4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   45ae8:	0792      	lsls	r2, r2, #30
   45aea:	d104      	bne.n	45af6 <nrfx_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   45aec:	2201      	movs	r2, #1
   45aee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   45af2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   45af4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   45af6:	2202      	movs	r2, #2
   45af8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   45afc:	4b02      	ldr	r3, [pc, #8]	; (45b08 <nrfx_clock_irq_handler+0x64>)
}
   45afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   45b02:	681b      	ldr	r3, [r3, #0]
   45b04:	2001      	movs	r0, #1
   45b06:	4718      	bx	r3
   45b08:	200067f4 	.word	0x200067f4

00045b0c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   45b0c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   45b0e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   45b12:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   45b14:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   45b16:	6002      	str	r2, [r0, #0]
}
   45b18:	4802      	ldr	r0, [pc, #8]	; (45b24 <nrf_gpio_pin_port_decode+0x18>)
   45b1a:	bf18      	it	ne
   45b1c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   45b20:	4770      	bx	lr
   45b22:	bf00      	nop
   45b24:	50000300 	.word	0x50000300

00045b28 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   45b28:	4b03      	ldr	r3, [pc, #12]	; (45b38 <pin_in_use_by_te+0x10>)
   45b2a:	3008      	adds	r0, #8
   45b2c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   45b30:	f3c0 1040 	ubfx	r0, r0, #5, #1
   45b34:	4770      	bx	lr
   45b36:	bf00      	nop
   45b38:	20000bb4 	.word	0x20000bb4

00045b3c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   45b3c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   45b3e:	f100 0308 	add.w	r3, r0, #8
   45b42:	4c0c      	ldr	r4, [pc, #48]	; (45b74 <call_handler+0x38>)
   45b44:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   45b48:	05da      	lsls	r2, r3, #23
{
   45b4a:	4605      	mov	r5, r0
   45b4c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   45b4e:	d507      	bpl.n	45b60 <call_handler+0x24>
   45b50:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   45b54:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   45b58:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   45b5c:	6852      	ldr	r2, [r2, #4]
   45b5e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   45b60:	68a3      	ldr	r3, [r4, #8]
   45b62:	b12b      	cbz	r3, 45b70 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   45b64:	68e2      	ldr	r2, [r4, #12]
   45b66:	4631      	mov	r1, r6
   45b68:	4628      	mov	r0, r5
    }
}
   45b6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   45b6e:	4718      	bx	r3
}
   45b70:	bd70      	pop	{r4, r5, r6, pc}
   45b72:	bf00      	nop
   45b74:	20000bb4 	.word	0x20000bb4

00045b78 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   45b78:	4a12      	ldr	r2, [pc, #72]	; (45bc4 <release_handler+0x4c>)
   45b7a:	3008      	adds	r0, #8
{
   45b7c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   45b7e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   45b82:	05d9      	lsls	r1, r3, #23
   45b84:	d51b      	bpl.n	45bbe <release_handler+0x46>
   45b86:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   45b8a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   45b8e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   45b92:	f102 040e 	add.w	r4, r2, #14
   45b96:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   45b98:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   45b9c:	f413 7f80 	tst.w	r3, #256	; 0x100
   45ba0:	d003      	beq.n	45baa <release_handler+0x32>
   45ba2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   45ba6:	4299      	cmp	r1, r3
   45ba8:	d009      	beq.n	45bbe <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   45baa:	3001      	adds	r0, #1
   45bac:	2830      	cmp	r0, #48	; 0x30
   45bae:	d1f3      	bne.n	45b98 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   45bb0:	2300      	movs	r3, #0
   45bb2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   45bb6:	4804      	ldr	r0, [pc, #16]	; (45bc8 <release_handler+0x50>)
}
   45bb8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   45bba:	f7ff bef9 	b.w	459b0 <nrfx_flag32_free>
}
   45bbe:	bc10      	pop	{r4}
   45bc0:	4770      	bx	lr
   45bc2:	bf00      	nop
   45bc4:	20000bb4 	.word	0x20000bb4
   45bc8:	20000c28 	.word	0x20000c28

00045bcc <pin_handler_trigger_uninit>:
{
   45bcc:	b538      	push	{r3, r4, r5, lr}
   45bce:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   45bd0:	f7ff ffaa 	bl	45b28 <pin_in_use_by_te>
   45bd4:	4c09      	ldr	r4, [pc, #36]	; (45bfc <pin_handler_trigger_uninit+0x30>)
   45bd6:	f102 0508 	add.w	r5, r2, #8
   45bda:	b140      	cbz	r0, 45bee <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   45bdc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   45be0:	4907      	ldr	r1, [pc, #28]	; (45c00 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   45be2:	0b5b      	lsrs	r3, r3, #13
   45be4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   45be8:	2000      	movs	r0, #0
   45bea:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   45bee:	4610      	mov	r0, r2
   45bf0:	f7ff ffc2 	bl	45b78 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   45bf4:	2300      	movs	r3, #0
   45bf6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   45bfa:	bd38      	pop	{r3, r4, r5, pc}
   45bfc:	20000bb4 	.word	0x20000bb4
   45c00:	40006000 	.word	0x40006000

00045c04 <nrfx_gpiote_input_configure>:
{
   45c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   45c08:	4604      	mov	r4, r0
   45c0a:	b085      	sub	sp, #20
   45c0c:	4617      	mov	r7, r2
   45c0e:	461e      	mov	r6, r3
    if (p_input_config)
   45c10:	b319      	cbz	r1, 45c5a <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   45c12:	f8df 8138 	ldr.w	r8, [pc, #312]	; 45d4c <nrfx_gpiote_input_configure+0x148>
   45c16:	f100 0908 	add.w	r9, r0, #8
   45c1a:	f838 5019 	ldrh.w	r5, [r8, r9, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   45c1e:	07ab      	lsls	r3, r5, #30
   45c20:	d506      	bpl.n	45c30 <nrfx_gpiote_input_configure+0x2c>
   45c22:	f7ff ff81 	bl	45b28 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   45c26:	b118      	cbz	r0, 45c30 <nrfx_gpiote_input_configure+0x2c>
                return NRFX_ERROR_INVALID_PARAM;
   45c28:	4849      	ldr	r0, [pc, #292]	; (45d50 <nrfx_gpiote_input_configure+0x14c>)
}
   45c2a:	b005      	add	sp, #20
   45c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   45c30:	2300      	movs	r3, #0
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   45c32:	f025 0502 	bic.w	r5, r5, #2
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   45c36:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   45c3a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   45c3e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   45c42:	f10d 020f 	add.w	r2, sp, #15
   45c46:	460b      	mov	r3, r1
   45c48:	4620      	mov	r0, r4
   45c4a:	f10d 010e 	add.w	r1, sp, #14
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   45c4e:	f045 0501 	orr.w	r5, r5, #1
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   45c52:	f00a f8a1 	bl	4fd98 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   45c56:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
    if (p_trigger_config)
   45c5a:	b197      	cbz	r7, 45c82 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   45c5c:	4b3b      	ldr	r3, [pc, #236]	; (45d4c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   45c5e:	783d      	ldrb	r5, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   45c60:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   45c62:	f104 0008 	add.w	r0, r4, #8
   45c66:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   45c6a:	078f      	lsls	r7, r1, #30
   45c6c:	d50c      	bpl.n	45c88 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   45c6e:	2a00      	cmp	r2, #0
   45c70:	d1da      	bne.n	45c28 <nrfx_gpiote_input_configure+0x24>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   45c72:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   45c76:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   45c7a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
   45c7e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   45c82:	bbce      	cbnz	r6, 45cf8 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   45c84:	4833      	ldr	r0, [pc, #204]	; (45d54 <nrfx_gpiote_input_configure+0x150>)
   45c86:	e7d0      	b.n	45c2a <nrfx_gpiote_input_configure+0x26>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   45c88:	f021 0120 	bic.w	r1, r1, #32
   45c8c:	04c9      	lsls	r1, r1, #19
   45c8e:	0cc9      	lsrs	r1, r1, #19
   45c90:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   45c94:	2a00      	cmp	r2, #0
   45c96:	d0ec      	beq.n	45c72 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   45c98:	2d03      	cmp	r5, #3
   45c9a:	d8c5      	bhi.n	45c28 <nrfx_gpiote_input_configure+0x24>
                uint8_t ch = *p_trigger_config->p_in_channel;
   45c9c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   45c9e:	b92d      	cbnz	r5, 45cac <nrfx_gpiote_input_configure+0xa8>
   45ca0:	4a2d      	ldr	r2, [pc, #180]	; (45d58 <nrfx_gpiote_input_configure+0x154>)
   45ca2:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   45ca6:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   45caa:	e7e2      	b.n	45c72 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   45cac:	00ba      	lsls	r2, r7, #2
   45cae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   45cb2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   45cb6:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   45cba:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   45cbe:	f02c 0c03 	bic.w	ip, ip, #3
   45cc2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   45cc6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   45cca:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   45cce:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   45cd2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   45cd6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   45cda:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   45cde:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   45ce2:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
   45ce6:	ea4c 0c0e 	orr.w	ip, ip, lr
   45cea:	f041 0120 	orr.w	r1, r1, #32
   45cee:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   45cf2:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   45cf6:	e7bc      	b.n	45c72 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   45cf8:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
   45cfc:	4620      	mov	r0, r4
   45cfe:	f7ff ff3b 	bl	45b78 <release_handler>
    if (!handler)
   45d02:	2f00      	cmp	r7, #0
   45d04:	d0be      	beq.n	45c84 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   45d06:	4d11      	ldr	r5, [pc, #68]	; (45d4c <nrfx_gpiote_input_configure+0x148>)
   45d08:	682b      	ldr	r3, [r5, #0]
   45d0a:	429f      	cmp	r7, r3
   45d0c:	d104      	bne.n	45d18 <nrfx_gpiote_input_configure+0x114>
   45d0e:	686b      	ldr	r3, [r5, #4]
   45d10:	429e      	cmp	r6, r3
   45d12:	d101      	bne.n	45d18 <nrfx_gpiote_input_configure+0x114>
   45d14:	2200      	movs	r2, #0
   45d16:	e009      	b.n	45d2c <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   45d18:	4810      	ldr	r0, [pc, #64]	; (45d5c <nrfx_gpiote_input_configure+0x158>)
   45d1a:	f10d 010f 	add.w	r1, sp, #15
   45d1e:	f7ff fe27 	bl	45970 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   45d22:	4b0c      	ldr	r3, [pc, #48]	; (45d54 <nrfx_gpiote_input_configure+0x150>)
   45d24:	4298      	cmp	r0, r3
   45d26:	d180      	bne.n	45c2a <nrfx_gpiote_input_configure+0x26>
        handler_id = (int32_t)id;
   45d28:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   45d2c:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   45d30:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   45d34:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   45d36:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   45d38:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   45d3c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   45d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   45d44:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   45d48:	e79c      	b.n	45c84 <nrfx_gpiote_input_configure+0x80>
   45d4a:	bf00      	nop
   45d4c:	20000bb4 	.word	0x20000bb4
   45d50:	0bad0004 	.word	0x0bad0004
   45d54:	0bad0000 	.word	0x0bad0000
   45d58:	40006000 	.word	0x40006000
   45d5c:	20000c28 	.word	0x20000c28

00045d60 <nrfx_gpiote_output_configure>:
{
   45d60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   45d64:	4604      	mov	r4, r0
   45d66:	4615      	mov	r5, r2
    if (p_config)
   45d68:	b309      	cbz	r1, 45dae <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   45d6a:	4f32      	ldr	r7, [pc, #200]	; (45e34 <nrfx_gpiote_output_configure+0xd4>)
   45d6c:	f100 0808 	add.w	r8, r0, #8
   45d70:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   45d74:	07b2      	lsls	r2, r6, #30
   45d76:	d403      	bmi.n	45d80 <nrfx_gpiote_output_configure+0x20>
   45d78:	f7ff fed6 	bl	45b28 <pin_in_use_by_te>
   45d7c:	2800      	cmp	r0, #0
   45d7e:	d157      	bne.n	45e30 <nrfx_gpiote_output_configure+0xd0>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   45d80:	f016 0f1c 	tst.w	r6, #28
   45d84:	d002      	beq.n	45d8c <nrfx_gpiote_output_configure+0x2c>
   45d86:	784b      	ldrb	r3, [r1, #1]
   45d88:	2b01      	cmp	r3, #1
   45d8a:	d051      	beq.n	45e30 <nrfx_gpiote_output_configure+0xd0>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   45d8c:	2301      	movs	r3, #1
   45d8e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   45d92:	2300      	movs	r3, #0
   45d94:	e9cd 1300 	strd	r1, r3, [sp]
   45d98:	1c4a      	adds	r2, r1, #1
   45d9a:	1c8b      	adds	r3, r1, #2
   45d9c:	4620      	mov	r0, r4
   45d9e:	f10d 010f 	add.w	r1, sp, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   45da2:	f046 0603 	orr.w	r6, r6, #3
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   45da6:	f009 fff7 	bl	4fd98 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   45daa:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_task_config)
   45dae:	b91d      	cbnz	r5, 45db8 <nrfx_gpiote_output_configure+0x58>
    return NRFX_SUCCESS;
   45db0:	4821      	ldr	r0, [pc, #132]	; (45e38 <nrfx_gpiote_output_configure+0xd8>)
}
   45db2:	b004      	add	sp, #16
   45db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   45db8:	4e1e      	ldr	r6, [pc, #120]	; (45e34 <nrfx_gpiote_output_configure+0xd4>)
   45dba:	f104 0708 	add.w	r7, r4, #8
   45dbe:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   45dc2:	0783      	lsls	r3, r0, #30
   45dc4:	d534      	bpl.n	45e30 <nrfx_gpiote_output_configure+0xd0>
        uint32_t ch = p_task_config->task_ch;
   45dc6:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   45dca:	4661      	mov	r1, ip
   45dcc:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   45dce:	f020 0020 	bic.w	r0, r0, #32
   45dd2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   45dd6:	04c0      	lsls	r0, r0, #19
   45dd8:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   45ddc:	0cc0      	lsrs	r0, r0, #19
   45dde:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   45de2:	2300      	movs	r3, #0
   45de4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   45de8:	786a      	ldrb	r2, [r5, #1]
   45dea:	2a00      	cmp	r2, #0
   45dec:	d0e0      	beq.n	45db0 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   45dee:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   45df2:	78ad      	ldrb	r5, [r5, #2]
   45df4:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   45df8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   45dfc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   45e00:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   45e04:	0223      	lsls	r3, r4, #8
   45e06:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   45e0a:	0412      	lsls	r2, r2, #16
   45e0c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   45e10:	ea43 030e 	orr.w	r3, r3, lr
   45e14:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   45e16:	052a      	lsls	r2, r5, #20
   45e18:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   45e1c:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   45e20:	4313      	orrs	r3, r2
   45e22:	f040 0020 	orr.w	r0, r0, #32
   45e26:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   45e2a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   45e2e:	e7bf      	b.n	45db0 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
   45e30:	4802      	ldr	r0, [pc, #8]	; (45e3c <nrfx_gpiote_output_configure+0xdc>)
   45e32:	e7be      	b.n	45db2 <nrfx_gpiote_output_configure+0x52>
   45e34:	20000bb4 	.word	0x20000bb4
   45e38:	0bad0000 	.word	0x0bad0000
   45e3c:	0bad0004 	.word	0x0bad0004

00045e40 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   45e40:	4b01      	ldr	r3, [pc, #4]	; (45e48 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   45e42:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   45e46:	4770      	bx	lr
   45e48:	20000bb4 	.word	0x20000bb4

00045e4c <nrfx_gpiote_channel_get>:
{
   45e4c:	b508      	push	{r3, lr}
   45e4e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   45e50:	f7ff fe6a 	bl	45b28 <pin_in_use_by_te>
   45e54:	b138      	cbz	r0, 45e66 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   45e56:	4b05      	ldr	r3, [pc, #20]	; (45e6c <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   45e58:	4805      	ldr	r0, [pc, #20]	; (45e70 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   45e5a:	3208      	adds	r2, #8
   45e5c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   45e60:	0b5b      	lsrs	r3, r3, #13
   45e62:	700b      	strb	r3, [r1, #0]
}
   45e64:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   45e66:	4803      	ldr	r0, [pc, #12]	; (45e74 <nrfx_gpiote_channel_get+0x28>)
   45e68:	e7fc      	b.n	45e64 <nrfx_gpiote_channel_get+0x18>
   45e6a:	bf00      	nop
   45e6c:	20000bb4 	.word	0x20000bb4
   45e70:	0bad0000 	.word	0x0bad0000
   45e74:	0bad0004 	.word	0x0bad0004

00045e78 <nrfx_gpiote_init>:
{
   45e78:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   45e7a:	4c0f      	ldr	r4, [pc, #60]	; (45eb8 <nrfx_gpiote_init+0x40>)
   45e7c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   45e80:	b9bd      	cbnz	r5, 45eb2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   45e82:	2260      	movs	r2, #96	; 0x60
   45e84:	4629      	mov	r1, r5
   45e86:	f104 0010 	add.w	r0, r4, #16
   45e8a:	f005 fd09 	bl	4b8a0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   45e8e:	2006      	movs	r0, #6
   45e90:	f7e6 fbfc 	bl	2c68c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   45e94:	4b09      	ldr	r3, [pc, #36]	; (45ebc <nrfx_gpiote_init+0x44>)
    return err_code;
   45e96:	480a      	ldr	r0, [pc, #40]	; (45ec0 <nrfx_gpiote_init+0x48>)
   45e98:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   45e9c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   45ea0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   45ea4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   45ea8:	2301      	movs	r3, #1
   45eaa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   45eae:	6763      	str	r3, [r4, #116]	; 0x74
}
   45eb0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   45eb2:	4804      	ldr	r0, [pc, #16]	; (45ec4 <nrfx_gpiote_init+0x4c>)
   45eb4:	e7fc      	b.n	45eb0 <nrfx_gpiote_init+0x38>
   45eb6:	bf00      	nop
   45eb8:	20000bb4 	.word	0x20000bb4
   45ebc:	40006000 	.word	0x40006000
   45ec0:	0bad0000 	.word	0x0bad0000
   45ec4:	0bad0005 	.word	0x0bad0005

00045ec8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   45ec8:	4b03      	ldr	r3, [pc, #12]	; (45ed8 <nrfx_gpiote_is_init+0x10>)
   45eca:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   45ece:	3800      	subs	r0, #0
   45ed0:	bf18      	it	ne
   45ed2:	2001      	movne	r0, #1
   45ed4:	4770      	bx	lr
   45ed6:	bf00      	nop
   45ed8:	20000bb4 	.word	0x20000bb4

00045edc <nrfx_gpiote_channel_free>:
{
   45edc:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   45ede:	4801      	ldr	r0, [pc, #4]	; (45ee4 <nrfx_gpiote_channel_free+0x8>)
   45ee0:	f7ff bd66 	b.w	459b0 <nrfx_flag32_free>
   45ee4:	20000c24 	.word	0x20000c24

00045ee8 <nrfx_gpiote_channel_alloc>:
{
   45ee8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   45eea:	4801      	ldr	r0, [pc, #4]	; (45ef0 <nrfx_gpiote_channel_alloc+0x8>)
   45eec:	f7ff bd40 	b.w	45970 <nrfx_flag32_alloc>
   45ef0:	20000c24 	.word	0x20000c24

00045ef4 <nrfx_gpiote_trigger_enable>:
{
   45ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   45ef6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   45ef8:	f7ff fe16 	bl	45b28 <pin_in_use_by_te>
   45efc:	4a1f      	ldr	r2, [pc, #124]	; (45f7c <nrfx_gpiote_trigger_enable+0x88>)
   45efe:	f104 0508 	add.w	r5, r4, #8
   45f02:	b1f0      	cbz	r0, 45f42 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   45f04:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   45f08:	f013 0602 	ands.w	r6, r3, #2
   45f0c:	d119      	bne.n	45f42 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   45f0e:	0b5a      	lsrs	r2, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   45f10:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
   45f12:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
   45f16:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   45f1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   45f1e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   45f22:	6006      	str	r6, [r0, #0]
   45f24:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   45f26:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   45f2a:	f040 0001 	orr.w	r0, r0, #1
   45f2e:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   45f32:	b121      	cbz	r1, 45f3e <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   45f34:	2301      	movs	r3, #1
   45f36:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   45f38:	4a11      	ldr	r2, [pc, #68]	; (45f80 <nrfx_gpiote_trigger_enable+0x8c>)
   45f3a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   45f3e:	b002      	add	sp, #8
   45f40:	bd70      	pop	{r4, r5, r6, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   45f42:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   45f46:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   45f4a:	2b04      	cmp	r3, #4
   45f4c:	d012      	beq.n	45f74 <nrfx_gpiote_trigger_enable+0x80>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   45f4e:	2b05      	cmp	r3, #5
   45f50:	d012      	beq.n	45f78 <nrfx_gpiote_trigger_enable+0x84>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   45f52:	a801      	add	r0, sp, #4
   45f54:	9401      	str	r4, [sp, #4]
   45f56:	f7ff fdd9 	bl	45b0c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   45f5a:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   45f5c:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   45f60:	40d9      	lsrs	r1, r3
   45f62:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   45f66:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   45f68:	4620      	mov	r0, r4
}
   45f6a:	b002      	add	sp, #8
   45f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   45f70:	f009 bf5b 	b.w	4fe2a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   45f74:	2103      	movs	r1, #3
   45f76:	e7f7      	b.n	45f68 <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   45f78:	2102      	movs	r1, #2
   45f7a:	e7f5      	b.n	45f68 <nrfx_gpiote_trigger_enable+0x74>
   45f7c:	20000bb4 	.word	0x20000bb4
   45f80:	40006000 	.word	0x40006000

00045f84 <nrfx_gpiote_trigger_disable>:
{
   45f84:	b508      	push	{r3, lr}
   45f86:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   45f88:	f7ff fdce 	bl	45b28 <pin_in_use_by_te>
   45f8c:	b1c0      	cbz	r0, 45fc0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   45f8e:	f102 0108 	add.w	r1, r2, #8
   45f92:	4b0e      	ldr	r3, [pc, #56]	; (45fcc <nrfx_gpiote_trigger_disable+0x48>)
   45f94:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   45f98:	0799      	lsls	r1, r3, #30
   45f9a:	d411      	bmi.n	45fc0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   45f9c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   45f9e:	2201      	movs	r2, #1
   45fa0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   45fa2:	009b      	lsls	r3, r3, #2
   45fa4:	490a      	ldr	r1, [pc, #40]	; (45fd0 <nrfx_gpiote_trigger_disable+0x4c>)
   45fa6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   45faa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   45fae:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   45fb2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   45fb6:	f022 0203 	bic.w	r2, r2, #3
   45fba:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   45fbe:	bd08      	pop	{r3, pc}
   45fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   45fc4:	2100      	movs	r1, #0
   45fc6:	4610      	mov	r0, r2
   45fc8:	f009 bf2f 	b.w	4fe2a <nrf_gpio_cfg_sense_set>
   45fcc:	20000bb4 	.word	0x20000bb4
   45fd0:	40006000 	.word	0x40006000

00045fd4 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   45fd4:	4b0e      	ldr	r3, [pc, #56]	; (46010 <nrfx_gpiote_pin_uninit+0x3c>)
   45fd6:	f100 0208 	add.w	r2, r0, #8
{
   45fda:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   45fdc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   45fe0:	07db      	lsls	r3, r3, #31
{
   45fe2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   45fe4:	d511      	bpl.n	4600a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   45fe6:	f7ff ffcd 	bl	45f84 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   45fea:	4620      	mov	r0, r4
   45fec:	f7ff fdee 	bl	45bcc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   45ff0:	a801      	add	r0, sp, #4
   45ff2:	9401      	str	r4, [sp, #4]
   45ff4:	f7ff fd8a 	bl	45b0c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   45ff8:	9b01      	ldr	r3, [sp, #4]
   45ffa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   45ffe:	2202      	movs	r2, #2
   46000:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   46004:	4803      	ldr	r0, [pc, #12]	; (46014 <nrfx_gpiote_pin_uninit+0x40>)
}
   46006:	b002      	add	sp, #8
   46008:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   4600a:	4803      	ldr	r0, [pc, #12]	; (46018 <nrfx_gpiote_pin_uninit+0x44>)
   4600c:	e7fb      	b.n	46006 <nrfx_gpiote_pin_uninit+0x32>
   4600e:	bf00      	nop
   46010:	20000bb4 	.word	0x20000bb4
   46014:	0bad0000 	.word	0x0bad0000
   46018:	0bad0004 	.word	0x0bad0004

0004601c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   4601c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46020:	4b64      	ldr	r3, [pc, #400]	; (461b4 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   46022:	4865      	ldr	r0, [pc, #404]	; (461b8 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   46024:	4965      	ldr	r1, [pc, #404]	; (461bc <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   46026:	2600      	movs	r6, #0
{
   46028:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   4602a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   4602c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4602e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   46030:	b135      	cbz	r5, 46040 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   46032:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   46036:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46038:	bf1e      	ittt	ne
   4603a:	601c      	strne	r4, [r3, #0]
   4603c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   4603e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   46040:	3304      	adds	r3, #4
   46042:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   46044:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   46048:	d1f1      	bne.n	4602e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4604a:	f8df 816c 	ldr.w	r8, [pc, #364]	; 461b8 <nrfx_gpiote_irq_handler+0x19c>
   4604e:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   46052:	2b00      	cmp	r3, #0
   46054:	f000 8091 	beq.w	4617a <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   46058:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   4605c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   46060:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   46062:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   46066:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   4606a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   4606c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   46070:	2700      	movs	r7, #0
            while (latch[i])
   46072:	f10d 0910 	add.w	r9, sp, #16
   46076:	017b      	lsls	r3, r7, #5
   46078:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   4607a:	f04f 0a01 	mov.w	sl, #1
   4607e:	e049      	b.n	46114 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   46080:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   46082:	4a4f      	ldr	r2, [pc, #316]	; (461c0 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   46084:	fa94 f4a4 	rbit	r4, r4
   46088:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   4608c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   4608e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   46090:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   46094:	f004 0c07 	and.w	ip, r4, #7
   46098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   4609c:	f819 2000 	ldrb.w	r2, [r9, r0]
   460a0:	9403      	str	r4, [sp, #12]
   460a2:	fa0a fc0c 	lsl.w	ip, sl, ip
   460a6:	ea22 020c 	bic.w	r2, r2, ip
   460aa:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   460ae:	a803      	add	r0, sp, #12
   460b0:	f3c3 0582 	ubfx	r5, r3, #2, #3
   460b4:	0899      	lsrs	r1, r3, #2
   460b6:	f7ff fd29 	bl	45b0c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   460ba:	9a03      	ldr	r2, [sp, #12]
   460bc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   460c0:	074b      	lsls	r3, r1, #29
   460c2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   460c6:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   460c8:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   460cc:	d529      	bpl.n	46122 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   460ce:	4620      	mov	r0, r4
   460d0:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   460d2:	b2d5      	uxtb	r5, r2
   460d4:	f7ff fd32 	bl	45b3c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   460d8:	a803      	add	r0, sp, #12
   460da:	9403      	str	r4, [sp, #12]
   460dc:	f7ff fd16 	bl	45b0c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   460e0:	9b03      	ldr	r3, [sp, #12]
   460e2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   460e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   460ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
   460ee:	429d      	cmp	r5, r3
   460f0:	d107      	bne.n	46102 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   460f2:	2100      	movs	r1, #0
   460f4:	4620      	mov	r0, r4
   460f6:	f009 fe98 	bl	4fe2a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   460fa:	4629      	mov	r1, r5
   460fc:	4620      	mov	r0, r4
   460fe:	f009 fe94 	bl	4fe2a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46102:	a803      	add	r0, sp, #12
   46104:	9403      	str	r4, [sp, #12]
   46106:	f7ff fd01 	bl	45b0c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   4610a:	9b03      	ldr	r3, [sp, #12]
   4610c:	fa0a f303 	lsl.w	r3, sl, r3
   46110:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   46114:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   46118:	2c00      	cmp	r4, #0
   4611a:	d1b1      	bne.n	46080 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   4611c:	b9cf      	cbnz	r7, 46152 <nrfx_gpiote_irq_handler+0x136>
   4611e:	2701      	movs	r7, #1
   46120:	e7a9      	b.n	46076 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   46122:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   46124:	bf0c      	ite	eq
   46126:	2103      	moveq	r1, #3
   46128:	2102      	movne	r1, #2
   4612a:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   4612c:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   4612e:	f009 fe7c 	bl	4fe2a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   46132:	2d03      	cmp	r5, #3
   46134:	d004      	beq.n	46140 <nrfx_gpiote_irq_handler+0x124>
   46136:	9a01      	ldr	r2, [sp, #4]
   46138:	2a02      	cmp	r2, #2
   4613a:	d106      	bne.n	4614a <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   4613c:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   4613e:	d1e0      	bne.n	46102 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   46140:	4659      	mov	r1, fp
   46142:	4620      	mov	r0, r4
   46144:	f7ff fcfa 	bl	45b3c <call_handler>
   46148:	e7db      	b.n	46102 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   4614a:	2a03      	cmp	r2, #3
   4614c:	d1d9      	bne.n	46102 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   4614e:	2d02      	cmp	r5, #2
   46150:	e7f5      	b.n	4613e <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   46152:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46156:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   4615a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
   4615e:	4919      	ldr	r1, [pc, #100]	; (461c4 <nrfx_gpiote_irq_handler+0x1a8>)
   46160:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   46164:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   46166:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   4616a:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   4616e:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   46170:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   46172:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   46176:	f47f af7b 	bne.w	46070 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   4617a:	2401      	movs	r4, #1
    while (mask)
   4617c:	b916      	cbnz	r6, 46184 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   4617e:	b007      	add	sp, #28
   46180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   46184:	fa96 f3a6 	rbit	r3, r6
   46188:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   4618c:	fa04 f203 	lsl.w	r2, r4, r3
   46190:	009b      	lsls	r3, r3, #2
   46192:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   46196:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   4619a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   4619e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   461a2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   461a6:	f3c0 2005 	ubfx	r0, r0, #8, #6
   461aa:	f3c1 4101 	ubfx	r1, r1, #16, #2
   461ae:	f7ff fcc5 	bl	45b3c <call_handler>
   461b2:	e7e3      	b.n	4617c <nrfx_gpiote_irq_handler+0x160>
   461b4:	40006100 	.word	0x40006100
   461b8:	40006000 	.word	0x40006000
   461bc:	40006120 	.word	0x40006120
   461c0:	20000bb4 	.word	0x20000bb4
   461c4:	50000300 	.word	0x50000300

000461c8 <nvmc_word_write>:
   461c8:	4a04      	ldr	r2, [pc, #16]	; (461dc <nvmc_word_write+0x14>)
   461ca:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   461ce:	07db      	lsls	r3, r3, #31
   461d0:	d5fb      	bpl.n	461ca <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   461d2:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   461d4:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   461d8:	4770      	bx	lr
   461da:	bf00      	nop
   461dc:	4001e000 	.word	0x4001e000

000461e0 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   461e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   461e4:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   461e6:	fbb0 f3f2 	udiv	r3, r0, r2
   461ea:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   461ee:	b973      	cbnz	r3, 4620e <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   461f0:	4b08      	ldr	r3, [pc, #32]	; (46214 <nrfx_nvmc_page_erase+0x34>)
   461f2:	2202      	movs	r2, #2
   461f4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   461f8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   461fc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   46200:	07d2      	lsls	r2, r2, #31
   46202:	d5fb      	bpl.n	461fc <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   46204:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   46206:	4804      	ldr	r0, [pc, #16]	; (46218 <nrfx_nvmc_page_erase+0x38>)
   46208:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   4620c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   4620e:	4803      	ldr	r0, [pc, #12]	; (4621c <nrfx_nvmc_page_erase+0x3c>)
}
   46210:	4770      	bx	lr
   46212:	bf00      	nop
   46214:	4001e000 	.word	0x4001e000
   46218:	0bad0000 	.word	0x0bad0000
   4621c:	0bad000a 	.word	0x0bad000a

00046220 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   46220:	b510      	push	{r4, lr}
   46222:	4c05      	ldr	r4, [pc, #20]	; (46238 <nrfx_nvmc_word_write+0x18>)
   46224:	2301      	movs	r3, #1
   46226:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   4622a:	f7ff ffcd 	bl	461c8 <nvmc_word_write>
   4622e:	2300      	movs	r3, #0
   46230:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   46234:	bd10      	pop	{r4, pc}
   46236:	bf00      	nop
   46238:	4001e000 	.word	0x4001e000

0004623c <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   4623c:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   4623e:	4c18      	ldr	r4, [pc, #96]	; (462a0 <nrfx_power_init+0x64>)
   46240:	7823      	ldrb	r3, [r4, #0]
   46242:	bb53      	cbnz	r3, 4629a <nrfx_power_init+0x5e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   46244:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   46246:	0791      	lsls	r1, r2, #30
   46248:	f3c2 0340 	ubfx	r3, r2, #1, #1
   4624c:	d511      	bpl.n	46272 <nrfx_power_init+0x36>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   4624e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46252:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
   46256:	2908      	cmp	r1, #8
   46258:	d11d      	bne.n	46296 <nrfx_power_init+0x5a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   4625a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   4625e:	2b05      	cmp	r3, #5
   46260:	d819      	bhi.n	46296 <nrfx_power_init+0x5a>
   46262:	4910      	ldr	r1, [pc, #64]	; (462a4 <nrfx_power_init+0x68>)
   46264:	5cc9      	ldrb	r1, [r1, r3]
   46266:	2301      	movs	r3, #1
   46268:	b119      	cbz	r1, 46272 <nrfx_power_init+0x36>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   4626a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   4626e:	f8c1 3638 	str.w	r3, [r1, #1592]	; 0x638
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   46272:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   46276:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   4627a:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   4627e:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   46280:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
   46284:	f7e6 fa24 	bl	2c6d0 <arch_irq_is_enabled>
   46288:	b908      	cbnz	r0, 4628e <nrfx_power_init+0x52>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   4628a:	f7e6 f9ff 	bl	2c68c <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   4628e:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   46290:	4805      	ldr	r0, [pc, #20]	; (462a8 <nrfx_power_init+0x6c>)
    m_initialized = true;
   46292:	7023      	strb	r3, [r4, #0]
}
   46294:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   46296:	2301      	movs	r3, #1
   46298:	e7eb      	b.n	46272 <nrfx_power_init+0x36>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   4629a:	4804      	ldr	r0, [pc, #16]	; (462ac <nrfx_power_init+0x70>)
   4629c:	e7fa      	b.n	46294 <nrfx_power_init+0x58>
   4629e:	bf00      	nop
   462a0:	20006de3 	.word	0x20006de3
   462a4:	00053d1f 	.word	0x00053d1f
   462a8:	0bad0000 	.word	0x0bad0000
   462ac:	0bad000c 	.word	0x0bad000c

000462b0 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   462b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   462b4:	f44f 7260 	mov.w	r2, #896	; 0x380
   462b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   462bc:	4b01      	ldr	r3, [pc, #4]	; (462c4 <nrfx_power_usbevt_uninit+0x14>)
   462be:	2200      	movs	r2, #0
   462c0:	601a      	str	r2, [r3, #0]
}
   462c2:	4770      	bx	lr
   462c4:	20006804 	.word	0x20006804

000462c8 <nrfx_power_usbevt_init>:
{
   462c8:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   462ca:	f7ff fff1 	bl	462b0 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   462ce:	6803      	ldr	r3, [r0, #0]
   462d0:	b10b      	cbz	r3, 462d6 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   462d2:	4a01      	ldr	r2, [pc, #4]	; (462d8 <nrfx_power_usbevt_init+0x10>)
   462d4:	6013      	str	r3, [r2, #0]
}
   462d6:	bd08      	pop	{r3, pc}
   462d8:	20006804 	.word	0x20006804

000462dc <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   462dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   462e0:	b510      	push	{r4, lr}
   462e2:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   462e6:	0762      	lsls	r2, r4, #29
   462e8:	d507      	bpl.n	462fa <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   462ea:	f44f 7084 	mov.w	r0, #264	; 0x108
   462ee:	f009 fdb9 	bl	4fe64 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   462f2:	b110      	cbz	r0, 462fa <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   462f4:	4b1e      	ldr	r3, [pc, #120]	; (46370 <nrfx_power_irq_handler+0x94>)
   462f6:	681b      	ldr	r3, [r3, #0]
   462f8:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   462fa:	06a3      	lsls	r3, r4, #26
   462fc:	d508      	bpl.n	46310 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   462fe:	f44f 708a 	mov.w	r0, #276	; 0x114
   46302:	f009 fdaf 	bl	4fe64 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   46306:	b118      	cbz	r0, 46310 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   46308:	4b1a      	ldr	r3, [pc, #104]	; (46374 <nrfx_power_irq_handler+0x98>)
   4630a:	2000      	movs	r0, #0
   4630c:	681b      	ldr	r3, [r3, #0]
   4630e:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   46310:	0660      	lsls	r0, r4, #25
   46312:	d508      	bpl.n	46326 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   46314:	f44f 708c 	mov.w	r0, #280	; 0x118
   46318:	f009 fda4 	bl	4fe64 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   4631c:	b118      	cbz	r0, 46326 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   4631e:	4b15      	ldr	r3, [pc, #84]	; (46374 <nrfx_power_irq_handler+0x98>)
   46320:	2001      	movs	r0, #1
   46322:	681b      	ldr	r3, [r3, #0]
   46324:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   46326:	0621      	lsls	r1, r4, #24
   46328:	d508      	bpl.n	4633c <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   4632a:	f44f 708e 	mov.w	r0, #284	; 0x11c
   4632e:	f009 fd99 	bl	4fe64 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   46332:	b118      	cbz	r0, 4633c <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   46334:	4b10      	ldr	r3, [pc, #64]	; (46378 <nrfx_power_irq_handler+0x9c>)
   46336:	2000      	movs	r0, #0
   46338:	681b      	ldr	r3, [r3, #0]
   4633a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   4633c:	05e2      	lsls	r2, r4, #23
   4633e:	d508      	bpl.n	46352 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   46340:	f44f 7090 	mov.w	r0, #288	; 0x120
   46344:	f009 fd8e 	bl	4fe64 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   46348:	b118      	cbz	r0, 46352 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   4634a:	4b0b      	ldr	r3, [pc, #44]	; (46378 <nrfx_power_irq_handler+0x9c>)
   4634c:	2001      	movs	r0, #1
   4634e:	681b      	ldr	r3, [r3, #0]
   46350:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   46352:	05a3      	lsls	r3, r4, #22
   46354:	d50a      	bpl.n	4636c <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   46356:	f44f 7092 	mov.w	r0, #292	; 0x124
   4635a:	f009 fd83 	bl	4fe64 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   4635e:	b128      	cbz	r0, 4636c <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   46360:	4b05      	ldr	r3, [pc, #20]	; (46378 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
   46362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   46366:	681b      	ldr	r3, [r3, #0]
   46368:	2002      	movs	r0, #2
   4636a:	4718      	bx	r3
}
   4636c:	bd10      	pop	{r4, pc}
   4636e:	bf00      	nop
   46370:	200067fc 	.word	0x200067fc
   46374:	20006800 	.word	0x20006800
   46378:	20006804 	.word	0x20006804

0004637c <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   4637c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   46380:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   46384:	2a08      	cmp	r2, #8
   46386:	d106      	bne.n	46396 <nrf52_errata_187+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   46388:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   4638c:	2b05      	cmp	r3, #5
   4638e:	d804      	bhi.n	4639a <nrf52_errata_187+0x1e>
   46390:	4a03      	ldr	r2, [pc, #12]	; (463a0 <nrf52_errata_187+0x24>)
   46392:	5cd0      	ldrb	r0, [r2, r3]
   46394:	4770      	bx	lr
        return false;
   46396:	2000      	movs	r0, #0
   46398:	4770      	bx	lr
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   4639a:	2001      	movs	r0, #1
}
   4639c:	4770      	bx	lr
   4639e:	bf00      	nop
   463a0:	00053d25 	.word	0x00053d25

000463a4 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   463a4:	4b05      	ldr	r3, [pc, #20]	; (463bc <ep_state_access+0x18>)
   463a6:	f010 0f80 	tst.w	r0, #128	; 0x80
   463aa:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   463ae:	bf08      	it	eq
   463b0:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   463b2:	f000 000f 	and.w	r0, r0, #15
}
   463b6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   463ba:	4770      	bx	lr
   463bc:	20006978 	.word	0x20006978

000463c0 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   463c0:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   463c2:	f009 fd70 	bl	4fea6 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   463c6:	b118      	cbz	r0, 463d0 <usbd_dma_pending_clear+0x10>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   463c8:	4b03      	ldr	r3, [pc, #12]	; (463d8 <usbd_dma_pending_clear+0x18>)
   463ca:	2200      	movs	r2, #0
   463cc:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    }
    m_dma_pending = false;
   463d0:	4b02      	ldr	r3, [pc, #8]	; (463dc <usbd_dma_pending_clear+0x1c>)
   463d2:	2200      	movs	r2, #0
   463d4:	701a      	strb	r2, [r3, #0]
}
   463d6:	bd08      	pop	{r3, pc}
   463d8:	40027000 	.word	0x40027000
   463dc:	20006de5 	.word	0x20006de5

000463e0 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   463e0:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   463e2:	4a07      	ldr	r2, [pc, #28]	; (46400 <ev_usbreset_handler+0x20>)
   463e4:	2300      	movs	r3, #0
   463e6:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   463e8:	4a06      	ldr	r2, [pc, #24]	; (46404 <ev_usbreset_handler+0x24>)
   463ea:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   463ec:	2301      	movs	r3, #1
   463ee:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   463f0:	4b05      	ldr	r3, [pc, #20]	; (46408 <ev_usbreset_handler+0x28>)
   463f2:	a801      	add	r0, sp, #4
   463f4:	681b      	ldr	r3, [r3, #0]
   463f6:	4798      	blx	r3
}
   463f8:	b003      	add	sp, #12
   463fa:	f85d fb04 	ldr.w	pc, [sp], #4
   463fe:	bf00      	nop
   46400:	20006de4 	.word	0x20006de4
   46404:	20006de7 	.word	0x20006de7
   46408:	20006a08 	.word	0x20006a08

0004640c <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   4640c:	4b19      	ldr	r3, [pc, #100]	; (46474 <ev_usbevent_handler+0x68>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   4640e:	b513      	push	{r0, r1, r4, lr}
   46410:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   46414:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   46418:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   4641a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   4641e:	d508      	bpl.n	46432 <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   46420:	4b15      	ldr	r3, [pc, #84]	; (46478 <ev_usbevent_handler+0x6c>)
   46422:	2201      	movs	r2, #1
   46424:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   46426:	2302      	movs	r3, #2
   46428:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   4642a:	4b14      	ldr	r3, [pc, #80]	; (4647c <ev_usbevent_handler+0x70>)
   4642c:	a801      	add	r0, sp, #4
   4642e:	681b      	ldr	r3, [r3, #0]
   46430:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   46432:	05a2      	lsls	r2, r4, #22
   46434:	d508      	bpl.n	46448 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   46436:	4b10      	ldr	r3, [pc, #64]	; (46478 <ev_usbevent_handler+0x6c>)
   46438:	2200      	movs	r2, #0
   4643a:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   4643c:	2303      	movs	r3, #3
   4643e:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   46440:	4b0e      	ldr	r3, [pc, #56]	; (4647c <ev_usbevent_handler+0x70>)
   46442:	a801      	add	r0, sp, #4
   46444:	681b      	ldr	r3, [r3, #0]
   46446:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   46448:	0563      	lsls	r3, r4, #21
   4644a:	d510      	bpl.n	4646e <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   4644c:	4b0a      	ldr	r3, [pc, #40]	; (46478 <ev_usbevent_handler+0x6c>)
   4644e:	781a      	ldrb	r2, [r3, #0]
   46450:	b16a      	cbz	r2, 4646e <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   46452:	2200      	movs	r2, #0
   46454:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   46456:	4b07      	ldr	r3, [pc, #28]	; (46474 <ev_usbevent_handler+0x68>)
   46458:	2201      	movs	r2, #1
   4645a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   4645e:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   46460:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   46462:	2304      	movs	r3, #4
   46464:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   46466:	4b05      	ldr	r3, [pc, #20]	; (4647c <ev_usbevent_handler+0x70>)
   46468:	a801      	add	r0, sp, #4
   4646a:	681b      	ldr	r3, [r3, #0]
   4646c:	4798      	blx	r3
        }
    }
}
   4646e:	b002      	add	sp, #8
   46470:	bd10      	pop	{r4, pc}
   46472:	bf00      	nop
   46474:	40027000 	.word	0x40027000
   46478:	20006de4 	.word	0x20006de4
   4647c:	20006a08 	.word	0x20006a08

00046480 <usbd_errata_187_211_begin>:
	__asm__ volatile(
   46480:	f04f 0320 	mov.w	r3, #32
   46484:	f3ef 8011 	mrs	r0, BASEPRI
   46488:	f383 8812 	msr	BASEPRI_MAX, r3
   4648c:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   46490:	4b0a      	ldr	r3, [pc, #40]	; (464bc <usbd_errata_187_211_begin+0x3c>)
   46492:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   46496:	2203      	movs	r2, #3
   46498:	b961      	cbnz	r1, 464b4 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   4649a:	f249 3175 	movw	r1, #37749	; 0x9375
   4649e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   464a2:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   464a6:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   464aa:	f380 8811 	msr	BASEPRI, r0
   464ae:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   464b2:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   464b4:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   464b8:	e7f7      	b.n	464aa <usbd_errata_187_211_begin+0x2a>
   464ba:	bf00      	nop
   464bc:	4006e000 	.word	0x4006e000

000464c0 <usbd_errata_187_211_end>:
	__asm__ volatile(
   464c0:	f04f 0320 	mov.w	r3, #32
   464c4:	f3ef 8011 	mrs	r0, BASEPRI
   464c8:	f383 8812 	msr	BASEPRI_MAX, r3
   464cc:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   464d0:	4b0a      	ldr	r3, [pc, #40]	; (464fc <usbd_errata_187_211_end+0x3c>)
   464d2:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   464d6:	b961      	cbnz	r1, 464f2 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   464d8:	f249 3275 	movw	r2, #37749	; 0x9375
   464dc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   464e0:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   464e4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   464e8:	f380 8811 	msr	BASEPRI, r0
   464ec:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   464f0:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   464f2:	2200      	movs	r2, #0
   464f4:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
   464f8:	e7f6      	b.n	464e8 <usbd_errata_187_211_end+0x28>
   464fa:	bf00      	nop
   464fc:	4006e000 	.word	0x4006e000

00046500 <nrfx_usbd_feeder_flash>:
{
   46500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46502:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   46504:	4f0b      	ldr	r7, [pc, #44]	; (46534 <nrfx_usbd_feeder_flash+0x34>)
{
   46506:	460c      	mov	r4, r1
   46508:	429a      	cmp	r2, r3
   4650a:	bf28      	it	cs
   4650c:	461a      	movcs	r2, r3
   4650e:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   46510:	6809      	ldr	r1, [r1, #0]
   46512:	4638      	mov	r0, r7
   46514:	4615      	mov	r5, r2
   46516:	f005 f9b8 	bl	4b88a <memcpy>
    p_transfer->size -= tx_size;
   4651a:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   4651c:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
   4651e:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   46520:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
   46524:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
   46526:	6060      	str	r0, [r4, #4]
}
   46528:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   4652a:	6023      	str	r3, [r4, #0]
}
   4652c:	bf18      	it	ne
   4652e:	2001      	movne	r0, #1
   46530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   46532:	bf00      	nop
   46534:	20006a0c 	.word	0x20006a0c

00046538 <nrfx_usbd_feeder_flash_zlp>:
    if (tx_size > ep_size)
   46538:	684b      	ldr	r3, [r1, #4]
   4653a:	429a      	cmp	r2, r3
   4653c:	bf28      	it	cs
   4653e:	461a      	movcs	r2, r3
{
   46540:	b570      	push	{r4, r5, r6, lr}
   46542:	4606      	mov	r6, r0
   46544:	460d      	mov	r5, r1
   46546:	4614      	mov	r4, r2
    if (tx_size != 0)
   46548:	b182      	cbz	r2, 4656c <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   4654a:	6809      	ldr	r1, [r1, #0]
   4654c:	4808      	ldr	r0, [pc, #32]	; (46570 <nrfx_usbd_feeder_flash_zlp+0x38>)
   4654e:	f005 f99c 	bl	4b88a <memcpy>
        p_next->p_data.tx = p_buffer;
   46552:	4b07      	ldr	r3, [pc, #28]	; (46570 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
   46554:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
   46558:	686b      	ldr	r3, [r5, #4]
   4655a:	1b1b      	subs	r3, r3, r4
   4655c:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   4655e:	682b      	ldr	r3, [r5, #0]
}
   46560:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   46562:	4423      	add	r3, r4
   46564:	602b      	str	r3, [r5, #0]
}
   46566:	bf18      	it	ne
   46568:	2001      	movne	r0, #1
   4656a:	bd70      	pop	{r4, r5, r6, pc}
   4656c:	4613      	mov	r3, r2
   4656e:	e7f1      	b.n	46554 <nrfx_usbd_feeder_flash_zlp+0x1c>
   46570:	20006a0c 	.word	0x20006a0c

00046574 <ev_sof_handler>:
{
   46574:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   46576:	2300      	movs	r3, #0
   46578:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   4657c:	4b0b      	ldr	r3, [pc, #44]	; (465ac <ev_sof_handler+0x38>)
   4657e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   46582:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   46586:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   4658a:	4a09      	ldr	r2, [pc, #36]	; (465b0 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   4658c:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
   4658e:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   46590:	bf0c      	ite	eq
   46592:	f44f 7180 	moveq.w	r1, #256	; 0x100
   46596:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
   4659a:	430b      	orrs	r3, r1
   4659c:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   4659e:	4b05      	ldr	r3, [pc, #20]	; (465b4 <ev_sof_handler+0x40>)
   465a0:	a801      	add	r0, sp, #4
   465a2:	681b      	ldr	r3, [r3, #0]
   465a4:	4798      	blx	r3
}
   465a6:	b003      	add	sp, #12
   465a8:	f85d fb04 	ldr.w	pc, [sp], #4
   465ac:	40027000 	.word	0x40027000
   465b0:	200068e4 	.word	0x200068e4
   465b4:	20006a08 	.word	0x20006a08

000465b8 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   465b8:	4b06      	ldr	r3, [pc, #24]	; (465d4 <atomic_and.constprop.0.isra.0+0x1c>)
   465ba:	f3bf 8f5b 	dmb	ish
   465be:	e853 1f00 	ldrex	r1, [r3]
   465c2:	4001      	ands	r1, r0
   465c4:	e843 1200 	strex	r2, r1, [r3]
   465c8:	2a00      	cmp	r2, #0
   465ca:	d1f8      	bne.n	465be <atomic_and.constprop.0.isra.0+0x6>
   465cc:	f3bf 8f5b 	dmb	ish
}
   465d0:	4770      	bx	lr
   465d2:	bf00      	nop
   465d4:	20006874 	.word	0x20006874

000465d8 <nrf_usbd_ep0in_dma_handler>:
{
   465d8:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   465da:	f7ff fef1 	bl	463c0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   465de:	4b08      	ldr	r3, [pc, #32]	; (46600 <nrf_usbd_ep0in_dma_handler+0x28>)
   465e0:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   465e4:	2a03      	cmp	r2, #3
   465e6:	d105      	bne.n	465f4 <nrf_usbd_ep0in_dma_handler+0x1c>
}
   465e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   465ec:	f06f 0001 	mvn.w	r0, #1
   465f0:	f7ff bfe2 	b.w	465b8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   465f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   465f8:	2b00      	cmp	r3, #0
   465fa:	d0f5      	beq.n	465e8 <nrf_usbd_ep0in_dma_handler+0x10>
}
   465fc:	bd08      	pop	{r3, pc}
   465fe:	bf00      	nop
   46600:	200068e8 	.word	0x200068e8

00046604 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   46604:	2201      	movs	r2, #1
{
   46606:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   46608:	fa02 f501 	lsl.w	r5, r2, r1
   4660c:	491c      	ldr	r1, [pc, #112]	; (46680 <usbd_ep_data_handler+0x7c>)
   4660e:	4e1d      	ldr	r6, [pc, #116]	; (46684 <usbd_ep_data_handler+0x80>)
   46610:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   46612:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   46616:	ea43 0305 	orr.w	r3, r3, r5
{
   4661a:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   4661c:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   4661e:	d024      	beq.n	4666a <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   46620:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   46624:	4b18      	ldr	r3, [pc, #96]	; (46688 <usbd_ep_data_handler+0x84>)
   46626:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   4662a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4662e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   46632:	681a      	ldr	r2, [r3, #0]
    if (ret)
   46634:	b132      	cbz	r2, 46644 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   46636:	2200      	movs	r2, #0
   46638:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   4663a:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   4663c:	681b      	ldr	r3, [r3, #0]
   4663e:	d011      	beq.n	46664 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   46640:	f009 fc80 	bl	4ff44 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   46644:	6833      	ldr	r3, [r6, #0]
   46646:	402b      	ands	r3, r5
   46648:	d10a      	bne.n	46660 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   4664a:	2206      	movs	r2, #6
   4664c:	f88d 2004 	strb.w	r2, [sp, #4]
   46650:	f88d 4006 	strb.w	r4, [sp, #6]
   46654:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   46658:	4b0c      	ldr	r3, [pc, #48]	; (4668c <usbd_ep_data_handler+0x88>)
   4665a:	a801      	add	r0, sp, #4
   4665c:	681b      	ldr	r3, [r3, #0]
   4665e:	4798      	blx	r3
}
   46660:	b002      	add	sp, #8
   46662:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   46664:	f7ff ffb8 	bl	465d8 <nrf_usbd_ep0in_dma_handler>
   46668:	e7ec      	b.n	46644 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   4666a:	6833      	ldr	r3, [r6, #0]
   4666c:	421d      	tst	r5, r3
   4666e:	d1f7      	bne.n	46660 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   46670:	2306      	movs	r3, #6
   46672:	f88d 3004 	strb.w	r3, [sp, #4]
   46676:	f88d 0006 	strb.w	r0, [sp, #6]
   4667a:	f88d 2007 	strb.w	r2, [sp, #7]
   4667e:	e7eb      	b.n	46658 <usbd_ep_data_handler+0x54>
   46680:	200068e4 	.word	0x200068e4
   46684:	20006874 	.word	0x20006874
   46688:	00053514 	.word	0x00053514
   4668c:	20006a08 	.word	0x20006a08

00046690 <ev_setup_data_handler>:
{
   46690:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   46692:	4b05      	ldr	r3, [pc, #20]	; (466a8 <ev_setup_data_handler+0x18>)
   46694:	781a      	ldrb	r2, [r3, #0]
   46696:	4610      	mov	r0, r2
   46698:	f009 fc4b 	bl	4ff32 <ep2bit>
}
   4669c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   466a0:	4601      	mov	r1, r0
   466a2:	4610      	mov	r0, r2
   466a4:	f7ff bfae 	b.w	46604 <usbd_ep_data_handler>
   466a8:	20006de7 	.word	0x20006de7

000466ac <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   466ac:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   466ae:	f7ff fe87 	bl	463c0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   466b2:	4b0c      	ldr	r3, [pc, #48]	; (466e4 <ev_dma_epout8_handler+0x38>)
   466b4:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   466b8:	2a03      	cmp	r2, #3
   466ba:	d010      	beq.n	466de <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   466bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   466c0:	b96b      	cbnz	r3, 466de <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   466c2:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   466c6:	f7ff ff77 	bl	465b8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   466ca:	2306      	movs	r3, #6
   466cc:	f88d 3004 	strb.w	r3, [sp, #4]
   466d0:	2308      	movs	r3, #8
   466d2:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   466d6:	4b04      	ldr	r3, [pc, #16]	; (466e8 <ev_dma_epout8_handler+0x3c>)
   466d8:	a801      	add	r0, sp, #4
   466da:	681b      	ldr	r3, [r3, #0]
   466dc:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   466de:	b003      	add	sp, #12
   466e0:	f85d fb04 	ldr.w	pc, [sp], #4
   466e4:	200068e8 	.word	0x200068e8
   466e8:	20006a08 	.word	0x20006a08

000466ec <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   466ec:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   466ee:	f7ff fe67 	bl	463c0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   466f2:	4b10      	ldr	r3, [pc, #64]	; (46734 <ev_dma_epin8_handler+0x48>)
   466f4:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   466f8:	2a03      	cmp	r2, #3
   466fa:	d106      	bne.n	4670a <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   466fc:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   46700:	b003      	add	sp, #12
   46702:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46706:	f7ff bf57 	b.w	465b8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   4670a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   4670e:	b96b      	cbnz	r3, 4672c <ev_dma_epin8_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46710:	f46f 7080 	mvn.w	r0, #256	; 0x100
   46714:	f7ff ff50 	bl	465b8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   46718:	2306      	movs	r3, #6
   4671a:	f88d 3004 	strb.w	r3, [sp, #4]
   4671e:	2388      	movs	r3, #136	; 0x88
   46720:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   46724:	4b04      	ldr	r3, [pc, #16]	; (46738 <ev_dma_epin8_handler+0x4c>)
   46726:	a801      	add	r0, sp, #4
   46728:	681b      	ldr	r3, [r3, #0]
   4672a:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   4672c:	b003      	add	sp, #12
   4672e:	f85d fb04 	ldr.w	pc, [sp], #4
   46732:	bf00      	nop
   46734:	200068e8 	.word	0x200068e8
   46738:	20006a08 	.word	0x20006a08

0004673c <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   4673c:	4a02      	ldr	r2, [pc, #8]	; (46748 <nrfx_usbd_uninit+0xc>)
   4673e:	2300      	movs	r3, #0
   46740:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   46742:	4a02      	ldr	r2, [pc, #8]	; (4674c <nrfx_usbd_uninit+0x10>)
   46744:	7013      	strb	r3, [r2, #0]
    return;
}
   46746:	4770      	bx	lr
   46748:	20006a08 	.word	0x20006a08
   4674c:	20006de6 	.word	0x20006de6

00046750 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   46750:	b508      	push	{r3, lr}
    p_reg->EVENTCAUSE = flags;
   46752:	4b48      	ldr	r3, [pc, #288]	; (46874 <nrfx_usbd_enable+0x124>)
   46754:	f44f 6200 	mov.w	r2, #2048	; 0x800
   46758:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   4675c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   46760:	f7ff fe0c 	bl	4637c <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   46764:	b108      	cbz	r0, 4676a <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   46766:	f7ff fe8b 	bl	46480 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   4676a:	f009 fb9c 	bl	4fea6 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   4676e:	b1c8      	cbz	r0, 467a4 <nrfx_usbd_enable+0x54>
	__asm__ volatile(
   46770:	f04f 0320 	mov.w	r3, #32
   46774:	f3ef 8011 	mrs	r0, BASEPRI
   46778:	f383 8812 	msr	BASEPRI_MAX, r3
   4677c:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   46780:	4b3d      	ldr	r3, [pc, #244]	; (46878 <nrfx_usbd_enable+0x128>)
   46782:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   46786:	22c0      	movs	r2, #192	; 0xc0
   46788:	2900      	cmp	r1, #0
   4678a:	d16a      	bne.n	46862 <nrfx_usbd_enable+0x112>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   4678c:	f249 3175 	movw	r1, #37749	; 0x9375
   46790:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   46794:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46798:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
   4679c:	f380 8811 	msr	BASEPRI, r0
   467a0:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   467a4:	4b33      	ldr	r3, [pc, #204]	; (46874 <nrfx_usbd_enable+0x124>)
   467a6:	2201      	movs	r2, #1
   467a8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   467ac:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   467b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   467b4:	0512      	lsls	r2, r2, #20
   467b6:	d5fb      	bpl.n	467b0 <nrfx_usbd_enable+0x60>
    p_reg->EVENTCAUSE = flags;
   467b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   467bc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   467c0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   467c4:	f009 fb6f 	bl	4fea6 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   467c8:	b1c0      	cbz	r0, 467fc <nrfx_usbd_enable+0xac>
	__asm__ volatile(
   467ca:	f04f 0320 	mov.w	r3, #32
   467ce:	f3ef 8011 	mrs	r0, BASEPRI
   467d2:	f383 8812 	msr	BASEPRI_MAX, r3
   467d6:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   467da:	4b27      	ldr	r3, [pc, #156]	; (46878 <nrfx_usbd_enable+0x128>)
   467dc:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   467e0:	2900      	cmp	r1, #0
   467e2:	d141      	bne.n	46868 <nrfx_usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   467e4:	f249 3275 	movw	r2, #37749	; 0x9375
   467e8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   467ec:	f8c3 1c14 	str.w	r1, [r3, #3092]	; 0xc14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   467f0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
   467f4:	f380 8811 	msr	BASEPRI, r0
   467f8:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   467fc:	f7ff fdbe 	bl	4637c <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   46800:	b130      	cbz	r0, 46810 <nrfx_usbd_enable+0xc0>
        usbd_errata_187_211_end();
   46802:	f7ff fe5d 	bl	464c0 <usbd_errata_187_211_end>
   46806:	f7ff fdb9 	bl	4637c <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   4680a:	b108      	cbz	r0, 46810 <nrfx_usbd_enable+0xc0>
#endif
    {
        usbd_errata_187_211_begin();
   4680c:	f7ff fe38 	bl	46480 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   46810:	f009 fb49 	bl	4fea6 <nrf52_errata_166>
   46814:	4b17      	ldr	r3, [pc, #92]	; (46874 <nrfx_usbd_enable+0x124>)
    }

    if (nrfx_usbd_errata_166())
   46816:	b150      	cbz	r0, 4682e <nrfx_usbd_enable+0xde>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   46818:	f240 72e3 	movw	r2, #2019	; 0x7e3
   4681c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   46820:	2240      	movs	r2, #64	; 0x40
   46822:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  __ASM volatile ("isb 0xF":::"memory");
   46826:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   4682a:	f3bf 8f4f 	dsb	sy
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   4682e:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   46830:	2280      	movs	r2, #128	; 0x80
   46832:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   46836:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   4683a:	4b10      	ldr	r3, [pc, #64]	; (4687c <nrfx_usbd_enable+0x12c>)
   4683c:	f240 12ff 	movw	r2, #511	; 0x1ff
   46840:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   46842:	4b0f      	ldr	r3, [pc, #60]	; (46880 <nrfx_usbd_enable+0x130>)
   46844:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   46846:	f7ff fdbb 	bl	463c0 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   4684a:	4b0e      	ldr	r3, [pc, #56]	; (46884 <nrfx_usbd_enable+0x134>)
   4684c:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   4684e:	4b0e      	ldr	r3, [pc, #56]	; (46888 <nrfx_usbd_enable+0x138>)
   46850:	2202      	movs	r2, #2
   46852:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   46854:	f7ff fd92 	bl	4637c <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   46858:	b150      	cbz	r0, 46870 <nrfx_usbd_enable+0x120>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   4685a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
   4685e:	f7ff be2f 	b.w	464c0 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   46862:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   46866:	e799      	b.n	4679c <nrfx_usbd_enable+0x4c>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   46868:	2200      	movs	r2, #0
   4686a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   4686e:	e7c1      	b.n	467f4 <nrfx_usbd_enable+0xa4>
}
   46870:	bd08      	pop	{r3, pc}
   46872:	bf00      	nop
   46874:	40027000 	.word	0x40027000
   46878:	4006e000 	.word	0x4006e000
   4687c:	200068e4 	.word	0x200068e4
   46880:	20006874 	.word	0x20006874
   46884:	20006de7 	.word	0x20006de7
   46888:	20006de6 	.word	0x20006de6

0004688c <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   4688c:	4b0a      	ldr	r3, [pc, #40]	; (468b8 <nrfx_usbd_start+0x2c>)
   4688e:	2200      	movs	r2, #0
{
   46890:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   46892:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   46894:	4a09      	ldr	r2, [pc, #36]	; (468bc <nrfx_usbd_start+0x30>)
   46896:	4b0a      	ldr	r3, [pc, #40]	; (468c0 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   46898:	4c0a      	ldr	r4, [pc, #40]	; (468c4 <nrfx_usbd_start+0x38>)
   4689a:	2800      	cmp	r0, #0
   4689c:	bf18      	it	ne
   4689e:	4613      	movne	r3, r2
   468a0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   468a4:	2027      	movs	r0, #39	; 0x27
   468a6:	f7e5 fef1 	bl	2c68c <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   468aa:	2301      	movs	r3, #1
   468ac:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   468b0:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   468b4:	bd10      	pop	{r4, pc}
   468b6:	bf00      	nop
   468b8:	20006de4 	.word	0x20006de4
   468bc:	01e01407 	.word	0x01e01407
   468c0:	01c01407 	.word	0x01c01407
   468c4:	40027000 	.word	0x40027000

000468c8 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   468c8:	4b03      	ldr	r3, [pc, #12]	; (468d8 <nrfx_usbd_is_enabled+0x10>)
   468ca:	7818      	ldrb	r0, [r3, #0]
}
   468cc:	2801      	cmp	r0, #1
   468ce:	bf94      	ite	ls
   468d0:	2000      	movls	r0, #0
   468d2:	2001      	movhi	r0, #1
   468d4:	4770      	bx	lr
   468d6:	bf00      	nop
   468d8:	20006de6 	.word	0x20006de6

000468dc <nrfx_usbd_wakeup_req>:

    return suspended;
}

bool nrfx_usbd_wakeup_req(void)
{
   468dc:	b510      	push	{r4, lr}
	__asm__ volatile(
   468de:	f04f 0320 	mov.w	r3, #32
   468e2:	f3ef 8411 	mrs	r4, BASEPRI
   468e6:	f383 8812 	msr	BASEPRI_MAX, r3
   468ea:	f3bf 8f6f 	isb	sy
    bool started = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend && nrf_usbd_lowpower_check(NRF_USBD))
   468ee:	4b15      	ldr	r3, [pc, #84]	; (46944 <nrfx_usbd_wakeup_req+0x68>)
   468f0:	781b      	ldrb	r3, [r3, #0]
   468f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   468f6:	b1cb      	cbz	r3, 4692c <nrfx_usbd_wakeup_req+0x50>
    return (p_reg->LOWPOWER != (USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos));
   468f8:	4b13      	ldr	r3, [pc, #76]	; (46948 <nrfx_usbd_wakeup_req+0x6c>)
   468fa:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
   468fe:	b1f1      	cbz	r1, 4693e <nrfx_usbd_wakeup_req+0x62>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   46900:	2100      	movs	r1, #0
   46902:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   46906:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   4690a:	f009 facc 	bl	4fea6 <nrf52_errata_166>
    {
        nrf_usbd_lowpower_disable(NRF_USBD);
        started = true;

        if (nrfx_usbd_errata_171())
   4690e:	b168      	cbz	r0, 4692c <nrfx_usbd_wakeup_req+0x50>
        {
            if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   46910:	4b0e      	ldr	r3, [pc, #56]	; (4694c <nrfx_usbd_wakeup_req+0x70>)
   46912:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
   46916:	22c0      	movs	r2, #192	; 0xc0
   46918:	b971      	cbnz	r1, 46938 <nrfx_usbd_wakeup_req+0x5c>
            {
                *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   4691a:	f249 3175 	movw	r1, #37749	; 0x9375
   4691e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
                *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   46922:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
                *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   46926:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        started = true;
   4692a:	4602      	mov	r2, r0
	__asm__ volatile(
   4692c:	f384 8811 	msr	BASEPRI, r4
   46930:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return started;
}
   46934:	4610      	mov	r0, r2
   46936:	bd10      	pop	{r4, pc}
                *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   46938:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
   4693c:	e7f5      	b.n	4692a <nrfx_usbd_wakeup_req+0x4e>
    bool started = false;
   4693e:	460a      	mov	r2, r1
   46940:	e7f4      	b.n	4692c <nrfx_usbd_wakeup_req+0x50>
   46942:	bf00      	nop
   46944:	20006de4 	.word	0x20006de4
   46948:	40027000 	.word	0x40027000
   4694c:	4006e000 	.word	0x4006e000

00046950 <nrfx_usbd_init>:
{
   46950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   46954:	4b1d      	ldr	r3, [pc, #116]	; (469cc <nrfx_usbd_init+0x7c>)
   46956:	781c      	ldrb	r4, [r3, #0]
   46958:	2c00      	cmp	r4, #0
   4695a:	d135      	bne.n	469c8 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
   4695c:	4a1c      	ldr	r2, [pc, #112]	; (469d0 <nrfx_usbd_init+0x80>)
   4695e:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   46960:	2201      	movs	r2, #1
   46962:	701a      	strb	r2, [r3, #0]
   46964:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46966:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   4696a:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   4696c:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46970:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   46974:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46976:	bf14      	ite	ne
   46978:	4641      	movne	r1, r8
   4697a:	2140      	moveq	r1, #64	; 0x40
   4697c:	4630      	mov	r0, r6
   4697e:	f009 fb11 	bl	4ffa4 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   46982:	4630      	mov	r0, r6
   46984:	f7ff fd0e 	bl	463a4 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   46988:	3501      	adds	r5, #1
   4698a:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
   4698c:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
   4698e:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
   46990:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   46992:	d1eb      	bne.n	4696c <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46994:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
   46996:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   46998:	f240 16ff 	movw	r6, #511	; 0x1ff
   4699c:	4620      	mov	r0, r4
   4699e:	f009 fb01 	bl	4ffa4 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   469a2:	4620      	mov	r0, r4
   469a4:	f7ff fcfe 	bl	463a4 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   469a8:	3401      	adds	r4, #1
   469aa:	b2e4      	uxtb	r4, r4
   469ac:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   469ae:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   469b0:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   469b2:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   469b4:	d102      	bne.n	469bc <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
   469b6:	4807      	ldr	r0, [pc, #28]	; (469d4 <nrfx_usbd_init+0x84>)
}
   469b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   469bc:	f014 0f08 	tst.w	r4, #8
   469c0:	bf14      	ite	ne
   469c2:	4631      	movne	r1, r6
   469c4:	2140      	moveq	r1, #64	; 0x40
   469c6:	e7e9      	b.n	4699c <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
   469c8:	4803      	ldr	r0, [pc, #12]	; (469d8 <nrfx_usbd_init+0x88>)
   469ca:	e7f5      	b.n	469b8 <nrfx_usbd_init+0x68>
   469cc:	20006de6 	.word	0x20006de6
   469d0:	20006a08 	.word	0x20006a08
   469d4:	0bad0000 	.word	0x0bad0000
   469d8:	0bad0005 	.word	0x0bad0005

000469dc <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   469dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   469e0:	4605      	mov	r5, r0
	__asm__ volatile(
   469e2:	f04f 0320 	mov.w	r3, #32
   469e6:	f3ef 8811 	mrs	r8, BASEPRI
   469ea:	f383 8812 	msr	BASEPRI_MAX, r3
   469ee:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   469f2:	f010 040f 	ands.w	r4, r0, #15
   469f6:	d103      	bne.n	46a00 <nrfx_usbd_ep_transfer+0x24>
   469f8:	4b27      	ldr	r3, [pc, #156]	; (46a98 <nrfx_usbd_ep_transfer+0xbc>)
   469fa:	781b      	ldrb	r3, [r3, #0]
   469fc:	4283      	cmp	r3, r0
   469fe:	d146      	bne.n	46a8e <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   46a00:	4b26      	ldr	r3, [pc, #152]	; (46a9c <nrfx_usbd_ep_transfer+0xc0>)
   46a02:	4e27      	ldr	r6, [pc, #156]	; (46aa0 <nrfx_usbd_ep_transfer+0xc4>)
   46a04:	681a      	ldr	r2, [r3, #0]
   46a06:	6837      	ldr	r7, [r6, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
   46a08:	4628      	mov	r0, r5
   46a0a:	f009 fa92 	bl	4ff32 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   46a0e:	43d2      	mvns	r2, r2
   46a10:	b292      	uxth	r2, r2
   46a12:	f04f 0901 	mov.w	r9, #1
   46a16:	433a      	orrs	r2, r7
   46a18:	fa09 f900 	lsl.w	r9, r9, r0
   46a1c:	ea12 0f09 	tst.w	r2, r9
   46a20:	d137      	bne.n	46a92 <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   46a22:	4628      	mov	r0, r5
   46a24:	f7ff fcbe 	bl	463a4 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   46a28:	220c      	movs	r2, #12
   46a2a:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
   46a2c:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   46a2e:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
   46a30:	d529      	bpl.n	46a86 <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   46a32:	4a1c      	ldr	r2, [pc, #112]	; (46aa4 <nrfx_usbd_ep_transfer+0xc8>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   46a34:	6808      	ldr	r0, [r1, #0]
   46a36:	4414      	add	r4, r2
   46a38:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   46a3c:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   46a3e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   46a42:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   46a46:	d119      	bne.n	46a7c <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   46a48:	b9b2      	cbnz	r2, 46a78 <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   46a4a:	4a17      	ldr	r2, [pc, #92]	; (46aa8 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   46a4c:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
   46a4e:	c907      	ldmia	r1, {r0, r1, r2}
   46a50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
   46a54:	2200      	movs	r2, #0
   46a56:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   46a58:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
   46a5a:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   46a5c:	4b13      	ldr	r3, [pc, #76]	; (46aac <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   46a5e:	4814      	ldr	r0, [pc, #80]	; (46ab0 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   46a60:	ea49 0707 	orr.w	r7, r9, r7
   46a64:	2280      	movs	r2, #128	; 0x80
   46a66:	6037      	str	r7, [r6, #0]
   46a68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   46a6c:	f388 8811 	msr	BASEPRI, r8
   46a70:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   46a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   46a78:	4a0e      	ldr	r2, [pc, #56]	; (46ab4 <nrfx_usbd_ep_transfer+0xd8>)
   46a7a:	e7e7      	b.n	46a4c <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   46a7c:	b90a      	cbnz	r2, 46a82 <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   46a7e:	4a0e      	ldr	r2, [pc, #56]	; (46ab8 <nrfx_usbd_ep_transfer+0xdc>)
   46a80:	e7e4      	b.n	46a4c <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   46a82:	4a0e      	ldr	r2, [pc, #56]	; (46abc <nrfx_usbd_ep_transfer+0xe0>)
   46a84:	e7e2      	b.n	46a4c <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   46a86:	4a0e      	ldr	r2, [pc, #56]	; (46ac0 <nrfx_usbd_ep_transfer+0xe4>)
   46a88:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   46a8a:	4a0e      	ldr	r2, [pc, #56]	; (46ac4 <nrfx_usbd_ep_transfer+0xe8>)
   46a8c:	e7de      	b.n	46a4c <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
   46a8e:	480e      	ldr	r0, [pc, #56]	; (46ac8 <nrfx_usbd_ep_transfer+0xec>)
   46a90:	e7ec      	b.n	46a6c <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
   46a92:	480e      	ldr	r0, [pc, #56]	; (46acc <nrfx_usbd_ep_transfer+0xf0>)
   46a94:	e7ea      	b.n	46a6c <nrfx_usbd_ep_transfer+0x90>
   46a96:	bf00      	nop
   46a98:	20006de7 	.word	0x20006de7
   46a9c:	200068e4 	.word	0x200068e4
   46aa0:	20006874 	.word	0x20006874
   46aa4:	20006878 	.word	0x20006878
   46aa8:	0004fee7 	.word	0x0004fee7
   46aac:	e000e100 	.word	0xe000e100
   46ab0:	0bad0000 	.word	0x0bad0000
   46ab4:	0004ff09 	.word	0x0004ff09
   46ab8:	00046501 	.word	0x00046501
   46abc:	00046539 	.word	0x00046539
   46ac0:	20006808 	.word	0x20006808
   46ac4:	0004feb9 	.word	0x0004feb9
   46ac8:	0bad000a 	.word	0x0bad000a
   46acc:	0bad000b 	.word	0x0bad000b

00046ad0 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   46ad0:	f010 0f08 	tst.w	r0, #8
   46ad4:	4b07      	ldr	r3, [pc, #28]	; (46af4 <nrfx_usbd_epout_size_get+0x24>)
   46ad6:	d006      	beq.n	46ae6 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   46ad8:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
   46adc:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   46ae0:	bf18      	it	ne
   46ae2:	2000      	movne	r0, #0
   46ae4:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   46ae6:	f000 000f 	and.w	r0, r0, #15
   46aea:	f500 7094 	add.w	r0, r0, #296	; 0x128
   46aee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   46af2:	4770      	bx	lr
   46af4:	40027000 	.word	0x40027000

00046af8 <usbd_dmareq_process>:
{
   46af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   46afc:	f8df 815c 	ldr.w	r8, [pc, #348]	; 46c5c <usbd_dmareq_process+0x164>
   46b00:	f898 3000 	ldrb.w	r3, [r8]
{
   46b04:	b085      	sub	sp, #20
    if (!m_dma_pending)
   46b06:	2b00      	cmp	r3, #0
   46b08:	d16b      	bne.n	46be2 <usbd_dmareq_process+0xea>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   46b0a:	f8df 9154 	ldr.w	r9, [pc, #340]	; 46c60 <usbd_dmareq_process+0x168>
   46b0e:	4e55      	ldr	r6, [pc, #340]	; (46c64 <usbd_dmareq_process+0x16c>)
   46b10:	f8d9 1000 	ldr.w	r1, [r9]
   46b14:	6833      	ldr	r3, [r6, #0]
   46b16:	4019      	ands	r1, r3
   46b18:	d063      	beq.n	46be2 <usbd_dmareq_process+0xea>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   46b1a:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
   46b1e:	bf14      	ite	ne
   46b20:	fa93 f1a3 	rbitne	r1, r3
   46b24:	fa91 f1a1 	rbiteq	r1, r1
   46b28:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   46b2c:	290f      	cmp	r1, #15
   46b2e:	bf86      	itte	hi
   46b30:	f1a1 0410 	subhi.w	r4, r1, #16
   46b34:	b2e4      	uxtbhi	r4, r4
   46b36:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
   46b3a:	4620      	mov	r0, r4
   46b3c:	f7ff fc32 	bl	463a4 <ep_state_access>
            if (NRF_USBD_EPIN_CHECK(ep))
   46b40:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   46b44:	f04f 0b01 	mov.w	fp, #1
   46b48:	fa0b fb01 	lsl.w	fp, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
   46b4c:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
   46b50:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   46b52:	ea6f 0b0b 	mvn.w	fp, fp
            if (NRF_USBD_EPIN_CHECK(ep))
   46b56:	da47      	bge.n	46be8 <usbd_dmareq_process+0xf0>
                continue_transfer = p_state->handler.feeder(
   46b58:	6803      	ldr	r3, [r0, #0]
   46b5a:	8982      	ldrh	r2, [r0, #12]
   46b5c:	6841      	ldr	r1, [r0, #4]
   46b5e:	a802      	add	r0, sp, #8
   46b60:	4798      	blx	r3
                if (!continue_transfer)
   46b62:	b900      	cbnz	r0, 46b66 <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
   46b64:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   46b66:	f009 f99e 	bl	4fea6 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   46b6a:	b118      	cbz	r0, 46b74 <usbd_dmareq_process+0x7c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   46b6c:	4b3e      	ldr	r3, [pc, #248]	; (46c68 <usbd_dmareq_process+0x170>)
   46b6e:	2282      	movs	r2, #130	; 0x82
   46b70:	f8c3 2c1c 	str.w	r2, [r3, #3100]	; 0xc1c
    m_dma_pending = true;
   46b74:	2301      	movs	r3, #1
   46b76:	f888 3000 	strb.w	r3, [r8]
            m_ep_ready &= ~(1U << pos);
   46b7a:	6833      	ldr	r3, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   46b7c:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   46b7e:	9902      	ldr	r1, [sp, #8]
            m_ep_ready &= ~(1U << pos);
   46b80:	ea03 030b 	and.w	r3, r3, fp
   46b84:	6033      	str	r3, [r6, #0]
            p_state->transfer_cnt += transfer.size;
   46b86:	68ab      	ldr	r3, [r5, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
   46b88:	f1ba 0f00 	cmp.w	sl, #0
   46b8c:	4413      	add	r3, r2
   46b8e:	60ab      	str	r3, [r5, #8]
   46b90:	f004 0008 	and.w	r0, r4, #8
   46b94:	4b34      	ldr	r3, [pc, #208]	; (46c68 <usbd_dmareq_process+0x170>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   46b96:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   46b9a:	da4f      	bge.n	46c3c <usbd_dmareq_process+0x144>
        if (NRF_USBD_EPISO_CHECK(ep))
   46b9c:	2800      	cmp	r0, #0
   46b9e:	d045      	beq.n	46c2c <usbd_dmareq_process+0x134>
            p_reg->ISOIN.PTR    = ptr;
   46ba0:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   46ba4:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   46ba8:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   46baa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   46bae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   46bb2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   46bb6:	2201      	movs	r2, #1
   46bb8:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   46bba:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   46bbc:	4a2b      	ldr	r2, [pc, #172]	; (46c6c <usbd_dmareq_process+0x174>)
   46bbe:	4b2c      	ldr	r3, [pc, #176]	; (46c70 <usbd_dmareq_process+0x178>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   46bc0:	4929      	ldr	r1, [pc, #164]	; (46c68 <usbd_dmareq_process+0x170>)
   46bc2:	ea13 032a 	ands.w	r3, r3, sl, asr #32
   46bc6:	bf38      	it	cc
   46bc8:	4613      	movcc	r3, r2
   46bca:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   46bce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   46bd2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   46bd6:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   46bd8:	b91a      	cbnz	r2, 46be2 <usbd_dmareq_process+0xea>
   46bda:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
   46bde:	2a00      	cmp	r2, #0
   46be0:	d0f9      	beq.n	46bd6 <usbd_dmareq_process+0xde>
}
   46be2:	b005      	add	sp, #20
   46be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   46be8:	4620      	mov	r0, r4
   46bea:	f7ff ff71 	bl	46ad0 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   46bee:	89aa      	ldrh	r2, [r5, #12]
   46bf0:	6869      	ldr	r1, [r5, #4]
   46bf2:	f8d5 c000 	ldr.w	ip, [r5]
   46bf6:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   46bf8:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
   46bfa:	a802      	add	r0, sp, #8
   46bfc:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
   46bfe:	9a02      	ldr	r2, [sp, #8]
   46c00:	2a00      	cmp	r2, #0
   46c02:	d0ae      	beq.n	46b62 <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
   46c04:	9a03      	ldr	r2, [sp, #12]
   46c06:	4297      	cmp	r7, r2
   46c08:	d9ab      	bls.n	46b62 <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   46c0a:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   46c0c:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   46c0e:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   46c10:	f7ff fcd2 	bl	465b8 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   46c14:	2306      	movs	r3, #6
   46c16:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
   46c1a:	4b16      	ldr	r3, [pc, #88]	; (46c74 <usbd_dmareq_process+0x17c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   46c1c:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
   46c20:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   46c22:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
   46c26:	a801      	add	r0, sp, #4
   46c28:	4798      	blx	r3
                    continue;
   46c2a:	e771      	b.n	46b10 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
   46c2c:	2014      	movs	r0, #20
   46c2e:	fb00 3304 	mla	r3, r0, r4, r3
   46c32:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   46c36:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   46c3a:	e7b5      	b.n	46ba8 <usbd_dmareq_process+0xb0>
        if (NRF_USBD_EPISO_CHECK(ep))
   46c3c:	b128      	cbz	r0, 46c4a <usbd_dmareq_process+0x152>
            p_reg->ISOOUT.PTR    = ptr;
   46c3e:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   46c42:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   46c46:	2328      	movs	r3, #40	; 0x28
   46c48:	e7af      	b.n	46baa <usbd_dmareq_process+0xb2>
            p_reg->EPOUT[epnr].PTR    = ptr;
   46c4a:	2014      	movs	r0, #20
   46c4c:	fb00 3304 	mla	r3, r0, r4, r3
   46c50:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   46c54:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   46c58:	e7f5      	b.n	46c46 <usbd_dmareq_process+0x14e>
   46c5a:	bf00      	nop
   46c5c:	20006de5 	.word	0x20006de5
   46c60:	20006874 	.word	0x20006874
   46c64:	200068e4 	.word	0x200068e4
   46c68:	40027000 	.word	0x40027000
   46c6c:	00053526 	.word	0x00053526
   46c70:	00053514 	.word	0x00053514
   46c74:	20006a08 	.word	0x20006a08

00046c78 <ev_epdata_handler>:
{
   46c78:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   46c7a:	4b0f      	ldr	r3, [pc, #60]	; (46cb8 <ev_epdata_handler+0x40>)
   46c7c:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   46c80:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   46c84:	2501      	movs	r5, #1
    while (dataepstatus)
   46c86:	b91c      	cbnz	r4, 46c90 <ev_epdata_handler+0x18>
}
   46c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   46c8c:	f7ff bf34 	b.w	46af8 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   46c90:	fa94 f3a4 	rbit	r3, r4
   46c94:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   46c98:	2b0f      	cmp	r3, #15
   46c9a:	bfc8      	it	gt
   46c9c:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   46ca0:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   46ca2:	bfd4      	ite	le
   46ca4:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
   46ca8:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   46caa:	fa05 f303 	lsl.w	r3, r5, r3
   46cae:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   46cb2:	f7ff fca7 	bl	46604 <usbd_ep_data_handler>
   46cb6:	e7e6      	b.n	46c86 <ev_epdata_handler+0xe>
   46cb8:	40027000 	.word	0x40027000

00046cbc <nrf_usbd_epout_dma_handler>:
{
   46cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46cbe:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   46cc0:	f7ff fb7e 	bl	463c0 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   46cc4:	4620      	mov	r0, r4
   46cc6:	f7ff fb6d 	bl	463a4 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   46cca:	7b83      	ldrb	r3, [r0, #14]
   46ccc:	2b03      	cmp	r3, #3
   46cce:	d10d      	bne.n	46cec <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46cd0:	4620      	mov	r0, r4
   46cd2:	f009 f92e 	bl	4ff32 <ep2bit>
   46cd6:	2301      	movs	r3, #1
   46cd8:	fa03 f000 	lsl.w	r0, r3, r0
   46cdc:	43c0      	mvns	r0, r0
   46cde:	f7ff fc6b 	bl	465b8 <atomic_and.constprop.0.isra.0>
}
   46ce2:	b003      	add	sp, #12
   46ce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
   46ce8:	f7ff bf06 	b.w	46af8 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
   46cec:	6805      	ldr	r5, [r0, #0]
   46cee:	2d00      	cmp	r5, #0
   46cf0:	d1f7      	bne.n	46ce2 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46cf2:	4620      	mov	r0, r4
   46cf4:	f009 f91d 	bl	4ff32 <ep2bit>
   46cf8:	2301      	movs	r3, #1
   46cfa:	fa03 f000 	lsl.w	r0, r3, r0
   46cfe:	43c0      	mvns	r0, r0
   46d00:	f7ff fc5a 	bl	465b8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   46d04:	2306      	movs	r3, #6
   46d06:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   46d0a:	4b04      	ldr	r3, [pc, #16]	; (46d1c <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   46d0c:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
   46d10:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   46d12:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   46d16:	a801      	add	r0, sp, #4
   46d18:	4798      	blx	r3
   46d1a:	e7e2      	b.n	46ce2 <nrf_usbd_epout_dma_handler+0x26>
   46d1c:	20006a08 	.word	0x20006a08

00046d20 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   46d20:	4b02      	ldr	r3, [pc, #8]	; (46d2c <nrfx_usbd_ep_stall+0xc>)
   46d22:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   46d26:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   46d2a:	4770      	bx	lr
   46d2c:	40027000 	.word	0x40027000

00046d30 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   46d30:	0702      	lsls	r2, r0, #28
   46d32:	d413      	bmi.n	46d5c <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
   46d34:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   46d38:	f010 0f80 	tst.w	r0, #128	; 0x80
   46d3c:	4a08      	ldr	r2, [pc, #32]	; (46d60 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   46d3e:	bf0b      	itete	eq
   46d40:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   46d44:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   46d48:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   46d4c:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   46d50:	bf08      	it	eq
   46d52:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   46d54:	1e43      	subs	r3, r0, #1
   46d56:	4258      	negs	r0, r3
   46d58:	4158      	adcs	r0, r3
   46d5a:	4770      	bx	lr
        return false;
   46d5c:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   46d5e:	4770      	bx	lr
   46d60:	40027000 	.word	0x40027000

00046d64 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   46d64:	4b04      	ldr	r3, [pc, #16]	; (46d78 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   46d66:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   46d6a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   46d6e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   46d72:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   46d76:	4770      	bx	lr
   46d78:	40027000 	.word	0x40027000

00046d7c <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   46d7c:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   46d7e:	2208      	movs	r2, #8
   46d80:	2100      	movs	r1, #0
{
   46d82:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   46d84:	f004 fd8c 	bl	4b8a0 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   46d88:	4b0e      	ldr	r3, [pc, #56]	; (46dc4 <nrfx_usbd_setup_get+0x48>)
   46d8a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   46d8e:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   46d90:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   46d94:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   46d96:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   46d9a:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   46d9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   46da2:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   46da4:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   46da8:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   46dac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   46db0:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   46db2:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   46db6:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   46dba:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   46dbe:	80e3      	strh	r3, [r4, #6]
}
   46dc0:	bd10      	pop	{r4, pc}
   46dc2:	bf00      	nop
   46dc4:	40027000 	.word	0x40027000

00046dc8 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   46dc8:	4b02      	ldr	r3, [pc, #8]	; (46dd4 <nrfx_usbd_setup_data_clear+0xc>)
   46dca:	2201      	movs	r2, #1
   46dcc:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   46dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   46dd0:	4770      	bx	lr
   46dd2:	bf00      	nop
   46dd4:	40027000 	.word	0x40027000

00046dd8 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   46dd8:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   46dda:	f7ff faf1 	bl	463c0 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   46dde:	4b10      	ldr	r3, [pc, #64]	; (46e20 <ev_dma_epout0_handler+0x48>)
   46de0:	7b9a      	ldrb	r2, [r3, #14]
   46de2:	2a03      	cmp	r2, #3
   46de4:	d106      	bne.n	46df4 <ev_dma_epout0_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46de6:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   46dea:	b002      	add	sp, #8
   46dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46df0:	f7ff bbe2 	b.w	465b8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
   46df4:	681c      	ldr	r4, [r3, #0]
   46df6:	b974      	cbnz	r4, 46e16 <ev_dma_epout0_handler+0x3e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   46df8:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   46dfc:	f7ff fbdc 	bl	465b8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   46e00:	2306      	movs	r3, #6
   46e02:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   46e06:	4b07      	ldr	r3, [pc, #28]	; (46e24 <ev_dma_epout0_handler+0x4c>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   46e08:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   46e0c:	681b      	ldr	r3, [r3, #0]
   46e0e:	a801      	add	r0, sp, #4
   46e10:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   46e12:	b002      	add	sp, #8
   46e14:	bd10      	pop	{r4, pc}
   46e16:	b002      	add	sp, #8
   46e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
   46e1c:	f7ff bfd4 	b.w	46dc8 <nrfx_usbd_setup_data_clear>
   46e20:	200068e8 	.word	0x200068e8
   46e24:	20006a08 	.word	0x20006a08

00046e28 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   46e28:	4b02      	ldr	r3, [pc, #8]	; (46e34 <nrfx_usbd_setup_clear+0xc>)
   46e2a:	2201      	movs	r2, #1
   46e2c:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   46e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   46e30:	4770      	bx	lr
   46e32:	bf00      	nop
   46e34:	40027000 	.word	0x40027000

00046e38 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   46e38:	4b02      	ldr	r3, [pc, #8]	; (46e44 <nrfx_usbd_setup_stall+0xc>)
   46e3a:	2201      	movs	r2, #1
   46e3c:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   46e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   46e40:	4770      	bx	lr
   46e42:	bf00      	nop
   46e44:	40027000 	.word	0x40027000

00046e48 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   46e48:	4b01      	ldr	r3, [pc, #4]	; (46e50 <nrfx_usbd_last_setup_dir_get+0x8>)
   46e4a:	7818      	ldrb	r0, [r3, #0]
   46e4c:	4770      	bx	lr
   46e4e:	bf00      	nop
   46e50:	20006de7 	.word	0x20006de7

00046e54 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   46e54:	b510      	push	{r4, lr}
   46e56:	4602      	mov	r2, r0
	__asm__ volatile(
   46e58:	f04f 0320 	mov.w	r3, #32
   46e5c:	f3ef 8411 	mrs	r4, BASEPRI
   46e60:	f383 8812 	msr	BASEPRI_MAX, r3
   46e64:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   46e68:	f009 f863 	bl	4ff32 <ep2bit>
   46e6c:	490d      	ldr	r1, [pc, #52]	; (46ea4 <nrfx_usbd_transfer_out_drop+0x50>)
   46e6e:	2301      	movs	r3, #1
   46e70:	fa03 f000 	lsl.w	r0, r3, r0
   46e74:	680b      	ldr	r3, [r1, #0]
   46e76:	ea23 0300 	bic.w	r3, r3, r0
   46e7a:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   46e7c:	f012 0108 	ands.w	r1, r2, #8
   46e80:	d10a      	bne.n	46e98 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   46e82:	f002 030f 	and.w	r3, r2, #15
   46e86:	009b      	lsls	r3, r3, #2
   46e88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   46e8c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   46e90:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   46e94:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   46e98:	f384 8811 	msr	BASEPRI, r4
   46e9c:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   46ea0:	bd10      	pop	{r4, pc}
   46ea2:	bf00      	nop
   46ea4:	200068e4 	.word	0x200068e4

00046ea8 <usbd_ep_abort>:
{
   46ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   46eaa:	4601      	mov	r1, r0
	__asm__ volatile(
   46eac:	f04f 0320 	mov.w	r3, #32
   46eb0:	f3ef 8511 	mrs	r5, BASEPRI
   46eb4:	f383 8812 	msr	BASEPRI_MAX, r3
   46eb8:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   46ebc:	f7ff fa72 	bl	463a4 <ep_state_access>
   46ec0:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   46ec2:	4608      	mov	r0, r1
   46ec4:	f009 f835 	bl	4ff32 <ep2bit>
   46ec8:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
   46eca:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   46ece:	fa02 f200 	lsl.w	r2, r2, r0
   46ed2:	482e      	ldr	r0, [pc, #184]	; (46f8c <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
   46ed4:	d118      	bne.n	46f08 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   46ed6:	6803      	ldr	r3, [r0, #0]
   46ed8:	ea32 0403 	bics.w	r4, r2, r3
   46edc:	d00a      	beq.n	46ef4 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   46ede:	4608      	mov	r0, r1
   46ee0:	f7ff ffb8 	bl	46e54 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   46ee4:	2303      	movs	r3, #3
   46ee6:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   46ee8:	f385 8811 	msr	BASEPRI, r5
   46eec:	f3bf 8f6f 	isb	sy
}
   46ef0:	b003      	add	sp, #12
   46ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_ready &= ~(1U << ep2bit(ep));
   46ef4:	4926      	ldr	r1, [pc, #152]	; (46f90 <usbd_ep_abort+0xe8>)
            p_state->handler.consumer = NULL;
   46ef6:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   46ef8:	ea23 0302 	bic.w	r3, r3, r2
   46efc:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   46efe:	680b      	ldr	r3, [r1, #0]
   46f00:	ea23 0302 	bic.w	r3, r3, r2
   46f04:	600b      	str	r3, [r1, #0]
   46f06:	e7ed      	b.n	46ee4 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   46f08:	070b      	lsls	r3, r1, #28
   46f0a:	d415      	bmi.n	46f38 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
   46f0c:	2980      	cmp	r1, #128	; 0x80
   46f0e:	4b21      	ldr	r3, [pc, #132]	; (46f94 <usbd_ep_abort+0xec>)
   46f10:	d02f      	beq.n	46f72 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   46f12:	f001 040f 	and.w	r4, r1, #15
   46f16:	f204 34da 	addw	r4, r4, #986	; 0x3da
   46f1a:	0064      	lsls	r4, r4, #1
   46f1c:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   46f20:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   46f24:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   46f28:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   46f2a:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   46f2e:	433c      	orrs	r4, r7
   46f30:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   46f34:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   46f38:	4f15      	ldr	r7, [pc, #84]	; (46f90 <usbd_ep_abort+0xe8>)
   46f3a:	6804      	ldr	r4, [r0, #0]
   46f3c:	683b      	ldr	r3, [r7, #0]
   46f3e:	ea64 0c03 	orn	ip, r4, r3
   46f42:	ea1c 0f02 	tst.w	ip, r2
   46f46:	d0cf      	beq.n	46ee8 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
   46f48:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   46f4a:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
   46f4e:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
   46f50:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   46f52:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
   46f54:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   46f56:	2303      	movs	r3, #3
   46f58:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   46f5a:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   46f5e:	4b0e      	ldr	r3, [pc, #56]	; (46f98 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   46f60:	f88d 1006 	strb.w	r1, [sp, #6]
   46f64:	2206      	movs	r2, #6
            m_event_handler(&evt);
   46f66:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   46f68:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
   46f6c:	a801      	add	r0, sp, #4
   46f6e:	4798      	blx	r3
   46f70:	e7ba      	b.n	46ee8 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   46f72:	f240 74b4 	movw	r4, #1972	; 0x7b4
   46f76:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   46f7a:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   46f7e:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   46f82:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   46f84:	f044 0404 	orr.w	r4, r4, #4
   46f88:	e7d1      	b.n	46f2e <usbd_ep_abort+0x86>
   46f8a:	bf00      	nop
   46f8c:	20006874 	.word	0x20006874
   46f90:	200068e4 	.word	0x200068e4
   46f94:	40027000 	.word	0x40027000
   46f98:	20006a08 	.word	0x20006a08

00046f9c <ev_setup_handler>:
{
   46f9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   46f9e:	4b14      	ldr	r3, [pc, #80]	; (46ff0 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   46fa0:	4c14      	ldr	r4, [pc, #80]	; (46ff4 <ev_setup_handler+0x58>)
   46fa2:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
   46fa6:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   46fa8:	4e13      	ldr	r6, [pc, #76]	; (46ff8 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   46faa:	43da      	mvns	r2, r3
   46fac:	4b13      	ldr	r3, [pc, #76]	; (46ffc <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
   46fae:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   46fb0:	681b      	ldr	r3, [r3, #0]
   46fb2:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   46fb4:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   46fb6:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   46fb8:	f008 ffbb 	bl	4ff32 <ep2bit>
   46fbc:	2301      	movs	r3, #1
   46fbe:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   46fc0:	4213      	tst	r3, r2
   46fc2:	d002      	beq.n	46fca <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
   46fc4:	4608      	mov	r0, r1
   46fc6:	f7ff ff6f 	bl	46ea8 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   46fca:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
   46fce:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   46fd2:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   46fd4:	f7ff faf0 	bl	465b8 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   46fd8:	6823      	ldr	r3, [r4, #0]
   46fda:	f043 0301 	orr.w	r3, r3, #1
   46fde:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   46fe0:	2305      	movs	r3, #5
   46fe2:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
   46fe4:	4b06      	ldr	r3, [pc, #24]	; (47000 <ev_setup_handler+0x64>)
   46fe6:	a801      	add	r0, sp, #4
   46fe8:	681b      	ldr	r3, [r3, #0]
   46fea:	4798      	blx	r3
}
   46fec:	b002      	add	sp, #8
   46fee:	bd70      	pop	{r4, r5, r6, pc}
   46ff0:	40027000 	.word	0x40027000
   46ff4:	200068e4 	.word	0x200068e4
   46ff8:	20006de7 	.word	0x20006de7
   46ffc:	20006874 	.word	0x20006874
   47000:	20006a08 	.word	0x20006a08

00047004 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   47004:	4b1b      	ldr	r3, [pc, #108]	; (47074 <nrfx_usbd_irq_handler+0x70>)
   47006:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   4700a:	2300      	movs	r3, #0
{
   4700c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
   47010:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   47012:	461d      	mov	r5, r3
    while (to_process)
   47014:	b970      	cbnz	r0, 47034 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   47016:	4f18      	ldr	r7, [pc, #96]	; (47078 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   47018:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   4701c:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   47020:	f04f 0801 	mov.w	r8, #1
    while (active)
   47024:	b9bc      	cbnz	r4, 47056 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   47026:	f7ff fd67 	bl	46af8 <usbd_dmareq_process>
    if (setup_active)
   4702a:	b306      	cbz	r6, 4706e <nrfx_usbd_irq_handler+0x6a>
}
   4702c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   47030:	f7ff bfb4 	b.w	46f9c <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   47034:	fa90 f2a0 	rbit	r2, r0
   47038:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   4703c:	490f      	ldr	r1, [pc, #60]	; (4707c <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   4703e:	0096      	lsls	r6, r2, #2
   47040:	4431      	add	r1, r6
            active |= 1UL << event_nr;
   47042:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   47046:	680e      	ldr	r6, [r1, #0]
    if (ret)
   47048:	b116      	cbz	r6, 47050 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   4704a:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   4704c:	6809      	ldr	r1, [r1, #0]
   4704e:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   47050:	ea20 0002 	bic.w	r0, r0, r2
   47054:	e7de      	b.n	47014 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   47056:	fa94 f5a4 	rbit	r5, r4
   4705a:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   4705e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   47062:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   47066:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   47068:	ea24 0405 	bic.w	r4, r4, r5
   4706c:	e7da      	b.n	47024 <nrfx_usbd_irq_handler+0x20>
}
   4706e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   47072:	bf00      	nop
   47074:	40027000 	.word	0x40027000
   47078:	000533e8 	.word	0x000533e8
   4707c:	40027100 	.word	0x40027100

00047080 <usbd_ep_abort_all>:
{
   47080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   47082:	4e11      	ldr	r6, [pc, #68]	; (470c8 <usbd_ep_abort_all+0x48>)
   47084:	4b11      	ldr	r3, [pc, #68]	; (470cc <usbd_ep_abort_all+0x4c>)
   47086:	6834      	ldr	r4, [r6, #0]
   47088:	681b      	ldr	r3, [r3, #0]
   4708a:	0c24      	lsrs	r4, r4, #16
   4708c:	0424      	lsls	r4, r4, #16
   4708e:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
   47090:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   47092:	b91c      	cbnz	r4, 4709c <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   47094:	f240 13ff 	movw	r3, #511	; 0x1ff
   47098:	6033      	str	r3, [r6, #0]
}
   4709a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   4709c:	fa94 f5a4 	rbit	r5, r4
   470a0:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   470a4:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   470a6:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   470a8:	bfc6      	itte	gt
   470aa:	f1a5 0010 	subgt.w	r0, r5, #16
   470ae:	b2c0      	uxtbgt	r0, r0
   470b0:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   470b4:	0703      	lsls	r3, r0, #28
   470b6:	d401      	bmi.n	470bc <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
   470b8:	f7ff fef6 	bl	46ea8 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   470bc:	fa07 f505 	lsl.w	r5, r7, r5
   470c0:	ea24 0405 	bic.w	r4, r4, r5
   470c4:	e7e5      	b.n	47092 <usbd_ep_abort_all+0x12>
   470c6:	bf00      	nop
   470c8:	200068e4 	.word	0x200068e4
   470cc:	20006874 	.word	0x20006874

000470d0 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   470d0:	4b0c      	ldr	r3, [pc, #48]	; (47104 <nrfx_usbd_stop+0x34>)
   470d2:	2280      	movs	r2, #128	; 0x80
{
   470d4:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   470d6:	2027      	movs	r0, #39	; 0x27
   470d8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   470dc:	f7e5 faf8 	bl	2c6d0 <arch_irq_is_enabled>
   470e0:	b170      	cbz	r0, 47100 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   470e2:	4c09      	ldr	r4, [pc, #36]	; (47108 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   470e4:	f7ff ffcc 	bl	47080 <usbd_ep_abort_all>
   470e8:	2300      	movs	r3, #0
   470ea:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   470ee:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   470f0:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   470f4:	f7e5 fad8 	bl	2c6a8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   470f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   470fc:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   47100:	bd10      	pop	{r4, pc}
   47102:	bf00      	nop
   47104:	e000e100 	.word	0xe000e100
   47108:	40027000 	.word	0x40027000

0004710c <nrfx_usbd_disable>:
{
   4710c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   4710e:	f7ff ffdf 	bl	470d0 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   47112:	4b08      	ldr	r3, [pc, #32]	; (47134 <nrfx_usbd_disable+0x28>)
   47114:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   47118:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   4711c:	2200      	movs	r2, #0
   4711e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   47122:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   47126:	f7ff f94b 	bl	463c0 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   4712a:	4b03      	ldr	r3, [pc, #12]	; (47138 <nrfx_usbd_disable+0x2c>)
   4712c:	2201      	movs	r2, #1
   4712e:	701a      	strb	r2, [r3, #0]
}
   47130:	bd08      	pop	{r3, pc}
   47132:	bf00      	nop
   47134:	40027000 	.word	0x40027000
   47138:	20006de6 	.word	0x20006de6

0004713c <nrfx_usbd_suspend>:
{
   4713c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   4713e:	f04f 0320 	mov.w	r3, #32
   47142:	f3ef 8511 	mrs	r5, BASEPRI
   47146:	f383 8812 	msr	BASEPRI_MAX, r3
   4714a:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   4714e:	4b11      	ldr	r3, [pc, #68]	; (47194 <nrfx_usbd_suspend+0x58>)
   47150:	781b      	ldrb	r3, [r3, #0]
   47152:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   47156:	b933      	cbnz	r3, 47166 <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
   47158:	2400      	movs	r4, #0
	__asm__ volatile(
   4715a:	f385 8811 	msr	BASEPRI, r5
   4715e:	f3bf 8f6f 	isb	sy
}
   47162:	4620      	mov	r0, r4
   47164:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   47166:	f7ff ff8b 	bl	47080 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   4716a:	4b0b      	ldr	r3, [pc, #44]	; (47198 <nrfx_usbd_suspend+0x5c>)
   4716c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   47170:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   47174:	d1f0      	bne.n	47158 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   47176:	2101      	movs	r1, #1
   47178:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   4717c:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   47180:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   47184:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   47186:	bf42      	ittt	mi
   47188:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   4718c:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   47190:	4614      	movmi	r4, r2
}
   47192:	e7e2      	b.n	4715a <nrfx_usbd_suspend+0x1e>
   47194:	20006de4 	.word	0x20006de4
   47198:	40027000 	.word	0x40027000

0004719c <nrfx_usbd_ep_disable>:
{
   4719c:	b510      	push	{r4, lr}
   4719e:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   471a0:	f7ff fe82 	bl	46ea8 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   471a4:	4a10      	ldr	r2, [pc, #64]	; (471e8 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   471a6:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   471aa:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   471ae:	f04f 0301 	mov.w	r3, #1
   471b2:	bf14      	ite	ne
   471b4:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   471b8:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
   471bc:	fa03 f300 	lsl.w	r3, r3, r0
   471c0:	ea6f 0303 	mvn.w	r3, r3
   471c4:	bf15      	itete	ne
   471c6:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   471c8:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   471ca:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   471ce:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   471d2:	bf14      	ite	ne
   471d4:	4b05      	ldrne	r3, [pc, #20]	; (471ec <nrfx_usbd_ep_disable+0x50>)
   471d6:	4b06      	ldreq	r3, [pc, #24]	; (471f0 <nrfx_usbd_ep_disable+0x54>)
   471d8:	5c1a      	ldrb	r2, [r3, r0]
   471da:	2301      	movs	r3, #1
   471dc:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   471de:	4a02      	ldr	r2, [pc, #8]	; (471e8 <nrfx_usbd_ep_disable+0x4c>)
   471e0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   471e4:	bd10      	pop	{r4, pc}
   471e6:	bf00      	nop
   471e8:	40027000 	.word	0x40027000
   471ec:	00053d2b 	.word	0x00053d2b
   471f0:	00053d34 	.word	0x00053d34

000471f4 <nrfx_usbd_ep_enable>:
{
   471f4:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   471f6:	b243      	sxtb	r3, r0
   471f8:	2b00      	cmp	r3, #0
   471fa:	4b23      	ldr	r3, [pc, #140]	; (47288 <nrfx_usbd_ep_enable+0x94>)
   471fc:	4a23      	ldr	r2, [pc, #140]	; (4728c <nrfx_usbd_ep_enable+0x98>)
   471fe:	bfa8      	it	ge
   47200:	461a      	movge	r2, r3
   47202:	f000 030f 	and.w	r3, r0, #15
   47206:	f04f 0401 	mov.w	r4, #1
   4720a:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
   4720c:	4a20      	ldr	r2, [pc, #128]	; (47290 <nrfx_usbd_ep_enable+0x9c>)
   4720e:	fa04 f101 	lsl.w	r1, r4, r1
{
   47212:	4605      	mov	r5, r0
   47214:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   47218:	da0c      	bge.n	47234 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   4721a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   4721e:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   47220:	07c8      	lsls	r0, r1, #31
   47222:	d406      	bmi.n	47232 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
   47224:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   47228:	fa04 f303 	lsl.w	r3, r4, r3
   4722c:	430b      	orrs	r3, r1
   4722e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   47232:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   47234:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
   47238:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   4723a:	07c9      	lsls	r1, r1, #31
   4723c:	d4f9      	bmi.n	47232 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
   4723e:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
   47242:	fa04 f103 	lsl.w	r1, r4, r3
   47246:	4331      	orrs	r1, r6
   47248:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   4724c:	2b00      	cmp	r3, #0
   4724e:	d0f0      	beq.n	47232 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
   47250:	0703      	lsls	r3, r0, #28
   47252:	d4ee      	bmi.n	47232 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
   47254:	f04f 0320 	mov.w	r3, #32
   47258:	f3ef 8611 	mrs	r6, BASEPRI
   4725c:	f383 8812 	msr	BASEPRI_MAX, r3
   47260:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   47264:	f7ff fdf6 	bl	46e54 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   47268:	4628      	mov	r0, r5
   4726a:	f008 fe62 	bl	4ff32 <ep2bit>
   4726e:	4a09      	ldr	r2, [pc, #36]	; (47294 <nrfx_usbd_ep_enable+0xa0>)
   47270:	6813      	ldr	r3, [r2, #0]
   47272:	fa04 f000 	lsl.w	r0, r4, r0
   47276:	ea23 0300 	bic.w	r3, r3, r0
   4727a:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   4727c:	f386 8811 	msr	BASEPRI, r6
   47280:	f3bf 8f6f 	isb	sy
}
   47284:	e7d5      	b.n	47232 <nrfx_usbd_ep_enable+0x3e>
   47286:	bf00      	nop
   47288:	00053d34 	.word	0x00053d34
   4728c:	00053d2b 	.word	0x00053d2b
   47290:	40027000 	.word	0x40027000
   47294:	20006874 	.word	0x20006874

00047298 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   47298:	0603      	lsls	r3, r0, #24
{
   4729a:	b510      	push	{r4, lr}
   4729c:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   4729e:	d405      	bmi.n	472ac <nrfx_usbd_ep_stall_clear+0x14>
   472a0:	f7ff fd46 	bl	46d30 <nrfx_usbd_ep_stall_check>
   472a4:	b110      	cbz	r0, 472ac <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   472a6:	4620      	mov	r0, r4
   472a8:	f7ff fdd4 	bl	46e54 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   472ac:	4b01      	ldr	r3, [pc, #4]	; (472b4 <nrfx_usbd_ep_stall_clear+0x1c>)
   472ae:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   472b2:	bd10      	pop	{r4, pc}
   472b4:	40027000 	.word	0x40027000

000472b8 <kscan_direct_init>:
    }

    return 0;
}

static int kscan_direct_init(const struct device *dev) {
   472b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct kscan_direct_data *data = dev->data;
   472bc:	f8d0 8010 	ldr.w	r8, [r0, #16]
    const struct kscan_direct_config *config = dev->config;
   472c0:	6847      	ldr	r7, [r0, #4]

    data->dev = dev;
   472c2:	f8c8 0000 	str.w	r0, [r8]
static int kscan_direct_init(const struct device *dev) {
   472c6:	4605      	mov	r5, r0
    for (int i = 0; i < config->inputs.len; i++) {
   472c8:	2400      	movs	r4, #0
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   472ca:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < config->inputs.len; i++) {
   472ce:	687b      	ldr	r3, [r7, #4]
   472d0:	42a3      	cmp	r3, r4
   472d2:	d808      	bhi.n	472e6 <kscan_direct_init+0x2e>

    kscan_direct_init_inputs(dev);

    k_work_init_delayable(&data->work, kscan_direct_work_handler);
   472d4:	f108 0008 	add.w	r0, r8, #8
   472d8:	4922      	ldr	r1, [pc, #136]	; (47364 <kscan_direct_init+0xac>)
   472da:	f009 faa9 	bl	50830 <k_work_init_delayable>

    return 0;
}
   472de:	2000      	movs	r0, #0
   472e0:	b003      	add	sp, #12
   472e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   472e6:	683e      	ldr	r6, [r7, #0]
        int err = kscan_direct_init_input_inst(dev, gpio, i, config->toggle_mode);
   472e8:	7e3a      	ldrb	r2, [r7, #24]
    if (!device_is_ready(gpio->port)) {
   472ea:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
        int err = kscan_direct_init_input_inst(dev, gpio, i, config->toggle_mode);
   472ee:	9201      	str	r2, [sp, #4]
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   472f0:	ea4f 09c4 	mov.w	r9, r4, lsl #3
   472f4:	eb06 0bc4 	add.w	fp, r6, r4, lsl #3
   472f8:	f009 f845 	bl	50386 <z_device_is_ready>
    if (!device_is_ready(gpio->port)) {
   472fc:	9a01      	ldr	r2, [sp, #4]
   472fe:	2800      	cmp	r0, #0
   47300:	d0e8      	beq.n	472d4 <kscan_direct_init+0x1c>
    int err = gpio_pin_configure_dt(
   47302:	f89b c005 	ldrb.w	ip, [fp, #5]
   47306:	b352      	cbz	r2, 4735e <kscan_direct_init+0xa6>
        return ((BIT(0) & gpio->dt_flags) ? GPIO_PULL_UP : GPIO_PULL_DOWN);
   47308:	f01c 0f01 	tst.w	ip, #1
   4730c:	bf0c      	ite	eq
   4730e:	2220      	moveq	r2, #32
   47310:	2210      	movne	r2, #16
    int err = gpio_pin_configure_dt(
   47312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
   47316:	f856 0009 	ldr.w	r0, [r6, r9]
				  spec->pin,
   4731a:	f89b 1004 	ldrb.w	r1, [fp, #4]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   4731e:	ea4c 0202 	orr.w	r2, ip, r2
   47322:	f008 feae 	bl	50082 <z_impl_gpio_pin_configure>
    if (err) {
   47326:	2800      	cmp	r0, #0
   47328:	d1d4      	bne.n	472d4 <kscan_direct_init+0x1c>
    struct kscan_direct_irq_callback *irq = &data->irqs[index];
   4732a:	692a      	ldr	r2, [r5, #16]
   4732c:	0121      	lsls	r1, r4, #4
   4732e:	6b90      	ldr	r0, [r2, #56]	; 0x38
    irq->dev = dev;
   47330:	5045      	str	r5, [r0, r1]
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   47332:	f89b 3004 	ldrb.w	r3, [fp, #4]
    struct kscan_direct_irq_callback *irq = &data->irqs[index];
   47336:	eb00 1204 	add.w	r2, r0, r4, lsl #4
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   4733a:	480b      	ldr	r0, [pc, #44]	; (47368 <kscan_direct_init+0xb0>)
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   4733c:	fa0a f303 	lsl.w	r3, sl, r3
	callback->pin_mask = pin_mask;
   47340:	e9c2 0302 	strd	r0, r3, [r2, #8]
    err = gpio_add_callback(gpio->port, &irq->callback);
   47344:	f856 0009 	ldr.w	r0, [r6, r9]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   47348:	6883      	ldr	r3, [r0, #8]
   4734a:	69db      	ldr	r3, [r3, #28]
    gpio_init_callback(&irq->callback, kscan_direct_irq_callback_handler, BIT(gpio->pin));
   4734c:	1d11      	adds	r1, r2, #4
   4734e:	2b00      	cmp	r3, #0
   47350:	d0c0      	beq.n	472d4 <kscan_direct_init+0x1c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   47352:	2201      	movs	r2, #1
   47354:	4798      	blx	r3
    if (err) {
   47356:	2800      	cmp	r0, #0
   47358:	d1bc      	bne.n	472d4 <kscan_direct_init+0x1c>
    for (int i = 0; i < config->inputs.len; i++) {
   4735a:	3401      	adds	r4, #1
   4735c:	e7b7      	b.n	472ce <kscan_direct_init+0x16>
    int err = gpio_pin_configure_dt(
   4735e:	f44f 7280 	mov.w	r2, #256	; 0x100
   47362:	e7d8      	b.n	47316 <kscan_direct_init+0x5e>
   47364:	00050303 	.word	0x00050303
   47368:	00050121 	.word	0x00050121

0004736c <vddh_sample_fetch>:
    struct adc_channel_cfg acc;
    struct adc_sequence as;
    struct battery_value value;
};

static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   4736c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4736e:	3927      	subs	r1, #39	; 0x27
   47370:	b289      	uxth	r1, r1
   47372:	2912      	cmp	r1, #18
   47374:	d827      	bhi.n	473c6 <vddh_sample_fetch+0x5a>
   47376:	4b15      	ldr	r3, [pc, #84]	; (473cc <vddh_sample_fetch+0x60>)
   47378:	40cb      	lsrs	r3, r1
   4737a:	07db      	lsls	r3, r3, #31
   4737c:	d523      	bpl.n	473c6 <vddh_sample_fetch+0x5a>
        chan != SENSOR_CHAN_ALL) {
        LOG_DBG("Selected channel is not supported: %d.", chan);
        return -ENOTSUP;
    }

    struct vddh_data *drv_data = dev->data;
   4737e:	6905      	ldr	r5, [r0, #16]
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
   47380:	4813      	ldr	r0, [pc, #76]	; (473d0 <vddh_sample_fetch+0x64>)
   47382:	6886      	ldr	r6, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   47384:	f105 0108 	add.w	r1, r5, #8
   47388:	6873      	ldr	r3, [r6, #4]
   4738a:	4798      	blx	r3
    struct adc_sequence *as = &drv_data->as;

    int rc = adc_read(adc, as);
    as->calibrate = false;
   4738c:	2300      	movs	r3, #0
   4738e:	76ab      	strb	r3, [r5, #26]

    if (rc != 0) {
   47390:	4604      	mov	r4, r0
   47392:	b9a8      	cbnz	r0, 473c0 <vddh_sample_fetch+0x54>
        LOG_ERR("Failed to read ADC: %d", rc);
        return rc;
    }

    int32_t val = drv_data->value.adc_raw;
   47394:	8bab      	ldrh	r3, [r5, #28]
    rc = adc_raw_to_millivolts(adc_ref_internal(adc), drv_data->acc.gain, as->resolution, &val);
   47396:	8932      	ldrh	r2, [r6, #8]
   47398:	7828      	ldrb	r0, [r5, #0]
   4739a:	7e2f      	ldrb	r7, [r5, #24]
	int32_t adc_mv = *valp * ref_mv;
   4739c:	4353      	muls	r3, r2
	int ret = adc_gain_invert(gain, &adc_mv);
   4739e:	a901      	add	r1, sp, #4
	int32_t adc_mv = *valp * ref_mv;
   473a0:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   473a2:	f7fc ff75 	bl	44290 <adc_gain_invert>
	if (ret == 0) {
   473a6:	4604      	mov	r4, r0
   473a8:	b950      	cbnz	r0, 473c0 <vddh_sample_fetch+0x54>
		*valp = (adc_mv >> resolution);
   473aa:	9801      	ldr	r0, [sp, #4]
   473ac:	4138      	asrs	r0, r7
    if (rc != 0) {
        LOG_ERR("Failed to convert raw ADC to mV: %d", rc);
        return rc;
    }

    drv_data->value.millivolts = val * VDDHDIV;
   473ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   473b2:	b280      	uxth	r0, r0
   473b4:	83e8      	strh	r0, [r5, #30]
    drv_data->value.state_of_charge = lithium_ion_mv_to_pct(drv_data->value.millivolts);
   473b6:	b200      	sxth	r0, r0
   473b8:	f008 ffcd 	bl	50356 <lithium_ion_mv_to_pct>
   473bc:	f885 0020 	strb.w	r0, [r5, #32]

    LOG_DBG("ADC raw %d ~ %d mV => %d%%", drv_data->value.adc_raw, drv_data->value.millivolts,
            drv_data->value.state_of_charge);

    return rc;
}
   473c0:	4620      	mov	r0, r4
   473c2:	b003      	add	sp, #12
   473c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   473c6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   473ca:	e7f9      	b.n	473c0 <vddh_sample_fetch+0x54>
   473cc:	00040021 	.word	0x00040021
   473d0:	00051080 	.word	0x00051080

000473d4 <vddh_init>:
static const struct sensor_driver_api vddh_api = {
    .sample_fetch = vddh_sample_fetch,
    .channel_get = vddh_channel_get,
};

static int vddh_init(const struct device *dev) {
   473d4:	b570      	push	{r4, r5, r6, lr}
    struct vddh_data *drv_data = dev->data;
   473d6:	6904      	ldr	r4, [r0, #16]
   473d8:	4d12      	ldr	r5, [pc, #72]	; (47424 <vddh_init+0x50>)
   473da:	4628      	mov	r0, r5
   473dc:	f008 ffd3 	bl	50386 <z_device_is_ready>

    if (!device_is_ready(adc)) {
   473e0:	b1e0      	cbz	r0, 4741c <vddh_init+0x48>
        LOG_ERR("ADC device is not ready %s", adc->name);
        return -ENODEV;
    }

    drv_data->as = (struct adc_sequence){
   473e2:	2214      	movs	r2, #20
   473e4:	2100      	movs	r1, #0
   473e6:	f104 0008 	add.w	r0, r4, #8
   473ea:	f004 fa59 	bl	4b8a0 <memset>
        .channels = BIT(0),
        .buffer = &drv_data->value.adc_raw,
   473ee:	f104 021c 	add.w	r2, r4, #28
        .oversampling = 4,
        .calibrate = true,
    };

#ifdef CONFIG_ADC_NRFX_SAADC
    drv_data->acc = (struct adc_channel_cfg){
   473f2:	490d      	ldr	r1, [pc, #52]	; (47428 <vddh_init+0x54>)
    drv_data->as = (struct adc_sequence){
   473f4:	6122      	str	r2, [r4, #16]
    drv_data->acc = (struct adc_channel_cfg){
   473f6:	f44f 6250 	mov.w	r2, #3328	; 0xd00
   473fa:	e9c4 1200 	strd	r1, r2, [r4]
    drv_data->as = (struct adc_sequence){
   473fe:	2202      	movs	r2, #2
   47400:	2301      	movs	r3, #1
   47402:	6162      	str	r2, [r4, #20]
        .reference = ADC_REF_INTERNAL,
        .acquisition_time = ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40),
        .input_positive = SAADC_CH_PSELN_PSELN_VDDHDIV5,
    };

    drv_data->as.resolution = 12;
   47404:	f240 420c 	movw	r2, #1036	; 0x40c
    drv_data->as = (struct adc_sequence){
   47408:	60e3      	str	r3, [r4, #12]
    drv_data->as.resolution = 12;
   4740a:	8322      	strh	r2, [r4, #24]
    drv_data->as = (struct adc_sequence){
   4740c:	76a3      	strb	r3, [r4, #26]
	return api->channel_setup(dev, channel_cfg);
   4740e:	68ab      	ldr	r3, [r5, #8]
   47410:	4621      	mov	r1, r4
   47412:	4628      	mov	r0, r5
   47414:	681b      	ldr	r3, [r3, #0]

    const int rc = adc_channel_setup(adc, &drv_data->acc);
    LOG_DBG("VDDHDIV5 setup returned %d", rc);

    return rc;
}
   47416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   4741a:	4718      	bx	r3
   4741c:	f06f 0012 	mvn.w	r0, #18
   47420:	bd70      	pop	{r4, r5, r6, pc}
   47422:	bf00      	nop
   47424:	00051080 	.word	0x00051080
   47428:	40280401 	.word	0x40280401

0004742c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   4742c:	4b0e      	ldr	r3, [pc, #56]	; (47468 <z_sys_init_run_level+0x3c>)
{
   4742e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   47430:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   47434:	3001      	adds	r0, #1
   47436:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   4743a:	42a6      	cmp	r6, r4
   4743c:	d800      	bhi.n	47440 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   4743e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   47440:	e9d4 3500 	ldrd	r3, r5, [r4]
   47444:	4628      	mov	r0, r5
   47446:	4798      	blx	r3
		if (dev != NULL) {
   47448:	b165      	cbz	r5, 47464 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   4744a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   4744c:	b130      	cbz	r0, 4745c <z_sys_init_run_level+0x30>
				dev->state->init_res = rc;
   4744e:	2800      	cmp	r0, #0
   47450:	bfb8      	it	lt
   47452:	4240      	neglt	r0, r0
   47454:	28ff      	cmp	r0, #255	; 0xff
   47456:	bfa8      	it	ge
   47458:	20ff      	movge	r0, #255	; 0xff
   4745a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   4745c:	785a      	ldrb	r2, [r3, #1]
   4745e:	f042 0201 	orr.w	r2, r2, #1
   47462:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   47464:	3408      	adds	r4, #8
   47466:	e7e8      	b.n	4743a <z_sys_init_run_level+0xe>
   47468:	000534fc 	.word	0x000534fc

0004746c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   4746c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   4746e:	4605      	mov	r5, r0
   47470:	b910      	cbnz	r0, 47478 <z_impl_device_get_binding+0xc>
		return NULL;
   47472:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   47474:	4620      	mov	r0, r4
   47476:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   47478:	7803      	ldrb	r3, [r0, #0]
   4747a:	2b00      	cmp	r3, #0
   4747c:	d0f9      	beq.n	47472 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   4747e:	4c0e      	ldr	r4, [pc, #56]	; (474b8 <z_impl_device_get_binding+0x4c>)
   47480:	4e0e      	ldr	r6, [pc, #56]	; (474bc <z_impl_device_get_binding+0x50>)
   47482:	42b4      	cmp	r4, r6
   47484:	d108      	bne.n	47498 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   47486:	4c0c      	ldr	r4, [pc, #48]	; (474b8 <z_impl_device_get_binding+0x4c>)
   47488:	42b4      	cmp	r4, r6
   4748a:	d0f2      	beq.n	47472 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   4748c:	4620      	mov	r0, r4
   4748e:	f008 ff7a 	bl	50386 <z_device_is_ready>
   47492:	b950      	cbnz	r0, 474aa <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   47494:	3418      	adds	r4, #24
   47496:	e7f7      	b.n	47488 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   47498:	4620      	mov	r0, r4
   4749a:	f008 ff74 	bl	50386 <z_device_is_ready>
   4749e:	b110      	cbz	r0, 474a6 <z_impl_device_get_binding+0x3a>
   474a0:	6823      	ldr	r3, [r4, #0]
   474a2:	42ab      	cmp	r3, r5
   474a4:	d0e6      	beq.n	47474 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   474a6:	3418      	adds	r4, #24
   474a8:	e7eb      	b.n	47482 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   474aa:	6821      	ldr	r1, [r4, #0]
   474ac:	4628      	mov	r0, r5
   474ae:	f004 f9bf 	bl	4b830 <strcmp>
   474b2:	2800      	cmp	r0, #0
   474b4:	d1ee      	bne.n	47494 <z_impl_device_get_binding+0x28>
   474b6:	e7dd      	b.n	47474 <z_impl_device_get_binding+0x8>
   474b8:	00051008 	.word	0x00051008
   474bc:	000511b8 	.word	0x000511b8

000474c0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   474c0:	4b01      	ldr	r3, [pc, #4]	; (474c8 <z_impl_z_errno+0x8>)
   474c2:	6898      	ldr	r0, [r3, #8]
}
   474c4:	3064      	adds	r0, #100	; 0x64
   474c6:	4770      	bx	lr
   474c8:	20006b90 	.word	0x20006b90

000474cc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   474cc:	b510      	push	{r4, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   474ce:	2300      	movs	r3, #0
{
   474d0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   474d2:	2201      	movs	r2, #1
   474d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   474d8:	220f      	movs	r2, #15
   474da:	e9cd 3202 	strd	r3, r2, [sp, #8]
   474de:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   474e0:	4c0b      	ldr	r4, [pc, #44]	; (47510 <init_idle_thread+0x44>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   474e2:	4b0c      	ldr	r3, [pc, #48]	; (47514 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
   474e4:	490c      	ldr	r1, [pc, #48]	; (47518 <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   474e6:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   474e8:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   474ec:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   474f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   474f4:	9300      	str	r3, [sp, #0]
   474f6:	fb02 1100 	mla	r1, r2, r0, r1
   474fa:	4b08      	ldr	r3, [pc, #32]	; (4751c <init_idle_thread+0x50>)
   474fc:	4620      	mov	r0, r4
   474fe:	f000 f90b 	bl	47718 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   47502:	7b63      	ldrb	r3, [r4, #13]
   47504:	f023 0304 	bic.w	r3, r3, #4
   47508:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   4750a:	b006      	add	sp, #24
   4750c:	bd10      	pop	{r4, pc}
   4750e:	bf00      	nop
   47510:	200039f0 	.word	0x200039f0
   47514:	20006b90 	.word	0x20006b90
   47518:	20009470 	.word	0x20009470
   4751c:	00047889 	.word	0x00047889

00047520 <bg_thread_main>:
{
   47520:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   47522:	4b0a      	ldr	r3, [pc, #40]	; (4754c <bg_thread_main+0x2c>)
   47524:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   47526:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   47528:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   4752a:	f7ff ff7f 	bl	4742c <z_sys_init_run_level>
	boot_banner();
   4752e:	f009 fcd7 	bl	50ee0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   47532:	2003      	movs	r0, #3
   47534:	f7ff ff7a 	bl	4742c <z_sys_init_run_level>
	z_init_static_threads();
   47538:	f000 f94a 	bl	477d0 <z_init_static_threads>
	main();
   4753c:	f7e2 ff7c 	bl	2a438 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   47540:	4a03      	ldr	r2, [pc, #12]	; (47550 <bg_thread_main+0x30>)
   47542:	7b13      	ldrb	r3, [r2, #12]
   47544:	f023 0301 	bic.w	r3, r3, #1
   47548:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   4754a:	bd08      	pop	{r3, pc}
   4754c:	20006de8 	.word	0x20006de8
   47550:	20003a70 	.word	0x20003a70

00047554 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   47554:	4802      	ldr	r0, [pc, #8]	; (47560 <z_bss_zero+0xc>)
   47556:	4a03      	ldr	r2, [pc, #12]	; (47564 <z_bss_zero+0x10>)
   47558:	2100      	movs	r1, #0
   4755a:	1a12      	subs	r2, r2, r0
   4755c:	f004 b9a0 	b.w	4b8a0 <memset>
   47560:	20001248 	.word	0x20001248
   47564:	20006dec 	.word	0x20006dec

00047568 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   47568:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   4756a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 47634 <z_cstart+0xcc>
   4756e:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   47570:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   47574:	4d30      	ldr	r5, [pc, #192]	; (47638 <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   47576:	4e31      	ldr	r6, [pc, #196]	; (4763c <z_cstart+0xd4>)
   47578:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   4757a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 47640 <z_cstart+0xd8>
   4757e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   47582:	2400      	movs	r4, #0
   47584:	616b      	str	r3, [r5, #20]
   47586:	23e0      	movs	r3, #224	; 0xe0
   47588:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   4758c:	77ec      	strb	r4, [r5, #31]
   4758e:	762c      	strb	r4, [r5, #24]
   47590:	766c      	strb	r4, [r5, #25]
   47592:	76ac      	strb	r4, [r5, #26]
   47594:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   47598:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   4759a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   4759e:	626b      	str	r3, [r5, #36]	; 0x24
   475a0:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   475a4:	f7e5 fa6c 	bl	2ca80 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   475a8:	f7e5 f852 	bl	2c650 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   475ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   475b0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   475b2:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   475b4:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   475b6:	f7e5 fb19 	bl	2cbec <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   475ba:	f7e5 faa9 	bl	2cb10 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   475be:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   475c2:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   475c4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   475c8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   475cc:	f001 fafc 	bl	48bc8 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   475d0:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   475d2:	f008 fed7 	bl	50384 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   475d6:	4620      	mov	r0, r4
   475d8:	f7ff ff28 	bl	4742c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   475dc:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   475de:	4d19      	ldr	r5, [pc, #100]	; (47644 <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   475e0:	f7ff ff24 	bl	4742c <z_sys_init_run_level>
	z_sched_init();
   475e4:	f000 ff5e 	bl	484a4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   475e8:	4b17      	ldr	r3, [pc, #92]	; (47648 <z_cstart+0xe0>)
   475ea:	9305      	str	r3, [sp, #20]
   475ec:	2301      	movs	r3, #1
   475ee:	4917      	ldr	r1, [pc, #92]	; (4764c <z_cstart+0xe4>)
   475f0:	9400      	str	r4, [sp, #0]
   475f2:	e9cd 4303 	strd	r4, r3, [sp, #12]
   475f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   475fa:	464b      	mov	r3, r9
   475fc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   47600:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   47602:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   47604:	f000 f888 	bl	47718 <z_setup_new_thread>
   47608:	7b6a      	ldrb	r2, [r5, #13]
   4760a:	4607      	mov	r7, r0
   4760c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   47610:	4628      	mov	r0, r5
   47612:	736a      	strb	r2, [r5, #13]
   47614:	f009 f9b3 	bl	5097e <z_ready_thread>
		init_idle_thread(i);
   47618:	4620      	mov	r0, r4
   4761a:	f7ff ff57 	bl	474cc <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   4761e:	4b0c      	ldr	r3, [pc, #48]	; (47650 <z_cstart+0xe8>)
   47620:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   47622:	464a      	mov	r2, r9
   47624:	4639      	mov	r1, r7
   47626:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   47628:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   4762a:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   4762e:	f7e5 f915 	bl	2c85c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   47632:	bf00      	nop
   47634:	20009db0 	.word	0x20009db0
   47638:	e000ed00 	.word	0xe000ed00
   4763c:	20006b90 	.word	0x20006b90
   47640:	00047521 	.word	0x00047521
   47644:	20003a70 	.word	0x20003a70
   47648:	00053d45 	.word	0x00053d45
   4764c:	20009070 	.word	0x20009070
   47650:	200039f0 	.word	0x200039f0

00047654 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   47654:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   47656:	4c06      	ldr	r4, [pc, #24]	; (47670 <statics_init+0x1c>)
   47658:	4d06      	ldr	r5, [pc, #24]	; (47674 <statics_init+0x20>)
   4765a:	42ac      	cmp	r4, r5
   4765c:	d301      	bcc.n	47662 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   4765e:	2000      	movs	r0, #0
   47660:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   47662:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   47666:	4620      	mov	r0, r4
   47668:	f008 febe 	bl	503e8 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   4766c:	3414      	adds	r4, #20
   4766e:	e7f4      	b.n	4765a <statics_init+0x6>
   47670:	20000eb0 	.word	0x20000eb0
   47674:	20000ec4 	.word	0x20000ec4

00047678 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   47678:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   4767a:	4b0e      	ldr	r3, [pc, #56]	; (476b4 <init_mem_slab_module+0x3c>)
   4767c:	4c0e      	ldr	r4, [pc, #56]	; (476b8 <init_mem_slab_module+0x40>)
   4767e:	42a3      	cmp	r3, r4
   47680:	d301      	bcc.n	47686 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   47682:	2000      	movs	r0, #0
	return rc;
}
   47684:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   47686:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   4768a:	ea41 0200 	orr.w	r2, r1, r0
   4768e:	f012 0203 	ands.w	r2, r2, #3
   47692:	d10b      	bne.n	476ac <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   47694:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   47696:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   47698:	42aa      	cmp	r2, r5
   4769a:	d101      	bne.n	476a0 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   4769c:	331c      	adds	r3, #28
   4769e:	e7ee      	b.n	4767e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   476a0:	695e      	ldr	r6, [r3, #20]
   476a2:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   476a4:	3201      	adds	r2, #1
		slab->free_list = p;
   476a6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   476a8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   476aa:	e7f5      	b.n	47698 <init_mem_slab_module+0x20>
	return rc;
   476ac:	f06f 0015 	mvn.w	r0, #21
   476b0:	e7e8      	b.n	47684 <init_mem_slab_module+0xc>
   476b2:	bf00      	nop
   476b4:	20000e40 	.word	0x20000e40
   476b8:	20000eb0 	.word	0x20000eb0

000476bc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   476bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   476be:	460c      	mov	r4, r1
	__asm__ volatile(
   476c0:	f04f 0520 	mov.w	r5, #32
   476c4:	f3ef 8111 	mrs	r1, BASEPRI
   476c8:	f385 8812 	msr	BASEPRI_MAX, r5
   476cc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   476d0:	6945      	ldr	r5, [r0, #20]
   476d2:	b15d      	cbz	r5, 476ec <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   476d4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   476d6:	682b      	ldr	r3, [r5, #0]
   476d8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   476da:	6983      	ldr	r3, [r0, #24]
   476dc:	3301      	adds	r3, #1
   476de:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   476e0:	2000      	movs	r0, #0
	__asm__ volatile(
   476e2:	f381 8811 	msr	BASEPRI, r1
   476e6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   476ea:	e011      	b.n	47710 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   476ec:	ea52 0603 	orrs.w	r6, r2, r3
   476f0:	d103      	bne.n	476fa <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   476f2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   476f4:	f06f 000b 	mvn.w	r0, #11
   476f8:	e7f3      	b.n	476e2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   476fa:	e9cd 2300 	strd	r2, r3, [sp]
   476fe:	4602      	mov	r2, r0
   47700:	3008      	adds	r0, #8
   47702:	f000 fe27 	bl	48354 <z_pend_curr>
		if (result == 0) {
   47706:	b918      	cbnz	r0, 47710 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   47708:	4b02      	ldr	r3, [pc, #8]	; (47714 <k_mem_slab_alloc+0x58>)
   4770a:	689b      	ldr	r3, [r3, #8]
   4770c:	695b      	ldr	r3, [r3, #20]
   4770e:	6023      	str	r3, [r4, #0]
}
   47710:	b002      	add	sp, #8
   47712:	bd70      	pop	{r4, r5, r6, pc}
   47714:	20006b90 	.word	0x20006b90

00047718 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   47718:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   4771c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   4771e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   47720:	2604      	movs	r6, #4
   47722:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   47724:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   47726:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   47728:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   4772c:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   4772e:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   47732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   47734:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   47736:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   4773a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   4773e:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   47742:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   47744:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   47746:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   47748:	9202      	str	r2, [sp, #8]
   4774a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   4774c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   4774e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   47752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   47754:	9200      	str	r2, [sp, #0]
   47756:	4642      	mov	r2, r8
{
   47758:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   4775a:	f7e5 f863 	bl	2c824 <arch_new_thread>
	if (!_current) {
   4775e:	4b05      	ldr	r3, [pc, #20]	; (47774 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   47760:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   47762:	689b      	ldr	r3, [r3, #8]
   47764:	b103      	cbz	r3, 47768 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   47766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   47768:	6763      	str	r3, [r4, #116]	; 0x74
}
   4776a:	4640      	mov	r0, r8
   4776c:	b004      	add	sp, #16
   4776e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   47772:	bf00      	nop
   47774:	20006b90 	.word	0x20006b90

00047778 <z_impl_k_thread_create>:
{
   47778:	b5f0      	push	{r4, r5, r6, r7, lr}
   4777a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   4777c:	2500      	movs	r5, #0
   4777e:	9505      	str	r5, [sp, #20]
   47780:	9d10      	ldr	r5, [sp, #64]	; 0x40
   47782:	9504      	str	r5, [sp, #16]
   47784:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   47786:	9503      	str	r5, [sp, #12]
   47788:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   4778a:	9502      	str	r5, [sp, #8]
{
   4778c:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   47790:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   47792:	9501      	str	r5, [sp, #4]
   47794:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   47796:	9500      	str	r5, [sp, #0]
{
   47798:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   4779a:	f7ff ffbd 	bl	47718 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   4779e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   477a2:	bf08      	it	eq
   477a4:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   477a8:	d005      	beq.n	477b6 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   477aa:	ea56 0307 	orrs.w	r3, r6, r7
   477ae:	d105      	bne.n	477bc <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   477b0:	4620      	mov	r0, r4
   477b2:	f000 fd73 	bl	4829c <z_sched_start>
}
   477b6:	4620      	mov	r0, r4
   477b8:	b007      	add	sp, #28
   477ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   477bc:	4903      	ldr	r1, [pc, #12]	; (477cc <z_impl_k_thread_create+0x54>)
   477be:	463a      	mov	r2, r7
   477c0:	4633      	mov	r3, r6
   477c2:	f104 0018 	add.w	r0, r4, #24
   477c6:	f000 fff3 	bl	487b0 <z_add_timeout>
   477ca:	e7f4      	b.n	477b6 <z_impl_k_thread_create+0x3e>
   477cc:	0005099f 	.word	0x0005099f

000477d0 <z_init_static_threads>:
{
   477d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   477d4:	4c29      	ldr	r4, [pc, #164]	; (4787c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   477d6:	4d2a      	ldr	r5, [pc, #168]	; (47880 <z_init_static_threads+0xb0>)
{
   477d8:	b087      	sub	sp, #28
   477da:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   477dc:	42ae      	cmp	r6, r5
   477de:	f104 0430 	add.w	r4, r4, #48	; 0x30
   477e2:	d30f      	bcc.n	47804 <z_init_static_threads+0x34>
	k_sched_lock();
   477e4:	f000 fc7a 	bl	480dc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   477e8:	4c24      	ldr	r4, [pc, #144]	; (4787c <z_init_static_threads+0xac>)
   477ea:	f8df 9098 	ldr.w	r9, [pc, #152]	; 47884 <z_init_static_threads+0xb4>
   477ee:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   477f2:	f240 37e7 	movw	r7, #999	; 0x3e7
   477f6:	42ac      	cmp	r4, r5
   477f8:	d320      	bcc.n	4783c <z_init_static_threads+0x6c>
}
   477fa:	b007      	add	sp, #28
   477fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   47800:	f000 be34 	b.w	4846c <k_sched_unlock>
		z_setup_new_thread(
   47804:	f854 3c04 	ldr.w	r3, [r4, #-4]
   47808:	9305      	str	r3, [sp, #20]
   4780a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   4780e:	9304      	str	r3, [sp, #16]
   47810:	f854 3c14 	ldr.w	r3, [r4, #-20]
   47814:	9303      	str	r3, [sp, #12]
   47816:	f854 3c18 	ldr.w	r3, [r4, #-24]
   4781a:	9302      	str	r3, [sp, #8]
   4781c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   47820:	9301      	str	r3, [sp, #4]
   47822:	f854 3c20 	ldr.w	r3, [r4, #-32]
   47826:	9300      	str	r3, [sp, #0]
   47828:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   4782c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   47830:	f7ff ff72 	bl	47718 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   47834:	f854 3c30 	ldr.w	r3, [r4, #-48]
   47838:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   4783a:	e7ce      	b.n	477da <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   4783c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   4783e:	1c5a      	adds	r2, r3, #1
   47840:	d00d      	beq.n	4785e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   47842:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   47846:	2100      	movs	r1, #0
   47848:	4638      	mov	r0, r7
   4784a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   4784e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   47852:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   47856:	d104      	bne.n	47862 <z_init_static_threads+0x92>
	z_sched_start(thread);
   47858:	4640      	mov	r0, r8
   4785a:	f000 fd1f 	bl	4829c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   4785e:	3430      	adds	r4, #48	; 0x30
   47860:	e7c9      	b.n	477f6 <z_init_static_threads+0x26>
   47862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   47866:	2300      	movs	r3, #0
   47868:	f7de fc4a 	bl	26100 <__aeabi_uldivmod>
   4786c:	4602      	mov	r2, r0
   4786e:	460b      	mov	r3, r1
   47870:	f108 0018 	add.w	r0, r8, #24
   47874:	4649      	mov	r1, r9
   47876:	f000 ff9b 	bl	487b0 <z_add_timeout>
   4787a:	e7f0      	b.n	4785e <z_init_static_threads+0x8e>
   4787c:	20000dcc 	.word	0x20000dcc
   47880:	20000dcc 	.word	0x20000dcc
   47884:	0005099f 	.word	0x0005099f

00047888 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   47888:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   4788a:	4c0b      	ldr	r4, [pc, #44]	; (478b8 <idle+0x30>)
	return !z_sys_post_kernel;
   4788c:	4d0b      	ldr	r5, [pc, #44]	; (478bc <idle+0x34>)
	__asm__ volatile(
   4788e:	f04f 0220 	mov.w	r2, #32
   47892:	f3ef 8311 	mrs	r3, BASEPRI
   47896:	f382 8812 	msr	BASEPRI_MAX, r2
   4789a:	f3bf 8f6f 	isb	sy
   4789e:	f009 f939 	bl	50b14 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   478a2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   478a4:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   478a6:	b913      	cbnz	r3, 478ae <idle+0x26>
	arch_cpu_idle();
   478a8:	f7e4 fed8 	bl	2c65c <arch_cpu_idle>
}
   478ac:	e7ef      	b.n	4788e <idle+0x6>
   478ae:	f7e4 fcd1 	bl	2c254 <pm_system_suspend>
   478b2:	2800      	cmp	r0, #0
   478b4:	d1eb      	bne.n	4788e <idle+0x6>
   478b6:	e7f7      	b.n	478a8 <idle+0x20>
   478b8:	20006b90 	.word	0x20006b90
   478bc:	20006de8 	.word	0x20006de8

000478c0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   478c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   478c4:	4604      	mov	r4, r0
   478c6:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   478c8:	f100 0808 	add.w	r8, r0, #8
   478cc:	f04f 0120 	mov.w	r1, #32
   478d0:	f3ef 8711 	mrs	r7, BASEPRI
   478d4:	f381 8812 	msr	BASEPRI_MAX, r1
   478d8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   478dc:	6a05      	ldr	r5, [r0, #32]
   478de:	68c1      	ldr	r1, [r0, #12]
   478e0:	428d      	cmp	r5, r1
   478e2:	d22f      	bcs.n	47944 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   478e4:	f009 f8bb 	bl	50a5e <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   478e8:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   478ea:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   478ec:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   478ee:	b178      	cbz	r0, 47910 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   478f0:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   478f2:	6940      	ldr	r0, [r0, #20]
   478f4:	f003 ffc9 	bl	4b88a <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   478f8:	4628      	mov	r0, r5
   478fa:	67ec      	str	r4, [r5, #124]	; 0x7c
   478fc:	f009 f83f 	bl	5097e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   47900:	4640      	mov	r0, r8
   47902:	4639      	mov	r1, r7
   47904:	f000 fbd8 	bl	480b8 <z_reschedule>
			return 0;
   47908:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   4790a:	b002      	add	sp, #8
   4790c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   47910:	69e0      	ldr	r0, [r4, #28]
   47912:	f003 ffba 	bl	4b88a <memcpy>
			msgq->write_ptr += msgq->msg_size;
   47916:	69e3      	ldr	r3, [r4, #28]
   47918:	68a2      	ldr	r2, [r4, #8]
   4791a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   4791c:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   4791e:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   47920:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   47922:	bf04      	itt	eq
   47924:	6923      	ldreq	r3, [r4, #16]
   47926:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   47928:	6a23      	ldr	r3, [r4, #32]
   4792a:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   4792c:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   47930:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   47932:	2110      	movs	r1, #16
   47934:	f009 faa8 	bl	50e88 <z_handle_obj_poll_events>
		result = 0;
   47938:	2000      	movs	r0, #0
	__asm__ volatile(
   4793a:	f387 8811 	msr	BASEPRI, r7
   4793e:	f3bf 8f6f 	isb	sy
	return result;
   47942:	e7e2      	b.n	4790a <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   47944:	ea52 0103 	orrs.w	r1, r2, r3
   47948:	d00a      	beq.n	47960 <z_impl_k_msgq_put+0xa0>
		_current->base.swap_data = (void *) data;
   4794a:	4907      	ldr	r1, [pc, #28]	; (47968 <z_impl_k_msgq_put+0xa8>)
   4794c:	6889      	ldr	r1, [r1, #8]
   4794e:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   47950:	e9cd 2300 	strd	r2, r3, [sp]
   47954:	4639      	mov	r1, r7
   47956:	4602      	mov	r2, r0
   47958:	4640      	mov	r0, r8
   4795a:	f000 fcfb 	bl	48354 <z_pend_curr>
		return result;
   4795e:	e7d4      	b.n	4790a <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   47960:	f06f 0022 	mvn.w	r0, #34	; 0x22
   47964:	e7e9      	b.n	4793a <z_impl_k_msgq_put+0x7a>
   47966:	bf00      	nop
   47968:	20006b90 	.word	0x20006b90

0004796c <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   4796c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4796e:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   47970:	f104 0708 	add.w	r7, r4, #8
{
   47974:	4608      	mov	r0, r1
	__asm__ volatile(
   47976:	f04f 0120 	mov.w	r1, #32
   4797a:	f3ef 8611 	mrs	r6, BASEPRI
   4797e:	f381 8812 	msr	BASEPRI_MAX, r1
   47982:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   47986:	6a21      	ldr	r1, [r4, #32]
   47988:	2900      	cmp	r1, #0
   4798a:	d031      	beq.n	479f0 <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   4798c:	68a2      	ldr	r2, [r4, #8]
   4798e:	69a1      	ldr	r1, [r4, #24]
   47990:	f003 ff7b 	bl	4b88a <memcpy>
		msgq->read_ptr += msgq->msg_size;
   47994:	69a3      	ldr	r3, [r4, #24]
   47996:	68a2      	ldr	r2, [r4, #8]
   47998:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   4799a:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   4799c:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   4799e:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   479a0:	bf04      	itt	eq
   479a2:	6923      	ldreq	r3, [r4, #16]
   479a4:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   479a6:	6a23      	ldr	r3, [r4, #32]
   479a8:	3b01      	subs	r3, #1
   479aa:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   479ac:	4620      	mov	r0, r4
   479ae:	f009 f856 	bl	50a5e <z_unpend_first_thread>
		if (pending_thread != NULL) {
   479b2:	4605      	mov	r5, r0
   479b4:	b360      	cbz	r0, 47a10 <z_impl_k_msgq_get+0xa4>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   479b6:	6941      	ldr	r1, [r0, #20]
   479b8:	68a2      	ldr	r2, [r4, #8]
   479ba:	69e0      	ldr	r0, [r4, #28]
   479bc:	f003 ff65 	bl	4b88a <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   479c0:	69e3      	ldr	r3, [r4, #28]
   479c2:	68a2      	ldr	r2, [r4, #8]
   479c4:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   479c6:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   479c8:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   479ca:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   479cc:	bf04      	itt	eq
   479ce:	6923      	ldreq	r3, [r4, #16]
   479d0:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   479d2:	6a23      	ldr	r3, [r4, #32]
   479d4:	3301      	adds	r3, #1
   479d6:	6223      	str	r3, [r4, #32]
   479d8:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   479da:	4628      	mov	r0, r5
   479dc:	67ec      	str	r4, [r5, #124]	; 0x7c
   479de:	f008 ffce 	bl	5097e <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   479e2:	4638      	mov	r0, r7
   479e4:	4631      	mov	r1, r6
   479e6:	f000 fb67 	bl	480b8 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   479ea:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   479ec:	b003      	add	sp, #12
   479ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   479f0:	ea52 0103 	orrs.w	r1, r2, r3
   479f4:	d00a      	beq.n	47a0c <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   479f6:	4909      	ldr	r1, [pc, #36]	; (47a1c <z_impl_k_msgq_get+0xb0>)
   479f8:	6889      	ldr	r1, [r1, #8]
   479fa:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   479fc:	e9cd 2300 	strd	r2, r3, [sp]
   47a00:	4631      	mov	r1, r6
   47a02:	4622      	mov	r2, r4
   47a04:	4638      	mov	r0, r7
   47a06:	f000 fca5 	bl	48354 <z_pend_curr>
		return result;
   47a0a:	e7ef      	b.n	479ec <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   47a0c:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   47a10:	f386 8811 	msr	BASEPRI, r6
   47a14:	f3bf 8f6f 	isb	sy
	return result;
   47a18:	e7e8      	b.n	479ec <z_impl_k_msgq_get+0x80>
   47a1a:	bf00      	nop
   47a1c:	20006b90 	.word	0x20006b90

00047a20 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   47a20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   47a24:	4604      	mov	r4, r0
   47a26:	4617      	mov	r7, r2
   47a28:	461e      	mov	r6, r3
	__asm__ volatile(
   47a2a:	f04f 0320 	mov.w	r3, #32
   47a2e:	f3ef 8811 	mrs	r8, BASEPRI
   47a32:	f383 8812 	msr	BASEPRI_MAX, r3
   47a36:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   47a3a:	68c3      	ldr	r3, [r0, #12]
   47a3c:	4a32      	ldr	r2, [pc, #200]	; (47b08 <z_impl_k_mutex_lock+0xe8>)
   47a3e:	b16b      	cbz	r3, 47a5c <z_impl_k_mutex_lock+0x3c>
   47a40:	6880      	ldr	r0, [r0, #8]
   47a42:	6891      	ldr	r1, [r2, #8]
   47a44:	4288      	cmp	r0, r1
   47a46:	d019      	beq.n	47a7c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   47a48:	ea57 0306 	orrs.w	r3, r7, r6
   47a4c:	d118      	bne.n	47a80 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   47a4e:	f388 8811 	msr	BASEPRI, r8
   47a52:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   47a56:	f06f 000f 	mvn.w	r0, #15
   47a5a:	e00c      	b.n	47a76 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   47a5c:	6891      	ldr	r1, [r2, #8]
   47a5e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   47a62:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   47a64:	3301      	adds	r3, #1
   47a66:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   47a68:	6893      	ldr	r3, [r2, #8]
   47a6a:	60a3      	str	r3, [r4, #8]
   47a6c:	f388 8811 	msr	BASEPRI, r8
   47a70:	f3bf 8f6f 	isb	sy
		return 0;
   47a74:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   47a76:	b002      	add	sp, #8
   47a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   47a7c:	6921      	ldr	r1, [r4, #16]
   47a7e:	e7f0      	b.n	47a62 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   47a80:	f991 100e 	ldrsb.w	r1, [r1, #14]
   47a84:	f990 300e 	ldrsb.w	r3, [r0, #14]
   47a88:	4299      	cmp	r1, r3
   47a8a:	bfa8      	it	ge
   47a8c:	4619      	movge	r1, r3
   47a8e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   47a92:	4291      	cmp	r1, r2
   47a94:	bfb8      	it	lt
   47a96:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   47a98:	428b      	cmp	r3, r1
   47a9a:	dd2e      	ble.n	47afa <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   47a9c:	f008 fd45 	bl	5052a <adjust_owner_prio.isra.0>
   47aa0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   47aa2:	e9cd 7600 	strd	r7, r6, [sp]
   47aa6:	4819      	ldr	r0, [pc, #100]	; (47b0c <z_impl_k_mutex_lock+0xec>)
   47aa8:	4622      	mov	r2, r4
   47aaa:	4641      	mov	r1, r8
   47aac:	f000 fc52 	bl	48354 <z_pend_curr>
	if (got_mutex == 0) {
   47ab0:	2800      	cmp	r0, #0
   47ab2:	d0e0      	beq.n	47a76 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   47ab4:	f04f 0320 	mov.w	r3, #32
   47ab8:	f3ef 8611 	mrs	r6, BASEPRI
   47abc:	f383 8812 	msr	BASEPRI_MAX, r3
   47ac0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   47ac4:	6823      	ldr	r3, [r4, #0]
   47ac6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   47ac8:	429c      	cmp	r4, r3
   47aca:	d00a      	beq.n	47ae2 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   47acc:	b14b      	cbz	r3, 47ae2 <z_impl_k_mutex_lock+0xc2>
   47ace:	f993 300e 	ldrsb.w	r3, [r3, #14]
   47ad2:	4299      	cmp	r1, r3
   47ad4:	bfa8      	it	ge
   47ad6:	4619      	movge	r1, r3
   47ad8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   47adc:	4299      	cmp	r1, r3
   47ade:	bfb8      	it	lt
   47ae0:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   47ae2:	68a0      	ldr	r0, [r4, #8]
   47ae4:	f008 fd21 	bl	5052a <adjust_owner_prio.isra.0>
   47ae8:	b900      	cbnz	r0, 47aec <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   47aea:	b145      	cbz	r5, 47afe <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   47aec:	4807      	ldr	r0, [pc, #28]	; (47b0c <z_impl_k_mutex_lock+0xec>)
   47aee:	4631      	mov	r1, r6
   47af0:	f000 fae2 	bl	480b8 <z_reschedule>
	return -EAGAIN;
   47af4:	f06f 000a 	mvn.w	r0, #10
   47af8:	e7bd      	b.n	47a76 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   47afa:	2500      	movs	r5, #0
   47afc:	e7d1      	b.n	47aa2 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   47afe:	f386 8811 	msr	BASEPRI, r6
   47b02:	f3bf 8f6f 	isb	sy
   47b06:	e7f5      	b.n	47af4 <z_impl_k_mutex_lock+0xd4>
   47b08:	20006b90 	.word	0x20006b90
   47b0c:	20006de9 	.word	0x20006de9

00047b10 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   47b10:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   47b12:	6883      	ldr	r3, [r0, #8]
{
   47b14:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   47b16:	2b00      	cmp	r3, #0
   47b18:	d032      	beq.n	47b80 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   47b1a:	4a1c      	ldr	r2, [pc, #112]	; (47b8c <z_impl_k_mutex_unlock+0x7c>)
   47b1c:	6892      	ldr	r2, [r2, #8]
   47b1e:	4293      	cmp	r3, r2
   47b20:	d131      	bne.n	47b86 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   47b22:	7bda      	ldrb	r2, [r3, #15]
   47b24:	3a01      	subs	r2, #1
   47b26:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   47b28:	68c3      	ldr	r3, [r0, #12]
   47b2a:	2b01      	cmp	r3, #1
   47b2c:	d905      	bls.n	47b3a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   47b2e:	3b01      	subs	r3, #1
   47b30:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   47b32:	f000 fc9b 	bl	4846c <k_sched_unlock>

	return 0;
   47b36:	2000      	movs	r0, #0
}
   47b38:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   47b3a:	f04f 0320 	mov.w	r3, #32
   47b3e:	f3ef 8511 	mrs	r5, BASEPRI
   47b42:	f383 8812 	msr	BASEPRI_MAX, r3
   47b46:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   47b4a:	6901      	ldr	r1, [r0, #16]
   47b4c:	6880      	ldr	r0, [r0, #8]
   47b4e:	f008 fcec 	bl	5052a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   47b52:	4620      	mov	r0, r4
   47b54:	f008 ff83 	bl	50a5e <z_unpend_first_thread>
	mutex->owner = new_owner;
   47b58:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   47b5a:	b158      	cbz	r0, 47b74 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   47b5c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   47b60:	6122      	str	r2, [r4, #16]
   47b62:	2200      	movs	r2, #0
   47b64:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   47b66:	f008 ff0a 	bl	5097e <z_ready_thread>
		z_reschedule(&lock, key);
   47b6a:	4809      	ldr	r0, [pc, #36]	; (47b90 <z_impl_k_mutex_unlock+0x80>)
   47b6c:	4629      	mov	r1, r5
   47b6e:	f000 faa3 	bl	480b8 <z_reschedule>
   47b72:	e7de      	b.n	47b32 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   47b74:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   47b76:	f385 8811 	msr	BASEPRI, r5
   47b7a:	f3bf 8f6f 	isb	sy
   47b7e:	e7d8      	b.n	47b32 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   47b80:	f06f 0015 	mvn.w	r0, #21
   47b84:	e7d8      	b.n	47b38 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   47b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   47b8a:	e7d5      	b.n	47b38 <z_impl_k_mutex_unlock+0x28>
   47b8c:	20006b90 	.word	0x20006b90
   47b90:	20006de9 	.word	0x20006de9

00047b94 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   47b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   47b96:	4611      	mov	r1, r2
	__asm__ volatile(
   47b98:	f04f 0220 	mov.w	r2, #32
   47b9c:	f3ef 8511 	mrs	r5, BASEPRI
   47ba0:	f382 8812 	msr	BASEPRI_MAX, r2
   47ba4:	f3bf 8f6f 	isb	sy
   47ba8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   47baa:	b19c      	cbz	r4, 47bd4 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   47bac:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   47bae:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   47bb0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   47bb4:	4294      	cmp	r4, r2
	list->head = node;
   47bb6:	6003      	str	r3, [r0, #0]
	list->tail = node;
   47bb8:	bf08      	it	eq
   47bba:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   47bbc:	2101      	movs	r1, #1
   47bbe:	4620      	mov	r0, r4
   47bc0:	f008 fd27 	bl	50612 <z_queue_node_peek>
   47bc4:	4604      	mov	r4, r0
	__asm__ volatile(
   47bc6:	f385 8811 	msr	BASEPRI, r5
   47bca:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   47bce:	4620      	mov	r0, r4
   47bd0:	b003      	add	sp, #12
   47bd2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   47bd4:	ea51 0203 	orrs.w	r2, r1, r3
   47bd8:	d0f5      	beq.n	47bc6 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   47bda:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   47bde:	e9cd 1300 	strd	r1, r3, [sp]
   47be2:	4610      	mov	r0, r2
   47be4:	4629      	mov	r1, r5
   47be6:	f000 fbb5 	bl	48354 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   47bea:	2800      	cmp	r0, #0
   47bec:	d1ef      	bne.n	47bce <z_impl_k_queue_get+0x3a>
   47bee:	4b02      	ldr	r3, [pc, #8]	; (47bf8 <z_impl_k_queue_get+0x64>)
   47bf0:	689b      	ldr	r3, [r3, #8]
   47bf2:	695c      	ldr	r4, [r3, #20]
   47bf4:	e7eb      	b.n	47bce <z_impl_k_queue_get+0x3a>
   47bf6:	bf00      	nop
   47bf8:	20006b90 	.word	0x20006b90

00047bfc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   47bfc:	b538      	push	{r3, r4, r5, lr}
   47bfe:	4604      	mov	r4, r0
	__asm__ volatile(
   47c00:	f04f 0320 	mov.w	r3, #32
   47c04:	f3ef 8511 	mrs	r5, BASEPRI
   47c08:	f383 8812 	msr	BASEPRI_MAX, r3
   47c0c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   47c10:	f008 ff25 	bl	50a5e <z_unpend_first_thread>

	if (thread != NULL) {
   47c14:	b148      	cbz	r0, 47c2a <z_impl_k_sem_give+0x2e>
   47c16:	2200      	movs	r2, #0
   47c18:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   47c1a:	f008 feb0 	bl	5097e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   47c1e:	4629      	mov	r1, r5
   47c20:	4808      	ldr	r0, [pc, #32]	; (47c44 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   47c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   47c26:	f000 ba47 	b.w	480b8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   47c2a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   47c2e:	429a      	cmp	r2, r3
   47c30:	bf18      	it	ne
   47c32:	3301      	addne	r3, #1
   47c34:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   47c36:	2102      	movs	r1, #2
   47c38:	f104 0010 	add.w	r0, r4, #16
   47c3c:	f009 f924 	bl	50e88 <z_handle_obj_poll_events>
}
   47c40:	e7ed      	b.n	47c1e <z_impl_k_sem_give+0x22>
   47c42:	bf00      	nop
   47c44:	20006de9 	.word	0x20006de9

00047c48 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   47c48:	b513      	push	{r0, r1, r4, lr}
   47c4a:	f04f 0420 	mov.w	r4, #32
   47c4e:	f3ef 8111 	mrs	r1, BASEPRI
   47c52:	f384 8812 	msr	BASEPRI_MAX, r4
   47c56:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   47c5a:	6884      	ldr	r4, [r0, #8]
   47c5c:	b144      	cbz	r4, 47c70 <z_impl_k_sem_take+0x28>
		sem->count--;
   47c5e:	3c01      	subs	r4, #1
   47c60:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   47c62:	f381 8811 	msr	BASEPRI, r1
   47c66:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   47c6a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   47c6c:	b002      	add	sp, #8
   47c6e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   47c70:	ea52 0403 	orrs.w	r4, r2, r3
   47c74:	d106      	bne.n	47c84 <z_impl_k_sem_take+0x3c>
   47c76:	f381 8811 	msr	BASEPRI, r1
   47c7a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   47c7e:	f06f 000f 	mvn.w	r0, #15
   47c82:	e7f3      	b.n	47c6c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   47c84:	e9cd 2300 	strd	r2, r3, [sp]
   47c88:	4602      	mov	r2, r0
   47c8a:	4802      	ldr	r0, [pc, #8]	; (47c94 <z_impl_k_sem_take+0x4c>)
   47c8c:	f000 fb62 	bl	48354 <z_pend_curr>
	return ret;
   47c90:	e7ec      	b.n	47c6c <z_impl_k_sem_take+0x24>
   47c92:	bf00      	nop
   47c94:	20006de9 	.word	0x20006de9

00047c98 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   47c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   47c9a:	4b09      	ldr	r3, [pc, #36]	; (47cc0 <k_sys_work_q_init+0x28>)
   47c9c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   47c9e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   47ca0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   47ca2:	9300      	str	r3, [sp, #0]
   47ca4:	4907      	ldr	r1, [pc, #28]	; (47cc4 <k_sys_work_q_init+0x2c>)
   47ca6:	4808      	ldr	r0, [pc, #32]	; (47cc8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   47ca8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   47cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   47cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   47cb4:	f000 f91e 	bl	47ef4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   47cb8:	4620      	mov	r0, r4
   47cba:	b004      	add	sp, #16
   47cbc:	bd10      	pop	{r4, pc}
   47cbe:	bf00      	nop
   47cc0:	00053d4a 	.word	0x00053d4a
   47cc4:	20009db0 	.word	0x20009db0
   47cc8:	20003af0 	.word	0x20003af0

00047ccc <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   47ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   47cd0:	f8df 9130 	ldr.w	r9, [pc, #304]	; 47e04 <work_queue_main+0x138>
   47cd4:	b085      	sub	sp, #20
   47cd6:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   47cd8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   47cdc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	__asm__ volatile(
   47ce0:	f04f 0320 	mov.w	r3, #32
   47ce4:	f3ef 8811 	mrs	r8, BASEPRI
   47ce8:	f383 8812 	msr	BASEPRI_MAX, r3
   47cec:	f3bf 8f6f 	isb	sy
   47cf0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   47cf4:	b98d      	cbnz	r5, 47d1a <work_queue_main+0x4e>
		} else if (flag_test_and_clear(&queue->flags,
   47cf6:	2102      	movs	r1, #2
   47cf8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   47cfc:	f008 fd02 	bl	50704 <flag_test_and_clear>
   47d00:	2800      	cmp	r0, #0
   47d02:	d135      	bne.n	47d70 <work_queue_main+0xa4>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   47d04:	2300      	movs	r3, #0
   47d06:	e9cd 6700 	strd	r6, r7, [sp]
   47d0a:	9302      	str	r3, [sp, #8]
   47d0c:	f104 0288 	add.w	r2, r4, #136	; 0x88
   47d10:	4641      	mov	r1, r8
   47d12:	483d      	ldr	r0, [pc, #244]	; (47e08 <work_queue_main+0x13c>)
   47d14:	f000 fcd6 	bl	486c4 <z_sched_wait>
			continue;
   47d18:	e7e2      	b.n	47ce0 <work_queue_main+0x14>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   47d1a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   47d1e:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   47d20:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   47d24:	4295      	cmp	r5, r2
   47d26:	d101      	bne.n	47d2c <work_queue_main+0x60>
	list->tail = node;
   47d28:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   47d2c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   47d30:	f043 0302 	orr.w	r3, r3, #2
   47d34:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   47d38:	68eb      	ldr	r3, [r5, #12]
   47d3a:	f023 0304 	bic.w	r3, r3, #4
   47d3e:	f043 0301 	orr.w	r3, r3, #1
   47d42:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   47d44:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   47d46:	f388 8811 	msr	BASEPRI, r8
   47d4a:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   47d4e:	4628      	mov	r0, r5
   47d50:	4798      	blx	r3
	__asm__ volatile(
   47d52:	f04f 0320 	mov.w	r3, #32
   47d56:	f3ef 8b11 	mrs	fp, BASEPRI
   47d5a:	f383 8812 	msr	BASEPRI_MAX, r3
   47d5e:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   47d62:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   47d64:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   47d66:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   47d6a:	d40b      	bmi.n	47d84 <work_queue_main+0xb8>
	*flagp &= ~BIT(bit);
   47d6c:	60ea      	str	r2, [r5, #12]
   47d6e:	e00f      	b.n	47d90 <work_queue_main+0xc4>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   47d70:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   47d74:	2200      	movs	r2, #0
   47d76:	2101      	movs	r1, #1
   47d78:	4628      	mov	r0, r5
   47d7a:	f008 fe98 	bl	50aae <z_sched_wake>
   47d7e:	2800      	cmp	r0, #0
   47d80:	d1f8      	bne.n	47d74 <work_queue_main+0xa8>
   47d82:	e7bf      	b.n	47d04 <work_queue_main+0x38>
	return list->head;
   47d84:	f8d9 0000 	ldr.w	r0, [r9]
	*flagp &= ~BIT(bit);
   47d88:	f023 0303 	bic.w	r3, r3, #3
   47d8c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   47d8e:	b970      	cbnz	r0, 47dae <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   47d90:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   47d94:	f023 0302 	bic.w	r3, r3, #2
   47d98:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   47d9c:	f38b 8811 	msr	BASEPRI, fp
   47da0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   47da4:	05d8      	lsls	r0, r3, #23
   47da6:	d49b      	bmi.n	47ce0 <work_queue_main+0x14>
	z_impl_k_yield();
   47da8:	f000 fb88 	bl	484bc <z_impl_k_yield>
}
   47dac:	e798      	b.n	47ce0 <work_queue_main+0x14>
	return node->next;
   47dae:	f04f 0800 	mov.w	r8, #0
   47db2:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   47db6:	4642      	mov	r2, r8
		if (wc->work == work) {
   47db8:	6843      	ldr	r3, [r0, #4]
   47dba:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   47dbc:	4601      	mov	r1, r0
		if (wc->work == work) {
   47dbe:	d111      	bne.n	47de4 <work_queue_main+0x118>
	return node->next;
   47dc0:	6803      	ldr	r3, [r0, #0]
	return list->tail;
   47dc2:	f8d9 1004 	ldr.w	r1, [r9, #4]
Z_GENLIST_REMOVE(slist, snode)
   47dc6:	f1b8 0f00 	cmp.w	r8, #0
   47dca:	d113      	bne.n	47df4 <work_queue_main+0x128>
   47dcc:	4288      	cmp	r0, r1
	list->head = node;
   47dce:	f8c9 3000 	str.w	r3, [r9]
Z_GENLIST_REMOVE(slist, snode)
   47dd2:	d101      	bne.n	47dd8 <work_queue_main+0x10c>
	list->tail = node;
   47dd4:	f8c9 3004 	str.w	r3, [r9, #4]
	parent->next = child;
   47dd8:	f840 2b08 	str.w	r2, [r0], #8
	z_impl_k_sem_give(sem);
   47ddc:	f7ff ff0e 	bl	47bfc <z_impl_k_sem_give>
}
   47de0:	4641      	mov	r1, r8
   47de2:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   47de4:	f1ba 0f00 	cmp.w	sl, #0
   47de8:	d0d2      	beq.n	47d90 <work_queue_main+0xc4>
	return node->next;
   47dea:	4650      	mov	r0, sl
   47dec:	4688      	mov	r8, r1
   47dee:	f8da a000 	ldr.w	sl, [sl]
   47df2:	e7e1      	b.n	47db8 <work_queue_main+0xec>
Z_GENLIST_REMOVE(slist, snode)
   47df4:	4288      	cmp	r0, r1
	parent->next = child;
   47df6:	f8c8 3000 	str.w	r3, [r8]
	list->tail = node;
   47dfa:	bf08      	it	eq
   47dfc:	f8c9 8004 	streq.w	r8, [r9, #4]
}
   47e00:	e7ea      	b.n	47dd8 <work_queue_main+0x10c>
   47e02:	bf00      	nop
   47e04:	20006bb8 	.word	0x20006bb8
   47e08:	20006de9 	.word	0x20006de9

00047e0c <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   47e0c:	68c3      	ldr	r3, [r0, #12]
{
   47e0e:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   47e10:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   47e14:	079b      	lsls	r3, r3, #30
{
   47e16:	4605      	mov	r5, r0
   47e18:	460c      	mov	r4, r1
	if (ret) {
   47e1a:	d50d      	bpl.n	47e38 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   47e1c:	2201      	movs	r2, #1
   47e1e:	2100      	movs	r1, #0
   47e20:	f104 0008 	add.w	r0, r4, #8
   47e24:	f008 fc5e 	bl	506e4 <z_impl_k_sem_init>
	parent->next = child;
   47e28:	2300      	movs	r3, #0
   47e2a:	6023      	str	r3, [r4, #0]
	return list->tail;
   47e2c:	4b05      	ldr	r3, [pc, #20]	; (47e44 <cancel_sync_locked+0x38>)
	canceler->work = work;
   47e2e:	6065      	str	r5, [r4, #4]
   47e30:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   47e32:	b91a      	cbnz	r2, 47e3c <cancel_sync_locked+0x30>
	list->head = node;
   47e34:	e9c3 4400 	strd	r4, r4, [r3]
}
   47e38:	4630      	mov	r0, r6
   47e3a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   47e3c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   47e3e:	605c      	str	r4, [r3, #4]
}
   47e40:	e7fa      	b.n	47e38 <cancel_sync_locked+0x2c>
   47e42:	bf00      	nop
   47e44:	20006bb8 	.word	0x20006bb8

00047e48 <submit_to_queue_locked>:
{
   47e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   47e4a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   47e4c:	079a      	lsls	r2, r3, #30
{
   47e4e:	4604      	mov	r4, r0
   47e50:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   47e52:	f3c3 0540 	ubfx	r5, r3, #1, #1
   47e56:	d41f      	bmi.n	47e98 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   47e58:	075f      	lsls	r7, r3, #29
   47e5a:	d41f      	bmi.n	47e9c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   47e5c:	680a      	ldr	r2, [r1, #0]
   47e5e:	b90a      	cbnz	r2, 47e64 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   47e60:	6882      	ldr	r2, [r0, #8]
   47e62:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   47e64:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   47e66:	bf44      	itt	mi
   47e68:	68a3      	ldrmi	r3, [r4, #8]
   47e6a:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   47e6c:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   47e6e:	bf4c      	ite	mi
   47e70:	2502      	movmi	r5, #2
		ret = 1;
   47e72:	2501      	movpl	r5, #1
	if (queue == NULL) {
   47e74:	b37f      	cbz	r7, 47ed6 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   47e76:	4b1b      	ldr	r3, [pc, #108]	; (47ee4 <submit_to_queue_locked+0x9c>)
   47e78:	689b      	ldr	r3, [r3, #8]
   47e7a:	42bb      	cmp	r3, r7
   47e7c:	d111      	bne.n	47ea2 <submit_to_queue_locked+0x5a>
   47e7e:	f008 fb42 	bl	50506 <k_is_in_isr>
   47e82:	f080 0001 	eor.w	r0, r0, #1
   47e86:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   47e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   47e8c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   47e8e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   47e92:	d523      	bpl.n	47edc <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   47e94:	b13a      	cbz	r2, 47ea6 <submit_to_queue_locked+0x5e>
   47e96:	b940      	cbnz	r0, 47eaa <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   47e98:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   47e9c:	2300      	movs	r3, #0
   47e9e:	6033      	str	r3, [r6, #0]
	return ret;
   47ea0:	e013      	b.n	47eca <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   47ea2:	2000      	movs	r0, #0
   47ea4:	e7f0      	b.n	47e88 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   47ea6:	071b      	lsls	r3, r3, #28
   47ea8:	d4f6      	bmi.n	47e98 <submit_to_queue_locked+0x50>
	parent->next = child;
   47eaa:	2300      	movs	r3, #0
   47eac:	6023      	str	r3, [r4, #0]
	return list->tail;
   47eae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   47eb2:	b963      	cbnz	r3, 47ece <submit_to_queue_locked+0x86>
	list->head = node;
   47eb4:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   47eb8:	4638      	mov	r0, r7
   47eba:	f008 fc3c 	bl	50736 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   47ebe:	68e3      	ldr	r3, [r4, #12]
   47ec0:	f043 0304 	orr.w	r3, r3, #4
   47ec4:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   47ec6:	6833      	ldr	r3, [r6, #0]
   47ec8:	60a3      	str	r3, [r4, #8]
}
   47eca:	4628      	mov	r0, r5
   47ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   47ece:	601c      	str	r4, [r3, #0]
	list->tail = node;
   47ed0:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   47ed4:	e7f0      	b.n	47eb8 <submit_to_queue_locked+0x70>
		return -EINVAL;
   47ed6:	f06f 0515 	mvn.w	r5, #21
   47eda:	e7df      	b.n	47e9c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   47edc:	f06f 0512 	mvn.w	r5, #18
   47ee0:	e7dc      	b.n	47e9c <submit_to_queue_locked+0x54>
   47ee2:	bf00      	nop
   47ee4:	20006b90 	.word	0x20006b90

00047ee8 <k_work_submit>:
{
   47ee8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   47eea:	4801      	ldr	r0, [pc, #4]	; (47ef0 <k_work_submit+0x8>)
   47eec:	f008 bc83 	b.w	507f6 <k_work_submit_to_queue>
   47ef0:	20003af0 	.word	0x20003af0

00047ef4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   47ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
   47ef6:	b089      	sub	sp, #36	; 0x24
   47ef8:	4604      	mov	r4, r0
	list->head = NULL;
   47efa:	2000      	movs	r0, #0
	list->tail = NULL;
   47efc:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   47f00:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   47f02:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   47f06:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   47f0a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   47f0e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   47f12:	b31d      	cbz	r5, 47f5c <k_work_queue_start+0x68>
   47f14:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   47f16:	2800      	cmp	r0, #0
   47f18:	f240 1001 	movw	r0, #257	; 0x101
   47f1c:	bf08      	it	eq
   47f1e:	2001      	moveq	r0, #1
	*flagp = flags;
   47f20:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   47f24:	2000      	movs	r0, #0
   47f26:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   47f2a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   47f2e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   47f32:	e9cd 0001 	strd	r0, r0, [sp, #4]
   47f36:	e9cd 6706 	strd	r6, r7, [sp, #24]
   47f3a:	4b09      	ldr	r3, [pc, #36]	; (47f60 <k_work_queue_start+0x6c>)
   47f3c:	9400      	str	r4, [sp, #0]
   47f3e:	4620      	mov	r0, r4
   47f40:	f7ff fc1a 	bl	47778 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   47f44:	b125      	cbz	r5, 47f50 <k_work_queue_start+0x5c>
   47f46:	6829      	ldr	r1, [r5, #0]
   47f48:	b111      	cbz	r1, 47f50 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   47f4a:	4620      	mov	r0, r4
   47f4c:	f008 fae1 	bl	50512 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   47f50:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   47f52:	b009      	add	sp, #36	; 0x24
   47f54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   47f58:	f008 bade 	b.w	50518 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   47f5c:	2001      	movs	r0, #1
   47f5e:	e7df      	b.n	47f20 <k_work_queue_start+0x2c>
   47f60:	00047ccd 	.word	0x00047ccd

00047f64 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   47f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   47f66:	9001      	str	r0, [sp, #4]
   47f68:	4608      	mov	r0, r1
	__asm__ volatile(
   47f6a:	f04f 0120 	mov.w	r1, #32
   47f6e:	f3ef 8411 	mrs	r4, BASEPRI
   47f72:	f381 8812 	msr	BASEPRI_MAX, r1
   47f76:	f3bf 8f6f 	isb	sy
	return *flagp;
   47f7a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   47f7c:	f011 0f0e 	tst.w	r1, #14
   47f80:	d116      	bne.n	47fb0 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   47f82:	ea53 0502 	orrs.w	r5, r3, r2
   47f86:	d108      	bne.n	47f9a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   47f88:	a901      	add	r1, sp, #4
   47f8a:	f7ff ff5d 	bl	47e48 <submit_to_queue_locked>
	__asm__ volatile(
   47f8e:	f384 8811 	msr	BASEPRI, r4
   47f92:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   47f96:	b003      	add	sp, #12
   47f98:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   47f9a:	f041 0108 	orr.w	r1, r1, #8
   47f9e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   47fa0:	9901      	ldr	r1, [sp, #4]
   47fa2:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   47fa4:	3010      	adds	r0, #16
   47fa6:	4903      	ldr	r1, [pc, #12]	; (47fb4 <k_work_schedule_for_queue+0x50>)
   47fa8:	f000 fc02 	bl	487b0 <z_add_timeout>
	return ret;
   47fac:	2001      	movs	r0, #1
   47fae:	e7ee      	b.n	47f8e <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   47fb0:	2000      	movs	r0, #0
   47fb2:	e7ec      	b.n	47f8e <k_work_schedule_for_queue+0x2a>
   47fb4:	000507a7 	.word	0x000507a7

00047fb8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   47fb8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   47fba:	4801      	ldr	r0, [pc, #4]	; (47fc0 <k_work_schedule+0x8>)
   47fbc:	f7ff bfd2 	b.w	47f64 <k_work_schedule_for_queue>
   47fc0:	20003af0 	.word	0x20003af0

00047fc4 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   47fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   47fc6:	460c      	mov	r4, r1
   47fc8:	9001      	str	r0, [sp, #4]
   47fca:	4616      	mov	r6, r2
   47fcc:	461d      	mov	r5, r3
	__asm__ volatile(
   47fce:	f04f 0320 	mov.w	r3, #32
   47fd2:	f3ef 8711 	mrs	r7, BASEPRI
   47fd6:	f383 8812 	msr	BASEPRI_MAX, r3
   47fda:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   47fde:	4608      	mov	r0, r1
   47fe0:	f008 fb9b 	bl	5071a <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   47fe4:	ea55 0306 	orrs.w	r3, r5, r6
   47fe8:	d109      	bne.n	47ffe <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   47fea:	a901      	add	r1, sp, #4
   47fec:	4620      	mov	r0, r4
   47fee:	f7ff ff2b 	bl	47e48 <submit_to_queue_locked>
	__asm__ volatile(
   47ff2:	f387 8811 	msr	BASEPRI, r7
   47ff6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   47ffa:	b003      	add	sp, #12
   47ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   47ffe:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   48000:	4906      	ldr	r1, [pc, #24]	; (4801c <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   48002:	f043 0308 	orr.w	r3, r3, #8
   48006:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   48008:	9b01      	ldr	r3, [sp, #4]
   4800a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   4800c:	f104 0010 	add.w	r0, r4, #16
   48010:	4632      	mov	r2, r6
   48012:	462b      	mov	r3, r5
   48014:	f000 fbcc 	bl	487b0 <z_add_timeout>
	return ret;
   48018:	2001      	movs	r0, #1
   4801a:	e7ea      	b.n	47ff2 <k_work_reschedule_for_queue+0x2e>
   4801c:	000507a7 	.word	0x000507a7

00048020 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   48020:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   48022:	4801      	ldr	r0, [pc, #4]	; (48028 <k_work_reschedule+0x8>)
   48024:	f7ff bfce 	b.w	47fc4 <k_work_reschedule_for_queue>
   48028:	20003af0 	.word	0x20003af0

0004802c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   4802c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   4802e:	4c08      	ldr	r4, [pc, #32]	; (48050 <z_reset_time_slice+0x24>)
   48030:	6823      	ldr	r3, [r4, #0]
   48032:	b15b      	cbz	r3, 4804c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   48034:	f7fd fb8e 	bl	45754 <sys_clock_elapsed>
   48038:	4603      	mov	r3, r0
   4803a:	6820      	ldr	r0, [r4, #0]
   4803c:	4a05      	ldr	r2, [pc, #20]	; (48054 <z_reset_time_slice+0x28>)
   4803e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   48040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   48044:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   48046:	2100      	movs	r1, #0
   48048:	f008 bd74 	b.w	50b34 <z_set_timeout_expiry>
}
   4804c:	bd10      	pop	{r4, pc}
   4804e:	bf00      	nop
   48050:	20006bc8 	.word	0x20006bc8
   48054:	20006b90 	.word	0x20006b90

00048058 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   48058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4805a:	4604      	mov	r4, r0
   4805c:	460d      	mov	r5, r1
	__asm__ volatile(
   4805e:	f04f 0320 	mov.w	r3, #32
   48062:	f3ef 8611 	mrs	r6, BASEPRI
   48066:	f383 8812 	msr	BASEPRI_MAX, r3
   4806a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   4806e:	4b0f      	ldr	r3, [pc, #60]	; (480ac <k_sched_time_slice_set+0x54>)
   48070:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   48072:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   48076:	f240 30e7 	movw	r0, #999	; 0x3e7
   4807a:	6119      	str	r1, [r3, #16]
   4807c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48080:	2300      	movs	r3, #0
   48082:	fbe4 0107 	umlal	r0, r1, r4, r7
   48086:	f7de f83b 	bl	26100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   4808a:	2c00      	cmp	r4, #0
   4808c:	4b08      	ldr	r3, [pc, #32]	; (480b0 <k_sched_time_slice_set+0x58>)
   4808e:	dc09      	bgt.n	480a4 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   48090:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   48092:	4b08      	ldr	r3, [pc, #32]	; (480b4 <k_sched_time_slice_set+0x5c>)
   48094:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   48096:	f7ff ffc9 	bl	4802c <z_reset_time_slice>
	__asm__ volatile(
   4809a:	f386 8811 	msr	BASEPRI, r6
   4809e:	f3bf 8f6f 	isb	sy
	}
}
   480a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   480a4:	2802      	cmp	r0, #2
   480a6:	bfb8      	it	lt
   480a8:	2002      	movlt	r0, #2
   480aa:	e7f1      	b.n	48090 <k_sched_time_slice_set+0x38>
   480ac:	20006b90 	.word	0x20006b90
   480b0:	20006bc8 	.word	0x20006bc8
   480b4:	20006bc4 	.word	0x20006bc4

000480b8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   480b8:	b949      	cbnz	r1, 480ce <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   480ba:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   480be:	b930      	cbnz	r0, 480ce <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   480c0:	4b05      	ldr	r3, [pc, #20]	; (480d8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   480c2:	69da      	ldr	r2, [r3, #28]
   480c4:	689b      	ldr	r3, [r3, #8]
   480c6:	429a      	cmp	r2, r3
   480c8:	d001      	beq.n	480ce <z_reschedule+0x16>
	ret = arch_swap(key);
   480ca:	f7e4 bb5d 	b.w	2c788 <arch_swap>
   480ce:	f381 8811 	msr	BASEPRI, r1
   480d2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   480d6:	4770      	bx	lr
   480d8:	20006b90 	.word	0x20006b90

000480dc <k_sched_lock>:
	__asm__ volatile(
   480dc:	f04f 0320 	mov.w	r3, #32
   480e0:	f3ef 8111 	mrs	r1, BASEPRI
   480e4:	f383 8812 	msr	BASEPRI_MAX, r3
   480e8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   480ec:	4b04      	ldr	r3, [pc, #16]	; (48100 <k_sched_lock+0x24>)
   480ee:	689a      	ldr	r2, [r3, #8]
   480f0:	7bd3      	ldrb	r3, [r2, #15]
   480f2:	3b01      	subs	r3, #1
   480f4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   480f6:	f381 8811 	msr	BASEPRI, r1
   480fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   480fe:	4770      	bx	lr
   48100:	20006b90 	.word	0x20006b90

00048104 <update_cache>:
{
   48104:	b538      	push	{r3, r4, r5, lr}
   48106:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   48108:	480b      	ldr	r0, [pc, #44]	; (48138 <update_cache+0x34>)
   4810a:	4d0c      	ldr	r5, [pc, #48]	; (4813c <update_cache+0x38>)
   4810c:	f008 fc31 	bl	50972 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   48110:	4604      	mov	r4, r0
   48112:	b900      	cbnz	r0, 48116 <update_cache+0x12>
   48114:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   48116:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   48118:	b93a      	cbnz	r2, 4812a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   4811a:	7b5a      	ldrb	r2, [r3, #13]
   4811c:	06d2      	lsls	r2, r2, #27
   4811e:	d104      	bne.n	4812a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   48120:	69a2      	ldr	r2, [r4, #24]
   48122:	b912      	cbnz	r2, 4812a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   48124:	89da      	ldrh	r2, [r3, #14]
   48126:	2a7f      	cmp	r2, #127	; 0x7f
   48128:	d804      	bhi.n	48134 <update_cache+0x30>
		if (thread != _current) {
   4812a:	429c      	cmp	r4, r3
   4812c:	d001      	beq.n	48132 <update_cache+0x2e>
			z_reset_time_slice();
   4812e:	f7ff ff7d 	bl	4802c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   48132:	4623      	mov	r3, r4
   48134:	61eb      	str	r3, [r5, #28]
}
   48136:	bd38      	pop	{r3, r4, r5, pc}
   48138:	20006bb0 	.word	0x20006bb0
   4813c:	20006b90 	.word	0x20006b90

00048140 <move_thread_to_end_of_prio_q>:
{
   48140:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   48142:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   48146:	7b43      	ldrb	r3, [r0, #13]
   48148:	2a00      	cmp	r2, #0
{
   4814a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   4814c:	da04      	bge.n	48158 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4814e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   48152:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   48154:	f008 fbb8 	bl	508c8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   48158:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   4815a:	4a15      	ldr	r2, [pc, #84]	; (481b0 <move_thread_to_end_of_prio_q+0x70>)
   4815c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   48160:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   48162:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48166:	f102 0420 	add.w	r4, r2, #32
   4816a:	42a3      	cmp	r3, r4
   4816c:	d01a      	beq.n	481a4 <move_thread_to_end_of_prio_q+0x64>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   4816e:	b1cb      	cbz	r3, 481a4 <move_thread_to_end_of_prio_q+0x64>
	int32_t b1 = thread_1->base.prio;
   48170:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   48174:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   48178:	42b5      	cmp	r5, r6
   4817a:	d00e      	beq.n	4819a <move_thread_to_end_of_prio_q+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   4817c:	42ae      	cmp	r6, r5
   4817e:	dd0c      	ble.n	4819a <move_thread_to_end_of_prio_q+0x5a>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   48180:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   48182:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   48186:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   48188:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   4818a:	6890      	ldr	r0, [r2, #8]
   4818c:	1a43      	subs	r3, r0, r1
   4818e:	4258      	negs	r0, r3
}
   48190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   48194:	4158      	adcs	r0, r3
   48196:	f7ff bfb5 	b.w	48104 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   4819a:	4298      	cmp	r0, r3
   4819c:	d002      	beq.n	481a4 <move_thread_to_end_of_prio_q+0x64>
   4819e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   481a0:	2b00      	cmp	r3, #0
   481a2:	d1e7      	bne.n	48174 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   481a4:	e9c1 4000 	strd	r4, r0, [r1]
	tail->next = node;
   481a8:	6001      	str	r1, [r0, #0]
	list->tail = node;
   481aa:	6251      	str	r1, [r2, #36]	; 0x24
}
   481ac:	e7ed      	b.n	4818a <move_thread_to_end_of_prio_q+0x4a>
   481ae:	bf00      	nop
   481b0:	20006b90 	.word	0x20006b90

000481b4 <z_time_slice>:
{
   481b4:	b538      	push	{r3, r4, r5, lr}
   481b6:	4601      	mov	r1, r0
	__asm__ volatile(
   481b8:	f04f 0320 	mov.w	r3, #32
   481bc:	f3ef 8411 	mrs	r4, BASEPRI
   481c0:	f383 8812 	msr	BASEPRI_MAX, r3
   481c4:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   481c8:	4b15      	ldr	r3, [pc, #84]	; (48220 <z_time_slice+0x6c>)
   481ca:	4a16      	ldr	r2, [pc, #88]	; (48224 <z_time_slice+0x70>)
   481cc:	6898      	ldr	r0, [r3, #8]
   481ce:	6815      	ldr	r5, [r2, #0]
   481d0:	42a8      	cmp	r0, r5
   481d2:	d106      	bne.n	481e2 <z_time_slice+0x2e>
			z_reset_time_slice();
   481d4:	f7ff ff2a 	bl	4802c <z_reset_time_slice>
	__asm__ volatile(
   481d8:	f384 8811 	msr	BASEPRI, r4
   481dc:	f3bf 8f6f 	isb	sy
}
   481e0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   481e2:	2500      	movs	r5, #0
   481e4:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   481e6:	4a10      	ldr	r2, [pc, #64]	; (48228 <z_time_slice+0x74>)
   481e8:	6812      	ldr	r2, [r2, #0]
   481ea:	b1ba      	cbz	r2, 4821c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   481ec:	89c2      	ldrh	r2, [r0, #14]
   481ee:	2a7f      	cmp	r2, #127	; 0x7f
   481f0:	d814      	bhi.n	4821c <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   481f2:	7b42      	ldrb	r2, [r0, #13]
   481f4:	06d2      	lsls	r2, r2, #27
   481f6:	d111      	bne.n	4821c <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   481f8:	4a0c      	ldr	r2, [pc, #48]	; (4822c <z_time_slice+0x78>)
   481fa:	f990 500e 	ldrsb.w	r5, [r0, #14]
   481fe:	6812      	ldr	r2, [r2, #0]
   48200:	4295      	cmp	r5, r2
   48202:	db0b      	blt.n	4821c <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   48204:	4a0a      	ldr	r2, [pc, #40]	; (48230 <z_time_slice+0x7c>)
   48206:	4290      	cmp	r0, r2
   48208:	d008      	beq.n	4821c <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   4820a:	691a      	ldr	r2, [r3, #16]
   4820c:	428a      	cmp	r2, r1
   4820e:	dc02      	bgt.n	48216 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   48210:	f7ff ff96 	bl	48140 <move_thread_to_end_of_prio_q>
   48214:	e7de      	b.n	481d4 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   48216:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   48218:	611a      	str	r2, [r3, #16]
   4821a:	e7dd      	b.n	481d8 <z_time_slice+0x24>
   4821c:	2200      	movs	r2, #0
   4821e:	e7fb      	b.n	48218 <z_time_slice+0x64>
   48220:	20006b90 	.word	0x20006b90
   48224:	20006bc0 	.word	0x20006bc0
   48228:	20006bc8 	.word	0x20006bc8
   4822c:	20006bc4 	.word	0x20006bc4
   48230:	200039f0 	.word	0x200039f0

00048234 <ready_thread>:
{
   48234:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   48236:	f990 200d 	ldrsb.w	r2, [r0, #13]
   4823a:	7b43      	ldrb	r3, [r0, #13]
   4823c:	2a00      	cmp	r2, #0
   4823e:	db29      	blt.n	48294 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   48240:	06da      	lsls	r2, r3, #27
   48242:	d127      	bne.n	48294 <ready_thread+0x60>
   48244:	6982      	ldr	r2, [r0, #24]
   48246:	bb2a      	cbnz	r2, 48294 <ready_thread+0x60>
	return list->head == list;
   48248:	4a13      	ldr	r2, [pc, #76]	; (48298 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   4824a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   4824e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   48250:	e9d2 3108 	ldrd	r3, r1, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48254:	f102 0420 	add.w	r4, r2, #32
   48258:	42a3      	cmp	r3, r4
   4825a:	d016      	beq.n	4828a <ready_thread+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   4825c:	b1ab      	cbz	r3, 4828a <ready_thread+0x56>
	int32_t b1 = thread_1->base.prio;
   4825e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   48262:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   48266:	42b5      	cmp	r5, r6
   48268:	d00a      	beq.n	48280 <ready_thread+0x4c>
		if (z_sched_prio_cmp(thread, t) > 0) {
   4826a:	42ae      	cmp	r6, r5
   4826c:	dd08      	ble.n	48280 <ready_thread+0x4c>
	sys_dnode_t *const prev = successor->prev;
   4826e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   48270:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   48274:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   48276:	6058      	str	r0, [r3, #4]
}
   48278:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   4827a:	2000      	movs	r0, #0
   4827c:	f7ff bf42 	b.w	48104 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   48280:	428b      	cmp	r3, r1
   48282:	d002      	beq.n	4828a <ready_thread+0x56>
   48284:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48286:	2b00      	cmp	r3, #0
   48288:	d1eb      	bne.n	48262 <ready_thread+0x2e>
	node->prev = tail;
   4828a:	e9c0 4100 	strd	r4, r1, [r0]
	tail->next = node;
   4828e:	6008      	str	r0, [r1, #0]
	list->tail = node;
   48290:	6250      	str	r0, [r2, #36]	; 0x24
}
   48292:	e7f1      	b.n	48278 <ready_thread+0x44>
}
   48294:	bc70      	pop	{r4, r5, r6}
   48296:	4770      	bx	lr
   48298:	20006b90 	.word	0x20006b90

0004829c <z_sched_start>:
{
   4829c:	b510      	push	{r4, lr}
	__asm__ volatile(
   4829e:	f04f 0220 	mov.w	r2, #32
   482a2:	f3ef 8411 	mrs	r4, BASEPRI
   482a6:	f382 8812 	msr	BASEPRI_MAX, r2
   482aa:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   482ae:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   482b0:	0751      	lsls	r1, r2, #29
   482b2:	d404      	bmi.n	482be <z_sched_start+0x22>
	__asm__ volatile(
   482b4:	f384 8811 	msr	BASEPRI, r4
   482b8:	f3bf 8f6f 	isb	sy
}
   482bc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   482be:	f022 0204 	bic.w	r2, r2, #4
   482c2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   482c4:	f7ff ffb6 	bl	48234 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   482c8:	4621      	mov	r1, r4
   482ca:	4802      	ldr	r0, [pc, #8]	; (482d4 <z_sched_start+0x38>)
}
   482cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   482d0:	f7ff bef2 	b.w	480b8 <z_reschedule>
   482d4:	20006de9 	.word	0x20006de9

000482d8 <unready_thread>:
{
   482d8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   482da:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   482de:	7b43      	ldrb	r3, [r0, #13]
   482e0:	2a00      	cmp	r2, #0
{
   482e2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   482e4:	da04      	bge.n	482f0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   482e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   482ea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   482ec:	f008 faec 	bl	508c8 <sys_dlist_remove>
	update_cache(thread == _current);
   482f0:	4b04      	ldr	r3, [pc, #16]	; (48304 <unready_thread+0x2c>)
   482f2:	6898      	ldr	r0, [r3, #8]
   482f4:	1a43      	subs	r3, r0, r1
   482f6:	4258      	negs	r0, r3
   482f8:	4158      	adcs	r0, r3
}
   482fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   482fe:	f7ff bf01 	b.w	48104 <update_cache>
   48302:	bf00      	nop
   48304:	20006b90 	.word	0x20006b90

00048308 <pend>:
{
   48308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4830c:	4606      	mov	r6, r0
   4830e:	4615      	mov	r5, r2
   48310:	461c      	mov	r4, r3
	__asm__ volatile(
   48312:	f04f 0320 	mov.w	r3, #32
   48316:	f3ef 8711 	mrs	r7, BASEPRI
   4831a:	f383 8812 	msr	BASEPRI_MAX, r3
   4831e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   48322:	f008 fb5e 	bl	509e2 <add_to_waitq_locked>
	__asm__ volatile(
   48326:	f387 8811 	msr	BASEPRI, r7
   4832a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4832e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   48332:	bf08      	it	eq
   48334:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   48338:	d008      	beq.n	4834c <pend+0x44>
   4833a:	462a      	mov	r2, r5
   4833c:	4623      	mov	r3, r4
   4833e:	f106 0018 	add.w	r0, r6, #24
   48342:	4903      	ldr	r1, [pc, #12]	; (48350 <pend+0x48>)
}
   48344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   48348:	f000 ba32 	b.w	487b0 <z_add_timeout>
   4834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   48350:	0005099f 	.word	0x0005099f

00048354 <z_pend_curr>:
{
   48354:	b510      	push	{r4, lr}
	pending_current = _current;
   48356:	4b07      	ldr	r3, [pc, #28]	; (48374 <z_pend_curr+0x20>)
   48358:	6898      	ldr	r0, [r3, #8]
   4835a:	4b07      	ldr	r3, [pc, #28]	; (48378 <z_pend_curr+0x24>)
{
   4835c:	460c      	mov	r4, r1
	pending_current = _current;
   4835e:	6018      	str	r0, [r3, #0]
{
   48360:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   48362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   48366:	f7ff ffcf 	bl	48308 <pend>
   4836a:	4620      	mov	r0, r4
}
   4836c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   48370:	f7e4 ba0a 	b.w	2c788 <arch_swap>
   48374:	20006b90 	.word	0x20006b90
   48378:	20006bc0 	.word	0x20006bc0

0004837c <z_set_prio>:
{
   4837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4837e:	4604      	mov	r4, r0
	__asm__ volatile(
   48380:	f04f 0320 	mov.w	r3, #32
   48384:	f3ef 8511 	mrs	r5, BASEPRI
   48388:	f383 8812 	msr	BASEPRI_MAX, r3
   4838c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   48390:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   48392:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   48394:	b249      	sxtb	r1, r1
   48396:	d132      	bne.n	483fe <z_set_prio+0x82>
		if (need_sched) {
   48398:	6982      	ldr	r2, [r0, #24]
   4839a:	bb82      	cbnz	r2, 483fe <z_set_prio+0x82>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4839c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   483a0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   483a2:	f008 fa91 	bl	508c8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   483a6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   483a8:	4a16      	ldr	r2, [pc, #88]	; (48404 <z_set_prio+0x88>)
				thread->base.prio = prio;
   483aa:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   483ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
   483b0:	7343      	strb	r3, [r0, #13]
   483b2:	4610      	mov	r0, r2
   483b4:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   483b8:	4283      	cmp	r3, r0
   483ba:	d01a      	beq.n	483f2 <z_set_prio+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   483bc:	b1cb      	cbz	r3, 483f2 <z_set_prio+0x76>
	return (node == list->tail) ? NULL : node->next;
   483be:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   483c0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   483c4:	42b1      	cmp	r1, r6
   483c6:	d00f      	beq.n	483e8 <z_set_prio+0x6c>
		if (z_sched_prio_cmp(thread, t) > 0) {
   483c8:	428e      	cmp	r6, r1
   483ca:	dd0d      	ble.n	483e8 <z_set_prio+0x6c>
	sys_dnode_t *const prev = successor->prev;
   483cc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   483ce:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   483d2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   483d4:	605c      	str	r4, [r3, #4]
			update_cache(1);
   483d6:	2001      	movs	r0, #1
   483d8:	f7ff fe94 	bl	48104 <update_cache>
   483dc:	2001      	movs	r0, #1
	__asm__ volatile(
   483de:	f385 8811 	msr	BASEPRI, r5
   483e2:	f3bf 8f6f 	isb	sy
}
   483e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   483e8:	42bb      	cmp	r3, r7
   483ea:	d002      	beq.n	483f2 <z_set_prio+0x76>
   483ec:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   483ee:	2b00      	cmp	r3, #0
   483f0:	d1e6      	bne.n	483c0 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   483f2:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   483f4:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   483f8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   483fa:	6254      	str	r4, [r2, #36]	; 0x24
}
   483fc:	e7eb      	b.n	483d6 <z_set_prio+0x5a>
			thread->base.prio = prio;
   483fe:	73a1      	strb	r1, [r4, #14]
   48400:	2000      	movs	r0, #0
   48402:	e7ec      	b.n	483de <z_set_prio+0x62>
   48404:	20006b90 	.word	0x20006b90

00048408 <z_impl_k_thread_suspend>:
{
   48408:	b570      	push	{r4, r5, r6, lr}
   4840a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   4840c:	3018      	adds	r0, #24
   4840e:	f008 fb6b 	bl	50ae8 <z_abort_timeout>
	__asm__ volatile(
   48412:	f04f 0320 	mov.w	r3, #32
   48416:	f3ef 8611 	mrs	r6, BASEPRI
   4841a:	f383 8812 	msr	BASEPRI_MAX, r3
   4841e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   48422:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   48426:	7b63      	ldrb	r3, [r4, #13]
   48428:	2a00      	cmp	r2, #0
   4842a:	da05      	bge.n	48438 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4842c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   48430:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   48432:	4620      	mov	r0, r4
   48434:	f008 fa48 	bl	508c8 <sys_dlist_remove>
		update_cache(thread == _current);
   48438:	4d0b      	ldr	r5, [pc, #44]	; (48468 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   4843a:	7b63      	ldrb	r3, [r4, #13]
   4843c:	68a8      	ldr	r0, [r5, #8]
   4843e:	f043 0310 	orr.w	r3, r3, #16
   48442:	7363      	strb	r3, [r4, #13]
   48444:	1b03      	subs	r3, r0, r4
   48446:	4258      	negs	r0, r3
   48448:	4158      	adcs	r0, r3
   4844a:	f7ff fe5b 	bl	48104 <update_cache>
	__asm__ volatile(
   4844e:	f386 8811 	msr	BASEPRI, r6
   48452:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   48456:	68ab      	ldr	r3, [r5, #8]
   48458:	42a3      	cmp	r3, r4
   4845a:	d103      	bne.n	48464 <z_impl_k_thread_suspend+0x5c>
}
   4845c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   48460:	f008 ba7d 	b.w	5095e <z_reschedule_unlocked>
}
   48464:	bd70      	pop	{r4, r5, r6, pc}
   48466:	bf00      	nop
   48468:	20006b90 	.word	0x20006b90

0004846c <k_sched_unlock>:
{
   4846c:	b510      	push	{r4, lr}
	__asm__ volatile(
   4846e:	f04f 0320 	mov.w	r3, #32
   48472:	f3ef 8411 	mrs	r4, BASEPRI
   48476:	f383 8812 	msr	BASEPRI_MAX, r3
   4847a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   4847e:	4b08      	ldr	r3, [pc, #32]	; (484a0 <k_sched_unlock+0x34>)
   48480:	689a      	ldr	r2, [r3, #8]
   48482:	7bd3      	ldrb	r3, [r2, #15]
   48484:	3301      	adds	r3, #1
   48486:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   48488:	2000      	movs	r0, #0
   4848a:	f7ff fe3b 	bl	48104 <update_cache>
	__asm__ volatile(
   4848e:	f384 8811 	msr	BASEPRI, r4
   48492:	f3bf 8f6f 	isb	sy
}
   48496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   4849a:	f008 ba60 	b.w	5095e <z_reschedule_unlocked>
   4849e:	bf00      	nop
   484a0:	20006b90 	.word	0x20006b90

000484a4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   484a4:	4b04      	ldr	r3, [pc, #16]	; (484b8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   484a6:	2100      	movs	r1, #0
   484a8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   484ac:	e9c3 2208 	strd	r2, r2, [r3, #32]
   484b0:	4608      	mov	r0, r1
   484b2:	f7ff bdd1 	b.w	48058 <k_sched_time_slice_set>
   484b6:	bf00      	nop
   484b8:	20006b90 	.word	0x20006b90

000484bc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   484bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   484be:	f04f 0320 	mov.w	r3, #32
   484c2:	f3ef 8411 	mrs	r4, BASEPRI
   484c6:	f383 8812 	msr	BASEPRI_MAX, r3
   484ca:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   484ce:	4919      	ldr	r1, [pc, #100]	; (48534 <z_impl_k_yield+0x78>)
   484d0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   484d2:	7b43      	ldrb	r3, [r0, #13]
   484d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   484d8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   484da:	f008 f9f5 	bl	508c8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   484de:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   484e0:	460a      	mov	r2, r1
   484e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   484e6:	7343      	strb	r3, [r0, #13]
   484e8:	f852 3f20 	ldr.w	r3, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   484ec:	4293      	cmp	r3, r2
   484ee:	d01b      	beq.n	48528 <z_impl_k_yield+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   484f0:	b1d3      	cbz	r3, 48528 <z_impl_k_yield+0x6c>
	return (node == list->tail) ? NULL : node->next;
   484f2:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   484f4:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   484f8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   484fc:	42b5      	cmp	r5, r6
   484fe:	d00e      	beq.n	4851e <z_impl_k_yield+0x62>
		if (z_sched_prio_cmp(thread, t) > 0) {
   48500:	42ae      	cmp	r6, r5
   48502:	dd0c      	ble.n	4851e <z_impl_k_yield+0x62>
	sys_dnode_t *const prev = successor->prev;
   48504:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   48506:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   4850a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   4850c:	6058      	str	r0, [r3, #4]
	}
	queue_thread(_current);
	update_cache(1);
   4850e:	2001      	movs	r0, #1
   48510:	f7ff fdf8 	bl	48104 <update_cache>
   48514:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
   48516:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   4851a:	f7e4 b935 	b.w	2c788 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   4851e:	42bb      	cmp	r3, r7
   48520:	d002      	beq.n	48528 <z_impl_k_yield+0x6c>
   48522:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48524:	2b00      	cmp	r3, #0
   48526:	d1e7      	bne.n	484f8 <z_impl_k_yield+0x3c>
	sys_dnode_t *const tail = list->tail;
   48528:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	node->prev = tail;
   4852a:	e9c0 2300 	strd	r2, r3, [r0]
	tail->next = node;
   4852e:	6018      	str	r0, [r3, #0]
	list->tail = node;
   48530:	6248      	str	r0, [r1, #36]	; 0x24
}
   48532:	e7ec      	b.n	4850e <z_impl_k_yield+0x52>
   48534:	20006b90 	.word	0x20006b90

00048538 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   48538:	ea50 0301 	orrs.w	r3, r0, r1
{
   4853c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   48540:	4605      	mov	r5, r0
   48542:	460e      	mov	r6, r1
	if (ticks == 0) {
   48544:	d103      	bne.n	4854e <z_tick_sleep+0x16>
	z_impl_k_yield();
   48546:	f7ff ffb9 	bl	484bc <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   4854a:	2000      	movs	r0, #0
   4854c:	e02c      	b.n	485a8 <z_tick_sleep+0x70>
	if (Z_TICK_ABS(ticks) <= 0) {
   4854e:	1c83      	adds	r3, r0, #2
   48550:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   48554:	db2a      	blt.n	485ac <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   48556:	f008 fb07 	bl	50b68 <sys_clock_tick_get_32>
   4855a:	1944      	adds	r4, r0, r5
   4855c:	f04f 0320 	mov.w	r3, #32
   48560:	f3ef 8811 	mrs	r8, BASEPRI
   48564:	f383 8812 	msr	BASEPRI_MAX, r3
   48568:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   4856c:	4f11      	ldr	r7, [pc, #68]	; (485b4 <z_tick_sleep+0x7c>)
   4856e:	4b12      	ldr	r3, [pc, #72]	; (485b8 <z_tick_sleep+0x80>)
   48570:	68b8      	ldr	r0, [r7, #8]
   48572:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   48574:	f7ff feb0 	bl	482d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   48578:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   4857a:	4910      	ldr	r1, [pc, #64]	; (485bc <z_tick_sleep+0x84>)
   4857c:	462a      	mov	r2, r5
   4857e:	4633      	mov	r3, r6
   48580:	3018      	adds	r0, #24
   48582:	f000 f915 	bl	487b0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   48586:	68ba      	ldr	r2, [r7, #8]
   48588:	7b53      	ldrb	r3, [r2, #13]
   4858a:	f043 0310 	orr.w	r3, r3, #16
   4858e:	7353      	strb	r3, [r2, #13]
   48590:	4640      	mov	r0, r8
   48592:	f7e4 f8f9 	bl	2c788 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   48596:	f008 fae7 	bl	50b68 <sys_clock_tick_get_32>
   4859a:	1a20      	subs	r0, r4, r0
   4859c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   485a0:	2801      	cmp	r0, #1
   485a2:	f173 0300 	sbcs.w	r3, r3, #0
   485a6:	dbd0      	blt.n	4854a <z_tick_sleep+0x12>
}
   485a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   485ac:	f06f 0401 	mvn.w	r4, #1
   485b0:	1a24      	subs	r4, r4, r0
   485b2:	e7d3      	b.n	4855c <z_tick_sleep+0x24>
   485b4:	20006b90 	.word	0x20006b90
   485b8:	20006bc0 	.word	0x20006bc0
   485bc:	0005099f 	.word	0x0005099f

000485c0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   485c0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   485c4:	bf08      	it	eq
   485c6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   485ca:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   485cc:	d106      	bne.n	485dc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   485ce:	4b08      	ldr	r3, [pc, #32]	; (485f0 <z_impl_k_sleep+0x30>)
   485d0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   485d2:	f7ff ff19 	bl	48408 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   485d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   485da:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   485dc:	f7ff ffac 	bl	48538 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   485e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   485e4:	fb80 0303 	smull	r0, r3, r0, r3
   485e8:	0bc0      	lsrs	r0, r0, #15
   485ea:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   485ee:	e7f4      	b.n	485da <z_impl_k_sleep+0x1a>
   485f0:	20006b90 	.word	0x20006b90

000485f4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   485f4:	4b01      	ldr	r3, [pc, #4]	; (485fc <z_impl_z_current_get+0x8>)
   485f6:	6898      	ldr	r0, [r3, #8]
   485f8:	4770      	bx	lr
   485fa:	bf00      	nop
   485fc:	20006b90 	.word	0x20006b90

00048600 <z_impl_k_is_preempt_thread>:
   48600:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   48604:	b93b      	cbnz	r3, 48616 <z_impl_k_is_preempt_thread+0x16>
   48606:	4b05      	ldr	r3, [pc, #20]	; (4861c <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   48608:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   4860a:	89d8      	ldrh	r0, [r3, #14]
   4860c:	287f      	cmp	r0, #127	; 0x7f
   4860e:	bf8c      	ite	hi
   48610:	2000      	movhi	r0, #0
   48612:	2001      	movls	r0, #1
   48614:	4770      	bx	lr
   48616:	2000      	movs	r0, #0
}
   48618:	4770      	bx	lr
   4861a:	bf00      	nop
   4861c:	20006b90 	.word	0x20006b90

00048620 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   48620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   48624:	4604      	mov	r4, r0
   48626:	f04f 0320 	mov.w	r3, #32
   4862a:	f3ef 8611 	mrs	r6, BASEPRI
   4862e:	f383 8812 	msr	BASEPRI_MAX, r3
   48632:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   48636:	7b43      	ldrb	r3, [r0, #13]
   48638:	071a      	lsls	r2, r3, #28
   4863a:	d505      	bpl.n	48648 <z_thread_abort+0x28>
	__asm__ volatile(
   4863c:	f386 8811 	msr	BASEPRI, r6
   48640:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   48644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   48648:	f023 0220 	bic.w	r2, r3, #32
   4864c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   48650:	09d2      	lsrs	r2, r2, #7
   48652:	d120      	bne.n	48696 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   48654:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   48656:	68a3      	ldr	r3, [r4, #8]
   48658:	b113      	cbz	r3, 48660 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   4865a:	4620      	mov	r0, r4
   4865c:	f008 f93c 	bl	508d8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   48660:	f104 0018 	add.w	r0, r4, #24
   48664:	f008 fa40 	bl	50ae8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   48668:	f104 0758 	add.w	r7, r4, #88	; 0x58
   4866c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   48670:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48672:	42bd      	cmp	r5, r7
   48674:	d000      	beq.n	48678 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   48676:	b9b5      	cbnz	r5, 486a6 <z_thread_abort+0x86>
		update_cache(1);
   48678:	2001      	movs	r0, #1
   4867a:	f7ff fd43 	bl	48104 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   4867e:	4b10      	ldr	r3, [pc, #64]	; (486c0 <z_thread_abort+0xa0>)
   48680:	689b      	ldr	r3, [r3, #8]
   48682:	42a3      	cmp	r3, r4
   48684:	d1da      	bne.n	4863c <z_thread_abort+0x1c>
   48686:	f3ef 8305 	mrs	r3, IPSR
   4868a:	2b00      	cmp	r3, #0
   4868c:	d1d6      	bne.n	4863c <z_thread_abort+0x1c>
   4868e:	4630      	mov	r0, r6
   48690:	f7e4 f87a 	bl	2c788 <arch_swap>
	return ret;
   48694:	e7d2      	b.n	4863c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   48696:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   4869a:	f043 0308 	orr.w	r3, r3, #8
   4869e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   486a0:	f008 f912 	bl	508c8 <sys_dlist_remove>
}
   486a4:	e7d7      	b.n	48656 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   486a6:	4628      	mov	r0, r5
   486a8:	f008 f916 	bl	508d8 <unpend_thread_no_timeout>
   486ac:	f105 0018 	add.w	r0, r5, #24
   486b0:	f008 fa1a 	bl	50ae8 <z_abort_timeout>
   486b4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   486b8:	4628      	mov	r0, r5
   486ba:	f7ff fdbb 	bl	48234 <ready_thread>
   486be:	e7d7      	b.n	48670 <z_thread_abort+0x50>
   486c0:	20006b90 	.word	0x20006b90

000486c4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   486c4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   486c6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   486ca:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   486cc:	e9cd 6700 	strd	r6, r7, [sp]
   486d0:	f7ff fe40 	bl	48354 <z_pend_curr>

	if (data != NULL) {
   486d4:	b11c      	cbz	r4, 486de <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   486d6:	4b03      	ldr	r3, [pc, #12]	; (486e4 <z_sched_wait+0x20>)
   486d8:	689b      	ldr	r3, [r3, #8]
   486da:	695b      	ldr	r3, [r3, #20]
   486dc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   486de:	b002      	add	sp, #8
   486e0:	bdd0      	pop	{r4, r6, r7, pc}
   486e2:	bf00      	nop
   486e4:	20006b90 	.word	0x20006b90

000486e8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   486e8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   486ea:	4806      	ldr	r0, [pc, #24]	; (48704 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   486ec:	4a06      	ldr	r2, [pc, #24]	; (48708 <z_data_copy+0x20>)
   486ee:	4907      	ldr	r1, [pc, #28]	; (4870c <z_data_copy+0x24>)
   486f0:	1a12      	subs	r2, r2, r0
   486f2:	f003 f8ca 	bl	4b88a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   486f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   486fa:	4a05      	ldr	r2, [pc, #20]	; (48710 <z_data_copy+0x28>)
   486fc:	4905      	ldr	r1, [pc, #20]	; (48714 <z_data_copy+0x2c>)
   486fe:	4806      	ldr	r0, [pc, #24]	; (48718 <z_data_copy+0x30>)
   48700:	f003 b8c3 	b.w	4b88a <memcpy>
   48704:	20000000 	.word	0x20000000
   48708:	20001244 	.word	0x20001244
   4870c:	00053db0 	.word	0x00053db0
   48710:	00000000 	.word	0x00000000
   48714:	00053db0 	.word	0x00053db0
   48718:	20000000 	.word	0x20000000

0004871c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   4871c:	4b03      	ldr	r3, [pc, #12]	; (4872c <elapsed+0x10>)
   4871e:	681b      	ldr	r3, [r3, #0]
   48720:	b90b      	cbnz	r3, 48726 <elapsed+0xa>
   48722:	f7fd b817 	b.w	45754 <sys_clock_elapsed>
}
   48726:	2000      	movs	r0, #0
   48728:	4770      	bx	lr
   4872a:	bf00      	nop
   4872c:	20006bcc 	.word	0x20006bcc

00048730 <next_timeout>:
	return list->head == list;
   48730:	4b10      	ldr	r3, [pc, #64]	; (48774 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   48732:	b510      	push	{r4, lr}
   48734:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48736:	429c      	cmp	r4, r3
   48738:	bf08      	it	eq
   4873a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   4873c:	f7ff ffee 	bl	4871c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   48740:	b1a4      	cbz	r4, 4876c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   48742:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   48746:	1a1b      	subs	r3, r3, r0
   48748:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   4874c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   48750:	f172 0100 	sbcs.w	r1, r2, #0
   48754:	da0a      	bge.n	4876c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   48756:	2a00      	cmp	r2, #0
   48758:	bfac      	ite	ge
   4875a:	4618      	movge	r0, r3
   4875c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   4875e:	4b06      	ldr	r3, [pc, #24]	; (48778 <next_timeout+0x48>)
   48760:	691b      	ldr	r3, [r3, #16]
   48762:	b113      	cbz	r3, 4876a <next_timeout+0x3a>
   48764:	4298      	cmp	r0, r3
   48766:	bfa8      	it	ge
   48768:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   4876a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   4876c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   48770:	e7f5      	b.n	4875e <next_timeout+0x2e>
   48772:	bf00      	nop
   48774:	20000c4c 	.word	0x20000c4c
   48778:	20006b90 	.word	0x20006b90

0004877c <remove_timeout>:
{
   4877c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   4877e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   48780:	b168      	cbz	r0, 4879e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   48782:	4a0a      	ldr	r2, [pc, #40]	; (487ac <remove_timeout+0x30>)
   48784:	6852      	ldr	r2, [r2, #4]
   48786:	4290      	cmp	r0, r2
   48788:	d009      	beq.n	4879e <remove_timeout+0x22>
	if (next(t) != NULL) {
   4878a:	b143      	cbz	r3, 4879e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   4878c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   48790:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   48794:	1912      	adds	r2, r2, r4
   48796:	eb41 0105 	adc.w	r1, r1, r5
   4879a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   4879e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   487a0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   487a2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   487a4:	2300      	movs	r3, #0
	node->prev = NULL;
   487a6:	e9c0 3300 	strd	r3, r3, [r0]
}
   487aa:	bd30      	pop	{r4, r5, pc}
   487ac:	20000c4c 	.word	0x20000c4c

000487b0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   487b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   487b4:	bf08      	it	eq
   487b6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   487ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   487bc:	4604      	mov	r4, r0
   487be:	461d      	mov	r5, r3
   487c0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   487c2:	d067      	beq.n	48894 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   487c4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   487c6:	f04f 0320 	mov.w	r3, #32
   487ca:	f3ef 8711 	mrs	r7, BASEPRI
   487ce:	f383 8812 	msr	BASEPRI_MAX, r3
   487d2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   487d6:	3201      	adds	r2, #1
   487d8:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   487dc:	da1e      	bge.n	4881c <z_add_timeout+0x6c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   487de:	492e      	ldr	r1, [pc, #184]	; (48898 <z_add_timeout+0xe8>)
   487e0:	e9d1 2000 	ldrd	r2, r0, [r1]
   487e4:	f06f 0301 	mvn.w	r3, #1
   487e8:	1a9b      	subs	r3, r3, r2
   487ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   487ee:	eb62 0000 	sbc.w	r0, r2, r0
   487f2:	1b9e      	subs	r6, r3, r6
   487f4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   487f8:	2e01      	cmp	r6, #1
   487fa:	f170 0300 	sbcs.w	r3, r0, #0
   487fe:	da01      	bge.n	48804 <z_add_timeout+0x54>
   48800:	2601      	movs	r6, #1
   48802:	2000      	movs	r0, #0
   48804:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   48808:	4e24      	ldr	r6, [pc, #144]	; (4889c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   4880a:	e9d6 c500 	ldrd	ip, r5, [r6]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4880e:	45b4      	cmp	ip, r6
   48810:	d116      	bne.n	48840 <z_add_timeout+0x90>
	node->prev = tail;
   48812:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   48816:	602c      	str	r4, [r5, #0]
	list->tail = node;
   48818:	6074      	str	r4, [r6, #4]
}
   4881a:	e028      	b.n	4886e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   4881c:	f7ff ff7e 	bl	4871c <elapsed>
   48820:	3601      	adds	r6, #1
   48822:	f145 0500 	adc.w	r5, r5, #0
   48826:	1836      	adds	r6, r6, r0
   48828:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   4882c:	e7ea      	b.n	48804 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   4882e:	1a9b      	subs	r3, r3, r2
   48830:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   48834:	4565      	cmp	r5, ip
   48836:	e9c4 3104 	strd	r3, r1, [r4, #16]
   4883a:	d0ea      	beq.n	48812 <z_add_timeout+0x62>
   4883c:	f8dc c000 	ldr.w	ip, [ip]
		for (t = first(); t != NULL; t = next(t)) {
   48840:	f1bc 0f00 	cmp.w	ip, #0
   48844:	d0e5      	beq.n	48812 <z_add_timeout+0x62>
			if (t->dticks > to->dticks) {
   48846:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   4884a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   4884e:	4293      	cmp	r3, r2
   48850:	eb71 0e00 	sbcs.w	lr, r1, r0
   48854:	daeb      	bge.n	4882e <z_add_timeout+0x7e>
				t->dticks -= to->dticks;
   48856:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   48858:	f8dc 3004 	ldr.w	r3, [ip, #4]
   4885c:	eb60 0001 	sbc.w	r0, r0, r1
   48860:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   48864:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   48868:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   4886a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   4886e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48870:	42b3      	cmp	r3, r6
   48872:	d00b      	beq.n	4888c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   48874:	429c      	cmp	r4, r3
   48876:	d109      	bne.n	4888c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   48878:	f7ff ff5a 	bl	48730 <next_timeout>

			if (next_time == 0 ||
   4887c:	b118      	cbz	r0, 48886 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   4887e:	4b08      	ldr	r3, [pc, #32]	; (488a0 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   48880:	691b      	ldr	r3, [r3, #16]
   48882:	4283      	cmp	r3, r0
   48884:	d002      	beq.n	4888c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   48886:	2100      	movs	r1, #0
   48888:	f7fc ff32 	bl	456f0 <sys_clock_set_timeout>
	__asm__ volatile(
   4888c:	f387 8811 	msr	BASEPRI, r7
   48890:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   48894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   48896:	bf00      	nop
   48898:	20003b90 	.word	0x20003b90
   4889c:	20000c4c 	.word	0x20000c4c
   488a0:	20006b90 	.word	0x20006b90

000488a4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   488a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   488a8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   488aa:	f7ff fc83 	bl	481b4 <z_time_slice>
	__asm__ volatile(
   488ae:	f04f 0320 	mov.w	r3, #32
   488b2:	f3ef 8411 	mrs	r4, BASEPRI
   488b6:	f383 8812 	msr	BASEPRI_MAX, r3
   488ba:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   488be:	4e24      	ldr	r6, [pc, #144]	; (48950 <sys_clock_announce+0xac>)
	return list->head == list;
   488c0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 48954 <sys_clock_announce+0xb0>
   488c4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   488c6:	4d24      	ldr	r5, [pc, #144]	; (48958 <sys_clock_announce+0xb4>)
   488c8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   488cc:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   488ce:	4540      	cmp	r0, r8
		curr_tick += dt;
   488d0:	e9d5 1e00 	ldrd	r1, lr, [r5]
   488d4:	ea4f 77e2 	mov.w	r7, r2, asr #31
   488d8:	d00b      	beq.n	488f2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   488da:	b150      	cbz	r0, 488f2 <sys_clock_announce+0x4e>
   488dc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   488e0:	429a      	cmp	r2, r3
   488e2:	eb77 090c 	sbcs.w	r9, r7, ip
   488e6:	da16      	bge.n	48916 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   488e8:	1a9b      	subs	r3, r3, r2
   488ea:	eb6c 0c07 	sbc.w	ip, ip, r7
   488ee:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   488f2:	1851      	adds	r1, r2, r1
   488f4:	eb4e 0707 	adc.w	r7, lr, r7
   488f8:	e9c5 1700 	strd	r1, r7, [r5]
	announce_remaining = 0;
   488fc:	2500      	movs	r5, #0
   488fe:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   48900:	f7ff ff16 	bl	48730 <next_timeout>
   48904:	4629      	mov	r1, r5
   48906:	f7fc fef3 	bl	456f0 <sys_clock_set_timeout>
	__asm__ volatile(
   4890a:	f384 8811 	msr	BASEPRI, r4
   4890e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   48912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   48916:	1859      	adds	r1, r3, r1
   48918:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   4891c:	1ad3      	subs	r3, r2, r3
   4891e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   48920:	2200      	movs	r2, #0
   48922:	2300      	movs	r3, #0
   48924:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   48928:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   4892c:	f7ff ff26 	bl	4877c <remove_timeout>
   48930:	f384 8811 	msr	BASEPRI, r4
   48934:	f3bf 8f6f 	isb	sy
		t->fn(t);
   48938:	6883      	ldr	r3, [r0, #8]
   4893a:	4798      	blx	r3
	__asm__ volatile(
   4893c:	f04f 0320 	mov.w	r3, #32
   48940:	f3ef 8411 	mrs	r4, BASEPRI
   48944:	f383 8812 	msr	BASEPRI_MAX, r3
   48948:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   4894c:	e7bc      	b.n	488c8 <sys_clock_announce+0x24>
   4894e:	bf00      	nop
   48950:	20006bcc 	.word	0x20006bcc
   48954:	20000c4c 	.word	0x20000c4c
   48958:	20003b90 	.word	0x20003b90

0004895c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   4895c:	b510      	push	{r4, lr}
   4895e:	f04f 0320 	mov.w	r3, #32
   48962:	f3ef 8411 	mrs	r4, BASEPRI
   48966:	f383 8812 	msr	BASEPRI_MAX, r3
   4896a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   4896e:	f7fc fef1 	bl	45754 <sys_clock_elapsed>
   48972:	4a05      	ldr	r2, [pc, #20]	; (48988 <sys_clock_tick_get+0x2c>)
   48974:	e9d2 3100 	ldrd	r3, r1, [r2]
   48978:	18c0      	adds	r0, r0, r3
   4897a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   4897e:	f384 8811 	msr	BASEPRI, r4
   48982:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   48986:	bd10      	pop	{r4, pc}
   48988:	20003b90 	.word	0x20003b90

0004898c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   4898c:	b570      	push	{r4, r5, r6, lr}
   4898e:	4604      	mov	r4, r0
	__asm__ volatile(
   48990:	f04f 0320 	mov.w	r3, #32
   48994:	f3ef 8511 	mrs	r5, BASEPRI
   48998:	f383 8812 	msr	BASEPRI_MAX, r3
   4899c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   489a0:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   489a4:	3301      	adds	r3, #1
   489a6:	f142 0200 	adc.w	r2, r2, #0
   489aa:	2b02      	cmp	r3, #2
   489ac:	f172 0200 	sbcs.w	r2, r2, #0
   489b0:	d304      	bcc.n	489bc <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   489b2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   489b6:	4917      	ldr	r1, [pc, #92]	; (48a14 <z_timer_expiration_handler+0x88>)
   489b8:	f7ff fefa 	bl	487b0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   489bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   489be:	3301      	adds	r3, #1
   489c0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   489c2:	6a23      	ldr	r3, [r4, #32]
   489c4:	b173      	cbz	r3, 489e4 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   489c6:	f385 8811 	msr	BASEPRI, r5
   489ca:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   489ce:	6a23      	ldr	r3, [r4, #32]
   489d0:	4620      	mov	r0, r4
   489d2:	4798      	blx	r3
	__asm__ volatile(
   489d4:	f04f 0320 	mov.w	r3, #32
   489d8:	f3ef 8511 	mrs	r5, BASEPRI
   489dc:	f383 8812 	msr	BASEPRI_MAX, r3
   489e0:	f3bf 8f6f 	isb	sy
	return list->head == list;
   489e4:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   489e8:	42a6      	cmp	r6, r4
   489ea:	d000      	beq.n	489ee <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   489ec:	b926      	cbnz	r6, 489f8 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   489ee:	f385 8811 	msr	BASEPRI, r5
   489f2:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   489f6:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   489f8:	4630      	mov	r0, r6
   489fa:	f007 ff80 	bl	508fe <z_unpend_thread_no_timeout>
   489fe:	2300      	movs	r3, #0
   48a00:	67f3      	str	r3, [r6, #124]	; 0x7c
   48a02:	f385 8811 	msr	BASEPRI, r5
   48a06:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   48a0a:	4630      	mov	r0, r6
}
   48a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   48a10:	f007 bfb5 	b.w	5097e <z_ready_thread>
   48a14:	0004898d 	.word	0x0004898d

00048a18 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   48a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   48a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   48a20:	bf08      	it	eq
   48a22:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   48a26:	4605      	mov	r5, r0
   48a28:	4614      	mov	r4, r2
   48a2a:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   48a2e:	4619      	mov	r1, r3
   48a30:	4691      	mov	r9, r2
   48a32:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   48a34:	d037      	beq.n	48aa6 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   48a36:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   48a3a:	bf08      	it	eq
   48a3c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   48a40:	4637      	mov	r7, r6
   48a42:	4682      	mov	sl, r0
   48a44:	d011      	beq.n	48a6a <z_impl_k_timer_start+0x52>
   48a46:	ea50 0306 	orrs.w	r3, r0, r6
   48a4a:	d00e      	beq.n	48a6a <z_impl_k_timer_start+0x52>
   48a4c:	1c72      	adds	r2, r6, #1
   48a4e:	f170 33ff 	sbcs.w	r3, r0, #4294967295	; 0xffffffff
   48a52:	db0a      	blt.n	48a6a <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   48a54:	2e02      	cmp	r6, #2
   48a56:	4684      	mov	ip, r0
   48a58:	f170 0000 	sbcs.w	r0, r0, #0
   48a5c:	bfbc      	itt	lt
   48a5e:	2702      	movlt	r7, #2
   48a60:	f04f 0c00 	movlt.w	ip, #0
   48a64:	3f01      	subs	r7, #1
   48a66:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   48a6a:	1c63      	adds	r3, r4, #1
   48a6c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   48a70:	db0a      	blt.n	48a88 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   48a72:	2c01      	cmp	r4, #1
   48a74:	f171 0300 	sbcs.w	r3, r1, #0
   48a78:	4622      	mov	r2, r4
   48a7a:	bfbc      	itt	lt
   48a7c:	2201      	movlt	r2, #1
   48a7e:	2100      	movlt	r1, #0
   48a80:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   48a84:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   48a88:	4628      	mov	r0, r5
   48a8a:	f008 f82d 	bl	50ae8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   48a8e:	2300      	movs	r3, #0
   48a90:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   48a92:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   48a96:	464a      	mov	r2, r9
   48a98:	4643      	mov	r3, r8
   48a9a:	4628      	mov	r0, r5
   48a9c:	4903      	ldr	r1, [pc, #12]	; (48aac <z_impl_k_timer_start+0x94>)
		     duration);
}
   48a9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   48aa2:	f7ff be85 	b.w	487b0 <z_add_timeout>
}
   48aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   48aaa:	bf00      	nop
   48aac:	0004898d 	.word	0x0004898d

00048ab0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   48ab0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   48ab4:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   48ab6:	4b29      	ldr	r3, [pc, #164]	; (48b5c <z_impl_k_poll+0xac>)
   48ab8:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   48aba:	2301      	movs	r3, #1
   48abc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   48ac0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   48ac4:	ea52 0305 	orrs.w	r3, r2, r5
{
   48ac8:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   48aca:	bf0c      	ite	eq
   48acc:	2301      	moveq	r3, #1
   48ace:	2300      	movne	r3, #0
   48ad0:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   48ad4:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   48ad6:	f008 f8c8 	bl	50c6a <register_events>
   48ada:	4681      	mov	r9, r0
	__asm__ volatile(
   48adc:	f04f 0320 	mov.w	r3, #32
   48ae0:	f3ef 8a11 	mrs	sl, BASEPRI
   48ae4:	f383 8812 	msr	BASEPRI_MAX, r3
   48ae8:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   48aec:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   48af0:	b964      	cbnz	r4, 48b0c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   48af2:	4601      	mov	r1, r0
   48af4:	4652      	mov	r2, sl
   48af6:	4640      	mov	r0, r8
   48af8:	f008 f988 	bl	50e0c <clear_event_registrations>
	__asm__ volatile(
   48afc:	f38a 8811 	msr	BASEPRI, sl
   48b00:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   48b04:	4620      	mov	r0, r4
   48b06:	b002      	add	sp, #8
   48b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   48b0c:	2300      	movs	r3, #0
   48b0e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   48b12:	ea56 0305 	orrs.w	r3, r6, r5
   48b16:	d106      	bne.n	48b26 <z_impl_k_poll+0x76>
   48b18:	f38a 8811 	msr	BASEPRI, sl
   48b1c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   48b20:	f06f 040a 	mvn.w	r4, #10
   48b24:	e7ee      	b.n	48b04 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   48b26:	e9cd 6500 	strd	r6, r5, [sp]
   48b2a:	4a0d      	ldr	r2, [pc, #52]	; (48b60 <z_impl_k_poll+0xb0>)
   48b2c:	480d      	ldr	r0, [pc, #52]	; (48b64 <z_impl_k_poll+0xb4>)
   48b2e:	4651      	mov	r1, sl
   48b30:	f7ff fc10 	bl	48354 <z_pend_curr>
   48b34:	4604      	mov	r4, r0
	__asm__ volatile(
   48b36:	f04f 0320 	mov.w	r3, #32
   48b3a:	f3ef 8511 	mrs	r5, BASEPRI
   48b3e:	f383 8812 	msr	BASEPRI_MAX, r3
   48b42:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   48b46:	462a      	mov	r2, r5
   48b48:	4649      	mov	r1, r9
   48b4a:	4640      	mov	r0, r8
   48b4c:	f008 f95e 	bl	50e0c <clear_event_registrations>
	__asm__ volatile(
   48b50:	f385 8811 	msr	BASEPRI, r5
   48b54:	f3bf 8f6f 	isb	sy
	return swap_rc;
   48b58:	e7d4      	b.n	48b04 <z_impl_k_poll+0x54>
   48b5a:	bf00      	nop
   48b5c:	20006b90 	.word	0x20006b90
   48b60:	20000c54 	.word	0x20000c54
   48b64:	20006de9 	.word	0x20006de9

00048b68 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   48b68:	b538      	push	{r3, r4, r5, lr}
   48b6a:	4603      	mov	r3, r0
	__asm__ volatile(
   48b6c:	f04f 0220 	mov.w	r2, #32
   48b70:	f3ef 8511 	mrs	r5, BASEPRI
   48b74:	f382 8812 	msr	BASEPRI_MAX, r2
   48b78:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   48b7c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   48b7e:	2101      	movs	r1, #1
   48b80:	6081      	str	r1, [r0, #8]
	return list->head == list;
   48b82:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   48b84:	4283      	cmp	r3, r0
   48b86:	d106      	bne.n	48b96 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   48b88:	f385 8811 	msr	BASEPRI, r5
   48b8c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   48b90:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   48b92:	4620      	mov	r0, r4
   48b94:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   48b96:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   48b9a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   48b9c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   48b9e:	2300      	movs	r3, #0
	node->prev = NULL;
   48ba0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   48ba4:	f008 f8d8 	bl	50d58 <signal_poll_event>
	z_reschedule(&lock, key);
   48ba8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   48baa:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   48bac:	4801      	ldr	r0, [pc, #4]	; (48bb4 <z_impl_k_poll_signal_raise+0x4c>)
   48bae:	f7ff fa83 	bl	480b8 <z_reschedule>
	return rc;
   48bb2:	e7ee      	b.n	48b92 <z_impl_k_poll_signal_raise+0x2a>
   48bb4:	20006de9 	.word	0x20006de9

00048bb8 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   48bb8:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   48bba:	4601      	mov	r1, r0
   48bbc:	4801      	ldr	r0, [pc, #4]	; (48bc4 <k_aligned_alloc+0xc>)
   48bbe:	f008 b971 	b.w	50ea4 <z_heap_aligned_alloc>
   48bc2:	bf00      	nop
   48bc4:	20000eb0 	.word	0x20000eb0

00048bc8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   48bc8:	4b01      	ldr	r3, [pc, #4]	; (48bd0 <k_thread_system_pool_assign+0x8>)
   48bca:	6743      	str	r3, [r0, #116]	; 0x74
}
   48bcc:	4770      	bx	lr
   48bce:	bf00      	nop
   48bd0:	20000eb0 	.word	0x20000eb0

00048bd4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   48bd4:	b538      	push	{r3, r4, r5, lr}
   48bd6:	4604      	mov	r4, r0
   48bd8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   48bda:	f007 fc94 	bl	50506 <k_is_in_isr>
   48bde:	b950      	cbnz	r0, 48bf6 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   48be0:	4b06      	ldr	r3, [pc, #24]	; (48bfc <z_thread_aligned_alloc+0x28>)
   48be2:	689b      	ldr	r3, [r3, #8]
   48be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   48be6:	b143      	cbz	r3, 48bfa <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   48be8:	462a      	mov	r2, r5
   48bea:	4621      	mov	r1, r4
   48bec:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   48bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   48bf2:	f008 b957 	b.w	50ea4 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   48bf6:	4b02      	ldr	r3, [pc, #8]	; (48c00 <z_thread_aligned_alloc+0x2c>)
   48bf8:	e7f6      	b.n	48be8 <z_thread_aligned_alloc+0x14>
}
   48bfa:	bd38      	pop	{r3, r4, r5, pc}
   48bfc:	20006b90 	.word	0x20006b90
   48c00:	20000eb0 	.word	0x20000eb0

00048c04 <__udivmoddi4>:
   48c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   48c08:	9e08      	ldr	r6, [sp, #32]
   48c0a:	460d      	mov	r5, r1
   48c0c:	4604      	mov	r4, r0
   48c0e:	460f      	mov	r7, r1
   48c10:	2b00      	cmp	r3, #0
   48c12:	d14a      	bne.n	48caa <__udivmoddi4+0xa6>
   48c14:	428a      	cmp	r2, r1
   48c16:	4694      	mov	ip, r2
   48c18:	d965      	bls.n	48ce6 <__udivmoddi4+0xe2>
   48c1a:	fab2 f382 	clz	r3, r2
   48c1e:	b143      	cbz	r3, 48c32 <__udivmoddi4+0x2e>
   48c20:	fa02 fc03 	lsl.w	ip, r2, r3
   48c24:	f1c3 0220 	rsb	r2, r3, #32
   48c28:	409f      	lsls	r7, r3
   48c2a:	fa20 f202 	lsr.w	r2, r0, r2
   48c2e:	4317      	orrs	r7, r2
   48c30:	409c      	lsls	r4, r3
   48c32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   48c36:	fa1f f58c 	uxth.w	r5, ip
   48c3a:	fbb7 f1fe 	udiv	r1, r7, lr
   48c3e:	0c22      	lsrs	r2, r4, #16
   48c40:	fb0e 7711 	mls	r7, lr, r1, r7
   48c44:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   48c48:	fb01 f005 	mul.w	r0, r1, r5
   48c4c:	4290      	cmp	r0, r2
   48c4e:	d90a      	bls.n	48c66 <__udivmoddi4+0x62>
   48c50:	eb1c 0202 	adds.w	r2, ip, r2
   48c54:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
   48c58:	f080 811b 	bcs.w	48e92 <__udivmoddi4+0x28e>
   48c5c:	4290      	cmp	r0, r2
   48c5e:	f240 8118 	bls.w	48e92 <__udivmoddi4+0x28e>
   48c62:	3902      	subs	r1, #2
   48c64:	4462      	add	r2, ip
   48c66:	1a12      	subs	r2, r2, r0
   48c68:	b2a4      	uxth	r4, r4
   48c6a:	fbb2 f0fe 	udiv	r0, r2, lr
   48c6e:	fb0e 2210 	mls	r2, lr, r0, r2
   48c72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   48c76:	fb00 f505 	mul.w	r5, r0, r5
   48c7a:	42a5      	cmp	r5, r4
   48c7c:	d90a      	bls.n	48c94 <__udivmoddi4+0x90>
   48c7e:	eb1c 0404 	adds.w	r4, ip, r4
   48c82:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   48c86:	f080 8106 	bcs.w	48e96 <__udivmoddi4+0x292>
   48c8a:	42a5      	cmp	r5, r4
   48c8c:	f240 8103 	bls.w	48e96 <__udivmoddi4+0x292>
   48c90:	4464      	add	r4, ip
   48c92:	3802      	subs	r0, #2
   48c94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   48c98:	1b64      	subs	r4, r4, r5
   48c9a:	2100      	movs	r1, #0
   48c9c:	b11e      	cbz	r6, 48ca6 <__udivmoddi4+0xa2>
   48c9e:	40dc      	lsrs	r4, r3
   48ca0:	2300      	movs	r3, #0
   48ca2:	e9c6 4300 	strd	r4, r3, [r6]
   48ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   48caa:	428b      	cmp	r3, r1
   48cac:	d908      	bls.n	48cc0 <__udivmoddi4+0xbc>
   48cae:	2e00      	cmp	r6, #0
   48cb0:	f000 80ec 	beq.w	48e8c <__udivmoddi4+0x288>
   48cb4:	2100      	movs	r1, #0
   48cb6:	e9c6 0500 	strd	r0, r5, [r6]
   48cba:	4608      	mov	r0, r1
   48cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   48cc0:	fab3 f183 	clz	r1, r3
   48cc4:	2900      	cmp	r1, #0
   48cc6:	d149      	bne.n	48d5c <__udivmoddi4+0x158>
   48cc8:	42ab      	cmp	r3, r5
   48cca:	d302      	bcc.n	48cd2 <__udivmoddi4+0xce>
   48ccc:	4282      	cmp	r2, r0
   48cce:	f200 80f7 	bhi.w	48ec0 <__udivmoddi4+0x2bc>
   48cd2:	1a84      	subs	r4, r0, r2
   48cd4:	eb65 0203 	sbc.w	r2, r5, r3
   48cd8:	2001      	movs	r0, #1
   48cda:	4617      	mov	r7, r2
   48cdc:	2e00      	cmp	r6, #0
   48cde:	d0e2      	beq.n	48ca6 <__udivmoddi4+0xa2>
   48ce0:	e9c6 4700 	strd	r4, r7, [r6]
   48ce4:	e7df      	b.n	48ca6 <__udivmoddi4+0xa2>
   48ce6:	b902      	cbnz	r2, 48cea <__udivmoddi4+0xe6>
   48ce8:	deff      	udf	#255	; 0xff
   48cea:	fab2 f382 	clz	r3, r2
   48cee:	2b00      	cmp	r3, #0
   48cf0:	f040 808f 	bne.w	48e12 <__udivmoddi4+0x20e>
   48cf4:	1a8a      	subs	r2, r1, r2
   48cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
   48cfa:	fa1f fe8c 	uxth.w	lr, ip
   48cfe:	2101      	movs	r1, #1
   48d00:	fbb2 f5f7 	udiv	r5, r2, r7
   48d04:	fb07 2015 	mls	r0, r7, r5, r2
   48d08:	0c22      	lsrs	r2, r4, #16
   48d0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   48d0e:	fb0e f005 	mul.w	r0, lr, r5
   48d12:	4290      	cmp	r0, r2
   48d14:	d908      	bls.n	48d28 <__udivmoddi4+0x124>
   48d16:	eb1c 0202 	adds.w	r2, ip, r2
   48d1a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   48d1e:	d202      	bcs.n	48d26 <__udivmoddi4+0x122>
   48d20:	4290      	cmp	r0, r2
   48d22:	f200 80ca 	bhi.w	48eba <__udivmoddi4+0x2b6>
   48d26:	4645      	mov	r5, r8
   48d28:	1a12      	subs	r2, r2, r0
   48d2a:	b2a4      	uxth	r4, r4
   48d2c:	fbb2 f0f7 	udiv	r0, r2, r7
   48d30:	fb07 2210 	mls	r2, r7, r0, r2
   48d34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   48d38:	fb0e fe00 	mul.w	lr, lr, r0
   48d3c:	45a6      	cmp	lr, r4
   48d3e:	d908      	bls.n	48d52 <__udivmoddi4+0x14e>
   48d40:	eb1c 0404 	adds.w	r4, ip, r4
   48d44:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   48d48:	d202      	bcs.n	48d50 <__udivmoddi4+0x14c>
   48d4a:	45a6      	cmp	lr, r4
   48d4c:	f200 80ba 	bhi.w	48ec4 <__udivmoddi4+0x2c0>
   48d50:	4610      	mov	r0, r2
   48d52:	eba4 040e 	sub.w	r4, r4, lr
   48d56:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   48d5a:	e79f      	b.n	48c9c <__udivmoddi4+0x98>
   48d5c:	f1c1 0720 	rsb	r7, r1, #32
   48d60:	408b      	lsls	r3, r1
   48d62:	fa22 fc07 	lsr.w	ip, r2, r7
   48d66:	ea4c 0c03 	orr.w	ip, ip, r3
   48d6a:	fa05 f401 	lsl.w	r4, r5, r1
   48d6e:	fa20 f307 	lsr.w	r3, r0, r7
   48d72:	40fd      	lsrs	r5, r7
   48d74:	4323      	orrs	r3, r4
   48d76:	fa00 f901 	lsl.w	r9, r0, r1
   48d7a:	ea4f 401c 	mov.w	r0, ip, lsr #16
   48d7e:	fa1f fe8c 	uxth.w	lr, ip
   48d82:	fbb5 f8f0 	udiv	r8, r5, r0
   48d86:	0c1c      	lsrs	r4, r3, #16
   48d88:	fb00 5518 	mls	r5, r0, r8, r5
   48d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   48d90:	fb08 f50e 	mul.w	r5, r8, lr
   48d94:	42a5      	cmp	r5, r4
   48d96:	fa02 f201 	lsl.w	r2, r2, r1
   48d9a:	d90b      	bls.n	48db4 <__udivmoddi4+0x1b0>
   48d9c:	eb1c 0404 	adds.w	r4, ip, r4
   48da0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   48da4:	f080 8087 	bcs.w	48eb6 <__udivmoddi4+0x2b2>
   48da8:	42a5      	cmp	r5, r4
   48daa:	f240 8084 	bls.w	48eb6 <__udivmoddi4+0x2b2>
   48dae:	f1a8 0802 	sub.w	r8, r8, #2
   48db2:	4464      	add	r4, ip
   48db4:	1b64      	subs	r4, r4, r5
   48db6:	b29d      	uxth	r5, r3
   48db8:	fbb4 f3f0 	udiv	r3, r4, r0
   48dbc:	fb00 4413 	mls	r4, r0, r3, r4
   48dc0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   48dc4:	fb03 fe0e 	mul.w	lr, r3, lr
   48dc8:	45a6      	cmp	lr, r4
   48dca:	d908      	bls.n	48dde <__udivmoddi4+0x1da>
   48dcc:	eb1c 0404 	adds.w	r4, ip, r4
   48dd0:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
   48dd4:	d26b      	bcs.n	48eae <__udivmoddi4+0x2aa>
   48dd6:	45a6      	cmp	lr, r4
   48dd8:	d969      	bls.n	48eae <__udivmoddi4+0x2aa>
   48dda:	3b02      	subs	r3, #2
   48ddc:	4464      	add	r4, ip
   48dde:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
   48de2:	fba0 8302 	umull	r8, r3, r0, r2
   48de6:	eba4 040e 	sub.w	r4, r4, lr
   48dea:	429c      	cmp	r4, r3
   48dec:	46c6      	mov	lr, r8
   48dee:	461d      	mov	r5, r3
   48df0:	d355      	bcc.n	48e9e <__udivmoddi4+0x29a>
   48df2:	d052      	beq.n	48e9a <__udivmoddi4+0x296>
   48df4:	b156      	cbz	r6, 48e0c <__udivmoddi4+0x208>
   48df6:	ebb9 030e 	subs.w	r3, r9, lr
   48dfa:	eb64 0405 	sbc.w	r4, r4, r5
   48dfe:	fa04 f707 	lsl.w	r7, r4, r7
   48e02:	40cb      	lsrs	r3, r1
   48e04:	40cc      	lsrs	r4, r1
   48e06:	431f      	orrs	r7, r3
   48e08:	e9c6 7400 	strd	r7, r4, [r6]
   48e0c:	2100      	movs	r1, #0
   48e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   48e12:	f1c3 0120 	rsb	r1, r3, #32
   48e16:	fa02 fc03 	lsl.w	ip, r2, r3
   48e1a:	fa20 f201 	lsr.w	r2, r0, r1
   48e1e:	fa25 f101 	lsr.w	r1, r5, r1
   48e22:	409d      	lsls	r5, r3
   48e24:	432a      	orrs	r2, r5
   48e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
   48e2a:	fa1f fe8c 	uxth.w	lr, ip
   48e2e:	fbb1 f0f7 	udiv	r0, r1, r7
   48e32:	fb07 1510 	mls	r5, r7, r0, r1
   48e36:	0c11      	lsrs	r1, r2, #16
   48e38:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
   48e3c:	fb00 f50e 	mul.w	r5, r0, lr
   48e40:	428d      	cmp	r5, r1
   48e42:	fa04 f403 	lsl.w	r4, r4, r3
   48e46:	d908      	bls.n	48e5a <__udivmoddi4+0x256>
   48e48:	eb1c 0101 	adds.w	r1, ip, r1
   48e4c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   48e50:	d22f      	bcs.n	48eb2 <__udivmoddi4+0x2ae>
   48e52:	428d      	cmp	r5, r1
   48e54:	d92d      	bls.n	48eb2 <__udivmoddi4+0x2ae>
   48e56:	3802      	subs	r0, #2
   48e58:	4461      	add	r1, ip
   48e5a:	1b49      	subs	r1, r1, r5
   48e5c:	b292      	uxth	r2, r2
   48e5e:	fbb1 f5f7 	udiv	r5, r1, r7
   48e62:	fb07 1115 	mls	r1, r7, r5, r1
   48e66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   48e6a:	fb05 f10e 	mul.w	r1, r5, lr
   48e6e:	4291      	cmp	r1, r2
   48e70:	d908      	bls.n	48e84 <__udivmoddi4+0x280>
   48e72:	eb1c 0202 	adds.w	r2, ip, r2
   48e76:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   48e7a:	d216      	bcs.n	48eaa <__udivmoddi4+0x2a6>
   48e7c:	4291      	cmp	r1, r2
   48e7e:	d914      	bls.n	48eaa <__udivmoddi4+0x2a6>
   48e80:	3d02      	subs	r5, #2
   48e82:	4462      	add	r2, ip
   48e84:	1a52      	subs	r2, r2, r1
   48e86:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
   48e8a:	e739      	b.n	48d00 <__udivmoddi4+0xfc>
   48e8c:	4631      	mov	r1, r6
   48e8e:	4630      	mov	r0, r6
   48e90:	e709      	b.n	48ca6 <__udivmoddi4+0xa2>
   48e92:	4639      	mov	r1, r7
   48e94:	e6e7      	b.n	48c66 <__udivmoddi4+0x62>
   48e96:	4610      	mov	r0, r2
   48e98:	e6fc      	b.n	48c94 <__udivmoddi4+0x90>
   48e9a:	45c1      	cmp	r9, r8
   48e9c:	d2aa      	bcs.n	48df4 <__udivmoddi4+0x1f0>
   48e9e:	ebb8 0e02 	subs.w	lr, r8, r2
   48ea2:	eb63 050c 	sbc.w	r5, r3, ip
   48ea6:	3801      	subs	r0, #1
   48ea8:	e7a4      	b.n	48df4 <__udivmoddi4+0x1f0>
   48eaa:	4645      	mov	r5, r8
   48eac:	e7ea      	b.n	48e84 <__udivmoddi4+0x280>
   48eae:	4603      	mov	r3, r0
   48eb0:	e795      	b.n	48dde <__udivmoddi4+0x1da>
   48eb2:	4640      	mov	r0, r8
   48eb4:	e7d1      	b.n	48e5a <__udivmoddi4+0x256>
   48eb6:	46d0      	mov	r8, sl
   48eb8:	e77c      	b.n	48db4 <__udivmoddi4+0x1b0>
   48eba:	3d02      	subs	r5, #2
   48ebc:	4462      	add	r2, ip
   48ebe:	e733      	b.n	48d28 <__udivmoddi4+0x124>
   48ec0:	4608      	mov	r0, r1
   48ec2:	e70b      	b.n	48cdc <__udivmoddi4+0xd8>
   48ec4:	4464      	add	r4, ip
   48ec6:	3802      	subs	r0, #2
   48ec8:	e743      	b.n	48d52 <__udivmoddi4+0x14e>
   48eca:	bf00      	nop

00048ecc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   48ecc:	4770      	bx	lr

00048ece <strlcpy>:
 *
 * Nathan Myers <ncm-nospam@cantrip.org>, 2003/06/03
 * Placed in the public domain.
 */

size_t strlcpy(char *dst, const char *src, size_t size) {
   48ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48ed0:	4606      	mov	r6, r0
    const size_t len = strlen(src);
   48ed2:	4608      	mov	r0, r1
size_t strlcpy(char *dst, const char *src, size_t size) {
   48ed4:	460f      	mov	r7, r1
   48ed6:	4614      	mov	r4, r2
    const size_t len = strlen(src);
   48ed8:	f002 fca3 	bl	4b822 <strlen>
   48edc:	4605      	mov	r5, r0
    if (size != 0) {
   48ede:	b154      	cbz	r4, 48ef6 <strlcpy+0x28>
        memcpy(dst, src, (len > size - 1) ? size - 1 : len);
   48ee0:	3c01      	subs	r4, #1
   48ee2:	4284      	cmp	r4, r0
   48ee4:	4622      	mov	r2, r4
   48ee6:	4639      	mov	r1, r7
   48ee8:	bf28      	it	cs
   48eea:	4602      	movcs	r2, r0
   48eec:	4630      	mov	r0, r6
   48eee:	f002 fccc 	bl	4b88a <memcpy>
        dst[size - 1] = 0;
   48ef2:	2300      	movs	r3, #0
   48ef4:	5533      	strb	r3, [r6, r4]
    }
    return len;
}
   48ef6:	4628      	mov	r0, r5
   48ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00048efa <zmk_event_manager_raise>:

int zmk_event_manager_raise(zmk_event_t *event) { return zmk_event_manager_handle_from(event, 0); }
   48efa:	2100      	movs	r1, #0
   48efc:	f7df bef2 	b.w	28ce4 <zmk_event_manager_handle_from>

00048f00 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   48f00:	2301      	movs	r3, #1
   48f02:	fa03 f101 	lsl.w	r1, r3, r1
   48f06:	6903      	ldr	r3, [r0, #16]
   48f08:	681b      	ldr	r3, [r3, #0]
   48f0a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   48f0c:	bf18      	it	ne
   48f0e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   48f12:	b112      	cbz	r2, 48f1a <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   48f14:	6883      	ldr	r3, [r0, #8]
   48f16:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   48f18:	4718      	bx	r3
   48f1a:	6883      	ldr	r3, [r0, #8]
   48f1c:	691b      	ldr	r3, [r3, #16]
   48f1e:	e7fb      	b.n	48f18 <gpio_pin_set+0x18>

00048f20 <ext_power_generic_get>:
    return data->status;
   48f20:	6903      	ldr	r3, [r0, #16]
}
   48f22:	7918      	ldrb	r0, [r3, #4]
   48f24:	4770      	bx	lr

00048f26 <ext_power_generic_enable>:
static int ext_power_generic_enable(const struct device *dev) {
   48f26:	b510      	push	{r4, lr}
    if (gpio_pin_set(data->gpio, config->pin, 1)) {
   48f28:	6843      	ldr	r3, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   48f2a:	6904      	ldr	r4, [r0, #16]
    if (gpio_pin_set(data->gpio, config->pin, 1)) {
   48f2c:	7919      	ldrb	r1, [r3, #4]
   48f2e:	6820      	ldr	r0, [r4, #0]
   48f30:	2201      	movs	r2, #1
   48f32:	f7ff ffe5 	bl	48f00 <gpio_pin_set>
   48f36:	b928      	cbnz	r0, 48f44 <ext_power_generic_enable+0x1e>
    data->status = true;
   48f38:	2301      	movs	r3, #1
   48f3a:	7123      	strb	r3, [r4, #4]
}
   48f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return ext_power_save_state();
   48f40:	f7df bf74 	b.w	28e2c <ext_power_save_state>
}
   48f44:	f06f 0004 	mvn.w	r0, #4
   48f48:	bd10      	pop	{r4, pc}

00048f4a <ext_power_generic_disable>:
static int ext_power_generic_disable(const struct device *dev) {
   48f4a:	b510      	push	{r4, lr}
    if (gpio_pin_set(data->gpio, config->pin, 0)) {
   48f4c:	6843      	ldr	r3, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   48f4e:	6904      	ldr	r4, [r0, #16]
    if (gpio_pin_set(data->gpio, config->pin, 0)) {
   48f50:	7919      	ldrb	r1, [r3, #4]
   48f52:	6820      	ldr	r0, [r4, #0]
   48f54:	2200      	movs	r2, #0
   48f56:	f7ff ffd3 	bl	48f00 <gpio_pin_set>
   48f5a:	b920      	cbnz	r0, 48f66 <ext_power_generic_disable+0x1c>
    data->status = false;
   48f5c:	7120      	strb	r0, [r4, #4]
}
   48f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return ext_power_save_state();
   48f62:	f7df bf63 	b.w	28e2c <ext_power_save_state>
}
   48f66:	f06f 0004 	mvn.w	r0, #4
   48f6a:	bd10      	pop	{r4, pc}

00048f6c <behavior_reset_init>:
#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)
struct behavior_reset_config {
    int type;
};

static int behavior_reset_init(const struct device *dev) { return 0; };
   48f6c:	2000      	movs	r0, #0
   48f6e:	4770      	bx	lr

00048f70 <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   48f70:	b082      	sub	sp, #8
   48f72:	b508      	push	{r3, lr}
   48f74:	a902      	add	r1, sp, #8
   48f76:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   48f7a:	6800      	ldr	r0, [r0, #0]
   48f7c:	f7fe fa76 	bl	4746c <z_impl_device_get_binding>
    const struct behavior_reset_config *cfg = dev->config;

    // TODO: Correct magic code for going into DFU?
    // See
    // https://github.com/adafruit/Adafruit_nRF52_Bootloader/blob/d6b28e66053eea467166f44875e3c7ec741cb471/src/main.c#L107
    sys_reboot(cfg->type);
   48f80:	6843      	ldr	r3, [r0, #4]
   48f82:	6818      	ldr	r0, [r3, #0]
   48f84:	f7e1 fd9c 	bl	2aac0 <sys_reboot>

00048f88 <ext_power_enable>:
    if (api->enable == NULL) {
   48f88:	6883      	ldr	r3, [r0, #8]
   48f8a:	681b      	ldr	r3, [r3, #0]
   48f8c:	b103      	cbz	r3, 48f90 <ext_power_enable+0x8>
    return api->enable(dev);
   48f8e:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_enable(dev);
}
   48f90:	f06f 0085 	mvn.w	r0, #133	; 0x85
   48f94:	4770      	bx	lr

00048f96 <ext_power_disable>:
__syscall int ext_power_disable(const struct device *dev);

static inline int z_impl_ext_power_disable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->disable == NULL) {
   48f96:	6883      	ldr	r3, [r0, #8]
   48f98:	685b      	ldr	r3, [r3, #4]
   48f9a:	b103      	cbz	r3, 48f9e <ext_power_disable+0x8>
        return -ENOTSUP;
    }

    return api->disable(dev);
   48f9c:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_DISABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_disable(dev);
}
   48f9e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   48fa2:	4770      	bx	lr

00048fa4 <ext_power_get>:
__syscall int ext_power_get(const struct device *dev);

static inline int z_impl_ext_power_get(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->get == NULL) {
   48fa4:	6883      	ldr	r3, [r0, #8]
   48fa6:	689b      	ldr	r3, [r3, #8]
   48fa8:	b103      	cbz	r3, 48fac <ext_power_get+0x8>
        return -ENOTSUP;
    }

    return api->get(dev);
   48faa:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_GET);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_get(dev);
}
   48fac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   48fb0:	4770      	bx	lr

00048fb2 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   48fb2:	b082      	sub	sp, #8
   48fb4:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   48fb8:	2000      	movs	r0, #0
   48fba:	b002      	add	sp, #8
   48fbc:	4770      	bx	lr

00048fbe <behavior_ext_power_init>:

static int behavior_ext_power_init(const struct device *dev) { return 0; };
   48fbe:	2000      	movs	r0, #0
   48fc0:	4770      	bx	lr

00048fc2 <zmk_hid_register_mods>:
int zmk_hid_register_mods(zmk_mod_flags_t modifiers) {
   48fc2:	b570      	push	{r4, r5, r6, lr}
   48fc4:	2400      	movs	r4, #0
   48fc6:	4606      	mov	r6, r0
    int ret = 0;
   48fc8:	4625      	mov	r5, r4
        if (modifiers & (1 << i)) {
   48fca:	fa46 f304 	asr.w	r3, r6, r4
   48fce:	07db      	lsls	r3, r3, #31
   48fd0:	b2e0      	uxtb	r0, r4
   48fd2:	d502      	bpl.n	48fda <zmk_hid_register_mods+0x18>
            ret += zmk_hid_register_mod(i);
   48fd4:	f7df fff0 	bl	28fb8 <zmk_hid_register_mod>
   48fd8:	4405      	add	r5, r0
    for (zmk_mod_t i = 0; i < 8; i++) {
   48fda:	3401      	adds	r4, #1
   48fdc:	2c08      	cmp	r4, #8
   48fde:	d1f4      	bne.n	48fca <zmk_hid_register_mods+0x8>
}
   48fe0:	4628      	mov	r0, r5
   48fe2:	bd70      	pop	{r4, r5, r6, pc}

00048fe4 <zmk_hid_unregister_mods>:
int zmk_hid_unregister_mods(zmk_mod_flags_t modifiers) {
   48fe4:	b570      	push	{r4, r5, r6, lr}
   48fe6:	2400      	movs	r4, #0
   48fe8:	4606      	mov	r6, r0
    int ret = 0;
   48fea:	4625      	mov	r5, r4
        if (modifiers & (1 << i)) {
   48fec:	fa46 f304 	asr.w	r3, r6, r4
   48ff0:	07db      	lsls	r3, r3, #31
   48ff2:	b2e0      	uxtb	r0, r4
   48ff4:	d502      	bpl.n	48ffc <zmk_hid_unregister_mods+0x18>
            ret += zmk_hid_unregister_mod(i);
   48ff6:	f7df fff9 	bl	28fec <zmk_hid_unregister_mod>
   48ffa:	4405      	add	r5, r0
    for (zmk_mod_t i = 0; i < 8; i++) {
   48ffc:	3401      	adds	r4, #1
   48ffe:	2c08      	cmp	r4, #8
   49000:	d1f4      	bne.n	48fec <zmk_hid_unregister_mods+0x8>
}
   49002:	4628      	mov	r0, r5
   49004:	bd70      	pop	{r4, r5, r6, pc}

00049006 <zmk_hid_press>:
    switch (ZMK_HID_USAGE_PAGE(usage)) {
   49006:	f3c0 4307 	ubfx	r3, r0, #16, #8
   4900a:	2b07      	cmp	r3, #7
   4900c:	d004      	beq.n	49018 <zmk_hid_press+0x12>
   4900e:	2b0c      	cmp	r3, #12
   49010:	d005      	beq.n	4901e <zmk_hid_press+0x18>
}
   49012:	f06f 0015 	mvn.w	r0, #21
   49016:	4770      	bx	lr
        return zmk_hid_keyboard_press(ZMK_HID_USAGE_ID(usage));
   49018:	b280      	uxth	r0, r0
   4901a:	f7e0 b825 	b.w	29068 <zmk_hid_keyboard_press>
        return zmk_hid_consumer_press(ZMK_HID_USAGE_ID(usage));
   4901e:	b280      	uxth	r0, r0
   49020:	f7e0 b85c 	b.w	290dc <zmk_hid_consumer_press>

00049024 <zmk_hid_release>:
    switch (ZMK_HID_USAGE_PAGE(usage)) {
   49024:	f3c0 4307 	ubfx	r3, r0, #16, #8
   49028:	2b07      	cmp	r3, #7
   4902a:	d004      	beq.n	49036 <zmk_hid_release+0x12>
   4902c:	2b0c      	cmp	r3, #12
   4902e:	d005      	beq.n	4903c <zmk_hid_release+0x18>
}
   49030:	f06f 0015 	mvn.w	r0, #21
   49034:	4770      	bx	lr
        return zmk_hid_keyboard_release(ZMK_HID_USAGE_ID(usage));
   49036:	b280      	uxth	r0, r0
   49038:	f7e0 b82e 	b.w	29098 <zmk_hid_keyboard_release>
        return zmk_hid_consumer_release(ZMK_HID_USAGE_ID(usage));
   4903c:	b280      	uxth	r0, r0
   4903e:	f7e0 b861 	b.w	29104 <zmk_hid_consumer_release>

00049042 <behavior_key_press_init>:
#include <zmk/events/keycode_state_changed.h>
#include <zmk/behavior.h>

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

static int behavior_key_press_init(const struct device *dev) { return 0; };
   49042:	2000      	movs	r0, #0
   49044:	4770      	bx	lr

00049046 <zmk_keycode_state_changed_from_encoded>:
};

ZMK_EVENT_DECLARE(zmk_keycode_state_changed);

static inline struct zmk_keycode_state_changed_event *
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
   49046:	b570      	push	{r4, r5, r6, lr}
   49048:	b286      	uxth	r6, r0
    uint16_t id = ZMK_HID_USAGE_ID(encoded);
    uint8_t implicit_modifiers = 0x00;
    uint8_t explicit_modifiers = 0x00;

    if (!page) {
        page = HID_USAGE_KEY;
   4904a:	f410 0f7f 	tst.w	r0, #16711680	; 0xff0000
    zmk_key_t key;
    bool pressed;
};

static inline bool is_mod(uint8_t usage_page, uint32_t keycode) {
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
   4904e:	f1a6 05e0 	sub.w	r5, r6, #224	; 0xe0
    uint16_t page = ZMK_HID_USAGE_PAGE(encoded);
   49052:	f3c0 4407 	ubfx	r4, r0, #16, #8
        page = HID_USAGE_KEY;
   49056:	bf08      	it	eq
   49058:	2407      	moveq	r4, #7
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
   4905a:	2d07      	cmp	r5, #7
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
   4905c:	b088      	sub	sp, #32
    }

    if (is_mod(page, id)) {
        explicit_modifiers = SELECT_MODS(encoded);
   4905e:	ea4f 6010 	mov.w	r0, r0, lsr #24
   49062:	d801      	bhi.n	49068 <zmk_keycode_state_changed_from_encoded+0x22>
    if (is_mod(page, id)) {
   49064:	2c07      	cmp	r4, #7
   49066:	d016      	beq.n	49096 <zmk_keycode_state_changed_from_encoded+0x50>
    uint8_t explicit_modifiers = 0x00;
   49068:	2500      	movs	r5, #0
    } else {
        implicit_modifiers = SELECT_MODS(encoded);
    }

    return new_zmk_keycode_state_changed(
        (struct zmk_keycode_state_changed){.usage_page = page,
   4906a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    return new_zmk_keycode_state_changed(
   4906e:	ab08      	add	r3, sp, #32
        (struct zmk_keycode_state_changed){.usage_page = page,
   49070:	f88d 0010 	strb.w	r0, [sp, #16]
   49074:	f88d 1012 	strb.w	r1, [sp, #18]
    return new_zmk_keycode_state_changed(
   49078:	e913 0003 	ldmdb	r3, {r0, r1}
   4907c:	e88d 0003 	stmia.w	sp, {r0, r1}
        (struct zmk_keycode_state_changed){.usage_page = page,
   49080:	f8ad 4008 	strh.w	r4, [sp, #8]
   49084:	9603      	str	r6, [sp, #12]
   49086:	f88d 5011 	strb.w	r5, [sp, #17]
    return new_zmk_keycode_state_changed(
   4908a:	ab02      	add	r3, sp, #8
   4908c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   4908e:	f7e0 f9f9 	bl	29484 <new_zmk_keycode_state_changed>
                                           .keycode = id,
                                           .implicit_modifiers = implicit_modifiers,
                                           .explicit_modifiers = explicit_modifiers,
                                           .state = pressed,
                                           .timestamp = timestamp});
}
   49092:	b008      	add	sp, #32
   49094:	bd70      	pop	{r4, r5, r6, pc}
        explicit_modifiers = SELECT_MODS(encoded);
   49096:	4605      	mov	r5, r0
    uint8_t implicit_modifiers = 0x00;
   49098:	2000      	movs	r0, #0
   4909a:	e7e6      	b.n	4906a <zmk_keycode_state_changed_from_encoded+0x24>

0004909c <on_keymap_binding_released>:
    return ZMK_EVENT_RAISE(
        zmk_keycode_state_changed_from_encoded(binding->param1, true, event.timestamp));
}

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   4909c:	b082      	sub	sp, #8
   4909e:	b508      	push	{r3, lr}
   490a0:	a902      	add	r1, sp, #8
   490a2:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("position %d keycode 0x%02X", event.position, binding->param1);
    return ZMK_EVENT_RAISE(
   490a6:	6840      	ldr	r0, [r0, #4]
   490a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   490ac:	2100      	movs	r1, #0
   490ae:	f7ff ffca 	bl	49046 <zmk_keycode_state_changed_from_encoded>
        zmk_keycode_state_changed_from_encoded(binding->param1, false, event.timestamp));
}
   490b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   490b6:	b002      	add	sp, #8
    return ZMK_EVENT_RAISE(
   490b8:	f7ff bf1f 	b.w	48efa <zmk_event_manager_raise>

000490bc <on_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   490bc:	b082      	sub	sp, #8
   490be:	b508      	push	{r3, lr}
   490c0:	a902      	add	r1, sp, #8
   490c2:	e881 000c 	stmia.w	r1, {r2, r3}
    return ZMK_EVENT_RAISE(
   490c6:	6840      	ldr	r0, [r0, #4]
   490c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   490cc:	2101      	movs	r1, #1
   490ce:	f7ff ffba 	bl	49046 <zmk_keycode_state_changed_from_encoded>
}
   490d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   490d6:	b002      	add	sp, #8
    return ZMK_EVENT_RAISE(
   490d8:	f7ff bf0f 	b.w	48efa <zmk_event_manager_raise>

000490dc <behavior_mo_init>:
LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

struct behavior_mo_config {};
struct behavior_mo_data {};

static int behavior_mo_init(const struct device *dev) { return 0; };
   490dc:	2000      	movs	r0, #0
   490de:	4770      	bx	lr

000490e0 <mo_keymap_binding_released>:
    LOG_DBG("position %d layer %d", event.position, binding->param1);
    return zmk_keymap_layer_activate(binding->param1);
}

static int mo_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   490e0:	b082      	sub	sp, #8
   490e2:	e88d 000c 	stmia.w	sp, {r2, r3}
    LOG_DBG("position %d layer %d", event.position, binding->param1);
    return zmk_keymap_layer_deactivate(binding->param1);
   490e6:	7900      	ldrb	r0, [r0, #4]
}
   490e8:	b002      	add	sp, #8
    return zmk_keymap_layer_deactivate(binding->param1);
   490ea:	f000 b870 	b.w	491ce <zmk_keymap_layer_deactivate>

000490ee <mo_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   490ee:	b082      	sub	sp, #8
   490f0:	e88d 000c 	stmia.w	sp, {r2, r3}
    return zmk_keymap_layer_activate(binding->param1);
   490f4:	7900      	ldrb	r0, [r0, #4]
}
   490f6:	b002      	add	sp, #8
    return zmk_keymap_layer_activate(binding->param1);
   490f8:	f000 b866 	b.w	491c8 <zmk_keymap_layer_activate>

000490fc <behavior_transparent_init>:

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)

static int behavior_transparent_init(const struct device *dev) { return 0; };
   490fc:	2000      	movs	r0, #0
   490fe:	4770      	bx	lr

00049100 <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   49100:	b082      	sub	sp, #8
   49102:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_TRANSPARENT;
}
   49106:	2001      	movs	r0, #1
   49108:	b002      	add	sp, #8
   4910a:	4770      	bx	lr

0004910c <on_keymap_binding_released>:
   4910c:	b082      	sub	sp, #8
   4910e:	e88d 000c 	stmia.w	sp, {r2, r3}
   49112:	2001      	movs	r0, #1
   49114:	b002      	add	sp, #8
   49116:	4770      	bx	lr

00049118 <behavior_none_init>:

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)

static int behavior_none_init(const struct device *dev) { return 0; };
   49118:	2000      	movs	r0, #0
   4911a:	4770      	bx	lr

0004911c <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   4911c:	b082      	sub	sp, #8
   4911e:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   49122:	2000      	movs	r0, #0
   49124:	b002      	add	sp, #8
   49126:	4770      	bx	lr

00049128 <on_keymap_binding_released>:
   49128:	b082      	sub	sp, #8
   4912a:	e88d 000c 	stmia.w	sp, {r2, r3}
   4912e:	2000      	movs	r0, #0
   49130:	b002      	add	sp, #8
   49132:	4770      	bx	lr

00049134 <endpoint_listener>:

static int endpoint_listener(const zmk_event_t *eh) {
   49134:	b508      	push	{r3, lr}
    update_current_endpoint();
   49136:	f7e0 f85d 	bl	291f4 <update_current_endpoint>
    return 0;
}
   4913a:	2000      	movs	r0, #0
   4913c:	bd08      	pop	{r3, pc}

0004913e <zmk_endpoints_send_report>:
    switch (usage_page) {
   4913e:	2807      	cmp	r0, #7
   49140:	d004      	beq.n	4914c <zmk_endpoints_send_report+0xe>
   49142:	280c      	cmp	r0, #12
   49144:	d004      	beq.n	49150 <zmk_endpoints_send_report+0x12>
}
   49146:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4914a:	4770      	bx	lr
        return send_keyboard_report();
   4914c:	f7df bffe 	b.w	2914c <send_keyboard_report>
        return send_consumer_report();
   49150:	f7e0 b814 	b.w	2917c <send_consumer_report>

00049154 <hid_listener>:
        }
    }
    return zmk_endpoints_send_report(ev->usage_page);
}

int hid_listener(const zmk_event_t *eh) {
   49154:	b538      	push	{r3, r4, r5, lr}
    const struct zmk_keycode_state_changed *ev = as_zmk_keycode_state_changed(eh);
   49156:	f7e0 f9b1 	bl	294bc <as_zmk_keycode_state_changed>
    if (ev) {
   4915a:	4604      	mov	r4, r0
   4915c:	b1e8      	cbz	r0, 4919a <hid_listener+0x46>
    err = zmk_hid_press(ZMK_HID_USAGE(ev->usage_page, ev->keycode));
   4915e:	8803      	ldrh	r3, [r0, #0]
   49160:	6840      	ldr	r0, [r0, #4]
   49162:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
        if (ev->state) {
   49166:	7aa3      	ldrb	r3, [r4, #10]
   49168:	b1cb      	cbz	r3, 4919e <hid_listener+0x4a>
    err = zmk_hid_press(ZMK_HID_USAGE(ev->usage_page, ev->keycode));
   4916a:	f7ff ff4c 	bl	49006 <zmk_hid_press>
    if (err < 0) {
   4916e:	2800      	cmp	r0, #0
   49170:	db13      	blt.n	4919a <hid_listener+0x46>
    explicit_mods_changed = zmk_hid_register_mods(ev->explicit_modifiers);
   49172:	7a60      	ldrb	r0, [r4, #9]
   49174:	f7ff ff25 	bl	48fc2 <zmk_hid_register_mods>
   49178:	4605      	mov	r5, r0
    implicit_mods_changed = zmk_hid_implicit_modifiers_press(ev->implicit_modifiers);
   4917a:	7a20      	ldrb	r0, [r4, #8]
   4917c:	f7df ff58 	bl	29030 <zmk_hid_implicit_modifiers_press>
    if (ev->usage_page != HID_USAGE_KEY &&
   49180:	8823      	ldrh	r3, [r4, #0]
   49182:	2b07      	cmp	r3, #7
   49184:	d006      	beq.n	49194 <hid_listener+0x40>
   49186:	2d00      	cmp	r5, #0
   49188:	dc01      	bgt.n	4918e <hid_listener+0x3a>
        (explicit_mods_changed > 0 || implicit_mods_changed > 0)) {
   4918a:	2800      	cmp	r0, #0
   4918c:	dd02      	ble.n	49194 <hid_listener+0x40>
        err = zmk_endpoints_send_report(HID_USAGE_KEY);
   4918e:	2007      	movs	r0, #7
   49190:	f7ff ffd5 	bl	4913e <zmk_endpoints_send_report>
    return zmk_endpoints_send_report(ev->usage_page);
   49194:	8820      	ldrh	r0, [r4, #0]
   49196:	f7ff ffd2 	bl	4913e <zmk_endpoints_send_report>
        } else {
            hid_listener_keycode_released(ev);
        }
    }
    return 0;
}
   4919a:	2000      	movs	r0, #0
   4919c:	bd38      	pop	{r3, r4, r5, pc}
    err = zmk_hid_release(ZMK_HID_USAGE(ev->usage_page, ev->keycode));
   4919e:	f7ff ff41 	bl	49024 <zmk_hid_release>
    if (err < 0) {
   491a2:	2800      	cmp	r0, #0
   491a4:	dbf9      	blt.n	4919a <hid_listener+0x46>
    explicit_mods_changed = zmk_hid_unregister_mods(ev->explicit_modifiers);
   491a6:	7a60      	ldrb	r0, [r4, #9]
   491a8:	f7ff ff1c 	bl	48fe4 <zmk_hid_unregister_mods>
   491ac:	4605      	mov	r5, r0
    implicit_mods_changed = zmk_hid_implicit_modifiers_release();
   491ae:	f7df ff4d 	bl	2904c <zmk_hid_implicit_modifiers_release>
   491b2:	e7e5      	b.n	49180 <hid_listener+0x2c>

000491b4 <zmk_keymap_layer_active_with_state>:
bool zmk_keymap_layer_active_with_state(uint8_t layer, zmk_keymap_layers_state_t state_to_test) {
   491b4:	4603      	mov	r3, r0
    return (state_to_test & (BIT(layer))) == (BIT(layer)) || layer == _zmk_keymap_layer_default;
   491b6:	2001      	movs	r0, #1
   491b8:	fa00 f203 	lsl.w	r2, r0, r3
   491bc:	438a      	bics	r2, r1
   491be:	bf1c      	itt	ne
   491c0:	fab3 f083 	clzne	r0, r3
   491c4:	0940      	lsrne	r0, r0, #5
};
   491c6:	4770      	bx	lr

000491c8 <zmk_keymap_layer_activate>:
int zmk_keymap_layer_activate(uint8_t layer) { return set_layer_state(layer, true); };
   491c8:	2101      	movs	r1, #1
   491ca:	f7e0 b867 	b.w	2929c <set_layer_state>

000491ce <zmk_keymap_layer_deactivate>:
int zmk_keymap_layer_deactivate(uint8_t layer) { return set_layer_state(layer, false); };
   491ce:	2100      	movs	r1, #0
   491d0:	f7e0 b864 	b.w	2929c <set_layer_state>

000491d4 <invoke_locally>:
                   bool pressed) {
   491d4:	b082      	sub	sp, #8
   491d6:	b570      	push	{r4, r5, r6, lr}
   491d8:	b088      	sub	sp, #32
   491da:	a90c      	add	r1, sp, #48	; 0x30
   491dc:	e881 000c 	stmia.w	r1, {r2, r3}
   491e0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   491e4:	4606      	mov	r6, r0
   491e6:	466c      	mov	r4, sp
   491e8:	ad04      	add	r5, sp, #16
    if (pressed) {
   491ea:	b1e3      	cbz	r3, 49226 <invoke_locally+0x52>
        return behavior_keymap_binding_pressed(binding, event);
   491ec:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   491ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_PRESSED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   491f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   491f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
__syscall int behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                              struct zmk_behavior_binding_event event);

static inline int z_impl_behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                                         struct zmk_behavior_binding_event event) {
    const struct device *dev = device_get_binding(binding->behavior_dev);
   491fa:	6830      	ldr	r0, [r6, #0]
   491fc:	f7fe f936 	bl	4746c <z_impl_device_get_binding>

    if (dev == NULL) {
   49200:	b300      	cbz	r0, 49244 <invoke_locally+0x70>
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_pressed == NULL) {
   49202:	6883      	ldr	r3, [r0, #8]
   49204:	689c      	ldr	r4, [r3, #8]
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_released == NULL) {
   49206:	b324      	cbz	r4, 49252 <invoke_locally+0x7e>
        return -ENOTSUP;
    }

    return api->binding_released(binding, event);
   49208:	aa08      	add	r2, sp, #32
   4920a:	e912 0003 	ldmdb	r2, {r0, r1}
   4920e:	ab0e      	add	r3, sp, #56	; 0x38
   49210:	e883 0003 	stmia.w	r3, {r0, r1}
   49214:	e895 000c 	ldmia.w	r5, {r2, r3}
   49218:	4630      	mov	r0, r6
   4921a:	4621      	mov	r1, r4
}
   4921c:	b008      	add	sp, #32
   4921e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   49222:	b002      	add	sp, #8
   49224:	4708      	bx	r1
        return behavior_keymap_binding_released(binding, event);
   49226:	ab0c      	add	r3, sp, #48	; 0x30
   49228:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   4922a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_RELEASED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_released(binding, event);
   4922e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   49232:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49236:	6830      	ldr	r0, [r6, #0]
   49238:	f7fe f918 	bl	4746c <z_impl_device_get_binding>
    if (dev == NULL) {
   4923c:	b110      	cbz	r0, 49244 <invoke_locally+0x70>
    if (api->binding_released == NULL) {
   4923e:	6883      	ldr	r3, [r0, #8]
   49240:	68dc      	ldr	r4, [r3, #12]
   49242:	e7e0      	b.n	49206 <invoke_locally+0x32>
        return -EINVAL;
   49244:	f06f 0015 	mvn.w	r0, #21
}
   49248:	b008      	add	sp, #32
   4924a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   4924e:	b002      	add	sp, #8
   49250:	4770      	bx	lr
        return -ENOTSUP;
   49252:	f06f 0085 	mvn.w	r0, #133	; 0x85
        return behavior_keymap_binding_released(binding, event);
   49256:	e7f7      	b.n	49248 <invoke_locally+0x74>

00049258 <keymap_listener>:
    return -ENOTSUP;
}

#endif /* ZMK_KEYMAP_HAS_SENSORS */

int keymap_listener(const zmk_event_t *eh) {
   49258:	b537      	push	{r0, r1, r2, r4, r5, lr}
    const struct zmk_position_state_changed *pos_ev;
    if ((pos_ev = as_zmk_position_state_changed(eh)) != NULL) {
   4925a:	f7df fe4d 	bl	28ef8 <as_zmk_position_state_changed>
   4925e:	4603      	mov	r3, r0
   49260:	b150      	cbz	r0, 49278 <keymap_listener+0x20>
        return zmk_keymap_position_state_changed(pos_ev->source, pos_ev->position, pos_ev->state,
   49262:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
   49266:	7a02      	ldrb	r2, [r0, #8]
   49268:	7800      	ldrb	r0, [r0, #0]
   4926a:	e9cd 4500 	strd	r4, r5, [sp]
   4926e:	6859      	ldr	r1, [r3, #4]
   49270:	f7e0 f8c8 	bl	29404 <zmk_keymap_position_state_changed>
                                           sensor_ev->timestamp);
    }
#endif /* ZMK_KEYMAP_HAS_SENSORS */

    return -ENOTSUP;
}
   49274:	b003      	add	sp, #12
   49276:	bd30      	pop	{r4, r5, pc}
    return -ENOTSUP;
   49278:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4927c:	e7fa      	b.n	49274 <keymap_listener+0x1c>

0004927e <behavior_bt_init>:
    }

    return -ENOTSUP;
}

static int behavior_bt_init(const struct device *dev) { return 0; };
   4927e:	2000      	movs	r0, #0
   49280:	4770      	bx	lr

00049282 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   49282:	b082      	sub	sp, #8
   49284:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   49288:	2000      	movs	r0, #0
   4928a:	b002      	add	sp, #8
   4928c:	4770      	bx	lr

0004928e <on_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   4928e:	b082      	sub	sp, #8
   49290:	e88d 000c 	stmia.w	sp, {r2, r3}
    switch (binding->param1) {
   49294:	6843      	ldr	r3, [r0, #4]
   49296:	2b03      	cmp	r3, #3
   49298:	d810      	bhi.n	492bc <on_keymap_binding_pressed+0x2e>
   4929a:	e8df f003 	tbb	[pc, r3]
   4929e:	0502      	.short	0x0502
   492a0:	0b08      	.short	0x0b08
}
   492a2:	b002      	add	sp, #8
        return zmk_ble_clear_bonds();
   492a4:	f7e0 bb5e 	b.w	29964 <zmk_ble_clear_bonds>
}
   492a8:	b002      	add	sp, #8
        return zmk_ble_prof_next();
   492aa:	f7e0 bba3 	b.w	299f4 <zmk_ble_prof_next>
}
   492ae:	b002      	add	sp, #8
        return zmk_ble_prof_prev();
   492b0:	f7e0 bbae 	b.w	29a10 <zmk_ble_prof_prev>
        return zmk_ble_prof_select(binding->param2);
   492b4:	7a00      	ldrb	r0, [r0, #8]
}
   492b6:	b002      	add	sp, #8
        return zmk_ble_prof_select(binding->param2);
   492b8:	f7e0 bb80 	b.w	299bc <zmk_ble_prof_select>
}
   492bc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   492c0:	b002      	add	sp, #8
   492c2:	4770      	bx	lr

000492c4 <raise_profile_changed_event_callback>:
    raise_profile_changed_event();
   492c4:	f7e0 b91a 	b.w	294fc <raise_profile_changed_event>

000492c8 <auth_cancel>:
static void auth_cancel(struct bt_conn *conn) {
   492c8:	b500      	push	{lr}
   492ca:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   492cc:	f003 fbe7 	bl	4ca9e <bt_conn_get_dst>
   492d0:	4669      	mov	r1, sp
   492d2:	f7e0 f935 	bl	29540 <bt_addr_le_to_str.constprop.0.isra.0>
}
   492d6:	b009      	add	sp, #36	; 0x24
   492d8:	f85d fb04 	ldr.w	pc, [sp], #4

000492dc <security_changed>:
static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err) {
   492dc:	b500      	push	{lr}
   492de:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   492e0:	f003 fbdd 	bl	4ca9e <bt_conn_get_dst>
   492e4:	4669      	mov	r1, sp
   492e6:	f7e0 f92b 	bl	29540 <bt_addr_le_to_str.constprop.0.isra.0>
}
   492ea:	b009      	add	sp, #36	; 0x24
   492ec:	f85d fb04 	ldr.w	pc, [sp], #4

000492f0 <le_param_updated>:
                             uint16_t timeout) {
   492f0:	b500      	push	{lr}
   492f2:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   492f4:	f003 fbd3 	bl	4ca9e <bt_conn_get_dst>
   492f8:	4669      	mov	r1, sp
   492fa:	f7e0 f921 	bl	29540 <bt_addr_le_to_str.constprop.0.isra.0>
}
   492fe:	b009      	add	sp, #36	; 0x24
   49300:	f85d fb04 	ldr.w	pc, [sp], #4

00049304 <auth_pairing_accept>:
                                                const struct bt_conn_pairing_feat *const feat) {
   49304:	b500      	push	{lr}
   49306:	b089      	sub	sp, #36	; 0x24
    bt_conn_get_info(conn, &info);
   49308:	4669      	mov	r1, sp
   4930a:	f7e6 fb81 	bl	2fa10 <bt_conn_get_info>
    if (info.role == BT_CONN_ROLE_PERIPHERAL && !zmk_ble_active_profile_is_open()) {
   4930e:	f89d 3001 	ldrb.w	r3, [sp, #1]
   49312:	2b01      	cmp	r3, #1
   49314:	d003      	beq.n	4931e <auth_pairing_accept+0x1a>
    return BT_SECURITY_ERR_SUCCESS;
   49316:	2000      	movs	r0, #0
};
   49318:	b009      	add	sp, #36	; 0x24
   4931a:	f85d fb04 	ldr.w	pc, [sp], #4
    if (info.role == BT_CONN_ROLE_PERIPHERAL && !zmk_ble_active_profile_is_open()) {
   4931e:	f7e0 f9d7 	bl	296d0 <zmk_ble_active_profile_is_open>
   49322:	2800      	cmp	r0, #0
   49324:	d1f7      	bne.n	49316 <auth_pairing_accept+0x12>
        return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   49326:	2006      	movs	r0, #6
   49328:	e7f6      	b.n	49318 <auth_pairing_accept+0x14>

0004932a <update_advertising_callback>:
static void update_advertising_callback(struct k_work *work) { update_advertising(); }
   4932a:	f7e0 ba39 	b.w	297a0 <update_advertising>

0004932e <input_ccc_changed>:
}
   4932e:	4770      	bx	lr

00049330 <write_ctrl_point>:
                                const void *buf, uint16_t len, uint16_t offset, uint8_t flags) {
   49330:	b538      	push	{r3, r4, r5, lr}
   49332:	460c      	mov	r4, r1
   49334:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    uint8_t *value = attr->user_data;
   49338:	68e5      	ldr	r5, [r4, #12]
    if (offset + len > sizeof(ctrl_point)) {
   4933a:	461c      	mov	r4, r3
   4933c:	18c3      	adds	r3, r0, r3
   4933e:	2b01      	cmp	r3, #1
                                const void *buf, uint16_t len, uint16_t offset, uint8_t flags) {
   49340:	4611      	mov	r1, r2
    if (offset + len > sizeof(ctrl_point)) {
   49342:	dc05      	bgt.n	49350 <write_ctrl_point+0x20>
    memcpy(value + offset, buf, len);
   49344:	4622      	mov	r2, r4
   49346:	4428      	add	r0, r5
   49348:	f002 fa9f 	bl	4b88a <memcpy>
}
   4934c:	4620      	mov	r0, r4
   4934e:	bd38      	pop	{r3, r4, r5, pc}
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   49350:	f06f 0406 	mvn.w	r4, #6
   49354:	e7fa      	b.n	4934c <write_ctrl_point+0x1c>

00049356 <read_hids_consumer_input_report>:
                                               uint16_t len, uint16_t offset) {
   49356:	b5f0      	push	{r4, r5, r6, r7, lr}
   49358:	b085      	sub	sp, #20
   4935a:	461f      	mov	r7, r3
   4935c:	4604      	mov	r4, r0
   4935e:	460d      	mov	r5, r1
   49360:	4616      	mov	r6, r2
    struct zmk_hid_consumer_report_body *report_body = &zmk_hid_get_consumer_report()->body;
   49362:	f7df feef 	bl	29144 <zmk_hid_get_consumer_report>
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   49366:	230c      	movs	r3, #12
   49368:	9302      	str	r3, [sp, #8]
    struct zmk_hid_consumer_report_body *report_body = &zmk_hid_get_consumer_report()->body;
   4936a:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   4936c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   49370:	9001      	str	r0, [sp, #4]
   49372:	9300      	str	r3, [sp, #0]
   49374:	4632      	mov	r2, r6
   49376:	463b      	mov	r3, r7
   49378:	4629      	mov	r1, r5
   4937a:	4620      	mov	r0, r4
   4937c:	f004 fe8b 	bl	4e096 <bt_gatt_attr_read>
}
   49380:	b005      	add	sp, #20
   49382:	bdf0      	pop	{r4, r5, r6, r7, pc}

00049384 <read_hids_report_ref>:
                                    void *buf, uint16_t len, uint16_t offset) {
   49384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   49386:	2402      	movs	r4, #2
   49388:	9402      	str	r4, [sp, #8]
   4938a:	68cc      	ldr	r4, [r1, #12]
   4938c:	9401      	str	r4, [sp, #4]
   4938e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   49392:	9400      	str	r4, [sp, #0]
   49394:	f004 fe7f 	bl	4e096 <bt_gatt_attr_read>
}
   49398:	b004      	add	sp, #16
   4939a:	bd10      	pop	{r4, pc}

0004939c <read_hids_info>:
                              uint16_t len, uint16_t offset) {
   4939c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   4939e:	2404      	movs	r4, #4
   493a0:	9402      	str	r4, [sp, #8]
   493a2:	68cc      	ldr	r4, [r1, #12]
   493a4:	9401      	str	r4, [sp, #4]
   493a6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   493aa:	9400      	str	r4, [sp, #0]
   493ac:	f004 fe73 	bl	4e096 <bt_gatt_attr_read>
}
   493b0:	b004      	add	sp, #16
   493b2:	bd10      	pop	{r4, pc}

000493b4 <read_hids_input_report>:
                                      void *buf, uint16_t len, uint16_t offset) {
   493b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   493b6:	b085      	sub	sp, #20
   493b8:	461f      	mov	r7, r3
   493ba:	4604      	mov	r4, r0
   493bc:	460d      	mov	r5, r1
   493be:	4616      	mov	r6, r2
    struct zmk_hid_keyboard_report_body *report_body = &zmk_hid_get_keyboard_report()->body;
   493c0:	f7df febc 	bl	2913c <zmk_hid_get_keyboard_report>
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   493c4:	2308      	movs	r3, #8
   493c6:	9302      	str	r3, [sp, #8]
    struct zmk_hid_keyboard_report_body *report_body = &zmk_hid_get_keyboard_report()->body;
   493c8:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   493ca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   493ce:	9001      	str	r0, [sp, #4]
   493d0:	9300      	str	r3, [sp, #0]
   493d2:	4632      	mov	r2, r6
   493d4:	463b      	mov	r3, r7
   493d6:	4629      	mov	r1, r5
   493d8:	4620      	mov	r0, r4
   493da:	f004 fe5c 	bl	4e096 <bt_gatt_attr_read>
}
   493de:	b005      	add	sp, #20
   493e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000493e2 <destination_connection>:
struct bt_conn *destination_connection() {
   493e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
   493e4:	f7e0 fb22 	bl	29a2c <zmk_ble_active_profile_addr>
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   493e8:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   493ea:	2207      	movs	r2, #7
   493ec:	4669      	mov	r1, sp
   493ee:	9400      	str	r4, [sp, #0]
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
   493f0:	4605      	mov	r5, r0
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   493f2:	f8cd 4003 	str.w	r4, [sp, #3]
   493f6:	f002 fa38 	bl	4b86a <memcmp>
   493fa:	b120      	cbz	r0, 49406 <destination_connection+0x24>
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
   493fc:	4629      	mov	r1, r5
   493fe:	4620      	mov	r0, r4
   49400:	f7e6 fab4 	bl	2f96c <bt_conn_lookup_addr_le>
   49404:	b900      	cbnz	r0, 49408 <destination_connection+0x26>
struct bt_conn *destination_connection() {
   49406:	2000      	movs	r0, #0
}
   49408:	b003      	add	sp, #12
   4940a:	bd30      	pop	{r4, r5, pc}

0004940c <zmk_battery_work>:
    int rc = zmk_battery_update(battery);
   4940c:	f7e0 bc08 	b.w	29c20 <zmk_battery_update.constprop.0>

00049410 <release_peripheral_slot_for_conn>:
int release_peripheral_slot_for_conn(struct bt_conn *conn) {
   49410:	b508      	push	{r3, lr}
    int idx = peripheral_slot_index_for_conn(conn);
   49412:	f7e0 fd31 	bl	29e78 <peripheral_slot_index_for_conn>
    if (idx < 0) {
   49416:	2800      	cmp	r0, #0
   49418:	db03      	blt.n	49422 <release_peripheral_slot_for_conn+0x12>
}
   4941a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return release_peripheral_slot(idx);
   4941e:	f7e0 be83 	b.w	2a128 <release_peripheral_slot>
}
   49422:	bd08      	pop	{r3, pc}

00049424 <split_central_disconnected>:
static void split_central_disconnected(struct bt_conn *conn, uint8_t reason) {
   49424:	b510      	push	{r4, lr}
   49426:	b088      	sub	sp, #32
   49428:	4604      	mov	r4, r0
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   4942a:	f003 fb38 	bl	4ca9e <bt_conn_get_dst>
   4942e:	4669      	mov	r1, sp
   49430:	f7e0 fc90 	bl	29d54 <bt_addr_le_to_str.constprop.0.isra.0>
    err = release_peripheral_slot_for_conn(conn);
   49434:	4620      	mov	r0, r4
   49436:	f7ff ffeb 	bl	49410 <release_peripheral_slot_for_conn>
    if (err < 0) {
   4943a:	2800      	cmp	r0, #0
   4943c:	db01      	blt.n	49442 <split_central_disconnected+0x1e>
    start_scan();
   4943e:	f7e0 fc2f 	bl	29ca0 <start_scan>
}
   49442:	b008      	add	sp, #32
   49444:	bd10      	pop	{r4, pc}

00049446 <split_central_connected>:
static void split_central_connected(struct bt_conn *conn, uint8_t conn_err) {
   49446:	b530      	push	{r4, r5, lr}
   49448:	b091      	sub	sp, #68	; 0x44
   4944a:	4604      	mov	r4, r0
   4944c:	460d      	mov	r5, r1
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   4944e:	f003 fb26 	bl	4ca9e <bt_conn_get_dst>
   49452:	4669      	mov	r1, sp
   49454:	f7e0 fc7e 	bl	29d54 <bt_addr_le_to_str.constprop.0.isra.0>
    bt_conn_get_info(conn, &info);
   49458:	a908      	add	r1, sp, #32
   4945a:	4620      	mov	r0, r4
   4945c:	f7e6 fad8 	bl	2fa10 <bt_conn_get_info>
    if (info.role != BT_CONN_ROLE_CENTRAL) {
   49460:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   49464:	b92b      	cbnz	r3, 49472 <split_central_connected+0x2c>
        release_peripheral_slot_for_conn(conn);
   49466:	4620      	mov	r0, r4
    if (conn_err) {
   49468:	b12d      	cbz	r5, 49476 <split_central_connected+0x30>
        release_peripheral_slot_for_conn(conn);
   4946a:	f7ff ffd1 	bl	49410 <release_peripheral_slot_for_conn>
        start_scan();
   4946e:	f7e0 fc17 	bl	29ca0 <start_scan>
}
   49472:	b011      	add	sp, #68	; 0x44
   49474:	bd30      	pop	{r4, r5, pc}
    confirm_peripheral_slot_conn(conn);
   49476:	f7e0 ff51 	bl	2a31c <confirm_peripheral_slot_conn>
    split_central_process_connection(conn);
   4947a:	4620      	mov	r0, r4
   4947c:	f7e0 fd14 	bl	29ea8 <split_central_process_connection>
   49480:	e7f7      	b.n	49472 <split_central_connected+0x2c>

00049482 <zmk_split_bt_invoke_behavior>:
                                 struct zmk_behavior_binding_event event, bool state) {
   49482:	b082      	sub	sp, #8
   49484:	b530      	push	{r4, r5, lr}
   49486:	b08d      	sub	sp, #52	; 0x34
   49488:	4604      	mov	r4, r0
   4948a:	a810      	add	r0, sp, #64	; 0x40
   4948c:	e880 000c 	stmia.w	r0, {r2, r3}
    struct zmk_split_run_behavior_payload payload = {.data = {
   49490:	2300      	movs	r3, #0
   49492:	e9cd 3304 	strd	r3, r3, [sp, #16]
   49496:	f8cd 3017 	str.w	r3, [sp, #23]
   4949a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   4949c:	f88d 3008 	strb.w	r3, [sp, #8]
   494a0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   494a4:	f88d 3009 	strb.w	r3, [sp, #9]
   494a8:	684b      	ldr	r3, [r1, #4]
   494aa:	f8cd 300a 	str.w	r3, [sp, #10]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   494ae:	2209      	movs	r2, #9
    struct zmk_split_run_behavior_payload payload = {.data = {
   494b0:	688b      	ldr	r3, [r1, #8]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   494b2:	6809      	ldr	r1, [r1, #0]
    struct zmk_split_run_behavior_payload payload = {.data = {
   494b4:	f8cd 300e 	str.w	r3, [sp, #14]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   494b8:	f10d 0012 	add.w	r0, sp, #18
   494bc:	f7ff fd07 	bl	48ece <strlcpy>
    struct zmk_split_run_behavior_payload_wrapper wrapper = {.source = source, .payload = payload};
   494c0:	ad06      	add	r5, sp, #24
   494c2:	f88d 401c 	strb.w	r4, [sp, #28]
   494c6:	aa02      	add	r2, sp, #8
   494c8:	f10d 031d 	add.w	r3, sp, #29
   494cc:	4614      	mov	r4, r2
   494ce:	cc03      	ldmia	r4!, {r0, r1}
   494d0:	42ac      	cmp	r4, r5
   494d2:	6018      	str	r0, [r3, #0]
   494d4:	6059      	str	r1, [r3, #4]
   494d6:	4622      	mov	r2, r4
   494d8:	f103 0308 	add.w	r3, r3, #8
   494dc:	d1f6      	bne.n	494cc <zmk_split_bt_invoke_behavior+0x4a>
   494de:	8821      	ldrh	r1, [r4, #0]
   494e0:	78a2      	ldrb	r2, [r4, #2]
   494e2:	709a      	strb	r2, [r3, #2]
   494e4:	8019      	strh	r1, [r3, #0]
    return split_bt_invoke_behavior_payload(wrapper);
   494e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   494e8:	9300      	str	r3, [sp, #0]
   494ea:	ab07      	add	r3, sp, #28
   494ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   494ee:	f7e0 fc01 	bl	29cf4 <split_bt_invoke_behavior_payload>
}
   494f2:	b00d      	add	sp, #52	; 0x34
   494f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   494f8:	b002      	add	sp, #8
   494fa:	4770      	bx	lr

000494fc <raise_usb_status_changed_event>:
static void raise_usb_status_changed_event(struct k_work *_work) {
   494fc:	b508      	push	{r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   494fe:	f7e0 ff37 	bl	2a370 <zmk_usb_get_conn_state>
   49502:	f7df fd03 	bl	28f0c <new_zmk_usb_conn_state_changed>
}
   49506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   4950a:	f7ff bcf6 	b.w	48efa <zmk_event_manager_raise>

0004950e <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   4950e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   49510:	2364      	movs	r3, #100	; 0x64
{
   49512:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   49514:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   49516:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   49518:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   4951c:	b111      	cbz	r1, 49524 <u8_to_dec+0x16>
   4951e:	3d01      	subs	r5, #1
   49520:	d101      	bne.n	49526 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   49522:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   49524:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   49526:	429a      	cmp	r2, r3
		digit = value / divisor;
   49528:	fbb2 f7f3 	udiv	r7, r2, r3
   4952c:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   4952e:	d202      	bcs.n	49536 <u8_to_dec+0x28>
   49530:	2b01      	cmp	r3, #1
   49532:	d000      	beq.n	49536 <u8_to_dec+0x28>
   49534:	b130      	cbz	r0, 49544 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   49536:	3630      	adds	r6, #48	; 0x30
			buflen--;
   49538:	3901      	subs	r1, #1
			num_digits++;
   4953a:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   4953c:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   49540:	b2c9      	uxtb	r1, r1
			num_digits++;
   49542:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   49544:	fb03 2217 	mls	r2, r3, r7, r2
   49548:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   4954a:	fbb3 f3fc 	udiv	r3, r3, ip
   4954e:	e7e5      	b.n	4951c <u8_to_dec+0xe>

00049550 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   49550:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   49554:	b2db      	uxtb	r3, r3
   49556:	2b09      	cmp	r3, #9
   49558:	d802      	bhi.n	49560 <char2hex+0x10>
		*x = c - '0';
   4955a:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   4955c:	2000      	movs	r0, #0
   4955e:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   49560:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   49564:	2b05      	cmp	r3, #5
   49566:	d802      	bhi.n	4956e <char2hex+0x1e>
		*x = c - 'a' + 10;
   49568:	3857      	subs	r0, #87	; 0x57
   4956a:	7008      	strb	r0, [r1, #0]
   4956c:	e7f6      	b.n	4955c <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   4956e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   49572:	2b05      	cmp	r3, #5
   49574:	d801      	bhi.n	4957a <char2hex+0x2a>
		*x = c - 'A' + 10;
   49576:	3837      	subs	r0, #55	; 0x37
   49578:	e7f7      	b.n	4956a <char2hex+0x1a>
		return -EINVAL;
   4957a:	f06f 0015 	mvn.w	r0, #21
}
   4957e:	4770      	bx	lr

00049580 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   49580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   49582:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   49584:	f001 0001 	and.w	r0, r1, #1
   49588:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   4958c:	429e      	cmp	r6, r3
   4958e:	ea4f 0751 	mov.w	r7, r1, lsr #1
   49592:	d903      	bls.n	4959c <hex2bin+0x1c>
		return 0;
   49594:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   49596:	4630      	mov	r0, r6
   49598:	b003      	add	sp, #12
   4959a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   4959c:	b158      	cbz	r0, 495b6 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   4959e:	7828      	ldrb	r0, [r5, #0]
   495a0:	f10d 0107 	add.w	r1, sp, #7
   495a4:	f7ff ffd4 	bl	49550 <char2hex>
   495a8:	2800      	cmp	r0, #0
   495aa:	dbf3      	blt.n	49594 <hex2bin+0x14>
		buf[0] = dec;
   495ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   495b0:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   495b4:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   495b6:	3501      	adds	r5, #1
   495b8:	4417      	add	r7, r2
   495ba:	42ba      	cmp	r2, r7
   495bc:	d0eb      	beq.n	49596 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   495be:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   495c2:	f10d 0107 	add.w	r1, sp, #7
   495c6:	f7ff ffc3 	bl	49550 <char2hex>
   495ca:	2800      	cmp	r0, #0
   495cc:	dbe2      	blt.n	49594 <hex2bin+0x14>
		buf[i] = dec << 4;
   495ce:	f89d 4007 	ldrb.w	r4, [sp, #7]
   495d2:	0124      	lsls	r4, r4, #4
   495d4:	b2e4      	uxtb	r4, r4
   495d6:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   495d8:	f815 0b02 	ldrb.w	r0, [r5], #2
   495dc:	f7ff ffb8 	bl	49550 <char2hex>
   495e0:	2800      	cmp	r0, #0
   495e2:	dbd7      	blt.n	49594 <hex2bin+0x14>
		buf[i] += dec;
   495e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   495e8:	441c      	add	r4, r3
   495ea:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   495ee:	e7e4      	b.n	495ba <hex2bin+0x3a>

000495f0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   495f0:	4603      	mov	r3, r0
   495f2:	b140      	cbz	r0, 49606 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   495f4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   495f6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   495fa:	2a02      	cmp	r2, #2
   495fc:	d006      	beq.n	4960c <sys_notify_validate+0x1c>
   495fe:	2a03      	cmp	r2, #3
   49600:	d004      	beq.n	4960c <sys_notify_validate+0x1c>
   49602:	2a01      	cmp	r2, #1
   49604:	d005      	beq.n	49612 <sys_notify_validate+0x22>
		return -EINVAL;
   49606:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   4960a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   4960c:	681a      	ldr	r2, [r3, #0]
   4960e:	2a00      	cmp	r2, #0
   49610:	d0f9      	beq.n	49606 <sys_notify_validate+0x16>
		notify->result = 0;
   49612:	2000      	movs	r0, #0
   49614:	6098      	str	r0, [r3, #8]
   49616:	4770      	bx	lr

00049618 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   49618:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   4961a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   4961e:	2a02      	cmp	r2, #2
{
   49620:	b510      	push	{r4, lr}
   49622:	4603      	mov	r3, r0
	notify->result = res;
   49624:	6081      	str	r1, [r0, #8]
	switch (method) {
   49626:	d00a      	beq.n	4963e <sys_notify_finalize+0x26>
   49628:	2a03      	cmp	r2, #3
   4962a:	d10b      	bne.n	49644 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   4962c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   4962e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   49630:	2200      	movs	r2, #0
   49632:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   49634:	b108      	cbz	r0, 4963a <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   49636:	f7ff fa97 	bl	48b68 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   4963a:	4620      	mov	r0, r4
   4963c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   4963e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   49640:	2400      	movs	r4, #0
		break;
   49642:	e7f5      	b.n	49630 <sys_notify_finalize+0x18>
	switch (method) {
   49644:	2400      	movs	r4, #0
   49646:	4620      	mov	r0, r4
   49648:	e7f2      	b.n	49630 <sys_notify_finalize+0x18>

0004964a <arch_printk_char_out>:
}
   4964a:	2000      	movs	r0, #0
   4964c:	4770      	bx	lr

0004964e <str_out>:
{
   4964e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   49650:	688a      	ldr	r2, [r1, #8]
   49652:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   49654:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   49656:	b114      	cbz	r4, 4965e <str_out+0x10>
   49658:	684b      	ldr	r3, [r1, #4]
   4965a:	4293      	cmp	r3, r2
   4965c:	dc01      	bgt.n	49662 <str_out+0x14>
		ctx->count++;
   4965e:	608d      	str	r5, [r1, #8]
}
   49660:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   49662:	3b01      	subs	r3, #1
   49664:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   49666:	bf08      	it	eq
   49668:	2200      	moveq	r2, #0
   4966a:	608d      	str	r5, [r1, #8]
   4966c:	bf0c      	ite	eq
   4966e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   49670:	54a0      	strbne	r0, [r4, r2]
   49672:	e7f5      	b.n	49660 <str_out+0x12>

00049674 <printk>:
{
   49674:	b40f      	push	{r0, r1, r2, r3}
   49676:	b507      	push	{r0, r1, r2, lr}
   49678:	a904      	add	r1, sp, #16
   4967a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   4967e:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   49680:	f7e0 fefe 	bl	2a480 <vprintk>
}
   49684:	b003      	add	sp, #12
   49686:	f85d eb04 	ldr.w	lr, [sp], #4
   4968a:	b004      	add	sp, #16
   4968c:	4770      	bx	lr

0004968e <snprintk>:
{
   4968e:	b40c      	push	{r2, r3}
   49690:	b507      	push	{r0, r1, r2, lr}
   49692:	ab04      	add	r3, sp, #16
   49694:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   49698:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   4969a:	f7e0 feff 	bl	2a49c <vsnprintk>
}
   4969e:	b003      	add	sp, #12
   496a0:	f85d eb04 	ldr.w	lr, [sp], #4
   496a4:	b002      	add	sp, #8
   496a6:	4770      	bx	lr

000496a8 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   496a8:	b510      	push	{r4, lr}
	return list->head;
   496aa:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   496ac:	2200      	movs	r2, #0
   496ae:	b90b      	cbnz	r3, 496b4 <sys_slist_find_and_remove+0xc>
   496b0:	4618      	mov	r0, r3
   496b2:	e00b      	b.n	496cc <sys_slist_find_and_remove+0x24>
   496b4:	428b      	cmp	r3, r1
   496b6:	d10f      	bne.n	496d8 <sys_slist_find_and_remove+0x30>
	return node->next;
   496b8:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   496ba:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   496bc:	b93a      	cbnz	r2, 496ce <sys_slist_find_and_remove+0x26>
   496be:	42a1      	cmp	r1, r4
	list->head = node;
   496c0:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   496c2:	d100      	bne.n	496c6 <sys_slist_find_and_remove+0x1e>
	list->tail = node;
   496c4:	6043      	str	r3, [r0, #4]
	parent->next = child;
   496c6:	2300      	movs	r3, #0
   496c8:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   496ca:	2001      	movs	r0, #1
   496cc:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   496ce:	42a1      	cmp	r1, r4
	parent->next = child;
   496d0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   496d2:	bf08      	it	eq
   496d4:	6042      	streq	r2, [r0, #4]
}
   496d6:	e7f6      	b.n	496c6 <sys_slist_find_and_remove+0x1e>
	return node->next;
   496d8:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   496da:	681b      	ldr	r3, [r3, #0]
   496dc:	e7e7      	b.n	496ae <sys_slist_find_and_remove+0x6>

000496de <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   496de:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   496e0:	f013 0307 	ands.w	r3, r3, #7
   496e4:	d105      	bne.n	496f2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   496e6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   496e8:	2b00      	cmp	r3, #0
   496ea:	bf0c      	ite	eq
   496ec:	2000      	moveq	r0, #0
   496ee:	2003      	movne	r0, #3
   496f0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   496f2:	2b02      	cmp	r3, #2
   496f4:	d105      	bne.n	49702 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   496f6:	8b40      	ldrh	r0, [r0, #26]
   496f8:	fab0 f080 	clz	r0, r0
   496fc:	0940      	lsrs	r0, r0, #5
   496fe:	0080      	lsls	r0, r0, #2
   49700:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   49702:	2b01      	cmp	r3, #1
   49704:	d105      	bne.n	49712 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   49706:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   49708:	2b00      	cmp	r3, #0
   4970a:	bf0c      	ite	eq
   4970c:	2000      	moveq	r0, #0
   4970e:	2005      	movne	r0, #5
   49710:	4770      	bx	lr
	int evt = EVT_NOP;
   49712:	2000      	movs	r0, #0
}
   49714:	4770      	bx	lr

00049716 <notify_one>:
{
   49716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4971a:	460d      	mov	r5, r1
   4971c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   4971e:	4619      	mov	r1, r3
   49720:	1d28      	adds	r0, r5, #4
{
   49722:	4690      	mov	r8, r2
   49724:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   49726:	f7ff ff77 	bl	49618 <sys_notify_finalize>
	if (cb) {
   4972a:	4604      	mov	r4, r0
   4972c:	b138      	cbz	r0, 4973e <notify_one+0x28>
		cb(mgr, cli, state, res);
   4972e:	4633      	mov	r3, r6
   49730:	4642      	mov	r2, r8
   49732:	4629      	mov	r1, r5
   49734:	4638      	mov	r0, r7
   49736:	46a4      	mov	ip, r4
}
   49738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   4973c:	4760      	bx	ip
}
   4973e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00049742 <transition_complete>:
{
   49742:	b410      	push	{r4}
	__asm__ volatile(
   49744:	f04f 0420 	mov.w	r4, #32
   49748:	f3ef 8211 	mrs	r2, BASEPRI
   4974c:	f384 8812 	msr	BASEPRI_MAX, r4
   49750:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   49754:	6141      	str	r1, [r0, #20]
}
   49756:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   49758:	2101      	movs	r1, #1
   4975a:	f7e0 beb3 	b.w	2a4c4 <process_event>

0004975e <validate_args>:
{
   4975e:	b510      	push	{r4, lr}
   49760:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   49762:	b140      	cbz	r0, 49776 <validate_args+0x18>
   49764:	b139      	cbz	r1, 49776 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   49766:	1d08      	adds	r0, r1, #4
   49768:	f7ff ff42 	bl	495f0 <sys_notify_validate>
	if ((rv == 0)
   4976c:	b928      	cbnz	r0, 4977a <validate_args+0x1c>
	    && ((cli->notify.flags
   4976e:	68a3      	ldr	r3, [r4, #8]
   49770:	f033 0303 	bics.w	r3, r3, #3
   49774:	d001      	beq.n	4977a <validate_args+0x1c>
		rv = -EINVAL;
   49776:	f06f 0015 	mvn.w	r0, #21
}
   4977a:	bd10      	pop	{r4, pc}

0004977c <onoff_manager_init>:
{
   4977c:	b538      	push	{r3, r4, r5, lr}
   4977e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   49780:	4605      	mov	r5, r0
   49782:	b158      	cbz	r0, 4979c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   49784:	b151      	cbz	r1, 4979c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   49786:	680b      	ldr	r3, [r1, #0]
   49788:	b143      	cbz	r3, 4979c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   4978a:	684b      	ldr	r3, [r1, #4]
   4978c:	b133      	cbz	r3, 4979c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   4978e:	221c      	movs	r2, #28
   49790:	2100      	movs	r1, #0
   49792:	f002 f885 	bl	4b8a0 <memset>
   49796:	612c      	str	r4, [r5, #16]
	return 0;
   49798:	2000      	movs	r0, #0
}
   4979a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   4979c:	f06f 0015 	mvn.w	r0, #21
   497a0:	e7fb      	b.n	4979a <onoff_manager_init+0x1e>

000497a2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   497a2:	b570      	push	{r4, r5, r6, lr}
   497a4:	4604      	mov	r4, r0
   497a6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   497a8:	f7ff ffd9 	bl	4975e <validate_args>

	if (rv < 0) {
   497ac:	1e05      	subs	r5, r0, #0
   497ae:	db34      	blt.n	4981a <onoff_request+0x78>
   497b0:	f04f 0320 	mov.w	r3, #32
   497b4:	f3ef 8111 	mrs	r1, BASEPRI
   497b8:	f383 8812 	msr	BASEPRI_MAX, r3
   497bc:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   497c0:	8b23      	ldrh	r3, [r4, #24]
   497c2:	f003 0207 	and.w	r2, r3, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   497c6:	8b63      	ldrh	r3, [r4, #26]
   497c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   497cc:	4283      	cmp	r3, r0
   497ce:	d02d      	beq.n	4982c <onoff_request+0x8a>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   497d0:	2a02      	cmp	r2, #2
	rv = state;
   497d2:	4615      	mov	r5, r2
	if (state == ONOFF_STATE_ON) {
   497d4:	d10d      	bne.n	497f2 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   497d6:	3301      	adds	r3, #1
   497d8:	8363      	strh	r3, [r4, #26]
		notify = true;
   497da:	2301      	movs	r3, #1
	__asm__ volatile(
   497dc:	f381 8811 	msr	BASEPRI, r1
   497e0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   497e4:	b1cb      	cbz	r3, 4981a <onoff_request+0x78>
			notify_one(mgr, cli, state, 0);
   497e6:	2300      	movs	r3, #0
   497e8:	4631      	mov	r1, r6
   497ea:	4620      	mov	r0, r4
   497ec:	f7ff ff93 	bl	49716 <notify_one>
   497f0:	e013      	b.n	4981a <onoff_request+0x78>
	} else if ((state == ONOFF_STATE_OFF)
   497f2:	2a06      	cmp	r2, #6
   497f4:	d816      	bhi.n	49824 <onoff_request+0x82>
   497f6:	e8df f002 	tbb	[pc, r2]
   497fa:	1504      	.short	0x1504
   497fc:	1c041515 	.word	0x1c041515
   49800:	04          	.byte	0x04
   49801:	00          	.byte	0x00
	parent->next = child;
   49802:	2300      	movs	r3, #0
   49804:	6033      	str	r3, [r6, #0]
	return list->tail;
   49806:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   49808:	b94b      	cbnz	r3, 4981e <onoff_request+0x7c>
	list->head = node;
   4980a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   4980e:	b95a      	cbnz	r2, 49828 <onoff_request+0x86>
		process_event(mgr, EVT_RECHECK, key);
   49810:	460a      	mov	r2, r1
   49812:	4620      	mov	r0, r4
   49814:	2102      	movs	r1, #2
   49816:	f7e0 fe55 	bl	2a4c4 <process_event>
		}
	}

	return rv;
}
   4981a:	4628      	mov	r0, r5
   4981c:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   4981e:	601e      	str	r6, [r3, #0]
	list->tail = node;
   49820:	6066      	str	r6, [r4, #4]
}
   49822:	e7f4      	b.n	4980e <onoff_request+0x6c>
	if (state == ONOFF_STATE_ON) {
   49824:	f06f 0504 	mvn.w	r5, #4
   49828:	2300      	movs	r3, #0
   4982a:	e7d7      	b.n	497dc <onoff_request+0x3a>
		rv = -EAGAIN;
   4982c:	f06f 050a 	mvn.w	r5, #10
   49830:	e7fa      	b.n	49828 <onoff_request+0x86>
	if (state == ONOFF_STATE_ON) {
   49832:	f06f 0585 	mvn.w	r5, #133	; 0x85
   49836:	e7f7      	b.n	49828 <onoff_request+0x86>

00049838 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   49838:	b510      	push	{r4, lr}
	__asm__ volatile(
   4983a:	f04f 0320 	mov.w	r3, #32
   4983e:	f3ef 8211 	mrs	r2, BASEPRI
   49842:	f383 8812 	msr	BASEPRI_MAX, r3
   49846:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   4984a:	8b04      	ldrh	r4, [r0, #24]
   4984c:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   49850:	2c02      	cmp	r4, #2
   49852:	d00a      	beq.n	4986a <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   49854:	2c01      	cmp	r4, #1
   49856:	bf0c      	ite	eq
   49858:	f06f 0004 	mvneq.w	r0, #4
   4985c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   49860:	f382 8811 	msr	BASEPRI, r2
   49864:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   49868:	e008      	b.n	4987c <onoff_release+0x44>
	mgr->refs -= 1U;
   4986a:	8b43      	ldrh	r3, [r0, #26]
   4986c:	3b01      	subs	r3, #1
   4986e:	b29b      	uxth	r3, r3
   49870:	8343      	strh	r3, [r0, #26]
	if (stop) {
   49872:	b923      	cbnz	r3, 4987e <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   49874:	4621      	mov	r1, r4
   49876:	f7e0 fe25 	bl	2a4c4 <process_event>
	int rv = state;
   4987a:	4620      	mov	r0, r4
}
   4987c:	bd10      	pop	{r4, pc}
	int rv = state;
   4987e:	4620      	mov	r0, r4
   49880:	e7ee      	b.n	49860 <onoff_release+0x28>

00049882 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   49882:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   49884:	b1b0      	cbz	r0, 498b4 <onoff_cancel+0x32>
   49886:	b1a9      	cbz	r1, 498b4 <onoff_cancel+0x32>
	__asm__ volatile(
   49888:	f04f 0220 	mov.w	r2, #32
   4988c:	f3ef 8511 	mrs	r5, BASEPRI
   49890:	f382 8812 	msr	BASEPRI_MAX, r2
   49894:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   49898:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   4989a:	f7ff ff05 	bl	496a8 <sys_slist_find_and_remove>
   4989e:	b130      	cbz	r0, 498ae <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   498a0:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
   498a4:	f385 8811 	msr	BASEPRI, r5
   498a8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   498ac:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
   498ae:	f06f 0077 	mvn.w	r0, #119	; 0x77
   498b2:	e7f7      	b.n	498a4 <onoff_cancel+0x22>
		return -EINVAL;
   498b4:	f06f 0015 	mvn.w	r0, #21
   498b8:	e7f8      	b.n	498ac <onoff_cancel+0x2a>

000498ba <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   498ba:	4604      	mov	r4, r0
   498bc:	b508      	push	{r3, lr}
   498be:	4608      	mov	r0, r1
   498c0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   498c2:	461a      	mov	r2, r3
   498c4:	47a0      	blx	r4
	return z_impl_z_current_get();
   498c6:	f7fe fe95 	bl	485f4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   498ca:	f7e3 f90f 	bl	2caec <z_impl_k_thread_abort>

000498ce <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   498ce:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   498d2:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   498d4:	0840      	lsrs	r0, r0, #1
   498d6:	4770      	bx	lr

000498d8 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   498d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   498da:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   498dc:	f7ff fff7 	bl	498ce <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   498e0:	fab0 f080 	clz	r0, r0
   498e4:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   498e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   498ec:	00ca      	lsls	r2, r1, #3
   498ee:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   498f2:	1d17      	adds	r7, r2, #4
{
   498f4:	460c      	mov	r4, r1
   498f6:	3206      	adds	r2, #6
   498f8:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   498fa:	b956      	cbnz	r6, 49912 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   498fc:	2101      	movs	r1, #1
   498fe:	fa01 f000 	lsl.w	r0, r1, r0
   49902:	68d9      	ldr	r1, [r3, #12]
   49904:	4301      	orrs	r1, r0
   49906:	60d9      	str	r1, [r3, #12]
		b->next = c;
   49908:	f8cc 4010 	str.w	r4, [ip, #16]
   4990c:	53dd      	strh	r5, [r3, r7]
   4990e:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   49910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   49912:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   49914:	3104      	adds	r1, #4
   49916:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   49918:	53d8      	strh	r0, [r3, r7]
   4991a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   4991e:	529e      	strh	r6, [r3, r2]
   49920:	80c5      	strh	r5, [r0, #6]
   49922:	525d      	strh	r5, [r3, r1]
   49924:	e7f4      	b.n	49910 <free_list_add+0x38>

00049926 <free_list_remove_bidx>:
{
   49926:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   49928:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   4992c:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   4992e:	4299      	cmp	r1, r3
   49930:	f102 0104 	add.w	r1, r2, #4
   49934:	d10a      	bne.n	4994c <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   49936:	2301      	movs	r3, #1
   49938:	fa03 f202 	lsl.w	r2, r3, r2
   4993c:	68c3      	ldr	r3, [r0, #12]
   4993e:	ea23 0302 	bic.w	r3, r3, r2
   49942:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   49944:	2300      	movs	r3, #0
   49946:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   4994a:	bd10      	pop	{r4, pc}
   4994c:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   4994e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   49952:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   49956:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   4995a:	80cb      	strh	r3, [r1, #6]
   4995c:	8082      	strh	r2, [r0, #4]
}
   4995e:	e7f4      	b.n	4994a <free_list_remove_bidx+0x24>

00049960 <free_list_remove>:
{
   49960:	b508      	push	{r3, lr}
   49962:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   49964:	f7ff ffb3 	bl	498ce <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   49968:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   4996c:	f1c2 021f 	rsb	r2, r2, #31
   49970:	4618      	mov	r0, r3
}
   49972:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   49976:	f7ff bfd6 	b.w	49926 <free_list_remove_bidx>

0004997a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   4997a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4997e:	fab1 f581 	clz	r5, r1
   49982:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   49986:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   4998a:	4603      	mov	r3, r0
	if (b->next) {
   4998c:	693a      	ldr	r2, [r7, #16]
{
   4998e:	460e      	mov	r6, r1
	if (b->next) {
   49990:	b1c2      	cbz	r2, 499c4 <alloc_chunk+0x4a>
   49992:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   49996:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   49998:	4618      	mov	r0, r3
   4999a:	4621      	mov	r1, r4
   4999c:	f7ff ff97 	bl	498ce <chunk_size>
   499a0:	42b0      	cmp	r0, r6
   499a2:	d306      	bcc.n	499b2 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   499a4:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   499a6:	4618      	mov	r0, r3
   499a8:	f7ff ffbd 	bl	49926 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   499ac:	4620      	mov	r0, r4
   499ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   499b2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   499b6:	f1b8 0801 	subs.w	r8, r8, #1
   499ba:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   499bc:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   499be:	d001      	beq.n	499c4 <alloc_chunk+0x4a>
   499c0:	4282      	cmp	r2, r0
   499c2:	d1e8      	bne.n	49996 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   499c4:	f1c5 0220 	rsb	r2, r5, #32
   499c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   499cc:	4094      	lsls	r4, r2
   499ce:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   499d0:	4014      	ands	r4, r2
   499d2:	d0eb      	beq.n	499ac <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   499d4:	fa94 f2a4 	rbit	r2, r4
   499d8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   499dc:	1d11      	adds	r1, r2, #4
   499de:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   499e2:	4621      	mov	r1, r4
   499e4:	e7df      	b.n	499a6 <alloc_chunk+0x2c>

000499e6 <merge_chunks>:
{
   499e6:	b538      	push	{r3, r4, r5, lr}
   499e8:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   499ea:	f7ff ff70 	bl	498ce <chunk_size>
{
   499ee:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   499f0:	4604      	mov	r4, r0
   499f2:	4611      	mov	r1, r2
   499f4:	4618      	mov	r0, r3
   499f6:	f7ff ff6a 	bl	498ce <chunk_size>
		((uint16_t *)cmem)[f] = val;
   499fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   499fe:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   49a00:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   49a02:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   49a04:	4618      	mov	r0, r3
   49a06:	f7ff ff62 	bl	498ce <chunk_size>
	void *cmem = &buf[c];
   49a0a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   49a0c:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   49a10:	bd38      	pop	{r3, r4, r5, pc}

00049a12 <split_chunks>:
{
   49a12:	b538      	push	{r3, r4, r5, lr}
   49a14:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   49a16:	f7ff ff5a 	bl	498ce <chunk_size>
{
   49a1a:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   49a1c:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   49a1e:	1a51      	subs	r1, r2, r1
   49a20:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   49a24:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   49a26:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   49a28:	8060      	strh	r0, [r4, #2]
   49a2a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   49a2e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   49a30:	8044      	strh	r4, [r0, #2]
   49a32:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   49a36:	4618      	mov	r0, r3
   49a38:	4611      	mov	r1, r2
   49a3a:	f7ff ff48 	bl	498ce <chunk_size>
	void *cmem = &buf[c];
   49a3e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   49a40:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   49a44:	bd38      	pop	{r3, r4, r5, pc}

00049a46 <free_chunk>:
{
   49a46:	b538      	push	{r3, r4, r5, lr}
   49a48:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   49a4a:	f7ff ff40 	bl	498ce <chunk_size>
   49a4e:	460c      	mov	r4, r1
   49a50:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   49a52:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   49a56:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   49a58:	07da      	lsls	r2, r3, #31
   49a5a:	d40a      	bmi.n	49a72 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   49a5c:	4628      	mov	r0, r5
   49a5e:	f7ff ff7f 	bl	49960 <free_list_remove>
	return c + chunk_size(h, c);
   49a62:	4621      	mov	r1, r4
   49a64:	4628      	mov	r0, r5
   49a66:	f7ff ff32 	bl	498ce <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   49a6a:	1822      	adds	r2, r4, r0
   49a6c:	4628      	mov	r0, r5
   49a6e:	f7ff ffba 	bl	499e6 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   49a72:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   49a76:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   49a78:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   49a7c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   49a7e:	07db      	lsls	r3, r3, #31
   49a80:	d40c      	bmi.n	49a9c <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   49a82:	4628      	mov	r0, r5
   49a84:	f7ff ff6c 	bl	49960 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   49a88:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   49a8c:	4622      	mov	r2, r4
   49a8e:	1a61      	subs	r1, r4, r1
   49a90:	4628      	mov	r0, r5
   49a92:	f7ff ffa8 	bl	499e6 <merge_chunks>
   49a96:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   49a9a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   49a9c:	4621      	mov	r1, r4
   49a9e:	4628      	mov	r0, r5
}
   49aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   49aa4:	f7ff bf18 	b.w	498d8 <free_list_add>

00049aa8 <sys_heap_free>:
	if (mem == NULL) {
   49aa8:	b161      	cbz	r1, 49ac4 <sys_heap_free+0x1c>
   49aaa:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   49aac:	3904      	subs	r1, #4
   49aae:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   49ab0:	f021 0307 	bic.w	r3, r1, #7
   49ab4:	4403      	add	r3, r0
	free_chunk(h, c);
   49ab6:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   49ab8:	885a      	ldrh	r2, [r3, #2]
   49aba:	f022 0201 	bic.w	r2, r2, #1
   49abe:	805a      	strh	r2, [r3, #2]
   49ac0:	f7ff bfc1 	b.w	49a46 <free_chunk>
}
   49ac4:	4770      	bx	lr

00049ac6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   49ac6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   49ac8:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   49aca:	b909      	cbnz	r1, 49ad0 <sys_heap_alloc+0xa>
		return NULL;
   49acc:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   49ace:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   49ad0:	68ab      	ldr	r3, [r5, #8]
   49ad2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   49ad6:	d9f9      	bls.n	49acc <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   49ad8:	310b      	adds	r1, #11
   49ada:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   49adc:	4621      	mov	r1, r4
   49ade:	4628      	mov	r0, r5
   49ae0:	f7ff ff4b 	bl	4997a <alloc_chunk>
	if (c == 0U) {
   49ae4:	4606      	mov	r6, r0
   49ae6:	2800      	cmp	r0, #0
   49ae8:	d0f0      	beq.n	49acc <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   49aea:	4601      	mov	r1, r0
   49aec:	4628      	mov	r0, r5
   49aee:	f7ff feee 	bl	498ce <chunk_size>
   49af2:	42a0      	cmp	r0, r4
   49af4:	d907      	bls.n	49b06 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   49af6:	1932      	adds	r2, r6, r4
   49af8:	4628      	mov	r0, r5
   49afa:	f7ff ff8a 	bl	49a12 <split_chunks>
		free_list_add(h, c + chunk_sz);
   49afe:	4611      	mov	r1, r2
   49b00:	4628      	mov	r0, r5
   49b02:	f7ff fee9 	bl	498d8 <free_list_add>
	void *cmem = &buf[c];
   49b06:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   49b0a:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   49b0c:	8853      	ldrh	r3, [r2, #2]
   49b0e:	f043 0301 	orr.w	r3, r3, #1
   49b12:	8053      	strh	r3, [r2, #2]
   49b14:	3004      	adds	r0, #4
	return mem;
   49b16:	e7da      	b.n	49ace <sys_heap_alloc+0x8>

00049b18 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   49b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   49b1c:	424b      	negs	r3, r1
   49b1e:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   49b22:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
   49b26:	6806      	ldr	r6, [r0, #0]
{
   49b28:	4614      	mov	r4, r2
	if (align != rew) {
   49b2a:	d00a      	beq.n	49b42 <sys_heap_aligned_alloc+0x2a>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   49b2c:	2f04      	cmp	r7, #4
   49b2e:	463b      	mov	r3, r7
   49b30:	46b9      	mov	r9, r7
   49b32:	bf28      	it	cs
   49b34:	2304      	movcs	r3, #4
		align -= rew;
   49b36:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   49b38:	b974      	cbnz	r4, 49b58 <sys_heap_aligned_alloc+0x40>
		return NULL;
   49b3a:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   49b3c:	4628      	mov	r0, r5
   49b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   49b42:	2904      	cmp	r1, #4
   49b44:	d804      	bhi.n	49b50 <sys_heap_aligned_alloc+0x38>
}
   49b46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   49b4a:	4611      	mov	r1, r2
   49b4c:	f7ff bfbb 	b.w	49ac6 <sys_heap_alloc>
		rew = 0;
   49b50:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   49b54:	2304      	movs	r3, #4
   49b56:	e7ef      	b.n	49b38 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   49b58:	68b2      	ldr	r2, [r6, #8]
   49b5a:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   49b5e:	d9ec      	bls.n	49b3a <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   49b60:	f104 010b 	add.w	r1, r4, #11
   49b64:	4439      	add	r1, r7
   49b66:	1ac9      	subs	r1, r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   49b68:	08c9      	lsrs	r1, r1, #3
   49b6a:	4630      	mov	r0, r6
   49b6c:	f7ff ff05 	bl	4997a <alloc_chunk>
	if (c0 == 0) {
   49b70:	4680      	mov	r8, r0
   49b72:	2800      	cmp	r0, #0
   49b74:	d0e1      	beq.n	49b3a <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   49b76:	f109 0504 	add.w	r5, r9, #4
   49b7a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   49b7e:	1e7b      	subs	r3, r7, #1
   49b80:	4435      	add	r5, r6
   49b82:	441d      	add	r5, r3
   49b84:	427f      	negs	r7, r7
   49b86:	403d      	ands	r5, r7
   49b88:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   49b8c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   49b8e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   49b90:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   49b92:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   49b94:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   49b98:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   49b9a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   49b9e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   49ba2:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   49ba6:	d208      	bcs.n	49bba <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   49ba8:	4601      	mov	r1, r0
   49baa:	463a      	mov	r2, r7
   49bac:	4630      	mov	r0, r6
   49bae:	f7ff ff30 	bl	49a12 <split_chunks>
		free_list_add(h, c0);
   49bb2:	4641      	mov	r1, r8
   49bb4:	4630      	mov	r0, r6
   49bb6:	f7ff fe8f 	bl	498d8 <free_list_add>
	return c + chunk_size(h, c);
   49bba:	4639      	mov	r1, r7
   49bbc:	4630      	mov	r0, r6
   49bbe:	f7ff fe86 	bl	498ce <chunk_size>
   49bc2:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   49bc4:	4284      	cmp	r4, r0
   49bc6:	d207      	bcs.n	49bd8 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   49bc8:	4630      	mov	r0, r6
   49bca:	4622      	mov	r2, r4
   49bcc:	f7ff ff21 	bl	49a12 <split_chunks>
		free_list_add(h, c_end);
   49bd0:	4621      	mov	r1, r4
   49bd2:	4630      	mov	r0, r6
   49bd4:	f7ff fe80 	bl	498d8 <free_list_add>
	void *cmem = &buf[c];
   49bd8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   49bdc:	8873      	ldrh	r3, [r6, #2]
   49bde:	f043 0301 	orr.w	r3, r3, #1
   49be2:	8073      	strh	r3, [r6, #2]
   49be4:	e7aa      	b.n	49b3c <sys_heap_aligned_alloc+0x24>

00049be6 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   49be6:	3a04      	subs	r2, #4
{
   49be8:	b4f0      	push	{r4, r5, r6, r7}
   49bea:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   49bec:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   49bee:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   49bf0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   49bf4:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   49bf8:	1a0e      	subs	r6, r1, r0
   49bfa:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   49bfc:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   49bfe:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   49c02:	4604      	mov	r4, r0
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   49c04:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   49c08:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   49c0a:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   49c0c:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   49c0e:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   49c12:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   49c14:	f1c2 0220 	rsb	r2, r2, #32
   49c18:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   49c1a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   49c1e:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   49c22:	4294      	cmp	r4, r2
   49c24:	d1fb      	bne.n	49c1e <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   49c26:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   49c28:	f042 0201 	orr.w	r2, r2, #1
   49c2c:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   49c2e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   49c32:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   49c34:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   49c36:	8007      	strh	r7, [r0, #0]
   49c38:	8065      	strh	r5, [r4, #2]
   49c3a:	1984      	adds	r4, r0, r6
   49c3c:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   49c40:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   49c44:	8067      	strh	r7, [r4, #2]
   49c46:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   49c48:	885a      	ldrh	r2, [r3, #2]
   49c4a:	f042 0201 	orr.w	r2, r2, #1
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   49c4e:	bcf0      	pop	{r4, r5, r6, r7}
   49c50:	805a      	strh	r2, [r3, #2]
	free_list_add(h, chunk0_size);
   49c52:	f7ff be41 	b.w	498d8 <free_list_add>

00049c56 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   49c56:	4770      	bx	lr

00049c58 <read_str>:
{
   49c58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   49c5c:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   49c60:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   49c62:	4640      	mov	r0, r8
{
   49c64:	461f      	mov	r7, r3
   49c66:	460c      	mov	r4, r1
   49c68:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   49c6a:	f001 fdda 	bl	4b822 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   49c6e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   49c72:	9300      	str	r3, [sp, #0]
   49c74:	b280      	uxth	r0, r0
   49c76:	e9cd 8001 	strd	r8, r0, [sp, #4]
   49c7a:	463b      	mov	r3, r7
   49c7c:	4632      	mov	r2, r6
   49c7e:	4621      	mov	r1, r4
   49c80:	4628      	mov	r0, r5
   49c82:	f004 fa08 	bl	4e096 <bt_gatt_attr_read>
}
   49c86:	b004      	add	sp, #16
   49c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00049c8c <blvl_ccc_cfg_changed>:
}
   49c8c:	4770      	bx	lr

00049c8e <bas_init>:
}
   49c8e:	2000      	movs	r0, #0
   49c90:	4770      	bx	lr

00049c92 <nvs_flash_rd>:
{
   49c92:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   49c94:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   49c96:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   49c98:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   49c9a:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   49c9c:	fa16 f181 	uxtah	r1, r6, r1
   49ca0:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   49ca4:	6884      	ldr	r4, [r0, #8]
   49ca6:	6824      	ldr	r4, [r4, #0]
   49ca8:	46a4      	mov	ip, r4
}
   49caa:	bc70      	pop	{r4, r5, r6}
   49cac:	4760      	bx	ip

00049cae <nvs_flash_block_cmp>:
{
   49cae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   49cb2:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   49cb4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   49cb6:	681d      	ldr	r5, [r3, #0]
   49cb8:	426d      	negs	r5, r5
{
   49cba:	b089      	sub	sp, #36	; 0x24
   49cbc:	4681      	mov	r9, r0
   49cbe:	460e      	mov	r6, r1
   49cc0:	4617      	mov	r7, r2
	block_size =
   49cc2:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   49cc6:	b91c      	cbnz	r4, 49cd0 <nvs_flash_block_cmp+0x22>
	return 0;
   49cc8:	4620      	mov	r0, r4
}
   49cca:	b009      	add	sp, #36	; 0x24
   49ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   49cd0:	42ac      	cmp	r4, r5
   49cd2:	46a0      	mov	r8, r4
   49cd4:	bf28      	it	cs
   49cd6:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   49cd8:	4643      	mov	r3, r8
   49cda:	466a      	mov	r2, sp
   49cdc:	4631      	mov	r1, r6
   49cde:	4648      	mov	r0, r9
   49ce0:	f7ff ffd7 	bl	49c92 <nvs_flash_rd>
		if (rc) {
   49ce4:	2800      	cmp	r0, #0
   49ce6:	d1f0      	bne.n	49cca <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   49ce8:	4642      	mov	r2, r8
   49cea:	4669      	mov	r1, sp
   49cec:	4638      	mov	r0, r7
   49cee:	f001 fdbc 	bl	4b86a <memcmp>
		if (rc) {
   49cf2:	b920      	cbnz	r0, 49cfe <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   49cf4:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   49cf8:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   49cfa:	4447      	add	r7, r8
   49cfc:	e7e3      	b.n	49cc6 <nvs_flash_block_cmp+0x18>
			return 1;
   49cfe:	2001      	movs	r0, #1
   49d00:	e7e3      	b.n	49cca <nvs_flash_block_cmp+0x1c>

00049d02 <nvs_flash_cmp_const>:
{
   49d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   49d06:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   49d08:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   49d0a:	681d      	ldr	r5, [r3, #0]
   49d0c:	426d      	negs	r5, r5
{
   49d0e:	b088      	sub	sp, #32
	block_size =
   49d10:	f005 0520 	and.w	r5, r5, #32
{
   49d14:	4607      	mov	r7, r0
   49d16:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   49d18:	4668      	mov	r0, sp
{
   49d1a:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   49d1c:	462a      	mov	r2, r5
   49d1e:	f001 fdbf 	bl	4b8a0 <memset>
	while (len) {
   49d22:	b91c      	cbnz	r4, 49d2c <nvs_flash_cmp_const+0x2a>
	return 0;
   49d24:	4620      	mov	r0, r4
}
   49d26:	b008      	add	sp, #32
   49d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   49d2c:	42ac      	cmp	r4, r5
   49d2e:	46a0      	mov	r8, r4
   49d30:	bf28      	it	cs
   49d32:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   49d34:	4643      	mov	r3, r8
   49d36:	466a      	mov	r2, sp
   49d38:	4631      	mov	r1, r6
   49d3a:	4638      	mov	r0, r7
   49d3c:	f7ff ffb7 	bl	49cae <nvs_flash_block_cmp>
		if (rc) {
   49d40:	2800      	cmp	r0, #0
   49d42:	d1f0      	bne.n	49d26 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   49d44:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   49d48:	4446      	add	r6, r8
   49d4a:	e7ea      	b.n	49d22 <nvs_flash_cmp_const+0x20>

00049d4c <nvs_flash_erase_sector>:
{
   49d4c:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   49d4e:	8982      	ldrh	r2, [r0, #12]
   49d50:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   49d52:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   49d54:	0c09      	lsrs	r1, r1, #16
{
   49d56:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   49d58:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   49d5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   49d5c:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   49d60:	6883      	ldr	r3, [r0, #8]
   49d62:	689b      	ldr	r3, [r3, #8]
   49d64:	4798      	blx	r3
	if (rc) {
   49d66:	b950      	cbnz	r0, 49d7e <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   49d68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   49d6a:	89a3      	ldrh	r3, [r4, #12]
   49d6c:	7912      	ldrb	r2, [r2, #4]
   49d6e:	4629      	mov	r1, r5
   49d70:	4620      	mov	r0, r4
   49d72:	f7ff ffc6 	bl	49d02 <nvs_flash_cmp_const>
		rc = -ENXIO;
   49d76:	2800      	cmp	r0, #0
   49d78:	bf18      	it	ne
   49d7a:	f06f 0005 	mvnne.w	r0, #5
}
   49d7e:	bd38      	pop	{r3, r4, r5, pc}

00049d80 <nvs_ate_crc8_update>:
{
   49d80:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   49d82:	4601      	mov	r1, r0
{
   49d84:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   49d86:	2207      	movs	r2, #7
   49d88:	20ff      	movs	r0, #255	; 0xff
   49d8a:	f7e0 fb5b 	bl	2a444 <crc8_ccitt>
	entry->crc8 = crc8;
   49d8e:	71e0      	strb	r0, [r4, #7]
}
   49d90:	bd10      	pop	{r4, pc}

00049d92 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   49d92:	680b      	ldr	r3, [r1, #0]
   49d94:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   49d98:	0c1a      	lsrs	r2, r3, #16
   49d9a:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   49d9e:	bf08      	it	eq
   49da0:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   49da4:	600b      	str	r3, [r1, #0]
}
   49da6:	4770      	bx	lr

00049da8 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   49da8:	7803      	ldrb	r3, [r0, #0]
   49daa:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   49dac:	bf81      	itttt	hi
   49dae:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   49db2:	18c9      	addhi	r1, r1, r3
   49db4:	425b      	neghi	r3, r3
   49db6:	4019      	andhi	r1, r3
}
   49db8:	4608      	mov	r0, r1
   49dba:	4770      	bx	lr

00049dbc <nvs_ate_valid>:
{
   49dbc:	b570      	push	{r4, r5, r6, lr}
   49dbe:	460c      	mov	r4, r1
   49dc0:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   49dc2:	2108      	movs	r1, #8
   49dc4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   49dc6:	f7ff ffef 	bl	49da8 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   49dca:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   49dcc:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   49dce:	4621      	mov	r1, r4
   49dd0:	20ff      	movs	r0, #255	; 0xff
   49dd2:	f7e0 fb37 	bl	2a444 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   49dd6:	79e3      	ldrb	r3, [r4, #7]
   49dd8:	4283      	cmp	r3, r0
   49dda:	d107      	bne.n	49dec <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   49ddc:	89aa      	ldrh	r2, [r5, #12]
   49dde:	8863      	ldrh	r3, [r4, #2]
   49de0:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   49de2:	4283      	cmp	r3, r0
   49de4:	bf2c      	ite	cs
   49de6:	2000      	movcs	r0, #0
   49de8:	2001      	movcc	r0, #1
}
   49dea:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   49dec:	2000      	movs	r0, #0
   49dee:	e7fc      	b.n	49dea <nvs_ate_valid+0x2e>

00049df0 <nvs_close_ate_valid>:
{
   49df0:	b538      	push	{r3, r4, r5, lr}
   49df2:	4605      	mov	r5, r0
   49df4:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   49df6:	f7ff ffe1 	bl	49dbc <nvs_ate_valid>
   49dfa:	b1a0      	cbz	r0, 49e26 <nvs_close_ate_valid+0x36>
   49dfc:	88a0      	ldrh	r0, [r4, #4]
   49dfe:	b998      	cbnz	r0, 49e28 <nvs_close_ate_valid+0x38>
   49e00:	8822      	ldrh	r2, [r4, #0]
   49e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
   49e06:	429a      	cmp	r2, r3
   49e08:	d10d      	bne.n	49e26 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   49e0a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   49e0c:	2108      	movs	r1, #8
   49e0e:	f7ff ffcb 	bl	49da8 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   49e12:	8862      	ldrh	r2, [r4, #2]
   49e14:	89ab      	ldrh	r3, [r5, #12]
   49e16:	1a9b      	subs	r3, r3, r2
   49e18:	fbb3 f2f0 	udiv	r2, r3, r0
   49e1c:	fb02 3010 	mls	r0, r2, r0, r3
   49e20:	fab0 f080 	clz	r0, r0
   49e24:	0940      	lsrs	r0, r0, #5
}
   49e26:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   49e28:	2000      	movs	r0, #0
   49e2a:	e7fc      	b.n	49e26 <nvs_close_ate_valid+0x36>

00049e2c <nvs_prev_ate>:
{
   49e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   49e2e:	4605      	mov	r5, r0
   49e30:	460e      	mov	r6, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   49e32:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   49e34:	2108      	movs	r1, #8
   49e36:	f7ff ffb7 	bl	49da8 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   49e3a:	6831      	ldr	r1, [r6, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   49e3c:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   49e3e:	2308      	movs	r3, #8
   49e40:	4628      	mov	r0, r5
   49e42:	f7ff ff26 	bl	49c92 <nvs_flash_rd>
	if (rc) {
   49e46:	4604      	mov	r4, r0
   49e48:	2800      	cmp	r0, #0
   49e4a:	d138      	bne.n	49ebe <nvs_prev_ate+0x92>
	*addr += ate_size;
   49e4c:	6833      	ldr	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   49e4e:	89aa      	ldrh	r2, [r5, #12]
	*addr += ate_size;
   49e50:	443b      	add	r3, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   49e52:	b299      	uxth	r1, r3
   49e54:	1bd2      	subs	r2, r2, r7
   49e56:	4291      	cmp	r1, r2
	*addr += ate_size;
   49e58:	6033      	str	r3, [r6, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   49e5a:	d130      	bne.n	49ebe <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   49e5c:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   49e5e:	bf03      	ittte	eq
   49e60:	89ea      	ldrheq	r2, [r5, #14]
   49e62:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
   49e66:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   49e6a:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   49e6e:	6031      	str	r1, [r6, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   49e70:	2308      	movs	r3, #8
   49e72:	466a      	mov	r2, sp
   49e74:	4628      	mov	r0, r5
   49e76:	f7ff ff0c 	bl	49c92 <nvs_flash_rd>
	if (rc) {
   49e7a:	4604      	mov	r4, r0
   49e7c:	b9f8      	cbnz	r0, 49ebe <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   49e7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   49e80:	466a      	mov	r2, sp
   49e82:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   49e84:	4603      	mov	r3, r0
		if (data8[i] != value) {
   49e86:	f812 0b01 	ldrb.w	r0, [r2], #1
   49e8a:	4281      	cmp	r1, r0
   49e8c:	d10c      	bne.n	49ea8 <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   49e8e:	3301      	adds	r3, #1
   49e90:	2b08      	cmp	r3, #8
   49e92:	d1f8      	bne.n	49e86 <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   49e94:	686b      	ldr	r3, [r5, #4]
   49e96:	e005      	b.n	49ea4 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   49e98:	6833      	ldr	r3, [r6, #0]
		(*addr) += close_ate.offset;
   49e9a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   49e9e:	0c1b      	lsrs	r3, r3, #16
   49ea0:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   49ea2:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   49ea4:	6033      	str	r3, [r6, #0]
		return 0;
   49ea6:	e00a      	b.n	49ebe <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   49ea8:	4669      	mov	r1, sp
   49eaa:	4628      	mov	r0, r5
   49eac:	f7ff ffa0 	bl	49df0 <nvs_close_ate_valid>
   49eb0:	2800      	cmp	r0, #0
   49eb2:	d1f1      	bne.n	49e98 <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   49eb4:	4631      	mov	r1, r6
   49eb6:	4628      	mov	r0, r5
   49eb8:	f7e0 fe60 	bl	2ab7c <nvs_recover_last_ate>
   49ebc:	4604      	mov	r4, r0
}
   49ebe:	4620      	mov	r0, r4
   49ec0:	b003      	add	sp, #12
   49ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00049ec4 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   49ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   49ec8:	4607      	mov	r7, r0
   49eca:	461c      	mov	r4, r3
	offset += addr & ADDR_OFFS_MASK;
   49ecc:	683d      	ldr	r5, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   49ece:	8983      	ldrh	r3, [r0, #12]
   49ed0:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   49ed2:	fa15 f181 	uxtah	r1, r5, r1
   49ed6:	fb00 1503 	mla	r5, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   49eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   49edc:	681e      	ldr	r6, [r3, #0]
   49ede:	4276      	negs	r6, r6
	if (blen > 0) {
   49ee0:	4026      	ands	r6, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   49ee2:	b089      	sub	sp, #36	; 0x24
   49ee4:	4690      	mov	r8, r2
	if (blen > 0) {
   49ee6:	d00a      	beq.n	49efe <nvs_flash_al_wrt.part.0+0x3a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   49ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   49eea:	6883      	ldr	r3, [r0, #8]
   49eec:	4629      	mov	r1, r5
   49eee:	f8d3 9004 	ldr.w	r9, [r3, #4]
   49ef2:	4633      	mov	r3, r6
   49ef4:	47c8      	blx	r9
		if (rc) {
   49ef6:	b9c0      	cbnz	r0, 49f2a <nvs_flash_al_wrt.part.0+0x66>
		len -= blen;
   49ef8:	1ba4      	subs	r4, r4, r6
		offset += blen;
   49efa:	4435      	add	r5, r6
		data8 += blen;
   49efc:	44b0      	add	r8, r6
	if (len) {
   49efe:	b1bc      	cbz	r4, 49f30 <nvs_flash_al_wrt.part.0+0x6c>
		memcpy(buf, data8, len);
   49f00:	4622      	mov	r2, r4
   49f02:	4641      	mov	r1, r8
   49f04:	4668      	mov	r0, sp
   49f06:	f001 fcc0 	bl	4b88a <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   49f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   49f0c:	681a      	ldr	r2, [r3, #0]
   49f0e:	7919      	ldrb	r1, [r3, #4]
   49f10:	1b12      	subs	r2, r2, r4
   49f12:	eb0d 0004 	add.w	r0, sp, r4
   49f16:	f001 fcc3 	bl	4b8a0 <memset>
				 fs->flash_parameters->write_block_size);
   49f1a:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   49f1e:	681b      	ldr	r3, [r3, #0]
   49f20:	6882      	ldr	r2, [r0, #8]
   49f22:	4629      	mov	r1, r5
   49f24:	6854      	ldr	r4, [r2, #4]
   49f26:	466a      	mov	r2, sp
   49f28:	47a0      	blx	r4
}
   49f2a:	b009      	add	sp, #36	; 0x24
   49f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
end:
   49f30:	4620      	mov	r0, r4
   49f32:	e7fa      	b.n	49f2a <nvs_flash_al_wrt.part.0+0x66>

00049f34 <nvs_flash_data_wrt>:
{
   49f34:	b538      	push	{r3, r4, r5, lr}
   49f36:	4604      	mov	r4, r0
	if (!len) {
   49f38:	4615      	mov	r5, r2
   49f3a:	b12a      	cbz	r2, 49f48 <nvs_flash_data_wrt+0x14>
   49f3c:	4613      	mov	r3, r2
   49f3e:	460a      	mov	r2, r1
   49f40:	6881      	ldr	r1, [r0, #8]
   49f42:	f7ff ffbf 	bl	49ec4 <nvs_flash_al_wrt.part.0>
   49f46:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   49f48:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   49f4a:	4629      	mov	r1, r5
   49f4c:	f7ff ff2c 	bl	49da8 <nvs_al_size.isra.0>
   49f50:	68a3      	ldr	r3, [r4, #8]
   49f52:	4403      	add	r3, r0
   49f54:	60a3      	str	r3, [r4, #8]
}
   49f56:	4610      	mov	r0, r2
   49f58:	bd38      	pop	{r3, r4, r5, pc}

00049f5a <nvs_flash_ate_wrt>:
{
   49f5a:	b510      	push	{r4, lr}
   49f5c:	460a      	mov	r2, r1
	if (!len) {
   49f5e:	2308      	movs	r3, #8
   49f60:	6841      	ldr	r1, [r0, #4]
{
   49f62:	4604      	mov	r4, r0
   49f64:	f7ff ffae 	bl	49ec4 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   49f68:	2108      	movs	r1, #8
   49f6a:	4602      	mov	r2, r0
   49f6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   49f6e:	f7ff ff1b 	bl	49da8 <nvs_al_size.isra.0>
   49f72:	6863      	ldr	r3, [r4, #4]
   49f74:	1a1b      	subs	r3, r3, r0
   49f76:	6063      	str	r3, [r4, #4]
}
   49f78:	4610      	mov	r0, r2
   49f7a:	bd10      	pop	{r4, pc}

00049f7c <nvs_add_gc_done_ate>:
{
   49f7c:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   49f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   49f82:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   49f86:	2300      	movs	r3, #0
{
   49f88:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   49f8a:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   49f8e:	6883      	ldr	r3, [r0, #8]
   49f90:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   49f94:	4668      	mov	r0, sp
   49f96:	f7ff fef3 	bl	49d80 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   49f9a:	4669      	mov	r1, sp
   49f9c:	4620      	mov	r0, r4
   49f9e:	f7ff ffdc 	bl	49f5a <nvs_flash_ate_wrt>
}
   49fa2:	b002      	add	sp, #8
   49fa4:	bd10      	pop	{r4, pc}

00049fa6 <nvs_gc>:
{
   49fa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   49faa:	4604      	mov	r4, r0
   49fac:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   49fae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   49fb0:	2108      	movs	r1, #8
   49fb2:	f7ff fef9 	bl	49da8 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   49fb6:	6863      	ldr	r3, [r4, #4]
   49fb8:	0c1b      	lsrs	r3, r3, #16
   49fba:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   49fbc:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   49fbe:	a903      	add	r1, sp, #12
   49fc0:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   49fc2:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   49fc4:	f7ff fee5 	bl	49d92 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   49fc8:	f8dd a00c 	ldr.w	sl, [sp, #12]
   49fcc:	89a6      	ldrh	r6, [r4, #12]
   49fce:	4456      	add	r6, sl
   49fd0:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   49fd2:	2308      	movs	r3, #8
   49fd4:	aa06      	add	r2, sp, #24
   49fd6:	4631      	mov	r1, r6
   49fd8:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   49fda:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   49fdc:	f7ff fe59 	bl	49c92 <nvs_flash_rd>
	if (rc < 0) {
   49fe0:	2800      	cmp	r0, #0
   49fe2:	f2c0 8093 	blt.w	4a10c <nvs_gc+0x166>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   49fe6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   49fe8:	aa06      	add	r2, sp, #24
   49fea:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   49fec:	2300      	movs	r3, #0
		if (data8[i] != value) {
   49fee:	f812 0b01 	ldrb.w	r0, [r2], #1
   49ff2:	4281      	cmp	r1, r0
   49ff4:	d17c      	bne.n	4a0f0 <nvs_gc+0x14a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   49ff6:	3301      	adds	r3, #1
   49ff8:	2b08      	cmp	r3, #8
   49ffa:	d1f8      	bne.n	49fee <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   49ffc:	68a3      	ldr	r3, [r4, #8]
   49ffe:	6862      	ldr	r2, [r4, #4]
   4a000:	442b      	add	r3, r5
   4a002:	429a      	cmp	r2, r3
   4a004:	d26e      	bcs.n	4a0e4 <nvs_gc+0x13e>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   4a006:	4651      	mov	r1, sl
   4a008:	4620      	mov	r0, r4
   4a00a:	f7ff fe9f 	bl	49d4c <nvs_flash_erase_sector>
	if (rc) {
   4a00e:	e07d      	b.n	4a10c <nvs_gc+0x166>
		gc_addr += close_ate.offset;
   4a010:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   4a014:	0c36      	lsrs	r6, r6, #16
   4a016:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   4a018:	441e      	add	r6, r3
   4a01a:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   4a01c:	aa08      	add	r2, sp, #32
   4a01e:	a904      	add	r1, sp, #16
   4a020:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   4a022:	f8dd 9010 	ldr.w	r9, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   4a026:	f7ff ff01 	bl	49e2c <nvs_prev_ate>
		if (rc) {
   4a02a:	2800      	cmp	r0, #0
   4a02c:	d16e      	bne.n	4a10c <nvs_gc+0x166>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   4a02e:	a908      	add	r1, sp, #32
   4a030:	4620      	mov	r0, r4
   4a032:	f7ff fec3 	bl	49dbc <nvs_ate_valid>
   4a036:	2800      	cmp	r0, #0
   4a038:	d034      	beq.n	4a0a4 <nvs_gc+0xfe>
		wlk_addr = fs->ate_wra;
   4a03a:	6863      	ldr	r3, [r4, #4]
   4a03c:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4a03e:	aa0a      	add	r2, sp, #40	; 0x28
   4a040:	a905      	add	r1, sp, #20
   4a042:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   4a044:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4a046:	f7ff fef1 	bl	49e2c <nvs_prev_ate>
			if (rc) {
   4a04a:	2800      	cmp	r0, #0
   4a04c:	d15e      	bne.n	4a10c <nvs_gc+0x166>
			if ((wlk_ate.id == gc_ate.id) &&
   4a04e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   4a052:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   4a056:	429a      	cmp	r2, r3
   4a058:	d028      	beq.n	4a0ac <nvs_gc+0x106>
		} while (wlk_addr != fs->ate_wra);
   4a05a:	6862      	ldr	r2, [r4, #4]
   4a05c:	9b05      	ldr	r3, [sp, #20]
   4a05e:	429a      	cmp	r2, r3
   4a060:	d1ed      	bne.n	4a03e <nvs_gc+0x98>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   4a062:	454e      	cmp	r6, r9
   4a064:	d11e      	bne.n	4a0a4 <nvs_gc+0xfe>
   4a066:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   4a06a:	b1db      	cbz	r3, 4a0a4 <nvs_gc+0xfe>
			data_addr += gc_ate.offset;
   4a06c:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   4a070:	ea4f 4319 	mov.w	r3, r9, lsr #16
   4a074:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   4a076:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   4a078:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   4a07a:	68a3      	ldr	r3, [r4, #8]
   4a07c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   4a080:	f7ff fe7e 	bl	49d80 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4a084:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   4a086:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4a08a:	681e      	ldr	r6, [r3, #0]
   4a08c:	4276      	negs	r6, r6
	block_size =
   4a08e:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   4a092:	f1b8 0f00 	cmp.w	r8, #0
   4a096:	d110      	bne.n	4a0ba <nvs_gc+0x114>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   4a098:	a908      	add	r1, sp, #32
   4a09a:	4620      	mov	r0, r4
   4a09c:	f7ff ff5d 	bl	49f5a <nvs_flash_ate_wrt>
			if (rc) {
   4a0a0:	2800      	cmp	r0, #0
   4a0a2:	d133      	bne.n	4a10c <nvs_gc+0x166>
	} while (gc_prev_addr != stop_addr);
   4a0a4:	9b01      	ldr	r3, [sp, #4]
   4a0a6:	4599      	cmp	r9, r3
   4a0a8:	d1b8      	bne.n	4a01c <nvs_gc+0x76>
gc_done:
   4a0aa:	e7a7      	b.n	49ffc <nvs_gc+0x56>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   4a0ac:	a90a      	add	r1, sp, #40	; 0x28
   4a0ae:	4620      	mov	r0, r4
   4a0b0:	f7ff fe84 	bl	49dbc <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   4a0b4:	2800      	cmp	r0, #0
   4a0b6:	d0d0      	beq.n	4a05a <nvs_gc+0xb4>
   4a0b8:	e7d3      	b.n	4a062 <nvs_gc+0xbc>
		bytes_to_copy = MIN(block_size, len);
   4a0ba:	4546      	cmp	r6, r8
   4a0bc:	46b3      	mov	fp, r6
   4a0be:	bf28      	it	cs
   4a0c0:	46c3      	movcs	fp, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   4a0c2:	465b      	mov	r3, fp
   4a0c4:	aa0c      	add	r2, sp, #48	; 0x30
   4a0c6:	4639      	mov	r1, r7
   4a0c8:	4620      	mov	r0, r4
   4a0ca:	f7ff fde2 	bl	49c92 <nvs_flash_rd>
		if (rc) {
   4a0ce:	b9e8      	cbnz	r0, 4a10c <nvs_gc+0x166>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   4a0d0:	465a      	mov	r2, fp
   4a0d2:	a90c      	add	r1, sp, #48	; 0x30
   4a0d4:	4620      	mov	r0, r4
   4a0d6:	f7ff ff2d 	bl	49f34 <nvs_flash_data_wrt>
		if (rc) {
   4a0da:	b9b8      	cbnz	r0, 4a10c <nvs_gc+0x166>
		len -= bytes_to_copy;
   4a0dc:	eba8 080b 	sub.w	r8, r8, fp
		addr += bytes_to_copy;
   4a0e0:	445f      	add	r7, fp
   4a0e2:	e7d6      	b.n	4a092 <nvs_gc+0xec>
		rc = nvs_add_gc_done_ate(fs);
   4a0e4:	4620      	mov	r0, r4
   4a0e6:	f7ff ff49 	bl	49f7c <nvs_add_gc_done_ate>
		if (rc) {
   4a0ea:	2800      	cmp	r0, #0
   4a0ec:	d08b      	beq.n	4a006 <nvs_gc+0x60>
   4a0ee:	e00d      	b.n	4a10c <nvs_gc+0x166>
	stop_addr = gc_addr - ate_size;
   4a0f0:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4a0f2:	a906      	add	r1, sp, #24
   4a0f4:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   4a0f6:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4a0f8:	f7ff fe7a 	bl	49df0 <nvs_close_ate_valid>
   4a0fc:	2800      	cmp	r0, #0
   4a0fe:	d187      	bne.n	4a010 <nvs_gc+0x6a>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   4a100:	a904      	add	r1, sp, #16
   4a102:	4620      	mov	r0, r4
   4a104:	f7e0 fd3a 	bl	2ab7c <nvs_recover_last_ate>
		if (rc) {
   4a108:	2800      	cmp	r0, #0
   4a10a:	d087      	beq.n	4a01c <nvs_gc+0x76>
}
   4a10c:	b015      	add	sp, #84	; 0x54
   4a10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0004a112 <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   4a112:	2300      	movs	r3, #0
   4a114:	461a      	mov	r2, r3
   4a116:	f7e0 bebf 	b.w	2ae98 <nvs_write>

0004a11a <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   4a11a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   4a11e:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   4a120:	7c03      	ldrb	r3, [r0, #16]
{
   4a122:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   4a126:	4604      	mov	r4, r0
   4a128:	460f      	mov	r7, r1
   4a12a:	4690      	mov	r8, r2
	if (!fs->ready) {
   4a12c:	2b00      	cmp	r3, #0
   4a12e:	d045      	beq.n	4a1bc <nvs_read_hist+0xa2>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a130:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4a132:	2108      	movs	r1, #8
   4a134:	f7ff fe38 	bl	49da8 <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   4a138:	89a3      	ldrh	r3, [r4, #12]
   4a13a:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   4a13e:	429e      	cmp	r6, r3
   4a140:	d83f      	bhi.n	4a1c2 <nvs_read_hist+0xa8>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   4a142:	6863      	ldr	r3, [r4, #4]
   4a144:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   4a146:	f04f 0a00 	mov.w	sl, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4a14a:	aa02      	add	r2, sp, #8
   4a14c:	a901      	add	r1, sp, #4
   4a14e:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   4a150:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4a152:	f7ff fe6b 	bl	49e2c <nvs_prev_ate>
		if (rc) {
   4a156:	bb38      	cbnz	r0, 4a1a8 <nvs_read_hist+0x8e>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   4a158:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4a15c:	42bb      	cmp	r3, r7
   4a15e:	d108      	bne.n	4a172 <nvs_read_hist+0x58>
   4a160:	a902      	add	r1, sp, #8
   4a162:	4620      	mov	r0, r4
   4a164:	f7ff fe2a 	bl	49dbc <nvs_ate_valid>
   4a168:	b118      	cbz	r0, 4a172 <nvs_read_hist+0x58>
			cnt_his++;
   4a16a:	f10a 0a01 	add.w	sl, sl, #1
   4a16e:	fa1f fa8a 	uxth.w	sl, sl
		}
		if (wlk_addr == fs->ate_wra) {
   4a172:	6862      	ldr	r2, [r4, #4]
   4a174:	9b01      	ldr	r3, [sp, #4]
   4a176:	429a      	cmp	r2, r3
   4a178:	d019      	beq.n	4a1ae <nvs_read_hist+0x94>
	while (cnt_his <= cnt) {
   4a17a:	45d1      	cmp	r9, sl
   4a17c:	d2e5      	bcs.n	4a14a <nvs_read_hist+0x30>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   4a17e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   4a182:	b1c3      	cbz	r3, 4a1b6 <nvs_read_hist+0x9c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   4a184:	45d1      	cmp	r9, sl
   4a186:	d816      	bhi.n	4a1b6 <nvs_read_hist+0x9c>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
	rd_addr += wlk_ate.offset;
   4a188:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   4a18c:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   4a18e:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   4a190:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   4a194:	bf28      	it	cs
   4a196:	4633      	movcs	r3, r6
   4a198:	4642      	mov	r2, r8
   4a19a:	4429      	add	r1, r5
   4a19c:	4620      	mov	r0, r4
   4a19e:	f7ff fd78 	bl	49c92 <nvs_flash_rd>
	if (rc) {
   4a1a2:	b908      	cbnz	r0, 4a1a8 <nvs_read_hist+0x8e>
		goto err;
	}

	return wlk_ate.len;
   4a1a4:	f8bd 000c 	ldrh.w	r0, [sp, #12]

err:
	return rc;
}
   4a1a8:	b004      	add	sp, #16
   4a1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   4a1ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4a1b2:	42bb      	cmp	r3, r7
   4a1b4:	d0e3      	beq.n	4a17e <nvs_read_hist+0x64>
		return -ENOENT;
   4a1b6:	f06f 0001 	mvn.w	r0, #1
   4a1ba:	e7f5      	b.n	4a1a8 <nvs_read_hist+0x8e>
		return -EACCES;
   4a1bc:	f06f 000c 	mvn.w	r0, #12
   4a1c0:	e7f2      	b.n	4a1a8 <nvs_read_hist+0x8e>
		return -EINVAL;
   4a1c2:	f06f 0015 	mvn.w	r0, #21
   4a1c6:	e7ef      	b.n	4a1a8 <nvs_read_hist+0x8e>

0004a1c8 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   4a1c8:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   4a1ca:	2400      	movs	r4, #0
   4a1cc:	9400      	str	r4, [sp, #0]
   4a1ce:	f7ff ffa4 	bl	4a11a <nvs_read_hist>
	return rc;
}
   4a1d2:	b002      	add	sp, #8
   4a1d4:	bd10      	pop	{r4, pc}

0004a1d6 <usb_write>:
{
   4a1d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4a1da:	4606      	mov	r6, r0
   4a1dc:	460f      	mov	r7, r1
   4a1de:	4690      	mov	r8, r2
   4a1e0:	4699      	mov	r9, r3
   4a1e2:	250b      	movs	r5, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4a1e4:	464b      	mov	r3, r9
   4a1e6:	4642      	mov	r2, r8
   4a1e8:	4639      	mov	r1, r7
   4a1ea:	4630      	mov	r0, r6
   4a1ec:	f7f9 ff22 	bl	44034 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   4a1f0:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4a1f4:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   4a1f6:	d103      	bne.n	4a200 <usb_write+0x2a>
	z_impl_k_yield();
   4a1f8:	f7fe f960 	bl	484bc <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   4a1fc:	3d01      	subs	r5, #1
   4a1fe:	d1f1      	bne.n	4a1e4 <usb_write+0xe>
}
   4a200:	4620      	mov	r0, r4
   4a202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0004a206 <usb_get_dev_data_by_cfg>:
	return list->head;
   4a206:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a208:	b140      	cbz	r0, 4a21c <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
   4a20a:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
   4a20e:	685b      	ldr	r3, [r3, #4]
   4a210:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a212:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
   4a216:	d001      	beq.n	4a21c <usb_get_dev_data_by_cfg+0x16>
	return node->next;
   4a218:	6840      	ldr	r0, [r0, #4]
   4a21a:	e7f5      	b.n	4a208 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   4a21c:	4770      	bx	lr

0004a21e <usb_get_dev_data_by_iface>:
	return list->head;
   4a21e:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a220:	b150      	cbz	r0, 4a238 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   4a222:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
   4a226:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   4a228:	685b      	ldr	r3, [r3, #4]
   4a22a:	789b      	ldrb	r3, [r3, #2]
   4a22c:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a22e:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
   4a232:	d001      	beq.n	4a238 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
   4a234:	6840      	ldr	r0, [r0, #4]
   4a236:	e7f3      	b.n	4a220 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   4a238:	4770      	bx	lr

0004a23a <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   4a23a:	b530      	push	{r4, r5, lr}
	return list->head;
   4a23c:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a23e:	b188      	cbz	r0, 4a264 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   4a240:	f850 3c04 	ldr.w	r3, [r0, #-4]
   4a244:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   4a246:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4a248:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4a24a:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4a24c:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
   4a24e:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4a250:	b2dc      	uxtb	r4, r3
   4a252:	42a5      	cmp	r5, r4
   4a254:	d801      	bhi.n	4a25a <usb_get_dev_data_by_ep+0x20>
	return node->next;
   4a256:	6840      	ldr	r0, [r0, #4]
   4a258:	e7f1      	b.n	4a23e <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   4a25a:	3301      	adds	r3, #1
   4a25c:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   4a260:	428c      	cmp	r4, r1
   4a262:	d1f5      	bne.n	4a250 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   4a264:	bd30      	pop	{r4, r5, pc}

0004a266 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   4a266:	4770      	bx	lr

0004a268 <get_sectors_cb>:
{
   4a268:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   4a26a:	6802      	ldr	r2, [r0, #0]
   4a26c:	684c      	ldr	r4, [r1, #4]
   4a26e:	42a2      	cmp	r2, r4
   4a270:	d316      	bcc.n	4a2a0 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   4a272:	688b      	ldr	r3, [r1, #8]
   4a274:	4423      	add	r3, r4
   4a276:	429a      	cmp	r2, r3
   4a278:	d207      	bcs.n	4a28a <get_sectors_cb+0x22>
	} else if (data->ret_idx >= data->ret_len) {
   4a27a:	e9d1 5303 	ldrd	r5, r3, [r1, #12]
   4a27e:	694e      	ldr	r6, [r1, #20]
   4a280:	42b3      	cmp	r3, r6
   4a282:	d304      	bcc.n	4a28e <get_sectors_cb+0x26>
		data->status = -ENOMEM;
   4a284:	f06f 030b 	mvn.w	r3, #11
   4a288:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   4a28a:	2000      	movs	r0, #0
   4a28c:	e009      	b.n	4a2a2 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   4a28e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   4a292:	1b12      	subs	r2, r2, r4
   4a294:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   4a298:	6842      	ldr	r2, [r0, #4]
   4a29a:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   4a29c:	3301      	adds	r3, #1
   4a29e:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   4a2a0:	2001      	movs	r0, #1
}
   4a2a2:	bd70      	pop	{r4, r5, r6, pc}

0004a2a4 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   4a2a4:	2200      	movs	r2, #0
   4a2a6:	4611      	mov	r1, r2
   4a2a8:	f7e1 bd40 	b.w	2bd2c <settings_save_one>

0004a2ac <settings_name_steq>:
{
   4a2ac:	4603      	mov	r3, r0
   4a2ae:	b530      	push	{r4, r5, lr}
   4a2b0:	4608      	mov	r0, r1
	if (next) {
   4a2b2:	b10a      	cbz	r2, 4a2b8 <settings_name_steq+0xc>
		*next = NULL;
   4a2b4:	2100      	movs	r1, #0
   4a2b6:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   4a2b8:	b163      	cbz	r3, 4a2d4 <settings_name_steq+0x28>
   4a2ba:	b190      	cbz	r0, 4a2e2 <settings_name_steq+0x36>
   4a2bc:	1e45      	subs	r5, r0, #1
   4a2be:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   4a2c0:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   4a2c4:	4601      	mov	r1, r0
   4a2c6:	f810 3b01 	ldrb.w	r3, [r0], #1
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   4a2ca:	b15c      	cbz	r4, 4a2e4 <settings_name_steq+0x38>
	while ((*key != '\0') && (*key == *name) &&
   4a2cc:	429c      	cmp	r4, r3
   4a2ce:	d101      	bne.n	4a2d4 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   4a2d0:	2c3d      	cmp	r4, #61	; 0x3d
   4a2d2:	d1f5      	bne.n	4a2c0 <settings_name_steq+0x14>
	return 0;
   4a2d4:	2000      	movs	r0, #0
   4a2d6:	e004      	b.n	4a2e2 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   4a2d8:	2b3d      	cmp	r3, #61	; 0x3d
   4a2da:	d008      	beq.n	4a2ee <settings_name_steq+0x42>
   4a2dc:	fab3 f083 	clz	r0, r3
   4a2e0:	0940      	lsrs	r0, r0, #5
}
   4a2e2:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   4a2e4:	2b2f      	cmp	r3, #47	; 0x2f
   4a2e6:	d1f7      	bne.n	4a2d8 <settings_name_steq+0x2c>
		if (next) {
   4a2e8:	b10a      	cbz	r2, 4a2ee <settings_name_steq+0x42>
			*next = name + 1;
   4a2ea:	3101      	adds	r1, #1
   4a2ec:	6011      	str	r1, [r2, #0]
		return 1;
   4a2ee:	2001      	movs	r0, #1
   4a2f0:	e7f7      	b.n	4a2e2 <settings_name_steq+0x36>

0004a2f2 <settings_name_next>:
{
   4a2f2:	b530      	push	{r4, r5, lr}
   4a2f4:	4603      	mov	r3, r0
	if (next) {
   4a2f6:	b109      	cbz	r1, 4a2fc <settings_name_next+0xa>
		*next = NULL;
   4a2f8:	2200      	movs	r2, #0
   4a2fa:	600a      	str	r2, [r1, #0]
	if (!name) {
   4a2fc:	b16b      	cbz	r3, 4a31a <settings_name_next+0x28>
   4a2fe:	461a      	mov	r2, r3
   4a300:	4614      	mov	r4, r2
   4a302:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   4a304:	f812 5b01 	ldrb.w	r5, [r2], #1
   4a308:	b135      	cbz	r5, 4a318 <settings_name_next+0x26>
   4a30a:	2d3d      	cmp	r5, #61	; 0x3d
   4a30c:	d004      	beq.n	4a318 <settings_name_next+0x26>
   4a30e:	2d2f      	cmp	r5, #47	; 0x2f
   4a310:	d1f6      	bne.n	4a300 <settings_name_next+0xe>
		if (next) {
   4a312:	b109      	cbz	r1, 4a318 <settings_name_next+0x26>
			*next = name + 1;
   4a314:	3401      	adds	r4, #1
   4a316:	600c      	str	r4, [r1, #0]
}
   4a318:	bd30      	pop	{r4, r5, pc}
		return 0;
   4a31a:	4618      	mov	r0, r3
   4a31c:	e7fc      	b.n	4a318 <settings_name_next+0x26>

0004a31e <settings_call_set_handler>:
{
   4a31e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4a322:	f8dd 8020 	ldr.w	r8, [sp, #32]
	const char *name_key = name;
   4a326:	9001      	str	r0, [sp, #4]
{
   4a328:	4604      	mov	r4, r0
   4a32a:	460d      	mov	r5, r1
   4a32c:	4616      	mov	r6, r2
   4a32e:	461f      	mov	r7, r3
	if (load_arg && load_arg->subtree &&
   4a330:	f1b8 0f00 	cmp.w	r8, #0
   4a334:	d01b      	beq.n	4a36e <settings_call_set_handler+0x50>
   4a336:	f8d8 1000 	ldr.w	r1, [r8]
   4a33a:	b199      	cbz	r1, 4a364 <settings_call_set_handler+0x46>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   4a33c:	aa01      	add	r2, sp, #4
   4a33e:	f7ff ffb5 	bl	4a2ac <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   4a342:	b978      	cbnz	r0, 4a364 <settings_call_set_handler+0x46>
}
   4a344:	2000      	movs	r0, #0
   4a346:	b002      	add	sp, #8
   4a348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   4a34c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   4a350:	9801      	ldr	r0, [sp, #4]
   4a352:	9308      	str	r3, [sp, #32]
   4a354:	4632      	mov	r2, r6
   4a356:	463b      	mov	r3, r7
   4a358:	4629      	mov	r1, r5
   4a35a:	46f4      	mov	ip, lr
}
   4a35c:	b002      	add	sp, #8
   4a35e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   4a362:	4760      	bx	ip
	if (load_arg && load_arg->cb) {
   4a364:	f8d8 e004 	ldr.w	lr, [r8, #4]
   4a368:	f1be 0f00 	cmp.w	lr, #0
   4a36c:	d1ee      	bne.n	4a34c <settings_call_set_handler+0x2e>
		ch = settings_parse_and_lookup(name, &name_key);
   4a36e:	a901      	add	r1, sp, #4
   4a370:	4620      	mov	r0, r4
   4a372:	f7e1 fdab 	bl	2becc <settings_parse_and_lookup>
		if (!ch) {
   4a376:	2800      	cmp	r0, #0
   4a378:	d0e4      	beq.n	4a344 <settings_call_set_handler+0x26>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   4a37a:	6884      	ldr	r4, [r0, #8]
   4a37c:	9801      	ldr	r0, [sp, #4]
   4a37e:	463b      	mov	r3, r7
   4a380:	4632      	mov	r2, r6
   4a382:	4629      	mov	r1, r5
   4a384:	47a0      	blx	r4
		if (rc != 0) {
   4a386:	e7dd      	b.n	4a344 <settings_call_set_handler+0x26>

0004a388 <settings_nvs_read_fn>:
{
   4a388:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   4a38a:	4613      	mov	r3, r2
{
   4a38c:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   4a38e:	460a      	mov	r2, r1
   4a390:	8881      	ldrh	r1, [r0, #4]
   4a392:	6800      	ldr	r0, [r0, #0]
   4a394:	f7ff ff18 	bl	4a1c8 <nvs_read>
}
   4a398:	42a0      	cmp	r0, r4
   4a39a:	bfa8      	it	ge
   4a39c:	4620      	movge	r0, r4
   4a39e:	bd10      	pop	{r4, pc}

0004a3a0 <settings_nvs_save>:
{
   4a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a3a4:	b097      	sub	sp, #92	; 0x5c
   4a3a6:	4604      	mov	r4, r0
   4a3a8:	9201      	str	r2, [sp, #4]
   4a3aa:	469b      	mov	fp, r3
	if (!name) {
   4a3ac:	4689      	mov	r9, r1
   4a3ae:	2900      	cmp	r1, #0
   4a3b0:	d06b      	beq.n	4a48a <settings_nvs_save+0xea>
	delete = ((value == NULL) || (val_len == 0));
   4a3b2:	b1da      	cbz	r2, 4a3ec <settings_nvs_save+0x4c>
   4a3b4:	fabb f78b 	clz	r7, fp
   4a3b8:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   4a3ba:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   4a3bc:	3501      	adds	r5, #1
   4a3be:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   4a3c0:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   4a3c2:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   4a3c6:	1e6e      	subs	r6, r5, #1
   4a3c8:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   4a3ca:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   4a3ce:	d030      	beq.n	4a432 <settings_nvs_save+0x92>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   4a3d0:	234a      	movs	r3, #74	; 0x4a
   4a3d2:	aa03      	add	r2, sp, #12
   4a3d4:	4631      	mov	r1, r6
   4a3d6:	4650      	mov	r0, sl
   4a3d8:	f7ff fef6 	bl	4a1c8 <nvs_read>
		if (rc < 0) {
   4a3dc:	2800      	cmp	r0, #0
   4a3de:	da07      	bge.n	4a3f0 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   4a3e0:	f110 0f02 	cmn.w	r0, #2
   4a3e4:	bf08      	it	eq
   4a3e6:	46b0      	moveq	r8, r6
   4a3e8:	4635      	mov	r5, r6
   4a3ea:	e7ec      	b.n	4a3c6 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   4a3ec:	2701      	movs	r7, #1
   4a3ee:	e7e4      	b.n	4a3ba <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   4a3f0:	f100 0358 	add.w	r3, r0, #88	; 0x58
   4a3f4:	eb0d 0003 	add.w	r0, sp, r3
   4a3f8:	2300      	movs	r3, #0
   4a3fa:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   4a3fe:	a903      	add	r1, sp, #12
   4a400:	4648      	mov	r0, r9
   4a402:	f001 fa15 	bl	4b830 <strcmp>
   4a406:	2800      	cmp	r0, #0
   4a408:	d1ee      	bne.n	4a3e8 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   4a40a:	2f00      	cmp	r7, #0
   4a40c:	d03b      	beq.n	4a486 <settings_nvs_save+0xe6>
   4a40e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   4a410:	42b3      	cmp	r3, r6
   4a412:	d142      	bne.n	4a49a <settings_nvs_save+0xfa>
			cf->last_name_id--;
   4a414:	4622      	mov	r2, r4
   4a416:	1e73      	subs	r3, r6, #1
   4a418:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   4a41c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4a420:	2302      	movs	r3, #2
   4a422:	4650      	mov	r0, sl
   4a424:	f7e0 fd38 	bl	2ae98 <nvs_write>
			if (rc < 0) {
   4a428:	2800      	cmp	r0, #0
   4a42a:	da36      	bge.n	4a49a <settings_nvs_save+0xfa>
}
   4a42c:	b017      	add	sp, #92	; 0x5c
   4a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   4a432:	bb6f      	cbnz	r7, 4a490 <settings_nvs_save+0xf0>
	write_name = true;
   4a434:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   4a436:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   4a43a:	d02b      	beq.n	4a494 <settings_nvs_save+0xf4>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   4a43c:	f104 0508 	add.w	r5, r4, #8
   4a440:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   4a444:	9a01      	ldr	r2, [sp, #4]
   4a446:	465b      	mov	r3, fp
   4a448:	b289      	uxth	r1, r1
   4a44a:	4628      	mov	r0, r5
   4a44c:	f7e0 fd24 	bl	2ae98 <nvs_write>
	if (rc < 0) {
   4a450:	2800      	cmp	r0, #0
   4a452:	dbeb      	blt.n	4a42c <settings_nvs_save+0x8c>
	if (write_name) {
   4a454:	b157      	cbz	r7, 4a46c <settings_nvs_save+0xcc>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   4a456:	4648      	mov	r0, r9
   4a458:	f001 f9e3 	bl	4b822 <strlen>
   4a45c:	464a      	mov	r2, r9
   4a45e:	4603      	mov	r3, r0
   4a460:	4641      	mov	r1, r8
   4a462:	4628      	mov	r0, r5
   4a464:	f7e0 fd18 	bl	2ae98 <nvs_write>
		if (rc < 0) {
   4a468:	2800      	cmp	r0, #0
   4a46a:	dbdf      	blt.n	4a42c <settings_nvs_save+0x8c>
	if (write_name_id > cf->last_name_id) {
   4a46c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   4a46e:	4543      	cmp	r3, r8
   4a470:	d220      	bcs.n	4a4b4 <settings_nvs_save+0x114>
		cf->last_name_id = write_name_id;
   4a472:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   4a474:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   4a476:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   4a47a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4a47e:	4628      	mov	r0, r5
   4a480:	f7e0 fd0a 	bl	2ae98 <nvs_write>
   4a484:	e016      	b.n	4a4b4 <settings_nvs_save+0x114>
   4a486:	46b0      	mov	r8, r6
   4a488:	e7d5      	b.n	4a436 <settings_nvs_save+0x96>
		return -EINVAL;
   4a48a:	f06f 0015 	mvn.w	r0, #21
   4a48e:	e7cd      	b.n	4a42c <settings_nvs_save+0x8c>
		return 0;
   4a490:	2000      	movs	r0, #0
   4a492:	e7cb      	b.n	4a42c <settings_nvs_save+0x8c>
		return -ENOMEM;
   4a494:	f06f 000b 	mvn.w	r0, #11
   4a498:	e7c8      	b.n	4a42c <settings_nvs_save+0x8c>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   4a49a:	4631      	mov	r1, r6
   4a49c:	4650      	mov	r0, sl
   4a49e:	f7ff fe38 	bl	4a112 <nvs_delete>
			if (rc >= 0) {
   4a4a2:	2800      	cmp	r0, #0
   4a4a4:	dbc2      	blt.n	4a42c <settings_nvs_save+0x8c>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   4a4a6:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   4a4aa:	313f      	adds	r1, #63	; 0x3f
   4a4ac:	b289      	uxth	r1, r1
   4a4ae:	4650      	mov	r0, sl
   4a4b0:	f7ff fe2f 	bl	4a112 <nvs_delete>
	if (rc < 0) {
   4a4b4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   4a4b8:	e7b8      	b.n	4a42c <settings_nvs_save+0x8c>

0004a4ba <settings_nvs_backend_init>:
{
   4a4ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   4a4bc:	f100 0608 	add.w	r6, r0, #8
   4a4c0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   4a4c2:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   4a4c4:	4630      	mov	r0, r6
   4a4c6:	f7e0 fb8b 	bl	2abe0 <nvs_init>
	if (rc) {
   4a4ca:	4605      	mov	r5, r0
   4a4cc:	b970      	cbnz	r0, 4a4ec <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   4a4ce:	2302      	movs	r3, #2
   4a4d0:	f10d 0206 	add.w	r2, sp, #6
   4a4d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4a4d8:	4630      	mov	r0, r6
   4a4da:	f7ff fe75 	bl	4a1c8 <nvs_read>
	if (rc < 0) {
   4a4de:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   4a4e0:	bfac      	ite	ge
   4a4e2:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   4a4e6:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   4a4ea:	8723      	strh	r3, [r4, #56]	; 0x38
}
   4a4ec:	4628      	mov	r0, r5
   4a4ee:	b002      	add	sp, #8
   4a4f0:	bd70      	pop	{r4, r5, r6, pc}

0004a4f2 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   4a4f2:	b538      	push	{r3, r4, r5, lr}
   4a4f4:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   4a4f6:	42ab      	cmp	r3, r5
{
   4a4f8:	4611      	mov	r1, r2
   4a4fa:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   4a4fc:	d804      	bhi.n	4a508 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   4a4fe:	461a      	mov	r2, r3
   4a500:	f001 f9c3 	bl	4b88a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   4a504:	4620      	mov	r0, r4
   4a506:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   4a508:	2400      	movs	r4, #0
   4a50a:	e7fb      	b.n	4a504 <_copy+0x12>

0004a50c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   4a50c:	f001 b9c8 	b.w	4b8a0 <memset>

0004a510 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   4a510:	09c3      	lsrs	r3, r0, #7
   4a512:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   4a516:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   4a51a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   4a51e:	b2c0      	uxtb	r0, r0
   4a520:	4770      	bx	lr

0004a522 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   4a522:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4a526:	4606      	mov	r6, r0
   4a528:	b0a9      	sub	sp, #164	; 0xa4
   4a52a:	4688      	mov	r8, r1
   4a52c:	4614      	mov	r4, r2
   4a52e:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   4a530:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   4a534:	f7e1 ff66 	bl	2c404 <uECC_get_rng>
		if (!rng_function ||
   4a538:	4603      	mov	r3, r0
   4a53a:	2800      	cmp	r0, #0
   4a53c:	d03e      	beq.n	4a5bc <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   4a53e:	2140      	movs	r1, #64	; 0x40
   4a540:	a808      	add	r0, sp, #32
   4a542:	4798      	blx	r3
		if (!rng_function ||
   4a544:	b3d0      	cbz	r0, 4a5bc <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   4a546:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   4a54a:	f112 031f 	adds.w	r3, r2, #31
   4a54e:	bf48      	it	mi
   4a550:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   4a554:	466d      	mov	r5, sp
   4a556:	464a      	mov	r2, r9
   4a558:	a908      	add	r1, sp, #32
   4a55a:	4628      	mov	r0, r5
   4a55c:	f343 1347 	sbfx	r3, r3, #5, #8
   4a560:	f000 f9f2 	bl	4a948 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   4a564:	4622      	mov	r2, r4
   4a566:	4629      	mov	r1, r5
   4a568:	a818      	add	r0, sp, #96	; 0x60
   4a56a:	f000 fe02 	bl	4b172 <EccPoint_compute_public_key>
   4a56e:	b318      	cbz	r0, 4a5b8 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   4a570:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   4a574:	1dd9      	adds	r1, r3, #7
   4a576:	bf48      	it	mi
   4a578:	f103 010e 	addmi.w	r1, r3, #14
   4a57c:	462a      	mov	r2, r5
   4a57e:	4640      	mov	r0, r8
   4a580:	10c9      	asrs	r1, r1, #3
   4a582:	f000 fe1e 	bl	4b1c2 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   4a586:	f994 1001 	ldrsb.w	r1, [r4, #1]
   4a58a:	aa18      	add	r2, sp, #96	; 0x60
   4a58c:	4630      	mov	r0, r6
   4a58e:	f000 fe18 	bl	4b1c2 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   4a592:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   4a596:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   4a59a:	ab18      	add	r3, sp, #96	; 0x60
   4a59c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   4a5a0:	1870      	adds	r0, r6, r1
   4a5a2:	f000 fe0e 	bl	4b1c2 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   4a5a6:	2220      	movs	r2, #32
   4a5a8:	2100      	movs	r1, #0
   4a5aa:	4628      	mov	r0, r5
   4a5ac:	f001 f978 	bl	4b8a0 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   4a5b0:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   4a5b2:	b029      	add	sp, #164	; 0xa4
   4a5b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   4a5b8:	3f01      	subs	r7, #1
   4a5ba:	d1bb      	bne.n	4a534 <uECC_make_key+0x12>
        		return 0;
   4a5bc:	2000      	movs	r0, #0
   4a5be:	e7f8      	b.n	4a5b2 <uECC_make_key+0x90>

0004a5c0 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   4a5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4a5c4:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   4a5c6:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   4a5ca:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   4a5ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   4a5d2:	b0a4      	sub	sp, #144	; 0x90
   4a5d4:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   4a5d6:	1dda      	adds	r2, r3, #7
   4a5d8:	bf48      	it	mi
   4a5da:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   4a5de:	ad04      	add	r5, sp, #16
{
   4a5e0:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   4a5e2:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   4a5e4:	4628      	mov	r0, r5
   4a5e6:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   4a5e8:	9502      	str	r5, [sp, #8]
   4a5ea:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   4a5ec:	f000 fdfd 	bl	4b1ea <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   4a5f0:	463a      	mov	r2, r7
   4a5f2:	4649      	mov	r1, r9
   4a5f4:	a814      	add	r0, sp, #80	; 0x50
   4a5f6:	f000 fdf8 	bl	4b1ea <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   4a5fa:	ab14      	add	r3, sp, #80	; 0x50
   4a5fc:	eb09 0107 	add.w	r1, r9, r7
   4a600:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   4a604:	463a      	mov	r2, r7
   4a606:	f000 fdf0 	bl	4b1ea <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   4a60a:	4623      	mov	r3, r4
   4a60c:	4632      	mov	r2, r6
   4a60e:	4629      	mov	r1, r5
   4a610:	4628      	mov	r0, r5
   4a612:	f000 fd82 	bl	4b11a <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   4a616:	fab0 f380 	clz	r3, r0
   4a61a:	9401      	str	r4, [sp, #4]
   4a61c:	aa24      	add	r2, sp, #144	; 0x90
   4a61e:	095b      	lsrs	r3, r3, #5
   4a620:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   4a624:	8863      	ldrh	r3, [r4, #2]
   4a626:	3301      	adds	r3, #1
   4a628:	b21b      	sxth	r3, r3
   4a62a:	9300      	str	r3, [sp, #0]
   4a62c:	f851 2c88 	ldr.w	r2, [r1, #-136]
   4a630:	a914      	add	r1, sp, #80	; 0x50
   4a632:	2300      	movs	r3, #0
   4a634:	4608      	mov	r0, r1
   4a636:	f000 fca8 	bl	4af8a <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   4a63a:	aa14      	add	r2, sp, #80	; 0x50
   4a63c:	4639      	mov	r1, r7
   4a63e:	4640      	mov	r0, r8
   4a640:	f000 fdbf 	bl	4b1c2 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   4a644:	4621      	mov	r1, r4
   4a646:	a814      	add	r0, sp, #80	; 0x50
   4a648:	f000 fc14 	bl	4ae74 <EccPoint_isZero>
   4a64c:	af02      	add	r7, sp, #8
   4a64e:	4604      	mov	r4, r0
   4a650:	2208      	movs	r2, #8
   4a652:	2100      	movs	r1, #0
   4a654:	4638      	mov	r0, r7
   4a656:	f001 f923 	bl	4b8a0 <memset>
   4a65a:	2220      	movs	r2, #32
   4a65c:	2100      	movs	r1, #0
   4a65e:	4630      	mov	r0, r6
   4a660:	f001 f91e 	bl	4b8a0 <memset>
   4a664:	2220      	movs	r2, #32
   4a666:	2100      	movs	r1, #0
   4a668:	4628      	mov	r0, r5
   4a66a:	f001 f919 	bl	4b8a0 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   4a66e:	fab4 f084 	clz	r0, r4
   4a672:	0940      	lsrs	r0, r0, #5
   4a674:	b024      	add	sp, #144	; 0x90
   4a676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004a67a <uECC_vli_add>:
{
   4a67a:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   4a67c:	2400      	movs	r4, #0
{
   4a67e:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   4a680:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   4a682:	b265      	sxtb	r5, r4
   4a684:	42ab      	cmp	r3, r5
   4a686:	dc00      	bgt.n	4a68a <uECC_vli_add+0x10>
}
   4a688:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   4a68a:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   4a68e:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   4a692:	443d      	add	r5, r7
   4a694:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   4a696:	42af      	cmp	r7, r5
   4a698:	f000 0001 	and.w	r0, r0, #1
   4a69c:	bf18      	it	ne
   4a69e:	2000      	movne	r0, #0
		result[i] = sum;
   4a6a0:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   4a6a4:	bf88      	it	hi
   4a6a6:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   4a6aa:	3401      	adds	r4, #1
   4a6ac:	e7e9      	b.n	4a682 <uECC_vli_add+0x8>

0004a6ae <uECC_vli_rshift1>:
	vli += num_words;
   4a6ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   4a6b2:	2300      	movs	r3, #0
	while (vli-- > end) {
   4a6b4:	4288      	cmp	r0, r1
   4a6b6:	d300      	bcc.n	4a6ba <uECC_vli_rshift1+0xc>
}
   4a6b8:	4770      	bx	lr
		uECC_word_t temp = *vli;
   4a6ba:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   4a6be:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   4a6c2:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   4a6c4:	07d3      	lsls	r3, r2, #31
   4a6c6:	e7f5      	b.n	4a6b4 <uECC_vli_rshift1+0x6>

0004a6c8 <vli_modInv_update>:
	if (!EVEN(uv)) {
   4a6c8:	6803      	ldr	r3, [r0, #0]
{
   4a6ca:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   4a6cc:	f013 0601 	ands.w	r6, r3, #1
{
   4a6d0:	4605      	mov	r5, r0
   4a6d2:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   4a6d4:	d005      	beq.n	4a6e2 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   4a6d6:	4613      	mov	r3, r2
   4a6d8:	460a      	mov	r2, r1
   4a6da:	4601      	mov	r1, r0
   4a6dc:	f7ff ffcd 	bl	4a67a <uECC_vli_add>
   4a6e0:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   4a6e2:	4621      	mov	r1, r4
   4a6e4:	4628      	mov	r0, r5
   4a6e6:	f7ff ffe2 	bl	4a6ae <uECC_vli_rshift1>
	if (carry) {
   4a6ea:	b146      	cbz	r6, 4a6fe <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   4a6ec:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   4a6f0:	3a01      	subs	r2, #1
   4a6f2:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   4a6f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   4a6fa:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   4a6fe:	bd70      	pop	{r4, r5, r6, pc}

0004a700 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   4a700:	f04f 0c00 	mov.w	ip, #0
{
   4a704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   4a708:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   4a70a:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   4a70c:	fa4f f98c 	sxtb.w	r9, ip
   4a710:	454b      	cmp	r3, r9
   4a712:	dc16      	bgt.n	4a742 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   4a714:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   4a718:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   4a71c:	9601      	str	r6, [sp, #4]
   4a71e:	f04f 0800 	mov.w	r8, #0
   4a722:	9f01      	ldr	r7, [sp, #4]
   4a724:	fa53 fe88 	uxtab	lr, r3, r8
   4a728:	fa4f fe8e 	sxtb.w	lr, lr
   4a72c:	45be      	cmp	lr, r7
   4a72e:	fa5f f688 	uxtb.w	r6, r8
   4a732:	db28      	blt.n	4a786 <uECC_vli_mult+0x86>
	result[num_words * 2 - 1] = r0;
   4a734:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   4a738:	f840 4c04 	str.w	r4, [r0, #-4]
}
   4a73c:	b003      	add	sp, #12
   4a73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   4a742:	f04f 0e00 	mov.w	lr, #0
   4a746:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   4a74a:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   4a74c:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   4a750:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   4a754:	fba6 6707 	umull	r6, r7, r6, r7
   4a758:	1936      	adds	r6, r6, r4
		for (i = 0; i <= k; ++i) {
   4a75a:	f10e 0e01 	add.w	lr, lr, #1
   4a75e:	416f      	adcs	r7, r5
	*r0 = (uECC_word_t)r01;
   4a760:	4634      	mov	r4, r6
		for (i = 0; i <= k; ++i) {
   4a762:	fa4f f68e 	sxtb.w	r6, lr
   4a766:	f04f 0b00 	mov.w	fp, #0
   4a76a:	bf28      	it	cs
   4a76c:	f04f 0b01 	movcs.w	fp, #1
   4a770:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   4a772:	44d8      	add	r8, fp
	*r1 = r01 >> uECC_WORD_BITS;
   4a774:	463d      	mov	r5, r7
		for (i = 0; i <= k; ++i) {
   4a776:	dde9      	ble.n	4a74c <uECC_vli_mult+0x4c>
		result[k] = r0;
   4a778:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r2 += (r01 < p);
   4a77c:	4645      	mov	r5, r8
   4a77e:	f10c 0c01 	add.w	ip, ip, #1
	*r1 = r01 >> uECC_WORD_BITS;
   4a782:	463c      	mov	r4, r7
   4a784:	e7c2      	b.n	4a70c <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   4a786:	3601      	adds	r6, #1
   4a788:	46a9      	mov	r9, r5
   4a78a:	b276      	sxtb	r6, r6
   4a78c:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   4a790:	2500      	movs	r5, #0
   4a792:	b277      	sxtb	r7, r6
   4a794:	42bb      	cmp	r3, r7
   4a796:	dc05      	bgt.n	4a7a4 <uECC_vli_mult+0xa4>
		result[k] = r0;
   4a798:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   4a79c:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   4a7a0:	464c      	mov	r4, r9
   4a7a2:	e7be      	b.n	4a722 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   4a7a4:	f06f 0703 	mvn.w	r7, #3
   4a7a8:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   4a7aa:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   4a7ae:	f85a 7007 	ldr.w	r7, [sl, r7]
   4a7b2:	fba7 7c0c 	umull	r7, ip, r7, ip
   4a7b6:	193f      	adds	r7, r7, r4
   4a7b8:	eb5c 0c09 	adcs.w	ip, ip, r9
   4a7bc:	f04f 0b00 	mov.w	fp, #0
   4a7c0:	bf28      	it	cs
   4a7c2:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   4a7c6:	445d      	add	r5, fp
	*r1 = r01 >> uECC_WORD_BITS;
   4a7c8:	46e1      	mov	r9, ip
	*r0 = (uECC_word_t)r01;
   4a7ca:	463c      	mov	r4, r7
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   4a7cc:	3601      	adds	r6, #1
   4a7ce:	e7e0      	b.n	4a792 <uECC_vli_mult+0x92>

0004a7d0 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   4a7d0:	2300      	movs	r3, #0
{
   4a7d2:	b510      	push	{r4, lr}
		 vli[i] = 0;
   4a7d4:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   4a7d6:	b25a      	sxtb	r2, r3
   4a7d8:	4291      	cmp	r1, r2
   4a7da:	dc00      	bgt.n	4a7de <uECC_vli_clear+0xe>
}
   4a7dc:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   4a7de:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   4a7e2:	3301      	adds	r3, #1
   4a7e4:	e7f7      	b.n	4a7d6 <uECC_vli_clear+0x6>

0004a7e6 <uECC_vli_isZero>:
{
   4a7e6:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   4a7e8:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   4a7ea:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   4a7ec:	b25c      	sxtb	r4, r3
   4a7ee:	42a1      	cmp	r1, r4
   4a7f0:	dc03      	bgt.n	4a7fa <uECC_vli_isZero+0x14>
}
   4a7f2:	fab2 f082 	clz	r0, r2
   4a7f6:	0940      	lsrs	r0, r0, #5
   4a7f8:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   4a7fa:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   4a7fe:	3301      	adds	r3, #1
   4a800:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   4a802:	e7f3      	b.n	4a7ec <uECC_vli_isZero+0x6>

0004a804 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4a804:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   4a806:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4a808:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   4a80c:	f001 011f 	and.w	r1, r1, #31
   4a810:	408b      	lsls	r3, r1
}
   4a812:	4018      	ands	r0, r3
   4a814:	4770      	bx	lr

0004a816 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   4a816:	3901      	subs	r1, #1
{
   4a818:	b510      	push	{r4, lr}
   4a81a:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   4a81c:	1d04      	adds	r4, r0, #4
   4a81e:	060a      	lsls	r2, r1, #24
   4a820:	b2cb      	uxtb	r3, r1
   4a822:	d404      	bmi.n	4a82e <uECC_vli_numBits+0x18>
   4a824:	3901      	subs	r1, #1
   4a826:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
   4a82a:	2a00      	cmp	r2, #0
   4a82c:	d0f7      	beq.n	4a81e <uECC_vli_numBits+0x8>
	return (i + 1);
   4a82e:	3301      	adds	r3, #1
   4a830:	b25b      	sxtb	r3, r3
	if (num_digits == 0) {
   4a832:	b173      	cbz	r3, 4a852 <uECC_vli_numBits+0x3c>
	digit = vli[num_digits - 1];
   4a834:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   4a838:	3a01      	subs	r2, #1
   4a83a:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
	for (i = 0; digit; ++i) {
   4a83e:	2200      	movs	r2, #0
   4a840:	b921      	cbnz	r1, 4a84c <uECC_vli_numBits+0x36>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   4a842:	3b01      	subs	r3, #1
   4a844:	eb02 1243 	add.w	r2, r2, r3, lsl #5
   4a848:	b210      	sxth	r0, r2
}
   4a84a:	bd10      	pop	{r4, pc}
		digit >>= 1;
   4a84c:	0849      	lsrs	r1, r1, #1
	for (i = 0; digit; ++i) {
   4a84e:	3201      	adds	r2, #1
   4a850:	e7f6      	b.n	4a840 <uECC_vli_numBits+0x2a>
		return 0;
   4a852:	4618      	mov	r0, r3
   4a854:	e7f9      	b.n	4a84a <uECC_vli_numBits+0x34>

0004a856 <uECC_vli_set>:
{
   4a856:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   4a858:	2300      	movs	r3, #0
   4a85a:	b25c      	sxtb	r4, r3
   4a85c:	42a2      	cmp	r2, r4
   4a85e:	dc00      	bgt.n	4a862 <uECC_vli_set+0xc>
}
   4a860:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   4a862:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   4a866:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   4a86a:	3301      	adds	r3, #1
   4a86c:	e7f5      	b.n	4a85a <uECC_vli_set+0x4>

0004a86e <uECC_vli_cmp_unsafe>:
{
   4a86e:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   4a870:	3a01      	subs	r2, #1
   4a872:	b252      	sxtb	r2, r2
   4a874:	0613      	lsls	r3, r2, #24
   4a876:	d501      	bpl.n	4a87c <uECC_vli_cmp_unsafe+0xe>
	return 0;
   4a878:	2000      	movs	r0, #0
}
   4a87a:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   4a87c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   4a880:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   4a884:	429c      	cmp	r4, r3
   4a886:	d805      	bhi.n	4a894 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   4a888:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   4a88c:	d2f2      	bcs.n	4a874 <uECC_vli_cmp_unsafe+0x6>
			return -1;
   4a88e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4a892:	e7f2      	b.n	4a87a <uECC_vli_cmp_unsafe+0xc>
			return 1;
   4a894:	2001      	movs	r0, #1
   4a896:	e7f0      	b.n	4a87a <uECC_vli_cmp_unsafe+0xc>

0004a898 <uECC_vli_equal>:
{
   4a898:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   4a89a:	3a01      	subs	r2, #1
   4a89c:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   4a89e:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   4a8a0:	0614      	lsls	r4, r2, #24
   4a8a2:	d503      	bpl.n	4a8ac <uECC_vli_equal+0x14>
}
   4a8a4:	1e18      	subs	r0, r3, #0
   4a8a6:	bf18      	it	ne
   4a8a8:	2001      	movne	r0, #1
   4a8aa:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   4a8ac:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   4a8b0:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   4a8b4:	406c      	eors	r4, r5
   4a8b6:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   4a8b8:	3a01      	subs	r2, #1
   4a8ba:	e7f1      	b.n	4a8a0 <uECC_vli_equal+0x8>

0004a8bc <uECC_vli_sub>:
{
   4a8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   4a8be:	2400      	movs	r4, #0
{
   4a8c0:	4606      	mov	r6, r0
   4a8c2:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   4a8c4:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   4a8c6:	b265      	sxtb	r5, r4
   4a8c8:	4565      	cmp	r5, ip
   4a8ca:	db00      	blt.n	4a8ce <uECC_vli_sub+0x12>
}
   4a8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   4a8ce:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   4a8d2:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   4a8d6:	1a3d      	subs	r5, r7, r0
   4a8d8:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   4a8da:	42af      	cmp	r7, r5
   4a8dc:	f000 0001 	and.w	r0, r0, #1
   4a8e0:	bf18      	it	ne
   4a8e2:	2000      	movne	r0, #0
		result[i] = diff;
   4a8e4:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   4a8e8:	bf38      	it	cc
   4a8ea:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   4a8ee:	3401      	adds	r4, #1
   4a8f0:	e7e9      	b.n	4a8c6 <uECC_vli_sub+0xa>

0004a8f2 <uECC_vli_modAdd>:
{
   4a8f2:	b570      	push	{r4, r5, r6, lr}
   4a8f4:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   4a8f8:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   4a8fa:	4633      	mov	r3, r6
{
   4a8fc:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   4a8fe:	f7ff febc 	bl	4a67a <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   4a902:	b930      	cbnz	r0, 4a912 <uECC_vli_modAdd+0x20>
   4a904:	4632      	mov	r2, r6
   4a906:	4621      	mov	r1, r4
   4a908:	4628      	mov	r0, r5
   4a90a:	f7ff ffb0 	bl	4a86e <uECC_vli_cmp_unsafe>
   4a90e:	2801      	cmp	r0, #1
   4a910:	d007      	beq.n	4a922 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   4a912:	4633      	mov	r3, r6
   4a914:	462a      	mov	r2, r5
   4a916:	4621      	mov	r1, r4
   4a918:	4620      	mov	r0, r4
}
   4a91a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   4a91e:	f7ff bfcd 	b.w	4a8bc <uECC_vli_sub>
}
   4a922:	bd70      	pop	{r4, r5, r6, pc}

0004a924 <uECC_vli_modSub>:
{
   4a924:	b570      	push	{r4, r5, r6, lr}
   4a926:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   4a92a:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   4a92c:	4633      	mov	r3, r6
{
   4a92e:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   4a930:	f7ff ffc4 	bl	4a8bc <uECC_vli_sub>
	if (l_borrow) {
   4a934:	b138      	cbz	r0, 4a946 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   4a936:	4633      	mov	r3, r6
   4a938:	462a      	mov	r2, r5
   4a93a:	4621      	mov	r1, r4
   4a93c:	4620      	mov	r0, r4
}
   4a93e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   4a942:	f7ff be9a 	b.w	4a67a <uECC_vli_add>
}
   4a946:	bd70      	pop	{r4, r5, r6, pc}

0004a948 <uECC_vli_mmod>:
{
   4a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a94c:	b0a5      	sub	sp, #148	; 0x94
   4a94e:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   4a950:	ab14      	add	r3, sp, #80	; 0x50
   4a952:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   4a956:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   4a958:	4629      	mov	r1, r5
   4a95a:	4610      	mov	r0, r2
{
   4a95c:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   4a95e:	f7ff ff5a 	bl	4a816 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   4a962:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   4a966:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   4a968:	2c00      	cmp	r4, #0
   4a96a:	4621      	mov	r1, r4
   4a96c:	bfb8      	it	lt
   4a96e:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4a972:	4263      	negs	r3, r4
   4a974:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   4a978:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4a97c:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   4a980:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4a982:	bf58      	it	pl
   4a984:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   4a986:	f7ff ff23 	bl	4a7d0 <uECC_vli_clear>
	if (bit_shift > 0) {
   4a98a:	2e00      	cmp	r6, #0
   4a98c:	b208      	sxth	r0, r1
   4a98e:	dd2b      	ble.n	4a9e8 <uECC_vli_mmod+0xa0>
   4a990:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   4a992:	2200      	movs	r2, #0
   4a994:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   4a998:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4a99c:	4613      	mov	r3, r2
   4a99e:	429d      	cmp	r5, r3
   4a9a0:	d817      	bhi.n	4a9d2 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   4a9a2:	006b      	lsls	r3, r5, #1
   4a9a4:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4a9a6:	ab04      	add	r3, sp, #16
   4a9a8:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4a9ac:	1e6f      	subs	r7, r5, #1
   4a9ae:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4a9b0:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4a9b2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   4a9b6:	2c00      	cmp	r4, #0
   4a9b8:	da54      	bge.n	4aa64 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   4a9ba:	ab24      	add	r3, sp, #144	; 0x90
   4a9bc:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   4a9c0:	462a      	mov	r2, r5
   4a9c2:	f856 1c88 	ldr.w	r1, [r6, #-136]
   4a9c6:	4640      	mov	r0, r8
   4a9c8:	f7ff ff45 	bl	4a856 <uECC_vli_set>
}
   4a9cc:	b025      	add	sp, #148	; 0x94
   4a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   4a9d2:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   4a9d6:	fa0c f106 	lsl.w	r1, ip, r6
   4a9da:	430a      	orrs	r2, r1
   4a9dc:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4a9e0:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   4a9e2:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4a9e6:	e7da      	b.n	4a99e <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   4a9e8:	ab04      	add	r3, sp, #16
   4a9ea:	462a      	mov	r2, r5
   4a9ec:	4639      	mov	r1, r7
   4a9ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   4a9f2:	f7ff ff30 	bl	4a856 <uECC_vli_set>
   4a9f6:	e7d4      	b.n	4a9a2 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4a9f8:	fa0f fe82 	sxth.w	lr, r2
   4a9fc:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   4aa00:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   4aa04:	ab24      	add	r3, sp, #144	; 0x90
   4aa06:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   4aa0a:	3001      	adds	r0, #1
   4aa0c:	f852 3c80 	ldr.w	r3, [r2, #-128]
   4aa10:	440b      	add	r3, r1
   4aa12:	ebbb 0303 	subs.w	r3, fp, r3
   4aa16:	bf34      	ite	cc
   4aa18:	2201      	movcc	r2, #1
   4aa1a:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   4aa1c:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   4aa1e:	bf18      	it	ne
   4aa20:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   4aa22:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   4aa26:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   4aa2a:	9b01      	ldr	r3, [sp, #4]
   4aa2c:	b242      	sxtb	r2, r0
   4aa2e:	429a      	cmp	r2, r3
   4aa30:	dbe2      	blt.n	4a9f8 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   4aa32:	1a73      	subs	r3, r6, r1
   4aa34:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   4aa36:	4629      	mov	r1, r5
   4aa38:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   4aa3a:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   4aa3c:	f7ff fe37 	bl	4a6ae <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4aa40:	ab24      	add	r3, sp, #144	; 0x90
   4aa42:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4aa46:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4aa48:	f853 2c80 	ldr.w	r2, [r3, #-128]
   4aa4c:	f857 3c80 	ldr.w	r3, [r7, #-128]
   4aa50:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   4aa54:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4aa58:	4648      	mov	r0, r9
   4aa5a:	3c01      	subs	r4, #1
   4aa5c:	f7ff fe27 	bl	4a6ae <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   4aa60:	b224      	sxth	r4, r4
   4aa62:	e7a8      	b.n	4a9b6 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4aa64:	ab24      	add	r3, sp, #144	; 0x90
   4aa66:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   4aa68:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   4aa6c:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4aa6e:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   4aa72:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   4aa76:	e7d8      	b.n	4aa2a <uECC_vli_mmod+0xe2>

0004aa78 <uECC_vli_modMult_fast>:
{
   4aa78:	b530      	push	{r4, r5, lr}
   4aa7a:	461c      	mov	r4, r3
   4aa7c:	b091      	sub	sp, #68	; 0x44
   4aa7e:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   4aa80:	f993 3000 	ldrsb.w	r3, [r3]
   4aa84:	4668      	mov	r0, sp
   4aa86:	f7ff fe3b 	bl	4a700 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   4aa8a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   4aa8e:	4669      	mov	r1, sp
   4aa90:	4628      	mov	r0, r5
   4aa92:	4798      	blx	r3
}
   4aa94:	b011      	add	sp, #68	; 0x44
   4aa96:	bd30      	pop	{r4, r5, pc}

0004aa98 <uECC_vli_modSquare_fast>:
{
   4aa98:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   4aa9a:	460a      	mov	r2, r1
   4aa9c:	f7ff bfec 	b.w	4aa78 <uECC_vli_modMult_fast>

0004aaa0 <double_jacobian_default>:
{
   4aaa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   4aaa4:	f993 6000 	ldrsb.w	r6, [r3]
{
   4aaa8:	b092      	sub	sp, #72	; 0x48
   4aaaa:	4604      	mov	r4, r0
   4aaac:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   4aaae:	4610      	mov	r0, r2
   4aab0:	4631      	mov	r1, r6
{
   4aab2:	4615      	mov	r5, r2
   4aab4:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   4aab6:	f7ff fe96 	bl	4a7e6 <uECC_vli_isZero>
   4aaba:	2800      	cmp	r0, #0
   4aabc:	f040 8091 	bne.w	4abe2 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   4aac0:	463a      	mov	r2, r7
   4aac2:	4649      	mov	r1, r9
   4aac4:	a802      	add	r0, sp, #8
   4aac6:	f7ff ffe7 	bl	4aa98 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   4aaca:	463b      	mov	r3, r7
   4aacc:	aa02      	add	r2, sp, #8
   4aace:	4621      	mov	r1, r4
   4aad0:	a80a      	add	r0, sp, #40	; 0x28
   4aad2:	f7ff ffd1 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   4aad6:	a902      	add	r1, sp, #8
   4aad8:	4608      	mov	r0, r1
   4aada:	463a      	mov	r2, r7
   4aadc:	f7ff ffdc 	bl	4aa98 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   4aae0:	463b      	mov	r3, r7
   4aae2:	462a      	mov	r2, r5
   4aae4:	4649      	mov	r1, r9
   4aae6:	4648      	mov	r0, r9
   4aae8:	f7ff ffc6 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   4aaec:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   4aaf0:	463a      	mov	r2, r7
   4aaf2:	4629      	mov	r1, r5
   4aaf4:	4628      	mov	r0, r5
   4aaf6:	f7ff ffcf 	bl	4aa98 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   4aafa:	4643      	mov	r3, r8
   4aafc:	462a      	mov	r2, r5
   4aafe:	4621      	mov	r1, r4
   4ab00:	4620      	mov	r0, r4
   4ab02:	9600      	str	r6, [sp, #0]
   4ab04:	f7ff fef5 	bl	4a8f2 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   4ab08:	4643      	mov	r3, r8
   4ab0a:	462a      	mov	r2, r5
   4ab0c:	4629      	mov	r1, r5
   4ab0e:	4628      	mov	r0, r5
   4ab10:	9600      	str	r6, [sp, #0]
   4ab12:	f7ff feee 	bl	4a8f2 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   4ab16:	4643      	mov	r3, r8
   4ab18:	462a      	mov	r2, r5
   4ab1a:	4621      	mov	r1, r4
   4ab1c:	4628      	mov	r0, r5
   4ab1e:	9600      	str	r6, [sp, #0]
   4ab20:	f7ff ff00 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   4ab24:	463b      	mov	r3, r7
   4ab26:	462a      	mov	r2, r5
   4ab28:	4621      	mov	r1, r4
   4ab2a:	4620      	mov	r0, r4
   4ab2c:	f7ff ffa4 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   4ab30:	4643      	mov	r3, r8
   4ab32:	4622      	mov	r2, r4
   4ab34:	4621      	mov	r1, r4
   4ab36:	4628      	mov	r0, r5
   4ab38:	9600      	str	r6, [sp, #0]
   4ab3a:	f7ff feda 	bl	4a8f2 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   4ab3e:	4643      	mov	r3, r8
   4ab40:	9600      	str	r6, [sp, #0]
   4ab42:	462a      	mov	r2, r5
   4ab44:	4621      	mov	r1, r4
   4ab46:	4620      	mov	r0, r4
   4ab48:	f7ff fed3 	bl	4a8f2 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4ab4c:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   4ab4e:	07db      	lsls	r3, r3, #31
   4ab50:	d54a      	bpl.n	4abe8 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   4ab52:	4633      	mov	r3, r6
   4ab54:	4642      	mov	r2, r8
   4ab56:	4621      	mov	r1, r4
   4ab58:	4620      	mov	r0, r4
   4ab5a:	f7ff fd8e 	bl	4a67a <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   4ab5e:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   4ab60:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   4ab62:	4620      	mov	r0, r4
   4ab64:	f7ff fda3 	bl	4a6ae <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   4ab68:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   4ab6c:	3b01      	subs	r3, #1
   4ab6e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   4ab72:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   4ab76:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   4ab7a:	463a      	mov	r2, r7
   4ab7c:	4621      	mov	r1, r4
   4ab7e:	4628      	mov	r0, r5
   4ab80:	f7ff ff8a 	bl	4aa98 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   4ab84:	4643      	mov	r3, r8
   4ab86:	aa0a      	add	r2, sp, #40	; 0x28
   4ab88:	4629      	mov	r1, r5
   4ab8a:	4628      	mov	r0, r5
   4ab8c:	9600      	str	r6, [sp, #0]
   4ab8e:	f7ff fec9 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   4ab92:	4643      	mov	r3, r8
   4ab94:	aa0a      	add	r2, sp, #40	; 0x28
   4ab96:	4629      	mov	r1, r5
   4ab98:	4628      	mov	r0, r5
   4ab9a:	9600      	str	r6, [sp, #0]
   4ab9c:	f7ff fec2 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   4aba0:	a90a      	add	r1, sp, #40	; 0x28
   4aba2:	4608      	mov	r0, r1
   4aba4:	4643      	mov	r3, r8
   4aba6:	462a      	mov	r2, r5
   4aba8:	9600      	str	r6, [sp, #0]
   4abaa:	f7ff febb 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   4abae:	463b      	mov	r3, r7
   4abb0:	aa0a      	add	r2, sp, #40	; 0x28
   4abb2:	4621      	mov	r1, r4
   4abb4:	4620      	mov	r0, r4
   4abb6:	f7ff ff5f 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   4abba:	aa02      	add	r2, sp, #8
   4abbc:	4643      	mov	r3, r8
   4abbe:	4610      	mov	r0, r2
   4abc0:	4621      	mov	r1, r4
   4abc2:	9600      	str	r6, [sp, #0]
   4abc4:	f7ff feae 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   4abc8:	4632      	mov	r2, r6
   4abca:	4629      	mov	r1, r5
   4abcc:	4620      	mov	r0, r4
   4abce:	f7ff fe42 	bl	4a856 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   4abd2:	4649      	mov	r1, r9
   4abd4:	4628      	mov	r0, r5
   4abd6:	f7ff fe3e 	bl	4a856 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   4abda:	a902      	add	r1, sp, #8
   4abdc:	4648      	mov	r0, r9
   4abde:	f7ff fe3a 	bl	4a856 <uECC_vli_set>
}
   4abe2:	b012      	add	sp, #72	; 0x48
   4abe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   4abe8:	4631      	mov	r1, r6
   4abea:	4620      	mov	r0, r4
   4abec:	f7ff fd5f 	bl	4a6ae <uECC_vli_rshift1>
   4abf0:	e7c3      	b.n	4ab7a <double_jacobian_default+0xda>

0004abf2 <x_side_default>:
{
   4abf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4abf6:	4615      	mov	r5, r2
   4abf8:	b08a      	sub	sp, #40	; 0x28
   4abfa:	4604      	mov	r4, r0
   4abfc:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4abfe:	221c      	movs	r2, #28
   4ac00:	2100      	movs	r1, #0
   4ac02:	a803      	add	r0, sp, #12
   4ac04:	f000 fe4c 	bl	4b8a0 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   4ac08:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   4ac0a:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4ac0e:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   4ac10:	462a      	mov	r2, r5
   4ac12:	4631      	mov	r1, r6
   4ac14:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4ac16:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   4ac18:	f7ff ff3e 	bl	4aa98 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   4ac1c:	463b      	mov	r3, r7
   4ac1e:	aa02      	add	r2, sp, #8
   4ac20:	4621      	mov	r1, r4
   4ac22:	4620      	mov	r0, r4
   4ac24:	f8cd 8000 	str.w	r8, [sp]
   4ac28:	f7ff fe7c 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   4ac2c:	462b      	mov	r3, r5
   4ac2e:	4632      	mov	r2, r6
   4ac30:	4621      	mov	r1, r4
   4ac32:	4620      	mov	r0, r4
   4ac34:	f7ff ff20 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   4ac38:	f8cd 8000 	str.w	r8, [sp]
   4ac3c:	463b      	mov	r3, r7
   4ac3e:	f105 0284 	add.w	r2, r5, #132	; 0x84
   4ac42:	4621      	mov	r1, r4
   4ac44:	4620      	mov	r0, r4
   4ac46:	f7ff fe54 	bl	4a8f2 <uECC_vli_modAdd>
}
   4ac4a:	b00a      	add	sp, #40	; 0x28
   4ac4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004ac50 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   4ac50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4ac54:	b09a      	sub	sp, #104	; 0x68
   4ac56:	4616      	mov	r6, r2
   4ac58:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   4ac5c:	4644      	mov	r4, r8
{
   4ac5e:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   4ac60:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4ac64:	9500      	str	r5, [sp, #0]
{
   4ac66:	4607      	mov	r7, r0
   4ac68:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4ac6a:	4623      	mov	r3, r4
   4ac6c:	4602      	mov	r2, r0
   4ac6e:	4631      	mov	r1, r6
   4ac70:	a802      	add	r0, sp, #8
   4ac72:	f7ff fe57 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4ac76:	a902      	add	r1, sp, #8
   4ac78:	4642      	mov	r2, r8
   4ac7a:	4608      	mov	r0, r1
   4ac7c:	f7ff ff0c 	bl	4aa98 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   4ac80:	4643      	mov	r3, r8
   4ac82:	aa02      	add	r2, sp, #8
   4ac84:	4639      	mov	r1, r7
   4ac86:	4638      	mov	r0, r7
   4ac88:	f7ff fef6 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   4ac8c:	4643      	mov	r3, r8
   4ac8e:	aa02      	add	r2, sp, #8
   4ac90:	4631      	mov	r1, r6
   4ac92:	4630      	mov	r0, r6
   4ac94:	f7ff fef0 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   4ac98:	4623      	mov	r3, r4
   4ac9a:	4652      	mov	r2, sl
   4ac9c:	4649      	mov	r1, r9
   4ac9e:	a802      	add	r0, sp, #8
   4aca0:	9500      	str	r5, [sp, #0]
   4aca2:	f7ff fe26 	bl	4a8f2 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4aca6:	4623      	mov	r3, r4
   4aca8:	4652      	mov	r2, sl
   4acaa:	4649      	mov	r1, r9
   4acac:	4648      	mov	r0, r9
   4acae:	9500      	str	r5, [sp, #0]
   4acb0:	f7ff fe38 	bl	4a924 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   4acb4:	4623      	mov	r3, r4
   4acb6:	463a      	mov	r2, r7
   4acb8:	4631      	mov	r1, r6
   4acba:	a80a      	add	r0, sp, #40	; 0x28
   4acbc:	9500      	str	r5, [sp, #0]
   4acbe:	f7ff fe31 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   4acc2:	4643      	mov	r3, r8
   4acc4:	aa0a      	add	r2, sp, #40	; 0x28
   4acc6:	4651      	mov	r1, sl
   4acc8:	4650      	mov	r0, sl
   4acca:	f7ff fed5 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   4acce:	4623      	mov	r3, r4
   4acd0:	4632      	mov	r2, r6
   4acd2:	4639      	mov	r1, r7
   4acd4:	a80a      	add	r0, sp, #40	; 0x28
   4acd6:	9500      	str	r5, [sp, #0]
   4acd8:	f7ff fe0b 	bl	4a8f2 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   4acdc:	4642      	mov	r2, r8
   4acde:	4649      	mov	r1, r9
   4ace0:	4630      	mov	r0, r6
   4ace2:	f7ff fed9 	bl	4aa98 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   4ace6:	4623      	mov	r3, r4
   4ace8:	aa0a      	add	r2, sp, #40	; 0x28
   4acea:	4631      	mov	r1, r6
   4acec:	4630      	mov	r0, r6
   4acee:	9500      	str	r5, [sp, #0]
   4acf0:	f7ff fe18 	bl	4a924 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   4acf4:	4623      	mov	r3, r4
   4acf6:	4632      	mov	r2, r6
   4acf8:	4639      	mov	r1, r7
   4acfa:	a812      	add	r0, sp, #72	; 0x48
   4acfc:	9500      	str	r5, [sp, #0]
   4acfe:	f7ff fe11 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   4ad02:	4643      	mov	r3, r8
   4ad04:	aa12      	add	r2, sp, #72	; 0x48
   4ad06:	4649      	mov	r1, r9
   4ad08:	4648      	mov	r0, r9
   4ad0a:	f7ff feb5 	bl	4aa78 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   4ad0e:	4623      	mov	r3, r4
   4ad10:	4652      	mov	r2, sl
   4ad12:	4649      	mov	r1, r9
   4ad14:	4648      	mov	r0, r9
   4ad16:	9500      	str	r5, [sp, #0]
   4ad18:	f7ff fe04 	bl	4a924 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   4ad1c:	4642      	mov	r2, r8
   4ad1e:	a902      	add	r1, sp, #8
   4ad20:	a812      	add	r0, sp, #72	; 0x48
   4ad22:	f7ff feb9 	bl	4aa98 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   4ad26:	a912      	add	r1, sp, #72	; 0x48
   4ad28:	4623      	mov	r3, r4
   4ad2a:	aa0a      	add	r2, sp, #40	; 0x28
   4ad2c:	4608      	mov	r0, r1
   4ad2e:	9500      	str	r5, [sp, #0]
   4ad30:	f7ff fdf8 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   4ad34:	4623      	mov	r3, r4
   4ad36:	463a      	mov	r2, r7
   4ad38:	a912      	add	r1, sp, #72	; 0x48
   4ad3a:	a80a      	add	r0, sp, #40	; 0x28
   4ad3c:	9500      	str	r5, [sp, #0]
   4ad3e:	f7ff fdf1 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   4ad42:	a90a      	add	r1, sp, #40	; 0x28
   4ad44:	4643      	mov	r3, r8
   4ad46:	aa02      	add	r2, sp, #8
   4ad48:	4608      	mov	r0, r1
   4ad4a:	f7ff fe95 	bl	4aa78 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   4ad4e:	4623      	mov	r3, r4
   4ad50:	4652      	mov	r2, sl
   4ad52:	a90a      	add	r1, sp, #40	; 0x28
   4ad54:	4650      	mov	r0, sl
   4ad56:	9500      	str	r5, [sp, #0]
   4ad58:	f7ff fde4 	bl	4a924 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   4ad5c:	462a      	mov	r2, r5
   4ad5e:	a912      	add	r1, sp, #72	; 0x48
   4ad60:	4638      	mov	r0, r7
   4ad62:	f7ff fd78 	bl	4a856 <uECC_vli_set>
}
   4ad66:	b01a      	add	sp, #104	; 0x68
   4ad68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004ad6c <uECC_vli_modInv>:
{
   4ad6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4ad6e:	460f      	mov	r7, r1
   4ad70:	b0a1      	sub	sp, #132	; 0x84
   4ad72:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   4ad74:	4619      	mov	r1, r3
   4ad76:	4638      	mov	r0, r7
{
   4ad78:	4615      	mov	r5, r2
   4ad7a:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   4ad7c:	f7ff fd33 	bl	4a7e6 <uECC_vli_isZero>
   4ad80:	b128      	cbz	r0, 4ad8e <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   4ad82:	4630      	mov	r0, r6
}
   4ad84:	b021      	add	sp, #132	; 0x84
   4ad86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   4ad8a:	f7ff bd21 	b.w	4a7d0 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   4ad8e:	4622      	mov	r2, r4
   4ad90:	4639      	mov	r1, r7
   4ad92:	4668      	mov	r0, sp
   4ad94:	f7ff fd5f 	bl	4a856 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   4ad98:	4629      	mov	r1, r5
   4ad9a:	a808      	add	r0, sp, #32
   4ad9c:	f7ff fd5b 	bl	4a856 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   4ada0:	a810      	add	r0, sp, #64	; 0x40
   4ada2:	4621      	mov	r1, r4
   4ada4:	f7ff fd14 	bl	4a7d0 <uECC_vli_clear>
	u[0] = 1;
   4ada8:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   4adaa:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   4adac:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   4adae:	f7ff fd0f 	bl	4a7d0 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   4adb2:	4622      	mov	r2, r4
   4adb4:	a908      	add	r1, sp, #32
   4adb6:	4668      	mov	r0, sp
   4adb8:	f7ff fd59 	bl	4a86e <uECC_vli_cmp_unsafe>
   4adbc:	b930      	cbnz	r0, 4adcc <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   4adbe:	4622      	mov	r2, r4
   4adc0:	a910      	add	r1, sp, #64	; 0x40
   4adc2:	4630      	mov	r0, r6
   4adc4:	f7ff fd47 	bl	4a856 <uECC_vli_set>
}
   4adc8:	b021      	add	sp, #132	; 0x84
   4adca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   4adcc:	9b00      	ldr	r3, [sp, #0]
   4adce:	07da      	lsls	r2, r3, #31
   4add0:	d409      	bmi.n	4ade6 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   4add2:	4621      	mov	r1, r4
   4add4:	4668      	mov	r0, sp
   4add6:	f7ff fc6a 	bl	4a6ae <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   4adda:	4622      	mov	r2, r4
   4addc:	4629      	mov	r1, r5
   4adde:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   4ade0:	f7ff fc72 	bl	4a6c8 <vli_modInv_update>
   4ade4:	e7e5      	b.n	4adb2 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   4ade6:	9b08      	ldr	r3, [sp, #32]
   4ade8:	07db      	lsls	r3, r3, #31
   4adea:	d407      	bmi.n	4adfc <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   4adec:	4621      	mov	r1, r4
   4adee:	a808      	add	r0, sp, #32
   4adf0:	f7ff fc5d 	bl	4a6ae <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   4adf4:	4622      	mov	r2, r4
   4adf6:	4629      	mov	r1, r5
   4adf8:	a818      	add	r0, sp, #96	; 0x60
   4adfa:	e7f1      	b.n	4ade0 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   4adfc:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   4adfe:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   4ae00:	dd1c      	ble.n	4ae3c <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   4ae02:	aa08      	add	r2, sp, #32
   4ae04:	4669      	mov	r1, sp
   4ae06:	4668      	mov	r0, sp
   4ae08:	f7ff fd58 	bl	4a8bc <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   4ae0c:	4621      	mov	r1, r4
   4ae0e:	4668      	mov	r0, sp
   4ae10:	f7ff fc4d 	bl	4a6ae <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   4ae14:	4622      	mov	r2, r4
   4ae16:	a918      	add	r1, sp, #96	; 0x60
   4ae18:	a810      	add	r0, sp, #64	; 0x40
   4ae1a:	f7ff fd28 	bl	4a86e <uECC_vli_cmp_unsafe>
   4ae1e:	2800      	cmp	r0, #0
   4ae20:	da05      	bge.n	4ae2e <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   4ae22:	a910      	add	r1, sp, #64	; 0x40
   4ae24:	4623      	mov	r3, r4
   4ae26:	462a      	mov	r2, r5
   4ae28:	4608      	mov	r0, r1
   4ae2a:	f7ff fc26 	bl	4a67a <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   4ae2e:	a910      	add	r1, sp, #64	; 0x40
   4ae30:	4623      	mov	r3, r4
   4ae32:	aa18      	add	r2, sp, #96	; 0x60
   4ae34:	4608      	mov	r0, r1
   4ae36:	f7ff fd41 	bl	4a8bc <uECC_vli_sub>
   4ae3a:	e7ce      	b.n	4adda <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   4ae3c:	466a      	mov	r2, sp
   4ae3e:	a808      	add	r0, sp, #32
   4ae40:	f7ff fd3c 	bl	4a8bc <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   4ae44:	4621      	mov	r1, r4
   4ae46:	a808      	add	r0, sp, #32
   4ae48:	f7ff fc31 	bl	4a6ae <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   4ae4c:	4622      	mov	r2, r4
   4ae4e:	a910      	add	r1, sp, #64	; 0x40
   4ae50:	a818      	add	r0, sp, #96	; 0x60
   4ae52:	f7ff fd0c 	bl	4a86e <uECC_vli_cmp_unsafe>
   4ae56:	2800      	cmp	r0, #0
   4ae58:	da05      	bge.n	4ae66 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   4ae5a:	a918      	add	r1, sp, #96	; 0x60
   4ae5c:	4623      	mov	r3, r4
   4ae5e:	462a      	mov	r2, r5
   4ae60:	4608      	mov	r0, r1
   4ae62:	f7ff fc0a 	bl	4a67a <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   4ae66:	a918      	add	r1, sp, #96	; 0x60
   4ae68:	4623      	mov	r3, r4
   4ae6a:	aa10      	add	r2, sp, #64	; 0x40
   4ae6c:	4608      	mov	r0, r1
   4ae6e:	f7ff fd25 	bl	4a8bc <uECC_vli_sub>
   4ae72:	e7bf      	b.n	4adf4 <uECC_vli_modInv+0x88>

0004ae74 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   4ae74:	7809      	ldrb	r1, [r1, #0]
   4ae76:	0049      	lsls	r1, r1, #1
   4ae78:	b249      	sxtb	r1, r1
   4ae7a:	f7ff bcb4 	b.w	4a7e6 <uECC_vli_isZero>

0004ae7e <apply_z>:
{
   4ae7e:	b5f0      	push	{r4, r5, r6, r7, lr}
   4ae80:	4615      	mov	r5, r2
   4ae82:	b089      	sub	sp, #36	; 0x24
   4ae84:	461c      	mov	r4, r3
   4ae86:	4607      	mov	r7, r0
   4ae88:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   4ae8a:	461a      	mov	r2, r3
   4ae8c:	4629      	mov	r1, r5
   4ae8e:	4668      	mov	r0, sp
   4ae90:	f7ff fe02 	bl	4aa98 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   4ae94:	4623      	mov	r3, r4
   4ae96:	466a      	mov	r2, sp
   4ae98:	4639      	mov	r1, r7
   4ae9a:	4638      	mov	r0, r7
   4ae9c:	f7ff fdec 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   4aea0:	4623      	mov	r3, r4
   4aea2:	462a      	mov	r2, r5
   4aea4:	4669      	mov	r1, sp
   4aea6:	4668      	mov	r0, sp
   4aea8:	f7ff fde6 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   4aeac:	4623      	mov	r3, r4
   4aeae:	466a      	mov	r2, sp
   4aeb0:	4631      	mov	r1, r6
   4aeb2:	4630      	mov	r0, r6
   4aeb4:	f7ff fde0 	bl	4aa78 <uECC_vli_modMult_fast>
}
   4aeb8:	b009      	add	sp, #36	; 0x24
   4aeba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004aebc <XYcZ_add>:
{
   4aebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4aec0:	b08a      	sub	sp, #40	; 0x28
   4aec2:	4614      	mov	r4, r2
   4aec4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   4aec8:	4655      	mov	r5, sl
{
   4aeca:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   4aecc:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4aed0:	9600      	str	r6, [sp, #0]
{
   4aed2:	4680      	mov	r8, r0
   4aed4:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4aed6:	462b      	mov	r3, r5
   4aed8:	4602      	mov	r2, r0
   4aeda:	4621      	mov	r1, r4
   4aedc:	a802      	add	r0, sp, #8
   4aede:	f7ff fd21 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4aee2:	a902      	add	r1, sp, #8
   4aee4:	4652      	mov	r2, sl
   4aee6:	4608      	mov	r0, r1
   4aee8:	f7ff fdd6 	bl	4aa98 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   4aeec:	4653      	mov	r3, sl
   4aeee:	aa02      	add	r2, sp, #8
   4aef0:	4641      	mov	r1, r8
   4aef2:	4640      	mov	r0, r8
   4aef4:	f7ff fdc0 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   4aef8:	4653      	mov	r3, sl
   4aefa:	aa02      	add	r2, sp, #8
   4aefc:	4621      	mov	r1, r4
   4aefe:	4620      	mov	r0, r4
   4af00:	f7ff fdba 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4af04:	462b      	mov	r3, r5
   4af06:	464a      	mov	r2, r9
   4af08:	4639      	mov	r1, r7
   4af0a:	4638      	mov	r0, r7
   4af0c:	9600      	str	r6, [sp, #0]
   4af0e:	f7ff fd09 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   4af12:	4652      	mov	r2, sl
   4af14:	4639      	mov	r1, r7
   4af16:	a802      	add	r0, sp, #8
   4af18:	f7ff fdbe 	bl	4aa98 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   4af1c:	a902      	add	r1, sp, #8
   4af1e:	462b      	mov	r3, r5
   4af20:	4642      	mov	r2, r8
   4af22:	4608      	mov	r0, r1
   4af24:	9600      	str	r6, [sp, #0]
   4af26:	f7ff fcfd 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   4af2a:	a902      	add	r1, sp, #8
   4af2c:	462b      	mov	r3, r5
   4af2e:	4622      	mov	r2, r4
   4af30:	4608      	mov	r0, r1
   4af32:	9600      	str	r6, [sp, #0]
   4af34:	f7ff fcf6 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   4af38:	462b      	mov	r3, r5
   4af3a:	4642      	mov	r2, r8
   4af3c:	4621      	mov	r1, r4
   4af3e:	4620      	mov	r0, r4
   4af40:	9600      	str	r6, [sp, #0]
   4af42:	f7ff fcef 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   4af46:	4653      	mov	r3, sl
   4af48:	4622      	mov	r2, r4
   4af4a:	4649      	mov	r1, r9
   4af4c:	4648      	mov	r0, r9
   4af4e:	f7ff fd93 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   4af52:	462b      	mov	r3, r5
   4af54:	aa02      	add	r2, sp, #8
   4af56:	4641      	mov	r1, r8
   4af58:	4620      	mov	r0, r4
   4af5a:	9600      	str	r6, [sp, #0]
   4af5c:	f7ff fce2 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   4af60:	4653      	mov	r3, sl
   4af62:	4622      	mov	r2, r4
   4af64:	4639      	mov	r1, r7
   4af66:	4638      	mov	r0, r7
   4af68:	f7ff fd86 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   4af6c:	462b      	mov	r3, r5
   4af6e:	464a      	mov	r2, r9
   4af70:	4639      	mov	r1, r7
   4af72:	4638      	mov	r0, r7
   4af74:	9600      	str	r6, [sp, #0]
   4af76:	f7ff fcd5 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   4af7a:	4632      	mov	r2, r6
   4af7c:	a902      	add	r1, sp, #8
   4af7e:	4620      	mov	r0, r4
   4af80:	f7ff fc69 	bl	4a856 <uECC_vli_set>
}
   4af84:	b00a      	add	sp, #40	; 0x28
   4af86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004af8a <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   4af8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4af8e:	b0af      	sub	sp, #188	; 0xbc
   4af90:	e9cd 0102 	strd	r0, r1, [sp, #8]
   4af94:	9c39      	ldr	r4, [sp, #228]	; 0xe4
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   4af96:	f994 6000 	ldrsb.w	r6, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   4af9a:	a816      	add	r0, sp, #88	; 0x58
{
   4af9c:	4691      	mov	r9, r2
	uECC_vli_set(Rx[1], point, num_words);
   4af9e:	4632      	mov	r2, r6
{
   4afa0:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   4afa2:	f7ff fc58 	bl	4a856 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   4afa6:	00b3      	lsls	r3, r6, #2
   4afa8:	9304      	str	r3, [sp, #16]
   4afaa:	9b03      	ldr	r3, [sp, #12]
   4afac:	eb03 0886 	add.w	r8, r3, r6, lsl #2
   4afb0:	4641      	mov	r1, r8
   4afb2:	a826      	add	r0, sp, #152	; 0x98
   4afb4:	f7ff fc4f 	bl	4a856 <uECC_vli_set>
	if (initial_Z) {
   4afb8:	2d00      	cmp	r5, #0
   4afba:	f000 8081 	beq.w	4b0c0 <EccPoint_mult+0x136>
		uECC_vli_set(z, initial_Z, num_words);
   4afbe:	4629      	mov	r1, r5
   4afc0:	a806      	add	r0, sp, #24
   4afc2:	f7ff fc48 	bl	4a856 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   4afc6:	4632      	mov	r2, r6
   4afc8:	a916      	add	r1, sp, #88	; 0x58
   4afca:	a80e      	add	r0, sp, #56	; 0x38
   4afcc:	f7ff fc43 	bl	4a856 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   4afd0:	a926      	add	r1, sp, #152	; 0x98
   4afd2:	a81e      	add	r0, sp, #120	; 0x78
   4afd4:	f7ff fc3f 	bl	4a856 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   4afd8:	4623      	mov	r3, r4
   4afda:	aa06      	add	r2, sp, #24
   4afdc:	a816      	add	r0, sp, #88	; 0x58
   4afde:	f7ff ff4e 	bl	4ae7e <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   4afe2:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   4afe6:	4623      	mov	r3, r4
   4afe8:	aa06      	add	r2, sp, #24
   4afea:	a926      	add	r1, sp, #152	; 0x98
   4afec:	a816      	add	r0, sp, #88	; 0x58
   4afee:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   4aff0:	4623      	mov	r3, r4
   4aff2:	aa06      	add	r2, sp, #24
   4aff4:	a91e      	add	r1, sp, #120	; 0x78
   4aff6:	a80e      	add	r0, sp, #56	; 0x38
   4aff8:	f7ff ff41 	bl	4ae7e <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   4affc:	f9bd 50e0 	ldrsh.w	r5, [sp, #224]	; 0xe0
   4b000:	3d02      	subs	r5, #2
   4b002:	b22d      	sxth	r5, r5
   4b004:	2d00      	cmp	r5, #0
   4b006:	dc62      	bgt.n	4b0ce <EccPoint_mult+0x144>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4b008:	f8d9 5000 	ldr.w	r5, [r9]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4b00c:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4b00e:	f005 0701 	and.w	r7, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4b012:	ab0e      	add	r3, sp, #56	; 0x38
   4b014:	eb03 1947 	add.w	r9, r3, r7, lsl #5
   4b018:	43ed      	mvns	r5, r5
   4b01a:	ab1e      	add	r3, sp, #120	; 0x78
   4b01c:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   4b020:	f005 0501 	and.w	r5, r5, #1
   4b024:	ab0e      	add	r3, sp, #56	; 0x38
   4b026:	eb03 1a45 	add.w	sl, r3, r5, lsl #5
   4b02a:	ab1e      	add	r3, sp, #120	; 0x78
   4b02c:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   4b030:	462b      	mov	r3, r5
   4b032:	4652      	mov	r2, sl
   4b034:	4639      	mov	r1, r7
   4b036:	4648      	mov	r0, r9

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   4b038:	f104 0b04 	add.w	fp, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4b03c:	f7ff fe08 	bl	4ac50 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   4b040:	465b      	mov	r3, fp
   4b042:	aa0e      	add	r2, sp, #56	; 0x38
   4b044:	a916      	add	r1, sp, #88	; 0x58
   4b046:	a806      	add	r0, sp, #24
   4b048:	9600      	str	r6, [sp, #0]
   4b04a:	f7ff fc6b 	bl	4a924 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   4b04e:	a906      	add	r1, sp, #24
   4b050:	4623      	mov	r3, r4
   4b052:	463a      	mov	r2, r7
   4b054:	4608      	mov	r0, r1
   4b056:	f7ff fd0f 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   4b05a:	a906      	add	r1, sp, #24
   4b05c:	9a03      	ldr	r2, [sp, #12]
   4b05e:	4623      	mov	r3, r4
   4b060:	4608      	mov	r0, r1
   4b062:	f7ff fd09 	bl	4aa78 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   4b066:	a906      	add	r1, sp, #24
   4b068:	4633      	mov	r3, r6
   4b06a:	465a      	mov	r2, fp
   4b06c:	4608      	mov	r0, r1
   4b06e:	f7ff fe7d 	bl	4ad6c <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   4b072:	a906      	add	r1, sp, #24
   4b074:	4623      	mov	r3, r4
   4b076:	4642      	mov	r2, r8
   4b078:	4608      	mov	r0, r1
   4b07a:	f7ff fcfd 	bl	4aa78 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   4b07e:	a906      	add	r1, sp, #24
   4b080:	4623      	mov	r3, r4
   4b082:	464a      	mov	r2, r9
   4b084:	4608      	mov	r0, r1
   4b086:	f7ff fcf7 	bl	4aa78 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   4b08a:	463b      	mov	r3, r7
   4b08c:	464a      	mov	r2, r9
   4b08e:	4629      	mov	r1, r5
   4b090:	4650      	mov	r0, sl
   4b092:	9400      	str	r4, [sp, #0]
   4b094:	f7ff ff12 	bl	4aebc <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   4b098:	4623      	mov	r3, r4
   4b09a:	aa06      	add	r2, sp, #24
   4b09c:	a91e      	add	r1, sp, #120	; 0x78
   4b09e:	a80e      	add	r0, sp, #56	; 0x38
   4b0a0:	f7ff feed 	bl	4ae7e <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   4b0a4:	9802      	ldr	r0, [sp, #8]
   4b0a6:	4632      	mov	r2, r6
   4b0a8:	a90e      	add	r1, sp, #56	; 0x38
   4b0aa:	f7ff fbd4 	bl	4a856 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   4b0ae:	9802      	ldr	r0, [sp, #8]
   4b0b0:	9b04      	ldr	r3, [sp, #16]
   4b0b2:	a91e      	add	r1, sp, #120	; 0x78
   4b0b4:	4418      	add	r0, r3
   4b0b6:	f7ff fbce 	bl	4a856 <uECC_vli_set>
}
   4b0ba:	b02f      	add	sp, #188	; 0xbc
   4b0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   4b0c0:	4631      	mov	r1, r6
   4b0c2:	a806      	add	r0, sp, #24
   4b0c4:	f7ff fb84 	bl	4a7d0 <uECC_vli_clear>
		z[0] = 1;
   4b0c8:	2301      	movs	r3, #1
   4b0ca:	9306      	str	r3, [sp, #24]
   4b0cc:	e77b      	b.n	4afc6 <EccPoint_mult+0x3c>
		nb = !uECC_vli_testBit(scalar, i);
   4b0ce:	4629      	mov	r1, r5
   4b0d0:	4648      	mov	r0, r9
   4b0d2:	f7ff fb97 	bl	4a804 <uECC_vli_testBit>
   4b0d6:	fab0 f780 	clz	r7, r0
   4b0da:	097f      	lsrs	r7, r7, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4b0dc:	f1c7 0b01 	rsb	fp, r7, #1
   4b0e0:	ab0e      	add	r3, sp, #56	; 0x38
   4b0e2:	eb03 104b 	add.w	r0, r3, fp, lsl #5
   4b0e6:	ab1e      	add	r3, sp, #120	; 0x78
   4b0e8:	eb03 1b4b 	add.w	fp, r3, fp, lsl #5
   4b0ec:	ab0e      	add	r3, sp, #56	; 0x38
   4b0ee:	eb03 1a47 	add.w	sl, r3, r7, lsl #5
   4b0f2:	ab1e      	add	r3, sp, #120	; 0x78
   4b0f4:	eb03 1747 	add.w	r7, r3, r7, lsl #5
   4b0f8:	463b      	mov	r3, r7
   4b0fa:	4652      	mov	r2, sl
   4b0fc:	4659      	mov	r1, fp
   4b0fe:	9400      	str	r4, [sp, #0]
   4b100:	9005      	str	r0, [sp, #20]
   4b102:	f7ff fda5 	bl	4ac50 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   4b106:	9805      	ldr	r0, [sp, #20]
   4b108:	9400      	str	r4, [sp, #0]
   4b10a:	4602      	mov	r2, r0
   4b10c:	465b      	mov	r3, fp
   4b10e:	4639      	mov	r1, r7
   4b110:	4650      	mov	r0, sl
   4b112:	f7ff fed3 	bl	4aebc <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   4b116:	3d01      	subs	r5, #1
   4b118:	e773      	b.n	4b002 <EccPoint_mult+0x78>

0004b11a <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   4b11a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   4b11e:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   4b122:	f119 081f 	adds.w	r8, r9, #31
{
   4b126:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   4b128:	bf48      	it	mi
   4b12a:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   4b12e:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   4b130:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4b134:	3524      	adds	r5, #36	; 0x24
   4b136:	4601      	mov	r1, r0
{
   4b138:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4b13a:	4643      	mov	r3, r8
   4b13c:	462a      	mov	r2, r5
   4b13e:	4630      	mov	r0, r6
   4b140:	f7ff fa9b 	bl	4a67a <uECC_vli_add>
   4b144:	4604      	mov	r4, r0
   4b146:	b990      	cbnz	r0, 4b16e <regularize_k+0x54>
   4b148:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   4b14c:	da06      	bge.n	4b15c <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   4b14e:	4649      	mov	r1, r9
   4b150:	4630      	mov	r0, r6
   4b152:	f7ff fb57 	bl	4a804 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   4b156:	1e04      	subs	r4, r0, #0
   4b158:	bf18      	it	ne
   4b15a:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   4b15c:	4643      	mov	r3, r8
   4b15e:	462a      	mov	r2, r5
   4b160:	4631      	mov	r1, r6
   4b162:	4638      	mov	r0, r7
   4b164:	f7ff fa89 	bl	4a67a <uECC_vli_add>

	return carry;
}
   4b168:	4620      	mov	r0, r4
   4b16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4b16e:	2401      	movs	r4, #1
   4b170:	e7f4      	b.n	4b15c <regularize_k+0x42>

0004b172 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   4b172:	b530      	push	{r4, r5, lr}
   4b174:	4614      	mov	r4, r2
   4b176:	b095      	sub	sp, #84	; 0x54
   4b178:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   4b17a:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   4b17c:	4623      	mov	r3, r4
{
   4b17e:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   4b180:	a904      	add	r1, sp, #16
   4b182:	9102      	str	r1, [sp, #8]
   4b184:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   4b186:	f7ff ffc8 	bl	4b11a <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   4b18a:	fab0 f380 	clz	r3, r0
   4b18e:	095b      	lsrs	r3, r3, #5
   4b190:	aa14      	add	r2, sp, #80	; 0x50
   4b192:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   4b196:	8863      	ldrh	r3, [r4, #2]
   4b198:	9401      	str	r4, [sp, #4]
   4b19a:	3301      	adds	r3, #1
   4b19c:	b21b      	sxth	r3, r3
   4b19e:	9300      	str	r3, [sp, #0]
   4b1a0:	f852 2c48 	ldr.w	r2, [r2, #-72]
   4b1a4:	2300      	movs	r3, #0
   4b1a6:	f104 0144 	add.w	r1, r4, #68	; 0x44
   4b1aa:	4628      	mov	r0, r5
   4b1ac:	f7ff feed 	bl	4af8a <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   4b1b0:	4621      	mov	r1, r4
   4b1b2:	4628      	mov	r0, r5
   4b1b4:	f7ff fe5e 	bl	4ae74 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   4b1b8:	fab0 f080 	clz	r0, r0
   4b1bc:	0940      	lsrs	r0, r0, #5
   4b1be:	b015      	add	sp, #84	; 0x54
   4b1c0:	bd30      	pop	{r4, r5, pc}

0004b1c2 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   4b1c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   4b1c4:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   4b1c6:	1e4f      	subs	r7, r1, #1
   4b1c8:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   4b1ca:	428c      	cmp	r4, r1
   4b1cc:	f105 0501 	add.w	r5, r5, #1
   4b1d0:	db00      	blt.n	4b1d4 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   4b1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   4b1d4:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   4b1d6:	f023 0603 	bic.w	r6, r3, #3
   4b1da:	f003 0303 	and.w	r3, r3, #3
   4b1de:	5996      	ldr	r6, [r2, r6]
   4b1e0:	00db      	lsls	r3, r3, #3
   4b1e2:	fa26 f303 	lsr.w	r3, r6, r3
   4b1e6:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   4b1e8:	e7ee      	b.n	4b1c8 <uECC_vli_nativeToBytes+0x6>

0004b1ea <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   4b1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4b1ec:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   4b1ee:	1cd1      	adds	r1, r2, #3
   4b1f0:	bf48      	it	mi
   4b1f2:	1d91      	addmi	r1, r2, #6
   4b1f4:	f341 0187 	sbfx	r1, r1, #2, #8
{
   4b1f8:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   4b1fa:	f7ff fae9 	bl	4a7d0 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   4b1fe:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   4b200:	1e67      	subs	r7, r4, #1
   4b202:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   4b204:	42a2      	cmp	r2, r4
   4b206:	f105 0501 	add.w	r5, r5, #1
   4b20a:	db00      	blt.n	4b20e <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   4b20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   4b20e:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   4b210:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   4b214:	5cb2      	ldrb	r2, [r6, r2]
   4b216:	f003 0303 	and.w	r3, r3, #3
   4b21a:	00db      	lsls	r3, r3, #3
   4b21c:	409a      	lsls	r2, r3
		native[b / uECC_WORD_SIZE] |=
   4b21e:	5843      	ldr	r3, [r0, r1]
   4b220:	4313      	orrs	r3, r2
   4b222:	5043      	str	r3, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   4b224:	e7ed      	b.n	4b202 <uECC_vli_bytesToNative+0x18>

0004b226 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   4b226:	b5f0      	push	{r4, r5, r6, r7, lr}
   4b228:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   4b22a:	f991 6000 	ldrsb.w	r6, [r1]
{
   4b22e:	4605      	mov	r5, r0
   4b230:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   4b232:	f7ff fe1f 	bl	4ae74 <EccPoint_isZero>
   4b236:	bb28      	cbnz	r0, 4b284 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   4b238:	1d27      	adds	r7, r4, #4
   4b23a:	4632      	mov	r2, r6
   4b23c:	4629      	mov	r1, r5
   4b23e:	4638      	mov	r0, r7
   4b240:	f7ff fb15 	bl	4a86e <uECC_vli_cmp_unsafe>
   4b244:	2801      	cmp	r0, #1
   4b246:	d120      	bne.n	4b28a <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   4b248:	4632      	mov	r2, r6
   4b24a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   4b24e:	4638      	mov	r0, r7
   4b250:	f7ff fb0d 	bl	4a86e <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   4b254:	2801      	cmp	r0, #1
   4b256:	d118      	bne.n	4b28a <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   4b258:	4622      	mov	r2, r4
   4b25a:	4668      	mov	r0, sp
   4b25c:	f7ff fc1c 	bl	4aa98 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   4b260:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   4b264:	4622      	mov	r2, r4
   4b266:	4629      	mov	r1, r5
   4b268:	a808      	add	r0, sp, #32
   4b26a:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   4b26c:	4632      	mov	r2, r6
   4b26e:	a908      	add	r1, sp, #32
   4b270:	4668      	mov	r0, sp
   4b272:	f7ff fb11 	bl	4a898 <uECC_vli_equal>
		return -3;
   4b276:	2800      	cmp	r0, #0
   4b278:	bf0c      	ite	eq
   4b27a:	2000      	moveq	r0, #0
   4b27c:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   4b280:	b011      	add	sp, #68	; 0x44
   4b282:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   4b284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4b288:	e7fa      	b.n	4b280 <uECC_valid_point+0x5a>
		return -2;
   4b28a:	f06f 0001 	mvn.w	r0, #1
   4b28e:	e7f7      	b.n	4b280 <uECC_valid_point+0x5a>

0004b290 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   4b290:	b570      	push	{r4, r5, r6, lr}
   4b292:	460c      	mov	r4, r1
   4b294:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   4b296:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   4b298:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   4b29c:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   4b29e:	4601      	mov	r1, r0
   4b2a0:	4668      	mov	r0, sp
   4b2a2:	f7ff ffa2 	bl	4b1ea <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   4b2a6:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   4b2aa:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   4b2ae:	18a9      	adds	r1, r5, r2
   4b2b0:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   4b2b4:	f7ff ff99 	bl	4b1ea <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   4b2b8:	2210      	movs	r2, #16
   4b2ba:	4631      	mov	r1, r6
   4b2bc:	4668      	mov	r0, sp
   4b2be:	f7ff fad6 	bl	4a86e <uECC_vli_cmp_unsafe>
   4b2c2:	b128      	cbz	r0, 4b2d0 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   4b2c4:	4621      	mov	r1, r4
   4b2c6:	4668      	mov	r0, sp
   4b2c8:	f7ff ffad 	bl	4b226 <uECC_valid_point>
}
   4b2cc:	b010      	add	sp, #64	; 0x40
   4b2ce:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   4b2d0:	f06f 0003 	mvn.w	r0, #3
   4b2d4:	e7fa      	b.n	4b2cc <uECC_valid_public_key+0x3c>

0004b2d6 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   4b2d6:	78cb      	ldrb	r3, [r1, #3]
   4b2d8:	7802      	ldrb	r2, [r0, #0]
   4b2da:	4053      	eors	r3, r2
   4b2dc:	7003      	strb	r3, [r0, #0]
   4b2de:	884b      	ldrh	r3, [r1, #2]
   4b2e0:	7842      	ldrb	r2, [r0, #1]
   4b2e2:	4053      	eors	r3, r2
   4b2e4:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   4b2e6:	680a      	ldr	r2, [r1, #0]
   4b2e8:	7883      	ldrb	r3, [r0, #2]
   4b2ea:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4b2ee:	7083      	strb	r3, [r0, #2]
   4b2f0:	680a      	ldr	r2, [r1, #0]
   4b2f2:	78c3      	ldrb	r3, [r0, #3]
   4b2f4:	4053      	eors	r3, r2
   4b2f6:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   4b2f8:	79cb      	ldrb	r3, [r1, #7]
   4b2fa:	7902      	ldrb	r2, [r0, #4]
   4b2fc:	4053      	eors	r3, r2
   4b2fe:	7103      	strb	r3, [r0, #4]
   4b300:	88cb      	ldrh	r3, [r1, #6]
   4b302:	7942      	ldrb	r2, [r0, #5]
   4b304:	4053      	eors	r3, r2
   4b306:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   4b308:	684a      	ldr	r2, [r1, #4]
   4b30a:	7983      	ldrb	r3, [r0, #6]
   4b30c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4b310:	7183      	strb	r3, [r0, #6]
   4b312:	684a      	ldr	r2, [r1, #4]
   4b314:	79c3      	ldrb	r3, [r0, #7]
   4b316:	4053      	eors	r3, r2
   4b318:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   4b31a:	7acb      	ldrb	r3, [r1, #11]
   4b31c:	7a02      	ldrb	r2, [r0, #8]
   4b31e:	4053      	eors	r3, r2
   4b320:	7203      	strb	r3, [r0, #8]
   4b322:	7a42      	ldrb	r2, [r0, #9]
   4b324:	894b      	ldrh	r3, [r1, #10]
   4b326:	4053      	eors	r3, r2
   4b328:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   4b32a:	688a      	ldr	r2, [r1, #8]
   4b32c:	7a83      	ldrb	r3, [r0, #10]
   4b32e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4b332:	7283      	strb	r3, [r0, #10]
   4b334:	688a      	ldr	r2, [r1, #8]
   4b336:	7ac3      	ldrb	r3, [r0, #11]
   4b338:	4053      	eors	r3, r2
   4b33a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   4b33c:	7bcb      	ldrb	r3, [r1, #15]
   4b33e:	7b02      	ldrb	r2, [r0, #12]
   4b340:	4053      	eors	r3, r2
   4b342:	7303      	strb	r3, [r0, #12]
   4b344:	89cb      	ldrh	r3, [r1, #14]
   4b346:	7b42      	ldrb	r2, [r0, #13]
   4b348:	4053      	eors	r3, r2
   4b34a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   4b34c:	68ca      	ldr	r2, [r1, #12]
   4b34e:	7b83      	ldrb	r3, [r0, #14]
   4b350:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4b354:	7383      	strb	r3, [r0, #14]
   4b356:	68ca      	ldr	r2, [r1, #12]
   4b358:	7bc3      	ldrb	r3, [r0, #15]
   4b35a:	4053      	eors	r3, r2
   4b35c:	73c3      	strb	r3, [r0, #15]
}
   4b35e:	4770      	bx	lr

0004b360 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   4b360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   4b362:	7802      	ldrb	r2, [r0, #0]
   4b364:	f88d 2000 	strb.w	r2, [sp]
   4b368:	7942      	ldrb	r2, [r0, #5]
   4b36a:	f88d 2001 	strb.w	r2, [sp, #1]
   4b36e:	7a82      	ldrb	r2, [r0, #10]
   4b370:	f88d 2002 	strb.w	r2, [sp, #2]
   4b374:	7bc2      	ldrb	r2, [r0, #15]
   4b376:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   4b37a:	7902      	ldrb	r2, [r0, #4]
   4b37c:	f88d 2004 	strb.w	r2, [sp, #4]
   4b380:	7a42      	ldrb	r2, [r0, #9]
   4b382:	f88d 2005 	strb.w	r2, [sp, #5]
   4b386:	7b82      	ldrb	r2, [r0, #14]
   4b388:	f88d 2006 	strb.w	r2, [sp, #6]
   4b38c:	78c2      	ldrb	r2, [r0, #3]
   4b38e:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   4b392:	7a02      	ldrb	r2, [r0, #8]
   4b394:	f88d 2008 	strb.w	r2, [sp, #8]
   4b398:	7b42      	ldrb	r2, [r0, #13]
   4b39a:	f88d 2009 	strb.w	r2, [sp, #9]
   4b39e:	7882      	ldrb	r2, [r0, #2]
   4b3a0:	f88d 200a 	strb.w	r2, [sp, #10]
   4b3a4:	79c2      	ldrb	r2, [r0, #7]
   4b3a6:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   4b3aa:	7b02      	ldrb	r2, [r0, #12]
   4b3ac:	f88d 200c 	strb.w	r2, [sp, #12]
   4b3b0:	7842      	ldrb	r2, [r0, #1]
   4b3b2:	7ac3      	ldrb	r3, [r0, #11]
   4b3b4:	f88d 200d 	strb.w	r2, [sp, #13]
   4b3b8:	7982      	ldrb	r2, [r0, #6]
   4b3ba:	f88d 200e 	strb.w	r2, [sp, #14]
   4b3be:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   4b3c2:	2310      	movs	r3, #16
   4b3c4:	466a      	mov	r2, sp
   4b3c6:	4619      	mov	r1, r3
   4b3c8:	f7ff f893 	bl	4a4f2 <_copy>
}
   4b3cc:	b005      	add	sp, #20
   4b3ce:	f85d fb04 	ldr.w	pc, [sp], #4

0004b3d2 <mult_row_column>:
{
   4b3d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4b3d4:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   4b3d6:	7808      	ldrb	r0, [r1, #0]
{
   4b3d8:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   4b3da:	f7ff f899 	bl	4a510 <_double_byte>
   4b3de:	4605      	mov	r5, r0
   4b3e0:	7860      	ldrb	r0, [r4, #1]
   4b3e2:	f7ff f895 	bl	4a510 <_double_byte>
   4b3e6:	78a2      	ldrb	r2, [r4, #2]
   4b3e8:	7863      	ldrb	r3, [r4, #1]
   4b3ea:	4053      	eors	r3, r2
   4b3ec:	78e2      	ldrb	r2, [r4, #3]
   4b3ee:	4053      	eors	r3, r2
   4b3f0:	405d      	eors	r5, r3
   4b3f2:	4068      	eors	r0, r5
   4b3f4:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   4b3f6:	7860      	ldrb	r0, [r4, #1]
   4b3f8:	7827      	ldrb	r7, [r4, #0]
   4b3fa:	f7ff f889 	bl	4a510 <_double_byte>
   4b3fe:	4605      	mov	r5, r0
   4b400:	78a0      	ldrb	r0, [r4, #2]
   4b402:	f7ff f885 	bl	4a510 <_double_byte>
   4b406:	78a3      	ldrb	r3, [r4, #2]
   4b408:	405f      	eors	r7, r3
   4b40a:	78e3      	ldrb	r3, [r4, #3]
   4b40c:	405f      	eors	r7, r3
   4b40e:	407d      	eors	r5, r7
   4b410:	4068      	eors	r0, r5
   4b412:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   4b414:	7863      	ldrb	r3, [r4, #1]
   4b416:	7827      	ldrb	r7, [r4, #0]
   4b418:	78a0      	ldrb	r0, [r4, #2]
   4b41a:	405f      	eors	r7, r3
   4b41c:	f7ff f878 	bl	4a510 <_double_byte>
   4b420:	4605      	mov	r5, r0
   4b422:	78e0      	ldrb	r0, [r4, #3]
   4b424:	f7ff f874 	bl	4a510 <_double_byte>
   4b428:	78e3      	ldrb	r3, [r4, #3]
   4b42a:	405f      	eors	r7, r3
   4b42c:	407d      	eors	r5, r7
   4b42e:	4068      	eors	r0, r5
   4b430:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   4b432:	7820      	ldrb	r0, [r4, #0]
   4b434:	f7ff f86c 	bl	4a510 <_double_byte>
   4b438:	7862      	ldrb	r2, [r4, #1]
   4b43a:	7823      	ldrb	r3, [r4, #0]
   4b43c:	4053      	eors	r3, r2
   4b43e:	78a2      	ldrb	r2, [r4, #2]
   4b440:	4053      	eors	r3, r2
   4b442:	ea80 0503 	eor.w	r5, r0, r3
   4b446:	78e0      	ldrb	r0, [r4, #3]
   4b448:	f7ff f862 	bl	4a510 <_double_byte>
   4b44c:	b2ed      	uxtb	r5, r5
   4b44e:	4045      	eors	r5, r0
   4b450:	70f5      	strb	r5, [r6, #3]
}
   4b452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004b454 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   4b454:	b570      	push	{r4, r5, r6, lr}
   4b456:	4614      	mov	r4, r2
   4b458:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   4b45a:	4605      	mov	r5, r0
   4b45c:	2800      	cmp	r0, #0
   4b45e:	d049      	beq.n	4b4f4 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   4b460:	2900      	cmp	r1, #0
   4b462:	d049      	beq.n	4b4f8 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   4b464:	2a00      	cmp	r2, #0
   4b466:	d049      	beq.n	4b4fc <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   4b468:	2310      	movs	r3, #16
   4b46a:	460a      	mov	r2, r1
   4b46c:	4668      	mov	r0, sp
   4b46e:	4619      	mov	r1, r3
   4b470:	f7ff f83f 	bl	4a4f2 <_copy>
	add_round_key(state, s->words);
   4b474:	4621      	mov	r1, r4
   4b476:	4668      	mov	r0, sp
   4b478:	f7ff ff2d 	bl	4b2d6 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   4b47c:	3410      	adds	r4, #16
   4b47e:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   4b482:	4668      	mov	r0, sp
   4b484:	f7e1 f886 	bl	2c594 <sub_bytes>
		shift_rows(state);
   4b488:	4668      	mov	r0, sp
   4b48a:	f7ff ff69 	bl	4b360 <shift_rows>
	mult_row_column(t, s);
   4b48e:	4669      	mov	r1, sp
   4b490:	a804      	add	r0, sp, #16
   4b492:	f7ff ff9e 	bl	4b3d2 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   4b496:	a901      	add	r1, sp, #4
   4b498:	a805      	add	r0, sp, #20
   4b49a:	f7ff ff9a 	bl	4b3d2 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   4b49e:	a902      	add	r1, sp, #8
   4b4a0:	a806      	add	r0, sp, #24
   4b4a2:	f7ff ff96 	bl	4b3d2 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   4b4a6:	a903      	add	r1, sp, #12
   4b4a8:	a807      	add	r0, sp, #28
   4b4aa:	f7ff ff92 	bl	4b3d2 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   4b4ae:	2310      	movs	r3, #16
   4b4b0:	4619      	mov	r1, r3
   4b4b2:	eb0d 0203 	add.w	r2, sp, r3
   4b4b6:	4668      	mov	r0, sp
   4b4b8:	f7ff f81b 	bl	4a4f2 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   4b4bc:	4621      	mov	r1, r4
   4b4be:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   4b4c0:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   4b4c2:	f7ff ff08 	bl	4b2d6 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   4b4c6:	42a6      	cmp	r6, r4
   4b4c8:	d1db      	bne.n	4b482 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   4b4ca:	f7e1 f863 	bl	2c594 <sub_bytes>
	shift_rows(state);
   4b4ce:	4668      	mov	r0, sp
   4b4d0:	f7ff ff46 	bl	4b360 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   4b4d4:	4631      	mov	r1, r6
   4b4d6:	4668      	mov	r0, sp
   4b4d8:	f7ff fefd 	bl	4b2d6 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   4b4dc:	2310      	movs	r3, #16
   4b4de:	4619      	mov	r1, r3
   4b4e0:	466a      	mov	r2, sp
   4b4e2:	4628      	mov	r0, r5
   4b4e4:	f7ff f805 	bl	4a4f2 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   4b4e8:	4668      	mov	r0, sp
   4b4ea:	2210      	movs	r2, #16
   4b4ec:	2100      	movs	r1, #0
   4b4ee:	f7ff f80d 	bl	4a50c <_set>

	return TC_CRYPTO_SUCCESS;
   4b4f2:	2001      	movs	r0, #1
}
   4b4f4:	b008      	add	sp, #32
   4b4f6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   4b4f8:	4608      	mov	r0, r1
   4b4fa:	e7fb      	b.n	4b4f4 <tc_aes_encrypt+0xa0>
   4b4fc:	4610      	mov	r0, r2
   4b4fe:	e7f9      	b.n	4b4f4 <tc_aes_encrypt+0xa0>

0004b500 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   4b500:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   4b502:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   4b504:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   4b506:	f912 3b10 	ldrsb.w	r3, [r2], #16
   4b50a:	2b00      	cmp	r3, #0
   4b50c:	bfb4      	ite	lt
   4b50e:	2387      	movlt	r3, #135	; 0x87
   4b510:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   4b512:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   4b516:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   4b51a:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   4b51c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   4b520:	d002      	beq.n	4b528 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   4b522:	7813      	ldrb	r3, [r2, #0]
   4b524:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   4b526:	e7f4      	b.n	4b512 <gf_double+0x12>
	}
}
   4b528:	bd10      	pop	{r4, pc}

0004b52a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   4b52a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   4b52c:	b120      	cbz	r0, 4b538 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   4b52e:	2258      	movs	r2, #88	; 0x58
   4b530:	2100      	movs	r1, #0
   4b532:	f7fe ffeb 	bl	4a50c <_set>
   4b536:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   4b538:	bd08      	pop	{r3, pc}

0004b53a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   4b53a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   4b53c:	4604      	mov	r4, r0
   4b53e:	b188      	cbz	r0, 4b564 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   4b540:	2210      	movs	r2, #16
   4b542:	2100      	movs	r1, #0
   4b544:	f7fe ffe2 	bl	4a50c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   4b548:	2210      	movs	r2, #16
   4b54a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   4b54e:	2100      	movs	r1, #0
   4b550:	f7fe ffdc 	bl	4a50c <_set>
	s->leftover_offset = 0;
   4b554:	2300      	movs	r3, #0
   4b556:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   4b558:	2200      	movs	r2, #0
   4b55a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   4b55e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   4b562:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   4b564:	bd10      	pop	{r4, pc}

0004b566 <tc_cmac_setup>:
{
   4b566:	b570      	push	{r4, r5, r6, lr}
   4b568:	4604      	mov	r4, r0
   4b56a:	460d      	mov	r5, r1
   4b56c:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   4b56e:	b310      	cbz	r0, 4b5b6 <tc_cmac_setup+0x50>
   4b570:	b311      	cbz	r1, 4b5b8 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   4b572:	2258      	movs	r2, #88	; 0x58
   4b574:	2100      	movs	r1, #0
   4b576:	f7fe ffc9 	bl	4a50c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   4b57a:	4629      	mov	r1, r5
	s->sched = sched;
   4b57c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   4b57e:	4630      	mov	r0, r6
   4b580:	f7e1 f814 	bl	2c5ac <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   4b584:	2210      	movs	r2, #16
   4b586:	2100      	movs	r1, #0
   4b588:	4620      	mov	r0, r4
   4b58a:	f7fe ffbf 	bl	4a50c <_set>
	gf_double (s->K1, s->iv);
   4b58e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   4b592:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4b594:	4621      	mov	r1, r4
   4b596:	4620      	mov	r0, r4
   4b598:	f7ff ff5c 	bl	4b454 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   4b59c:	4621      	mov	r1, r4
   4b59e:	4628      	mov	r0, r5
   4b5a0:	f7ff ffae 	bl	4b500 <gf_double>
	gf_double (s->K2, s->K1);
   4b5a4:	4629      	mov	r1, r5
   4b5a6:	f104 0020 	add.w	r0, r4, #32
   4b5aa:	f7ff ffa9 	bl	4b500 <gf_double>
	tc_cmac_init(s);
   4b5ae:	4620      	mov	r0, r4
   4b5b0:	f7ff ffc3 	bl	4b53a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   4b5b4:	2001      	movs	r0, #1
}
   4b5b6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   4b5b8:	4608      	mov	r0, r1
   4b5ba:	e7fc      	b.n	4b5b6 <tc_cmac_setup+0x50>

0004b5bc <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   4b5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4b5c0:	460d      	mov	r5, r1
   4b5c2:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   4b5c4:	4604      	mov	r4, r0
   4b5c6:	2800      	cmp	r0, #0
   4b5c8:	d061      	beq.n	4b68e <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   4b5ca:	b912      	cbnz	r2, 4b5d2 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   4b5cc:	2001      	movs	r0, #1
}
   4b5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   4b5d2:	2900      	cmp	r1, #0
   4b5d4:	d05b      	beq.n	4b68e <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   4b5d6:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   4b5da:	ea53 0102 	orrs.w	r1, r3, r2
   4b5de:	d056      	beq.n	4b68e <tc_cmac_update+0xd2>
	s->countdown--;
   4b5e0:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   4b5e2:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   4b5e6:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   4b5ea:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   4b5ee:	f1b8 0f00 	cmp.w	r8, #0
   4b5f2:	d02a      	beq.n	4b64a <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   4b5f4:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4b5f8:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   4b5fc:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4b5fe:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   4b600:	d208      	bcs.n	4b614 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4b602:	4633      	mov	r3, r6
   4b604:	462a      	mov	r2, r5
   4b606:	4631      	mov	r1, r6
   4b608:	f7fe ff73 	bl	4a4f2 <_copy>
			s->leftover_offset += data_length;
   4b60c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   4b60e:	4433      	add	r3, r6
   4b610:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   4b612:	e7db      	b.n	4b5cc <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   4b614:	463b      	mov	r3, r7
   4b616:	462a      	mov	r2, r5
   4b618:	4639      	mov	r1, r7
   4b61a:	f7fe ff6a 	bl	4a4f2 <_copy>
		data_length -= remaining_space;
   4b61e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   4b620:	2300      	movs	r3, #0
   4b622:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   4b624:	4446      	add	r6, r8
		data += remaining_space;
   4b626:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4b628:	1e63      	subs	r3, r4, #1
   4b62a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   4b62e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4b632:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4b636:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   4b638:	ea82 0200 	eor.w	r2, r2, r0
   4b63c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4b63e:	d1f6      	bne.n	4b62e <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   4b640:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4b642:	4621      	mov	r1, r4
   4b644:	4620      	mov	r0, r4
   4b646:	f7ff ff05 	bl	4b454 <tc_aes_encrypt>
   4b64a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   4b64e:	2e10      	cmp	r6, #16
   4b650:	d80a      	bhi.n	4b668 <tc_cmac_update+0xac>
	if (data_length > 0) {
   4b652:	2e00      	cmp	r6, #0
   4b654:	d0ba      	beq.n	4b5cc <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   4b656:	4633      	mov	r3, r6
   4b658:	462a      	mov	r2, r5
   4b65a:	4631      	mov	r1, r6
   4b65c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   4b660:	f7fe ff47 	bl	4a4f2 <_copy>
		s->leftover_offset = data_length;
   4b664:	6466      	str	r6, [r4, #68]	; 0x44
   4b666:	e7b1      	b.n	4b5cc <tc_cmac_update+0x10>
   4b668:	1e63      	subs	r3, r4, #1
   4b66a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   4b66c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4b670:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4b674:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   4b676:	ea82 0200 	eor.w	r2, r2, r0
   4b67a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4b67c:	d1f6      	bne.n	4b66c <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   4b67e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4b680:	4621      	mov	r1, r4
   4b682:	4620      	mov	r0, r4
   4b684:	f7ff fee6 	bl	4b454 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   4b688:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   4b68a:	3e10      	subs	r6, #16
   4b68c:	e7df      	b.n	4b64e <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   4b68e:	2000      	movs	r0, #0
   4b690:	e79d      	b.n	4b5ce <tc_cmac_update+0x12>

0004b692 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   4b692:	b570      	push	{r4, r5, r6, lr}
   4b694:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   4b696:	4605      	mov	r5, r0
   4b698:	b1e8      	cbz	r0, 4b6d6 <tc_cmac_final+0x44>
   4b69a:	b369      	cbz	r1, 4b6f8 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   4b69c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   4b69e:	2a10      	cmp	r2, #16
   4b6a0:	d11a      	bne.n	4b6d8 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   4b6a2:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4b6a4:	1e63      	subs	r3, r4, #1
   4b6a6:	3901      	subs	r1, #1
   4b6a8:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   4b6ac:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4b6b0:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   4b6b4:	4072      	eors	r2, r6
   4b6b6:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4b6ba:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   4b6bc:	ea82 0206 	eor.w	r2, r2, r6
   4b6c0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4b6c2:	d1f3      	bne.n	4b6ac <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   4b6c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4b6c6:	4621      	mov	r1, r4
   4b6c8:	4628      	mov	r0, r5
   4b6ca:	f7ff fec3 	bl	4b454 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   4b6ce:	4620      	mov	r0, r4
   4b6d0:	f7ff ff2b 	bl	4b52a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   4b6d4:	2001      	movs	r0, #1
}
   4b6d6:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   4b6d8:	f102 0030 	add.w	r0, r2, #48	; 0x30
   4b6dc:	2100      	movs	r1, #0
   4b6de:	f1c2 0210 	rsb	r2, r2, #16
   4b6e2:	4420      	add	r0, r4
   4b6e4:	f7fe ff12 	bl	4a50c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   4b6e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   4b6ea:	4423      	add	r3, r4
   4b6ec:	2280      	movs	r2, #128	; 0x80
   4b6ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   4b6f2:	f104 0120 	add.w	r1, r4, #32
   4b6f6:	e7d5      	b.n	4b6a4 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   4b6f8:	4608      	mov	r0, r1
   4b6fa:	e7ec      	b.n	4b6d6 <tc_cmac_final+0x44>

0004b6fc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   4b6fc:	f004 be59 	b.w	503b2 <z_fatal_error>

0004b700 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   4b700:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   4b702:	6800      	ldr	r0, [r0, #0]
   4b704:	f004 be55 	b.w	503b2 <z_fatal_error>

0004b708 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   4b708:	2100      	movs	r1, #0
   4b70a:	2001      	movs	r0, #1
   4b70c:	f7ff bff6 	b.w	4b6fc <z_arm_fatal_error>

0004b710 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   4b710:	b508      	push	{r3, lr}
	handler();
   4b712:	f7e1 f811 	bl	2c738 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   4b716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   4b71a:	f7e1 b8d1 	b.w	2c8c0 <z_arm_exc_exit>

0004b71e <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   4b71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4b722:	4607      	mov	r7, r0
   4b724:	4688      	mov	r8, r1
	register const char *s = nptr;
   4b726:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   4b728:	4621      	mov	r1, r4
   4b72a:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
}

static inline int isspace(int c)
{
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   4b72e:	2b20      	cmp	r3, #32
   4b730:	d0fa      	beq.n	4b728 <strtoul+0xa>
   4b732:	f1a3 0009 	sub.w	r0, r3, #9
   4b736:	2804      	cmp	r0, #4
   4b738:	d9f6      	bls.n	4b728 <strtoul+0xa>
	} while (isspace(c));
	if (c == '-') {
   4b73a:	2b2d      	cmp	r3, #45	; 0x2d
   4b73c:	d12f      	bne.n	4b79e <strtoul+0x80>
		neg = 1;
		c = *s++;
   4b73e:	784b      	ldrb	r3, [r1, #1]
   4b740:	1c8c      	adds	r4, r1, #2
		neg = 1;
   4b742:	f04f 0c01 	mov.w	ip, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   4b746:	2a00      	cmp	r2, #0
   4b748:	d05d      	beq.n	4b806 <strtoul+0xe8>
   4b74a:	2a10      	cmp	r2, #16
   4b74c:	d109      	bne.n	4b762 <strtoul+0x44>
   4b74e:	2b30      	cmp	r3, #48	; 0x30
   4b750:	d107      	bne.n	4b762 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   4b752:	7823      	ldrb	r3, [r4, #0]
   4b754:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   4b758:	2b58      	cmp	r3, #88	; 0x58
   4b75a:	d14f      	bne.n	4b7fc <strtoul+0xde>
		c = s[1];
   4b75c:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   4b75e:	2210      	movs	r2, #16
		s += 2;
   4b760:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   4b762:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   4b766:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   4b768:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   4b76c:	fb02 fe01 	mul.w	lr, r2, r1
   4b770:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   4b774:	4628      	mov	r0, r5
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   4b776:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit(c)) {
   4b77a:	2e09      	cmp	r6, #9
   4b77c:	d816      	bhi.n	4b7ac <strtoul+0x8e>
			c -= '0';
   4b77e:	4633      	mov	r3, r6
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   4b780:	429a      	cmp	r2, r3
   4b782:	dd23      	ble.n	4b7cc <strtoul+0xae>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   4b784:	1c6e      	adds	r6, r5, #1
   4b786:	d007      	beq.n	4b798 <strtoul+0x7a>
   4b788:	4288      	cmp	r0, r1
   4b78a:	d81c      	bhi.n	4b7c6 <strtoul+0xa8>
   4b78c:	d101      	bne.n	4b792 <strtoul+0x74>
   4b78e:	4573      	cmp	r3, lr
   4b790:	dc19      	bgt.n	4b7c6 <strtoul+0xa8>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   4b792:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   4b796:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   4b798:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   4b79c:	e7eb      	b.n	4b776 <strtoul+0x58>
	} else if (c == '+') {
   4b79e:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   4b7a0:	bf04      	itt	eq
   4b7a2:	784b      	ldrbeq	r3, [r1, #1]
   4b7a4:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   4b7a6:	f04f 0c00 	mov.w	ip, #0
   4b7aa:	e7cc      	b.n	4b746 <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   4b7ac:	f043 0620 	orr.w	r6, r3, #32
   4b7b0:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha(c)) {
   4b7b2:	2e19      	cmp	r6, #25
   4b7b4:	d80a      	bhi.n	4b7cc <strtoul+0xae>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   4b7b6:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   4b7ba:	2e1a      	cmp	r6, #26
   4b7bc:	bf34      	ite	cc
   4b7be:	2637      	movcc	r6, #55	; 0x37
   4b7c0:	2657      	movcs	r6, #87	; 0x57
   4b7c2:	1b9b      	subs	r3, r3, r6
   4b7c4:	e7dc      	b.n	4b780 <strtoul+0x62>
			any = -1;
   4b7c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   4b7ca:	e7e5      	b.n	4b798 <strtoul+0x7a>
		}
	}
	if (any < 0) {
   4b7cc:	1c6b      	adds	r3, r5, #1
   4b7ce:	d109      	bne.n	4b7e4 <strtoul+0xc6>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   4b7d0:	f7fb fe76 	bl	474c0 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   4b7d4:	2322      	movs	r3, #34	; 0x22
   4b7d6:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   4b7d8:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   4b7da:	f1b8 0f00 	cmp.w	r8, #0
   4b7de:	d109      	bne.n	4b7f4 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   4b7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   4b7e4:	f1bc 0f00 	cmp.w	ip, #0
   4b7e8:	d000      	beq.n	4b7ec <strtoul+0xce>
		acc = -acc;
   4b7ea:	4240      	negs	r0, r0
	if (endptr != NULL) {
   4b7ec:	f1b8 0f00 	cmp.w	r8, #0
   4b7f0:	d0f6      	beq.n	4b7e0 <strtoul+0xc2>
		*endptr = (char *)(any ? s - 1 : nptr);
   4b7f2:	b105      	cbz	r5, 4b7f6 <strtoul+0xd8>
   4b7f4:	1e67      	subs	r7, r4, #1
   4b7f6:	f8c8 7000 	str.w	r7, [r8]
	return acc;
   4b7fa:	e7f1      	b.n	4b7e0 <strtoul+0xc2>
	if (base == 0) {
   4b7fc:	2330      	movs	r3, #48	; 0x30
   4b7fe:	2a00      	cmp	r2, #0
   4b800:	d1af      	bne.n	4b762 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   4b802:	2208      	movs	r2, #8
   4b804:	e7ad      	b.n	4b762 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   4b806:	2b30      	cmp	r3, #48	; 0x30
   4b808:	d0a3      	beq.n	4b752 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   4b80a:	220a      	movs	r2, #10
   4b80c:	e7a9      	b.n	4b762 <strtoul+0x44>

0004b80e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   4b80e:	3901      	subs	r1, #1
   4b810:	4603      	mov	r3, r0
   4b812:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   4b816:	b90a      	cbnz	r2, 4b81c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   4b818:	701a      	strb	r2, [r3, #0]

	return dest;
}
   4b81a:	4770      	bx	lr
		*d = *s;
   4b81c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   4b820:	e7f7      	b.n	4b812 <strcpy+0x4>

0004b822 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   4b822:	4603      	mov	r3, r0
	size_t n = 0;
   4b824:	2000      	movs	r0, #0

	while (*s != '\0') {
   4b826:	5c1a      	ldrb	r2, [r3, r0]
   4b828:	b902      	cbnz	r2, 4b82c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   4b82a:	4770      	bx	lr
		n++;
   4b82c:	3001      	adds	r0, #1
   4b82e:	e7fa      	b.n	4b826 <strlen+0x4>

0004b830 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   4b830:	1e43      	subs	r3, r0, #1
   4b832:	3901      	subs	r1, #1
   4b834:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4b838:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   4b83c:	4282      	cmp	r2, r0
   4b83e:	d101      	bne.n	4b844 <strcmp+0x14>
   4b840:	2a00      	cmp	r2, #0
   4b842:	d1f7      	bne.n	4b834 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   4b844:	1a10      	subs	r0, r2, r0
   4b846:	4770      	bx	lr

0004b848 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   4b848:	b510      	push	{r4, lr}
   4b84a:	3901      	subs	r1, #1
   4b84c:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   4b84e:	4282      	cmp	r2, r0
   4b850:	d009      	beq.n	4b866 <strncmp+0x1e>
   4b852:	7803      	ldrb	r3, [r0, #0]
   4b854:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   4b858:	42a3      	cmp	r3, r4
   4b85a:	d100      	bne.n	4b85e <strncmp+0x16>
   4b85c:	b90b      	cbnz	r3, 4b862 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   4b85e:	1b18      	subs	r0, r3, r4
   4b860:	e002      	b.n	4b868 <strncmp+0x20>
		s1++;
   4b862:	3001      	adds	r0, #1
		n--;
   4b864:	e7f3      	b.n	4b84e <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   4b866:	2000      	movs	r0, #0
}
   4b868:	bd10      	pop	{r4, pc}

0004b86a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   4b86a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   4b86c:	b15a      	cbz	r2, 4b886 <memcmp+0x1c>
   4b86e:	3901      	subs	r1, #1
   4b870:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   4b872:	f810 2b01 	ldrb.w	r2, [r0], #1
   4b876:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   4b87a:	42a0      	cmp	r0, r4
   4b87c:	d001      	beq.n	4b882 <memcmp+0x18>
   4b87e:	429a      	cmp	r2, r3
   4b880:	d0f7      	beq.n	4b872 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   4b882:	1ad0      	subs	r0, r2, r3
}
   4b884:	bd10      	pop	{r4, pc}
		return 0;
   4b886:	4610      	mov	r0, r2
   4b888:	e7fc      	b.n	4b884 <memcmp+0x1a>

0004b88a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   4b88a:	b510      	push	{r4, lr}
   4b88c:	1e43      	subs	r3, r0, #1
   4b88e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   4b890:	4291      	cmp	r1, r2
   4b892:	d100      	bne.n	4b896 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   4b894:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   4b896:	f811 4b01 	ldrb.w	r4, [r1], #1
   4b89a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   4b89e:	e7f7      	b.n	4b890 <memcpy+0x6>

0004b8a0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   4b8a0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   4b8a2:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   4b8a4:	4603      	mov	r3, r0
	while (n > 0) {
   4b8a6:	4293      	cmp	r3, r2
   4b8a8:	d100      	bne.n	4b8ac <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   4b8aa:	4770      	bx	lr
		*(d_byte++) = c_byte;
   4b8ac:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   4b8b0:	e7f9      	b.n	4b8a6 <memset+0x6>

0004b8b2 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   4b8b2:	684b      	ldr	r3, [r1, #4]
   4b8b4:	2b01      	cmp	r3, #1
   4b8b6:	dd07      	ble.n	4b8c8 <sprintf_out+0x16>
		*(p->ptr) = c;
   4b8b8:	680b      	ldr	r3, [r1, #0]
   4b8ba:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   4b8bc:	680b      	ldr	r3, [r1, #0]
   4b8be:	3301      	adds	r3, #1
   4b8c0:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   4b8c2:	684b      	ldr	r3, [r1, #4]
   4b8c4:	3b01      	subs	r3, #1
   4b8c6:	604b      	str	r3, [r1, #4]
}
   4b8c8:	2000      	movs	r0, #0
   4b8ca:	4770      	bx	lr

0004b8cc <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   4b8cc:	b084      	sub	sp, #16
   4b8ce:	ab04      	add	r3, sp, #16
   4b8d0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   4b8d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   4b8d8:	2b06      	cmp	r3, #6
   4b8da:	d108      	bne.n	4b8ee <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   4b8dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4b8e0:	2201      	movs	r2, #1
   4b8e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   4b8e6:	f3bf 8f4f 	dsb	sy
        __WFE();
   4b8ea:	bf20      	wfe
    while (true)
   4b8ec:	e7fd      	b.n	4b8ea <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   4b8ee:	b004      	add	sp, #16
   4b8f0:	4770      	bx	lr

0004b8f2 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   4b8f2:	b084      	sub	sp, #16
   4b8f4:	ab04      	add	r3, sp, #16
   4b8f6:	e903 0007 	stmdb	r3, {r0, r1, r2}
   4b8fa:	2300      	movs	r3, #0
   4b8fc:	f383 8811 	msr	BASEPRI, r3
   4b900:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   4b904:	b004      	add	sp, #16
   4b906:	4770      	bx	lr

0004b908 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   4b908:	b530      	push	{r4, r5, lr}
   4b90a:	b085      	sub	sp, #20
   4b90c:	4604      	mov	r4, r0
   4b90e:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   4b910:	4668      	mov	r0, sp
   4b912:	2203      	movs	r2, #3
   4b914:	f7ff ffb9 	bl	4b88a <memcpy>
	(void)memset(res + 3, 0, 13);
   4b918:	220d      	movs	r2, #13
   4b91a:	2100      	movs	r1, #0
   4b91c:	f10d 0003 	add.w	r0, sp, #3
   4b920:	f7ff ffbe 	bl	4b8a0 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   4b924:	4620      	mov	r0, r4
   4b926:	466a      	mov	r2, sp
   4b928:	4669      	mov	r1, sp
   4b92a:	f7eb f8cd 	bl	36ac8 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   4b92e:	4604      	mov	r4, r0
   4b930:	b920      	cbnz	r0, 4b93c <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   4b932:	2203      	movs	r2, #3
   4b934:	4669      	mov	r1, sp
   4b936:	4628      	mov	r0, r5
   4b938:	f7ff ffa7 	bl	4b88a <memcpy>

	return 0;
}
   4b93c:	4620      	mov	r0, r4
   4b93e:	b005      	add	sp, #20
   4b940:	bd30      	pop	{r4, r5, pc}

0004b942 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   4b942:	b513      	push	{r0, r1, r4, lr}
   4b944:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   4b946:	aa01      	add	r2, sp, #4
   4b948:	3103      	adds	r1, #3
   4b94a:	f7ff ffdd 	bl	4b908 <ah>
	if (err) {
   4b94e:	b948      	cbnz	r0, 4b964 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   4b950:	2203      	movs	r2, #3
   4b952:	a901      	add	r1, sp, #4
   4b954:	4620      	mov	r0, r4
   4b956:	f7ff ff88 	bl	4b86a <memcmp>
   4b95a:	fab0 f080 	clz	r0, r0
   4b95e:	0940      	lsrs	r0, r0, #5
}
   4b960:	b002      	add	sp, #8
   4b962:	bd10      	pop	{r4, pc}
		return false;
   4b964:	2000      	movs	r0, #0
   4b966:	e7fb      	b.n	4b960 <bt_rpa_irk_matches+0x1e>

0004b968 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   4b968:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   4b96a:	1cce      	adds	r6, r1, #3
{
   4b96c:	4605      	mov	r5, r0
   4b96e:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   4b970:	4630      	mov	r0, r6
   4b972:	2103      	movs	r1, #3
   4b974:	f7eb f8a6 	bl	36ac4 <bt_rand>
	if (err) {
   4b978:	b960      	cbnz	r0, 4b994 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   4b97a:	7963      	ldrb	r3, [r4, #5]
   4b97c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4b980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   4b984:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   4b986:	4622      	mov	r2, r4
   4b988:	4631      	mov	r1, r6
   4b98a:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   4b98c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   4b990:	f7ff bfba 	b.w	4b908 <ah>
}
   4b994:	bd70      	pop	{r4, r5, r6, pc}

0004b996 <send_cmd_status>:
{
   4b996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   4b99a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   4b99e:	4606      	mov	r6, r0
   4b9a0:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   4b9a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4b9a6:	2100      	movs	r1, #0
   4b9a8:	200f      	movs	r0, #15
   4b9aa:	f7e1 fcc7 	bl	2d33c <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   4b9ae:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   4b9b0:	f100 0808 	add.w	r8, r0, #8
   4b9b4:	4604      	mov	r4, r0
   4b9b6:	7507      	strb	r7, [r0, #20]
   4b9b8:	2102      	movs	r1, #2
   4b9ba:	4640      	mov	r0, r8
   4b9bc:	f003 ff34 	bl	4f828 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   4b9c0:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   4b9c2:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   4b9c4:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   4b9c6:	7041      	strb	r1, [r0, #1]
   4b9c8:	4640      	mov	r0, r8
   4b9ca:	f003 ff2d 	bl	4f828 <net_buf_simple_add>
	evt->ncmd = 1U;
   4b9ce:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   4b9d0:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   4b9d2:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   4b9d4:	4620      	mov	r0, r4
}
   4b9d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   4b9da:	f7e2 ba5d 	b.w	2de98 <bt_recv_prio>

0004b9de <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   4b9de:	f101 0320 	add.w	r3, r1, #32
   4b9e2:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   4b9e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   4b9e8:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   4b9ec:	428b      	cmp	r3, r1
   4b9ee:	d1f9      	bne.n	4b9e4 <sys_memcpy_swap.constprop.0+0x6>
}
   4b9f0:	4770      	bx	lr

0004b9f2 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   4b9f2:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   4b9f6:	f043 0306 	orr.w	r3, r3, #6
   4b9fa:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   4b9fe:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   4ba02:	f043 0304 	orr.w	r3, r3, #4
   4ba06:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   4ba0a:	4770      	bx	lr

0004ba0c <default_CSPRNG>:
{
   4ba0c:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   4ba0e:	f7eb f859 	bl	36ac4 <bt_rand>
}
   4ba12:	fab0 f080 	clz	r0, r0
   4ba16:	0940      	lsrs	r0, r0, #5
   4ba18:	bd08      	pop	{r3, pc}

0004ba1a <bt_settings_decode_key>:
{
   4ba1a:	b570      	push	{r4, r5, r6, lr}
   4ba1c:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   4ba1e:	2100      	movs	r1, #0
{
   4ba20:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   4ba22:	f7fe fc66 	bl	4a2f2 <settings_name_next>
   4ba26:	280d      	cmp	r0, #13
   4ba28:	d118      	bne.n	4ba5c <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   4ba2a:	7b23      	ldrb	r3, [r4, #12]
   4ba2c:	2b30      	cmp	r3, #48	; 0x30
   4ba2e:	d113      	bne.n	4ba58 <bt_settings_decode_key+0x3e>
   4ba30:	2300      	movs	r3, #0
		addr->type = BT_ADDR_LE_PUBLIC;
   4ba32:	f805 3b06 	strb.w	r3, [r5], #6
   4ba36:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   4ba3a:	462a      	mov	r2, r5
   4ba3c:	4620      	mov	r0, r4
   4ba3e:	2301      	movs	r3, #1
   4ba40:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   4ba42:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   4ba44:	f7fd fd9c 	bl	49580 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   4ba48:	42b4      	cmp	r4, r6
   4ba4a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   4ba4e:	d1f4      	bne.n	4ba3a <bt_settings_decode_key+0x20>
	return 0;
   4ba50:	2000      	movs	r0, #0
}
   4ba52:	bd70      	pop	{r4, r5, r6, pc}
   4ba54:	2301      	movs	r3, #1
   4ba56:	e7ec      	b.n	4ba32 <bt_settings_decode_key+0x18>
	} else if (key[12] == '1') {
   4ba58:	2b31      	cmp	r3, #49	; 0x31
   4ba5a:	d0fb      	beq.n	4ba54 <bt_settings_decode_key+0x3a>
		return -EINVAL;
   4ba5c:	f06f 0015 	mvn.w	r0, #21
   4ba60:	e7f7      	b.n	4ba52 <bt_settings_decode_key+0x38>

0004ba62 <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   4ba62:	f7e0 bab5 	b.w	2bfd0 <settings_subsys_init>

0004ba66 <bt_uuid_cmp>:
{
   4ba66:	b510      	push	{r4, lr}
   4ba68:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   4ba6a:	7801      	ldrb	r1, [r0, #0]
   4ba6c:	7822      	ldrb	r2, [r4, #0]
   4ba6e:	428a      	cmp	r2, r1
{
   4ba70:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   4ba72:	d00f      	beq.n	4ba94 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   4ba74:	4669      	mov	r1, sp
   4ba76:	f7e1 fba3 	bl	2d1c0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   4ba7a:	a905      	add	r1, sp, #20
   4ba7c:	4620      	mov	r0, r4
   4ba7e:	f7e1 fb9f 	bl	2d1c0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   4ba82:	2210      	movs	r2, #16
   4ba84:	f10d 0115 	add.w	r1, sp, #21
   4ba88:	f10d 0001 	add.w	r0, sp, #1
   4ba8c:	f7ff feed 	bl	4b86a <memcmp>
}
   4ba90:	b00a      	add	sp, #40	; 0x28
   4ba92:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   4ba94:	2a01      	cmp	r2, #1
   4ba96:	d006      	beq.n	4baa6 <bt_uuid_cmp+0x40>
   4ba98:	2a02      	cmp	r2, #2
   4ba9a:	d007      	beq.n	4baac <bt_uuid_cmp+0x46>
   4ba9c:	b972      	cbnz	r2, 4babc <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   4ba9e:	8840      	ldrh	r0, [r0, #2]
   4baa0:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   4baa2:	1ac0      	subs	r0, r0, r3
   4baa4:	e7f4      	b.n	4ba90 <bt_uuid_cmp+0x2a>
   4baa6:	6840      	ldr	r0, [r0, #4]
   4baa8:	6863      	ldr	r3, [r4, #4]
   4baaa:	e7fa      	b.n	4baa2 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   4baac:	2210      	movs	r2, #16
   4baae:	1c61      	adds	r1, r4, #1
   4bab0:	3001      	adds	r0, #1
}
   4bab2:	b00a      	add	sp, #40	; 0x28
   4bab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   4bab8:	f7ff bed7 	b.w	4b86a <memcmp>
	switch (u1->type) {
   4babc:	f06f 0015 	mvn.w	r0, #21
   4bac0:	e7e6      	b.n	4ba90 <bt_uuid_cmp+0x2a>

0004bac2 <bt_uuid_create>:
	switch (data_len) {
   4bac2:	2a04      	cmp	r2, #4
{
   4bac4:	b510      	push	{r4, lr}
	switch (data_len) {
   4bac6:	d00a      	beq.n	4bade <bt_uuid_create+0x1c>
   4bac8:	2a10      	cmp	r2, #16
   4baca:	d00d      	beq.n	4bae8 <bt_uuid_create+0x26>
   4bacc:	2a02      	cmp	r2, #2
   4bace:	f04f 0300 	mov.w	r3, #0
   4bad2:	d10f      	bne.n	4baf4 <bt_uuid_create+0x32>
		uuid->type = BT_UUID_TYPE_16;
   4bad4:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   4bad6:	880b      	ldrh	r3, [r1, #0]
   4bad8:	8043      	strh	r3, [r0, #2]
	return true;
   4bada:	2001      	movs	r0, #1
}
   4badc:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   4bade:	2301      	movs	r3, #1
   4bae0:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   4bae2:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   4bae4:	6042      	str	r2, [r0, #4]
		break;
   4bae6:	e7f8      	b.n	4bada <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   4bae8:	2302      	movs	r3, #2
   4baea:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   4baee:	f7ff fecc 	bl	4b88a <memcpy>
		break;
   4baf2:	e7f2      	b.n	4bada <bt_uuid_create+0x18>
	switch (data_len) {
   4baf4:	4618      	mov	r0, r3
   4baf6:	e7f1      	b.n	4badc <bt_uuid_create+0x1a>

0004baf8 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   4baf8:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   4bafa:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   4bafc:	2106      	movs	r1, #6
{
   4bafe:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   4bb00:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   4bb04:	f7ea ffde 	bl	36ac4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   4bb08:	b918      	cbnz	r0, 4bb12 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   4bb0a:	79a3      	ldrb	r3, [r4, #6]
   4bb0c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   4bb10:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   4bb12:	bd10      	pop	{r4, pc}

0004bb14 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   4bb14:	280f      	cmp	r0, #15
   4bb16:	d806      	bhi.n	4bb26 <bt_hci_evt_get_flags+0x12>
   4bb18:	280d      	cmp	r0, #13
   4bb1a:	d80b      	bhi.n	4bb34 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   4bb1c:	2805      	cmp	r0, #5
   4bb1e:	bf14      	ite	ne
   4bb20:	2002      	movne	r0, #2
   4bb22:	2003      	moveq	r0, #3
   4bb24:	4770      	bx	lr
	switch (evt) {
   4bb26:	2813      	cmp	r0, #19
   4bb28:	d004      	beq.n	4bb34 <bt_hci_evt_get_flags+0x20>
   4bb2a:	281a      	cmp	r0, #26
   4bb2c:	bf14      	ite	ne
   4bb2e:	2002      	movne	r0, #2
   4bb30:	2001      	moveq	r0, #1
   4bb32:	4770      	bx	lr
   4bb34:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   4bb36:	4770      	bx	lr

0004bb38 <handle_event>:
{
   4bb38:	b410      	push	{r4}
   4bb3a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   4bb3e:	4604      	mov	r4, r0
   4bb40:	4608      	mov	r0, r1
		if (handler->event != event) {
   4bb42:	7811      	ldrb	r1, [r2, #0]
   4bb44:	42a1      	cmp	r1, r4
   4bb46:	d004      	beq.n	4bb52 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   4bb48:	3208      	adds	r2, #8
   4bb4a:	429a      	cmp	r2, r3
   4bb4c:	d1f9      	bne.n	4bb42 <handle_event+0xa>
}
   4bb4e:	bc10      	pop	{r4}
   4bb50:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   4bb52:	8981      	ldrh	r1, [r0, #12]
   4bb54:	7853      	ldrb	r3, [r2, #1]
   4bb56:	4299      	cmp	r1, r3
   4bb58:	d3f9      	bcc.n	4bb4e <handle_event+0x16>
		handler->handler(buf);
   4bb5a:	6853      	ldr	r3, [r2, #4]
}
   4bb5c:	bc10      	pop	{r4}
		handler->handler(buf);
   4bb5e:	4718      	bx	r3

0004bb60 <hci_data_buf_overflow>:
}
   4bb60:	4770      	bx	lr

0004bb62 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   4bb62:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   4bb66:	b183      	cbz	r3, 4bb8a <update_sec_level+0x28>
   4bb68:	7b5a      	ldrb	r2, [r3, #13]
   4bb6a:	07d1      	lsls	r1, r2, #31
   4bb6c:	d50d      	bpl.n	4bb8a <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   4bb6e:	06d2      	lsls	r2, r2, #27
   4bb70:	d50d      	bpl.n	4bb8e <update_sec_level+0x2c>
   4bb72:	7b1b      	ldrb	r3, [r3, #12]
   4bb74:	2b10      	cmp	r3, #16
   4bb76:	bf14      	ite	ne
   4bb78:	2303      	movne	r3, #3
   4bb7a:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   4bb7c:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   4bb7e:	7a80      	ldrb	r0, [r0, #10]
}
   4bb80:	4298      	cmp	r0, r3
   4bb82:	bf8c      	ite	hi
   4bb84:	2000      	movhi	r0, #0
   4bb86:	2001      	movls	r0, #1
   4bb88:	4770      	bx	lr
   4bb8a:	2302      	movs	r3, #2
   4bb8c:	e7f6      	b.n	4bb7c <update_sec_level+0x1a>
   4bb8e:	2303      	movs	r3, #3
   4bb90:	e7f4      	b.n	4bb7c <update_sec_level+0x1a>

0004bb92 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4bb92:	2207      	movs	r2, #7
   4bb94:	f7ff be79 	b.w	4b88a <memcpy>

0004bb98 <atomic_or>:
{
   4bb98:	b510      	push	{r4, lr}
   4bb9a:	4603      	mov	r3, r0
}
   4bb9c:	f3bf 8f5b 	dmb	ish
   4bba0:	e853 0f00 	ldrex	r0, [r3]
   4bba4:	ea40 0201 	orr.w	r2, r0, r1
   4bba8:	e843 2400 	strex	r4, r2, [r3]
   4bbac:	2c00      	cmp	r4, #0
   4bbae:	d1f7      	bne.n	4bba0 <atomic_or+0x8>
   4bbb0:	f3bf 8f5b 	dmb	ish
   4bbb4:	bd10      	pop	{r4, pc}

0004bbb6 <atomic_and>:
{
   4bbb6:	b510      	push	{r4, lr}
   4bbb8:	4603      	mov	r3, r0
}
   4bbba:	f3bf 8f5b 	dmb	ish
   4bbbe:	e853 0f00 	ldrex	r0, [r3]
   4bbc2:	ea00 0201 	and.w	r2, r0, r1
   4bbc6:	e843 2400 	strex	r4, r2, [r3]
   4bbca:	2c00      	cmp	r4, #0
   4bbcc:	d1f7      	bne.n	4bbbe <atomic_and+0x8>
   4bbce:	f3bf 8f5b 	dmb	ish
   4bbd2:	bd10      	pop	{r4, pc}

0004bbd4 <unpair_remote>:
{
   4bbd4:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   4bbd6:	4601      	mov	r1, r0
   4bbd8:	7818      	ldrb	r0, [r3, #0]
   4bbda:	f7e1 bbd9 	b.w	2d390 <unpair>

0004bbde <le_data_len_change>:
{
   4bbde:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   4bbe0:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4bbe2:	8818      	ldrh	r0, [r3, #0]
   4bbe4:	f7e3 fcb8 	bl	2f558 <bt_conn_lookup_handle>
	if (!conn) {
   4bbe8:	b118      	cbz	r0, 4bbf2 <le_data_len_change+0x14>
}
   4bbea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   4bbee:	f000 be85 	b.w	4c8fc <bt_conn_unref>
}
   4bbf2:	bd08      	pop	{r3, pc}

0004bbf4 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   4bbf4:	2101      	movs	r1, #1
   4bbf6:	3008      	adds	r0, #8
   4bbf8:	f003 be47 	b.w	4f88a <net_buf_simple_pull_mem>

0004bbfc <le_conn_update_complete>:
{
   4bbfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   4bbfe:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4bc00:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4bc04:	f7e3 fca8 	bl	2f558 <bt_conn_lookup_handle>
	if (!conn) {
   4bc08:	4604      	mov	r4, r0
   4bc0a:	b390      	cbz	r0, 4bc72 <le_conn_update_complete+0x76>
	if (!evt->status) {
   4bc0c:	782b      	ldrb	r3, [r5, #0]
   4bc0e:	b9cb      	cbnz	r3, 4bc44 <le_conn_update_complete+0x48>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   4bc10:	792a      	ldrb	r2, [r5, #4]
   4bc12:	78eb      	ldrb	r3, [r5, #3]
   4bc14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4bc18:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   4bc1c:	79aa      	ldrb	r2, [r5, #6]
   4bc1e:	796b      	ldrb	r3, [r5, #5]
   4bc20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4bc24:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   4bc28:	79eb      	ldrb	r3, [r5, #7]
   4bc2a:	7a2a      	ldrb	r2, [r5, #8]
   4bc2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4bc30:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   4bc34:	f7e3 fd84 	bl	2f740 <notify_le_param_updated>
	bt_conn_unref(conn);
   4bc38:	4620      	mov	r0, r4
}
   4bc3a:	b003      	add	sp, #12
   4bc3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
   4bc40:	f000 be5c 	b.w	4c8fc <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   4bc44:	2b1a      	cmp	r3, #26
   4bc46:	d1f7      	bne.n	4bc38 <le_conn_update_complete+0x3c>
   4bc48:	78c3      	ldrb	r3, [r0, #3]
   4bc4a:	2b01      	cmp	r3, #1
   4bc4c:	d1f4      	bne.n	4bc38 <le_conn_update_complete+0x3c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   4bc4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   4bc52:	3004      	adds	r0, #4
   4bc54:	f7ff ffa0 	bl	4bb98 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   4bc58:	0543      	lsls	r3, r0, #21
   4bc5a:	d4ed      	bmi.n	4bc38 <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   4bc5c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   4bc60:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   4bc62:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   4bc64:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   4bc68:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   4bc6a:	4620      	mov	r0, r4
   4bc6c:	f7e4 fa00 	bl	30070 <bt_l2cap_update_conn_param>
   4bc70:	e7e2      	b.n	4bc38 <le_conn_update_complete+0x3c>
}
   4bc72:	b003      	add	sp, #12
   4bc74:	bd30      	pop	{r4, r5, pc}

0004bc76 <hci_vendor_event>:
   4bc76:	4770      	bx	lr

0004bc78 <sys_put_le64>:
	dst[1] = val >> 8;
   4bc78:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   4bc7c:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   4bc7e:	0e00      	lsrs	r0, r0, #24
   4bc80:	7053      	strb	r3, [r2, #1]
   4bc82:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   4bc84:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   4bc86:	f3c1 2007 	ubfx	r0, r1, #8, #8
   4bc8a:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   4bc8c:	7093      	strb	r3, [r2, #2]
   4bc8e:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   4bc90:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   4bc92:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   4bc94:	71d1      	strb	r1, [r2, #7]
}
   4bc96:	4770      	bx	lr

0004bc98 <hci_num_completed_packets>:
{
   4bc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   4bc9c:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   4bc9e:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   4bca0:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   4bca2:	783b      	ldrb	r3, [r7, #0]
   4bca4:	429d      	cmp	r5, r3
   4bca6:	db01      	blt.n	4bcac <hci_num_completed_packets+0x14>
}
   4bca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   4bcac:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   4bcb0:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   4bcb4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   4bcb8:	f7e3 fc4e 	bl	2f558 <bt_conn_lookup_handle>
		if (!conn) {
   4bcbc:	4604      	mov	r4, r0
   4bcbe:	b350      	cbz	r0, 4bd16 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   4bcc0:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   4bcc4:	b326      	cbz	r6, 4bd10 <hci_num_completed_packets+0x78>
	__asm__ volatile(
   4bcc6:	f04f 0320 	mov.w	r3, #32
   4bcca:	f3ef 8211 	mrs	r2, BASEPRI
   4bcce:	f383 8812 	msr	BASEPRI_MAX, r3
   4bcd2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   4bcd6:	69e3      	ldr	r3, [r4, #28]
   4bcd8:	b16b      	cbz	r3, 4bcf6 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   4bcda:	3b01      	subs	r3, #1
   4bcdc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   4bcde:	f382 8811 	msr	BASEPRI, r2
   4bce2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   4bce6:	4620      	mov	r0, r4
   4bce8:	f7e3 fb8c 	bl	2f404 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   4bcec:	3e01      	subs	r6, #1
   4bcee:	f7fb ff85 	bl	47bfc <z_impl_k_sem_give>
   4bcf2:	b2b6      	uxth	r6, r6
   4bcf4:	e7e6      	b.n	4bcc4 <hci_num_completed_packets+0x2c>
	return list->head;
   4bcf6:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   4bcf8:	b12b      	cbz	r3, 4bd06 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4bcfa:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   4bcfc:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   4bcfe:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4bd00:	428b      	cmp	r3, r1
	list->tail = node;
   4bd02:	bf08      	it	eq
   4bd04:	61a0      	streq	r0, [r4, #24]
   4bd06:	f382 8811 	msr	BASEPRI, r2
   4bd0a:	f3bf 8f6f 	isb	sy
			if (!node) {
   4bd0e:	b923      	cbnz	r3, 4bd1a <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   4bd10:	4620      	mov	r0, r4
   4bd12:	f000 fdf3 	bl	4c8fc <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   4bd16:	3501      	adds	r5, #1
   4bd18:	e7c3      	b.n	4bca2 <hci_num_completed_packets+0xa>
	__asm__ volatile(
   4bd1a:	f04f 0220 	mov.w	r2, #32
   4bd1e:	f3ef 8111 	mrs	r1, BASEPRI
   4bd22:	f382 8812 	msr	BASEPRI_MAX, r2
   4bd26:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   4bd2a:	68da      	ldr	r2, [r3, #12]
   4bd2c:	61e2      	str	r2, [r4, #28]
	return list->tail;
   4bd2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   4bd30:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   4bd34:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   4bd38:	b94a      	cbnz	r2, 4bd4e <hci_num_completed_packets+0xb6>
	list->head = node;
   4bd3a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   4bd3e:	f381 8811 	msr	BASEPRI, r1
   4bd42:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   4bd46:	4648      	mov	r0, r9
   4bd48:	f7fc f8ce 	bl	47ee8 <k_work_submit>
   4bd4c:	e7cb      	b.n	4bce6 <hci_num_completed_packets+0x4e>
	parent->next = child;
   4bd4e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4bd50:	6263      	str	r3, [r4, #36]	; 0x24
}
   4bd52:	e7f4      	b.n	4bd3e <hci_num_completed_packets+0xa6>

0004bd54 <hci_disconn_complete>:
{
   4bd54:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   4bd56:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   4bd58:	7835      	ldrb	r5, [r6, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   4bd5a:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	if (evt->status) {
   4bd5e:	b9fd      	cbnz	r5, 4bda0 <hci_disconn_complete+0x4c>
	conn = bt_conn_lookup_handle(handle);
   4bd60:	f7e3 fbfa 	bl	2f558 <bt_conn_lookup_handle>
	if (!conn) {
   4bd64:	4604      	mov	r4, r0
   4bd66:	b1d8      	cbz	r0, 4bda0 <hci_disconn_complete+0x4c>
	conn->err = evt->reason;
   4bd68:	78f3      	ldrb	r3, [r6, #3]
   4bd6a:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4bd6c:	4629      	mov	r1, r5
   4bd6e:	f7e3 fbfb 	bl	2f568 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   4bd72:	78a3      	ldrb	r3, [r4, #2]
   4bd74:	2b01      	cmp	r3, #1
   4bd76:	d004      	beq.n	4bd82 <hci_disconn_complete+0x2e>
	bt_conn_unref(conn);
   4bd78:	4620      	mov	r0, r4
}
   4bd7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4bd7e:	f000 bdbd 	b.w	4c8fc <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4bd82:	f3bf 8f5b 	dmb	ish
   4bd86:	6863      	ldr	r3, [r4, #4]
   4bd88:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   4bd8c:	07db      	lsls	r3, r3, #31
   4bd8e:	d5f3      	bpl.n	4bd78 <hci_disconn_complete+0x24>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   4bd90:	4620      	mov	r0, r4
   4bd92:	2102      	movs	r1, #2
   4bd94:	f7e3 fbe8 	bl	2f568 <bt_conn_set_state>
		bt_le_scan_update(false);
   4bd98:	4628      	mov	r0, r5
   4bd9a:	f7e2 ffad 	bl	2ecf8 <bt_le_scan_update>
   4bd9e:	e7eb      	b.n	4bd78 <hci_disconn_complete+0x24>
}
   4bda0:	bd70      	pop	{r4, r5, r6, pc}

0004bda2 <le_ltk_request>:
{
   4bda2:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   4bda4:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   4bda6:	8826      	ldrh	r6, [r4, #0]
{
   4bda8:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   4bdaa:	b2b0      	uxth	r0, r6
   4bdac:	f7e3 fbd4 	bl	2f558 <bt_conn_lookup_handle>
	if (!conn) {
   4bdb0:	4605      	mov	r5, r0
   4bdb2:	b318      	cbz	r0, 4bdfc <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   4bdb4:	af02      	add	r7, sp, #8
   4bdb6:	f8d4 2002 	ldr.w	r2, [r4, #2]
   4bdba:	f8d4 3006 	ldr.w	r3, [r4, #6]
   4bdbe:	9701      	str	r7, [sp, #4]
   4bdc0:	8961      	ldrh	r1, [r4, #10]
   4bdc2:	9100      	str	r1, [sp, #0]
   4bdc4:	f003 f98c 	bl	4f0e0 <bt_smp_request_ltk>
   4bdc8:	b1d0      	cbz	r0, 4be00 <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   4bdca:	2112      	movs	r1, #18
   4bdcc:	f242 001a 	movw	r0, #8218	; 0x201a
   4bdd0:	f7e1 fca0 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   4bdd4:	4604      	mov	r4, r0
   4bdd6:	b170      	cbz	r0, 4bdf6 <le_ltk_request+0x54>
	return net_buf_simple_add(&buf->b, len);
   4bdd8:	2112      	movs	r1, #18
   4bdda:	3008      	adds	r0, #8
   4bddc:	f003 fd24 	bl	4f828 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   4bde0:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   4bde2:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   4bde6:	2210      	movs	r2, #16
   4bde8:	f7ff fd4f 	bl	4b88a <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   4bdec:	4621      	mov	r1, r4
   4bdee:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4bdf2:	f7e1 fcc9 	bl	2d788 <bt_hci_cmd_send>
	bt_conn_unref(conn);
   4bdf6:	4628      	mov	r0, r5
   4bdf8:	f000 fd80 	bl	4c8fc <bt_conn_unref>
}
   4bdfc:	b007      	add	sp, #28
   4bdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   4be00:	2102      	movs	r1, #2
   4be02:	f242 001b 	movw	r0, #8219	; 0x201b
   4be06:	f7e1 fc85 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   4be0a:	4604      	mov	r4, r0
   4be0c:	2800      	cmp	r0, #0
   4be0e:	d0f2      	beq.n	4bdf6 <le_ltk_request+0x54>
   4be10:	2102      	movs	r1, #2
   4be12:	3008      	adds	r0, #8
   4be14:	f003 fd08 	bl	4f828 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4be18:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   4be1a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4be1c:	f242 001b 	movw	r0, #8219	; 0x201b
   4be20:	e7e7      	b.n	4bdf2 <le_ltk_request+0x50>

0004be22 <le_conn_param_neg_reply>:
{
   4be22:	b570      	push	{r4, r5, r6, lr}
   4be24:	4606      	mov	r6, r0
   4be26:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   4be28:	f242 0021 	movw	r0, #8225	; 0x2021
   4be2c:	2103      	movs	r1, #3
   4be2e:	f7e1 fc71 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   4be32:	4604      	mov	r4, r0
   4be34:	b160      	cbz	r0, 4be50 <le_conn_param_neg_reply+0x2e>
   4be36:	2103      	movs	r1, #3
   4be38:	3008      	adds	r0, #8
   4be3a:	f003 fcf5 	bl	4f828 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   4be3e:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   4be40:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   4be42:	4621      	mov	r1, r4
   4be44:	f242 0021 	movw	r0, #8225	; 0x2021
}
   4be48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   4be4c:	f7e1 bc9c 	b.w	2d788 <bt_hci_cmd_send>
}
   4be50:	bd70      	pop	{r4, r5, r6, pc}

0004be52 <le_conn_param_req>:
{
   4be52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   4be54:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   4be56:	78d9      	ldrb	r1, [r3, #3]
   4be58:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   4be5a:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   4be5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4be60:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   4be64:	7959      	ldrb	r1, [r3, #5]
   4be66:	791a      	ldrb	r2, [r3, #4]
   4be68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4be6c:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   4be70:	799a      	ldrb	r2, [r3, #6]
   4be72:	79d9      	ldrb	r1, [r3, #7]
   4be74:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4be78:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4be7c:	7a1a      	ldrb	r2, [r3, #8]
   4be7e:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   4be80:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4be82:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   4be86:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4be88:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   4be8c:	f7e3 fb64 	bl	2f558 <bt_conn_lookup_handle>
	if (!conn) {
   4be90:	4606      	mov	r6, r0
   4be92:	b928      	cbnz	r0, 4bea0 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   4be94:	2102      	movs	r1, #2
   4be96:	4620      	mov	r0, r4
   4be98:	f7ff ffc3 	bl	4be22 <le_conn_param_neg_reply>
}
   4be9c:	b003      	add	sp, #12
   4be9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   4bea0:	4669      	mov	r1, sp
   4bea2:	f7e3 fcb1 	bl	2f808 <le_param_req>
   4bea6:	b938      	cbnz	r0, 4beb8 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   4bea8:	211e      	movs	r1, #30
   4beaa:	4620      	mov	r0, r4
   4beac:	f7ff ffb9 	bl	4be22 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   4beb0:	4630      	mov	r0, r6
   4beb2:	f000 fd23 	bl	4c8fc <bt_conn_unref>
   4beb6:	e7f1      	b.n	4be9c <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   4beb8:	210e      	movs	r1, #14
   4beba:	f242 0020 	movw	r0, #8224	; 0x2020
   4bebe:	f7e1 fc29 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   4bec2:	4605      	mov	r5, r0
   4bec4:	2800      	cmp	r0, #0
   4bec6:	d0f3      	beq.n	4beb0 <le_conn_param_req+0x5e>
   4bec8:	210e      	movs	r1, #14
   4beca:	3008      	adds	r0, #8
   4becc:	f003 fcac 	bl	4f828 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   4bed0:	220e      	movs	r2, #14
   4bed2:	4604      	mov	r4, r0
   4bed4:	2100      	movs	r1, #0
   4bed6:	f7ff fce3 	bl	4b8a0 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   4beda:	f8bd 3000 	ldrh.w	r3, [sp]
   4bede:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   4bee0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   4bee4:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   4bee6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   4beea:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   4beec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   4bef0:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   4bef2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   4bef4:	4629      	mov	r1, r5
   4bef6:	f242 0020 	movw	r0, #8224	; 0x2020
   4befa:	f7e1 fc45 	bl	2d788 <bt_hci_cmd_send>
   4befe:	e7d7      	b.n	4beb0 <le_conn_param_req+0x5e>

0004bf00 <hci_le_read_max_data_len>:
{
   4bf00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4bf02:	4606      	mov	r6, r0
   4bf04:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   4bf06:	aa01      	add	r2, sp, #4
   4bf08:	2100      	movs	r1, #0
   4bf0a:	f242 002f 	movw	r0, #8239	; 0x202f
   4bf0e:	f7e1 fc5d 	bl	2d7cc <bt_hci_cmd_send_sync>
	if (err) {
   4bf12:	4604      	mov	r4, r0
   4bf14:	b948      	cbnz	r0, 4bf2a <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   4bf16:	9801      	ldr	r0, [sp, #4]
   4bf18:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   4bf1a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   4bf1e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   4bf20:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   4bf24:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   4bf26:	f7f7 fad7 	bl	434d8 <net_buf_unref>
}
   4bf2a:	4620      	mov	r0, r4
   4bf2c:	b002      	add	sp, #8
   4bf2e:	bd70      	pop	{r4, r5, r6, pc}

0004bf30 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   4bf30:	f7e1 bcb8 	b.w	2d8a4 <bt_le_create_conn_legacy>

0004bf34 <bt_hci_disconnect>:
{
   4bf34:	b570      	push	{r4, r5, r6, lr}
   4bf36:	4606      	mov	r6, r0
   4bf38:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   4bf3a:	f240 4006 	movw	r0, #1030	; 0x406
   4bf3e:	2103      	movs	r1, #3
   4bf40:	f7e1 fbe8 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   4bf44:	4604      	mov	r4, r0
   4bf46:	b168      	cbz	r0, 4bf64 <bt_hci_disconnect+0x30>
   4bf48:	2103      	movs	r1, #3
   4bf4a:	3008      	adds	r0, #8
   4bf4c:	f003 fc6c 	bl	4f828 <net_buf_simple_add>
	disconn->reason = reason;
   4bf50:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   4bf52:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   4bf54:	4621      	mov	r1, r4
   4bf56:	2200      	movs	r2, #0
}
   4bf58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   4bf5c:	f240 4006 	movw	r0, #1030	; 0x406
   4bf60:	f7e1 bc34 	b.w	2d7cc <bt_hci_cmd_send_sync>
}
   4bf64:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4bf68:	bd70      	pop	{r4, r5, r6, pc}

0004bf6a <bt_le_set_data_len>:
{
   4bf6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4bf6c:	4607      	mov	r7, r0
   4bf6e:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   4bf70:	f242 0022 	movw	r0, #8226	; 0x2022
   4bf74:	2106      	movs	r1, #6
{
   4bf76:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   4bf78:	f7e1 fbcc 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   4bf7c:	4604      	mov	r4, r0
   4bf7e:	b170      	cbz	r0, 4bf9e <bt_le_set_data_len+0x34>
   4bf80:	2106      	movs	r1, #6
   4bf82:	3008      	adds	r0, #8
   4bf84:	f003 fc50 	bl	4f828 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4bf88:	883b      	ldrh	r3, [r7, #0]
   4bf8a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   4bf8c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   4bf8e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   4bf90:	4621      	mov	r1, r4
   4bf92:	f242 0022 	movw	r0, #8226	; 0x2022
}
   4bf96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   4bf9a:	f7e1 bbf5 	b.w	2d788 <bt_hci_cmd_send>
}
   4bf9e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4bfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004bfa4 <bt_le_set_phy>:
{
   4bfa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4bfa8:	4681      	mov	r9, r0
   4bfaa:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   4bfac:	f242 0032 	movw	r0, #8242	; 0x2032
   4bfb0:	2107      	movs	r1, #7
{
   4bfb2:	f89d a020 	ldrb.w	sl, [sp, #32]
   4bfb6:	4617      	mov	r7, r2
   4bfb8:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   4bfba:	f7e1 fbab 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   4bfbe:	4605      	mov	r5, r0
   4bfc0:	b198      	cbz	r0, 4bfea <bt_le_set_phy+0x46>
   4bfc2:	2107      	movs	r1, #7
   4bfc4:	3008      	adds	r0, #8
   4bfc6:	f003 fc2f 	bl	4f828 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4bfca:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   4bfce:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   4bfd2:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   4bfd4:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   4bfd6:	f8a0 a005 	strh.w	sl, [r0, #5]
	cp->handle = sys_cpu_to_le16(conn->handle);
   4bfda:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   4bfdc:	4629      	mov	r1, r5
   4bfde:	f242 0032 	movw	r0, #8242	; 0x2032
}
   4bfe2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   4bfe6:	f7e1 bbcf 	b.w	2d788 <bt_hci_cmd_send>
}
   4bfea:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4bfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004bff2 <le_phy_update_complete>:
{
   4bff2:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   4bff4:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4bff6:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4bffa:	f7e3 faad 	bl	2f558 <bt_conn_lookup_handle>
	if (!conn) {
   4bffe:	4604      	mov	r4, r0
   4c000:	b308      	cbz	r0, 4c046 <le_phy_update_complete+0x54>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   4c002:	1d06      	adds	r6, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4c004:	f06f 0180 	mvn.w	r1, #128	; 0x80
   4c008:	4630      	mov	r0, r6
   4c00a:	f7ff fdd4 	bl	4bbb6 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   4c00e:	0603      	lsls	r3, r0, #24
   4c010:	d507      	bpl.n	4c022 <le_phy_update_complete+0x30>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4c012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   4c016:	4630      	mov	r0, r6
   4c018:	f7ff fdbe 	bl	4bb98 <atomic_or>
		conn_auto_initiate(conn);
   4c01c:	4620      	mov	r0, r4
   4c01e:	f7e1 fcbd 	bl	2d99c <conn_auto_initiate>
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   4c022:	78e8      	ldrb	r0, [r5, #3]
   4c024:	f7e1 fc34 	bl	2d890 <bt_get_phy>
   4c028:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   4c02c:	7928      	ldrb	r0, [r5, #4]
   4c02e:	f7e1 fc2f 	bl	2d890 <bt_get_phy>
   4c032:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
   4c036:	4620      	mov	r0, r4
   4c038:	f7e3 fbc4 	bl	2f7c4 <notify_le_phy_updated>
	bt_conn_unref(conn);
   4c03c:	4620      	mov	r0, r4
}
   4c03e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4c042:	f000 bc5b 	b.w	4c8fc <bt_conn_unref>
}
   4c046:	bd70      	pop	{r4, r5, r6, pc}

0004c048 <le_remote_feat_complete>:
{
   4c048:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   4c04a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c04c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4c050:	f7e3 fa82 	bl	2f558 <bt_conn_lookup_handle>
	if (!conn) {
   4c054:	4604      	mov	r4, r0
   4c056:	b198      	cbz	r0, 4c080 <le_remote_feat_complete+0x38>
	if (!evt->status) {
   4c058:	782b      	ldrb	r3, [r5, #0]
   4c05a:	b923      	cbnz	r3, 4c066 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   4c05c:	2208      	movs	r2, #8
   4c05e:	1ce9      	adds	r1, r5, #3
   4c060:	30ac      	adds	r0, #172	; 0xac
   4c062:	f7ff fc12 	bl	4b88a <memcpy>
   4c066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   4c06a:	1d20      	adds	r0, r4, #4
   4c06c:	f7ff fd94 	bl	4bb98 <atomic_or>
	conn_auto_initiate(conn);
   4c070:	4620      	mov	r0, r4
   4c072:	f7e1 fc93 	bl	2d99c <conn_auto_initiate>
	bt_conn_unref(conn);
   4c076:	4620      	mov	r0, r4
}
   4c078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   4c07c:	f000 bc3e 	b.w	4c8fc <bt_conn_unref>
}
   4c080:	bd38      	pop	{r3, r4, r5, pc}

0004c082 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   4c082:	6880      	ldr	r0, [r0, #8]
   4c084:	f7e1 bcee 	b.w	2da64 <bt_hci_le_enh_conn_complete>

0004c088 <le_legacy_conn_complete>:
{
   4c088:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   4c08a:	6881      	ldr	r1, [r0, #8]
{
   4c08c:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   4c08e:	780b      	ldrb	r3, [r1, #0]
   4c090:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   4c094:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   4c098:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   4c09c:	78cb      	ldrb	r3, [r1, #3]
   4c09e:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   4c0a2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   4c0a6:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   4c0aa:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   4c0ae:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   4c0b2:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   4c0b6:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   4c0ba:	7c4b      	ldrb	r3, [r1, #17]
   4c0bc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   4c0c0:	a803      	add	r0, sp, #12
   4c0c2:	3104      	adds	r1, #4
   4c0c4:	f7ff fd65 	bl	4bb92 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   4c0c8:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   4c0ca:	4669      	mov	r1, sp
   4c0cc:	2206      	movs	r2, #6
   4c0ce:	f10d 0013 	add.w	r0, sp, #19
   4c0d2:	9400      	str	r4, [sp, #0]
   4c0d4:	f8ad 4004 	strh.w	r4, [sp, #4]
   4c0d8:	f7ff fbd7 	bl	4b88a <memcpy>
   4c0dc:	2206      	movs	r2, #6
   4c0de:	4669      	mov	r1, sp
   4c0e0:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   4c0e4:	9400      	str	r4, [sp, #0]
   4c0e6:	f8ad 4004 	strh.w	r4, [sp, #4]
   4c0ea:	f7ff fbce 	bl	4b88a <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   4c0ee:	a802      	add	r0, sp, #8
   4c0f0:	f7e1 fcb8 	bl	2da64 <bt_hci_le_enh_conn_complete>
}
   4c0f4:	b00a      	add	sp, #40	; 0x28
   4c0f6:	bd10      	pop	{r4, pc}

0004c0f8 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   4c0f8:	8803      	ldrh	r3, [r0, #0]
   4c0fa:	8842      	ldrh	r2, [r0, #2]
   4c0fc:	4293      	cmp	r3, r2
{
   4c0fe:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   4c100:	d819      	bhi.n	4c136 <bt_le_conn_params_valid+0x3e>
   4c102:	2b05      	cmp	r3, #5
   4c104:	d917      	bls.n	4c136 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   4c106:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   4c10a:	d814      	bhi.n	4c136 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   4c10c:	8883      	ldrh	r3, [r0, #4]
   4c10e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   4c112:	d210      	bcs.n	4c136 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   4c114:	88c0      	ldrh	r0, [r0, #6]
   4c116:	f1a0 010a 	sub.w	r1, r0, #10
   4c11a:	b289      	uxth	r1, r1
   4c11c:	f640 4476 	movw	r4, #3190	; 0xc76
   4c120:	42a1      	cmp	r1, r4
   4c122:	d808      	bhi.n	4c136 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   4c124:	3301      	adds	r3, #1
   4c126:	b29b      	uxth	r3, r3
   4c128:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   4c12a:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   4c12e:	bf34      	ite	cc
   4c130:	2001      	movcc	r0, #1
   4c132:	2000      	movcs	r0, #0
}
   4c134:	bd10      	pop	{r4, pc}
		return false;
   4c136:	2000      	movs	r0, #0
   4c138:	e7fc      	b.n	4c134 <bt_le_conn_params_valid+0x3c>

0004c13a <hci_encrypt_key_refresh_complete>:
{
   4c13a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   4c13c:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c13e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   4c142:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   4c144:	f7e3 fa08 	bl	2f558 <bt_conn_lookup_handle>
	if (!conn) {
   4c148:	4604      	mov	r4, r0
   4c14a:	b338      	cbz	r0, 4c19c <hci_encrypt_key_refresh_complete+0x62>
	if (status) {
   4c14c:	b165      	cbz	r5, 4c168 <hci_encrypt_key_refresh_complete+0x2e>
		bt_conn_security_changed(conn, status,
   4c14e:	4628      	mov	r0, r5
   4c150:	f7e1 fdc4 	bl	2dcdc <bt_security_err_get>
   4c154:	4629      	mov	r1, r5
   4c156:	4602      	mov	r2, r0
   4c158:	4620      	mov	r0, r4
   4c15a:	f7e3 fbbd 	bl	2f8d8 <bt_conn_security_changed>
	bt_conn_unref(conn);
   4c15e:	4620      	mov	r0, r4
}
   4c160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   4c164:	f000 bbca 	b.w	4c8fc <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   4c168:	7883      	ldrb	r3, [r0, #2]
   4c16a:	2b01      	cmp	r3, #1
   4c16c:	d107      	bne.n	4c17e <hci_encrypt_key_refresh_complete+0x44>
		bt_smp_update_keys(conn);
   4c16e:	f003 fa25 	bl	4f5bc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   4c172:	4620      	mov	r0, r4
   4c174:	f7ff fcf5 	bl	4bb62 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   4c178:	2800      	cmp	r0, #0
   4c17a:	bf08      	it	eq
   4c17c:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4c17e:	4628      	mov	r0, r5
   4c180:	f7e1 fdac 	bl	2dcdc <bt_security_err_get>
   4c184:	4629      	mov	r1, r5
   4c186:	4602      	mov	r2, r0
   4c188:	4620      	mov	r0, r4
   4c18a:	f7e3 fba5 	bl	2f8d8 <bt_conn_security_changed>
	if (status) {
   4c18e:	2d00      	cmp	r5, #0
   4c190:	d0e5      	beq.n	4c15e <hci_encrypt_key_refresh_complete+0x24>
		bt_conn_disconnect(conn, status);
   4c192:	2105      	movs	r1, #5
   4c194:	4620      	mov	r0, r4
   4c196:	f000 fcaa 	bl	4caee <bt_conn_disconnect>
   4c19a:	e7e0      	b.n	4c15e <hci_encrypt_key_refresh_complete+0x24>
}
   4c19c:	bd38      	pop	{r3, r4, r5, pc}

0004c19e <hci_encrypt_change>:
{
   4c19e:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   4c1a0:	6886      	ldr	r6, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c1a2:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   4c1a6:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   4c1a8:	f7e3 f9d6 	bl	2f558 <bt_conn_lookup_handle>
	if (!conn) {
   4c1ac:	4604      	mov	r4, r0
   4c1ae:	b350      	cbz	r0, 4c206 <hci_encrypt_change+0x68>
	if (status) {
   4c1b0:	b165      	cbz	r5, 4c1cc <hci_encrypt_change+0x2e>
		bt_conn_security_changed(conn, status,
   4c1b2:	4628      	mov	r0, r5
   4c1b4:	f7e1 fd92 	bl	2dcdc <bt_security_err_get>
   4c1b8:	4629      	mov	r1, r5
   4c1ba:	4602      	mov	r2, r0
   4c1bc:	4620      	mov	r0, r4
   4c1be:	f7e3 fb8b 	bl	2f8d8 <bt_conn_security_changed>
	bt_conn_unref(conn);
   4c1c2:	4620      	mov	r0, r4
}
   4c1c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4c1c8:	f000 bb98 	b.w	4c8fc <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   4c1cc:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   4c1ce:	78f3      	ldrb	r3, [r6, #3]
   4c1d0:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   4c1d2:	2a01      	cmp	r2, #1
   4c1d4:	d108      	bne.n	4c1e8 <hci_encrypt_change+0x4a>
		if (conn->encrypt) {
   4c1d6:	b10b      	cbz	r3, 4c1dc <hci_encrypt_change+0x3e>
			bt_smp_update_keys(conn);
   4c1d8:	f003 f9f0 	bl	4f5bc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   4c1dc:	4620      	mov	r0, r4
   4c1de:	f7ff fcc0 	bl	4bb62 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   4c1e2:	2800      	cmp	r0, #0
   4c1e4:	bf08      	it	eq
   4c1e6:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   4c1e8:	4628      	mov	r0, r5
   4c1ea:	f7e1 fd77 	bl	2dcdc <bt_security_err_get>
   4c1ee:	4629      	mov	r1, r5
   4c1f0:	4602      	mov	r2, r0
   4c1f2:	4620      	mov	r0, r4
   4c1f4:	f7e3 fb70 	bl	2f8d8 <bt_conn_security_changed>
	if (status) {
   4c1f8:	2d00      	cmp	r5, #0
   4c1fa:	d0e2      	beq.n	4c1c2 <hci_encrypt_change+0x24>
		bt_conn_disconnect(conn, status);
   4c1fc:	2105      	movs	r1, #5
   4c1fe:	4620      	mov	r0, r4
   4c200:	f000 fc75 	bl	4caee <bt_conn_disconnect>
   4c204:	e7dd      	b.n	4c1c2 <hci_encrypt_change+0x24>
}
   4c206:	bd70      	pop	{r4, r5, r6, pc}

0004c208 <bt_send>:
		return bt_hci_ecc_send(buf);
   4c208:	f7e0 bea2 	b.w	2cf50 <bt_hci_ecc_send>

0004c20c <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   4c20c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   4c20e:	f7e7 facf 	bl	337b0 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   4c212:	b118      	cbz	r0, 4c21c <bt_addr_le_is_bonded+0x10>
   4c214:	89c0      	ldrh	r0, [r0, #14]
   4c216:	3800      	subs	r0, #0
   4c218:	bf18      	it	ne
   4c21a:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   4c21c:	bd08      	pop	{r3, pc}

0004c21e <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   4c21e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4c220:	4604      	mov	r4, r0
   4c222:	460e      	mov	r6, r1
   4c224:	4617      	mov	r7, r2
	while (ad->len > 1) {
   4c226:	88a3      	ldrh	r3, [r4, #4]
   4c228:	2b01      	cmp	r3, #1
   4c22a:	d801      	bhi.n	4c230 <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   4c22c:	b003      	add	sp, #12
   4c22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
   4c230:	4620      	mov	r0, r4
   4c232:	f003 fb32 	bl	4f89a <net_buf_simple_pull_u8>
		if (len == 0U) {
   4c236:	4605      	mov	r5, r0
   4c238:	2800      	cmp	r0, #0
   4c23a:	d0f7      	beq.n	4c22c <bt_data_parse+0xe>
		if (len > ad->len) {
   4c23c:	88a2      	ldrh	r2, [r4, #4]
   4c23e:	b283      	uxth	r3, r0
   4c240:	429a      	cmp	r2, r3
   4c242:	d3f3      	bcc.n	4c22c <bt_data_parse+0xe>
		data.type = net_buf_simple_pull_u8(ad);
   4c244:	4620      	mov	r0, r4
   4c246:	f003 fb28 	bl	4f89a <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   4c24a:	3d01      	subs	r5, #1
		data.data = ad->data;
   4c24c:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   4c24e:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   4c252:	4639      	mov	r1, r7
   4c254:	4668      	mov	r0, sp
		data.data_len = len - 1;
   4c256:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   4c25a:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   4c25c:	47b0      	blx	r6
   4c25e:	2800      	cmp	r0, #0
   4c260:	d0e4      	beq.n	4c22c <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
   4c262:	4629      	mov	r1, r5
   4c264:	4620      	mov	r0, r4
   4c266:	f003 fb08 	bl	4f87a <net_buf_simple_pull>
   4c26a:	e7dc      	b.n	4c226 <bt_data_parse+0x8>

0004c26c <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   4c26c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4c26e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   4c272:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4c274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4c278:	2100      	movs	r1, #0
{
   4c27a:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4c27c:	f7e1 f85e 	bl	2d33c <bt_buf_get_evt>
   4c280:	2102      	movs	r1, #2
   4c282:	4604      	mov	r4, r0
   4c284:	3008      	adds	r0, #8
   4c286:	f003 facf 	bl	4f828 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   4c28a:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   4c28c:	7045      	strb	r5, [r0, #1]

	return buf;
}
   4c28e:	4620      	mov	r0, r4
   4c290:	bd70      	pop	{r4, r5, r6, pc}

0004c292 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4c292:	3103      	adds	r1, #3
{
   4c294:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4c296:	b2c9      	uxtb	r1, r1
{
   4c298:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4c29a:	200e      	movs	r0, #14
   4c29c:	f7ff ffe6 	bl	4c26c <bt_hci_evt_create>
   4c2a0:	2103      	movs	r1, #3
   4c2a2:	4604      	mov	r4, r0
   4c2a4:	3008      	adds	r0, #8
   4c2a6:	f003 fabf 	bl	4f828 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   4c2aa:	2301      	movs	r3, #1
   4c2ac:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   4c2ae:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   4c2b2:	4620      	mov	r0, r4
   4c2b4:	bd38      	pop	{r3, r4, r5, pc}

0004c2b6 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   4c2b6:	b570      	push	{r4, r5, r6, lr}
   4c2b8:	4605      	mov	r5, r0
   4c2ba:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   4c2bc:	200f      	movs	r0, #15
   4c2be:	2104      	movs	r1, #4
   4c2c0:	f7ff ffd4 	bl	4c26c <bt_hci_evt_create>
   4c2c4:	2104      	movs	r1, #4
   4c2c6:	4604      	mov	r4, r0
   4c2c8:	3008      	adds	r0, #8
   4c2ca:	f003 faad 	bl	4f828 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   4c2ce:	2201      	movs	r2, #1
	cs->status = status;
   4c2d0:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   4c2d2:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   4c2d4:	8045      	strh	r5, [r0, #2]

	return buf;
}
   4c2d6:	4620      	mov	r0, r4
   4c2d8:	bd70      	pop	{r4, r5, r6, pc}

0004c2da <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4c2da:	2207      	movs	r2, #7
   4c2dc:	f7ff bad5 	b.w	4b88a <memcpy>

0004c2e0 <atomic_get>:
   4c2e0:	f3bf 8f5b 	dmb	ish
   4c2e4:	6800      	ldr	r0, [r0, #0]
   4c2e6:	f3bf 8f5b 	dmb	ish
}
   4c2ea:	4770      	bx	lr

0004c2ec <adv_unpause_enabled>:
{
   4c2ec:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4c2ee:	f100 0310 	add.w	r3, r0, #16
   4c2f2:	f3bf 8f5b 	dmb	ish
   4c2f6:	e853 2f00 	ldrex	r2, [r3]
   4c2fa:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   4c2fe:	e843 1400 	strex	r4, r1, [r3]
   4c302:	2c00      	cmp	r4, #0
   4c304:	d1f7      	bne.n	4c2f6 <adv_unpause_enabled+0xa>
   4c306:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   4c30a:	0453      	lsls	r3, r2, #17
   4c30c:	d503      	bpl.n	4c316 <adv_unpause_enabled+0x2a>
}
   4c30e:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   4c310:	2101      	movs	r1, #1
   4c312:	f000 ba02 	b.w	4c71a <bt_le_adv_set_enable>
}
   4c316:	bc10      	pop	{r4}
   4c318:	4770      	bx	lr

0004c31a <hci_id_add>:
{
   4c31a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   4c31c:	f242 0027 	movw	r0, #8231	; 0x2027
{
   4c320:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   4c322:	2127      	movs	r1, #39	; 0x27
{
   4c324:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   4c326:	f7e1 f9f5 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   4c32a:	4604      	mov	r4, r0
   4c32c:	b1d0      	cbz	r0, 4c364 <hci_id_add+0x4a>
   4c32e:	2127      	movs	r1, #39	; 0x27
   4c330:	3008      	adds	r0, #8
   4c332:	f003 fa79 	bl	4f828 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   4c336:	4639      	mov	r1, r7
   4c338:	4605      	mov	r5, r0
   4c33a:	f7ff ffce 	bl	4c2da <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   4c33e:	4631      	mov	r1, r6
   4c340:	2210      	movs	r2, #16
   4c342:	1de8      	adds	r0, r5, #7
   4c344:	f7ff faa1 	bl	4b88a <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   4c348:	2210      	movs	r2, #16
   4c34a:	2100      	movs	r1, #0
   4c34c:	f105 0017 	add.w	r0, r5, #23
   4c350:	f7ff faa6 	bl	4b8a0 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   4c354:	4621      	mov	r1, r4
   4c356:	2200      	movs	r2, #0
}
   4c358:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   4c35c:	f242 0027 	movw	r0, #8231	; 0x2027
   4c360:	f7e1 ba34 	b.w	2d7cc <bt_hci_cmd_send_sync>
}
   4c364:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004c36a <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   4c36a:	7a03      	ldrb	r3, [r0, #8]
   4c36c:	075b      	lsls	r3, r3, #29
{
   4c36e:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   4c370:	d505      	bpl.n	4c37e <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   4c372:	4601      	mov	r1, r0
   4c374:	322a      	adds	r2, #42	; 0x2a
   4c376:	f811 0b01 	ldrb.w	r0, [r1], #1
   4c37a:	f7ff bfce 	b.w	4c31a <hci_id_add>
}
   4c37e:	4770      	bx	lr

0004c380 <addr_res_enable>:
{
   4c380:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   4c382:	2101      	movs	r1, #1
{
   4c384:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   4c386:	f242 002d 	movw	r0, #8237	; 0x202d
   4c38a:	f7e1 f9c3 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   4c38e:	4604      	mov	r4, r0
   4c390:	b158      	cbz	r0, 4c3aa <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   4c392:	4629      	mov	r1, r5
   4c394:	3008      	adds	r0, #8
   4c396:	f003 fa56 	bl	4f846 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   4c39a:	4621      	mov	r1, r4
   4c39c:	2200      	movs	r2, #0
}
   4c39e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   4c3a2:	f242 002d 	movw	r0, #8237	; 0x202d
   4c3a6:	f7e1 ba11 	b.w	2d7cc <bt_hci_cmd_send_sync>
}
   4c3aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c3ae:	bd38      	pop	{r3, r4, r5, pc}

0004c3b0 <is_adv_using_rand_addr>:
{
   4c3b0:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   4c3b2:	f7e2 fa11 	bl	2e7d8 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   4c3b6:	b120      	cbz	r0, 4c3c2 <is_adv_using_rand_addr+0x12>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4c3b8:	3010      	adds	r0, #16
   4c3ba:	f7ff ff91 	bl	4c2e0 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4c3be:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   4c3c2:	bd08      	pop	{r3, pc}

0004c3c4 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4c3c4:	f100 0210 	add.w	r2, r0, #16
{
   4c3c8:	b508      	push	{r3, lr}
   4c3ca:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4c3cc:	4610      	mov	r0, r2
   4c3ce:	f7ff ff87 	bl	4c2e0 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4c3d2:	0641      	lsls	r1, r0, #25
   4c3d4:	d511      	bpl.n	4c3fa <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4c3d6:	f3bf 8f5b 	dmb	ish
   4c3da:	e852 0f00 	ldrex	r0, [r2]
   4c3de:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   4c3e2:	e842 0100 	strex	r1, r0, [r2]
   4c3e6:	2900      	cmp	r1, #0
   4c3e8:	d1f7      	bne.n	4c3da <adv_pause_enabled+0x16>
   4c3ea:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   4c3ee:	4618      	mov	r0, r3
   4c3f0:	2100      	movs	r1, #0
}
   4c3f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   4c3f6:	f000 b990 	b.w	4c71a <bt_le_adv_set_enable>
}
   4c3fa:	bd08      	pop	{r3, pc}

0004c3fc <bt_lookup_id_addr>:
{
   4c3fc:	b510      	push	{r4, lr}
   4c3fe:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   4c400:	f7e7 f984 	bl	3370c <bt_keys_find_irk>
		if (keys) {
   4c404:	b100      	cbz	r0, 4c408 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   4c406:	1c44      	adds	r4, r0, #1
}
   4c408:	4620      	mov	r0, r4
   4c40a:	bd10      	pop	{r4, pc}

0004c40c <bt_id_set_private_addr>:
{
   4c40c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   4c40e:	2106      	movs	r1, #6
   4c410:	4668      	mov	r0, sp
   4c412:	f7ea fb57 	bl	36ac4 <bt_rand>
	if (err) {
   4c416:	b940      	cbnz	r0, 4c42a <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   4c418:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   4c41c:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   4c41e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4c422:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   4c426:	f7e1 fdf1 	bl	2e00c <set_random_address>
}
   4c42a:	b003      	add	sp, #12
   4c42c:	f85d fb04 	ldr.w	pc, [sp], #4

0004c430 <bt_id_set_adv_private_addr>:
{
   4c430:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   4c432:	2106      	movs	r1, #6
   4c434:	4668      	mov	r0, sp
   4c436:	f7ea fb45 	bl	36ac4 <bt_rand>
	if (err) {
   4c43a:	b940      	cbnz	r0, 4c44e <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   4c43c:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   4c440:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   4c442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4c446:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   4c44a:	f7e1 fddf 	bl	2e00c <set_random_address>
}
   4c44e:	b003      	add	sp, #12
   4c450:	f85d fb04 	ldr.w	pc, [sp], #4

0004c454 <bt_id_scan_random_addr_check>:
{
   4c454:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   4c456:	f7e2 f9bf 	bl	2e7d8 <bt_le_adv_lookup_legacy>
	if (!adv) {
   4c45a:	b110      	cbz	r0, 4c462 <bt_id_scan_random_addr_check+0xe>
   4c45c:	3010      	adds	r0, #16
   4c45e:	f7ff ff3f 	bl	4c2e0 <atomic_get>
}
   4c462:	2001      	movs	r0, #1
   4c464:	bd08      	pop	{r3, pc}

0004c466 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   4c466:	7a03      	ldrb	r3, [r0, #8]
   4c468:	07d9      	lsls	r1, r3, #31
   4c46a:	d504      	bpl.n	4c476 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   4c46c:	f023 0301 	bic.w	r3, r3, #1
   4c470:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   4c472:	f7e1 be61 	b.w	2e138 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   4c476:	0799      	lsls	r1, r3, #30
   4c478:	d504      	bpl.n	4c484 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   4c47a:	f023 0302 	bic.w	r3, r3, #2
   4c47e:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   4c480:	f7e1 bf00 	b.w	2e284 <bt_id_del>
}
   4c484:	4770      	bx	lr

0004c486 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   4c486:	2000      	movs	r0, #0
   4c488:	4770      	bx	lr

0004c48a <get_adv_channel_map>:
{
   4c48a:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   4c48c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   4c490:	bf0c      	ite	eq
   4c492:	2007      	moveq	r0, #7
   4c494:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   4c496:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   4c498:	bf48      	it	mi
   4c49a:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   4c49e:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   4c4a0:	bf48      	it	mi
   4c4a2:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   4c4a6:	4770      	bx	lr

0004c4a8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4c4a8:	f3bf 8f5b 	dmb	ish
   4c4ac:	6800      	ldr	r0, [r0, #0]
   4c4ae:	f3bf 8f5b 	dmb	ish
}
   4c4b2:	4770      	bx	lr

0004c4b4 <atomic_and>:
{
   4c4b4:	b510      	push	{r4, lr}
   4c4b6:	4603      	mov	r3, r0
}
   4c4b8:	f3bf 8f5b 	dmb	ish
   4c4bc:	e853 0f00 	ldrex	r0, [r3]
   4c4c0:	ea00 0201 	and.w	r2, r0, r1
   4c4c4:	e843 2400 	strex	r4, r2, [r3]
   4c4c8:	2c00      	cmp	r4, #0
   4c4ca:	d1f7      	bne.n	4c4bc <atomic_and+0x8>
   4c4cc:	f3bf 8f5b 	dmb	ish
   4c4d0:	bd10      	pop	{r4, pc}

0004c4d2 <hci_set_ad>:
{
   4c4d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4c4d6:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   4c4d8:	2120      	movs	r1, #32
{
   4c4da:	4682      	mov	sl, r0
   4c4dc:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   4c4de:	f7e1 f919 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   4c4e2:	4605      	mov	r5, r0
   4c4e4:	2800      	cmp	r0, #0
   4c4e6:	d04a      	beq.n	4c57e <hci_set_ad+0xac>
	return net_buf_simple_add(&buf->b, len);
   4c4e8:	2120      	movs	r1, #32
   4c4ea:	3008      	adds	r0, #8
   4c4ec:	f003 f99c 	bl	4f828 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   4c4f0:	2220      	movs	r2, #32
   4c4f2:	2100      	movs	r1, #0
   4c4f4:	4681      	mov	r9, r0
   4c4f6:	f7ff f9d3 	bl	4b8a0 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   4c4fa:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   4c4fe:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   4c502:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   4c504:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   4c506:	f8d4 8000 	ldr.w	r8, [r4]
   4c50a:	2300      	movs	r3, #0
   4c50c:	6862      	ldr	r2, [r4, #4]
   4c50e:	4293      	cmp	r3, r2
   4c510:	d30d      	bcc.n	4c52e <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   4c512:	9b00      	ldr	r3, [sp, #0]
   4c514:	3408      	adds	r4, #8
   4c516:	42a3      	cmp	r3, r4
   4c518:	d1f5      	bne.n	4c506 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   4c51a:	2200      	movs	r2, #0
   4c51c:	4629      	mov	r1, r5
   4c51e:	4650      	mov	r0, sl
	*data_len = set_data_len;
   4c520:	f889 6000 	strb.w	r6, [r9]
}
   4c524:	b003      	add	sp, #12
   4c526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   4c52a:	f7e1 b94f 	b.w	2d7cc <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   4c52e:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   4c532:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   4c536:	1cb0      	adds	r0, r6, #2
   4c538:	1811      	adds	r1, r2, r0
   4c53a:	291f      	cmp	r1, #31
   4c53c:	d908      	bls.n	4c550 <hci_set_ad+0x7e>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   4c53e:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   4c542:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   4c546:	d11f      	bne.n	4c588 <hci_set_ad+0xb6>
   4c548:	2a00      	cmp	r2, #0
   4c54a:	dd1d      	ble.n	4c588 <hci_set_ad+0xb6>
				type = BT_DATA_NAME_SHORTENED;
   4c54c:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   4c550:	b2d7      	uxtb	r7, r2
   4c552:	1c79      	adds	r1, r7, #1
   4c554:	f80b 1006 	strb.w	r1, [fp, r6]
   4c558:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   4c55a:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   4c55c:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   4c560:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   4c564:	f8d8 1004 	ldr.w	r1, [r8, #4]
   4c568:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   4c56a:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   4c56c:	f7ff f98d 	bl	4b88a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   4c570:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   4c572:	4437      	add	r7, r6
   4c574:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   4c576:	3301      	adds	r3, #1
   4c578:	f108 0808 	add.w	r8, r8, #8
   4c57c:	e7c6      	b.n	4c50c <hci_set_ad+0x3a>
		return -ENOBUFS;
   4c57e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   4c582:	b003      	add	sp, #12
   4c584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   4c588:	4628      	mov	r0, r5
   4c58a:	f7f6 ffa5 	bl	434d8 <net_buf_unref>
		return err;
   4c58e:	f06f 0015 	mvn.w	r0, #21
   4c592:	e7f6      	b.n	4c582 <hci_set_ad+0xb0>

0004c594 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4c594:	2301      	movs	r3, #1
{
   4c596:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   4c598:	fa03 f101 	lsl.w	r1, r3, r1
{
   4c59c:	4604      	mov	r4, r0
	if (val) {
   4c59e:	b162      	cbz	r2, 4c5ba <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4c5a0:	f3bf 8f5b 	dmb	ish
   4c5a4:	e854 3f00 	ldrex	r3, [r4]
   4c5a8:	430b      	orrs	r3, r1
   4c5aa:	e844 3200 	strex	r2, r3, [r4]
   4c5ae:	2a00      	cmp	r2, #0
   4c5b0:	d1f8      	bne.n	4c5a4 <atomic_set_bit_to+0x10>
   4c5b2:	f3bf 8f5b 	dmb	ish
	}
}
   4c5b6:	bc10      	pop	{r4}
   4c5b8:	4770      	bx	lr
   4c5ba:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4c5bc:	43c9      	mvns	r1, r1
   4c5be:	f7ff bf79 	b.w	4c4b4 <atomic_and>

0004c5c2 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   4c5c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4c5c6:	b087      	sub	sp, #28
   4c5c8:	4605      	mov	r5, r0
   4c5ca:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   4c5ce:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   4c5d2:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   4c5d6:	460c      	mov	r4, r1
   4c5d8:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   4c5da:	2100      	movs	r1, #0
   4c5dc:	2210      	movs	r2, #16
   4c5de:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   4c5e0:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   4c5e2:	f7ff f95d 	bl	4b8a0 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   4c5e6:	b186      	cbz	r6, 4c60a <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   4c5e8:	f7e1 fcf2 	bl	2dfd0 <bt_get_name>
   4c5ec:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   4c5ee:	2c00      	cmp	r4, #0
   4c5f0:	d139      	bne.n	4c666 <le_adv_update.constprop.0+0xa4>
   4c5f2:	2f00      	cmp	r7, #0
   4c5f4:	d142      	bne.n	4c67c <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   4c5f6:	4658      	mov	r0, fp
   4c5f8:	f7ff f913 	bl	4b822 <strlen>
   4c5fc:	2309      	movs	r3, #9
   4c5fe:	f88d 3000 	strb.w	r3, [sp]
   4c602:	f88d 0001 	strb.w	r0, [sp, #1]
   4c606:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   4c60a:	2e01      	cmp	r6, #1
			d_len = 2;
   4c60c:	bf0c      	ite	eq
   4c60e:	2202      	moveq	r2, #2
		d_len = 1;
   4c610:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   4c612:	a902      	add	r1, sp, #8
   4c614:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   4c618:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   4c61c:	bf04      	itt	eq
   4c61e:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   4c622:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   4c624:	f7ff ff55 	bl	4c4d2 <hci_set_ad>
		if (err) {
   4c628:	4604      	mov	r4, r0
   4c62a:	b978      	cbnz	r0, 4c64c <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   4c62c:	f1ba 0f00 	cmp.w	sl, #0
   4c630:	d126      	bne.n	4c680 <le_adv_update.constprop.0+0xbe>
   4c632:	3510      	adds	r5, #16
   4c634:	f3bf 8f5b 	dmb	ish
   4c638:	e855 3f00 	ldrex	r3, [r5]
   4c63c:	f043 0304 	orr.w	r3, r3, #4
   4c640:	e845 3200 	strex	r2, r3, [r5]
   4c644:	2a00      	cmp	r2, #0
   4c646:	d1f7      	bne.n	4c638 <le_adv_update.constprop.0+0x76>
   4c648:	f3bf 8f5b 	dmb	ish
}
   4c64c:	4620      	mov	r0, r4
   4c64e:	b007      	add	sp, #28
   4c650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   4c654:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   4c658:	3a08      	subs	r2, #8
   4c65a:	2a01      	cmp	r2, #1
   4c65c:	d925      	bls.n	4c6aa <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   4c65e:	3301      	adds	r3, #1
   4c660:	4598      	cmp	r8, r3
   4c662:	d1f7      	bne.n	4c654 <le_adv_update.constprop.0+0x92>
   4c664:	e7c5      	b.n	4c5f2 <le_adv_update.constprop.0+0x30>
   4c666:	2300      	movs	r3, #0
   4c668:	e7fa      	b.n	4c660 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   4c66a:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   4c66e:	3a08      	subs	r2, #8
   4c670:	2a01      	cmp	r2, #1
   4c672:	d91a      	bls.n	4c6aa <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   4c674:	3301      	adds	r3, #1
   4c676:	4599      	cmp	r9, r3
   4c678:	d1f7      	bne.n	4c66a <le_adv_update.constprop.0+0xa8>
   4c67a:	e7bc      	b.n	4c5f6 <le_adv_update.constprop.0+0x34>
   4c67c:	2300      	movs	r3, #0
   4c67e:	e7fa      	b.n	4c676 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   4c680:	2e02      	cmp	r6, #2
   4c682:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   4c686:	bf08      	it	eq
   4c688:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4c68a:	a902      	add	r1, sp, #8
			d_len = 2;
   4c68c:	bf08      	it	eq
   4c68e:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4c690:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   4c694:	bf08      	it	eq
   4c696:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   4c69a:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4c69e:	f7ff ff18 	bl	4c4d2 <hci_set_ad>
		if (err) {
   4c6a2:	2800      	cmp	r0, #0
   4c6a4:	d0c5      	beq.n	4c632 <le_adv_update.constprop.0+0x70>
   4c6a6:	4604      	mov	r4, r0
   4c6a8:	e7d0      	b.n	4c64c <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   4c6aa:	f06f 0415 	mvn.w	r4, #21
   4c6ae:	e7cd      	b.n	4c64c <le_adv_update.constprop.0+0x8a>

0004c6b0 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   4c6b0:	6843      	ldr	r3, [r0, #4]
   4c6b2:	f013 0008 	ands.w	r0, r3, #8
   4c6b6:	d00a      	beq.n	4c6ce <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   4c6b8:	035a      	lsls	r2, r3, #13
   4c6ba:	d407      	bmi.n	4c6cc <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   4c6bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   4c6c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   4c6c4:	bf0c      	ite	eq
   4c6c6:	2001      	moveq	r0, #1
   4c6c8:	2002      	movne	r0, #2
   4c6ca:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   4c6cc:	2001      	movs	r0, #1
}
   4c6ce:	4770      	bx	lr

0004c6d0 <bt_le_adv_set_enable_legacy>:
{
   4c6d0:	b570      	push	{r4, r5, r6, lr}
   4c6d2:	4606      	mov	r6, r0
   4c6d4:	b086      	sub	sp, #24
   4c6d6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   4c6d8:	f242 000a 	movw	r0, #8202	; 0x200a
   4c6dc:	2101      	movs	r1, #1
   4c6de:	f7e1 f819 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   4c6e2:	4604      	mov	r4, r0
   4c6e4:	b1b0      	cbz	r0, 4c714 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   4c6e6:	3008      	adds	r0, #8
	if (enable) {
   4c6e8:	b195      	cbz	r5, 4c710 <bt_le_adv_set_enable_legacy+0x40>
   4c6ea:	2101      	movs	r1, #1
   4c6ec:	f003 f8ab 	bl	4f846 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   4c6f0:	f106 0210 	add.w	r2, r6, #16
   4c6f4:	a903      	add	r1, sp, #12
   4c6f6:	4620      	mov	r0, r4
   4c6f8:	9500      	str	r5, [sp, #0]
   4c6fa:	2306      	movs	r3, #6
   4c6fc:	f7e0 fff8 	bl	2d6f0 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   4c700:	2200      	movs	r2, #0
   4c702:	4621      	mov	r1, r4
   4c704:	f242 000a 	movw	r0, #8202	; 0x200a
   4c708:	f7e1 f860 	bl	2d7cc <bt_hci_cmd_send_sync>
}
   4c70c:	b006      	add	sp, #24
   4c70e:	bd70      	pop	{r4, r5, r6, pc}
   4c710:	4629      	mov	r1, r5
   4c712:	e7eb      	b.n	4c6ec <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   4c714:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c718:	e7f8      	b.n	4c70c <bt_le_adv_set_enable_legacy+0x3c>

0004c71a <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   4c71a:	f7ff bfd9 	b.w	4c6d0 <bt_le_adv_set_enable_legacy>

0004c71e <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   4c71e:	3018      	adds	r0, #24
   4c720:	f004 b892 	b.w	50848 <k_work_cancel_delayable>

0004c724 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   4c724:	f7e2 b9b6 	b.w	2ea94 <bt_le_adv_stop>

0004c728 <atomic_and>:
{
   4c728:	b510      	push	{r4, lr}
   4c72a:	4603      	mov	r3, r0
}
   4c72c:	f3bf 8f5b 	dmb	ish
   4c730:	e853 0f00 	ldrex	r0, [r3]
   4c734:	ea00 0201 	and.w	r2, r0, r1
   4c738:	e843 2400 	strex	r4, r2, [r3]
   4c73c:	2c00      	cmp	r4, #0
   4c73e:	d1f7      	bne.n	4c730 <atomic_and+0x8>
   4c740:	f3bf 8f5b 	dmb	ish
   4c744:	bd10      	pop	{r4, pc}

0004c746 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   4c746:	f7e2 ba4f 	b.w	2ebe8 <bt_le_scan_set_enable_legacy>

0004c74a <atomic_and>:
{
   4c74a:	b510      	push	{r4, lr}
   4c74c:	4603      	mov	r3, r0
}
   4c74e:	f3bf 8f5b 	dmb	ish
   4c752:	e853 0f00 	ldrex	r0, [r3]
   4c756:	ea00 0201 	and.w	r2, r0, r1
   4c75a:	e843 2400 	strex	r4, r2, [r3]
   4c75e:	2c00      	cmp	r4, #0
   4c760:	d1f7      	bne.n	4c752 <atomic_and+0x8>
   4c762:	f3bf 8f5b 	dmb	ish
   4c766:	bd10      	pop	{r4, pc}

0004c768 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4c768:	f3bf 8f5b 	dmb	ish
   4c76c:	6800      	ldr	r0, [r0, #0]
   4c76e:	f3bf 8f5b 	dmb	ish
}
   4c772:	4770      	bx	lr

0004c774 <atomic_or>:
{
   4c774:	b510      	push	{r4, lr}
   4c776:	4603      	mov	r3, r0
}
   4c778:	f3bf 8f5b 	dmb	ish
   4c77c:	e853 0f00 	ldrex	r0, [r3]
   4c780:	ea40 0201 	orr.w	r2, r0, r1
   4c784:	e843 2400 	strex	r4, r2, [r3]
   4c788:	2c00      	cmp	r4, #0
   4c78a:	d1f7      	bne.n	4c77c <atomic_or+0x8>
   4c78c:	f3bf 8f5b 	dmb	ish
   4c790:	bd10      	pop	{r4, pc}

0004c792 <tx_notify>:
{
   4c792:	b570      	push	{r4, r5, r6, lr}
   4c794:	4604      	mov	r4, r0
	__asm__ volatile(
   4c796:	f04f 0220 	mov.w	r2, #32
   4c79a:	f3ef 8311 	mrs	r3, BASEPRI
   4c79e:	f382 8812 	msr	BASEPRI_MAX, r2
   4c7a2:	f3bf 8f6f 	isb	sy
	return list->head;
   4c7a6:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   4c7a8:	b920      	cbnz	r0, 4c7b4 <tx_notify+0x22>
	__asm__ volatile(
   4c7aa:	f383 8811 	msr	BASEPRI, r3
   4c7ae:	f3bf 8f6f 	isb	sy
}
   4c7b2:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4c7b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   4c7b6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   4c7b8:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4c7ba:	4288      	cmp	r0, r1
	list->tail = node;
   4c7bc:	bf08      	it	eq
   4c7be:	6262      	streq	r2, [r4, #36]	; 0x24
   4c7c0:	f383 8811 	msr	BASEPRI, r3
   4c7c4:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   4c7c8:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   4c7cc:	f7e2 fd64 	bl	2f298 <tx_free>
		cb(conn, user_data);
   4c7d0:	4631      	mov	r1, r6
   4c7d2:	4620      	mov	r0, r4
   4c7d4:	47a8      	blx	r5
	while (1) {
   4c7d6:	e7de      	b.n	4c796 <tx_notify+0x4>

0004c7d8 <tx_complete_work>:
	tx_notify(conn);
   4c7d8:	3828      	subs	r0, #40	; 0x28
   4c7da:	f7ff bfda 	b.w	4c792 <tx_notify>

0004c7de <bt_conn_reset_rx_state>:
{
   4c7de:	b510      	push	{r4, lr}
   4c7e0:	4604      	mov	r4, r0
	if (!conn->rx) {
   4c7e2:	6900      	ldr	r0, [r0, #16]
   4c7e4:	b118      	cbz	r0, 4c7ee <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   4c7e6:	f7f6 fe77 	bl	434d8 <net_buf_unref>
	conn->rx = NULL;
   4c7ea:	2300      	movs	r3, #0
   4c7ec:	6123      	str	r3, [r4, #16]
}
   4c7ee:	bd10      	pop	{r4, pc}

0004c7f0 <conn_cleanup>:
{
   4c7f0:	b570      	push	{r4, r5, r6, lr}
   4c7f2:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   4c7f4:	f100 0638 	add.w	r6, r0, #56	; 0x38
   4c7f8:	2200      	movs	r2, #0
   4c7fa:	2300      	movs	r3, #0
   4c7fc:	4630      	mov	r0, r6
   4c7fe:	f002 ffb0 	bl	4f762 <net_buf_get>
   4c802:	4605      	mov	r5, r0
   4c804:	b950      	cbnz	r0, 4c81c <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   4c806:	4620      	mov	r0, r4
   4c808:	f7ff ffe9 	bl	4c7de <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   4c80c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   4c810:	2200      	movs	r2, #0
}
   4c812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   4c816:	2300      	movs	r3, #0
   4c818:	f7fb bc02 	b.w	48020 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   4c81c:	6968      	ldr	r0, [r5, #20]
   4c81e:	b108      	cbz	r0, 4c824 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   4c820:	f7e2 fd3a 	bl	2f298 <tx_free>
		net_buf_unref(buf);
   4c824:	4628      	mov	r0, r5
   4c826:	f7f6 fe57 	bl	434d8 <net_buf_unref>
   4c82a:	e7e5      	b.n	4c7f8 <conn_cleanup+0x8>

0004c82c <bt_conn_recv>:
{
   4c82c:	b570      	push	{r4, r5, r6, lr}
   4c82e:	4616      	mov	r6, r2
   4c830:	4604      	mov	r4, r0
   4c832:	460d      	mov	r5, r1
	tx_notify(conn);
   4c834:	f7ff ffad 	bl	4c792 <tx_notify>
	switch (flags) {
   4c838:	2e01      	cmp	r6, #1
   4c83a:	d017      	beq.n	4c86c <bt_conn_recv+0x40>
   4c83c:	2e02      	cmp	r6, #2
   4c83e:	d117      	bne.n	4c870 <bt_conn_recv+0x44>
		if (conn->rx) {
   4c840:	6923      	ldr	r3, [r4, #16]
   4c842:	b113      	cbz	r3, 4c84a <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   4c844:	4620      	mov	r0, r4
   4c846:	f7ff ffca 	bl	4c7de <bt_conn_reset_rx_state>
		conn->rx = buf;
   4c84a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   4c84c:	6921      	ldr	r1, [r4, #16]
   4c84e:	898a      	ldrh	r2, [r1, #12]
   4c850:	2a01      	cmp	r2, #1
   4c852:	d937      	bls.n	4c8c4 <bt_conn_recv+0x98>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   4c854:	688b      	ldr	r3, [r1, #8]
   4c856:	881b      	ldrh	r3, [r3, #0]
   4c858:	3304      	adds	r3, #4
   4c85a:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   4c85c:	429a      	cmp	r2, r3
   4c85e:	d331      	bcc.n	4c8c4 <bt_conn_recv+0x98>
	if (conn->rx->len > acl_total_len) {
   4c860:	d928      	bls.n	4c8b4 <bt_conn_recv+0x88>
		bt_conn_reset_rx_state(conn);
   4c862:	4620      	mov	r0, r4
}
   4c864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   4c868:	f7ff bfb9 	b.w	4c7de <bt_conn_reset_rx_state>
		if (!conn->rx) {
   4c86c:	6920      	ldr	r0, [r4, #16]
   4c86e:	b918      	cbnz	r0, 4c878 <bt_conn_recv+0x4c>
		bt_conn_reset_rx_state(conn);
   4c870:	4620      	mov	r0, r4
   4c872:	f7ff ffb4 	bl	4c7de <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   4c876:	e001      	b.n	4c87c <bt_conn_recv+0x50>
		if (!buf->len) {
   4c878:	89ae      	ldrh	r6, [r5, #12]
   4c87a:	b926      	cbnz	r6, 4c886 <bt_conn_recv+0x5a>
			net_buf_unref(buf);
   4c87c:	4628      	mov	r0, r5
}
   4c87e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   4c882:	f7f6 be29 	b.w	434d8 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   4c886:	3008      	adds	r0, #8
   4c888:	f003 f81b 	bl	4f8c2 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   4c88c:	4286      	cmp	r6, r0
   4c88e:	d907      	bls.n	4c8a0 <bt_conn_recv+0x74>
			bt_l2cap_recv(conn, conn->rx, false);
   4c890:	6921      	ldr	r1, [r4, #16]
   4c892:	2200      	movs	r2, #0
   4c894:	4620      	mov	r0, r4
   4c896:	f000 fac2 	bl	4ce1e <bt_l2cap_recv>
			conn->rx = NULL;
   4c89a:	2300      	movs	r3, #0
   4c89c:	6123      	str	r3, [r4, #16]
   4c89e:	e7ed      	b.n	4c87c <bt_conn_recv+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   4c8a0:	6920      	ldr	r0, [r4, #16]
   4c8a2:	89aa      	ldrh	r2, [r5, #12]
   4c8a4:	68a9      	ldr	r1, [r5, #8]
   4c8a6:	3008      	adds	r0, #8
   4c8a8:	f002 ffc4 	bl	4f834 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   4c8ac:	4628      	mov	r0, r5
   4c8ae:	f7f6 fe13 	bl	434d8 <net_buf_unref>
		break;
   4c8b2:	e7cb      	b.n	4c84c <bt_conn_recv+0x20>
	conn->rx = NULL;
   4c8b4:	2300      	movs	r3, #0
   4c8b6:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   4c8b8:	4620      	mov	r0, r4
   4c8ba:	2201      	movs	r2, #1
}
   4c8bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   4c8c0:	f000 baad 	b.w	4ce1e <bt_l2cap_recv>
}
   4c8c4:	bd70      	pop	{r4, r5, r6, pc}

0004c8c6 <bt_conn_ref>:
{
   4c8c6:	b510      	push	{r4, lr}
   4c8c8:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   4c8ca:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   4c8ce:	4610      	mov	r0, r2
   4c8d0:	f7ff ff4a 	bl	4c768 <atomic_get>
		if (!old) {
   4c8d4:	b180      	cbz	r0, 4c8f8 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   4c8d6:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   4c8da:	1c41      	adds	r1, r0, #1
   4c8dc:	e852 4f00 	ldrex	r4, [r2]
   4c8e0:	4284      	cmp	r4, r0
   4c8e2:	d104      	bne.n	4c8ee <bt_conn_ref+0x28>
   4c8e4:	e842 1c00 	strex	ip, r1, [r2]
   4c8e8:	f1bc 0f00 	cmp.w	ip, #0
   4c8ec:	d1f6      	bne.n	4c8dc <bt_conn_ref+0x16>
   4c8ee:	f3bf 8f5b 	dmb	ish
   4c8f2:	d1ec      	bne.n	4c8ce <bt_conn_ref+0x8>
}
   4c8f4:	4618      	mov	r0, r3
   4c8f6:	bd10      	pop	{r4, pc}
			return NULL;
   4c8f8:	4603      	mov	r3, r0
   4c8fa:	e7fb      	b.n	4c8f4 <bt_conn_ref+0x2e>

0004c8fc <bt_conn_unref>:
{
   4c8fc:	b508      	push	{r3, lr}
   4c8fe:	4603      	mov	r3, r0
	old = atomic_dec(&conn->ref);
   4c900:	30bc      	adds	r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   4c902:	f3bf 8f5b 	dmb	ish
   4c906:	e850 2f00 	ldrex	r2, [r0]
   4c90a:	3a01      	subs	r2, #1
   4c90c:	e840 2100 	strex	r1, r2, [r0]
   4c910:	2900      	cmp	r1, #0
   4c912:	d1f8      	bne.n	4c906 <bt_conn_unref+0xa>
   4c914:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   4c918:	789b      	ldrb	r3, [r3, #2]
   4c91a:	2b01      	cmp	r3, #1
   4c91c:	d106      	bne.n	4c92c <bt_conn_unref+0x30>
	    atomic_get(&conn->ref) == 0) {
   4c91e:	f7ff ff23 	bl	4c768 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   4c922:	b918      	cbnz	r0, 4c92c <bt_conn_unref+0x30>
}
   4c924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   4c928:	f7e2 b914 	b.w	2eb54 <bt_le_adv_resume>
}
   4c92c:	bd08      	pop	{r3, pc}

0004c92e <conn_lookup_handle>:
{
   4c92e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4c932:	4607      	mov	r7, r0
   4c934:	460e      	mov	r6, r1
   4c936:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   4c938:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   4c93a:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   4c93e:	42b4      	cmp	r4, r6
   4c940:	d103      	bne.n	4c94a <conn_lookup_handle+0x1c>
	return NULL;
   4c942:	2300      	movs	r3, #0
}
   4c944:	4618      	mov	r0, r3
   4c946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   4c94a:	fb09 7004 	mla	r0, r9, r4, r7
   4c94e:	f7ff ffba 	bl	4c8c6 <bt_conn_ref>
   4c952:	4603      	mov	r3, r0
		if (!conn) {
   4c954:	b158      	cbz	r0, 4c96e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   4c956:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   4c958:	2d01      	cmp	r5, #1
   4c95a:	d002      	beq.n	4c962 <conn_lookup_handle+0x34>
   4c95c:	3d07      	subs	r5, #7
   4c95e:	2d01      	cmp	r5, #1
   4c960:	d803      	bhi.n	4c96a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   4c962:	881a      	ldrh	r2, [r3, #0]
   4c964:	4542      	cmp	r2, r8
   4c966:	d0ed      	beq.n	4c944 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   4c968:	4618      	mov	r0, r3
   4c96a:	f7ff ffc7 	bl	4c8fc <bt_conn_unref>
	for (i = 0; i < size; i++) {
   4c96e:	3401      	adds	r4, #1
   4c970:	e7e5      	b.n	4c93e <conn_lookup_handle+0x10>

0004c972 <bt_conn_connected>:
{
   4c972:	b510      	push	{r4, lr}
   4c974:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   4c976:	f7e3 fb1f 	bl	2ffb8 <bt_l2cap_connected>
	notify_connected(conn);
   4c97a:	4620      	mov	r0, r4
}
   4c97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   4c980:	f7e2 bc94 	b.w	2f2ac <notify_connected>

0004c984 <bt_conn_le_start_encryption>:
{
   4c984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4c988:	4682      	mov	sl, r0
   4c98a:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   4c98c:	f242 0019 	movw	r0, #8217	; 0x2019
   4c990:	211c      	movs	r1, #28
{
   4c992:	9e08      	ldr	r6, [sp, #32]
   4c994:	4690      	mov	r8, r2
   4c996:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   4c998:	f7e0 febc 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   4c99c:	4605      	mov	r5, r0
   4c99e:	b340      	cbz	r0, 4c9f2 <bt_conn_le_start_encryption+0x6e>
	return net_buf_simple_add(&buf->b, len);
   4c9a0:	211c      	movs	r1, #28
   4c9a2:	3008      	adds	r0, #8
   4c9a4:	f002 ff40 	bl	4f828 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4c9a8:	f8ba 3000 	ldrh.w	r3, [sl]
   4c9ac:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   4c9ae:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   4c9b0:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   4c9b4:	4649      	mov	r1, r9
   4c9b6:	f7fe ff68 	bl	4b88a <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   4c9ba:	2202      	movs	r2, #2
   4c9bc:	4641      	mov	r1, r8
   4c9be:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   4c9c2:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   4c9c4:	f7fe ff61 	bl	4b88a <memcpy>
	memcpy(cp->ltk, ltk, len);
   4c9c8:	4632      	mov	r2, r6
   4c9ca:	4639      	mov	r1, r7
   4c9cc:	4620      	mov	r0, r4
   4c9ce:	f7fe ff5c 	bl	4b88a <memcpy>
	if (len < sizeof(cp->ltk)) {
   4c9d2:	2e0f      	cmp	r6, #15
   4c9d4:	d805      	bhi.n	4c9e2 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   4c9d6:	f1c6 0210 	rsb	r2, r6, #16
   4c9da:	2100      	movs	r1, #0
   4c9dc:	19a0      	adds	r0, r4, r6
   4c9de:	f7fe ff5f 	bl	4b8a0 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   4c9e2:	4629      	mov	r1, r5
   4c9e4:	2200      	movs	r2, #0
}
   4c9e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   4c9ea:	f242 0019 	movw	r0, #8217	; 0x2019
   4c9ee:	f7e0 beed 	b.w	2d7cc <bt_hci_cmd_send_sync>
}
   4c9f2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004c9fa <bt_conn_set_security>:
{
   4c9fa:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4c9fc:	7b43      	ldrb	r3, [r0, #13]
   4c9fe:	2b07      	cmp	r3, #7
{
   4ca00:	4604      	mov	r4, r0
   4ca02:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   4ca04:	d11c      	bne.n	4ca40 <bt_conn_set_security+0x46>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   4ca06:	7a43      	ldrb	r3, [r0, #9]
   4ca08:	428b      	cmp	r3, r1
   4ca0a:	d21c      	bcs.n	4ca46 <bt_conn_set_security+0x4c>
   4ca0c:	7a83      	ldrb	r3, [r0, #10]
   4ca0e:	428b      	cmp	r3, r1
   4ca10:	d219      	bcs.n	4ca46 <bt_conn_set_security+0x4c>
	if (val) {
   4ca12:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   4ca14:	f100 0004 	add.w	r0, r0, #4
   4ca18:	d50d      	bpl.n	4ca36 <bt_conn_set_security+0x3c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4ca1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
   4ca1e:	f7ff fea9 	bl	4c774 <atomic_or>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   4ca22:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   4ca26:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   4ca28:	4620      	mov	r0, r4
   4ca2a:	f002 fbdd 	bl	4f1e8 <bt_smp_start_security>
	if (err) {
   4ca2e:	b108      	cbz	r0, 4ca34 <bt_conn_set_security+0x3a>
		conn->required_sec_level = conn->sec_level;
   4ca30:	7a63      	ldrb	r3, [r4, #9]
   4ca32:	72a3      	strb	r3, [r4, #10]
}
   4ca34:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4ca36:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   4ca3a:	f7ff fe86 	bl	4c74a <atomic_and>
   4ca3e:	e7f0      	b.n	4ca22 <bt_conn_set_security+0x28>
		return -ENOTCONN;
   4ca40:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4ca44:	e7f6      	b.n	4ca34 <bt_conn_set_security+0x3a>
		return 0;
   4ca46:	2000      	movs	r0, #0
   4ca48:	e7f4      	b.n	4ca34 <bt_conn_set_security+0x3a>

0004ca4a <bt_conn_get_security>:
}
   4ca4a:	7a40      	ldrb	r0, [r0, #9]
   4ca4c:	4770      	bx	lr

0004ca4e <bt_conn_is_peer_addr_le>:
{
   4ca4e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   4ca50:	7a03      	ldrb	r3, [r0, #8]
   4ca52:	428b      	cmp	r3, r1
{
   4ca54:	4604      	mov	r4, r0
   4ca56:	4615      	mov	r5, r2
	if (id != conn->id) {
   4ca58:	d115      	bne.n	4ca86 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   4ca5a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   4ca5e:	2207      	movs	r2, #7
   4ca60:	4628      	mov	r0, r5
   4ca62:	f7fe ff02 	bl	4b86a <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   4ca66:	b180      	cbz	r0, 4ca8a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   4ca68:	78e3      	ldrb	r3, [r4, #3]
   4ca6a:	2207      	movs	r2, #7
   4ca6c:	b943      	cbnz	r3, 4ca80 <bt_conn_is_peer_addr_le+0x32>
   4ca6e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   4ca72:	4628      	mov	r0, r5
   4ca74:	f7fe fef9 	bl	4b86a <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   4ca78:	fab0 f080 	clz	r0, r0
   4ca7c:	0940      	lsrs	r0, r0, #5
}
   4ca7e:	bd38      	pop	{r3, r4, r5, pc}
   4ca80:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   4ca84:	e7f5      	b.n	4ca72 <bt_conn_is_peer_addr_le+0x24>
		return false;
   4ca86:	2000      	movs	r0, #0
   4ca88:	e7f9      	b.n	4ca7e <bt_conn_is_peer_addr_le+0x30>
		return true;
   4ca8a:	2001      	movs	r0, #1
   4ca8c:	e7f7      	b.n	4ca7e <bt_conn_is_peer_addr_le+0x30>

0004ca8e <bt_conn_exists_le>:
{
   4ca8e:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   4ca90:	f7e2 ff6c 	bl	2f96c <bt_conn_lookup_addr_le>
	if (conn) {
   4ca94:	b110      	cbz	r0, 4ca9c <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   4ca96:	f7ff ff31 	bl	4c8fc <bt_conn_unref>
		return true;
   4ca9a:	2001      	movs	r0, #1
}
   4ca9c:	bd08      	pop	{r3, pc}

0004ca9e <bt_conn_get_dst>:
}
   4ca9e:	3088      	adds	r0, #136	; 0x88
   4caa0:	4770      	bx	lr

0004caa2 <bt_conn_le_phy_update>:
{
   4caa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4caa4:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4caa6:	3004      	adds	r0, #4
   4caa8:	f7ff fe5e 	bl	4c768 <atomic_get>
   4caac:	460b      	mov	r3, r1
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   4caae:	04c1      	lsls	r1, r0, #19
   4cab0:	d51a      	bpl.n	4cae8 <bt_conn_le_phy_update+0x46>
	if ((param->options & BT_CONN_LE_PHY_OPT_CODED_S2) &&
   4cab2:	881c      	ldrh	r4, [r3, #0]
   4cab4:	f004 0203 	and.w	r2, r4, #3
   4cab8:	2a03      	cmp	r2, #3
   4caba:	d011      	beq.n	4cae0 <bt_conn_le_phy_update+0x3e>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S2) {
   4cabc:	07e2      	lsls	r2, r4, #31
   4cabe:	d411      	bmi.n	4cae4 <bt_conn_le_phy_update+0x42>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S8) {
   4cac0:	f004 0402 	and.w	r4, r4, #2
	if (param->pref_tx_phy == BT_GAP_LE_PHY_NONE) {
   4cac4:	789a      	ldrb	r2, [r3, #2]
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   4cac6:	78db      	ldrb	r3, [r3, #3]
	all_phys = 0U;
   4cac8:	fab2 f182 	clz	r1, r2
   4cacc:	0949      	lsrs	r1, r1, #5
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   4cace:	b90b      	cbnz	r3, 4cad4 <bt_conn_le_phy_update+0x32>
		all_phys |= BT_HCI_LE_PHY_RX_ANY;
   4cad0:	f041 0102 	orr.w	r1, r1, #2
	return bt_le_set_phy(conn, all_phys, param->pref_tx_phy,
   4cad4:	9400      	str	r4, [sp, #0]
   4cad6:	4628      	mov	r0, r5
   4cad8:	f7ff fa64 	bl	4bfa4 <bt_le_set_phy>
}
   4cadc:	b003      	add	sp, #12
   4cade:	bd30      	pop	{r4, r5, pc}
		phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   4cae0:	2400      	movs	r4, #0
   4cae2:	e7ef      	b.n	4cac4 <bt_conn_le_phy_update+0x22>
		phy_opts = BT_HCI_LE_PHY_CODED_S2;
   4cae4:	2401      	movs	r4, #1
   4cae6:	e7ed      	b.n	4cac4 <bt_conn_le_phy_update+0x22>
		return -EAGAIN;
   4cae8:	f06f 000a 	mvn.w	r0, #10
   4caec:	e7f6      	b.n	4cadc <bt_conn_le_phy_update+0x3a>

0004caee <bt_conn_disconnect>:
{
   4caee:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4caf0:	7883      	ldrb	r3, [r0, #2]
   4caf2:	2b01      	cmp	r3, #1
{
   4caf4:	4604      	mov	r4, r0
   4caf6:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4caf8:	d103      	bne.n	4cb02 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   4cafa:	2100      	movs	r1, #0
   4cafc:	3088      	adds	r0, #136	; 0x88
   4cafe:	f7e3 f85d 	bl	2fbbc <bt_le_set_auto_conn>
	switch (conn->state) {
   4cb02:	7b63      	ldrb	r3, [r4, #13]
   4cb04:	3b02      	subs	r3, #2
   4cb06:	2b06      	cmp	r3, #6
   4cb08:	d805      	bhi.n	4cb16 <bt_conn_disconnect+0x28>
   4cb0a:	e8df f003 	tbb	[pc, r3]
   4cb0e:	0408      	.short	0x0408
   4cb10:	1a120404 	.word	0x1a120404
   4cb14:	10          	.byte	0x10
   4cb15:	00          	.byte	0x00
   4cb16:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   4cb1a:	4628      	mov	r0, r5
   4cb1c:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4cb1e:	4620      	mov	r0, r4
		conn->err = reason;
   4cb20:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4cb22:	2100      	movs	r1, #0
   4cb24:	f7e2 fd20 	bl	2f568 <bt_conn_set_state>
			bt_le_scan_update(false);
   4cb28:	2000      	movs	r0, #0
   4cb2a:	f7e2 f8e5 	bl	2ecf8 <bt_le_scan_update>
		return 0;
   4cb2e:	2500      	movs	r5, #0
   4cb30:	e7f3      	b.n	4cb1a <bt_conn_disconnect+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   4cb32:	f104 0058 	add.w	r0, r4, #88	; 0x58
   4cb36:	f003 fe87 	bl	50848 <k_work_cancel_delayable>
}
   4cb3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   4cb3e:	f7e0 bf13 	b.w	2d968 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   4cb42:	4629      	mov	r1, r5
   4cb44:	8820      	ldrh	r0, [r4, #0]
   4cb46:	f7ff f9f5 	bl	4bf34 <bt_hci_disconnect>
	if (err) {
   4cb4a:	4605      	mov	r5, r0
   4cb4c:	2800      	cmp	r0, #0
   4cb4e:	d1e4      	bne.n	4cb1a <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   4cb50:	7b63      	ldrb	r3, [r4, #13]
   4cb52:	2b07      	cmp	r3, #7
   4cb54:	d1e1      	bne.n	4cb1a <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   4cb56:	2108      	movs	r1, #8
   4cb58:	4620      	mov	r0, r4
   4cb5a:	f7e2 fd05 	bl	2f568 <bt_conn_set_state>
   4cb5e:	e7dc      	b.n	4cb1a <bt_conn_disconnect+0x2c>

0004cb60 <bt_conn_le_conn_update>:
{
   4cb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4cb62:	4607      	mov	r7, r0
   4cb64:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   4cb66:	f242 0013 	movw	r0, #8211	; 0x2013
   4cb6a:	210e      	movs	r1, #14
   4cb6c:	f7e0 fdd2 	bl	2d714 <bt_hci_cmd_create>
	if (!buf) {
   4cb70:	4606      	mov	r6, r0
   4cb72:	b1d0      	cbz	r0, 4cbaa <bt_conn_le_conn_update+0x4a>
   4cb74:	210e      	movs	r1, #14
   4cb76:	3008      	adds	r0, #8
   4cb78:	f002 fe56 	bl	4f828 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   4cb7c:	220e      	movs	r2, #14
   4cb7e:	4604      	mov	r4, r0
   4cb80:	2100      	movs	r1, #0
   4cb82:	f7fe fe8d 	bl	4b8a0 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   4cb86:	883b      	ldrh	r3, [r7, #0]
   4cb88:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   4cb8a:	882b      	ldrh	r3, [r5, #0]
   4cb8c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   4cb8e:	886b      	ldrh	r3, [r5, #2]
   4cb90:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   4cb92:	88ab      	ldrh	r3, [r5, #4]
   4cb94:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   4cb96:	88eb      	ldrh	r3, [r5, #6]
   4cb98:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   4cb9a:	4631      	mov	r1, r6
   4cb9c:	2200      	movs	r2, #0
}
   4cb9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   4cba2:	f242 0013 	movw	r0, #8211	; 0x2013
   4cba6:	f7e0 be11 	b.w	2d7cc <bt_hci_cmd_send_sync>
}
   4cbaa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4cbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004cbb0 <l2cap_connected>:
}
   4cbb0:	4770      	bx	lr

0004cbb2 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   4cbb2:	3010      	adds	r0, #16
   4cbb4:	f003 be48 	b.w	50848 <k_work_cancel_delayable>

0004cbb8 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   4cbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4cbba:	4607      	mov	r7, r0
   4cbbc:	460e      	mov	r6, r1
   4cbbe:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   4cbc0:	2300      	movs	r3, #0
   4cbc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   4cbc6:	2104      	movs	r1, #4
   4cbc8:	2000      	movs	r0, #0
   4cbca:	f7e2 fda7 	bl	2f71c <bt_conn_create_pdu_timeout>
	if (!buf) {
   4cbce:	4604      	mov	r4, r0
   4cbd0:	b130      	cbz	r0, 4cbe0 <l2cap_create_le_sig_pdu.constprop.0+0x28>
   4cbd2:	2104      	movs	r1, #4
   4cbd4:	3008      	adds	r0, #8
   4cbd6:	f002 fe27 	bl	4f828 <net_buf_simple_add>
	hdr->code = code;
   4cbda:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   4cbdc:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   4cbde:	8045      	strh	r5, [r0, #2]
}
   4cbe0:	4620      	mov	r0, r4
   4cbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004cbe4 <bt_l2cap_chan_remove>:
	return list->head;
   4cbe4:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   4cbe6:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4cbe8:	b173      	cbz	r3, 4cc08 <bt_l2cap_chan_remove+0x24>
   4cbea:	3b08      	subs	r3, #8
   4cbec:	2500      	movs	r5, #0
	return node->next;
   4cbee:	461a      	mov	r2, r3
		if (chan == ch) {
   4cbf0:	4299      	cmp	r1, r3
   4cbf2:	f852 4f08 	ldr.w	r4, [r2, #8]!
   4cbf6:	d10d      	bne.n	4cc14 <bt_l2cap_chan_remove+0x30>
	return list->tail;
   4cbf8:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   4cbfa:	b935      	cbnz	r5, 4cc0a <bt_l2cap_chan_remove+0x26>
   4cbfc:	4291      	cmp	r1, r2
	list->head = node;
   4cbfe:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   4cc00:	d100      	bne.n	4cc04 <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   4cc02:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   4cc04:	2200      	movs	r2, #0
   4cc06:	609a      	str	r2, [r3, #8]
}
   4cc08:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   4cc0a:	4291      	cmp	r1, r2
	parent->next = child;
   4cc0c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   4cc0e:	bf08      	it	eq
   4cc10:	6545      	streq	r5, [r0, #84]	; 0x54
}
   4cc12:	e7f7      	b.n	4cc04 <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4cc14:	2c00      	cmp	r4, #0
   4cc16:	d0f7      	beq.n	4cc08 <bt_l2cap_chan_remove+0x24>
   4cc18:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   4cc1c:	4615      	mov	r5, r2
   4cc1e:	e7e6      	b.n	4cbee <bt_l2cap_chan_remove+0xa>

0004cc20 <bt_l2cap_chan_del>:
{
   4cc20:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   4cc22:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   4cc26:	4604      	mov	r4, r0
	if (!chan->conn) {
   4cc28:	b123      	cbz	r3, 4cc34 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   4cc2a:	686b      	ldr	r3, [r5, #4]
   4cc2c:	b103      	cbz	r3, 4cc30 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   4cc2e:	4798      	blx	r3
	chan->conn = NULL;
   4cc30:	2300      	movs	r3, #0
   4cc32:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   4cc34:	68e3      	ldr	r3, [r4, #12]
   4cc36:	b10b      	cbz	r3, 4cc3c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   4cc38:	4620      	mov	r0, r4
   4cc3a:	4798      	blx	r3
	if (ops->released) {
   4cc3c:	69eb      	ldr	r3, [r5, #28]
   4cc3e:	b11b      	cbz	r3, 4cc48 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   4cc40:	4620      	mov	r0, r4
}
   4cc42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   4cc46:	4718      	bx	r3
}
   4cc48:	bd70      	pop	{r4, r5, r6, pc}

0004cc4a <l2cap_rtx_timeout>:
{
   4cc4a:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   4cc4c:	f1a0 0410 	sub.w	r4, r0, #16
   4cc50:	4621      	mov	r1, r4
   4cc52:	f850 0c10 	ldr.w	r0, [r0, #-16]
   4cc56:	f7ff ffc5 	bl	4cbe4 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   4cc5a:	4620      	mov	r0, r4
}
   4cc5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   4cc60:	f7ff bfde 	b.w	4cc20 <bt_l2cap_chan_del>

0004cc64 <bt_l2cap_disconnected>:
	return list->head;
   4cc64:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   4cc66:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4cc68:	b160      	cbz	r0, 4cc84 <bt_l2cap_disconnected+0x20>
	return node->next;
   4cc6a:	f850 4908 	ldr.w	r4, [r0], #-8
   4cc6e:	b104      	cbz	r4, 4cc72 <bt_l2cap_disconnected+0xe>
   4cc70:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   4cc72:	f7ff ffd5 	bl	4cc20 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4cc76:	b12c      	cbz	r4, 4cc84 <bt_l2cap_disconnected+0x20>
   4cc78:	68a3      	ldr	r3, [r4, #8]
   4cc7a:	b103      	cbz	r3, 4cc7e <bt_l2cap_disconnected+0x1a>
   4cc7c:	3b08      	subs	r3, #8
{
   4cc7e:	4620      	mov	r0, r4
   4cc80:	461c      	mov	r4, r3
   4cc82:	e7f6      	b.n	4cc72 <bt_l2cap_disconnected+0xe>
}
   4cc84:	bd10      	pop	{r4, pc}

0004cc86 <bt_l2cap_security_changed>:
	return list->head;
   4cc86:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   4cc88:	b538      	push	{r3, r4, r5, lr}
   4cc8a:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4cc8c:	b178      	cbz	r0, 4ccae <bt_l2cap_security_changed+0x28>
	return node->next;
   4cc8e:	f850 4908 	ldr.w	r4, [r0], #-8
   4cc92:	b104      	cbz	r4, 4cc96 <bt_l2cap_security_changed+0x10>
   4cc94:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   4cc96:	6843      	ldr	r3, [r0, #4]
   4cc98:	689b      	ldr	r3, [r3, #8]
   4cc9a:	b10b      	cbz	r3, 4cca0 <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   4cc9c:	4629      	mov	r1, r5
   4cc9e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4cca0:	b12c      	cbz	r4, 4ccae <bt_l2cap_security_changed+0x28>
   4cca2:	68a3      	ldr	r3, [r4, #8]
   4cca4:	b103      	cbz	r3, 4cca8 <bt_l2cap_security_changed+0x22>
   4cca6:	3b08      	subs	r3, #8
{
   4cca8:	4620      	mov	r0, r4
   4ccaa:	461c      	mov	r4, r3
   4ccac:	e7f3      	b.n	4cc96 <bt_l2cap_security_changed+0x10>
}
   4ccae:	bd38      	pop	{r3, r4, r5, pc}

0004ccb0 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   4ccb0:	3104      	adds	r1, #4
   4ccb2:	f7e2 bd33 	b.w	2f71c <bt_conn_create_pdu_timeout>

0004ccb6 <bt_l2cap_send_cb>:
{
   4ccb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4ccba:	4614      	mov	r4, r2
   4ccbc:	4605      	mov	r5, r0
   4ccbe:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   4ccc0:	f102 0008 	add.w	r0, r2, #8
   4ccc4:	2104      	movs	r1, #4
   4ccc6:	461e      	mov	r6, r3
   4ccc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   4cccc:	f002 fdcd 	bl	4f86a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4ccd0:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   4ccd2:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4ccd4:	3a04      	subs	r2, #4
   4ccd6:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   4ccd8:	4643      	mov	r3, r8
   4ccda:	4632      	mov	r2, r6
   4ccdc:	4621      	mov	r1, r4
   4ccde:	4628      	mov	r0, r5
}
   4cce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   4cce4:	f7e2 bbc6 	b.w	2f474 <bt_conn_send_cb>

0004cce8 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   4cce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4ccea:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   4ccec:	2202      	movs	r2, #2
   4ccee:	2001      	movs	r0, #1
   4ccf0:	f7ff ff62 	bl	4cbb8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   4ccf4:	4604      	mov	r4, r0
   4ccf6:	b198      	cbz	r0, 4cd20 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   4ccf8:	2102      	movs	r1, #2
   4ccfa:	3008      	adds	r0, #8
   4ccfc:	f002 fd94 	bl	4f828 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   4cd00:	2300      	movs	r3, #0
   4cd02:	7003      	strb	r3, [r0, #0]
   4cd04:	7043      	strb	r3, [r0, #1]
   4cd06:	4622      	mov	r2, r4
   4cd08:	9300      	str	r3, [sp, #0]
   4cd0a:	2105      	movs	r1, #5
   4cd0c:	4628      	mov	r0, r5
   4cd0e:	f7ff ffd2 	bl	4ccb6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   4cd12:	b128      	cbz	r0, 4cd20 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   4cd14:	4620      	mov	r0, r4
}
   4cd16:	b003      	add	sp, #12
   4cd18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   4cd1c:	f7f6 bbdc 	b.w	434d8 <net_buf_unref>
}
   4cd20:	b003      	add	sp, #12
   4cd22:	bd30      	pop	{r4, r5, pc}

0004cd24 <l2cap_recv>:
{
   4cd24:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   4cd26:	898b      	ldrh	r3, [r1, #12]
   4cd28:	2b03      	cmp	r3, #3
{
   4cd2a:	b085      	sub	sp, #20
   4cd2c:	4605      	mov	r5, r0
   4cd2e:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   4cd30:	d911      	bls.n	4cd56 <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   4cd32:	2104      	movs	r1, #4
   4cd34:	f104 0008 	add.w	r0, r4, #8
   4cd38:	f002 fda7 	bl	4f88a <net_buf_simple_pull_mem>
	if (buf->len != len) {
   4cd3c:	89a3      	ldrh	r3, [r4, #12]
   4cd3e:	8846      	ldrh	r6, [r0, #2]
   4cd40:	429e      	cmp	r6, r3
   4cd42:	d108      	bne.n	4cd56 <l2cap_recv+0x32>
	if (!hdr->ident) {
   4cd44:	7841      	ldrb	r1, [r0, #1]
   4cd46:	b131      	cbz	r1, 4cd56 <l2cap_recv+0x32>
	switch (hdr->code) {
   4cd48:	7803      	ldrb	r3, [r0, #0]
   4cd4a:	2b12      	cmp	r3, #18
   4cd4c:	d006      	beq.n	4cd5c <l2cap_recv+0x38>
   4cd4e:	2b13      	cmp	r3, #19
   4cd50:	d001      	beq.n	4cd56 <l2cap_recv+0x32>
   4cd52:	2b01      	cmp	r3, #1
   4cd54:	d14b      	bne.n	4cdee <l2cap_recv+0xca>
}
   4cd56:	2000      	movs	r0, #0
   4cd58:	b005      	add	sp, #20
   4cd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   4cd5c:	2e07      	cmp	r6, #7
   4cd5e:	682d      	ldr	r5, [r5, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   4cd60:	68a2      	ldr	r2, [r4, #8]
	if (buf->len < sizeof(*req)) {
   4cd62:	d9f8      	bls.n	4cd56 <l2cap_recv+0x32>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   4cd64:	78ef      	ldrb	r7, [r5, #3]
   4cd66:	b11f      	cbz	r7, 4cd70 <l2cap_recv+0x4c>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   4cd68:	4628      	mov	r0, r5
		l2cap_send_reject(chan->conn, hdr->ident,
   4cd6a:	f7ff ffbd 	bl	4cce8 <l2cap_send_reject.constprop.0>
		break;
   4cd6e:	e7f2      	b.n	4cd56 <l2cap_recv+0x32>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   4cd70:	7850      	ldrb	r0, [r2, #1]
   4cd72:	7813      	ldrb	r3, [r2, #0]
   4cd74:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4cd78:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   4cd7c:	78d0      	ldrb	r0, [r2, #3]
   4cd7e:	7893      	ldrb	r3, [r2, #2]
   4cd80:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4cd84:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   4cd88:	7950      	ldrb	r0, [r2, #5]
   4cd8a:	7913      	ldrb	r3, [r2, #4]
   4cd8c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4cd90:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   4cd94:	7993      	ldrb	r3, [r2, #6]
   4cd96:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4cd98:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   4cd9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4cd9e:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   4cda0:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4cda4:	f7ff ff08 	bl	4cbb8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   4cda8:	4604      	mov	r4, r0
   4cdaa:	2800      	cmp	r0, #0
   4cdac:	d0d3      	beq.n	4cd56 <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   4cdae:	a902      	add	r1, sp, #8
   4cdb0:	4628      	mov	r0, r5
   4cdb2:	f7e2 fd29 	bl	2f808 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   4cdb6:	2102      	movs	r1, #2
   4cdb8:	4606      	mov	r6, r0
   4cdba:	f104 0008 	add.w	r0, r4, #8
   4cdbe:	f002 fd33 	bl	4f828 <net_buf_simple_add>
	if (accepted) {
   4cdc2:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   4cdc6:	b2db      	uxtb	r3, r3
   4cdc8:	8003      	strh	r3, [r0, #0]
   4cdca:	4622      	mov	r2, r4
   4cdcc:	9700      	str	r7, [sp, #0]
   4cdce:	463b      	mov	r3, r7
   4cdd0:	2105      	movs	r1, #5
   4cdd2:	4628      	mov	r0, r5
   4cdd4:	f7ff ff6f 	bl	4ccb6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   4cdd8:	b110      	cbz	r0, 4cde0 <l2cap_recv+0xbc>
		net_buf_unref(buf);
   4cdda:	4620      	mov	r0, r4
   4cddc:	f7f6 fb7c 	bl	434d8 <net_buf_unref>
	if (accepted) {
   4cde0:	2e00      	cmp	r6, #0
   4cde2:	d0b8      	beq.n	4cd56 <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   4cde4:	a902      	add	r1, sp, #8
   4cde6:	4628      	mov	r0, r5
   4cde8:	f7ff feba 	bl	4cb60 <bt_conn_le_conn_update>
   4cdec:	e7b3      	b.n	4cd56 <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   4cdee:	6828      	ldr	r0, [r5, #0]
   4cdf0:	e7bb      	b.n	4cd6a <l2cap_recv+0x46>

0004cdf2 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   4cdf2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4cdf4:	b138      	cbz	r0, 4ce06 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   4cdf6:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   4cdfa:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4cdfc:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   4ce00:	d001      	beq.n	4ce06 <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   4ce02:	6880      	ldr	r0, [r0, #8]
   4ce04:	e7f6      	b.n	4cdf4 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   4ce06:	4770      	bx	lr

0004ce08 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   4ce08:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4ce0a:	b138      	cbz	r0, 4ce1c <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   4ce0c:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   4ce10:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4ce12:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   4ce16:	d001      	beq.n	4ce1c <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   4ce18:	6880      	ldr	r0, [r0, #8]
   4ce1a:	e7f6      	b.n	4ce0a <bt_l2cap_le_lookup_rx_cid+0x2>
}
   4ce1c:	4770      	bx	lr

0004ce1e <bt_l2cap_recv>:
{
   4ce1e:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   4ce20:	898b      	ldrh	r3, [r1, #12]
   4ce22:	2b03      	cmp	r3, #3
{
   4ce24:	4605      	mov	r5, r0
   4ce26:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   4ce28:	d804      	bhi.n	4ce34 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   4ce2a:	4620      	mov	r0, r4
}
   4ce2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   4ce30:	f7f6 bb52 	b.w	434d8 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   4ce34:	2104      	movs	r1, #4
   4ce36:	f104 0008 	add.w	r0, r4, #8
   4ce3a:	f002 fd26 	bl	4f88a <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   4ce3e:	8841      	ldrh	r1, [r0, #2]
   4ce40:	4628      	mov	r0, r5
   4ce42:	f7ff ffe1 	bl	4ce08 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4ce46:	2800      	cmp	r0, #0
   4ce48:	d0ef      	beq.n	4ce2a <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   4ce4a:	6843      	ldr	r3, [r0, #4]
   4ce4c:	4621      	mov	r1, r4
   4ce4e:	691b      	ldr	r3, [r3, #16]
   4ce50:	4798      	blx	r3
   4ce52:	e7ea      	b.n	4ce2a <bt_l2cap_recv+0xc>

0004ce54 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   4ce54:	4770      	bx	lr

0004ce56 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   4ce56:	4603      	mov	r3, r0
	return list->head;
   4ce58:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   4ce5a:	b128      	cbz	r0, 4ce68 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4ce5c:	6859      	ldr	r1, [r3, #4]
	return node->next;
   4ce5e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   4ce60:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4ce62:	4288      	cmp	r0, r1
	list->tail = node;
   4ce64:	bf08      	it	eq
   4ce66:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   4ce68:	4770      	bx	lr

0004ce6a <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   4ce6a:	4603      	mov	r3, r0
	size_t bytes = 0;
   4ce6c:	2000      	movs	r0, #0

	while (buf) {
   4ce6e:	b903      	cbnz	r3, 4ce72 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   4ce70:	4770      	bx	lr
		bytes += buf->len;
   4ce72:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   4ce74:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   4ce76:	4410      	add	r0, r2
		buf = buf->frags;
   4ce78:	e7f9      	b.n	4ce6e <net_buf_frags_len+0x4>

0004ce7a <att_sent>:
	if (chan->ops->sent) {
   4ce7a:	684b      	ldr	r3, [r1, #4]
   4ce7c:	695b      	ldr	r3, [r3, #20]
{
   4ce7e:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   4ce80:	b103      	cbz	r3, 4ce84 <att_sent+0xa>
		chan->ops->sent(chan);
   4ce82:	4718      	bx	r3
}
   4ce84:	4770      	bx	lr

0004ce86 <attr_read_type_cb>:
{
   4ce86:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   4ce88:	68d4      	ldr	r4, [r2, #12]
   4ce8a:	7823      	ldrb	r3, [r4, #0]
   4ce8c:	3102      	adds	r1, #2
   4ce8e:	b913      	cbnz	r3, 4ce96 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   4ce90:	7021      	strb	r1, [r4, #0]
	return true;
   4ce92:	2001      	movs	r0, #1
   4ce94:	e006      	b.n	4cea4 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   4ce96:	428b      	cmp	r3, r1
   4ce98:	d0fb      	beq.n	4ce92 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   4ce9a:	8983      	ldrh	r3, [r0, #12]
   4ce9c:	3b02      	subs	r3, #2
   4ce9e:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   4cea0:	2000      	movs	r0, #0
   4cea2:	6110      	str	r0, [r2, #16]
}
   4cea4:	bd10      	pop	{r4, pc}

0004cea6 <att_prepare_write_req>:
}
   4cea6:	2006      	movs	r0, #6
   4cea8:	4770      	bx	lr

0004ceaa <att_notify_mult>:
{
   4ceaa:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   4ceac:	6803      	ldr	r3, [r0, #0]
   4ceae:	898a      	ldrh	r2, [r1, #12]
   4ceb0:	6818      	ldr	r0, [r3, #0]
   4ceb2:	6889      	ldr	r1, [r1, #8]
   4ceb4:	f001 fca7 	bl	4e806 <bt_gatt_mult_notification>
}
   4ceb8:	2000      	movs	r0, #0
   4ceba:	bd08      	pop	{r3, pc}

0004cebc <att_notify>:
{
   4cebc:	b538      	push	{r3, r4, r5, lr}
   4cebe:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   4cec0:	f101 0008 	add.w	r0, r1, #8
   4cec4:	460c      	mov	r4, r1
   4cec6:	f002 fcf0 	bl	4f8aa <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   4ceca:	682d      	ldr	r5, [r5, #0]
   4cecc:	89a3      	ldrh	r3, [r4, #12]
   4cece:	68a2      	ldr	r2, [r4, #8]
   4ced0:	4601      	mov	r1, r0
   4ced2:	6828      	ldr	r0, [r5, #0]
   4ced4:	f001 fc6b 	bl	4e7ae <bt_gatt_notification>
}
   4ced8:	2000      	movs	r0, #0
   4ceda:	bd38      	pop	{r3, r4, r5, pc}

0004cedc <att_chan_mtu_updated>:
{
   4cedc:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   4cede:	6806      	ldr	r6, [r0, #0]
	return list->head;
   4cee0:	6a72      	ldr	r2, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4cee2:	b1e2      	cbz	r2, 4cf1e <att_chan_mtu_updated+0x42>
	return node->next;
   4cee4:	6813      	ldr	r3, [r2, #0]
   4cee6:	f5a2 75a2 	sub.w	r5, r2, #324	; 0x144
   4ceea:	b10b      	cbz	r3, 4cef0 <att_chan_mtu_updated+0x14>
   4ceec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   4cef0:	2200      	movs	r2, #0
   4cef2:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   4cef4:	42a8      	cmp	r0, r5
   4cef6:	d009      	beq.n	4cf0c <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   4cef8:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   4cefc:	42a1      	cmp	r1, r4
   4cefe:	bf38      	it	cc
   4cf00:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   4cf02:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   4cf06:	42a2      	cmp	r2, r4
   4cf08:	bf38      	it	cc
   4cf0a:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4cf0c:	b143      	cbz	r3, 4cf20 <att_chan_mtu_updated+0x44>
   4cf0e:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
   4cf12:	b10c      	cbz	r4, 4cf18 <att_chan_mtu_updated+0x3c>
   4cf14:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   4cf18:	461d      	mov	r5, r3
   4cf1a:	4623      	mov	r3, r4
   4cf1c:	e7ea      	b.n	4cef4 <att_chan_mtu_updated+0x18>
   4cf1e:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4cf20:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   4cf24:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4cf28:	428b      	cmp	r3, r1
   4cf2a:	d801      	bhi.n	4cf30 <att_chan_mtu_updated+0x54>
   4cf2c:	4290      	cmp	r0, r2
   4cf2e:	d909      	bls.n	4cf44 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   4cf30:	4282      	cmp	r2, r0
   4cf32:	bf38      	it	cc
   4cf34:	4602      	movcc	r2, r0
   4cf36:	4299      	cmp	r1, r3
   4cf38:	6830      	ldr	r0, [r6, #0]
   4cf3a:	bf38      	it	cc
   4cf3c:	4619      	movcc	r1, r3
}
   4cf3e:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   4cf40:	f7e5 b928 	b.w	32194 <bt_gatt_att_max_mtu_changed>
}
   4cf44:	bc70      	pop	{r4, r5, r6}
   4cf46:	4770      	bx	lr

0004cf48 <bt_gatt_foreach_attr>:
{
   4cf48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   4cf4a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   4cf4e:	2300      	movs	r3, #0
   4cf50:	9300      	str	r3, [sp, #0]
   4cf52:	461a      	mov	r2, r3
   4cf54:	f7e4 fa9c 	bl	31490 <bt_gatt_foreach_attr_type>
}
   4cf58:	b005      	add	sp, #20
   4cf5a:	f85d fb04 	ldr.w	pc, [sp], #4

0004cf5e <find_type_cb>:
{
   4cf5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   4cf62:	f8d2 9000 	ldr.w	r9, [r2]
{
   4cf66:	b091      	sub	sp, #68	; 0x44
   4cf68:	4607      	mov	r7, r0
   4cf6a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4cf6c:	2500      	movs	r5, #0
   4cf6e:	f642 0301 	movw	r3, #10241	; 0x2801
   4cf72:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   4cf74:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4cf78:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   4cf7c:	a90b      	add	r1, sp, #44	; 0x2c
{
   4cf7e:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4cf80:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   4cf84:	f7fe fd6f 	bl	4ba66 <bt_uuid_cmp>
   4cf88:	2800      	cmp	r0, #0
   4cf8a:	d079      	beq.n	4d080 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   4cf8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   4cf90:	6838      	ldr	r0, [r7, #0]
   4cf92:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   4cf96:	a90b      	add	r1, sp, #44	; 0x2c
   4cf98:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   4cf9c:	f7fe fd63 	bl	4ba66 <bt_uuid_cmp>
   4cfa0:	b138      	cbz	r0, 4cfb2 <find_type_cb+0x54>
		if (data->group &&
   4cfa2:	68a3      	ldr	r3, [r4, #8]
   4cfa4:	b11b      	cbz	r3, 4cfae <find_type_cb+0x50>
   4cfa6:	885a      	ldrh	r2, [r3, #2]
   4cfa8:	42b2      	cmp	r2, r6
   4cfaa:	d200      	bcs.n	4cfae <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   4cfac:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   4cfae:	2001      	movs	r0, #1
   4cfb0:	e009      	b.n	4cfc6 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   4cfb2:	6861      	ldr	r1, [r4, #4]
   4cfb4:	4608      	mov	r0, r1
   4cfb6:	f7ff ff58 	bl	4ce6a <net_buf_frags_len>
   4cfba:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   4cfbe:	1a1b      	subs	r3, r3, r0
   4cfc0:	2b03      	cmp	r3, #3
   4cfc2:	d803      	bhi.n	4cfcc <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   4cfc4:	2000      	movs	r0, #0
}
   4cfc6:	b011      	add	sp, #68	; 0x44
   4cfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   4cfcc:	4608      	mov	r0, r1
   4cfce:	f002 fbfd 	bl	4f7cc <net_buf_frag_last>
   4cfd2:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   4cfd4:	6860      	ldr	r0, [r4, #4]
   4cfd6:	f7ff ff48 	bl	4ce6a <net_buf_frags_len>
   4cfda:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   4cfde:	f105 0b08 	add.w	fp, r5, #8
   4cfe2:	ebaa 0a00 	sub.w	sl, sl, r0
   4cfe6:	4658      	mov	r0, fp
   4cfe8:	f002 fc6b 	bl	4f8c2 <net_buf_simple_tailroom>
   4cfec:	4582      	cmp	sl, r0
   4cfee:	d23f      	bcs.n	4d070 <find_type_cb+0x112>
   4cff0:	6860      	ldr	r0, [r4, #4]
   4cff2:	f7ff ff3a 	bl	4ce6a <net_buf_frags_len>
   4cff6:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   4cffa:	1a18      	subs	r0, r3, r0
	if (!len) {
   4cffc:	b970      	cbnz	r0, 4d01c <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   4cffe:	6863      	ldr	r3, [r4, #4]
   4d000:	7998      	ldrb	r0, [r3, #6]
   4d002:	f7f6 f9a5 	bl	43350 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   4d006:	2200      	movs	r2, #0
   4d008:	2300      	movs	r3, #0
   4d00a:	f002 fba5 	bl	4f758 <net_buf_alloc_fixed>
		if (!frag) {
   4d00e:	4605      	mov	r5, r0
   4d010:	2800      	cmp	r0, #0
   4d012:	d0d7      	beq.n	4cfc4 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   4d014:	4601      	mov	r1, r0
   4d016:	6860      	ldr	r0, [r4, #4]
   4d018:	f002 fbe9 	bl	4f7ee <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   4d01c:	2300      	movs	r3, #0
   4d01e:	9300      	str	r3, [sp, #0]
   4d020:	f8d7 9004 	ldr.w	r9, [r7, #4]
   4d024:	4639      	mov	r1, r7
   4d026:	2310      	movs	r3, #16
   4d028:	aa02      	add	r2, sp, #8
   4d02a:	4640      	mov	r0, r8
   4d02c:	47c8      	blx	r9
	if (read < 0) {
   4d02e:	1e07      	subs	r7, r0, #0
   4d030:	db26      	blt.n	4d080 <find_type_cb+0x122>
	if (read != data->value_len) {
   4d032:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   4d034:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   4d036:	42ba      	cmp	r2, r7
   4d038:	d01e      	beq.n	4d078 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   4d03a:	4601      	mov	r1, r0
   4d03c:	a80b      	add	r0, sp, #44	; 0x2c
   4d03e:	f7fe fd40 	bl	4bac2 <bt_uuid_create>
   4d042:	b1e8      	cbz	r0, 4d080 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   4d044:	b2fa      	uxtb	r2, r7
   4d046:	a902      	add	r1, sp, #8
   4d048:	a806      	add	r0, sp, #24
   4d04a:	f7fe fd3a 	bl	4bac2 <bt_uuid_create>
   4d04e:	b1b8      	cbz	r0, 4d080 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   4d050:	a906      	add	r1, sp, #24
   4d052:	a80b      	add	r0, sp, #44	; 0x2c
   4d054:	f7fe fd07 	bl	4ba66 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   4d058:	b990      	cbnz	r0, 4d080 <find_type_cb+0x122>
	data->err = 0x00;
   4d05a:	2300      	movs	r3, #0
   4d05c:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   4d05e:	2104      	movs	r1, #4
   4d060:	f105 0008 	add.w	r0, r5, #8
   4d064:	f002 fbe0 	bl	4f828 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   4d068:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   4d06a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   4d06c:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   4d06e:	e79e      	b.n	4cfae <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   4d070:	4658      	mov	r0, fp
   4d072:	f002 fc26 	bl	4f8c2 <net_buf_simple_tailroom>
   4d076:	e7c1      	b.n	4cffc <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   4d078:	a902      	add	r1, sp, #8
   4d07a:	f7fe fbf6 	bl	4b86a <memcmp>
   4d07e:	e7eb      	b.n	4d058 <find_type_cb+0xfa>
	data->group = NULL;
   4d080:	2300      	movs	r3, #0
   4d082:	60a3      	str	r3, [r4, #8]
   4d084:	e793      	b.n	4cfae <find_type_cb+0x50>

0004d086 <find_info_cb>:
{
   4d086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   4d088:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   4d08a:	6817      	ldr	r7, [r2, #0]
{
   4d08c:	4605      	mov	r5, r0
   4d08e:	460e      	mov	r6, r1
   4d090:	4614      	mov	r4, r2
	if (!data->rsp) {
   4d092:	b963      	cbnz	r3, 4d0ae <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   4d094:	6850      	ldr	r0, [r2, #4]
   4d096:	2101      	movs	r1, #1
   4d098:	3008      	adds	r0, #8
   4d09a:	f002 fbc5 	bl	4f828 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   4d09e:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   4d0a0:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   4d0a2:	781b      	ldrb	r3, [r3, #0]
   4d0a4:	2b00      	cmp	r3, #0
   4d0a6:	bf0c      	ite	eq
   4d0a8:	2301      	moveq	r3, #1
   4d0aa:	2302      	movne	r3, #2
   4d0ac:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   4d0ae:	68a3      	ldr	r3, [r4, #8]
   4d0b0:	781b      	ldrb	r3, [r3, #0]
   4d0b2:	2b01      	cmp	r3, #1
   4d0b4:	d003      	beq.n	4d0be <find_info_cb+0x38>
   4d0b6:	2b02      	cmp	r3, #2
   4d0b8:	d019      	beq.n	4d0ee <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   4d0ba:	2000      	movs	r0, #0
   4d0bc:	e016      	b.n	4d0ec <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   4d0be:	682b      	ldr	r3, [r5, #0]
   4d0c0:	781b      	ldrb	r3, [r3, #0]
   4d0c2:	2b00      	cmp	r3, #0
   4d0c4:	d1f9      	bne.n	4d0ba <find_info_cb+0x34>
   4d0c6:	6860      	ldr	r0, [r4, #4]
   4d0c8:	2104      	movs	r1, #4
   4d0ca:	3008      	adds	r0, #8
   4d0cc:	f002 fbac 	bl	4f828 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4d0d0:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   4d0d2:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4d0d4:	885b      	ldrh	r3, [r3, #2]
   4d0d6:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   4d0d8:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   4d0da:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   4d0dc:	899b      	ldrh	r3, [r3, #12]
   4d0de:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   4d0e2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   4d0e4:	2804      	cmp	r0, #4
   4d0e6:	bf94      	ite	ls
   4d0e8:	2000      	movls	r0, #0
   4d0ea:	2001      	movhi	r0, #1
}
   4d0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   4d0ee:	682b      	ldr	r3, [r5, #0]
   4d0f0:	781b      	ldrb	r3, [r3, #0]
   4d0f2:	2b02      	cmp	r3, #2
   4d0f4:	d1e1      	bne.n	4d0ba <find_info_cb+0x34>
   4d0f6:	6860      	ldr	r0, [r4, #4]
   4d0f8:	2112      	movs	r1, #18
   4d0fa:	3008      	adds	r0, #8
   4d0fc:	f002 fb94 	bl	4f828 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4d100:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   4d102:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4d104:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   4d106:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4d10a:	3101      	adds	r1, #1
   4d10c:	f7fe fbbd 	bl	4b88a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   4d110:	6863      	ldr	r3, [r4, #4]
   4d112:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   4d116:	899b      	ldrh	r3, [r3, #12]
   4d118:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   4d11a:	2812      	cmp	r0, #18
   4d11c:	e7e3      	b.n	4d0e6 <find_info_cb+0x60>

0004d11e <attr_read_group_cb>:
	if (!data->rsp->len) {
   4d11e:	68d0      	ldr	r0, [r2, #12]
   4d120:	7803      	ldrb	r3, [r0, #0]
   4d122:	3104      	adds	r1, #4
   4d124:	b913      	cbnz	r3, 4d12c <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   4d126:	7001      	strb	r1, [r0, #0]
	return true;
   4d128:	2001      	movs	r0, #1
}
   4d12a:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   4d12c:	428b      	cmp	r3, r1
   4d12e:	d0fb      	beq.n	4d128 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   4d130:	6891      	ldr	r1, [r2, #8]
   4d132:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   4d134:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   4d136:	3b04      	subs	r3, #4
   4d138:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   4d13a:	6110      	str	r0, [r2, #16]
		return false;
   4d13c:	4770      	bx	lr

0004d13e <att_get>:
{
   4d13e:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4d140:	7b43      	ldrb	r3, [r0, #13]
   4d142:	2b07      	cmp	r3, #7
   4d144:	d001      	beq.n	4d14a <att_get+0xc>
		return NULL;
   4d146:	2000      	movs	r0, #0
}
   4d148:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   4d14a:	2104      	movs	r1, #4
   4d14c:	f7ff fe5c 	bl	4ce08 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4d150:	2800      	cmp	r0, #0
   4d152:	d0f8      	beq.n	4d146 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4d154:	f3bf 8f5b 	dmb	ish
   4d158:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   4d15c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   4d160:	075b      	lsls	r3, r3, #29
   4d162:	d4f0      	bmi.n	4d146 <att_get+0x8>
	return att_chan->att;
   4d164:	f850 0c08 	ldr.w	r0, [r0, #-8]
   4d168:	e7ee      	b.n	4d148 <att_get+0xa>

0004d16a <chan_req_sent>:
	if (chan->req) {
   4d16a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   4d16e:	b133      	cbz	r3, 4d17e <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   4d170:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4d174:	2300      	movs	r3, #0
   4d176:	f500 7088 	add.w	r0, r0, #272	; 0x110
   4d17a:	f7fa bf51 	b.w	48020 <k_work_reschedule>
}
   4d17e:	4770      	bx	lr

0004d180 <write_cb>:
{
   4d180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4d182:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   4d184:	4601      	mov	r1, r0
{
   4d186:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   4d188:	222a      	movs	r2, #42	; 0x2a
   4d18a:	6820      	ldr	r0, [r4, #0]
   4d18c:	f000 fff3 	bl	4e176 <bt_gatt_check_perm>
   4d190:	4605      	mov	r5, r0
   4d192:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   4d194:	bb28      	cbnz	r0, 4d1e2 <write_cb+0x62>
	if (!data->req) {
   4d196:	7a23      	ldrb	r3, [r4, #8]
   4d198:	b1b3      	cbz	r3, 4d1c8 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   4d19a:	f1a3 0218 	sub.w	r2, r3, #24
   4d19e:	4253      	negs	r3, r2
   4d1a0:	4153      	adcs	r3, r2
   4d1a2:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   4d1a4:	9301      	str	r3, [sp, #4]
   4d1a6:	8a63      	ldrh	r3, [r4, #18]
   4d1a8:	9300      	str	r3, [sp, #0]
   4d1aa:	68b7      	ldr	r7, [r6, #8]
   4d1ac:	8a23      	ldrh	r3, [r4, #16]
   4d1ae:	68e2      	ldr	r2, [r4, #12]
   4d1b0:	6820      	ldr	r0, [r4, #0]
   4d1b2:	4631      	mov	r1, r6
   4d1b4:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   4d1b6:	1e03      	subs	r3, r0, #0
   4d1b8:	db08      	blt.n	4d1cc <write_cb+0x4c>
   4d1ba:	8a22      	ldrh	r2, [r4, #16]
   4d1bc:	4293      	cmp	r3, r2
   4d1be:	d10e      	bne.n	4d1de <write_cb+0x5e>
	data->err = 0U;
   4d1c0:	2300      	movs	r3, #0
   4d1c2:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   4d1c4:	2501      	movs	r5, #1
   4d1c6:	e007      	b.n	4d1d8 <write_cb+0x58>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   4d1c8:	2302      	movs	r3, #2
   4d1ca:	e7eb      	b.n	4d1a4 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   4d1cc:	f113 0fff 	cmn.w	r3, #255	; 0xff
   4d1d0:	d305      	bcc.n	4d1de <write_cb+0x5e>
		return -err;
   4d1d2:	425b      	negs	r3, r3
   4d1d4:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   4d1d6:	7523      	strb	r3, [r4, #20]
}
   4d1d8:	4628      	mov	r0, r5
   4d1da:	b003      	add	sp, #12
   4d1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   4d1de:	230e      	movs	r3, #14
   4d1e0:	e7f9      	b.n	4d1d6 <write_cb+0x56>
		return BT_GATT_ITER_STOP;
   4d1e2:	2500      	movs	r5, #0
   4d1e4:	e7f8      	b.n	4d1d8 <write_cb+0x58>

0004d1e6 <att_chan_read>:
{
   4d1e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4d1ea:	4680      	mov	r8, r0
   4d1ec:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4d1ee:	4610      	mov	r0, r2
{
   4d1f0:	4699      	mov	r9, r3
   4d1f2:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4d1f4:	f7ff fe39 	bl	4ce6a <net_buf_frags_len>
   4d1f8:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   4d1fc:	4283      	cmp	r3, r0
{
   4d1fe:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4d200:	d97a      	bls.n	4d2f8 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   4d202:	f8d8 3008 	ldr.w	r3, [r8, #8]
   4d206:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   4d208:	4630      	mov	r0, r6
   4d20a:	f002 fadf 	bl	4f7cc <net_buf_frag_last>
	size_t len, total = 0;
   4d20e:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   4d212:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   4d214:	4630      	mov	r0, r6
   4d216:	f7ff fe28 	bl	4ce6a <net_buf_frags_len>
   4d21a:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   4d21e:	f105 0708 	add.w	r7, r5, #8
   4d222:	1a24      	subs	r4, r4, r0
   4d224:	4638      	mov	r0, r7
   4d226:	f002 fb4c 	bl	4f8c2 <net_buf_simple_tailroom>
   4d22a:	4284      	cmp	r4, r0
   4d22c:	d211      	bcs.n	4d252 <att_chan_read+0x6c>
   4d22e:	4630      	mov	r0, r6
   4d230:	f7ff fe1b 	bl	4ce6a <net_buf_frags_len>
   4d234:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4d238:	1a24      	subs	r4, r4, r0
		if (!len) {
   4d23a:	bb34      	cbnz	r4, 4d28a <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   4d23c:	79b0      	ldrb	r0, [r6, #6]
   4d23e:	f7f6 f887 	bl	43350 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   4d242:	2200      	movs	r2, #0
   4d244:	2300      	movs	r3, #0
   4d246:	f002 fa87 	bl	4f758 <net_buf_alloc_fixed>
			if (!frag) {
   4d24a:	4605      	mov	r5, r0
   4d24c:	b930      	cbnz	r0, 4d25c <att_chan_read+0x76>
	return total;
   4d24e:	4657      	mov	r7, sl
   4d250:	e02c      	b.n	4d2ac <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   4d252:	4638      	mov	r0, r7
   4d254:	f002 fb35 	bl	4f8c2 <net_buf_simple_tailroom>
   4d258:	4604      	mov	r4, r0
   4d25a:	e7ee      	b.n	4d23a <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   4d25c:	4601      	mov	r1, r0
   4d25e:	4630      	mov	r0, r6
   4d260:	f002 fac5 	bl	4f7ee <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   4d264:	4630      	mov	r0, r6
   4d266:	f7ff fe00 	bl	4ce6a <net_buf_frags_len>
   4d26a:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4d26e:	f105 0708 	add.w	r7, r5, #8
   4d272:	1a24      	subs	r4, r4, r0
   4d274:	4638      	mov	r0, r7
   4d276:	f002 fb24 	bl	4f8c2 <net_buf_simple_tailroom>
   4d27a:	4284      	cmp	r4, r0
   4d27c:	d21a      	bcs.n	4d2b4 <att_chan_read+0xce>
   4d27e:	4630      	mov	r0, r6
   4d280:	f7ff fdf3 	bl	4ce6a <net_buf_frags_len>
   4d284:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4d288:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   4d28a:	68a9      	ldr	r1, [r5, #8]
   4d28c:	89aa      	ldrh	r2, [r5, #12]
   4d28e:	f8db 7004 	ldr.w	r7, [fp, #4]
   4d292:	9803      	ldr	r0, [sp, #12]
   4d294:	f8cd 9000 	str.w	r9, [sp]
   4d298:	440a      	add	r2, r1
   4d29a:	b2a3      	uxth	r3, r4
   4d29c:	4659      	mov	r1, fp
   4d29e:	47b8      	blx	r7
		if (read < 0) {
   4d2a0:	1e07      	subs	r7, r0, #0
   4d2a2:	da0c      	bge.n	4d2be <att_chan_read+0xd8>
				return total;
   4d2a4:	f1ba 0f00 	cmp.w	sl, #0
   4d2a8:	bf18      	it	ne
   4d2aa:	4657      	movne	r7, sl
}
   4d2ac:	4638      	mov	r0, r7
   4d2ae:	b005      	add	sp, #20
   4d2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4d2b4:	4638      	mov	r0, r7
   4d2b6:	f002 fb04 	bl	4f8c2 <net_buf_simple_tailroom>
   4d2ba:	4604      	mov	r4, r0
   4d2bc:	e7e5      	b.n	4d28a <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   4d2be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4d2c0:	b993      	cbnz	r3, 4d2e8 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   4d2c2:	4639      	mov	r1, r7
   4d2c4:	f105 0008 	add.w	r0, r5, #8
   4d2c8:	f002 faae 	bl	4f828 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4d2cc:	4630      	mov	r0, r6
   4d2ce:	f7ff fdcc 	bl	4ce6a <net_buf_frags_len>
   4d2d2:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   4d2d6:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4d2d8:	4283      	cmp	r3, r0
		total += read;
   4d2da:	44ba      	add	sl, r7
		offset += read;
   4d2dc:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4d2e0:	d9b5      	bls.n	4d24e <att_chan_read+0x68>
   4d2e2:	42a7      	cmp	r7, r4
   4d2e4:	d096      	beq.n	4d214 <att_chan_read+0x2e>
   4d2e6:	e7b2      	b.n	4d24e <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   4d2e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   4d2ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4d2ec:	4639      	mov	r1, r7
   4d2ee:	4628      	mov	r0, r5
   4d2f0:	4798      	blx	r3
   4d2f2:	2800      	cmp	r0, #0
   4d2f4:	d1e5      	bne.n	4d2c2 <att_chan_read+0xdc>
   4d2f6:	e7aa      	b.n	4d24e <att_chan_read+0x68>
		return 0;
   4d2f8:	2700      	movs	r7, #0
   4d2fa:	e7d7      	b.n	4d2ac <att_chan_read+0xc6>

0004d2fc <chan_req_send>:
{
   4d2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4d2fe:	688f      	ldr	r7, [r1, #8]
{
   4d300:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4d302:	4638      	mov	r0, r7
   4d304:	f7ff fdb1 	bl	4ce6a <net_buf_frags_len>
   4d308:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   4d30c:	4283      	cmp	r3, r0
{
   4d30e:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4d310:	d30d      	bcc.n	4d32e <chan_req_send+0x32>
	req->buf = NULL;
   4d312:	2600      	movs	r6, #0
	chan->req = req;
   4d314:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   4d318:	4632      	mov	r2, r6
	req->buf = NULL;
   4d31a:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   4d31c:	4620      	mov	r0, r4
   4d31e:	4639      	mov	r1, r7
   4d320:	f7e2 ffc6 	bl	302b0 <chan_send>
	if (err) {
   4d324:	b110      	cbz	r0, 4d32c <chan_req_send+0x30>
		req->buf = buf;
   4d326:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   4d328:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   4d32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   4d32e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   4d332:	e7fb      	b.n	4d32c <chan_req_send+0x30>

0004d334 <process_queue>:
{
   4d334:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   4d336:	2200      	movs	r2, #0
{
   4d338:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   4d33a:	2300      	movs	r3, #0
   4d33c:	4608      	mov	r0, r1
{
   4d33e:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   4d340:	f002 fa0f 	bl	4f762 <net_buf_get>
	if (buf) {
   4d344:	4605      	mov	r5, r0
   4d346:	b160      	cbz	r0, 4d362 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   4d348:	4601      	mov	r1, r0
   4d34a:	2200      	movs	r2, #0
   4d34c:	4620      	mov	r0, r4
   4d34e:	f7e2 ffaf 	bl	302b0 <chan_send>
		if (err) {
   4d352:	4604      	mov	r4, r0
   4d354:	b118      	cbz	r0, 4d35e <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   4d356:	4629      	mov	r1, r5
   4d358:	4630      	mov	r0, r6
   4d35a:	f003 f97d 	bl	50658 <k_queue_prepend>
}
   4d35e:	4620      	mov	r0, r4
   4d360:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   4d362:	f06f 0401 	mvn.w	r4, #1
   4d366:	e7fa      	b.n	4d35e <process_queue+0x2a>

0004d368 <bt_att_chan_send_rsp>:
{
   4d368:	b538      	push	{r3, r4, r5, lr}
   4d36a:	4604      	mov	r4, r0
   4d36c:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   4d36e:	f7e2 ff9f 	bl	302b0 <chan_send>
	if (err) {
   4d372:	b130      	cbz	r0, 4d382 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   4d374:	4629      	mov	r1, r5
   4d376:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   4d37a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   4d37e:	f002 ba14 	b.w	4f7aa <net_buf_put>
}
   4d382:	bd38      	pop	{r3, r4, r5, pc}

0004d384 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d384:	b510      	push	{r4, lr}
	return list->head;
   4d386:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d388:	2200      	movs	r2, #0
   4d38a:	b153      	cbz	r3, 4d3a2 <sys_slist_find_and_remove.isra.0+0x1e>
   4d38c:	428b      	cmp	r3, r1
   4d38e:	d10e      	bne.n	4d3ae <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   4d390:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   4d392:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   4d394:	b932      	cbnz	r2, 4d3a4 <sys_slist_find_and_remove.isra.0+0x20>
   4d396:	42a1      	cmp	r1, r4
	list->head = node;
   4d398:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   4d39a:	d100      	bne.n	4d39e <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   4d39c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   4d39e:	2300      	movs	r3, #0
   4d3a0:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d3a2:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   4d3a4:	42a1      	cmp	r1, r4
	parent->next = child;
   4d3a6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4d3a8:	bf08      	it	eq
   4d3aa:	6042      	streq	r2, [r0, #4]
}
   4d3ac:	e7f7      	b.n	4d39e <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   4d3ae:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d3b0:	681b      	ldr	r3, [r3, #0]
   4d3b2:	e7ea      	b.n	4d38a <sys_slist_find_and_remove.isra.0+0x6>

0004d3b4 <att_exec_write_req>:
   4d3b4:	2006      	movs	r0, #6
   4d3b6:	4770      	bx	lr

0004d3b8 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4d3b8:	30f0      	adds	r0, #240	; 0xf0
   4d3ba:	f3bf 8f5b 	dmb	ish
   4d3be:	e850 3f00 	ldrex	r3, [r0]
   4d3c2:	f023 0301 	bic.w	r3, r3, #1
   4d3c6:	e840 3200 	strex	r2, r3, [r0]
   4d3ca:	2a00      	cmp	r2, #0
   4d3cc:	d1f7      	bne.n	4d3be <chan_rsp_sent+0x6>
   4d3ce:	f3bf 8f5b 	dmb	ish
}
   4d3d2:	4770      	bx	lr

0004d3d4 <chan_cfm_sent>:
   4d3d4:	30f0      	adds	r0, #240	; 0xf0
   4d3d6:	f3bf 8f5b 	dmb	ish
   4d3da:	e850 3f00 	ldrex	r3, [r0]
   4d3de:	f023 0302 	bic.w	r3, r3, #2
   4d3e2:	e840 3200 	strex	r2, r3, [r0]
   4d3e6:	2a00      	cmp	r2, #0
   4d3e8:	d1f7      	bne.n	4d3da <chan_cfm_sent+0x6>
   4d3ea:	f3bf 8f5b 	dmb	ish
}
   4d3ee:	4770      	bx	lr

0004d3f0 <read_cb>:
{
   4d3f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   4d3f4:	f8d2 8000 	ldr.w	r8, [r2]
{
   4d3f8:	4606      	mov	r6, r0
	data->err = 0x00;
   4d3fa:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   4d3fc:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   4d400:	7317      	strb	r7, [r2, #12]
{
   4d402:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   4d404:	4631      	mov	r1, r6
   4d406:	2215      	movs	r2, #21
   4d408:	f000 feb5 	bl	4e176 <bt_gatt_check_perm>
   4d40c:	4604      	mov	r4, r0
   4d40e:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   4d410:	b9a0      	cbnz	r0, 4d43c <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   4d412:	e9cd 0000 	strd	r0, r0, [sp]
   4d416:	88ab      	ldrh	r3, [r5, #4]
   4d418:	68aa      	ldr	r2, [r5, #8]
   4d41a:	4631      	mov	r1, r6
   4d41c:	4640      	mov	r0, r8
   4d41e:	f7ff fee2 	bl	4d1e6 <att_chan_read>
	if (ret < 0) {
   4d422:	1e03      	subs	r3, r0, #0
   4d424:	da0c      	bge.n	4d440 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   4d426:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   4d42a:	bf26      	itte	cs
   4d42c:	425b      	negcs	r3, r3
   4d42e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   4d430:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   4d432:	732b      	strb	r3, [r5, #12]
}
   4d434:	4620      	mov	r0, r4
   4d436:	b002      	add	sp, #8
   4d438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   4d43c:	463c      	mov	r4, r7
   4d43e:	e7f9      	b.n	4d434 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   4d440:	2401      	movs	r4, #1
   4d442:	e7f7      	b.n	4d434 <read_cb+0x44>

0004d444 <bt_att_sent>:
{
   4d444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   4d446:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   4d44a:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   4d44e:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   4d450:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   4d454:	b10b      	cbz	r3, 4d45a <bt_att_sent+0x16>
		chan->sent(chan);
   4d456:	4638      	mov	r0, r7
   4d458:	4798      	blx	r3
   4d45a:	f3bf 8f5b 	dmb	ish
   4d45e:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   4d462:	e853 1f00 	ldrex	r1, [r3]
   4d466:	f021 0110 	bic.w	r1, r1, #16
   4d46a:	e843 1200 	strex	r2, r1, [r3]
   4d46e:	2a00      	cmp	r2, #0
   4d470:	d1f7      	bne.n	4d462 <bt_att_sent+0x1e>
   4d472:	f3bf 8f5b 	dmb	ish
	if (!att) {
   4d476:	b30c      	cbz	r4, 4d4bc <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   4d478:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   4d47c:	b98b      	cbnz	r3, 4d4a2 <bt_att_sent+0x5e>
   4d47e:	6863      	ldr	r3, [r4, #4]
   4d480:	b17b      	cbz	r3, 4d4a2 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   4d482:	1d20      	adds	r0, r4, #4
   4d484:	f7ff fce7 	bl	4ce56 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4d488:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   4d48a:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4d48c:	4638      	mov	r0, r7
   4d48e:	f7ff ff35 	bl	4d2fc <chan_req_send>
   4d492:	2800      	cmp	r0, #0
   4d494:	da12      	bge.n	4d4bc <bt_att_sent+0x78>
	parent->next = child;
   4d496:	6863      	ldr	r3, [r4, #4]
   4d498:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   4d49a:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   4d49c:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   4d49e:	b903      	cbnz	r3, 4d4a2 <bt_att_sent+0x5e>
	list->tail = node;
   4d4a0:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   4d4a2:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   4d4a6:	4638      	mov	r0, r7
   4d4a8:	f7ff ff44 	bl	4d334 <process_queue>
	if (!err) {
   4d4ac:	b130      	cbz	r0, 4d4bc <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   4d4ae:	f104 010c 	add.w	r1, r4, #12
   4d4b2:	4638      	mov	r0, r7
}
   4d4b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   4d4b8:	f7ff bf3c 	b.w	4d334 <process_queue>
}
   4d4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004d4be <att_req_send_process>:
{
   4d4be:	b570      	push	{r4, r5, r6, lr}
   4d4c0:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   4d4c2:	3004      	adds	r0, #4
   4d4c4:	f7ff fcc7 	bl	4ce56 <sys_slist_get>
	if (!node) {
   4d4c8:	4605      	mov	r5, r0
   4d4ca:	b1b8      	cbz	r0, 4d4fc <att_req_send_process+0x3e>
	return list->head;
   4d4cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d4ce:	b14b      	cbz	r3, 4d4e4 <att_req_send_process+0x26>
	return node->next;
   4d4d0:	681e      	ldr	r6, [r3, #0]
   4d4d2:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   4d4d6:	b10e      	cbz	r6, 4d4dc <att_req_send_process+0x1e>
   4d4d8:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   4d4dc:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   4d4e0:	b13b      	cbz	r3, 4d4f2 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d4e2:	b966      	cbnz	r6, 4d4fe <att_req_send_process+0x40>
	parent->next = child;
   4d4e4:	6863      	ldr	r3, [r4, #4]
   4d4e6:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   4d4e8:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   4d4ea:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   4d4ec:	b933      	cbnz	r3, 4d4fc <att_req_send_process+0x3e>
	list->tail = node;
   4d4ee:	60a5      	str	r5, [r4, #8]
}
   4d4f0:	e004      	b.n	4d4fc <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   4d4f2:	4629      	mov	r1, r5
   4d4f4:	f7ff ff02 	bl	4d2fc <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4d4f8:	2800      	cmp	r0, #0
   4d4fa:	dbf2      	blt.n	4d4e2 <att_req_send_process+0x24>
}
   4d4fc:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   4d4fe:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d502:	b10b      	cbz	r3, 4d508 <att_req_send_process+0x4a>
   4d504:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   4d508:	4630      	mov	r0, r6
   4d50a:	461e      	mov	r6, r3
   4d50c:	e7e6      	b.n	4d4dc <att_req_send_process+0x1e>

0004d50e <bt_att_status>:
{
   4d50e:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4d510:	f3bf 8f5b 	dmb	ish
   4d514:	680b      	ldr	r3, [r1, #0]
   4d516:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   4d51a:	07db      	lsls	r3, r3, #31
{
   4d51c:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   4d51e:	d519      	bpl.n	4d554 <bt_att_status+0x46>
	if (!chan->att) {
   4d520:	f850 0c08 	ldr.w	r0, [r0, #-8]
   4d524:	b1b0      	cbz	r0, 4d554 <bt_att_status+0x46>
	if (chan->req) {
   4d526:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   4d52a:	b99b      	cbnz	r3, 4d554 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   4d52c:	3004      	adds	r0, #4
   4d52e:	f7ff fc92 	bl	4ce56 <sys_slist_get>
	if (!node) {
   4d532:	4604      	mov	r4, r0
   4d534:	b170      	cbz	r0, 4d554 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   4d536:	4601      	mov	r1, r0
   4d538:	f1a5 0008 	sub.w	r0, r5, #8
   4d53c:	f7ff fede 	bl	4d2fc <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4d540:	2800      	cmp	r0, #0
   4d542:	da07      	bge.n	4d554 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   4d544:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   4d548:	685a      	ldr	r2, [r3, #4]
   4d54a:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   4d54c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   4d54e:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   4d550:	b902      	cbnz	r2, 4d554 <bt_att_status+0x46>
	list->tail = node;
   4d552:	609c      	str	r4, [r3, #8]
}
   4d554:	bd38      	pop	{r3, r4, r5, pc}

0004d556 <bt_att_chan_create_pdu>:
{
   4d556:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   4d558:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   4d55c:	3201      	adds	r2, #1
   4d55e:	429a      	cmp	r2, r3
{
   4d560:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   4d562:	d81b      	bhi.n	4d59c <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   4d564:	4608      	mov	r0, r1
   4d566:	f7e2 fdcd 	bl	30104 <att_op_get_type>
   4d56a:	2802      	cmp	r0, #2
   4d56c:	d001      	beq.n	4d572 <bt_att_chan_create_pdu+0x1c>
   4d56e:	2804      	cmp	r0, #4
   4d570:	d10f      	bne.n	4d592 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   4d572:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4d576:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   4d578:	2100      	movs	r1, #0
   4d57a:	4608      	mov	r0, r1
   4d57c:	f7ff fb98 	bl	4ccb0 <bt_l2cap_create_pdu_timeout>
   4d580:	4604      	mov	r4, r0
	if (!buf) {
   4d582:	b120      	cbz	r0, 4d58e <bt_att_chan_create_pdu+0x38>
   4d584:	2101      	movs	r1, #1
   4d586:	3008      	adds	r0, #8
   4d588:	f002 f94e 	bl	4f828 <net_buf_simple_add>
	hdr->code = op;
   4d58c:	7005      	strb	r5, [r0, #0]
}
   4d58e:	4620      	mov	r0, r4
   4d590:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   4d592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4d596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4d59a:	e7ed      	b.n	4d578 <bt_att_chan_create_pdu+0x22>
		return NULL;
   4d59c:	2400      	movs	r4, #0
   4d59e:	e7f6      	b.n	4d58e <bt_att_chan_create_pdu+0x38>

0004d5a0 <att_write_req>:
{
   4d5a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4d5a2:	460c      	mov	r4, r1
   4d5a4:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   4d5a6:	f101 0008 	add.w	r0, r1, #8
   4d5aa:	f002 f97e 	bl	4f8aa <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   4d5ae:	89a2      	ldrh	r2, [r4, #12]
   4d5b0:	9201      	str	r2, [sp, #4]
   4d5b2:	68a2      	ldr	r2, [r4, #8]
   4d5b4:	9200      	str	r2, [sp, #0]
   4d5b6:	4603      	mov	r3, r0
   4d5b8:	2213      	movs	r2, #19
   4d5ba:	2112      	movs	r1, #18
   4d5bc:	4628      	mov	r0, r5
   4d5be:	f7e3 f813 	bl	305e8 <att_write_rsp.constprop.0>
}
   4d5c2:	b003      	add	sp, #12
   4d5c4:	bd30      	pop	{r4, r5, pc}

0004d5c6 <att_write_cmd>:
{
   4d5c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4d5c8:	460c      	mov	r4, r1
   4d5ca:	4605      	mov	r5, r0
   4d5cc:	f101 0008 	add.w	r0, r1, #8
   4d5d0:	f002 f96b 	bl	4f8aa <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   4d5d4:	89a2      	ldrh	r2, [r4, #12]
   4d5d6:	9201      	str	r2, [sp, #4]
   4d5d8:	68a2      	ldr	r2, [r4, #8]
   4d5da:	9200      	str	r2, [sp, #0]
   4d5dc:	2200      	movs	r2, #0
   4d5de:	4603      	mov	r3, r0
   4d5e0:	4611      	mov	r1, r2
   4d5e2:	4628      	mov	r0, r5
   4d5e4:	f7e3 f800 	bl	305e8 <att_write_rsp.constprop.0>
}
   4d5e8:	b003      	add	sp, #12
   4d5ea:	bd30      	pop	{r4, r5, pc}

0004d5ec <bt_att_create_pdu>:
{
   4d5ec:	b570      	push	{r4, r5, r6, lr}
   4d5ee:	460e      	mov	r6, r1
   4d5f0:	4615      	mov	r5, r2
	att = att_get(conn);
   4d5f2:	f7ff fda4 	bl	4d13e <att_get>
	if (!att) {
   4d5f6:	b168      	cbz	r0, 4d614 <bt_att_create_pdu+0x28>
	return list->head;
   4d5f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d5fa:	b15b      	cbz	r3, 4d614 <bt_att_create_pdu+0x28>
   4d5fc:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
   4d600:	681b      	ldr	r3, [r3, #0]
   4d602:	b10b      	cbz	r3, 4d608 <bt_att_create_pdu+0x1c>
   4d604:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   4d608:	1c6a      	adds	r2, r5, #1
   4d60a:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   4d60e:	428a      	cmp	r2, r1
   4d610:	d902      	bls.n	4d618 <bt_att_create_pdu+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d612:	b93b      	cbnz	r3, 4d624 <bt_att_create_pdu+0x38>
}
   4d614:	2000      	movs	r0, #0
   4d616:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   4d618:	462a      	mov	r2, r5
   4d61a:	4631      	mov	r1, r6
}
   4d61c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   4d620:	f7ff bf99 	b.w	4d556 <bt_att_chan_create_pdu>
   4d624:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d628:	b10c      	cbz	r4, 4d62e <bt_att_create_pdu+0x42>
   4d62a:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   4d62e:	4618      	mov	r0, r3
   4d630:	4623      	mov	r3, r4
   4d632:	e7ea      	b.n	4d60a <bt_att_create_pdu+0x1e>

0004d634 <att_read_blob_req>:
{
   4d634:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   4d636:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   4d638:	8813      	ldrh	r3, [r2, #0]
   4d63a:	8852      	ldrh	r2, [r2, #2]
   4d63c:	9200      	str	r2, [sp, #0]
   4d63e:	210c      	movs	r1, #12
   4d640:	220d      	movs	r2, #13
   4d642:	f7e3 f907 	bl	30854 <att_read_rsp>
}
   4d646:	b003      	add	sp, #12
   4d648:	f85d fb04 	ldr.w	pc, [sp], #4

0004d64c <att_read_req>:
{
   4d64c:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   4d64e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   4d650:	2200      	movs	r2, #0
   4d652:	881b      	ldrh	r3, [r3, #0]
   4d654:	9200      	str	r2, [sp, #0]
   4d656:	210a      	movs	r1, #10
   4d658:	220b      	movs	r2, #11
   4d65a:	f7e3 f8fb 	bl	30854 <att_read_rsp>
}
   4d65e:	b003      	add	sp, #12
   4d660:	f85d fb04 	ldr.w	pc, [sp], #4

0004d664 <bt_att_init>:
	bt_gatt_init();
   4d664:	f7e3 be7a 	b.w	3135c <bt_gatt_init>

0004d668 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   4d668:	898a      	ldrh	r2, [r1, #12]
   4d66a:	6889      	ldr	r1, [r1, #8]
   4d66c:	2300      	movs	r3, #0
   4d66e:	f7e3 bab5 	b.w	30bdc <att_handle_rsp>

0004d672 <att_handle_find_type_rsp>:
   4d672:	f7ff bff9 	b.w	4d668 <att_handle_find_info_rsp>

0004d676 <att_handle_read_type_rsp>:
   4d676:	f7ff bff7 	b.w	4d668 <att_handle_find_info_rsp>

0004d67a <att_handle_read_rsp>:
   4d67a:	f7ff bff5 	b.w	4d668 <att_handle_find_info_rsp>

0004d67e <att_handle_read_blob_rsp>:
   4d67e:	f7ff bff3 	b.w	4d668 <att_handle_find_info_rsp>

0004d682 <att_handle_read_mult_rsp>:
   4d682:	f7ff bff1 	b.w	4d668 <att_handle_find_info_rsp>

0004d686 <att_handle_read_group_rsp>:
   4d686:	f7ff bfef 	b.w	4d668 <att_handle_find_info_rsp>

0004d68a <att_handle_write_rsp>:
   4d68a:	f7ff bfed 	b.w	4d668 <att_handle_find_info_rsp>

0004d68e <att_handle_prepare_write_rsp>:
   4d68e:	f7ff bfeb 	b.w	4d668 <att_handle_find_info_rsp>

0004d692 <att_handle_exec_write_rsp>:
   4d692:	f7ff bfe9 	b.w	4d668 <att_handle_find_info_rsp>

0004d696 <att_confirm>:
   4d696:	f7ff bfe7 	b.w	4d668 <att_handle_find_info_rsp>

0004d69a <att_mtu_rsp>:
{
   4d69a:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   4d69c:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   4d69e:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   4d6a0:	2b16      	cmp	r3, #22
{
   4d6a2:	4604      	mov	r4, r0
   4d6a4:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   4d6a6:	d806      	bhi.n	4d6b6 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   4d6a8:	2200      	movs	r2, #0
   4d6aa:	2304      	movs	r3, #4
   4d6ac:	4611      	mov	r1, r2
}
   4d6ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   4d6b2:	f7e3 ba93 	b.w	30bdc <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   4d6b6:	2b41      	cmp	r3, #65	; 0x41
   4d6b8:	bf28      	it	cs
   4d6ba:	2341      	movcs	r3, #65	; 0x41
   4d6bc:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   4d6c0:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   4d6c4:	f7ff fc0a 	bl	4cedc <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   4d6c8:	89aa      	ldrh	r2, [r5, #12]
   4d6ca:	2300      	movs	r3, #0
   4d6cc:	4631      	mov	r1, r6
   4d6ce:	4620      	mov	r0, r4
   4d6d0:	e7ed      	b.n	4d6ae <att_mtu_rsp+0x14>

0004d6d2 <bt_att_encrypt_change>:
{
   4d6d2:	b570      	push	{r4, r5, r6, lr}
	if (!att_chan->att) {
   4d6d4:	f850 3c08 	ldr.w	r3, [r0, #-8]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   4d6d8:	4605      	mov	r5, r0
{
   4d6da:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
   4d6dc:	f855 6908 	ldr.w	r6, [r5], #-8
	if (!att_chan->att) {
   4d6e0:	2b00      	cmp	r3, #0
   4d6e2:	d035      	beq.n	4d750 <bt_att_encrypt_change+0x7e>
	if (hci_status) {
   4d6e4:	b169      	cbz	r1, 4d702 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   4d6e6:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   4d6ea:	b38b      	cbz	r3, 4d750 <bt_att_encrypt_change+0x7e>
   4d6ec:	7c1b      	ldrb	r3, [r3, #16]
   4d6ee:	07da      	lsls	r2, r3, #31
   4d6f0:	d52e      	bpl.n	4d750 <bt_att_encrypt_change+0x7e>
		return BT_ATT_ERR_AUTHENTICATION;
   4d6f2:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   4d6f4:	2200      	movs	r2, #0
   4d6f6:	4628      	mov	r0, r5
   4d6f8:	4611      	mov	r1, r2
}
   4d6fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   4d6fe:	f7e3 ba6d 	b.w	30bdc <att_handle_rsp>
	bt_gatt_encrypt_change(conn);
   4d702:	4630      	mov	r0, r6
   4d704:	f7e4 fd5a 	bl	321bc <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   4d708:	7a73      	ldrb	r3, [r6, #9]
   4d70a:	2b01      	cmp	r3, #1
   4d70c:	d020      	beq.n	4d750 <bt_att_encrypt_change+0x7e>
	if (!(att_chan->req && att_chan->req->retrying)) {
   4d70e:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   4d712:	b1ec      	cbz	r4, 4d750 <bt_att_encrypt_change+0x7e>
   4d714:	7c23      	ldrb	r3, [r4, #16]
   4d716:	07db      	lsls	r3, r3, #31
   4d718:	d51a      	bpl.n	4d750 <bt_att_encrypt_change+0x7e>
	if (!req->encode) {
   4d71a:	68e3      	ldr	r3, [r4, #12]
   4d71c:	2b00      	cmp	r3, #0
   4d71e:	d0e8      	beq.n	4d6f2 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   4d720:	6962      	ldr	r2, [r4, #20]
   4d722:	7c61      	ldrb	r1, [r4, #17]
   4d724:	4628      	mov	r0, r5
   4d726:	f7ff ff16 	bl	4d556 <bt_att_chan_create_pdu>
	if (!buf) {
   4d72a:	4606      	mov	r6, r0
   4d72c:	b140      	cbz	r0, 4d740 <bt_att_encrypt_change+0x6e>
	if (req->encode(buf, req->len, req->user_data)) {
   4d72e:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   4d732:	68e3      	ldr	r3, [r4, #12]
   4d734:	4798      	blx	r3
   4d736:	4602      	mov	r2, r0
   4d738:	b120      	cbz	r0, 4d744 <bt_att_encrypt_change+0x72>
		net_buf_unref(buf);
   4d73a:	4630      	mov	r0, r6
   4d73c:	f7f5 fecc 	bl	434d8 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   4d740:	230e      	movs	r3, #14
   4d742:	e7d7      	b.n	4d6f4 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   4d744:	4631      	mov	r1, r6
   4d746:	4628      	mov	r0, r5
   4d748:	f7e2 fdb2 	bl	302b0 <chan_send>
   4d74c:	2800      	cmp	r0, #0
   4d74e:	d1f4      	bne.n	4d73a <bt_att_encrypt_change+0x68>
}
   4d750:	bd70      	pop	{r4, r5, r6, pc}

0004d752 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   4d752:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   4d756:	f7e3 baa7 	b.w	30ca8 <bt_att_disconnected>

0004d75a <bt_att_send>:
{
   4d75a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4d75e:	4607      	mov	r7, r0
   4d760:	460d      	mov	r5, r1
   4d762:	4616      	mov	r6, r2
   4d764:	4698      	mov	r8, r3
	att = att_get(conn);
   4d766:	f7ff fcea 	bl	4d13e <att_get>
	if (!att) {
   4d76a:	4604      	mov	r4, r0
   4d76c:	b938      	cbnz	r0, 4d77e <bt_att_send+0x24>
		net_buf_unref(buf);
   4d76e:	4628      	mov	r0, r5
   4d770:	f7f5 feb2 	bl	434d8 <net_buf_unref>
		return -ENOTCONN;
   4d774:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   4d778:	b002      	add	sp, #8
   4d77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   4d77e:	b146      	cbz	r6, 4d792 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   4d780:	f8cd 8000 	str.w	r8, [sp]
   4d784:	4633      	mov	r3, r6
   4d786:	462a      	mov	r2, r5
   4d788:	2104      	movs	r1, #4
   4d78a:	4638      	mov	r0, r7
   4d78c:	f7ff fa93 	bl	4ccb6 <bt_l2cap_send_cb>
   4d790:	e7f2      	b.n	4d778 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   4d792:	f100 060c 	add.w	r6, r0, #12
   4d796:	4629      	mov	r1, r5
   4d798:	4630      	mov	r0, r6
   4d79a:	f002 f806 	bl	4f7aa <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   4d79e:	2200      	movs	r2, #0
   4d7a0:	2300      	movs	r3, #0
   4d7a2:	4630      	mov	r0, r6
   4d7a4:	f001 ffdd 	bl	4f762 <net_buf_get>
	if (!buf) {
   4d7a8:	4605      	mov	r5, r0
   4d7aa:	b908      	cbnz	r0, 4d7b0 <bt_att_send+0x56>
	return 0;
   4d7ac:	2000      	movs	r0, #0
   4d7ae:	e7e3      	b.n	4d778 <bt_att_send+0x1e>
	return list->head;
   4d7b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d7b2:	b1a3      	cbz	r3, 4d7de <bt_att_send+0x84>
	return node->next;
   4d7b4:	681c      	ldr	r4, [r3, #0]
   4d7b6:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   4d7ba:	b10c      	cbz	r4, 4d7c0 <bt_att_send+0x66>
   4d7bc:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   4d7c0:	2200      	movs	r2, #0
   4d7c2:	4629      	mov	r1, r5
   4d7c4:	f7e2 fd74 	bl	302b0 <chan_send>
		if (err >= 0) {
   4d7c8:	2800      	cmp	r0, #0
   4d7ca:	daef      	bge.n	4d7ac <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d7cc:	b13c      	cbz	r4, 4d7de <bt_att_send+0x84>
   4d7ce:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   4d7d2:	b10b      	cbz	r3, 4d7d8 <bt_att_send+0x7e>
   4d7d4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   4d7d8:	4620      	mov	r0, r4
   4d7da:	461c      	mov	r4, r3
   4d7dc:	e7f0      	b.n	4d7c0 <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   4d7de:	4629      	mov	r1, r5
   4d7e0:	4630      	mov	r0, r6
   4d7e2:	f002 ff39 	bl	50658 <k_queue_prepend>
   4d7e6:	e7e1      	b.n	4d7ac <bt_att_send+0x52>

0004d7e8 <bt_att_req_send>:
{
   4d7e8:	b510      	push	{r4, lr}
   4d7ea:	460c      	mov	r4, r1
	att = att_get(conn);
   4d7ec:	f7ff fca7 	bl	4d13e <att_get>
	if (!att) {
   4d7f0:	b160      	cbz	r0, 4d80c <bt_att_req_send+0x24>
	parent->next = child;
   4d7f2:	2300      	movs	r3, #0
   4d7f4:	6023      	str	r3, [r4, #0]
	return list->tail;
   4d7f6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   4d7f8:	b92b      	cbnz	r3, 4d806 <bt_att_req_send+0x1e>
	list->head = node;
   4d7fa:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   4d7fe:	f7ff fe5e 	bl	4d4be <att_req_send_process>
	return 0;
   4d802:	2000      	movs	r0, #0
}
   4d804:	bd10      	pop	{r4, pc}
	parent->next = child;
   4d806:	601c      	str	r4, [r3, #0]
	list->tail = node;
   4d808:	6084      	str	r4, [r0, #8]
}
   4d80a:	e7f8      	b.n	4d7fe <bt_att_req_send+0x16>
		return -ENOTCONN;
   4d80c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4d810:	e7f8      	b.n	4d804 <bt_att_req_send+0x1c>

0004d812 <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   4d812:	b510      	push	{r4, lr}
   4d814:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   4d816:	f7ff fc92 	bl	4d13e <att_get>
	if (!att) {
   4d81a:	4602      	mov	r2, r0
   4d81c:	b190      	cbz	r0, 4d844 <bt_att_find_req_by_user_data+0x32>
	return list->head;
   4d81e:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   4d820:	b14b      	cbz	r3, 4d836 <bt_att_find_req_by_user_data+0x24>
		if (chan->req->user_data == user_data) {
   4d822:	f853 0c50 	ldr.w	r0, [r3, #-80]
   4d826:	6981      	ldr	r1, [r0, #24]
   4d828:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   4d82a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (chan->req->user_data == user_data) {
   4d82e:	d009      	beq.n	4d844 <bt_att_find_req_by_user_data+0x32>
	return node->next;
   4d830:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   4d834:	e7f4      	b.n	4d820 <bt_att_find_req_by_user_data+0xe>
	return list->head;
   4d836:	6850      	ldr	r0, [r2, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   4d838:	b120      	cbz	r0, 4d844 <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   4d83a:	6983      	ldr	r3, [r0, #24]
   4d83c:	42a3      	cmp	r3, r4
   4d83e:	d001      	beq.n	4d844 <bt_att_find_req_by_user_data+0x32>
	return node->next;
   4d840:	6800      	ldr	r0, [r0, #0]
   4d842:	e7f9      	b.n	4d838 <bt_att_find_req_by_user_data+0x26>
			return req;
		}
	}

	return NULL;
}
   4d844:	bd10      	pop	{r4, pc}

0004d846 <gatt_ccc_changed>:
{
   4d846:	b430      	push	{r4, r5}
   4d848:	460b      	mov	r3, r1
   4d84a:	460a      	mov	r2, r1
   4d84c:	f101 043c 	add.w	r4, r1, #60	; 0x3c
	uint16_t value = 0x0000;
   4d850:	2100      	movs	r1, #0
		if (ccc->cfg[i].value > value) {
   4d852:	8915      	ldrh	r5, [r2, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4d854:	320a      	adds	r2, #10
   4d856:	42a9      	cmp	r1, r5
   4d858:	bf38      	it	cc
   4d85a:	4629      	movcc	r1, r5
   4d85c:	42a2      	cmp	r2, r4
   4d85e:	d1f8      	bne.n	4d852 <gatt_ccc_changed+0xc>
	if (value != ccc->value) {
   4d860:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   4d862:	428a      	cmp	r2, r1
   4d864:	d004      	beq.n	4d870 <gatt_ccc_changed+0x2a>
		ccc->value = value;
   4d866:	8799      	strh	r1, [r3, #60]	; 0x3c
		if (ccc->cfg_changed) {
   4d868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   4d86a:	b10b      	cbz	r3, 4d870 <gatt_ccc_changed+0x2a>
}
   4d86c:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   4d86e:	4718      	bx	r3
}
   4d870:	bc30      	pop	{r4, r5}
   4d872:	4770      	bx	lr

0004d874 <gatt_indicate_rsp>:
{
   4d874:	b510      	push	{r4, lr}
   4d876:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   4d878:	68a3      	ldr	r3, [r4, #8]
{
   4d87a:	460a      	mov	r2, r1
	if (params->func) {
   4d87c:	b10b      	cbz	r3, 4d882 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   4d87e:	4621      	mov	r1, r4
   4d880:	4798      	blx	r3
	params->_ref--;
   4d882:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   4d884:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   4d886:	3b01      	subs	r3, #1
   4d888:	b2db      	uxtb	r3, r3
   4d88a:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   4d88c:	b122      	cbz	r2, 4d898 <gatt_indicate_rsp+0x24>
   4d88e:	b91b      	cbnz	r3, 4d898 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   4d890:	4620      	mov	r0, r4
}
   4d892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   4d896:	4710      	bx	r2
}
   4d898:	bd10      	pop	{r4, pc}

0004d89a <match_uuid>:
	data->attr = attr;
   4d89a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   4d89c:	8091      	strh	r1, [r2, #4]
}
   4d89e:	2000      	movs	r0, #0
   4d8a0:	4770      	bx	lr

0004d8a2 <ccc_set_cb>:
}
   4d8a2:	2000      	movs	r0, #0
   4d8a4:	4770      	bx	lr

0004d8a6 <atomic_get>:
   4d8a6:	f3bf 8f5b 	dmb	ish
   4d8aa:	6800      	ldr	r0, [r0, #0]
   4d8ac:	f3bf 8f5b 	dmb	ish
}
   4d8b0:	4770      	bx	lr

0004d8b2 <gen_hash_m>:
{
   4d8b2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   4d8b4:	6807      	ldr	r7, [r0, #0]
   4d8b6:	783d      	ldrb	r5, [r7, #0]
{
   4d8b8:	b089      	sub	sp, #36	; 0x24
   4d8ba:	4606      	mov	r6, r0
   4d8bc:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   4d8be:	b10d      	cbz	r5, 4d8c4 <gen_hash_m+0x12>
	switch (u16->val) {
   4d8c0:	2501      	movs	r5, #1
   4d8c2:	e014      	b.n	4d8ee <gen_hash_m+0x3c>
   4d8c4:	887b      	ldrh	r3, [r7, #2]
   4d8c6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   4d8ca:	d004      	beq.n	4d8d6 <gen_hash_m+0x24>
   4d8cc:	d812      	bhi.n	4d8f4 <gen_hash_m+0x42>
   4d8ce:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   4d8d2:	2b03      	cmp	r3, #3
   4d8d4:	d8f4      	bhi.n	4d8c0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   4d8d6:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4d8da:	2202      	movs	r2, #2
   4d8dc:	f10d 010a 	add.w	r1, sp, #10
   4d8e0:	4620      	mov	r0, r4
   4d8e2:	f7fd fe6b 	bl	4b5bc <tc_cmac_update>
   4d8e6:	b9e0      	cbnz	r0, 4d922 <gen_hash_m+0x70>
			state->err = -EINVAL;
   4d8e8:	f06f 0315 	mvn.w	r3, #21
   4d8ec:	65a3      	str	r3, [r4, #88]	; 0x58
}
   4d8ee:	4628      	mov	r0, r5
   4d8f0:	b009      	add	sp, #36	; 0x24
   4d8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   4d8f4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   4d8f8:	33ff      	adds	r3, #255	; 0xff
   4d8fa:	b29b      	uxth	r3, r3
   4d8fc:	2b04      	cmp	r3, #4
   4d8fe:	d8df      	bhi.n	4d8c0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   4d900:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4d904:	2202      	movs	r2, #2
   4d906:	f10d 010a 	add.w	r1, sp, #10
   4d90a:	4620      	mov	r0, r4
   4d90c:	f7fd fe56 	bl	4b5bc <tc_cmac_update>
   4d910:	2800      	cmp	r0, #0
   4d912:	d0e9      	beq.n	4d8e8 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   4d914:	887b      	ldrh	r3, [r7, #2]
   4d916:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4d91a:	2202      	movs	r2, #2
   4d91c:	f10d 010a 	add.w	r1, sp, #10
   4d920:	e016      	b.n	4d950 <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   4d922:	887b      	ldrh	r3, [r7, #2]
   4d924:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4d928:	2202      	movs	r2, #2
   4d92a:	f10d 010a 	add.w	r1, sp, #10
   4d92e:	4620      	mov	r0, r4
   4d930:	f7fd fe44 	bl	4b5bc <tc_cmac_update>
   4d934:	2800      	cmp	r0, #0
   4d936:	d0d7      	beq.n	4d8e8 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   4d938:	2000      	movs	r0, #0
   4d93a:	aa03      	add	r2, sp, #12
   4d93c:	6877      	ldr	r7, [r6, #4]
   4d93e:	9000      	str	r0, [sp, #0]
   4d940:	2313      	movs	r3, #19
   4d942:	4631      	mov	r1, r6
   4d944:	47b8      	blx	r7
		if (len < 0) {
   4d946:	1e02      	subs	r2, r0, #0
   4d948:	da01      	bge.n	4d94e <gen_hash_m+0x9c>
			state->err = len;
   4d94a:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   4d94c:	e7cf      	b.n	4d8ee <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   4d94e:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4d950:	4620      	mov	r0, r4
   4d952:	f7fd fe33 	bl	4b5bc <tc_cmac_update>
   4d956:	2800      	cmp	r0, #0
   4d958:	d1b2      	bne.n	4d8c0 <gen_hash_m+0xe>
   4d95a:	e7c5      	b.n	4d8e8 <gen_hash_m+0x36>

0004d95c <atomic_or>:
{
   4d95c:	b510      	push	{r4, lr}
   4d95e:	4603      	mov	r3, r0
}
   4d960:	f3bf 8f5b 	dmb	ish
   4d964:	e853 0f00 	ldrex	r0, [r3]
   4d968:	ea40 0201 	orr.w	r2, r0, r1
   4d96c:	e843 2400 	strex	r4, r2, [r3]
   4d970:	2c00      	cmp	r4, #0
   4d972:	d1f7      	bne.n	4d964 <atomic_or+0x8>
   4d974:	f3bf 8f5b 	dmb	ish
   4d978:	bd10      	pop	{r4, pc}

0004d97a <bt_addr_le_cmp>:
   4d97a:	2207      	movs	r2, #7
   4d97c:	f7fd bf75 	b.w	4b86a <memcmp>

0004d980 <find_ccc_cfg>:
{
   4d980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4d982:	4606      	mov	r6, r0
   4d984:	1c4c      	adds	r4, r1, #1
   4d986:	f101 053d 	add.w	r5, r1, #61	; 0x3d
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   4d98a:	1e67      	subs	r7, r4, #1
		if (conn) {
   4d98c:	b14e      	cbz	r6, 4d9a2 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   4d98e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   4d992:	4622      	mov	r2, r4
   4d994:	4630      	mov	r0, r6
   4d996:	f7ff f85a 	bl	4ca4e <bt_conn_is_peer_addr_le>
   4d99a:	b158      	cbz	r0, 4d9b4 <find_ccc_cfg+0x34>
}
   4d99c:	4638      	mov	r0, r7
   4d99e:	b003      	add	sp, #12
   4d9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   4d9a2:	4669      	mov	r1, sp
   4d9a4:	4620      	mov	r0, r4
   4d9a6:	9600      	str	r6, [sp, #0]
   4d9a8:	f8cd 6003 	str.w	r6, [sp, #3]
   4d9ac:	f7ff ffe5 	bl	4d97a <bt_addr_le_cmp>
   4d9b0:	2800      	cmp	r0, #0
   4d9b2:	d0f3      	beq.n	4d99c <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4d9b4:	340a      	adds	r4, #10
   4d9b6:	42ac      	cmp	r4, r5
   4d9b8:	d1e7      	bne.n	4d98a <find_ccc_cfg+0xa>
	return NULL;
   4d9ba:	2700      	movs	r7, #0
   4d9bc:	e7ee      	b.n	4d99c <find_ccc_cfg+0x1c>

0004d9be <ccc_find_cfg>:
{
   4d9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4d9c2:	4604      	mov	r4, r0
   4d9c4:	460f      	mov	r7, r1
   4d9c6:	4690      	mov	r8, r2
   4d9c8:	1c46      	adds	r6, r0, #1
   4d9ca:	2500      	movs	r5, #0
		if (id == ccc->cfg[i].id &&
   4d9cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   4d9d0:	4543      	cmp	r3, r8
   4d9d2:	d107      	bne.n	4d9e4 <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   4d9d4:	4639      	mov	r1, r7
   4d9d6:	4630      	mov	r0, r6
   4d9d8:	f7ff ffcf 	bl	4d97a <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   4d9dc:	b910      	cbnz	r0, 4d9e4 <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   4d9de:	1960      	adds	r0, r4, r5
}
   4d9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4d9e4:	350a      	adds	r5, #10
   4d9e6:	2d3c      	cmp	r5, #60	; 0x3c
   4d9e8:	f106 060a 	add.w	r6, r6, #10
   4d9ec:	d1ee      	bne.n	4d9cc <ccc_find_cfg+0xe>
	return NULL;
   4d9ee:	2000      	movs	r0, #0
   4d9f0:	e7f6      	b.n	4d9e0 <ccc_find_cfg+0x22>

0004d9f2 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4d9f2:	2207      	movs	r2, #7
   4d9f4:	f7fd bf49 	b.w	4b88a <memcpy>

0004d9f8 <cf_write>:
{
   4d9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4d9fc:	4698      	mov	r8, r3
   4d9fe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   4da02:	2b01      	cmp	r3, #1
{
   4da04:	4606      	mov	r6, r0
   4da06:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   4da08:	d830      	bhi.n	4da6c <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   4da0a:	4443      	add	r3, r8
   4da0c:	2b01      	cmp	r3, #1
   4da0e:	4645      	mov	r5, r8
   4da10:	dc2f      	bgt.n	4da72 <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   4da12:	f7e3 f9dd 	bl	30dd0 <find_cf_cfg>
	if (!cfg) {
   4da16:	4604      	mov	r4, r0
   4da18:	b918      	cbnz	r0, 4da22 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   4da1a:	f7e3 f9d9 	bl	30dd0 <find_cf_cfg>
	if (!cfg) {
   4da1e:	4604      	mov	r4, r0
   4da20:	b350      	cbz	r0, 4da78 <cf_write+0x80>
{
   4da22:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   4da24:	f1b8 0f00 	cmp.w	r8, #0
   4da28:	d10e      	bne.n	4da48 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   4da2a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   4da2e:	1c60      	adds	r0, r4, #1
   4da30:	f7ff ffdf 	bl	4d9f2 <bt_addr_le_copy>
	cfg->id = conn->id;
   4da34:	4620      	mov	r0, r4
   4da36:	7a33      	ldrb	r3, [r6, #8]
   4da38:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4da3c:	2101      	movs	r1, #1
   4da3e:	f7ff ff8d 	bl	4d95c <atomic_or>
}
   4da42:	4628      	mov	r0, r5
   4da44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   4da48:	7a20      	ldrb	r0, [r4, #8]
   4da4a:	fa20 f301 	lsr.w	r3, r0, r1
   4da4e:	07da      	lsls	r2, r3, #31
   4da50:	d503      	bpl.n	4da5a <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   4da52:	783b      	ldrb	r3, [r7, #0]
   4da54:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   4da56:	07db      	lsls	r3, r3, #31
   4da58:	d511      	bpl.n	4da7e <cf_write+0x86>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   4da5a:	3101      	adds	r1, #1
   4da5c:	2903      	cmp	r1, #3
   4da5e:	d1e1      	bne.n	4da24 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   4da60:	783b      	ldrb	r3, [r7, #0]
   4da62:	f003 0307 	and.w	r3, r3, #7
   4da66:	4318      	orrs	r0, r3
   4da68:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   4da6a:	e7de      	b.n	4da2a <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4da6c:	f06f 0506 	mvn.w	r5, #6
   4da70:	e7e7      	b.n	4da42 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   4da72:	f06f 050c 	mvn.w	r5, #12
   4da76:	e7e4      	b.n	4da42 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   4da78:	f06f 0510 	mvn.w	r5, #16
   4da7c:	e7e1      	b.n	4da42 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   4da7e:	f06f 0512 	mvn.w	r5, #18
   4da82:	e7de      	b.n	4da42 <cf_write+0x4a>

0004da84 <clear_ccc_cfg>:
{
   4da84:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4da86:	2500      	movs	r5, #0
{
   4da88:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4da8a:	4669      	mov	r1, sp
   4da8c:	3001      	adds	r0, #1
   4da8e:	9500      	str	r5, [sp, #0]
   4da90:	f8cd 5003 	str.w	r5, [sp, #3]
   4da94:	f7ff ffad 	bl	4d9f2 <bt_addr_le_copy>
	cfg->id = 0U;
   4da98:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   4da9a:	8125      	strh	r5, [r4, #8]
}
   4da9c:	b003      	add	sp, #12
   4da9e:	bd30      	pop	{r4, r5, pc}

0004daa0 <gatt_sub_free>:
{
   4daa0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   4daa2:	2300      	movs	r3, #0
   4daa4:	4669      	mov	r1, sp
   4daa6:	3001      	adds	r0, #1
   4daa8:	9300      	str	r3, [sp, #0]
   4daaa:	f8cd 3003 	str.w	r3, [sp, #3]
   4daae:	f7ff ffa0 	bl	4d9f2 <bt_addr_le_copy>
}
   4dab2:	b003      	add	sp, #12
   4dab4:	f85d fb04 	ldr.w	pc, [sp], #4

0004dab8 <gatt_sub_remove>:
{
   4dab8:	b570      	push	{r4, r5, r6, lr}
   4daba:	460c      	mov	r4, r1
	if (params) {
   4dabc:	4619      	mov	r1, r3
   4dabe:	b16b      	cbz	r3, 4dadc <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   4dac0:	f103 061c 	add.w	r6, r3, #28
	return list->tail;
   4dac4:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   4dac6:	69db      	ldr	r3, [r3, #28]
Z_GENLIST_REMOVE(slist, snode)
   4dac8:	b97a      	cbnz	r2, 4daea <gatt_sub_remove+0x32>
   4daca:	42ae      	cmp	r6, r5
	list->head = node;
   4dacc:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   4dace:	d100      	bne.n	4dad2 <gatt_sub_remove+0x1a>
	list->tail = node;
   4dad0:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   4dad2:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   4dad4:	680d      	ldr	r5, [r1, #0]
   4dad6:	61cb      	str	r3, [r1, #28]
   4dad8:	461a      	mov	r2, r3
   4dada:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   4dadc:	68a3      	ldr	r3, [r4, #8]
   4dade:	b94b      	cbnz	r3, 4daf4 <gatt_sub_remove+0x3c>
		gatt_sub_free(sub);
   4dae0:	4620      	mov	r0, r4
}
   4dae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gatt_sub_free(sub);
   4dae6:	f7ff bfdb 	b.w	4daa0 <gatt_sub_free>
Z_GENLIST_REMOVE(slist, snode)
   4daea:	42ae      	cmp	r6, r5
	parent->next = child;
   4daec:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4daee:	bf08      	it	eq
   4daf0:	60e2      	streq	r2, [r4, #12]
}
   4daf2:	e7ee      	b.n	4dad2 <gatt_sub_remove+0x1a>
}
   4daf4:	bd70      	pop	{r4, r5, r6, pc}

0004daf6 <sc_save>:
{
   4daf6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4dafa:	4680      	mov	r8, r0
   4dafc:	460f      	mov	r7, r1
   4dafe:	4616      	mov	r6, r2
   4db00:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   4db02:	f7e3 f987 	bl	30e14 <find_sc_cfg>
	if (!cfg) {
   4db06:	4604      	mov	r4, r0
   4db08:	b960      	cbnz	r0, 4db24 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   4db0a:	4669      	mov	r1, sp
   4db0c:	9000      	str	r0, [sp, #0]
   4db0e:	f8cd 0003 	str.w	r0, [sp, #3]
   4db12:	f7e3 f97f 	bl	30e14 <find_sc_cfg>
		if (!cfg) {
   4db16:	4604      	mov	r4, r0
   4db18:	b1d0      	cbz	r0, 4db50 <sc_save+0x5a>
		cfg->id = id;
   4db1a:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   4db1e:	4639      	mov	r1, r7
   4db20:	f7ff ff67 	bl	4d9f2 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   4db24:	8922      	ldrh	r2, [r4, #8]
   4db26:	8963      	ldrh	r3, [r4, #10]
   4db28:	b972      	cbnz	r2, 4db48 <sc_save+0x52>
   4db2a:	b97b      	cbnz	r3, 4db4c <sc_save+0x56>
		cfg->data.start = start;
   4db2c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   4db2e:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   4db30:	4621      	mov	r1, r4
   4db32:	f811 0b01 	ldrb.w	r0, [r1], #1
   4db36:	f7fe fb69 	bl	4c20c <bt_addr_le_is_bonded>
   4db3a:	b148      	cbz	r0, 4db50 <sc_save+0x5a>
		sc_store(cfg);
   4db3c:	4620      	mov	r0, r4
}
   4db3e:	b002      	add	sp, #8
   4db40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   4db44:	f7e3 b9c0 	b.w	30ec8 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   4db48:	4296      	cmp	r6, r2
   4db4a:	d304      	bcc.n	4db56 <sc_save+0x60>
   4db4c:	429d      	cmp	r5, r3
   4db4e:	d8ee      	bhi.n	4db2e <sc_save+0x38>
}
   4db50:	b002      	add	sp, #8
   4db52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   4db56:	429d      	cmp	r5, r3
		*start = new_start;
   4db58:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   4db5a:	d9e9      	bls.n	4db30 <sc_save+0x3a>
   4db5c:	e7e7      	b.n	4db2e <sc_save+0x38>

0004db5e <atomic_and>:
{
   4db5e:	b510      	push	{r4, lr}
   4db60:	4603      	mov	r3, r0
}
   4db62:	f3bf 8f5b 	dmb	ish
   4db66:	e853 0f00 	ldrex	r0, [r3]
   4db6a:	ea00 0201 	and.w	r2, r0, r1
   4db6e:	e843 2400 	strex	r4, r2, [r3]
   4db72:	2c00      	cmp	r4, #0
   4db74:	d1f7      	bne.n	4db66 <atomic_and+0x8>
   4db76:	f3bf 8f5b 	dmb	ish
   4db7a:	bd10      	pop	{r4, pc}

0004db7c <gatt_write_ccc_rsp>:
{
   4db7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4db80:	9c06      	ldr	r4, [sp, #24]
   4db82:	460e      	mov	r6, r1
   4db84:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4db86:	f06f 0104 	mvn.w	r1, #4
   4db8a:	f104 0018 	add.w	r0, r4, #24
   4db8e:	f7ff ffe6 	bl	4db5e <atomic_and>
	if (err) {
   4db92:	b1e6      	cbz	r6, 4dbce <gatt_write_ccc_rsp+0x52>
		sub = gatt_sub_find(conn);
   4db94:	4628      	mov	r0, r5
   4db96:	f7e3 f959 	bl	30e4c <gatt_sub_find>
		if (!sub) {
   4db9a:	4601      	mov	r1, r0
   4db9c:	b308      	cbz	r0, 4dbe2 <gatt_write_ccc_rsp+0x66>
	return list->head;
   4db9e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   4dba0:	b143      	cbz	r3, 4dbb4 <gatt_write_ccc_rsp+0x38>
	return node->next;
   4dba2:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   4dba4:	f104 001c 	add.w	r0, r4, #28
   4dba8:	4283      	cmp	r3, r0
   4dbaa:	d10b      	bne.n	4dbc4 <gatt_write_ccc_rsp+0x48>
				gatt_sub_remove(conn, sub, tmp, params);
   4dbac:	4623      	mov	r3, r4
   4dbae:	4628      	mov	r0, r5
   4dbb0:	f7ff ff82 	bl	4dab8 <gatt_sub_remove>
	if (params->write) {
   4dbb4:	6863      	ldr	r3, [r4, #4]
   4dbb6:	b1a3      	cbz	r3, 4dbe2 <gatt_write_ccc_rsp+0x66>
		params->write(conn, err, NULL);
   4dbb8:	4631      	mov	r1, r6
   4dbba:	4628      	mov	r0, r5
   4dbbc:	2200      	movs	r2, #0
}
   4dbbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   4dbc2:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   4dbc4:	2a00      	cmp	r2, #0
   4dbc6:	d0f5      	beq.n	4dbb4 <gatt_write_ccc_rsp+0x38>
	return node->next;
   4dbc8:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   4dbca:	6812      	ldr	r2, [r2, #0]
   4dbcc:	e7ec      	b.n	4dba8 <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   4dbce:	8aa3      	ldrh	r3, [r4, #20]
   4dbd0:	2b00      	cmp	r3, #0
   4dbd2:	d1ef      	bne.n	4dbb4 <gatt_write_ccc_rsp+0x38>
		params->notify(conn, params, NULL, 0);
   4dbd4:	6827      	ldr	r7, [r4, #0]
   4dbd6:	4633      	mov	r3, r6
   4dbd8:	4632      	mov	r2, r6
   4dbda:	4621      	mov	r1, r4
   4dbdc:	4628      	mov	r0, r5
   4dbde:	47b8      	blx	r7
   4dbe0:	e7e8      	b.n	4dbb4 <gatt_write_ccc_rsp+0x38>
}
   4dbe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004dbe6 <gatt_req_send>:
{
   4dbe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4dbea:	4606      	mov	r6, r0
   4dbec:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   4dbee:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   4dbf2:	2100      	movs	r1, #0
{
   4dbf4:	f89d a020 	ldrb.w	sl, [sp, #32]
   4dbf8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   4dbfc:	4617      	mov	r7, r2
   4dbfe:	461d      	mov	r5, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   4dc00:	f7e2 ffb8 	bl	30b74 <bt_att_req_alloc>
	if (!req) {
   4dc04:	4604      	mov	r4, r0
   4dc06:	b920      	cbnz	r0, 4dc12 <gatt_req_send+0x2c>
		return -ENOMEM;
   4dc08:	f06f 050b 	mvn.w	r5, #11
}
   4dc0c:	4628      	mov	r0, r5
   4dc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->att_op = op;
   4dc12:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   4dc16:	f8c0 8014 	str.w	r8, [r0, #20]
	req->encode = encode;
   4dc1a:	60c5      	str	r5, [r0, #12]
	req->func = func;
   4dc1c:	f8c0 9004 	str.w	r9, [r0, #4]
	req->user_data = params;
   4dc20:	6187      	str	r7, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   4dc22:	4642      	mov	r2, r8
   4dc24:	4651      	mov	r1, sl
   4dc26:	4630      	mov	r0, r6
   4dc28:	f7ff fce0 	bl	4d5ec <bt_att_create_pdu>
	if (!buf) {
   4dc2c:	b918      	cbnz	r0, 4dc36 <gatt_req_send+0x50>
		bt_att_req_free(req);
   4dc2e:	4620      	mov	r0, r4
   4dc30:	f7e2 ffc2 	bl	30bb8 <bt_att_req_free>
   4dc34:	e7e8      	b.n	4dc08 <gatt_req_send+0x22>
	req->buf = buf;
   4dc36:	60a0      	str	r0, [r4, #8]
	err = encode(buf, len, params);
   4dc38:	463a      	mov	r2, r7
   4dc3a:	4641      	mov	r1, r8
   4dc3c:	47a8      	blx	r5
	if (err) {
   4dc3e:	4605      	mov	r5, r0
   4dc40:	b118      	cbz	r0, 4dc4a <gatt_req_send+0x64>
		bt_att_req_free(req);
   4dc42:	4620      	mov	r0, r4
   4dc44:	f7e2 ffb8 	bl	30bb8 <bt_att_req_free>
   4dc48:	e7e0      	b.n	4dc0c <gatt_req_send+0x26>
	err = bt_att_req_send(conn, req);
   4dc4a:	4621      	mov	r1, r4
   4dc4c:	4630      	mov	r0, r6
   4dc4e:	f7ff fdcb 	bl	4d7e8 <bt_att_req_send>
	if (err) {
   4dc52:	4605      	mov	r5, r0
   4dc54:	2800      	cmp	r0, #0
   4dc56:	d0d9      	beq.n	4dc0c <gatt_req_send+0x26>
   4dc58:	e7f3      	b.n	4dc42 <gatt_req_send+0x5c>

0004dc5a <read_included_uuid_encode>:
{
   4dc5a:	b510      	push	{r4, lr}
	return net_buf_simple_add(&buf->b, len);
   4dc5c:	2102      	movs	r1, #2
   4dc5e:	3008      	adds	r0, #8
   4dc60:	4614      	mov	r4, r2
   4dc62:	f001 fde1 	bl	4f828 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   4dc66:	8963      	ldrh	r3, [r4, #10]
   4dc68:	8003      	strh	r3, [r0, #0]
}
   4dc6a:	2000      	movs	r0, #0
   4dc6c:	bd10      	pop	{r4, pc}

0004dc6e <gatt_find_info_encode>:
{
   4dc6e:	b510      	push	{r4, lr}
   4dc70:	2104      	movs	r1, #4
   4dc72:	3008      	adds	r0, #8
   4dc74:	4614      	mov	r4, r2
   4dc76:	f001 fdd7 	bl	4f828 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4dc7a:	8923      	ldrh	r3, [r4, #8]
   4dc7c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4dc7e:	89e3      	ldrh	r3, [r4, #14]
   4dc80:	8043      	strh	r3, [r0, #2]
}
   4dc82:	2000      	movs	r0, #0
   4dc84:	bd10      	pop	{r4, pc}

0004dc86 <gatt_read_group_encode>:
{
   4dc86:	b538      	push	{r3, r4, r5, lr}
   4dc88:	f100 0408 	add.w	r4, r0, #8
   4dc8c:	2104      	movs	r1, #4
   4dc8e:	4620      	mov	r0, r4
   4dc90:	4615      	mov	r5, r2
   4dc92:	f001 fdc9 	bl	4f828 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4dc96:	892b      	ldrh	r3, [r5, #8]
   4dc98:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4dc9a:	89eb      	ldrh	r3, [r5, #14]
   4dc9c:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4dc9e:	7c2b      	ldrb	r3, [r5, #16]
   4dca0:	b933      	cbnz	r3, 4dcb0 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   4dca2:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   4dca6:	4620      	mov	r0, r4
   4dca8:	f001 fdd5 	bl	4f856 <net_buf_simple_add_le16>
}
   4dcac:	2000      	movs	r0, #0
   4dcae:	bd38      	pop	{r3, r4, r5, pc}
   4dcb0:	f642 0101 	movw	r1, #10241	; 0x2801
   4dcb4:	e7f7      	b.n	4dca6 <gatt_read_group_encode+0x20>

0004dcb6 <gatt_read_type_encode>:
{
   4dcb6:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4dcb8:	f100 0408 	add.w	r4, r0, #8
   4dcbc:	2104      	movs	r1, #4
   4dcbe:	4620      	mov	r0, r4
   4dcc0:	4615      	mov	r5, r2
   4dcc2:	f001 fdb1 	bl	4f828 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4dcc6:	892b      	ldrh	r3, [r5, #8]
   4dcc8:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4dcca:	89eb      	ldrh	r3, [r5, #14]
   4dccc:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   4dcce:	7c2b      	ldrb	r3, [r5, #16]
   4dcd0:	2b02      	cmp	r3, #2
   4dcd2:	d004      	beq.n	4dcde <gatt_read_type_encode+0x28>
   4dcd4:	2b03      	cmp	r3, #3
   4dcd6:	d009      	beq.n	4dcec <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   4dcd8:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   4dcda:	8859      	ldrh	r1, [r3, #2]
   4dcdc:	e001      	b.n	4dce2 <gatt_read_type_encode+0x2c>
   4dcde:	f642 0102 	movw	r1, #10242	; 0x2802
   4dce2:	4620      	mov	r0, r4
   4dce4:	f001 fdb7 	bl	4f856 <net_buf_simple_add_le16>
}
   4dce8:	2000      	movs	r0, #0
   4dcea:	bd38      	pop	{r3, r4, r5, pc}
   4dcec:	f642 0103 	movw	r1, #10243	; 0x2803
   4dcf0:	e7f7      	b.n	4dce2 <gatt_read_type_encode+0x2c>

0004dcf2 <sc_set>:
{
   4dcf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4dcf6:	460e      	mov	r6, r1
   4dcf8:	b086      	sub	sp, #24
   4dcfa:	4617      	mov	r7, r2
   4dcfc:	4698      	mov	r8, r3
	if (!name) {
   4dcfe:	4605      	mov	r5, r0
   4dd00:	b928      	cbnz	r0, 4dd0e <sc_set+0x1c>
		return -EINVAL;
   4dd02:	f06f 0415 	mvn.w	r4, #21
}
   4dd06:	4620      	mov	r0, r4
   4dd08:	b006      	add	sp, #24
   4dd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   4dd0e:	a902      	add	r1, sp, #8
   4dd10:	f7fd fe83 	bl	4ba1a <bt_settings_decode_key>
	if (err) {
   4dd14:	4604      	mov	r4, r0
   4dd16:	2800      	cmp	r0, #0
   4dd18:	d1f3      	bne.n	4dd02 <sc_set+0x10>
	settings_name_next(name, &next);
   4dd1a:	a901      	add	r1, sp, #4
   4dd1c:	4628      	mov	r0, r5
   4dd1e:	f7fc fae8 	bl	4a2f2 <settings_name_next>
	if (!next) {
   4dd22:	9801      	ldr	r0, [sp, #4]
   4dd24:	b998      	cbnz	r0, 4dd4e <sc_set+0x5c>
	cfg = find_sc_cfg(id, &addr);
   4dd26:	a902      	add	r1, sp, #8
   4dd28:	2000      	movs	r0, #0
   4dd2a:	f7e3 f873 	bl	30e14 <find_sc_cfg>
	if (!cfg && len_rd) {
   4dd2e:	4605      	mov	r5, r0
   4dd30:	bb08      	cbnz	r0, 4dd76 <sc_set+0x84>
   4dd32:	2e00      	cmp	r6, #0
   4dd34:	d0e7      	beq.n	4dd06 <sc_set+0x14>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   4dd36:	a904      	add	r1, sp, #16
   4dd38:	9004      	str	r0, [sp, #16]
   4dd3a:	4604      	mov	r4, r0
   4dd3c:	f8cd 0013 	str.w	r0, [sp, #19]
   4dd40:	f7e3 f868 	bl	30e14 <find_sc_cfg>
		if (!cfg) {
   4dd44:	4605      	mov	r5, r0
   4dd46:	b948      	cbnz	r0, 4dd5c <sc_set+0x6a>
			return -ENOMEM;
   4dd48:	f06f 040b 	mvn.w	r4, #11
   4dd4c:	e7db      	b.n	4dd06 <sc_set+0x14>
		unsigned long next_id = strtoul(next, NULL, 10);
   4dd4e:	220a      	movs	r2, #10
   4dd50:	4621      	mov	r1, r4
   4dd52:	f7fd fce4 	bl	4b71e <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4dd56:	2800      	cmp	r0, #0
   4dd58:	d0e5      	beq.n	4dd26 <sc_set+0x34>
   4dd5a:	e7d2      	b.n	4dd02 <sc_set+0x10>
		cfg->id = id;
   4dd5c:	f800 4b01 	strb.w	r4, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   4dd60:	a902      	add	r1, sp, #8
   4dd62:	f7ff fe46 	bl	4d9f2 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   4dd66:	2204      	movs	r2, #4
   4dd68:	f105 0108 	add.w	r1, r5, #8
   4dd6c:	4640      	mov	r0, r8
   4dd6e:	47b8      	blx	r7
		if (len < 0) {
   4dd70:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   4dd74:	e7c7      	b.n	4dd06 <sc_set+0x14>
	if (len_rd) {
   4dd76:	2e00      	cmp	r6, #0
   4dd78:	d1f5      	bne.n	4dd66 <sc_set+0x74>
		memset(cfg, 0, sizeof(*cfg));
   4dd7a:	220c      	movs	r2, #12
   4dd7c:	4631      	mov	r1, r6
   4dd7e:	f7fd fd8f 	bl	4b8a0 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   4dd82:	e7c0      	b.n	4dd06 <sc_set+0x14>

0004dd84 <clear_cf_cfg>:
{
   4dd84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4dd86:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4dd88:	2500      	movs	r5, #0
   4dd8a:	4669      	mov	r1, sp
   4dd8c:	3001      	adds	r0, #1
   4dd8e:	9500      	str	r5, [sp, #0]
   4dd90:	f8cd 5003 	str.w	r5, [sp, #3]
   4dd94:	f7ff fe2d 	bl	4d9f2 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   4dd98:	f104 0008 	add.w	r0, r4, #8
   4dd9c:	2201      	movs	r2, #1
   4dd9e:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4dda0:	340c      	adds	r4, #12
   4dda2:	f7fd fd7d 	bl	4b8a0 <memset>
   4dda6:	f3bf 8f5b 	dmb	ish
   4ddaa:	e854 3f00 	ldrex	r3, [r4]
   4ddae:	e844 5200 	strex	r2, r5, [r4]
   4ddb2:	2a00      	cmp	r2, #0
   4ddb4:	d1f9      	bne.n	4ddaa <clear_cf_cfg+0x26>
   4ddb6:	f3bf 8f5b 	dmb	ish
}
   4ddba:	b003      	add	sp, #12
   4ddbc:	bd30      	pop	{r4, r5, pc}

0004ddbe <cf_set>:
{
   4ddbe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   4ddc2:	4688      	mov	r8, r1
   4ddc4:	4616      	mov	r6, r2
   4ddc6:	461f      	mov	r7, r3
	if (!name) {
   4ddc8:	4605      	mov	r5, r0
   4ddca:	b928      	cbnz	r0, 4ddd8 <cf_set+0x1a>
		return -EINVAL;
   4ddcc:	f06f 0415 	mvn.w	r4, #21
}
   4ddd0:	4620      	mov	r0, r4
   4ddd2:	b004      	add	sp, #16
   4ddd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   4ddd8:	a902      	add	r1, sp, #8
   4ddda:	f7fd fe1e 	bl	4ba1a <bt_settings_decode_key>
	if (err) {
   4ddde:	4604      	mov	r4, r0
   4dde0:	2800      	cmp	r0, #0
   4dde2:	d1f3      	bne.n	4ddcc <cf_set+0xe>
	settings_name_next(name, &next);
   4dde4:	a901      	add	r1, sp, #4
   4dde6:	4628      	mov	r0, r5
   4dde8:	f7fc fa83 	bl	4a2f2 <settings_name_next>
	if (!next) {
   4ddec:	9801      	ldr	r0, [sp, #4]
   4ddee:	b9d0      	cbnz	r0, 4de26 <cf_set+0x68>
	cfg = find_cf_cfg_by_addr(id, &addr);
   4ddf0:	a902      	add	r1, sp, #8
   4ddf2:	2000      	movs	r0, #0
   4ddf4:	f7e3 f84c 	bl	30e90 <find_cf_cfg_by_addr>
	if (!cfg) {
   4ddf8:	4605      	mov	r5, r0
   4ddfa:	b948      	cbnz	r0, 4de10 <cf_set+0x52>
		cfg = find_cf_cfg(NULL);
   4ddfc:	f7e2 ffe8 	bl	30dd0 <find_cf_cfg>
		if (!cfg) {
   4de00:	4605      	mov	r5, r0
   4de02:	b1d8      	cbz	r0, 4de3c <cf_set+0x7e>
		cfg->id = id;
   4de04:	2300      	movs	r3, #0
   4de06:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   4de0a:	a902      	add	r1, sp, #8
   4de0c:	f7ff fdf1 	bl	4d9f2 <bt_addr_le_copy>
	if (len_rd) {
   4de10:	f1b8 0f00 	cmp.w	r8, #0
   4de14:	d00e      	beq.n	4de34 <cf_set+0x76>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   4de16:	2201      	movs	r2, #1
   4de18:	f105 0108 	add.w	r1, r5, #8
   4de1c:	4638      	mov	r0, r7
   4de1e:	47b0      	blx	r6
		if (len < 0) {
   4de20:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   4de24:	e7d4      	b.n	4ddd0 <cf_set+0x12>
		unsigned long next_id = strtoul(next, NULL, 10);
   4de26:	220a      	movs	r2, #10
   4de28:	4621      	mov	r1, r4
   4de2a:	f7fd fc78 	bl	4b71e <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4de2e:	2800      	cmp	r0, #0
   4de30:	d0de      	beq.n	4ddf0 <cf_set+0x32>
   4de32:	e7cb      	b.n	4ddcc <cf_set+0xe>
		clear_cf_cfg(cfg);
   4de34:	4628      	mov	r0, r5
   4de36:	f7ff ffa5 	bl	4dd84 <clear_cf_cfg>
   4de3a:	e7c9      	b.n	4ddd0 <cf_set+0x12>
			return -ENOMEM;
   4de3c:	f06f 040b 	mvn.w	r4, #11
   4de40:	e7c6      	b.n	4ddd0 <cf_set+0x12>

0004de42 <gatt_find_type_encode>:
{
   4de42:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4de44:	f100 0508 	add.w	r5, r0, #8
   4de48:	2106      	movs	r1, #6
   4de4a:	4628      	mov	r0, r5
   4de4c:	4614      	mov	r4, r2
   4de4e:	f001 fceb 	bl	4f828 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4de52:	8923      	ldrh	r3, [r4, #8]
   4de54:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4de56:	89e3      	ldrh	r3, [r4, #14]
   4de58:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4de5a:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   4de5c:	6821      	ldr	r1, [r4, #0]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   4de5e:	2b00      	cmp	r3, #0
   4de60:	f642 0301 	movw	r3, #10241	; 0x2801
   4de64:	bf08      	it	eq
   4de66:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   4de6a:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   4de6c:	780b      	ldrb	r3, [r1, #0]
   4de6e:	b11b      	cbz	r3, 4de78 <gatt_find_type_encode+0x36>
   4de70:	2b02      	cmp	r3, #2
   4de72:	d006      	beq.n	4de82 <gatt_find_type_encode+0x40>
}
   4de74:	2000      	movs	r0, #0
   4de76:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   4de78:	8849      	ldrh	r1, [r1, #2]
   4de7a:	4628      	mov	r0, r5
   4de7c:	f001 fceb 	bl	4f856 <net_buf_simple_add_le16>
}
   4de80:	e7f8      	b.n	4de74 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   4de82:	2210      	movs	r2, #16
   4de84:	3101      	adds	r1, #1
   4de86:	4628      	mov	r0, r5
   4de88:	f001 fcd4 	bl	4f834 <net_buf_simple_add_mem>
   4de8c:	e7f2      	b.n	4de74 <gatt_find_type_encode+0x32>

0004de8e <sc_clear>:
{
   4de8e:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4de90:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   4de94:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4de96:	4631      	mov	r1, r6
   4de98:	7a00      	ldrb	r0, [r0, #8]
   4de9a:	f7fe f9b7 	bl	4c20c <bt_addr_le_is_bonded>
   4de9e:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   4dea0:	4631      	mov	r1, r6
   4dea2:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4dea4:	b11d      	cbz	r5, 4deae <sc_clear+0x20>
}
   4dea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   4deaa:	f7e3 b985 	b.w	311b8 <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   4deae:	f7e2 ffb1 	bl	30e14 <find_sc_cfg>
		if (cfg) {
   4deb2:	b128      	cbz	r0, 4dec0 <sc_clear+0x32>
	memset(cfg, 0, sizeof(*cfg));
   4deb4:	4629      	mov	r1, r5
   4deb6:	220c      	movs	r2, #12
}
   4deb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   4debc:	f7fd bcf0 	b.w	4b8a0 <memset>
}
   4dec0:	bd70      	pop	{r4, r5, r6, pc}

0004dec2 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   4dec2:	2a02      	cmp	r2, #2
{
   4dec4:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   4dec6:	d108      	bne.n	4deda <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   4dec8:	2300      	movs	r3, #0
   4deca:	f100 0188 	add.w	r1, r0, #136	; 0x88
   4dece:	461a      	mov	r2, r3
   4ded0:	7a00      	ldrb	r0, [r0, #8]
   4ded2:	f7ff fe10 	bl	4daf6 <sc_save>
}
   4ded6:	2002      	movs	r0, #2
   4ded8:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   4deda:	f7ff ffd8 	bl	4de8e <sc_clear>
   4dede:	e7fa      	b.n	4ded6 <sc_ccc_cfg_write+0x14>

0004dee0 <read_appearance>:
{
   4dee0:	b513      	push	{r0, r1, r4, lr}
   4dee2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   4dee6:	4610      	mov	r0, r2
	if (offset > value_len) {
   4dee8:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   4deea:	f240 32c1 	movw	r2, #961	; 0x3c1
   4deee:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   4def2:	d80d      	bhi.n	4df10 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   4def4:	f1c1 0402 	rsb	r4, r1, #2
   4def8:	429c      	cmp	r4, r3
   4defa:	bfa8      	it	ge
   4defc:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4defe:	f10d 0306 	add.w	r3, sp, #6
   4df02:	4622      	mov	r2, r4
   4df04:	4419      	add	r1, r3
   4df06:	f7fd fcc0 	bl	4b88a <memcpy>
}
   4df0a:	4620      	mov	r0, r4
   4df0c:	b002      	add	sp, #8
   4df0e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4df10:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   4df14:	e7f9      	b.n	4df0a <read_appearance+0x2a>

0004df16 <read_name>:
{
   4df16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4df1a:	4698      	mov	r8, r3
   4df1c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   4df20:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   4df22:	f7e0 f855 	bl	2dfd0 <bt_get_name>
   4df26:	4607      	mov	r7, r0
				 strlen(name));
   4df28:	f7fd fc7b 	bl	4b822 <strlen>
	if (offset > value_len) {
   4df2c:	b283      	uxth	r3, r0
   4df2e:	42b3      	cmp	r3, r6
   4df30:	d30c      	bcc.n	4df4c <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   4df32:	1b9c      	subs	r4, r3, r6
   4df34:	4544      	cmp	r4, r8
   4df36:	bfa8      	it	ge
   4df38:	4644      	movge	r4, r8
   4df3a:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   4df3c:	4622      	mov	r2, r4
   4df3e:	19b9      	adds	r1, r7, r6
   4df40:	4628      	mov	r0, r5
   4df42:	f7fd fca2 	bl	4b88a <memcpy>
}
   4df46:	4620      	mov	r0, r4
   4df48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4df4c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   4df50:	e7f9      	b.n	4df46 <read_name+0x30>

0004df52 <cf_read>:
{
   4df52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4df54:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   4df56:	2300      	movs	r3, #0
{
   4df58:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   4df5c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   4df60:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   4df62:	f7e2 ff35 	bl	30dd0 <find_cf_cfg>
	if (cfg) {
   4df66:	b128      	cbz	r0, 4df74 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   4df68:	f100 0108 	add.w	r1, r0, #8
   4df6c:	2201      	movs	r2, #1
   4df6e:	a801      	add	r0, sp, #4
   4df70:	f7fd fc8b 	bl	4b88a <memcpy>
	if (offset > value_len) {
   4df74:	2e01      	cmp	r6, #1
   4df76:	d80d      	bhi.n	4df94 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   4df78:	f1c6 0401 	rsb	r4, r6, #1
   4df7c:	42bc      	cmp	r4, r7
   4df7e:	bfa8      	it	ge
   4df80:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   4df82:	ab01      	add	r3, sp, #4
   4df84:	4622      	mov	r2, r4
   4df86:	1999      	adds	r1, r3, r6
   4df88:	4628      	mov	r0, r5
   4df8a:	f7fd fc7e 	bl	4b88a <memcpy>
}
   4df8e:	4620      	mov	r0, r4
   4df90:	b003      	add	sp, #12
   4df92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4df94:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   4df98:	e7f9      	b.n	4df8e <cf_read+0x3c>

0004df9a <bt_gatt_attr_read_service>:
{
   4df9a:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   4df9c:	68c9      	ldr	r1, [r1, #12]
{
   4df9e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   4dfa0:	780a      	ldrb	r2, [r1, #0]
{
   4dfa2:	461c      	mov	r4, r3
   4dfa4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   4dfa8:	b992      	cbnz	r2, 4dfd0 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   4dfaa:	884a      	ldrh	r2, [r1, #2]
   4dfac:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   4dfb0:	2b02      	cmp	r3, #2
   4dfb2:	d818      	bhi.n	4dfe6 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   4dfb4:	f1c3 0202 	rsb	r2, r3, #2
   4dfb8:	4294      	cmp	r4, r2
   4dfba:	bfa8      	it	ge
   4dfbc:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   4dfbe:	4622      	mov	r2, r4
   4dfc0:	f10d 0106 	add.w	r1, sp, #6
   4dfc4:	4419      	add	r1, r3
   4dfc6:	f7fd fc60 	bl	4b88a <memcpy>
}
   4dfca:	4620      	mov	r0, r4
   4dfcc:	b002      	add	sp, #8
   4dfce:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   4dfd0:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   4dfd2:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   4dfd6:	d806      	bhi.n	4dfe6 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   4dfd8:	f1c3 0210 	rsb	r2, r3, #16
   4dfdc:	4294      	cmp	r4, r2
   4dfde:	bfa8      	it	ge
   4dfe0:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   4dfe2:	4622      	mov	r2, r4
   4dfe4:	e7ee      	b.n	4dfc4 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4dfe6:	f06f 0406 	mvn.w	r4, #6
   4dfea:	e7ee      	b.n	4dfca <bt_gatt_attr_read_service+0x30>

0004dfec <bt_gatt_attr_read_ccc>:
{
   4dfec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   4dfee:	68c9      	ldr	r1, [r1, #12]
{
   4dff0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   4dff4:	4615      	mov	r5, r2
   4dff6:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   4dff8:	f7ff fcc2 	bl	4d980 <find_ccc_cfg>
	if (cfg) {
   4dffc:	b100      	cbz	r0, 4e000 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   4dffe:	8900      	ldrh	r0, [r0, #8]
   4e000:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   4e004:	2e02      	cmp	r6, #2
   4e006:	d80e      	bhi.n	4e026 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   4e008:	f1c6 0402 	rsb	r4, r6, #2
   4e00c:	42bc      	cmp	r4, r7
   4e00e:	bfa8      	it	ge
   4e010:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   4e012:	f10d 0306 	add.w	r3, sp, #6
   4e016:	4622      	mov	r2, r4
   4e018:	1999      	adds	r1, r3, r6
   4e01a:	4628      	mov	r0, r5
   4e01c:	f7fd fc35 	bl	4b88a <memcpy>
}
   4e020:	4620      	mov	r0, r4
   4e022:	b003      	add	sp, #12
   4e024:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e026:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   4e02a:	e7f9      	b.n	4e020 <bt_gatt_attr_read_ccc+0x34>

0004e02c <gatt_write_ccc_buf>:
{
   4e02c:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4e02e:	f100 0508 	add.w	r5, r0, #8
   4e032:	2102      	movs	r1, #2
   4e034:	4628      	mov	r0, r5
   4e036:	4614      	mov	r4, r2
   4e038:	f001 fbf6 	bl	4f828 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   4e03c:	8963      	ldrh	r3, [r4, #10]
   4e03e:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   4e040:	8aa1      	ldrh	r1, [r4, #20]
   4e042:	4628      	mov	r0, r5
   4e044:	f001 fc07 	bl	4f856 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4e048:	2104      	movs	r1, #4
   4e04a:	f104 0018 	add.w	r0, r4, #24
   4e04e:	f7ff fc85 	bl	4d95c <atomic_or>
}
   4e052:	2000      	movs	r0, #0
   4e054:	bd38      	pop	{r3, r4, r5, pc}

0004e056 <sc_restore_rsp>:
{
   4e056:	b538      	push	{r3, r4, r5, lr}
   4e058:	4604      	mov	r4, r0
   4e05a:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   4e05c:	f7e2 feb8 	bl	30dd0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   4e060:	b130      	cbz	r0, 4e070 <sc_restore_rsp+0x1a>
   4e062:	7a03      	ldrb	r3, [r0, #8]
   4e064:	07db      	lsls	r3, r3, #31
   4e066:	d503      	bpl.n	4e070 <sc_restore_rsp+0x1a>
   4e068:	2101      	movs	r1, #1
   4e06a:	300c      	adds	r0, #12
   4e06c:	f7ff fc76 	bl	4d95c <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   4e070:	b985      	cbnz	r5, 4e094 <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   4e072:	7a20      	ldrb	r0, [r4, #8]
   4e074:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4e078:	f7e2 fecc 	bl	30e14 <find_sc_cfg>
		if (sc_cfg) {
   4e07c:	4604      	mov	r4, r0
   4e07e:	b148      	cbz	r0, 4e094 <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   4e080:	4629      	mov	r1, r5
   4e082:	2204      	movs	r2, #4
   4e084:	3008      	adds	r0, #8
   4e086:	f7fd fc0b 	bl	4b8a0 <memset>
		sc_store(cfg);
   4e08a:	4620      	mov	r0, r4
}
   4e08c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   4e090:	f7e2 bf1a 	b.w	30ec8 <sc_store>
}
   4e094:	bd38      	pop	{r3, r4, r5, pc}

0004e096 <bt_gatt_attr_read>:
{
   4e096:	b510      	push	{r4, lr}
   4e098:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   4e09c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   4e0a0:	42a1      	cmp	r1, r4
{
   4e0a2:	4610      	mov	r0, r2
	if (offset > value_len) {
   4e0a4:	d80b      	bhi.n	4e0be <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   4e0a6:	1a64      	subs	r4, r4, r1
   4e0a8:	429c      	cmp	r4, r3
   4e0aa:	bfa8      	it	ge
   4e0ac:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4e0ae:	9b03      	ldr	r3, [sp, #12]
   4e0b0:	b2a4      	uxth	r4, r4
   4e0b2:	4622      	mov	r2, r4
   4e0b4:	4419      	add	r1, r3
   4e0b6:	f7fd fbe8 	bl	4b88a <memcpy>
}
   4e0ba:	4620      	mov	r0, r4
   4e0bc:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e0be:	f06f 0406 	mvn.w	r4, #6
   4e0c2:	e7fa      	b.n	4e0ba <bt_gatt_attr_read+0x24>

0004e0c4 <bt_gatt_attr_value_handle>:
{
   4e0c4:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   4e0c6:	4604      	mov	r4, r0
   4e0c8:	b910      	cbnz	r0, 4e0d0 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   4e0ca:	2000      	movs	r0, #0
}
   4e0cc:	b002      	add	sp, #8
   4e0ce:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   4e0d0:	2300      	movs	r3, #0
   4e0d2:	f88d 3004 	strb.w	r3, [sp, #4]
   4e0d6:	6800      	ldr	r0, [r0, #0]
   4e0d8:	f642 0303 	movw	r3, #10243	; 0x2803
   4e0dc:	a901      	add	r1, sp, #4
   4e0de:	f8ad 3006 	strh.w	r3, [sp, #6]
   4e0e2:	f7fd fcc0 	bl	4ba66 <bt_uuid_cmp>
   4e0e6:	2800      	cmp	r0, #0
   4e0e8:	d1ef      	bne.n	4e0ca <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   4e0ea:	68e3      	ldr	r3, [r4, #12]
   4e0ec:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   4e0ee:	2800      	cmp	r0, #0
   4e0f0:	d1ec      	bne.n	4e0cc <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   4e0f2:	4620      	mov	r0, r4
   4e0f4:	f7e3 f99c 	bl	31430 <bt_gatt_attr_get_handle>
   4e0f8:	3001      	adds	r0, #1
   4e0fa:	b280      	uxth	r0, r0
	return handle;
   4e0fc:	e7e6      	b.n	4e0cc <bt_gatt_attr_value_handle+0x8>

0004e0fe <bt_gatt_attr_read_chrc>:
{
   4e0fe:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   4e100:	68cc      	ldr	r4, [r1, #12]
{
   4e102:	b087      	sub	sp, #28
   4e104:	4608      	mov	r0, r1
   4e106:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   4e108:	79a3      	ldrb	r3, [r4, #6]
   4e10a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   4e10e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   4e112:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   4e114:	f7ff ffd6 	bl	4e0c4 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   4e118:	6821      	ldr	r1, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   4e11a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   4e11e:	780b      	ldrb	r3, [r1, #0]
   4e120:	b99b      	cbnz	r3, 4e14a <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   4e122:	884b      	ldrh	r3, [r1, #2]
   4e124:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   4e128:	2405      	movs	r4, #5
	if (offset > value_len) {
   4e12a:	42b4      	cmp	r4, r6
   4e12c:	d315      	bcc.n	4e15a <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   4e12e:	1ba4      	subs	r4, r4, r6
   4e130:	42bc      	cmp	r4, r7
   4e132:	bfa8      	it	ge
   4e134:	463c      	movge	r4, r7
   4e136:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   4e138:	ab01      	add	r3, sp, #4
   4e13a:	4622      	mov	r2, r4
   4e13c:	1999      	adds	r1, r3, r6
   4e13e:	4628      	mov	r0, r5
   4e140:	f7fd fba3 	bl	4b88a <memcpy>
}
   4e144:	4620      	mov	r0, r4
   4e146:	b007      	add	sp, #28
   4e148:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   4e14a:	2210      	movs	r2, #16
   4e14c:	3101      	adds	r1, #1
   4e14e:	f10d 0007 	add.w	r0, sp, #7
   4e152:	f7fd fb9a 	bl	4b88a <memcpy>
		value_len += 16U;
   4e156:	2413      	movs	r4, #19
   4e158:	e7e7      	b.n	4e12a <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e15a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   4e15e:	e7f1      	b.n	4e144 <bt_gatt_attr_read_chrc+0x46>

0004e160 <bt_gatt_foreach_attr>:
{
   4e160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   4e162:	e9cd 2301 	strd	r2, r3, [sp, #4]
   4e166:	2300      	movs	r3, #0
   4e168:	9300      	str	r3, [sp, #0]
   4e16a:	461a      	mov	r2, r3
   4e16c:	f7e3 f990 	bl	31490 <bt_gatt_foreach_attr_type>
}
   4e170:	b005      	add	sp, #20
   4e172:	f85d fb04 	ldr.w	pc, [sp], #4

0004e176 <bt_gatt_check_perm>:
{
   4e176:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   4e178:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   4e17a:	7c8b      	ldrb	r3, [r1, #18]
{
   4e17c:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   4e17e:	d504      	bpl.n	4e18a <bt_gatt_check_perm+0x14>
   4e180:	f013 0f15 	tst.w	r3, #21
   4e184:	d01e      	beq.n	4e1c4 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   4e186:	6848      	ldr	r0, [r1, #4]
   4e188:	b1e0      	cbz	r0, 4e1c4 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   4e18a:	0790      	lsls	r0, r2, #30
   4e18c:	d504      	bpl.n	4e198 <bt_gatt_check_perm+0x22>
   4e18e:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   4e192:	d019      	beq.n	4e1c8 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   4e194:	6889      	ldr	r1, [r1, #8]
   4e196:	b1b9      	cbz	r1, 4e1c8 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   4e198:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   4e19c:	f014 0f30 	tst.w	r4, #48	; 0x30
   4e1a0:	d103      	bne.n	4e1aa <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   4e1a2:	f014 000c 	ands.w	r0, r4, #12
   4e1a6:	d107      	bne.n	4e1b8 <bt_gatt_check_perm+0x42>
}
   4e1a8:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   4e1aa:	4628      	mov	r0, r5
   4e1ac:	f7fe fc4d 	bl	4ca4a <bt_conn_get_security>
   4e1b0:	2802      	cmp	r0, #2
   4e1b2:	d8f6      	bhi.n	4e1a2 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   4e1b4:	2005      	movs	r0, #5
   4e1b6:	e7f7      	b.n	4e1a8 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   4e1b8:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   4e1ba:	2b00      	cmp	r3, #0
   4e1bc:	bf14      	ite	ne
   4e1be:	2000      	movne	r0, #0
   4e1c0:	200f      	moveq	r0, #15
   4e1c2:	e7f1      	b.n	4e1a8 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   4e1c4:	2002      	movs	r0, #2
   4e1c6:	e7ef      	b.n	4e1a8 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   4e1c8:	2003      	movs	r0, #3
   4e1ca:	e7ed      	b.n	4e1a8 <bt_gatt_check_perm+0x32>

0004e1cc <gatt_notify>:
{
   4e1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4e1d0:	4614      	mov	r4, r2
   4e1d2:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   4e1d4:	2214      	movs	r2, #20
   4e1d6:	6861      	ldr	r1, [r4, #4]
{
   4e1d8:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   4e1da:	f7ff ffcc 	bl	4e176 <bt_gatt_check_perm>
   4e1de:	bb08      	cbnz	r0, 4e224 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   4e1e0:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   4e1e2:	211b      	movs	r1, #27
   4e1e4:	3202      	adds	r2, #2
   4e1e6:	4638      	mov	r0, r7
   4e1e8:	f7ff fa00 	bl	4d5ec <bt_att_create_pdu>
	if (!buf) {
   4e1ec:	4605      	mov	r5, r0
   4e1ee:	b1e8      	cbz	r0, 4e22c <gatt_notify+0x60>
	return net_buf_simple_add(&buf->b, len);
   4e1f0:	f100 0908 	add.w	r9, r0, #8
   4e1f4:	2102      	movs	r1, #2
   4e1f6:	4648      	mov	r0, r9
   4e1f8:	f001 fb16 	bl	4f828 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   4e1fc:	4606      	mov	r6, r0
   4e1fe:	89a1      	ldrh	r1, [r4, #12]
   4e200:	f826 8b02 	strh.w	r8, [r6], #2
   4e204:	4648      	mov	r0, r9
   4e206:	f001 fb0f 	bl	4f828 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   4e20a:	89a2      	ldrh	r2, [r4, #12]
   4e20c:	68a1      	ldr	r1, [r4, #8]
   4e20e:	4630      	mov	r0, r6
   4e210:	f7fd fb3b 	bl	4b88a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   4e214:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   4e218:	4629      	mov	r1, r5
   4e21a:	4638      	mov	r0, r7
}
   4e21c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   4e220:	f7ff ba9b 	b.w	4d75a <bt_att_send>
		return -EPERM;
   4e224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   4e228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   4e22c:	f06f 000b 	mvn.w	r0, #11
   4e230:	e7fa      	b.n	4e228 <gatt_notify+0x5c>

0004e232 <gatt_discover_next>:
{
   4e232:	b570      	push	{r4, r5, r6, lr}
	if (!last_handle)
   4e234:	460b      	mov	r3, r1
{
   4e236:	4605      	mov	r5, r0
   4e238:	4614      	mov	r4, r2
	if (!last_handle)
   4e23a:	b929      	cbnz	r1, 4e248 <gatt_discover_next+0x16>
	if (!bt_gatt_discover(conn, params)) {
   4e23c:	4621      	mov	r1, r4
   4e23e:	4628      	mov	r0, r5
   4e240:	f7e3 fcc4 	bl	31bcc <bt_gatt_discover>
   4e244:	b928      	cbnz	r0, 4e252 <gatt_discover_next+0x20>
}
   4e246:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   4e248:	f64f 72ff 	movw	r2, #65535	; 0xffff
   4e24c:	4291      	cmp	r1, r2
   4e24e:	d107      	bne.n	4e260 <gatt_discover_next+0x2e>
	params->start_handle = last_handle;
   4e250:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   4e252:	6863      	ldr	r3, [r4, #4]
   4e254:	4622      	mov	r2, r4
   4e256:	4628      	mov	r0, r5
   4e258:	2100      	movs	r1, #0
}
   4e25a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   4e25e:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   4e260:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   4e262:	3301      	adds	r3, #1
   4e264:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   4e266:	429a      	cmp	r2, r3
		params->start_handle++;
   4e268:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   4e26a:	d2e7      	bcs.n	4e23c <gatt_discover_next+0xa>
   4e26c:	e7f1      	b.n	4e252 <gatt_discover_next+0x20>

0004e26e <gatt_find_type_rsp>:
{
   4e26e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4e272:	b088      	sub	sp, #32
   4e274:	4607      	mov	r7, r0
   4e276:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   4e27a:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   4e27c:	b911      	cbnz	r1, 4e284 <gatt_find_type_rsp+0x16>
   4e27e:	f013 0803 	ands.w	r8, r3, #3
   4e282:	d008      	beq.n	4e296 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   4e284:	f8d9 3004 	ldr.w	r3, [r9, #4]
   4e288:	464a      	mov	r2, r9
   4e28a:	2100      	movs	r1, #0
   4e28c:	4638      	mov	r0, r7
}
   4e28e:	b008      	add	sp, #32
   4e290:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   4e294:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   4e296:	f3c3 0387 	ubfx	r3, r3, #2, #8
   4e29a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4e29e:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   4e2a0:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   4e2a4:	42ac      	cmp	r4, r5
   4e2a6:	d107      	bne.n	4e2b8 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   4e2a8:	464a      	mov	r2, r9
   4e2aa:	4641      	mov	r1, r8
   4e2ac:	4638      	mov	r0, r7
}
   4e2ae:	b008      	add	sp, #32
   4e2b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   4e2b4:	f7ff bfbd 	b.w	4e232 <gatt_discover_next>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   4e2b8:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4e2ba:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   4e2be:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   4e2c2:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   4e2c4:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   4e2c8:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   4e2cc:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   4e2ce:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   4e2d0:	bf0c      	ite	eq
   4e2d2:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   4e2d6:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4e2d8:	ab01      	add	r3, sp, #4
   4e2da:	f8ad 1002 	strh.w	r1, [sp, #2]
   4e2de:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   4e2e0:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4e2e4:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e2e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4e2ec:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4e2f0:	f8cd d00c 	str.w	sp, [sp, #12]
   4e2f4:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e2f8:	464a      	mov	r2, r9
   4e2fa:	a903      	add	r1, sp, #12
   4e2fc:	4638      	mov	r0, r7
   4e2fe:	4798      	blx	r3
   4e300:	3404      	adds	r4, #4
   4e302:	2800      	cmp	r0, #0
   4e304:	d1ce      	bne.n	4e2a4 <gatt_find_type_rsp+0x36>
}
   4e306:	b008      	add	sp, #32
   4e308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004e30c <gatt_read_group_rsp>:
{
   4e30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e310:	b08f      	sub	sp, #60	; 0x3c
   4e312:	4681      	mov	r9, r0
   4e314:	9d18      	ldr	r5, [sp, #96]	; 0x60
   4e316:	4617      	mov	r7, r2
	if (err) {
   4e318:	b131      	cbz	r1, 4e328 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   4e31a:	686b      	ldr	r3, [r5, #4]
   4e31c:	462a      	mov	r2, r5
   4e31e:	2100      	movs	r1, #0
}
   4e320:	b00f      	add	sp, #60	; 0x3c
   4e322:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   4e326:	4718      	bx	r3
	switch (rsp->len) {
   4e328:	7812      	ldrb	r2, [r2, #0]
   4e32a:	2a06      	cmp	r2, #6
   4e32c:	d002      	beq.n	4e334 <gatt_read_group_rsp+0x28>
   4e32e:	2a14      	cmp	r2, #20
   4e330:	d10d      	bne.n	4e34e <gatt_read_group_rsp+0x42>
   4e332:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   4e334:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   4e336:	f88d 1010 	strb.w	r1, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   4e33a:	b29c      	uxth	r4, r3
   4e33c:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
   4e340:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   4e342:	783b      	ldrb	r3, [r7, #0]
   4e344:	42a3      	cmp	r3, r4
   4e346:	d90a      	bls.n	4e35e <gatt_read_group_rsp+0x52>
	if (length == 0U && end_handle) {
   4e348:	b90c      	cbnz	r4, 4e34e <gatt_read_group_rsp+0x42>
   4e34a:	2e00      	cmp	r6, #0
   4e34c:	d150      	bne.n	4e3f0 <gatt_read_group_rsp+0xe4>
	params->func(conn, NULL, params);
   4e34e:	686b      	ldr	r3, [r5, #4]
   4e350:	462a      	mov	r2, r5
   4e352:	2100      	movs	r1, #0
   4e354:	4648      	mov	r0, r9
   4e356:	4798      	blx	r3
}
   4e358:	b00f      	add	sp, #60	; 0x3c
   4e35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct bt_gatt_attr attr = {};
   4e35e:	2214      	movs	r2, #20
   4e360:	2100      	movs	r1, #0
   4e362:	a809      	add	r0, sp, #36	; 0x24
   4e364:	f7fd fa9c 	bl	4b8a0 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   4e368:	f8b8 a000 	ldrh.w	sl, [r8]
   4e36c:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   4e370:	2b00      	cmp	r3, #0
   4e372:	d0ec      	beq.n	4e34e <gatt_read_group_rsp+0x42>
		end_handle = sys_le16_to_cpu(data->end_handle);
   4e374:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   4e378:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   4e37c:	2e00      	cmp	r6, #0
   4e37e:	d0e6      	beq.n	4e34e <gatt_read_group_rsp+0x42>
   4e380:	42b3      	cmp	r3, r6
   4e382:	d8e4      	bhi.n	4e34e <gatt_read_group_rsp+0x42>
		switch (u.uuid.type) {
   4e384:	f89d 3010 	ldrb.w	r3, [sp, #16]
   4e388:	b323      	cbz	r3, 4e3d4 <gatt_read_group_rsp+0xc8>
   4e38a:	2b02      	cmp	r3, #2
   4e38c:	d02a      	beq.n	4e3e4 <gatt_read_group_rsp+0xd8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4e38e:	f04f 0300 	mov.w	r3, #0
   4e392:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4e396:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
   4e398:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   4e39c:	2b00      	cmp	r3, #0
   4e39e:	f642 0301 	movw	r3, #10241	; 0x2801
   4e3a2:	bf08      	it	eq
   4e3a4:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   4e3a8:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   4e3ac:	ab04      	add	r3, sp, #16
   4e3ae:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   4e3b0:	ab01      	add	r3, sp, #4
   4e3b2:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   4e3b4:	ab02      	add	r3, sp, #8
   4e3b6:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
   4e3b8:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e3bc:	686b      	ldr	r3, [r5, #4]
   4e3be:	462a      	mov	r2, r5
   4e3c0:	a909      	add	r1, sp, #36	; 0x24
   4e3c2:	4648      	mov	r0, r9
   4e3c4:	4798      	blx	r3
   4e3c6:	2800      	cmp	r0, #0
   4e3c8:	d0c6      	beq.n	4e358 <gatt_read_group_rsp+0x4c>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   4e3ca:	783b      	ldrb	r3, [r7, #0]
   4e3cc:	1ae4      	subs	r4, r4, r3
   4e3ce:	b2a4      	uxth	r4, r4
   4e3d0:	4498      	add	r8, r3
   4e3d2:	e7b6      	b.n	4e342 <gatt_read_group_rsp+0x36>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   4e3d4:	2202      	movs	r2, #2
   4e3d6:	f108 0104 	add.w	r1, r8, #4
   4e3da:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   4e3de:	f7fd fa54 	bl	4b88a <memcpy>
			break;
   4e3e2:	e7d4      	b.n	4e38e <gatt_read_group_rsp+0x82>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   4e3e4:	2210      	movs	r2, #16
   4e3e6:	f108 0104 	add.w	r1, r8, #4
   4e3ea:	f10d 0011 	add.w	r0, sp, #17
   4e3ee:	e7f6      	b.n	4e3de <gatt_read_group_rsp+0xd2>
	gatt_discover_next(conn, handle, params);
   4e3f0:	462a      	mov	r2, r5
   4e3f2:	4631      	mov	r1, r6
   4e3f4:	4648      	mov	r0, r9
}
   4e3f6:	b00f      	add	sp, #60	; 0x3c
   4e3f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   4e3fc:	f7ff bf19 	b.w	4e232 <gatt_discover_next>

0004e400 <read_included_uuid_cb>:
{
   4e400:	b570      	push	{r4, r5, r6, lr}
   4e402:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
   4e404:	2b10      	cmp	r3, #16
{
   4e406:	4611      	mov	r1, r2
   4e408:	9c12      	ldr	r4, [sp, #72]	; 0x48
   4e40a:	4605      	mov	r5, r0
   4e40c:	461a      	mov	r2, r3
	if (length != 16U) {
   4e40e:	d006      	beq.n	4e41e <read_included_uuid_cb+0x1e>
		params->func(conn, NULL, params);
   4e410:	6863      	ldr	r3, [r4, #4]
   4e412:	4622      	mov	r2, r4
   4e414:	2100      	movs	r1, #0
}
   4e416:	b00e      	add	sp, #56	; 0x38
   4e418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   4e41c:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   4e41e:	8963      	ldrh	r3, [r4, #10]
   4e420:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   4e424:	89a3      	ldrh	r3, [r4, #12]
   4e426:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
   4e42a:	ae04      	add	r6, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
   4e42c:	2302      	movs	r3, #2
	memcpy(u.u128.val, pdu, length);
   4e42e:	f10d 0011 	add.w	r0, sp, #17
	value.uuid = &u.uuid;
   4e432:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   4e434:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   4e438:	f7fd fa27 	bl	4b88a <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4e43c:	6821      	ldr	r1, [r4, #0]
   4e43e:	b9c9      	cbnz	r1, 4e474 <read_included_uuid_cb+0x74>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4e440:	f642 0202 	movw	r2, #10242	; 0x2802
   4e444:	2300      	movs	r3, #0
   4e446:	f8ad 2006 	strh.w	r2, [sp, #6]
   4e44a:	aa01      	add	r2, sp, #4
   4e44c:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   4e450:	f88d 3004 	strb.w	r3, [sp, #4]
   4e454:	aa02      	add	r2, sp, #8
   4e456:	930b      	str	r3, [sp, #44]	; 0x2c
   4e458:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   4e45c:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4e45e:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   4e460:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e464:	4622      	mov	r2, r4
   4e466:	6863      	ldr	r3, [r4, #4]
   4e468:	a909      	add	r1, sp, #36	; 0x24
   4e46a:	4628      	mov	r0, r5
   4e46c:	4798      	blx	r3
   4e46e:	b930      	cbnz	r0, 4e47e <read_included_uuid_cb+0x7e>
}
   4e470:	b00e      	add	sp, #56	; 0x38
   4e472:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4e474:	4630      	mov	r0, r6
   4e476:	f7fd faf6 	bl	4ba66 <bt_uuid_cmp>
   4e47a:	2800      	cmp	r0, #0
   4e47c:	d0e0      	beq.n	4e440 <read_included_uuid_cb+0x40>
	gatt_discover_next(conn, params->start_handle, params);
   4e47e:	8921      	ldrh	r1, [r4, #8]
   4e480:	4622      	mov	r2, r4
   4e482:	4628      	mov	r0, r5
   4e484:	f7ff fed5 	bl	4e232 <gatt_discover_next>
	return;
   4e488:	e7f2      	b.n	4e470 <read_included_uuid_cb+0x70>

0004e48a <gatt_find_info_rsp>:
{
   4e48a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4e48e:	b08f      	sub	sp, #60	; 0x3c
   4e490:	4680      	mov	r8, r0
   4e492:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   4e494:	2900      	cmp	r1, #0
   4e496:	f040 8094 	bne.w	4e5c2 <gatt_find_info_rsp+0x138>
	switch (rsp->format) {
   4e49a:	7810      	ldrb	r0, [r2, #0]
   4e49c:	2801      	cmp	r0, #1
   4e49e:	d01d      	beq.n	4e4dc <gatt_find_info_rsp+0x52>
   4e4a0:	2802      	cmp	r0, #2
   4e4a2:	f040 808e 	bne.w	4e5c2 <gatt_find_info_rsp+0x138>
   4e4a6:	4601      	mov	r1, r0
		len = sizeof(*info.i128);
   4e4a8:	f04f 0a12 	mov.w	sl, #18
	length--;
   4e4ac:	3b01      	subs	r3, #1
   4e4ae:	b29b      	uxth	r3, r3
	if (length < len) {
   4e4b0:	4553      	cmp	r3, sl
		u.uuid.type = BT_UUID_TYPE_16;
   4e4b2:	f88d 1010 	strb.w	r1, [sp, #16]
	if (length < len) {
   4e4b6:	f0c0 8084 	bcc.w	4e5c2 <gatt_find_info_rsp+0x138>
	for (i = length / len, pdu = rsp->info; i != 0;
   4e4ba:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
   4e4be:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   4e4c2:	9300      	str	r3, [sp, #0]
   4e4c4:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   4e4c6:	46cb      	mov	fp, r9
			skip = false;
   4e4c8:	464d      	mov	r5, r9
   4e4ca:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
   4e4cc:	9b00      	ldr	r3, [sp, #0]
   4e4ce:	b943      	cbnz	r3, 4e4e2 <gatt_find_info_rsp+0x58>
	gatt_discover_next(conn, handle, params);
   4e4d0:	4632      	mov	r2, r6
   4e4d2:	4659      	mov	r1, fp
   4e4d4:	4640      	mov	r0, r8
   4e4d6:	f7ff feac 	bl	4e232 <gatt_discover_next>
	return;
   4e4da:	e06f      	b.n	4e5bc <gatt_find_info_rsp+0x132>
	switch (rsp->format) {
   4e4dc:	f04f 0a04 	mov.w	sl, #4
   4e4e0:	e7e4      	b.n	4e4ac <gatt_find_info_rsp+0x22>
		handle = sys_le16_to_cpu(info.i16->handle);
   4e4e2:	8823      	ldrh	r3, [r4, #0]
   4e4e4:	9301      	str	r3, [sp, #4]
   4e4e6:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   4e4ea:	f1b9 0f00 	cmp.w	r9, #0
   4e4ee:	d151      	bne.n	4e594 <gatt_find_info_rsp+0x10a>
		switch (u.uuid.type) {
   4e4f0:	f89d 3010 	ldrb.w	r3, [sp, #16]
   4e4f4:	2b00      	cmp	r3, #0
   4e4f6:	d03a      	beq.n	4e56e <gatt_find_info_rsp+0xe4>
   4e4f8:	2b02      	cmp	r3, #2
   4e4fa:	d03f      	beq.n	4e57c <gatt_find_info_rsp+0xf2>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4e4fc:	6831      	ldr	r1, [r6, #0]
   4e4fe:	2900      	cmp	r1, #0
   4e500:	d143      	bne.n	4e58a <gatt_find_info_rsp+0x100>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   4e502:	7c33      	ldrb	r3, [r6, #16]
   4e504:	2b04      	cmp	r3, #4
   4e506:	d148      	bne.n	4e59a <gatt_find_info_rsp+0x110>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   4e508:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   4e50c:	a902      	add	r1, sp, #8
   4e50e:	4638      	mov	r0, r7
   4e510:	f88d 5008 	strb.w	r5, [sp, #8]
   4e514:	f8ad 300a 	strh.w	r3, [sp, #10]
   4e518:	f7fd faa5 	bl	4ba66 <bt_uuid_cmp>
   4e51c:	b310      	cbz	r0, 4e564 <gatt_find_info_rsp+0xda>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   4e51e:	f642 0301 	movw	r3, #10241	; 0x2801
   4e522:	a903      	add	r1, sp, #12
   4e524:	4638      	mov	r0, r7
   4e526:	f88d 500c 	strb.w	r5, [sp, #12]
   4e52a:	f8ad 300e 	strh.w	r3, [sp, #14]
   4e52e:	f7fd fa9a 	bl	4ba66 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   4e532:	b1b8      	cbz	r0, 4e564 <gatt_find_info_rsp+0xda>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   4e534:	f642 0302 	movw	r3, #10242	; 0x2802
   4e538:	a909      	add	r1, sp, #36	; 0x24
   4e53a:	4638      	mov	r0, r7
   4e53c:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   4e540:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   4e544:	f7fd fa8f 	bl	4ba66 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   4e548:	b160      	cbz	r0, 4e564 <gatt_find_info_rsp+0xda>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   4e54a:	f642 0303 	movw	r3, #10243	; 0x2803
   4e54e:	a909      	add	r1, sp, #36	; 0x24
   4e550:	4638      	mov	r0, r7
   4e552:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   4e556:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   4e55a:	f7fd fa84 	bl	4ba66 <bt_uuid_cmp>
   4e55e:	b9e0      	cbnz	r0, 4e59a <gatt_find_info_rsp+0x110>
				skip = true;
   4e560:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   4e564:	9b00      	ldr	r3, [sp, #0]
   4e566:	3b01      	subs	r3, #1
   4e568:	9300      	str	r3, [sp, #0]
   4e56a:	4454      	add	r4, sl
   4e56c:	e7ae      	b.n	4e4cc <gatt_find_info_rsp+0x42>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   4e56e:	78a3      	ldrb	r3, [r4, #2]
   4e570:	78e2      	ldrb	r2, [r4, #3]
   4e572:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4e576:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   4e57a:	e7bf      	b.n	4e4fc <gatt_find_info_rsp+0x72>
			memcpy(u.u128.val, info.i128->uuid, 16);
   4e57c:	2210      	movs	r2, #16
   4e57e:	1ca1      	adds	r1, r4, #2
   4e580:	f10d 0011 	add.w	r0, sp, #17
   4e584:	f7fd f981 	bl	4b88a <memcpy>
			break;
   4e588:	e7b8      	b.n	4e4fc <gatt_find_info_rsp+0x72>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4e58a:	4638      	mov	r0, r7
   4e58c:	f7fd fa6b 	bl	4ba66 <bt_uuid_cmp>
   4e590:	2800      	cmp	r0, #0
   4e592:	d0b6      	beq.n	4e502 <gatt_find_info_rsp+0x78>
			skip = false;
   4e594:	f04f 0900 	mov.w	r9, #0
   4e598:	e7e4      	b.n	4e564 <gatt_find_info_rsp+0xda>
		attr.handle = handle;
   4e59a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   4e59e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4e5a2:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   4e5a6:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e5aa:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4e5ac:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4e5b0:	4632      	mov	r2, r6
   4e5b2:	a909      	add	r1, sp, #36	; 0x24
   4e5b4:	4640      	mov	r0, r8
   4e5b6:	4798      	blx	r3
   4e5b8:	2800      	cmp	r0, #0
   4e5ba:	d1d3      	bne.n	4e564 <gatt_find_info_rsp+0xda>
}
   4e5bc:	b00f      	add	sp, #60	; 0x3c
   4e5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	params->func(conn, NULL, params);
   4e5c2:	6873      	ldr	r3, [r6, #4]
   4e5c4:	4632      	mov	r2, r6
   4e5c6:	2100      	movs	r1, #0
   4e5c8:	4640      	mov	r0, r8
   4e5ca:	4798      	blx	r3
   4e5cc:	e7f6      	b.n	4e5bc <gatt_find_info_rsp+0x132>

0004e5ce <bt_gatt_write_without_response_cb>:
{
   4e5ce:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   4e5d2:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   4e5d4:	7b42      	ldrb	r2, [r0, #13]
   4e5d6:	2a07      	cmp	r2, #7
{
   4e5d8:	461e      	mov	r6, r3
   4e5da:	e9dd 9a0d 	ldrd	r9, sl, [sp, #52]	; 0x34
   4e5de:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   4e5e2:	4605      	mov	r5, r0
   4e5e4:	4688      	mov	r8, r1
	if (conn->state != BT_CONN_CONNECTED) {
   4e5e6:	d130      	bne.n	4e64a <bt_gatt_write_without_response_cb+0x7c>
	if (conn->encrypt) {
   4e5e8:	7ac2      	ldrb	r2, [r0, #11]
   4e5ea:	bb0a      	cbnz	r2, 4e630 <bt_gatt_write_without_response_cb+0x62>
	if (sign) {
   4e5ec:	b303      	cbz	r3, 4e630 <bt_gatt_write_without_response_cb+0x62>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_SIGNED_WRITE_CMD,
   4e5ee:	f106 020e 	add.w	r2, r6, #14
   4e5f2:	21d2      	movs	r1, #210	; 0xd2
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   4e5f4:	f7fe fffa 	bl	4d5ec <bt_att_create_pdu>
   4e5f8:	4604      	mov	r4, r0
	if (!buf) {
   4e5fa:	b1b0      	cbz	r0, 4e62a <bt_gatt_write_without_response_cb+0x5c>
   4e5fc:	2102      	movs	r1, #2
   4e5fe:	3008      	adds	r0, #8
   4e600:	f001 f912 	bl	4f828 <net_buf_simple_add>
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   4e604:	2300      	movs	r3, #0
	cmd->handle = sys_cpu_to_le16(handle);
   4e606:	f8a0 8000 	strh.w	r8, [r0]
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   4e60a:	2200      	movs	r2, #0
   4e60c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   4e610:	2300      	movs	r3, #0
   4e612:	e9cd 2300 	strd	r2, r3, [sp]
   4e616:	4631      	mov	r1, r6
   4e618:	463a      	mov	r2, r7
   4e61a:	4620      	mov	r0, r4
   4e61c:	f7f4 ff8e 	bl	4353c <net_buf_append_bytes>
	if (write != length) {
   4e620:	42b0      	cmp	r0, r6
   4e622:	d009      	beq.n	4e638 <bt_gatt_write_without_response_cb+0x6a>
		net_buf_unref(buf);
   4e624:	4620      	mov	r0, r4
   4e626:	f7f4 ff57 	bl	434d8 <net_buf_unref>
		return -ENOMEM;
   4e62a:	f06f 000b 	mvn.w	r0, #11
   4e62e:	e00e      	b.n	4e64e <bt_gatt_write_without_response_cb+0x80>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   4e630:	1cb2      	adds	r2, r6, #2
   4e632:	2152      	movs	r1, #82	; 0x52
   4e634:	4628      	mov	r0, r5
   4e636:	e7dd      	b.n	4e5f4 <bt_gatt_write_without_response_cb+0x26>
	return bt_att_send(conn, buf, func, user_data);
   4e638:	4653      	mov	r3, sl
   4e63a:	464a      	mov	r2, r9
   4e63c:	4621      	mov	r1, r4
   4e63e:	4628      	mov	r0, r5
}
   4e640:	b004      	add	sp, #16
   4e642:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, func, user_data);
   4e646:	f7ff b888 	b.w	4d75a <bt_att_send>
		return -ENOTCONN;
   4e64a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   4e64e:	b004      	add	sp, #16
   4e650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004e654 <gatt_ccc_discover_cb>:
{
   4e654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4e656:	4606      	mov	r6, r0
	struct bt_gatt_subscribe_params *sub_params = params->sub_params;
   4e658:	6955      	ldr	r5, [r2, #20]
{
   4e65a:	4610      	mov	r0, r2
	if (!attr) {
   4e65c:	460c      	mov	r4, r1
   4e65e:	b951      	cbnz	r1, 4e676 <gatt_ccc_discover_cb+0x22>
		memset(params, 0, sizeof(*params));
   4e660:	2218      	movs	r2, #24
   4e662:	f7fd f91d 	bl	4b8a0 <memset>
		sub_params->notify(conn, sub_params, NULL, 0);
   4e666:	682f      	ldr	r7, [r5, #0]
   4e668:	4623      	mov	r3, r4
   4e66a:	4622      	mov	r2, r4
   4e66c:	4629      	mov	r1, r5
   4e66e:	4630      	mov	r0, r6
   4e670:	47b8      	blx	r7
		return BT_GATT_ITER_STOP;
   4e672:	2000      	movs	r0, #0
}
   4e674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   4e676:	7c13      	ldrb	r3, [r2, #16]
   4e678:	2b04      	cmp	r3, #4
   4e67a:	d112      	bne.n	4e6a2 <gatt_ccc_discover_cb+0x4e>
		memset(params, 0, sizeof(*params));
   4e67c:	2100      	movs	r1, #0
   4e67e:	2218      	movs	r2, #24
   4e680:	f7fd f90e 	bl	4b8a0 <memset>
		sub_params->ccc_handle = attr->handle;
   4e684:	8a23      	ldrh	r3, [r4, #16]
   4e686:	816b      	strh	r3, [r5, #10]
		if (bt_gatt_subscribe(conn, sub_params)) {
   4e688:	4629      	mov	r1, r5
   4e68a:	4630      	mov	r0, r6
   4e68c:	f7e3 fcaa 	bl	31fe4 <bt_gatt_subscribe>
   4e690:	2800      	cmp	r0, #0
   4e692:	d0ef      	beq.n	4e674 <gatt_ccc_discover_cb+0x20>
			sub_params->notify(conn, sub_params, NULL, 0);
   4e694:	2300      	movs	r3, #0
   4e696:	682c      	ldr	r4, [r5, #0]
   4e698:	461a      	mov	r2, r3
   4e69a:	4629      	mov	r1, r5
   4e69c:	4630      	mov	r0, r6
   4e69e:	47a0      	blx	r4
   4e6a0:	e7e7      	b.n	4e672 <gatt_ccc_discover_cb+0x1e>
	return BT_GATT_ITER_CONTINUE;
   4e6a2:	2001      	movs	r0, #1
   4e6a4:	e7e6      	b.n	4e674 <gatt_ccc_discover_cb+0x20>

0004e6a6 <bt_gatt_cancel>:
{
   4e6a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4e6a8:	4604      	mov	r4, r0
   4e6aa:	460d      	mov	r5, r1
	k_sched_lock();
   4e6ac:	f7f9 fd16 	bl	480dc <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   4e6b0:	4629      	mov	r1, r5
   4e6b2:	4620      	mov	r0, r4
   4e6b4:	f7ff f8ad 	bl	4d812 <bt_att_find_req_by_user_data>
	if (req) {
   4e6b8:	4601      	mov	r1, r0
   4e6ba:	b920      	cbnz	r0, 4e6c6 <bt_gatt_cancel+0x20>
}
   4e6bc:	b002      	add	sp, #8
   4e6be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   4e6c2:	f7f9 bed3 	b.w	4846c <k_sched_unlock>
		func = req->func;
   4e6c6:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   4e6c8:	4620      	mov	r0, r4
   4e6ca:	f7e2 fb47 	bl	30d5c <bt_att_req_cancel>
	k_sched_unlock();
   4e6ce:	f7f9 fecd 	bl	4846c <k_sched_unlock>
	if (func) {
   4e6d2:	b12e      	cbz	r6, 4e6e0 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   4e6d4:	2300      	movs	r3, #0
   4e6d6:	9500      	str	r5, [sp, #0]
   4e6d8:	461a      	mov	r2, r3
   4e6da:	210e      	movs	r1, #14
   4e6dc:	4620      	mov	r0, r4
   4e6de:	47b0      	blx	r6
}
   4e6e0:	b002      	add	sp, #8
   4e6e2:	bd70      	pop	{r4, r5, r6, pc}

0004e6e4 <bt_gatt_unsubscribe>:
{
   4e6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4e6e8:	7b43      	ldrb	r3, [r0, #13]
   4e6ea:	2b07      	cmp	r3, #7
{
   4e6ec:	4680      	mov	r8, r0
   4e6ee:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   4e6f0:	d155      	bne.n	4e79e <bt_gatt_unsubscribe+0xba>
	sub = gatt_sub_find(conn);
   4e6f2:	f7e2 fbab 	bl	30e4c <gatt_sub_find>
	if (!sub) {
   4e6f6:	4606      	mov	r6, r0
   4e6f8:	2800      	cmp	r0, #0
   4e6fa:	d053      	beq.n	4e7a4 <bt_gatt_unsubscribe+0xc0>
	return list->head;
   4e6fc:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   4e6fe:	b104      	cbz	r4, 4e702 <bt_gatt_unsubscribe+0x1e>
   4e700:	3c1c      	subs	r4, #28
			has_subscription = true;
   4e702:	2300      	movs	r3, #0
   4e704:	461f      	mov	r7, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   4e706:	bb5c      	cbnz	r4, 4e760 <bt_gatt_unsubscribe+0x7c>
	if (!found) {
   4e708:	2b00      	cmp	r3, #0
   4e70a:	d04b      	beq.n	4e7a4 <bt_gatt_unsubscribe+0xc0>
	if (!has_subscription) {
   4e70c:	2f00      	cmp	r7, #0
   4e70e:	d035      	beq.n	4e77c <bt_gatt_unsubscribe+0x98>
   4e710:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   4e712:	f105 021c 	add.w	r2, r5, #28
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4e716:	b15b      	cbz	r3, 4e730 <bt_gatt_unsubscribe+0x4c>
   4e718:	429a      	cmp	r2, r3
   4e71a:	d13d      	bne.n	4e798 <bt_gatt_unsubscribe+0xb4>
	return node->next;
   4e71c:	69eb      	ldr	r3, [r5, #28]
	return list->tail;
   4e71e:	68f1      	ldr	r1, [r6, #12]
Z_GENLIST_REMOVE(slist, snode)
   4e720:	2c00      	cmp	r4, #0
   4e722:	d134      	bne.n	4e78e <bt_gatt_unsubscribe+0xaa>
   4e724:	428a      	cmp	r2, r1
	list->head = node;
   4e726:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   4e728:	d100      	bne.n	4e72c <bt_gatt_unsubscribe+0x48>
	list->tail = node;
   4e72a:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   4e72c:	2300      	movs	r3, #0
   4e72e:	61eb      	str	r3, [r5, #28]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   4e730:	f105 0018 	add.w	r0, r5, #24
   4e734:	f7ff f8b7 	bl	4d8a6 <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   4e738:	0743      	lsls	r3, r0, #29
   4e73a:	d503      	bpl.n	4e744 <bt_gatt_unsubscribe+0x60>
		bt_gatt_cancel(conn, params);
   4e73c:	4629      	mov	r1, r5
   4e73e:	4640      	mov	r0, r8
   4e740:	f7ff ffb1 	bl	4e6a6 <bt_gatt_cancel>
	if (gatt_sub_is_empty(sub)) {
   4e744:	68b3      	ldr	r3, [r6, #8]
   4e746:	b913      	cbnz	r3, 4e74e <bt_gatt_unsubscribe+0x6a>
		gatt_sub_free(sub);
   4e748:	4630      	mov	r0, r6
   4e74a:	f7ff f9a9 	bl	4daa0 <gatt_sub_free>
	if (has_subscription) {
   4e74e:	b367      	cbz	r7, 4e7aa <bt_gatt_unsubscribe+0xc6>
		params->notify(conn, params, NULL, 0);
   4e750:	2300      	movs	r3, #0
   4e752:	682c      	ldr	r4, [r5, #0]
   4e754:	461a      	mov	r2, r3
   4e756:	4629      	mov	r1, r5
   4e758:	4640      	mov	r0, r8
   4e75a:	47a0      	blx	r4
	return 0;
   4e75c:	2000      	movs	r0, #0
   4e75e:	e014      	b.n	4e78a <bt_gatt_unsubscribe+0xa6>
		if (params == tmp) {
   4e760:	42ac      	cmp	r4, r5
   4e762:	d009      	beq.n	4e778 <bt_gatt_unsubscribe+0x94>
		if (tmp->value_handle == params->value_handle) {
   4e764:	8921      	ldrh	r1, [r4, #8]
   4e766:	892a      	ldrh	r2, [r5, #8]
			has_subscription = true;
   4e768:	4291      	cmp	r1, r2
   4e76a:	bf08      	it	eq
   4e76c:	2701      	moveq	r7, #1
	return node->next;
   4e76e:	69e4      	ldr	r4, [r4, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   4e770:	2c00      	cmp	r4, #0
   4e772:	d0c9      	beq.n	4e708 <bt_gatt_unsubscribe+0x24>
   4e774:	3c1c      	subs	r4, #28
   4e776:	e7c6      	b.n	4e706 <bt_gatt_unsubscribe+0x22>
			found = true;
   4e778:	2301      	movs	r3, #1
   4e77a:	e7f8      	b.n	4e76e <bt_gatt_unsubscribe+0x8a>
		params->value = 0x0000;
   4e77c:	82af      	strh	r7, [r5, #20]
		err = gatt_write_ccc(conn, params);
   4e77e:	4629      	mov	r1, r5
   4e780:	4640      	mov	r0, r8
   4e782:	f7e2 fc47 	bl	31014 <gatt_write_ccc>
		if (err) {
   4e786:	2800      	cmp	r0, #0
   4e788:	d0c2      	beq.n	4e710 <bt_gatt_unsubscribe+0x2c>
}
   4e78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_REMOVE(slist, snode)
   4e78e:	428a      	cmp	r2, r1
	parent->next = child;
   4e790:	6023      	str	r3, [r4, #0]
	list->tail = node;
   4e792:	bf08      	it	eq
   4e794:	60f4      	streq	r4, [r6, #12]
}
   4e796:	e7c9      	b.n	4e72c <bt_gatt_unsubscribe+0x48>
	return node->next;
   4e798:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4e79a:	681b      	ldr	r3, [r3, #0]
   4e79c:	e7bb      	b.n	4e716 <bt_gatt_unsubscribe+0x32>
		return -ENOTCONN;
   4e79e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4e7a2:	e7f2      	b.n	4e78a <bt_gatt_unsubscribe+0xa6>
		return -EINVAL;
   4e7a4:	f06f 0015 	mvn.w	r0, #21
   4e7a8:	e7ef      	b.n	4e78a <bt_gatt_unsubscribe+0xa6>
	return 0;
   4e7aa:	4638      	mov	r0, r7
   4e7ac:	e7ed      	b.n	4e78a <bt_gatt_unsubscribe+0xa6>

0004e7ae <bt_gatt_notification>:
{
   4e7ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4e7b2:	4606      	mov	r6, r0
   4e7b4:	460f      	mov	r7, r1
   4e7b6:	4690      	mov	r8, r2
   4e7b8:	4699      	mov	r9, r3
	sub = gatt_sub_find(conn);
   4e7ba:	f7e2 fb47 	bl	30e4c <gatt_sub_find>
	if (!sub) {
   4e7be:	b300      	cbz	r0, 4e802 <bt_gatt_notification+0x54>
	return list->head;
   4e7c0:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4e7c2:	b1f4      	cbz	r4, 4e802 <bt_gatt_notification+0x54>
	return node->next;
   4e7c4:	f854 a91c 	ldr.w	sl, [r4], #-28
   4e7c8:	f1ba 0f00 	cmp.w	sl, #0
   4e7cc:	d001      	beq.n	4e7d2 <bt_gatt_notification+0x24>
   4e7ce:	f1aa 0a1c 	sub.w	sl, sl, #28
		if (handle != params->value_handle) {
   4e7d2:	8923      	ldrh	r3, [r4, #8]
   4e7d4:	42bb      	cmp	r3, r7
   4e7d6:	d10a      	bne.n	4e7ee <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   4e7d8:	6825      	ldr	r5, [r4, #0]
   4e7da:	464b      	mov	r3, r9
   4e7dc:	4642      	mov	r2, r8
   4e7de:	4621      	mov	r1, r4
   4e7e0:	4630      	mov	r0, r6
   4e7e2:	47a8      	blx	r5
   4e7e4:	b918      	cbnz	r0, 4e7ee <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   4e7e6:	4621      	mov	r1, r4
   4e7e8:	4630      	mov	r0, r6
   4e7ea:	f7ff ff7b 	bl	4e6e4 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4e7ee:	f1ba 0f00 	cmp.w	sl, #0
   4e7f2:	d006      	beq.n	4e802 <bt_gatt_notification+0x54>
   4e7f4:	f8da 501c 	ldr.w	r5, [sl, #28]
   4e7f8:	b105      	cbz	r5, 4e7fc <bt_gatt_notification+0x4e>
   4e7fa:	3d1c      	subs	r5, #28
{
   4e7fc:	4654      	mov	r4, sl
   4e7fe:	46aa      	mov	sl, r5
   4e800:	e7e7      	b.n	4e7d2 <bt_gatt_notification+0x24>
}
   4e802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004e806 <bt_gatt_mult_notification>:
{
   4e806:	e92d 4eff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, lr}
   4e80a:	4681      	mov	r9, r0
   4e80c:	460c      	mov	r4, r1
   4e80e:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   4e810:	f7e2 fb1c 	bl	30e4c <gatt_sub_find>
	if (!sub) {
   4e814:	4607      	mov	r7, r0
   4e816:	b140      	cbz	r0, 4e82a <bt_gatt_mult_notification+0x24>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   4e818:	462a      	mov	r2, r5
   4e81a:	4621      	mov	r1, r4
   4e81c:	a801      	add	r0, sp, #4
   4e81e:	f000 ffba 	bl	4f796 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   4e822:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4e826:	2b04      	cmp	r3, #4
   4e828:	d802      	bhi.n	4e830 <bt_gatt_mult_notification+0x2a>
}
   4e82a:	b004      	add	sp, #16
   4e82c:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   4e830:	2104      	movs	r1, #4
   4e832:	eb0d 0001 	add.w	r0, sp, r1
   4e836:	f001 f828 	bl	4f88a <net_buf_simple_pull_mem>
		if (len > buf.len) {
   4e83a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   4e83e:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		handle = sys_cpu_to_le16(nfy->handle);
   4e842:	f8b0 a000 	ldrh.w	sl, [r0]
		if (len > buf.len) {
   4e846:	455b      	cmp	r3, fp
   4e848:	d3ef      	bcc.n	4e82a <bt_gatt_mult_notification+0x24>
	return list->head;
   4e84a:	68bc      	ldr	r4, [r7, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4e84c:	b1d4      	cbz	r4, 4e884 <bt_gatt_mult_notification+0x7e>
	return node->next;
   4e84e:	f854 591c 	ldr.w	r5, [r4], #-28
   4e852:	b105      	cbz	r5, 4e856 <bt_gatt_mult_notification+0x50>
   4e854:	3d1c      	subs	r5, #28
			if (params->notify(conn, params, nfy->value, len) ==
   4e856:	1d06      	adds	r6, r0, #4
			if (handle != params->value_handle) {
   4e858:	8923      	ldrh	r3, [r4, #8]
   4e85a:	4553      	cmp	r3, sl
   4e85c:	d10b      	bne.n	4e876 <bt_gatt_mult_notification+0x70>
			if (params->notify(conn, params, nfy->value, len) ==
   4e85e:	f8d4 c000 	ldr.w	ip, [r4]
   4e862:	465b      	mov	r3, fp
   4e864:	4632      	mov	r2, r6
   4e866:	4621      	mov	r1, r4
   4e868:	4648      	mov	r0, r9
   4e86a:	47e0      	blx	ip
   4e86c:	b918      	cbnz	r0, 4e876 <bt_gatt_mult_notification+0x70>
				bt_gatt_unsubscribe(conn, params);
   4e86e:	4621      	mov	r1, r4
   4e870:	4648      	mov	r0, r9
   4e872:	f7ff ff37 	bl	4e6e4 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4e876:	b12d      	cbz	r5, 4e884 <bt_gatt_mult_notification+0x7e>
   4e878:	69eb      	ldr	r3, [r5, #28]
   4e87a:	b103      	cbz	r3, 4e87e <bt_gatt_mult_notification+0x78>
   4e87c:	3b1c      	subs	r3, #28
{
   4e87e:	462c      	mov	r4, r5
   4e880:	461d      	mov	r5, r3
   4e882:	e7e9      	b.n	4e858 <bt_gatt_mult_notification+0x52>
		net_buf_simple_pull_mem(&buf, len);
   4e884:	4659      	mov	r1, fp
   4e886:	a801      	add	r0, sp, #4
   4e888:	f000 ffff 	bl	4f88a <net_buf_simple_pull_mem>
   4e88c:	e7c9      	b.n	4e822 <bt_gatt_mult_notification+0x1c>

0004e88e <bt_gatt_change_aware>:
{
   4e88e:	b538      	push	{r3, r4, r5, lr}
   4e890:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   4e892:	f7e2 fa9d 	bl	30dd0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   4e896:	b910      	cbnz	r0, 4e89e <bt_gatt_change_aware+0x10>
		return true;
   4e898:	2501      	movs	r5, #1
}
   4e89a:	4628      	mov	r0, r5
   4e89c:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   4e89e:	7a03      	ldrb	r3, [r0, #8]
   4e8a0:	07d9      	lsls	r1, r3, #31
   4e8a2:	d5f9      	bpl.n	4e898 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   4e8a4:	f100 040c 	add.w	r4, r0, #12
   4e8a8:	4620      	mov	r0, r4
   4e8aa:	f7fe fffc 	bl	4d8a6 <atomic_get>
   4e8ae:	07c2      	lsls	r2, r0, #31
   4e8b0:	d4f2      	bmi.n	4e898 <bt_gatt_change_aware+0xa>
	if (!req) {
   4e8b2:	2d00      	cmp	r5, #0
   4e8b4:	d0f1      	beq.n	4e89a <bt_gatt_change_aware+0xc>
   4e8b6:	4620      	mov	r0, r4
   4e8b8:	f7fe fff5 	bl	4d8a6 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   4e8bc:	0783      	lsls	r3, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4e8be:	f3c0 0540 	ubfx	r5, r0, #1, #1
   4e8c2:	d509      	bpl.n	4e8d8 <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4e8c4:	f06f 0102 	mvn.w	r1, #2
   4e8c8:	4620      	mov	r0, r4
   4e8ca:	f7ff f948 	bl	4db5e <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4e8ce:	2101      	movs	r1, #1
   4e8d0:	4620      	mov	r0, r4
   4e8d2:	f7ff f843 	bl	4d95c <atomic_or>
}
   4e8d6:	e7e0      	b.n	4e89a <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4e8d8:	2102      	movs	r1, #2
   4e8da:	e7f9      	b.n	4e8d0 <bt_gatt_change_aware+0x42>

0004e8dc <ccc_delayed_store>:
{
   4e8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4e8e0:	f1a0 061c 	sub.w	r6, r0, #28
   4e8e4:	1f04      	subs	r4, r0, #4
			ccc_store->conn_list[i] = NULL;
   4e8e6:	f04f 0800 	mov.w	r8, #0
		struct bt_conn *conn = ccc_store->conn_list[i];
   4e8ea:	f856 5f04 	ldr.w	r5, [r6, #4]!
		if (!conn) {
   4e8ee:	b17d      	cbz	r5, 4e910 <ccc_delayed_store+0x34>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4e8f0:	f105 0788 	add.w	r7, r5, #136	; 0x88
   4e8f4:	7a28      	ldrb	r0, [r5, #8]
   4e8f6:	4639      	mov	r1, r7
   4e8f8:	f7fd fc88 	bl	4c20c <bt_addr_le_is_bonded>
   4e8fc:	b140      	cbz	r0, 4e910 <ccc_delayed_store+0x34>
			ccc_store->conn_list[i] = NULL;
   4e8fe:	f8c6 8000 	str.w	r8, [r6]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   4e902:	7a28      	ldrb	r0, [r5, #8]
   4e904:	4639      	mov	r1, r7
   4e906:	f7e3 fc99 	bl	3223c <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   4e90a:	4628      	mov	r0, r5
   4e90c:	f7fd fff6 	bl	4c8fc <bt_conn_unref>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   4e910:	42a6      	cmp	r6, r4
   4e912:	d1ea      	bne.n	4e8ea <ccc_delayed_store+0xe>
}
   4e914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004e918 <sys_memcpy_swap>:
	psrc += length - 1;
   4e918:	1e53      	subs	r3, r2, #1
   4e91a:	4419      	add	r1, r3
	for (; length > 0; length--) {
   4e91c:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   4e91e:	f811 3901 	ldrb.w	r3, [r1], #-1
   4e922:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   4e926:	4290      	cmp	r0, r2
   4e928:	d1f9      	bne.n	4e91e <sys_memcpy_swap+0x6>
}
   4e92a:	4770      	bx	lr

0004e92c <smp_encrypt_info>:
}
   4e92c:	2007      	movs	r0, #7
   4e92e:	4770      	bx	lr

0004e930 <le_sc_oob_config_set>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4e930:	7ac2      	ldrb	r2, [r0, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4e932:	7c83      	ldrb	r3, [r0, #18]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4e934:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4e938:	78c0      	ldrb	r0, [r0, #3]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4e93a:	f002 0201 	and.w	r2, r2, #1
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4e93e:	f003 0301 	and.w	r3, r3, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4e942:	b928      	cbnz	r0, 4e950 <le_sc_oob_config_set+0x20>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   4e944:	b952      	cbnz	r2, 4e95c <le_sc_oob_config_set+0x2c>
   4e946:	2b00      	cmp	r3, #0
   4e948:	bf14      	ite	ne
   4e94a:	2300      	movne	r3, #0
   4e94c:	2303      	moveq	r3, #3
   4e94e:	e006      	b.n	4e95e <le_sc_oob_config_set+0x2e>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   4e950:	b93a      	cbnz	r2, 4e962 <le_sc_oob_config_set+0x32>
				     BT_CONN_OOB_BOTH_PEERS :
   4e952:	2b00      	cmp	r3, #0
   4e954:	bf0c      	ite	eq
   4e956:	2303      	moveq	r3, #3
   4e958:	2301      	movne	r3, #1
   4e95a:	e000      	b.n	4e95e <le_sc_oob_config_set+0x2e>
		if (rsp_oob_present) {
   4e95c:	3301      	adds	r3, #1
	info->lesc.oob_config = oob_config;
   4e95e:	704b      	strb	r3, [r1, #1]
}
   4e960:	4770      	bx	lr
		if (rsp_oob_present) {
   4e962:	005b      	lsls	r3, r3, #1
   4e964:	e7fb      	b.n	4e95e <le_sc_oob_config_set+0x2e>

0004e966 <smp_chan_get>:
{
   4e966:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   4e968:	2106      	movs	r1, #6
   4e96a:	f7fe fa4d 	bl	4ce08 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4e96e:	b100      	cbz	r0, 4e972 <smp_chan_get+0xc>
	return CONTAINER_OF(chan, struct bt_smp, chan);
   4e970:	38f0      	subs	r0, #240	; 0xf0
}
   4e972:	bd08      	pop	{r3, pc}

0004e974 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4e974:	f3bf 8f5b 	dmb	ish
   4e978:	6800      	ldr	r0, [r0, #0]
   4e97a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4e97e:	4108      	asrs	r0, r1
}
   4e980:	f000 0001 	and.w	r0, r0, #1
   4e984:	4770      	bx	lr

0004e986 <update_keys_check>:
{
   4e986:	b510      	push	{r4, lr}
   4e988:	4603      	mov	r3, r0
	if (!keys ||
   4e98a:	b1d9      	cbz	r1, 4e9c4 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   4e98c:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   4e98e:	f010 0f24 	tst.w	r0, #36	; 0x24
   4e992:	d017      	beq.n	4e9c4 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   4e994:	7d1a      	ldrb	r2, [r3, #20]
   4e996:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   4e998:	7b09      	ldrb	r1, [r1, #12]
   4e99a:	42a2      	cmp	r2, r4
   4e99c:	bf28      	it	cs
   4e99e:	4622      	movcs	r2, r4
   4e9a0:	4291      	cmp	r1, r2
   4e9a2:	d901      	bls.n	4e9a8 <update_keys_check+0x22>
		return false;
   4e9a4:	2000      	movs	r0, #0
}
   4e9a6:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   4e9a8:	0682      	lsls	r2, r0, #26
   4e9aa:	d404      	bmi.n	4e9b6 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   4e9ac:	7a18      	ldrb	r0, [r3, #8]
   4e9ae:	3800      	subs	r0, #0
   4e9b0:	bf18      	it	ne
   4e9b2:	2001      	movne	r0, #1
   4e9b4:	e7f7      	b.n	4e9a6 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4e9b6:	2105      	movs	r1, #5
   4e9b8:	1d18      	adds	r0, r3, #4
   4e9ba:	f7ff ffdb 	bl	4e974 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   4e9be:	2800      	cmp	r0, #0
   4e9c0:	d1f4      	bne.n	4e9ac <update_keys_check+0x26>
   4e9c2:	e7ef      	b.n	4e9a4 <update_keys_check+0x1e>
		return true;
   4e9c4:	2001      	movs	r0, #1
   4e9c6:	e7ee      	b.n	4e9a6 <update_keys_check+0x20>

0004e9c8 <remote_sec_level_reachable>:
{
   4e9c8:	b508      	push	{r3, lr}
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   4e9ca:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   4e9ce:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   4e9d0:	2b03      	cmp	r3, #3
{
   4e9d2:	4602      	mov	r2, r0
	switch (sec) {
   4e9d4:	d015      	beq.n	4ea02 <remote_sec_level_reachable+0x3a>
   4e9d6:	d806      	bhi.n	4e9e6 <remote_sec_level_reachable+0x1e>
   4e9d8:	1e58      	subs	r0, r3, #1
   4e9da:	2801      	cmp	r0, #1
   4e9dc:	bf94      	ite	ls
   4e9de:	2000      	movls	r0, #0
   4e9e0:	2001      	movhi	r0, #1
   4e9e2:	00c0      	lsls	r0, r0, #3
}
   4e9e4:	bd08      	pop	{r3, pc}
	switch (sec) {
   4e9e6:	2b04      	cmp	r3, #4
   4e9e8:	d10f      	bne.n	4ea0a <remote_sec_level_reachable+0x42>
	return MIN(req->max_key_size, rsp->max_key_size);
   4e9ea:	7d03      	ldrb	r3, [r0, #20]
   4e9ec:	7b41      	ldrb	r1, [r0, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   4e9ee:	428b      	cmp	r3, r1
   4e9f0:	bf28      	it	cs
   4e9f2:	460b      	movcs	r3, r1
   4e9f4:	2b10      	cmp	r3, #16
   4e9f6:	d10a      	bne.n	4ea0e <remote_sec_level_reachable+0x46>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4e9f8:	2105      	movs	r1, #5
   4e9fa:	3004      	adds	r0, #4
   4e9fc:	f7ff ffba 	bl	4e974 <atomic_test_bit>
   4ea00:	b108      	cbz	r0, 4ea06 <remote_sec_level_reachable+0x3e>
		if (smp->method == JUST_WORKS) {
   4ea02:	7a13      	ldrb	r3, [r2, #8]
   4ea04:	b92b      	cbnz	r3, 4ea12 <remote_sec_level_reachable+0x4a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   4ea06:	2003      	movs	r0, #3
   4ea08:	e7ec      	b.n	4e9e4 <remote_sec_level_reachable+0x1c>
	switch (sec) {
   4ea0a:	2008      	movs	r0, #8
   4ea0c:	e7ea      	b.n	4e9e4 <remote_sec_level_reachable+0x1c>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   4ea0e:	2006      	movs	r0, #6
   4ea10:	e7e8      	b.n	4e9e4 <remote_sec_level_reachable+0x1c>
		return 0;
   4ea12:	2000      	movs	r0, #0
   4ea14:	e7e6      	b.n	4e9e4 <remote_sec_level_reachable+0x1c>

0004ea16 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4ea16:	2301      	movs	r3, #1
   4ea18:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4ea1a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4ea1c:	f3bf 8f5b 	dmb	ish
   4ea20:	e850 2f00 	ldrex	r2, [r0]
   4ea24:	401a      	ands	r2, r3
   4ea26:	e840 2100 	strex	r1, r2, [r0]
   4ea2a:	2900      	cmp	r1, #0
   4ea2c:	d1f8      	bne.n	4ea20 <atomic_clear_bit+0xa>
   4ea2e:	f3bf 8f5b 	dmb	ish
}
   4ea32:	4770      	bx	lr

0004ea34 <bt_smp_aes_cmac>:
{
   4ea34:	b570      	push	{r4, r5, r6, lr}
   4ea36:	b0c2      	sub	sp, #264	; 0x108
   4ea38:	460d      	mov	r5, r1
   4ea3a:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   4ea3c:	4601      	mov	r1, r0
   4ea3e:	aa16      	add	r2, sp, #88	; 0x58
   4ea40:	4668      	mov	r0, sp
{
   4ea42:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   4ea44:	f7fc fd8f 	bl	4b566 <tc_cmac_setup>
   4ea48:	b150      	cbz	r0, 4ea60 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   4ea4a:	4632      	mov	r2, r6
   4ea4c:	4629      	mov	r1, r5
   4ea4e:	4668      	mov	r0, sp
   4ea50:	f7fc fdb4 	bl	4b5bc <tc_cmac_update>
   4ea54:	b120      	cbz	r0, 4ea60 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   4ea56:	4669      	mov	r1, sp
   4ea58:	4620      	mov	r0, r4
   4ea5a:	f7fc fe1a 	bl	4b692 <tc_cmac_final>
   4ea5e:	b918      	cbnz	r0, 4ea68 <bt_smp_aes_cmac+0x34>
		return -EIO;
   4ea60:	f06f 0004 	mvn.w	r0, #4
}
   4ea64:	b042      	add	sp, #264	; 0x108
   4ea66:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   4ea68:	2000      	movs	r0, #0
   4ea6a:	e7fb      	b.n	4ea64 <bt_smp_aes_cmac+0x30>

0004ea6c <smp_keys_check>:
{
   4ea6c:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   4ea6e:	210b      	movs	r1, #11
{
   4ea70:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   4ea72:	3004      	adds	r0, #4
   4ea74:	f7ff ff7e 	bl	4e974 <atomic_test_bit>
   4ea78:	b108      	cbz	r0, 4ea7e <smp_keys_check+0x12>
		return false;
   4ea7a:	2000      	movs	r0, #0
}
   4ea7c:	bd38      	pop	{r3, r4, r5, pc}
	if (!conn->le.keys) {
   4ea7e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4ea82:	b983      	cbnz	r3, 4eaa6 <smp_keys_check+0x3a>
						     conn->id, &conn->le.dst);
   4ea84:	f104 0588 	add.w	r5, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   4ea88:	7a21      	ldrb	r1, [r4, #8]
   4ea8a:	462a      	mov	r2, r5
   4ea8c:	2020      	movs	r0, #32
   4ea8e:	f7e4 fe17 	bl	336c0 <bt_keys_find>
   4ea92:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4ea96:	b930      	cbnz	r0, 4eaa6 <smp_keys_check+0x3a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   4ea98:	7a21      	ldrb	r1, [r4, #8]
   4ea9a:	462a      	mov	r2, r5
   4ea9c:	2004      	movs	r0, #4
   4ea9e:	f7e4 fe0f 	bl	336c0 <bt_keys_find>
   4eaa2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   4eaa6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4eaaa:	2b00      	cmp	r3, #0
   4eaac:	d0e5      	beq.n	4ea7a <smp_keys_check+0xe>
   4eaae:	89da      	ldrh	r2, [r3, #14]
   4eab0:	f002 0224 	and.w	r2, r2, #36	; 0x24
   4eab4:	2a00      	cmp	r2, #0
   4eab6:	d0e0      	beq.n	4ea7a <smp_keys_check+0xe>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   4eab8:	7aa2      	ldrb	r2, [r4, #10]
   4eaba:	2a02      	cmp	r2, #2
   4eabc:	d902      	bls.n	4eac4 <smp_keys_check+0x58>
   4eabe:	7b5b      	ldrb	r3, [r3, #13]
   4eac0:	07db      	lsls	r3, r3, #31
   4eac2:	d5da      	bpl.n	4ea7a <smp_keys_check+0xe>
	return true;
   4eac4:	2001      	movs	r0, #1
   4eac6:	e7d9      	b.n	4ea7c <smp_keys_check+0x10>

0004eac8 <smp_signing_info>:
   4eac8:	2007      	movs	r0, #7
   4eaca:	4770      	bx	lr

0004eacc <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   4eacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   4eace:	2300      	movs	r3, #0
   4ead0:	9300      	str	r3, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   4ead2:	4604      	mov	r4, r0
   4ead4:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   4ead6:	460a      	mov	r2, r1
   4ead8:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   4eadc:	2106      	movs	r1, #6
   4eade:	f7fe f8ea 	bl	4ccb6 <bt_l2cap_send_cb>
   4eae2:	b128      	cbz	r0, 4eaf0 <smp_send.constprop.0+0x24>
		net_buf_unref(buf);
   4eae4:	4628      	mov	r0, r5
}
   4eae6:	b003      	add	sp, #12
   4eae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   4eaec:	f7f4 bcf4 	b.w	434d8 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   4eaf0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4eaf4:	2300      	movs	r3, #0
   4eaf6:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   4eafa:	b003      	add	sp, #12
   4eafc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   4eb00:	f7f9 ba8e 	b.w	48020 <k_work_reschedule>

0004eb04 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   4eb04:	b510      	push	{r4, lr}
   4eb06:	1e43      	subs	r3, r0, #1
   4eb08:	f100 0210 	add.w	r2, r0, #16
   4eb0c:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   4eb0e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   4eb12:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   4eb16:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   4eb18:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   4eb1a:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   4eb1c:	d1f7      	bne.n	4eb0e <sys_mem_swap.constprop.0+0xa>
	}
}
   4eb1e:	bd10      	pop	{r4, pc}

0004eb20 <smp_f6>:
{
   4eb20:	b5f0      	push	{r4, r5, r6, r7, lr}
   4eb22:	b097      	sub	sp, #92	; 0x5c
   4eb24:	4605      	mov	r5, r0
   4eb26:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   4eb28:	a805      	add	r0, sp, #20
   4eb2a:	2210      	movs	r2, #16
{
   4eb2c:	461c      	mov	r4, r3
   4eb2e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   4eb30:	f7ff fef2 	bl	4e918 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   4eb34:	2210      	movs	r2, #16
   4eb36:	4631      	mov	r1, r6
   4eb38:	a809      	add	r0, sp, #36	; 0x24
   4eb3a:	f7ff feed 	bl	4e918 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   4eb3e:	4621      	mov	r1, r4
   4eb40:	2210      	movs	r2, #16
   4eb42:	a80d      	add	r0, sp, #52	; 0x34
   4eb44:	f7ff fee8 	bl	4e918 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   4eb48:	991c      	ldr	r1, [sp, #112]	; 0x70
   4eb4a:	2203      	movs	r2, #3
   4eb4c:	a811      	add	r0, sp, #68	; 0x44
   4eb4e:	f7ff fee3 	bl	4e918 <sys_memcpy_swap>
	m[51] = a1->type;
   4eb52:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   4eb54:	f814 3b01 	ldrb.w	r3, [r4], #1
   4eb58:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   4eb5c:	4621      	mov	r1, r4
   4eb5e:	2206      	movs	r2, #6
   4eb60:	a812      	add	r0, sp, #72	; 0x48
   4eb62:	f7fc fe92 	bl	4b88a <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   4eb66:	4621      	mov	r1, r4
   4eb68:	2206      	movs	r2, #6
   4eb6a:	a812      	add	r0, sp, #72	; 0x48
   4eb6c:	f7ff fed4 	bl	4e918 <sys_memcpy_swap>
	m[58] = a2->type;
   4eb70:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   4eb72:	f814 3b01 	ldrb.w	r3, [r4], #1
   4eb76:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   4eb7a:	4621      	mov	r1, r4
   4eb7c:	2206      	movs	r2, #6
   4eb7e:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   4eb82:	f7fc fe82 	bl	4b88a <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   4eb86:	4621      	mov	r1, r4
   4eb88:	2206      	movs	r2, #6
   4eb8a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   4eb8e:	f7ff fec3 	bl	4e918 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   4eb92:	2210      	movs	r2, #16
   4eb94:	4629      	mov	r1, r5
   4eb96:	a801      	add	r0, sp, #4
   4eb98:	f7ff febe 	bl	4e918 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   4eb9c:	463b      	mov	r3, r7
   4eb9e:	2241      	movs	r2, #65	; 0x41
   4eba0:	a905      	add	r1, sp, #20
   4eba2:	a801      	add	r0, sp, #4
   4eba4:	f7ff ff46 	bl	4ea34 <bt_smp_aes_cmac>
	if (err) {
   4eba8:	4604      	mov	r4, r0
   4ebaa:	b910      	cbnz	r0, 4ebb2 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   4ebac:	4638      	mov	r0, r7
   4ebae:	f7ff ffa9 	bl	4eb04 <sys_mem_swap.constprop.0>
}
   4ebb2:	4620      	mov	r0, r4
   4ebb4:	b017      	add	sp, #92	; 0x5c
   4ebb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004ebb8 <smp_f4>:
{
   4ebb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   4ebba:	b097      	sub	sp, #92	; 0x5c
   4ebbc:	4614      	mov	r4, r2
   4ebbe:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   4ebc0:	2220      	movs	r2, #32
   4ebc2:	4601      	mov	r1, r0
   4ebc4:	a805      	add	r0, sp, #20
{
   4ebc6:	461d      	mov	r5, r3
   4ebc8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   4ebca:	f7ff fea5 	bl	4e918 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   4ebce:	2220      	movs	r2, #32
   4ebd0:	4631      	mov	r1, r6
   4ebd2:	a80d      	add	r0, sp, #52	; 0x34
   4ebd4:	f7ff fea0 	bl	4e918 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   4ebd8:	4621      	mov	r1, r4
   4ebda:	2210      	movs	r2, #16
   4ebdc:	a801      	add	r0, sp, #4
	m[64] = z;
   4ebde:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   4ebe2:	f7ff fe99 	bl	4e918 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   4ebe6:	463b      	mov	r3, r7
   4ebe8:	2241      	movs	r2, #65	; 0x41
   4ebea:	a905      	add	r1, sp, #20
   4ebec:	a801      	add	r0, sp, #4
   4ebee:	f7ff ff21 	bl	4ea34 <bt_smp_aes_cmac>
	if (err) {
   4ebf2:	4604      	mov	r4, r0
   4ebf4:	b910      	cbnz	r0, 4ebfc <smp_f4+0x44>
	sys_mem_swap(res, 16);
   4ebf6:	4638      	mov	r0, r7
   4ebf8:	f7ff ff84 	bl	4eb04 <sys_mem_swap.constprop.0>
}
   4ebfc:	4620      	mov	r0, r4
   4ebfe:	b017      	add	sp, #92	; 0x5c
   4ec00:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004ec02 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4ec02:	2301      	movs	r3, #1
   4ec04:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4ec06:	f3bf 8f5b 	dmb	ish
   4ec0a:	e850 2f00 	ldrex	r2, [r0]
   4ec0e:	431a      	orrs	r2, r3
   4ec10:	e840 2100 	strex	r1, r2, [r0]
   4ec14:	2900      	cmp	r1, #0
   4ec16:	d1f8      	bne.n	4ec0a <atomic_set_bit+0x8>
   4ec18:	f3bf 8f5b 	dmb	ish
}
   4ec1c:	4770      	bx	lr

0004ec1e <smp_keypress_notif>:
{
   4ec1e:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   4ec20:	210e      	movs	r1, #14
   4ec22:	f7ff ffee 	bl	4ec02 <atomic_set_bit>
}
   4ec26:	2000      	movs	r0, #0
   4ec28:	bd08      	pop	{r3, pc}

0004ec2a <generate_dhkey>:
{
   4ec2a:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4ec2c:	2107      	movs	r1, #7
{
   4ec2e:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4ec30:	3004      	adds	r0, #4
   4ec32:	f7ff ffe6 	bl	4ec02 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   4ec36:	2008      	movs	r0, #8
   4ec38:	f7e3 fcc6 	bl	325c8 <smp_find>
   4ec3c:	b920      	cbnz	r0, 4ec48 <generate_dhkey+0x1e>
		return smp_dhkey_generate(smp);
   4ec3e:	4620      	mov	r0, r4
}
   4ec40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_dhkey_generate(smp);
   4ec44:	f7e3 be3a 	b.w	328bc <smp_dhkey_generate>
}
   4ec48:	2000      	movs	r0, #0
   4ec4a:	bd10      	pop	{r4, pc}

0004ec4c <smp_ident_info>:
{
   4ec4c:	b538      	push	{r3, r4, r5, lr}
   4ec4e:	4604      	mov	r4, r0
   4ec50:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4ec52:	3004      	adds	r0, #4
   4ec54:	210d      	movs	r1, #13
   4ec56:	f7ff fe8d 	bl	4e974 <atomic_test_bit>
   4ec5a:	b170      	cbz	r0, 4ec7a <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   4ec5c:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   4ec5e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   4ec62:	2002      	movs	r0, #2
   4ec64:	7a19      	ldrb	r1, [r3, #8]
   4ec66:	f103 0288 	add.w	r2, r3, #136	; 0x88
   4ec6a:	f000 fd1c 	bl	4f6a6 <bt_keys_get_type>
		if (!keys) {
   4ec6e:	b150      	cbz	r0, 4ec86 <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   4ec70:	2210      	movs	r2, #16
   4ec72:	4629      	mov	r1, r5
   4ec74:	302a      	adds	r0, #42	; 0x2a
   4ec76:	f7fc fe08 	bl	4b88a <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   4ec7a:	4620      	mov	r0, r4
   4ec7c:	2109      	movs	r1, #9
   4ec7e:	f7ff ffc0 	bl	4ec02 <atomic_set_bit>
	return 0;
   4ec82:	2000      	movs	r0, #0
}
   4ec84:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   4ec86:	2008      	movs	r0, #8
   4ec88:	e7fc      	b.n	4ec84 <smp_ident_info+0x38>

0004ec8a <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   4ec8a:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4ec8c:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   4ec8e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4ec90:	4628      	mov	r0, r5
   4ec92:	2104      	movs	r1, #4
   4ec94:	f7ff fe6e 	bl	4e974 <atomic_test_bit>
   4ec98:	b970      	cbnz	r0, 4ecb8 <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   4ec9a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   4ec9e:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   4eca0:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   4eca2:	4608      	mov	r0, r1
   4eca4:	f7fe f804 	bl	4ccb0 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   4eca8:	4604      	mov	r4, r0
   4ecaa:	b938      	cbnz	r0, 4ecbc <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4ecac:	2104      	movs	r1, #4
   4ecae:	4628      	mov	r0, r5
   4ecb0:	f7ff ffa7 	bl	4ec02 <atomic_set_bit>
}
   4ecb4:	4620      	mov	r0, r4
   4ecb6:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   4ecb8:	2200      	movs	r2, #0
   4ecba:	e7f0      	b.n	4ec9e <smp_create_pdu.constprop.0+0x14>
   4ecbc:	2101      	movs	r1, #1
   4ecbe:	3008      	adds	r0, #8
   4ecc0:	f000 fdb2 	bl	4f828 <net_buf_simple_add>
	hdr->code = op;
   4ecc4:	7006      	strb	r6, [r0, #0]
	return buf;
   4ecc6:	e7f5      	b.n	4ecb4 <smp_create_pdu.constprop.0+0x2a>

0004ecc8 <smp_send_pairing_random>:
{
   4ecc8:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   4ecca:	2104      	movs	r1, #4
{
   4eccc:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   4ecce:	f7ff ffdc 	bl	4ec8a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   4ecd2:	4604      	mov	r4, r0
   4ecd4:	b170      	cbz	r0, 4ecf4 <smp_send_pairing_random+0x2c>
   4ecd6:	2110      	movs	r1, #16
   4ecd8:	3008      	adds	r0, #8
   4ecda:	f000 fda5 	bl	4f828 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   4ecde:	2210      	movs	r2, #16
   4ece0:	f105 0127 	add.w	r1, r5, #39	; 0x27
   4ece4:	f7fc fdd1 	bl	4b88a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   4ece8:	4628      	mov	r0, r5
   4ecea:	4621      	mov	r1, r4
   4ecec:	f7ff feee 	bl	4eacc <smp_send.constprop.0>
	return 0;
   4ecf0:	2000      	movs	r0, #0
}
   4ecf2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   4ecf4:	2008      	movs	r0, #8
   4ecf6:	e7fc      	b.n	4ecf2 <smp_send_pairing_random+0x2a>

0004ecf8 <sc_smp_send_dhkey_check>:
{
   4ecf8:	b570      	push	{r4, r5, r6, lr}
   4ecfa:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   4ecfc:	210d      	movs	r1, #13
{
   4ecfe:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   4ed00:	f7ff ffc3 	bl	4ec8a <smp_create_pdu.constprop.0>
	if (!buf) {
   4ed04:	4604      	mov	r4, r0
   4ed06:	b168      	cbz	r0, 4ed24 <sc_smp_send_dhkey_check+0x2c>
   4ed08:	2110      	movs	r1, #16
   4ed0a:	3008      	adds	r0, #8
   4ed0c:	f000 fd8c 	bl	4f828 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   4ed10:	2210      	movs	r2, #16
   4ed12:	4631      	mov	r1, r6
   4ed14:	f7fc fdb9 	bl	4b88a <memcpy>
	smp_send(smp, buf, NULL, NULL);
   4ed18:	4628      	mov	r0, r5
   4ed1a:	4621      	mov	r1, r4
   4ed1c:	f7ff fed6 	bl	4eacc <smp_send.constprop.0>
	return 0;
   4ed20:	2000      	movs	r0, #0
}
   4ed22:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   4ed24:	2008      	movs	r0, #8
   4ed26:	e7fc      	b.n	4ed22 <sc_smp_send_dhkey_check+0x2a>

0004ed28 <compute_and_send_central_dhcheck>:
{
   4ed28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4ed2c:	4604      	mov	r4, r0
   4ed2e:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   4ed30:	2210      	movs	r2, #16
   4ed32:	2100      	movs	r1, #0
   4ed34:	a808      	add	r0, sp, #32
   4ed36:	f7fc fdb3 	bl	4b8a0 <memset>
	switch (smp->method) {
   4ed3a:	7a23      	ldrb	r3, [r4, #8]
   4ed3c:	2b05      	cmp	r3, #5
   4ed3e:	d821      	bhi.n	4ed84 <compute_and_send_central_dhcheck+0x5c>
   4ed40:	e8df f003 	tbb	[pc, r3]
   4ed44:	09030309 	.word	0x09030309
   4ed48:	2220      	.short	0x2220
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4ed4a:	2204      	movs	r2, #4
   4ed4c:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4ed50:	a808      	add	r0, sp, #32
   4ed52:	f7fc fd9a 	bl	4b88a <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4ed56:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
   4ed5a:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4ed5e:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   4ed62:	e9cd 6201 	strd	r6, r2, [sp, #4]
   4ed66:	f104 0727 	add.w	r7, r4, #39	; 0x27
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4ed6a:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   4ed6e:	f104 0837 	add.w	r8, r4, #55	; 0x37
   4ed72:	9200      	str	r2, [sp, #0]
   4ed74:	338f      	adds	r3, #143	; 0x8f
   4ed76:	4642      	mov	r2, r8
   4ed78:	4639      	mov	r1, r7
   4ed7a:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4ed7e:	f7e3 fc89 	bl	32694 <smp_f5>
   4ed82:	b138      	cbz	r0, 4ed94 <compute_and_send_central_dhcheck+0x6c>
	switch (smp->method) {
   4ed84:	2008      	movs	r0, #8
   4ed86:	e020      	b.n	4edca <compute_and_send_central_dhcheck+0xa2>
		if (smp->oobd_remote) {
   4ed88:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   4ed8c:	2900      	cmp	r1, #0
   4ed8e:	d0e2      	beq.n	4ed56 <compute_and_send_central_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4ed90:	2210      	movs	r2, #16
   4ed92:	e7dd      	b.n	4ed50 <compute_and_send_central_dhcheck+0x28>
		   &smp->chan.chan.conn->le.init_addr,
   4ed94:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   4ed98:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   4ed9c:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   4ed9e:	ad04      	add	r5, sp, #16
   4eda0:	9301      	str	r3, [sp, #4]
   4eda2:	f104 030a 	add.w	r3, r4, #10
   4eda6:	9202      	str	r2, [sp, #8]
   4eda8:	9300      	str	r3, [sp, #0]
   4edaa:	9503      	str	r5, [sp, #12]
   4edac:	ab08      	add	r3, sp, #32
   4edae:	4642      	mov	r2, r8
   4edb0:	4639      	mov	r1, r7
   4edb2:	4630      	mov	r0, r6
   4edb4:	f7ff feb4 	bl	4eb20 <smp_f6>
   4edb8:	2800      	cmp	r0, #0
   4edba:	d1e3      	bne.n	4ed84 <compute_and_send_central_dhcheck+0x5c>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   4edbc:	210d      	movs	r1, #13
   4edbe:	4620      	mov	r0, r4
   4edc0:	f7ff ff1f 	bl	4ec02 <atomic_set_bit>
	return sc_smp_send_dhkey_check(smp, e);
   4edc4:	4629      	mov	r1, r5
   4edc6:	f7ff ff97 	bl	4ecf8 <sc_smp_send_dhkey_check>
}
   4edca:	b00c      	add	sp, #48	; 0x30
   4edcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004edd0 <compute_and_check_and_send_periph_dhcheck>:
{
   4edd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4edd4:	4604      	mov	r4, r0
   4edd6:	b091      	sub	sp, #68	; 0x44
	(void)memset(r, 0, sizeof(r));
   4edd8:	2210      	movs	r2, #16
   4edda:	2100      	movs	r1, #0
   4eddc:	a80c      	add	r0, sp, #48	; 0x30
   4edde:	f7fc fd5f 	bl	4b8a0 <memset>
	switch (smp->method) {
   4ede2:	7a23      	ldrb	r3, [r4, #8]
   4ede4:	2b05      	cmp	r3, #5
   4ede6:	d821      	bhi.n	4ee2c <compute_and_check_and_send_periph_dhcheck+0x5c>
   4ede8:	e8df f003 	tbb	[pc, r3]
   4edec:	09030309 	.word	0x09030309
   4edf0:	2220      	.short	0x2220
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4edf2:	2204      	movs	r2, #4
   4edf4:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4edf8:	a80c      	add	r0, sp, #48	; 0x30
   4edfa:	f7fc fd46 	bl	4b88a <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4edfe:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
   4ee02:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4ee06:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   4ee0a:	e9cd 5201 	strd	r5, r2, [sp, #4]
   4ee0e:	f104 0637 	add.w	r6, r4, #55	; 0x37
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4ee12:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   4ee16:	f104 0727 	add.w	r7, r4, #39	; 0x27
   4ee1a:	9200      	str	r2, [sp, #0]
   4ee1c:	338f      	adds	r3, #143	; 0x8f
   4ee1e:	463a      	mov	r2, r7
   4ee20:	4631      	mov	r1, r6
   4ee22:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4ee26:	f7e3 fc35 	bl	32694 <smp_f5>
   4ee2a:	b138      	cbz	r0, 4ee3c <compute_and_check_and_send_periph_dhcheck+0x6c>
	switch (smp->method) {
   4ee2c:	2508      	movs	r5, #8
   4ee2e:	e04c      	b.n	4eeca <compute_and_check_and_send_periph_dhcheck+0xfa>
		if (smp->oobd_remote) {
   4ee30:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   4ee34:	2900      	cmp	r1, #0
   4ee36:	d0e2      	beq.n	4edfe <compute_and_check_and_send_periph_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4ee38:	2210      	movs	r2, #16
   4ee3a:	e7dd      	b.n	4edf8 <compute_and_check_and_send_periph_dhcheck+0x28>
		   &smp->chan.chan.conn->le.resp_addr,
   4ee3c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.init_addr, e)) {
   4ee40:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   4ee44:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   4ee46:	f10d 0820 	add.w	r8, sp, #32
   4ee4a:	9301      	str	r3, [sp, #4]
   4ee4c:	f104 0311 	add.w	r3, r4, #17
   4ee50:	9202      	str	r2, [sp, #8]
   4ee52:	9300      	str	r3, [sp, #0]
   4ee54:	f8cd 800c 	str.w	r8, [sp, #12]
   4ee58:	ab0c      	add	r3, sp, #48	; 0x30
   4ee5a:	4632      	mov	r2, r6
   4ee5c:	4639      	mov	r1, r7
   4ee5e:	4628      	mov	r0, r5
   4ee60:	f7ff fe5e 	bl	4eb20 <smp_f6>
   4ee64:	2800      	cmp	r0, #0
   4ee66:	d1e1      	bne.n	4ee2c <compute_and_check_and_send_periph_dhcheck+0x5c>
	if (smp->method == LE_SC_OOB) {
   4ee68:	7a23      	ldrb	r3, [r4, #8]
   4ee6a:	2b05      	cmp	r3, #5
   4ee6c:	d106      	bne.n	4ee7c <compute_and_check_and_send_periph_dhcheck+0xac>
		if (smp->oobd_local) {
   4ee6e:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   4ee72:	2210      	movs	r2, #16
   4ee74:	a80c      	add	r0, sp, #48	; 0x30
		if (smp->oobd_local) {
   4ee76:	b361      	cbz	r1, 4eed2 <compute_and_check_and_send_periph_dhcheck+0x102>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   4ee78:	f7fc fd07 	bl	4b88a <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4ee7c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   4ee80:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   4ee84:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   4ee86:	f10d 0910 	add.w	r9, sp, #16
   4ee8a:	9301      	str	r3, [sp, #4]
   4ee8c:	f104 030a 	add.w	r3, r4, #10
   4ee90:	9202      	str	r2, [sp, #8]
   4ee92:	9300      	str	r3, [sp, #0]
   4ee94:	f8cd 900c 	str.w	r9, [sp, #12]
   4ee98:	ab0c      	add	r3, sp, #48	; 0x30
   4ee9a:	463a      	mov	r2, r7
   4ee9c:	4631      	mov	r1, r6
   4ee9e:	4628      	mov	r0, r5
   4eea0:	f7ff fe3e 	bl	4eb20 <smp_f6>
   4eea4:	2800      	cmp	r0, #0
   4eea6:	d1c1      	bne.n	4ee2c <compute_and_check_and_send_periph_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
   4eea8:	2210      	movs	r2, #16
   4eeaa:	4649      	mov	r1, r9
   4eeac:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   4eeb0:	f7fc fcdb 	bl	4b86a <memcmp>
   4eeb4:	b980      	cbnz	r0, 4eed8 <compute_and_check_and_send_periph_dhcheck+0x108>
	err = sc_smp_send_dhkey_check(smp, e);
   4eeb6:	4641      	mov	r1, r8
   4eeb8:	4620      	mov	r0, r4
   4eeba:	f7ff ff1d 	bl	4ecf8 <sc_smp_send_dhkey_check>
	if (err) {
   4eebe:	4605      	mov	r5, r0
   4eec0:	b918      	cbnz	r0, 4eeca <compute_and_check_and_send_periph_dhcheck+0xfa>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4eec2:	2101      	movs	r1, #1
   4eec4:	1d20      	adds	r0, r4, #4
   4eec6:	f7ff fe9c 	bl	4ec02 <atomic_set_bit>
}
   4eeca:	4628      	mov	r0, r5
   4eecc:	b011      	add	sp, #68	; 0x44
   4eece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   4eed2:	f7fc fce5 	bl	4b8a0 <memset>
   4eed6:	e7d1      	b.n	4ee7c <compute_and_check_and_send_periph_dhcheck+0xac>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4eed8:	250b      	movs	r5, #11
   4eeda:	e7f6      	b.n	4eeca <compute_and_check_and_send_periph_dhcheck+0xfa>

0004eedc <smp_dhkey_check>:
{
   4eedc:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4eede:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   4eee2:	688f      	ldr	r7, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4eee4:	78dd      	ldrb	r5, [r3, #3]
{
   4eee6:	b091      	sub	sp, #68	; 0x44
   4eee8:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4eeea:	2d00      	cmp	r5, #0
   4eeec:	d15b      	bne.n	4efa6 <smp_dhkey_check+0xca>
		(void)memset(r, 0, sizeof(r));
   4eeee:	2210      	movs	r2, #16
   4eef0:	4629      	mov	r1, r5
   4eef2:	a80c      	add	r0, sp, #48	; 0x30
   4eef4:	f7fc fcd4 	bl	4b8a0 <memset>
		switch (smp->method) {
   4eef8:	7a23      	ldrb	r3, [r4, #8]
   4eefa:	2b05      	cmp	r3, #5
   4eefc:	d820      	bhi.n	4ef40 <smp_dhkey_check+0x64>
   4eefe:	e8df f003 	tbb	[pc, r3]
   4ef02:	0309      	.short	0x0309
   4ef04:	231f0903 	.word	0x231f0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4ef08:	2204      	movs	r2, #4
   4ef0a:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   4ef0e:	a80c      	add	r0, sp, #48	; 0x30
   4ef10:	f7fc fcbb 	bl	4b88a <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   4ef14:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
			   &smp->chan.chan.conn->le.init_addr, e)) {
   4ef18:	f103 028f 	add.w	r2, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   4ef1c:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   4ef1e:	ae08      	add	r6, sp, #32
   4ef20:	9301      	str	r3, [sp, #4]
   4ef22:	f104 0311 	add.w	r3, r4, #17
   4ef26:	9202      	str	r2, [sp, #8]
   4ef28:	9300      	str	r3, [sp, #0]
   4ef2a:	9603      	str	r6, [sp, #12]
   4ef2c:	ab0c      	add	r3, sp, #48	; 0x30
   4ef2e:	f104 0227 	add.w	r2, r4, #39	; 0x27
   4ef32:	f104 0137 	add.w	r1, r4, #55	; 0x37
   4ef36:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   4ef3a:	f7ff fdf1 	bl	4eb20 <smp_f6>
   4ef3e:	b148      	cbz	r0, 4ef54 <smp_dhkey_check+0x78>
		switch (smp->method) {
   4ef40:	2508      	movs	r5, #8
}
   4ef42:	4628      	mov	r0, r5
   4ef44:	b011      	add	sp, #68	; 0x44
   4ef46:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (smp->oobd_local) {
   4ef48:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   4ef4c:	2900      	cmp	r1, #0
   4ef4e:	d0e1      	beq.n	4ef14 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   4ef50:	2210      	movs	r2, #16
   4ef52:	e7dc      	b.n	4ef0e <smp_dhkey_check+0x32>
		if (memcmp(e, req->e, 16)) {
   4ef54:	4630      	mov	r0, r6
   4ef56:	2210      	movs	r2, #16
   4ef58:	4639      	mov	r1, r7
   4ef5a:	f7fc fc86 	bl	4b86a <memcmp>
   4ef5e:	4606      	mov	r6, r0
   4ef60:	b9f8      	cbnz	r0, 4efa2 <smp_dhkey_check+0xc6>
	return MIN(req->max_key_size, rsp->max_key_size);
   4ef62:	7d23      	ldrb	r3, [r4, #20]
   4ef64:	7b67      	ldrb	r7, [r4, #13]
		(void)memset(ediv, 0, sizeof(ediv));
   4ef66:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   4ef68:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   4ef6a:	f04f 0202 	mov.w	r2, #2
   4ef6e:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   4ef70:	bf28      	it	cs
   4ef72:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   4ef74:	f7fc fc94 	bl	4b8a0 <memset>
		(void)memset(rand, 0, sizeof(rand));
   4ef78:	2208      	movs	r2, #8
   4ef7a:	4631      	mov	r1, r6
   4ef7c:	a806      	add	r0, sp, #24
   4ef7e:	f7fc fc8f 	bl	4b8a0 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   4ef82:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   4ef86:	9700      	str	r7, [sp, #0]
   4ef88:	f104 0347 	add.w	r3, r4, #71	; 0x47
   4ef8c:	aa05      	add	r2, sp, #20
   4ef8e:	a906      	add	r1, sp, #24
   4ef90:	f7fd fcf8 	bl	4c984 <bt_conn_le_start_encryption>
   4ef94:	2800      	cmp	r0, #0
   4ef96:	dbd3      	blt.n	4ef40 <smp_dhkey_check+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4ef98:	2101      	movs	r1, #1
   4ef9a:	1d20      	adds	r0, r4, #4
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4ef9c:	f7ff fe31 	bl	4ec02 <atomic_set_bit>
			return 0;
   4efa0:	e7cf      	b.n	4ef42 <smp_dhkey_check+0x66>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4efa2:	250b      	movs	r5, #11
   4efa4:	e7cd      	b.n	4ef42 <smp_dhkey_check+0x66>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   4efa6:	2d01      	cmp	r5, #1
   4efa8:	d114      	bne.n	4efd4 <smp_dhkey_check+0xf8>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   4efaa:	1d06      	adds	r6, r0, #4
   4efac:	2110      	movs	r1, #16
   4efae:	4630      	mov	r0, r6
   4efb0:	f7ff fd31 	bl	4ea16 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   4efb4:	4639      	mov	r1, r7
   4efb6:	2210      	movs	r2, #16
   4efb8:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   4efbc:	f7fc fc65 	bl	4b88a <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   4efc0:	2107      	movs	r1, #7
   4efc2:	4630      	mov	r0, r6
   4efc4:	f7ff fcd6 	bl	4e974 <atomic_test_bit>
   4efc8:	4605      	mov	r5, r0
   4efca:	b128      	cbz	r0, 4efd8 <smp_dhkey_check+0xfc>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4efcc:	2109      	movs	r1, #9
   4efce:	4630      	mov	r0, r6
   4efd0:	f7ff fe17 	bl	4ec02 <atomic_set_bit>
	return 0;
   4efd4:	2500      	movs	r5, #0
   4efd6:	e7b4      	b.n	4ef42 <smp_dhkey_check+0x66>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4efd8:	210a      	movs	r1, #10
   4efda:	4630      	mov	r0, r6
   4efdc:	f7ff fcca 	bl	4e974 <atomic_test_bit>
   4efe0:	b110      	cbz	r0, 4efe8 <smp_dhkey_check+0x10c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4efe2:	2109      	movs	r1, #9
   4efe4:	4630      	mov	r0, r6
   4efe6:	e7d9      	b.n	4ef9c <smp_dhkey_check+0xc0>
		return compute_and_check_and_send_periph_dhcheck(smp);
   4efe8:	4620      	mov	r0, r4
}
   4efea:	b011      	add	sp, #68	; 0x44
   4efec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   4eff0:	f7ff beee 	b.w	4edd0 <compute_and_check_and_send_periph_dhcheck>

0004eff4 <smp_pairing_confirm>:
{
   4eff4:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   4eff6:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   4eff8:	1d05      	adds	r5, r0, #4
{
   4effa:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   4effc:	210b      	movs	r1, #11
   4effe:	4628      	mov	r0, r5
   4f000:	f7ff fd09 	bl	4ea16 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   4f004:	2210      	movs	r2, #16
   4f006:	4631      	mov	r1, r6
   4f008:	f104 0017 	add.w	r0, r4, #23
   4f00c:	f7fc fc3d 	bl	4b88a <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f010:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f014:	78db      	ldrb	r3, [r3, #3]
   4f016:	b93b      	cbnz	r3, 4f028 <smp_pairing_confirm+0x34>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   4f018:	4620      	mov	r0, r4
   4f01a:	2104      	movs	r1, #4
   4f01c:	f7ff fdf1 	bl	4ec02 <atomic_set_bit>
}
   4f020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
   4f024:	f7ff be50 	b.w	4ecc8 <smp_send_pairing_random>
	switch (smp->method) {
   4f028:	7a23      	ldrb	r3, [r4, #8]
   4f02a:	2b01      	cmp	r3, #1
   4f02c:	d009      	beq.n	4f042 <smp_pairing_confirm+0x4e>
   4f02e:	2b02      	cmp	r3, #2
   4f030:	d113      	bne.n	4f05a <smp_pairing_confirm+0x66>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   4f032:	4620      	mov	r0, r4
   4f034:	2104      	movs	r1, #4
   4f036:	f7ff fde4 	bl	4ec02 <atomic_set_bit>
}
   4f03a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   4f03e:	f7e3 bd5d 	b.w	32afc <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4f042:	210a      	movs	r1, #10
   4f044:	4628      	mov	r0, r5
   4f046:	f7ff fc95 	bl	4e974 <atomic_test_bit>
   4f04a:	2800      	cmp	r0, #0
   4f04c:	d0f1      	beq.n	4f032 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   4f04e:	4628      	mov	r0, r5
   4f050:	2100      	movs	r1, #0
   4f052:	f7ff fdd6 	bl	4ec02 <atomic_set_bit>
			return 0;
   4f056:	2000      	movs	r0, #0
}
   4f058:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   4f05a:	2008      	movs	r0, #8
   4f05c:	e7fc      	b.n	4f058 <smp_pairing_confirm+0x64>

0004f05e <smp_central_ident>:
   4f05e:	2007      	movs	r0, #7
   4f060:	4770      	bx	lr

0004f062 <atomic_test_and_clear_bit>:
{
   4f062:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   4f064:	2301      	movs	r3, #1
   4f066:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4f06a:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4f06c:	f3bf 8f5b 	dmb	ish
   4f070:	e850 3f00 	ldrex	r3, [r0]
   4f074:	ea03 0402 	and.w	r4, r3, r2
   4f078:	e840 4500 	strex	r5, r4, [r0]
   4f07c:	2d00      	cmp	r5, #0
   4f07e:	d1f7      	bne.n	4f070 <atomic_test_and_clear_bit+0xe>
   4f080:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   4f084:	420b      	tst	r3, r1
}
   4f086:	bf14      	ite	ne
   4f088:	2001      	movne	r0, #1
   4f08a:	2000      	moveq	r0, #0
   4f08c:	bd30      	pop	{r4, r5, pc}

0004f08e <smp_reset>:
{
   4f08e:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4f090:	1d03      	adds	r3, r0, #4
   4f092:	4604      	mov	r4, r0
   4f094:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   4f096:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
   4f09a:	f3bf 8f5b 	dmb	ish
   4f09e:	e853 2f00 	ldrex	r2, [r3]
   4f0a2:	e843 5100 	strex	r1, r5, [r3]
   4f0a6:	2900      	cmp	r1, #0
   4f0a8:	d1f9      	bne.n	4f09e <smp_reset+0x10>
   4f0aa:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   4f0ae:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   4f0b2:	f001 fbc9 	bl	50848 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   4f0b6:	7225      	strb	r5, [r4, #8]
   4f0b8:	f3bf 8f5b 	dmb	ish
   4f0bc:	e854 3f00 	ldrex	r3, [r4]
   4f0c0:	e844 5200 	strex	r2, r5, [r4]
   4f0c4:	2a00      	cmp	r2, #0
   4f0c6:	d1f9      	bne.n	4f0bc <smp_reset+0x2e>
   4f0c8:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f0cc:	78f3      	ldrb	r3, [r6, #3]
   4f0ce:	b92b      	cbnz	r3, 4f0dc <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   4f0d0:	210b      	movs	r1, #11
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4f0d2:	4620      	mov	r0, r4
}
   4f0d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4f0d8:	f7ff bd93 	b.w	4ec02 <atomic_set_bit>
   4f0dc:	2101      	movs	r1, #1
   4f0de:	e7f8      	b.n	4f0d2 <smp_reset+0x44>

0004f0e0 <bt_smp_request_ltk>:
{
   4f0e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4f0e4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   4f0e8:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   4f0ec:	4604      	mov	r4, r0
   4f0ee:	4693      	mov	fp, r2
   4f0f0:	469a      	mov	sl, r3
	smp = smp_chan_get(conn);
   4f0f2:	f7ff fc38 	bl	4e966 <smp_chan_get>
	if (!smp) {
   4f0f6:	4605      	mov	r5, r0
   4f0f8:	2800      	cmp	r0, #0
   4f0fa:	d070      	beq.n	4f1de <bt_smp_request_ltk+0xfe>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4f0fc:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   4f0fe:	f1b9 0f00 	cmp.w	r9, #0
   4f102:	d128      	bne.n	4f156 <bt_smp_request_ltk+0x76>
   4f104:	ea5b 030a 	orrs.w	r3, fp, sl
   4f108:	d125      	bne.n	4f156 <bt_smp_request_ltk+0x76>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4f10a:	2103      	movs	r1, #3
   4f10c:	4638      	mov	r0, r7
   4f10e:	f7ff fc31 	bl	4e974 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   4f112:	b300      	cbz	r0, 4f156 <bt_smp_request_ltk+0x76>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4f114:	2101      	movs	r1, #1
   4f116:	4638      	mov	r0, r7
   4f118:	f7ff fc2c 	bl	4e974 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4f11c:	4606      	mov	r6, r0
   4f11e:	b1d0      	cbz	r0, 4f156 <bt_smp_request_ltk+0x76>
	return MIN(req->max_key_size, rsp->max_key_size);
   4f120:	7d2c      	ldrb	r4, [r5, #20]
   4f122:	7b6b      	ldrb	r3, [r5, #13]
   4f124:	429c      	cmp	r4, r3
   4f126:	bf28      	it	cs
   4f128:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   4f12a:	4622      	mov	r2, r4
   4f12c:	f105 0147 	add.w	r1, r5, #71	; 0x47
   4f130:	4640      	mov	r0, r8
   4f132:	f7fc fbaa 	bl	4b88a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   4f136:	2c0f      	cmp	r4, #15
   4f138:	d806      	bhi.n	4f148 <bt_smp_request_ltk+0x68>
			(void)memset(ltk + enc_size, 0,
   4f13a:	f1c4 0210 	rsb	r2, r4, #16
   4f13e:	4649      	mov	r1, r9
   4f140:	eb08 0004 	add.w	r0, r8, r4
   4f144:	f7fc fbac 	bl	4b8a0 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4f148:	2101      	movs	r1, #1
   4f14a:	4638      	mov	r0, r7
   4f14c:	f7ff fd59 	bl	4ec02 <atomic_set_bit>
}
   4f150:	4630      	mov	r0, r6
   4f152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!conn->le.keys) {
   4f156:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4f15a:	b983      	cbnz	r3, 4f17e <bt_smp_request_ltk+0x9e>
					     &conn->le.dst);
   4f15c:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   4f160:	7a21      	ldrb	r1, [r4, #8]
   4f162:	4632      	mov	r2, r6
   4f164:	2020      	movs	r0, #32
   4f166:	f7e4 faab 	bl	336c0 <bt_keys_find>
   4f16a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4f16e:	b930      	cbnz	r0, 4f17e <bt_smp_request_ltk+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   4f170:	7a21      	ldrb	r1, [r4, #8]
   4f172:	4632      	mov	r2, r6
   4f174:	2001      	movs	r0, #1
   4f176:	f7e4 faa3 	bl	336c0 <bt_keys_find>
   4f17a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   4f17e:	f1b9 0f00 	cmp.w	r9, #0
   4f182:	d11d      	bne.n	4f1c0 <bt_smp_request_ltk+0xe0>
   4f184:	ea5b 0a0a 	orrs.w	sl, fp, sl
   4f188:	d11a      	bne.n	4f1c0 <bt_smp_request_ltk+0xe0>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   4f18a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   4f18e:	b1b9      	cbz	r1, 4f1c0 <bt_smp_request_ltk+0xe0>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   4f190:	89cb      	ldrh	r3, [r1, #14]
   4f192:	069b      	lsls	r3, r3, #26
   4f194:	d514      	bpl.n	4f1c0 <bt_smp_request_ltk+0xe0>
		enc_size = conn->le.keys->enc_size;
   4f196:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   4f198:	4640      	mov	r0, r8
   4f19a:	4622      	mov	r2, r4
   4f19c:	311a      	adds	r1, #26
   4f19e:	f7fc fb74 	bl	4b88a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   4f1a2:	2c0f      	cmp	r4, #15
   4f1a4:	d806      	bhi.n	4f1b4 <bt_smp_request_ltk+0xd4>
			(void)memset(ltk + enc_size, 0,
   4f1a6:	f1c4 0210 	rsb	r2, r4, #16
   4f1aa:	4649      	mov	r1, r9
   4f1ac:	eb08 0004 	add.w	r0, r8, r4
   4f1b0:	f7fc fb76 	bl	4b8a0 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4f1b4:	2101      	movs	r1, #1
   4f1b6:	4638      	mov	r0, r7
   4f1b8:	f7ff fd23 	bl	4ec02 <atomic_set_bit>
		return true;
   4f1bc:	2601      	movs	r6, #1
   4f1be:	e7c7      	b.n	4f150 <bt_smp_request_ltk+0x70>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4f1c0:	210f      	movs	r1, #15
   4f1c2:	4638      	mov	r0, r7
   4f1c4:	f7ff fbd6 	bl	4e974 <atomic_test_bit>
   4f1c8:	b120      	cbz	r0, 4f1d4 <bt_smp_request_ltk+0xf4>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   4f1ca:	2202      	movs	r2, #2
   4f1cc:	2106      	movs	r1, #6
   4f1ce:	4620      	mov	r0, r4
   4f1d0:	f7e0 fb82 	bl	2f8d8 <bt_conn_security_changed>
	smp_reset(smp);
   4f1d4:	4628      	mov	r0, r5
   4f1d6:	f7ff ff5a 	bl	4f08e <smp_reset>
	return false;
   4f1da:	2600      	movs	r6, #0
   4f1dc:	e7b8      	b.n	4f150 <bt_smp_request_ltk+0x70>
		return false;
   4f1de:	4606      	mov	r6, r0
   4f1e0:	e7b6      	b.n	4f150 <bt_smp_request_ltk+0x70>

0004f1e2 <bt_smp_sign>:
   4f1e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4f1e6:	4770      	bx	lr

0004f1e8 <bt_smp_start_security>:
{
   4f1e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   4f1ec:	78c6      	ldrb	r6, [r0, #3]
{
   4f1ee:	4604      	mov	r4, r0
	switch (conn->role) {
   4f1f0:	b126      	cbz	r6, 4f1fc <bt_smp_start_security+0x14>
   4f1f2:	2e01      	cmp	r6, #1
   4f1f4:	d03d      	beq.n	4f272 <bt_smp_start_security+0x8a>
		return -EINVAL;
   4f1f6:	f06f 0415 	mvn.w	r4, #21
   4f1fa:	e005      	b.n	4f208 <bt_smp_start_security+0x20>
		smp = smp_chan_get(conn);
   4f1fc:	f7ff fbb3 	bl	4e966 <smp_chan_get>
		if (!smp) {
   4f200:	4605      	mov	r5, r0
   4f202:	b928      	cbnz	r0, 4f210 <bt_smp_start_security+0x28>
			return -ENOTCONN;
   4f204:	f06f 047f 	mvn.w	r4, #127	; 0x7f
}
   4f208:	4620      	mov	r0, r4
   4f20a:	b003      	add	sp, #12
   4f20c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   4f210:	1d06      	adds	r6, r0, #4
   4f212:	2103      	movs	r1, #3
   4f214:	4630      	mov	r0, r6
   4f216:	f7ff fbad 	bl	4e974 <atomic_test_bit>
   4f21a:	b110      	cbz	r0, 4f222 <bt_smp_start_security+0x3a>
			return -EBUSY;
   4f21c:	f06f 040f 	mvn.w	r4, #15
   4f220:	e7f2      	b.n	4f208 <bt_smp_start_security+0x20>
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4f222:	2101      	movs	r1, #1
   4f224:	4630      	mov	r0, r6
   4f226:	f7ff fba5 	bl	4e974 <atomic_test_bit>
   4f22a:	2800      	cmp	r0, #0
   4f22c:	d1f6      	bne.n	4f21c <bt_smp_start_security+0x34>
		if (!smp_keys_check(conn)) {
   4f22e:	4620      	mov	r0, r4
   4f230:	f7ff fc1c 	bl	4ea6c <smp_keys_check>
   4f234:	b928      	cbnz	r0, 4f242 <bt_smp_start_security+0x5a>
			return smp_send_pairing_req(conn);
   4f236:	4620      	mov	r0, r4
}
   4f238:	b003      	add	sp, #12
   4f23a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return smp_send_pairing_req(conn);
   4f23e:	f7e3 bb53 	b.w	328e8 <smp_send_pairing_req>
						  conn->le.keys->ltk.rand,
   4f242:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   4f246:	7b0b      	ldrb	r3, [r1, #12]
   4f248:	9300      	str	r3, [sp, #0]
   4f24a:	f101 0218 	add.w	r2, r1, #24
   4f24e:	f101 031a 	add.w	r3, r1, #26
   4f252:	4620      	mov	r0, r4
   4f254:	3110      	adds	r1, #16
   4f256:	f7fd fb95 	bl	4c984 <bt_conn_le_start_encryption>
		if (err) {
   4f25a:	4604      	mov	r4, r0
   4f25c:	2800      	cmp	r0, #0
   4f25e:	d1d3      	bne.n	4f208 <bt_smp_start_security+0x20>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   4f260:	210b      	movs	r1, #11
   4f262:	4628      	mov	r0, r5
   4f264:	f7ff fccd 	bl	4ec02 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4f268:	2101      	movs	r1, #1
   4f26a:	4630      	mov	r0, r6
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4f26c:	f7ff fcc9 	bl	4ec02 <atomic_set_bit>
	return 0;
   4f270:	e7ca      	b.n	4f208 <bt_smp_start_security+0x20>
	smp = smp_chan_get(conn);
   4f272:	f7ff fb78 	bl	4e966 <smp_chan_get>
	if (!smp) {
   4f276:	4605      	mov	r5, r0
   4f278:	2800      	cmp	r0, #0
   4f27a:	d0c3      	beq.n	4f204 <bt_smp_start_security+0x1c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4f27c:	f100 0804 	add.w	r8, r0, #4
   4f280:	2104      	movs	r1, #4
   4f282:	4640      	mov	r0, r8
   4f284:	f7ff fb76 	bl	4e974 <atomic_test_bit>
   4f288:	2800      	cmp	r0, #0
   4f28a:	d150      	bne.n	4f32e <bt_smp_start_security+0x146>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   4f28c:	2103      	movs	r1, #3
   4f28e:	4640      	mov	r0, r8
   4f290:	f7ff fb70 	bl	4e974 <atomic_test_bit>
   4f294:	2800      	cmp	r0, #0
   4f296:	d1c1      	bne.n	4f21c <bt_smp_start_security+0x34>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4f298:	4631      	mov	r1, r6
   4f29a:	4640      	mov	r0, r8
   4f29c:	f7ff fb6a 	bl	4e974 <atomic_test_bit>
   4f2a0:	2800      	cmp	r0, #0
   4f2a2:	d1bb      	bne.n	4f21c <bt_smp_start_security+0x34>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   4f2a4:	7aa0      	ldrb	r0, [r4, #10]
   4f2a6:	f7e3 fa91 	bl	327cc <sec_level_reachable.isra.0>
   4f2aa:	b168      	cbz	r0, 4f2c8 <bt_smp_start_security+0xe0>
	if (!conn->le.keys) {
   4f2ac:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4f2b0:	b983      	cbnz	r3, 4f2d4 <bt_smp_start_security+0xec>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   4f2b2:	7a20      	ldrb	r0, [r4, #8]
   4f2b4:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4f2b8:	f7e4 f97e 	bl	335b8 <bt_keys_get_addr>
   4f2bc:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4f2c0:	b940      	cbnz	r0, 4f2d4 <bt_smp_start_security+0xec>
			return -ENOMEM;
   4f2c2:	f06f 040b 	mvn.w	r4, #11
   4f2c6:	e79f      	b.n	4f208 <bt_smp_start_security+0x20>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   4f2c8:	4620      	mov	r0, r4
   4f2ca:	f7ff fbcf 	bl	4ea6c <smp_keys_check>
   4f2ce:	2800      	cmp	r0, #0
   4f2d0:	d1ec      	bne.n	4f2ac <bt_smp_start_security+0xc4>
   4f2d2:	e790      	b.n	4f1f6 <bt_smp_start_security+0xe>
	if (smp_init(smp) != 0) {
   4f2d4:	4628      	mov	r0, r5
   4f2d6:	f7e3 fad5 	bl	32884 <smp_init>
   4f2da:	4607      	mov	r7, r0
   4f2dc:	b110      	cbz	r0, 4f2e4 <bt_smp_start_security+0xfc>
		return -ENOBUFS;
   4f2de:	f06f 0468 	mvn.w	r4, #104	; 0x68
   4f2e2:	e791      	b.n	4f208 <bt_smp_start_security+0x20>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   4f2e4:	210b      	movs	r1, #11
   4f2e6:	4628      	mov	r0, r5
   4f2e8:	f7ff fccf 	bl	4ec8a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   4f2ec:	4606      	mov	r6, r0
   4f2ee:	2800      	cmp	r0, #0
   4f2f0:	d0f5      	beq.n	4f2de <bt_smp_start_security+0xf6>
   4f2f2:	2101      	movs	r1, #1
   4f2f4:	3008      	adds	r0, #8
   4f2f6:	f000 fa97 	bl	4f828 <net_buf_simple_add>
   4f2fa:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   4f2fc:	2009      	movs	r0, #9
   4f2fe:	f7e3 f9ab 	bl	32658 <get_auth.constprop.0>
   4f302:	463b      	mov	r3, r7
   4f304:	f889 0000 	strb.w	r0, [r9]
   4f308:	4632      	mov	r2, r6
   4f30a:	4620      	mov	r0, r4
   4f30c:	9700      	str	r7, [sp, #0]
   4f30e:	2106      	movs	r1, #6
   4f310:	f7fd fcd1 	bl	4ccb6 <bt_l2cap_send_cb>
	if (err) {
   4f314:	4604      	mov	r4, r0
   4f316:	b118      	cbz	r0, 4f320 <bt_smp_start_security+0x138>
		net_buf_unref(req_buf);
   4f318:	4630      	mov	r0, r6
   4f31a:	f7f4 f8dd 	bl	434d8 <net_buf_unref>
		return err;
   4f31e:	e773      	b.n	4f208 <bt_smp_start_security+0x20>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   4f320:	210f      	movs	r1, #15
   4f322:	4640      	mov	r0, r8
   4f324:	f7ff fc6d 	bl	4ec02 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4f328:	2101      	movs	r1, #1
   4f32a:	4628      	mov	r0, r5
   4f32c:	e79e      	b.n	4f26c <bt_smp_start_security+0x84>
		return -EIO;
   4f32e:	f06f 0404 	mvn.w	r4, #4
   4f332:	e769      	b.n	4f208 <bt_smp_start_security+0x20>

0004f334 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f334:	1d03      	adds	r3, r0, #4
{
   4f336:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4f338:	4605      	mov	r5, r0
   4f33a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f33c:	4618      	mov	r0, r3
   4f33e:	2103      	movs	r1, #3
   4f340:	f7ff fb18 	bl	4e974 <atomic_test_bit>
   4f344:	b1f0      	cbz	r0, 4f384 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   4f346:	4631      	mov	r1, r6
   4f348:	4628      	mov	r0, r5
   4f34a:	f7e3 ffa9 	bl	332a0 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   4f34e:	2105      	movs	r1, #5
   4f350:	4628      	mov	r0, r5
   4f352:	f7ff fc9a 	bl	4ec8a <smp_create_pdu.constprop.0>
	if (!buf) {
   4f356:	4604      	mov	r4, r0
   4f358:	b308      	cbz	r0, 4f39e <smp_error+0x6a>
   4f35a:	2101      	movs	r1, #1
   4f35c:	3008      	adds	r0, #8
   4f35e:	f000 fa63 	bl	4f828 <net_buf_simple_add>
	rsp->reason = reason;
   4f362:	7006      	strb	r6, [r0, #0]
   4f364:	2600      	movs	r6, #0
   4f366:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   4f36a:	9600      	str	r6, [sp, #0]
   4f36c:	4633      	mov	r3, r6
   4f36e:	4622      	mov	r2, r4
   4f370:	2106      	movs	r1, #6
   4f372:	f7fd fca0 	bl	4ccb6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   4f376:	b118      	cbz	r0, 4f380 <smp_error+0x4c>
		net_buf_unref(buf);
   4f378:	4620      	mov	r0, r4
   4f37a:	f7f4 f8ad 	bl	434d8 <net_buf_unref>
	return 0;
   4f37e:	4630      	mov	r0, r6
}
   4f380:	b002      	add	sp, #8
   4f382:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4f384:	2101      	movs	r1, #1
   4f386:	4618      	mov	r0, r3
   4f388:	f7ff faf4 	bl	4e974 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f38c:	2800      	cmp	r0, #0
   4f38e:	d1da      	bne.n	4f346 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4f390:	210f      	movs	r1, #15
   4f392:	4618      	mov	r0, r3
   4f394:	f7ff faee 	bl	4e974 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4f398:	2800      	cmp	r0, #0
   4f39a:	d1d4      	bne.n	4f346 <smp_error+0x12>
   4f39c:	e7d7      	b.n	4f34e <smp_error+0x1a>
		return -ENOBUFS;
   4f39e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4f3a2:	e7ed      	b.n	4f380 <smp_error+0x4c>

0004f3a4 <bt_smp_dhkey_ready>:
{
   4f3a4:	b570      	push	{r4, r5, r6, lr}
   4f3a6:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   4f3a8:	2008      	movs	r0, #8
   4f3aa:	f7e3 f90d 	bl	325c8 <smp_find>
	if (smp) {
   4f3ae:	4604      	mov	r4, r0
   4f3b0:	b1b8      	cbz	r0, 4f3e2 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   4f3b2:	1d05      	adds	r5, r0, #4
   4f3b4:	2108      	movs	r1, #8
   4f3b6:	4628      	mov	r0, r5
   4f3b8:	f7ff fb2d 	bl	4ea16 <atomic_clear_bit>
	if (!dhkey) {
   4f3bc:	b3c6      	cbz	r6, 4f430 <bt_smp_dhkey_ready+0x8c>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4f3be:	2107      	movs	r1, #7
   4f3c0:	f7ff fb29 	bl	4ea16 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   4f3c4:	4631      	mov	r1, r6
   4f3c6:	2220      	movs	r2, #32
   4f3c8:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4f3cc:	f7fc fa5d 	bl	4b88a <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4f3d0:	210a      	movs	r1, #10
   4f3d2:	4628      	mov	r0, r5
   4f3d4:	f7ff face 	bl	4e974 <atomic_test_bit>
   4f3d8:	b168      	cbz	r0, 4f3f6 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f3da:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f3dc:	4628      	mov	r0, r5
   4f3de:	f7ff fc10 	bl	4ec02 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   4f3e2:	2007      	movs	r0, #7
   4f3e4:	f7e3 f8f0 	bl	325c8 <smp_find>
		if (smp) {
   4f3e8:	4604      	mov	r4, r0
   4f3ea:	b118      	cbz	r0, 4f3f4 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   4f3ec:	f7e3 fa66 	bl	328bc <smp_dhkey_generate>
			if (err) {
   4f3f0:	4601      	mov	r1, r0
   4f3f2:	b9b0      	cbnz	r0, 4f422 <bt_smp_dhkey_ready+0x7e>
}
   4f3f4:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   4f3f6:	2110      	movs	r1, #16
   4f3f8:	4628      	mov	r0, r5
   4f3fa:	f7ff fabb 	bl	4e974 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f3fe:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   4f400:	2800      	cmp	r0, #0
   4f402:	d1eb      	bne.n	4f3dc <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   4f404:	4628      	mov	r0, r5
   4f406:	f7ff fab5 	bl	4e974 <atomic_test_bit>
   4f40a:	2800      	cmp	r0, #0
   4f40c:	d0e9      	beq.n	4f3e2 <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f40e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   4f412:	78db      	ldrb	r3, [r3, #3]
			return compute_and_send_central_dhcheck(smp);
   4f414:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f416:	b943      	cbnz	r3, 4f42a <bt_smp_dhkey_ready+0x86>
			return compute_and_send_central_dhcheck(smp);
   4f418:	f7ff fc86 	bl	4ed28 <compute_and_send_central_dhcheck>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   4f41c:	4601      	mov	r1, r0
		if (err) {
   4f41e:	2800      	cmp	r0, #0
   4f420:	d0df      	beq.n	4f3e2 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   4f422:	4620      	mov	r0, r4
   4f424:	f7ff ff86 	bl	4f334 <smp_error>
   4f428:	e7db      	b.n	4f3e2 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   4f42a:	f7ff fcd1 	bl	4edd0 <compute_and_check_and_send_periph_dhcheck>
   4f42e:	e7f5      	b.n	4f41c <bt_smp_dhkey_ready+0x78>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4f430:	210b      	movs	r1, #11
   4f432:	e7f6      	b.n	4f422 <bt_smp_dhkey_ready+0x7e>

0004f434 <smp_ident_addr_info>:
{
   4f434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   4f438:	688f      	ldr	r7, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   4f43a:	783b      	ldrb	r3, [r7, #0]
{
   4f43c:	4604      	mov	r4, r0
   4f43e:	b123      	cbz	r3, 4f44a <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   4f440:	79bb      	ldrb	r3, [r7, #6]
   4f442:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4f446:	2bc0      	cmp	r3, #192	; 0xc0
   4f448:	d176      	bne.n	4f538 <smp_ident_addr_info+0x104>
	struct bt_conn *conn = smp->chan.chan.conn;
   4f44a:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   4f44e:	f105 0888 	add.w	r8, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   4f452:	2207      	movs	r2, #7
   4f454:	4639      	mov	r1, r7
   4f456:	4640      	mov	r0, r8
   4f458:	f7fc fa07 	bl	4b86a <memcmp>
   4f45c:	b180      	cbz	r0, 4f480 <smp_ident_addr_info+0x4c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   4f45e:	7a28      	ldrb	r0, [r5, #8]
   4f460:	4639      	mov	r1, r7
   4f462:	f7e4 f9a5 	bl	337b0 <bt_keys_find_addr>
		if (keys) {
   4f466:	4606      	mov	r6, r0
   4f468:	b150      	cbz	r0, 4f480 <smp_ident_addr_info+0x4c>
			if (!update_keys_check(smp, keys)) {
   4f46a:	4601      	mov	r1, r0
   4f46c:	4620      	mov	r0, r4
   4f46e:	f7ff fa8a 	bl	4e986 <update_keys_check>
   4f472:	b910      	cbnz	r0, 4f47a <smp_ident_addr_info+0x46>
				return BT_SMP_ERR_UNSPECIFIED;
   4f474:	2008      	movs	r0, #8
}
   4f476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_keys_clear(keys);
   4f47a:	4630      	mov	r0, r6
   4f47c:	f7e4 f9b6 	bl	337ec <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4f480:	210d      	movs	r1, #13
   4f482:	1d20      	adds	r0, r4, #4
   4f484:	f7ff fa76 	bl	4e974 <atomic_test_bit>
   4f488:	b398      	cbz	r0, 4f4f2 <smp_ident_addr_info+0xbe>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   4f48a:	7a29      	ldrb	r1, [r5, #8]
   4f48c:	4642      	mov	r2, r8
   4f48e:	2002      	movs	r0, #2
   4f490:	f000 f909 	bl	4f6a6 <bt_keys_get_type>
		if (!keys) {
   4f494:	4606      	mov	r6, r0
   4f496:	2800      	cmp	r0, #0
   4f498:	d0ec      	beq.n	4f474 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   4f49a:	78eb      	ldrb	r3, [r5, #3]
   4f49c:	2b00      	cmp	r3, #0
   4f49e:	d148      	bne.n	4f532 <smp_ident_addr_info+0xfe>
			dst = &conn->le.resp_addr;
   4f4a0:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   4f4a4:	780b      	ldrb	r3, [r1, #0]
   4f4a6:	2b01      	cmp	r3, #1
   4f4a8:	d120      	bne.n	4f4ec <smp_ident_addr_info+0xb8>
		if (bt_addr_le_is_rpa(dst)) {
   4f4aa:	798b      	ldrb	r3, [r1, #6]
   4f4ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4f4b0:	2b40      	cmp	r3, #64	; 0x40
   4f4b2:	d11b      	bne.n	4f4ec <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   4f4b4:	2206      	movs	r2, #6
   4f4b6:	3101      	adds	r1, #1
   4f4b8:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   4f4bc:	f7fc f9e5 	bl	4b88a <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   4f4c0:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   4f4c4:	b193      	cbz	r3, 4f4ec <smp_ident_addr_info+0xb8>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   4f4c6:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   4f4ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4f4ce:	2bc0      	cmp	r3, #192	; 0xc0
   4f4d0:	d00c      	beq.n	4f4ec <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   4f4d2:	2207      	movs	r2, #7
   4f4d4:	4639      	mov	r1, r7
   4f4d6:	1c70      	adds	r0, r6, #1
   4f4d8:	f7fc f9d7 	bl	4b88a <memcpy>
   4f4dc:	2207      	movs	r2, #7
   4f4de:	4639      	mov	r1, r7
   4f4e0:	4640      	mov	r0, r8
   4f4e2:	f7fc f9d2 	bl	4b88a <memcpy>
				bt_conn_identity_resolved(conn);
   4f4e6:	4628      	mov	r0, r5
   4f4e8:	f7e0 f9c8 	bl	2f87c <bt_conn_identity_resolved>
		bt_id_add(keys);
   4f4ec:	4630      	mov	r0, r6
   4f4ee:	f7de fe23 	bl	2e138 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   4f4f2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   4f4f6:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   4f4fa:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   4f4fc:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   4f500:	d503      	bpl.n	4f50a <smp_ident_addr_info+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   4f502:	210a      	movs	r1, #10
   4f504:	4620      	mov	r0, r4
   4f506:	f7ff fb7c 	bl	4ec02 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f50a:	78eb      	ldrb	r3, [r5, #3]
   4f50c:	b943      	cbnz	r3, 4f520 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   4f50e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   4f512:	b92b      	cbnz	r3, 4f520 <smp_ident_addr_info+0xec>
	struct bt_keys *keys = conn->le.keys;
   4f514:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (!keys) {
   4f518:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   4f51c:	2b00      	cmp	r3, #0
   4f51e:	d0a9      	beq.n	4f474 <smp_ident_addr_info+0x40>
	if (!smp->local_dist && !smp->remote_dist) {
   4f520:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   4f524:	b91d      	cbnz	r5, 4f52e <smp_ident_addr_info+0xfa>
		smp_pairing_complete(smp, 0);
   4f526:	4629      	mov	r1, r5
   4f528:	4620      	mov	r0, r4
   4f52a:	f7e3 feb9 	bl	332a0 <smp_pairing_complete>
	return 0;
   4f52e:	2000      	movs	r0, #0
   4f530:	e7a1      	b.n	4f476 <smp_ident_addr_info+0x42>
			dst = &conn->le.init_addr;
   4f532:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   4f536:	e7b5      	b.n	4f4a4 <smp_ident_addr_info+0x70>
		return BT_SMP_ERR_INVALID_PARAMS;
   4f538:	200a      	movs	r0, #10
   4f53a:	e79c      	b.n	4f476 <smp_ident_addr_info+0x42>

0004f53c <bt_smp_disconnected>:
{
   4f53c:	b570      	push	{r4, r5, r6, lr}
   4f53e:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   4f540:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   4f544:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f548:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   4f54a:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   4f54e:	f001 f97b 	bl	50848 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f552:	2103      	movs	r1, #3
   4f554:	4620      	mov	r0, r4
   4f556:	f7ff fa0d 	bl	4e974 <atomic_test_bit>
   4f55a:	b1a0      	cbz	r0, 4f586 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   4f55c:	2108      	movs	r1, #8
   4f55e:	4630      	mov	r0, r6
   4f560:	f7e3 fe9e 	bl	332a0 <smp_pairing_complete>
	if (keys) {
   4f564:	b13d      	cbz	r5, 4f576 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   4f566:	89eb      	ldrh	r3, [r5, #14]
   4f568:	b113      	cbz	r3, 4f570 <bt_smp_disconnected+0x34>
   4f56a:	7b6b      	ldrb	r3, [r5, #13]
   4f56c:	079b      	lsls	r3, r3, #30
   4f56e:	d502      	bpl.n	4f576 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   4f570:	4628      	mov	r0, r5
   4f572:	f7e4 f93b 	bl	337ec <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   4f576:	4630      	mov	r0, r6
   4f578:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   4f57c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   4f580:	2100      	movs	r1, #0
   4f582:	f7fc b98d 	b.w	4b8a0 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4f586:	2101      	movs	r1, #1
   4f588:	4620      	mov	r0, r4
   4f58a:	f7ff f9f3 	bl	4e974 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4f58e:	2800      	cmp	r0, #0
   4f590:	d1e4      	bne.n	4f55c <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4f592:	210f      	movs	r1, #15
   4f594:	4620      	mov	r0, r4
   4f596:	f7ff f9ed 	bl	4e974 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4f59a:	2800      	cmp	r0, #0
   4f59c:	d1de      	bne.n	4f55c <bt_smp_disconnected+0x20>
   4f59e:	e7e1      	b.n	4f564 <bt_smp_disconnected+0x28>

0004f5a0 <smp_timeout>:
{
   4f5a0:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   4f5a2:	2108      	movs	r1, #8
{
   4f5a4:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   4f5a6:	f5a0 70ec 	sub.w	r0, r0, #472	; 0x1d8
   4f5aa:	f7e3 fe79 	bl	332a0 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4f5ae:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   4f5b2:	2104      	movs	r1, #4
}
   4f5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4f5b8:	f7ff bb23 	b.w	4ec02 <atomic_set_bit>

0004f5bc <bt_smp_update_keys>:
{
   4f5bc:	b570      	push	{r4, r5, r6, lr}
   4f5be:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   4f5c0:	f7ff f9d1 	bl	4e966 <smp_chan_get>
	if (!smp) {
   4f5c4:	4605      	mov	r5, r0
   4f5c6:	2800      	cmp	r0, #0
   4f5c8:	d06a      	beq.n	4f6a0 <bt_smp_update_keys+0xe4>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   4f5ca:	1d06      	adds	r6, r0, #4
   4f5cc:	2103      	movs	r1, #3
   4f5ce:	4630      	mov	r0, r6
   4f5d0:	f7ff f9d0 	bl	4e974 <atomic_test_bit>
   4f5d4:	2800      	cmp	r0, #0
   4f5d6:	d063      	beq.n	4f6a0 <bt_smp_update_keys+0xe4>
	if (conn->le.keys) {
   4f5d8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4f5dc:	b108      	cbz	r0, 4f5e2 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   4f5de:	f7e4 f905 	bl	337ec <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   4f5e2:	7a20      	ldrb	r0, [r4, #8]
   4f5e4:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4f5e8:	f7e3 ffe6 	bl	335b8 <bt_keys_get_addr>
   4f5ec:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   4f5f0:	b928      	cbnz	r0, 4f5fe <bt_smp_update_keys+0x42>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   4f5f2:	4628      	mov	r0, r5
   4f5f4:	2108      	movs	r1, #8
}
   4f5f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   4f5fa:	f7ff be9b 	b.w	4f334 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   4f5fe:	210e      	movs	r1, #14
   4f600:	4630      	mov	r0, r6
   4f602:	f7ff f9b7 	bl	4e974 <atomic_test_bit>
   4f606:	b128      	cbz	r0, 4f614 <bt_smp_update_keys+0x58>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   4f608:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   4f60c:	7b53      	ldrb	r3, [r2, #13]
   4f60e:	f043 0302 	orr.w	r3, r3, #2
   4f612:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   4f614:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   4f616:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   4f61a:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   4f61c:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   4f61e:	d836      	bhi.n	4f68e <bt_smp_update_keys+0xd2>
   4f620:	b3c2      	cbz	r2, 4f694 <bt_smp_update_keys+0xd8>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   4f622:	f043 0301 	orr.w	r3, r3, #1
   4f626:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   4f628:	7b6b      	ldrb	r3, [r5, #13]
   4f62a:	7d2a      	ldrb	r2, [r5, #20]
   4f62c:	4293      	cmp	r3, r2
   4f62e:	bf28      	it	cs
   4f630:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   4f632:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4f634:	4630      	mov	r0, r6
   4f636:	2105      	movs	r1, #5
   4f638:	f7ff f99c 	bl	4e974 <atomic_test_bit>
   4f63c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   4f640:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4f642:	b350      	cbz	r0, 4f69a <bt_smp_update_keys+0xde>
		conn->le.keys->flags |= BT_KEYS_SC;
   4f644:	f042 0210 	orr.w	r2, r2, #16
   4f648:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4f64a:	210d      	movs	r1, #13
   4f64c:	4630      	mov	r0, r6
   4f64e:	f7ff f991 	bl	4e974 <atomic_test_bit>
   4f652:	b328      	cbz	r0, 4f6a0 <bt_smp_update_keys+0xe4>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   4f654:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4f658:	2120      	movs	r1, #32
   4f65a:	f000 f834 	bl	4f6c6 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   4f65e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4f662:	f105 0147 	add.w	r1, r5, #71	; 0x47
   4f666:	2210      	movs	r2, #16
   4f668:	301a      	adds	r0, #26
   4f66a:	f7fc f90e 	bl	4b88a <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   4f66e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4f672:	2208      	movs	r2, #8
   4f674:	2100      	movs	r1, #0
   4f676:	3010      	adds	r0, #16
   4f678:	f7fc f912 	bl	4b8a0 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   4f67c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4f680:	2202      	movs	r2, #2
}
   4f682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   4f686:	2100      	movs	r1, #0
   4f688:	3018      	adds	r0, #24
   4f68a:	f7fc b909 	b.w	4b8a0 <memset>
	switch (smp->method) {
   4f68e:	3a05      	subs	r2, #5
   4f690:	2a01      	cmp	r2, #1
   4f692:	d9c6      	bls.n	4f622 <bt_smp_update_keys+0x66>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   4f694:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		break;
   4f698:	e7c5      	b.n	4f626 <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   4f69a:	f022 0210 	bic.w	r2, r2, #16
   4f69e:	735a      	strb	r2, [r3, #13]
}
   4f6a0:	bd70      	pop	{r4, r5, r6, pc}

0004f6a2 <id_add>:
	bt_id_add(keys);
   4f6a2:	f7de bd49 	b.w	2e138 <bt_id_add>

0004f6a6 <bt_keys_get_type>:
{
   4f6a6:	b570      	push	{r4, r5, r6, lr}
   4f6a8:	4604      	mov	r4, r0
   4f6aa:	460d      	mov	r5, r1
   4f6ac:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   4f6ae:	f7e4 f807 	bl	336c0 <bt_keys_find>
	if (keys) {
   4f6b2:	b938      	cbnz	r0, 4f6c4 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   4f6b4:	4631      	mov	r1, r6
   4f6b6:	4628      	mov	r0, r5
   4f6b8:	f7e3 ff7e 	bl	335b8 <bt_keys_get_addr>
	if (!keys) {
   4f6bc:	b110      	cbz	r0, 4f6c4 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   4f6be:	89c3      	ldrh	r3, [r0, #14]
   4f6c0:	431c      	orrs	r4, r3
   4f6c2:	81c4      	strh	r4, [r0, #14]
}
   4f6c4:	bd70      	pop	{r4, r5, r6, pc}

0004f6c6 <bt_keys_add_type>:
	keys->keys |= type;
   4f6c6:	89c3      	ldrh	r3, [r0, #14]
   4f6c8:	4319      	orrs	r1, r3
   4f6ca:	81c1      	strh	r1, [r0, #14]
}
   4f6cc:	4770      	bx	lr

0004f6ce <keys_set>:
{
   4f6ce:	b570      	push	{r4, r5, r6, lr}
   4f6d0:	4605      	mov	r5, r0
   4f6d2:	b090      	sub	sp, #64	; 0x40
   4f6d4:	4614      	mov	r4, r2
   4f6d6:	4618      	mov	r0, r3
	if (!name) {
   4f6d8:	b915      	cbnz	r5, 4f6e0 <keys_set+0x12>
			return -EINVAL;
   4f6da:	f06f 0415 	mvn.w	r4, #21
   4f6de:	e01c      	b.n	4f71a <keys_set+0x4c>
	len = read_cb(cb_arg, val, sizeof(val));
   4f6e0:	2234      	movs	r2, #52	; 0x34
   4f6e2:	a903      	add	r1, sp, #12
   4f6e4:	47a0      	blx	r4
	if (len < 0) {
   4f6e6:	1e04      	subs	r4, r0, #0
   4f6e8:	dbf7      	blt.n	4f6da <keys_set+0xc>
	err = bt_settings_decode_key(name, &addr);
   4f6ea:	a901      	add	r1, sp, #4
   4f6ec:	4628      	mov	r0, r5
   4f6ee:	f7fc f994 	bl	4ba1a <bt_settings_decode_key>
	if (err) {
   4f6f2:	4606      	mov	r6, r0
   4f6f4:	2800      	cmp	r0, #0
   4f6f6:	d1f0      	bne.n	4f6da <keys_set+0xc>
	settings_name_next(name, &next);
   4f6f8:	4669      	mov	r1, sp
   4f6fa:	4628      	mov	r0, r5
   4f6fc:	f7fa fdf9 	bl	4a2f2 <settings_name_next>
	if (!next) {
   4f700:	9800      	ldr	r0, [sp, #0]
   4f702:	b968      	cbnz	r0, 4f720 <keys_set+0x52>
	if (!len) {
   4f704:	b99c      	cbnz	r4, 4f72e <keys_set+0x60>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   4f706:	aa01      	add	r2, sp, #4
   4f708:	4621      	mov	r1, r4
   4f70a:	203f      	movs	r0, #63	; 0x3f
   4f70c:	f7e3 ffd8 	bl	336c0 <bt_keys_find>
		if (keys) {
   4f710:	b118      	cbz	r0, 4f71a <keys_set+0x4c>
			(void)memset(keys, 0, sizeof(*keys));
   4f712:	2240      	movs	r2, #64	; 0x40
   4f714:	4621      	mov	r1, r4
   4f716:	f7fc f8c3 	bl	4b8a0 <memset>
}
   4f71a:	4620      	mov	r0, r4
   4f71c:	b010      	add	sp, #64	; 0x40
   4f71e:	bd70      	pop	{r4, r5, r6, pc}
		unsigned long next_id = strtoul(next, NULL, 10);
   4f720:	220a      	movs	r2, #10
   4f722:	4631      	mov	r1, r6
   4f724:	f7fb fffb 	bl	4b71e <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4f728:	2800      	cmp	r0, #0
   4f72a:	d0eb      	beq.n	4f704 <keys_set+0x36>
   4f72c:	e7d5      	b.n	4f6da <keys_set+0xc>
	keys = bt_keys_get_addr(id, &addr);
   4f72e:	a901      	add	r1, sp, #4
   4f730:	2000      	movs	r0, #0
   4f732:	f7e3 ff41 	bl	335b8 <bt_keys_get_addr>
	if (!keys) {
   4f736:	b158      	cbz	r0, 4f750 <keys_set+0x82>
	if (len != BT_KEYS_STORAGE_LEN) {
   4f738:	2c34      	cmp	r4, #52	; 0x34
   4f73a:	d002      	beq.n	4f742 <keys_set+0x74>
			bt_keys_clear(keys);
   4f73c:	f7e4 f856 	bl	337ec <bt_keys_clear>
   4f740:	e7cb      	b.n	4f6da <keys_set+0xc>
		memcpy(keys->storage_start, val, len);
   4f742:	4622      	mov	r2, r4
   4f744:	a903      	add	r1, sp, #12
   4f746:	300c      	adds	r0, #12
   4f748:	f7fc f89f 	bl	4b88a <memcpy>
	return 0;
   4f74c:	2400      	movs	r4, #0
   4f74e:	e7e4      	b.n	4f71a <keys_set+0x4c>
		return -ENOMEM;
   4f750:	f06f 040b 	mvn.w	r4, #11
   4f754:	e7e1      	b.n	4f71a <keys_set+0x4c>

0004f756 <fixed_data_unref>:
}
   4f756:	4770      	bx	lr

0004f758 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   4f758:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   4f75a:	6849      	ldr	r1, [r1, #4]
   4f75c:	6809      	ldr	r1, [r1, #0]
   4f75e:	f7f3 be27 	b.w	433b0 <net_buf_alloc_len>

0004f762 <net_buf_get>:
{
   4f762:	b570      	push	{r4, r5, r6, lr}
   4f764:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   4f766:	f7f8 fa15 	bl	47b94 <z_impl_k_queue_get>
	if (!buf) {
   4f76a:	4605      	mov	r5, r0
   4f76c:	b128      	cbz	r0, 4f77a <net_buf_get+0x18>
   4f76e:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   4f770:	7963      	ldrb	r3, [r4, #5]
   4f772:	f013 0301 	ands.w	r3, r3, #1
   4f776:	d102      	bne.n	4f77e <net_buf_get+0x1c>
	frag->frags = NULL;
   4f778:	6023      	str	r3, [r4, #0]
}
   4f77a:	4628      	mov	r0, r5
   4f77c:	bd70      	pop	{r4, r5, r6, pc}
   4f77e:	2300      	movs	r3, #0
   4f780:	2200      	movs	r2, #0
   4f782:	4630      	mov	r0, r6
   4f784:	f7f8 fa06 	bl	47b94 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   4f788:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   4f78a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   4f78c:	f023 0301 	bic.w	r3, r3, #1
   4f790:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   4f792:	4604      	mov	r4, r0
   4f794:	e7ec      	b.n	4f770 <net_buf_get+0xe>

0004f796 <net_buf_simple_init_with_data>:
	buf->size  = size;
   4f796:	b292      	uxth	r2, r2
	buf->__buf = data;
   4f798:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   4f79a:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   4f79c:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   4f79e:	8082      	strh	r2, [r0, #4]
}
   4f7a0:	4770      	bx	lr

0004f7a2 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   4f7a2:	6883      	ldr	r3, [r0, #8]
   4f7a4:	440b      	add	r3, r1
   4f7a6:	6003      	str	r3, [r0, #0]
}
   4f7a8:	4770      	bx	lr

0004f7aa <net_buf_put>:
{
   4f7aa:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   4f7ac:	460a      	mov	r2, r1
   4f7ae:	6814      	ldr	r4, [r2, #0]
   4f7b0:	b914      	cbnz	r4, 4f7b8 <net_buf_put+0xe>
}
   4f7b2:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   4f7b4:	f000 bf5a 	b.w	5066c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   4f7b8:	7953      	ldrb	r3, [r2, #5]
   4f7ba:	f043 0301 	orr.w	r3, r3, #1
   4f7be:	7153      	strb	r3, [r2, #5]
   4f7c0:	4622      	mov	r2, r4
   4f7c2:	e7f4      	b.n	4f7ae <net_buf_put+0x4>

0004f7c4 <net_buf_ref>:
	buf->ref++;
   4f7c4:	7902      	ldrb	r2, [r0, #4]
   4f7c6:	3201      	adds	r2, #1
   4f7c8:	7102      	strb	r2, [r0, #4]
}
   4f7ca:	4770      	bx	lr

0004f7cc <net_buf_frag_last>:
{
   4f7cc:	4603      	mov	r3, r0
	while (buf->frags) {
   4f7ce:	4618      	mov	r0, r3
   4f7d0:	681b      	ldr	r3, [r3, #0]
   4f7d2:	2b00      	cmp	r3, #0
   4f7d4:	d1fb      	bne.n	4f7ce <net_buf_frag_last+0x2>
}
   4f7d6:	4770      	bx	lr

0004f7d8 <net_buf_frag_insert>:
	if (parent->frags) {
   4f7d8:	6802      	ldr	r2, [r0, #0]
{
   4f7da:	b510      	push	{r4, lr}
	if (parent->frags) {
   4f7dc:	b12a      	cbz	r2, 4f7ea <net_buf_frag_insert+0x12>
   4f7de:	460b      	mov	r3, r1
	while (buf->frags) {
   4f7e0:	461c      	mov	r4, r3
   4f7e2:	681b      	ldr	r3, [r3, #0]
   4f7e4:	2b00      	cmp	r3, #0
   4f7e6:	d1fb      	bne.n	4f7e0 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   4f7e8:	6022      	str	r2, [r4, #0]
	parent->frags = frag;
   4f7ea:	6001      	str	r1, [r0, #0]
}
   4f7ec:	bd10      	pop	{r4, pc}

0004f7ee <net_buf_frag_add>:
{
   4f7ee:	b510      	push	{r4, lr}
	if (!head) {
   4f7f0:	4604      	mov	r4, r0
   4f7f2:	b920      	cbnz	r0, 4f7fe <net_buf_frag_add+0x10>
	buf->ref++;
   4f7f4:	790b      	ldrb	r3, [r1, #4]
   4f7f6:	3301      	adds	r3, #1
   4f7f8:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   4f7fa:	4608      	mov	r0, r1
}
   4f7fc:	bd10      	pop	{r4, pc}
   4f7fe:	4603      	mov	r3, r0
	while (buf->frags) {
   4f800:	4618      	mov	r0, r3
   4f802:	681b      	ldr	r3, [r3, #0]
   4f804:	2b00      	cmp	r3, #0
   4f806:	d1fb      	bne.n	4f800 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   4f808:	f7ff ffe6 	bl	4f7d8 <net_buf_frag_insert>
   4f80c:	4620      	mov	r0, r4
   4f80e:	e7f5      	b.n	4f7fc <net_buf_frag_add+0xe>

0004f810 <net_buf_frag_del>:
{
   4f810:	b510      	push	{r4, lr}
	if (parent) {
   4f812:	b108      	cbz	r0, 4f818 <net_buf_frag_del+0x8>
		parent->frags = frag->frags;
   4f814:	680b      	ldr	r3, [r1, #0]
   4f816:	6003      	str	r3, [r0, #0]
	next_frag = frag->frags;
   4f818:	680c      	ldr	r4, [r1, #0]
	frag->frags = NULL;
   4f81a:	2300      	movs	r3, #0
	net_buf_unref(frag);
   4f81c:	4608      	mov	r0, r1
	frag->frags = NULL;
   4f81e:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   4f820:	f7f3 fe5a 	bl	434d8 <net_buf_unref>
}
   4f824:	4620      	mov	r0, r4
   4f826:	bd10      	pop	{r4, pc}

0004f828 <net_buf_simple_add>:
	return buf->data + buf->len;
   4f828:	8883      	ldrh	r3, [r0, #4]
   4f82a:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   4f82c:	4419      	add	r1, r3
   4f82e:	8081      	strh	r1, [r0, #4]
	return tail;
}
   4f830:	18d0      	adds	r0, r2, r3
   4f832:	4770      	bx	lr

0004f834 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   4f834:	b430      	push	{r4, r5}
   4f836:	8884      	ldrh	r4, [r0, #4]
   4f838:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   4f83a:	18a3      	adds	r3, r4, r2
   4f83c:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   4f83e:	1928      	adds	r0, r5, r4
}
   4f840:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   4f842:	f7fc b822 	b.w	4b88a <memcpy>

0004f846 <net_buf_simple_add_u8>:
   4f846:	8883      	ldrh	r3, [r0, #4]
   4f848:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   4f84a:	b510      	push	{r4, lr}
	buf->len += len;
   4f84c:	1c5c      	adds	r4, r3, #1
   4f84e:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   4f850:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   4f852:	18d0      	adds	r0, r2, r3
   4f854:	bd10      	pop	{r4, pc}

0004f856 <net_buf_simple_add_le16>:
   4f856:	8883      	ldrh	r3, [r0, #4]
   4f858:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   4f85a:	b530      	push	{r4, r5, lr}
   4f85c:	18d4      	adds	r4, r2, r3
	buf->len += len;
   4f85e:	1c9d      	adds	r5, r3, #2
   4f860:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   4f862:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   4f864:	0a09      	lsrs	r1, r1, #8
   4f866:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   4f868:	bd30      	pop	{r4, r5, pc}

0004f86a <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   4f86a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   4f86c:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   4f86e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   4f870:	1a40      	subs	r0, r0, r1
	buf->len += len;
   4f872:	4411      	add	r1, r2
	buf->data -= len;
   4f874:	6018      	str	r0, [r3, #0]
	buf->len += len;
   4f876:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   4f878:	4770      	bx	lr

0004f87a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   4f87a:	8882      	ldrh	r2, [r0, #4]
   4f87c:	1a52      	subs	r2, r2, r1
{
   4f87e:	4603      	mov	r3, r0
	buf->len -= len;
   4f880:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   4f882:	6800      	ldr	r0, [r0, #0]
   4f884:	4408      	add	r0, r1
   4f886:	6018      	str	r0, [r3, #0]
}
   4f888:	4770      	bx	lr

0004f88a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   4f88a:	4603      	mov	r3, r0
	void *data = buf->data;
   4f88c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   4f88e:	889a      	ldrh	r2, [r3, #4]
   4f890:	1a52      	subs	r2, r2, r1
	buf->data += len;
   4f892:	4401      	add	r1, r0
	buf->len -= len;
   4f894:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   4f896:	6019      	str	r1, [r3, #0]

	return data;
}
   4f898:	4770      	bx	lr

0004f89a <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   4f89a:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   4f89c:	6803      	ldr	r3, [r0, #0]
   4f89e:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   4f8a0:	2101      	movs	r1, #1
   4f8a2:	f7ff ffea 	bl	4f87a <net_buf_simple_pull>

	return val;
}
   4f8a6:	4620      	mov	r0, r4
   4f8a8:	bd10      	pop	{r4, pc}

0004f8aa <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   4f8aa:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   4f8ac:	6803      	ldr	r3, [r0, #0]
   4f8ae:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   4f8b0:	2102      	movs	r1, #2
   4f8b2:	f7ff ffe2 	bl	4f87a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   4f8b6:	4620      	mov	r0, r4
   4f8b8:	bd10      	pop	{r4, pc}

0004f8ba <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   4f8ba:	6802      	ldr	r2, [r0, #0]
   4f8bc:	6880      	ldr	r0, [r0, #8]
}
   4f8be:	1a10      	subs	r0, r2, r0
   4f8c0:	4770      	bx	lr

0004f8c2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   4f8c2:	8883      	ldrh	r3, [r0, #4]
   4f8c4:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   4f8c6:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   4f8c8:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   4f8ca:	6803      	ldr	r3, [r0, #0]
   4f8cc:	1a5b      	subs	r3, r3, r1
}
   4f8ce:	1ad0      	subs	r0, r2, r3
   4f8d0:	4770      	bx	lr

0004f8d2 <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   4f8d2:	7081      	strb	r1, [r0, #2]
}
   4f8d4:	4770      	bx	lr

0004f8d6 <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
   4f8d6:	2000      	movs	r0, #0
   4f8d8:	4770      	bx	lr

0004f8da <usb_hid_init>:
	usb_set_hid_report_size(cfg, dev_data->report_size);
   4f8da:	6903      	ldr	r3, [r0, #16]
   4f8dc:	6842      	ldr	r2, [r0, #4]
   4f8de:	685b      	ldr	r3, [r3, #4]
   4f8e0:	6852      	ldr	r2, [r2, #4]
	dst[0] = val;
   4f8e2:	7413      	strb	r3, [r2, #16]
	dst[1] = val >> 8;
   4f8e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   4f8e8:	7453      	strb	r3, [r2, #17]
}
   4f8ea:	2000      	movs	r0, #0
   4f8ec:	4770      	bx	lr

0004f8ee <hid_int_ep_write>:
{
   4f8ee:	b430      	push	{r4, r5}
	const struct usb_cfg_data *cfg = dev->config;
   4f8f0:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
   4f8f2:	6900      	ldr	r0, [r0, #16]
	if (hid_dev_data->configured && !hid_dev_data->suspended) {
   4f8f4:	7b05      	ldrb	r5, [r0, #12]
   4f8f6:	b135      	cbz	r5, 4f906 <hid_int_ep_write+0x18>
   4f8f8:	7b40      	ldrb	r0, [r0, #13]
   4f8fa:	b920      	cbnz	r0, 4f906 <hid_int_ep_write+0x18>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
   4f8fc:	6a20      	ldr	r0, [r4, #32]
}
   4f8fe:	bc30      	pop	{r4, r5}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
   4f900:	7900      	ldrb	r0, [r0, #4]
   4f902:	f7fa bc68 	b.w	4a1d6 <usb_write>
}
   4f906:	f06f 000a 	mvn.w	r0, #10
   4f90a:	bc30      	pop	{r4, r5}
   4f90c:	4770      	bx	lr

0004f90e <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   4f90e:	6903      	ldr	r3, [r0, #16]
{
   4f910:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   4f912:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   4f916:	2300      	movs	r3, #0
   4f918:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   4f91a:	7f83      	ldrb	r3, [r0, #30]
{
   4f91c:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   4f91e:	b113      	cbz	r3, 4f926 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   4f920:	7a40      	ldrb	r0, [r0, #9]
   4f922:	f000 fb70 	bl	50006 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   4f926:	2301      	movs	r3, #1
   4f928:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   4f92a:	2300      	movs	r3, #0
   4f92c:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   4f92e:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   4f930:	77a3      	strb	r3, [r4, #30]
}
   4f932:	bd10      	pop	{r4, pc}

0004f934 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   4f934:	f7f8 b874 	b.w	47a20 <z_impl_k_mutex_lock>

0004f938 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   4f938:	f7f8 b8ea 	b.w	47b10 <z_impl_k_mutex_unlock>

0004f93c <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   4f93c:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   4f93e:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   4f940:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   4f944:	b921      	cbnz	r1, 4f950 <usb_dc_ep_check_cap+0x14>
   4f946:	3a00      	subs	r2, #0
   4f948:	bf18      	it	ne
   4f94a:	2201      	movne	r2, #1
   4f94c:	4250      	negs	r0, r2
   4f94e:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   4f950:	2a08      	cmp	r2, #8
   4f952:	d806      	bhi.n	4f962 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   4f954:	2901      	cmp	r1, #1
   4f956:	d107      	bne.n	4f968 <usb_dc_ep_check_cap+0x2c>
   4f958:	f083 0008 	eor.w	r0, r3, #8
   4f95c:	f340 00c0 	sbfx	r0, r0, #3, #1
   4f960:	4770      	bx	lr
		return -1;
   4f962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4f966:	4770      	bx	lr
	return 0;
   4f968:	2000      	movs	r0, #0
}
   4f96a:	4770      	bx	lr

0004f96c <usb_dc_ep_read>:
{
   4f96c:	b570      	push	{r4, r5, r6, lr}
   4f96e:	4604      	mov	r4, r0
   4f970:	460e      	mov	r6, r1
   4f972:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   4f974:	f7f4 fbd6 	bl	44124 <usb_dc_ep_read_wait>
	if (ret) {
   4f978:	b930      	cbnz	r0, 4f988 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   4f97a:	b906      	cbnz	r6, 4f97e <usb_dc_ep_read+0x12>
   4f97c:	b125      	cbz	r5, 4f988 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   4f97e:	4620      	mov	r0, r4
}
   4f980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   4f984:	f7f4 bc16 	b.w	441b4 <usb_dc_ep_read_continue>
}
   4f988:	bd70      	pop	{r4, r5, r6, pc}

0004f98a <usb_dc_wakeup_request>:
{
   4f98a:	b508      	push	{r3, lr}
	bool res = nrfx_usbd_wakeup_req();
   4f98c:	f7f6 ffa6 	bl	468dc <nrfx_usbd_wakeup_req>
		return -EAGAIN;
   4f990:	2800      	cmp	r0, #0
}
   4f992:	bf0c      	ite	eq
   4f994:	f06f 000a 	mvneq.w	r0, #10
   4f998:	2000      	movne	r0, #0
   4f99a:	bd08      	pop	{r3, pc}

0004f99c <adc_context_on_timer_expired>:
{
   4f99c:	b410      	push	{r4}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   4f99e:	f1a0 0308 	sub.w	r3, r0, #8
   4f9a2:	f3bf 8f5b 	dmb	ish
   4f9a6:	e853 2f00 	ldrex	r2, [r3]
   4f9aa:	1c51      	adds	r1, r2, #1
   4f9ac:	e843 1400 	strex	r4, r1, [r3]
   4f9b0:	2c00      	cmp	r4, #0
   4f9b2:	d1f8      	bne.n	4f9a6 <adc_context_on_timer_expired+0xa>
   4f9b4:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   4f9b8:	b922      	cbnz	r2, 4f9c4 <adc_context_on_timer_expired+0x28>
		adc_context_start_sampling(ctx);
   4f9ba:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
}
   4f9be:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   4f9c0:	f7f4 bce6 	b.w	44390 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   4f9c4:	f06f 030f 	mvn.w	r3, #15
}
   4f9c8:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   4f9ca:	6683      	str	r3, [r0, #104]	; 0x68
}
   4f9cc:	4770      	bx	lr

0004f9ce <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   4f9ce:	6903      	ldr	r3, [r0, #16]
   4f9d0:	b2c9      	uxtb	r1, r1
   4f9d2:	220c      	movs	r2, #12
   4f9d4:	fb01 3302 	mla	r3, r1, r2, r3
   4f9d8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   4f9da:	f000 0007 	and.w	r0, r0, #7
   4f9de:	4770      	bx	lr

0004f9e0 <set_on_state>:
	__asm__ volatile(
   4f9e0:	f04f 0320 	mov.w	r3, #32
   4f9e4:	f3ef 8211 	mrs	r2, BASEPRI
   4f9e8:	f383 8812 	msr	BASEPRI_MAX, r3
   4f9ec:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   4f9f0:	6803      	ldr	r3, [r0, #0]
   4f9f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4f9f6:	f043 0302 	orr.w	r3, r3, #2
   4f9fa:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   4f9fc:	f382 8811 	msr	BASEPRI, r2
   4fa00:	f3bf 8f6f 	isb	sy
}
   4fa04:	4770      	bx	lr

0004fa06 <stop>:
{
   4fa06:	4603      	mov	r3, r0
   4fa08:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   4fa0a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   4fa0c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   4fa0e:	f04f 0420 	mov.w	r4, #32
   4fa12:	f3ef 8611 	mrs	r6, BASEPRI
   4fa16:	f384 8812 	msr	BASEPRI_MAX, r4
   4fa1a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   4fa1e:	250c      	movs	r5, #12
   4fa20:	fb05 0401 	mla	r4, r5, r1, r0
   4fa24:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   4fa26:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   4fa2a:	d001      	beq.n	4fa30 <stop+0x2a>
   4fa2c:	42a2      	cmp	r2, r4
   4fa2e:	d110      	bne.n	4fa52 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   4fa30:	fb05 0001 	mla	r0, r5, r1, r0
   4fa34:	2201      	movs	r2, #1
   4fa36:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   4fa38:	2000      	movs	r0, #0
	__asm__ volatile(
   4fa3a:	f386 8811 	msr	BASEPRI, r6
   4fa3e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   4fa42:	b928      	cbnz	r0, 4fa50 <stop+0x4a>
	get_sub_config(dev, type)->stop();
   4fa44:	685b      	ldr	r3, [r3, #4]
   4fa46:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   4fa4a:	685b      	ldr	r3, [r3, #4]
   4fa4c:	4798      	blx	r3
	return 0;
   4fa4e:	2000      	movs	r0, #0
}
   4fa50:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   4fa52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4fa56:	e7f0      	b.n	4fa3a <stop+0x34>

0004fa58 <api_stop>:
	return stop(dev, subsys, CTX_API);
   4fa58:	2280      	movs	r2, #128	; 0x80
   4fa5a:	f7ff bfd4 	b.w	4fa06 <stop>

0004fa5e <async_start>:
{
   4fa5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4fa60:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   4fa62:	6904      	ldr	r4, [r0, #16]
{
   4fa64:	4605      	mov	r5, r0
   4fa66:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   4fa68:	f04f 0020 	mov.w	r0, #32
   4fa6c:	f3ef 8c11 	mrs	ip, BASEPRI
   4fa70:	f380 8812 	msr	BASEPRI_MAX, r0
   4fa74:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   4fa78:	260c      	movs	r6, #12
   4fa7a:	fb06 4601 	mla	r6, r6, r1, r4
   4fa7e:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   4fa80:	f000 0e07 	and.w	lr, r0, #7
   4fa84:	f1be 0f01 	cmp.w	lr, #1
   4fa88:	d111      	bne.n	4faae <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   4fa8a:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   4fa8c:	2600      	movs	r6, #0
	__asm__ volatile(
   4fa8e:	f38c 8811 	msr	BASEPRI, ip
   4fa92:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   4fa96:	b946      	cbnz	r6, 4faaa <async_start+0x4c>
	subdata->cb = cb;
   4fa98:	200c      	movs	r0, #12
   4fa9a:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
   4fa9e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   4faa2:	686b      	ldr	r3, [r5, #4]
   4faa4:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   4faa8:	4798      	blx	r3
}
   4faaa:	4630      	mov	r0, r6
   4faac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   4faae:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   4fab2:	4287      	cmp	r7, r0
   4fab4:	bf14      	ite	ne
   4fab6:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   4faba:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   4fabe:	e7e6      	b.n	4fa8e <async_start+0x30>

0004fac0 <api_start>:
{
   4fac0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   4fac2:	2480      	movs	r4, #128	; 0x80
   4fac4:	9400      	str	r4, [sp, #0]
   4fac6:	f7ff ffca 	bl	4fa5e <async_start>
}
   4faca:	b002      	add	sp, #8
   4facc:	bd10      	pop	{r4, pc}

0004face <onoff_started_callback>:
	return &data->mgr[type];
   4face:	6900      	ldr	r0, [r0, #16]
{
   4fad0:	b410      	push	{r4}
	return &data->mgr[type];
   4fad2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   4fad4:	241c      	movs	r4, #28
   4fad6:	fb03 0004 	mla	r0, r3, r4, r0
   4fada:	2100      	movs	r1, #0
}
   4fadc:	bc10      	pop	{r4}
	notify(mgr, 0);
   4fade:	4710      	bx	r2

0004fae0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   4fae0:	2000      	movs	r0, #0
   4fae2:	f000 b92d 	b.w	4fd40 <nrfx_clock_start>

0004fae6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   4fae6:	2000      	movs	r0, #0
   4fae8:	f7f5 bfa0 	b.w	45a2c <nrfx_clock_stop>

0004faec <blocking_start_callback>:
{
   4faec:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   4faee:	f7f8 b885 	b.w	47bfc <z_impl_k_sem_give>

0004faf2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4faf2:	6843      	ldr	r3, [r0, #4]
   4faf4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   4faf6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   4fafa:	600b      	str	r3, [r1, #0]
}
   4fafc:	2000      	movs	r0, #0
   4fafe:	4770      	bx	lr

0004fb00 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4fb00:	6843      	ldr	r3, [r0, #4]
   4fb02:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   4fb04:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   4fb08:	4042      	eors	r2, r0
   4fb0a:	400a      	ands	r2, r1
   4fb0c:	4042      	eors	r2, r0
    p_reg->OUT = value;
   4fb0e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   4fb12:	2000      	movs	r0, #0
   4fb14:	4770      	bx	lr

0004fb16 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4fb16:	6843      	ldr	r3, [r0, #4]
   4fb18:	685b      	ldr	r3, [r3, #4]
}
   4fb1a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   4fb1c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   4fb20:	4770      	bx	lr

0004fb22 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4fb22:	6843      	ldr	r3, [r0, #4]
   4fb24:	685b      	ldr	r3, [r3, #4]
}
   4fb26:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   4fb28:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   4fb2c:	4770      	bx	lr

0004fb2e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4fb2e:	6843      	ldr	r3, [r0, #4]
   4fb30:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   4fb32:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   4fb36:	404b      	eors	r3, r1
    p_reg->OUT = value;
   4fb38:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   4fb3c:	2000      	movs	r0, #0
   4fb3e:	4770      	bx	lr

0004fb40 <gpio_nrfx_manage_callback>:
	return port->data;
   4fb40:	6903      	ldr	r3, [r0, #16]
	return list->head;
   4fb42:	6858      	ldr	r0, [r3, #4]
{
   4fb44:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   4fb46:	b158      	cbz	r0, 4fb60 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4fb48:	2400      	movs	r4, #0
   4fb4a:	4281      	cmp	r1, r0
   4fb4c:	d112      	bne.n	4fb74 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   4fb4e:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   4fb50:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   4fb52:	b954      	cbnz	r4, 4fb6a <gpio_nrfx_manage_callback+0x2a>
   4fb54:	428d      	cmp	r5, r1
	list->head = node;
   4fb56:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   4fb58:	d100      	bne.n	4fb5c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   4fb5a:	6098      	str	r0, [r3, #8]
	parent->next = child;
   4fb5c:	2000      	movs	r0, #0
   4fb5e:	6008      	str	r0, [r1, #0]
	if (set) {
   4fb60:	b96a      	cbnz	r2, 4fb7e <gpio_nrfx_manage_callback+0x3e>
	return 0;
   4fb62:	2000      	movs	r0, #0
}
   4fb64:	bd30      	pop	{r4, r5, pc}
   4fb66:	4628      	mov	r0, r5
   4fb68:	e7ef      	b.n	4fb4a <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   4fb6a:	428d      	cmp	r5, r1
	parent->next = child;
   4fb6c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   4fb6e:	bf08      	it	eq
   4fb70:	609c      	streq	r4, [r3, #8]
}
   4fb72:	e7f3      	b.n	4fb5c <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   4fb74:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4fb76:	4604      	mov	r4, r0
   4fb78:	2d00      	cmp	r5, #0
   4fb7a:	d1f4      	bne.n	4fb66 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   4fb7c:	b13a      	cbz	r2, 4fb8e <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   4fb7e:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   4fb80:	685a      	ldr	r2, [r3, #4]
   4fb82:	600a      	str	r2, [r1, #0]
	list->head = node;
   4fb84:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   4fb86:	2800      	cmp	r0, #0
   4fb88:	d1eb      	bne.n	4fb62 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   4fb8a:	6099      	str	r1, [r3, #8]
}
   4fb8c:	e7ea      	b.n	4fb64 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   4fb8e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   4fb92:	e7e7      	b.n	4fb64 <gpio_nrfx_manage_callback+0x24>

0004fb94 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   4fb94:	b573      	push	{r0, r1, r4, r5, r6, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   4fb96:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
   4fb9a:	2908      	cmp	r1, #8
   4fb9c:	6e66      	ldr	r6, [r4, #100]	; 0x64
   4fb9e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   4fba0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   4fba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   4fba4:	ea4f 2515 	mov.w	r5, r5, lsr #8
   4fba8:	ea4f 6303 	mov.w	r3, r3, lsl #24
   4fbac:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   4fbb0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   4fbb4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   4fbb8:	ea43 0305 	orr.w	r3, r3, r5
   4fbbc:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   4fbc0:	ea43 0302 	orr.w	r3, r3, r2
   4fbc4:	9300      	str	r3, [sp, #0]
   4fbc6:	6e26      	ldr	r6, [r4, #96]	; 0x60
   4fbc8:	6e25      	ldr	r5, [r4, #96]	; 0x60
   4fbca:	6e22      	ldr	r2, [r4, #96]	; 0x60
   4fbcc:	6e23      	ldr	r3, [r4, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   4fbce:	ea4f 2415 	mov.w	r4, r5, lsr #8
   4fbd2:	ea4f 6303 	mov.w	r3, r3, lsl #24
   4fbd6:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   4fbda:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
   4fbde:	ea43 0304 	orr.w	r3, r3, r4
   4fbe2:	ea4f 2402 	mov.w	r4, r2, lsl #8
   4fbe6:	bf28      	it	cs
   4fbe8:	2108      	movcs	r1, #8
   4fbea:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   4fbee:	4323      	orrs	r3, r4

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   4fbf0:	460a      	mov	r2, r1
   4fbf2:	460c      	mov	r4, r1
   4fbf4:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   4fbf6:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   4fbf8:	f7fb fe47 	bl	4b88a <memcpy>

	return length;
}
   4fbfc:	4620      	mov	r0, r4
   4fbfe:	b002      	add	sp, #8
   4fc00:	bd70      	pop	{r4, r5, r6, pc}

0004fc02 <is_regular_addr_valid>:
{
   4fc02:	b538      	push	{r3, r4, r5, lr}
   4fc04:	4605      	mov	r5, r0
   4fc06:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   4fc08:	f000 f91e 	bl	4fe48 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   4fc0c:	2d00      	cmp	r5, #0
   4fc0e:	db07      	blt.n	4fc20 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   4fc10:	42a8      	cmp	r0, r5
   4fc12:	d905      	bls.n	4fc20 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   4fc14:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   4fc16:	4284      	cmp	r4, r0
   4fc18:	bf8c      	ite	hi
   4fc1a:	2000      	movhi	r0, #0
   4fc1c:	2001      	movls	r0, #1
}
   4fc1e:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   4fc20:	2000      	movs	r0, #0
   4fc22:	e7fc      	b.n	4fc1e <is_regular_addr_valid+0x1c>

0004fc24 <flash_nrf_read>:
{
   4fc24:	b570      	push	{r4, r5, r6, lr}
   4fc26:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   4fc28:	4628      	mov	r0, r5
   4fc2a:	4619      	mov	r1, r3
{
   4fc2c:	4616      	mov	r6, r2
   4fc2e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   4fc30:	f7ff ffe7 	bl	4fc02 <is_regular_addr_valid>
   4fc34:	b138      	cbz	r0, 4fc46 <flash_nrf_read+0x22>
	if (!len) {
   4fc36:	b14c      	cbz	r4, 4fc4c <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   4fc38:	4622      	mov	r2, r4
   4fc3a:	4629      	mov	r1, r5
   4fc3c:	4630      	mov	r0, r6
   4fc3e:	f7fb fe24 	bl	4b88a <memcpy>
	return 0;
   4fc42:	2000      	movs	r0, #0
}
   4fc44:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   4fc46:	f06f 0015 	mvn.w	r0, #21
   4fc4a:	e7fb      	b.n	4fc44 <flash_nrf_read+0x20>
		return 0;
   4fc4c:	4620      	mov	r0, r4
   4fc4e:	e7f9      	b.n	4fc44 <flash_nrf_read+0x20>

0004fc50 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   4fc50:	2000      	movs	r0, #0
   4fc52:	f7e5 b87d 	b.w	34d50 <ticker_is_initialized>

0004fc56 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   4fc56:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   4fc5a:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   4fc5c:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   4fc5e:	f04f 0800 	mov.w	r8, #0
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   4fc62:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   4fc64:	f8c4 8000 	str.w	r8, [r4]
{
   4fc68:	460d      	mov	r5, r1
   4fc6a:	4616      	mov	r6, r2
	info->index = 0U;
   4fc6c:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   4fc70:	aa01      	add	r2, sp, #4
   4fc72:	4669      	mov	r1, sp
   4fc74:	4798      	blx	r3

	while (layout_size--) {
   4fc76:	e9dd 7c00 	ldrd	r7, ip, [sp]
   4fc7a:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   4fc7c:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   4fc80:	4560      	cmp	r0, ip
   4fc82:	d104      	bne.n	4fc8e <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   4fc84:	f06f 0015 	mvn.w	r0, #21
}
   4fc88:	b003      	add	sp, #12
   4fc8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   4fc8e:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   4fc92:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   4fc94:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   4fc96:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   4fc9a:	b985      	cbnz	r5, 4fcbe <flash_get_page_info+0x68>
			index_jmp = index - info->index;
   4fc9c:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   4fc9e:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
   4fca2:	4543      	cmp	r3, r8
   4fca4:	bf28      	it	cs
   4fca6:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   4fca8:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   4fcac:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   4fcae:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   4fcb0:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   4fcb2:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   4fcb4:	f100 0001 	add.w	r0, r0, #1
   4fcb8:	d9e2      	bls.n	4fc80 <flash_get_page_info+0x2a>
			return 0;
   4fcba:	2000      	movs	r0, #0
   4fcbc:	e7e4      	b.n	4fc88 <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   4fcbe:	1aab      	subs	r3, r5, r2
   4fcc0:	fbb3 f3f9 	udiv	r3, r3, r9
   4fcc4:	e7eb      	b.n	4fc9e <flash_get_page_info+0x48>

0004fcc6 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   4fcc6:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   4fcc8:	2200      	movs	r2, #0
   4fcca:	f7ff bfc4 	b.w	4fc56 <flash_get_page_info>

0004fcce <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   4fcce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   4fcd2:	6883      	ldr	r3, [r0, #8]
{
   4fcd4:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   4fcd6:	691b      	ldr	r3, [r3, #16]
{
   4fcd8:	4688      	mov	r8, r1
   4fcda:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   4fcdc:	a901      	add	r1, sp, #4
   4fcde:	aa02      	add	r2, sp, #8
   4fce0:	4798      	blx	r3
	off_t off = 0;
   4fce2:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   4fce4:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   4fce6:	4625      	mov	r5, r4
   4fce8:	9b02      	ldr	r3, [sp, #8]
   4fcea:	42ab      	cmp	r3, r5
   4fcec:	d802      	bhi.n	4fcf4 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   4fcee:	b006      	add	sp, #24
   4fcf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   4fcf4:	9f01      	ldr	r7, [sp, #4]
   4fcf6:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   4fcfa:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   4fcfc:	687b      	ldr	r3, [r7, #4]
   4fcfe:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   4fd00:	683a      	ldr	r2, [r7, #0]
   4fd02:	42b2      	cmp	r2, r6
   4fd04:	eb0a 0306 	add.w	r3, sl, r6
   4fd08:	d802      	bhi.n	4fd10 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   4fd0a:	3501      	adds	r5, #1
   4fd0c:	469a      	mov	sl, r3
   4fd0e:	e7eb      	b.n	4fce8 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   4fd10:	4649      	mov	r1, r9
   4fd12:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   4fd14:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   4fd16:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   4fd18:	47c0      	blx	r8
   4fd1a:	2800      	cmp	r0, #0
   4fd1c:	d0e7      	beq.n	4fcee <flash_page_foreach+0x20>
			off += page_info.size;
   4fd1e:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   4fd20:	3601      	adds	r6, #1
			off += page_info.size;
   4fd22:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   4fd24:	e7ec      	b.n	4fd00 <flash_page_foreach+0x32>

0004fd26 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   4fd26:	4770      	bx	lr

0004fd28 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   4fd28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   4fd2c:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   4fd30:	f1a0 0308 	sub.w	r3, r0, #8
   4fd34:	4258      	negs	r0, r3
   4fd36:	4158      	adcs	r0, r3
   4fd38:	4770      	bx	lr

0004fd3a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   4fd3a:	4700      	bx	r0

0004fd3c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   4fd3c:	f000 bf1a 	b.w	50b74 <z_impl_k_busy_wait>

0004fd40 <nrfx_clock_start>:
    switch (domain)
   4fd40:	b110      	cbz	r0, 4fd48 <nrfx_clock_start+0x8>
   4fd42:	2801      	cmp	r0, #1
   4fd44:	d01d      	beq.n	4fd82 <nrfx_clock_start+0x42>
   4fd46:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   4fd48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4fd4c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   4fd50:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   4fd54:	03c9      	lsls	r1, r1, #15
   4fd56:	d512      	bpl.n	4fd7e <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   4fd58:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   4fd5c:	2a01      	cmp	r2, #1
   4fd5e:	d10e      	bne.n	4fd7e <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   4fd60:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4fd64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4fd68:	2200      	movs	r2, #0
   4fd6a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   4fd6e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   4fd72:	2202      	movs	r2, #2
   4fd74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4fd78:	2201      	movs	r2, #1
   4fd7a:	609a      	str	r2, [r3, #8]
}
   4fd7c:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   4fd7e:	2200      	movs	r2, #0
   4fd80:	e7ee      	b.n	4fd60 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4fd82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4fd86:	2200      	movs	r2, #0
   4fd88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   4fd8c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   4fd90:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4fd94:	6018      	str	r0, [r3, #0]
}
   4fd96:	4770      	bx	lr

0004fd98 <nrf_gpio_reconfigure>:
{
   4fd98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4fd9a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   4fd9c:	a801      	add	r0, sp, #4
{
   4fd9e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   4fda2:	4616      	mov	r6, r2
   4fda4:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   4fda6:	f7f5 feb1 	bl	45b0c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   4fdaa:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   4fdac:	f1b6 0c00 	subs.w	ip, r6, #0
   4fdb0:	bf18      	it	ne
   4fdb2:	f04f 0c01 	movne.w	ip, #1
   4fdb6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   4fdba:	1e0b      	subs	r3, r1, #0
   4fdbc:	bf18      	it	ne
   4fdbe:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   4fdc0:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   4fdc2:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   4fdc6:	bf14      	ite	ne
   4fdc8:	f04f 0c0c 	movne.w	ip, #12
   4fdcc:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   4fdd0:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   4fdd2:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   4fdd6:	bf14      	ite	ne
   4fdd8:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   4fddc:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   4fde0:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   4fde2:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   4fde6:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   4fdea:	bf14      	ite	ne
   4fdec:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   4fdf0:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   4fdf4:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   4fdf8:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   4fdfc:	b101      	cbz	r1, 4fe00 <nrf_gpio_reconfigure+0x68>
   4fdfe:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   4fe00:	b10e      	cbz	r6, 4fe06 <nrf_gpio_reconfigure+0x6e>
   4fe02:	7836      	ldrb	r6, [r6, #0]
   4fe04:	0076      	lsls	r6, r6, #1
   4fe06:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   4fe08:	b10d      	cbz	r5, 4fe0e <nrf_gpio_reconfigure+0x76>
   4fe0a:	782d      	ldrb	r5, [r5, #0]
   4fe0c:	00ad      	lsls	r5, r5, #2
   4fe0e:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   4fe10:	b10c      	cbz	r4, 4fe16 <nrf_gpio_reconfigure+0x7e>
   4fe12:	7824      	ldrb	r4, [r4, #0]
   4fe14:	0224      	lsls	r4, r4, #8
   4fe16:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   4fe18:	b10f      	cbz	r7, 4fe1e <nrf_gpio_reconfigure+0x86>
   4fe1a:	783f      	ldrb	r7, [r7, #0]
   4fe1c:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   4fe1e:	430c      	orrs	r4, r1
   4fe20:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   4fe22:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   4fe26:	b003      	add	sp, #12
   4fe28:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004fe2a <nrf_gpio_cfg_sense_set>:
{
   4fe2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   4fe2c:	f10d 030f 	add.w	r3, sp, #15
   4fe30:	9301      	str	r3, [sp, #4]
   4fe32:	2300      	movs	r3, #0
{
   4fe34:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   4fe38:	9300      	str	r3, [sp, #0]
   4fe3a:	461a      	mov	r2, r3
   4fe3c:	4619      	mov	r1, r3
   4fe3e:	f7ff ffab 	bl	4fd98 <nrf_gpio_reconfigure>
}
   4fe42:	b005      	add	sp, #20
   4fe44:	f85d fb04 	ldr.w	pc, [sp], #4

0004fe48 <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   4fe48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   4fe4c:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   4fe4e:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   4fe50:	4350      	muls	r0, r2
   4fe52:	4770      	bx	lr

0004fe54 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   4fe54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   4fe58:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   4fe5a:	4770      	bx	lr

0004fe5c <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   4fe5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   4fe60:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   4fe62:	4770      	bx	lr

0004fe64 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4fe64:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   4fe68:	681a      	ldr	r2, [r3, #0]
   4fe6a:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4fe6c:	bf1f      	itttt	ne
   4fe6e:	2200      	movne	r2, #0
   4fe70:	601a      	strne	r2, [r3, #0]
   4fe72:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4fe74:	2001      	movne	r0, #1
   4fe76:	bf08      	it	eq
   4fe78:	2000      	moveq	r0, #0
}
   4fe7a:	4770      	bx	lr

0004fe7c <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   4fe7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4fe80:	f44f 7260 	mov.w	r2, #896	; 0x380
   4fe84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   4fe88:	4770      	bx	lr

0004fe8a <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   4fe8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4fe8e:	f44f 7260 	mov.w	r2, #896	; 0x380
   4fe92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   4fe96:	4770      	bx	lr

0004fe98 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   4fe98:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   4fe9a:	f7f6 fa1f 	bl	462dc <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   4fe9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   4fea2:	f7f5 bdff 	b.w	45aa4 <nrfx_clock_irq_handler>

0004fea6 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   4fea6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   4feaa:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   4feae:	f1a0 0308 	sub.w	r3, r0, #8
   4feb2:	4258      	negs	r0, r3
   4feb4:	4158      	adcs	r0, r3
   4feb6:	4770      	bx	lr

0004feb8 <nrfx_usbd_consumer>:
{
   4feb8:	b530      	push	{r4, r5, lr}
        p_next->p_data = p_transfer->p_data;
   4feba:	e9d1 5400 	ldrd	r5, r4, [r1]
    if (size < data_size)
   4febe:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   4fec0:	bf97      	itett	ls
   4fec2:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   4fec6:	2100      	movhi	r1, #0
        size -= data_size;
   4fec8:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   4feca:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   4fecc:	bf8e      	itee	hi
   4fece:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   4fed2:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   4fed4:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   4fed6:	429a      	cmp	r2, r3
   4fed8:	d103      	bne.n	4fee2 <nrfx_usbd_consumer+0x2a>
   4feda:	1e20      	subs	r0, r4, #0
   4fedc:	bf18      	it	ne
   4fede:	2001      	movne	r0, #1
}
   4fee0:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   4fee2:	2000      	movs	r0, #0
   4fee4:	e7fc      	b.n	4fee0 <nrfx_usbd_consumer+0x28>

0004fee6 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   4fee6:	684b      	ldr	r3, [r1, #4]
{
   4fee8:	b510      	push	{r4, lr}
   4feea:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   4feec:	680c      	ldr	r4, [r1, #0]
   4feee:	bf28      	it	cs
   4fef0:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   4fef2:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   4fef6:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   4fef8:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   4fefa:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   4fefc:	4413      	add	r3, r2
}
   4fefe:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
   4ff00:	600b      	str	r3, [r1, #0]
}
   4ff02:	bf18      	it	ne
   4ff04:	2001      	movne	r0, #1
   4ff06:	bd10      	pop	{r4, pc}

0004ff08 <nrfx_usbd_feeder_ram_zlp>:
{
   4ff08:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   4ff0a:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   4ff0c:	680b      	ldr	r3, [r1, #0]
   4ff0e:	42a2      	cmp	r2, r4
   4ff10:	bf28      	it	cs
   4ff12:	4622      	movcs	r2, r4
   4ff14:	2a00      	cmp	r2, #0
   4ff16:	bf14      	ite	ne
   4ff18:	461d      	movne	r5, r3
   4ff1a:	2500      	moveq	r5, #0
    p_transfer->size -= tx_size;
   4ff1c:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   4ff20:	4413      	add	r3, r2
    p_next->size = tx_size;
   4ff22:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   4ff26:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   4ff28:	600b      	str	r3, [r1, #0]
}
   4ff2a:	bf14      	ite	ne
   4ff2c:	2001      	movne	r0, #1
   4ff2e:	2000      	moveq	r0, #0
   4ff30:	bd30      	pop	{r4, r5, pc}

0004ff32 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   4ff32:	43c3      	mvns	r3, r0
   4ff34:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   4ff38:	f000 000f 	and.w	r0, r0, #15
}
   4ff3c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   4ff40:	4770      	bx	lr

0004ff42 <ev_started_handler>:
}
   4ff42:	4770      	bx	lr

0004ff44 <nrf_usbd_epin_dma_handler>:
{
   4ff44:	b508      	push	{r3, lr}
   4ff46:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
   4ff48:	f7f6 fa3a 	bl	463c0 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   4ff4c:	4608      	mov	r0, r1
   4ff4e:	f7f6 fa29 	bl	463a4 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   4ff52:	7b83      	ldrb	r3, [r0, #14]
   4ff54:	2b03      	cmp	r3, #3
   4ff56:	d10a      	bne.n	4ff6e <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4ff58:	4608      	mov	r0, r1
   4ff5a:	f7ff ffea 	bl	4ff32 <ep2bit>
   4ff5e:	2301      	movs	r3, #1
   4ff60:	fa03 f000 	lsl.w	r0, r3, r0
   4ff64:	43c0      	mvns	r0, r0
}
   4ff66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4ff6a:	f7f6 bb25 	b.w	465b8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
   4ff6e:	6803      	ldr	r3, [r0, #0]
   4ff70:	2b00      	cmp	r3, #0
   4ff72:	d0f1      	beq.n	4ff58 <nrf_usbd_epin_dma_handler+0x14>
}
   4ff74:	bd08      	pop	{r3, pc}

0004ff76 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   4ff76:	2087      	movs	r0, #135	; 0x87
   4ff78:	f7ff bfe4 	b.w	4ff44 <nrf_usbd_epin_dma_handler>

0004ff7c <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   4ff7c:	2086      	movs	r0, #134	; 0x86
   4ff7e:	f7ff bfe1 	b.w	4ff44 <nrf_usbd_epin_dma_handler>

0004ff82 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   4ff82:	2085      	movs	r0, #133	; 0x85
   4ff84:	f7ff bfde 	b.w	4ff44 <nrf_usbd_epin_dma_handler>

0004ff88 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   4ff88:	2084      	movs	r0, #132	; 0x84
   4ff8a:	f7ff bfdb 	b.w	4ff44 <nrf_usbd_epin_dma_handler>

0004ff8e <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   4ff8e:	2083      	movs	r0, #131	; 0x83
   4ff90:	f7ff bfd8 	b.w	4ff44 <nrf_usbd_epin_dma_handler>

0004ff94 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   4ff94:	2082      	movs	r0, #130	; 0x82
   4ff96:	f7ff bfd5 	b.w	4ff44 <nrf_usbd_epin_dma_handler>

0004ff9a <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   4ff9a:	2081      	movs	r0, #129	; 0x81
   4ff9c:	f7ff bfd2 	b.w	4ff44 <nrf_usbd_epin_dma_handler>

0004ffa0 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   4ffa0:	f7f6 bb1a 	b.w	465d8 <nrf_usbd_ep0in_dma_handler>

0004ffa4 <nrfx_usbd_ep_max_packet_size_set>:
{
   4ffa4:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   4ffa6:	f7f6 f9fd 	bl	463a4 <ep_state_access>
    p_state->max_packet_size = size;
   4ffaa:	8181      	strh	r1, [r0, #12]
}
   4ffac:	bd08      	pop	{r3, pc}

0004ffae <nrfx_usbd_ep_status_get>:
{
   4ffae:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   4ffb0:	f7f6 f9f8 	bl	463a4 <ep_state_access>
	__asm__ volatile(
   4ffb4:	f04f 0220 	mov.w	r2, #32
   4ffb8:	f3ef 8311 	mrs	r3, BASEPRI
   4ffbc:	f382 8812 	msr	BASEPRI_MAX, r2
   4ffc0:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   4ffc4:	6882      	ldr	r2, [r0, #8]
   4ffc6:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   4ffc8:	6802      	ldr	r2, [r0, #0]
   4ffca:	b92a      	cbnz	r2, 4ffd8 <nrfx_usbd_ep_status_get+0x2a>
   4ffcc:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   4ffce:	f383 8811 	msr	BASEPRI, r3
   4ffd2:	f3bf 8f6f 	isb	sy
}
   4ffd6:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   4ffd8:	2004      	movs	r0, #4
   4ffda:	e7f8      	b.n	4ffce <nrfx_usbd_ep_status_get+0x20>

0004ffdc <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   4ffdc:	2007      	movs	r0, #7
   4ffde:	f7f6 be6d 	b.w	46cbc <nrf_usbd_epout_dma_handler>

0004ffe2 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   4ffe2:	2006      	movs	r0, #6
   4ffe4:	f7f6 be6a 	b.w	46cbc <nrf_usbd_epout_dma_handler>

0004ffe8 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   4ffe8:	2005      	movs	r0, #5
   4ffea:	f7f6 be67 	b.w	46cbc <nrf_usbd_epout_dma_handler>

0004ffee <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   4ffee:	2004      	movs	r0, #4
   4fff0:	f7f6 be64 	b.w	46cbc <nrf_usbd_epout_dma_handler>

0004fff4 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   4fff4:	2003      	movs	r0, #3
   4fff6:	f7f6 be61 	b.w	46cbc <nrf_usbd_epout_dma_handler>

0004fffa <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   4fffa:	2002      	movs	r0, #2
   4fffc:	f7f6 be5e 	b.w	46cbc <nrf_usbd_epout_dma_handler>

00050000 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   50000:	2001      	movs	r0, #1
   50002:	f7f6 be5b 	b.w	46cbc <nrf_usbd_epout_dma_handler>

00050006 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   50006:	f7f6 bf4f 	b.w	46ea8 <usbd_ep_abort>

0005000a <debounce_update>:
        state->counter -= elapsed_ms;
    }
}

void debounce_update(struct debounce_state *state, const bool active, const int elapsed_ms,
                     const struct debounce_config *config) {
   5000a:	b570      	push	{r4, r5, r6, lr}
    // This uses a variation of the integrator debouncing described at
    // https://www.kennethkuhn.com/electronics/debounce.c
    // Every update where "active" does not match the current state, we increment
    // a counter, otherwise we decrement it. When the counter reaches a
    // threshold, the state flips and we reset the counter.
    state->changed = false;
   5000c:	7804      	ldrb	r4, [r0, #0]
   5000e:	f36f 0441 	bfc	r4, #1, #1
   50012:	7004      	strb	r4, [r0, #0]

    if (active == state->pressed) {
   50014:	f004 0501 	and.w	r5, r4, #1
    if (state->counter < elapsed_ms) {
   50018:	8804      	ldrh	r4, [r0, #0]
    if (active == state->pressed) {
   5001a:	428d      	cmp	r5, r1
    if (state->counter < elapsed_ms) {
   5001c:	f3c4 068d 	ubfx	r6, r4, #2, #14
    if (active == state->pressed) {
   50020:	d109      	bne.n	50036 <debounce_update+0x2c>
    if (state->counter < elapsed_ms) {
   50022:	42b2      	cmp	r2, r6
   50024:	dd03      	ble.n	5002e <debounce_update+0x24>
        state->counter = 0;
   50026:	f36f 048f 	bfc	r4, #2, #14
    if (state->counter < flip_threshold) {
        increment_counter(state, elapsed_ms);
        return;
    }

    state->pressed = !state->pressed;
   5002a:	8004      	strh	r4, [r0, #0]
    state->counter = 0;
    state->changed = true;
}
   5002c:	bd70      	pop	{r4, r5, r6, pc}
        state->counter -= elapsed_ms;
   5002e:	1ab6      	subs	r6, r6, r2
        state->counter += elapsed_ms;
   50030:	f366 048f 	bfi	r4, r6, #2, #14
   50034:	e7f9      	b.n	5002a <debounce_update+0x20>
    return state->pressed ? config->debounce_release_ms : config->debounce_press_ms;
   50036:	e9d3 1300 	ldrd	r1, r3, [r3]
   5003a:	f014 0f01 	tst.w	r4, #1
   5003e:	bf08      	it	eq
   50040:	460b      	moveq	r3, r1
    if (state->counter < flip_threshold) {
   50042:	429e      	cmp	r6, r3
   50044:	d208      	bcs.n	50058 <debounce_update+0x4e>
    if (state->counter + elapsed_ms > DEBOUNCE_COUNTER_MAX) {
   50046:	4416      	add	r6, r2
   50048:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
   5004c:	d3f0      	bcc.n	50030 <debounce_update+0x26>
        state->counter = DEBOUNCE_COUNTER_MAX;
   5004e:	f643 73ff 	movw	r3, #16383	; 0x3fff
   50052:	f363 048f 	bfi	r4, r3, #2, #14
   50056:	e7e8      	b.n	5002a <debounce_update+0x20>
    state->pressed = !state->pressed;
   50058:	f085 0401 	eor.w	r4, r5, #1
   5005c:	f044 0402 	orr.w	r4, r4, #2
   50060:	e7e3      	b.n	5002a <debounce_update+0x20>

00050062 <debounce_is_active>:

bool debounce_is_active(const struct debounce_state *state) {
    return state->pressed || state->counter > 0;
   50062:	8800      	ldrh	r0, [r0, #0]
   50064:	f020 0002 	bic.w	r0, r0, #2
   50068:	b280      	uxth	r0, r0
}
   5006a:	3800      	subs	r0, #0
   5006c:	bf18      	it	ne
   5006e:	2001      	movne	r0, #1
   50070:	4770      	bx	lr

00050072 <debounce_is_pressed>:

bool debounce_is_pressed(const struct debounce_state *state) { return state->pressed; }
   50072:	7800      	ldrb	r0, [r0, #0]
   50074:	f000 0001 	and.w	r0, r0, #1
   50078:	4770      	bx	lr

0005007a <debounce_get_changed>:

   5007a:	7800      	ldrb	r0, [r0, #0]
   5007c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   50080:	4770      	bx	lr

00050082 <z_impl_gpio_pin_configure>:
{
   50082:	b4f0      	push	{r4, r5, r6, r7}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   50084:	04d4      	lsls	r4, r2, #19
	const struct gpio_driver_api *api =
   50086:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   50088:	6906      	ldr	r6, [r0, #16]
{
   5008a:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   5008c:	d506      	bpl.n	5009c <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   5008e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   50092:	d003      	beq.n	5009c <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   50094:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   50096:	bf48      	it	mi
   50098:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   5009c:	6834      	ldr	r4, [r6, #0]
   5009e:	2501      	movs	r5, #1
   500a0:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   500a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   500a6:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   500a8:	bf4c      	ite	mi
   500aa:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   500ac:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
   500ae:	683b      	ldr	r3, [r7, #0]
   500b0:	6034      	str	r4, [r6, #0]
}
   500b2:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   500b4:	4718      	bx	r3

000500b6 <kscan_direct_configure>:
    struct kscan_direct_data *data = dev->data;
   500b6:	6903      	ldr	r3, [r0, #16]
    if (!callback) {
   500b8:	b111      	cbz	r1, 500c0 <kscan_direct_configure+0xa>
    data->callback = callback;
   500ba:	6059      	str	r1, [r3, #4]
    return 0;
   500bc:	2000      	movs	r0, #0
   500be:	4770      	bx	lr
        return -EINVAL;
   500c0:	f06f 0015 	mvn.w	r0, #21
}
   500c4:	4770      	bx	lr

000500c6 <kscan_direct_interrupt_configure.isra.0>:
static int kscan_direct_interrupt_configure(const struct device *dev, const gpio_flags_t flags) {
   500c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   500ca:	4606      	mov	r6, r0
   500cc:	460c      	mov	r4, r1
    for (int i = 0; i < config->inputs.len; i++) {
   500ce:	2500      	movs	r5, #0
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   500d0:	f401 4700 	and.w	r7, r1, #32768	; 0x8000
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   500d4:	f04f 0801 	mov.w	r8, #1
   500d8:	6873      	ldr	r3, [r6, #4]
   500da:	42ab      	cmp	r3, r5
   500dc:	d802      	bhi.n	500e4 <kscan_direct_interrupt_configure.isra.0+0x1e>
    return 0;
   500de:	2000      	movs	r0, #0
}
   500e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   500e4:	6833      	ldr	r3, [r6, #0]
   500e6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   500ea:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   500ee:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_api *api =
   500f0:	f8d0 c008 	ldr.w	ip, [r0, #8]
	const struct gpio_driver_data *const data =
   500f4:	6902      	ldr	r2, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   500f6:	b18f      	cbz	r7, 5011c <kscan_direct_interrupt_configure.isra.0+0x56>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   500f8:	6812      	ldr	r2, [r2, #0]
   500fa:	fa08 f301 	lsl.w	r3, r8, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   500fe:	4213      	tst	r3, r2
   50100:	d00c      	beq.n	5011c <kscan_direct_interrupt_configure.isra.0+0x56>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   50102:	f484 22c0 	eor.w	r2, r4, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   50106:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   5010a:	f8dc 9018 	ldr.w	r9, [ip, #24]
   5010e:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   50112:	47c8      	blx	r9
        if (err) {
   50114:	2800      	cmp	r0, #0
   50116:	d1e3      	bne.n	500e0 <kscan_direct_interrupt_configure.isra.0+0x1a>
    for (int i = 0; i < config->inputs.len; i++) {
   50118:	3501      	adds	r5, #1
   5011a:	e7dd      	b.n	500d8 <kscan_direct_interrupt_configure.isra.0+0x12>
   5011c:	4622      	mov	r2, r4
   5011e:	e7f2      	b.n	50106 <kscan_direct_interrupt_configure.isra.0+0x40>

00050120 <kscan_direct_irq_callback_handler>:
    struct kscan_direct_data *data = irq_data->dev->data;
   50120:	f851 3c04 	ldr.w	r3, [r1, #-4]
                                              const gpio_port_pins_t pin) {
   50124:	b510      	push	{r4, lr}
    struct kscan_direct_data *data = irq_data->dev->data;
   50126:	691c      	ldr	r4, [r3, #16]
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   50128:	6823      	ldr	r3, [r4, #0]
   5012a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   5012e:	6858      	ldr	r0, [r3, #4]
   50130:	f7ff ffc9 	bl	500c6 <kscan_direct_interrupt_configure.isra.0>
	return z_impl_k_uptime_ticks();
   50134:	f000 fd1c 	bl	50b70 <z_impl_k_uptime_ticks>
   50138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   5013c:	fba0 0302 	umull	r0, r3, r0, r2
   50140:	fb02 3101 	mla	r1, r2, r1, r3
   50144:	0bc0      	lsrs	r0, r0, #15
   50146:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   5014a:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   5014c:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    k_work_reschedule(&data->work, K_NO_WAIT);
   50150:	2200      	movs	r2, #0
   50152:	f104 0008 	add.w	r0, r4, #8
   50156:	2300      	movs	r3, #0
}
   50158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    k_work_reschedule(&data->work, K_NO_WAIT);
   5015c:	f7f7 bf60 	b.w	48020 <k_work_reschedule>

00050160 <kscan_direct_read>:
static int kscan_direct_read(const struct device *dev) {
   50160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const struct kscan_direct_config *config = dev->config;
   50164:	6844      	ldr	r4, [r0, #4]
    struct kscan_direct_data *data = dev->data;
   50166:	f8d0 8010 	ldr.w	r8, [r0, #16]
static int kscan_direct_read(const struct device *dev) {
   5016a:	4606      	mov	r6, r0
    for (int i = 0; i < config->inputs.len; i++) {
   5016c:	2500      	movs	r5, #0
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   5016e:	f04f 0901 	mov.w	r9, #1
        debounce_update(&data->pin_state[i], active, config->debounce_scan_period_ms,
   50172:	f104 0a08 	add.w	sl, r4, #8
    for (int i = 0; i < config->inputs.len; i++) {
   50176:	6863      	ldr	r3, [r4, #4]
   50178:	42ab      	cmp	r3, r5
   5017a:	d835      	bhi.n	501e8 <kscan_direct_read+0x88>
    for (int i = 0; i < config->inputs.len; i++) {
   5017c:	f04f 0900 	mov.w	r9, #0
    bool continue_scan = false;
   50180:	464d      	mov	r5, r9
    for (int i = 0; i < config->inputs.len; i++) {
   50182:	6863      	ldr	r3, [r4, #4]
   50184:	454b      	cmp	r3, r9
   50186:	d853      	bhi.n	50230 <kscan_direct_read+0xd0>
    const struct kscan_direct_config *config = dev->config;
   50188:	6870      	ldr	r0, [r6, #4]
    if (continue_scan) {
   5018a:	2d00      	cmp	r5, #0
   5018c:	f000 809e 	beq.w	502cc <kscan_direct_read+0x16c>
    struct kscan_direct_data *data = dev->data;
   50190:	6934      	ldr	r4, [r6, #16]
    data->scan_time += config->debounce_scan_period_ms;
   50192:	6903      	ldr	r3, [r0, #16]
   50194:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
   50198:	1818      	adds	r0, r3, r0
   5019a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   5019e:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
   501a2:	03c9      	lsls	r1, r1, #15
   501a4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   501a8:	f240 33e7 	movw	r3, #999	; 0x3e7
   501ac:	03c0      	lsls	r0, r0, #15
   501ae:	18c0      	adds	r0, r0, r3
   501b0:	f141 0100 	adc.w	r1, r1, #0
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   501b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   501b8:	f171 0300 	sbcs.w	r3, r1, #0
   501bc:	f104 0408 	add.w	r4, r4, #8
   501c0:	d37f      	bcc.n	502c2 <kscan_direct_read+0x162>
   501c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   501c6:	2300      	movs	r3, #0
   501c8:	f7d5 ff9a 	bl	26100 <__aeabi_uldivmod>
   501cc:	f06f 0201 	mvn.w	r2, #1
   501d0:	1a12      	subs	r2, r2, r0
   501d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   501d6:	eb63 0301 	sbc.w	r3, r3, r1
   501da:	4620      	mov	r0, r4
   501dc:	f7f7 ff20 	bl	48020 <k_work_reschedule>
}
   501e0:	2000      	movs	r0, #0
   501e2:	b003      	add	sp, #12
   501e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct gpio_dt_spec *gpio = &config->inputs.gpios[i];
   501e8:	6823      	ldr	r3, [r4, #0]
	return gpio_pin_get(spec->port, spec->pin);
   501ea:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   501ee:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
	const struct gpio_driver_data *const data =
   501f2:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return gpio_pin_get(spec->port, spec->pin);
   501f6:	7917      	ldrb	r7, [r2, #4]
	return api->port_get_raw(port, value);
   501f8:	6883      	ldr	r3, [r0, #8]
   501fa:	a901      	add	r1, sp, #4
   501fc:	685b      	ldr	r3, [r3, #4]
   501fe:	4798      	blx	r3
	if (ret == 0) {
   50200:	b948      	cbnz	r0, 50216 <kscan_direct_read+0xb6>
		*value ^= data->invert;
   50202:	f8db 2000 	ldr.w	r2, [fp]
   50206:	9b01      	ldr	r3, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   50208:	fa09 f707 	lsl.w	r7, r9, r7
		*value ^= data->invert;
   5020c:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   5020e:	423b      	tst	r3, r7
   50210:	bf14      	ite	ne
   50212:	2001      	movne	r0, #1
   50214:	2000      	moveq	r0, #0
        debounce_update(&data->pin_state[i], active, config->debounce_scan_period_ms,
   50216:	f8d8 7048 	ldr.w	r7, [r8, #72]	; 0x48
   5021a:	6922      	ldr	r2, [r4, #16]
   5021c:	1e01      	subs	r1, r0, #0
   5021e:	4653      	mov	r3, sl
   50220:	eb07 0045 	add.w	r0, r7, r5, lsl #1
   50224:	bf18      	it	ne
   50226:	2101      	movne	r1, #1
   50228:	f7ff feef 	bl	5000a <debounce_update>
    for (int i = 0; i < config->inputs.len; i++) {
   5022c:	3501      	adds	r5, #1
   5022e:	e7a2      	b.n	50176 <kscan_direct_read+0x16>
        struct debounce_state *state = &data->pin_state[i];
   50230:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
   50234:	eb03 0a49 	add.w	sl, r3, r9, lsl #1
        if (debounce_get_changed(state)) {
   50238:	4650      	mov	r0, sl
   5023a:	f7ff ff1e 	bl	5007a <debounce_get_changed>
   5023e:	b948      	cbnz	r0, 50254 <kscan_direct_read+0xf4>
        continue_scan = continue_scan || debounce_is_active(state);
   50240:	2d00      	cmp	r5, #0
   50242:	d13c      	bne.n	502be <kscan_direct_read+0x15e>
   50244:	4650      	mov	r0, sl
   50246:	f7ff ff0c 	bl	50062 <debounce_is_active>
   5024a:	f000 0501 	and.w	r5, r0, #1
    for (int i = 0; i < config->inputs.len; i++) {
   5024e:	f109 0901 	add.w	r9, r9, #1
   50252:	e796      	b.n	50182 <kscan_direct_read+0x22>
            const bool pressed = debounce_is_pressed(state);
   50254:	4650      	mov	r0, sl
   50256:	f7ff ff0c 	bl	50072 <debounce_is_pressed>
            data->callback(dev, 0, i, pressed);
   5025a:	f8d8 c004 	ldr.w	ip, [r8, #4]
   5025e:	4603      	mov	r3, r0
            const bool pressed = debounce_is_pressed(state);
   50260:	4607      	mov	r7, r0
            data->callback(dev, 0, i, pressed);
   50262:	464a      	mov	r2, r9
   50264:	2100      	movs	r1, #0
   50266:	4630      	mov	r0, r6
   50268:	47e0      	blx	ip
            if (config->toggle_mode && pressed) {
   5026a:	7e23      	ldrb	r3, [r4, #24]
   5026c:	2b00      	cmp	r3, #0
   5026e:	d0e7      	beq.n	50240 <kscan_direct_read+0xe0>
   50270:	2f00      	cmp	r7, #0
   50272:	d0e5      	beq.n	50240 <kscan_direct_read+0xe0>
                kscan_inputs_set_flags(&config->inputs, &config->inputs.gpios[i]);
   50274:	6823      	ldr	r3, [r4, #0]
    for (int i = 0; i < inputs->len; i++) {
   50276:	2700      	movs	r7, #0
                kscan_inputs_set_flags(&config->inputs, &config->inputs.gpios[i]);
   50278:	eb03 0bc9 	add.w	fp, r3, r9, lsl #3
    for (int i = 0; i < inputs->len; i++) {
   5027c:	6863      	ldr	r3, [r4, #4]
   5027e:	429f      	cmp	r7, r3
   50280:	d2de      	bcs.n	50240 <kscan_direct_read+0xe0>
        extra_flags = GPIO_INPUT | kscan_gpio_get_extra_flags(&inputs->gpios[i],
   50282:	6821      	ldr	r1, [r4, #0]
   50284:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    if (!active) {
   50288:	459b      	cmp	fp, r3
   5028a:	795a      	ldrb	r2, [r3, #5]
        extra_flags = GPIO_INPUT | kscan_gpio_get_extra_flags(&inputs->gpios[i],
   5028c:	ea4f 00c7 	mov.w	r0, r7, lsl #3
    if (!active) {
   50290:	d012      	beq.n	502b8 <kscan_direct_read+0x158>
        return ((BIT(0) & gpio->dt_flags) ? GPIO_PULL_UP : GPIO_PULL_DOWN);
   50292:	f012 0f01 	tst.w	r2, #1
   50296:	bf0c      	ite	eq
   50298:	f04f 0c20 	moveq.w	ip, #32
   5029c:	f04f 0c10 	movne.w	ip, #16
	return gpio_pin_configure(spec->port,
   502a0:	5808      	ldr	r0, [r1, r0]
				  spec->pin,
   502a2:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   502a4:	ea42 020c 	orr.w	r2, r2, ip
   502a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   502ac:	f7ff fee9 	bl	50082 <z_impl_gpio_pin_configure>
        if (err) {
   502b0:	2800      	cmp	r0, #0
   502b2:	d1c5      	bne.n	50240 <kscan_direct_read+0xe0>
    for (int i = 0; i < inputs->len; i++) {
   502b4:	3701      	adds	r7, #1
   502b6:	e7e1      	b.n	5027c <kscan_direct_read+0x11c>
    return 0;
   502b8:	f04f 0c00 	mov.w	ip, #0
   502bc:	e7f0      	b.n	502a0 <kscan_direct_read+0x140>
        continue_scan = continue_scan || debounce_is_active(state);
   502be:	2001      	movs	r0, #1
   502c0:	e7c3      	b.n	5024a <kscan_direct_read+0xea>
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   502c2:	f06f 0201 	mvn.w	r2, #1
   502c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   502ca:	e786      	b.n	501da <kscan_direct_read+0x7a>
    return kscan_direct_interrupt_configure(dev, GPIO_INT_LEVEL_ACTIVE);
   502cc:	f44f 2198 	mov.w	r1, #311296	; 0x4c000
   502d0:	f7ff fef9 	bl	500c6 <kscan_direct_interrupt_configure.isra.0>
   502d4:	e784      	b.n	501e0 <kscan_direct_read+0x80>

000502d6 <kscan_direct_enable>:
static int kscan_direct_enable(const struct device *dev) {
   502d6:	b570      	push	{r4, r5, r6, lr}
    struct kscan_direct_data *data = dev->data;
   502d8:	6906      	ldr	r6, [r0, #16]
static int kscan_direct_enable(const struct device *dev) {
   502da:	4604      	mov	r4, r0
   502dc:	f000 fc48 	bl	50b70 <z_impl_k_uptime_ticks>
   502e0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   502e4:	fba0 3205 	umull	r3, r2, r0, r5
   502e8:	fb05 2101 	mla	r1, r5, r1, r2
   502ec:	0bdb      	lsrs	r3, r3, #15
   502ee:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   502f2:	0bc9      	lsrs	r1, r1, #15
    data->scan_time = k_uptime_get();
   502f4:	e9c6 3110 	strd	r3, r1, [r6, #64]	; 0x40
    return kscan_direct_read(dev);
   502f8:	4620      	mov	r0, r4
}
   502fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return kscan_direct_read(dev);
   502fe:	f7ff bf2f 	b.w	50160 <kscan_direct_read>

00050302 <kscan_direct_work_handler>:
    kscan_direct_read(data->dev);
   50302:	f850 0c08 	ldr.w	r0, [r0, #-8]
   50306:	f7ff bf2b 	b.w	50160 <kscan_direct_read>

0005030a <kscan_direct_disable>:
static int kscan_direct_disable(const struct device *dev) {
   5030a:	b510      	push	{r4, lr}
   5030c:	4604      	mov	r4, r0
    k_work_cancel_delayable(&data->work);
   5030e:	6900      	ldr	r0, [r0, #16]
   50310:	3008      	adds	r0, #8
   50312:	f000 fa99 	bl	50848 <k_work_cancel_delayable>
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   50316:	6860      	ldr	r0, [r4, #4]
   50318:	f44f 5100 	mov.w	r1, #8192	; 0x2000
}
   5031c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return kscan_direct_interrupt_configure(dev, GPIO_INT_DISABLE);
   50320:	f7ff bed1 	b.w	500c6 <kscan_direct_interrupt_configure.isra.0>

00050324 <battery_channel_get>:

#include "battery_common.h"

int battery_channel_get(const struct battery_value *value, enum sensor_channel chan,
                        struct sensor_value *val_out) {
    switch (chan) {
   50324:	2927      	cmp	r1, #39	; 0x27
   50326:	d004      	beq.n	50332 <battery_channel_get+0xe>
   50328:	292c      	cmp	r1, #44	; 0x2c
   5032a:	d00f      	beq.n	5034c <battery_channel_get+0x28>
   5032c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   50330:	4770      	bx	lr
    case SENSOR_CHAN_GAUGE_VOLTAGE:
        val_out->val1 = value->millivolts / 1000;
   50332:	8843      	ldrh	r3, [r0, #2]
   50334:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   50338:	fbb3 f0f1 	udiv	r0, r3, r1
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   5033c:	fb01 3310 	mls	r3, r1, r0, r3
   50340:	b29b      	uxth	r3, r3
   50342:	434b      	muls	r3, r1
        val_out->val1 = value->millivolts / 1000;
   50344:	6010      	str	r0, [r2, #0]
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   50346:	6053      	str	r3, [r2, #4]

    default:
        return -ENOTSUP;
    }

    return 0;
   50348:	2000      	movs	r0, #0
        break;
   5034a:	4770      	bx	lr
        val_out->val1 = value->state_of_charge;
   5034c:	7903      	ldrb	r3, [r0, #4]
   5034e:	6013      	str	r3, [r2, #0]
        val_out->val2 = 0;
   50350:	2000      	movs	r0, #0
   50352:	6050      	str	r0, [r2, #4]
}
   50354:	4770      	bx	lr

00050356 <lithium_ion_mv_to_pct>:

uint8_t lithium_ion_mv_to_pct(int16_t bat_mv) {
    // Simple linear approximation of a battery based off adafruit's discharge graph:
    // https://learn.adafruit.com/li-ion-and-lipoly-batteries/voltages

    if (bat_mv >= 4200) {
   50356:	f241 0367 	movw	r3, #4199	; 0x1067
   5035a:	4298      	cmp	r0, r3
   5035c:	dc0a      	bgt.n	50374 <lithium_ion_mv_to_pct+0x1e>
        return 100;
    } else if (bat_mv <= 3450) {
   5035e:	f640 537a 	movw	r3, #3450	; 0xd7a
   50362:	4298      	cmp	r0, r3
   50364:	dd08      	ble.n	50378 <lithium_ion_mv_to_pct+0x22>
        return 0;
    }

    return bat_mv * 2 / 15 - 459;
   50366:	230f      	movs	r3, #15
   50368:	0040      	lsls	r0, r0, #1
   5036a:	fbb0 f0f3 	udiv	r0, r0, r3
   5036e:	3035      	adds	r0, #53	; 0x35
   50370:	b2c0      	uxtb	r0, r0
   50372:	4770      	bx	lr
        return 100;
   50374:	2064      	movs	r0, #100	; 0x64
   50376:	4770      	bx	lr
        return 0;
   50378:	2000      	movs	r0, #0
   5037a:	4770      	bx	lr

0005037c <vddh_channel_get>:
    return battery_channel_get(&drv_data->value, chan, val);
   5037c:	6900      	ldr	r0, [r0, #16]
   5037e:	301c      	adds	r0, #28
   50380:	f7ff bfd0 	b.w	50324 <battery_channel_get>

00050384 <z_device_state_init>:
}
   50384:	4770      	bx	lr

00050386 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   50386:	b138      	cbz	r0, 50398 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   50388:	68c3      	ldr	r3, [r0, #12]
   5038a:	8818      	ldrh	r0, [r3, #0]
   5038c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   50390:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   50394:	4258      	negs	r0, r3
   50396:	4158      	adcs	r0, r3
}
   50398:	4770      	bx	lr

0005039a <arch_system_halt>:
	__asm__ volatile(
   5039a:	f04f 0220 	mov.w	r2, #32
   5039e:	f3ef 8311 	mrs	r3, BASEPRI
   503a2:	f382 8812 	msr	BASEPRI_MAX, r2
   503a6:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   503aa:	e7fe      	b.n	503aa <arch_system_halt+0x10>

000503ac <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   503ac:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   503ae:	f7ff fff4 	bl	5039a <arch_system_halt>

000503b2 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   503b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   503b4:	4605      	mov	r5, r0
   503b6:	460e      	mov	r6, r1
   503b8:	f04f 0320 	mov.w	r3, #32
   503bc:	f3ef 8711 	mrs	r7, BASEPRI
   503c0:	f383 8812 	msr	BASEPRI_MAX, r3
   503c4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   503c8:	f7f8 f914 	bl	485f4 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   503cc:	4631      	mov	r1, r6
   503ce:	4604      	mov	r4, r0
   503d0:	4628      	mov	r0, r5
   503d2:	f7ff ffeb 	bl	503ac <k_sys_fatal_error_handler>
	__asm__ volatile(
   503d6:	f387 8811 	msr	BASEPRI, r7
   503da:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   503de:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   503e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   503e4:	f7dc bb82 	b.w	2caec <z_impl_k_thread_abort>

000503e8 <k_heap_init>:
{
   503e8:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   503ea:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   503ee:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   503f2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   503f4:	f7f9 bbf7 	b.w	49be6 <sys_heap_init>

000503f8 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   503f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   503fc:	b085      	sub	sp, #20
   503fe:	4606      	mov	r6, r0
   50400:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   50402:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   50406:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   50408:	f000 fbb8 	bl	50b7c <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   5040c:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   50410:	4605      	mov	r5, r0
   50412:	460f      	mov	r7, r1
	__asm__ volatile(
   50414:	f04f 0320 	mov.w	r3, #32
   50418:	f3ef 8411 	mrs	r4, BASEPRI
   5041c:	f383 8812 	msr	BASEPRI_MAX, r3
   50420:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   50424:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   50428:	464a      	mov	r2, r9
   5042a:	4641      	mov	r1, r8
   5042c:	4630      	mov	r0, r6
   5042e:	f7f9 fb73 	bl	49b18 <sys_heap_aligned_alloc>
   50432:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   50434:	f7f8 fa92 	bl	4895c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   50438:	9b03      	ldr	r3, [sp, #12]
   5043a:	b13b      	cbz	r3, 5044c <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   5043c:	f384 8811 	msr	BASEPRI, r4
   50440:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   50444:	4618      	mov	r0, r3
   50446:	b005      	add	sp, #20
   50448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   5044c:	1a28      	subs	r0, r5, r0
   5044e:	eb67 0101 	sbc.w	r1, r7, r1
   50452:	2801      	cmp	r0, #1
   50454:	f171 0200 	sbcs.w	r2, r1, #0
   50458:	dbf0      	blt.n	5043c <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   5045a:	e9cd 0100 	strd	r0, r1, [sp]
   5045e:	465a      	mov	r2, fp
   50460:	4621      	mov	r1, r4
   50462:	4650      	mov	r0, sl
   50464:	f7f7 ff76 	bl	48354 <z_pend_curr>
	__asm__ volatile(
   50468:	f04f 0320 	mov.w	r3, #32
   5046c:	f3ef 8411 	mrs	r4, BASEPRI
   50470:	f383 8812 	msr	BASEPRI_MAX, r3
   50474:	f3bf 8f6f 	isb	sy
   50478:	e7d6      	b.n	50428 <k_heap_aligned_alloc+0x30>

0005047a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   5047a:	b538      	push	{r3, r4, r5, lr}
   5047c:	4604      	mov	r4, r0
   5047e:	f04f 0320 	mov.w	r3, #32
   50482:	f3ef 8511 	mrs	r5, BASEPRI
   50486:	f383 8812 	msr	BASEPRI_MAX, r3
   5048a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   5048e:	f7f9 fb0b 	bl	49aa8 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   50492:	f104 000c 	add.w	r0, r4, #12
   50496:	f000 fafa 	bl	50a8e <z_unpend_all>
   5049a:	b130      	cbz	r0, 504aa <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   5049c:	4629      	mov	r1, r5
   5049e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   504a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   504a6:	f7f7 be07 	b.w	480b8 <z_reschedule>
	__asm__ volatile(
   504aa:	f385 8811 	msr	BASEPRI, r5
   504ae:	f3bf 8f6f 	isb	sy
}
   504b2:	bd38      	pop	{r3, r4, r5, pc}

000504b4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   504b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   504b6:	4604      	mov	r4, r0
   504b8:	460d      	mov	r5, r1
	__asm__ volatile(
   504ba:	f04f 0320 	mov.w	r3, #32
   504be:	f3ef 8611 	mrs	r6, BASEPRI
   504c2:	f383 8812 	msr	BASEPRI_MAX, r3
   504c6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   504ca:	6947      	ldr	r7, [r0, #20]
   504cc:	b977      	cbnz	r7, 504ec <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   504ce:	f000 fac6 	bl	50a5e <z_unpend_first_thread>

		if (pending_thread != NULL) {
   504d2:	b158      	cbz	r0, 504ec <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   504d4:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   504d6:	6142      	str	r2, [r0, #20]
   504d8:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   504da:	f000 fa50 	bl	5097e <z_ready_thread>
			z_reschedule(&slab->lock, key);
   504de:	4631      	mov	r1, r6
   504e0:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   504e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   504e8:	f7f7 bde6 	b.w	480b8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   504ec:	682b      	ldr	r3, [r5, #0]
   504ee:	6962      	ldr	r2, [r4, #20]
   504f0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   504f2:	682b      	ldr	r3, [r5, #0]
   504f4:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   504f6:	69a3      	ldr	r3, [r4, #24]
   504f8:	3b01      	subs	r3, #1
   504fa:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   504fc:	f386 8811 	msr	BASEPRI, r6
   50500:	f3bf 8f6f 	isb	sy
}
   50504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00050506 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   50506:	f3ef 8005 	mrs	r0, IPSR
}
   5050a:	3800      	subs	r0, #0
   5050c:	bf18      	it	ne
   5050e:	2001      	movne	r0, #1
   50510:	4770      	bx	lr

00050512 <z_impl_k_thread_name_set>:
}
   50512:	f06f 0057 	mvn.w	r0, #87	; 0x57
   50516:	4770      	bx	lr

00050518 <z_impl_k_thread_start>:
	z_sched_start(thread);
   50518:	f7f7 bec0 	b.w	4829c <z_sched_start>

0005051c <z_pm_save_idle_exit>:
{
   5051c:	b508      	push	{r3, lr}
	pm_system_resume();
   5051e:	f7db fe57 	bl	2c1d0 <pm_system_resume>
}
   50522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   50526:	f7ff bbfe 	b.w	4fd26 <sys_clock_idle_exit>

0005052a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   5052a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   5052e:	428b      	cmp	r3, r1
   50530:	d001      	beq.n	50536 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   50532:	f7f7 bf23 	b.w	4837c <z_set_prio>
}
   50536:	2000      	movs	r0, #0
   50538:	4770      	bx	lr

0005053a <z_impl_k_mutex_init>:
{
   5053a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   5053c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   5053e:	e9c3 0002 	strd	r0, r0, [r3, #8]
   50542:	e9c3 3300 	strd	r3, r3, [r3]
}
   50546:	4770      	bx	lr

00050548 <queue_insert>:
{
   50548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   5054c:	4699      	mov	r9, r3
   5054e:	4604      	mov	r4, r0
   50550:	f89d 3020 	ldrb.w	r3, [sp, #32]
   50554:	460d      	mov	r5, r1
   50556:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   50558:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   5055c:	f04f 0220 	mov.w	r2, #32
   50560:	f3ef 8711 	mrs	r7, BASEPRI
   50564:	f382 8812 	msr	BASEPRI_MAX, r2
   50568:	f3bf 8f6f 	isb	sy
	if (is_append) {
   5056c:	b103      	cbz	r3, 50570 <queue_insert+0x28>
	return list->tail;
   5056e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   50570:	4630      	mov	r0, r6
   50572:	f000 fa74 	bl	50a5e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   50576:	b158      	cbz	r0, 50590 <queue_insert+0x48>
   50578:	2400      	movs	r4, #0
   5057a:	67c4      	str	r4, [r0, #124]	; 0x7c
   5057c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   50580:	f000 f9fd 	bl	5097e <z_ready_thread>
	z_reschedule(&queue->lock, key);
   50584:	4630      	mov	r0, r6
   50586:	4639      	mov	r1, r7
   50588:	f7f7 fd96 	bl	480b8 <z_reschedule>
	return 0;
   5058c:	2000      	movs	r0, #0
   5058e:	e00c      	b.n	505aa <queue_insert+0x62>
	if (alloc) {
   50590:	f1b9 0f00 	cmp.w	r9, #0
   50594:	d01b      	beq.n	505ce <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   50596:	2108      	movs	r1, #8
   50598:	f7f8 fb1c 	bl	48bd4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   5059c:	b938      	cbnz	r0, 505ae <queue_insert+0x66>
	__asm__ volatile(
   5059e:	f387 8811 	msr	BASEPRI, r7
   505a2:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   505a6:	f06f 000b 	mvn.w	r0, #11
}
   505aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   505ae:	2201      	movs	r2, #1
		anode->data = data;
   505b0:	f8c0 8004 	str.w	r8, [r0, #4]
   505b4:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   505b6:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   505b8:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   505bc:	b95d      	cbnz	r5, 505d6 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   505be:	6822      	ldr	r2, [r4, #0]
   505c0:	430a      	orrs	r2, r1
   505c2:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   505c4:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   505c6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   505c8:	b972      	cbnz	r2, 505e8 <queue_insert+0xa0>
	list->tail = node;
   505ca:	6060      	str	r0, [r4, #4]
}
   505cc:	e00c      	b.n	505e8 <queue_insert+0xa0>
	node->next_and_flags = flags;
   505ce:	f8c8 9000 	str.w	r9, [r8]
}
   505d2:	4640      	mov	r0, r8
   505d4:	e7ef      	b.n	505b6 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   505d6:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   505d8:	f032 0203 	bics.w	r2, r2, #3
   505dc:	d110      	bne.n	50600 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   505de:	6001      	str	r1, [r0, #0]
	return list->tail;
   505e0:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   505e2:	b939      	cbnz	r1, 505f4 <queue_insert+0xac>
	list->head = node;
   505e4:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   505e8:	2104      	movs	r1, #4
   505ea:	f104 0010 	add.w	r0, r4, #16
   505ee:	f000 fc4b 	bl	50e88 <z_handle_obj_poll_events>
   505f2:	e7c7      	b.n	50584 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   505f4:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   505f6:	f002 0203 	and.w	r2, r2, #3
   505fa:	4302      	orrs	r2, r0
   505fc:	600a      	str	r2, [r1, #0]
   505fe:	e7e4      	b.n	505ca <queue_insert+0x82>
   50600:	430a      	orrs	r2, r1
   50602:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   50604:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   50606:	f002 0203 	and.w	r2, r2, #3
   5060a:	ea40 0302 	orr.w	r3, r0, r2
   5060e:	602b      	str	r3, [r5, #0]
}
   50610:	e7ea      	b.n	505e8 <queue_insert+0xa0>

00050612 <z_queue_node_peek>:
{
   50612:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   50614:	4604      	mov	r4, r0
   50616:	b130      	cbz	r0, 50626 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   50618:	6802      	ldr	r2, [r0, #0]
   5061a:	0793      	lsls	r3, r2, #30
   5061c:	d003      	beq.n	50626 <z_queue_node_peek+0x14>
		ret = anode->data;
   5061e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   50620:	b109      	cbz	r1, 50626 <z_queue_node_peek+0x14>
			k_free(anode);
   50622:	f000 fc52 	bl	50eca <k_free>
}
   50626:	4620      	mov	r0, r4
   50628:	bd10      	pop	{r4, pc}

0005062a <z_impl_k_queue_init>:
	list->head = NULL;
   5062a:	2300      	movs	r3, #0
	list->tail = NULL;
   5062c:	e9c0 3300 	strd	r3, r3, [r0]
   50630:	f100 0308 	add.w	r3, r0, #8
   50634:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   50638:	f100 0310 	add.w	r3, r0, #16
   5063c:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   50640:	4770      	bx	lr

00050642 <k_queue_append>:
{
   50642:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   50644:	2301      	movs	r3, #1
   50646:	9300      	str	r3, [sp, #0]
   50648:	2300      	movs	r3, #0
{
   5064a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   5064c:	4619      	mov	r1, r3
   5064e:	f7ff ff7b 	bl	50548 <queue_insert>
}
   50652:	b003      	add	sp, #12
   50654:	f85d fb04 	ldr.w	pc, [sp], #4

00050658 <k_queue_prepend>:
{
   50658:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   5065a:	2300      	movs	r3, #0
{
   5065c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   5065e:	9300      	str	r3, [sp, #0]
   50660:	4619      	mov	r1, r3
   50662:	f7ff ff71 	bl	50548 <queue_insert>
}
   50666:	b003      	add	sp, #12
   50668:	f85d fb04 	ldr.w	pc, [sp], #4

0005066c <k_queue_append_list>:
{
   5066c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   50670:	4605      	mov	r5, r0
   50672:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   50674:	460c      	mov	r4, r1
   50676:	b391      	cbz	r1, 506de <k_queue_append_list+0x72>
   50678:	b38a      	cbz	r2, 506de <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   5067a:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   5067e:	f04f 0320 	mov.w	r3, #32
   50682:	f3ef 8811 	mrs	r8, BASEPRI
   50686:	f383 8812 	msr	BASEPRI_MAX, r3
   5068a:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   5068e:	4638      	mov	r0, r7
   50690:	f000 f9e5 	bl	50a5e <z_unpend_first_thread>
   50694:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   50698:	b920      	cbnz	r0, 506a4 <k_queue_append_list+0x38>
	return list->tail;
   5069a:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   5069c:	b9ca      	cbnz	r2, 506d2 <k_queue_append_list+0x66>
	list->head = node;
   5069e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   506a0:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   506a2:	e00a      	b.n	506ba <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   506a4:	6144      	str	r4, [r0, #20]
   506a6:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   506aa:	f000 f968 	bl	5097e <z_ready_thread>
		head = *(void **)head;
   506ae:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   506b0:	4638      	mov	r0, r7
   506b2:	f000 f9d4 	bl	50a5e <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   506b6:	2c00      	cmp	r4, #0
   506b8:	d1ee      	bne.n	50698 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   506ba:	2104      	movs	r1, #4
   506bc:	f105 0010 	add.w	r0, r5, #16
   506c0:	f000 fbe2 	bl	50e88 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   506c4:	4638      	mov	r0, r7
   506c6:	4641      	mov	r1, r8
   506c8:	f7f7 fcf6 	bl	480b8 <z_reschedule>
	return 0;
   506cc:	2000      	movs	r0, #0
}
   506ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   506d2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   506d4:	f003 0303 	and.w	r3, r3, #3
   506d8:	4323      	orrs	r3, r4
   506da:	6013      	str	r3, [r2, #0]
}
   506dc:	e7e0      	b.n	506a0 <k_queue_append_list+0x34>
		return -EINVAL;
   506de:	f06f 0015 	mvn.w	r0, #21
   506e2:	e7f4      	b.n	506ce <k_queue_append_list+0x62>

000506e4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   506e4:	b15a      	cbz	r2, 506fe <z_impl_k_sem_init+0x1a>
   506e6:	428a      	cmp	r2, r1
   506e8:	d309      	bcc.n	506fe <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   506ea:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   506ee:	e9c0 1202 	strd	r1, r2, [r0, #8]
   506f2:	e9c0 0000 	strd	r0, r0, [r0]
   506f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   506fa:	2000      	movs	r0, #0
   506fc:	4770      	bx	lr
		return -EINVAL;
   506fe:	f06f 0015 	mvn.w	r0, #21
}
   50702:	4770      	bx	lr

00050704 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   50704:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   50706:	2301      	movs	r3, #1
   50708:	408b      	lsls	r3, r1
   5070a:	ea22 0303 	bic.w	r3, r2, r3
   5070e:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   50710:	fa22 f001 	lsr.w	r0, r2, r1
}
   50714:	f000 0001 	and.w	r0, r0, #1
   50718:	4770      	bx	lr

0005071a <unschedule_locked>:
{
   5071a:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   5071c:	2103      	movs	r1, #3
{
   5071e:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   50720:	300c      	adds	r0, #12
   50722:	f7ff ffef 	bl	50704 <flag_test_and_clear>
   50726:	4604      	mov	r4, r0
   50728:	b118      	cbz	r0, 50732 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   5072a:	f105 0010 	add.w	r0, r5, #16
   5072e:	f000 f9db 	bl	50ae8 <z_abort_timeout>
}
   50732:	4620      	mov	r0, r4
   50734:	bd38      	pop	{r3, r4, r5, pc}

00050736 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   50736:	b120      	cbz	r0, 50742 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   50738:	2200      	movs	r2, #0
   5073a:	4611      	mov	r1, r2
   5073c:	3088      	adds	r0, #136	; 0x88
   5073e:	f000 b9b6 	b.w	50aae <z_sched_wake>
}
   50742:	4770      	bx	lr

00050744 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   50744:	68c3      	ldr	r3, [r0, #12]
{
   50746:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   50748:	f3c3 0540 	ubfx	r5, r3, #1, #1
   5074c:	079b      	lsls	r3, r3, #30
{
   5074e:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   50750:	d416      	bmi.n	50780 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   50752:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   50754:	2102      	movs	r1, #2
   50756:	300c      	adds	r0, #12
   50758:	f7ff ffd4 	bl	50704 <flag_test_and_clear>
   5075c:	b180      	cbz	r0, 50780 <cancel_async_locked+0x3c>
	return list->head;
   5075e:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   50762:	b16a      	cbz	r2, 50780 <cancel_async_locked+0x3c>
   50764:	4294      	cmp	r4, r2
   50766:	d11b      	bne.n	507a0 <cancel_async_locked+0x5c>
	return node->next;
   50768:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   5076a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   5076e:	b98d      	cbnz	r5, 50794 <cancel_async_locked+0x50>
   50770:	428c      	cmp	r4, r1
	list->head = node;
   50772:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   50776:	d101      	bne.n	5077c <cancel_async_locked+0x38>
	list->tail = node;
   50778:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   5077c:	2300      	movs	r3, #0
   5077e:	6023      	str	r3, [r4, #0]
	return *flagp;
   50780:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   50782:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   50786:	bf1e      	ittt	ne
   50788:	f043 0302 	orrne.w	r3, r3, #2
   5078c:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   5078e:	f003 000f 	andne.w	r0, r3, #15
}
   50792:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   50794:	428c      	cmp	r4, r1
	parent->next = child;
   50796:	602a      	str	r2, [r5, #0]
	list->tail = node;
   50798:	bf08      	it	eq
   5079a:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   5079e:	e7ed      	b.n	5077c <cancel_async_locked+0x38>
	return node->next;
   507a0:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   507a2:	6812      	ldr	r2, [r2, #0]
   507a4:	e7dd      	b.n	50762 <cancel_async_locked+0x1e>

000507a6 <work_timeout>:
{
   507a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   507a8:	4604      	mov	r4, r0
   507aa:	f04f 0320 	mov.w	r3, #32
   507ae:	f3ef 8511 	mrs	r5, BASEPRI
   507b2:	f383 8812 	msr	BASEPRI_MAX, r3
   507b6:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   507ba:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   507bc:	f1a0 0610 	sub.w	r6, r0, #16
   507c0:	2103      	movs	r1, #3
   507c2:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   507c4:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   507c6:	f7ff ff9d 	bl	50704 <flag_test_and_clear>
   507ca:	b128      	cbz	r0, 507d8 <work_timeout+0x32>
		queue = dw->queue;
   507cc:	69a3      	ldr	r3, [r4, #24]
   507ce:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   507d0:	a901      	add	r1, sp, #4
   507d2:	4630      	mov	r0, r6
   507d4:	f7f7 fb38 	bl	47e48 <submit_to_queue_locked>
	__asm__ volatile(
   507d8:	f385 8811 	msr	BASEPRI, r5
   507dc:	f3bf 8f6f 	isb	sy
}
   507e0:	b002      	add	sp, #8
   507e2:	bd70      	pop	{r4, r5, r6, pc}

000507e4 <k_work_init>:
{
   507e4:	b538      	push	{r3, r4, r5, lr}
   507e6:	4604      	mov	r4, r0
   507e8:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   507ea:	2210      	movs	r2, #16
   507ec:	2100      	movs	r1, #0
   507ee:	f7fb f857 	bl	4b8a0 <memset>
   507f2:	6065      	str	r5, [r4, #4]
}
   507f4:	bd38      	pop	{r3, r4, r5, pc}

000507f6 <k_work_submit_to_queue>:
{
   507f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   507f8:	9001      	str	r0, [sp, #4]
   507fa:	4608      	mov	r0, r1
	__asm__ volatile(
   507fc:	f04f 0320 	mov.w	r3, #32
   50800:	f3ef 8511 	mrs	r5, BASEPRI
   50804:	f383 8812 	msr	BASEPRI_MAX, r3
   50808:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   5080c:	a901      	add	r1, sp, #4
   5080e:	f7f7 fb1b 	bl	47e48 <submit_to_queue_locked>
   50812:	4604      	mov	r4, r0
	__asm__ volatile(
   50814:	f385 8811 	msr	BASEPRI, r5
   50818:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   5081c:	2800      	cmp	r0, #0
   5081e:	dd04      	ble.n	5082a <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   50820:	f7f7 feee 	bl	48600 <z_impl_k_is_preempt_thread>
   50824:	b108      	cbz	r0, 5082a <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   50826:	f7f7 fe49 	bl	484bc <z_impl_k_yield>
}
   5082a:	4620      	mov	r0, r4
   5082c:	b003      	add	sp, #12
   5082e:	bd30      	pop	{r4, r5, pc}

00050830 <k_work_init_delayable>:
{
   50830:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   50832:	2230      	movs	r2, #48	; 0x30
{
   50834:	4604      	mov	r4, r0
   50836:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   50838:	2100      	movs	r1, #0
   5083a:	f7fb f831 	bl	4b8a0 <memset>
   5083e:	f44f 7380 	mov.w	r3, #256	; 0x100
   50842:	6065      	str	r5, [r4, #4]
   50844:	60e3      	str	r3, [r4, #12]
}
   50846:	bd38      	pop	{r3, r4, r5, pc}

00050848 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   50848:	b538      	push	{r3, r4, r5, lr}
   5084a:	4604      	mov	r4, r0
	__asm__ volatile(
   5084c:	f04f 0320 	mov.w	r3, #32
   50850:	f3ef 8511 	mrs	r5, BASEPRI
   50854:	f383 8812 	msr	BASEPRI_MAX, r3
   50858:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   5085c:	f7ff ff5d 	bl	5071a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   50860:	4620      	mov	r0, r4
   50862:	f7ff ff6f 	bl	50744 <cancel_async_locked>
	__asm__ volatile(
   50866:	f385 8811 	msr	BASEPRI, r5
   5086a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   5086e:	bd38      	pop	{r3, r4, r5, pc}

00050870 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   50870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   50872:	4604      	mov	r4, r0
   50874:	460d      	mov	r5, r1
	__asm__ volatile(
   50876:	f04f 0320 	mov.w	r3, #32
   5087a:	f3ef 8711 	mrs	r7, BASEPRI
   5087e:	f383 8812 	msr	BASEPRI_MAX, r3
   50882:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   50886:	68c3      	ldr	r3, [r0, #12]
   50888:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   5088c:	2b00      	cmp	r3, #0
   5088e:	bf14      	ite	ne
   50890:	2601      	movne	r6, #1
   50892:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   50894:	d009      	beq.n	508aa <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   50896:	f7ff ff40 	bl	5071a <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   5089a:	4620      	mov	r0, r4
   5089c:	f7ff ff52 	bl	50744 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   508a0:	4629      	mov	r1, r5
   508a2:	4620      	mov	r0, r4
   508a4:	f7f7 fab2 	bl	47e0c <cancel_sync_locked>
   508a8:	4603      	mov	r3, r0
	__asm__ volatile(
   508aa:	f387 8811 	msr	BASEPRI, r7
   508ae:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   508b2:	b13b      	cbz	r3, 508c4 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   508b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   508b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   508bc:	f105 0008 	add.w	r0, r5, #8
   508c0:	f7f7 f9c2 	bl	47c48 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   508c4:	4630      	mov	r0, r6
   508c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000508c8 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   508c8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   508cc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   508ce:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   508d0:	2300      	movs	r3, #0
	node->prev = NULL;
   508d2:	e9c0 3300 	strd	r3, r3, [r0]
}
   508d6:	4770      	bx	lr

000508d8 <unpend_thread_no_timeout>:
{
   508d8:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   508da:	f7ff fff5 	bl	508c8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   508de:	7b43      	ldrb	r3, [r0, #13]
   508e0:	f023 0302 	bic.w	r3, r3, #2
   508e4:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   508e6:	2300      	movs	r3, #0
   508e8:	6083      	str	r3, [r0, #8]
}
   508ea:	bd08      	pop	{r3, pc}

000508ec <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   508ec:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   508f0:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   508f4:	4283      	cmp	r3, r0
		return b2 - b1;
   508f6:	bf14      	ite	ne
   508f8:	1ac0      	subne	r0, r0, r3
	return 0;
   508fa:	2000      	moveq	r0, #0
}
   508fc:	4770      	bx	lr

000508fe <z_unpend_thread_no_timeout>:
{
   508fe:	b508      	push	{r3, lr}
	__asm__ volatile(
   50900:	f04f 0320 	mov.w	r3, #32
   50904:	f3ef 8111 	mrs	r1, BASEPRI
   50908:	f383 8812 	msr	BASEPRI_MAX, r3
   5090c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   50910:	f7ff ffe2 	bl	508d8 <unpend_thread_no_timeout>
	__asm__ volatile(
   50914:	f381 8811 	msr	BASEPRI, r1
   50918:	f3bf 8f6f 	isb	sy
}
   5091c:	bd08      	pop	{r3, pc}

0005091e <z_unpend_thread>:
{
   5091e:	b510      	push	{r4, lr}
	__asm__ volatile(
   50920:	f04f 0320 	mov.w	r3, #32
   50924:	f3ef 8411 	mrs	r4, BASEPRI
   50928:	f383 8812 	msr	BASEPRI_MAX, r3
   5092c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   50930:	f7ff ffd2 	bl	508d8 <unpend_thread_no_timeout>
	__asm__ volatile(
   50934:	f384 8811 	msr	BASEPRI, r4
   50938:	f3bf 8f6f 	isb	sy
}
   5093c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   50940:	3018      	adds	r0, #24
   50942:	f000 b8d1 	b.w	50ae8 <z_abort_timeout>

00050946 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   50946:	4603      	mov	r3, r0
   50948:	b920      	cbnz	r0, 50954 <z_reschedule_irqlock+0xe>
   5094a:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   5094e:	b90a      	cbnz	r2, 50954 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   50950:	f7db bf1a 	b.w	2c788 <arch_swap>
   50954:	f383 8811 	msr	BASEPRI, r3
   50958:	f3bf 8f6f 	isb	sy
}
   5095c:	4770      	bx	lr

0005095e <z_reschedule_unlocked>:
	__asm__ volatile(
   5095e:	f04f 0320 	mov.w	r3, #32
   50962:	f3ef 8011 	mrs	r0, BASEPRI
   50966:	f383 8812 	msr	BASEPRI_MAX, r3
   5096a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   5096e:	f7ff bfea 	b.w	50946 <z_reschedule_irqlock>

00050972 <z_priq_dumb_best>:
{
   50972:	4603      	mov	r3, r0
	return list->head == list;
   50974:	6800      	ldr	r0, [r0, #0]
}
   50976:	4283      	cmp	r3, r0
   50978:	bf08      	it	eq
   5097a:	2000      	moveq	r0, #0
   5097c:	4770      	bx	lr

0005097e <z_ready_thread>:
{
   5097e:	b510      	push	{r4, lr}
   50980:	f04f 0320 	mov.w	r3, #32
   50984:	f3ef 8411 	mrs	r4, BASEPRI
   50988:	f383 8812 	msr	BASEPRI_MAX, r3
   5098c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   50990:	f7f7 fc50 	bl	48234 <ready_thread>
	__asm__ volatile(
   50994:	f384 8811 	msr	BASEPRI, r4
   50998:	f3bf 8f6f 	isb	sy
}
   5099c:	bd10      	pop	{r4, pc}

0005099e <z_thread_timeout>:
{
   5099e:	b510      	push	{r4, lr}
   509a0:	4601      	mov	r1, r0
	__asm__ volatile(
   509a2:	f04f 0320 	mov.w	r3, #32
   509a6:	f3ef 8411 	mrs	r4, BASEPRI
   509aa:	f383 8812 	msr	BASEPRI_MAX, r3
   509ae:	f3bf 8f6f 	isb	sy
		if (!killed) {
   509b2:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   509b6:	f013 0f28 	tst.w	r3, #40	; 0x28
   509ba:	d10d      	bne.n	509d8 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   509bc:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   509c0:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   509c2:	b10b      	cbz	r3, 509c8 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   509c4:	f7ff ff88 	bl	508d8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   509c8:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   509cc:	f023 0314 	bic.w	r3, r3, #20
   509d0:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   509d4:	f7f7 fc2e 	bl	48234 <ready_thread>
	__asm__ volatile(
   509d8:	f384 8811 	msr	BASEPRI, r4
   509dc:	f3bf 8f6f 	isb	sy
}
   509e0:	bd10      	pop	{r4, pc}

000509e2 <add_to_waitq_locked>:
{
   509e2:	b538      	push	{r3, r4, r5, lr}
   509e4:	4604      	mov	r4, r0
   509e6:	460d      	mov	r5, r1
	unready_thread(thread);
   509e8:	f7f7 fc76 	bl	482d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   509ec:	7b63      	ldrb	r3, [r4, #13]
   509ee:	f043 0302 	orr.w	r3, r3, #2
   509f2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   509f4:	b18d      	cbz	r5, 50a1a <add_to_waitq_locked+0x38>
   509f6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   509f8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   509fa:	429d      	cmp	r5, r3
   509fc:	d014      	beq.n	50a28 <add_to_waitq_locked+0x46>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   509fe:	b19b      	cbz	r3, 50a28 <add_to_waitq_locked+0x46>
	int32_t b1 = thread_1->base.prio;
   50a00:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   50a04:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   50a08:	428a      	cmp	r2, r1
   50a0a:	d007      	beq.n	50a1c <add_to_waitq_locked+0x3a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   50a0c:	4291      	cmp	r1, r2
   50a0e:	dd05      	ble.n	50a1c <add_to_waitq_locked+0x3a>
	sys_dnode_t *const prev = successor->prev;
   50a10:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   50a12:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   50a16:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   50a18:	605c      	str	r4, [r3, #4]
}
   50a1a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   50a1c:	6869      	ldr	r1, [r5, #4]
   50a1e:	428b      	cmp	r3, r1
   50a20:	d002      	beq.n	50a28 <add_to_waitq_locked+0x46>
   50a22:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   50a24:	2b00      	cmp	r3, #0
   50a26:	d1ed      	bne.n	50a04 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   50a28:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   50a2a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   50a2e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   50a30:	606c      	str	r4, [r5, #4]
}
   50a32:	e7f2      	b.n	50a1a <add_to_waitq_locked+0x38>

00050a34 <z_unpend1_no_timeout>:
{
   50a34:	b510      	push	{r4, lr}
	__asm__ volatile(
   50a36:	f04f 0320 	mov.w	r3, #32
   50a3a:	f3ef 8411 	mrs	r4, BASEPRI
   50a3e:	f383 8812 	msr	BASEPRI_MAX, r3
   50a42:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   50a46:	f7ff ff94 	bl	50972 <z_priq_dumb_best>
		if (thread != NULL) {
   50a4a:	4601      	mov	r1, r0
   50a4c:	b108      	cbz	r0, 50a52 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   50a4e:	f7ff ff43 	bl	508d8 <unpend_thread_no_timeout>
	__asm__ volatile(
   50a52:	f384 8811 	msr	BASEPRI, r4
   50a56:	f3bf 8f6f 	isb	sy
}
   50a5a:	4608      	mov	r0, r1
   50a5c:	bd10      	pop	{r4, pc}

00050a5e <z_unpend_first_thread>:
{
   50a5e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   50a60:	f04f 0320 	mov.w	r3, #32
   50a64:	f3ef 8511 	mrs	r5, BASEPRI
   50a68:	f383 8812 	msr	BASEPRI_MAX, r3
   50a6c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   50a70:	f7ff ff7f 	bl	50972 <z_priq_dumb_best>
		if (thread != NULL) {
   50a74:	4604      	mov	r4, r0
   50a76:	b120      	cbz	r0, 50a82 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   50a78:	f7ff ff2e 	bl	508d8 <unpend_thread_no_timeout>
   50a7c:	3018      	adds	r0, #24
   50a7e:	f000 f833 	bl	50ae8 <z_abort_timeout>
	__asm__ volatile(
   50a82:	f385 8811 	msr	BASEPRI, r5
   50a86:	f3bf 8f6f 	isb	sy
}
   50a8a:	4620      	mov	r0, r4
   50a8c:	bd38      	pop	{r3, r4, r5, pc}

00050a8e <z_unpend_all>:
{
   50a8e:	b538      	push	{r3, r4, r5, lr}
   50a90:	4605      	mov	r5, r0
	int need_sched = 0;
   50a92:	2000      	movs	r0, #0
	return list->head == list;
   50a94:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   50a96:	42a5      	cmp	r5, r4
   50a98:	d000      	beq.n	50a9c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   50a9a:	b904      	cbnz	r4, 50a9e <z_unpend_all+0x10>
}
   50a9c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   50a9e:	4620      	mov	r0, r4
   50aa0:	f7ff ff3d 	bl	5091e <z_unpend_thread>
		z_ready_thread(thread);
   50aa4:	4620      	mov	r0, r4
   50aa6:	f7ff ff6a 	bl	5097e <z_ready_thread>
		need_sched = 1;
   50aaa:	2001      	movs	r0, #1
   50aac:	e7f2      	b.n	50a94 <z_unpend_all+0x6>

00050aae <z_sched_wake>:
{
   50aae:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   50ab0:	f04f 0320 	mov.w	r3, #32
   50ab4:	f3ef 8511 	mrs	r5, BASEPRI
   50ab8:	f383 8812 	msr	BASEPRI_MAX, r3
   50abc:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   50ac0:	f7ff ff57 	bl	50972 <z_priq_dumb_best>
		if (thread != NULL) {
   50ac4:	4604      	mov	r4, r0
   50ac6:	b150      	cbz	r0, 50ade <z_sched_wake+0x30>
   50ac8:	67c1      	str	r1, [r0, #124]	; 0x7c
   50aca:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   50acc:	f7ff ff04 	bl	508d8 <unpend_thread_no_timeout>
   50ad0:	3018      	adds	r0, #24
   50ad2:	f000 f809 	bl	50ae8 <z_abort_timeout>
			ready_thread(thread);
   50ad6:	4620      	mov	r0, r4
   50ad8:	f7f7 fbac 	bl	48234 <ready_thread>
			ret = true;
   50adc:	2001      	movs	r0, #1
	__asm__ volatile(
   50ade:	f385 8811 	msr	BASEPRI, r5
   50ae2:	f3bf 8f6f 	isb	sy
}
   50ae6:	bd38      	pop	{r3, r4, r5, pc}

00050ae8 <z_abort_timeout>:
{
   50ae8:	b510      	push	{r4, lr}
	__asm__ volatile(
   50aea:	f04f 0220 	mov.w	r2, #32
   50aee:	f3ef 8411 	mrs	r4, BASEPRI
   50af2:	f382 8812 	msr	BASEPRI_MAX, r2
   50af6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   50afa:	6803      	ldr	r3, [r0, #0]
   50afc:	b13b      	cbz	r3, 50b0e <z_abort_timeout+0x26>
			remove_timeout(to);
   50afe:	f7f7 fe3d 	bl	4877c <remove_timeout>
			ret = 0;
   50b02:	2000      	movs	r0, #0
	__asm__ volatile(
   50b04:	f384 8811 	msr	BASEPRI, r4
   50b08:	f3bf 8f6f 	isb	sy
}
   50b0c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   50b0e:	f06f 0015 	mvn.w	r0, #21
   50b12:	e7f7      	b.n	50b04 <z_abort_timeout+0x1c>

00050b14 <z_get_next_timeout_expiry>:
{
   50b14:	b510      	push	{r4, lr}
	__asm__ volatile(
   50b16:	f04f 0320 	mov.w	r3, #32
   50b1a:	f3ef 8411 	mrs	r4, BASEPRI
   50b1e:	f383 8812 	msr	BASEPRI_MAX, r3
   50b22:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   50b26:	f7f7 fe03 	bl	48730 <next_timeout>
	__asm__ volatile(
   50b2a:	f384 8811 	msr	BASEPRI, r4
   50b2e:	f3bf 8f6f 	isb	sy
}
   50b32:	bd10      	pop	{r4, pc}

00050b34 <z_set_timeout_expiry>:
{
   50b34:	b570      	push	{r4, r5, r6, lr}
   50b36:	4604      	mov	r4, r0
   50b38:	460d      	mov	r5, r1
	__asm__ volatile(
   50b3a:	f04f 0320 	mov.w	r3, #32
   50b3e:	f3ef 8611 	mrs	r6, BASEPRI
   50b42:	f383 8812 	msr	BASEPRI_MAX, r3
   50b46:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   50b4a:	f7f7 fdf1 	bl	48730 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   50b4e:	2801      	cmp	r0, #1
   50b50:	dd05      	ble.n	50b5e <z_set_timeout_expiry+0x2a>
   50b52:	42a0      	cmp	r0, r4
   50b54:	db03      	blt.n	50b5e <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   50b56:	4629      	mov	r1, r5
   50b58:	4620      	mov	r0, r4
   50b5a:	f7f4 fdc9 	bl	456f0 <sys_clock_set_timeout>
	__asm__ volatile(
   50b5e:	f386 8811 	msr	BASEPRI, r6
   50b62:	f3bf 8f6f 	isb	sy
}
   50b66:	bd70      	pop	{r4, r5, r6, pc}

00050b68 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   50b68:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   50b6a:	f7f7 fef7 	bl	4895c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   50b6e:	bd08      	pop	{r3, pc}

00050b70 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   50b70:	f7f7 bef4 	b.w	4895c <sys_clock_tick_get>

00050b74 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   50b74:	b108      	cbz	r0, 50b7a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   50b76:	f7dc b8c7 	b.w	2cd08 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   50b7a:	4770      	bx	lr

00050b7c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   50b7c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   50b80:	bf08      	it	eq
   50b82:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   50b86:	b538      	push	{r3, r4, r5, lr}
   50b88:	4605      	mov	r5, r0
   50b8a:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   50b8c:	d01d      	beq.n	50bca <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   50b8e:	ea51 0300 	orrs.w	r3, r1, r0
   50b92:	d103      	bne.n	50b9c <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   50b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   50b98:	f7f7 bee0 	b.w	4895c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   50b9c:	f06f 0301 	mvn.w	r3, #1
   50ba0:	1a18      	subs	r0, r3, r0
   50ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   50ba6:	eb63 0101 	sbc.w	r1, r3, r1
   50baa:	2900      	cmp	r1, #0
   50bac:	da0c      	bge.n	50bc8 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   50bae:	f7f7 fed5 	bl	4895c <sys_clock_tick_get>
   50bb2:	2d01      	cmp	r5, #1
   50bb4:	4622      	mov	r2, r4
   50bb6:	f174 0400 	sbcs.w	r4, r4, #0
   50bba:	462b      	mov	r3, r5
   50bbc:	bfbc      	itt	lt
   50bbe:	2301      	movlt	r3, #1
   50bc0:	2200      	movlt	r2, #0
   50bc2:	1818      	adds	r0, r3, r0
   50bc4:	eb41 0102 	adc.w	r1, r1, r2
}
   50bc8:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   50bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   50bce:	4601      	mov	r1, r0
   50bd0:	e7fa      	b.n	50bc8 <sys_clock_timeout_end_calc+0x4c>

00050bd2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   50bd2:	b510      	push	{r4, lr}
   50bd4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   50bd6:	f7ff ff87 	bl	50ae8 <z_abort_timeout>

	if (inactive) {
   50bda:	b9b0      	cbnz	r0, 50c0a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   50bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   50bde:	b10b      	cbz	r3, 50be4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   50be0:	4620      	mov	r0, r4
   50be2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   50be4:	f104 0018 	add.w	r0, r4, #24
   50be8:	f7ff ff24 	bl	50a34 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   50bec:	b168      	cbz	r0, 50c0a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   50bee:	f7ff fec6 	bl	5097e <z_ready_thread>
	__asm__ volatile(
   50bf2:	f04f 0320 	mov.w	r3, #32
   50bf6:	f3ef 8011 	mrs	r0, BASEPRI
   50bfa:	f383 8812 	msr	BASEPRI_MAX, r3
   50bfe:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   50c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   50c06:	f7ff be9e 	b.w	50946 <z_reschedule_irqlock>
   50c0a:	bd10      	pop	{r4, pc}

00050c0c <add_event>:
{
   50c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   50c0e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   50c10:	e9d0 1300 	ldrd	r1, r3, [r0]
   50c14:	4288      	cmp	r0, r1
   50c16:	4604      	mov	r4, r0
   50c18:	d00d      	beq.n	50c36 <add_event+0x2a>
	if ((pending == NULL) ||
   50c1a:	b163      	cbz	r3, 50c36 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   50c1c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   50c1e:	b100      	cbz	r0, 50c22 <add_event+0x16>
   50c20:	3860      	subs	r0, #96	; 0x60
   50c22:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   50c26:	4639      	mov	r1, r7
   50c28:	f7ff fe60 	bl	508ec <z_sched_prio_cmp>
	if ((pending == NULL) ||
   50c2c:	2800      	cmp	r0, #0
   50c2e:	dc02      	bgt.n	50c36 <add_event+0x2a>
	return list->head == list;
   50c30:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   50c32:	42b4      	cmp	r4, r6
   50c34:	d109      	bne.n	50c4a <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   50c36:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   50c38:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   50c3c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   50c3e:	6065      	str	r5, [r4, #4]
}
   50c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   50c42:	6863      	ldr	r3, [r4, #4]
   50c44:	42b3      	cmp	r3, r6
   50c46:	d0f6      	beq.n	50c36 <add_event+0x2a>
   50c48:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   50c4a:	2e00      	cmp	r6, #0
   50c4c:	d0f3      	beq.n	50c36 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   50c4e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   50c50:	b101      	cbz	r1, 50c54 <add_event+0x48>
   50c52:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   50c54:	4638      	mov	r0, r7
   50c56:	f7ff fe49 	bl	508ec <z_sched_prio_cmp>
   50c5a:	2800      	cmp	r0, #0
   50c5c:	ddf1      	ble.n	50c42 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   50c5e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   50c60:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   50c64:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   50c66:	6075      	str	r5, [r6, #4]
			return;
   50c68:	e7ea      	b.n	50c40 <add_event+0x34>

00050c6a <register_events>:
{
   50c6a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   50c6e:	2500      	movs	r5, #0
{
   50c70:	468b      	mov	fp, r1
   50c72:	4614      	mov	r4, r2
   50c74:	461f      	mov	r7, r3
   50c76:	4682      	mov	sl, r0
	int events_registered = 0;
   50c78:	462e      	mov	r6, r5
	event->poller = NULL;
   50c7a:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   50c7c:	455d      	cmp	r5, fp
   50c7e:	db02      	blt.n	50c86 <register_events+0x1c>
}
   50c80:	4630      	mov	r0, r6
   50c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   50c86:	f04f 0320 	mov.w	r3, #32
   50c8a:	f3ef 8911 	mrs	r9, BASEPRI
   50c8e:	f383 8812 	msr	BASEPRI_MAX, r3
   50c92:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   50c96:	f89a 300d 	ldrb.w	r3, [sl, #13]
   50c9a:	f003 031f 	and.w	r3, r3, #31
   50c9e:	3b01      	subs	r3, #1
   50ca0:	2b07      	cmp	r3, #7
   50ca2:	d80f      	bhi.n	50cc4 <register_events+0x5a>
   50ca4:	e8df f003 	tbb	[pc, r3]
   50ca8:	0a0e041e 	.word	0x0a0e041e
   50cac:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   50cb0:	f8da 3010 	ldr.w	r3, [sl, #16]
   50cb4:	689b      	ldr	r3, [r3, #8]
   50cb6:	b12b      	cbz	r3, 50cc4 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   50cb8:	2302      	movs	r3, #2
   50cba:	e020      	b.n	50cfe <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   50cbc:	f8da 3010 	ldr.w	r3, [sl, #16]
   50cc0:	681b      	ldr	r3, [r3, #0]
   50cc2:	bb8b      	cbnz	r3, 50d28 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   50cc4:	bb47      	cbnz	r7, 50d18 <register_events+0xae>
   50cc6:	7823      	ldrb	r3, [r4, #0]
   50cc8:	b333      	cbz	r3, 50d18 <register_events+0xae>
	switch (event->type) {
   50cca:	f89a 300d 	ldrb.w	r3, [sl, #13]
   50cce:	f003 031f 	and.w	r3, r3, #31
   50cd2:	3b01      	subs	r3, #1
   50cd4:	2b07      	cmp	r3, #7
   50cd6:	d830      	bhi.n	50d3a <register_events+0xd0>
   50cd8:	e8df f003 	tbb	[pc, r3]
   50cdc:	282f2833 	.word	0x282f2833
   50ce0:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   50ce4:	f8da 3010 	ldr.w	r3, [sl, #16]
   50ce8:	689b      	ldr	r3, [r3, #8]
   50cea:	2b00      	cmp	r3, #0
   50cec:	d0ea      	beq.n	50cc4 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   50cee:	2301      	movs	r3, #1
   50cf0:	e005      	b.n	50cfe <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   50cf2:	f8da 3010 	ldr.w	r3, [sl, #16]
   50cf6:	6a1b      	ldr	r3, [r3, #32]
   50cf8:	2b00      	cmp	r3, #0
   50cfa:	d0e3      	beq.n	50cc4 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   50cfc:	2310      	movs	r3, #16
	event->state |= state;
   50cfe:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   50d02:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   50d06:	f3c2 3145 	ubfx	r1, r2, #13, #6
   50d0a:	430b      	orrs	r3, r1
   50d0c:	f363 3252 	bfi	r2, r3, #13, #6
   50d10:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   50d14:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   50d18:	f389 8811 	msr	BASEPRI, r9
   50d1c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   50d20:	3501      	adds	r5, #1
   50d22:	f10a 0a14 	add.w	sl, sl, #20
   50d26:	e7a9      	b.n	50c7c <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   50d28:	2304      	movs	r3, #4
   50d2a:	e7e8      	b.n	50cfe <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   50d2c:	f8da 0010 	ldr.w	r0, [sl, #16]
   50d30:	4622      	mov	r2, r4
   50d32:	4651      	mov	r1, sl
   50d34:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   50d36:	f7ff ff69 	bl	50c0c <add_event>
	event->poller = poller;
   50d3a:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   50d3e:	3601      	adds	r6, #1
   50d40:	e7ea      	b.n	50d18 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   50d42:	f8da 0010 	ldr.w	r0, [sl, #16]
   50d46:	4622      	mov	r2, r4
   50d48:	4651      	mov	r1, sl
   50d4a:	e7f4      	b.n	50d36 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   50d4c:	f8da 0010 	ldr.w	r0, [sl, #16]
   50d50:	4622      	mov	r2, r4
   50d52:	4651      	mov	r1, sl
   50d54:	3024      	adds	r0, #36	; 0x24
   50d56:	e7ee      	b.n	50d36 <register_events+0xcc>

00050d58 <signal_poll_event>:
{
   50d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   50d5c:	6884      	ldr	r4, [r0, #8]
{
   50d5e:	4605      	mov	r5, r0
   50d60:	460e      	mov	r6, r1
	if (poller != NULL) {
   50d62:	b144      	cbz	r4, 50d76 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   50d64:	7863      	ldrb	r3, [r4, #1]
   50d66:	2b01      	cmp	r3, #1
   50d68:	d136      	bne.n	50dd8 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   50d6a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   50d6e:	f013 0302 	ands.w	r3, r3, #2
   50d72:	d10a      	bne.n	50d8a <signal_poll_event+0x32>
		poller->is_polling = false;
   50d74:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   50d76:	68eb      	ldr	r3, [r5, #12]
   50d78:	f3c3 3245 	ubfx	r2, r3, #13, #6
   50d7c:	4316      	orrs	r6, r2
	event->poller = NULL;
   50d7e:	2000      	movs	r0, #0
	event->state |= state;
   50d80:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   50d84:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   50d86:	60eb      	str	r3, [r5, #12]
	return retcode;
   50d88:	e00b      	b.n	50da2 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   50d8a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   50d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   50d92:	bf08      	it	eq
   50d94:	f112 0f02 	cmneq.w	r2, #2
   50d98:	d105      	bne.n	50da6 <signal_poll_event+0x4e>
		poller->is_polling = false;
   50d9a:	2300      	movs	r3, #0
   50d9c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   50d9e:	f06f 000a 	mvn.w	r0, #10
}
   50da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   50da6:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   50daa:	4640      	mov	r0, r8
   50dac:	f7ff fdb7 	bl	5091e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   50db0:	2e08      	cmp	r6, #8
   50db2:	bf0c      	ite	eq
   50db4:	f06f 0303 	mvneq.w	r3, #3
   50db8:	2300      	movne	r3, #0
   50dba:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   50dbc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   50dc0:	06db      	lsls	r3, r3, #27
   50dc2:	d102      	bne.n	50dca <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   50dc4:	f854 7c48 	ldr.w	r7, [r4, #-72]
   50dc8:	b10f      	cbz	r7, 50dce <signal_poll_event+0x76>
		poller->is_polling = false;
   50dca:	2300      	movs	r3, #0
   50dcc:	e7d2      	b.n	50d74 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   50dce:	4640      	mov	r0, r8
   50dd0:	f7ff fdd5 	bl	5097e <z_ready_thread>
		poller->is_polling = false;
   50dd4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   50dd6:	e7ce      	b.n	50d76 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   50dd8:	2b02      	cmp	r3, #2
   50dda:	d1f6      	bne.n	50dca <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   50ddc:	7823      	ldrb	r3, [r4, #0]
   50dde:	2b00      	cmp	r3, #0
   50de0:	d0c9      	beq.n	50d76 <signal_poll_event+0x1e>
   50de2:	f854 7c04 	ldr.w	r7, [r4, #-4]
   50de6:	2f00      	cmp	r7, #0
   50de8:	d0f4      	beq.n	50dd4 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   50dea:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   50dee:	f1a4 0914 	sub.w	r9, r4, #20
   50df2:	f104 0014 	add.w	r0, r4, #20
   50df6:	f7ff fe77 	bl	50ae8 <z_abort_timeout>
		twork->poll_result = 0;
   50dfa:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   50dfe:	4649      	mov	r1, r9
   50e00:	4638      	mov	r0, r7
   50e02:	f7ff fcf8 	bl	507f6 <k_work_submit_to_queue>
		poller->is_polling = false;
   50e06:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   50e0a:	e7b4      	b.n	50d76 <signal_poll_event+0x1e>

00050e0c <clear_event_registrations>:
	while (num_events--) {
   50e0c:	2314      	movs	r3, #20
{
   50e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
   50e10:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   50e14:	2400      	movs	r4, #0
	switch (event->type) {
   50e16:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   50e1a:	b901      	cbnz	r1, 50e1e <clear_event_registrations+0x12>
}
   50e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   50e1e:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   50e22:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   50e26:	f003 031f 	and.w	r3, r3, #31
   50e2a:	2b08      	cmp	r3, #8
   50e2c:	f1a0 0714 	sub.w	r7, r0, #20
   50e30:	d80c      	bhi.n	50e4c <clear_event_registrations+0x40>
   50e32:	fa26 f303 	lsr.w	r3, r6, r3
   50e36:	07db      	lsls	r3, r3, #31
   50e38:	d508      	bpl.n	50e4c <clear_event_registrations+0x40>
	return node->next != NULL;
   50e3a:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   50e3e:	b12b      	cbz	r3, 50e4c <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   50e40:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   50e44:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   50e46:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   50e48:	e940 4405 	strd	r4, r4, [r0, #-20]
   50e4c:	f382 8811 	msr	BASEPRI, r2
   50e50:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   50e54:	f04f 0320 	mov.w	r3, #32
   50e58:	f3ef 8211 	mrs	r2, BASEPRI
   50e5c:	f383 8812 	msr	BASEPRI_MAX, r3
   50e60:	f3bf 8f6f 	isb	sy
   50e64:	3901      	subs	r1, #1
   50e66:	4638      	mov	r0, r7
   50e68:	e7d7      	b.n	50e1a <clear_event_registrations+0xe>

00050e6a <k_poll_event_init>:
{
   50e6a:	b510      	push	{r4, lr}
	event->type = type;
   50e6c:	04d2      	lsls	r2, r2, #19
   50e6e:	0209      	lsls	r1, r1, #8
   50e70:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   50e74:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   50e78:	430a      	orrs	r2, r1
   50e7a:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   50e7c:	2400      	movs	r4, #0
	event->type = type;
   50e7e:	430a      	orrs	r2, r1
	event->obj = obj;
   50e80:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   50e84:	6084      	str	r4, [r0, #8]
}
   50e86:	bd10      	pop	{r4, pc}

00050e88 <z_handle_obj_poll_events>:
{
   50e88:	4603      	mov	r3, r0
	return list->head == list;
   50e8a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   50e8c:	4283      	cmp	r3, r0
   50e8e:	d008      	beq.n	50ea2 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   50e90:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   50e94:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   50e96:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   50e98:	2300      	movs	r3, #0
	node->prev = NULL;
   50e9a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   50e9e:	f7ff bf5b 	b.w	50d58 <signal_poll_event>
}
   50ea2:	4770      	bx	lr

00050ea4 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   50ea4:	3204      	adds	r2, #4
{
   50ea6:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   50ea8:	4604      	mov	r4, r0
   50eaa:	d208      	bcs.n	50ebe <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   50eac:	2600      	movs	r6, #0
   50eae:	2700      	movs	r7, #0
   50eb0:	e9cd 6700 	strd	r6, r7, [sp]
   50eb4:	f041 0104 	orr.w	r1, r1, #4
   50eb8:	f7ff fa9e 	bl	503f8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   50ebc:	b910      	cbnz	r0, 50ec4 <z_heap_aligned_alloc+0x20>
		return NULL;
   50ebe:	2000      	movs	r0, #0
}
   50ec0:	b002      	add	sp, #8
   50ec2:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   50ec4:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   50ec8:	e7fa      	b.n	50ec0 <z_heap_aligned_alloc+0x1c>

00050eca <k_free>:
	if (ptr != NULL) {
   50eca:	b120      	cbz	r0, 50ed6 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   50ecc:	1f01      	subs	r1, r0, #4
   50ece:	f850 0c04 	ldr.w	r0, [r0, #-4]
   50ed2:	f7ff bad2 	b.w	5047a <k_heap_free>
}
   50ed6:	4770      	bx	lr

00050ed8 <k_malloc>:
{
   50ed8:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   50eda:	2004      	movs	r0, #4
   50edc:	f7f7 be6c 	b.w	48bb8 <k_aligned_alloc>

00050ee0 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   50ee0:	4770      	bx	lr
	...

00050ee4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   50ee4:	f7f4 bc5a 	b.w	4579c <SystemInit>
